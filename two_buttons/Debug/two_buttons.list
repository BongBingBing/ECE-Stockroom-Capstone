
two_buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f9c  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080030d8  080030d8  000040d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003248  08003248  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003248  08003248  00004248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003250  08003250  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003250  08003250  00004250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003254  08003254  00004254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003258  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000068  080032c0  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080032c0  00005224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000761c  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001813  00000000  00000000  0000c6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000557  00000000  00000000  0000e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163b7  00000000  00000000  0000eb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009671  00000000  00000000  00024ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086206  00000000  00000000  0002e557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b475d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d4  00000000  00000000  000b47a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000b6a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	080030c0 	.word	0x080030c0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	080030c0 	.word	0x080030c0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	@ 0x28
 800046c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4b31      	ldr	r3, [pc, #196]	@ (8000544 <MX_GPIO_Init+0xdc>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a30      	ldr	r2, [pc, #192]	@ (8000544 <MX_GPIO_Init+0xdc>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b2e      	ldr	r3, [pc, #184]	@ (8000544 <MX_GPIO_Init+0xdc>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 0304 	and.w	r3, r3, #4
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000496:	4b2b      	ldr	r3, [pc, #172]	@ (8000544 <MX_GPIO_Init+0xdc>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a2a      	ldr	r2, [pc, #168]	@ (8000544 <MX_GPIO_Init+0xdc>)
 800049c:	f043 0320 	orr.w	r3, r3, #32
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b28      	ldr	r3, [pc, #160]	@ (8000544 <MX_GPIO_Init+0xdc>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 0320 	and.w	r3, r3, #32
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b25      	ldr	r3, [pc, #148]	@ (8000544 <MX_GPIO_Init+0xdc>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a24      	ldr	r2, [pc, #144]	@ (8000544 <MX_GPIO_Init+0xdc>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b22      	ldr	r3, [pc, #136]	@ (8000544 <MX_GPIO_Init+0xdc>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000544 <MX_GPIO_Init+0xdc>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000544 <MX_GPIO_Init+0xdc>)
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000544 <MX_GPIO_Init+0xdc>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	4819      	ldr	r0, [pc, #100]	@ (8000548 <MX_GPIO_Init+0xe0>)
 80004e4:	f000 fe7d 	bl	80011e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4619      	mov	r1, r3
 80004fe:	4813      	ldr	r0, [pc, #76]	@ (800054c <MX_GPIO_Init+0xe4>)
 8000500:	f000 fcc8 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000504:	2320      	movs	r3, #32
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	480b      	ldr	r0, [pc, #44]	@ (8000548 <MX_GPIO_Init+0xe0>)
 800051c:	f000 fcba 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000520:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	4804      	ldr	r0, [pc, #16]	@ (8000548 <MX_GPIO_Init+0xe0>)
 8000536:	f000 fcad 	bl	8000e94 <HAL_GPIO_Init>

}
 800053a:	bf00      	nop
 800053c:	3728      	adds	r7, #40	@ 0x28
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	40020800 	.word	0x40020800

08000550 <_write>:
#define set_pin GPIO_PIN_10
#define set_port GPIOA
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
//Code to enable printf statements
	int _write(int file, char *data, int len) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	b29a      	uxth	r2, r3
 8000560:	f04f 33ff 	mov.w	r3, #4294967295
 8000564:	68b9      	ldr	r1, [r7, #8]
 8000566:	4804      	ldr	r0, [pc, #16]	@ (8000578 <_write+0x28>)
 8000568:	f001 fc9a 	bl	8001ea0 <HAL_UART_Transmit>
    return len;
 800056c:	687b      	ldr	r3, [r7, #4]
	}
 800056e:	4618      	mov	r0, r3
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	2000008c 	.word	0x2000008c

0800057c <incr_decr>:
GPIO_PinState button_state;
GPIO_PinState button_state_2;
GPIO_PinState last_state = GPIO_PIN_RESET;
GPIO_PinState last_state_2 = GPIO_PIN_RESET;

int incr_decr(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
	uint32_t press_time;
	uint32_t count;
	uint32_t DP_Threshold = 1000;
 8000582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000586:	60bb      	str	r3, [r7, #8]

	printf("We will add 5 to x\n\r");
 8000588:	482e      	ldr	r0, [pc, #184]	@ (8000644 <incr_decr+0xc8>)
 800058a:	f001 ff21 	bl	80023d0 <iprintf>
	HAL_Delay(500);
 800058e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000592:	f000 fb79 	bl	8000c88 <HAL_Delay>
	printf("Do you want to confirm? (Double press to confirm)\n\r");
 8000596:	482c      	ldr	r0, [pc, #176]	@ (8000648 <incr_decr+0xcc>)
 8000598:	f001 ff1a 	bl	80023d0 <iprintf>
	//button_state = HAL_GPIO_ReadPin(b_port, b_pin);
	HAL_Delay(500);
 800059c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a0:	f000 fb72 	bl	8000c88 <HAL_Delay>
	// this is for reading a double press from button 1
	while( HAL_GPIO_ReadPin(b_port, b_pin) == GPIO_PIN_RESET){
 80005a4:	bf00      	nop
 80005a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005aa:	4828      	ldr	r0, [pc, #160]	@ (800064c <incr_decr+0xd0>)
 80005ac:	f000 fe02 	bl	80011b4 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f7      	beq.n	80005a6 <incr_decr+0x2a>
		// stays turn until button 1 is pressed
	}
		printf("Button Pressed\n\r");
 80005b6:	4826      	ldr	r0, [pc, #152]	@ (8000650 <incr_decr+0xd4>)
 80005b8:	f001 ff0a 	bl	80023d0 <iprintf>
		count = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
		while( HAL_GPIO_ReadPin(b_port, b_pin) == GPIO_PIN_SET){
 80005c0:	bf00      	nop
 80005c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c6:	4821      	ldr	r0, [pc, #132]	@ (800064c <incr_decr+0xd0>)
 80005c8:	f000 fdf4 	bl	80011b4 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d0f7      	beq.n	80005c2 <incr_decr+0x46>
			// prevents the program from executing until button 1 is released
		}
		//HAL_Delay(500);
		 press_time = HAL_GetTick(); // the time when button 1 is pressed
 80005d2:	f000 fb4f 	bl	8000c74 <HAL_GetTick>
 80005d6:	6078      	str	r0, [r7, #4]
		 //if the press_count = 1 and the button is pressed again, it is a double press
			while(count == 1 && (HAL_GetTick() - press_time) <= DP_Threshold ){
 80005d8:	e01d      	b.n	8000616 <incr_decr+0x9a>
				//printf("In while loop\n\r");
				if (HAL_GPIO_ReadPin(b_port, b_pin) == GPIO_PIN_SET){
 80005da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005de:	481b      	ldr	r0, [pc, #108]	@ (800064c <incr_decr+0xd0>)
 80005e0:	f000 fde8 	bl	80011b4 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d115      	bne.n	8000616 <incr_decr+0x9a>
					printf("Double Press\n\r");
 80005ea:	481a      	ldr	r0, [pc, #104]	@ (8000654 <incr_decr+0xd8>)
 80005ec:	f001 fef0 	bl	80023d0 <iprintf>
					x+=5;
 80005f0:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <incr_decr+0xdc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3305      	adds	r3, #5
 80005f6:	4a18      	ldr	r2, [pc, #96]	@ (8000658 <incr_decr+0xdc>)
 80005f8:	6013      	str	r3, [r2, #0]
					HAL_Delay(500);
 80005fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005fe:	f000 fb43 	bl	8000c88 <HAL_Delay>
					printf("User wants to confirm\n\r");
 8000602:	4816      	ldr	r0, [pc, #88]	@ (800065c <incr_decr+0xe0>)
 8000604:	f001 fee4 	bl	80023d0 <iprintf>
					HAL_Delay(500);
 8000608:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800060c:	f000 fb3c 	bl	8000c88 <HAL_Delay>
					count = 0; // reset count
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
					break;
 8000614:	e00a      	b.n	800062c <incr_decr+0xb0>
			while(count == 1 && (HAL_GetTick() - press_time) <= DP_Threshold ){
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d107      	bne.n	800062c <incr_decr+0xb0>
 800061c:	f000 fb2a 	bl	8000c74 <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	429a      	cmp	r2, r3
 800062a:	d2d6      	bcs.n	80005da <incr_decr+0x5e>
				/*else {
					count = 0;
				}*/
		}
			// restart count if button 1 is pressed only once
			if (count == 1){
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d101      	bne.n	8000636 <incr_decr+0xba>
				count = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
			}
			return x;
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <incr_decr+0xdc>)
 8000638:	681b      	ldr	r3, [r3, #0]
	}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	080030d8 	.word	0x080030d8
 8000648:	080030f0 	.word	0x080030f0
 800064c:	40020000 	.word	0x40020000
 8000650:	08003124 	.word	0x08003124
 8000654:	08003138 	.word	0x08003138
 8000658:	20000084 	.word	0x20000084
 800065c:	08003148 	.word	0x08003148

08000660 <restart>:

// exact same code from the one above
int restart(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
	uint32_t press_time;
	uint32_t count;
	uint32_t DP_Threshold = 1000;
 8000666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066a:	60bb      	str	r3, [r7, #8]

	printf("We will reset the value of x\n\r");
 800066c:	482d      	ldr	r0, [pc, #180]	@ (8000724 <restart+0xc4>)
 800066e:	f001 feaf 	bl	80023d0 <iprintf>
	HAL_Delay(500);
 8000672:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000676:	f000 fb07 	bl	8000c88 <HAL_Delay>
	printf("Do you want to confirm? (Double press to confirm)\n\r");
 800067a:	482b      	ldr	r0, [pc, #172]	@ (8000728 <restart+0xc8>)
 800067c:	f001 fea8 	bl	80023d0 <iprintf>
	//button_state = HAL_GPIO_ReadPin(b_port, b_pin);
	HAL_Delay(500);
 8000680:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000684:	f000 fb00 	bl	8000c88 <HAL_Delay>
	// this is for reading a double press from button 1
	while( HAL_GPIO_ReadPin(set_port, set_pin) == GPIO_PIN_RESET){
 8000688:	bf00      	nop
 800068a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068e:	4827      	ldr	r0, [pc, #156]	@ (800072c <restart+0xcc>)
 8000690:	f000 fd90 	bl	80011b4 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f7      	beq.n	800068a <restart+0x2a>
		// stays turn until button 1 is pressed
	}
		printf("Button Pressed\n\r");
 800069a:	4825      	ldr	r0, [pc, #148]	@ (8000730 <restart+0xd0>)
 800069c:	f001 fe98 	bl	80023d0 <iprintf>
		count = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
		while( HAL_GPIO_ReadPin(set_port, set_pin) == GPIO_PIN_SET){
 80006a4:	bf00      	nop
 80006a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006aa:	4820      	ldr	r0, [pc, #128]	@ (800072c <restart+0xcc>)
 80006ac:	f000 fd82 	bl	80011b4 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d0f7      	beq.n	80006a6 <restart+0x46>
			// prevents the program from executing until button 1 is released
		}
		//HAL_Delay(500);
		 press_time = HAL_GetTick(); // the time when button 1 is pressed
 80006b6:	f000 fadd 	bl	8000c74 <HAL_GetTick>
 80006ba:	6078      	str	r0, [r7, #4]
		 //if the press_count = 1 and the button is pressed again, it is a double press
			while(count == 1 && (HAL_GetTick() - press_time) <= DP_Threshold ){
 80006bc:	e01b      	b.n	80006f6 <restart+0x96>
				//printf("In while loop\n\r");
				if (HAL_GPIO_ReadPin(set_port, set_pin) == GPIO_PIN_SET){
 80006be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c2:	481a      	ldr	r0, [pc, #104]	@ (800072c <restart+0xcc>)
 80006c4:	f000 fd76 	bl	80011b4 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d113      	bne.n	80006f6 <restart+0x96>
					printf("Double Press\n\r");
 80006ce:	4819      	ldr	r0, [pc, #100]	@ (8000734 <restart+0xd4>)
 80006d0:	f001 fe7e 	bl	80023d0 <iprintf>
					x = 0;
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <restart+0xd8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
					HAL_Delay(500);
 80006da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006de:	f000 fad3 	bl	8000c88 <HAL_Delay>
					printf("User wants to confirm\n\r");
 80006e2:	4816      	ldr	r0, [pc, #88]	@ (800073c <restart+0xdc>)
 80006e4:	f001 fe74 	bl	80023d0 <iprintf>
					HAL_Delay(500);
 80006e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ec:	f000 facc 	bl	8000c88 <HAL_Delay>
					count = 0; // reset count
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
					break;
 80006f4:	e00a      	b.n	800070c <restart+0xac>
			while(count == 1 && (HAL_GetTick() - press_time) <= DP_Threshold ){
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d107      	bne.n	800070c <restart+0xac>
 80006fc:	f000 faba 	bl	8000c74 <HAL_GetTick>
 8000700:	4602      	mov	r2, r0
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	429a      	cmp	r2, r3
 800070a:	d2d8      	bcs.n	80006be <restart+0x5e>
				/*else {
					count = 0;
				}*/
		}
			// restart count if button 1 is pressed only once
			if (count == 1){
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d101      	bne.n	8000716 <restart+0xb6>
				count = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
			}
			return x;
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <restart+0xd8>)
 8000718:	681b      	ldr	r3, [r3, #0]
	}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	08003160 	.word	0x08003160
 8000728:	080030f0 	.word	0x080030f0
 800072c:	40020000 	.word	0x40020000
 8000730:	08003124 	.word	0x08003124
 8000734:	08003138 	.word	0x08003138
 8000738:	20000084 	.word	0x20000084
 800073c:	08003148 	.word	0x08003148

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fa30 	bl	8000baa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f861 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f7ff fe8b 	bl	8000468 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000752:	f000 f997 	bl	8000a84 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t state = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
	  uint8_t state2 = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	73bb      	strb	r3, [r7, #14]
	//button_state = HAL_GPIO_ReadPin(b_port, b_pin);
	 if (x < 25){
 800075e:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <main+0xb8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b18      	cmp	r3, #24
 8000764:	dcf7      	bgt.n	8000756 <main+0x16>
	  printf("x is less than 25 still\n\r");
 8000766:	4825      	ldr	r0, [pc, #148]	@ (80007fc <main+0xbc>)
 8000768:	f001 fe32 	bl	80023d0 <iprintf>
	  HAL_Delay(100);
 800076c:	2064      	movs	r0, #100	@ 0x64
 800076e:	f000 fa8b 	bl	8000c88 <HAL_Delay>
	  printf("Press either button 1 or 2 to configure it\n\r");
 8000772:	4823      	ldr	r0, [pc, #140]	@ (8000800 <main+0xc0>)
 8000774:	f001 fe2c 	bl	80023d0 <iprintf>

	  while(1){
		  // if button 1 is pressed
	  if (HAL_GPIO_ReadPin(b_port, b_pin) == GPIO_PIN_SET){
 8000778:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800077c:	4821      	ldr	r0, [pc, #132]	@ (8000804 <main+0xc4>)
 800077e:	f000 fd19 	bl	80011b4 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b01      	cmp	r3, #1
 8000786:	d116      	bne.n	80007b6 <main+0x76>
			 HAL_Delay(500);
 8000788:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800078c:	f000 fa7c 	bl	8000c88 <HAL_Delay>
			 // calls function and sets it to y
			  int y = incr_decr();
 8000790:	f7ff fef4 	bl	800057c <incr_decr>
 8000794:	6078      	str	r0, [r7, #4]
			  HAL_Delay(500);
 8000796:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800079a:	f000 fa75 	bl	8000c88 <HAL_Delay>
			  // displays functions output and breaks from the if statement
				printf("%d\n\r",y);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	4819      	ldr	r0, [pc, #100]	@ (8000808 <main+0xc8>)
 80007a2:	f001 fe15 	bl	80023d0 <iprintf>
				 HAL_Delay(500);
 80007a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007aa:	f000 fa6d 	bl	8000c88 <HAL_Delay>
				  ++state;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	3301      	adds	r3, #1
 80007b2:	73fb      	strb	r3, [r7, #15]
				  break;
 80007b4:	e01f      	b.n	80007f6 <main+0xb6>
			  }
			  	 else{
			  		  state = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
			  	  }

		 // if button 2 is pressed
	  	  if (HAL_GPIO_ReadPin(set_port, set_pin) == GPIO_PIN_SET){
 80007ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <main+0xc4>)
 80007c0:	f000 fcf8 	bl	80011b4 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d112      	bne.n	80007f0 <main+0xb0>
	  		  	  int z = restart();
 80007ca:	f7ff ff49 	bl	8000660 <restart>
 80007ce:	60b8      	str	r0, [r7, #8]
	  		  	  HAL_Delay(500);
 80007d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d4:	f000 fa58 	bl	8000c88 <HAL_Delay>
	  		  	  	printf("the value of x is now %d\n\r",z);
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <main+0xcc>)
 80007dc:	f001 fdf8 	bl	80023d0 <iprintf>
	  		  	  	 HAL_Delay(500);
 80007e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007e4:	f000 fa50 	bl	8000c88 <HAL_Delay>
	  		  	  	 ++state2;
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73bb      	strb	r3, [r7, #14]
	  		  	  	 break;
 80007ee:	e002      	b.n	80007f6 <main+0xb6>
				 }
				 	 else	{
				 		state2 = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	73bb      	strb	r3, [r7, #14]
	  if (HAL_GPIO_ReadPin(b_port, b_pin) == GPIO_PIN_SET){
 80007f4:	e7c0      	b.n	8000778 <main+0x38>
  {
 80007f6:	e7ae      	b.n	8000756 <main+0x16>
 80007f8:	20000084 	.word	0x20000084
 80007fc:	08003180 	.word	0x08003180
 8000800:	0800319c 	.word	0x0800319c
 8000804:	40020000 	.word	0x40020000
 8000808:	080031cc 	.word	0x080031cc
 800080c:	080031d4 	.word	0x080031d4

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b092      	sub	sp, #72	@ 0x48
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2234      	movs	r2, #52	@ 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fe2b 	bl	800247a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <SystemClock_Config+0x98>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800083a:	4a1b      	ldr	r2, [pc, #108]	@ (80008a8 <SystemClock_Config+0x98>)
 800083c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000840:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000842:	2302      	movs	r3, #2
 8000844:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084a:	2310      	movs	r3, #16
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000852:	2300      	movs	r3, #0
 8000854:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000856:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800085a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800085c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000860:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fcd4 	bl	8001214 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000872:	f000 f81b 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2303      	movs	r3, #3
 800087c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fff0 	bl	8001874 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800089a:	f000 f807 	bl	80008ac <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3748      	adds	r7, #72	@ 0x48
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40007000 	.word	0x40007000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_MspInit+0x5c>)
 80008c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008c2:	4a14      	ldr	r2, [pc, #80]	@ (8000914 <HAL_MspInit+0x5c>)
 80008c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008c8:	6253      	str	r3, [r2, #36]	@ 0x24
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_MspInit+0x5c>)
 80008cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <HAL_MspInit+0x5c>)
 80008d8:	6a1b      	ldr	r3, [r3, #32]
 80008da:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <HAL_MspInit+0x5c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6213      	str	r3, [r2, #32]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_MspInit+0x5c>)
 80008e4:	6a1b      	ldr	r3, [r3, #32]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_MspInit+0x5c>)
 80008f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <HAL_MspInit+0x5c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	6253      	str	r3, [r2, #36]	@ 0x24
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_MspInit+0x5c>)
 80008fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000906:	2007      	movs	r0, #7
 8000908:	f000 fa90 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <NMI_Handler+0x4>

08000920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <MemManage_Handler+0x4>

08000930 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <UsageFault_Handler+0x4>

08000940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f972 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
  }

  return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d0:	605a      	str	r2, [r3, #4]
  return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <_isatty>:

int _isatty(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b085      	sub	sp, #20
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
	...

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f001 fd6c 	bl	8002518 <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20014000 	.word	0x20014000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	20000088 	.word	0x20000088
 8000a74:	20000228 	.word	0x20000228

08000a78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <MX_USART2_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_USART2_UART_Init+0x4c>)
 8000abc:	f001 f9a0 	bl	8001e00 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f7ff fef1 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000008c 	.word	0x2000008c
 8000ad4:	40004400 	.word	0x40004400

08000ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0x7c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d127      	bne.n	8000b4a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_UART_MspInit+0x80>)
 8000afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000afe:	4a16      	ldr	r2, [pc, #88]	@ (8000b58 <HAL_UART_MspInit+0x80>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b04:	6253      	str	r3, [r2, #36]	@ 0x24
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <HAL_UART_MspInit+0x80>)
 8000b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <HAL_UART_MspInit+0x80>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a10      	ldr	r2, [pc, #64]	@ (8000b58 <HAL_UART_MspInit+0x80>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	61d3      	str	r3, [r2, #28]
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <HAL_UART_MspInit+0x80>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <HAL_UART_MspInit+0x84>)
 8000b46:	f000 f9a5 	bl	8000e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	@ 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b60:	f7ff ff8a 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b66:	490c      	ldr	r1, [pc, #48]	@ (8000b98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b68:	4a0c      	ldr	r2, [pc, #48]	@ (8000b9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b7c:	4c09      	ldr	r4, [pc, #36]	@ (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f001 fccb 	bl	8002524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8e:	f7ff fdd7 	bl	8000740 <main>
  bx lr
 8000b92:	4770      	bx	lr
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b9c:	08003258 	.word	0x08003258
  ldr r2, =_sbss
 8000ba0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ba4:	20000224 	.word	0x20000224

08000ba8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_IRQHandler>

08000baa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f939 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f80e 	bl	8000bdc <HAL_InitTick>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	e001      	b.n	8000bd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bcc:	f7ff fe74 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <HAL_InitTick+0x68>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d022      	beq.n	8000c36 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_InitTick+0x6c>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <HAL_InitTick+0x68>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f938 	bl	8000e7a <HAL_SYSTICK_Config>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10f      	bne.n	8000c30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	d809      	bhi.n	8000c2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c16:	2200      	movs	r2, #0
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1e:	f000 f910 	bl	8000e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <HAL_InitTick+0x70>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	e007      	b.n	8000c3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
 8000c2e:	e004      	b.n	8000c3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e001      	b.n	8000c3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a03      	ldr	r2, [pc, #12]	@ (8000c6c <HAL_IncTick+0x1c>)
 8000c60:	6013      	str	r3, [r2, #0]
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200000d4 	.word	0x200000d4
 8000c70:	20000008 	.word	0x20000008

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	@ (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	200000d4 	.word	0x200000d4

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff fff0 	bl	8000c74 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d004      	beq.n	8000cac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <HAL_Delay+0x40>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	4413      	add	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cac:	bf00      	nop
 8000cae:	f7ff ffe1 	bl	8000c74 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d8f7      	bhi.n	8000cae <HAL_Delay+0x26>
  {
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000008 	.word	0x20000008

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	@ (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	@ 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	@ 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff90 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff49 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff5e 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff90 	bl	8000d84 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5f 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffb0 	bl	8000de8 <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eaa:	e160      	b.n	800116e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8152 	beq.w	8001168 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	f003 0201 	and.w	r2, r3, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80ac 	beq.w	8001168 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b5e      	ldr	r3, [pc, #376]	@ (800118c <HAL_GPIO_Init+0x2f8>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a5d      	ldr	r2, [pc, #372]	@ (800118c <HAL_GPIO_Init+0x2f8>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	4b5b      	ldr	r3, [pc, #364]	@ (800118c <HAL_GPIO_Init+0x2f8>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001028:	4a59      	ldr	r2, [pc, #356]	@ (8001190 <HAL_GPIO_Init+0x2fc>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a51      	ldr	r2, [pc, #324]	@ (8001194 <HAL_GPIO_Init+0x300>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d025      	beq.n	80010a0 <HAL_GPIO_Init+0x20c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a50      	ldr	r2, [pc, #320]	@ (8001198 <HAL_GPIO_Init+0x304>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d01f      	beq.n	800109c <HAL_GPIO_Init+0x208>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4f      	ldr	r2, [pc, #316]	@ (800119c <HAL_GPIO_Init+0x308>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d019      	beq.n	8001098 <HAL_GPIO_Init+0x204>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4e      	ldr	r2, [pc, #312]	@ (80011a0 <HAL_GPIO_Init+0x30c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d013      	beq.n	8001094 <HAL_GPIO_Init+0x200>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a4d      	ldr	r2, [pc, #308]	@ (80011a4 <HAL_GPIO_Init+0x310>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d00d      	beq.n	8001090 <HAL_GPIO_Init+0x1fc>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a4c      	ldr	r2, [pc, #304]	@ (80011a8 <HAL_GPIO_Init+0x314>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d007      	beq.n	800108c <HAL_GPIO_Init+0x1f8>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4b      	ldr	r2, [pc, #300]	@ (80011ac <HAL_GPIO_Init+0x318>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d101      	bne.n	8001088 <HAL_GPIO_Init+0x1f4>
 8001084:	2306      	movs	r3, #6
 8001086:	e00c      	b.n	80010a2 <HAL_GPIO_Init+0x20e>
 8001088:	2307      	movs	r3, #7
 800108a:	e00a      	b.n	80010a2 <HAL_GPIO_Init+0x20e>
 800108c:	2305      	movs	r3, #5
 800108e:	e008      	b.n	80010a2 <HAL_GPIO_Init+0x20e>
 8001090:	2304      	movs	r3, #4
 8001092:	e006      	b.n	80010a2 <HAL_GPIO_Init+0x20e>
 8001094:	2303      	movs	r3, #3
 8001096:	e004      	b.n	80010a2 <HAL_GPIO_Init+0x20e>
 8001098:	2302      	movs	r3, #2
 800109a:	e002      	b.n	80010a2 <HAL_GPIO_Init+0x20e>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <HAL_GPIO_Init+0x20e>
 80010a0:	2300      	movs	r3, #0
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	f002 0203 	and.w	r2, r2, #3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	4093      	lsls	r3, r2
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010b2:	4937      	ldr	r1, [pc, #220]	@ (8001190 <HAL_GPIO_Init+0x2fc>)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c0:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <HAL_GPIO_Init+0x31c>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010e4:	4a32      	ldr	r2, [pc, #200]	@ (80011b0 <HAL_GPIO_Init+0x31c>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ea:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <HAL_GPIO_Init+0x31c>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800110e:	4a28      	ldr	r2, [pc, #160]	@ (80011b0 <HAL_GPIO_Init+0x31c>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001114:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <HAL_GPIO_Init+0x31c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001138:	4a1d      	ldr	r2, [pc, #116]	@ (80011b0 <HAL_GPIO_Init+0x31c>)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <HAL_GPIO_Init+0x31c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001162:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <HAL_GPIO_Init+0x31c>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	f47f ae97 	bne.w	8000eac <HAL_GPIO_Init+0x18>
  }
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40010000 	.word	0x40010000
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40021800 	.word	0x40021800
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e001      	b.n	80011d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]
 80011ee:	4613      	mov	r3, r2
 80011f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f8:	887a      	ldrh	r2, [r7, #2]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	041a      	lsls	r2, r3, #16
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
	...

08001214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e31d      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001226:	4b94      	ldr	r3, [pc, #592]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001230:	4b91      	ldr	r3, [pc, #580]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001238:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d07b      	beq.n	800133e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b08      	cmp	r3, #8
 800124a:	d006      	beq.n	800125a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2b0c      	cmp	r3, #12
 8001250:	d10f      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001258:	d10b      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	4b87      	ldr	r3, [pc, #540]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d06a      	beq.n	800133c <HAL_RCC_OscConfig+0x128>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d166      	bne.n	800133c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e2f7      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d106      	bne.n	8001288 <HAL_RCC_OscConfig+0x74>
 800127a:	4b7f      	ldr	r3, [pc, #508]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7e      	ldr	r2, [pc, #504]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e02d      	b.n	80012e4 <HAL_RCC_OscConfig+0xd0>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10c      	bne.n	80012aa <HAL_RCC_OscConfig+0x96>
 8001290:	4b79      	ldr	r3, [pc, #484]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a78      	ldr	r2, [pc, #480]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b76      	ldr	r3, [pc, #472]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a75      	ldr	r2, [pc, #468]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80012a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e01c      	b.n	80012e4 <HAL_RCC_OscConfig+0xd0>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0xb8>
 80012b2:	4b71      	ldr	r3, [pc, #452]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a70      	ldr	r2, [pc, #448]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6e      	ldr	r3, [pc, #440]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6d      	ldr	r2, [pc, #436]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xd0>
 80012cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a69      	ldr	r2, [pc, #420]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b67      	ldr	r3, [pc, #412]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a66      	ldr	r2, [pc, #408]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fcc2 	bl	8000c74 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fcbe 	bl	8000c74 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	@ 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e2ad      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001306:	4b5c      	ldr	r3, [pc, #368]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xe0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fcae 	bl	8000c74 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fcaa 	bl	8000c74 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	@ 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e299      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800132e:	4b52      	ldr	r3, [pc, #328]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x108>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d05a      	beq.n	8001400 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b04      	cmp	r3, #4
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b0c      	cmp	r3, #12
 8001354:	d119      	bne.n	800138a <HAL_RCC_OscConfig+0x176>
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d116      	bne.n	800138a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135c:	4b46      	ldr	r3, [pc, #280]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_OscConfig+0x160>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e276      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b40      	ldr	r3, [pc, #256]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	493d      	ldr	r1, [pc, #244]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001388:	e03a      	b.n	8001400 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d020      	beq.n	80013d4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001392:	4b3a      	ldr	r3, [pc, #232]	@ (800147c <HAL_RCC_OscConfig+0x268>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fc6c 	bl	8000c74 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fc68 	bl	8000c74 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e257      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013b2:	4b31      	ldr	r3, [pc, #196]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b2e      	ldr	r3, [pc, #184]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	492a      	ldr	r1, [pc, #168]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
 80013d2:	e015      	b.n	8001400 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <HAL_RCC_OscConfig+0x268>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fc4b 	bl	8000c74 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc47 	bl	8000c74 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e236      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013f4:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80b8 	beq.w	800157e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d170      	bne.n	80014f6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_OscConfig+0x218>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e21a      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001438:	429a      	cmp	r2, r3
 800143a:	d921      	bls.n	8001480 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fc7d 	bl	8001d40 <RCC_SetFlashLatencyFromMSIRange>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e208      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4906      	ldr	r1, [pc, #24]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001462:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	061b      	lsls	r3, r3, #24
 8001470:	4901      	ldr	r1, [pc, #4]	@ (8001478 <HAL_RCC_OscConfig+0x264>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
 8001476:	e020      	b.n	80014ba <HAL_RCC_OscConfig+0x2a6>
 8001478:	40023800 	.word	0x40023800
 800147c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	4b99      	ldr	r3, [pc, #612]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4996      	ldr	r1, [pc, #600]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001492:	4b95      	ldr	r3, [pc, #596]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	4991      	ldr	r1, [pc, #580]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fc48 	bl	8001d40 <RCC_SetFlashLatencyFromMSIRange>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e1d3      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	0b5b      	lsrs	r3, r3, #13
 80014c0:	3301      	adds	r3, #1
 80014c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014ca:	4a87      	ldr	r2, [pc, #540]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80014cc:	6892      	ldr	r2, [r2, #8]
 80014ce:	0912      	lsrs	r2, r2, #4
 80014d0:	f002 020f 	and.w	r2, r2, #15
 80014d4:	4985      	ldr	r1, [pc, #532]	@ (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80014d6:	5c8a      	ldrb	r2, [r1, r2]
 80014d8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014da:	4a85      	ldr	r2, [pc, #532]	@ (80016f0 <HAL_RCC_OscConfig+0x4dc>)
 80014dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014de:	4b85      	ldr	r3, [pc, #532]	@ (80016f4 <HAL_RCC_OscConfig+0x4e0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fb7a 	bl	8000bdc <HAL_InitTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d045      	beq.n	800157e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	e1b5      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d029      	beq.n	8001552 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014fe:	4b7e      	ldr	r3, [pc, #504]	@ (80016f8 <HAL_RCC_OscConfig+0x4e4>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fbb6 	bl	8000c74 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150c:	f7ff fbb2 	bl	8000c74 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1a1      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800151e:	4b72      	ldr	r3, [pc, #456]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152a:	4b6f      	ldr	r3, [pc, #444]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	496c      	ldr	r1, [pc, #432]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800153c:	4b6a      	ldr	r3, [pc, #424]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	061b      	lsls	r3, r3, #24
 800154a:	4967      	ldr	r1, [pc, #412]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001552:	4b69      	ldr	r3, [pc, #420]	@ (80016f8 <HAL_RCC_OscConfig+0x4e4>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fb8c 	bl	8000c74 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001560:	f7ff fb88 	bl	8000c74 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e177      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001572:	4b5d      	ldr	r3, [pc, #372]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d030      	beq.n	80015ec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d016      	beq.n	80015c0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001592:	4b5a      	ldr	r3, [pc, #360]	@ (80016fc <HAL_RCC_OscConfig+0x4e8>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7ff fb6c 	bl	8000c74 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fb68 	bl	8000c74 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e157      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015b2:	4b4d      	ldr	r3, [pc, #308]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80015b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x38c>
 80015be:	e015      	b.n	80015ec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c0:	4b4e      	ldr	r3, [pc, #312]	@ (80016fc <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fb55 	bl	8000c74 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fb51 	bl	8000c74 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e140      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015e0:	4b41      	ldr	r3, [pc, #260]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80015e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80b5 	beq.w	8001764 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fe:	4b3a      	ldr	r3, [pc, #232]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10d      	bne.n	8001626 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b37      	ldr	r3, [pc, #220]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	4a36      	ldr	r2, [pc, #216]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6253      	str	r3, [r2, #36]	@ 0x24
 8001616:	4b34      	ldr	r3, [pc, #208]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001622:	2301      	movs	r3, #1
 8001624:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001626:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <HAL_RCC_OscConfig+0x4ec>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d118      	bne.n	8001664 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <HAL_RCC_OscConfig+0x4ec>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <HAL_RCC_OscConfig+0x4ec>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb19 	bl	8000c74 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7ff fb15 	bl	8000c74 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b64      	cmp	r3, #100	@ 0x64
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e104      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <HAL_RCC_OscConfig+0x4ec>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x466>
 800166c:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 800166e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001670:	4a1d      	ldr	r2, [pc, #116]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001676:	6353      	str	r3, [r2, #52]	@ 0x34
 8001678:	e02d      	b.n	80016d6 <HAL_RCC_OscConfig+0x4c2>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x488>
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001686:	4a18      	ldr	r2, [pc, #96]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800168c:	6353      	str	r3, [r2, #52]	@ 0x34
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001692:	4a15      	ldr	r2, [pc, #84]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 8001694:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001698:	6353      	str	r3, [r2, #52]	@ 0x34
 800169a:	e01c      	b.n	80016d6 <HAL_RCC_OscConfig+0x4c2>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0x4aa>
 80016a4:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80016a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a8:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80016aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80016b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b4:	4a0c      	ldr	r2, [pc, #48]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80016bc:	e00b      	b.n	80016d6 <HAL_RCC_OscConfig+0x4c2>
 80016be:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80016c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c2:	4a09      	ldr	r2, [pc, #36]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80016c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80016cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ce:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80016d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80016d4:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d024      	beq.n	8001728 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff fac9 	bl	8000c74 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016e4:	e019      	b.n	800171a <HAL_RCC_OscConfig+0x506>
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	080031fc 	.word	0x080031fc
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004
 80016f8:	42470020 	.word	0x42470020
 80016fc:	42470680 	.word	0x42470680
 8001700:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff fab6 	bl	8000c74 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0a3      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800171a:	4b54      	ldr	r3, [pc, #336]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 800171c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800171e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ee      	beq.n	8001704 <HAL_RCC_OscConfig+0x4f0>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff faa4 	bl	8000c74 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff faa0 	bl	8000c74 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e08d      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001746:	4b49      	ldr	r3, [pc, #292]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 8001748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ee      	bne.n	8001730 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001752:	7ffb      	ldrb	r3, [r7, #31]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b44      	ldr	r3, [pc, #272]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175c:	4a43      	ldr	r2, [pc, #268]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001762:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001768:	2b00      	cmp	r3, #0
 800176a:	d079      	beq.n	8001860 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d056      	beq.n	8001820 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	2b02      	cmp	r3, #2
 8001778:	d13b      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177a:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <HAL_RCC_OscConfig+0x65c>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fa78 	bl	8000c74 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff fa74 	bl	8000c74 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e063      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800179a:	4b34      	ldr	r3, [pc, #208]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a6:	4b31      	ldr	r3, [pc, #196]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b6:	4319      	orrs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	430b      	orrs	r3, r1
 80017be:	492b      	ldr	r1, [pc, #172]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <HAL_RCC_OscConfig+0x65c>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fa53 	bl	8000c74 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff fa4f 	bl	8000c74 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e03e      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017e4:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x5be>
 80017f0:	e036      	b.n	8001860 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <HAL_RCC_OscConfig+0x65c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fa3c 	bl	8000c74 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fa38 	bl	8000c74 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e027      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001812:	4b16      	ldr	r3, [pc, #88]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x5ec>
 800181e:	e01f      	b.n	8001860 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e01a      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <HAL_RCC_OscConfig+0x658>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183c:	429a      	cmp	r2, r3
 800183e:	d10d      	bne.n	800185c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d106      	bne.n	800185c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	42470060 	.word	0x42470060

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e11a      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b8f      	ldr	r3, [pc, #572]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d919      	bls.n	80018ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x34>
 800189c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a89      	ldr	r2, [pc, #548]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b87      	ldr	r3, [pc, #540]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 0201 	bic.w	r2, r3, #1
 80018b0:	4985      	ldr	r1, [pc, #532]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b8:	4b83      	ldr	r3, [pc, #524]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0f9      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d6:	4b7d      	ldr	r3, [pc, #500]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	497a      	ldr	r1, [pc, #488]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 808e 	beq.w	8001a12 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018fe:	4b73      	ldr	r3, [pc, #460]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d121      	bne.n	800194e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0d7      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001916:	4b6d      	ldr	r3, [pc, #436]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d115      	bne.n	800194e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0cb      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800192e:	4b67      	ldr	r3, [pc, #412]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0bf      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800193e:	4b63      	ldr	r3, [pc, #396]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0b7      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4b5f      	ldr	r3, [pc, #380]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 0203 	bic.w	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	495c      	ldr	r1, [pc, #368]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff f988 	bl	8000c74 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d112      	bne.n	8001994 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7ff f980 	bl	8000c74 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e09b      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001986:	4b51      	ldr	r3, [pc, #324]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d1ee      	bne.n	8001970 <HAL_RCC_ClockConfig+0xfc>
 8001992:	e03e      	b.n	8001a12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d112      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199e:	f7ff f969 	bl	8000c74 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e084      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b4:	4b45      	ldr	r3, [pc, #276]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d1ee      	bne.n	800199e <HAL_RCC_ClockConfig+0x12a>
 80019c0:	e027      	b.n	8001a12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d11d      	bne.n	8001a06 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7ff f952 	bl	8000c74 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e06d      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e2:	4b3a      	ldr	r3, [pc, #232]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d1ee      	bne.n	80019cc <HAL_RCC_ClockConfig+0x158>
 80019ee:	e010      	b.n	8001a12 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f0:	f7ff f940 	bl	8000c74 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e05b      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a06:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ee      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d219      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d105      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x1be>
 8001a26:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a27      	ldr	r2, [pc, #156]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 0201 	bic.w	r2, r3, #1
 8001a3a:	4923      	ldr	r1, [pc, #140]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <HAL_RCC_ClockConfig+0x254>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e034      	b.n	8001abe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4917      	ldr	r1, [pc, #92]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490f      	ldr	r1, [pc, #60]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f823 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <HAL_RCC_ClockConfig+0x258>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490b      	ldr	r1, [pc, #44]	@ (8001ad0 <HAL_RCC_ClockConfig+0x25c>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_RCC_ClockConfig+0x260>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <HAL_RCC_ClockConfig+0x264>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f892 	bl	8000bdc <HAL_InitTick>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	72fb      	strb	r3, [r7, #11]

  return status;
 8001abc:	7afb      	ldrb	r3, [r7, #11]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	080031fc 	.word	0x080031fc
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae0:	b092      	sub	sp, #72	@ 0x48
 8001ae2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ae4:	4b79      	ldr	r3, [pc, #484]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	d00d      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x34>
 8001af4:	2b0c      	cmp	r3, #12
 8001af6:	f200 80d5 	bhi.w	8001ca4 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x28>
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x2e>
 8001b02:	e0cf      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b72      	ldr	r3, [pc, #456]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001b06:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001b08:	e0da      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b0a:	4b72      	ldr	r3, [pc, #456]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001b0c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001b0e:	e0d7      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b12:	0c9b      	lsrs	r3, r3, #18
 8001b14:	f003 020f 	and.w	r2, r3, #15
 8001b18:	4b6f      	ldr	r3, [pc, #444]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b20:	0d9b      	lsrs	r3, r3, #22
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	3301      	adds	r3, #1
 8001b28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2a:	4b68      	ldr	r3, [pc, #416]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d05d      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4604      	mov	r4, r0
 8001b40:	460d      	mov	r5, r1
 8001b42:	4622      	mov	r2, r4
 8001b44:	462b      	mov	r3, r5
 8001b46:	f04f 0000 	mov.w	r0, #0
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	0159      	lsls	r1, r3, #5
 8001b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b54:	0150      	lsls	r0, r2, #5
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	1a51      	subs	r1, r2, r1
 8001b5e:	6139      	str	r1, [r7, #16]
 8001b60:	4629      	mov	r1, r5
 8001b62:	eb63 0301 	sbc.w	r3, r3, r1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b74:	4659      	mov	r1, fp
 8001b76:	018b      	lsls	r3, r1, #6
 8001b78:	4651      	mov	r1, sl
 8001b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b7e:	4651      	mov	r1, sl
 8001b80:	018a      	lsls	r2, r1, #6
 8001b82:	46d4      	mov	ip, sl
 8001b84:	ebb2 080c 	subs.w	r8, r2, ip
 8001b88:	4659      	mov	r1, fp
 8001b8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ba2:	4690      	mov	r8, r2
 8001ba4:	4699      	mov	r9, r3
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	eb18 0303 	adds.w	r3, r8, r3
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	462b      	mov	r3, r5
 8001bb0:	eb49 0303 	adc.w	r3, r9, r3
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	024b      	lsls	r3, r1, #9
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	4604      	mov	r4, r0
 8001bcc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001bd0:	4601      	mov	r1, r0
 8001bd2:	024a      	lsls	r2, r1, #9
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bda:	2200      	movs	r2, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001be4:	f7fe faca 	bl	800017c <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bf0:	e055      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bfa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bfe:	4642      	mov	r2, r8
 8001c00:	464b      	mov	r3, r9
 8001c02:	f04f 0000 	mov.w	r0, #0
 8001c06:	f04f 0100 	mov.w	r1, #0
 8001c0a:	0159      	lsls	r1, r3, #5
 8001c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c10:	0150      	lsls	r0, r2, #5
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	46c4      	mov	ip, r8
 8001c18:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	4649      	mov	r1, r9
 8001c20:	468c      	mov	ip, r1
 8001c22:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c32:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c36:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c3a:	ebb2 040a 	subs.w	r4, r2, sl
 8001c3e:	eb63 050b 	sbc.w	r5, r3, fp
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	00eb      	lsls	r3, r5, #3
 8001c4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c50:	00e2      	lsls	r2, r4, #3
 8001c52:	4614      	mov	r4, r2
 8001c54:	461d      	mov	r5, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	18e3      	adds	r3, r4, r3
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	eb45 0303 	adc.w	r3, r5, r3
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c70:	4629      	mov	r1, r5
 8001c72:	028b      	lsls	r3, r1, #10
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	4604      	mov	r4, r0
 8001c7a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001c7e:	4601      	mov	r1, r0
 8001c80:	028a      	lsls	r2, r1, #10
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	61fa      	str	r2, [r7, #28]
 8001c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c92:	f7fe fa73 	bl	800017c <__aeabi_uldivmod>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8001c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001ca2:	e00d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0b5b      	lsrs	r3, r3, #13
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8001cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3748      	adds	r7, #72	@ 0x48
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200
 8001cd8:	080031f0 	.word	0x080031f0

08001cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce0:	4b02      	ldr	r3, [pc, #8]	@ (8001cec <HAL_RCC_GetHCLKFreq+0x10>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	20000000 	.word	0x20000000

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf4:	f7ff fff2 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4903      	ldr	r1, [pc, #12]	@ (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	0800320c 	.word	0x0800320c

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4903      	ldr	r1, [pc, #12]	@ (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	0800320c 	.word	0x0800320c

08001d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d4c:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d12c      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d58:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d64:	4b24      	ldr	r3, [pc, #144]	@ (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e016      	b.n	8001d9e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	6253      	str	r3, [r2, #36]	@ 0x24
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001d90:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d92:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	4a17      	ldr	r2, [pc, #92]	@ (8001df4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001da4:	d105      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001dac:	d101      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001dae:	2301      	movs	r3, #1
 8001db0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 0201 	bic.w	r2, r3, #1
 8001dcc:	490b      	ldr	r1, [pc, #44]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dd4:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d001      	beq.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e042      	b.n	8001e98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe fe56 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2224      	movs	r2, #36	@ 0x24
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f91d 	bl	8002084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d16d      	bne.n	8001f9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_UART_Transmit+0x2c>
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e066      	b.n	8001f9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2221      	movs	r2, #33	@ 0x21
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ede:	f7fe fec9 	bl	8000c74 <HAL_GetTick>
 8001ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	88fa      	ldrh	r2, [r7, #6]
 8001ee8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	88fa      	ldrh	r2, [r7, #6]
 8001eee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ef8:	d108      	bne.n	8001f0c <HAL_UART_Transmit+0x6c>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	e003      	b.n	8001f14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f14:	e02a      	b.n	8001f6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2180      	movs	r1, #128	@ 0x80
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f840 	bl	8001fa6 <UART_WaitOnFlagUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e036      	b.n	8001f9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10b      	bne.n	8001f4e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	3302      	adds	r3, #2
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e007      	b.n	8001f5e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1cf      	bne.n	8001f16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2140      	movs	r1, #64	@ 0x40
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f810 	bl	8001fa6 <UART_WaitOnFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e006      	b.n	8001f9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b090      	sub	sp, #64	@ 0x40
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fb6:	e050      	b.n	800205a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbe:	d04c      	beq.n	800205a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fc6:	f7fe fe55 	bl	8000c74 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d241      	bcs.n	800205a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe0:	e853 3f00 	ldrex	r3, [r3]
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ff6:	637a      	str	r2, [r7, #52]	@ 0x34
 8001ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ffc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ffe:	e841 2300 	strex	r3, r2, [r1]
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1e5      	bne.n	8001fd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3314      	adds	r3, #20
 8002010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	e853 3f00 	ldrex	r3, [r3]
 8002018:	613b      	str	r3, [r7, #16]
   return(result);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3314      	adds	r3, #20
 8002028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800202a:	623a      	str	r2, [r7, #32]
 800202c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202e:	69f9      	ldr	r1, [r7, #28]
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	e841 2300 	strex	r3, r2, [r1]
 8002036:	61bb      	str	r3, [r7, #24]
   return(result);
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e5      	bne.n	800200a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e00f      	b.n	800207a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	429a      	cmp	r2, r3
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	429a      	cmp	r2, r3
 8002076:	d09f      	beq.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3740      	adds	r7, #64	@ 0x40
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80020c4:	f023 030c 	bic.w	r3, r3, #12
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	430b      	orrs	r3, r1
 80020d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a55      	ldr	r2, [pc, #340]	@ (8002244 <UART_SetConfig+0x1c0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d103      	bne.n	80020fa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020f2:	f7ff fe11 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	e002      	b.n	8002100 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020fa:	f7ff fdf9 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 80020fe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002108:	d14c      	bne.n	80021a4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	009a      	lsls	r2, r3, #2
 8002114:	441a      	add	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	4a49      	ldr	r2, [pc, #292]	@ (8002248 <UART_SetConfig+0x1c4>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	0119      	lsls	r1, r3, #4
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	009a      	lsls	r2, r3, #2
 8002134:	441a      	add	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002140:	4b41      	ldr	r3, [pc, #260]	@ (8002248 <UART_SetConfig+0x1c4>)
 8002142:	fba3 0302 	umull	r0, r3, r3, r2
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2064      	movs	r0, #100	@ 0x64
 800214a:	fb00 f303 	mul.w	r3, r0, r3
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	3332      	adds	r3, #50	@ 0x32
 8002154:	4a3c      	ldr	r2, [pc, #240]	@ (8002248 <UART_SetConfig+0x1c4>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002162:	4419      	add	r1, r3
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	009a      	lsls	r2, r3, #2
 800216e:	441a      	add	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fbb2 f2f3 	udiv	r2, r2, r3
 800217a:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <UART_SetConfig+0x1c4>)
 800217c:	fba3 0302 	umull	r0, r3, r3, r2
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	2064      	movs	r0, #100	@ 0x64
 8002184:	fb00 f303 	mul.w	r3, r0, r3
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	3332      	adds	r3, #50	@ 0x32
 800218e:	4a2e      	ldr	r2, [pc, #184]	@ (8002248 <UART_SetConfig+0x1c4>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	440a      	add	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021a2:	e04a      	b.n	800223a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	009a      	lsls	r2, r3, #2
 80021ae:	441a      	add	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4a23      	ldr	r2, [pc, #140]	@ (8002248 <UART_SetConfig+0x1c4>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	0119      	lsls	r1, r3, #4
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009a      	lsls	r2, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021da:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <UART_SetConfig+0x1c4>)
 80021dc:	fba3 0302 	umull	r0, r3, r3, r2
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	2064      	movs	r0, #100	@ 0x64
 80021e4:	fb00 f303 	mul.w	r3, r0, r3
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	3332      	adds	r3, #50	@ 0x32
 80021ee:	4a16      	ldr	r2, [pc, #88]	@ (8002248 <UART_SetConfig+0x1c4>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021fa:	4419      	add	r1, r3
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009a      	lsls	r2, r3, #2
 8002206:	441a      	add	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002212:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <UART_SetConfig+0x1c4>)
 8002214:	fba3 0302 	umull	r0, r3, r3, r2
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	2064      	movs	r0, #100	@ 0x64
 800221c:	fb00 f303 	mul.w	r3, r0, r3
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	3332      	adds	r3, #50	@ 0x32
 8002226:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <UART_SetConfig+0x1c4>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	f003 020f 	and.w	r2, r3, #15
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	440a      	add	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40013800 	.word	0x40013800
 8002248:	51eb851f 	.word	0x51eb851f

0800224c <std>:
 800224c:	2300      	movs	r3, #0
 800224e:	b510      	push	{r4, lr}
 8002250:	4604      	mov	r4, r0
 8002252:	e9c0 3300 	strd	r3, r3, [r0]
 8002256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800225a:	6083      	str	r3, [r0, #8]
 800225c:	8181      	strh	r1, [r0, #12]
 800225e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002260:	81c2      	strh	r2, [r0, #14]
 8002262:	6183      	str	r3, [r0, #24]
 8002264:	4619      	mov	r1, r3
 8002266:	2208      	movs	r2, #8
 8002268:	305c      	adds	r0, #92	@ 0x5c
 800226a:	f000 f906 	bl	800247a <memset>
 800226e:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <std+0x58>)
 8002270:	6224      	str	r4, [r4, #32]
 8002272:	6263      	str	r3, [r4, #36]	@ 0x24
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <std+0x5c>)
 8002276:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <std+0x60>)
 800227a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <std+0x64>)
 800227e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <std+0x68>)
 8002282:	429c      	cmp	r4, r3
 8002284:	d006      	beq.n	8002294 <std+0x48>
 8002286:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800228a:	4294      	cmp	r4, r2
 800228c:	d002      	beq.n	8002294 <std+0x48>
 800228e:	33d0      	adds	r3, #208	@ 0xd0
 8002290:	429c      	cmp	r4, r3
 8002292:	d105      	bne.n	80022a0 <std+0x54>
 8002294:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800229c:	f000 b966 	b.w	800256c <__retarget_lock_init_recursive>
 80022a0:	bd10      	pop	{r4, pc}
 80022a2:	bf00      	nop
 80022a4:	080023f5 	.word	0x080023f5
 80022a8:	08002417 	.word	0x08002417
 80022ac:	0800244f 	.word	0x0800244f
 80022b0:	08002473 	.word	0x08002473
 80022b4:	200000d8 	.word	0x200000d8

080022b8 <stdio_exit_handler>:
 80022b8:	4a02      	ldr	r2, [pc, #8]	@ (80022c4 <stdio_exit_handler+0xc>)
 80022ba:	4903      	ldr	r1, [pc, #12]	@ (80022c8 <stdio_exit_handler+0x10>)
 80022bc:	4803      	ldr	r0, [pc, #12]	@ (80022cc <stdio_exit_handler+0x14>)
 80022be:	f000 b869 	b.w	8002394 <_fwalk_sglue>
 80022c2:	bf00      	nop
 80022c4:	2000000c 	.word	0x2000000c
 80022c8:	08002e05 	.word	0x08002e05
 80022cc:	2000001c 	.word	0x2000001c

080022d0 <cleanup_stdio>:
 80022d0:	6841      	ldr	r1, [r0, #4]
 80022d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <cleanup_stdio+0x34>)
 80022d4:	b510      	push	{r4, lr}
 80022d6:	4299      	cmp	r1, r3
 80022d8:	4604      	mov	r4, r0
 80022da:	d001      	beq.n	80022e0 <cleanup_stdio+0x10>
 80022dc:	f000 fd92 	bl	8002e04 <_fflush_r>
 80022e0:	68a1      	ldr	r1, [r4, #8]
 80022e2:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <cleanup_stdio+0x38>)
 80022e4:	4299      	cmp	r1, r3
 80022e6:	d002      	beq.n	80022ee <cleanup_stdio+0x1e>
 80022e8:	4620      	mov	r0, r4
 80022ea:	f000 fd8b 	bl	8002e04 <_fflush_r>
 80022ee:	68e1      	ldr	r1, [r4, #12]
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <cleanup_stdio+0x3c>)
 80022f2:	4299      	cmp	r1, r3
 80022f4:	d004      	beq.n	8002300 <cleanup_stdio+0x30>
 80022f6:	4620      	mov	r0, r4
 80022f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022fc:	f000 bd82 	b.w	8002e04 <_fflush_r>
 8002300:	bd10      	pop	{r4, pc}
 8002302:	bf00      	nop
 8002304:	200000d8 	.word	0x200000d8
 8002308:	20000140 	.word	0x20000140
 800230c:	200001a8 	.word	0x200001a8

08002310 <global_stdio_init.part.0>:
 8002310:	b510      	push	{r4, lr}
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <global_stdio_init.part.0+0x30>)
 8002314:	4c0b      	ldr	r4, [pc, #44]	@ (8002344 <global_stdio_init.part.0+0x34>)
 8002316:	4a0c      	ldr	r2, [pc, #48]	@ (8002348 <global_stdio_init.part.0+0x38>)
 8002318:	4620      	mov	r0, r4
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	2104      	movs	r1, #4
 800231e:	2200      	movs	r2, #0
 8002320:	f7ff ff94 	bl	800224c <std>
 8002324:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002328:	2201      	movs	r2, #1
 800232a:	2109      	movs	r1, #9
 800232c:	f7ff ff8e 	bl	800224c <std>
 8002330:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002334:	2202      	movs	r2, #2
 8002336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800233a:	2112      	movs	r1, #18
 800233c:	f7ff bf86 	b.w	800224c <std>
 8002340:	20000210 	.word	0x20000210
 8002344:	200000d8 	.word	0x200000d8
 8002348:	080022b9 	.word	0x080022b9

0800234c <__sfp_lock_acquire>:
 800234c:	4801      	ldr	r0, [pc, #4]	@ (8002354 <__sfp_lock_acquire+0x8>)
 800234e:	f000 b90e 	b.w	800256e <__retarget_lock_acquire_recursive>
 8002352:	bf00      	nop
 8002354:	20000219 	.word	0x20000219

08002358 <__sfp_lock_release>:
 8002358:	4801      	ldr	r0, [pc, #4]	@ (8002360 <__sfp_lock_release+0x8>)
 800235a:	f000 b909 	b.w	8002570 <__retarget_lock_release_recursive>
 800235e:	bf00      	nop
 8002360:	20000219 	.word	0x20000219

08002364 <__sinit>:
 8002364:	b510      	push	{r4, lr}
 8002366:	4604      	mov	r4, r0
 8002368:	f7ff fff0 	bl	800234c <__sfp_lock_acquire>
 800236c:	6a23      	ldr	r3, [r4, #32]
 800236e:	b11b      	cbz	r3, 8002378 <__sinit+0x14>
 8002370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002374:	f7ff bff0 	b.w	8002358 <__sfp_lock_release>
 8002378:	4b04      	ldr	r3, [pc, #16]	@ (800238c <__sinit+0x28>)
 800237a:	6223      	str	r3, [r4, #32]
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <__sinit+0x2c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f5      	bne.n	8002370 <__sinit+0xc>
 8002384:	f7ff ffc4 	bl	8002310 <global_stdio_init.part.0>
 8002388:	e7f2      	b.n	8002370 <__sinit+0xc>
 800238a:	bf00      	nop
 800238c:	080022d1 	.word	0x080022d1
 8002390:	20000210 	.word	0x20000210

08002394 <_fwalk_sglue>:
 8002394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002398:	4607      	mov	r7, r0
 800239a:	4688      	mov	r8, r1
 800239c:	4614      	mov	r4, r2
 800239e:	2600      	movs	r6, #0
 80023a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023a4:	f1b9 0901 	subs.w	r9, r9, #1
 80023a8:	d505      	bpl.n	80023b6 <_fwalk_sglue+0x22>
 80023aa:	6824      	ldr	r4, [r4, #0]
 80023ac:	2c00      	cmp	r4, #0
 80023ae:	d1f7      	bne.n	80023a0 <_fwalk_sglue+0xc>
 80023b0:	4630      	mov	r0, r6
 80023b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023b6:	89ab      	ldrh	r3, [r5, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d907      	bls.n	80023cc <_fwalk_sglue+0x38>
 80023bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023c0:	3301      	adds	r3, #1
 80023c2:	d003      	beq.n	80023cc <_fwalk_sglue+0x38>
 80023c4:	4629      	mov	r1, r5
 80023c6:	4638      	mov	r0, r7
 80023c8:	47c0      	blx	r8
 80023ca:	4306      	orrs	r6, r0
 80023cc:	3568      	adds	r5, #104	@ 0x68
 80023ce:	e7e9      	b.n	80023a4 <_fwalk_sglue+0x10>

080023d0 <iprintf>:
 80023d0:	b40f      	push	{r0, r1, r2, r3}
 80023d2:	b507      	push	{r0, r1, r2, lr}
 80023d4:	4906      	ldr	r1, [pc, #24]	@ (80023f0 <iprintf+0x20>)
 80023d6:	ab04      	add	r3, sp, #16
 80023d8:	6808      	ldr	r0, [r1, #0]
 80023da:	f853 2b04 	ldr.w	r2, [r3], #4
 80023de:	6881      	ldr	r1, [r0, #8]
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	f000 f9e5 	bl	80027b0 <_vfiprintf_r>
 80023e6:	b003      	add	sp, #12
 80023e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80023ec:	b004      	add	sp, #16
 80023ee:	4770      	bx	lr
 80023f0:	20000018 	.word	0x20000018

080023f4 <__sread>:
 80023f4:	b510      	push	{r4, lr}
 80023f6:	460c      	mov	r4, r1
 80023f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023fc:	f000 f868 	bl	80024d0 <_read_r>
 8002400:	2800      	cmp	r0, #0
 8002402:	bfab      	itete	ge
 8002404:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002406:	89a3      	ldrhlt	r3, [r4, #12]
 8002408:	181b      	addge	r3, r3, r0
 800240a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800240e:	bfac      	ite	ge
 8002410:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002412:	81a3      	strhlt	r3, [r4, #12]
 8002414:	bd10      	pop	{r4, pc}

08002416 <__swrite>:
 8002416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241a:	461f      	mov	r7, r3
 800241c:	898b      	ldrh	r3, [r1, #12]
 800241e:	4605      	mov	r5, r0
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	460c      	mov	r4, r1
 8002424:	4616      	mov	r6, r2
 8002426:	d505      	bpl.n	8002434 <__swrite+0x1e>
 8002428:	2302      	movs	r3, #2
 800242a:	2200      	movs	r2, #0
 800242c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002430:	f000 f83c 	bl	80024ac <_lseek_r>
 8002434:	89a3      	ldrh	r3, [r4, #12]
 8002436:	4632      	mov	r2, r6
 8002438:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800243c:	81a3      	strh	r3, [r4, #12]
 800243e:	4628      	mov	r0, r5
 8002440:	463b      	mov	r3, r7
 8002442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800244a:	f000 b853 	b.w	80024f4 <_write_r>

0800244e <__sseek>:
 800244e:	b510      	push	{r4, lr}
 8002450:	460c      	mov	r4, r1
 8002452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002456:	f000 f829 	bl	80024ac <_lseek_r>
 800245a:	1c43      	adds	r3, r0, #1
 800245c:	89a3      	ldrh	r3, [r4, #12]
 800245e:	bf15      	itete	ne
 8002460:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002462:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002466:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800246a:	81a3      	strheq	r3, [r4, #12]
 800246c:	bf18      	it	ne
 800246e:	81a3      	strhne	r3, [r4, #12]
 8002470:	bd10      	pop	{r4, pc}

08002472 <__sclose>:
 8002472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002476:	f000 b809 	b.w	800248c <_close_r>

0800247a <memset>:
 800247a:	4603      	mov	r3, r0
 800247c:	4402      	add	r2, r0
 800247e:	4293      	cmp	r3, r2
 8002480:	d100      	bne.n	8002484 <memset+0xa>
 8002482:	4770      	bx	lr
 8002484:	f803 1b01 	strb.w	r1, [r3], #1
 8002488:	e7f9      	b.n	800247e <memset+0x4>
	...

0800248c <_close_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	2300      	movs	r3, #0
 8002490:	4d05      	ldr	r5, [pc, #20]	@ (80024a8 <_close_r+0x1c>)
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	602b      	str	r3, [r5, #0]
 8002498:	f7fe fa87 	bl	80009aa <_close>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d102      	bne.n	80024a6 <_close_r+0x1a>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	b103      	cbz	r3, 80024a6 <_close_r+0x1a>
 80024a4:	6023      	str	r3, [r4, #0]
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
 80024a8:	20000214 	.word	0x20000214

080024ac <_lseek_r>:
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	4604      	mov	r4, r0
 80024b0:	4608      	mov	r0, r1
 80024b2:	4611      	mov	r1, r2
 80024b4:	2200      	movs	r2, #0
 80024b6:	4d05      	ldr	r5, [pc, #20]	@ (80024cc <_lseek_r+0x20>)
 80024b8:	602a      	str	r2, [r5, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f7fe fa99 	bl	80009f2 <_lseek>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d102      	bne.n	80024ca <_lseek_r+0x1e>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	b103      	cbz	r3, 80024ca <_lseek_r+0x1e>
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	20000214 	.word	0x20000214

080024d0 <_read_r>:
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4604      	mov	r4, r0
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	2200      	movs	r2, #0
 80024da:	4d05      	ldr	r5, [pc, #20]	@ (80024f0 <_read_r+0x20>)
 80024dc:	602a      	str	r2, [r5, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	f7fe fa46 	bl	8000970 <_read>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d102      	bne.n	80024ee <_read_r+0x1e>
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	b103      	cbz	r3, 80024ee <_read_r+0x1e>
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	bd38      	pop	{r3, r4, r5, pc}
 80024f0:	20000214 	.word	0x20000214

080024f4 <_write_r>:
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	4604      	mov	r4, r0
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	4d05      	ldr	r5, [pc, #20]	@ (8002514 <_write_r+0x20>)
 8002500:	602a      	str	r2, [r5, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f7fe f824 	bl	8000550 <_write>
 8002508:	1c43      	adds	r3, r0, #1
 800250a:	d102      	bne.n	8002512 <_write_r+0x1e>
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	b103      	cbz	r3, 8002512 <_write_r+0x1e>
 8002510:	6023      	str	r3, [r4, #0]
 8002512:	bd38      	pop	{r3, r4, r5, pc}
 8002514:	20000214 	.word	0x20000214

08002518 <__errno>:
 8002518:	4b01      	ldr	r3, [pc, #4]	@ (8002520 <__errno+0x8>)
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000018 	.word	0x20000018

08002524 <__libc_init_array>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	2600      	movs	r6, #0
 8002528:	4d0c      	ldr	r5, [pc, #48]	@ (800255c <__libc_init_array+0x38>)
 800252a:	4c0d      	ldr	r4, [pc, #52]	@ (8002560 <__libc_init_array+0x3c>)
 800252c:	1b64      	subs	r4, r4, r5
 800252e:	10a4      	asrs	r4, r4, #2
 8002530:	42a6      	cmp	r6, r4
 8002532:	d109      	bne.n	8002548 <__libc_init_array+0x24>
 8002534:	f000 fdc4 	bl	80030c0 <_init>
 8002538:	2600      	movs	r6, #0
 800253a:	4d0a      	ldr	r5, [pc, #40]	@ (8002564 <__libc_init_array+0x40>)
 800253c:	4c0a      	ldr	r4, [pc, #40]	@ (8002568 <__libc_init_array+0x44>)
 800253e:	1b64      	subs	r4, r4, r5
 8002540:	10a4      	asrs	r4, r4, #2
 8002542:	42a6      	cmp	r6, r4
 8002544:	d105      	bne.n	8002552 <__libc_init_array+0x2e>
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	f855 3b04 	ldr.w	r3, [r5], #4
 800254c:	4798      	blx	r3
 800254e:	3601      	adds	r6, #1
 8002550:	e7ee      	b.n	8002530 <__libc_init_array+0xc>
 8002552:	f855 3b04 	ldr.w	r3, [r5], #4
 8002556:	4798      	blx	r3
 8002558:	3601      	adds	r6, #1
 800255a:	e7f2      	b.n	8002542 <__libc_init_array+0x1e>
 800255c:	08003250 	.word	0x08003250
 8002560:	08003250 	.word	0x08003250
 8002564:	08003250 	.word	0x08003250
 8002568:	08003254 	.word	0x08003254

0800256c <__retarget_lock_init_recursive>:
 800256c:	4770      	bx	lr

0800256e <__retarget_lock_acquire_recursive>:
 800256e:	4770      	bx	lr

08002570 <__retarget_lock_release_recursive>:
 8002570:	4770      	bx	lr
	...

08002574 <_free_r>:
 8002574:	b538      	push	{r3, r4, r5, lr}
 8002576:	4605      	mov	r5, r0
 8002578:	2900      	cmp	r1, #0
 800257a:	d040      	beq.n	80025fe <_free_r+0x8a>
 800257c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002580:	1f0c      	subs	r4, r1, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	bfb8      	it	lt
 8002586:	18e4      	addlt	r4, r4, r3
 8002588:	f000 f8de 	bl	8002748 <__malloc_lock>
 800258c:	4a1c      	ldr	r2, [pc, #112]	@ (8002600 <_free_r+0x8c>)
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	b933      	cbnz	r3, 80025a0 <_free_r+0x2c>
 8002592:	6063      	str	r3, [r4, #4]
 8002594:	6014      	str	r4, [r2, #0]
 8002596:	4628      	mov	r0, r5
 8002598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800259c:	f000 b8da 	b.w	8002754 <__malloc_unlock>
 80025a0:	42a3      	cmp	r3, r4
 80025a2:	d908      	bls.n	80025b6 <_free_r+0x42>
 80025a4:	6820      	ldr	r0, [r4, #0]
 80025a6:	1821      	adds	r1, r4, r0
 80025a8:	428b      	cmp	r3, r1
 80025aa:	bf01      	itttt	eq
 80025ac:	6819      	ldreq	r1, [r3, #0]
 80025ae:	685b      	ldreq	r3, [r3, #4]
 80025b0:	1809      	addeq	r1, r1, r0
 80025b2:	6021      	streq	r1, [r4, #0]
 80025b4:	e7ed      	b.n	8002592 <_free_r+0x1e>
 80025b6:	461a      	mov	r2, r3
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	b10b      	cbz	r3, 80025c0 <_free_r+0x4c>
 80025bc:	42a3      	cmp	r3, r4
 80025be:	d9fa      	bls.n	80025b6 <_free_r+0x42>
 80025c0:	6811      	ldr	r1, [r2, #0]
 80025c2:	1850      	adds	r0, r2, r1
 80025c4:	42a0      	cmp	r0, r4
 80025c6:	d10b      	bne.n	80025e0 <_free_r+0x6c>
 80025c8:	6820      	ldr	r0, [r4, #0]
 80025ca:	4401      	add	r1, r0
 80025cc:	1850      	adds	r0, r2, r1
 80025ce:	4283      	cmp	r3, r0
 80025d0:	6011      	str	r1, [r2, #0]
 80025d2:	d1e0      	bne.n	8002596 <_free_r+0x22>
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4408      	add	r0, r1
 80025da:	6010      	str	r0, [r2, #0]
 80025dc:	6053      	str	r3, [r2, #4]
 80025de:	e7da      	b.n	8002596 <_free_r+0x22>
 80025e0:	d902      	bls.n	80025e8 <_free_r+0x74>
 80025e2:	230c      	movs	r3, #12
 80025e4:	602b      	str	r3, [r5, #0]
 80025e6:	e7d6      	b.n	8002596 <_free_r+0x22>
 80025e8:	6820      	ldr	r0, [r4, #0]
 80025ea:	1821      	adds	r1, r4, r0
 80025ec:	428b      	cmp	r3, r1
 80025ee:	bf01      	itttt	eq
 80025f0:	6819      	ldreq	r1, [r3, #0]
 80025f2:	685b      	ldreq	r3, [r3, #4]
 80025f4:	1809      	addeq	r1, r1, r0
 80025f6:	6021      	streq	r1, [r4, #0]
 80025f8:	6063      	str	r3, [r4, #4]
 80025fa:	6054      	str	r4, [r2, #4]
 80025fc:	e7cb      	b.n	8002596 <_free_r+0x22>
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
 8002600:	20000220 	.word	0x20000220

08002604 <sbrk_aligned>:
 8002604:	b570      	push	{r4, r5, r6, lr}
 8002606:	4e0f      	ldr	r6, [pc, #60]	@ (8002644 <sbrk_aligned+0x40>)
 8002608:	460c      	mov	r4, r1
 800260a:	6831      	ldr	r1, [r6, #0]
 800260c:	4605      	mov	r5, r0
 800260e:	b911      	cbnz	r1, 8002616 <sbrk_aligned+0x12>
 8002610:	f000 fcb4 	bl	8002f7c <_sbrk_r>
 8002614:	6030      	str	r0, [r6, #0]
 8002616:	4621      	mov	r1, r4
 8002618:	4628      	mov	r0, r5
 800261a:	f000 fcaf 	bl	8002f7c <_sbrk_r>
 800261e:	1c43      	adds	r3, r0, #1
 8002620:	d103      	bne.n	800262a <sbrk_aligned+0x26>
 8002622:	f04f 34ff 	mov.w	r4, #4294967295
 8002626:	4620      	mov	r0, r4
 8002628:	bd70      	pop	{r4, r5, r6, pc}
 800262a:	1cc4      	adds	r4, r0, #3
 800262c:	f024 0403 	bic.w	r4, r4, #3
 8002630:	42a0      	cmp	r0, r4
 8002632:	d0f8      	beq.n	8002626 <sbrk_aligned+0x22>
 8002634:	1a21      	subs	r1, r4, r0
 8002636:	4628      	mov	r0, r5
 8002638:	f000 fca0 	bl	8002f7c <_sbrk_r>
 800263c:	3001      	adds	r0, #1
 800263e:	d1f2      	bne.n	8002626 <sbrk_aligned+0x22>
 8002640:	e7ef      	b.n	8002622 <sbrk_aligned+0x1e>
 8002642:	bf00      	nop
 8002644:	2000021c 	.word	0x2000021c

08002648 <_malloc_r>:
 8002648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800264c:	1ccd      	adds	r5, r1, #3
 800264e:	f025 0503 	bic.w	r5, r5, #3
 8002652:	3508      	adds	r5, #8
 8002654:	2d0c      	cmp	r5, #12
 8002656:	bf38      	it	cc
 8002658:	250c      	movcc	r5, #12
 800265a:	2d00      	cmp	r5, #0
 800265c:	4606      	mov	r6, r0
 800265e:	db01      	blt.n	8002664 <_malloc_r+0x1c>
 8002660:	42a9      	cmp	r1, r5
 8002662:	d904      	bls.n	800266e <_malloc_r+0x26>
 8002664:	230c      	movs	r3, #12
 8002666:	6033      	str	r3, [r6, #0]
 8002668:	2000      	movs	r0, #0
 800266a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800266e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002744 <_malloc_r+0xfc>
 8002672:	f000 f869 	bl	8002748 <__malloc_lock>
 8002676:	f8d8 3000 	ldr.w	r3, [r8]
 800267a:	461c      	mov	r4, r3
 800267c:	bb44      	cbnz	r4, 80026d0 <_malloc_r+0x88>
 800267e:	4629      	mov	r1, r5
 8002680:	4630      	mov	r0, r6
 8002682:	f7ff ffbf 	bl	8002604 <sbrk_aligned>
 8002686:	1c43      	adds	r3, r0, #1
 8002688:	4604      	mov	r4, r0
 800268a:	d158      	bne.n	800273e <_malloc_r+0xf6>
 800268c:	f8d8 4000 	ldr.w	r4, [r8]
 8002690:	4627      	mov	r7, r4
 8002692:	2f00      	cmp	r7, #0
 8002694:	d143      	bne.n	800271e <_malloc_r+0xd6>
 8002696:	2c00      	cmp	r4, #0
 8002698:	d04b      	beq.n	8002732 <_malloc_r+0xea>
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	4639      	mov	r1, r7
 800269e:	4630      	mov	r0, r6
 80026a0:	eb04 0903 	add.w	r9, r4, r3
 80026a4:	f000 fc6a 	bl	8002f7c <_sbrk_r>
 80026a8:	4581      	cmp	r9, r0
 80026aa:	d142      	bne.n	8002732 <_malloc_r+0xea>
 80026ac:	6821      	ldr	r1, [r4, #0]
 80026ae:	4630      	mov	r0, r6
 80026b0:	1a6d      	subs	r5, r5, r1
 80026b2:	4629      	mov	r1, r5
 80026b4:	f7ff ffa6 	bl	8002604 <sbrk_aligned>
 80026b8:	3001      	adds	r0, #1
 80026ba:	d03a      	beq.n	8002732 <_malloc_r+0xea>
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	442b      	add	r3, r5
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	f8d8 3000 	ldr.w	r3, [r8]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	bb62      	cbnz	r2, 8002724 <_malloc_r+0xdc>
 80026ca:	f8c8 7000 	str.w	r7, [r8]
 80026ce:	e00f      	b.n	80026f0 <_malloc_r+0xa8>
 80026d0:	6822      	ldr	r2, [r4, #0]
 80026d2:	1b52      	subs	r2, r2, r5
 80026d4:	d420      	bmi.n	8002718 <_malloc_r+0xd0>
 80026d6:	2a0b      	cmp	r2, #11
 80026d8:	d917      	bls.n	800270a <_malloc_r+0xc2>
 80026da:	1961      	adds	r1, r4, r5
 80026dc:	42a3      	cmp	r3, r4
 80026de:	6025      	str	r5, [r4, #0]
 80026e0:	bf18      	it	ne
 80026e2:	6059      	strne	r1, [r3, #4]
 80026e4:	6863      	ldr	r3, [r4, #4]
 80026e6:	bf08      	it	eq
 80026e8:	f8c8 1000 	streq.w	r1, [r8]
 80026ec:	5162      	str	r2, [r4, r5]
 80026ee:	604b      	str	r3, [r1, #4]
 80026f0:	4630      	mov	r0, r6
 80026f2:	f000 f82f 	bl	8002754 <__malloc_unlock>
 80026f6:	f104 000b 	add.w	r0, r4, #11
 80026fa:	1d23      	adds	r3, r4, #4
 80026fc:	f020 0007 	bic.w	r0, r0, #7
 8002700:	1ac2      	subs	r2, r0, r3
 8002702:	bf1c      	itt	ne
 8002704:	1a1b      	subne	r3, r3, r0
 8002706:	50a3      	strne	r3, [r4, r2]
 8002708:	e7af      	b.n	800266a <_malloc_r+0x22>
 800270a:	6862      	ldr	r2, [r4, #4]
 800270c:	42a3      	cmp	r3, r4
 800270e:	bf0c      	ite	eq
 8002710:	f8c8 2000 	streq.w	r2, [r8]
 8002714:	605a      	strne	r2, [r3, #4]
 8002716:	e7eb      	b.n	80026f0 <_malloc_r+0xa8>
 8002718:	4623      	mov	r3, r4
 800271a:	6864      	ldr	r4, [r4, #4]
 800271c:	e7ae      	b.n	800267c <_malloc_r+0x34>
 800271e:	463c      	mov	r4, r7
 8002720:	687f      	ldr	r7, [r7, #4]
 8002722:	e7b6      	b.n	8002692 <_malloc_r+0x4a>
 8002724:	461a      	mov	r2, r3
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	42a3      	cmp	r3, r4
 800272a:	d1fb      	bne.n	8002724 <_malloc_r+0xdc>
 800272c:	2300      	movs	r3, #0
 800272e:	6053      	str	r3, [r2, #4]
 8002730:	e7de      	b.n	80026f0 <_malloc_r+0xa8>
 8002732:	230c      	movs	r3, #12
 8002734:	4630      	mov	r0, r6
 8002736:	6033      	str	r3, [r6, #0]
 8002738:	f000 f80c 	bl	8002754 <__malloc_unlock>
 800273c:	e794      	b.n	8002668 <_malloc_r+0x20>
 800273e:	6005      	str	r5, [r0, #0]
 8002740:	e7d6      	b.n	80026f0 <_malloc_r+0xa8>
 8002742:	bf00      	nop
 8002744:	20000220 	.word	0x20000220

08002748 <__malloc_lock>:
 8002748:	4801      	ldr	r0, [pc, #4]	@ (8002750 <__malloc_lock+0x8>)
 800274a:	f7ff bf10 	b.w	800256e <__retarget_lock_acquire_recursive>
 800274e:	bf00      	nop
 8002750:	20000218 	.word	0x20000218

08002754 <__malloc_unlock>:
 8002754:	4801      	ldr	r0, [pc, #4]	@ (800275c <__malloc_unlock+0x8>)
 8002756:	f7ff bf0b 	b.w	8002570 <__retarget_lock_release_recursive>
 800275a:	bf00      	nop
 800275c:	20000218 	.word	0x20000218

08002760 <__sfputc_r>:
 8002760:	6893      	ldr	r3, [r2, #8]
 8002762:	b410      	push	{r4}
 8002764:	3b01      	subs	r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	6093      	str	r3, [r2, #8]
 800276a:	da07      	bge.n	800277c <__sfputc_r+0x1c>
 800276c:	6994      	ldr	r4, [r2, #24]
 800276e:	42a3      	cmp	r3, r4
 8002770:	db01      	blt.n	8002776 <__sfputc_r+0x16>
 8002772:	290a      	cmp	r1, #10
 8002774:	d102      	bne.n	800277c <__sfputc_r+0x1c>
 8002776:	bc10      	pop	{r4}
 8002778:	f000 bb6c 	b.w	8002e54 <__swbuf_r>
 800277c:	6813      	ldr	r3, [r2, #0]
 800277e:	1c58      	adds	r0, r3, #1
 8002780:	6010      	str	r0, [r2, #0]
 8002782:	7019      	strb	r1, [r3, #0]
 8002784:	4608      	mov	r0, r1
 8002786:	bc10      	pop	{r4}
 8002788:	4770      	bx	lr

0800278a <__sfputs_r>:
 800278a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278c:	4606      	mov	r6, r0
 800278e:	460f      	mov	r7, r1
 8002790:	4614      	mov	r4, r2
 8002792:	18d5      	adds	r5, r2, r3
 8002794:	42ac      	cmp	r4, r5
 8002796:	d101      	bne.n	800279c <__sfputs_r+0x12>
 8002798:	2000      	movs	r0, #0
 800279a:	e007      	b.n	80027ac <__sfputs_r+0x22>
 800279c:	463a      	mov	r2, r7
 800279e:	4630      	mov	r0, r6
 80027a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027a4:	f7ff ffdc 	bl	8002760 <__sfputc_r>
 80027a8:	1c43      	adds	r3, r0, #1
 80027aa:	d1f3      	bne.n	8002794 <__sfputs_r+0xa>
 80027ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027b0 <_vfiprintf_r>:
 80027b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b4:	460d      	mov	r5, r1
 80027b6:	4614      	mov	r4, r2
 80027b8:	4698      	mov	r8, r3
 80027ba:	4606      	mov	r6, r0
 80027bc:	b09d      	sub	sp, #116	@ 0x74
 80027be:	b118      	cbz	r0, 80027c8 <_vfiprintf_r+0x18>
 80027c0:	6a03      	ldr	r3, [r0, #32]
 80027c2:	b90b      	cbnz	r3, 80027c8 <_vfiprintf_r+0x18>
 80027c4:	f7ff fdce 	bl	8002364 <__sinit>
 80027c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80027ca:	07d9      	lsls	r1, r3, #31
 80027cc:	d405      	bmi.n	80027da <_vfiprintf_r+0x2a>
 80027ce:	89ab      	ldrh	r3, [r5, #12]
 80027d0:	059a      	lsls	r2, r3, #22
 80027d2:	d402      	bmi.n	80027da <_vfiprintf_r+0x2a>
 80027d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027d6:	f7ff feca 	bl	800256e <__retarget_lock_acquire_recursive>
 80027da:	89ab      	ldrh	r3, [r5, #12]
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	d501      	bpl.n	80027e4 <_vfiprintf_r+0x34>
 80027e0:	692b      	ldr	r3, [r5, #16]
 80027e2:	b99b      	cbnz	r3, 800280c <_vfiprintf_r+0x5c>
 80027e4:	4629      	mov	r1, r5
 80027e6:	4630      	mov	r0, r6
 80027e8:	f000 fb72 	bl	8002ed0 <__swsetup_r>
 80027ec:	b170      	cbz	r0, 800280c <_vfiprintf_r+0x5c>
 80027ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80027f0:	07dc      	lsls	r4, r3, #31
 80027f2:	d504      	bpl.n	80027fe <_vfiprintf_r+0x4e>
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	b01d      	add	sp, #116	@ 0x74
 80027fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027fe:	89ab      	ldrh	r3, [r5, #12]
 8002800:	0598      	lsls	r0, r3, #22
 8002802:	d4f7      	bmi.n	80027f4 <_vfiprintf_r+0x44>
 8002804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002806:	f7ff feb3 	bl	8002570 <__retarget_lock_release_recursive>
 800280a:	e7f3      	b.n	80027f4 <_vfiprintf_r+0x44>
 800280c:	2300      	movs	r3, #0
 800280e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002810:	2320      	movs	r3, #32
 8002812:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002816:	2330      	movs	r3, #48	@ 0x30
 8002818:	f04f 0901 	mov.w	r9, #1
 800281c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002820:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80029cc <_vfiprintf_r+0x21c>
 8002824:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002828:	4623      	mov	r3, r4
 800282a:	469a      	mov	sl, r3
 800282c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002830:	b10a      	cbz	r2, 8002836 <_vfiprintf_r+0x86>
 8002832:	2a25      	cmp	r2, #37	@ 0x25
 8002834:	d1f9      	bne.n	800282a <_vfiprintf_r+0x7a>
 8002836:	ebba 0b04 	subs.w	fp, sl, r4
 800283a:	d00b      	beq.n	8002854 <_vfiprintf_r+0xa4>
 800283c:	465b      	mov	r3, fp
 800283e:	4622      	mov	r2, r4
 8002840:	4629      	mov	r1, r5
 8002842:	4630      	mov	r0, r6
 8002844:	f7ff ffa1 	bl	800278a <__sfputs_r>
 8002848:	3001      	adds	r0, #1
 800284a:	f000 80a7 	beq.w	800299c <_vfiprintf_r+0x1ec>
 800284e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002850:	445a      	add	r2, fp
 8002852:	9209      	str	r2, [sp, #36]	@ 0x24
 8002854:	f89a 3000 	ldrb.w	r3, [sl]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 809f 	beq.w	800299c <_vfiprintf_r+0x1ec>
 800285e:	2300      	movs	r3, #0
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002868:	f10a 0a01 	add.w	sl, sl, #1
 800286c:	9304      	str	r3, [sp, #16]
 800286e:	9307      	str	r3, [sp, #28]
 8002870:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002874:	931a      	str	r3, [sp, #104]	@ 0x68
 8002876:	4654      	mov	r4, sl
 8002878:	2205      	movs	r2, #5
 800287a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800287e:	4853      	ldr	r0, [pc, #332]	@ (80029cc <_vfiprintf_r+0x21c>)
 8002880:	f000 fb8c 	bl	8002f9c <memchr>
 8002884:	9a04      	ldr	r2, [sp, #16]
 8002886:	b9d8      	cbnz	r0, 80028c0 <_vfiprintf_r+0x110>
 8002888:	06d1      	lsls	r1, r2, #27
 800288a:	bf44      	itt	mi
 800288c:	2320      	movmi	r3, #32
 800288e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002892:	0713      	lsls	r3, r2, #28
 8002894:	bf44      	itt	mi
 8002896:	232b      	movmi	r3, #43	@ 0x2b
 8002898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800289c:	f89a 3000 	ldrb.w	r3, [sl]
 80028a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80028a2:	d015      	beq.n	80028d0 <_vfiprintf_r+0x120>
 80028a4:	4654      	mov	r4, sl
 80028a6:	2000      	movs	r0, #0
 80028a8:	f04f 0c0a 	mov.w	ip, #10
 80028ac:	9a07      	ldr	r2, [sp, #28]
 80028ae:	4621      	mov	r1, r4
 80028b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028b4:	3b30      	subs	r3, #48	@ 0x30
 80028b6:	2b09      	cmp	r3, #9
 80028b8:	d94b      	bls.n	8002952 <_vfiprintf_r+0x1a2>
 80028ba:	b1b0      	cbz	r0, 80028ea <_vfiprintf_r+0x13a>
 80028bc:	9207      	str	r2, [sp, #28]
 80028be:	e014      	b.n	80028ea <_vfiprintf_r+0x13a>
 80028c0:	eba0 0308 	sub.w	r3, r0, r8
 80028c4:	fa09 f303 	lsl.w	r3, r9, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	46a2      	mov	sl, r4
 80028cc:	9304      	str	r3, [sp, #16]
 80028ce:	e7d2      	b.n	8002876 <_vfiprintf_r+0xc6>
 80028d0:	9b03      	ldr	r3, [sp, #12]
 80028d2:	1d19      	adds	r1, r3, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	9103      	str	r1, [sp, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bfbb      	ittet	lt
 80028dc:	425b      	neglt	r3, r3
 80028de:	f042 0202 	orrlt.w	r2, r2, #2
 80028e2:	9307      	strge	r3, [sp, #28]
 80028e4:	9307      	strlt	r3, [sp, #28]
 80028e6:	bfb8      	it	lt
 80028e8:	9204      	strlt	r2, [sp, #16]
 80028ea:	7823      	ldrb	r3, [r4, #0]
 80028ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80028ee:	d10a      	bne.n	8002906 <_vfiprintf_r+0x156>
 80028f0:	7863      	ldrb	r3, [r4, #1]
 80028f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80028f4:	d132      	bne.n	800295c <_vfiprintf_r+0x1ac>
 80028f6:	9b03      	ldr	r3, [sp, #12]
 80028f8:	3402      	adds	r4, #2
 80028fa:	1d1a      	adds	r2, r3, #4
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	9203      	str	r2, [sp, #12]
 8002900:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002904:	9305      	str	r3, [sp, #20]
 8002906:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80029d0 <_vfiprintf_r+0x220>
 800290a:	2203      	movs	r2, #3
 800290c:	4650      	mov	r0, sl
 800290e:	7821      	ldrb	r1, [r4, #0]
 8002910:	f000 fb44 	bl	8002f9c <memchr>
 8002914:	b138      	cbz	r0, 8002926 <_vfiprintf_r+0x176>
 8002916:	2240      	movs	r2, #64	@ 0x40
 8002918:	9b04      	ldr	r3, [sp, #16]
 800291a:	eba0 000a 	sub.w	r0, r0, sl
 800291e:	4082      	lsls	r2, r0
 8002920:	4313      	orrs	r3, r2
 8002922:	3401      	adds	r4, #1
 8002924:	9304      	str	r3, [sp, #16]
 8002926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800292a:	2206      	movs	r2, #6
 800292c:	4829      	ldr	r0, [pc, #164]	@ (80029d4 <_vfiprintf_r+0x224>)
 800292e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002932:	f000 fb33 	bl	8002f9c <memchr>
 8002936:	2800      	cmp	r0, #0
 8002938:	d03f      	beq.n	80029ba <_vfiprintf_r+0x20a>
 800293a:	4b27      	ldr	r3, [pc, #156]	@ (80029d8 <_vfiprintf_r+0x228>)
 800293c:	bb1b      	cbnz	r3, 8002986 <_vfiprintf_r+0x1d6>
 800293e:	9b03      	ldr	r3, [sp, #12]
 8002940:	3307      	adds	r3, #7
 8002942:	f023 0307 	bic.w	r3, r3, #7
 8002946:	3308      	adds	r3, #8
 8002948:	9303      	str	r3, [sp, #12]
 800294a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800294c:	443b      	add	r3, r7
 800294e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002950:	e76a      	b.n	8002828 <_vfiprintf_r+0x78>
 8002952:	460c      	mov	r4, r1
 8002954:	2001      	movs	r0, #1
 8002956:	fb0c 3202 	mla	r2, ip, r2, r3
 800295a:	e7a8      	b.n	80028ae <_vfiprintf_r+0xfe>
 800295c:	2300      	movs	r3, #0
 800295e:	f04f 0c0a 	mov.w	ip, #10
 8002962:	4619      	mov	r1, r3
 8002964:	3401      	adds	r4, #1
 8002966:	9305      	str	r3, [sp, #20]
 8002968:	4620      	mov	r0, r4
 800296a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800296e:	3a30      	subs	r2, #48	@ 0x30
 8002970:	2a09      	cmp	r2, #9
 8002972:	d903      	bls.n	800297c <_vfiprintf_r+0x1cc>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0c6      	beq.n	8002906 <_vfiprintf_r+0x156>
 8002978:	9105      	str	r1, [sp, #20]
 800297a:	e7c4      	b.n	8002906 <_vfiprintf_r+0x156>
 800297c:	4604      	mov	r4, r0
 800297e:	2301      	movs	r3, #1
 8002980:	fb0c 2101 	mla	r1, ip, r1, r2
 8002984:	e7f0      	b.n	8002968 <_vfiprintf_r+0x1b8>
 8002986:	ab03      	add	r3, sp, #12
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	462a      	mov	r2, r5
 800298c:	4630      	mov	r0, r6
 800298e:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <_vfiprintf_r+0x22c>)
 8002990:	a904      	add	r1, sp, #16
 8002992:	f3af 8000 	nop.w
 8002996:	4607      	mov	r7, r0
 8002998:	1c78      	adds	r0, r7, #1
 800299a:	d1d6      	bne.n	800294a <_vfiprintf_r+0x19a>
 800299c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800299e:	07d9      	lsls	r1, r3, #31
 80029a0:	d405      	bmi.n	80029ae <_vfiprintf_r+0x1fe>
 80029a2:	89ab      	ldrh	r3, [r5, #12]
 80029a4:	059a      	lsls	r2, r3, #22
 80029a6:	d402      	bmi.n	80029ae <_vfiprintf_r+0x1fe>
 80029a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80029aa:	f7ff fde1 	bl	8002570 <__retarget_lock_release_recursive>
 80029ae:	89ab      	ldrh	r3, [r5, #12]
 80029b0:	065b      	lsls	r3, r3, #25
 80029b2:	f53f af1f 	bmi.w	80027f4 <_vfiprintf_r+0x44>
 80029b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029b8:	e71e      	b.n	80027f8 <_vfiprintf_r+0x48>
 80029ba:	ab03      	add	r3, sp, #12
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	462a      	mov	r2, r5
 80029c0:	4630      	mov	r0, r6
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <_vfiprintf_r+0x22c>)
 80029c4:	a904      	add	r1, sp, #16
 80029c6:	f000 f87d 	bl	8002ac4 <_printf_i>
 80029ca:	e7e4      	b.n	8002996 <_vfiprintf_r+0x1e6>
 80029cc:	08003214 	.word	0x08003214
 80029d0:	0800321a 	.word	0x0800321a
 80029d4:	0800321e 	.word	0x0800321e
 80029d8:	00000000 	.word	0x00000000
 80029dc:	0800278b 	.word	0x0800278b

080029e0 <_printf_common>:
 80029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e4:	4616      	mov	r6, r2
 80029e6:	4698      	mov	r8, r3
 80029e8:	688a      	ldr	r2, [r1, #8]
 80029ea:	690b      	ldr	r3, [r1, #16]
 80029ec:	4607      	mov	r7, r0
 80029ee:	4293      	cmp	r3, r2
 80029f0:	bfb8      	it	lt
 80029f2:	4613      	movlt	r3, r2
 80029f4:	6033      	str	r3, [r6, #0]
 80029f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029fa:	460c      	mov	r4, r1
 80029fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a00:	b10a      	cbz	r2, 8002a06 <_printf_common+0x26>
 8002a02:	3301      	adds	r3, #1
 8002a04:	6033      	str	r3, [r6, #0]
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	0699      	lsls	r1, r3, #26
 8002a0a:	bf42      	ittt	mi
 8002a0c:	6833      	ldrmi	r3, [r6, #0]
 8002a0e:	3302      	addmi	r3, #2
 8002a10:	6033      	strmi	r3, [r6, #0]
 8002a12:	6825      	ldr	r5, [r4, #0]
 8002a14:	f015 0506 	ands.w	r5, r5, #6
 8002a18:	d106      	bne.n	8002a28 <_printf_common+0x48>
 8002a1a:	f104 0a19 	add.w	sl, r4, #25
 8002a1e:	68e3      	ldr	r3, [r4, #12]
 8002a20:	6832      	ldr	r2, [r6, #0]
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	42ab      	cmp	r3, r5
 8002a26:	dc2b      	bgt.n	8002a80 <_printf_common+0xa0>
 8002a28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a2c:	6822      	ldr	r2, [r4, #0]
 8002a2e:	3b00      	subs	r3, #0
 8002a30:	bf18      	it	ne
 8002a32:	2301      	movne	r3, #1
 8002a34:	0692      	lsls	r2, r2, #26
 8002a36:	d430      	bmi.n	8002a9a <_printf_common+0xba>
 8002a38:	4641      	mov	r1, r8
 8002a3a:	4638      	mov	r0, r7
 8002a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a40:	47c8      	blx	r9
 8002a42:	3001      	adds	r0, #1
 8002a44:	d023      	beq.n	8002a8e <_printf_common+0xae>
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	6922      	ldr	r2, [r4, #16]
 8002a4a:	f003 0306 	and.w	r3, r3, #6
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf14      	ite	ne
 8002a52:	2500      	movne	r5, #0
 8002a54:	6833      	ldreq	r3, [r6, #0]
 8002a56:	f04f 0600 	mov.w	r6, #0
 8002a5a:	bf08      	it	eq
 8002a5c:	68e5      	ldreq	r5, [r4, #12]
 8002a5e:	f104 041a 	add.w	r4, r4, #26
 8002a62:	bf08      	it	eq
 8002a64:	1aed      	subeq	r5, r5, r3
 8002a66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a6a:	bf08      	it	eq
 8002a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bfc4      	itt	gt
 8002a74:	1a9b      	subgt	r3, r3, r2
 8002a76:	18ed      	addgt	r5, r5, r3
 8002a78:	42b5      	cmp	r5, r6
 8002a7a:	d11a      	bne.n	8002ab2 <_printf_common+0xd2>
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	e008      	b.n	8002a92 <_printf_common+0xb2>
 8002a80:	2301      	movs	r3, #1
 8002a82:	4652      	mov	r2, sl
 8002a84:	4641      	mov	r1, r8
 8002a86:	4638      	mov	r0, r7
 8002a88:	47c8      	blx	r9
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	d103      	bne.n	8002a96 <_printf_common+0xb6>
 8002a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a96:	3501      	adds	r5, #1
 8002a98:	e7c1      	b.n	8002a1e <_printf_common+0x3e>
 8002a9a:	2030      	movs	r0, #48	@ 0x30
 8002a9c:	18e1      	adds	r1, r4, r3
 8002a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002aa8:	4422      	add	r2, r4
 8002aaa:	3302      	adds	r3, #2
 8002aac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ab0:	e7c2      	b.n	8002a38 <_printf_common+0x58>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	4638      	mov	r0, r7
 8002aba:	47c8      	blx	r9
 8002abc:	3001      	adds	r0, #1
 8002abe:	d0e6      	beq.n	8002a8e <_printf_common+0xae>
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	e7d9      	b.n	8002a78 <_printf_common+0x98>

08002ac4 <_printf_i>:
 8002ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac8:	7e0f      	ldrb	r7, [r1, #24]
 8002aca:	4691      	mov	r9, r2
 8002acc:	2f78      	cmp	r7, #120	@ 0x78
 8002ace:	4680      	mov	r8, r0
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	469a      	mov	sl, r3
 8002ad4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002ada:	d807      	bhi.n	8002aec <_printf_i+0x28>
 8002adc:	2f62      	cmp	r7, #98	@ 0x62
 8002ade:	d80a      	bhi.n	8002af6 <_printf_i+0x32>
 8002ae0:	2f00      	cmp	r7, #0
 8002ae2:	f000 80d3 	beq.w	8002c8c <_printf_i+0x1c8>
 8002ae6:	2f58      	cmp	r7, #88	@ 0x58
 8002ae8:	f000 80ba 	beq.w	8002c60 <_printf_i+0x19c>
 8002aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002af4:	e03a      	b.n	8002b6c <_printf_i+0xa8>
 8002af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002afa:	2b15      	cmp	r3, #21
 8002afc:	d8f6      	bhi.n	8002aec <_printf_i+0x28>
 8002afe:	a101      	add	r1, pc, #4	@ (adr r1, 8002b04 <_printf_i+0x40>)
 8002b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b04:	08002b5d 	.word	0x08002b5d
 8002b08:	08002b71 	.word	0x08002b71
 8002b0c:	08002aed 	.word	0x08002aed
 8002b10:	08002aed 	.word	0x08002aed
 8002b14:	08002aed 	.word	0x08002aed
 8002b18:	08002aed 	.word	0x08002aed
 8002b1c:	08002b71 	.word	0x08002b71
 8002b20:	08002aed 	.word	0x08002aed
 8002b24:	08002aed 	.word	0x08002aed
 8002b28:	08002aed 	.word	0x08002aed
 8002b2c:	08002aed 	.word	0x08002aed
 8002b30:	08002c73 	.word	0x08002c73
 8002b34:	08002b9b 	.word	0x08002b9b
 8002b38:	08002c2d 	.word	0x08002c2d
 8002b3c:	08002aed 	.word	0x08002aed
 8002b40:	08002aed 	.word	0x08002aed
 8002b44:	08002c95 	.word	0x08002c95
 8002b48:	08002aed 	.word	0x08002aed
 8002b4c:	08002b9b 	.word	0x08002b9b
 8002b50:	08002aed 	.word	0x08002aed
 8002b54:	08002aed 	.word	0x08002aed
 8002b58:	08002c35 	.word	0x08002c35
 8002b5c:	6833      	ldr	r3, [r6, #0]
 8002b5e:	1d1a      	adds	r2, r3, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6032      	str	r2, [r6, #0]
 8002b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e09e      	b.n	8002cae <_printf_i+0x1ea>
 8002b70:	6833      	ldr	r3, [r6, #0]
 8002b72:	6820      	ldr	r0, [r4, #0]
 8002b74:	1d19      	adds	r1, r3, #4
 8002b76:	6031      	str	r1, [r6, #0]
 8002b78:	0606      	lsls	r6, r0, #24
 8002b7a:	d501      	bpl.n	8002b80 <_printf_i+0xbc>
 8002b7c:	681d      	ldr	r5, [r3, #0]
 8002b7e:	e003      	b.n	8002b88 <_printf_i+0xc4>
 8002b80:	0645      	lsls	r5, r0, #25
 8002b82:	d5fb      	bpl.n	8002b7c <_printf_i+0xb8>
 8002b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b88:	2d00      	cmp	r5, #0
 8002b8a:	da03      	bge.n	8002b94 <_printf_i+0xd0>
 8002b8c:	232d      	movs	r3, #45	@ 0x2d
 8002b8e:	426d      	negs	r5, r5
 8002b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b94:	230a      	movs	r3, #10
 8002b96:	4859      	ldr	r0, [pc, #356]	@ (8002cfc <_printf_i+0x238>)
 8002b98:	e011      	b.n	8002bbe <_printf_i+0xfa>
 8002b9a:	6821      	ldr	r1, [r4, #0]
 8002b9c:	6833      	ldr	r3, [r6, #0]
 8002b9e:	0608      	lsls	r0, r1, #24
 8002ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ba4:	d402      	bmi.n	8002bac <_printf_i+0xe8>
 8002ba6:	0649      	lsls	r1, r1, #25
 8002ba8:	bf48      	it	mi
 8002baa:	b2ad      	uxthmi	r5, r5
 8002bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bae:	6033      	str	r3, [r6, #0]
 8002bb0:	bf14      	ite	ne
 8002bb2:	230a      	movne	r3, #10
 8002bb4:	2308      	moveq	r3, #8
 8002bb6:	4851      	ldr	r0, [pc, #324]	@ (8002cfc <_printf_i+0x238>)
 8002bb8:	2100      	movs	r1, #0
 8002bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bbe:	6866      	ldr	r6, [r4, #4]
 8002bc0:	2e00      	cmp	r6, #0
 8002bc2:	bfa8      	it	ge
 8002bc4:	6821      	ldrge	r1, [r4, #0]
 8002bc6:	60a6      	str	r6, [r4, #8]
 8002bc8:	bfa4      	itt	ge
 8002bca:	f021 0104 	bicge.w	r1, r1, #4
 8002bce:	6021      	strge	r1, [r4, #0]
 8002bd0:	b90d      	cbnz	r5, 8002bd6 <_printf_i+0x112>
 8002bd2:	2e00      	cmp	r6, #0
 8002bd4:	d04b      	beq.n	8002c6e <_printf_i+0x1aa>
 8002bd6:	4616      	mov	r6, r2
 8002bd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bdc:	fb03 5711 	mls	r7, r3, r1, r5
 8002be0:	5dc7      	ldrb	r7, [r0, r7]
 8002be2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002be6:	462f      	mov	r7, r5
 8002be8:	42bb      	cmp	r3, r7
 8002bea:	460d      	mov	r5, r1
 8002bec:	d9f4      	bls.n	8002bd8 <_printf_i+0x114>
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d10b      	bne.n	8002c0a <_printf_i+0x146>
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	07df      	lsls	r7, r3, #31
 8002bf6:	d508      	bpl.n	8002c0a <_printf_i+0x146>
 8002bf8:	6923      	ldr	r3, [r4, #16]
 8002bfa:	6861      	ldr	r1, [r4, #4]
 8002bfc:	4299      	cmp	r1, r3
 8002bfe:	bfde      	ittt	le
 8002c00:	2330      	movle	r3, #48	@ 0x30
 8002c02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c0a:	1b92      	subs	r2, r2, r6
 8002c0c:	6122      	str	r2, [r4, #16]
 8002c0e:	464b      	mov	r3, r9
 8002c10:	4621      	mov	r1, r4
 8002c12:	4640      	mov	r0, r8
 8002c14:	f8cd a000 	str.w	sl, [sp]
 8002c18:	aa03      	add	r2, sp, #12
 8002c1a:	f7ff fee1 	bl	80029e0 <_printf_common>
 8002c1e:	3001      	adds	r0, #1
 8002c20:	d14a      	bne.n	8002cb8 <_printf_i+0x1f4>
 8002c22:	f04f 30ff 	mov.w	r0, #4294967295
 8002c26:	b004      	add	sp, #16
 8002c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	f043 0320 	orr.w	r3, r3, #32
 8002c32:	6023      	str	r3, [r4, #0]
 8002c34:	2778      	movs	r7, #120	@ 0x78
 8002c36:	4832      	ldr	r0, [pc, #200]	@ (8002d00 <_printf_i+0x23c>)
 8002c38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	6831      	ldr	r1, [r6, #0]
 8002c40:	061f      	lsls	r7, r3, #24
 8002c42:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c46:	d402      	bmi.n	8002c4e <_printf_i+0x18a>
 8002c48:	065f      	lsls	r7, r3, #25
 8002c4a:	bf48      	it	mi
 8002c4c:	b2ad      	uxthmi	r5, r5
 8002c4e:	6031      	str	r1, [r6, #0]
 8002c50:	07d9      	lsls	r1, r3, #31
 8002c52:	bf44      	itt	mi
 8002c54:	f043 0320 	orrmi.w	r3, r3, #32
 8002c58:	6023      	strmi	r3, [r4, #0]
 8002c5a:	b11d      	cbz	r5, 8002c64 <_printf_i+0x1a0>
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	e7ab      	b.n	8002bb8 <_printf_i+0xf4>
 8002c60:	4826      	ldr	r0, [pc, #152]	@ (8002cfc <_printf_i+0x238>)
 8002c62:	e7e9      	b.n	8002c38 <_printf_i+0x174>
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	f023 0320 	bic.w	r3, r3, #32
 8002c6a:	6023      	str	r3, [r4, #0]
 8002c6c:	e7f6      	b.n	8002c5c <_printf_i+0x198>
 8002c6e:	4616      	mov	r6, r2
 8002c70:	e7bd      	b.n	8002bee <_printf_i+0x12a>
 8002c72:	6833      	ldr	r3, [r6, #0]
 8002c74:	6825      	ldr	r5, [r4, #0]
 8002c76:	1d18      	adds	r0, r3, #4
 8002c78:	6961      	ldr	r1, [r4, #20]
 8002c7a:	6030      	str	r0, [r6, #0]
 8002c7c:	062e      	lsls	r6, r5, #24
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	d501      	bpl.n	8002c86 <_printf_i+0x1c2>
 8002c82:	6019      	str	r1, [r3, #0]
 8002c84:	e002      	b.n	8002c8c <_printf_i+0x1c8>
 8002c86:	0668      	lsls	r0, r5, #25
 8002c88:	d5fb      	bpl.n	8002c82 <_printf_i+0x1be>
 8002c8a:	8019      	strh	r1, [r3, #0]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	4616      	mov	r6, r2
 8002c90:	6123      	str	r3, [r4, #16]
 8002c92:	e7bc      	b.n	8002c0e <_printf_i+0x14a>
 8002c94:	6833      	ldr	r3, [r6, #0]
 8002c96:	2100      	movs	r1, #0
 8002c98:	1d1a      	adds	r2, r3, #4
 8002c9a:	6032      	str	r2, [r6, #0]
 8002c9c:	681e      	ldr	r6, [r3, #0]
 8002c9e:	6862      	ldr	r2, [r4, #4]
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	f000 f97b 	bl	8002f9c <memchr>
 8002ca6:	b108      	cbz	r0, 8002cac <_printf_i+0x1e8>
 8002ca8:	1b80      	subs	r0, r0, r6
 8002caa:	6060      	str	r0, [r4, #4]
 8002cac:	6863      	ldr	r3, [r4, #4]
 8002cae:	6123      	str	r3, [r4, #16]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cb6:	e7aa      	b.n	8002c0e <_printf_i+0x14a>
 8002cb8:	4632      	mov	r2, r6
 8002cba:	4649      	mov	r1, r9
 8002cbc:	4640      	mov	r0, r8
 8002cbe:	6923      	ldr	r3, [r4, #16]
 8002cc0:	47d0      	blx	sl
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	d0ad      	beq.n	8002c22 <_printf_i+0x15e>
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	079b      	lsls	r3, r3, #30
 8002cca:	d413      	bmi.n	8002cf4 <_printf_i+0x230>
 8002ccc:	68e0      	ldr	r0, [r4, #12]
 8002cce:	9b03      	ldr	r3, [sp, #12]
 8002cd0:	4298      	cmp	r0, r3
 8002cd2:	bfb8      	it	lt
 8002cd4:	4618      	movlt	r0, r3
 8002cd6:	e7a6      	b.n	8002c26 <_printf_i+0x162>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	4632      	mov	r2, r6
 8002cdc:	4649      	mov	r1, r9
 8002cde:	4640      	mov	r0, r8
 8002ce0:	47d0      	blx	sl
 8002ce2:	3001      	adds	r0, #1
 8002ce4:	d09d      	beq.n	8002c22 <_printf_i+0x15e>
 8002ce6:	3501      	adds	r5, #1
 8002ce8:	68e3      	ldr	r3, [r4, #12]
 8002cea:	9903      	ldr	r1, [sp, #12]
 8002cec:	1a5b      	subs	r3, r3, r1
 8002cee:	42ab      	cmp	r3, r5
 8002cf0:	dcf2      	bgt.n	8002cd8 <_printf_i+0x214>
 8002cf2:	e7eb      	b.n	8002ccc <_printf_i+0x208>
 8002cf4:	2500      	movs	r5, #0
 8002cf6:	f104 0619 	add.w	r6, r4, #25
 8002cfa:	e7f5      	b.n	8002ce8 <_printf_i+0x224>
 8002cfc:	08003225 	.word	0x08003225
 8002d00:	08003236 	.word	0x08003236

08002d04 <__sflush_r>:
 8002d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	0716      	lsls	r6, r2, #28
 8002d0c:	4605      	mov	r5, r0
 8002d0e:	460c      	mov	r4, r1
 8002d10:	d454      	bmi.n	8002dbc <__sflush_r+0xb8>
 8002d12:	684b      	ldr	r3, [r1, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	dc02      	bgt.n	8002d1e <__sflush_r+0x1a>
 8002d18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	dd48      	ble.n	8002db0 <__sflush_r+0xac>
 8002d1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d20:	2e00      	cmp	r6, #0
 8002d22:	d045      	beq.n	8002db0 <__sflush_r+0xac>
 8002d24:	2300      	movs	r3, #0
 8002d26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d2a:	682f      	ldr	r7, [r5, #0]
 8002d2c:	6a21      	ldr	r1, [r4, #32]
 8002d2e:	602b      	str	r3, [r5, #0]
 8002d30:	d030      	beq.n	8002d94 <__sflush_r+0x90>
 8002d32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d34:	89a3      	ldrh	r3, [r4, #12]
 8002d36:	0759      	lsls	r1, r3, #29
 8002d38:	d505      	bpl.n	8002d46 <__sflush_r+0x42>
 8002d3a:	6863      	ldr	r3, [r4, #4]
 8002d3c:	1ad2      	subs	r2, r2, r3
 8002d3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d40:	b10b      	cbz	r3, 8002d46 <__sflush_r+0x42>
 8002d42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d44:	1ad2      	subs	r2, r2, r3
 8002d46:	2300      	movs	r3, #0
 8002d48:	4628      	mov	r0, r5
 8002d4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d4c:	6a21      	ldr	r1, [r4, #32]
 8002d4e:	47b0      	blx	r6
 8002d50:	1c43      	adds	r3, r0, #1
 8002d52:	89a3      	ldrh	r3, [r4, #12]
 8002d54:	d106      	bne.n	8002d64 <__sflush_r+0x60>
 8002d56:	6829      	ldr	r1, [r5, #0]
 8002d58:	291d      	cmp	r1, #29
 8002d5a:	d82b      	bhi.n	8002db4 <__sflush_r+0xb0>
 8002d5c:	4a28      	ldr	r2, [pc, #160]	@ (8002e00 <__sflush_r+0xfc>)
 8002d5e:	410a      	asrs	r2, r1
 8002d60:	07d6      	lsls	r6, r2, #31
 8002d62:	d427      	bmi.n	8002db4 <__sflush_r+0xb0>
 8002d64:	2200      	movs	r2, #0
 8002d66:	6062      	str	r2, [r4, #4]
 8002d68:	6922      	ldr	r2, [r4, #16]
 8002d6a:	04d9      	lsls	r1, r3, #19
 8002d6c:	6022      	str	r2, [r4, #0]
 8002d6e:	d504      	bpl.n	8002d7a <__sflush_r+0x76>
 8002d70:	1c42      	adds	r2, r0, #1
 8002d72:	d101      	bne.n	8002d78 <__sflush_r+0x74>
 8002d74:	682b      	ldr	r3, [r5, #0]
 8002d76:	b903      	cbnz	r3, 8002d7a <__sflush_r+0x76>
 8002d78:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d7c:	602f      	str	r7, [r5, #0]
 8002d7e:	b1b9      	cbz	r1, 8002db0 <__sflush_r+0xac>
 8002d80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d84:	4299      	cmp	r1, r3
 8002d86:	d002      	beq.n	8002d8e <__sflush_r+0x8a>
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f7ff fbf3 	bl	8002574 <_free_r>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d92:	e00d      	b.n	8002db0 <__sflush_r+0xac>
 8002d94:	2301      	movs	r3, #1
 8002d96:	4628      	mov	r0, r5
 8002d98:	47b0      	blx	r6
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	1c50      	adds	r0, r2, #1
 8002d9e:	d1c9      	bne.n	8002d34 <__sflush_r+0x30>
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0c6      	beq.n	8002d34 <__sflush_r+0x30>
 8002da6:	2b1d      	cmp	r3, #29
 8002da8:	d001      	beq.n	8002dae <__sflush_r+0xaa>
 8002daa:	2b16      	cmp	r3, #22
 8002dac:	d11d      	bne.n	8002dea <__sflush_r+0xe6>
 8002dae:	602f      	str	r7, [r5, #0]
 8002db0:	2000      	movs	r0, #0
 8002db2:	e021      	b.n	8002df8 <__sflush_r+0xf4>
 8002db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	e01a      	b.n	8002df2 <__sflush_r+0xee>
 8002dbc:	690f      	ldr	r7, [r1, #16]
 8002dbe:	2f00      	cmp	r7, #0
 8002dc0:	d0f6      	beq.n	8002db0 <__sflush_r+0xac>
 8002dc2:	0793      	lsls	r3, r2, #30
 8002dc4:	bf18      	it	ne
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	680e      	ldr	r6, [r1, #0]
 8002dca:	bf08      	it	eq
 8002dcc:	694b      	ldreq	r3, [r1, #20]
 8002dce:	1bf6      	subs	r6, r6, r7
 8002dd0:	600f      	str	r7, [r1, #0]
 8002dd2:	608b      	str	r3, [r1, #8]
 8002dd4:	2e00      	cmp	r6, #0
 8002dd6:	ddeb      	ble.n	8002db0 <__sflush_r+0xac>
 8002dd8:	4633      	mov	r3, r6
 8002dda:	463a      	mov	r2, r7
 8002ddc:	4628      	mov	r0, r5
 8002dde:	6a21      	ldr	r1, [r4, #32]
 8002de0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002de4:	47e0      	blx	ip
 8002de6:	2800      	cmp	r0, #0
 8002de8:	dc07      	bgt.n	8002dfa <__sflush_r+0xf6>
 8002dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002df2:	f04f 30ff 	mov.w	r0, #4294967295
 8002df6:	81a3      	strh	r3, [r4, #12]
 8002df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dfa:	4407      	add	r7, r0
 8002dfc:	1a36      	subs	r6, r6, r0
 8002dfe:	e7e9      	b.n	8002dd4 <__sflush_r+0xd0>
 8002e00:	dfbffffe 	.word	0xdfbffffe

08002e04 <_fflush_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	690b      	ldr	r3, [r1, #16]
 8002e08:	4605      	mov	r5, r0
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	b913      	cbnz	r3, 8002e14 <_fflush_r+0x10>
 8002e0e:	2500      	movs	r5, #0
 8002e10:	4628      	mov	r0, r5
 8002e12:	bd38      	pop	{r3, r4, r5, pc}
 8002e14:	b118      	cbz	r0, 8002e1e <_fflush_r+0x1a>
 8002e16:	6a03      	ldr	r3, [r0, #32]
 8002e18:	b90b      	cbnz	r3, 8002e1e <_fflush_r+0x1a>
 8002e1a:	f7ff faa3 	bl	8002364 <__sinit>
 8002e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f3      	beq.n	8002e0e <_fflush_r+0xa>
 8002e26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e28:	07d0      	lsls	r0, r2, #31
 8002e2a:	d404      	bmi.n	8002e36 <_fflush_r+0x32>
 8002e2c:	0599      	lsls	r1, r3, #22
 8002e2e:	d402      	bmi.n	8002e36 <_fflush_r+0x32>
 8002e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e32:	f7ff fb9c 	bl	800256e <__retarget_lock_acquire_recursive>
 8002e36:	4628      	mov	r0, r5
 8002e38:	4621      	mov	r1, r4
 8002e3a:	f7ff ff63 	bl	8002d04 <__sflush_r>
 8002e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e40:	4605      	mov	r5, r0
 8002e42:	07da      	lsls	r2, r3, #31
 8002e44:	d4e4      	bmi.n	8002e10 <_fflush_r+0xc>
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	059b      	lsls	r3, r3, #22
 8002e4a:	d4e1      	bmi.n	8002e10 <_fflush_r+0xc>
 8002e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e4e:	f7ff fb8f 	bl	8002570 <__retarget_lock_release_recursive>
 8002e52:	e7dd      	b.n	8002e10 <_fflush_r+0xc>

08002e54 <__swbuf_r>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	460e      	mov	r6, r1
 8002e58:	4614      	mov	r4, r2
 8002e5a:	4605      	mov	r5, r0
 8002e5c:	b118      	cbz	r0, 8002e66 <__swbuf_r+0x12>
 8002e5e:	6a03      	ldr	r3, [r0, #32]
 8002e60:	b90b      	cbnz	r3, 8002e66 <__swbuf_r+0x12>
 8002e62:	f7ff fa7f 	bl	8002364 <__sinit>
 8002e66:	69a3      	ldr	r3, [r4, #24]
 8002e68:	60a3      	str	r3, [r4, #8]
 8002e6a:	89a3      	ldrh	r3, [r4, #12]
 8002e6c:	071a      	lsls	r2, r3, #28
 8002e6e:	d501      	bpl.n	8002e74 <__swbuf_r+0x20>
 8002e70:	6923      	ldr	r3, [r4, #16]
 8002e72:	b943      	cbnz	r3, 8002e86 <__swbuf_r+0x32>
 8002e74:	4621      	mov	r1, r4
 8002e76:	4628      	mov	r0, r5
 8002e78:	f000 f82a 	bl	8002ed0 <__swsetup_r>
 8002e7c:	b118      	cbz	r0, 8002e86 <__swbuf_r+0x32>
 8002e7e:	f04f 37ff 	mov.w	r7, #4294967295
 8002e82:	4638      	mov	r0, r7
 8002e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	6922      	ldr	r2, [r4, #16]
 8002e8a:	b2f6      	uxtb	r6, r6
 8002e8c:	1a98      	subs	r0, r3, r2
 8002e8e:	6963      	ldr	r3, [r4, #20]
 8002e90:	4637      	mov	r7, r6
 8002e92:	4283      	cmp	r3, r0
 8002e94:	dc05      	bgt.n	8002ea2 <__swbuf_r+0x4e>
 8002e96:	4621      	mov	r1, r4
 8002e98:	4628      	mov	r0, r5
 8002e9a:	f7ff ffb3 	bl	8002e04 <_fflush_r>
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d1ed      	bne.n	8002e7e <__swbuf_r+0x2a>
 8002ea2:	68a3      	ldr	r3, [r4, #8]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60a3      	str	r3, [r4, #8]
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	6022      	str	r2, [r4, #0]
 8002eae:	701e      	strb	r6, [r3, #0]
 8002eb0:	6962      	ldr	r2, [r4, #20]
 8002eb2:	1c43      	adds	r3, r0, #1
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d004      	beq.n	8002ec2 <__swbuf_r+0x6e>
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	07db      	lsls	r3, r3, #31
 8002ebc:	d5e1      	bpl.n	8002e82 <__swbuf_r+0x2e>
 8002ebe:	2e0a      	cmp	r6, #10
 8002ec0:	d1df      	bne.n	8002e82 <__swbuf_r+0x2e>
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f7ff ff9d 	bl	8002e04 <_fflush_r>
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d0d9      	beq.n	8002e82 <__swbuf_r+0x2e>
 8002ece:	e7d6      	b.n	8002e7e <__swbuf_r+0x2a>

08002ed0 <__swsetup_r>:
 8002ed0:	b538      	push	{r3, r4, r5, lr}
 8002ed2:	4b29      	ldr	r3, [pc, #164]	@ (8002f78 <__swsetup_r+0xa8>)
 8002ed4:	4605      	mov	r5, r0
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	460c      	mov	r4, r1
 8002eda:	b118      	cbz	r0, 8002ee4 <__swsetup_r+0x14>
 8002edc:	6a03      	ldr	r3, [r0, #32]
 8002ede:	b90b      	cbnz	r3, 8002ee4 <__swsetup_r+0x14>
 8002ee0:	f7ff fa40 	bl	8002364 <__sinit>
 8002ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee8:	0719      	lsls	r1, r3, #28
 8002eea:	d422      	bmi.n	8002f32 <__swsetup_r+0x62>
 8002eec:	06da      	lsls	r2, r3, #27
 8002eee:	d407      	bmi.n	8002f00 <__swsetup_r+0x30>
 8002ef0:	2209      	movs	r2, #9
 8002ef2:	602a      	str	r2, [r5, #0]
 8002ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	e033      	b.n	8002f68 <__swsetup_r+0x98>
 8002f00:	0758      	lsls	r0, r3, #29
 8002f02:	d512      	bpl.n	8002f2a <__swsetup_r+0x5a>
 8002f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f06:	b141      	cbz	r1, 8002f1a <__swsetup_r+0x4a>
 8002f08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f0c:	4299      	cmp	r1, r3
 8002f0e:	d002      	beq.n	8002f16 <__swsetup_r+0x46>
 8002f10:	4628      	mov	r0, r5
 8002f12:	f7ff fb2f 	bl	8002574 <_free_r>
 8002f16:	2300      	movs	r3, #0
 8002f18:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f1a:	89a3      	ldrh	r3, [r4, #12]
 8002f1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f20:	81a3      	strh	r3, [r4, #12]
 8002f22:	2300      	movs	r3, #0
 8002f24:	6063      	str	r3, [r4, #4]
 8002f26:	6923      	ldr	r3, [r4, #16]
 8002f28:	6023      	str	r3, [r4, #0]
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	81a3      	strh	r3, [r4, #12]
 8002f32:	6923      	ldr	r3, [r4, #16]
 8002f34:	b94b      	cbnz	r3, 8002f4a <__swsetup_r+0x7a>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f40:	d003      	beq.n	8002f4a <__swsetup_r+0x7a>
 8002f42:	4621      	mov	r1, r4
 8002f44:	4628      	mov	r0, r5
 8002f46:	f000 f85c 	bl	8003002 <__smakebuf_r>
 8002f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f4e:	f013 0201 	ands.w	r2, r3, #1
 8002f52:	d00a      	beq.n	8002f6a <__swsetup_r+0x9a>
 8002f54:	2200      	movs	r2, #0
 8002f56:	60a2      	str	r2, [r4, #8]
 8002f58:	6962      	ldr	r2, [r4, #20]
 8002f5a:	4252      	negs	r2, r2
 8002f5c:	61a2      	str	r2, [r4, #24]
 8002f5e:	6922      	ldr	r2, [r4, #16]
 8002f60:	b942      	cbnz	r2, 8002f74 <__swsetup_r+0xa4>
 8002f62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f66:	d1c5      	bne.n	8002ef4 <__swsetup_r+0x24>
 8002f68:	bd38      	pop	{r3, r4, r5, pc}
 8002f6a:	0799      	lsls	r1, r3, #30
 8002f6c:	bf58      	it	pl
 8002f6e:	6962      	ldrpl	r2, [r4, #20]
 8002f70:	60a2      	str	r2, [r4, #8]
 8002f72:	e7f4      	b.n	8002f5e <__swsetup_r+0x8e>
 8002f74:	2000      	movs	r0, #0
 8002f76:	e7f7      	b.n	8002f68 <__swsetup_r+0x98>
 8002f78:	20000018 	.word	0x20000018

08002f7c <_sbrk_r>:
 8002f7c:	b538      	push	{r3, r4, r5, lr}
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4d05      	ldr	r5, [pc, #20]	@ (8002f98 <_sbrk_r+0x1c>)
 8002f82:	4604      	mov	r4, r0
 8002f84:	4608      	mov	r0, r1
 8002f86:	602b      	str	r3, [r5, #0]
 8002f88:	f7fd fd40 	bl	8000a0c <_sbrk>
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	d102      	bne.n	8002f96 <_sbrk_r+0x1a>
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	b103      	cbz	r3, 8002f96 <_sbrk_r+0x1a>
 8002f94:	6023      	str	r3, [r4, #0]
 8002f96:	bd38      	pop	{r3, r4, r5, pc}
 8002f98:	20000214 	.word	0x20000214

08002f9c <memchr>:
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	b510      	push	{r4, lr}
 8002fa0:	b2c9      	uxtb	r1, r1
 8002fa2:	4402      	add	r2, r0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	d101      	bne.n	8002fae <memchr+0x12>
 8002faa:	2000      	movs	r0, #0
 8002fac:	e003      	b.n	8002fb6 <memchr+0x1a>
 8002fae:	7804      	ldrb	r4, [r0, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	428c      	cmp	r4, r1
 8002fb4:	d1f6      	bne.n	8002fa4 <memchr+0x8>
 8002fb6:	bd10      	pop	{r4, pc}

08002fb8 <__swhatbuf_r>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	460c      	mov	r4, r1
 8002fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc0:	4615      	mov	r5, r2
 8002fc2:	2900      	cmp	r1, #0
 8002fc4:	461e      	mov	r6, r3
 8002fc6:	b096      	sub	sp, #88	@ 0x58
 8002fc8:	da0c      	bge.n	8002fe4 <__swhatbuf_r+0x2c>
 8002fca:	89a3      	ldrh	r3, [r4, #12]
 8002fcc:	2100      	movs	r1, #0
 8002fce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002fd2:	bf14      	ite	ne
 8002fd4:	2340      	movne	r3, #64	@ 0x40
 8002fd6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002fda:	2000      	movs	r0, #0
 8002fdc:	6031      	str	r1, [r6, #0]
 8002fde:	602b      	str	r3, [r5, #0]
 8002fe0:	b016      	add	sp, #88	@ 0x58
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	466a      	mov	r2, sp
 8002fe6:	f000 f849 	bl	800307c <_fstat_r>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	dbed      	blt.n	8002fca <__swhatbuf_r+0x12>
 8002fee:	9901      	ldr	r1, [sp, #4]
 8002ff0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002ff4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002ff8:	4259      	negs	r1, r3
 8002ffa:	4159      	adcs	r1, r3
 8002ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003000:	e7eb      	b.n	8002fda <__swhatbuf_r+0x22>

08003002 <__smakebuf_r>:
 8003002:	898b      	ldrh	r3, [r1, #12]
 8003004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003006:	079d      	lsls	r5, r3, #30
 8003008:	4606      	mov	r6, r0
 800300a:	460c      	mov	r4, r1
 800300c:	d507      	bpl.n	800301e <__smakebuf_r+0x1c>
 800300e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003012:	6023      	str	r3, [r4, #0]
 8003014:	6123      	str	r3, [r4, #16]
 8003016:	2301      	movs	r3, #1
 8003018:	6163      	str	r3, [r4, #20]
 800301a:	b003      	add	sp, #12
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800301e:	466a      	mov	r2, sp
 8003020:	ab01      	add	r3, sp, #4
 8003022:	f7ff ffc9 	bl	8002fb8 <__swhatbuf_r>
 8003026:	9f00      	ldr	r7, [sp, #0]
 8003028:	4605      	mov	r5, r0
 800302a:	4639      	mov	r1, r7
 800302c:	4630      	mov	r0, r6
 800302e:	f7ff fb0b 	bl	8002648 <_malloc_r>
 8003032:	b948      	cbnz	r0, 8003048 <__smakebuf_r+0x46>
 8003034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003038:	059a      	lsls	r2, r3, #22
 800303a:	d4ee      	bmi.n	800301a <__smakebuf_r+0x18>
 800303c:	f023 0303 	bic.w	r3, r3, #3
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	81a3      	strh	r3, [r4, #12]
 8003046:	e7e2      	b.n	800300e <__smakebuf_r+0xc>
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800304e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003052:	81a3      	strh	r3, [r4, #12]
 8003054:	9b01      	ldr	r3, [sp, #4]
 8003056:	6020      	str	r0, [r4, #0]
 8003058:	b15b      	cbz	r3, 8003072 <__smakebuf_r+0x70>
 800305a:	4630      	mov	r0, r6
 800305c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003060:	f000 f81e 	bl	80030a0 <_isatty_r>
 8003064:	b128      	cbz	r0, 8003072 <__smakebuf_r+0x70>
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	f023 0303 	bic.w	r3, r3, #3
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	81a3      	strh	r3, [r4, #12]
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	431d      	orrs	r5, r3
 8003076:	81a5      	strh	r5, [r4, #12]
 8003078:	e7cf      	b.n	800301a <__smakebuf_r+0x18>
	...

0800307c <_fstat_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	2300      	movs	r3, #0
 8003080:	4d06      	ldr	r5, [pc, #24]	@ (800309c <_fstat_r+0x20>)
 8003082:	4604      	mov	r4, r0
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	602b      	str	r3, [r5, #0]
 800308a:	f7fd fc99 	bl	80009c0 <_fstat>
 800308e:	1c43      	adds	r3, r0, #1
 8003090:	d102      	bne.n	8003098 <_fstat_r+0x1c>
 8003092:	682b      	ldr	r3, [r5, #0]
 8003094:	b103      	cbz	r3, 8003098 <_fstat_r+0x1c>
 8003096:	6023      	str	r3, [r4, #0]
 8003098:	bd38      	pop	{r3, r4, r5, pc}
 800309a:	bf00      	nop
 800309c:	20000214 	.word	0x20000214

080030a0 <_isatty_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	2300      	movs	r3, #0
 80030a4:	4d05      	ldr	r5, [pc, #20]	@ (80030bc <_isatty_r+0x1c>)
 80030a6:	4604      	mov	r4, r0
 80030a8:	4608      	mov	r0, r1
 80030aa:	602b      	str	r3, [r5, #0]
 80030ac:	f7fd fc97 	bl	80009de <_isatty>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d102      	bne.n	80030ba <_isatty_r+0x1a>
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	b103      	cbz	r3, 80030ba <_isatty_r+0x1a>
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	20000214 	.word	0x20000214

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
