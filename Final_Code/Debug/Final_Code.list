
Final_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002290  08010988  08010988  00011988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c18  08012c18  000141fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012c18  08012c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c20  08012c20  000141fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c20  08012c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012c24  08012c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08012c28  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000103c  20000200  08012e24  00014200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08012e24  0001423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a843  00000000  00000000  0001422c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a73  00000000  00000000  0002ea6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000334e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001118  00000000  00000000  00034b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028373  00000000  00000000  00035c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e2d  00000000  00000000  0005dfdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8316  00000000  00000000  00080e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015911e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007058  00000000  00000000  00159164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001601bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010970 	.word	0x08010970

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08010970 	.word	0x08010970

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 ba09 	b.w	800111c <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9be 	b.w	800111c <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	468e      	mov	lr, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	4688      	mov	r8, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d14a      	bne.n	8000eca <__udivmoddi4+0xa6>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4617      	mov	r7, r2
 8000e38:	d962      	bls.n	8000f00 <__udivmoddi4+0xdc>
 8000e3a:	fab2 f682 	clz	r6, r2
 8000e3e:	b14e      	cbz	r6, 8000e54 <__udivmoddi4+0x30>
 8000e40:	f1c6 0320 	rsb	r3, r6, #32
 8000e44:	fa01 f806 	lsl.w	r8, r1, r6
 8000e48:	fa20 f303 	lsr.w	r3, r0, r3
 8000e4c:	40b7      	lsls	r7, r6
 8000e4e:	ea43 0808 	orr.w	r8, r3, r8
 8000e52:	40b4      	lsls	r4, r6
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	fa1f fc87 	uxth.w	ip, r7
 8000e5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e60:	0c23      	lsrs	r3, r4, #16
 8000e62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x62>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e78:	f080 80ea 	bcs.w	8001050 <__udivmoddi4+0x22c>
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f240 80e7 	bls.w	8001050 <__udivmoddi4+0x22c>
 8000e82:	3902      	subs	r1, #2
 8000e84:	443b      	add	r3, r7
 8000e86:	1a9a      	subs	r2, r3, r2
 8000e88:	b2a3      	uxth	r3, r4
 8000e8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e9a:	459c      	cmp	ip, r3
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x8e>
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea4:	f080 80d6 	bcs.w	8001054 <__udivmoddi4+0x230>
 8000ea8:	459c      	cmp	ip, r3
 8000eaa:	f240 80d3 	bls.w	8001054 <__udivmoddi4+0x230>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eb6:	eba3 030c 	sub.w	r3, r3, ip
 8000eba:	2100      	movs	r1, #0
 8000ebc:	b11d      	cbz	r5, 8000ec6 <__udivmoddi4+0xa2>
 8000ebe:	40f3      	lsrs	r3, r6
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d905      	bls.n	8000eda <__udivmoddi4+0xb6>
 8000ece:	b10d      	cbz	r5, 8000ed4 <__udivmoddi4+0xb0>
 8000ed0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e7f5      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8000eda:	fab3 f183 	clz	r1, r3
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d146      	bne.n	8000f70 <__udivmoddi4+0x14c>
 8000ee2:	4573      	cmp	r3, lr
 8000ee4:	d302      	bcc.n	8000eec <__udivmoddi4+0xc8>
 8000ee6:	4282      	cmp	r2, r0
 8000ee8:	f200 8105 	bhi.w	80010f6 <__udivmoddi4+0x2d2>
 8000eec:	1a84      	subs	r4, r0, r2
 8000eee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d0e5      	beq.n	8000ec6 <__udivmoddi4+0xa2>
 8000efa:	e9c5 4800 	strd	r4, r8, [r5]
 8000efe:	e7e2      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	f000 8090 	beq.w	8001026 <__udivmoddi4+0x202>
 8000f06:	fab2 f682 	clz	r6, r2
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	f040 80a4 	bne.w	8001058 <__udivmoddi4+0x234>
 8000f10:	1a8a      	subs	r2, r1, r2
 8000f12:	0c03      	lsrs	r3, r0, #16
 8000f14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f18:	b280      	uxth	r0, r0
 8000f1a:	b2bc      	uxth	r4, r7
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x11e>
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x11c>
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	f200 80e0 	bhi.w	8001100 <__udivmoddi4+0x2dc>
 8000f40:	46c4      	mov	ip, r8
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f50:	fb02 f404 	mul.w	r4, r2, r4
 8000f54:	429c      	cmp	r4, r3
 8000f56:	d907      	bls.n	8000f68 <__udivmoddi4+0x144>
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f5e:	d202      	bcs.n	8000f66 <__udivmoddi4+0x142>
 8000f60:	429c      	cmp	r4, r3
 8000f62:	f200 80ca 	bhi.w	80010fa <__udivmoddi4+0x2d6>
 8000f66:	4602      	mov	r2, r0
 8000f68:	1b1b      	subs	r3, r3, r4
 8000f6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f6e:	e7a5      	b.n	8000ebc <__udivmoddi4+0x98>
 8000f70:	f1c1 0620 	rsb	r6, r1, #32
 8000f74:	408b      	lsls	r3, r1
 8000f76:	fa22 f706 	lsr.w	r7, r2, r6
 8000f7a:	431f      	orrs	r7, r3
 8000f7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f80:	fa20 f306 	lsr.w	r3, r0, r6
 8000f84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f8c:	4323      	orrs	r3, r4
 8000f8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f92:	fa1f fc87 	uxth.w	ip, r7
 8000f96:	fbbe f0f9 	udiv	r0, lr, r9
 8000f9a:	0c1c      	lsrs	r4, r3, #16
 8000f9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000fa0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000fa4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000fa8:	45a6      	cmp	lr, r4
 8000faa:	fa02 f201 	lsl.w	r2, r2, r1
 8000fae:	d909      	bls.n	8000fc4 <__udivmoddi4+0x1a0>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fb6:	f080 809c 	bcs.w	80010f2 <__udivmoddi4+0x2ce>
 8000fba:	45a6      	cmp	lr, r4
 8000fbc:	f240 8099 	bls.w	80010f2 <__udivmoddi4+0x2ce>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	443c      	add	r4, r7
 8000fc4:	eba4 040e 	sub.w	r4, r4, lr
 8000fc8:	fa1f fe83 	uxth.w	lr, r3
 8000fcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fdc:	45a4      	cmp	ip, r4
 8000fde:	d908      	bls.n	8000ff2 <__udivmoddi4+0x1ce>
 8000fe0:	193c      	adds	r4, r7, r4
 8000fe2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fe6:	f080 8082 	bcs.w	80010ee <__udivmoddi4+0x2ca>
 8000fea:	45a4      	cmp	ip, r4
 8000fec:	d97f      	bls.n	80010ee <__udivmoddi4+0x2ca>
 8000fee:	3b02      	subs	r3, #2
 8000ff0:	443c      	add	r4, r7
 8000ff2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ffe:	4564      	cmp	r4, ip
 8001000:	4673      	mov	r3, lr
 8001002:	46e1      	mov	r9, ip
 8001004:	d362      	bcc.n	80010cc <__udivmoddi4+0x2a8>
 8001006:	d05f      	beq.n	80010c8 <__udivmoddi4+0x2a4>
 8001008:	b15d      	cbz	r5, 8001022 <__udivmoddi4+0x1fe>
 800100a:	ebb8 0203 	subs.w	r2, r8, r3
 800100e:	eb64 0409 	sbc.w	r4, r4, r9
 8001012:	fa04 f606 	lsl.w	r6, r4, r6
 8001016:	fa22 f301 	lsr.w	r3, r2, r1
 800101a:	431e      	orrs	r6, r3
 800101c:	40cc      	lsrs	r4, r1
 800101e:	e9c5 6400 	strd	r6, r4, [r5]
 8001022:	2100      	movs	r1, #0
 8001024:	e74f      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8001026:	fbb1 fcf2 	udiv	ip, r1, r2
 800102a:	0c01      	lsrs	r1, r0, #16
 800102c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001030:	b280      	uxth	r0, r0
 8001032:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001036:	463b      	mov	r3, r7
 8001038:	4638      	mov	r0, r7
 800103a:	463c      	mov	r4, r7
 800103c:	46b8      	mov	r8, r7
 800103e:	46be      	mov	lr, r7
 8001040:	2620      	movs	r6, #32
 8001042:	fbb1 f1f7 	udiv	r1, r1, r7
 8001046:	eba2 0208 	sub.w	r2, r2, r8
 800104a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800104e:	e766      	b.n	8000f1e <__udivmoddi4+0xfa>
 8001050:	4601      	mov	r1, r0
 8001052:	e718      	b.n	8000e86 <__udivmoddi4+0x62>
 8001054:	4610      	mov	r0, r2
 8001056:	e72c      	b.n	8000eb2 <__udivmoddi4+0x8e>
 8001058:	f1c6 0220 	rsb	r2, r6, #32
 800105c:	fa2e f302 	lsr.w	r3, lr, r2
 8001060:	40b7      	lsls	r7, r6
 8001062:	40b1      	lsls	r1, r6
 8001064:	fa20 f202 	lsr.w	r2, r0, r2
 8001068:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800106c:	430a      	orrs	r2, r1
 800106e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001072:	b2bc      	uxth	r4, r7
 8001074:	fb0e 3318 	mls	r3, lr, r8, r3
 8001078:	0c11      	lsrs	r1, r2, #16
 800107a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800107e:	fb08 f904 	mul.w	r9, r8, r4
 8001082:	40b0      	lsls	r0, r6
 8001084:	4589      	cmp	r9, r1
 8001086:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800108a:	b280      	uxth	r0, r0
 800108c:	d93e      	bls.n	800110c <__udivmoddi4+0x2e8>
 800108e:	1879      	adds	r1, r7, r1
 8001090:	f108 3cff 	add.w	ip, r8, #4294967295
 8001094:	d201      	bcs.n	800109a <__udivmoddi4+0x276>
 8001096:	4589      	cmp	r9, r1
 8001098:	d81f      	bhi.n	80010da <__udivmoddi4+0x2b6>
 800109a:	eba1 0109 	sub.w	r1, r1, r9
 800109e:	fbb1 f9fe 	udiv	r9, r1, lr
 80010a2:	fb09 f804 	mul.w	r8, r9, r4
 80010a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80010aa:	b292      	uxth	r2, r2
 80010ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010b0:	4542      	cmp	r2, r8
 80010b2:	d229      	bcs.n	8001108 <__udivmoddi4+0x2e4>
 80010b4:	18ba      	adds	r2, r7, r2
 80010b6:	f109 31ff 	add.w	r1, r9, #4294967295
 80010ba:	d2c4      	bcs.n	8001046 <__udivmoddi4+0x222>
 80010bc:	4542      	cmp	r2, r8
 80010be:	d2c2      	bcs.n	8001046 <__udivmoddi4+0x222>
 80010c0:	f1a9 0102 	sub.w	r1, r9, #2
 80010c4:	443a      	add	r2, r7
 80010c6:	e7be      	b.n	8001046 <__udivmoddi4+0x222>
 80010c8:	45f0      	cmp	r8, lr
 80010ca:	d29d      	bcs.n	8001008 <__udivmoddi4+0x1e4>
 80010cc:	ebbe 0302 	subs.w	r3, lr, r2
 80010d0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010d4:	3801      	subs	r0, #1
 80010d6:	46e1      	mov	r9, ip
 80010d8:	e796      	b.n	8001008 <__udivmoddi4+0x1e4>
 80010da:	eba7 0909 	sub.w	r9, r7, r9
 80010de:	4449      	add	r1, r9
 80010e0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e8:	fb09 f804 	mul.w	r8, r9, r4
 80010ec:	e7db      	b.n	80010a6 <__udivmoddi4+0x282>
 80010ee:	4673      	mov	r3, lr
 80010f0:	e77f      	b.n	8000ff2 <__udivmoddi4+0x1ce>
 80010f2:	4650      	mov	r0, sl
 80010f4:	e766      	b.n	8000fc4 <__udivmoddi4+0x1a0>
 80010f6:	4608      	mov	r0, r1
 80010f8:	e6fd      	b.n	8000ef6 <__udivmoddi4+0xd2>
 80010fa:	443b      	add	r3, r7
 80010fc:	3a02      	subs	r2, #2
 80010fe:	e733      	b.n	8000f68 <__udivmoddi4+0x144>
 8001100:	f1ac 0c02 	sub.w	ip, ip, #2
 8001104:	443b      	add	r3, r7
 8001106:	e71c      	b.n	8000f42 <__udivmoddi4+0x11e>
 8001108:	4649      	mov	r1, r9
 800110a:	e79c      	b.n	8001046 <__udivmoddi4+0x222>
 800110c:	eba1 0109 	sub.w	r1, r1, r9
 8001110:	46c4      	mov	ip, r8
 8001112:	fbb1 f9fe 	udiv	r9, r1, lr
 8001116:	fb09 f804 	mul.w	r8, r9, r4
 800111a:	e7c4      	b.n	80010a6 <__udivmoddi4+0x282>

0800111c <__aeabi_idiv0>:
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <ILI9341_DrawFilledCircle>:
		}
	}
}

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b08b      	sub	sp, #44	@ 0x2c
 8001124:	af00      	add	r7, sp, #0
 8001126:	4604      	mov	r4, r0
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4623      	mov	r3, r4
 8001130:	80fb      	strh	r3, [r7, #6]
 8001132:	4603      	mov	r3, r0
 8001134:	80bb      	strh	r3, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]
 800113a:	4613      	mov	r3, r2
 800113c:	803b      	strh	r3, [r7, #0]

	int x = radius;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	f1c3 0301 	rsb	r3, r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8001158:	e061      	b.n	800121e <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	e018      	b.n	8001196 <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	b298      	uxth	r0, r3
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	b29a      	uxth	r2, r3
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	883a      	ldrh	r2, [r7, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f000 fcf3 	bl	8001b60 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	b298      	uxth	r0, r3
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	b29b      	uxth	r3, r3
 8001182:	88ba      	ldrh	r2, [r7, #4]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	f000 fce8 	bl	8001b60 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	3301      	adds	r3, #1
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119a:	4413      	add	r3, r2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	429a      	cmp	r2, r3
 80011a0:	dde0      	ble.n	8001164 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e018      	b.n	80011de <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	b298      	uxth	r0, r3
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	883a      	ldrh	r2, [r7, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f000 fccf 	bl	8001b60 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	b298      	uxth	r0, r3
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	88ba      	ldrh	r2, [r7, #4]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	883a      	ldrh	r2, [r7, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	f000 fcc4 	bl	8001b60 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	4413      	add	r3, r2
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dde0      	ble.n	80011ac <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	3301      	adds	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4413      	add	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
		yChange += 2;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	3302      	adds	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005a      	lsls	r2, r3, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	4413      	add	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	dd09      	ble.n	800121e <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	3b01      	subs	r3, #1
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4413      	add	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3302      	adds	r3, #2
 800121c:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 800121e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	429a      	cmp	r2, r3
 8001224:	da99      	bge.n	800115a <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	372c      	adds	r7, #44	@ 0x2c
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}

08001230 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	4604      	mov	r4, r0
 8001238:	4608      	mov	r0, r1
 800123a:	4611      	mov	r1, r2
 800123c:	461a      	mov	r2, r3
 800123e:	4623      	mov	r3, r4
 8001240:	80fb      	strh	r3, [r7, #6]
 8001242:	4603      	mov	r3, r0
 8001244:	80bb      	strh	r3, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	807b      	strh	r3, [r7, #2]
 800124a:	4613      	mov	r3, r2
 800124c:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8001264:	887a      	ldrh	r2, [r7, #2]
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001272:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 8001276:	edd7 7a03 	vldr	s15, [r7, #12]
 800127a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d501      	bpl.n	8001288 <ILI9341_DrawHollowRectangleCoord+0x58>
 8001284:	2301      	movs	r3, #1
 8001286:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 800128e:	883a      	ldrh	r2, [r7, #0]
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	d501      	bpl.n	80012b2 <ILI9341_DrawHollowRectangleCoord+0x82>
 80012ae:	2301      	movs	r3, #1
 80012b0:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 80012b2:	7cfb      	ldrb	r3, [r7, #19]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d104      	bne.n	80012c2 <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 80012b8:	887a      	ldrh	r2, [r7, #2]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	82fb      	strh	r3, [r7, #22]
 80012c0:	e003      	b.n	80012ca <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 80012ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012cc:	8afa      	ldrh	r2, [r7, #22]
 80012ce:	88b9      	ldrh	r1, [r7, #4]
 80012d0:	88f8      	ldrh	r0, [r7, #6]
 80012d2:	f000 fd07 	bl	8001ce4 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 80012d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012d8:	8afa      	ldrh	r2, [r7, #22]
 80012da:	8839      	ldrh	r1, [r7, #0]
 80012dc:	88f8      	ldrh	r0, [r7, #6]
 80012de:	f000 fd01 	bl	8001ce4 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 80012e2:	7cbb      	ldrb	r3, [r7, #18]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d104      	bne.n	80012f2 <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 80012e8:	883a      	ldrh	r2, [r7, #0]
 80012ea:	88bb      	ldrh	r3, [r7, #4]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	82bb      	strh	r3, [r7, #20]
 80012f0:	e003      	b.n	80012fa <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	883b      	ldrh	r3, [r7, #0]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80012fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80012fc:	8aba      	ldrh	r2, [r7, #20]
 80012fe:	88b9      	ldrh	r1, [r7, #4]
 8001300:	88f8      	ldrh	r0, [r7, #6]
 8001302:	f000 fd33 	bl	8001d6c <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 8001306:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001308:	8aba      	ldrh	r2, [r7, #20]
 800130a:	88b9      	ldrh	r1, [r7, #4]
 800130c:	8878      	ldrh	r0, [r7, #2]
 800130e:	f000 fd2d 	bl	8001d6c <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 8001312:	8afb      	ldrh	r3, [r7, #22]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <ILI9341_DrawHollowRectangleCoord+0xee>
 8001318:	8abb      	ldrh	r3, [r7, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 800131e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001320:	8839      	ldrh	r1, [r7, #0]
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fc1b 	bl	8001b60 <ILI9341_DrawPixel>
	}
}
 800132a:	bf00      	nop
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}

08001332 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001332:	b590      	push	{r4, r7, lr}
 8001334:	b08d      	sub	sp, #52	@ 0x34
 8001336:	af02      	add	r7, sp, #8
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	460b      	mov	r3, r1
 8001344:	81bb      	strh	r3, [r7, #12]
 8001346:	4613      	mov	r3, r2
 8001348:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b1e      	cmp	r3, #30
 800134e:	d964      	bls.n	800141a <ILI9341_DrawChar+0xe8>
 8001350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db60      	blt.n	800141a <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3301      	adds	r3, #1
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3302      	adds	r3, #2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3303      	adds	r3, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3b20      	subs	r3, #32
 800137a:	7ffa      	ldrb	r2, [r7, #31]
 800137c:	fb02 f303 	mul.w	r3, r2, r3
 8001380:	3304      	adds	r3, #4
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	4413      	add	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8001388:	7fbb      	ldrb	r3, [r7, #30]
 800138a:	b29a      	uxth	r2, r3
 800138c:	7f7b      	ldrb	r3, [r7, #29]
 800138e:	b29c      	uxth	r4, r3
 8001390:	88f9      	ldrh	r1, [r7, #6]
 8001392:	89b8      	ldrh	r0, [r7, #12]
 8001394:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4623      	mov	r3, r4
 800139a:	f000 fc47 	bl	8001c2c <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a2:	e035      	b.n	8001410 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
 80013a8:	e02b      	b.n	8001402 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80013aa:	7f3b      	ldrb	r3, [r7, #28]
 80013ac:	6a3a      	ldr	r2, [r7, #32]
 80013ae:	fb03 f202 	mul.w	r2, r3, r2
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	10db      	asrs	r3, r3, #3
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	4413      	add	r3, r2
 80013bc:	3301      	adds	r3, #1
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	2201      	movs	r2, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80013d4:	7dfa      	ldrb	r2, [r7, #23]
 80013d6:	7dbb      	ldrb	r3, [r7, #22]
 80013d8:	4013      	ands	r3, r2
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	89bb      	ldrh	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	b298      	uxth	r0, r3
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80013f6:	4619      	mov	r1, r3
 80013f8:	f000 fbb2 	bl	8001b60 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	3301      	adds	r3, #1
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	7fbb      	ldrb	r3, [r7, #30]
 8001404:	6a3a      	ldr	r2, [r7, #32]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbcf      	blt.n	80013aa <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	3301      	adds	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001410:	7f7b      	ldrb	r3, [r7, #29]
 8001412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001414:	429a      	cmp	r2, r3
 8001416:	dbc5      	blt.n	80013a4 <ILI9341_DrawChar+0x72>
 8001418:	e000      	b.n	800141c <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 800141a:	bf00      	nop
			}
		}
	}
}
 800141c:	372c      	adds	r7, #44	@ 0x2c
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}

08001422 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b08a      	sub	sp, #40	@ 0x28
 8001426:	af02      	add	r7, sp, #8
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	4611      	mov	r1, r2
 800142e:	461a      	mov	r2, r3
 8001430:	460b      	mov	r3, r1
 8001432:	80fb      	strh	r3, [r7, #6]
 8001434:	4613      	mov	r3, r2
 8001436:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	3301      	adds	r3, #1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8001446:	e02d      	b.n	80014a4 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	88b9      	ldrh	r1, [r7, #4]
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	460b      	mov	r3, r1
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	f7ff ff69 	bl	8001332 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3b20      	subs	r3, #32
 8001466:	7ffa      	ldrb	r2, [r7, #31]
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	3304      	adds	r3, #4
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	4413      	add	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	1c9a      	adds	r2, r3, #2
 800147e:	7fbb      	ldrb	r3, [r7, #30]
 8001480:	429a      	cmp	r2, r3
 8001482:	da07      	bge.n	8001494 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	b29a      	uxth	r2, r3
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	4413      	add	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	3302      	adds	r3, #2
 8001490:	80fb      	strh	r3, [r7, #6]
 8001492:	e004      	b.n	800149e <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001494:	7fbb      	ldrb	r3, [r7, #30]
 8001496:	b29a      	uxth	r2, r3
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4413      	add	r3, r2
 800149c:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
	while (*str)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1cd      	bne.n	8001448 <ILI9341_DrawText+0x26>
	}
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_SPI_TxCpltCallback>:

// added
extern int tft_y;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a06      	ldr	r2, [pc, #24]	@ (80014dc <HAL_SPI_TxCpltCallback+0x24>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d105      	bne.n	80014d4 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ce:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <HAL_SPI_TxCpltCallback+0x28>)
 80014d0:	f004 fd52 	bl	8005f78 <HAL_GPIO_WritePin>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000e70 	.word	0x20000e70
 80014e0:	40020400 	.word	0x40020400

080014e4 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80014ee:	bf00      	nop
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <ILI9341_SPI_Tx+0x30>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d1f8      	bne.n	80014f0 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	2201      	movs	r2, #1
 8001502:	4619      	mov	r1, r3
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <ILI9341_SPI_Tx+0x30>)
 8001506:	f005 fe41 	bl	800718c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000e70 	.word	0x20000e70

08001518 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001524:	bf00      	nop
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <ILI9341_SPI_TxBuffer+0x30>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b02      	cmp	r3, #2
 8001532:	d1f8      	bne.n	8001526 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	461a      	mov	r2, r3
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4803      	ldr	r0, [pc, #12]	@ (8001548 <ILI9341_SPI_TxBuffer+0x30>)
 800153c:	f005 fe26 	bl	800718c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000e70 	.word	0x20000e70

0800154c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001556:	2200      	movs	r2, #0
 8001558:	2120      	movs	r1, #32
 800155a:	4808      	ldr	r0, [pc, #32]	@ (800157c <ILI9341_WriteCommand+0x30>)
 800155c:	f004 fd0c 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <ILI9341_WriteCommand+0x30>)
 8001568:	f004 fd06 	bl	8005f78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ffb8 	bl	80014e4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40020400 	.word	0x40020400

08001580 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800158a:	2201      	movs	r2, #1
 800158c:	2120      	movs	r1, #32
 800158e:	4808      	ldr	r0, [pc, #32]	@ (80015b0 <ILI9341_WriteData+0x30>)
 8001590:	f004 fcf2 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <ILI9341_WriteData+0x30>)
 800159c:	f004 fcec 	bl	8005f78 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff9e 	bl	80014e4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40020400 	.word	0x40020400

080015b4 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80015c0:	2201      	movs	r2, #1
 80015c2:	2120      	movs	r1, #32
 80015c4:	4808      	ldr	r0, [pc, #32]	@ (80015e8 <ILI9341_WriteBuffer+0x34>)
 80015c6:	f004 fcd7 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015d0:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <ILI9341_WriteBuffer+0x34>)
 80015d2:	f004 fcd1 	bl	8005f78 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff9c 	bl	8001518 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40020400 	.word	0x40020400

080015ec <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	80fb      	strh	r3, [r7, #6]
 80015fe:	4603      	mov	r3, r0
 8001600:	80bb      	strh	r3, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]
 8001606:	4613      	mov	r3, r2
 8001608:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	b29b      	uxth	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	b29b      	uxth	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 800162a:	202a      	movs	r0, #42	@ 0x2a
 800162c:	f7ff ff8e 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2104      	movs	r1, #4
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ffbc 	bl	80015b4 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	b29b      	uxth	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001646:	88bb      	ldrh	r3, [r7, #4]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 800164c:	883b      	ldrh	r3, [r7, #0]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29b      	uxth	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001656:	883b      	ldrh	r3, [r7, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 800165c:	202b      	movs	r0, #43	@ 0x2b
 800165e:	f7ff ff75 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2104      	movs	r1, #4
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffa3 	bl	80015b4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800166e:	202c      	movs	r0, #44	@ 0x2c
 8001670:	f7ff ff6c 	bl	800154c <ILI9341_WriteCommand>
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}

0800167c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001686:	480e      	ldr	r0, [pc, #56]	@ (80016c0 <ILI9341_Reset+0x44>)
 8001688:	f004 fc76 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800168c:	200a      	movs	r0, #10
 800168e:	f003 fdd5 	bl	800523c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001698:	4809      	ldr	r0, [pc, #36]	@ (80016c0 <ILI9341_Reset+0x44>)
 800169a:	f004 fc6d 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800169e:	200a      	movs	r0, #10
 80016a0:	f003 fdcc 	bl	800523c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <ILI9341_Reset+0x44>)
 80016ac:	f004 fc64 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016b6:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <ILI9341_Reset+0x44>)
 80016b8:	f004 fc5e 	bl	8005f78 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40020400 	.word	0x40020400

080016c4 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ce:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <ILI9341_Enable+0x14>)
 80016d0:	f004 fc52 	bl	8005f78 <HAL_GPIO_WritePin>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40020400 	.word	0x40020400

080016dc <ILI9341_Init>:

void ILI9341_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80016e0:	f7ff fff0 	bl	80016c4 <ILI9341_Enable>
	ILI9341_Reset();
 80016e4:	f7ff ffca 	bl	800167c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff ff2f 	bl	800154c <ILI9341_WriteCommand>
	HAL_Delay(10);
 80016ee:	200a      	movs	r0, #10
 80016f0:	f003 fda4 	bl	800523c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80016f4:	20cb      	movs	r0, #203	@ 0xcb
 80016f6:	f7ff ff29 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80016fa:	2039      	movs	r0, #57	@ 0x39
 80016fc:	f7ff ff40 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001700:	202c      	movs	r0, #44	@ 0x2c
 8001702:	f7ff ff3d 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff ff3a 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 800170c:	2034      	movs	r0, #52	@ 0x34
 800170e:	f7ff ff37 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8001712:	2002      	movs	r0, #2
 8001714:	f7ff ff34 	bl	8001580 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001718:	20cf      	movs	r0, #207	@ 0xcf
 800171a:	f7ff ff17 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff ff2e 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001724:	20c1      	movs	r0, #193	@ 0xc1
 8001726:	f7ff ff2b 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 800172a:	2030      	movs	r0, #48	@ 0x30
 800172c:	f7ff ff28 	bl	8001580 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001730:	20e8      	movs	r0, #232	@ 0xe8
 8001732:	f7ff ff0b 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001736:	2085      	movs	r0, #133	@ 0x85
 8001738:	f7ff ff22 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff ff1f 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8001742:	2078      	movs	r0, #120	@ 0x78
 8001744:	f7ff ff1c 	bl	8001580 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001748:	20ea      	movs	r0, #234	@ 0xea
 800174a:	f7ff feff 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff ff16 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff ff13 	bl	8001580 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800175a:	20ed      	movs	r0, #237	@ 0xed
 800175c:	f7ff fef6 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001760:	2064      	movs	r0, #100	@ 0x64
 8001762:	f7ff ff0d 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001766:	2003      	movs	r0, #3
 8001768:	f7ff ff0a 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 800176c:	2012      	movs	r0, #18
 800176e:	f7ff ff07 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001772:	2081      	movs	r0, #129	@ 0x81
 8001774:	f7ff ff04 	bl	8001580 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001778:	20f7      	movs	r0, #247	@ 0xf7
 800177a:	f7ff fee7 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800177e:	2020      	movs	r0, #32
 8001780:	f7ff fefe 	bl	8001580 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001784:	20c0      	movs	r0, #192	@ 0xc0
 8001786:	f7ff fee1 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800178a:	2023      	movs	r0, #35	@ 0x23
 800178c:	f7ff fef8 	bl	8001580 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001790:	20c1      	movs	r0, #193	@ 0xc1
 8001792:	f7ff fedb 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001796:	2010      	movs	r0, #16
 8001798:	f7ff fef2 	bl	8001580 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 800179c:	20c5      	movs	r0, #197	@ 0xc5
 800179e:	f7ff fed5 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80017a2:	203e      	movs	r0, #62	@ 0x3e
 80017a4:	f7ff feec 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80017a8:	2028      	movs	r0, #40	@ 0x28
 80017aa:	f7ff fee9 	bl	8001580 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80017ae:	20c7      	movs	r0, #199	@ 0xc7
 80017b0:	f7ff fecc 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80017b4:	2086      	movs	r0, #134	@ 0x86
 80017b6:	f7ff fee3 	bl	8001580 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80017ba:	2036      	movs	r0, #54	@ 0x36
 80017bc:	f7ff fec6 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80017c0:	2048      	movs	r0, #72	@ 0x48
 80017c2:	f7ff fedd 	bl	8001580 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80017c6:	203a      	movs	r0, #58	@ 0x3a
 80017c8:	f7ff fec0 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80017cc:	2055      	movs	r0, #85	@ 0x55
 80017ce:	f7ff fed7 	bl	8001580 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80017d2:	20b1      	movs	r0, #177	@ 0xb1
 80017d4:	f7ff feba 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fed1 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80017de:	2018      	movs	r0, #24
 80017e0:	f7ff fece 	bl	8001580 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80017e4:	20b6      	movs	r0, #182	@ 0xb6
 80017e6:	f7ff feb1 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80017ea:	2008      	movs	r0, #8
 80017ec:	f7ff fec8 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80017f0:	2082      	movs	r0, #130	@ 0x82
 80017f2:	f7ff fec5 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80017f6:	2027      	movs	r0, #39	@ 0x27
 80017f8:	f7ff fec2 	bl	8001580 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80017fc:	20f2      	movs	r0, #242	@ 0xf2
 80017fe:	f7ff fea5 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff febc 	bl	8001580 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001808:	2026      	movs	r0, #38	@ 0x26
 800180a:	f7ff fe9f 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff feb6 	bl	8001580 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001814:	20e0      	movs	r0, #224	@ 0xe0
 8001816:	f7ff fe99 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800181a:	200f      	movs	r0, #15
 800181c:	f7ff feb0 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001820:	2031      	movs	r0, #49	@ 0x31
 8001822:	f7ff fead 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001826:	202b      	movs	r0, #43	@ 0x2b
 8001828:	f7ff feaa 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800182c:	200c      	movs	r0, #12
 800182e:	f7ff fea7 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001832:	200e      	movs	r0, #14
 8001834:	f7ff fea4 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001838:	2008      	movs	r0, #8
 800183a:	f7ff fea1 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800183e:	204e      	movs	r0, #78	@ 0x4e
 8001840:	f7ff fe9e 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001844:	20f1      	movs	r0, #241	@ 0xf1
 8001846:	f7ff fe9b 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 800184a:	2037      	movs	r0, #55	@ 0x37
 800184c:	f7ff fe98 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001850:	2007      	movs	r0, #7
 8001852:	f7ff fe95 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001856:	2010      	movs	r0, #16
 8001858:	f7ff fe92 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800185c:	2003      	movs	r0, #3
 800185e:	f7ff fe8f 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001862:	200e      	movs	r0, #14
 8001864:	f7ff fe8c 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001868:	2009      	movs	r0, #9
 800186a:	f7ff fe89 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fe86 	bl	8001580 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001874:	20e1      	movs	r0, #225	@ 0xe1
 8001876:	f7ff fe69 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fe80 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001880:	200e      	movs	r0, #14
 8001882:	f7ff fe7d 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001886:	2014      	movs	r0, #20
 8001888:	f7ff fe7a 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800188c:	2003      	movs	r0, #3
 800188e:	f7ff fe77 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001892:	2011      	movs	r0, #17
 8001894:	f7ff fe74 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001898:	2007      	movs	r0, #7
 800189a:	f7ff fe71 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800189e:	2031      	movs	r0, #49	@ 0x31
 80018a0:	f7ff fe6e 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80018a4:	20c1      	movs	r0, #193	@ 0xc1
 80018a6:	f7ff fe6b 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80018aa:	2048      	movs	r0, #72	@ 0x48
 80018ac:	f7ff fe68 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80018b0:	2008      	movs	r0, #8
 80018b2:	f7ff fe65 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80018b6:	200f      	movs	r0, #15
 80018b8:	f7ff fe62 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80018bc:	200c      	movs	r0, #12
 80018be:	f7ff fe5f 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80018c2:	2031      	movs	r0, #49	@ 0x31
 80018c4:	f7ff fe5c 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80018c8:	2036      	movs	r0, #54	@ 0x36
 80018ca:	f7ff fe59 	bl	8001580 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80018ce:	200f      	movs	r0, #15
 80018d0:	f7ff fe56 	bl	8001580 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80018d4:	2011      	movs	r0, #17
 80018d6:	f7ff fe39 	bl	800154c <ILI9341_WriteCommand>
	HAL_Delay(100);
 80018da:	2064      	movs	r0, #100	@ 0x64
 80018dc:	f003 fcae 	bl	800523c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80018e0:	2029      	movs	r0, #41	@ 0x29
 80018e2:	f7ff fe33 	bl	800154c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f802 	bl	80018f0 <ILI9341_SetRotation>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80018fa:	2036      	movs	r0, #54	@ 0x36
 80018fc:	f7ff fe26 	bl	800154c <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001900:	2001      	movs	r0, #1
 8001902:	f003 fc9b 	bl	800523c <HAL_Delay>

	switch(rotation)
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d837      	bhi.n	800197c <ILI9341_SetRotation+0x8c>
 800190c:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <ILI9341_SetRotation+0x24>)
 800190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001912:	bf00      	nop
 8001914:	08001925 	.word	0x08001925
 8001918:	0800193b 	.word	0x0800193b
 800191c:	08001951 	.word	0x08001951
 8001920:	08001967 	.word	0x08001967
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001924:	2048      	movs	r0, #72	@ 0x48
 8001926:	f7ff fe2b 	bl	8001580 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <ILI9341_SetRotation+0x98>)
 800192c:	22f0      	movs	r2, #240	@ 0xf0
 800192e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <ILI9341_SetRotation+0x9c>)
 8001932:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001936:	801a      	strh	r2, [r3, #0]
		break;
 8001938:	e021      	b.n	800197e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800193a:	2028      	movs	r0, #40	@ 0x28
 800193c:	f7ff fe20 	bl	8001580 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <ILI9341_SetRotation+0x98>)
 8001942:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001946:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001948:	4b10      	ldr	r3, [pc, #64]	@ (800198c <ILI9341_SetRotation+0x9c>)
 800194a:	22f0      	movs	r2, #240	@ 0xf0
 800194c:	801a      	strh	r2, [r3, #0]
		break;
 800194e:	e016      	b.n	800197e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001950:	2088      	movs	r0, #136	@ 0x88
 8001952:	f7ff fe15 	bl	8001580 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <ILI9341_SetRotation+0x98>)
 8001958:	22f0      	movs	r2, #240	@ 0xf0
 800195a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <ILI9341_SetRotation+0x9c>)
 800195e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001962:	801a      	strh	r2, [r3, #0]
		break;
 8001964:	e00b      	b.n	800197e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001966:	20e8      	movs	r0, #232	@ 0xe8
 8001968:	f7ff fe0a 	bl	8001580 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <ILI9341_SetRotation+0x98>)
 800196e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001972:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <ILI9341_SetRotation+0x9c>)
 8001976:	22f0      	movs	r2, #240	@ 0xf0
 8001978:	801a      	strh	r2, [r3, #0]
		break;
 800197a:	e000      	b.n	800197e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800197c:	bf00      	nop
	}
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000002 	.word	0x20000002
 800198c:	20000000 	.word	0x20000000

08001990 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001994:	b08d      	sub	sp, #52	@ 0x34
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	6039      	str	r1, [r7, #0]
 800199c:	80fb      	strh	r3, [r7, #6]
 800199e:	466b      	mov	r3, sp
 80019a0:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019ae:	d202      	bcs.n	80019b6 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019b4:	e002      	b.n	80019bc <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80019b6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2120      	movs	r1, #32
 80019c0:	483f      	ldr	r0, [pc, #252]	@ (8001ac0 <ILI9341_DrawColorBurst+0x130>)
 80019c2:	f004 fad9 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019cc:	483c      	ldr	r0, [pc, #240]	@ (8001ac0 <ILI9341_DrawColorBurst+0x130>)
 80019ce:	f004 fad3 	bl	8005f78 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 80019dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80019de:	460b      	mov	r3, r1
 80019e0:	3b01      	subs	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	2300      	movs	r3, #0
 80019e6:	4688      	mov	r8, r1
 80019e8:	4699      	mov	r9, r3
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019fe:	2300      	movs	r3, #0
 8001a00:	460c      	mov	r4, r1
 8001a02:	461d      	mov	r5, r3
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	00eb      	lsls	r3, r5, #3
 8001a0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a12:	00e2      	lsls	r2, r4, #3
 8001a14:	1dcb      	adds	r3, r1, #7
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	ebad 0d03 	sub.w	sp, sp, r3
 8001a1e:	466b      	mov	r3, sp
 8001a20:	3300      	adds	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a28:	e00e      	b.n	8001a48 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2e:	4413      	add	r3, r2
 8001a30:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001a34:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a38:	3301      	adds	r3, #1
 8001a3a:	88fa      	ldrh	r2, [r7, #6]
 8001a3c:	b2d1      	uxtb	r1, r2
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a44:	3302      	adds	r3, #2
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3ec      	bcc.n	8001a2a <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a64:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a6a:	fb01 f202 	mul.w	r2, r1, r2
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d010      	beq.n	8001a9a <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7c:	e009      	b.n	8001a92 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	230a      	movs	r3, #10
 8001a84:	69b9      	ldr	r1, [r7, #24]
 8001a86:	480f      	ldr	r0, [pc, #60]	@ (8001ac4 <ILI9341_DrawColorBurst+0x134>)
 8001a88:	f005 f893 	bl	8006bb2 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	3301      	adds	r3, #1
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3f1      	bcc.n	8001a7e <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	69b9      	ldr	r1, [r7, #24]
 8001aa2:	4808      	ldr	r0, [pc, #32]	@ (8001ac4 <ILI9341_DrawColorBurst+0x134>)
 8001aa4:	f005 f885 	bl	8006bb2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aae:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <ILI9341_DrawColorBurst+0x130>)
 8001ab0:	f004 fa62 	bl	8005f78 <HAL_GPIO_WritePin>
 8001ab4:	46b5      	mov	sp, r6
}
 8001ab6:	bf00      	nop
 8001ab8:	3734      	adds	r7, #52	@ 0x34
 8001aba:	46bd      	mov	sp, r7
 8001abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	20000e70 	.word	0x20000e70

08001ac8 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
	// width = 320 & height = 240
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <ILI9341_FillScreen+0x44>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <ILI9341_FillScreen+0x48>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fd83 	bl	80015ec <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <ILI9341_FillScreen+0x44>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <ILI9341_FillScreen+0x48>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff46 	bl	8001990 <ILI9341_DrawColorBurst>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000002 	.word	0x20000002
 8001b10:	20000000 	.word	0x20000000

08001b14 <ILI9341_TopScreen>:

// Added
void ILI9341_TopScreen(uint16_t color){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
	tft_y = 0;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <ILI9341_TopScreen+0x44>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
	ILI9341_SetAddress(0,0,LCD_WIDTH, 80 );
 8001b24:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <ILI9341_TopScreen+0x48>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	2350      	movs	r3, #80	@ 0x50
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f7ff fd5c 	bl	80015ec <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color,LCD_WIDTH*80);
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <ILI9341_TopScreen+0x48>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	461a      	mov	r2, r3
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff20 	bl	8001990 <ILI9341_DrawColorBurst>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000230 	.word	0x20000230
 8001b5c:	20000002 	.word	0x20000002

08001b60 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	80bb      	strh	r3, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b72:	4b2c      	ldr	r3, [pc, #176]	@ (8001c24 <ILI9341_DrawPixel+0xc4>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d24d      	bcs.n	8001c1a <ILI9341_DrawPixel+0xba>
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <ILI9341_DrawPixel+0xc8>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	88ba      	ldrh	r2, [r7, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d247      	bcs.n	8001c1a <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	753b      	strb	r3, [r7, #20]
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	757b      	strb	r3, [r7, #21]
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	121b      	asrs	r3, r3, #8
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	75bb      	strb	r3, [r7, #22]
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001bae:	88bb      	ldrh	r3, [r7, #4]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	743b      	strb	r3, [r7, #16]
 8001bb8:	88bb      	ldrh	r3, [r7, #4]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	747b      	strb	r3, [r7, #17]
 8001bbe:	88bb      	ldrh	r3, [r7, #4]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	121b      	asrs	r3, r3, #8
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	74bb      	strb	r3, [r7, #18]
 8001bc8:	88bb      	ldrh	r3, [r7, #4]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	733b      	strb	r3, [r7, #12]
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001be2:	202a      	movs	r0, #42	@ 0x2a
 8001be4:	f7ff fcb2 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2104      	movs	r1, #4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fce0 	bl	80015b4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001bf4:	202b      	movs	r0, #43	@ 0x2b
 8001bf6:	f7ff fca9 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	2104      	movs	r1, #4
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fcd7 	bl	80015b4 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001c06:	202c      	movs	r0, #44	@ 0x2c
 8001c08:	f7ff fca0 	bl	800154c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fcce 	bl	80015b4 <ILI9341_WriteBuffer>
 8001c18:	e000      	b.n	8001c1c <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001c1a:	bf00      	nop
}
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000002 	.word	0x20000002
 8001c28:	20000000 	.word	0x20000000

08001c2c <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80bb      	strh	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001c4a:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <ILI9341_DrawRectangle+0xb0>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d23d      	bcs.n	8001cd2 <ILI9341_DrawRectangle+0xa6>
 8001c56:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <ILI9341_DrawRectangle+0xb4>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	88ba      	ldrh	r2, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d237      	bcs.n	8001cd2 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <ILI9341_DrawRectangle+0xb0>)
 8001c6a:	8812      	ldrh	r2, [r2, #0]
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	dd05      	ble.n	8001c7e <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <ILI9341_DrawRectangle+0xb0>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001c7e:	88ba      	ldrh	r2, [r7, #4]
 8001c80:	883b      	ldrh	r3, [r7, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a16      	ldr	r2, [pc, #88]	@ (8001ce0 <ILI9341_DrawRectangle+0xb4>)
 8001c86:	8812      	ldrh	r2, [r2, #0]
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	dd05      	ble.n	8001c9a <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <ILI9341_DrawRectangle+0xb4>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29c      	uxth	r4, r3
 8001ca6:	88ba      	ldrh	r2, [r7, #4]
 8001ca8:	883b      	ldrh	r3, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	88b9      	ldrh	r1, [r7, #4]
 8001cb4:	88f8      	ldrh	r0, [r7, #6]
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	f7ff fc98 	bl	80015ec <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001cbc:	883b      	ldrh	r3, [r7, #0]
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	8b3b      	ldrh	r3, [r7, #24]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fe60 	bl	8001990 <ILI9341_DrawColorBurst>
 8001cd0:	e000      	b.n	8001cd4 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001cd2:	bf00      	nop
}
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000002 	.word	0x20000002
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4604      	mov	r4, r0
 8001cec:	4608      	mov	r0, r1
 8001cee:	4611      	mov	r1, r2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	80fb      	strh	r3, [r7, #6]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80bb      	strh	r3, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	807b      	strh	r3, [r7, #2]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001d02:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <ILI9341_DrawHLine+0x80>)
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d225      	bcs.n	8001d5a <ILI9341_DrawHLine+0x76>
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <ILI9341_DrawHLine+0x84>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	88ba      	ldrh	r2, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d21f      	bcs.n	8001d5a <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001d1a:	88fa      	ldrh	r2, [r7, #6]
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a10      	ldr	r2, [pc, #64]	@ (8001d64 <ILI9341_DrawHLine+0x80>)
 8001d22:	8812      	ldrh	r2, [r2, #0]
 8001d24:	b292      	uxth	r2, r2
 8001d26:	4293      	cmp	r3, r2
 8001d28:	dd05      	ble.n	8001d36 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <ILI9341_DrawHLine+0x80>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001d36:	88fa      	ldrh	r2, [r7, #6]
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	88bb      	ldrh	r3, [r7, #4]
 8001d44:	88b9      	ldrh	r1, [r7, #4]
 8001d46:	88f8      	ldrh	r0, [r7, #6]
 8001d48:	f7ff fc50 	bl	80015ec <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001d4c:	887a      	ldrh	r2, [r7, #2]
 8001d4e:	883b      	ldrh	r3, [r7, #0]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fe1c 	bl	8001990 <ILI9341_DrawColorBurst>
 8001d58:	e000      	b.n	8001d5c <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001d5a:	bf00      	nop
}
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000002 	.word	0x20000002
 8001d68:	20000000 	.word	0x20000000

08001d6c <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4604      	mov	r4, r0
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	80fb      	strh	r3, [r7, #6]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80bb      	strh	r3, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	807b      	strh	r3, [r7, #2]
 8001d86:	4613      	mov	r3, r2
 8001d88:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001d8a:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <ILI9341_DrawVLine+0x80>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	88fa      	ldrh	r2, [r7, #6]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d225      	bcs.n	8001de2 <ILI9341_DrawVLine+0x76>
 8001d96:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <ILI9341_DrawVLine+0x84>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d21f      	bcs.n	8001de2 <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001da2:	88ba      	ldrh	r2, [r7, #4]
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a11      	ldr	r2, [pc, #68]	@ (8001df0 <ILI9341_DrawVLine+0x84>)
 8001daa:	8812      	ldrh	r2, [r2, #0]
 8001dac:	b292      	uxth	r2, r2
 8001dae:	4293      	cmp	r3, r2
 8001db0:	dd05      	ble.n	8001dbe <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <ILI9341_DrawVLine+0x84>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	88bb      	ldrh	r3, [r7, #4]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001dbe:	88ba      	ldrh	r2, [r7, #4]
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	88fa      	ldrh	r2, [r7, #6]
 8001dcc:	88b9      	ldrh	r1, [r7, #4]
 8001dce:	88f8      	ldrh	r0, [r7, #6]
 8001dd0:	f7ff fc0c 	bl	80015ec <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	883b      	ldrh	r3, [r7, #0]
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fdd8 	bl	8001990 <ILI9341_DrawColorBurst>
 8001de0:	e000      	b.n	8001de4 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001de2:	bf00      	nop
}
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000002 	.word	0x20000002
 8001df0:	20000000 	.word	0x20000000

08001df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <MX_DMA_Init+0x3c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <MX_DMA_Init+0x3c>)
 8001e04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <MX_DMA_Init+0x3c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f003 fb47 	bl	80054ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e20:	200f      	movs	r0, #15
 8001e22:	f003 fb60 	bl	80054e6 <HAL_NVIC_EnableIRQ>

}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800

08001e34 <find_coord>:
		{"ROW 4", {.coord = {{106.075,216.875},{138.225,216.875},{170.375,216.875},{202.525,216.875},{234.725,216.875},{266.825,216.875},{298.975,216.875}} } }

};


const Location* find_coord(const char *key){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++){
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e01a      	b.n	8001e78 <find_coord+0x44>
		if (strcmp(dict[i].key, key) == 0)
 8001e42:	4911      	ldr	r1, [pc, #68]	@ (8001e88 <find_coord+0x54>)
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4613      	mov	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe f9db 	bl	8000210 <strcmp>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d108      	bne.n	8001e72 <find_coord+0x3e>
			return &dict[i].info;
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4613      	mov	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	3308      	adds	r3, #8
 8001e6c:	4a06      	ldr	r2, [pc, #24]	@ (8001e88 <find_coord+0x54>)
 8001e6e:	4413      	add	r3, r2
 8001e70:	e006      	b.n	8001e80 <find_coord+0x4c>
	for (int i = 0; i < 4; i++){
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	dde1      	ble.n	8001e42 <find_coord+0xe>
	}
	return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	080113b8 	.word	0x080113b8

08001e8c <drawer_lookup>:


/**/
void drawer_lookup(uint16_t rows, uint16_t drawer, char colors){
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b08b      	sub	sp, #44	@ 0x2c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
 8001e96:	460b      	mov	r3, r1
 8001e98:	80bb      	strh	r3, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	70fb      	strb	r3, [r7, #3]
	//printf("%d\n\r", rows);
	//printf("%d\n\r", drawer);
	switch (rows){
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	f200 8214 	bhi.w	80022d0 <drawer_lookup+0x444>
 8001ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb0 <drawer_lookup+0x24>)
 8001eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eae:	bf00      	nop
 8001eb0:	08001ec1 	.word	0x08001ec1
 8001eb4:	08001fbd 	.word	0x08001fbd
 8001eb8:	080020b9 	.word	0x080020b9
 8001ebc:	080021cb 	.word	0x080021cb
		case 1:
			const Location *info = find_coord("ROW 1");
 8001ec0:	48a0      	ldr	r0, [pc, #640]	@ (8002144 <drawer_lookup+0x2b8>)
 8001ec2:	f7ff ffb7 	bl	8001e34 <find_coord>
 8001ec6:	60b8      	str	r0, [r7, #8]
			if (info != NULL){
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 81f9 	beq.w	80022c2 <drawer_lookup+0x436>
				for (int i = 0; i < 4; i++){
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed4:	e01b      	b.n	8001f0e <drawer_lookup+0x82>
					if (i == (drawer - 1)){
 8001ed6:	88bb      	ldrh	r3, [r7, #4]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d113      	bne.n	8001f08 <drawer_lookup+0x7c>
						LCD_X = info->coord[i].x;
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	4413      	add	r3, r2
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	4996      	ldr	r1, [pc, #600]	@ (8002148 <drawer_lookup+0x2bc>)
 8001eee:	e9c1 2300 	strd	r2, r3, [r1]
						LCD_Y = info->coord[i].y;
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	3308      	adds	r3, #8
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	4992      	ldr	r1, [pc, #584]	@ (800214c <drawer_lookup+0x2c0>)
 8001f02:	e9c1 2300 	strd	r2, r3, [r1]
						//printf("X: %lf\n\r", LCD_X);
						//printf("Y: %lf\n\r", LCD_Y);
						break;
 8001f06:	e005      	b.n	8001f14 <drawer_lookup+0x88>
				for (int i = 0; i < 4; i++){
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	dde0      	ble.n	8001ed6 <drawer_lookup+0x4a>
					}
				}
				if (colors == 'B')
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b42      	cmp	r3, #66	@ 0x42
 8001f18:	d117      	bne.n	8001f4a <drawer_lookup+0xbe>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,BLUE);
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	@ (8002148 <drawer_lookup+0x2bc>)
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe70 	bl	8000c08 <__aeabi_d2uiz>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b29c      	uxth	r4, r3
 8001f2c:	4b87      	ldr	r3, [pc, #540]	@ (800214c <drawer_lookup+0x2c0>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe fe67 	bl	8000c08 <__aeabi_d2uiz>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	b299      	uxth	r1, r3
 8001f3e:	231f      	movs	r3, #31
 8001f40:	2205      	movs	r2, #5
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7ff f8ec 	bl	8001120 <ILI9341_DrawFilledCircle>
				}
				else if (colors == 'W'){
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
				}
			}
			break;
 8001f48:	e1bb      	b.n	80022c2 <drawer_lookup+0x436>
				else if (colors == 'R'){
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	2b52      	cmp	r3, #82	@ 0x52
 8001f4e:	d118      	bne.n	8001f82 <drawer_lookup+0xf6>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,RED);
 8001f50:	4b7d      	ldr	r3, [pc, #500]	@ (8002148 <drawer_lookup+0x2bc>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7fe fe55 	bl	8000c08 <__aeabi_d2uiz>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	b29c      	uxth	r4, r3
 8001f62:	4b7a      	ldr	r3, [pc, #488]	@ (800214c <drawer_lookup+0x2c0>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fe4c 	bl	8000c08 <__aeabi_d2uiz>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b299      	uxth	r1, r3
 8001f74:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f78:	2205      	movs	r2, #5
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7ff f8d0 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8001f80:	e19f      	b.n	80022c2 <drawer_lookup+0x436>
				else if (colors == 'W'){
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	2b57      	cmp	r3, #87	@ 0x57
 8001f86:	f040 819c 	bne.w	80022c2 <drawer_lookup+0x436>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <drawer_lookup+0x2bc>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fe38 	bl	8000c08 <__aeabi_d2uiz>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	b29c      	uxth	r4, r3
 8001f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800214c <drawer_lookup+0x2c0>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fe2f 	bl	8000c08 <__aeabi_d2uiz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b299      	uxth	r1, r3
 8001fae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7ff f8b3 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8001fba:	e182      	b.n	80022c2 <drawer_lookup+0x436>

	 	case 2:
			const Location *info_sec = find_coord("ROW 2");
 8001fbc:	4864      	ldr	r0, [pc, #400]	@ (8002150 <drawer_lookup+0x2c4>)
 8001fbe:	f7ff ff39 	bl	8001e34 <find_coord>
 8001fc2:	60f8      	str	r0, [r7, #12]
			if (info_sec != NULL){
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 817d 	beq.w	80022c6 <drawer_lookup+0x43a>
				for (int i = 0; i < 7; i++){
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	e01b      	b.n	800200a <drawer_lookup+0x17e>
					if (i == (drawer - 1)){
 8001fd2:	88bb      	ldrh	r3, [r7, #4]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	6a3a      	ldr	r2, [r7, #32]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d113      	bne.n	8002004 <drawer_lookup+0x178>
						LCD_X = info_sec->coord[i].x;
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	4413      	add	r3, r2
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	4957      	ldr	r1, [pc, #348]	@ (8002148 <drawer_lookup+0x2bc>)
 8001fea:	e9c1 2300 	strd	r2, r3, [r1]
						LCD_Y = info_sec->coord[i].y;
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	4953      	ldr	r1, [pc, #332]	@ (800214c <drawer_lookup+0x2c0>)
 8001ffe:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 8002002:	e005      	b.n	8002010 <drawer_lookup+0x184>
				for (int i = 0; i < 7; i++){
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	3301      	adds	r3, #1
 8002008:	623b      	str	r3, [r7, #32]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	2b06      	cmp	r3, #6
 800200e:	dde0      	ble.n	8001fd2 <drawer_lookup+0x146>
					}
				}
				if (colors == 'B')
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b42      	cmp	r3, #66	@ 0x42
 8002014:	d117      	bne.n	8002046 <drawer_lookup+0x1ba>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,BLUE);
 8002016:	4b4c      	ldr	r3, [pc, #304]	@ (8002148 <drawer_lookup+0x2bc>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fdf2 	bl	8000c08 <__aeabi_d2uiz>
 8002024:	4603      	mov	r3, r0
 8002026:	b29c      	uxth	r4, r3
 8002028:	4b48      	ldr	r3, [pc, #288]	@ (800214c <drawer_lookup+0x2c0>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f7fe fde9 	bl	8000c08 <__aeabi_d2uiz>
 8002036:	4603      	mov	r3, r0
 8002038:	b299      	uxth	r1, r3
 800203a:	231f      	movs	r3, #31
 800203c:	2205      	movs	r2, #5
 800203e:	4620      	mov	r0, r4
 8002040:	f7ff f86e 	bl	8001120 <ILI9341_DrawFilledCircle>
				}
				else if (colors == 'W'){
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
				}
			}
			break;
 8002044:	e13f      	b.n	80022c6 <drawer_lookup+0x43a>
				else if (colors == 'R'){
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	2b52      	cmp	r3, #82	@ 0x52
 800204a:	d118      	bne.n	800207e <drawer_lookup+0x1f2>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,RED);
 800204c:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <drawer_lookup+0x2bc>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fdd7 	bl	8000c08 <__aeabi_d2uiz>
 800205a:	4603      	mov	r3, r0
 800205c:	b29c      	uxth	r4, r3
 800205e:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <drawer_lookup+0x2c0>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f7fe fdce 	bl	8000c08 <__aeabi_d2uiz>
 800206c:	4603      	mov	r3, r0
 800206e:	b299      	uxth	r1, r3
 8002070:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002074:	2205      	movs	r2, #5
 8002076:	4620      	mov	r0, r4
 8002078:	f7ff f852 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 800207c:	e123      	b.n	80022c6 <drawer_lookup+0x43a>
				else if (colors == 'W'){
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	2b57      	cmp	r3, #87	@ 0x57
 8002082:	f040 8120 	bne.w	80022c6 <drawer_lookup+0x43a>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
 8002086:	4b30      	ldr	r3, [pc, #192]	@ (8002148 <drawer_lookup+0x2bc>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fdba 	bl	8000c08 <__aeabi_d2uiz>
 8002094:	4603      	mov	r3, r0
 8002096:	b29c      	uxth	r4, r3
 8002098:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <drawer_lookup+0x2c0>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f7fe fdb1 	bl	8000c08 <__aeabi_d2uiz>
 80020a6:	4603      	mov	r3, r0
 80020a8:	b299      	uxth	r1, r3
 80020aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020ae:	2205      	movs	r2, #5
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff f835 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 80020b6:	e106      	b.n	80022c6 <drawer_lookup+0x43a>

		case 3:
			const Location *info_th = find_coord("ROW 3");
 80020b8:	4826      	ldr	r0, [pc, #152]	@ (8002154 <drawer_lookup+0x2c8>)
 80020ba:	f7ff febb 	bl	8001e34 <find_coord>
 80020be:	6138      	str	r0, [r7, #16]
			if (info_th != NULL){
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8101 	beq.w	80022ca <drawer_lookup+0x43e>
				for (int i = 0; i < 7; i++){
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	e01b      	b.n	8002106 <drawer_lookup+0x27a>
					if (i == (drawer - 1)){
 80020ce:	88bb      	ldrh	r3, [r7, #4]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d113      	bne.n	8002100 <drawer_lookup+0x274>
						LCD_X = info_th->coord[i].x;
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	4918      	ldr	r1, [pc, #96]	@ (8002148 <drawer_lookup+0x2bc>)
 80020e6:	e9c1 2300 	strd	r2, r3, [r1]
						LCD_Y = info_th->coord[i].y;
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	4413      	add	r3, r2
 80020f2:	3308      	adds	r3, #8
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	4914      	ldr	r1, [pc, #80]	@ (800214c <drawer_lookup+0x2c0>)
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 80020fe:	e005      	b.n	800210c <drawer_lookup+0x280>
				for (int i = 0; i < 7; i++){
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	3301      	adds	r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	2b06      	cmp	r3, #6
 800210a:	dde0      	ble.n	80020ce <drawer_lookup+0x242>
					}
				}
				if (colors == 'B')
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	2b42      	cmp	r3, #66	@ 0x42
 8002110:	d122      	bne.n	8002158 <drawer_lookup+0x2cc>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,BLUE);
 8002112:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <drawer_lookup+0x2bc>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f7fe fd74 	bl	8000c08 <__aeabi_d2uiz>
 8002120:	4603      	mov	r3, r0
 8002122:	b29c      	uxth	r4, r3
 8002124:	4b09      	ldr	r3, [pc, #36]	@ (800214c <drawer_lookup+0x2c0>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	f7fe fd6b 	bl	8000c08 <__aeabi_d2uiz>
 8002132:	4603      	mov	r3, r0
 8002134:	b299      	uxth	r1, r3
 8002136:	231f      	movs	r3, #31
 8002138:	2205      	movs	r2, #5
 800213a:	4620      	mov	r0, r4
 800213c:	f7fe fff0 	bl	8001120 <ILI9341_DrawFilledCircle>
				}
				else if (colors == 'W'){
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
				}
			}
			break;
 8002140:	e0c3      	b.n	80022ca <drawer_lookup+0x43e>
 8002142:	bf00      	nop
 8002144:	08010988 	.word	0x08010988
 8002148:	20000220 	.word	0x20000220
 800214c:	20000228 	.word	0x20000228
 8002150:	08010990 	.word	0x08010990
 8002154:	08010998 	.word	0x08010998
				else if (colors == 'R'){
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	2b52      	cmp	r3, #82	@ 0x52
 800215c:	d118      	bne.n	8002190 <drawer_lookup+0x304>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,RED);
 800215e:	4b5e      	ldr	r3, [pc, #376]	@ (80022d8 <drawer_lookup+0x44c>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fd4e 	bl	8000c08 <__aeabi_d2uiz>
 800216c:	4603      	mov	r3, r0
 800216e:	b29c      	uxth	r4, r3
 8002170:	4b5a      	ldr	r3, [pc, #360]	@ (80022dc <drawer_lookup+0x450>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fd45 	bl	8000c08 <__aeabi_d2uiz>
 800217e:	4603      	mov	r3, r0
 8002180:	b299      	uxth	r1, r3
 8002182:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002186:	2205      	movs	r2, #5
 8002188:	4620      	mov	r0, r4
 800218a:	f7fe ffc9 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 800218e:	e09c      	b.n	80022ca <drawer_lookup+0x43e>
				else if (colors == 'W'){
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	2b57      	cmp	r3, #87	@ 0x57
 8002194:	f040 8099 	bne.w	80022ca <drawer_lookup+0x43e>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
 8002198:	4b4f      	ldr	r3, [pc, #316]	@ (80022d8 <drawer_lookup+0x44c>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fd31 	bl	8000c08 <__aeabi_d2uiz>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b29c      	uxth	r4, r3
 80021aa:	4b4c      	ldr	r3, [pc, #304]	@ (80022dc <drawer_lookup+0x450>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fd28 	bl	8000c08 <__aeabi_d2uiz>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b299      	uxth	r1, r3
 80021bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021c0:	2205      	movs	r2, #5
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7fe ffac 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 80021c8:	e07f      	b.n	80022ca <drawer_lookup+0x43e>

		case 4:
			const Location *info_f = find_coord("ROW 4");
 80021ca:	4845      	ldr	r0, [pc, #276]	@ (80022e0 <drawer_lookup+0x454>)
 80021cc:	f7ff fe32 	bl	8001e34 <find_coord>
 80021d0:	6178      	str	r0, [r7, #20]
			if (info_f != NULL){
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d07a      	beq.n	80022ce <drawer_lookup+0x442>
				for (int i = 0; i < 7; i++){
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	e01b      	b.n	8002216 <drawer_lookup+0x38a>
					if (i == (drawer - 1)){
 80021de:	88bb      	ldrh	r3, [r7, #4]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d113      	bne.n	8002210 <drawer_lookup+0x384>
						LCD_X = info_f->coord[i].x;
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	4413      	add	r3, r2
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	4938      	ldr	r1, [pc, #224]	@ (80022d8 <drawer_lookup+0x44c>)
 80021f6:	e9c1 2300 	strd	r2, r3, [r1]
						LCD_Y = info_f->coord[i].y;
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	4413      	add	r3, r2
 8002202:	3308      	adds	r3, #8
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	4934      	ldr	r1, [pc, #208]	@ (80022dc <drawer_lookup+0x450>)
 800220a:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 800220e:	e005      	b.n	800221c <drawer_lookup+0x390>
				for (int i = 0; i < 7; i++){
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	3301      	adds	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b06      	cmp	r3, #6
 800221a:	dde0      	ble.n	80021de <drawer_lookup+0x352>
					}
				}
				if (colors == 'B')
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	2b42      	cmp	r3, #66	@ 0x42
 8002220:	d117      	bne.n	8002252 <drawer_lookup+0x3c6>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,BLUE);
 8002222:	4b2d      	ldr	r3, [pc, #180]	@ (80022d8 <drawer_lookup+0x44c>)
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f7fe fcec 	bl	8000c08 <__aeabi_d2uiz>
 8002230:	4603      	mov	r3, r0
 8002232:	b29c      	uxth	r4, r3
 8002234:	4b29      	ldr	r3, [pc, #164]	@ (80022dc <drawer_lookup+0x450>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fce3 	bl	8000c08 <__aeabi_d2uiz>
 8002242:	4603      	mov	r3, r0
 8002244:	b299      	uxth	r1, r3
 8002246:	231f      	movs	r3, #31
 8002248:	2205      	movs	r2, #5
 800224a:	4620      	mov	r0, r4
 800224c:	f7fe ff68 	bl	8001120 <ILI9341_DrawFilledCircle>
				}
				else if (colors == 'W'){
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
				}
			}
			break;
 8002250:	e03d      	b.n	80022ce <drawer_lookup+0x442>
				else if (colors == 'R'){
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	2b52      	cmp	r3, #82	@ 0x52
 8002256:	d118      	bne.n	800228a <drawer_lookup+0x3fe>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,RED);
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <drawer_lookup+0x44c>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f7fe fcd1 	bl	8000c08 <__aeabi_d2uiz>
 8002266:	4603      	mov	r3, r0
 8002268:	b29c      	uxth	r4, r3
 800226a:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <drawer_lookup+0x450>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fcc8 	bl	8000c08 <__aeabi_d2uiz>
 8002278:	4603      	mov	r3, r0
 800227a:	b299      	uxth	r1, r3
 800227c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002280:	2205      	movs	r2, #5
 8002282:	4620      	mov	r0, r4
 8002284:	f7fe ff4c 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8002288:	e021      	b.n	80022ce <drawer_lookup+0x442>
				else if (colors == 'W'){
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	2b57      	cmp	r3, #87	@ 0x57
 800228e:	d11e      	bne.n	80022ce <drawer_lookup+0x442>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <drawer_lookup+0x44c>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f7fe fcb5 	bl	8000c08 <__aeabi_d2uiz>
 800229e:	4603      	mov	r3, r0
 80022a0:	b29c      	uxth	r4, r3
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <drawer_lookup+0x450>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fcac 	bl	8000c08 <__aeabi_d2uiz>
 80022b0:	4603      	mov	r3, r0
 80022b2:	b299      	uxth	r1, r3
 80022b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022b8:	2205      	movs	r2, #5
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7fe ff30 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 80022c0:	e005      	b.n	80022ce <drawer_lookup+0x442>
			break;
 80022c2:	bf00      	nop
 80022c4:	e004      	b.n	80022d0 <drawer_lookup+0x444>
			break;
 80022c6:	bf00      	nop
 80022c8:	e002      	b.n	80022d0 <drawer_lookup+0x444>
			break;
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <drawer_lookup+0x444>
			break;
 80022ce:	bf00      	nop
			/**/
	}
}
 80022d0:	bf00      	nop
 80022d2:	372c      	adds	r7, #44	@ 0x2c
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd90      	pop	{r4, r7, pc}
 80022d8:	20000220 	.word	0x20000220
 80022dc:	20000228 	.word	0x20000228
 80022e0:	080109a0 	.word	0x080109a0
 80022e4:	00000000 	.word	0x00000000

080022e8 <drawer_table>:


void drawer_table() {
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b08f      	sub	sp, #60	@ 0x3c
 80022ec:	af02      	add	r7, sp, #8

	 // ILI9341_Init();

	  int columns = 90;
 80022ee:	235a      	movs	r3, #90	@ 0x5a
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  int rows = 90;
 80022f2:	235a      	movs	r3, #90	@ 0x5a
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28

	  double circlex = 106.075;
 80022f6:	a374      	add	r3, pc, #464	@ (adr r3, 80024c8 <drawer_table+0x1e0>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  double circley = 108.125;
 8002300:	a373      	add	r3, pc, #460	@ (adr r3, 80024d0 <drawer_table+0x1e8>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	e9c7 2306 	strd	r2, r3, [r7, #24]

	  // Hollow Rectangle (Start X, Start Y, End X, End Y)
	  ILI9341_FillScreen(BLACK);
 800230a:	2000      	movs	r0, #0
 800230c:	f7ff fbdc 	bl	8001ac8 <ILI9341_FillScreen>
	  ILI9341_DrawHollowRectangleCoord(90, 90, 315, 235, WHITE);
 8002310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	23eb      	movs	r3, #235	@ 0xeb
 8002318:	f240 123b 	movw	r2, #315	@ 0x13b
 800231c:	215a      	movs	r1, #90	@ 0x5a
 800231e:	205a      	movs	r0, #90	@ 0x5a
 8002320:	f7fe ff86 	bl	8001230 <ILI9341_DrawHollowRectangleCoord>
	  HAL_Delay(200);
 8002324:	20c8      	movs	r0, #200	@ 0xc8
 8002326:	f002 ff89 	bl	800523c <HAL_Delay>


	  // creating the seven columns
	  for (int i = 0; i <= 5; i++){
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e02c      	b.n	800238a <drawer_table+0xa2>
		  columns += 32.15;
 8002330:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002332:	f7fe f927 	bl	8000584 <__aeabi_i2d>
 8002336:	a368      	add	r3, pc, #416	@ (adr r3, 80024d8 <drawer_table+0x1f0>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f7fd ffd6 	bl	80002ec <__adddf3>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fc36 	bl	8000bb8 <__aeabi_d2iz>
 800234c:	4603      	mov	r3, r0
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  if ( i < 2){
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b01      	cmp	r3, #1
 8002354:	dc0b      	bgt.n	800236e <drawer_table+0x86>
			 // Vertical Line (X, Y, Length, Color)
			  ILI9341_DrawVLine(columns, 126.25, 108.75, WHITE);
 8002356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002358:	b298      	uxth	r0, r3
 800235a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800235e:	226c      	movs	r2, #108	@ 0x6c
 8002360:	217e      	movs	r1, #126	@ 0x7e
 8002362:	f7ff fd03 	bl	8001d6c <ILI9341_DrawVLine>
			  HAL_Delay(100);
 8002366:	2064      	movs	r0, #100	@ 0x64
 8002368:	f002 ff68 	bl	800523c <HAL_Delay>
 800236c:	e00a      	b.n	8002384 <drawer_table+0x9c>
		  }
		  else {
			 // Vertical Line (X, Y, Length, Color)
			  ILI9341_DrawVLine(columns, 90, 145, WHITE);
 800236e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002370:	b298      	uxth	r0, r3
 8002372:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002376:	2291      	movs	r2, #145	@ 0x91
 8002378:	215a      	movs	r1, #90	@ 0x5a
 800237a:	f7ff fcf7 	bl	8001d6c <ILI9341_DrawVLine>
			  HAL_Delay(100);
 800237e:	2064      	movs	r0, #100	@ 0x64
 8002380:	f002 ff5c 	bl	800523c <HAL_Delay>
	  for (int i = 0; i <= 5; i++){
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b05      	cmp	r3, #5
 800238e:	ddcf      	ble.n	8002330 <drawer_table+0x48>
		  }

	  }

	  // creating the four rows
	  for (int i = 0; i <= 2; i++){
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e01d      	b.n	80023d2 <drawer_table+0xea>
		  rows += 36.25;
 8002396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002398:	f7fe f8f4 	bl	8000584 <__aeabi_i2d>
 800239c:	a350      	add	r3, pc, #320	@ (adr r3, 80024e0 <drawer_table+0x1f8>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fd ffa3 	bl	80002ec <__adddf3>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fc03 	bl	8000bb8 <__aeabi_d2iz>
 80023b2:	4603      	mov	r3, r0
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	     // Horizontal Line (X, Y, Length, Color)
		  ILI9341_DrawHLine(90, rows, 225, WHITE);
 80023b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b8:	b299      	uxth	r1, r3
 80023ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023be:	22e1      	movs	r2, #225	@ 0xe1
 80023c0:	205a      	movs	r0, #90	@ 0x5a
 80023c2:	f7ff fc8f 	bl	8001ce4 <ILI9341_DrawHLine>
		  HAL_Delay(100);
 80023c6:	2064      	movs	r0, #100	@ 0x64
 80023c8:	f002 ff38 	bl	800523c <HAL_Delay>
	  for (int i = 0; i <= 2; i++){
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	3301      	adds	r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	ddde      	ble.n	8002396 <drawer_table+0xae>

	  }

	  // Filling in each slot of the table shown on the screen
	      for (int i = 1; i <= 4; i++){
 80023d8:	2301      	movs	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e06b      	b.n	80024b6 <drawer_table+0x1ce>
	    	  if ( i == 1){
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d12c      	bne.n	800243e <drawer_table+0x156>
	    		  // we use this value since the first row has less drawers
	    		  int row1x = 202.575;
 80023e4:	23ca      	movs	r3, #202	@ 0xca
 80023e6:	60bb      	str	r3, [r7, #8]
	    		  for (int j = 1; j <= 4; j++){
 80023e8:	2301      	movs	r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	e023      	b.n	8002436 <drawer_table+0x14e>
	    			 ILI9341_DrawFilledCircle(row1x, circley, 5, WHITE);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	b29c      	uxth	r4, r3
 80023f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023f6:	f7fe fc07 	bl	8000c08 <__aeabi_d2uiz>
 80023fa:	4603      	mov	r3, r0
 80023fc:	b299      	uxth	r1, r3
 80023fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002402:	2205      	movs	r2, #5
 8002404:	4620      	mov	r0, r4
 8002406:	f7fe fe8b 	bl	8001120 <ILI9341_DrawFilledCircle>
	    			 HAL_Delay(100);
 800240a:	2064      	movs	r0, #100	@ 0x64
 800240c:	f002 ff16 	bl	800523c <HAL_Delay>
	    			 row1x += 32.15;
 8002410:	68b8      	ldr	r0, [r7, #8]
 8002412:	f7fe f8b7 	bl	8000584 <__aeabi_i2d>
 8002416:	a330      	add	r3, pc, #192	@ (adr r3, 80024d8 <drawer_table+0x1f0>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fd ff66 	bl	80002ec <__adddf3>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f7fe fbc6 	bl	8000bb8 <__aeabi_d2iz>
 800242c:	4603      	mov	r3, r0
 800242e:	60bb      	str	r3, [r7, #8]
	    		  for (int j = 1; j <= 4; j++){
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b04      	cmp	r3, #4
 800243a:	ddd8      	ble.n	80023ee <drawer_table+0x106>
 800243c:	e028      	b.n	8002490 <drawer_table+0x1a8>
	    		  }
	    	  }

	    	  else  {
	    		  for (int j = 1; j <= 7; j++){
 800243e:	2301      	movs	r3, #1
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	e022      	b.n	800248a <drawer_table+0x1a2>
		    		  ILI9341_DrawFilledCircle(circlex, circley, 5, WHITE);
 8002444:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002448:	f7fe fbde 	bl	8000c08 <__aeabi_d2uiz>
 800244c:	4603      	mov	r3, r0
 800244e:	b29c      	uxth	r4, r3
 8002450:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002454:	f7fe fbd8 	bl	8000c08 <__aeabi_d2uiz>
 8002458:	4603      	mov	r3, r0
 800245a:	b299      	uxth	r1, r3
 800245c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002460:	2205      	movs	r2, #5
 8002462:	4620      	mov	r0, r4
 8002464:	f7fe fe5c 	bl	8001120 <ILI9341_DrawFilledCircle>
		    		  HAL_Delay(100);
 8002468:	2064      	movs	r0, #100	@ 0x64
 800246a:	f002 fee7 	bl	800523c <HAL_Delay>
		    		  circlex += 32.15;
 800246e:	a31a      	add	r3, pc, #104	@ (adr r3, 80024d8 <drawer_table+0x1f0>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002478:	f7fd ff38 	bl	80002ec <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    		  for (int j = 1; j <= 7; j++){
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b07      	cmp	r3, #7
 800248e:	ddd9      	ble.n	8002444 <drawer_table+0x15c>
	    		  }

	    	  }

    		  circley += 36.25;
 8002490:	a313      	add	r3, pc, #76	@ (adr r3, 80024e0 <drawer_table+0x1f8>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800249a:	f7fd ff27 	bl	80002ec <__adddf3>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    		  circlex = 106.075;
 80024a6:	a308      	add	r3, pc, #32	@ (adr r3, 80024c8 <drawer_table+0x1e0>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	      for (int i = 1; i <= 4; i++){
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3301      	adds	r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	dd90      	ble.n	80023de <drawer_table+0xf6>

	      }


}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3734      	adds	r7, #52	@ 0x34
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	cccccccd 	.word	0xcccccccd
 80024cc:	405a84cc 	.word	0x405a84cc
 80024d0:	00000000 	.word	0x00000000
 80024d4:	405b0800 	.word	0x405b0800
 80024d8:	33333333 	.word	0x33333333
 80024dc:	40401333 	.word	0x40401333
 80024e0:	00000000 	.word	0x00000000
 80024e4:	40422000 	.word	0x40422000

080024e8 <buttonPress>:
char tft_knownHX711[50];
char tft_weights[50];

uint8_t button = 0;

void buttonPress(){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	while(1){
		button = HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 80024ec:	2104      	movs	r1, #4
 80024ee:	4807      	ldr	r0, [pc, #28]	@ (800250c <buttonPress+0x24>)
 80024f0:	f003 fd2a 	bl	8005f48 <HAL_GPIO_ReadPin>
 80024f4:	4603      	mov	r3, r0
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <buttonPress+0x28>)
 80024fa:	701a      	strb	r2, [r3, #0]
		if(button){
 80024fc:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <buttonPress+0x28>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d100      	bne.n	8002506 <buttonPress+0x1e>
		button = HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 8002504:	e7f2      	b.n	80024ec <buttonPress+0x4>
			break;
 8002506:	bf00      	nop
		}
	}
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40020400 	.word	0x40020400
 8002510:	20000302 	.word	0x20000302

08002514 <getTare>:



uint32_t getTare(){
 8002514:	b580      	push	{r7, lr}
 8002516:	b090      	sub	sp, #64	@ 0x40
 8002518:	af02      	add	r7, sp, #8
	char tft_weight_temp[50];

	printf("Remove all weight from the drawer(5 seconds)\n\r");
 800251a:	485c      	ldr	r0, [pc, #368]	@ (800268c <getTare+0x178>)
 800251c:	f00a fd0c 	bl	800cf38 <iprintf>
	HAL_Delay(1000);
 8002520:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002524:	f002 fe8a 	bl	800523c <HAL_Delay>
	printf("Gathering initial Tare of Load Cell...\n\r");
 8002528:	4859      	ldr	r0, [pc, #356]	@ (8002690 <getTare+0x17c>)
 800252a:	f00a fd05 	bl	800cf38 <iprintf>
	int weight_temp = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	637b      	str	r3, [r7, #52]	@ 0x34

	//TFT
	ILI9341_DrawText("Remove all weight from the drawer", FONT4, 0, tft_y, WHITE, BLACK);
 8002532:	4b58      	ldr	r3, [pc, #352]	@ (8002694 <getTare+0x180>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	2200      	movs	r2, #0
 800253a:	9201      	str	r2, [sp, #4]
 800253c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002540:	9200      	str	r2, [sp, #0]
 8002542:	2200      	movs	r2, #0
 8002544:	4954      	ldr	r1, [pc, #336]	@ (8002698 <getTare+0x184>)
 8002546:	4855      	ldr	r0, [pc, #340]	@ (800269c <getTare+0x188>)
 8002548:	f7fe ff6b 	bl	8001422 <ILI9341_DrawText>
	tft_y +=20;
 800254c:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <getTare+0x180>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3314      	adds	r3, #20
 8002552:	4a50      	ldr	r2, [pc, #320]	@ (8002694 <getTare+0x180>)
 8002554:	6013      	str	r3, [r2, #0]
	ILI9341_DrawText("(5 seconds)", FONT4, 0, tft_y, WHITE, BLACK);
 8002556:	4b4f      	ldr	r3, [pc, #316]	@ (8002694 <getTare+0x180>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	2200      	movs	r2, #0
 800255e:	9201      	str	r2, [sp, #4]
 8002560:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002564:	9200      	str	r2, [sp, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	494b      	ldr	r1, [pc, #300]	@ (8002698 <getTare+0x184>)
 800256a:	484d      	ldr	r0, [pc, #308]	@ (80026a0 <getTare+0x18c>)
 800256c:	f7fe ff59 	bl	8001422 <ILI9341_DrawText>
	tft_y +=20;
 8002570:	4b48      	ldr	r3, [pc, #288]	@ (8002694 <getTare+0x180>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3314      	adds	r3, #20
 8002576:	4a47      	ldr	r2, [pc, #284]	@ (8002694 <getTare+0x180>)
 8002578:	6013      	str	r3, [r2, #0]
	HAL_Delay(5000);
 800257a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800257e:	f002 fe5d 	bl	800523c <HAL_Delay>
	ILI9341_DrawText("Gathering initial Tare of Load Cell...", FONT4, 0, tft_y, WHITE, BLACK);
 8002582:	4b44      	ldr	r3, [pc, #272]	@ (8002694 <getTare+0x180>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	2200      	movs	r2, #0
 800258a:	9201      	str	r2, [sp, #4]
 800258c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	4940      	ldr	r1, [pc, #256]	@ (8002698 <getTare+0x184>)
 8002596:	4843      	ldr	r0, [pc, #268]	@ (80026a4 <getTare+0x190>)
 8002598:	f7fe ff43 	bl	8001422 <ILI9341_DrawText>
	tft_y +=20;
 800259c:	4b3d      	ldr	r3, [pc, #244]	@ (8002694 <getTare+0x180>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3314      	adds	r3, #20
 80025a2:	4a3c      	ldr	r2, [pc, #240]	@ (8002694 <getTare+0x180>)
 80025a4:	6013      	str	r3, [r2, #0]
	HAL_Delay(3500);
 80025a6:	f640 50ac 	movw	r0, #3500	@ 0xdac
 80025aa:	f002 fe47 	bl	800523c <HAL_Delay>
	ILI9341_TopScreen(BLACK);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7ff fab0 	bl	8001b14 <ILI9341_TopScreen>

	for(uint16_t i = 1; i <= 4; i++){
 80025b4:	2301      	movs	r3, #1
 80025b6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80025b8:	e037      	b.n	800262a <getTare+0x116>
			weight_temp = (int)weighRaw();
 80025ba:	f002 f850 	bl	800465e <weighRaw>
 80025be:	6378      	str	r0, [r7, #52]	@ 0x34
			printf("Tare attempt %d: %d\n\r", i, weight_temp);
 80025c0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80025c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025c4:	4619      	mov	r1, r3
 80025c6:	4838      	ldr	r0, [pc, #224]	@ (80026a8 <getTare+0x194>)
 80025c8:	f00a fcb6 	bl	800cf38 <iprintf>
			HAL_Delay(10);
 80025cc:	200a      	movs	r0, #10
 80025ce:	f002 fe35 	bl	800523c <HAL_Delay>

			//TFT
			ILI9341_DrawText("Tare attempt ", FONT4, 0, tft_y, WHITE, BLACK);
 80025d2:	4b30      	ldr	r3, [pc, #192]	@ (8002694 <getTare+0x180>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	9201      	str	r2, [sp, #4]
 80025dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025e0:	9200      	str	r2, [sp, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	492c      	ldr	r1, [pc, #176]	@ (8002698 <getTare+0x184>)
 80025e6:	4831      	ldr	r0, [pc, #196]	@ (80026ac <getTare+0x198>)
 80025e8:	f7fe ff1b 	bl	8001422 <ILI9341_DrawText>
			snprintf(tft_weight_temp, sizeof(tft_weight_temp), "%d", weight_temp);
 80025ec:	4638      	mov	r0, r7
 80025ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f0:	4a2f      	ldr	r2, [pc, #188]	@ (80026b0 <getTare+0x19c>)
 80025f2:	2132      	movs	r1, #50	@ 0x32
 80025f4:	f00a fd66 	bl	800d0c4 <sniprintf>
			ILI9341_DrawText(tft_weight_temp, FONT4, 120, tft_y, WHITE, BLACK);
 80025f8:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <getTare+0x180>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4638      	mov	r0, r7
 8002600:	2200      	movs	r2, #0
 8002602:	9201      	str	r2, [sp, #4]
 8002604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002608:	9200      	str	r2, [sp, #0]
 800260a:	2278      	movs	r2, #120	@ 0x78
 800260c:	4922      	ldr	r1, [pc, #136]	@ (8002698 <getTare+0x184>)
 800260e:	f7fe ff08 	bl	8001422 <ILI9341_DrawText>
			tft_y +=20;
 8002612:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <getTare+0x180>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	4a1e      	ldr	r2, [pc, #120]	@ (8002694 <getTare+0x180>)
 800261a:	6013      	str	r3, [r2, #0]
			HAL_Delay(500);
 800261c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002620:	f002 fe0c 	bl	800523c <HAL_Delay>
	for(uint16_t i = 1; i <= 4; i++){
 8002624:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002626:	3301      	adds	r3, #1
 8002628:	867b      	strh	r3, [r7, #50]	@ 0x32
 800262a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800262c:	2b04      	cmp	r3, #4
 800262e:	d9c4      	bls.n	80025ba <getTare+0xa6>

		}
	printf("Tare Set: %d\n\r", weight_temp);
 8002630:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002632:	4820      	ldr	r0, [pc, #128]	@ (80026b4 <getTare+0x1a0>)
 8002634:	f00a fc80 	bl	800cf38 <iprintf>
	//TFT
	HAL_Delay(10);
 8002638:	200a      	movs	r0, #10
 800263a:	f002 fdff 	bl	800523c <HAL_Delay>
	ILI9341_TopScreen(BLACK);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff fa68 	bl	8001b14 <ILI9341_TopScreen>
	ILI9341_DrawText("Tare Set: ", FONT4, 0, tft_y, WHITE, BLACK);
 8002644:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <getTare+0x180>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	2200      	movs	r2, #0
 800264c:	9201      	str	r2, [sp, #4]
 800264e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002652:	9200      	str	r2, [sp, #0]
 8002654:	2200      	movs	r2, #0
 8002656:	4910      	ldr	r1, [pc, #64]	@ (8002698 <getTare+0x184>)
 8002658:	4817      	ldr	r0, [pc, #92]	@ (80026b8 <getTare+0x1a4>)
 800265a:	f7fe fee2 	bl	8001422 <ILI9341_DrawText>
	ILI9341_DrawText(tft_weight_temp, FONT4, 90, tft_y, WHITE, BLACK);
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <getTare+0x180>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4638      	mov	r0, r7
 8002666:	2200      	movs	r2, #0
 8002668:	9201      	str	r2, [sp, #4]
 800266a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800266e:	9200      	str	r2, [sp, #0]
 8002670:	225a      	movs	r2, #90	@ 0x5a
 8002672:	4909      	ldr	r1, [pc, #36]	@ (8002698 <getTare+0x184>)
 8002674:	f7fe fed5 	bl	8001422 <ILI9341_DrawText>
	HAL_Delay(500);
 8002678:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800267c:	f002 fdde 	bl	800523c <HAL_Delay>
	return weight_temp;
 8002680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002682:	4618      	mov	r0, r3
 8002684:	3738      	adds	r7, #56	@ 0x38
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	080109a8 	.word	0x080109a8
 8002690:	080109d8 	.word	0x080109d8
 8002694:	20000230 	.word	0x20000230
 8002698:	08011598 	.word	0x08011598
 800269c:	08010a04 	.word	0x08010a04
 80026a0:	08010a28 	.word	0x08010a28
 80026a4:	08010a34 	.word	0x08010a34
 80026a8:	08010a5c 	.word	0x08010a5c
 80026ac:	08010a74 	.word	0x08010a74
 80026b0:	08010a84 	.word	0x08010a84
 80026b4:	08010a88 	.word	0x08010a88
 80026b8:	08010a98 	.word	0x08010a98

080026bc <Calibrate>:

void Calibrate(){
 80026bc:	b580      	push	{r7, lr}
 80026be:	b094      	sub	sp, #80	@ 0x50
 80026c0:	af02      	add	r7, sp, #8
	printf("Beginning with Row: 1 Drawer: 1\n\r");
 80026c2:	482e      	ldr	r0, [pc, #184]	@ (800277c <Calibrate+0xc0>)
 80026c4:	f00a fc38 	bl	800cf38 <iprintf>
// TFT
	ILI9341_DrawText("Beginning with Row: 1 Drawer: 1", FONT4, 0, tft_y, WHITE, BLACK);
 80026c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <Calibrate+0xc4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2200      	movs	r2, #0
 80026d0:	9201      	str	r2, [sp, #4]
 80026d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026d6:	9200      	str	r2, [sp, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	492a      	ldr	r1, [pc, #168]	@ (8002784 <Calibrate+0xc8>)
 80026dc:	482a      	ldr	r0, [pc, #168]	@ (8002788 <Calibrate+0xcc>)
 80026de:	f7fe fea0 	bl	8001422 <ILI9341_DrawText>
	tft_y +=20;
 80026e2:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <Calibrate+0xc4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	4a25      	ldr	r2, [pc, #148]	@ (8002780 <Calibrate+0xc4>)
 80026ea:	6013      	str	r3, [r2, #0]

	uint32_t tare = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	633b      	str	r3, [r7, #48]	@ 0x30
	int knownHX711 = 1;
 80026f0:	2301      	movs	r3, #1
 80026f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t thresh = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	FRESULT res = f_unlink("drwConf.txt"); //deletes the original file
 80026f8:	4824      	ldr	r0, [pc, #144]	@ (800278c <Calibrate+0xd0>)
 80026fa:	f009 fa32 	bl	800bb62 <f_unlink>
 80026fe:	4603      	mov	r3, r0
 8002700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(res == FR_OK){
 8002704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <Calibrate+0x56>
		printf("Removed old 'drwConf.txt'\n\r");
 800270c:	4820      	ldr	r0, [pc, #128]	@ (8002790 <Calibrate+0xd4>)
 800270e:	f00a fc13 	bl	800cf38 <iprintf>
	}
	f_unlink("temp_drawerConfig.txt"); //deletes the original file
 8002712:	4820      	ldr	r0, [pc, #128]	@ (8002794 <Calibrate+0xd8>)
 8002714:	f009 fa25 	bl	800bb62 <f_unlink>


	for(int i = 1; i <= 2; i++){
 8002718:	2301      	movs	r3, #1
 800271a:	647b      	str	r3, [r7, #68]	@ 0x44
 800271c:	e356      	b.n	8002dcc <Calibrate+0x710>

		uint16_t A_mast = MuxCombos[i-1].A;
 800271e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	491d      	ldr	r1, [pc, #116]	@ (8002798 <Calibrate+0xdc>)
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	440b      	add	r3, r1
 800272c:	3302      	adds	r3, #2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t B_mast = MuxCombos[i-1].B;
 8002732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	4918      	ldr	r1, [pc, #96]	@ (8002798 <Calibrate+0xdc>)
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	440b      	add	r3, r1
 8002740:	3301      	adds	r3, #1
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint16_t C_mast = MuxCombos[i-1].C;
 8002746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002748:	1e5a      	subs	r2, r3, #1
 800274a:	4913      	ldr	r1, [pc, #76]	@ (8002798 <Calibrate+0xdc>)
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	440b      	add	r3, r1
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	843b      	strh	r3, [r7, #32]

		muxSET(A_mast, B_mast, C_mast, 1);
 8002758:	8c3a      	ldrh	r2, [r7, #32]
 800275a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800275c:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800275e:	2301      	movs	r3, #1
 8002760:	f001 fdee 	bl	8004340 <muxSET>

		setRelay(i);
 8002764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fe31 	bl	80043d0 <setRelay>

		if(i == 1){
 800276e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002770:	2b01      	cmp	r3, #1
 8002772:	f040 81a8 	bne.w	8002ac6 <Calibrate+0x40a>
			for(int j = 1; j <= 4; j++){
 8002776:	2301      	movs	r3, #1
 8002778:	643b      	str	r3, [r7, #64]	@ 0x40
 800277a:	e19f      	b.n	8002abc <Calibrate+0x400>
 800277c:	08010aa4 	.word	0x08010aa4
 8002780:	20000230 	.word	0x20000230
 8002784:	08011598 	.word	0x08011598
 8002788:	08010ac8 	.word	0x08010ac8
 800278c:	08010ae8 	.word	0x08010ae8
 8002790:	08010af4 	.word	0x08010af4
 8002794:	08010b10 	.word	0x08010b10
 8002798:	080126dc 	.word	0x080126dc

				uint16_t A_slave = MuxCombos[j-1].A;
 800279c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	4989      	ldr	r1, [pc, #548]	@ (80029c8 <Calibrate+0x30c>)
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	440b      	add	r3, r1
 80027aa:	3302      	adds	r3, #2
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	81fb      	strh	r3, [r7, #14]
				uint16_t B_slave = MuxCombos[j-1].B;
 80027b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	4984      	ldr	r1, [pc, #528]	@ (80029c8 <Calibrate+0x30c>)
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	440b      	add	r3, r1
 80027be:	3301      	adds	r3, #1
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	81bb      	strh	r3, [r7, #12]
				uint16_t C_slave = MuxCombos[j-1].C;
 80027c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027c6:	1e5a      	subs	r2, r3, #1
 80027c8:	497f      	ldr	r1, [pc, #508]	@ (80029c8 <Calibrate+0x30c>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	817b      	strh	r3, [r7, #10]

				muxSET(A_slave, B_slave, C_slave, 0);
 80027d6:	897a      	ldrh	r2, [r7, #10]
 80027d8:	89b9      	ldrh	r1, [r7, #12]
 80027da:	89f8      	ldrh	r0, [r7, #14]
 80027dc:	2300      	movs	r3, #0
 80027de:	f001 fdaf 	bl	8004340 <muxSET>
				printf("FIRST ROW\n\r");
 80027e2:	487a      	ldr	r0, [pc, #488]	@ (80029cc <Calibrate+0x310>)
 80027e4:	f00a fba8 	bl	800cf38 <iprintf>

				printf("ROW:%d\n\rDRAWER:%d\n\r", i, j);
 80027e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80027ec:	4878      	ldr	r0, [pc, #480]	@ (80029d0 <Calibrate+0x314>)
 80027ee:	f00a fba3 	bl	800cf38 <iprintf>

				//TFT
				drawer_lookup(i,j,'B');
 80027f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027f8:	b291      	uxth	r1, r2
 80027fa:	2242      	movs	r2, #66	@ 0x42
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fb45 	bl	8001e8c <drawer_lookup>
				snprintf(tft_row, sizeof(tft_row), "%d", i);
 8002802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002804:	4a73      	ldr	r2, [pc, #460]	@ (80029d4 <Calibrate+0x318>)
 8002806:	2132      	movs	r1, #50	@ 0x32
 8002808:	4873      	ldr	r0, [pc, #460]	@ (80029d8 <Calibrate+0x31c>)
 800280a:	f00a fc5b 	bl	800d0c4 <sniprintf>
				ILI9341_DrawText("ROW:", FONT4, 0, tft_y, WHITE, BLACK);
 800280e:	4b73      	ldr	r3, [pc, #460]	@ (80029dc <Calibrate+0x320>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	2200      	movs	r2, #0
 8002816:	9201      	str	r2, [sp, #4]
 8002818:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800281c:	9200      	str	r2, [sp, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	496f      	ldr	r1, [pc, #444]	@ (80029e0 <Calibrate+0x324>)
 8002822:	4870      	ldr	r0, [pc, #448]	@ (80029e4 <Calibrate+0x328>)
 8002824:	f7fe fdfd 	bl	8001422 <ILI9341_DrawText>
				ILI9341_DrawText(tft_row, FONT4, 55, tft_y, WHITE, BLACK);
 8002828:	4b6c      	ldr	r3, [pc, #432]	@ (80029dc <Calibrate+0x320>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	2200      	movs	r2, #0
 8002830:	9201      	str	r2, [sp, #4]
 8002832:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002836:	9200      	str	r2, [sp, #0]
 8002838:	2237      	movs	r2, #55	@ 0x37
 800283a:	4969      	ldr	r1, [pc, #420]	@ (80029e0 <Calibrate+0x324>)
 800283c:	4866      	ldr	r0, [pc, #408]	@ (80029d8 <Calibrate+0x31c>)
 800283e:	f7fe fdf0 	bl	8001422 <ILI9341_DrawText>
				snprintf(tft_drawer, sizeof(tft_drawer), "%d", j);
 8002842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002844:	4a63      	ldr	r2, [pc, #396]	@ (80029d4 <Calibrate+0x318>)
 8002846:	2132      	movs	r1, #50	@ 0x32
 8002848:	4867      	ldr	r0, [pc, #412]	@ (80029e8 <Calibrate+0x32c>)
 800284a:	f00a fc3b 	bl	800d0c4 <sniprintf>
				ILI9341_DrawText("DRW:",FONT4, 0, tft_y+20, WHITE, BLACK);
 800284e:	4b63      	ldr	r3, [pc, #396]	@ (80029dc <Calibrate+0x320>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	3314      	adds	r3, #20
 8002856:	b29b      	uxth	r3, r3
 8002858:	2200      	movs	r2, #0
 800285a:	9201      	str	r2, [sp, #4]
 800285c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002860:	9200      	str	r2, [sp, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	495e      	ldr	r1, [pc, #376]	@ (80029e0 <Calibrate+0x324>)
 8002866:	4861      	ldr	r0, [pc, #388]	@ (80029ec <Calibrate+0x330>)
 8002868:	f7fe fddb 	bl	8001422 <ILI9341_DrawText>
				ILI9341_DrawText(tft_drawer, FONT4, 55, tft_y+20, WHITE, BLACK);
 800286c:	4b5b      	ldr	r3, [pc, #364]	@ (80029dc <Calibrate+0x320>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	3314      	adds	r3, #20
 8002874:	b29b      	uxth	r3, r3
 8002876:	2200      	movs	r2, #0
 8002878:	9201      	str	r2, [sp, #4]
 800287a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800287e:	9200      	str	r2, [sp, #0]
 8002880:	2237      	movs	r2, #55	@ 0x37
 8002882:	4957      	ldr	r1, [pc, #348]	@ (80029e0 <Calibrate+0x324>)
 8002884:	4858      	ldr	r0, [pc, #352]	@ (80029e8 <Calibrate+0x32c>)
 8002886:	f7fe fdcc 	bl	8001422 <ILI9341_DrawText>
				tft_y +=20;
 800288a:	4b54      	ldr	r3, [pc, #336]	@ (80029dc <Calibrate+0x320>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3314      	adds	r3, #20
 8002890:	4a52      	ldr	r2, [pc, #328]	@ (80029dc <Calibrate+0x320>)
 8002892:	6013      	str	r3, [r2, #0]
				HAL_Delay(2000);
 8002894:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002898:	f002 fcd0 	bl	800523c <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff f939 	bl	8001b14 <ILI9341_TopScreen>

				tare = getTare();
 80028a2:	f7ff fe37 	bl	8002514 <getTare>
 80028a6:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button once when ready to calibrate\n\r");
 80028a8:	4851      	ldr	r0, [pc, #324]	@ (80029f0 <Calibrate+0x334>)
 80028aa:	f00a fb45 	bl	800cf38 <iprintf>

				//TFT
				ILI9341_TopScreen(BLACK);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7ff f930 	bl	8001b14 <ILI9341_TopScreen>
				ILI9341_DrawText("Place the calibration weight", FONT4, 0, tft_y, WHITE, BLACK);
 80028b4:	4b49      	ldr	r3, [pc, #292]	@ (80029dc <Calibrate+0x320>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2200      	movs	r2, #0
 80028bc:	9201      	str	r2, [sp, #4]
 80028be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028c2:	9200      	str	r2, [sp, #0]
 80028c4:	2200      	movs	r2, #0
 80028c6:	4946      	ldr	r1, [pc, #280]	@ (80029e0 <Calibrate+0x324>)
 80028c8:	484a      	ldr	r0, [pc, #296]	@ (80029f4 <Calibrate+0x338>)
 80028ca:	f7fe fdaa 	bl	8001422 <ILI9341_DrawText>
				tft_y +=20;
 80028ce:	4b43      	ldr	r3, [pc, #268]	@ (80029dc <Calibrate+0x320>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3314      	adds	r3, #20
 80028d4:	4a41      	ldr	r2, [pc, #260]	@ (80029dc <Calibrate+0x320>)
 80028d6:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("on the drawer", FONT4, 0, tft_y, WHITE, BLACK);
 80028d8:	4b40      	ldr	r3, [pc, #256]	@ (80029dc <Calibrate+0x320>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2200      	movs	r2, #0
 80028e0:	9201      	str	r2, [sp, #4]
 80028e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028e6:	9200      	str	r2, [sp, #0]
 80028e8:	2200      	movs	r2, #0
 80028ea:	493d      	ldr	r1, [pc, #244]	@ (80029e0 <Calibrate+0x324>)
 80028ec:	4842      	ldr	r0, [pc, #264]	@ (80029f8 <Calibrate+0x33c>)
 80028ee:	f7fe fd98 	bl	8001422 <ILI9341_DrawText>
				tft_y +=20;
 80028f2:	4b3a      	ldr	r3, [pc, #232]	@ (80029dc <Calibrate+0x320>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3314      	adds	r3, #20
 80028f8:	4a38      	ldr	r2, [pc, #224]	@ (80029dc <Calibrate+0x320>)
 80028fa:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("Press the button once ", FONT4, 0, tft_y, WHITE, BLACK);
 80028fc:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <Calibrate+0x320>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	2200      	movs	r2, #0
 8002904:	9201      	str	r2, [sp, #4]
 8002906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800290a:	9200      	str	r2, [sp, #0]
 800290c:	2200      	movs	r2, #0
 800290e:	4934      	ldr	r1, [pc, #208]	@ (80029e0 <Calibrate+0x324>)
 8002910:	483a      	ldr	r0, [pc, #232]	@ (80029fc <Calibrate+0x340>)
 8002912:	f7fe fd86 	bl	8001422 <ILI9341_DrawText>
				tft_y +=20;
 8002916:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <Calibrate+0x320>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3314      	adds	r3, #20
 800291c:	4a2f      	ldr	r2, [pc, #188]	@ (80029dc <Calibrate+0x320>)
 800291e:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("when ready to calibrate ", FONT4, 0, tft_y, WHITE, BLACK);
 8002920:	4b2e      	ldr	r3, [pc, #184]	@ (80029dc <Calibrate+0x320>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	2200      	movs	r2, #0
 8002928:	9201      	str	r2, [sp, #4]
 800292a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800292e:	9200      	str	r2, [sp, #0]
 8002930:	2200      	movs	r2, #0
 8002932:	492b      	ldr	r1, [pc, #172]	@ (80029e0 <Calibrate+0x324>)
 8002934:	4832      	ldr	r0, [pc, #200]	@ (8002a00 <Calibrate+0x344>)
 8002936:	f7fe fd74 	bl	8001422 <ILI9341_DrawText>

				row_num = i;
 800293a:	4a32      	ldr	r2, [pc, #200]	@ (8002a04 <Calibrate+0x348>)
 800293c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800293e:	6013      	str	r3, [r2, #0]
				drawer_num = j;
 8002940:	4a31      	ldr	r2, [pc, #196]	@ (8002a08 <Calibrate+0x34c>)
 8002942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002944:	6013      	str	r3, [r2, #0]

				 //double press confirmation here
				//button_output(num);

				buttonPress();
 8002946:	f7ff fdcf 	bl	80024e8 <buttonPress>

				knownHX711 = weighRawTare(tare);
 800294a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800294c:	f001 fec1 	bl	80046d2 <weighRawTare>
 8002950:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8002952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002954:	482d      	ldr	r0, [pc, #180]	@ (8002a0c <Calibrate+0x350>)
 8002956:	f00a faef 	bl	800cf38 <iprintf>

				//TFT
				HAL_Delay(2000);
 800295a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800295e:	f002 fc6d 	bl	800523c <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 8002962:	2000      	movs	r0, #0
 8002964:	f7ff f8d6 	bl	8001b14 <ILI9341_TopScreen>
				ILI9341_DrawText("Read weight: ",FONT4, 0, tft_y, WHITE, BLACK);
 8002968:	4b1c      	ldr	r3, [pc, #112]	@ (80029dc <Calibrate+0x320>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	2200      	movs	r2, #0
 8002970:	9201      	str	r2, [sp, #4]
 8002972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002976:	9200      	str	r2, [sp, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	4919      	ldr	r1, [pc, #100]	@ (80029e0 <Calibrate+0x324>)
 800297c:	4824      	ldr	r0, [pc, #144]	@ (8002a10 <Calibrate+0x354>)
 800297e:	f7fe fd50 	bl	8001422 <ILI9341_DrawText>
				snprintf(tft_knownHX711, sizeof(tft_knownHX711), "%d", knownHX711);
 8002982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002984:	4a13      	ldr	r2, [pc, #76]	@ (80029d4 <Calibrate+0x318>)
 8002986:	2132      	movs	r1, #50	@ 0x32
 8002988:	4822      	ldr	r0, [pc, #136]	@ (8002a14 <Calibrate+0x358>)
 800298a:	f00a fb9b 	bl	800d0c4 <sniprintf>
				ILI9341_DrawText(tft_knownHX711,FONT4, 115, tft_y, WHITE, BLACK);
 800298e:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <Calibrate+0x320>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	2200      	movs	r2, #0
 8002996:	9201      	str	r2, [sp, #4]
 8002998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	2273      	movs	r2, #115	@ 0x73
 80029a0:	490f      	ldr	r1, [pc, #60]	@ (80029e0 <Calibrate+0x324>)
 80029a2:	481c      	ldr	r0, [pc, #112]	@ (8002a14 <Calibrate+0x358>)
 80029a4:	f7fe fd3d 	bl	8001422 <ILI9341_DrawText>
				HAL_Delay(3000);
 80029a8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80029ac:	f002 fc46 	bl	800523c <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7ff f8af 	bl	8001b14 <ILI9341_TopScreen>

				float calFactor = getCalFactor(knownHX711);
 80029b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 fecd 	bl	8004758 <getCalFactor>
 80029be:	ed87 0a01 	vstr	s0, [r7, #4]

				for(int p = 0; p < 4; p++){
 80029c2:	2300      	movs	r3, #0
 80029c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029c6:	e060      	b.n	8002a8a <Calibrate+0x3ce>
 80029c8:	080126dc 	.word	0x080126dc
 80029cc:	08010b28 	.word	0x08010b28
 80029d0:	08010b34 	.word	0x08010b34
 80029d4:	08010a84 	.word	0x08010a84
 80029d8:	20000234 	.word	0x20000234
 80029dc:	20000230 	.word	0x20000230
 80029e0:	08011598 	.word	0x08011598
 80029e4:	08010b48 	.word	0x08010b48
 80029e8:	20000268 	.word	0x20000268
 80029ec:	08010b50 	.word	0x08010b50
 80029f0:	08010b58 	.word	0x08010b58
 80029f4:	08010bb4 	.word	0x08010bb4
 80029f8:	08010bd4 	.word	0x08010bd4
 80029fc:	08010be4 	.word	0x08010be4
 8002a00:	08010bfc 	.word	0x08010bfc
 8002a04:	20000338 	.word	0x20000338
 8002a08:	2000033c 	.word	0x2000033c
 8002a0c:	08010c18 	.word	0x08010c18
 8002a10:	08010c2c 	.word	0x08010c2c
 8002a14:	2000029c 	.word	0x2000029c
					int weight = weigh(tare, calFactor);
 8002a18:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a1e:	f001 fdcf 	bl	80045c0 <weigh>
 8002a22:	6038      	str	r0, [r7, #0]
					printf("Weight: %d\n\r", weight);
 8002a24:	6839      	ldr	r1, [r7, #0]
 8002a26:	48a8      	ldr	r0, [pc, #672]	@ (8002cc8 <Calibrate+0x60c>)
 8002a28:	f00a fa86 	bl	800cf38 <iprintf>
					HAL_Delay(10);
 8002a2c:	200a      	movs	r0, #10
 8002a2e:	f002 fc05 	bl	800523c <HAL_Delay>
					//TFT
					snprintf(tft_weights, sizeof(tft_weights), "%d", weight);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	4aa5      	ldr	r2, [pc, #660]	@ (8002ccc <Calibrate+0x610>)
 8002a36:	2132      	movs	r1, #50	@ 0x32
 8002a38:	48a5      	ldr	r0, [pc, #660]	@ (8002cd0 <Calibrate+0x614>)
 8002a3a:	f00a fb43 	bl	800d0c4 <sniprintf>
					ILI9341_DrawText("Weight: ",FONT4, 0, tft_y, WHITE, BLACK);
 8002a3e:	4ba5      	ldr	r3, [pc, #660]	@ (8002cd4 <Calibrate+0x618>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2200      	movs	r2, #0
 8002a46:	9201      	str	r2, [sp, #4]
 8002a48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	49a1      	ldr	r1, [pc, #644]	@ (8002cd8 <Calibrate+0x61c>)
 8002a52:	48a2      	ldr	r0, [pc, #648]	@ (8002cdc <Calibrate+0x620>)
 8002a54:	f7fe fce5 	bl	8001422 <ILI9341_DrawText>
					ILI9341_DrawText(tft_weights,FONT4, 65, tft_y, WHITE, BLACK);
 8002a58:	4b9e      	ldr	r3, [pc, #632]	@ (8002cd4 <Calibrate+0x618>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2200      	movs	r2, #0
 8002a60:	9201      	str	r2, [sp, #4]
 8002a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a66:	9200      	str	r2, [sp, #0]
 8002a68:	2241      	movs	r2, #65	@ 0x41
 8002a6a:	499b      	ldr	r1, [pc, #620]	@ (8002cd8 <Calibrate+0x61c>)
 8002a6c:	4898      	ldr	r0, [pc, #608]	@ (8002cd0 <Calibrate+0x614>)
 8002a6e:	f7fe fcd8 	bl	8001422 <ILI9341_DrawText>
					tft_y +=20;
 8002a72:	4b98      	ldr	r3, [pc, #608]	@ (8002cd4 <Calibrate+0x618>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3314      	adds	r3, #20
 8002a78:	4a96      	ldr	r2, [pc, #600]	@ (8002cd4 <Calibrate+0x618>)
 8002a7a:	6013      	str	r3, [r2, #0]
					HAL_Delay(500);
 8002a7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a80:	f002 fbdc 	bl	800523c <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8002a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a86:	3301      	adds	r3, #1
 8002a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	ddc3      	ble.n	8002a18 <Calibrate+0x35c>
				}

				thresh = refillDrawer(tare, calFactor);
 8002a90:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a96:	f000 f9f9 	bl	8002e8c <refillDrawer>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 8002a9e:	f000 fee3 	bl	8003868 <SD_init>

				saveDrawerConfig(i, j, calFactor, tare, thresh);
 8002aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aa4:	b298      	uxth	r0, r3
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa8:	b299      	uxth	r1, r3
 8002aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aae:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ab2:	f000 ff15 	bl	80038e0 <saveDrawerConfig>
			for(int j = 1; j <= 4; j++){
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab8:	3301      	adds	r3, #1
 8002aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8002abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	f77f ae6c 	ble.w	800279c <Calibrate+0xe0>
 8002ac4:	e17f      	b.n	8002dc6 <Calibrate+0x70a>
			}
		}

		else{
			for(int k = 1; k <= 7; k++){
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002aca:	e178      	b.n	8002dbe <Calibrate+0x702>

				uint16_t A_slave = MuxCombos[k-1].A;
 8002acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ace:	1e5a      	subs	r2, r3, #1
 8002ad0:	4983      	ldr	r1, [pc, #524]	@ (8002ce0 <Calibrate+0x624>)
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3302      	adds	r3, #2
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	83fb      	strh	r3, [r7, #30]
				uint16_t B_slave = MuxCombos[k-1].B;
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae2:	1e5a      	subs	r2, r3, #1
 8002ae4:	497e      	ldr	r1, [pc, #504]	@ (8002ce0 <Calibrate+0x624>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	440b      	add	r3, r1
 8002aee:	3301      	adds	r3, #1
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	83bb      	strh	r3, [r7, #28]
				uint16_t C_slave = MuxCombos[k-1].C;
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	4979      	ldr	r1, [pc, #484]	@ (8002ce0 <Calibrate+0x624>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	837b      	strh	r3, [r7, #26]

				muxSET(A_slave, B_slave, C_slave, 0);
 8002b06:	8b7a      	ldrh	r2, [r7, #26]
 8002b08:	8bb9      	ldrh	r1, [r7, #28]
 8002b0a:	8bf8      	ldrh	r0, [r7, #30]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f001 fc17 	bl	8004340 <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, k);
 8002b12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002b16:	4873      	ldr	r0, [pc, #460]	@ (8002ce4 <Calibrate+0x628>)
 8002b18:	f00a fa0e 	bl	800cf38 <iprintf>

				//TFT
				snprintf(tft_row, sizeof(tft_row), "%d", i);
 8002b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b1e:	4a6b      	ldr	r2, [pc, #428]	@ (8002ccc <Calibrate+0x610>)
 8002b20:	2132      	movs	r1, #50	@ 0x32
 8002b22:	4871      	ldr	r0, [pc, #452]	@ (8002ce8 <Calibrate+0x62c>)
 8002b24:	f00a face 	bl	800d0c4 <sniprintf>
				ILI9341_DrawText("ROW ", FONT4, 0, tft_y, WHITE, BLACK);
 8002b28:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd4 <Calibrate+0x618>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	9201      	str	r2, [sp, #4]
 8002b32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b36:	9200      	str	r2, [sp, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4967      	ldr	r1, [pc, #412]	@ (8002cd8 <Calibrate+0x61c>)
 8002b3c:	486b      	ldr	r0, [pc, #428]	@ (8002cec <Calibrate+0x630>)
 8002b3e:	f7fe fc70 	bl	8001422 <ILI9341_DrawText>
				ILI9341_DrawText(tft_row, FONT4, 55, tft_y, WHITE, BLACK);
 8002b42:	4b64      	ldr	r3, [pc, #400]	@ (8002cd4 <Calibrate+0x618>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	9201      	str	r2, [sp, #4]
 8002b4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b50:	9200      	str	r2, [sp, #0]
 8002b52:	2237      	movs	r2, #55	@ 0x37
 8002b54:	4960      	ldr	r1, [pc, #384]	@ (8002cd8 <Calibrate+0x61c>)
 8002b56:	4864      	ldr	r0, [pc, #400]	@ (8002ce8 <Calibrate+0x62c>)
 8002b58:	f7fe fc63 	bl	8001422 <ILI9341_DrawText>
				snprintf(tft_drawer, sizeof(tft_drawer), "%d", i);
 8002b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ccc <Calibrate+0x610>)
 8002b60:	2132      	movs	r1, #50	@ 0x32
 8002b62:	4863      	ldr	r0, [pc, #396]	@ (8002cf0 <Calibrate+0x634>)
 8002b64:	f00a faae 	bl	800d0c4 <sniprintf>
				ILI9341_DrawText(" | DRAWER ",FONT4, 60, tft_y, WHITE, BLACK);
 8002b68:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd4 <Calibrate+0x618>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2200      	movs	r2, #0
 8002b70:	9201      	str	r2, [sp, #4]
 8002b72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b76:	9200      	str	r2, [sp, #0]
 8002b78:	223c      	movs	r2, #60	@ 0x3c
 8002b7a:	4957      	ldr	r1, [pc, #348]	@ (8002cd8 <Calibrate+0x61c>)
 8002b7c:	485d      	ldr	r0, [pc, #372]	@ (8002cf4 <Calibrate+0x638>)
 8002b7e:	f7fe fc50 	bl	8001422 <ILI9341_DrawText>
				ILI9341_DrawText(tft_drawer, FONT4, 175, tft_y, WHITE, BLACK);
 8002b82:	4b54      	ldr	r3, [pc, #336]	@ (8002cd4 <Calibrate+0x618>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	9201      	str	r2, [sp, #4]
 8002b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b90:	9200      	str	r2, [sp, #0]
 8002b92:	22af      	movs	r2, #175	@ 0xaf
 8002b94:	4950      	ldr	r1, [pc, #320]	@ (8002cd8 <Calibrate+0x61c>)
 8002b96:	4856      	ldr	r0, [pc, #344]	@ (8002cf0 <Calibrate+0x634>)
 8002b98:	f7fe fc43 	bl	8001422 <ILI9341_DrawText>
				tft_y +=20;
 8002b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd4 <Calibrate+0x618>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3314      	adds	r3, #20
 8002ba2:	4a4c      	ldr	r2, [pc, #304]	@ (8002cd4 <Calibrate+0x618>)
 8002ba4:	6013      	str	r3, [r2, #0]
				HAL_Delay(2000);
 8002ba6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002baa:	f002 fb47 	bl	800523c <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7fe ffb0 	bl	8001b14 <ILI9341_TopScreen>

				tare = getTare();
 8002bb4:	f7ff fcae 	bl	8002514 <getTare>
 8002bb8:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button twice when ready to calibrate\n\r");
 8002bba:	484f      	ldr	r0, [pc, #316]	@ (8002cf8 <Calibrate+0x63c>)
 8002bbc:	f00a f9bc 	bl	800cf38 <iprintf>

				//TFT
				ILI9341_DrawText("Place the calibration weight", FONT4, 0, tft_y, WHITE, BLACK);
 8002bc0:	4b44      	ldr	r3, [pc, #272]	@ (8002cd4 <Calibrate+0x618>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	9201      	str	r2, [sp, #4]
 8002bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bce:	9200      	str	r2, [sp, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	4941      	ldr	r1, [pc, #260]	@ (8002cd8 <Calibrate+0x61c>)
 8002bd4:	4849      	ldr	r0, [pc, #292]	@ (8002cfc <Calibrate+0x640>)
 8002bd6:	f7fe fc24 	bl	8001422 <ILI9341_DrawText>
				tft_y +=20;
 8002bda:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd4 <Calibrate+0x618>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3314      	adds	r3, #20
 8002be0:	4a3c      	ldr	r2, [pc, #240]	@ (8002cd4 <Calibrate+0x618>)
 8002be2:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("on the drawer", FONT4, 0, tft_y, WHITE, BLACK);
 8002be4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd4 <Calibrate+0x618>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2200      	movs	r2, #0
 8002bec:	9201      	str	r2, [sp, #4]
 8002bee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bf2:	9200      	str	r2, [sp, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4938      	ldr	r1, [pc, #224]	@ (8002cd8 <Calibrate+0x61c>)
 8002bf8:	4841      	ldr	r0, [pc, #260]	@ (8002d00 <Calibrate+0x644>)
 8002bfa:	f7fe fc12 	bl	8001422 <ILI9341_DrawText>
				tft_y +=20;
 8002bfe:	4b35      	ldr	r3, [pc, #212]	@ (8002cd4 <Calibrate+0x618>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3314      	adds	r3, #20
 8002c04:	4a33      	ldr	r2, [pc, #204]	@ (8002cd4 <Calibrate+0x618>)
 8002c06:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("Press the button once ", FONT4, 0, tft_y, WHITE, BLACK);
 8002c08:	4b32      	ldr	r3, [pc, #200]	@ (8002cd4 <Calibrate+0x618>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2200      	movs	r2, #0
 8002c10:	9201      	str	r2, [sp, #4]
 8002c12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c16:	9200      	str	r2, [sp, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	492f      	ldr	r1, [pc, #188]	@ (8002cd8 <Calibrate+0x61c>)
 8002c1c:	4839      	ldr	r0, [pc, #228]	@ (8002d04 <Calibrate+0x648>)
 8002c1e:	f7fe fc00 	bl	8001422 <ILI9341_DrawText>
				tft_y +=20;
 8002c22:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd4 <Calibrate+0x618>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3314      	adds	r3, #20
 8002c28:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd4 <Calibrate+0x618>)
 8002c2a:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("when ready to calibrate ", FONT4, 0, tft_y, WHITE, BLACK);
 8002c2c:	4b29      	ldr	r3, [pc, #164]	@ (8002cd4 <Calibrate+0x618>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2200      	movs	r2, #0
 8002c34:	9201      	str	r2, [sp, #4]
 8002c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c3a:	9200      	str	r2, [sp, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4926      	ldr	r1, [pc, #152]	@ (8002cd8 <Calibrate+0x61c>)
 8002c40:	4831      	ldr	r0, [pc, #196]	@ (8002d08 <Calibrate+0x64c>)
 8002c42:	f7fe fbee 	bl	8001422 <ILI9341_DrawText>

				//double press confirmation here
				//button_output(num);

				buttonPress();
 8002c46:	f7ff fc4f 	bl	80024e8 <buttonPress>



				knownHX711 = weighRawTare(tare);
 8002c4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c4c:	f001 fd41 	bl	80046d2 <weighRawTare>
 8002c50:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8002c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c54:	482d      	ldr	r0, [pc, #180]	@ (8002d0c <Calibrate+0x650>)
 8002c56:	f00a f96f 	bl	800cf38 <iprintf>

				//TFT
				HAL_Delay(2000);
 8002c5a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c5e:	f002 faed 	bl	800523c <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7fe ff56 	bl	8001b14 <ILI9341_TopScreen>
				ILI9341_DrawText("Read weight: ",FONT4, 0, tft_y, WHITE, BLACK);
 8002c68:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd4 <Calibrate+0x618>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2200      	movs	r2, #0
 8002c70:	9201      	str	r2, [sp, #4]
 8002c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c76:	9200      	str	r2, [sp, #0]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4917      	ldr	r1, [pc, #92]	@ (8002cd8 <Calibrate+0x61c>)
 8002c7c:	4824      	ldr	r0, [pc, #144]	@ (8002d10 <Calibrate+0x654>)
 8002c7e:	f7fe fbd0 	bl	8001422 <ILI9341_DrawText>
				snprintf(tft_knownHX711, sizeof(tft_knownHX711), "%d", knownHX711);
 8002c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c84:	4a11      	ldr	r2, [pc, #68]	@ (8002ccc <Calibrate+0x610>)
 8002c86:	2132      	movs	r1, #50	@ 0x32
 8002c88:	4822      	ldr	r0, [pc, #136]	@ (8002d14 <Calibrate+0x658>)
 8002c8a:	f00a fa1b 	bl	800d0c4 <sniprintf>
				ILI9341_DrawText(tft_knownHX711,FONT4, 115, tft_y, WHITE, BLACK);
 8002c8e:	4b11      	ldr	r3, [pc, #68]	@ (8002cd4 <Calibrate+0x618>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	9201      	str	r2, [sp, #4]
 8002c98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	2273      	movs	r2, #115	@ 0x73
 8002ca0:	490d      	ldr	r1, [pc, #52]	@ (8002cd8 <Calibrate+0x61c>)
 8002ca2:	481c      	ldr	r0, [pc, #112]	@ (8002d14 <Calibrate+0x658>)
 8002ca4:	f7fe fbbd 	bl	8001422 <ILI9341_DrawText>
				HAL_Delay(3000);
 8002ca8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002cac:	f002 fac6 	bl	800523c <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fe ff2f 	bl	8001b14 <ILI9341_TopScreen>

				float calFactor = getCalFactor(knownHX711);
 8002cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 fd4d 	bl	8004758 <getCalFactor>
 8002cbe:	ed87 0a05 	vstr	s0, [r7, #20]

				for(int p = 0; p < 4; p++){
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cc6:	e061      	b.n	8002d8c <Calibrate+0x6d0>
 8002cc8:	08010c3c 	.word	0x08010c3c
 8002ccc:	08010a84 	.word	0x08010a84
 8002cd0:	200002d0 	.word	0x200002d0
 8002cd4:	20000230 	.word	0x20000230
 8002cd8:	08011598 	.word	0x08011598
 8002cdc:	08010c4c 	.word	0x08010c4c
 8002ce0:	080126dc 	.word	0x080126dc
 8002ce4:	08010c58 	.word	0x08010c58
 8002ce8:	20000234 	.word	0x20000234
 8002cec:	08010c70 	.word	0x08010c70
 8002cf0:	20000268 	.word	0x20000268
 8002cf4:	08010c78 	.word	0x08010c78
 8002cf8:	08010c84 	.word	0x08010c84
 8002cfc:	08010bb4 	.word	0x08010bb4
 8002d00:	08010bd4 	.word	0x08010bd4
 8002d04:	08010be4 	.word	0x08010be4
 8002d08:	08010bfc 	.word	0x08010bfc
 8002d0c:	08010c18 	.word	0x08010c18
 8002d10:	08010c2c 	.word	0x08010c2c
 8002d14:	2000029c 	.word	0x2000029c
					int weight = weigh(tare, calFactor);
 8002d18:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d1e:	f001 fc4f 	bl	80045c0 <weigh>
 8002d22:	6138      	str	r0, [r7, #16]
					printf("Weight: %d\n\r", weight);
 8002d24:	6939      	ldr	r1, [r7, #16]
 8002d26:	482e      	ldr	r0, [pc, #184]	@ (8002de0 <Calibrate+0x724>)
 8002d28:	f00a f906 	bl	800cf38 <iprintf>
					HAL_Delay(400);
 8002d2c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002d30:	f002 fa84 	bl	800523c <HAL_Delay>

					//TFT
					snprintf(tft_weights, sizeof(tft_weights), "%d", weight);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4a2b      	ldr	r2, [pc, #172]	@ (8002de4 <Calibrate+0x728>)
 8002d38:	2132      	movs	r1, #50	@ 0x32
 8002d3a:	482b      	ldr	r0, [pc, #172]	@ (8002de8 <Calibrate+0x72c>)
 8002d3c:	f00a f9c2 	bl	800d0c4 <sniprintf>
					ILI9341_DrawText("Weight: ",FONT4, 0, tft_y, WHITE, BLACK);
 8002d40:	4b2a      	ldr	r3, [pc, #168]	@ (8002dec <Calibrate+0x730>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2200      	movs	r2, #0
 8002d48:	9201      	str	r2, [sp, #4]
 8002d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d4e:	9200      	str	r2, [sp, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	4927      	ldr	r1, [pc, #156]	@ (8002df0 <Calibrate+0x734>)
 8002d54:	4827      	ldr	r0, [pc, #156]	@ (8002df4 <Calibrate+0x738>)
 8002d56:	f7fe fb64 	bl	8001422 <ILI9341_DrawText>
					ILI9341_DrawText(tft_weights,FONT4, 65, tft_y, WHITE, BLACK);
 8002d5a:	4b24      	ldr	r3, [pc, #144]	@ (8002dec <Calibrate+0x730>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	9201      	str	r2, [sp, #4]
 8002d64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d68:	9200      	str	r2, [sp, #0]
 8002d6a:	2241      	movs	r2, #65	@ 0x41
 8002d6c:	4920      	ldr	r1, [pc, #128]	@ (8002df0 <Calibrate+0x734>)
 8002d6e:	481e      	ldr	r0, [pc, #120]	@ (8002de8 <Calibrate+0x72c>)
 8002d70:	f7fe fb57 	bl	8001422 <ILI9341_DrawText>
					tft_y +=20;
 8002d74:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <Calibrate+0x730>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dec <Calibrate+0x730>)
 8002d7c:	6013      	str	r3, [r2, #0]
					HAL_Delay(400);
 8002d7e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002d82:	f002 fa5b 	bl	800523c <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8002d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d88:	3301      	adds	r3, #1
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	ddc2      	ble.n	8002d18 <Calibrate+0x65c>
				}

				thresh = refillDrawer(tare, calFactor);
 8002d92:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d98:	f000 f878 	bl	8002e8c <refillDrawer>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 8002da0:	f000 fd62 	bl	8003868 <SD_init>

				saveDrawerConfig(i, k, calFactor, tare, thresh);
 8002da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002da6:	b298      	uxth	r0, r3
 8002da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002daa:	b299      	uxth	r1, r3
 8002dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002db0:	ed97 0a05 	vldr	s0, [r7, #20]
 8002db4:	f000 fd94 	bl	80038e0 <saveDrawerConfig>
			for(int k = 1; k <= 7; k++){
 8002db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dba:	3301      	adds	r3, #1
 8002dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc0:	2b07      	cmp	r3, #7
 8002dc2:	f77f ae83 	ble.w	8002acc <Calibrate+0x410>
	for(int i = 1; i <= 2; i++){
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc8:	3301      	adds	r3, #1
 8002dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	f77f aca5 	ble.w	800271e <Calibrate+0x62>

			}
		}
	}
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3748      	adds	r7, #72	@ 0x48
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	08010c3c 	.word	0x08010c3c
 8002de4:	08010a84 	.word	0x08010a84
 8002de8:	200002d0 	.word	0x200002d0
 8002dec:	20000230 	.word	0x20000230
 8002df0:	08011598 	.word	0x08011598
 8002df4:	08010c4c 	.word	0x08010c4c

08002df8 <getThresh>:
extern int drawer_num;
extern int tft_y;

int num2 = 2;

uint32_t getThresh(uint32_t tare, float calFactor){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	ed87 0a00 	vstr	s0, [r7]
	uint32_t sum = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
	float avg = 0;
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < 4; i++){
 8002e0e:	2300      	movs	r3, #0
 8002e10:	827b      	strh	r3, [r7, #18]
 8002e12:	e00d      	b.n	8002e30 <getThresh+0x38>
		uint16_t weight = weigh(tare, calFactor);
 8002e14:	ed97 0a00 	vldr	s0, [r7]
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f001 fbd1 	bl	80045c0 <weigh>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	817b      	strh	r3, [r7, #10]
		sum += weight;
 8002e22:	897b      	ldrh	r3, [r7, #10]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4413      	add	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < 4; i++){
 8002e2a:	8a7b      	ldrh	r3, [r7, #18]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	827b      	strh	r3, [r7, #18]
 8002e30:	8a7b      	ldrh	r3, [r7, #18]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d9ee      	bls.n	8002e14 <getThresh+0x1c>
	}

	avg = sum / 4.0;
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7fd fb94 	bl	8000564 <__aeabi_ui2d>
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <getThresh+0x90>)
 8002e42:	f7fd fd33 	bl	80008ac <__aeabi_ddiv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7fd fefb 	bl	8000c48 <__aeabi_d2f>
 8002e52:	4603      	mov	r3, r0
 8002e54:	60fb      	str	r3, [r7, #12]

	return (avg * 0.1); //returns 10% of the normalized weight as the threshold
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7fd fba6 	bl	80005a8 <__aeabi_f2d>
 8002e5c:	a308      	add	r3, pc, #32	@ (adr r3, 8002e80 <getThresh+0x88>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fbf9 	bl	8000658 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7fd fecb 	bl	8000c08 <__aeabi_d2uiz>
 8002e72:	4603      	mov	r3, r0

}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	f3af 8000 	nop.w
 8002e80:	9999999a 	.word	0x9999999a
 8002e84:	3fb99999 	.word	0x3fb99999
 8002e88:	40100000 	.word	0x40100000

08002e8c <refillDrawer>:


int refillDrawer(uint32_t tare, float calFactor){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	ed87 0a00 	vstr	s0, [r7]

	uint32_t thresh;

	printf("Please refill the current drawer\n\rPress and Hold the button when ready\n\r");
 8002e98:	4865      	ldr	r0, [pc, #404]	@ (8003030 <refillDrawer+0x1a4>)
 8002e9a:	f00a f84d 	bl	800cf38 <iprintf>

	//TFT
	ILI9341_TopScreen(BLACK);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fe fe38 	bl	8001b14 <ILI9341_TopScreen>
	ILI9341_DrawText("Please refill the current drawer",FONT4, 0, tft_y, WHITE, BLACK);
 8002ea4:	4b63      	ldr	r3, [pc, #396]	@ (8003034 <refillDrawer+0x1a8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	9201      	str	r2, [sp, #4]
 8002eae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eb2:	9200      	str	r2, [sp, #0]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4960      	ldr	r1, [pc, #384]	@ (8003038 <refillDrawer+0x1ac>)
 8002eb8:	4860      	ldr	r0, [pc, #384]	@ (800303c <refillDrawer+0x1b0>)
 8002eba:	f7fe fab2 	bl	8001422 <ILI9341_DrawText>
	tft_y +=20;
 8002ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8003034 <refillDrawer+0x1a8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3314      	adds	r3, #20
 8002ec4:	4a5b      	ldr	r2, [pc, #364]	@ (8003034 <refillDrawer+0x1a8>)
 8002ec6:	6013      	str	r3, [r2, #0]
	ILI9341_DrawText("Press and Hold the button",FONT4, 0, tft_y, WHITE, BLACK);
 8002ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8003034 <refillDrawer+0x1a8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2200      	movs	r2, #0
 8002ed0:	9201      	str	r2, [sp, #4]
 8002ed2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ed6:	9200      	str	r2, [sp, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4957      	ldr	r1, [pc, #348]	@ (8003038 <refillDrawer+0x1ac>)
 8002edc:	4858      	ldr	r0, [pc, #352]	@ (8003040 <refillDrawer+0x1b4>)
 8002ede:	f7fe faa0 	bl	8001422 <ILI9341_DrawText>
	tft_y+=20;
 8002ee2:	4b54      	ldr	r3, [pc, #336]	@ (8003034 <refillDrawer+0x1a8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3314      	adds	r3, #20
 8002ee8:	4a52      	ldr	r2, [pc, #328]	@ (8003034 <refillDrawer+0x1a8>)
 8002eea:	6013      	str	r3, [r2, #0]
	ILI9341_DrawText("when ready",FONT4, 0, tft_y, WHITE, BLACK);
 8002eec:	4b51      	ldr	r3, [pc, #324]	@ (8003034 <refillDrawer+0x1a8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	9201      	str	r2, [sp, #4]
 8002ef6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002efa:	9200      	str	r2, [sp, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	494e      	ldr	r1, [pc, #312]	@ (8003038 <refillDrawer+0x1ac>)
 8002f00:	4850      	ldr	r0, [pc, #320]	@ (8003044 <refillDrawer+0x1b8>)
 8002f02:	f7fe fa8e 	bl	8001422 <ILI9341_DrawText>
	tft_y+=20;
 8002f06:	4b4b      	ldr	r3, [pc, #300]	@ (8003034 <refillDrawer+0x1a8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	4a49      	ldr	r2, [pc, #292]	@ (8003034 <refillDrawer+0x1a8>)
 8002f0e:	6013      	str	r3, [r2, #0]
	drawer_lookup(row_num,drawer_num,'R');
 8002f10:	4b4d      	ldr	r3, [pc, #308]	@ (8003048 <refillDrawer+0x1bc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4a4d      	ldr	r2, [pc, #308]	@ (800304c <refillDrawer+0x1c0>)
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	b291      	uxth	r1, r2
 8002f1c:	2252      	movs	r2, #82	@ 0x52
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe ffb4 	bl	8001e8c <drawer_lookup>

	int refill_output;
	// waits for the user to press the button within 15 seconds
	refill_output = button_refill();
 8002f24:	f001 f9e0 	bl	80042e8 <button_refill>
 8002f28:	60b8      	str	r0, [r7, #8]

	if (refill_output == 1){
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d140      	bne.n	8002fb2 <refillDrawer+0x126>
		// if pressed, change dot to white
		printf("true\n\r");
 8002f30:	4847      	ldr	r0, [pc, #284]	@ (8003050 <refillDrawer+0x1c4>)
 8002f32:	f00a f801 	bl	800cf38 <iprintf>
		HAL_Delay(1500);
 8002f36:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002f3a:	f002 f97f 	bl	800523c <HAL_Delay>

		 thresh = getThresh(tare, calFactor);
 8002f3e:	ed97 0a00 	vldr	s0, [r7]
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ff58 	bl	8002df8 <getThresh>
 8002f48:	60f8      	str	r0, [r7, #12]
		printf("Threshold set to %ld\n\r", thresh);
 8002f4a:	68f9      	ldr	r1, [r7, #12]
 8002f4c:	4841      	ldr	r0, [pc, #260]	@ (8003054 <refillDrawer+0x1c8>)
 8002f4e:	f009 fff3 	bl	800cf38 <iprintf>

		//TFT
		ILI9341_DrawText("Threshold set to",FONT4, 0, tft_y, WHITE, BLACK);
 8002f52:	4b38      	ldr	r3, [pc, #224]	@ (8003034 <refillDrawer+0x1a8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	9201      	str	r2, [sp, #4]
 8002f5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f60:	9200      	str	r2, [sp, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	4934      	ldr	r1, [pc, #208]	@ (8003038 <refillDrawer+0x1ac>)
 8002f66:	483c      	ldr	r0, [pc, #240]	@ (8003058 <refillDrawer+0x1cc>)
 8002f68:	f7fe fa5b 	bl	8001422 <ILI9341_DrawText>
		snprintf(tft_thresh, sizeof(tft_thresh), "%ld", thresh);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800305c <refillDrawer+0x1d0>)
 8002f70:	2132      	movs	r1, #50	@ 0x32
 8002f72:	483b      	ldr	r0, [pc, #236]	@ (8003060 <refillDrawer+0x1d4>)
 8002f74:	f00a f8a6 	bl	800d0c4 <sniprintf>
		ILI9341_DrawText(tft_thresh,FONT4, 155, tft_y, WHITE, BLACK);
 8002f78:	4b2e      	ldr	r3, [pc, #184]	@ (8003034 <refillDrawer+0x1a8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2200      	movs	r2, #0
 8002f80:	9201      	str	r2, [sp, #4]
 8002f82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f86:	9200      	str	r2, [sp, #0]
 8002f88:	229b      	movs	r2, #155	@ 0x9b
 8002f8a:	492b      	ldr	r1, [pc, #172]	@ (8003038 <refillDrawer+0x1ac>)
 8002f8c:	4834      	ldr	r0, [pc, #208]	@ (8003060 <refillDrawer+0x1d4>)
 8002f8e:	f7fe fa48 	bl	8001422 <ILI9341_DrawText>
		tft_y+=20;
 8002f92:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <refillDrawer+0x1a8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3314      	adds	r3, #20
 8002f98:	4a26      	ldr	r2, [pc, #152]	@ (8003034 <refillDrawer+0x1a8>)
 8002f9a:	6013      	str	r3, [r2, #0]
		drawer_lookup(row_num,drawer_num,'W');
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003048 <refillDrawer+0x1bc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800304c <refillDrawer+0x1c0>)
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	b291      	uxth	r1, r2
 8002fa8:	2257      	movs	r2, #87	@ 0x57
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe ff6e 	bl	8001e8c <drawer_lookup>
 8002fb0:	e038      	b.n	8003024 <refillDrawer+0x198>
		//return thresh;

	}

	else if (refill_output == 0){
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d135      	bne.n	8003024 <refillDrawer+0x198>
		// if timer goes off and no press is read, leave the dot as red
		printf("false\n\r");
 8002fb8:	482a      	ldr	r0, [pc, #168]	@ (8003064 <refillDrawer+0x1d8>)
 8002fba:	f009 ffbd 	bl	800cf38 <iprintf>
		HAL_Delay(1500);
 8002fbe:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002fc2:	f002 f93b 	bl	800523c <HAL_Delay>

		 thresh = getThresh(tare, calFactor);
 8002fc6:	ed97 0a00 	vldr	s0, [r7]
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ff14 	bl	8002df8 <getThresh>
 8002fd0:	60f8      	str	r0, [r7, #12]
		printf("Threshold set to %ld\n\r", thresh);
 8002fd2:	68f9      	ldr	r1, [r7, #12]
 8002fd4:	481f      	ldr	r0, [pc, #124]	@ (8003054 <refillDrawer+0x1c8>)
 8002fd6:	f009 ffaf 	bl	800cf38 <iprintf>

		//TFT
		ILI9341_DrawText("Threshold set to",FONT4, 0, tft_y, WHITE, BLACK);
 8002fda:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <refillDrawer+0x1a8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	9201      	str	r2, [sp, #4]
 8002fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe8:	9200      	str	r2, [sp, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	4912      	ldr	r1, [pc, #72]	@ (8003038 <refillDrawer+0x1ac>)
 8002fee:	481a      	ldr	r0, [pc, #104]	@ (8003058 <refillDrawer+0x1cc>)
 8002ff0:	f7fe fa17 	bl	8001422 <ILI9341_DrawText>
		snprintf(tft_thresh, sizeof(tft_thresh), "%ld", thresh);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4a19      	ldr	r2, [pc, #100]	@ (800305c <refillDrawer+0x1d0>)
 8002ff8:	2132      	movs	r1, #50	@ 0x32
 8002ffa:	4819      	ldr	r0, [pc, #100]	@ (8003060 <refillDrawer+0x1d4>)
 8002ffc:	f00a f862 	bl	800d0c4 <sniprintf>
		ILI9341_DrawText(tft_thresh,FONT4, 155, tft_y, WHITE, BLACK);
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <refillDrawer+0x1a8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	2200      	movs	r2, #0
 8003008:	9201      	str	r2, [sp, #4]
 800300a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800300e:	9200      	str	r2, [sp, #0]
 8003010:	229b      	movs	r2, #155	@ 0x9b
 8003012:	4909      	ldr	r1, [pc, #36]	@ (8003038 <refillDrawer+0x1ac>)
 8003014:	4812      	ldr	r0, [pc, #72]	@ (8003060 <refillDrawer+0x1d4>)
 8003016:	f7fe fa04 	bl	8001422 <ILI9341_DrawText>
		tft_y+=20;
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <refillDrawer+0x1a8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3314      	adds	r3, #20
 8003020:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <refillDrawer+0x1a8>)
 8003022:	6013      	str	r3, [r2, #0]
		//return thresh;

	}

	return thresh;
 8003024:	68fb      	ldr	r3, [r7, #12]


}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	08010ce4 	.word	0x08010ce4
 8003034:	20000230 	.word	0x20000230
 8003038:	08011598 	.word	0x08011598
 800303c:	08010d30 	.word	0x08010d30
 8003040:	08010d54 	.word	0x08010d54
 8003044:	08010d70 	.word	0x08010d70
 8003048:	20000338 	.word	0x20000338
 800304c:	2000033c 	.word	0x2000033c
 8003050:	08010d7c 	.word	0x08010d7c
 8003054:	08010d84 	.word	0x08010d84
 8003058:	08010d9c 	.word	0x08010d9c
 800305c:	08010db0 	.word	0x08010db0
 8003060:	20000304 	.word	0x20000304
 8003064:	08010db4 	.word	0x08010db4

08003068 <main_function>:
extern char tft_row[50];
extern char tft_drawer[50];
extern char tft_knownHX711[50];
extern char tft_weights[50];

void main_function(){
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b09b      	sub	sp, #108	@ 0x6c
 800306c:	af02      	add	r7, sp, #8


	struct drawerInfo drawerInst;
	uint32_t tare = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	64bb      	str	r3, [r7, #72]	@ 0x48
	float calFactor = 1;
 8003072:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003076:	647b      	str	r3, [r7, #68]	@ 0x44
	int thresh;

	uint32_t sum;
	uint16_t normalizedWeight;

	for(uint16_t i = 1; i <= 4; i++){
 8003078:	2301      	movs	r3, #1
 800307a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800307e:	e1fa      	b.n	8003476 <main_function+0x40e>
			printf("Row %d ", i);
 8003080:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003084:	4619      	mov	r1, r3
 8003086:	48a7      	ldr	r0, [pc, #668]	@ (8003324 <main_function+0x2bc>)
 8003088:	f009 ff56 	bl	800cf38 <iprintf>

			//TFT
			ILI9341_DrawText("ROW ", FONT4, 0, tft_y, WHITE, BLACK);
 800308c:	4ba6      	ldr	r3, [pc, #664]	@ (8003328 <main_function+0x2c0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	2200      	movs	r2, #0
 8003094:	9201      	str	r2, [sp, #4]
 8003096:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800309a:	9200      	str	r2, [sp, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	49a3      	ldr	r1, [pc, #652]	@ (800332c <main_function+0x2c4>)
 80030a0:	48a3      	ldr	r0, [pc, #652]	@ (8003330 <main_function+0x2c8>)
 80030a2:	f7fe f9be 	bl	8001422 <ILI9341_DrawText>
			snprintf(tft_row, sizeof(tft_drawer), "%d", i);
 80030a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80030aa:	4aa2      	ldr	r2, [pc, #648]	@ (8003334 <main_function+0x2cc>)
 80030ac:	2132      	movs	r1, #50	@ 0x32
 80030ae:	48a2      	ldr	r0, [pc, #648]	@ (8003338 <main_function+0x2d0>)
 80030b0:	f00a f808 	bl	800d0c4 <sniprintf>
			ILI9341_DrawText(tft_row, FONT4, 55, tft_y, WHITE, BLACK);
 80030b4:	4b9c      	ldr	r3, [pc, #624]	@ (8003328 <main_function+0x2c0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2200      	movs	r2, #0
 80030bc:	9201      	str	r2, [sp, #4]
 80030be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c2:	9200      	str	r2, [sp, #0]
 80030c4:	2237      	movs	r2, #55	@ 0x37
 80030c6:	4999      	ldr	r1, [pc, #612]	@ (800332c <main_function+0x2c4>)
 80030c8:	489b      	ldr	r0, [pc, #620]	@ (8003338 <main_function+0x2d0>)
 80030ca:	f7fe f9aa 	bl	8001422 <ILI9341_DrawText>

			uint16_t A_mast = MuxCombos[i-1].A;
 80030ce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80030d2:	1e5a      	subs	r2, r3, #1
 80030d4:	4999      	ldr	r1, [pc, #612]	@ (800333c <main_function+0x2d4>)
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	440b      	add	r3, r1
 80030de:	3302      	adds	r3, #2
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			uint16_t B_mast = MuxCombos[i-1].B;
 80030e6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80030ea:	1e5a      	subs	r2, r3, #1
 80030ec:	4993      	ldr	r1, [pc, #588]	@ (800333c <main_function+0x2d4>)
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	440b      	add	r3, r1
 80030f6:	3301      	adds	r3, #1
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t C_mast = MuxCombos[i-1].C;
 80030fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003102:	1e5a      	subs	r2, r3, #1
 8003104:	498d      	ldr	r1, [pc, #564]	@ (800333c <main_function+0x2d4>)
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	440b      	add	r3, r1
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	87fb      	strh	r3, [r7, #62]	@ 0x3e

			muxSET(A_mast, B_mast, C_mast, 1);
 8003112:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003114:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8003118:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 800311c:	2301      	movs	r3, #1
 800311e:	f001 f90f 	bl	8004340 <muxSET>

			setRelay(i);
 8003122:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003126:	b2db      	uxtb	r3, r3
 8003128:	4618      	mov	r0, r3
 800312a:	f001 f951 	bl	80043d0 <setRelay>

			if(i == 1){
 800312e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003132:	2b01      	cmp	r3, #1
 8003134:	f040 80ac 	bne.w	8003290 <main_function+0x228>
				for(uint16_t j = 1; j <= 4; j++){
 8003138:	2301      	movs	r3, #1
 800313a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800313e:	e0a1      	b.n	8003284 <main_function+0x21c>

					sum = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[j-1].A;
 8003148:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	497b      	ldr	r1, [pc, #492]	@ (800333c <main_function+0x2d4>)
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	440b      	add	r3, r1
 8003158:	3302      	adds	r3, #2
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	857b      	strh	r3, [r7, #42]	@ 0x2a
					uint16_t B_slave = MuxCombos[j-1].B;
 800315e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003162:	1e5a      	subs	r2, r3, #1
 8003164:	4975      	ldr	r1, [pc, #468]	@ (800333c <main_function+0x2d4>)
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	440b      	add	r3, r1
 800316e:	3301      	adds	r3, #1
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	853b      	strh	r3, [r7, #40]	@ 0x28
					uint16_t C_slave = MuxCombos[j-1].C;
 8003174:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003178:	1e5a      	subs	r2, r3, #1
 800317a:	4970      	ldr	r1, [pc, #448]	@ (800333c <main_function+0x2d4>)
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	440b      	add	r3, r1
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	84fb      	strh	r3, [r7, #38]	@ 0x26

					muxSET(A_slave, B_slave, C_slave, 0);
 8003188:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800318a:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800318c:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 800318e:	2300      	movs	r3, #0
 8003190:	f001 f8d6 	bl	8004340 <muxSET>

					printf("Drawer %d\n\r", j);
 8003194:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003198:	4619      	mov	r1, r3
 800319a:	4869      	ldr	r0, [pc, #420]	@ (8003340 <main_function+0x2d8>)
 800319c:	f009 fecc 	bl	800cf38 <iprintf>

					//TFT
					snprintf(tft_drawer, sizeof(tft_drawer), "%d", j);
 80031a0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80031a4:	4a63      	ldr	r2, [pc, #396]	@ (8003334 <main_function+0x2cc>)
 80031a6:	2132      	movs	r1, #50	@ 0x32
 80031a8:	4866      	ldr	r0, [pc, #408]	@ (8003344 <main_function+0x2dc>)
 80031aa:	f009 ff8b 	bl	800d0c4 <sniprintf>
					ILI9341_DrawText(" DRAWER ",FONT4, 60, tft_y, WHITE, BLACK);
 80031ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003328 <main_function+0x2c0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	9201      	str	r2, [sp, #4]
 80031b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031bc:	9200      	str	r2, [sp, #0]
 80031be:	223c      	movs	r2, #60	@ 0x3c
 80031c0:	495a      	ldr	r1, [pc, #360]	@ (800332c <main_function+0x2c4>)
 80031c2:	4861      	ldr	r0, [pc, #388]	@ (8003348 <main_function+0x2e0>)
 80031c4:	f7fe f92d 	bl	8001422 <ILI9341_DrawText>
					ILI9341_DrawText(tft_drawer, FONT4, 175, tft_y, WHITE, BLACK);
 80031c8:	4b57      	ldr	r3, [pc, #348]	@ (8003328 <main_function+0x2c0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2200      	movs	r2, #0
 80031d0:	9201      	str	r2, [sp, #4]
 80031d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031d6:	9200      	str	r2, [sp, #0]
 80031d8:	22af      	movs	r2, #175	@ 0xaf
 80031da:	4954      	ldr	r1, [pc, #336]	@ (800332c <main_function+0x2c4>)
 80031dc:	4859      	ldr	r0, [pc, #356]	@ (8003344 <main_function+0x2dc>)
 80031de:	f7fe f920 	bl	8001422 <ILI9341_DrawText>

					drawerInst = getFileInfo(i, j);
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80031ea:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fd68 	bl	8003cc4 <getFileInfo>

					tare = drawerInst.Tare;
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 80031fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003204:	ee17 3a90 	vmov	r3, s15
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 800320a:	2300      	movs	r3, #0
 800320c:	657b      	str	r3, [r7, #84]	@ 0x54
 800320e:	e010      	b.n	8003232 <main_function+0x1ca>

						int weight = weigh(tare, calFactor);
 8003210:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8003214:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003216:	f001 f9d3 	bl	80045c0 <weigh>
 800321a:	6238      	str	r0, [r7, #32]
						sum += weight;
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003220:	4413      	add	r3, r2
 8003222:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8003224:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8003228:	f002 f808 	bl	800523c <HAL_Delay>
					for(int p = 0; p < 4; p++){
 800322c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322e:	3301      	adds	r3, #1
 8003230:	657b      	str	r3, [r7, #84]	@ 0x54
 8003232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003234:	2b03      	cmp	r3, #3
 8003236:	ddeb      	ble.n	8003210 <main_function+0x1a8>
					}

					normalizedWeight = sum / 4;
 8003238:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8003244:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003246:	429a      	cmp	r2, r3
 8003248:	db17      	blt.n	800327a <main_function+0x212>
						//LCD CODE
						row_num = i;
 800324a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800324e:	4a3f      	ldr	r2, [pc, #252]	@ (800334c <main_function+0x2e4>)
 8003250:	6013      	str	r3, [r2, #0]
						drawer_num = j;
 8003252:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003256:	4a3e      	ldr	r2, [pc, #248]	@ (8003350 <main_function+0x2e8>)
 8003258:	6013      	str	r3, [r2, #0]

						thresh = refillDrawer(tare, calFactor);
 800325a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800325e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003260:	f7ff fe14 	bl	8002e8c <refillDrawer>
 8003264:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, j, calFactor, tare, thresh);
 8003266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003268:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 800326c:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8003270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003272:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8003276:	f000 fc51 	bl	8003b1c <updateDrawerConfig>
				for(uint16_t j = 1; j <= 4; j++){
 800327a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800327e:	3301      	adds	r3, #1
 8003280:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8003284:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003288:	2b04      	cmp	r3, #4
 800328a:	f67f af59 	bls.w	8003140 <main_function+0xd8>
 800328e:	e0ed      	b.n	800346c <main_function+0x404>
				}

			}

			else{
				for(int k = 1; k <= 7; k++){
 8003290:	2301      	movs	r3, #1
 8003292:	653b      	str	r3, [r7, #80]	@ 0x50
 8003294:	e0e6      	b.n	8003464 <main_function+0x3fc>

					sum = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[k-1].A;
 800329e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	4926      	ldr	r1, [pc, #152]	@ (800333c <main_function+0x2d4>)
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	3302      	adds	r3, #2
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
					uint16_t B_slave = MuxCombos[k-1].B;
 80032b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032b4:	1e5a      	subs	r2, r3, #1
 80032b6:	4921      	ldr	r1, [pc, #132]	@ (800333c <main_function+0x2d4>)
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	440b      	add	r3, r1
 80032c0:	3301      	adds	r3, #1
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	873b      	strh	r3, [r7, #56]	@ 0x38
					uint16_t C_slave = MuxCombos[k-1].C;
 80032c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032c8:	1e5a      	subs	r2, r3, #1
 80032ca:	491c      	ldr	r1, [pc, #112]	@ (800333c <main_function+0x2d4>)
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	440b      	add	r3, r1
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	86fb      	strh	r3, [r7, #54]	@ 0x36

					muxSET(A_slave, B_slave, C_slave, 0);
 80032d8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80032da:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80032dc:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 80032de:	2300      	movs	r3, #0
 80032e0:	f001 f82e 	bl	8004340 <muxSET>

					printf("Drawer %d\n\r", k);
 80032e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032e6:	4816      	ldr	r0, [pc, #88]	@ (8003340 <main_function+0x2d8>)
 80032e8:	f009 fe26 	bl	800cf38 <iprintf>

					drawerInst = getFileInfo(i, k);
 80032ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	463b      	mov	r3, r7
 80032f2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fce4 	bl	8003cc4 <getFileInfo>
 80032fc:	f107 0410 	add.w	r4, r7, #16
 8003300:	463b      	mov	r3, r7
 8003302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

					tare = drawerInst.Tare;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 8003310:	edd7 7a07 	vldr	s15, [r7, #28]
 8003314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003318:	ee17 3a90 	vmov	r3, s15
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 800331e:	2300      	movs	r3, #0
 8003320:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003322:	e028      	b.n	8003376 <main_function+0x30e>
 8003324:	08010dbc 	.word	0x08010dbc
 8003328:	20000230 	.word	0x20000230
 800332c:	08011598 	.word	0x08011598
 8003330:	08010dc4 	.word	0x08010dc4
 8003334:	08010dcc 	.word	0x08010dcc
 8003338:	20000234 	.word	0x20000234
 800333c:	080126dc 	.word	0x080126dc
 8003340:	08010dd0 	.word	0x08010dd0
 8003344:	20000268 	.word	0x20000268
 8003348:	08010ddc 	.word	0x08010ddc
 800334c:	20000338 	.word	0x20000338
 8003350:	2000033c 	.word	0x2000033c

						int weight = weigh(tare, calFactor);
 8003354:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8003358:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800335a:	f001 f931 	bl	80045c0 <weigh>
 800335e:	62f8      	str	r0, [r7, #44]	@ 0x2c
						sum += weight;
 8003360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003362:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003364:	4413      	add	r3, r2
 8003366:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8003368:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800336c:	f001 ff66 	bl	800523c <HAL_Delay>
					for(int p = 0; p < 4; p++){
 8003370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003372:	3301      	adds	r3, #1
 8003374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003378:	2b03      	cmp	r3, #3
 800337a:	ddeb      	ble.n	8003354 <main_function+0x2ec>
					}

					normalizedWeight = sum / 4;
 800337c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 8003382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003384:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8003388:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800338a:	429a      	cmp	r2, r3
 800338c:	db67      	blt.n	800345e <main_function+0x3f6>
						printf("This drawer is low on components\n\rPlease refill the drawer\n\r");
 800338e:	483f      	ldr	r0, [pc, #252]	@ (800348c <main_function+0x424>)
 8003390:	f009 fdd2 	bl	800cf38 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 8003394:	483e      	ldr	r0, [pc, #248]	@ (8003490 <main_function+0x428>)
 8003396:	f009 fdcf 	bl	800cf38 <iprintf>

						//TFT
						ILI9341_TopScreen(BLACK);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fe fbba 	bl	8001b14 <ILI9341_TopScreen>
						ILI9341_DrawText("This drawer is low on components", FONT4, 0, tft_y, WHITE, BLACK);
 80033a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003494 <main_function+0x42c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2200      	movs	r2, #0
 80033a8:	9201      	str	r2, [sp, #4]
 80033aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033ae:	9200      	str	r2, [sp, #0]
 80033b0:	2200      	movs	r2, #0
 80033b2:	4939      	ldr	r1, [pc, #228]	@ (8003498 <main_function+0x430>)
 80033b4:	4839      	ldr	r0, [pc, #228]	@ (800349c <main_function+0x434>)
 80033b6:	f7fe f834 	bl	8001422 <ILI9341_DrawText>
						tft_y +=20;
 80033ba:	4b36      	ldr	r3, [pc, #216]	@ (8003494 <main_function+0x42c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3314      	adds	r3, #20
 80033c0:	4a34      	ldr	r2, [pc, #208]	@ (8003494 <main_function+0x42c>)
 80033c2:	6013      	str	r3, [r2, #0]
						ILI9341_DrawText("Please refill the drawer", FONT4, 0, tft_y, WHITE, BLACK);
 80033c4:	4b33      	ldr	r3, [pc, #204]	@ (8003494 <main_function+0x42c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2200      	movs	r2, #0
 80033cc:	9201      	str	r2, [sp, #4]
 80033ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033d2:	9200      	str	r2, [sp, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	4930      	ldr	r1, [pc, #192]	@ (8003498 <main_function+0x430>)
 80033d8:	4831      	ldr	r0, [pc, #196]	@ (80034a0 <main_function+0x438>)
 80033da:	f7fe f822 	bl	8001422 <ILI9341_DrawText>
						tft_y +=20;
 80033de:	4b2d      	ldr	r3, [pc, #180]	@ (8003494 <main_function+0x42c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3314      	adds	r3, #20
 80033e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003494 <main_function+0x42c>)
 80033e6:	6013      	str	r3, [r2, #0]
						ILI9341_DrawText("Press the selector button", FONT4, 0, tft_y, WHITE, BLACK);
 80033e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003494 <main_function+0x42c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2200      	movs	r2, #0
 80033f0:	9201      	str	r2, [sp, #4]
 80033f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033f6:	9200      	str	r2, [sp, #0]
 80033f8:	2200      	movs	r2, #0
 80033fa:	4927      	ldr	r1, [pc, #156]	@ (8003498 <main_function+0x430>)
 80033fc:	4829      	ldr	r0, [pc, #164]	@ (80034a4 <main_function+0x43c>)
 80033fe:	f7fe f810 	bl	8001422 <ILI9341_DrawText>
						tft_y +=20;
 8003402:	4b24      	ldr	r3, [pc, #144]	@ (8003494 <main_function+0x42c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	4a22      	ldr	r2, [pc, #136]	@ (8003494 <main_function+0x42c>)
 800340a:	6013      	str	r3, [r2, #0]
						ILI9341_DrawText("ONCE to continue", FONT4, 0, tft_y, WHITE, BLACK);
 800340c:	4b21      	ldr	r3, [pc, #132]	@ (8003494 <main_function+0x42c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	2200      	movs	r2, #0
 8003414:	9201      	str	r2, [sp, #4]
 8003416:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800341a:	9200      	str	r2, [sp, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	491e      	ldr	r1, [pc, #120]	@ (8003498 <main_function+0x430>)
 8003420:	4821      	ldr	r0, [pc, #132]	@ (80034a8 <main_function+0x440>)
 8003422:	f7fd fffe 	bl	8001422 <ILI9341_DrawText>

						button_output(selector_button);
 8003426:	4b21      	ldr	r3, [pc, #132]	@ (80034ac <main_function+0x444>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fec4 	bl	80041b8 <button_output>
						//LCD CODE
						 row_num = i;
 8003430:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003434:	4a1e      	ldr	r2, [pc, #120]	@ (80034b0 <main_function+0x448>)
 8003436:	6013      	str	r3, [r2, #0]
						 drawer_num = k;
 8003438:	4a1e      	ldr	r2, [pc, #120]	@ (80034b4 <main_function+0x44c>)
 800343a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800343c:	6013      	str	r3, [r2, #0]

						thresh = refillDrawer(tare, calFactor);
 800343e:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8003442:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003444:	f7ff fd22 	bl	8002e8c <refillDrawer>
 8003448:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, k, calFactor, tare, thresh);
 800344a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800344c:	b299      	uxth	r1, r3
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8003454:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003456:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800345a:	f000 fb5f 	bl	8003b1c <updateDrawerConfig>
				for(int k = 1; k <= 7; k++){
 800345e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003460:	3301      	adds	r3, #1
 8003462:	653b      	str	r3, [r7, #80]	@ 0x50
 8003464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003466:	2b07      	cmp	r3, #7
 8003468:	f77f af15 	ble.w	8003296 <main_function+0x22e>
	for(uint16_t i = 1; i <= 4; i++){
 800346c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003470:	3301      	adds	r3, #1
 8003472:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8003476:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800347a:	2b04      	cmp	r3, #4
 800347c:	f67f ae00 	bls.w	8003080 <main_function+0x18>

				}
			}
	}

}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3764      	adds	r7, #100	@ 0x64
 8003486:	46bd      	mov	sp, r7
 8003488:	bd90      	pop	{r4, r7, pc}
 800348a:	bf00      	nop
 800348c:	08010de8 	.word	0x08010de8
 8003490:	08010e28 	.word	0x08010e28
 8003494:	20000230 	.word	0x20000230
 8003498:	08011598 	.word	0x08011598
 800349c:	08010e58 	.word	0x08010e58
 80034a0:	08010e7c 	.word	0x08010e7c
 80034a4:	08010e98 	.word	0x08010e98
 80034a8:	08010eb4 	.word	0x08010eb4
 80034ac:	20000004 	.word	0x20000004
 80034b0:	20000338 	.word	0x20000338
 80034b4:	2000033c 	.word	0x2000033c

080034b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	@ 0x28
 80034bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034be:	f107 0314 	add.w	r3, r7, #20
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	60da      	str	r2, [r3, #12]
 80034cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	4b6a      	ldr	r3, [pc, #424]	@ (800367c <MX_GPIO_Init+0x1c4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	4a69      	ldr	r2, [pc, #420]	@ (800367c <MX_GPIO_Init+0x1c4>)
 80034d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034de:	4b67      	ldr	r3, [pc, #412]	@ (800367c <MX_GPIO_Init+0x1c4>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	4b63      	ldr	r3, [pc, #396]	@ (800367c <MX_GPIO_Init+0x1c4>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	4a62      	ldr	r2, [pc, #392]	@ (800367c <MX_GPIO_Init+0x1c4>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fa:	4b60      	ldr	r3, [pc, #384]	@ (800367c <MX_GPIO_Init+0x1c4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	4b5c      	ldr	r3, [pc, #368]	@ (800367c <MX_GPIO_Init+0x1c4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	4a5b      	ldr	r2, [pc, #364]	@ (800367c <MX_GPIO_Init+0x1c4>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6313      	str	r3, [r2, #48]	@ 0x30
 8003516:	4b59      	ldr	r3, [pc, #356]	@ (800367c <MX_GPIO_Init+0x1c4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	4b55      	ldr	r3, [pc, #340]	@ (800367c <MX_GPIO_Init+0x1c4>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	4a54      	ldr	r2, [pc, #336]	@ (800367c <MX_GPIO_Init+0x1c4>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	6313      	str	r3, [r2, #48]	@ 0x30
 8003532:	4b52      	ldr	r3, [pc, #328]	@ (800367c <MX_GPIO_Init+0x1c4>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4b4e      	ldr	r3, [pc, #312]	@ (800367c <MX_GPIO_Init+0x1c4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	4a4d      	ldr	r2, [pc, #308]	@ (800367c <MX_GPIO_Init+0x1c4>)
 8003548:	f043 0308 	orr.w	r3, r3, #8
 800354c:	6313      	str	r3, [r2, #48]	@ 0x30
 800354e:	4b4b      	ldr	r3, [pc, #300]	@ (800367c <MX_GPIO_Init+0x1c4>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SLAVE_C_Pin|SLAVE_B_Pin|REL_2_Pin, GPIO_PIN_RESET);
 800355a:	2200      	movs	r2, #0
 800355c:	2123      	movs	r1, #35	@ 0x23
 800355e:	4848      	ldr	r0, [pc, #288]	@ (8003680 <MX_GPIO_Init+0x1c8>)
 8003560:	f002 fd0a 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAST_A_Pin|MAST_B_Pin|MAST_C_Pin, GPIO_PIN_RESET);
 8003564:	2200      	movs	r2, #0
 8003566:	2113      	movs	r1, #19
 8003568:	4846      	ldr	r0, [pc, #280]	@ (8003684 <MX_GPIO_Init+0x1cc>)
 800356a:	f002 fd05 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 800356e:	2200      	movs	r2, #0
 8003570:	f24c 7161 	movw	r1, #51041	@ 0xc761
 8003574:	4844      	ldr	r0, [pc, #272]	@ (8003688 <MX_GPIO_Init+0x1d0>)
 8003576:	f002 fcff 	bl	8005f78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|REL_1_Pin|REL_4_Pin|REL_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800357a:	2201      	movs	r2, #1
 800357c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003580:	4840      	ldr	r0, [pc, #256]	@ (8003684 <MX_GPIO_Init+0x1cc>)
 8003582:	f002 fcf9 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 8003586:	2200      	movs	r2, #0
 8003588:	2104      	movs	r1, #4
 800358a:	4840      	ldr	r0, [pc, #256]	@ (800368c <MX_GPIO_Init+0x1d4>)
 800358c:	f002 fcf4 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLAVE_C_Pin SLAVE_B_Pin REL_2_Pin */
  GPIO_InitStruct.Pin = SLAVE_C_Pin|SLAVE_B_Pin|REL_2_Pin;
 8003590:	2323      	movs	r3, #35	@ 0x23
 8003592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003594:	2301      	movs	r3, #1
 8003596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359c:	2300      	movs	r3, #0
 800359e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	4836      	ldr	r0, [pc, #216]	@ (8003680 <MX_GPIO_Init+0x1c8>)
 80035a8:	f002 fb3a 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAST_A_Pin MAST_B_Pin MAST_C_Pin */
  GPIO_InitStruct.Pin = MAST_A_Pin|MAST_B_Pin|MAST_C_Pin;
 80035ac:	2313      	movs	r3, #19
 80035ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b0:	2301      	movs	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	4830      	ldr	r0, [pc, #192]	@ (8003684 <MX_GPIO_Init+0x1cc>)
 80035c4:	f002 fb2c 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLAVE_A_Pin SCK_DRW_Pin PB14 PB15
                           PB5 REL_1_Pin REL_4_Pin REL_3_Pin */
  GPIO_InitStruct.Pin = SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 80035c8:	f24c 7361 	movw	r3, #51041	@ 0xc761
 80035cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|REL_1_Pin|REL_4_Pin|REL_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	4829      	ldr	r0, [pc, #164]	@ (8003688 <MX_GPIO_Init+0x1d0>)
 80035e2:	f002 fb1d 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BTN_Pin CONFIRM_BTN_Pin */
  GPIO_InitStruct.Pin = RESET_BTN_Pin|CONFIRM_BTN_Pin;
 80035e6:	2306      	movs	r3, #6
 80035e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80035ea:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80035ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4619      	mov	r1, r3
 80035fa:	4823      	ldr	r0, [pc, #140]	@ (8003688 <MX_GPIO_Init+0x1d0>)
 80035fc:	f002 fb10 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAT_IN_Pin */
  GPIO_InitStruct.Pin = DAT_IN_Pin;
 8003600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAT_IN_GPIO_Port, &GPIO_InitStruct);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	4619      	mov	r1, r3
 8003614:	481b      	ldr	r0, [pc, #108]	@ (8003684 <MX_GPIO_Init+0x1cc>)
 8003616:	f002 fb03 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800361a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800361e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003620:	2301      	movs	r3, #1
 8003622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003624:	2301      	movs	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003628:	2300      	movs	r3, #0
 800362a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4619      	mov	r1, r3
 8003632:	4814      	ldr	r0, [pc, #80]	@ (8003684 <MX_GPIO_Init+0x1cc>)
 8003634:	f002 faf4 	bl	8005c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_CS_Pin */
  GPIO_InitStruct.Pin = EEPROM_CS_Pin;
 8003638:	2304      	movs	r3, #4
 800363a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800363c:	2301      	movs	r3, #1
 800363e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003644:	2300      	movs	r3, #0
 8003646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_GPIO_Port, &GPIO_InitStruct);
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	4619      	mov	r1, r3
 800364e:	480f      	ldr	r0, [pc, #60]	@ (800368c <MX_GPIO_Init+0x1d4>)
 8003650:	f002 fae6 	bl	8005c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003654:	2200      	movs	r2, #0
 8003656:	2100      	movs	r1, #0
 8003658:	2007      	movs	r0, #7
 800365a:	f001 ff28 	bl	80054ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800365e:	2007      	movs	r0, #7
 8003660:	f001 ff41 	bl	80054e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003664:	2200      	movs	r2, #0
 8003666:	2100      	movs	r1, #0
 8003668:	2008      	movs	r0, #8
 800366a:	f001 ff20 	bl	80054ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800366e:	2008      	movs	r0, #8
 8003670:	f001 ff39 	bl	80054e6 <HAL_NVIC_EnableIRQ>

}
 8003674:	bf00      	nop
 8003676:	3728      	adds	r7, #40	@ 0x28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	40020800 	.word	0x40020800
 8003684:	40020000 	.word	0x40020000
 8003688:	40020400 	.word	0x40020400
 800368c:	40020c00 	.word	0x40020c00

08003690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	//disables internal buffering for input stream for scanf
	setvbuf(stdin, NULL, _IONBF, 0);
 8003696:	4b35      	ldr	r3, [pc, #212]	@ (800376c <main+0xdc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6858      	ldr	r0, [r3, #4]
 800369c:	2300      	movs	r3, #0
 800369e:	2202      	movs	r2, #2
 80036a0:	2100      	movs	r1, #0
 80036a2:	f009 fc5b 	bl	800cf5c <setvbuf>

	/* Configure the system clock */
	SystemClock_Config();
 80036a6:	f000 f86d 	bl	8003784 <SystemClock_Config>

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80036aa:	f001 fd55 	bl	8005158 <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80036ae:	f7ff ff03 	bl	80034b8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80036b2:	f001 fcb5 	bl	8005020 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80036b6:	f001 fb59 	bl	8004d6c <MX_TIM2_Init>
	MX_FATFS_Init();
 80036ba:	f005 f939 	bl	8008930 <MX_FATFS_Init>
	MX_SPI1_Init();
 80036be:	f001 f86f 	bl	80047a0 <MX_SPI1_Init>

	printf("Hello from STM32 UART!\n\r");
 80036c2:	482b      	ldr	r0, [pc, #172]	@ (8003770 <main+0xe0>)
 80036c4:	f009 fc38 	bl	800cf38 <iprintf>

	HAL_TIM_Base_Start(&htim2);
 80036c8:	482a      	ldr	r0, [pc, #168]	@ (8003774 <main+0xe4>)
 80036ca:	f003 ffd3 	bl	8007674 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 80036ce:	2201      	movs	r2, #1
 80036d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80036d4:	4828      	ldr	r0, [pc, #160]	@ (8003778 <main+0xe8>)
 80036d6:	f002 fc4f 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80036da:	200a      	movs	r0, #10
 80036dc:	f001 fdae 	bl	800523c <HAL_Delay>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 80036e0:	2200      	movs	r2, #0
 80036e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80036e6:	4824      	ldr	r0, [pc, #144]	@ (8003778 <main+0xe8>)
 80036e8:	f002 fc46 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80036ec:	200a      	movs	r0, #10
 80036ee:	f001 fda5 	bl	800523c <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036f2:	f001 fd31 	bl	8005158 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036f6:	f000 f845 	bl	8003784 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036fa:	f7ff fedd 	bl	80034b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80036fe:	f7fe fb79 	bl	8001df4 <MX_DMA_Init>
  MX_TIM2_Init();
 8003702:	f001 fb33 	bl	8004d6c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003706:	f001 fc8b 	bl	8005020 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800370a:	f005 f911 	bl	8008930 <MX_FATFS_Init>
  MX_SPI1_Init();
 800370e:	f001 f847 	bl	80047a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003712:	f001 f87b 	bl	800480c <MX_SPI2_Init>
  MX_TIM3_Init();
 8003716:	f001 fb75 	bl	8004e04 <MX_TIM3_Init>
  MX_TIM4_Init();
 800371a:	f001 fbcd 	bl	8004eb8 <MX_TIM4_Init>
  MX_SPI3_Init();
 800371e:	f001 f8ab 	bl	8004878 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8003722:	f7fd ffdb 	bl	80016dc <ILI9341_Init>
//  int rectXStart = 80;
//  int rectYStart = 80;

  // Simple Text writing (Text, Font, X, Y, Color, BackColor)
  // Available Fonts are FONT1, FONT2, FONT3 and FONT4
  ILI9341_FillScreen(BLACK);
 8003726:	2000      	movs	r0, #0
 8003728:	f7fe f9ce 	bl	8001ac8 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 800372c:	2003      	movs	r0, #3
 800372e:	f7fe f8df 	bl	80018f0 <ILI9341_SetRotation>
  ILI9341_DrawText("Hello from STM32 UART!", FONT4, 55, 110, WHITE, BLACK);
 8003732:	2300      	movs	r3, #0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	236e      	movs	r3, #110	@ 0x6e
 800373e:	2237      	movs	r2, #55	@ 0x37
 8003740:	490e      	ldr	r1, [pc, #56]	@ (800377c <main+0xec>)
 8003742:	480f      	ldr	r0, [pc, #60]	@ (8003780 <main+0xf0>)
 8003744:	f7fd fe6d 	bl	8001422 <ILI9341_DrawText>
  HAL_Delay(3000);
 8003748:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800374c:	f001 fd76 	bl	800523c <HAL_Delay>
  ILI9341_FillScreen(BLACK);
 8003750:	2000      	movs	r0, #0
 8003752:	f7fe f9b9 	bl	8001ac8 <ILI9341_FillScreen>
  drawer_table();
 8003756:	f7fe fdc7 	bl	80022e8 <drawer_table>
//
//		HAL_Delay(1000);
//
//  }

  Calibrate();
 800375a:	f7fe ffaf 	bl	80026bc <Calibrate>
  main_function();
 800375e:	f7ff fc83 	bl	8003068 <main_function>
 8003762:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000040 	.word	0x20000040
 8003770:	08010ec8 	.word	0x08010ec8
 8003774:	20000f84 	.word	0x20000f84
 8003778:	40020400 	.word	0x40020400
 800377c:	08011598 	.word	0x08011598
 8003780:	08010ee4 	.word	0x08010ee4

08003784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b094      	sub	sp, #80	@ 0x50
 8003788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800378a:	f107 031c 	add.w	r3, r7, #28
 800378e:	2234      	movs	r2, #52	@ 0x34
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f009 fd31 	bl	800d1fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003798:	f107 0308 	add.w	r3, r7, #8
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	2300      	movs	r3, #0
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	4b29      	ldr	r3, [pc, #164]	@ (8003854 <SystemClock_Config+0xd0>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	4a28      	ldr	r2, [pc, #160]	@ (8003854 <SystemClock_Config+0xd0>)
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b8:	4b26      	ldr	r3, [pc, #152]	@ (8003854 <SystemClock_Config+0xd0>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c0:	607b      	str	r3, [r7, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037c4:	2300      	movs	r3, #0
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <SystemClock_Config+0xd4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80037d0:	4a21      	ldr	r2, [pc, #132]	@ (8003858 <SystemClock_Config+0xd4>)
 80037d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003858 <SystemClock_Config+0xd4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80037e0:	603b      	str	r3, [r7, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037e4:	2302      	movs	r3, #2
 80037e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037e8:	2301      	movs	r3, #1
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037ec:	2310      	movs	r3, #16
 80037ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f0:	2302      	movs	r3, #2
 80037f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037f4:	2300      	movs	r3, #0
 80037f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037f8:	2308      	movs	r3, #8
 80037fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80037fc:	2340      	movs	r3, #64	@ 0x40
 80037fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003800:	2302      	movs	r3, #2
 8003802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003804:	2302      	movs	r3, #2
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003808:	2302      	movs	r3, #2
 800380a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800380c:	f107 031c 	add.w	r3, r7, #28
 8003810:	4618      	mov	r0, r3
 8003812:	f002 fea7 	bl	8006564 <HAL_RCC_OscConfig>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800381c:	f000 f81e 	bl	800385c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003820:	230f      	movs	r3, #15
 8003822:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003824:	2302      	movs	r3, #2
 8003826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800382c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003830:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	2102      	movs	r1, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f002 fbcd 	bl	8005fdc <HAL_RCC_ClockConfig>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003848:	f000 f808 	bl	800385c <Error_Handler>
  }
}
 800384c:	bf00      	nop
 800384e:	3750      	adds	r7, #80	@ 0x50
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000

0800385c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003860:	b672      	cpsid	i
}
 8003862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003864:	bf00      	nop
 8003866:	e7fd      	b.n	8003864 <Error_Handler+0x8>

08003868 <SD_init>:

static char buffer[MAX_FILELINE];
BYTE previousLine[MAX_FILELINE];


void  SD_init(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800386e:	2201      	movs	r2, #1
 8003870:	4916      	ldr	r1, [pc, #88]	@ (80038cc <SD_init+0x64>)
 8003872:	4817      	ldr	r0, [pc, #92]	@ (80038d0 <SD_init+0x68>)
 8003874:	f007 fb64 	bl	800af40 <f_mount>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <SD_init+0x6c>)
 800387e:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8003880:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <SD_init+0x6c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <SD_init+0x30>
		printf("f_mount error (%i)\r\n", fres);
 8003888:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <SD_init+0x6c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	4619      	mov	r1, r3
 800388e:	4812      	ldr	r0, [pc, #72]	@ (80038d8 <SD_init+0x70>)
 8003890:	f009 fb52 	bl	800cf38 <iprintf>
		while(1);
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <SD_init+0x2c>
	//Let's get some statistics from the SD card
	DWORD free_clusters;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8003898:	463a      	mov	r2, r7
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	4619      	mov	r1, r3
 800389e:	480b      	ldr	r0, [pc, #44]	@ (80038cc <SD_init+0x64>)
 80038a0:	f008 f8aa 	bl	800b9f8 <f_getfree>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <SD_init+0x6c>)
 80038aa:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80038ac:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <SD_init+0x6c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <SD_init+0x5c>
		printf("f_getfree error (%i)\r\n", fres);
 80038b4:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <SD_init+0x6c>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	4619      	mov	r1, r3
 80038ba:	4808      	ldr	r0, [pc, #32]	@ (80038dc <SD_init+0x74>)
 80038bc:	f009 fb3c 	bl	800cf38 <iprintf>
		while(1);
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <SD_init+0x58>
	}

}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	08010f14 	.word	0x08010f14
 80038d0:	20000340 	.word	0x20000340
 80038d4:	200009d0 	.word	0x200009d0
 80038d8:	08010f18 	.word	0x08010f18
 80038dc:	08010f30 	.word	0x08010f30

080038e0 <saveDrawerConfig>:

void saveDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b08c      	sub	sp, #48	@ 0x30
 80038e4:	af06      	add	r7, sp, #24
 80038e6:	ed87 0a02 	vstr	s0, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	4603      	mov	r3, r0
 80038f0:	81fb      	strh	r3, [r7, #14]
 80038f2:	460b      	mov	r3, r1
 80038f4:	81bb      	strh	r3, [r7, #12]

	UINT bytesWrote;

	//f_unlink((TCHAR*)filename); //deletes the original file

	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND | FA_CREATE_NEW);
 80038f6:	4b33      	ldr	r3, [pc, #204]	@ (80039c4 <saveDrawerConfig+0xe4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2236      	movs	r2, #54	@ 0x36
 80038fc:	4619      	mov	r1, r3
 80038fe:	4832      	ldr	r0, [pc, #200]	@ (80039c8 <saveDrawerConfig+0xe8>)
 8003900:	f007 fb64 	bl	800afcc <f_open>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	4b30      	ldr	r3, [pc, #192]	@ (80039cc <saveDrawerConfig+0xec>)
 800390a:	701a      	strb	r2, [r3, #0]

	if(fres == FR_EXIST){
 800390c:	4b2f      	ldr	r3, [pc, #188]	@ (80039cc <saveDrawerConfig+0xec>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d116      	bne.n	8003942 <saveDrawerConfig+0x62>
				fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND);
 8003914:	4b2b      	ldr	r3, [pc, #172]	@ (80039c4 <saveDrawerConfig+0xe4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2232      	movs	r2, #50	@ 0x32
 800391a:	4619      	mov	r1, r3
 800391c:	482a      	ldr	r0, [pc, #168]	@ (80039c8 <saveDrawerConfig+0xe8>)
 800391e:	f007 fb55 	bl	800afcc <f_open>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	4b29      	ldr	r3, [pc, #164]	@ (80039cc <saveDrawerConfig+0xec>)
 8003928:	701a      	strb	r2, [r3, #0]
				if(fres != FR_OK){
 800392a:	4b28      	ldr	r3, [pc, #160]	@ (80039cc <saveDrawerConfig+0xec>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d017      	beq.n	8003962 <saveDrawerConfig+0x82>
					printf("f_write error (%i) IN saveDrawerConfig\r\n", fres);
 8003932:	4b26      	ldr	r3, [pc, #152]	@ (80039cc <saveDrawerConfig+0xec>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	4825      	ldr	r0, [pc, #148]	@ (80039d0 <saveDrawerConfig+0xf0>)
 800393a:	f009 fafd 	bl	800cf38 <iprintf>
					while(1);
 800393e:	bf00      	nop
 8003940:	e7fd      	b.n	800393e <saveDrawerConfig+0x5e>
				}
	}
	else if(fres == FR_OK){
 8003942:	4b22      	ldr	r3, [pc, #136]	@ (80039cc <saveDrawerConfig+0xec>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <saveDrawerConfig+0x72>
		printf("Created new file");
 800394a:	4822      	ldr	r0, [pc, #136]	@ (80039d4 <saveDrawerConfig+0xf4>)
 800394c:	f009 faf4 	bl	800cf38 <iprintf>
 8003950:	e007      	b.n	8003962 <saveDrawerConfig+0x82>
	}
	else {
		printf("f_open error (%i) IN saveDrawerConfig\r\n", fres);
 8003952:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <saveDrawerConfig+0xec>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	481f      	ldr	r0, [pc, #124]	@ (80039d8 <saveDrawerConfig+0xf8>)
 800395a:	f009 faed 	bl	800cf38 <iprintf>
		while(1);
 800395e:	bf00      	nop
 8003960:	e7fd      	b.n	800395e <saveDrawerConfig+0x7e>
	}

	snprintf((char*)buffer, sizeof(buffer),"Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld\n", row, drawer, calFactor, Tare, thresh);
 8003962:	89fd      	ldrh	r5, [r7, #14]
 8003964:	89bc      	ldrh	r4, [r7, #12]
 8003966:	68b8      	ldr	r0, [r7, #8]
 8003968:	f7fc fe1e 	bl	80005a8 <__aeabi_f2d>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	9105      	str	r1, [sp, #20]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	9104      	str	r1, [sp, #16]
 8003978:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800397c:	9400      	str	r4, [sp, #0]
 800397e:	462b      	mov	r3, r5
 8003980:	4a16      	ldr	r2, [pc, #88]	@ (80039dc <saveDrawerConfig+0xfc>)
 8003982:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003986:	4816      	ldr	r0, [pc, #88]	@ (80039e0 <saveDrawerConfig+0x100>)
 8003988:	f009 fb9c 	bl	800d0c4 <sniprintf>
	fres = f_write(&fil, buffer, strlen(buffer), &bytesWrote);
 800398c:	4814      	ldr	r0, [pc, #80]	@ (80039e0 <saveDrawerConfig+0x100>)
 800398e:	f7fc fc9f 	bl	80002d0 <strlen>
 8003992:	4602      	mov	r2, r0
 8003994:	f107 0314 	add.w	r3, r7, #20
 8003998:	4911      	ldr	r1, [pc, #68]	@ (80039e0 <saveDrawerConfig+0x100>)
 800399a:	480b      	ldr	r0, [pc, #44]	@ (80039c8 <saveDrawerConfig+0xe8>)
 800399c:	f007 fe0f 	bl	800b5be <f_write>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <saveDrawerConfig+0xec>)
 80039a6:	701a      	strb	r2, [r3, #0]
	printf("Wrote %i bytes to %s\r\n", bytesWrote,filename);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4a06      	ldr	r2, [pc, #24]	@ (80039c4 <saveDrawerConfig+0xe4>)
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	4619      	mov	r1, r3
 80039b0:	480c      	ldr	r0, [pc, #48]	@ (80039e4 <saveDrawerConfig+0x104>)
 80039b2:	f009 fac1 	bl	800cf38 <iprintf>


	f_close(&fil);
 80039b6:	4804      	ldr	r0, [pc, #16]	@ (80039c8 <saveDrawerConfig+0xe8>)
 80039b8:	f007 fff4 	bl	800b9a4 <f_close>

}
 80039bc:	bf00      	nop
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bdb0      	pop	{r4, r5, r7, pc}
 80039c4:	20000008 	.word	0x20000008
 80039c8:	20000570 	.word	0x20000570
 80039cc:	200009d0 	.word	0x200009d0
 80039d0:	08010f48 	.word	0x08010f48
 80039d4:	08010f74 	.word	0x08010f74
 80039d8:	08010f88 	.word	0x08010f88
 80039dc:	08010fb0 	.word	0x08010fb0
 80039e0:	200009d4 	.word	0x200009d4
 80039e4:	08010fe4 	.word	0x08010fe4

080039e8 <getData>:

uint32_t getData(char* token){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i <= 1; i++){
 80039f0:	2300      	movs	r3, #0
 80039f2:	81fb      	strh	r3, [r7, #14]
 80039f4:	e01c      	b.n	8003a30 <getData+0x48>
		char* temp_token = strtok(token, ":");
 80039f6:	4912      	ldr	r1, [pc, #72]	@ (8003a40 <getData+0x58>)
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f009 fc07 	bl	800d20c <strtok>
 80039fe:	60b8      	str	r0, [r7, #8]
		if(i == 1){
 8003a00:	89fb      	ldrh	r3, [r7, #14]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d111      	bne.n	8003a2a <getData+0x42>
			printf("Inside of getData, converting token of %s to long of %ld\n\r", temp_token, strtol(temp_token, NULL, 10));
 8003a06:	220a      	movs	r2, #10
 8003a08:	2100      	movs	r1, #0
 8003a0a:	68b8      	ldr	r0, [r7, #8]
 8003a0c:	f008 fb64 	bl	800c0d8 <strtol>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	480b      	ldr	r0, [pc, #44]	@ (8003a44 <getData+0x5c>)
 8003a18:	f009 fa8e 	bl	800cf38 <iprintf>
			return strtol(temp_token, NULL, 10);
 8003a1c:	220a      	movs	r2, #10
 8003a1e:	2100      	movs	r1, #0
 8003a20:	68b8      	ldr	r0, [r7, #8]
 8003a22:	f008 fb59 	bl	800c0d8 <strtol>
 8003a26:	4603      	mov	r3, r0
 8003a28:	e006      	b.n	8003a38 <getData+0x50>
	for(uint16_t i = 0; i <= 1; i++){
 8003a2a:	89fb      	ldrh	r3, [r7, #14]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	81fb      	strh	r3, [r7, #14]
 8003a30:	89fb      	ldrh	r3, [r7, #14]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d9df      	bls.n	80039f6 <getData+0xe>
		}
	}
	return 0;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	08010ffc 	.word	0x08010ffc
 8003a44:	08011000 	.word	0x08011000

08003a48 <getLineMarker>:

uint16_t getLineMarker(uint16_t row, uint16_t drawer){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460a      	mov	r2, r1
 8003a52:	80fb      	strh	r3, [r7, #6]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80bb      	strh	r3, [r7, #4]

	fres = f_open(&fil, filename, FA_READ);
 8003a58:	4b29      	ldr	r3, [pc, #164]	@ (8003b00 <getLineMarker+0xb8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4828      	ldr	r0, [pc, #160]	@ (8003b04 <getLineMarker+0xbc>)
 8003a62:	f007 fab3 	bl	800afcc <f_open>
 8003a66:	4603      	mov	r3, r0
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <getLineMarker+0xc0>)
 8003a6c:	701a      	strb	r2, [r3, #0]
	uint16_t fileIndex = 1;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (fres != FR_OK){
 8003a72:	4b25      	ldr	r3, [pc, #148]	@ (8003b08 <getLineMarker+0xc0>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <getLineMarker+0x42>
		printf("f_open error (%i) IN getLineMarker\r\n", fres);
 8003a7a:	4b23      	ldr	r3, [pc, #140]	@ (8003b08 <getLineMarker+0xc0>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4822      	ldr	r0, [pc, #136]	@ (8003b0c <getLineMarker+0xc4>)
 8003a82:	f009 fa59 	bl	800cf38 <iprintf>
		while(1);
 8003a86:	bf00      	nop
 8003a88:	e7fd      	b.n	8003a86 <getLineMarker+0x3e>
	}
	else{
		TCHAR* rres = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
		do{
			rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8003a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b04 <getLineMarker+0xbc>)
 8003a90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a94:	481e      	ldr	r0, [pc, #120]	@ (8003b10 <getLineMarker+0xc8>)
 8003a96:	f008 fa08 	bl	800beaa <f_gets>
 8003a9a:	6138      	str	r0, [r7, #16]
			//	printf("acquired line from file (%s)\n", rres);

			//char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
			char* token = strtok(rres, ";");
 8003a9c:	491d      	ldr	r1, [pc, #116]	@ (8003b14 <getLineMarker+0xcc>)
 8003a9e:	6938      	ldr	r0, [r7, #16]
 8003aa0:	f009 fbb4 	bl	800d20c <strtok>
 8003aa4:	60f8      	str	r0, [r7, #12]
			//printf("acquired token (%s)\n\r", token);

				for(uint16_t i = 0; i <= 1 ; i++){
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	82bb      	strh	r3, [r7, #20]
 8003aaa:	e00a      	b.n	8003ac2 <getLineMarker+0x7a>
					array[i] = getData(token);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff ff9b 	bl	80039e8 <getData>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	8abb      	ldrh	r3, [r7, #20]
 8003ab6:	b2d1      	uxtb	r1, r2
 8003ab8:	4a17      	ldr	r2, [pc, #92]	@ (8003b18 <getLineMarker+0xd0>)
 8003aba:	54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i <= 1 ; i++){
 8003abc:	8abb      	ldrh	r3, [r7, #20]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	82bb      	strh	r3, [r7, #20]
 8003ac2:	8abb      	ldrh	r3, [r7, #20]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d9f1      	bls.n	8003aac <getLineMarker+0x64>
					//printf("Array index: %d | with a value of %d\n\r", i, array[i]);
				}

			if(row == array[0] && drawer == array[1]){
 8003ac8:	4b13      	ldr	r3, [pc, #76]	@ (8003b18 <getLineMarker+0xd0>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d107      	bne.n	8003ae4 <getLineMarker+0x9c>
 8003ad4:	4b10      	ldr	r3, [pc, #64]	@ (8003b18 <getLineMarker+0xd0>)
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	88bb      	ldrh	r3, [r7, #4]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <getLineMarker+0x9c>
				//printf("Acquired Index: %d\n\r", fileIndex);
				return fileIndex;
 8003ae0:	8afb      	ldrh	r3, [r7, #22]
 8003ae2:	e009      	b.n	8003af8 <getLineMarker+0xb0>

			}
			else{
				fileIndex++;
 8003ae4:	8afb      	ldrh	r3, [r7, #22]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	82fb      	strh	r3, [r7, #22]
				//printf("File Index increased: %d\n\r", fileIndex);

			}
		}while(rres != 0);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ce      	bne.n	8003a8e <getLineMarker+0x46>
	}
	f_close(&fil);
 8003af0:	4804      	ldr	r0, [pc, #16]	@ (8003b04 <getLineMarker+0xbc>)
 8003af2:	f007 ff57 	bl	800b9a4 <f_close>
	return 0;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20000008 	.word	0x20000008
 8003b04:	20000570 	.word	0x20000570
 8003b08:	200009d0 	.word	0x200009d0
 8003b0c:	0801103c 	.word	0x0801103c
 8003b10:	200009d4 	.word	0x200009d4
 8003b14:	08011064 	.word	0x08011064
 8003b18:	20000dd4 	.word	0x20000dd4

08003b1c <updateDrawerConfig>:

void updateDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){ //will need to add ID marker and compare if they are the same, if not then change both locations
 8003b1c:	b5b0      	push	{r4, r5, r7, lr}
 8003b1e:	b08e      	sub	sp, #56	@ 0x38
 8003b20:	af06      	add	r7, sp, #24
 8003b22:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	81fb      	strh	r3, [r7, #14]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	81bb      	strh	r3, [r7, #12]

	fres = f_open(&fil, filename, FA_READ);
 8003b32:	4b58      	ldr	r3, [pc, #352]	@ (8003c94 <updateDrawerConfig+0x178>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4857      	ldr	r0, [pc, #348]	@ (8003c98 <updateDrawerConfig+0x17c>)
 8003b3c:	f007 fa46 	bl	800afcc <f_open>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b55      	ldr	r3, [pc, #340]	@ (8003c9c <updateDrawerConfig+0x180>)
 8003b46:	701a      	strb	r2, [r3, #0]
	fres_temp = f_open(&fil_temp, temp_filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8003b48:	4b55      	ldr	r3, [pc, #340]	@ (8003ca0 <updateDrawerConfig+0x184>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	221a      	movs	r2, #26
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4854      	ldr	r0, [pc, #336]	@ (8003ca4 <updateDrawerConfig+0x188>)
 8003b52:	f007 fa3b 	bl	800afcc <f_open>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b53      	ldr	r3, [pc, #332]	@ (8003ca8 <updateDrawerConfig+0x18c>)
 8003b5c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8003b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8003c9c <updateDrawerConfig+0x180>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <updateDrawerConfig+0x5a>
		printf("f_open error (%i) IN updateDrawerConfig FOR filename\r\n", fres);
 8003b66:	4b4d      	ldr	r3, [pc, #308]	@ (8003c9c <updateDrawerConfig+0x180>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	484f      	ldr	r0, [pc, #316]	@ (8003cac <updateDrawerConfig+0x190>)
 8003b6e:	f009 f9e3 	bl	800cf38 <iprintf>
		while(1);
 8003b72:	bf00      	nop
 8003b74:	e7fd      	b.n	8003b72 <updateDrawerConfig+0x56>
	}
	if (fres_temp != FR_OK){
 8003b76:	4b4c      	ldr	r3, [pc, #304]	@ (8003ca8 <updateDrawerConfig+0x18c>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <updateDrawerConfig+0x72>
		printf("f_open error (%i) IN updateDrawerConfig FOR temp_filename\r\n", fres_temp);
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca8 <updateDrawerConfig+0x18c>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	484a      	ldr	r0, [pc, #296]	@ (8003cb0 <updateDrawerConfig+0x194>)
 8003b86:	f009 f9d7 	bl	800cf38 <iprintf>
		while(1);
 8003b8a:	bf00      	nop
 8003b8c:	e7fd      	b.n	8003b8a <updateDrawerConfig+0x6e>
	}

	UINT bytesWrote;

	bool keep_reading = true;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	77fb      	strb	r3, [r7, #31]
	uint16_t lineMarker = getLineMarker(row, drawer);
 8003b92:	89ba      	ldrh	r2, [r7, #12]
 8003b94:	89fb      	ldrh	r3, [r7, #14]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff55 	bl	8003a48 <getLineMarker>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	837b      	strh	r3, [r7, #26]
	uint16_t currentLine = 1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	83bb      	strh	r3, [r7, #28]
	do{

		TCHAR* rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8003ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8003c98 <updateDrawerConfig+0x17c>)
 8003ba8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bac:	4841      	ldr	r0, [pc, #260]	@ (8003cb4 <updateDrawerConfig+0x198>)
 8003bae:	f008 f97c 	bl	800beaa <f_gets>
 8003bb2:	6178      	str	r0, [r7, #20]

		if(rres == 0) keep_reading = false;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <updateDrawerConfig+0xa4>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	77fb      	strb	r3, [r7, #31]
 8003bbe:	e04c      	b.n	8003c5a <updateDrawerConfig+0x13e>
		else if(currentLine == lineMarker){ //ID matching would go here, check if IDs match, if not then save previous line, update line, then search for original location of ID and replace that line
 8003bc0:	8bba      	ldrh	r2, [r7, #28]
 8003bc2:	8b7b      	ldrh	r3, [r7, #26]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d12e      	bne.n	8003c26 <updateDrawerConfig+0x10a>
			snprintf((char*)buffer, MAX_FILELINE, "Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld", row, drawer, calFactor, Tare, thresh);
 8003bc8:	89fd      	ldrh	r5, [r7, #14]
 8003bca:	89bc      	ldrh	r4, [r7, #12]
 8003bcc:	68b8      	ldr	r0, [r7, #8]
 8003bce:	f7fc fceb 	bl	80005a8 <__aeabi_f2d>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	9105      	str	r1, [sp, #20]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	9104      	str	r1, [sp, #16]
 8003bde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003be2:	9400      	str	r4, [sp, #0]
 8003be4:	462b      	mov	r3, r5
 8003be6:	4a34      	ldr	r2, [pc, #208]	@ (8003cb8 <updateDrawerConfig+0x19c>)
 8003be8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003bec:	4831      	ldr	r0, [pc, #196]	@ (8003cb4 <updateDrawerConfig+0x198>)
 8003bee:	f009 fa69 	bl	800d0c4 <sniprintf>
			//fputs(buffer, temp);

			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8003bf2:	4830      	ldr	r0, [pc, #192]	@ (8003cb4 <updateDrawerConfig+0x198>)
 8003bf4:	f7fc fb6c 	bl	80002d0 <strlen>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	f107 0310 	add.w	r3, r7, #16
 8003bfe:	492d      	ldr	r1, [pc, #180]	@ (8003cb4 <updateDrawerConfig+0x198>)
 8003c00:	4828      	ldr	r0, [pc, #160]	@ (8003ca4 <updateDrawerConfig+0x188>)
 8003c02:	f007 fcdc 	bl	800b5be <f_write>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b24      	ldr	r3, [pc, #144]	@ (8003c9c <updateDrawerConfig+0x180>)
 8003c0c:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8003c0e:	4b23      	ldr	r3, [pc, #140]	@ (8003c9c <updateDrawerConfig+0x180>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d021      	beq.n	8003c5a <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(1)\r\n", fres);
 8003c16:	4b21      	ldr	r3, [pc, #132]	@ (8003c9c <updateDrawerConfig+0x180>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4827      	ldr	r0, [pc, #156]	@ (8003cbc <updateDrawerConfig+0x1a0>)
 8003c1e:	f009 f98b 	bl	800cf38 <iprintf>
				while(1);
 8003c22:	bf00      	nop
 8003c24:	e7fd      	b.n	8003c22 <updateDrawerConfig+0x106>
			}

		}
		else {
			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8003c26:	4823      	ldr	r0, [pc, #140]	@ (8003cb4 <updateDrawerConfig+0x198>)
 8003c28:	f7fc fb52 	bl	80002d0 <strlen>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	f107 0310 	add.w	r3, r7, #16
 8003c32:	4920      	ldr	r1, [pc, #128]	@ (8003cb4 <updateDrawerConfig+0x198>)
 8003c34:	481b      	ldr	r0, [pc, #108]	@ (8003ca4 <updateDrawerConfig+0x188>)
 8003c36:	f007 fcc2 	bl	800b5be <f_write>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b17      	ldr	r3, [pc, #92]	@ (8003c9c <updateDrawerConfig+0x180>)
 8003c40:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8003c42:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <updateDrawerConfig+0x180>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(2)\r\n", fres);
 8003c4a:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <updateDrawerConfig+0x180>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	481b      	ldr	r0, [pc, #108]	@ (8003cc0 <updateDrawerConfig+0x1a4>)
 8003c52:	f009 f971 	bl	800cf38 <iprintf>
				while(1);
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <updateDrawerConfig+0x13a>
			}
		}


		currentLine++;
 8003c5a:	8bbb      	ldrh	r3, [r7, #28]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	83bb      	strh	r3, [r7, #28]

	}while(keep_reading);
 8003c60:	7ffb      	ldrb	r3, [r7, #31]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d19f      	bne.n	8003ba6 <updateDrawerConfig+0x8a>

	f_close(&fil);
 8003c66:	480c      	ldr	r0, [pc, #48]	@ (8003c98 <updateDrawerConfig+0x17c>)
 8003c68:	f007 fe9c 	bl	800b9a4 <f_close>
	f_close(&fil_temp);
 8003c6c:	480d      	ldr	r0, [pc, #52]	@ (8003ca4 <updateDrawerConfig+0x188>)
 8003c6e:	f007 fe99 	bl	800b9a4 <f_close>

	f_unlink((TCHAR*)filename); //deletes the original file
 8003c72:	4b08      	ldr	r3, [pc, #32]	@ (8003c94 <updateDrawerConfig+0x178>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f007 ff73 	bl	800bb62 <f_unlink>
	f_rename((TCHAR*)temp_filename, (TCHAR*)filename); //rename the temp file to be the new "orginal" file
 8003c7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <updateDrawerConfig+0x184>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a04      	ldr	r2, [pc, #16]	@ (8003c94 <updateDrawerConfig+0x178>)
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f008 f816 	bl	800bcb8 <f_rename>


}
 8003c8c:	bf00      	nop
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bdb0      	pop	{r4, r5, r7, pc}
 8003c94:	20000008 	.word	0x20000008
 8003c98:	20000570 	.word	0x20000570
 8003c9c:	200009d0 	.word	0x200009d0
 8003ca0:	2000000c 	.word	0x2000000c
 8003ca4:	200007a0 	.word	0x200007a0
 8003ca8:	200009d1 	.word	0x200009d1
 8003cac:	08011068 	.word	0x08011068
 8003cb0:	080110a0 	.word	0x080110a0
 8003cb4:	200009d4 	.word	0x200009d4
 8003cb8:	080110dc 	.word	0x080110dc
 8003cbc:	08011110 	.word	0x08011110
 8003cc0:	08011140 	.word	0x08011140

08003cc4 <getFileInfo>:


struct drawerInfo getFileInfo(uint16_t row, uint16_t drawer){ //add ID parameter here later
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b08d      	sub	sp, #52	@ 0x34
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	803b      	strh	r3, [r7, #0]

	struct drawerInfo drawerInst = { 0 };
 8003cd4:	f107 030c 	add.w	r3, r7, #12
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
	static unsigned int array[5];

	uint16_t lineMarker = getLineMarker(row, drawer);
 8003ce2:	883a      	ldrh	r2, [r7, #0]
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fead 	bl	8003a48 <getLineMarker>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t fileIndex = 1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	fres = f_open(&fil, filename, FA_READ);
 8003cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8003df4 <getFileInfo+0x130>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	483e      	ldr	r0, [pc, #248]	@ (8003df8 <getFileInfo+0x134>)
 8003d00:	f007 f964 	bl	800afcc <f_open>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	4b3c      	ldr	r3, [pc, #240]	@ (8003dfc <getFileInfo+0x138>)
 8003d0a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003dfc <getFileInfo+0x138>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <getFileInfo+0x60>
			printf("f_open error (%i) IN getFileInfo\r\n", fres);
 8003d14:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <getFileInfo+0x138>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4839      	ldr	r0, [pc, #228]	@ (8003e00 <getFileInfo+0x13c>)
 8003d1c:	f009 f90c 	bl	800cf38 <iprintf>
			while(1);
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <getFileInfo+0x5c>
		}
	else {
		TCHAR* rres = 1;
 8003d24:	2301      	movs	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]

		printf("No error opening file");
 8003d28:	4836      	ldr	r0, [pc, #216]	@ (8003e04 <getFileInfo+0x140>)
 8003d2a:	f009 f905 	bl	800cf38 <iprintf>
		do {

				rres = f_gets((TCHAR*) buffer, MAX_FILELINE, &fil);
 8003d2e:	4a32      	ldr	r2, [pc, #200]	@ (8003df8 <getFileInfo+0x134>)
 8003d30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d34:	4834      	ldr	r0, [pc, #208]	@ (8003e08 <getFileInfo+0x144>)
 8003d36:	f008 f8b8 	bl	800beaa <f_gets>
 8003d3a:	61f8      	str	r0, [r7, #28]

				//printf("Acquired line from file (%s)", rres);

				if (fileIndex == lineMarker) {
 8003d3c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003d3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d140      	bne.n	8003dc6 <getFileInfo+0x102>

					//printf("found correct file line marker");
					char* token = strtok(buffer, ";");
 8003d44:	4931      	ldr	r1, [pc, #196]	@ (8003e0c <getFileInfo+0x148>)
 8003d46:	4830      	ldr	r0, [pc, #192]	@ (8003e08 <getFileInfo+0x144>)
 8003d48:	f009 fa60 	bl	800d20c <strtok>
 8003d4c:	62b8      	str	r0, [r7, #40]	@ 0x28
					unsigned int index = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24

					while (token != NULL) {
 8003d52:	e00f      	b.n	8003d74 <getFileInfo+0xb0>

							array[index] = getData(token);
 8003d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d56:	f7ff fe47 	bl	80039e8 <getData>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	492c      	ldr	r1, [pc, #176]	@ (8003e10 <getFileInfo+0x14c>)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							token = strtok(NULL, ";");
 8003d64:	4929      	ldr	r1, [pc, #164]	@ (8003e0c <getFileInfo+0x148>)
 8003d66:	2000      	movs	r0, #0
 8003d68:	f009 fa50 	bl	800d20c <strtok>
 8003d6c:	62b8      	str	r0, [r7, #40]	@ 0x28
							index++;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	3301      	adds	r3, #1
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
					while (token != NULL) {
 8003d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1ec      	bne.n	8003d54 <getFileInfo+0x90>
					}
					f_close(&fil);
 8003d7a:	481f      	ldr	r0, [pc, #124]	@ (8003df8 <getFileInfo+0x134>)
 8003d7c:	f007 fe12 	bl	800b9a4 <f_close>

					drawerInst.row = array[0];
 8003d80:	4b23      	ldr	r3, [pc, #140]	@ (8003e10 <getFileInfo+0x14c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	81bb      	strh	r3, [r7, #12]
					drawerInst.drawer = array[1];
 8003d88:	4b21      	ldr	r3, [pc, #132]	@ (8003e10 <getFileInfo+0x14c>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	81fb      	strh	r3, [r7, #14]
					drawerInst.calFactor = array[2];
 8003d90:	4b1f      	ldr	r3, [pc, #124]	@ (8003e10 <getFileInfo+0x14c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	ee07 3a90 	vmov	s15, r3
 8003d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9c:	edc7 7a04 	vstr	s15, [r7, #16]
					drawerInst.Tare = array[3];
 8003da0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <getFileInfo+0x14c>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	617b      	str	r3, [r7, #20]
					drawerInst.thresh = array[4];
 8003da6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <getFileInfo+0x14c>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	edc7 7a06 	vstr	s15, [r7, #24]

					return drawerInst;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	461c      	mov	r4, r3
 8003dba:	f107 030c 	add.w	r3, r7, #12
 8003dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003dc4:	e012      	b.n	8003dec <getFileInfo+0x128>
				}
				fileIndex++;
 8003dc6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003dc8:	3301      	adds	r3, #1
 8003dca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		}while(rres != 0);
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ad      	bne.n	8003d2e <getFileInfo+0x6a>
	}

	f_close(&fil);
 8003dd2:	4809      	ldr	r0, [pc, #36]	@ (8003df8 <getFileInfo+0x134>)
 8003dd4:	f007 fde6 	bl	800b9a4 <f_close>
	printf("An error occurred during info extraction.");
 8003dd8:	480e      	ldr	r0, [pc, #56]	@ (8003e14 <getFileInfo+0x150>)
 8003dda:	f009 f8ad 	bl	800cf38 <iprintf>
	return drawerInst;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	461c      	mov	r4, r3
 8003de2:	f107 030c 	add.w	r3, r7, #12
 8003de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	3734      	adds	r7, #52	@ 0x34
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd90      	pop	{r4, r7, pc}
 8003df4:	20000008 	.word	0x20000008
 8003df8:	20000570 	.word	0x20000570
 8003dfc:	200009d0 	.word	0x200009d0
 8003e00:	08011170 	.word	0x08011170
 8003e04:	08011194 	.word	0x08011194
 8003e08:	200009d4 	.word	0x200009d4
 8003e0c:	08011064 	.word	0x08011064
 8003e10:	20000dd8 	.word	0x20000dd8
 8003e14:	080111ac 	.word	0x080111ac

08003e18 <_write>:
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

//extern int tft_y;
//Code to enable printf statements
int _write(int file, char *data, int len) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	4804      	ldr	r0, [pc, #16]	@ (8003e40 <_write+0x28>)
 8003e30:	f004 f92c 	bl	800808c <HAL_UART_Transmit>
    return len;
 8003e34:	687b      	ldr	r3, [r7, #4]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000105c 	.word	0x2000105c

08003e44 <__io_getchar>:

//Code to enable scanf statements
GETCHAR_PROTOTYPE
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4b0e      	ldr	r3, [pc, #56]	@ (8003e8c <__io_getchar+0x48>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <__io_getchar+0x48>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003e64:	1df9      	adds	r1, r7, #7
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4807      	ldr	r0, [pc, #28]	@ (8003e8c <__io_getchar+0x48>)
 8003e6e:	f004 f998 	bl	80081a2 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003e72:	1df9      	adds	r1, r7, #7
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	2201      	movs	r2, #1
 8003e7a:	4804      	ldr	r0, [pc, #16]	@ (8003e8c <__io_getchar+0x48>)
 8003e7c:	f004 f906 	bl	800808c <HAL_UART_Transmit>
  return ch;
 8003e80:	79fb      	ldrb	r3, [r7, #7]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	2000105c 	.word	0x2000105c

08003e90 <HAL_GPIO_EXTI_Callback>:
#define NVIC_RESET_KEY 0x5FA0000

// TFT
extern int tft_y;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	80fb      	strh	r3, [r7, #6]

    //uint32_t current_time = HAL_GetTick();
	// D7
	/**/if (GPIO_Pin == RESET_BTN_Pin) {
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d10d      	bne.n	8003ebc <HAL_GPIO_EXTI_Callback+0x2c>
		//printf("Reset button Pressed");
		num_button = 1;
 8003ea0:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <HAL_GPIO_EXTI_Callback+0x54>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

	    HAL_NVIC_DisableIRQ(EXTI1_IRQn); // assuming EXTI1 used for RESET
 8003ea6:	2007      	movs	r0, #7
 8003ea8:	f001 fb2b 	bl	8005502 <HAL_NVIC_DisableIRQ>
	    __HAL_TIM_SET_COUNTER(&htim4, 0);
 8003eac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <HAL_GPIO_EXTI_Callback+0x58>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24
	    HAL_TIM_Base_Start_IT(&htim4);
 8003eb4:	480c      	ldr	r0, [pc, #48]	@ (8003ee8 <HAL_GPIO_EXTI_Callback+0x58>)
 8003eb6:	f003 fc45 	bl	8007744 <HAL_TIM_Base_Start_IT>
	        __HAL_TIM_SET_COUNTER(&htim4, 0);
	        HAL_TIM_Base_Start_IT(&htim4);
		}


}
 8003eba:	e00f      	b.n	8003edc <HAL_GPIO_EXTI_Callback+0x4c>
		else if (GPIO_Pin == CONFIRM_BTN_Pin){
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d10c      	bne.n	8003edc <HAL_GPIO_EXTI_Callback+0x4c>
			num_button = 2;
 8003ec2:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <HAL_GPIO_EXTI_Callback+0x54>)
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	601a      	str	r2, [r3, #0]
	        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // Disable EXTI
 8003ec8:	2006      	movs	r0, #6
 8003eca:	f001 fb1a 	bl	8005502 <HAL_NVIC_DisableIRQ>
	        __HAL_TIM_SET_COUNTER(&htim4, 0);
 8003ece:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <HAL_GPIO_EXTI_Callback+0x58>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24
	        HAL_TIM_Base_Start_IT(&htim4);
 8003ed6:	4804      	ldr	r0, [pc, #16]	@ (8003ee8 <HAL_GPIO_EXTI_Callback+0x58>)
 8003ed8:	f003 fc34 	bl	8007744 <HAL_TIM_Base_Start_IT>
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000e10 	.word	0x20000e10
 8003ee8:	20001014 	.word	0x20001014

08003eec <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	6078      	str	r0, [r7, #4]
	// executes once the time runs out

	//Confirm Button Code
	if(htim -> Instance == TIM4 && num_button == 2){
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a96      	ldr	r2, [pc, #600]	@ (8004154 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d158      	bne.n	8003fb0 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8003efe:	4b96      	ldr	r3, [pc, #600]	@ (8004158 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d154      	bne.n	8003fb0 <HAL_TIM_PeriodElapsedCallback+0xc4>
		HAL_TIM_Base_Stop_IT(&htim4);
 8003f06:	4895      	ldr	r0, [pc, #596]	@ (800415c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003f08:	f003 fc8c 	bl	8007824 <HAL_TIM_Base_Stop_IT>

		 uint8_t current_button_state = HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	4894      	ldr	r0, [pc, #592]	@ (8004160 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003f10:	f002 f81a 	bl	8005f48 <HAL_GPIO_ReadPin>
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]

			if(current_button_state == GPIO_PIN_SET && current_button_state != previous_button_state){
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d11c      	bne.n	8003f58 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8003f1e:	4b91      	ldr	r3, [pc, #580]	@ (8004164 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	7bfa      	ldrb	r2, [r7, #15]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d016      	beq.n	8003f58 <HAL_TIM_PeriodElapsedCallback+0x6c>
				time_start = HAL_GetTick();
 8003f2a:	f001 f97b 	bl	8005224 <HAL_GetTick>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4a8d      	ldr	r2, [pc, #564]	@ (8004168 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f32:	6013      	str	r3, [r2, #0]
				if (!timer_active){
 8003f34:	4b8d      	ldr	r3, [pc, #564]	@ (800416c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_TIM_PeriodElapsedCallback+0x64>
					 HAL_TIM_Base_Start_IT(&htim3);
 8003f3c:	488c      	ldr	r0, [pc, #560]	@ (8004170 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003f3e:	f003 fc01 	bl	8007744 <HAL_TIM_Base_Start_IT>
					 timer_active = 1;
 8003f42:	4b8a      	ldr	r3, [pc, #552]	@ (800416c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
					button_press = PRESS_DETECTED;
 8003f48:	4b8a      	ldr	r3, [pc, #552]	@ (8004174 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
				if (!timer_active){
 8003f4e:	e025      	b.n	8003f9c <HAL_TIM_PeriodElapsedCallback+0xb0>
					//printf("%d\n\r", count);
					//printf("Detected\n\r");
				}
				else {
					button_press = WAIT_RELEASE;
 8003f50:	4b88      	ldr	r3, [pc, #544]	@ (8004174 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003f52:	2202      	movs	r2, #2
 8003f54:	701a      	strb	r2, [r3, #0]
				if (!timer_active){
 8003f56:	e021      	b.n	8003f9c <HAL_TIM_PeriodElapsedCallback+0xb0>
					//printf("W R\n\r");
				}
			}

			else if (current_button_state == GPIO_PIN_RESET && current_button_state != previous_button_state){
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d11e      	bne.n	8003f9c <HAL_TIM_PeriodElapsedCallback+0xb0>
 8003f5e:	4b81      	ldr	r3, [pc, #516]	@ (8004164 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d018      	beq.n	8003f9c <HAL_TIM_PeriodElapsedCallback+0xb0>
				released_time = HAL_GetTick() - time_start;
 8003f6a:	f001 f95b 	bl	8005224 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b7d      	ldr	r3, [pc, #500]	@ (8004168 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	4a80      	ldr	r2, [pc, #512]	@ (8004178 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003f78:	6013      	str	r3, [r2, #0]

				if (released_time >= 900){
 8003f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004178 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8003f82:	d303      	bcc.n	8003f8c <HAL_TIM_PeriodElapsedCallback+0xa0>
					LP_flag = 1;
 8003f84:	4b7d      	ldr	r3, [pc, #500]	@ (800417c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e007      	b.n	8003f9c <HAL_TIM_PeriodElapsedCallback+0xb0>
					//printf("LP\n\r");

				}
				else {
					count++;
 8003f8c:	4b7c      	ldr	r3, [pc, #496]	@ (8004180 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	4a7b      	ldr	r2, [pc, #492]	@ (8004180 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003f94:	6013      	str	r3, [r2, #0]
					//printf("%d\n\r", count);
					button_press = PRESS_DETECTED;
 8003f96:	4b77      	ldr	r3, [pc, #476]	@ (8004174 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
					//printf("P D \n\r");
				}

			}

			previous_button_state = current_button_state;
 8003f9c:	4a71      	ldr	r2, [pc, #452]	@ (8004164 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	7013      	strb	r3, [r2, #0]
			__HAL_GPIO_EXTI_CLEAR_IT(CONFIRM_BTN_Pin);
 8003fa2:	4b78      	ldr	r3, [pc, #480]	@ (8004184 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	615a      	str	r2, [r3, #20]
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003fa8:	2006      	movs	r0, #6
 8003faa:	f001 fa9c 	bl	80054e6 <HAL_NVIC_EnableIRQ>
	if(htim -> Instance == TIM4 && num_button == 2){
 8003fae:	e062      	b.n	8004076 <HAL_TIM_PeriodElapsedCallback+0x18a>

}

	//Reset Button Code
	else if (htim -> Instance == TIM4 && num_button == 1){
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a67      	ldr	r2, [pc, #412]	@ (8004154 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d15d      	bne.n	8004076 <HAL_TIM_PeriodElapsedCallback+0x18a>
 8003fba:	4b67      	ldr	r3, [pc, #412]	@ (8004158 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d159      	bne.n	8004076 <HAL_TIM_PeriodElapsedCallback+0x18a>
		HAL_TIM_Base_Stop_IT(&htim4);
 8003fc2:	4866      	ldr	r0, [pc, #408]	@ (800415c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003fc4:	f003 fc2e 	bl	8007824 <HAL_TIM_Base_Stop_IT>

		    uint8_t current_state = HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin);
 8003fc8:	2102      	movs	r1, #2
 8003fca:	4865      	ldr	r0, [pc, #404]	@ (8004160 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003fcc:	f001 ffbc 	bl	8005f48 <HAL_GPIO_ReadPin>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	73bb      	strb	r3, [r7, #14]

		    if (current_state == GPIO_PIN_SET) {
 8003fd4:	7bbb      	ldrb	r3, [r7, #14]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d147      	bne.n	800406a <HAL_TIM_PeriodElapsedCallback+0x17e>
		        uint32_t now = HAL_GetTick();
 8003fda:	f001 f923 	bl	8005224 <HAL_GetTick>
 8003fde:	60b8      	str	r0, [r7, #8]

		        if (!reset_confirm_window_active) {
 8003fe0:	4b69      	ldr	r3, [pc, #420]	@ (8004188 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f083 0301 	eor.w	r3, r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d022      	beq.n	8004036 <HAL_TIM_PeriodElapsedCallback+0x14a>
		            // First press -> open confirmation window
		            reset_confirm_window_active = true;
 8003ff0:	4b65      	ldr	r3, [pc, #404]	@ (8004188 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	701a      	strb	r2, [r3, #0]
		            reset_button_time_start = now;
 8003ff6:	4a65      	ldr	r2, [pc, #404]	@ (800418c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6013      	str	r3, [r2, #0]

		            printf("\n\rReset requested. Press again within 3 seconds to confirm.\n\r");
 8003ffc:	4864      	ldr	r0, [pc, #400]	@ (8004190 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003ffe:	f008 ff9b 	bl	800cf38 <iprintf>

		            //TFT
		            ILI9341_DrawText("Reset requested. Press again within 3 seconds to confirm.", FONT4, 0, tft_y, WHITE, BLACK);
 8004002:	4b64      	ldr	r3, [pc, #400]	@ (8004194 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	2200      	movs	r2, #0
 800400a:	9201      	str	r2, [sp, #4]
 800400c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004010:	9200      	str	r2, [sp, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	4960      	ldr	r1, [pc, #384]	@ (8004198 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004016:	4861      	ldr	r0, [pc, #388]	@ (800419c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004018:	f7fd fa03 	bl	8001422 <ILI9341_DrawText>
		            tft_y+=20;
 800401c:	4b5d      	ldr	r3, [pc, #372]	@ (8004194 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	4a5c      	ldr	r2, [pc, #368]	@ (8004194 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004024:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(&htim3, 0);
 8004026:	4b52      	ldr	r3, [pc, #328]	@ (8004170 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2200      	movs	r2, #0
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24
		            HAL_TIM_Base_Start_IT(&htim3); // Start 3s countdown
 800402e:	4850      	ldr	r0, [pc, #320]	@ (8004170 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004030:	f003 fb88 	bl	8007744 <HAL_TIM_Base_Start_IT>
 8004034:	e019      	b.n	800406a <HAL_TIM_PeriodElapsedCallback+0x17e>
		        }

		        else {
		            // Second press within window -> reset
		            if ((now - reset_button_time_start) <= 3000) {
 8004036:	4b55      	ldr	r3, [pc, #340]	@ (800418c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004042:	4293      	cmp	r3, r2
 8004044:	d811      	bhi.n	800406a <HAL_TIM_PeriodElapsedCallback+0x17e>
		                printf("\n\rReset confirmed. Performing system reset...\n\r");
 8004046:	4856      	ldr	r0, [pc, #344]	@ (80041a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004048:	f008 ff76 	bl	800cf38 <iprintf>
		                //TFT
		                ILI9341_DrawText("Reset confirmed. Performing system reset...", FONT4, 0, tft_y, WHITE, BLACK);
 800404c:	4b51      	ldr	r3, [pc, #324]	@ (8004194 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	b29b      	uxth	r3, r3
 8004052:	2200      	movs	r2, #0
 8004054:	9201      	str	r2, [sp, #4]
 8004056:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800405a:	9200      	str	r2, [sp, #0]
 800405c:	2200      	movs	r2, #0
 800405e:	494e      	ldr	r1, [pc, #312]	@ (8004198 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004060:	4850      	ldr	r0, [pc, #320]	@ (80041a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004062:	f7fd f9de 	bl	8001422 <ILI9341_DrawText>
		                HAL_NVIC_SystemReset();
 8004066:	f001 fa5a 	bl	800551e <HAL_NVIC_SystemReset>

		            }
		        }
		    }

		    __HAL_GPIO_EXTI_CLEAR_IT(RESET_BTN_Pin);
 800406a:	4b46      	ldr	r3, [pc, #280]	@ (8004184 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800406c:	2202      	movs	r2, #2
 800406e:	615a      	str	r2, [r3, #20]
		    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004070:	2007      	movs	r0, #7
 8004072:	f001 fa38 	bl	80054e6 <HAL_NVIC_EnableIRQ>
	}

	if (htim->Instance == TIM3 && num_button == 2){
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a4b      	ldr	r2, [pc, #300]	@ (80041a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d139      	bne.n	80040f4 <HAL_TIM_PeriodElapsedCallback+0x208>
 8004080:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d135      	bne.n	80040f4 <HAL_TIM_PeriodElapsedCallback+0x208>
        HAL_TIM_Base_Stop_IT(&htim3);
 8004088:	4839      	ldr	r0, [pc, #228]	@ (8004170 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800408a:	f003 fbcb 	bl	8007824 <HAL_TIM_Base_Stop_IT>
        timer_active = 0;
 800408e:	4b37      	ldr	r3, [pc, #220]	@ (800416c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        // Determine the result
        if (LP_flag == 1)
 8004094:	4b39      	ldr	r3, [pc, #228]	@ (800417c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d103      	bne.n	80040a4 <HAL_TIM_PeriodElapsedCallback+0x1b8>
        {
        	input_type = 3; // LONG PRESS
 800409c:	4b43      	ldr	r3, [pc, #268]	@ (80041ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800409e:	2203      	movs	r2, #3
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e01d      	b.n	80040e0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
           // printf("%d\n\r", input_type);
        }
        else if (count >= 2)
 80040a4:	4b36      	ldr	r3, [pc, #216]	@ (8004180 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	dd03      	ble.n	80040b4 <HAL_TIM_PeriodElapsedCallback+0x1c8>
        {
        	input_type = 2; // DOUBLE PRESS
 80040ac:	4b3f      	ldr	r3, [pc, #252]	@ (80041ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80040ae:	2202      	movs	r2, #2
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e015      	b.n	80040e0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
           // printf("%d\n\r", input_type);
        }
        else if (count == 1 && button_press == PRESS_DETECTED)
 80040b4:	4b32      	ldr	r3, [pc, #200]	@ (8004180 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d108      	bne.n	80040ce <HAL_TIM_PeriodElapsedCallback+0x1e2>
 80040bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004174 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d103      	bne.n	80040ce <HAL_TIM_PeriodElapsedCallback+0x1e2>
        {
        	input_type = 1; // SINGLE PRESS
 80040c6:	4b39      	ldr	r3, [pc, #228]	@ (80041ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e008      	b.n	80040e0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
           // printf("%d\n\r", input_type);
        }

        // Reset everything
        else {
    		count = 0;
 80040ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004180 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
    		LP_flag = 0;
 80040d4:	4b29      	ldr	r3, [pc, #164]	@ (800417c <HAL_TIM_PeriodElapsedCallback+0x290>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
    		button_press = IDLE;
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
			}
		count = 0;
 80040e0:	4b27      	ldr	r3, [pc, #156]	@ (8004180 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
		LP_flag = 0;
 80040e6:	4b25      	ldr	r3, [pc, #148]	@ (800417c <HAL_TIM_PeriodElapsedCallback+0x290>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
		button_press = IDLE;
 80040ec:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
	    HAL_Delay(2500);
		ILI9341_TopScreen(BLACK);

		}

	}
 80040f2:	e02a      	b.n	800414a <HAL_TIM_PeriodElapsedCallback+0x25e>
	else if (htim->Instance == TIM3 && num_button == 1 && reset_confirm_window_active){
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2b      	ldr	r2, [pc, #172]	@ (80041a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d125      	bne.n	800414a <HAL_TIM_PeriodElapsedCallback+0x25e>
 80040fe:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d121      	bne.n	800414a <HAL_TIM_PeriodElapsedCallback+0x25e>
 8004106:	4b20      	ldr	r3, [pc, #128]	@ (8004188 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01c      	beq.n	800414a <HAL_TIM_PeriodElapsedCallback+0x25e>
	    HAL_TIM_Base_Stop_IT(&htim3);
 8004110:	4817      	ldr	r0, [pc, #92]	@ (8004170 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004112:	f003 fb87 	bl	8007824 <HAL_TIM_Base_Stop_IT>
	    reset_confirm_window_active = false;
 8004116:	4b1c      	ldr	r3, [pc, #112]	@ (8004188 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
	    printf("\n\rReset canceled. Returning to normal operation.\n\r");
 800411c:	4824      	ldr	r0, [pc, #144]	@ (80041b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800411e:	f008 ff0b 	bl	800cf38 <iprintf>
	    ILI9341_DrawText("Reset canceled. Returning to normal operation.", FONT4, 0, tft_y, WHITE, BLACK);
 8004122:	4b1c      	ldr	r3, [pc, #112]	@ (8004194 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	2200      	movs	r2, #0
 800412a:	9201      	str	r2, [sp, #4]
 800412c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004130:	9200      	str	r2, [sp, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	4918      	ldr	r1, [pc, #96]	@ (8004198 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004136:	481f      	ldr	r0, [pc, #124]	@ (80041b4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004138:	f7fd f973 	bl	8001422 <ILI9341_DrawText>
	    HAL_Delay(2500);
 800413c:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8004140:	f001 f87c 	bl	800523c <HAL_Delay>
		ILI9341_TopScreen(BLACK);
 8004144:	2000      	movs	r0, #0
 8004146:	f7fd fce5 	bl	8001b14 <ILI9341_TopScreen>
	}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40000800 	.word	0x40000800
 8004158:	20000e10 	.word	0x20000e10
 800415c:	20001014 	.word	0x20001014
 8004160:	40020400 	.word	0x40020400
 8004164:	20000e14 	.word	0x20000e14
 8004168:	20000e00 	.word	0x20000e00
 800416c:	20000dfc 	.word	0x20000dfc
 8004170:	20000fcc 	.word	0x20000fcc
 8004174:	20000dec 	.word	0x20000dec
 8004178:	20000e04 	.word	0x20000e04
 800417c:	20000df0 	.word	0x20000df0
 8004180:	20000df8 	.word	0x20000df8
 8004184:	40013c00 	.word	0x40013c00
 8004188:	20000e08 	.word	0x20000e08
 800418c:	20000e0c 	.word	0x20000e0c
 8004190:	080111d8 	.word	0x080111d8
 8004194:	20000230 	.word	0x20000230
 8004198:	08011598 	.word	0x08011598
 800419c:	08011218 	.word	0x08011218
 80041a0:	08011254 	.word	0x08011254
 80041a4:	08011284 	.word	0x08011284
 80041a8:	40000400 	.word	0x40000400
 80041ac:	20000df4 	.word	0x20000df4
 80041b0:	080112b0 	.word	0x080112b0
 80041b4:	080112e4 	.word	0x080112e4

080041b8 <button_output>:


void button_output(int button_num){
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
	  while (true){
		if(input_type == 1){
 80041c0:	4b3e      	ldr	r3, [pc, #248]	@ (80042bc <button_output+0x104>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d124      	bne.n	8004212 <button_output+0x5a>
			printf("SINGLE PRESS\n\r");
 80041c8:	483d      	ldr	r0, [pc, #244]	@ (80042c0 <button_output+0x108>)
 80041ca:	f008 feb5 	bl	800cf38 <iprintf>
			//TFT
			ILI9341_TopScreen(BLACK);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7fd fca0 	bl	8001b14 <ILI9341_TopScreen>
			ILI9341_DrawText("SINGLE PRESS", FONT4, 0, 0, WHITE, BLACK);
 80041d4:	2300      	movs	r3, #0
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	2300      	movs	r3, #0
 80041e0:	2200      	movs	r2, #0
 80041e2:	4938      	ldr	r1, [pc, #224]	@ (80042c4 <button_output+0x10c>)
 80041e4:	4838      	ldr	r0, [pc, #224]	@ (80042c8 <button_output+0x110>)
 80041e6:	f7fd f91c 	bl	8001422 <ILI9341_DrawText>
			HAL_Delay(2000);
 80041ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80041ee:	f001 f825 	bl	800523c <HAL_Delay>
			ILI9341_TopScreen(BLACK);
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7fd fc8e 	bl	8001b14 <ILI9341_TopScreen>
			input_type = 0;
 80041f8:	4b30      	ldr	r3, [pc, #192]	@ (80042bc <button_output+0x104>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

	        // Reset everything
	        count = 0;
 80041fe:	4b33      	ldr	r3, [pc, #204]	@ (80042cc <button_output+0x114>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
	        LP_flag = 0;
 8004204:	4b32      	ldr	r3, [pc, #200]	@ (80042d0 <button_output+0x118>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
	        button_press = IDLE;
 800420a:	4b32      	ldr	r3, [pc, #200]	@ (80042d4 <button_output+0x11c>)
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
			break;
 8004210:	e050      	b.n	80042b4 <button_output+0xfc>
		}
		else if (input_type == 2){
 8004212:	4b2a      	ldr	r3, [pc, #168]	@ (80042bc <button_output+0x104>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d124      	bne.n	8004264 <button_output+0xac>
			printf("DOUBLE PRESS\n\r");
 800421a:	482f      	ldr	r0, [pc, #188]	@ (80042d8 <button_output+0x120>)
 800421c:	f008 fe8c 	bl	800cf38 <iprintf>
			//TFT
			ILI9341_TopScreen(BLACK);
 8004220:	2000      	movs	r0, #0
 8004222:	f7fd fc77 	bl	8001b14 <ILI9341_TopScreen>
			ILI9341_DrawText("DOUBLE PRESS", FONT4, 0, 0, WHITE, BLACK);
 8004226:	2300      	movs	r3, #0
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2300      	movs	r3, #0
 8004232:	2200      	movs	r2, #0
 8004234:	4923      	ldr	r1, [pc, #140]	@ (80042c4 <button_output+0x10c>)
 8004236:	4829      	ldr	r0, [pc, #164]	@ (80042dc <button_output+0x124>)
 8004238:	f7fd f8f3 	bl	8001422 <ILI9341_DrawText>
			HAL_Delay(2000);
 800423c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004240:	f000 fffc 	bl	800523c <HAL_Delay>
			ILI9341_TopScreen(BLACK);
 8004244:	2000      	movs	r0, #0
 8004246:	f7fd fc65 	bl	8001b14 <ILI9341_TopScreen>
			input_type = 0;
 800424a:	4b1c      	ldr	r3, [pc, #112]	@ (80042bc <button_output+0x104>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

	        // Reset everything
	        count = 0;
 8004250:	4b1e      	ldr	r3, [pc, #120]	@ (80042cc <button_output+0x114>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
	        LP_flag = 0;
 8004256:	4b1e      	ldr	r3, [pc, #120]	@ (80042d0 <button_output+0x118>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
	        button_press = IDLE;
 800425c:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <button_output+0x11c>)
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
			break;
 8004262:	e027      	b.n	80042b4 <button_output+0xfc>
		}
		else if (input_type == 3){
 8004264:	4b15      	ldr	r3, [pc, #84]	@ (80042bc <button_output+0x104>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d1a9      	bne.n	80041c0 <button_output+0x8>
			printf("LONG PRESS\n\r");
 800426c:	481c      	ldr	r0, [pc, #112]	@ (80042e0 <button_output+0x128>)
 800426e:	f008 fe63 	bl	800cf38 <iprintf>
			input_type = 0;
 8004272:	4b12      	ldr	r3, [pc, #72]	@ (80042bc <button_output+0x104>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
			//TFT
			ILI9341_TopScreen(BLACK);
 8004278:	2000      	movs	r0, #0
 800427a:	f7fd fc4b 	bl	8001b14 <ILI9341_TopScreen>
			ILI9341_DrawText("LONG PRESS", FONT4, 0, 0, WHITE, BLACK);
 800427e:	2300      	movs	r3, #0
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2300      	movs	r3, #0
 800428a:	2200      	movs	r2, #0
 800428c:	490d      	ldr	r1, [pc, #52]	@ (80042c4 <button_output+0x10c>)
 800428e:	4815      	ldr	r0, [pc, #84]	@ (80042e4 <button_output+0x12c>)
 8004290:	f7fd f8c7 	bl	8001422 <ILI9341_DrawText>
			HAL_Delay(2000);
 8004294:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004298:	f000 ffd0 	bl	800523c <HAL_Delay>
			ILI9341_TopScreen(BLACK);
 800429c:	2000      	movs	r0, #0
 800429e:	f7fd fc39 	bl	8001b14 <ILI9341_TopScreen>

	        // Reset everything
	        count = 0;
 80042a2:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <button_output+0x114>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
	        LP_flag = 0;
 80042a8:	4b09      	ldr	r3, [pc, #36]	@ (80042d0 <button_output+0x118>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
	        button_press = IDLE;
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <button_output+0x11c>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000df4 	.word	0x20000df4
 80042c0:	08011314 	.word	0x08011314
 80042c4:	08011598 	.word	0x08011598
 80042c8:	08011324 	.word	0x08011324
 80042cc:	20000df8 	.word	0x20000df8
 80042d0:	20000df0 	.word	0x20000df0
 80042d4:	20000dec 	.word	0x20000dec
 80042d8:	08011334 	.word	0x08011334
 80042dc:	08011344 	.word	0x08011344
 80042e0:	08011354 	.word	0x08011354
 80042e4:	08011364 	.word	0x08011364

080042e8 <button_refill>:



int button_refill(){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
	int firstcall = HAL_GetTick();
 80042ee:	f000 ff99 	bl	8005224 <HAL_GetTick>
 80042f2:	4603      	mov	r3, r0
 80042f4:	607b      	str	r3, [r7, #4]

	while(HAL_GetTick() - firstcall <= 15000){
 80042f6:	e00f      	b.n	8004318 <button_refill+0x30>
		if (button_press != IDLE){
 80042f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <button_refill+0x4c>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <button_refill+0x30>
			count = 0;
 8004302:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <button_refill+0x50>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
			LP_flag = 0;
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <button_refill+0x54>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
			button_press = IDLE;
 800430e:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <button_refill+0x4c>)
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
			return 1;
 8004314:	2301      	movs	r3, #1
 8004316:	e009      	b.n	800432c <button_refill+0x44>
	while(HAL_GetTick() - firstcall <= 15000){
 8004318:	f000 ff84 	bl	8005224 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8004326:	4293      	cmp	r3, r2
 8004328:	d9e6      	bls.n	80042f8 <button_refill+0x10>
		}
	}

	return 0;
 800432a:	2300      	movs	r3, #0

}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000dec 	.word	0x20000dec
 8004338:	20000df8 	.word	0x20000df8
 800433c:	20000df0 	.word	0x20000df0

08004340 <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 8004340:	b590      	push	{r4, r7, lr}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4604      	mov	r4, r0
 8004348:	4608      	mov	r0, r1
 800434a:	4611      	mov	r1, r2
 800434c:	461a      	mov	r2, r3
 800434e:	4623      	mov	r3, r4
 8004350:	80fb      	strh	r3, [r7, #6]
 8004352:	4603      	mov	r3, r0
 8004354:	80bb      	strh	r3, [r7, #4]
 8004356:	460b      	mov	r3, r1
 8004358:	807b      	strh	r3, [r7, #2]
 800435a:	4613      	mov	r3, r2
 800435c:	707b      	strb	r3, [r7, #1]
  if(control){
 800435e:	787b      	ldrb	r3, [r7, #1]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d015      	beq.n	8004390 <muxSET+0x50>
    HAL_GPIO_WritePin(MAST_A_GPIO_Port, MAST_A_Pin, A);
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	2101      	movs	r1, #1
 800436c:	4815      	ldr	r0, [pc, #84]	@ (80043c4 <muxSET+0x84>)
 800436e:	f001 fe03 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_B_GPIO_Port, MAST_B_Pin, B);
 8004372:	88bb      	ldrh	r3, [r7, #4]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	2102      	movs	r1, #2
 800437a:	4812      	ldr	r0, [pc, #72]	@ (80043c4 <muxSET+0x84>)
 800437c:	f001 fdfc 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_C_GPIO_Port, MAST_C_Pin, C);
 8004380:	887b      	ldrh	r3, [r7, #2]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	2110      	movs	r1, #16
 8004388:	480e      	ldr	r0, [pc, #56]	@ (80043c4 <muxSET+0x84>)
 800438a:	f001 fdf5 	bl	8005f78 <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
  }
}
 800438e:	e014      	b.n	80043ba <muxSET+0x7a>
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	2101      	movs	r1, #1
 8004398:	480b      	ldr	r0, [pc, #44]	@ (80043c8 <muxSET+0x88>)
 800439a:	f001 fded 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
 800439e:	88bb      	ldrh	r3, [r7, #4]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	2102      	movs	r1, #2
 80043a6:	4809      	ldr	r0, [pc, #36]	@ (80043cc <muxSET+0x8c>)
 80043a8:	f001 fde6 	bl	8005f78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
 80043ac:	887b      	ldrh	r3, [r7, #2]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	2101      	movs	r1, #1
 80043b4:	4805      	ldr	r0, [pc, #20]	@ (80043cc <muxSET+0x8c>)
 80043b6:	f001 fddf 	bl	8005f78 <HAL_GPIO_WritePin>
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd90      	pop	{r4, r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40020000 	.word	0x40020000
 80043c8:	40020400 	.word	0x40020400
 80043cc:	40020800 	.word	0x40020800

080043d0 <setRelay>:
#include <manager_io.h>
#include <manager_mux.h>
#include <manager_weight.h>


void setRelay(uint8_t rowNum){
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]

	switch (rowNum){
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	3b01      	subs	r3, #1
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d866      	bhi.n	80044b0 <setRelay+0xe0>
 80043e2:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <setRelay+0x18>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	080043f9 	.word	0x080043f9
 80043ec:	08004427 	.word	0x08004427
 80043f0:	08004455 	.word	0x08004455
 80043f4:	08004483 	.word	0x08004483
		case 1:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 1);
 80043f8:	2201      	movs	r2, #1
 80043fa:	2140      	movs	r1, #64	@ 0x40
 80043fc:	482e      	ldr	r0, [pc, #184]	@ (80044b8 <setRelay+0xe8>)
 80043fe:	f001 fdbb 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	2120      	movs	r1, #32
 8004406:	482d      	ldr	r0, [pc, #180]	@ (80044bc <setRelay+0xec>)
 8004408:	f001 fdb6 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 800440c:	2200      	movs	r2, #0
 800440e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004412:	4829      	ldr	r0, [pc, #164]	@ (80044b8 <setRelay+0xe8>)
 8004414:	f001 fdb0 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8004418:	2200      	movs	r2, #0
 800441a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800441e:	4826      	ldr	r0, [pc, #152]	@ (80044b8 <setRelay+0xe8>)
 8004420:	f001 fdaa 	bl	8005f78 <HAL_GPIO_WritePin>
			break;
 8004424:	e045      	b.n	80044b2 <setRelay+0xe2>

		case 2:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8004426:	2200      	movs	r2, #0
 8004428:	2140      	movs	r1, #64	@ 0x40
 800442a:	4823      	ldr	r0, [pc, #140]	@ (80044b8 <setRelay+0xe8>)
 800442c:	f001 fda4 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 1);
 8004430:	2201      	movs	r2, #1
 8004432:	2120      	movs	r1, #32
 8004434:	4821      	ldr	r0, [pc, #132]	@ (80044bc <setRelay+0xec>)
 8004436:	f001 fd9f 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 800443a:	2200      	movs	r2, #0
 800443c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004440:	481d      	ldr	r0, [pc, #116]	@ (80044b8 <setRelay+0xe8>)
 8004442:	f001 fd99 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8004446:	2200      	movs	r2, #0
 8004448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800444c:	481a      	ldr	r0, [pc, #104]	@ (80044b8 <setRelay+0xe8>)
 800444e:	f001 fd93 	bl	8005f78 <HAL_GPIO_WritePin>
			break;
 8004452:	e02e      	b.n	80044b2 <setRelay+0xe2>

		case 3:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8004454:	2200      	movs	r2, #0
 8004456:	2140      	movs	r1, #64	@ 0x40
 8004458:	4817      	ldr	r0, [pc, #92]	@ (80044b8 <setRelay+0xe8>)
 800445a:	f001 fd8d 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 800445e:	2200      	movs	r2, #0
 8004460:	2120      	movs	r1, #32
 8004462:	4816      	ldr	r0, [pc, #88]	@ (80044bc <setRelay+0xec>)
 8004464:	f001 fd88 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 1);
 8004468:	2201      	movs	r2, #1
 800446a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800446e:	4812      	ldr	r0, [pc, #72]	@ (80044b8 <setRelay+0xe8>)
 8004470:	f001 fd82 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8004474:	2200      	movs	r2, #0
 8004476:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800447a:	480f      	ldr	r0, [pc, #60]	@ (80044b8 <setRelay+0xe8>)
 800447c:	f001 fd7c 	bl	8005f78 <HAL_GPIO_WritePin>
			break;
 8004480:	e017      	b.n	80044b2 <setRelay+0xe2>

		case 4:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8004482:	2200      	movs	r2, #0
 8004484:	2140      	movs	r1, #64	@ 0x40
 8004486:	480c      	ldr	r0, [pc, #48]	@ (80044b8 <setRelay+0xe8>)
 8004488:	f001 fd76 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 800448c:	2200      	movs	r2, #0
 800448e:	2120      	movs	r1, #32
 8004490:	480a      	ldr	r0, [pc, #40]	@ (80044bc <setRelay+0xec>)
 8004492:	f001 fd71 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800449c:	4806      	ldr	r0, [pc, #24]	@ (80044b8 <setRelay+0xe8>)
 800449e:	f001 fd6b 	bl	8005f78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 1);
 80044a2:	2201      	movs	r2, #1
 80044a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80044a8:	4803      	ldr	r0, [pc, #12]	@ (80044b8 <setRelay+0xe8>)
 80044aa:	f001 fd65 	bl	8005f78 <HAL_GPIO_WritePin>
			break;
 80044ae:	e000      	b.n	80044b2 <setRelay+0xe2>

		default:
			return;
 80044b0:	bf00      	nop
	}
}
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40020400 	.word	0x40020400
 80044bc:	40020800 	.word	0x40020800

080044c0 <microDelay>:
#include "gpio.h"
#include "tim.h"


void microDelay(uint16_t delay)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80044ca:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <microDelay+0x30>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 80044d2:	bf00      	nop
 80044d4:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <microDelay+0x30>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d3f9      	bcc.n	80044d4 <microDelay+0x14>
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000f84 	.word	0x20000f84

080044f4 <getHX711>:

int32_t getHX711(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 80044fe:	f000 fe91 	bl	8005224 <HAL_GetTick>
 8004502:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8004504:	e008      	b.n	8004518 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8004506:	f000 fe8d 	bl	8005224 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2bc8      	cmp	r3, #200	@ 0xc8
 8004512:	d901      	bls.n	8004518 <getHX711+0x24>
      return 0;
 8004514:	2300      	movs	r3, #0
 8004516:	e04b      	b.n	80045b0 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8004518:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800451c:	4826      	ldr	r0, [pc, #152]	@ (80045b8 <getHX711+0xc4>)
 800451e:	f001 fd13 	bl	8005f48 <HAL_GPIO_ReadPin>
 8004522:	4603      	mov	r3, r0
 8004524:	2b01      	cmp	r3, #1
 8004526:	d0ee      	beq.n	8004506 <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8004528:	2300      	movs	r3, #0
 800452a:	72fb      	strb	r3, [r7, #11]
 800452c:	e025      	b.n	800457a <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 800452e:	2201      	movs	r2, #1
 8004530:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004534:	4821      	ldr	r0, [pc, #132]	@ (80045bc <getHX711+0xc8>)
 8004536:	f001 fd1f 	bl	8005f78 <HAL_GPIO_WritePin>
    microDelay(1);
 800453a:	2001      	movs	r0, #1
 800453c:	f7ff ffc0 	bl	80044c0 <microDelay>
    data = data << 1;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8004546:	2200      	movs	r2, #0
 8004548:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800454c:	481b      	ldr	r0, [pc, #108]	@ (80045bc <getHX711+0xc8>)
 800454e:	f001 fd13 	bl	8005f78 <HAL_GPIO_WritePin>
    microDelay(1);
 8004552:	2001      	movs	r0, #1
 8004554:	f7ff ffb4 	bl	80044c0 <microDelay>
    if(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8004558:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800455c:	4816      	ldr	r0, [pc, #88]	@ (80045b8 <getHX711+0xc4>)
 800455e:	f001 fcf3 	bl	8005f48 <HAL_GPIO_ReadPin>
 8004562:	4603      	mov	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d102      	bne.n	800456e <getHX711+0x7a>
      data ++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3301      	adds	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 800456e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	3301      	adds	r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	72fb      	strb	r3, [r7, #11]
 800457a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800457e:	2b17      	cmp	r3, #23
 8004580:	ddd5      	ble.n	800452e <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8004588:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 800458a:	2201      	movs	r2, #1
 800458c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004590:	480a      	ldr	r0, [pc, #40]	@ (80045bc <getHX711+0xc8>)
 8004592:	f001 fcf1 	bl	8005f78 <HAL_GPIO_WritePin>
  microDelay(1);
 8004596:	2001      	movs	r0, #1
 8004598:	f7ff ff92 	bl	80044c0 <microDelay>
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80045a2:	4806      	ldr	r0, [pc, #24]	@ (80045bc <getHX711+0xc8>)
 80045a4:	f001 fce8 	bl	8005f78 <HAL_GPIO_WritePin>
  microDelay(1);
 80045a8:	2001      	movs	r0, #1
 80045aa:	f7ff ff89 	bl	80044c0 <microDelay>
  return data;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40020000 	.word	0x40020000
 80045bc:	40020400 	.word	0x40020400

080045c0 <weigh>:

int weigh(uint32_t tare, float calFactor)
{
 80045c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c4:	b088      	sub	sp, #32
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	ed87 0a00 	vstr	s0, [r7]
  int64_t  total = 0;
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 80045da:	2332      	movs	r3, #50	@ 0x32
 80045dc:	613b      	str	r3, [r7, #16]

  int milligram = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  int32_t average = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	82fb      	strh	r3, [r7, #22]
 80045ea:	e010      	b.n	800460e <weigh+0x4e>
  {
      total += getHX711();
 80045ec:	f7ff ff82 	bl	80044f4 <getHX711>
 80045f0:	4603      	mov	r3, r0
 80045f2:	17da      	asrs	r2, r3, #31
 80045f4:	461c      	mov	r4, r3
 80045f6:	4615      	mov	r5, r2
 80045f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045fc:	eb12 0804 	adds.w	r8, r2, r4
 8004600:	eb43 0905 	adc.w	r9, r3, r5
 8004604:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8004608:	8afb      	ldrh	r3, [r7, #22]
 800460a:	3301      	adds	r3, #1
 800460c:	82fb      	strh	r3, [r7, #22]
 800460e:	8afb      	ldrh	r3, [r7, #22]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	dcea      	bgt.n	80045ec <weigh+0x2c>
  }
  average = (int32_t)(total / samples);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	17da      	asrs	r2, r3, #31
 800461a:	469a      	mov	sl, r3
 800461c:	4693      	mov	fp, r2
 800461e:	4652      	mov	r2, sl
 8004620:	465b      	mov	r3, fp
 8004622:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004626:	f7fc fb5f 	bl	8000ce8 <__aeabi_ldivmod>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4613      	mov	r3, r2
 8004630:	60bb      	str	r3, [r7, #8]
  milligram = (int)(average - tare)*calFactor;
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004640:	edd7 7a00 	vldr	s15, [r7]
 8004644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800464c:	ee17 3a90 	vmov	r3, s15
 8004650:	60fb      	str	r3, [r7, #12]
  return milligram;
 8004652:	68fb      	ldr	r3, [r7, #12]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800465e <weighRaw>:

int32_t weighRaw()
{
 800465e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
  int64_t  	total = 0;
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  	samples = 50;
 8004672:	2332      	movs	r3, #50	@ 0x32
 8004674:	60bb      	str	r3, [r7, #8]
  int32_t 	average = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]

  for(uint16_t i=0 ; i<samples ; i++)
 800467a:	2300      	movs	r3, #0
 800467c:	81fb      	strh	r3, [r7, #14]
 800467e:	e010      	b.n	80046a2 <weighRaw+0x44>
  {
      total += getHX711();
 8004680:	f7ff ff38 	bl	80044f4 <getHX711>
 8004684:	4603      	mov	r3, r0
 8004686:	17da      	asrs	r2, r3, #31
 8004688:	461c      	mov	r4, r3
 800468a:	4615      	mov	r5, r2
 800468c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004690:	eb12 0804 	adds.w	r8, r2, r4
 8004694:	eb43 0905 	adc.w	r9, r3, r5
 8004698:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	3301      	adds	r3, #1
 80046a0:	81fb      	strh	r3, [r7, #14]
 80046a2:	89fb      	ldrh	r3, [r7, #14]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	dcea      	bgt.n	8004680 <weighRaw+0x22>
  }
  average = (int32_t)(total / samples);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	17da      	asrs	r2, r3, #31
 80046ae:	469a      	mov	sl, r3
 80046b0:	4693      	mov	fp, r2
 80046b2:	4652      	mov	r2, sl
 80046b4:	465b      	mov	r3, fp
 80046b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046ba:	f7fc fb15 	bl	8000ce8 <__aeabi_ldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4613      	mov	r3, r2
 80046c4:	607b      	str	r3, [r7, #4]
  return average;
 80046c6:	687b      	ldr	r3, [r7, #4]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046d2 <weighRawTare>:

int32_t weighRawTare(uint32_t tare)
{
 80046d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  int64_t  	total = 0;
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  	samples = 50;
 80046e8:	2332      	movs	r3, #50	@ 0x32
 80046ea:	613b      	str	r3, [r7, #16]
  int32_t 	average = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
  int32_t 	avgTare = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 80046f4:	2300      	movs	r3, #0
 80046f6:	82fb      	strh	r3, [r7, #22]
 80046f8:	e010      	b.n	800471c <weighRawTare+0x4a>
  {
      total += getHX711();
 80046fa:	f7ff fefb 	bl	80044f4 <getHX711>
 80046fe:	4603      	mov	r3, r0
 8004700:	17da      	asrs	r2, r3, #31
 8004702:	461c      	mov	r4, r3
 8004704:	4615      	mov	r5, r2
 8004706:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800470a:	eb12 0804 	adds.w	r8, r2, r4
 800470e:	eb43 0905 	adc.w	r9, r3, r5
 8004712:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8004716:	8afb      	ldrh	r3, [r7, #22]
 8004718:	3301      	adds	r3, #1
 800471a:	82fb      	strh	r3, [r7, #22]
 800471c:	8afb      	ldrh	r3, [r7, #22]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	429a      	cmp	r2, r3
 8004722:	dcea      	bgt.n	80046fa <weighRawTare+0x28>
  }
  average = (int32_t)(total / samples);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	17da      	asrs	r2, r3, #31
 8004728:	469a      	mov	sl, r3
 800472a:	4693      	mov	fp, r2
 800472c:	4652      	mov	r2, sl
 800472e:	465b      	mov	r3, fp
 8004730:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004734:	f7fc fad8 	bl	8000ce8 <__aeabi_ldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4613      	mov	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  avgTare = average - tare;
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	60bb      	str	r3, [r7, #8]
  return avgTare;
 8004748:	68bb      	ldr	r3, [r7, #8]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004754:	0000      	movs	r0, r0
	...

08004758 <getCalFactor>:

float getCalFactor(uint32_t knownHX711){
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	float cal = 20000.0 / knownHX711;
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fb feff 	bl	8000564 <__aeabi_ui2d>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004798 <getCalFactor+0x40>)
 800476c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004770:	f7fc f89c 	bl	80008ac <__aeabi_ddiv>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	f7fc fa64 	bl	8000c48 <__aeabi_d2f>
 8004780:	4603      	mov	r3, r0
 8004782:	60fb      	str	r3, [r7, #12]
	return cal;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	ee07 3a90 	vmov	s15, r3
}
 800478a:	eeb0 0a67 	vmov.f32	s0, s15
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	f3af 8000 	nop.w
 8004798:	00000000 	.word	0x00000000
 800479c:	40d38800 	.word	0x40d38800

080047a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80047a4:	4b17      	ldr	r3, [pc, #92]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047a6:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <MX_SPI1_Init+0x68>)
 80047a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80047aa:	4b16      	ldr	r3, [pc, #88]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80047b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80047b2:	4b14      	ldr	r3, [pc, #80]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80047b8:	4b12      	ldr	r3, [pc, #72]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047be:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80047ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047da:	2200      	movs	r2, #0
 80047dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047de:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047e4:	4b07      	ldr	r3, [pc, #28]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047ec:	220a      	movs	r2, #10
 80047ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047f0:	4804      	ldr	r0, [pc, #16]	@ (8004804 <MX_SPI1_Init+0x64>)
 80047f2:	f002 f955 	bl	8006aa0 <HAL_SPI_Init>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80047fc:	f7ff f82e 	bl	800385c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000e18 	.word	0x20000e18
 8004808:	40013000 	.word	0x40013000

0800480c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004810:	4b17      	ldr	r3, [pc, #92]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004812:	4a18      	ldr	r2, [pc, #96]	@ (8004874 <MX_SPI2_Init+0x68>)
 8004814:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004816:	4b16      	ldr	r3, [pc, #88]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004818:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800481c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800481e:	4b14      	ldr	r3, [pc, #80]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004824:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004826:	2200      	movs	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800482a:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <MX_SPI2_Init+0x64>)
 800482c:	2200      	movs	r2, #0
 800482e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004830:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004832:	2200      	movs	r2, #0
 8004834:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004836:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800483c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800483e:	4b0c      	ldr	r3, [pc, #48]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004840:	2200      	movs	r2, #0
 8004842:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004844:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004846:	2200      	movs	r2, #0
 8004848:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800484a:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <MX_SPI2_Init+0x64>)
 800484c:	2200      	movs	r2, #0
 800484e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004852:	2200      	movs	r2, #0
 8004854:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <MX_SPI2_Init+0x64>)
 8004858:	220a      	movs	r2, #10
 800485a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800485c:	4804      	ldr	r0, [pc, #16]	@ (8004870 <MX_SPI2_Init+0x64>)
 800485e:	f002 f91f 	bl	8006aa0 <HAL_SPI_Init>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004868:	f7fe fff8 	bl	800385c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000e70 	.word	0x20000e70
 8004874:	40003800 	.word	0x40003800

08004878 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800487c:	4b17      	ldr	r3, [pc, #92]	@ (80048dc <MX_SPI3_Init+0x64>)
 800487e:	4a18      	ldr	r2, [pc, #96]	@ (80048e0 <MX_SPI3_Init+0x68>)
 8004880:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004882:	4b16      	ldr	r3, [pc, #88]	@ (80048dc <MX_SPI3_Init+0x64>)
 8004884:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004888:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800488a:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <MX_SPI3_Init+0x64>)
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004890:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <MX_SPI3_Init+0x64>)
 8004892:	2200      	movs	r2, #0
 8004894:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004896:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <MX_SPI3_Init+0x64>)
 8004898:	2200      	movs	r2, #0
 800489a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800489c:	4b0f      	ldr	r3, [pc, #60]	@ (80048dc <MX_SPI3_Init+0x64>)
 800489e:	2200      	movs	r2, #0
 80048a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <MX_SPI3_Init+0x64>)
 80048a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048aa:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <MX_SPI3_Init+0x64>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <MX_SPI3_Init+0x64>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80048b6:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <MX_SPI3_Init+0x64>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048bc:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <MX_SPI3_Init+0x64>)
 80048be:	2200      	movs	r2, #0
 80048c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <MX_SPI3_Init+0x64>)
 80048c4:	220a      	movs	r2, #10
 80048c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80048c8:	4804      	ldr	r0, [pc, #16]	@ (80048dc <MX_SPI3_Init+0x64>)
 80048ca:	f002 f8e9 	bl	8006aa0 <HAL_SPI_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80048d4:	f7fe ffc2 	bl	800385c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80048d8:	bf00      	nop
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000ec8 	.word	0x20000ec8
 80048e0:	40003c00 	.word	0x40003c00

080048e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08e      	sub	sp, #56	@ 0x38
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a71      	ldr	r2, [pc, #452]	@ (8004ac8 <HAL_SPI_MspInit+0x1e4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d12c      	bne.n	8004960 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
 800490a:	4b70      	ldr	r3, [pc, #448]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	4a6f      	ldr	r2, [pc, #444]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004910:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004914:	6453      	str	r3, [r2, #68]	@ 0x44
 8004916:	4b6d      	ldr	r3, [pc, #436]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800491e:	623b      	str	r3, [r7, #32]
 8004920:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	4b69      	ldr	r3, [pc, #420]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	4a68      	ldr	r2, [pc, #416]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6313      	str	r3, [r2, #48]	@ 0x30
 8004932:	4b66      	ldr	r3, [pc, #408]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800493e:	23e0      	movs	r3, #224	@ 0xe0
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004942:	2302      	movs	r3, #2
 8004944:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494a:	2303      	movs	r3, #3
 800494c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800494e:	2305      	movs	r3, #5
 8004950:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004956:	4619      	mov	r1, r3
 8004958:	485d      	ldr	r0, [pc, #372]	@ (8004ad0 <HAL_SPI_MspInit+0x1ec>)
 800495a:	f001 f961 	bl	8005c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800495e:	e0af      	b.n	8004ac0 <HAL_SPI_MspInit+0x1dc>
  else if(spiHandle->Instance==SPI2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a5b      	ldr	r2, [pc, #364]	@ (8004ad4 <HAL_SPI_MspInit+0x1f0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d178      	bne.n	8004a5c <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	4b57      	ldr	r3, [pc, #348]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	4a56      	ldr	r2, [pc, #344]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004978:	6413      	str	r3, [r2, #64]	@ 0x40
 800497a:	4b54      	ldr	r3, [pc, #336]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	4b50      	ldr	r3, [pc, #320]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498e:	4a4f      	ldr	r2, [pc, #316]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	6313      	str	r3, [r2, #48]	@ 0x30
 8004996:	4b4d      	ldr	r3, [pc, #308]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	4b49      	ldr	r3, [pc, #292]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	4a48      	ldr	r2, [pc, #288]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80049b2:	4b46      	ldr	r3, [pc, #280]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80049be:	2308      	movs	r3, #8
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c2:	2302      	movs	r3, #2
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ca:	2303      	movs	r3, #3
 80049cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049ce:	2305      	movs	r3, #5
 80049d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049d6:	4619      	mov	r1, r3
 80049d8:	483f      	ldr	r0, [pc, #252]	@ (8004ad8 <HAL_SPI_MspInit+0x1f4>)
 80049da:	f001 f921 	bl	8005c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80049de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e4:	2302      	movs	r3, #2
 80049e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ec:	2303      	movs	r3, #3
 80049ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049f0:	2305      	movs	r3, #5
 80049f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049f8:	4619      	mov	r1, r3
 80049fa:	4838      	ldr	r0, [pc, #224]	@ (8004adc <HAL_SPI_MspInit+0x1f8>)
 80049fc:	f001 f910 	bl	8005c20 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004a00:	4b37      	ldr	r3, [pc, #220]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a02:	4a38      	ldr	r2, [pc, #224]	@ (8004ae4 <HAL_SPI_MspInit+0x200>)
 8004a04:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004a06:	4b36      	ldr	r3, [pc, #216]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a0c:	4b34      	ldr	r3, [pc, #208]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a0e:	2240      	movs	r2, #64	@ 0x40
 8004a10:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a12:	4b33      	ldr	r3, [pc, #204]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a18:	4b31      	ldr	r3, [pc, #196]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a1e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a20:	4b2f      	ldr	r3, [pc, #188]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a26:	4b2e      	ldr	r3, [pc, #184]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a32:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a38:	4b29      	ldr	r3, [pc, #164]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a3e:	4828      	ldr	r0, [pc, #160]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a40:	f000 fd7e 	bl	8005540 <HAL_DMA_Init>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 8004a4a:	f7fe ff07 	bl	800385c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a23      	ldr	r2, [pc, #140]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a52:	649a      	str	r2, [r3, #72]	@ 0x48
 8004a54:	4a22      	ldr	r2, [pc, #136]	@ (8004ae0 <HAL_SPI_MspInit+0x1fc>)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004a5a:	e031      	b.n	8004ac0 <HAL_SPI_MspInit+0x1dc>
  else if(spiHandle->Instance==SPI3)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a21      	ldr	r2, [pc, #132]	@ (8004ae8 <HAL_SPI_MspInit+0x204>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d12c      	bne.n	8004ac0 <HAL_SPI_MspInit+0x1dc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	4b18      	ldr	r3, [pc, #96]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	4a17      	ldr	r2, [pc, #92]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004a70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a76:	4b15      	ldr	r3, [pc, #84]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	4b11      	ldr	r3, [pc, #68]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8a:	4a10      	ldr	r2, [pc, #64]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a92:	4b0e      	ldr	r3, [pc, #56]	@ (8004acc <HAL_SPI_MspInit+0x1e8>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004a9e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aac:	2303      	movs	r3, #3
 8004aae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004ab0:	2306      	movs	r3, #6
 8004ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4807      	ldr	r0, [pc, #28]	@ (8004ad8 <HAL_SPI_MspInit+0x1f4>)
 8004abc:	f001 f8b0 	bl	8005c20 <HAL_GPIO_Init>
}
 8004ac0:	bf00      	nop
 8004ac2:	3738      	adds	r7, #56	@ 0x38
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40013000 	.word	0x40013000
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40020000 	.word	0x40020000
 8004ad4:	40003800 	.word	0x40003800
 8004ad8:	40020800 	.word	0x40020800
 8004adc:	40020400 	.word	0x40020400
 8004ae0:	20000f20 	.word	0x20000f20
 8004ae4:	40026070 	.word	0x40026070
 8004ae8:	40003c00 	.word	0x40003c00

08004aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
 8004af6:	4b10      	ldr	r3, [pc, #64]	@ (8004b38 <HAL_MspInit+0x4c>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	4a0f      	ldr	r2, [pc, #60]	@ (8004b38 <HAL_MspInit+0x4c>)
 8004afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <HAL_MspInit+0x4c>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b0a:	607b      	str	r3, [r7, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	4b09      	ldr	r3, [pc, #36]	@ (8004b38 <HAL_MspInit+0x4c>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	4a08      	ldr	r2, [pc, #32]	@ (8004b38 <HAL_MspInit+0x4c>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b1e:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <HAL_MspInit+0x4c>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800

08004b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <NMI_Handler+0x4>

08004b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b48:	bf00      	nop
 8004b4a:	e7fd      	b.n	8004b48 <HardFault_Handler+0x4>

08004b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <MemManage_Handler+0x4>

08004b54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b58:	bf00      	nop
 8004b5a:	e7fd      	b.n	8004b58 <BusFault_Handler+0x4>

08004b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <UsageFault_Handler+0x4>

08004b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b72:	b480      	push	{r7}
 8004b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b92:	f000 fb33 	bl	80051fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_BTN_Pin);
 8004b9e:	2002      	movs	r0, #2
 8004ba0:	f001 fa04 	bl	8005fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004ba4:	bf00      	nop
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CONFIRM_BTN_Pin);
 8004bac:	2004      	movs	r0, #4
 8004bae:	f001 f9fd 	bl	8005fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004bbc:	4802      	ldr	r0, [pc, #8]	@ (8004bc8 <DMA1_Stream4_IRQHandler+0x10>)
 8004bbe:	f000 fdc5 	bl	800574c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000f20 	.word	0x20000f20

08004bcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004bd0:	4802      	ldr	r0, [pc, #8]	@ (8004bdc <TIM3_IRQHandler+0x10>)
 8004bd2:	f002 fe56 	bl	8007882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000fcc 	.word	0x20000fcc

08004be0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004be4:	4802      	ldr	r0, [pc, #8]	@ (8004bf0 <TIM4_IRQHandler+0x10>)
 8004be6:	f002 fe4c 	bl	8007882 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20001014 	.word	0x20001014

08004bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return 1;
 8004bf8:	2301      	movs	r3, #1
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <_kill>:

int _kill(int pid, int sig)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c0e:	f008 fba3 	bl	800d358 <__errno>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2216      	movs	r2, #22
 8004c16:	601a      	str	r2, [r3, #0]
  return -1;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_exit>:

void _exit (int status)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ffe7 	bl	8004c04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <_exit+0x12>

08004c3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e00a      	b.n	8004c62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c4c:	f7ff f8fa 	bl	8003e44 <__io_getchar>
 8004c50:	4601      	mov	r1, r0
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	60ba      	str	r2, [r7, #8]
 8004c58:	b2ca      	uxtb	r2, r1
 8004c5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	dbf0      	blt.n	8004c4c <_read+0x12>
  }

  return len;
 8004c6a:	687b      	ldr	r3, [r7, #4]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c9c:	605a      	str	r2, [r3, #4]
  return 0;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <_isatty>:

int _isatty(int file)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004cb4:	2301      	movs	r3, #1
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ce4:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <_sbrk+0x5c>)
 8004ce6:	4b15      	ldr	r3, [pc, #84]	@ (8004d3c <_sbrk+0x60>)
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cf0:	4b13      	ldr	r3, [pc, #76]	@ (8004d40 <_sbrk+0x64>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cf8:	4b11      	ldr	r3, [pc, #68]	@ (8004d40 <_sbrk+0x64>)
 8004cfa:	4a12      	ldr	r2, [pc, #72]	@ (8004d44 <_sbrk+0x68>)
 8004cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cfe:	4b10      	ldr	r3, [pc, #64]	@ (8004d40 <_sbrk+0x64>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d207      	bcs.n	8004d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d0c:	f008 fb24 	bl	800d358 <__errno>
 8004d10:	4603      	mov	r3, r0
 8004d12:	220c      	movs	r2, #12
 8004d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1a:	e009      	b.n	8004d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d1c:	4b08      	ldr	r3, [pc, #32]	@ (8004d40 <_sbrk+0x64>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d22:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <_sbrk+0x64>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	4a05      	ldr	r2, [pc, #20]	@ (8004d40 <_sbrk+0x64>)
 8004d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20020000 	.word	0x20020000
 8004d3c:	00000400 	.word	0x00000400
 8004d40:	20000f80 	.word	0x20000f80
 8004d44:	20001240 	.word	0x20001240

08004d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d4c:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <SystemInit+0x20>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d52:	4a05      	ldr	r2, [pc, #20]	@ (8004d68 <SystemInit+0x20>)
 8004d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d5c:	bf00      	nop
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	e000ed00 	.word	0xe000ed00

08004d6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	605a      	str	r2, [r3, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d80:	463b      	mov	r3, r7
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d88:	4b1d      	ldr	r3, [pc, #116]	@ (8004e00 <MX_TIM2_Init+0x94>)
 8004d8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	@ (8004e00 <MX_TIM2_Init+0x94>)
 8004d92:	2207      	movs	r2, #7
 8004d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d96:	4b1a      	ldr	r3, [pc, #104]	@ (8004e00 <MX_TIM2_Init+0x94>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004d9c:	4b18      	ldr	r3, [pc, #96]	@ (8004e00 <MX_TIM2_Init+0x94>)
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004da4:	4b16      	ldr	r3, [pc, #88]	@ (8004e00 <MX_TIM2_Init+0x94>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004daa:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <MX_TIM2_Init+0x94>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004db0:	4813      	ldr	r0, [pc, #76]	@ (8004e00 <MX_TIM2_Init+0x94>)
 8004db2:	f002 fc0f 	bl	80075d4 <HAL_TIM_Base_Init>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004dbc:	f7fe fd4e 	bl	800385c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004dc6:	f107 0308 	add.w	r3, r7, #8
 8004dca:	4619      	mov	r1, r3
 8004dcc:	480c      	ldr	r0, [pc, #48]	@ (8004e00 <MX_TIM2_Init+0x94>)
 8004dce:	f002 fe48 	bl	8007a62 <HAL_TIM_ConfigClockSource>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004dd8:	f7fe fd40 	bl	800385c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004de4:	463b      	mov	r3, r7
 8004de6:	4619      	mov	r1, r3
 8004de8:	4805      	ldr	r0, [pc, #20]	@ (8004e00 <MX_TIM2_Init+0x94>)
 8004dea:	f003 f86f 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004df4:	f7fe fd32 	bl	800385c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004df8:	bf00      	nop
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000f84 	.word	0x20000f84

08004e04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e0a:	f107 0308 	add.w	r3, r7, #8
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	605a      	str	r2, [r3, #4]
 8004e14:	609a      	str	r2, [r3, #8]
 8004e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e18:	463b      	mov	r3, r7
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e20:	4b23      	ldr	r3, [pc, #140]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e22:	4a24      	ldr	r2, [pc, #144]	@ (8004eb4 <MX_TIM3_Init+0xb0>)
 8004e24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 8004e26:	4b22      	ldr	r3, [pc, #136]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e28:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8004e2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e2e:	4b20      	ldr	r3, [pc, #128]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19000 - 1;
 8004e34:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e36:	f644 2237 	movw	r2, #18999	@ 0x4a37
 8004e3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e42:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e48:	4819      	ldr	r0, [pc, #100]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e4a:	f002 fbc3 	bl	80075d4 <HAL_TIM_Base_Init>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004e54:	f7fe fd02 	bl	800385c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e5e:	f107 0308 	add.w	r3, r7, #8
 8004e62:	4619      	mov	r1, r3
 8004e64:	4812      	ldr	r0, [pc, #72]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e66:	f002 fdfc 	bl	8007a62 <HAL_TIM_ConfigClockSource>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004e70:	f7fe fcf4 	bl	800385c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	4619      	mov	r1, r3
 8004e80:	480b      	ldr	r0, [pc, #44]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e82:	f003 f823 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004e8c:	f7fe fce6 	bl	800385c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  __HAL_TIM_SET_COUNTER(&htim3, 0);           // Reset counter
 8004e90:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2200      	movs	r2, #0
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Stop_IT(&htim3);               // Ensure it's stopped and not running from startup
 8004e98:	4805      	ldr	r0, [pc, #20]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004e9a:	f002 fcc3 	bl	8007824 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE); // Clear any pending update events
 8004e9e:	4b04      	ldr	r3, [pc, #16]	@ (8004eb0 <MX_TIM3_Init+0xac>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f06f 0201 	mvn.w	r2, #1
 8004ea6:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM3_Init 2 */

}
 8004ea8:	bf00      	nop
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000fcc 	.word	0x20000fcc
 8004eb4:	40000400 	.word	0x40000400

08004eb8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	605a      	str	r2, [r3, #4]
 8004ec8:	609a      	str	r2, [r3, #8]
 8004eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ecc:	463b      	mov	r3, r7
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ed4:	4b23      	ldr	r3, [pc, #140]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004ed6:	4a24      	ldr	r2, [pc, #144]	@ (8004f68 <MX_TIM4_Init+0xb0>)
 8004ed8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6400 - 1;
 8004eda:	4b22      	ldr	r3, [pc, #136]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004edc:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8004ee0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ee2:	4b20      	ldr	r3, [pc, #128]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1135 - 1;
 8004ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004eea:	f240 426e 	movw	r2, #1134	@ 0x46e
 8004eee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004efc:	4819      	ldr	r0, [pc, #100]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004efe:	f002 fb69 	bl	80075d4 <HAL_TIM_Base_Init>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004f08:	f7fe fca8 	bl	800385c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004f12:	f107 0308 	add.w	r3, r7, #8
 8004f16:	4619      	mov	r1, r3
 8004f18:	4812      	ldr	r0, [pc, #72]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004f1a:	f002 fda2 	bl	8007a62 <HAL_TIM_ConfigClockSource>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004f24:	f7fe fc9a 	bl	800385c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f30:	463b      	mov	r3, r7
 8004f32:	4619      	mov	r1, r3
 8004f34:	480b      	ldr	r0, [pc, #44]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004f36:	f002 ffc9 	bl	8007ecc <HAL_TIMEx_MasterConfigSynchronization>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004f40:	f7fe fc8c 	bl	800385c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  __HAL_TIM_SET_COUNTER(&htim4, 0);           // Reset counter
 8004f44:	4b07      	ldr	r3, [pc, #28]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Stop_IT(&htim4);               // Ensure it's stopped and not running from startup
 8004f4c:	4805      	ldr	r0, [pc, #20]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004f4e:	f002 fc69 	bl	8007824 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE); // Clear any pending update events
 8004f52:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <MX_TIM4_Init+0xac>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0201 	mvn.w	r2, #1
 8004f5a:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM4_Init 2 */

}
 8004f5c:	bf00      	nop
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20001014 	.word	0x20001014
 8004f68:	40000800 	.word	0x40000800

08004f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7c:	d10e      	bne.n	8004f9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	4b24      	ldr	r3, [pc, #144]	@ (8005014 <HAL_TIM_Base_MspInit+0xa8>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	4a23      	ldr	r2, [pc, #140]	@ (8005014 <HAL_TIM_Base_MspInit+0xa8>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f8e:	4b21      	ldr	r3, [pc, #132]	@ (8005014 <HAL_TIM_Base_MspInit+0xa8>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004f9a:	e036      	b.n	800500a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8005018 <HAL_TIM_Base_MspInit+0xac>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d116      	bne.n	8004fd4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	4b1a      	ldr	r3, [pc, #104]	@ (8005014 <HAL_TIM_Base_MspInit+0xa8>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	4a19      	ldr	r2, [pc, #100]	@ (8005014 <HAL_TIM_Base_MspInit+0xa8>)
 8004fb0:	f043 0302 	orr.w	r3, r3, #2
 8004fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fb6:	4b17      	ldr	r3, [pc, #92]	@ (8005014 <HAL_TIM_Base_MspInit+0xa8>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	201d      	movs	r0, #29
 8004fc8:	f000 fa71 	bl	80054ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004fcc:	201d      	movs	r0, #29
 8004fce:	f000 fa8a 	bl	80054e6 <HAL_NVIC_EnableIRQ>
}
 8004fd2:	e01a      	b.n	800500a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a10      	ldr	r2, [pc, #64]	@ (800501c <HAL_TIM_Base_MspInit+0xb0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d115      	bne.n	800500a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <HAL_TIM_Base_MspInit+0xa8>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8005014 <HAL_TIM_Base_MspInit+0xa8>)
 8004fe8:	f043 0304 	orr.w	r3, r3, #4
 8004fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fee:	4b09      	ldr	r3, [pc, #36]	@ (8005014 <HAL_TIM_Base_MspInit+0xa8>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	201e      	movs	r0, #30
 8005000:	f000 fa55 	bl	80054ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005004:	201e      	movs	r0, #30
 8005006:	f000 fa6e 	bl	80054e6 <HAL_NVIC_EnableIRQ>
}
 800500a:	bf00      	nop
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800

08005020 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005024:	4b11      	ldr	r3, [pc, #68]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005026:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <MX_USART2_UART_Init+0x50>)
 8005028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800502a:	4b10      	ldr	r3, [pc, #64]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 800502c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005032:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005038:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 800503a:	2200      	movs	r2, #0
 800503c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800503e:	4b0b      	ldr	r3, [pc, #44]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005040:	2200      	movs	r2, #0
 8005042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005044:	4b09      	ldr	r3, [pc, #36]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005046:	220c      	movs	r2, #12
 8005048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800504a:	4b08      	ldr	r3, [pc, #32]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 800504c:	2200      	movs	r2, #0
 800504e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005050:	4b06      	ldr	r3, [pc, #24]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005052:	2200      	movs	r2, #0
 8005054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005056:	4805      	ldr	r0, [pc, #20]	@ (800506c <MX_USART2_UART_Init+0x4c>)
 8005058:	f002 ffc8 	bl	8007fec <HAL_UART_Init>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005062:	f7fe fbfb 	bl	800385c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	2000105c 	.word	0x2000105c
 8005070:	40004400 	.word	0x40004400

08005074 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	@ 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a19      	ldr	r2, [pc, #100]	@ (80050f8 <HAL_UART_MspInit+0x84>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d12b      	bne.n	80050ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	4b18      	ldr	r3, [pc, #96]	@ (80050fc <HAL_UART_MspInit+0x88>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	4a17      	ldr	r2, [pc, #92]	@ (80050fc <HAL_UART_MspInit+0x88>)
 80050a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050a6:	4b15      	ldr	r3, [pc, #84]	@ (80050fc <HAL_UART_MspInit+0x88>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	4b11      	ldr	r3, [pc, #68]	@ (80050fc <HAL_UART_MspInit+0x88>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ba:	4a10      	ldr	r2, [pc, #64]	@ (80050fc <HAL_UART_MspInit+0x88>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050c2:	4b0e      	ldr	r3, [pc, #56]	@ (80050fc <HAL_UART_MspInit+0x88>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80050ce:	230c      	movs	r3, #12
 80050d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d2:	2302      	movs	r3, #2
 80050d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050da:	2303      	movs	r3, #3
 80050dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050de:	2307      	movs	r3, #7
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e2:	f107 0314 	add.w	r3, r7, #20
 80050e6:	4619      	mov	r1, r3
 80050e8:	4805      	ldr	r0, [pc, #20]	@ (8005100 <HAL_UART_MspInit+0x8c>)
 80050ea:	f000 fd99 	bl	8005c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80050ee:	bf00      	nop
 80050f0:	3728      	adds	r7, #40	@ 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40004400 	.word	0x40004400
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020000 	.word	0x40020000

08005104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800513c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005108:	f7ff fe1e 	bl	8004d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800510c:	480c      	ldr	r0, [pc, #48]	@ (8005140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800510e:	490d      	ldr	r1, [pc, #52]	@ (8005144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005110:	4a0d      	ldr	r2, [pc, #52]	@ (8005148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005114:	e002      	b.n	800511c <LoopCopyDataInit>

08005116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800511a:	3304      	adds	r3, #4

0800511c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800511c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800511e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005120:	d3f9      	bcc.n	8005116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005122:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005124:	4c0a      	ldr	r4, [pc, #40]	@ (8005150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005128:	e001      	b.n	800512e <LoopFillZerobss>

0800512a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800512a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800512c:	3204      	adds	r2, #4

0800512e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800512e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005130:	d3fb      	bcc.n	800512a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005132:	f008 f917 	bl	800d364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005136:	f7fe faab 	bl	8003690 <main>
  bx  lr    
 800513a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800513c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005144:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8005148:	08012c28 	.word	0x08012c28
  ldr r2, =_sbss
 800514c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005150:	2000123c 	.word	0x2000123c

08005154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005154:	e7fe      	b.n	8005154 <ADC_IRQHandler>
	...

08005158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800515c:	4b0e      	ldr	r3, [pc, #56]	@ (8005198 <HAL_Init+0x40>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a0d      	ldr	r2, [pc, #52]	@ (8005198 <HAL_Init+0x40>)
 8005162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <HAL_Init+0x40>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a0a      	ldr	r2, [pc, #40]	@ (8005198 <HAL_Init+0x40>)
 800516e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005174:	4b08      	ldr	r3, [pc, #32]	@ (8005198 <HAL_Init+0x40>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a07      	ldr	r2, [pc, #28]	@ (8005198 <HAL_Init+0x40>)
 800517a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800517e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005180:	2003      	movs	r0, #3
 8005182:	f000 f989 	bl	8005498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005186:	200f      	movs	r0, #15
 8005188:	f000 f808 	bl	800519c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800518c:	f7ff fcae 	bl	8004aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40023c00 	.word	0x40023c00

0800519c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051a4:	4b12      	ldr	r3, [pc, #72]	@ (80051f0 <HAL_InitTick+0x54>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b12      	ldr	r3, [pc, #72]	@ (80051f4 <HAL_InitTick+0x58>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	4619      	mov	r1, r3
 80051ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f9b3 	bl	8005526 <HAL_SYSTICK_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e00e      	b.n	80051e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b0f      	cmp	r3, #15
 80051ce:	d80a      	bhi.n	80051e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051d0:	2200      	movs	r2, #0
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295
 80051d8:	f000 f969 	bl	80054ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051dc:	4a06      	ldr	r2, [pc, #24]	@ (80051f8 <HAL_InitTick+0x5c>)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e000      	b.n	80051e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000010 	.word	0x20000010
 80051f4:	20000018 	.word	0x20000018
 80051f8:	20000014 	.word	0x20000014

080051fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005200:	4b06      	ldr	r3, [pc, #24]	@ (800521c <HAL_IncTick+0x20>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <HAL_IncTick+0x24>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4413      	add	r3, r2
 800520c:	4a04      	ldr	r2, [pc, #16]	@ (8005220 <HAL_IncTick+0x24>)
 800520e:	6013      	str	r3, [r2, #0]
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000018 	.word	0x20000018
 8005220:	200010a4 	.word	0x200010a4

08005224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return uwTick;
 8005228:	4b03      	ldr	r3, [pc, #12]	@ (8005238 <HAL_GetTick+0x14>)
 800522a:	681b      	ldr	r3, [r3, #0]
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	200010a4 	.word	0x200010a4

0800523c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005244:	f7ff ffee 	bl	8005224 <HAL_GetTick>
 8005248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d005      	beq.n	8005262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005256:	4b0a      	ldr	r3, [pc, #40]	@ (8005280 <HAL_Delay+0x44>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005262:	bf00      	nop
 8005264:	f7ff ffde 	bl	8005224 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d8f7      	bhi.n	8005264 <HAL_Delay+0x28>
  {
  }
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000018 	.word	0x20000018

08005284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005294:	4b0c      	ldr	r3, [pc, #48]	@ (80052c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052a0:	4013      	ands	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052b6:	4a04      	ldr	r2, [pc, #16]	@ (80052c8 <__NVIC_SetPriorityGrouping+0x44>)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	60d3      	str	r3, [r2, #12]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	e000ed00 	.word	0xe000ed00

080052cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052d0:	4b04      	ldr	r3, [pc, #16]	@ (80052e4 <__NVIC_GetPriorityGrouping+0x18>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	0a1b      	lsrs	r3, r3, #8
 80052d6:	f003 0307 	and.w	r3, r3, #7
}
 80052da:	4618      	mov	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	e000ed00 	.word	0xe000ed00

080052e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	db0b      	blt.n	8005312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	f003 021f 	and.w	r2, r3, #31
 8005300:	4907      	ldr	r1, [pc, #28]	@ (8005320 <__NVIC_EnableIRQ+0x38>)
 8005302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	2001      	movs	r0, #1
 800530a:	fa00 f202 	lsl.w	r2, r0, r2
 800530e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	e000e100 	.word	0xe000e100

08005324 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800532e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005332:	2b00      	cmp	r3, #0
 8005334:	db12      	blt.n	800535c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	f003 021f 	and.w	r2, r3, #31
 800533c:	490a      	ldr	r1, [pc, #40]	@ (8005368 <__NVIC_DisableIRQ+0x44>)
 800533e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2001      	movs	r0, #1
 8005346:	fa00 f202 	lsl.w	r2, r0, r2
 800534a:	3320      	adds	r3, #32
 800534c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005350:	f3bf 8f4f 	dsb	sy
}
 8005354:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005356:	f3bf 8f6f 	isb	sy
}
 800535a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	e000e100 	.word	0xe000e100

0800536c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	6039      	str	r1, [r7, #0]
 8005376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537c:	2b00      	cmp	r3, #0
 800537e:	db0a      	blt.n	8005396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	490c      	ldr	r1, [pc, #48]	@ (80053b8 <__NVIC_SetPriority+0x4c>)
 8005386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538a:	0112      	lsls	r2, r2, #4
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	440b      	add	r3, r1
 8005390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005394:	e00a      	b.n	80053ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	4908      	ldr	r1, [pc, #32]	@ (80053bc <__NVIC_SetPriority+0x50>)
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	3b04      	subs	r3, #4
 80053a4:	0112      	lsls	r2, r2, #4
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	440b      	add	r3, r1
 80053aa:	761a      	strb	r2, [r3, #24]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000e100 	.word	0xe000e100
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b089      	sub	sp, #36	@ 0x24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f1c3 0307 	rsb	r3, r3, #7
 80053da:	2b04      	cmp	r3, #4
 80053dc:	bf28      	it	cs
 80053de:	2304      	movcs	r3, #4
 80053e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d902      	bls.n	80053f0 <NVIC_EncodePriority+0x30>
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3b03      	subs	r3, #3
 80053ee:	e000      	b.n	80053f2 <NVIC_EncodePriority+0x32>
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f4:	f04f 32ff 	mov.w	r2, #4294967295
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43da      	mvns	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	401a      	ands	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005408:	f04f 31ff 	mov.w	r1, #4294967295
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	43d9      	mvns	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005418:	4313      	orrs	r3, r2
         );
}
 800541a:	4618      	mov	r0, r3
 800541c:	3724      	adds	r7, #36	@ 0x24
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800542c:	f3bf 8f4f 	dsb	sy
}
 8005430:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005432:	4b06      	ldr	r3, [pc, #24]	@ (800544c <__NVIC_SystemReset+0x24>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800543a:	4904      	ldr	r1, [pc, #16]	@ (800544c <__NVIC_SystemReset+0x24>)
 800543c:	4b04      	ldr	r3, [pc, #16]	@ (8005450 <__NVIC_SystemReset+0x28>)
 800543e:	4313      	orrs	r3, r2
 8005440:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005442:	f3bf 8f4f 	dsb	sy
}
 8005446:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <__NVIC_SystemReset+0x20>
 800544c:	e000ed00 	.word	0xe000ed00
 8005450:	05fa0004 	.word	0x05fa0004

08005454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3b01      	subs	r3, #1
 8005460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005464:	d301      	bcc.n	800546a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005466:	2301      	movs	r3, #1
 8005468:	e00f      	b.n	800548a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800546a:	4a0a      	ldr	r2, [pc, #40]	@ (8005494 <SysTick_Config+0x40>)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3b01      	subs	r3, #1
 8005470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005472:	210f      	movs	r1, #15
 8005474:	f04f 30ff 	mov.w	r0, #4294967295
 8005478:	f7ff ff78 	bl	800536c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800547c:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <SysTick_Config+0x40>)
 800547e:	2200      	movs	r2, #0
 8005480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005482:	4b04      	ldr	r3, [pc, #16]	@ (8005494 <SysTick_Config+0x40>)
 8005484:	2207      	movs	r2, #7
 8005486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	e000e010 	.word	0xe000e010

08005498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff feef 	bl	8005284 <__NVIC_SetPriorityGrouping>
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b086      	sub	sp, #24
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	4603      	mov	r3, r0
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054c0:	f7ff ff04 	bl	80052cc <__NVIC_GetPriorityGrouping>
 80054c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	6978      	ldr	r0, [r7, #20]
 80054cc:	f7ff ff78 	bl	80053c0 <NVIC_EncodePriority>
 80054d0:	4602      	mov	r2, r0
 80054d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff ff47 	bl	800536c <__NVIC_SetPriority>
}
 80054de:	bf00      	nop
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	4603      	mov	r3, r0
 80054ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fef7 	bl	80052e8 <__NVIC_EnableIRQ>
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	4603      	mov	r3, r0
 800550a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800550c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ff07 	bl	8005324 <__NVIC_DisableIRQ>
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005522:	f7ff ff81 	bl	8005428 <__NVIC_SystemReset>

08005526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff ff90 	bl	8005454 <SysTick_Config>
 8005534:	4603      	mov	r3, r0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800554c:	f7ff fe6a 	bl	8005224 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e099      	b.n	8005690 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800557c:	e00f      	b.n	800559e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800557e:	f7ff fe51 	bl	8005224 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b05      	cmp	r3, #5
 800558a:	d908      	bls.n	800559e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2203      	movs	r2, #3
 8005596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e078      	b.n	8005690 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e8      	bne.n	800557e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4b38      	ldr	r3, [pc, #224]	@ (8005698 <HAL_DMA_Init+0x158>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d107      	bne.n	8005608 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005600:	4313      	orrs	r3, r2
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0307 	bic.w	r3, r3, #7
 800561e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	2b04      	cmp	r3, #4
 8005630:	d117      	bne.n	8005662 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00e      	beq.n	8005662 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fa6f 	bl	8005b28 <DMA_CheckFifoParam>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2240      	movs	r2, #64	@ 0x40
 8005654:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800565e:	2301      	movs	r3, #1
 8005660:	e016      	b.n	8005690 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa26 	bl	8005abc <DMA_CalcBaseAndBitshift>
 8005670:	4603      	mov	r3, r0
 8005672:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005678:	223f      	movs	r2, #63	@ 0x3f
 800567a:	409a      	lsls	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	f010803f 	.word	0xf010803f

0800569c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_DMA_Start_IT+0x26>
 80056be:	2302      	movs	r3, #2
 80056c0:	e040      	b.n	8005744 <HAL_DMA_Start_IT+0xa8>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d12f      	bne.n	8005736 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f9b8 	bl	8005a60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f4:	223f      	movs	r2, #63	@ 0x3f
 80056f6:	409a      	lsls	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0216 	orr.w	r2, r2, #22
 800570a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0208 	orr.w	r2, r2, #8
 8005722:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e005      	b.n	8005742 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800573e:	2302      	movs	r3, #2
 8005740:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005758:	4b8e      	ldr	r3, [pc, #568]	@ (8005994 <HAL_DMA_IRQHandler+0x248>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a8e      	ldr	r2, [pc, #568]	@ (8005998 <HAL_DMA_IRQHandler+0x24c>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	0a9b      	lsrs	r3, r3, #10
 8005764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005776:	2208      	movs	r2, #8
 8005778:	409a      	lsls	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4013      	ands	r3, r2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01a      	beq.n	80057b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d013      	beq.n	80057b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a4:	2208      	movs	r2, #8
 80057a6:	409a      	lsls	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057bc:	2201      	movs	r2, #1
 80057be:	409a      	lsls	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d012      	beq.n	80057ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057da:	2201      	movs	r2, #1
 80057dc:	409a      	lsls	r2, r3
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e6:	f043 0202 	orr.w	r2, r3, #2
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f2:	2204      	movs	r2, #4
 80057f4:	409a      	lsls	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d012      	beq.n	8005824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005810:	2204      	movs	r2, #4
 8005812:	409a      	lsls	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581c:	f043 0204 	orr.w	r2, r3, #4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005828:	2210      	movs	r2, #16
 800582a:	409a      	lsls	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d043      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d03c      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005846:	2210      	movs	r2, #16
 8005848:	409a      	lsls	r2, r3
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d018      	beq.n	800588e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d108      	bne.n	800587c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d024      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	e01f      	b.n	80058bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01b      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4798      	blx	r3
 800588c:	e016      	b.n	80058bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d107      	bne.n	80058ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0208 	bic.w	r2, r2, #8
 80058aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c0:	2220      	movs	r2, #32
 80058c2:	409a      	lsls	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 808f 	beq.w	80059ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8087 	beq.w	80059ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e2:	2220      	movs	r2, #32
 80058e4:	409a      	lsls	r2, r3
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	d136      	bne.n	8005964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0216 	bic.w	r2, r2, #22
 8005904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <HAL_DMA_IRQHandler+0x1da>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0208 	bic.w	r2, r2, #8
 8005934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593a:	223f      	movs	r2, #63	@ 0x3f
 800593c:	409a      	lsls	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	2b00      	cmp	r3, #0
 8005958:	d07e      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	4798      	blx	r3
        }
        return;
 8005962:	e079      	b.n	8005a58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01d      	beq.n	80059ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10d      	bne.n	800599c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005984:	2b00      	cmp	r3, #0
 8005986:	d031      	beq.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
 8005990:	e02c      	b.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
 8005992:	bf00      	nop
 8005994:	20000010 	.word	0x20000010
 8005998:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d023      	beq.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4798      	blx	r3
 80059ac:	e01e      	b.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10f      	bne.n	80059dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0210 	bic.w	r2, r2, #16
 80059ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d032      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2205      	movs	r2, #5
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d307      	bcc.n	8005a34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f2      	bne.n	8005a18 <HAL_DMA_IRQHandler+0x2cc>
 8005a32:	e000      	b.n	8005a36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
 8005a56:	e000      	b.n	8005a5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a58:	bf00      	nop
    }
  }
}
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b40      	cmp	r3, #64	@ 0x40
 8005a8c:	d108      	bne.n	8005aa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a9e:	e007      	b.n	8005ab0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	3b10      	subs	r3, #16
 8005acc:	4a14      	ldr	r2, [pc, #80]	@ (8005b20 <DMA_CalcBaseAndBitshift+0x64>)
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	091b      	lsrs	r3, r3, #4
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ad6:	4a13      	ldr	r2, [pc, #76]	@ (8005b24 <DMA_CalcBaseAndBitshift+0x68>)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d909      	bls.n	8005afe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	659a      	str	r2, [r3, #88]	@ 0x58
 8005afc:	e007      	b.n	8005b0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	aaaaaaab 	.word	0xaaaaaaab
 8005b24:	0801270c 	.word	0x0801270c

08005b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11f      	bne.n	8005b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d856      	bhi.n	8005bf6 <DMA_CheckFifoParam+0xce>
 8005b48:	a201      	add	r2, pc, #4	@ (adr r2, 8005b50 <DMA_CheckFifoParam+0x28>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b73 	.word	0x08005b73
 8005b58:	08005b61 	.word	0x08005b61
 8005b5c:	08005bf7 	.word	0x08005bf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d046      	beq.n	8005bfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b70:	e043      	b.n	8005bfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b7a:	d140      	bne.n	8005bfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b80:	e03d      	b.n	8005bfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b8a:	d121      	bne.n	8005bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d837      	bhi.n	8005c02 <DMA_CheckFifoParam+0xda>
 8005b92:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <DMA_CheckFifoParam+0x70>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005baf 	.word	0x08005baf
 8005ba0:	08005ba9 	.word	0x08005ba9
 8005ba4:	08005bc1 	.word	0x08005bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	73fb      	strb	r3, [r7, #15]
      break;
 8005bac:	e030      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d025      	beq.n	8005c06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bbe:	e022      	b.n	8005c06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bc8:	d11f      	bne.n	8005c0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bce:	e01c      	b.n	8005c0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d903      	bls.n	8005bde <DMA_CheckFifoParam+0xb6>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d003      	beq.n	8005be4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bdc:	e018      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
      break;
 8005be2:	e015      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf4:	e00b      	b.n	8005c0e <DMA_CheckFifoParam+0xe6>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e00a      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005bfa:	bf00      	nop
 8005bfc:	e008      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e006      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005c02:	bf00      	nop
 8005c04:	e004      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <DMA_CheckFifoParam+0xe8>
      break;
 8005c0e:	bf00      	nop
    }
  } 
  
  return status; 
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop

08005c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b089      	sub	sp, #36	@ 0x24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	e165      	b.n	8005f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	f040 8154 	bne.w	8005f02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d005      	beq.n	8005c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d130      	bne.n	8005cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4013      	ands	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ca8:	2201      	movs	r2, #1
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 0201 	and.w	r2, r3, #1
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d017      	beq.n	8005d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	2203      	movs	r2, #3
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d123      	bne.n	8005d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	08da      	lsrs	r2, r3, #3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3208      	adds	r2, #8
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	220f      	movs	r2, #15
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	08da      	lsrs	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3208      	adds	r2, #8
 8005d5e:	69b9      	ldr	r1, [r7, #24]
 8005d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	2203      	movs	r2, #3
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	43db      	mvns	r3, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 0203 	and.w	r2, r3, #3
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 80ae 	beq.w	8005f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	4b5d      	ldr	r3, [pc, #372]	@ (8005f20 <HAL_GPIO_Init+0x300>)
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	4a5c      	ldr	r2, [pc, #368]	@ (8005f20 <HAL_GPIO_Init+0x300>)
 8005db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005db6:	4b5a      	ldr	r3, [pc, #360]	@ (8005f20 <HAL_GPIO_Init+0x300>)
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dc2:	4a58      	ldr	r2, [pc, #352]	@ (8005f24 <HAL_GPIO_Init+0x304>)
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	3302      	adds	r3, #2
 8005dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	220f      	movs	r2, #15
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43db      	mvns	r3, r3
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a4f      	ldr	r2, [pc, #316]	@ (8005f28 <HAL_GPIO_Init+0x308>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d025      	beq.n	8005e3a <HAL_GPIO_Init+0x21a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a4e      	ldr	r2, [pc, #312]	@ (8005f2c <HAL_GPIO_Init+0x30c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01f      	beq.n	8005e36 <HAL_GPIO_Init+0x216>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a4d      	ldr	r2, [pc, #308]	@ (8005f30 <HAL_GPIO_Init+0x310>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d019      	beq.n	8005e32 <HAL_GPIO_Init+0x212>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a4c      	ldr	r2, [pc, #304]	@ (8005f34 <HAL_GPIO_Init+0x314>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <HAL_GPIO_Init+0x20e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a4b      	ldr	r2, [pc, #300]	@ (8005f38 <HAL_GPIO_Init+0x318>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00d      	beq.n	8005e2a <HAL_GPIO_Init+0x20a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a4a      	ldr	r2, [pc, #296]	@ (8005f3c <HAL_GPIO_Init+0x31c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <HAL_GPIO_Init+0x206>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a49      	ldr	r2, [pc, #292]	@ (8005f40 <HAL_GPIO_Init+0x320>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_GPIO_Init+0x202>
 8005e1e:	2306      	movs	r3, #6
 8005e20:	e00c      	b.n	8005e3c <HAL_GPIO_Init+0x21c>
 8005e22:	2307      	movs	r3, #7
 8005e24:	e00a      	b.n	8005e3c <HAL_GPIO_Init+0x21c>
 8005e26:	2305      	movs	r3, #5
 8005e28:	e008      	b.n	8005e3c <HAL_GPIO_Init+0x21c>
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	e006      	b.n	8005e3c <HAL_GPIO_Init+0x21c>
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e004      	b.n	8005e3c <HAL_GPIO_Init+0x21c>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e002      	b.n	8005e3c <HAL_GPIO_Init+0x21c>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <HAL_GPIO_Init+0x21c>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	f002 0203 	and.w	r2, r2, #3
 8005e42:	0092      	lsls	r2, r2, #2
 8005e44:	4093      	lsls	r3, r2
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e4c:	4935      	ldr	r1, [pc, #212]	@ (8005f24 <HAL_GPIO_Init+0x304>)
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	089b      	lsrs	r3, r3, #2
 8005e52:	3302      	adds	r3, #2
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f44 <HAL_GPIO_Init+0x324>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	43db      	mvns	r3, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4013      	ands	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e7e:	4a31      	ldr	r2, [pc, #196]	@ (8005f44 <HAL_GPIO_Init+0x324>)
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e84:	4b2f      	ldr	r3, [pc, #188]	@ (8005f44 <HAL_GPIO_Init+0x324>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4013      	ands	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ea8:	4a26      	ldr	r2, [pc, #152]	@ (8005f44 <HAL_GPIO_Init+0x324>)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005eae:	4b25      	ldr	r3, [pc, #148]	@ (8005f44 <HAL_GPIO_Init+0x324>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f44 <HAL_GPIO_Init+0x324>)
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f44 <HAL_GPIO_Init+0x324>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005efc:	4a11      	ldr	r2, [pc, #68]	@ (8005f44 <HAL_GPIO_Init+0x324>)
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	3301      	adds	r3, #1
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b0f      	cmp	r3, #15
 8005f0c:	f67f ae96 	bls.w	8005c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	3724      	adds	r7, #36	@ 0x24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40013800 	.word	0x40013800
 8005f28:	40020000 	.word	0x40020000
 8005f2c:	40020400 	.word	0x40020400
 8005f30:	40020800 	.word	0x40020800
 8005f34:	40020c00 	.word	0x40020c00
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	40021400 	.word	0x40021400
 8005f40:	40021800 	.word	0x40021800
 8005f44:	40013c00 	.word	0x40013c00

08005f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	887b      	ldrh	r3, [r7, #2]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e001      	b.n	8005f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	807b      	strh	r3, [r7, #2]
 8005f84:	4613      	mov	r3, r2
 8005f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f88:	787b      	ldrb	r3, [r7, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f8e:	887a      	ldrh	r2, [r7, #2]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f94:	e003      	b.n	8005f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f96:	887b      	ldrh	r3, [r7, #2]
 8005f98:	041a      	lsls	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	619a      	str	r2, [r3, #24]
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
	...

08005fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fb6:	4b08      	ldr	r3, [pc, #32]	@ (8005fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d006      	beq.n	8005fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fc2:	4a05      	ldr	r2, [pc, #20]	@ (8005fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd ff60 	bl	8003e90 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40013c00 	.word	0x40013c00

08005fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0cc      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ff0:	4b68      	ldr	r3, [pc, #416]	@ (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d90c      	bls.n	8006018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffe:	4b65      	ldr	r3, [pc, #404]	@ (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	4b63      	ldr	r3, [pc, #396]	@ (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0b8      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d020      	beq.n	8006066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006030:	4b59      	ldr	r3, [pc, #356]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	4a58      	ldr	r2, [pc, #352]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800603a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006048:	4b53      	ldr	r3, [pc, #332]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	4a52      	ldr	r2, [pc, #328]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006054:	4b50      	ldr	r3, [pc, #320]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	494d      	ldr	r1, [pc, #308]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	4313      	orrs	r3, r2
 8006064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d044      	beq.n	80060fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d107      	bne.n	800608a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607a:	4b47      	ldr	r3, [pc, #284]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d119      	bne.n	80060ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e07f      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d003      	beq.n	800609a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006096:	2b03      	cmp	r3, #3
 8006098:	d107      	bne.n	80060aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800609a:	4b3f      	ldr	r3, [pc, #252]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e06f      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e067      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ba:	4b37      	ldr	r3, [pc, #220]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f023 0203 	bic.w	r2, r3, #3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4934      	ldr	r1, [pc, #208]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060cc:	f7ff f8aa 	bl	8005224 <HAL_GetTick>
 80060d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d4:	f7ff f8a6 	bl	8005224 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e04f      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ea:	4b2b      	ldr	r3, [pc, #172]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 020c 	and.w	r2, r3, #12
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d1eb      	bne.n	80060d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060fc:	4b25      	ldr	r3, [pc, #148]	@ (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d20c      	bcs.n	8006124 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610a:	4b22      	ldr	r3, [pc, #136]	@ (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006112:	4b20      	ldr	r3, [pc, #128]	@ (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d001      	beq.n	8006124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e032      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006130:	4b19      	ldr	r3, [pc, #100]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4916      	ldr	r1, [pc, #88]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800614e:	4b12      	ldr	r3, [pc, #72]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	490e      	ldr	r1, [pc, #56]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006162:	f000 f855 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 8006166:	4602      	mov	r2, r0
 8006168:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	091b      	lsrs	r3, r3, #4
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	490a      	ldr	r1, [pc, #40]	@ (800619c <HAL_RCC_ClockConfig+0x1c0>)
 8006174:	5ccb      	ldrb	r3, [r1, r3]
 8006176:	fa22 f303 	lsr.w	r3, r2, r3
 800617a:	4a09      	ldr	r2, [pc, #36]	@ (80061a0 <HAL_RCC_ClockConfig+0x1c4>)
 800617c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800617e:	4b09      	ldr	r3, [pc, #36]	@ (80061a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff f80a 	bl	800519c <HAL_InitTick>

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40023c00 	.word	0x40023c00
 8006198:	40023800 	.word	0x40023800
 800619c:	080126f4 	.word	0x080126f4
 80061a0:	20000010 	.word	0x20000010
 80061a4:	20000014 	.word	0x20000014

080061a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061ac:	4b03      	ldr	r3, [pc, #12]	@ (80061bc <HAL_RCC_GetHCLKFreq+0x14>)
 80061ae:	681b      	ldr	r3, [r3, #0]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20000010 	.word	0x20000010

080061c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061c4:	f7ff fff0 	bl	80061a8 <HAL_RCC_GetHCLKFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b05      	ldr	r3, [pc, #20]	@ (80061e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	0a9b      	lsrs	r3, r3, #10
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	4903      	ldr	r1, [pc, #12]	@ (80061e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40023800 	.word	0x40023800
 80061e4:	08012704 	.word	0x08012704

080061e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061ec:	f7ff ffdc 	bl	80061a8 <HAL_RCC_GetHCLKFreq>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b05      	ldr	r3, [pc, #20]	@ (8006208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	0b5b      	lsrs	r3, r3, #13
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	4903      	ldr	r1, [pc, #12]	@ (800620c <HAL_RCC_GetPCLK2Freq+0x24>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006204:	4618      	mov	r0, r3
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40023800 	.word	0x40023800
 800620c:	08012704 	.word	0x08012704

08006210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006214:	b0a6      	sub	sp, #152	@ 0x98
 8006216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006236:	4bc8      	ldr	r3, [pc, #800]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 030c 	and.w	r3, r3, #12
 800623e:	2b0c      	cmp	r3, #12
 8006240:	f200 817e 	bhi.w	8006540 <HAL_RCC_GetSysClockFreq+0x330>
 8006244:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	08006281 	.word	0x08006281
 8006250:	08006541 	.word	0x08006541
 8006254:	08006541 	.word	0x08006541
 8006258:	08006541 	.word	0x08006541
 800625c:	08006289 	.word	0x08006289
 8006260:	08006541 	.word	0x08006541
 8006264:	08006541 	.word	0x08006541
 8006268:	08006541 	.word	0x08006541
 800626c:	08006291 	.word	0x08006291
 8006270:	08006541 	.word	0x08006541
 8006274:	08006541 	.word	0x08006541
 8006278:	08006541 	.word	0x08006541
 800627c:	080063fb 	.word	0x080063fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006280:	4bb6      	ldr	r3, [pc, #728]	@ (800655c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006286:	e15f      	b.n	8006548 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006288:	4bb5      	ldr	r3, [pc, #724]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x350>)
 800628a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800628e:	e15b      	b.n	8006548 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006290:	4bb1      	ldr	r3, [pc, #708]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006298:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800629c:	4bae      	ldr	r3, [pc, #696]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d031      	beq.n	800630c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a8:	4bab      	ldr	r3, [pc, #684]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	099b      	lsrs	r3, r3, #6
 80062ae:	2200      	movs	r2, #0
 80062b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80062bc:	2300      	movs	r3, #0
 80062be:	667b      	str	r3, [r7, #100]	@ 0x64
 80062c0:	4ba7      	ldr	r3, [pc, #668]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x350>)
 80062c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80062c6:	462a      	mov	r2, r5
 80062c8:	fb03 f202 	mul.w	r2, r3, r2
 80062cc:	2300      	movs	r3, #0
 80062ce:	4621      	mov	r1, r4
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	4413      	add	r3, r2
 80062d6:	4aa2      	ldr	r2, [pc, #648]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x350>)
 80062d8:	4621      	mov	r1, r4
 80062da:	fba1 1202 	umull	r1, r2, r1, r2
 80062de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80062e0:	460a      	mov	r2, r1
 80062e2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80062e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80062e6:	4413      	add	r3, r2
 80062e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ee:	2200      	movs	r2, #0
 80062f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80062f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80062fc:	f7fa fd44 	bl	8000d88 <__aeabi_uldivmod>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4613      	mov	r3, r2
 8006306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800630a:	e064      	b.n	80063d6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800630c:	4b92      	ldr	r3, [pc, #584]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	099b      	lsrs	r3, r3, #6
 8006312:	2200      	movs	r2, #0
 8006314:	653b      	str	r3, [r7, #80]	@ 0x50
 8006316:	657a      	str	r2, [r7, #84]	@ 0x54
 8006318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800631a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006320:	2300      	movs	r3, #0
 8006322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006324:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006328:	4622      	mov	r2, r4
 800632a:	462b      	mov	r3, r5
 800632c:	f04f 0000 	mov.w	r0, #0
 8006330:	f04f 0100 	mov.w	r1, #0
 8006334:	0159      	lsls	r1, r3, #5
 8006336:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800633a:	0150      	lsls	r0, r2, #5
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4621      	mov	r1, r4
 8006342:	1a51      	subs	r1, r2, r1
 8006344:	6139      	str	r1, [r7, #16]
 8006346:	4629      	mov	r1, r5
 8006348:	eb63 0301 	sbc.w	r3, r3, r1
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800635a:	4659      	mov	r1, fp
 800635c:	018b      	lsls	r3, r1, #6
 800635e:	4651      	mov	r1, sl
 8006360:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006364:	4651      	mov	r1, sl
 8006366:	018a      	lsls	r2, r1, #6
 8006368:	4651      	mov	r1, sl
 800636a:	ebb2 0801 	subs.w	r8, r2, r1
 800636e:	4659      	mov	r1, fp
 8006370:	eb63 0901 	sbc.w	r9, r3, r1
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006380:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006384:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006388:	4690      	mov	r8, r2
 800638a:	4699      	mov	r9, r3
 800638c:	4623      	mov	r3, r4
 800638e:	eb18 0303 	adds.w	r3, r8, r3
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	462b      	mov	r3, r5
 8006396:	eb49 0303 	adc.w	r3, r9, r3
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063a8:	4629      	mov	r1, r5
 80063aa:	028b      	lsls	r3, r1, #10
 80063ac:	4621      	mov	r1, r4
 80063ae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063b2:	4621      	mov	r1, r4
 80063b4:	028a      	lsls	r2, r1, #10
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063be:	2200      	movs	r2, #0
 80063c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80063c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80063c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063c8:	f7fa fcde 	bl	8000d88 <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4613      	mov	r3, r2
 80063d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063d6:	4b60      	ldr	r3, [pc, #384]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	0c1b      	lsrs	r3, r3, #16
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	3301      	adds	r3, #1
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80063e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80063f8:	e0a6      	b.n	8006548 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063fa:	4b57      	ldr	r3, [pc, #348]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006406:	4b54      	ldr	r3, [pc, #336]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d02a      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006412:	4b51      	ldr	r3, [pc, #324]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	099b      	lsrs	r3, r3, #6
 8006418:	2200      	movs	r2, #0
 800641a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800641c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800641e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006420:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006424:	2100      	movs	r1, #0
 8006426:	4b4e      	ldr	r3, [pc, #312]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x350>)
 8006428:	fb03 f201 	mul.w	r2, r3, r1
 800642c:	2300      	movs	r3, #0
 800642e:	fb00 f303 	mul.w	r3, r0, r3
 8006432:	4413      	add	r3, r2
 8006434:	4a4a      	ldr	r2, [pc, #296]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x350>)
 8006436:	fba0 1202 	umull	r1, r2, r0, r2
 800643a:	677a      	str	r2, [r7, #116]	@ 0x74
 800643c:	460a      	mov	r2, r1
 800643e:	673a      	str	r2, [r7, #112]	@ 0x70
 8006440:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006442:	4413      	add	r3, r2
 8006444:	677b      	str	r3, [r7, #116]	@ 0x74
 8006446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800644a:	2200      	movs	r2, #0
 800644c:	633b      	str	r3, [r7, #48]	@ 0x30
 800644e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006450:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006454:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006458:	f7fa fc96 	bl	8000d88 <__aeabi_uldivmod>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4613      	mov	r3, r2
 8006462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006466:	e05b      	b.n	8006520 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006468:	4b3b      	ldr	r3, [pc, #236]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	099b      	lsrs	r3, r3, #6
 800646e:	2200      	movs	r2, #0
 8006470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	623b      	str	r3, [r7, #32]
 800647c:	2300      	movs	r3, #0
 800647e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006484:	4642      	mov	r2, r8
 8006486:	464b      	mov	r3, r9
 8006488:	f04f 0000 	mov.w	r0, #0
 800648c:	f04f 0100 	mov.w	r1, #0
 8006490:	0159      	lsls	r1, r3, #5
 8006492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006496:	0150      	lsls	r0, r2, #5
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4641      	mov	r1, r8
 800649e:	ebb2 0a01 	subs.w	sl, r2, r1
 80064a2:	4649      	mov	r1, r9
 80064a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064bc:	ebb2 040a 	subs.w	r4, r2, sl
 80064c0:	eb63 050b 	sbc.w	r5, r3, fp
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	00eb      	lsls	r3, r5, #3
 80064ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064d2:	00e2      	lsls	r2, r4, #3
 80064d4:	4614      	mov	r4, r2
 80064d6:	461d      	mov	r5, r3
 80064d8:	4643      	mov	r3, r8
 80064da:	18e3      	adds	r3, r4, r3
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	464b      	mov	r3, r9
 80064e0:	eb45 0303 	adc.w	r3, r5, r3
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064f2:	4629      	mov	r1, r5
 80064f4:	028b      	lsls	r3, r1, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064fc:	4621      	mov	r1, r4
 80064fe:	028a      	lsls	r2, r1, #10
 8006500:	4610      	mov	r0, r2
 8006502:	4619      	mov	r1, r3
 8006504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006508:	2200      	movs	r2, #0
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	61fa      	str	r2, [r7, #28]
 800650e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006512:	f7fa fc39 	bl	8000d88 <__aeabi_uldivmod>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4613      	mov	r3, r2
 800651c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006520:	4b0d      	ldr	r3, [pc, #52]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x348>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	0f1b      	lsrs	r3, r3, #28
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800652e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006532:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800653e:	e003      	b.n	8006548 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006540:	4b06      	ldr	r3, [pc, #24]	@ (800655c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006546:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006548:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800654c:	4618      	mov	r0, r3
 800654e:	3798      	adds	r7, #152	@ 0x98
 8006550:	46bd      	mov	sp, r7
 8006552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006556:	bf00      	nop
 8006558:	40023800 	.word	0x40023800
 800655c:	00f42400 	.word	0x00f42400
 8006560:	017d7840 	.word	0x017d7840

08006564 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e28d      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8083 	beq.w	800668a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006584:	4b94      	ldr	r3, [pc, #592]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 030c 	and.w	r3, r3, #12
 800658c:	2b04      	cmp	r3, #4
 800658e:	d019      	beq.n	80065c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006590:	4b91      	ldr	r3, [pc, #580]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 030c 	and.w	r3, r3, #12
        || \
 8006598:	2b08      	cmp	r3, #8
 800659a:	d106      	bne.n	80065aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800659c:	4b8e      	ldr	r3, [pc, #568]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065a8:	d00c      	beq.n	80065c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065aa:	4b8b      	ldr	r3, [pc, #556]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80065b2:	2b0c      	cmp	r3, #12
 80065b4:	d112      	bne.n	80065dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065b6:	4b88      	ldr	r3, [pc, #544]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065c2:	d10b      	bne.n	80065dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c4:	4b84      	ldr	r3, [pc, #528]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d05b      	beq.n	8006688 <HAL_RCC_OscConfig+0x124>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d157      	bne.n	8006688 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e25a      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e4:	d106      	bne.n	80065f4 <HAL_RCC_OscConfig+0x90>
 80065e6:	4b7c      	ldr	r3, [pc, #496]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a7b      	ldr	r2, [pc, #492]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80065ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	e01d      	b.n	8006630 <HAL_RCC_OscConfig+0xcc>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065fc:	d10c      	bne.n	8006618 <HAL_RCC_OscConfig+0xb4>
 80065fe:	4b76      	ldr	r3, [pc, #472]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a75      	ldr	r2, [pc, #468]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	4b73      	ldr	r3, [pc, #460]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a72      	ldr	r2, [pc, #456]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	e00b      	b.n	8006630 <HAL_RCC_OscConfig+0xcc>
 8006618:	4b6f      	ldr	r3, [pc, #444]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a6e      	ldr	r2, [pc, #440]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 800661e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	4b6c      	ldr	r3, [pc, #432]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a6b      	ldr	r2, [pc, #428]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 800662a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800662e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d013      	beq.n	8006660 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fe fdf4 	bl	8005224 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006640:	f7fe fdf0 	bl	8005224 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	@ 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e21f      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006652:	4b61      	ldr	r3, [pc, #388]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCC_OscConfig+0xdc>
 800665e:	e014      	b.n	800668a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7fe fde0 	bl	8005224 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006668:	f7fe fddc 	bl	8005224 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b64      	cmp	r3, #100	@ 0x64
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e20b      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667a:	4b57      	ldr	r3, [pc, #348]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x104>
 8006686:	e000      	b.n	800668a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d06f      	beq.n	8006776 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006696:	4b50      	ldr	r3, [pc, #320]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d017      	beq.n	80066d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80066a2:	4b4d      	ldr	r3, [pc, #308]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80066aa:	2b08      	cmp	r3, #8
 80066ac:	d105      	bne.n	80066ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80066ae:	4b4a      	ldr	r3, [pc, #296]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ba:	4b47      	ldr	r3, [pc, #284]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80066c2:	2b0c      	cmp	r3, #12
 80066c4:	d11c      	bne.n	8006700 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066c6:	4b44      	ldr	r3, [pc, #272]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d116      	bne.n	8006700 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066d2:	4b41      	ldr	r3, [pc, #260]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_RCC_OscConfig+0x186>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d001      	beq.n	80066ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e1d3      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ea:	4b3b      	ldr	r3, [pc, #236]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4937      	ldr	r1, [pc, #220]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066fe:	e03a      	b.n	8006776 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d020      	beq.n	800674a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006708:	4b34      	ldr	r3, [pc, #208]	@ (80067dc <HAL_RCC_OscConfig+0x278>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670e:	f7fe fd89 	bl	8005224 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006716:	f7fe fd85 	bl	8005224 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e1b4      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006728:	4b2b      	ldr	r3, [pc, #172]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006734:	4b28      	ldr	r3, [pc, #160]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	4925      	ldr	r1, [pc, #148]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 8006744:	4313      	orrs	r3, r2
 8006746:	600b      	str	r3, [r1, #0]
 8006748:	e015      	b.n	8006776 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674a:	4b24      	ldr	r3, [pc, #144]	@ (80067dc <HAL_RCC_OscConfig+0x278>)
 800674c:	2200      	movs	r2, #0
 800674e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fe fd68 	bl	8005224 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006758:	f7fe fd64 	bl	8005224 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e193      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676a:	4b1b      	ldr	r3, [pc, #108]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d036      	beq.n	80067f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800678a:	4b15      	ldr	r3, [pc, #84]	@ (80067e0 <HAL_RCC_OscConfig+0x27c>)
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006790:	f7fe fd48 	bl	8005224 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006798:	f7fe fd44 	bl	8005224 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e173      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067aa:	4b0b      	ldr	r3, [pc, #44]	@ (80067d8 <HAL_RCC_OscConfig+0x274>)
 80067ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f0      	beq.n	8006798 <HAL_RCC_OscConfig+0x234>
 80067b6:	e01b      	b.n	80067f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067b8:	4b09      	ldr	r3, [pc, #36]	@ (80067e0 <HAL_RCC_OscConfig+0x27c>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067be:	f7fe fd31 	bl	8005224 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c4:	e00e      	b.n	80067e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067c6:	f7fe fd2d 	bl	8005224 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d907      	bls.n	80067e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e15c      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
 80067d8:	40023800 	.word	0x40023800
 80067dc:	42470000 	.word	0x42470000
 80067e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e4:	4b8a      	ldr	r3, [pc, #552]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 80067e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1ea      	bne.n	80067c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 8097 	beq.w	800692c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067fe:	2300      	movs	r3, #0
 8006800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006802:	4b83      	ldr	r3, [pc, #524]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10f      	bne.n	800682e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	4b7f      	ldr	r3, [pc, #508]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006816:	4a7e      	ldr	r2, [pc, #504]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800681c:	6413      	str	r3, [r2, #64]	@ 0x40
 800681e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800682e:	4b79      	ldr	r3, [pc, #484]	@ (8006a14 <HAL_RCC_OscConfig+0x4b0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006836:	2b00      	cmp	r3, #0
 8006838:	d118      	bne.n	800686c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800683a:	4b76      	ldr	r3, [pc, #472]	@ (8006a14 <HAL_RCC_OscConfig+0x4b0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a75      	ldr	r2, [pc, #468]	@ (8006a14 <HAL_RCC_OscConfig+0x4b0>)
 8006840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006846:	f7fe fced 	bl	8005224 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800684e:	f7fe fce9 	bl	8005224 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e118      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006860:	4b6c      	ldr	r3, [pc, #432]	@ (8006a14 <HAL_RCC_OscConfig+0x4b0>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0f0      	beq.n	800684e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d106      	bne.n	8006882 <HAL_RCC_OscConfig+0x31e>
 8006874:	4b66      	ldr	r3, [pc, #408]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006878:	4a65      	ldr	r2, [pc, #404]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006880:	e01c      	b.n	80068bc <HAL_RCC_OscConfig+0x358>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b05      	cmp	r3, #5
 8006888:	d10c      	bne.n	80068a4 <HAL_RCC_OscConfig+0x340>
 800688a:	4b61      	ldr	r3, [pc, #388]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 800688c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688e:	4a60      	ldr	r2, [pc, #384]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006890:	f043 0304 	orr.w	r3, r3, #4
 8006894:	6713      	str	r3, [r2, #112]	@ 0x70
 8006896:	4b5e      	ldr	r3, [pc, #376]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689a:	4a5d      	ldr	r2, [pc, #372]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 800689c:	f043 0301 	orr.w	r3, r3, #1
 80068a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a2:	e00b      	b.n	80068bc <HAL_RCC_OscConfig+0x358>
 80068a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 80068a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a8:	4a59      	ldr	r2, [pc, #356]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b0:	4b57      	ldr	r3, [pc, #348]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b4:	4a56      	ldr	r2, [pc, #344]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 80068b6:	f023 0304 	bic.w	r3, r3, #4
 80068ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d015      	beq.n	80068f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c4:	f7fe fcae 	bl	8005224 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ca:	e00a      	b.n	80068e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fe fcaa 	bl	8005224 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e0d7      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e2:	4b4b      	ldr	r3, [pc, #300]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0ee      	beq.n	80068cc <HAL_RCC_OscConfig+0x368>
 80068ee:	e014      	b.n	800691a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f0:	f7fe fc98 	bl	8005224 <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f6:	e00a      	b.n	800690e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f8:	f7fe fc94 	bl	8005224 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006906:	4293      	cmp	r3, r2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e0c1      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800690e:	4b40      	ldr	r3, [pc, #256]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ee      	bne.n	80068f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d105      	bne.n	800692c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006920:	4b3b      	ldr	r3, [pc, #236]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006924:	4a3a      	ldr	r2, [pc, #232]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800692a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80ad 	beq.w	8006a90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006936:	4b36      	ldr	r3, [pc, #216]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 030c 	and.w	r3, r3, #12
 800693e:	2b08      	cmp	r3, #8
 8006940:	d060      	beq.n	8006a04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d145      	bne.n	80069d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694a:	4b33      	ldr	r3, [pc, #204]	@ (8006a18 <HAL_RCC_OscConfig+0x4b4>)
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006950:	f7fe fc68 	bl	8005224 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006958:	f7fe fc64 	bl	8005224 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e093      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696a:	4b29      	ldr	r3, [pc, #164]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1f0      	bne.n	8006958 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69da      	ldr	r2, [r3, #28]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006984:	019b      	lsls	r3, r3, #6
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698c:	085b      	lsrs	r3, r3, #1
 800698e:	3b01      	subs	r3, #1
 8006990:	041b      	lsls	r3, r3, #16
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006998:	061b      	lsls	r3, r3, #24
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a0:	071b      	lsls	r3, r3, #28
 80069a2:	491b      	ldr	r1, [pc, #108]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <HAL_RCC_OscConfig+0x4b4>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ae:	f7fe fc39 	bl	8005224 <HAL_GetTick>
 80069b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b4:	e008      	b.n	80069c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b6:	f7fe fc35 	bl	8005224 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e064      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c8:	4b11      	ldr	r3, [pc, #68]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0f0      	beq.n	80069b6 <HAL_RCC_OscConfig+0x452>
 80069d4:	e05c      	b.n	8006a90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d6:	4b10      	ldr	r3, [pc, #64]	@ (8006a18 <HAL_RCC_OscConfig+0x4b4>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fe fc22 	bl	8005224 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e4:	f7fe fc1e 	bl	8005224 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e04d      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f6:	4b06      	ldr	r3, [pc, #24]	@ (8006a10 <HAL_RCC_OscConfig+0x4ac>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0x480>
 8006a02:	e045      	b.n	8006a90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e040      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
 8006a10:	40023800 	.word	0x40023800
 8006a14:	40007000 	.word	0x40007000
 8006a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8006a9c <HAL_RCC_OscConfig+0x538>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d030      	beq.n	8006a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d129      	bne.n	8006a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d122      	bne.n	8006a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d119      	bne.n	8006a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a62:	085b      	lsrs	r3, r3, #1
 8006a64:	3b01      	subs	r3, #1
 8006a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d10f      	bne.n	8006a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40023800 	.word	0x40023800

08006aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e07b      	b.n	8006baa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d108      	bne.n	8006acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ac2:	d009      	beq.n	8006ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	61da      	str	r2, [r3, #28]
 8006aca:	e005      	b.n	8006ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fd fef6 	bl	80048e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5c:	ea42 0103 	orr.w	r1, r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b64:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	0c1b      	lsrs	r3, r3, #16
 8006b76:	f003 0104 	and.w	r1, r3, #4
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7e:	f003 0210 	and.w	r2, r3, #16
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b088      	sub	sp, #32
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bc2:	f7fe fb2f 	bl	8005224 <HAL_GetTick>
 8006bc6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
 8006bca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d001      	beq.n	8006bdc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e12a      	b.n	8006e32 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_SPI_Transmit+0x36>
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e122      	b.n	8006e32 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_SPI_Transmit+0x48>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e11b      	b.n	8006e32 <HAL_SPI_Transmit+0x280>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2203      	movs	r2, #3
 8006c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	88fa      	ldrh	r2, [r7, #6]
 8006c1a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c48:	d10f      	bne.n	8006c6a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c74:	2b40      	cmp	r3, #64	@ 0x40
 8006c76:	d007      	beq.n	8006c88 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c90:	d152      	bne.n	8006d38 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_SPI_Transmit+0xee>
 8006c9a:	8b7b      	ldrh	r3, [r7, #26]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d145      	bne.n	8006d2c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca4:	881a      	ldrh	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb0:	1c9a      	adds	r2, r3, #2
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cc4:	e032      	b.n	8006d2c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d112      	bne.n	8006cfa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd8:	881a      	ldrh	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce4:	1c9a      	adds	r2, r3, #2
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006cf8:	e018      	b.n	8006d2c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cfa:	f7fe fa93 	bl	8005224 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d803      	bhi.n	8006d12 <HAL_SPI_Transmit+0x160>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d10:	d102      	bne.n	8006d18 <HAL_SPI_Transmit+0x166>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d109      	bne.n	8006d2c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e082      	b.n	8006e32 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1c7      	bne.n	8006cc6 <HAL_SPI_Transmit+0x114>
 8006d36:	e053      	b.n	8006de0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <HAL_SPI_Transmit+0x194>
 8006d40:	8b7b      	ldrh	r3, [r7, #26]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d147      	bne.n	8006dd6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d6c:	e033      	b.n	8006dd6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d113      	bne.n	8006da4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	7812      	ldrb	r2, [r2, #0]
 8006d88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006da2:	e018      	b.n	8006dd6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da4:	f7fe fa3e 	bl	8005224 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d803      	bhi.n	8006dbc <HAL_SPI_Transmit+0x20a>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d102      	bne.n	8006dc2 <HAL_SPI_Transmit+0x210>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e02d      	b.n	8006e32 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1c6      	bne.n	8006d6e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fba1 	bl	800752c <SPI_EndRxTxTransaction>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006e30:	2300      	movs	r3, #0
  }
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3720      	adds	r7, #32
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b08a      	sub	sp, #40	@ 0x28
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
 8006e46:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e4c:	f7fe f9ea 	bl	8005224 <HAL_GetTick>
 8006e50:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e58:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006e60:	887b      	ldrh	r3, [r7, #2]
 8006e62:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e64:	7ffb      	ldrb	r3, [r7, #31]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d00c      	beq.n	8006e84 <HAL_SPI_TransmitReceive+0x4a>
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e70:	d106      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x46>
 8006e7a:	7ffb      	ldrb	r3, [r7, #31]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d001      	beq.n	8006e84 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006e80:	2302      	movs	r3, #2
 8006e82:	e17f      	b.n	8007184 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_SPI_TransmitReceive+0x5c>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <HAL_SPI_TransmitReceive+0x5c>
 8006e90:	887b      	ldrh	r3, [r7, #2]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e174      	b.n	8007184 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_SPI_TransmitReceive+0x6e>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e16d      	b.n	8007184 <HAL_SPI_TransmitReceive+0x34a>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d003      	beq.n	8006ec4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2205      	movs	r2, #5
 8006ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	887a      	ldrh	r2, [r7, #2]
 8006ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	887a      	ldrh	r2, [r7, #2]
 8006eda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	887a      	ldrh	r2, [r7, #2]
 8006ee6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	887a      	ldrh	r2, [r7, #2]
 8006eec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f04:	2b40      	cmp	r3, #64	@ 0x40
 8006f06:	d007      	beq.n	8006f18 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f20:	d17e      	bne.n	8007020 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_SPI_TransmitReceive+0xf6>
 8006f2a:	8afb      	ldrh	r3, [r7, #22]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d16c      	bne.n	800700a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f34:	881a      	ldrh	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f40:	1c9a      	adds	r2, r3, #2
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f54:	e059      	b.n	800700a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d11b      	bne.n	8006f9c <HAL_SPI_TransmitReceive+0x162>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d016      	beq.n	8006f9c <HAL_SPI_TransmitReceive+0x162>
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d113      	bne.n	8006f9c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f84:	1c9a      	adds	r2, r3, #2
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d119      	bne.n	8006fde <HAL_SPI_TransmitReceive+0x1a4>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d014      	beq.n	8006fde <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbe:	b292      	uxth	r2, r2
 8006fc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	1c9a      	adds	r2, r3, #2
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fde:	f7fe f921 	bl	8005224 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d80d      	bhi.n	800700a <HAL_SPI_TransmitReceive+0x1d0>
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d009      	beq.n	800700a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e0bc      	b.n	8007184 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1a0      	bne.n	8006f56 <HAL_SPI_TransmitReceive+0x11c>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d19b      	bne.n	8006f56 <HAL_SPI_TransmitReceive+0x11c>
 800701e:	e082      	b.n	8007126 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_SPI_TransmitReceive+0x1f4>
 8007028:	8afb      	ldrh	r3, [r7, #22]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d171      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	330c      	adds	r3, #12
 8007038:	7812      	ldrb	r2, [r2, #0]
 800703a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007054:	e05d      	b.n	8007112 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b02      	cmp	r3, #2
 8007062:	d11c      	bne.n	800709e <HAL_SPI_TransmitReceive+0x264>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d017      	beq.n	800709e <HAL_SPI_TransmitReceive+0x264>
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	2b01      	cmp	r3, #1
 8007072:	d114      	bne.n	800709e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	7812      	ldrb	r2, [r2, #0]
 8007080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d119      	bne.n	80070e0 <HAL_SPI_TransmitReceive+0x2a6>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d014      	beq.n	80070e0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070dc:	2301      	movs	r3, #1
 80070de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070e0:	f7fe f8a0 	bl	8005224 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d803      	bhi.n	80070f8 <HAL_SPI_TransmitReceive+0x2be>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f6:	d102      	bne.n	80070fe <HAL_SPI_TransmitReceive+0x2c4>
 80070f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e038      	b.n	8007184 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d19c      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x21c>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d197      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007126:	6a3a      	ldr	r2, [r7, #32]
 8007128:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f9fe 	bl	800752c <SPI_EndRxTxTransaction>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d008      	beq.n	8007148 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e01d      	b.n	8007184 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007150:	2300      	movs	r3, #0
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	613b      	str	r3, [r7, #16]
 8007164:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007182:	2300      	movs	r3, #0
  }
}
 8007184:	4618      	mov	r0, r3
 8007186:	3728      	adds	r7, #40	@ 0x28
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d001      	beq.n	80071aa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
 80071a8:	e097      	b.n	80072da <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <HAL_SPI_Transmit_DMA+0x2a>
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e08f      	b.n	80072da <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d101      	bne.n	80071c8 <HAL_SPI_Transmit_DMA+0x3c>
 80071c4:	2302      	movs	r3, #2
 80071c6:	e088      	b.n	80072da <HAL_SPI_Transmit_DMA+0x14e>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2203      	movs	r2, #3
 80071d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	88fa      	ldrh	r2, [r7, #6]
 80071ee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007216:	d10f      	bne.n	8007238 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007226:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007236:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800723c:	4a29      	ldr	r2, [pc, #164]	@ (80072e4 <HAL_SPI_Transmit_DMA+0x158>)
 800723e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007244:	4a28      	ldr	r2, [pc, #160]	@ (80072e8 <HAL_SPI_Transmit_DMA+0x15c>)
 8007246:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800724c:	4a27      	ldr	r2, [pc, #156]	@ (80072ec <HAL_SPI_Transmit_DMA+0x160>)
 800724e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007254:	2200      	movs	r2, #0
 8007256:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	4619      	mov	r1, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	330c      	adds	r3, #12
 8007268:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800726e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007270:	f7fe fa14 	bl	800569c <HAL_DMA_Start_IT>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00b      	beq.n	8007292 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727e:	f043 0210 	orr.w	r2, r3, #16
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e023      	b.n	80072da <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729c:	2b40      	cmp	r3, #64	@ 0x40
 800729e:	d007      	beq.n	80072b0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072ae:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0220 	orr.w	r2, r2, #32
 80072c6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0202 	orr.w	r2, r2, #2
 80072d6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	080073c1 	.word	0x080073c1
 80072e8:	08007319 	.word	0x08007319
 80072ec:	080073dd 	.word	0x080073dd

080072f0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007326:	f7fd ff7d 	bl	8005224 <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800733a:	d03b      	beq.n	80073b4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0220 	bic.w	r2, r2, #32
 800734a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0202 	bic.w	r2, r2, #2
 800735a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	2164      	movs	r1, #100	@ 0x64
 8007360:	6978      	ldr	r0, [r7, #20]
 8007362:	f000 f8e3 	bl	800752c <SPI_EndRxTxTransaction>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007370:	f043 0220 	orr.w	r2, r3, #32
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2200      	movs	r2, #0
 800739a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80073ac:	6978      	ldr	r0, [r7, #20]
 80073ae:	f7ff ffa9 	bl	8007304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80073b2:	e002      	b.n	80073ba <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80073b4:	6978      	ldr	r0, [r7, #20]
 80073b6:	f7fa f87f 	bl	80014b8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff ff8e 	bl	80072f0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073d4:	bf00      	nop
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0203 	bic.w	r2, r2, #3
 80073f8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fe:	f043 0210 	orr.w	r2, r3, #16
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff ff78 	bl	8007304 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	4613      	mov	r3, r2
 800742a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800742c:	f7fd fefa 	bl	8005224 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	4413      	add	r3, r2
 800743a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800743c:	f7fd fef2 	bl	8005224 <HAL_GetTick>
 8007440:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007442:	4b39      	ldr	r3, [pc, #228]	@ (8007528 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	015b      	lsls	r3, r3, #5
 8007448:	0d1b      	lsrs	r3, r3, #20
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	fb02 f303 	mul.w	r3, r2, r3
 8007450:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007452:	e054      	b.n	80074fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745a:	d050      	beq.n	80074fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800745c:	f7fd fee2 	bl	8005224 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	429a      	cmp	r2, r3
 800746a:	d902      	bls.n	8007472 <SPI_WaitFlagStateUntilTimeout+0x56>
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d13d      	bne.n	80074ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800748a:	d111      	bne.n	80074b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007494:	d004      	beq.n	80074a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800749e:	d107      	bne.n	80074b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074b8:	d10f      	bne.n	80074da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e017      	b.n	800751e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4013      	ands	r3, r2
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	429a      	cmp	r2, r3
 800750c:	bf0c      	ite	eq
 800750e:	2301      	moveq	r3, #1
 8007510:	2300      	movne	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	429a      	cmp	r2, r3
 800751a:	d19b      	bne.n	8007454 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000010 	.word	0x20000010

0800752c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2201      	movs	r2, #1
 8007540:	2102      	movs	r1, #2
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7ff ff6a 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d007      	beq.n	800755e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007552:	f043 0220 	orr.w	r2, r3, #32
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e032      	b.n	80075c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800755e:	4b1b      	ldr	r3, [pc, #108]	@ (80075cc <SPI_EndRxTxTransaction+0xa0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1b      	ldr	r2, [pc, #108]	@ (80075d0 <SPI_EndRxTxTransaction+0xa4>)
 8007564:	fba2 2303 	umull	r2, r3, r2, r3
 8007568:	0d5b      	lsrs	r3, r3, #21
 800756a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800756e:	fb02 f303 	mul.w	r3, r2, r3
 8007572:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800757c:	d112      	bne.n	80075a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2200      	movs	r2, #0
 8007586:	2180      	movs	r1, #128	@ 0x80
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff ff47 	bl	800741c <SPI_WaitFlagStateUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d016      	beq.n	80075c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007598:	f043 0220 	orr.w	r2, r3, #32
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e00f      	b.n	80075c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ba:	2b80      	cmp	r3, #128	@ 0x80
 80075bc:	d0f2      	beq.n	80075a4 <SPI_EndRxTxTransaction+0x78>
 80075be:	e000      	b.n	80075c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80075c0:	bf00      	nop
  }

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000010 	.word	0x20000010
 80075d0:	165e9f81 	.word	0x165e9f81

080075d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e041      	b.n	800766a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fd fcb6 	bl	8004f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3304      	adds	r3, #4
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f000 fb14 	bl	8007c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b01      	cmp	r3, #1
 8007686:	d001      	beq.n	800768c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e046      	b.n	800771a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a23      	ldr	r2, [pc, #140]	@ (8007728 <HAL_TIM_Base_Start+0xb4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d022      	beq.n	80076e4 <HAL_TIM_Base_Start+0x70>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076a6:	d01d      	beq.n	80076e4 <HAL_TIM_Base_Start+0x70>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1f      	ldr	r2, [pc, #124]	@ (800772c <HAL_TIM_Base_Start+0xb8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d018      	beq.n	80076e4 <HAL_TIM_Base_Start+0x70>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007730 <HAL_TIM_Base_Start+0xbc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <HAL_TIM_Base_Start+0x70>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007734 <HAL_TIM_Base_Start+0xc0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00e      	beq.n	80076e4 <HAL_TIM_Base_Start+0x70>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007738 <HAL_TIM_Base_Start+0xc4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d009      	beq.n	80076e4 <HAL_TIM_Base_Start+0x70>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a19      	ldr	r2, [pc, #100]	@ (800773c <HAL_TIM_Base_Start+0xc8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_TIM_Base_Start+0x70>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a18      	ldr	r2, [pc, #96]	@ (8007740 <HAL_TIM_Base_Start+0xcc>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d111      	bne.n	8007708 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b06      	cmp	r3, #6
 80076f4:	d010      	beq.n	8007718 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0201 	orr.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007706:	e007      	b.n	8007718 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	40010000 	.word	0x40010000
 800772c:	40000400 	.word	0x40000400
 8007730:	40000800 	.word	0x40000800
 8007734:	40000c00 	.word	0x40000c00
 8007738:	40010400 	.word	0x40010400
 800773c:	40014000 	.word	0x40014000
 8007740:	40001800 	.word	0x40001800

08007744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	d001      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e04e      	b.n	80077fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a23      	ldr	r2, [pc, #140]	@ (8007808 <HAL_TIM_Base_Start_IT+0xc4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d022      	beq.n	80077c4 <HAL_TIM_Base_Start_IT+0x80>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007786:	d01d      	beq.n	80077c4 <HAL_TIM_Base_Start_IT+0x80>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a1f      	ldr	r2, [pc, #124]	@ (800780c <HAL_TIM_Base_Start_IT+0xc8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d018      	beq.n	80077c4 <HAL_TIM_Base_Start_IT+0x80>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1e      	ldr	r2, [pc, #120]	@ (8007810 <HAL_TIM_Base_Start_IT+0xcc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d013      	beq.n	80077c4 <HAL_TIM_Base_Start_IT+0x80>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007814 <HAL_TIM_Base_Start_IT+0xd0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00e      	beq.n	80077c4 <HAL_TIM_Base_Start_IT+0x80>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007818 <HAL_TIM_Base_Start_IT+0xd4>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d009      	beq.n	80077c4 <HAL_TIM_Base_Start_IT+0x80>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a19      	ldr	r2, [pc, #100]	@ (800781c <HAL_TIM_Base_Start_IT+0xd8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d004      	beq.n	80077c4 <HAL_TIM_Base_Start_IT+0x80>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a18      	ldr	r2, [pc, #96]	@ (8007820 <HAL_TIM_Base_Start_IT+0xdc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d111      	bne.n	80077e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b06      	cmp	r3, #6
 80077d4:	d010      	beq.n	80077f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f042 0201 	orr.w	r2, r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e6:	e007      	b.n	80077f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40010000 	.word	0x40010000
 800780c:	40000400 	.word	0x40000400
 8007810:	40000800 	.word	0x40000800
 8007814:	40000c00 	.word	0x40000c00
 8007818:	40010400 	.word	0x40010400
 800781c:	40014000 	.word	0x40014000
 8007820:	40001800 	.word	0x40001800

08007824 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0201 	bic.w	r2, r2, #1
 800783a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6a1a      	ldr	r2, [r3, #32]
 8007842:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007846:	4013      	ands	r3, r2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10f      	bne.n	800786c <HAL_TIM_Base_Stop_IT+0x48>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6a1a      	ldr	r2, [r3, #32]
 8007852:	f240 4344 	movw	r3, #1092	@ 0x444
 8007856:	4013      	ands	r3, r2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d107      	bne.n	800786c <HAL_TIM_Base_Stop_IT+0x48>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0201 	bic.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d020      	beq.n	80078e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01b      	beq.n	80078e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f06f 0202 	mvn.w	r2, #2
 80078b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f999 	bl	8007c04 <HAL_TIM_IC_CaptureCallback>
 80078d2:	e005      	b.n	80078e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f98b 	bl	8007bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f99c 	bl	8007c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d020      	beq.n	8007932 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01b      	beq.n	8007932 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f06f 0204 	mvn.w	r2, #4
 8007902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f973 	bl	8007c04 <HAL_TIM_IC_CaptureCallback>
 800791e:	e005      	b.n	800792c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f965 	bl	8007bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f976 	bl	8007c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d020      	beq.n	800797e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f003 0308 	and.w	r3, r3, #8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01b      	beq.n	800797e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f06f 0208 	mvn.w	r2, #8
 800794e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2204      	movs	r2, #4
 8007954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69db      	ldr	r3, [r3, #28]
 800795c:	f003 0303 	and.w	r3, r3, #3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f94d 	bl	8007c04 <HAL_TIM_IC_CaptureCallback>
 800796a:	e005      	b.n	8007978 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f93f 	bl	8007bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f950 	bl	8007c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	d020      	beq.n	80079ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f003 0310 	and.w	r3, r3, #16
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01b      	beq.n	80079ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f06f 0210 	mvn.w	r2, #16
 800799a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2208      	movs	r2, #8
 80079a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f927 	bl	8007c04 <HAL_TIM_IC_CaptureCallback>
 80079b6:	e005      	b.n	80079c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f919 	bl	8007bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f92a 	bl	8007c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00c      	beq.n	80079ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f06f 0201 	mvn.w	r2, #1
 80079e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fc fa7f 	bl	8003eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00c      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d007      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fae3 	bl	8007fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00c      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d007      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f8fb 	bl	8007c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00c      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f003 0320 	and.w	r3, r3, #32
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f06f 0220 	mvn.w	r2, #32
 8007a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fab5 	bl	8007fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_TIM_ConfigClockSource+0x1c>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e0b4      	b.n	8007be8 <HAL_TIM_ConfigClockSource+0x186>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007aa4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ab6:	d03e      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0xd4>
 8007ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007abc:	f200 8087 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x16c>
 8007ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac4:	f000 8086 	beq.w	8007bd4 <HAL_TIM_ConfigClockSource+0x172>
 8007ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007acc:	d87f      	bhi.n	8007bce <HAL_TIM_ConfigClockSource+0x16c>
 8007ace:	2b70      	cmp	r3, #112	@ 0x70
 8007ad0:	d01a      	beq.n	8007b08 <HAL_TIM_ConfigClockSource+0xa6>
 8007ad2:	2b70      	cmp	r3, #112	@ 0x70
 8007ad4:	d87b      	bhi.n	8007bce <HAL_TIM_ConfigClockSource+0x16c>
 8007ad6:	2b60      	cmp	r3, #96	@ 0x60
 8007ad8:	d050      	beq.n	8007b7c <HAL_TIM_ConfigClockSource+0x11a>
 8007ada:	2b60      	cmp	r3, #96	@ 0x60
 8007adc:	d877      	bhi.n	8007bce <HAL_TIM_ConfigClockSource+0x16c>
 8007ade:	2b50      	cmp	r3, #80	@ 0x50
 8007ae0:	d03c      	beq.n	8007b5c <HAL_TIM_ConfigClockSource+0xfa>
 8007ae2:	2b50      	cmp	r3, #80	@ 0x50
 8007ae4:	d873      	bhi.n	8007bce <HAL_TIM_ConfigClockSource+0x16c>
 8007ae6:	2b40      	cmp	r3, #64	@ 0x40
 8007ae8:	d058      	beq.n	8007b9c <HAL_TIM_ConfigClockSource+0x13a>
 8007aea:	2b40      	cmp	r3, #64	@ 0x40
 8007aec:	d86f      	bhi.n	8007bce <HAL_TIM_ConfigClockSource+0x16c>
 8007aee:	2b30      	cmp	r3, #48	@ 0x30
 8007af0:	d064      	beq.n	8007bbc <HAL_TIM_ConfigClockSource+0x15a>
 8007af2:	2b30      	cmp	r3, #48	@ 0x30
 8007af4:	d86b      	bhi.n	8007bce <HAL_TIM_ConfigClockSource+0x16c>
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d060      	beq.n	8007bbc <HAL_TIM_ConfigClockSource+0x15a>
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d867      	bhi.n	8007bce <HAL_TIM_ConfigClockSource+0x16c>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d05c      	beq.n	8007bbc <HAL_TIM_ConfigClockSource+0x15a>
 8007b02:	2b10      	cmp	r3, #16
 8007b04:	d05a      	beq.n	8007bbc <HAL_TIM_ConfigClockSource+0x15a>
 8007b06:	e062      	b.n	8007bce <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b18:	f000 f9b8 	bl	8007e8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007b2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	609a      	str	r2, [r3, #8]
      break;
 8007b34:	e04f      	b.n	8007bd6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b46:	f000 f9a1 	bl	8007e8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b58:	609a      	str	r2, [r3, #8]
      break;
 8007b5a:	e03c      	b.n	8007bd6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f000 f915 	bl	8007d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2150      	movs	r1, #80	@ 0x50
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 f96e 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 8007b7a:	e02c      	b.n	8007bd6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f000 f934 	bl	8007df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2160      	movs	r1, #96	@ 0x60
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f95e 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 8007b9a:	e01c      	b.n	8007bd6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f000 f8f5 	bl	8007d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2140      	movs	r1, #64	@ 0x40
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 f94e 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 8007bba:	e00c      	b.n	8007bd6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f000 f945 	bl	8007e56 <TIM_ITRx_SetConfig>
      break;
 8007bcc:	e003      	b.n	8007bd6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd2:	e000      	b.n	8007bd6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007bd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a46      	ldr	r2, [pc, #280]	@ (8007d6c <TIM_Base_SetConfig+0x12c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d013      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c5e:	d00f      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a43      	ldr	r2, [pc, #268]	@ (8007d70 <TIM_Base_SetConfig+0x130>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00b      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a42      	ldr	r2, [pc, #264]	@ (8007d74 <TIM_Base_SetConfig+0x134>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d007      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a41      	ldr	r2, [pc, #260]	@ (8007d78 <TIM_Base_SetConfig+0x138>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d003      	beq.n	8007c80 <TIM_Base_SetConfig+0x40>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a40      	ldr	r2, [pc, #256]	@ (8007d7c <TIM_Base_SetConfig+0x13c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d108      	bne.n	8007c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a35      	ldr	r2, [pc, #212]	@ (8007d6c <TIM_Base_SetConfig+0x12c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d02b      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca0:	d027      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a32      	ldr	r2, [pc, #200]	@ (8007d70 <TIM_Base_SetConfig+0x130>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d023      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a31      	ldr	r2, [pc, #196]	@ (8007d74 <TIM_Base_SetConfig+0x134>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d01f      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a30      	ldr	r2, [pc, #192]	@ (8007d78 <TIM_Base_SetConfig+0x138>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d01b      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8007d7c <TIM_Base_SetConfig+0x13c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d017      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8007d80 <TIM_Base_SetConfig+0x140>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d013      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8007d84 <TIM_Base_SetConfig+0x144>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d00f      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8007d88 <TIM_Base_SetConfig+0x148>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00b      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8007d8c <TIM_Base_SetConfig+0x14c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d007      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8007d90 <TIM_Base_SetConfig+0x150>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d003      	beq.n	8007cf2 <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a29      	ldr	r2, [pc, #164]	@ (8007d94 <TIM_Base_SetConfig+0x154>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d108      	bne.n	8007d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a10      	ldr	r2, [pc, #64]	@ (8007d6c <TIM_Base_SetConfig+0x12c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d003      	beq.n	8007d38 <TIM_Base_SetConfig+0xf8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a12      	ldr	r2, [pc, #72]	@ (8007d7c <TIM_Base_SetConfig+0x13c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d103      	bne.n	8007d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	691a      	ldr	r2, [r3, #16]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d105      	bne.n	8007d5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	611a      	str	r2, [r3, #16]
  }
}
 8007d5e:	bf00      	nop
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	40010000 	.word	0x40010000
 8007d70:	40000400 	.word	0x40000400
 8007d74:	40000800 	.word	0x40000800
 8007d78:	40000c00 	.word	0x40000c00
 8007d7c:	40010400 	.word	0x40010400
 8007d80:	40014000 	.word	0x40014000
 8007d84:	40014400 	.word	0x40014400
 8007d88:	40014800 	.word	0x40014800
 8007d8c:	40001800 	.word	0x40001800
 8007d90:	40001c00 	.word	0x40001c00
 8007d94:	40002000 	.word	0x40002000

08007d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f023 0201 	bic.w	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f023 030a 	bic.w	r3, r3, #10
 8007dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	621a      	str	r2, [r3, #32]
}
 8007dea:	bf00      	nop
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b087      	sub	sp, #28
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	f023 0210 	bic.w	r2, r3, #16
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	031b      	lsls	r3, r3, #12
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	621a      	str	r2, [r3, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f043 0307 	orr.w	r3, r3, #7
 8007e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	609a      	str	r2, [r3, #8]
}
 8007e80:	bf00      	nop
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	021a      	lsls	r2, r3, #8
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	609a      	str	r2, [r3, #8]
}
 8007ec0:	bf00      	nop
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e05a      	b.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a21      	ldr	r2, [pc, #132]	@ (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d022      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f30:	d01d      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1d      	ldr	r2, [pc, #116]	@ (8007fac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d018      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d013      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d00e      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a18      	ldr	r2, [pc, #96]	@ (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d009      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a17      	ldr	r2, [pc, #92]	@ (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d004      	beq.n	8007f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a15      	ldr	r2, [pc, #84]	@ (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d10c      	bne.n	8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40000400 	.word	0x40000400
 8007fb0:	40000800 	.word	0x40000800
 8007fb4:	40000c00 	.word	0x40000c00
 8007fb8:	40010400 	.word	0x40010400
 8007fbc:	40014000 	.word	0x40014000
 8007fc0:	40001800 	.word	0x40001800

08007fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e042      	b.n	8008084 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fd f82e 	bl	8005074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2224      	movs	r2, #36	@ 0x24
 800801c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800802e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fa09 	bl	8008448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008054:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008064:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2220      	movs	r2, #32
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	@ 0x28
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	4613      	mov	r3, r2
 800809a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b20      	cmp	r3, #32
 80080aa:	d175      	bne.n	8008198 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <HAL_UART_Transmit+0x2c>
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e06e      	b.n	800819a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2221      	movs	r2, #33	@ 0x21
 80080c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080ca:	f7fd f8ab 	bl	8005224 <HAL_GetTick>
 80080ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	88fa      	ldrh	r2, [r7, #6]
 80080d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	88fa      	ldrh	r2, [r7, #6]
 80080da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e4:	d108      	bne.n	80080f8 <HAL_UART_Transmit+0x6c>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d104      	bne.n	80080f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	e003      	b.n	8008100 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008100:	e02e      	b.n	8008160 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2200      	movs	r2, #0
 800810a:	2180      	movs	r1, #128	@ 0x80
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f8df 	bl	80082d0 <UART_WaitOnFlagUntilTimeout>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e03a      	b.n	800819a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008138:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	3302      	adds	r3, #2
 800813e:	61bb      	str	r3, [r7, #24]
 8008140:	e007      	b.n	8008152 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	3301      	adds	r3, #1
 8008150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008156:	b29b      	uxth	r3, r3
 8008158:	3b01      	subs	r3, #1
 800815a:	b29a      	uxth	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1cb      	bne.n	8008102 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2200      	movs	r2, #0
 8008172:	2140      	movs	r1, #64	@ 0x40
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 f8ab 	bl	80082d0 <UART_WaitOnFlagUntilTimeout>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2220      	movs	r2, #32
 8008184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e006      	b.n	800819a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	e000      	b.n	800819a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008198:	2302      	movs	r3, #2
  }
}
 800819a:	4618      	mov	r0, r3
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b08a      	sub	sp, #40	@ 0x28
 80081a6:	af02      	add	r7, sp, #8
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	603b      	str	r3, [r7, #0]
 80081ae:	4613      	mov	r3, r2
 80081b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b20      	cmp	r3, #32
 80081c0:	f040 8081 	bne.w	80082c6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <HAL_UART_Receive+0x2e>
 80081ca:	88fb      	ldrh	r3, [r7, #6]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e079      	b.n	80082c8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2222      	movs	r2, #34	@ 0x22
 80081de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081e8:	f7fd f81c 	bl	8005224 <HAL_GetTick>
 80081ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	88fa      	ldrh	r2, [r7, #6]
 80081f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	88fa      	ldrh	r2, [r7, #6]
 80081f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008202:	d108      	bne.n	8008216 <HAL_UART_Receive+0x74>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	61bb      	str	r3, [r7, #24]
 8008214:	e003      	b.n	800821e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800821a:	2300      	movs	r3, #0
 800821c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800821e:	e047      	b.n	80082b0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2200      	movs	r2, #0
 8008228:	2120      	movs	r1, #32
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 f850 	bl	80082d0 <UART_WaitOnFlagUntilTimeout>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2220      	movs	r2, #32
 800823a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e042      	b.n	80082c8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10c      	bne.n	8008262 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008254:	b29a      	uxth	r2, r3
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	3302      	adds	r3, #2
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	e01f      	b.n	80082a2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800826a:	d007      	beq.n	800827c <HAL_UART_Receive+0xda>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <HAL_UART_Receive+0xe8>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	b2da      	uxtb	r2, r3
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	701a      	strb	r2, [r3, #0]
 8008288:	e008      	b.n	800829c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008296:	b2da      	uxtb	r2, r3
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	3301      	adds	r3, #1
 80082a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	3b01      	subs	r3, #1
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1b2      	bne.n	8008220 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2220      	movs	r2, #32
 80082be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e000      	b.n	80082c8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80082c6:	2302      	movs	r3, #2
  }
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3720      	adds	r7, #32
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	4613      	mov	r3, r2
 80082de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e0:	e03b      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d037      	beq.n	800835a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ea:	f7fc ff9b 	bl	8005224 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	6a3a      	ldr	r2, [r7, #32]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d302      	bcc.n	8008300 <UART_WaitOnFlagUntilTimeout+0x30>
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e03a      	b.n	800837a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b00      	cmp	r3, #0
 8008310:	d023      	beq.n	800835a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b80      	cmp	r3, #128	@ 0x80
 8008316:	d020      	beq.n	800835a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2b40      	cmp	r3, #64	@ 0x40
 800831c:	d01d      	beq.n	800835a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0308 	and.w	r3, r3, #8
 8008328:	2b08      	cmp	r3, #8
 800832a:	d116      	bne.n	800835a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 f81d 	bl	8008382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2208      	movs	r2, #8
 800834c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e00f      	b.n	800837a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4013      	ands	r3, r2
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	429a      	cmp	r2, r3
 8008368:	bf0c      	ite	eq
 800836a:	2301      	moveq	r3, #1
 800836c:	2300      	movne	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	429a      	cmp	r2, r3
 8008376:	d0b4      	beq.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008382:	b480      	push	{r7}
 8008384:	b095      	sub	sp, #84	@ 0x54
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	330c      	adds	r3, #12
 8008390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	330c      	adds	r3, #12
 80083a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e5      	bne.n	800838a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3314      	adds	r3, #20
 80083c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	f023 0301 	bic.w	r3, r3, #1
 80083d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3314      	adds	r3, #20
 80083dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e5      	bne.n	80083be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d119      	bne.n	800842e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	60bb      	str	r3, [r7, #8]
   return(result);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f023 0310 	bic.w	r3, r3, #16
 8008410:	647b      	str	r3, [r7, #68]	@ 0x44
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	330c      	adds	r3, #12
 8008418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800841a:	61ba      	str	r2, [r7, #24]
 800841c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6979      	ldr	r1, [r7, #20]
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	613b      	str	r3, [r7, #16]
   return(result);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2220      	movs	r2, #32
 8008432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800843c:	bf00      	nop
 800843e:	3754      	adds	r7, #84	@ 0x54
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800844c:	b0c0      	sub	sp, #256	@ 0x100
 800844e:	af00      	add	r7, sp, #0
 8008450:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008464:	68d9      	ldr	r1, [r3, #12]
 8008466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	ea40 0301 	orr.w	r3, r0, r1
 8008470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	431a      	orrs	r2, r3
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	431a      	orrs	r2, r3
 8008488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	4313      	orrs	r3, r2
 8008490:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80084a0:	f021 010c 	bic.w	r1, r1, #12
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084ae:	430b      	orrs	r3, r1
 80084b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c2:	6999      	ldr	r1, [r3, #24]
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	ea40 0301 	orr.w	r3, r0, r1
 80084ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	4b8f      	ldr	r3, [pc, #572]	@ (8008714 <UART_SetConfig+0x2cc>)
 80084d8:	429a      	cmp	r2, r3
 80084da:	d005      	beq.n	80084e8 <UART_SetConfig+0xa0>
 80084dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b8d      	ldr	r3, [pc, #564]	@ (8008718 <UART_SetConfig+0x2d0>)
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d104      	bne.n	80084f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084e8:	f7fd fe7e 	bl	80061e8 <HAL_RCC_GetPCLK2Freq>
 80084ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80084f0:	e003      	b.n	80084fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084f2:	f7fd fe65 	bl	80061c0 <HAL_RCC_GetPCLK1Freq>
 80084f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008504:	f040 810c 	bne.w	8008720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800850c:	2200      	movs	r2, #0
 800850e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008512:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800851a:	4622      	mov	r2, r4
 800851c:	462b      	mov	r3, r5
 800851e:	1891      	adds	r1, r2, r2
 8008520:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008522:	415b      	adcs	r3, r3
 8008524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800852a:	4621      	mov	r1, r4
 800852c:	eb12 0801 	adds.w	r8, r2, r1
 8008530:	4629      	mov	r1, r5
 8008532:	eb43 0901 	adc.w	r9, r3, r1
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800854a:	4690      	mov	r8, r2
 800854c:	4699      	mov	r9, r3
 800854e:	4623      	mov	r3, r4
 8008550:	eb18 0303 	adds.w	r3, r8, r3
 8008554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008558:	462b      	mov	r3, r5
 800855a:	eb49 0303 	adc.w	r3, r9, r3
 800855e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800856e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008576:	460b      	mov	r3, r1
 8008578:	18db      	adds	r3, r3, r3
 800857a:	653b      	str	r3, [r7, #80]	@ 0x50
 800857c:	4613      	mov	r3, r2
 800857e:	eb42 0303 	adc.w	r3, r2, r3
 8008582:	657b      	str	r3, [r7, #84]	@ 0x54
 8008584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800858c:	f7f8 fbfc 	bl	8000d88 <__aeabi_uldivmod>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4b61      	ldr	r3, [pc, #388]	@ (800871c <UART_SetConfig+0x2d4>)
 8008596:	fba3 2302 	umull	r2, r3, r3, r2
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	011c      	lsls	r4, r3, #4
 800859e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80085ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085b0:	4642      	mov	r2, r8
 80085b2:	464b      	mov	r3, r9
 80085b4:	1891      	adds	r1, r2, r2
 80085b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085b8:	415b      	adcs	r3, r3
 80085ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085c0:	4641      	mov	r1, r8
 80085c2:	eb12 0a01 	adds.w	sl, r2, r1
 80085c6:	4649      	mov	r1, r9
 80085c8:	eb43 0b01 	adc.w	fp, r3, r1
 80085cc:	f04f 0200 	mov.w	r2, #0
 80085d0:	f04f 0300 	mov.w	r3, #0
 80085d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085e0:	4692      	mov	sl, r2
 80085e2:	469b      	mov	fp, r3
 80085e4:	4643      	mov	r3, r8
 80085e6:	eb1a 0303 	adds.w	r3, sl, r3
 80085ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085ee:	464b      	mov	r3, r9
 80085f0:	eb4b 0303 	adc.w	r3, fp, r3
 80085f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008604:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800860c:	460b      	mov	r3, r1
 800860e:	18db      	adds	r3, r3, r3
 8008610:	643b      	str	r3, [r7, #64]	@ 0x40
 8008612:	4613      	mov	r3, r2
 8008614:	eb42 0303 	adc.w	r3, r2, r3
 8008618:	647b      	str	r3, [r7, #68]	@ 0x44
 800861a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800861e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008622:	f7f8 fbb1 	bl	8000d88 <__aeabi_uldivmod>
 8008626:	4602      	mov	r2, r0
 8008628:	460b      	mov	r3, r1
 800862a:	4611      	mov	r1, r2
 800862c:	4b3b      	ldr	r3, [pc, #236]	@ (800871c <UART_SetConfig+0x2d4>)
 800862e:	fba3 2301 	umull	r2, r3, r3, r1
 8008632:	095b      	lsrs	r3, r3, #5
 8008634:	2264      	movs	r2, #100	@ 0x64
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	1acb      	subs	r3, r1, r3
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008642:	4b36      	ldr	r3, [pc, #216]	@ (800871c <UART_SetConfig+0x2d4>)
 8008644:	fba3 2302 	umull	r2, r3, r3, r2
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008650:	441c      	add	r4, r3
 8008652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008656:	2200      	movs	r2, #0
 8008658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800865c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008664:	4642      	mov	r2, r8
 8008666:	464b      	mov	r3, r9
 8008668:	1891      	adds	r1, r2, r2
 800866a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800866c:	415b      	adcs	r3, r3
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008674:	4641      	mov	r1, r8
 8008676:	1851      	adds	r1, r2, r1
 8008678:	6339      	str	r1, [r7, #48]	@ 0x30
 800867a:	4649      	mov	r1, r9
 800867c:	414b      	adcs	r3, r1
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800868c:	4659      	mov	r1, fp
 800868e:	00cb      	lsls	r3, r1, #3
 8008690:	4651      	mov	r1, sl
 8008692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008696:	4651      	mov	r1, sl
 8008698:	00ca      	lsls	r2, r1, #3
 800869a:	4610      	mov	r0, r2
 800869c:	4619      	mov	r1, r3
 800869e:	4603      	mov	r3, r0
 80086a0:	4642      	mov	r2, r8
 80086a2:	189b      	adds	r3, r3, r2
 80086a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086a8:	464b      	mov	r3, r9
 80086aa:	460a      	mov	r2, r1
 80086ac:	eb42 0303 	adc.w	r3, r2, r3
 80086b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086c8:	460b      	mov	r3, r1
 80086ca:	18db      	adds	r3, r3, r3
 80086cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086ce:	4613      	mov	r3, r2
 80086d0:	eb42 0303 	adc.w	r3, r2, r3
 80086d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80086da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80086de:	f7f8 fb53 	bl	8000d88 <__aeabi_uldivmod>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4b0d      	ldr	r3, [pc, #52]	@ (800871c <UART_SetConfig+0x2d4>)
 80086e8:	fba3 1302 	umull	r1, r3, r3, r2
 80086ec:	095b      	lsrs	r3, r3, #5
 80086ee:	2164      	movs	r1, #100	@ 0x64
 80086f0:	fb01 f303 	mul.w	r3, r1, r3
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	3332      	adds	r3, #50	@ 0x32
 80086fa:	4a08      	ldr	r2, [pc, #32]	@ (800871c <UART_SetConfig+0x2d4>)
 80086fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008700:	095b      	lsrs	r3, r3, #5
 8008702:	f003 0207 	and.w	r2, r3, #7
 8008706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4422      	add	r2, r4
 800870e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008710:	e106      	b.n	8008920 <UART_SetConfig+0x4d8>
 8008712:	bf00      	nop
 8008714:	40011000 	.word	0x40011000
 8008718:	40011400 	.word	0x40011400
 800871c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008724:	2200      	movs	r2, #0
 8008726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800872a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800872e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008732:	4642      	mov	r2, r8
 8008734:	464b      	mov	r3, r9
 8008736:	1891      	adds	r1, r2, r2
 8008738:	6239      	str	r1, [r7, #32]
 800873a:	415b      	adcs	r3, r3
 800873c:	627b      	str	r3, [r7, #36]	@ 0x24
 800873e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008742:	4641      	mov	r1, r8
 8008744:	1854      	adds	r4, r2, r1
 8008746:	4649      	mov	r1, r9
 8008748:	eb43 0501 	adc.w	r5, r3, r1
 800874c:	f04f 0200 	mov.w	r2, #0
 8008750:	f04f 0300 	mov.w	r3, #0
 8008754:	00eb      	lsls	r3, r5, #3
 8008756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800875a:	00e2      	lsls	r2, r4, #3
 800875c:	4614      	mov	r4, r2
 800875e:	461d      	mov	r5, r3
 8008760:	4643      	mov	r3, r8
 8008762:	18e3      	adds	r3, r4, r3
 8008764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008768:	464b      	mov	r3, r9
 800876a:	eb45 0303 	adc.w	r3, r5, r3
 800876e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800877e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008782:	f04f 0200 	mov.w	r2, #0
 8008786:	f04f 0300 	mov.w	r3, #0
 800878a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800878e:	4629      	mov	r1, r5
 8008790:	008b      	lsls	r3, r1, #2
 8008792:	4621      	mov	r1, r4
 8008794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008798:	4621      	mov	r1, r4
 800879a:	008a      	lsls	r2, r1, #2
 800879c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80087a0:	f7f8 faf2 	bl	8000d88 <__aeabi_uldivmod>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4b60      	ldr	r3, [pc, #384]	@ (800892c <UART_SetConfig+0x4e4>)
 80087aa:	fba3 2302 	umull	r2, r3, r3, r2
 80087ae:	095b      	lsrs	r3, r3, #5
 80087b0:	011c      	lsls	r4, r3, #4
 80087b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087c4:	4642      	mov	r2, r8
 80087c6:	464b      	mov	r3, r9
 80087c8:	1891      	adds	r1, r2, r2
 80087ca:	61b9      	str	r1, [r7, #24]
 80087cc:	415b      	adcs	r3, r3
 80087ce:	61fb      	str	r3, [r7, #28]
 80087d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087d4:	4641      	mov	r1, r8
 80087d6:	1851      	adds	r1, r2, r1
 80087d8:	6139      	str	r1, [r7, #16]
 80087da:	4649      	mov	r1, r9
 80087dc:	414b      	adcs	r3, r1
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	f04f 0300 	mov.w	r3, #0
 80087e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087ec:	4659      	mov	r1, fp
 80087ee:	00cb      	lsls	r3, r1, #3
 80087f0:	4651      	mov	r1, sl
 80087f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087f6:	4651      	mov	r1, sl
 80087f8:	00ca      	lsls	r2, r1, #3
 80087fa:	4610      	mov	r0, r2
 80087fc:	4619      	mov	r1, r3
 80087fe:	4603      	mov	r3, r0
 8008800:	4642      	mov	r2, r8
 8008802:	189b      	adds	r3, r3, r2
 8008804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008808:	464b      	mov	r3, r9
 800880a:	460a      	mov	r2, r1
 800880c:	eb42 0303 	adc.w	r3, r2, r3
 8008810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800881e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008820:	f04f 0200 	mov.w	r2, #0
 8008824:	f04f 0300 	mov.w	r3, #0
 8008828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800882c:	4649      	mov	r1, r9
 800882e:	008b      	lsls	r3, r1, #2
 8008830:	4641      	mov	r1, r8
 8008832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008836:	4641      	mov	r1, r8
 8008838:	008a      	lsls	r2, r1, #2
 800883a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800883e:	f7f8 faa3 	bl	8000d88 <__aeabi_uldivmod>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4611      	mov	r1, r2
 8008848:	4b38      	ldr	r3, [pc, #224]	@ (800892c <UART_SetConfig+0x4e4>)
 800884a:	fba3 2301 	umull	r2, r3, r3, r1
 800884e:	095b      	lsrs	r3, r3, #5
 8008850:	2264      	movs	r2, #100	@ 0x64
 8008852:	fb02 f303 	mul.w	r3, r2, r3
 8008856:	1acb      	subs	r3, r1, r3
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	3332      	adds	r3, #50	@ 0x32
 800885c:	4a33      	ldr	r2, [pc, #204]	@ (800892c <UART_SetConfig+0x4e4>)
 800885e:	fba2 2303 	umull	r2, r3, r2, r3
 8008862:	095b      	lsrs	r3, r3, #5
 8008864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008868:	441c      	add	r4, r3
 800886a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800886e:	2200      	movs	r2, #0
 8008870:	673b      	str	r3, [r7, #112]	@ 0x70
 8008872:	677a      	str	r2, [r7, #116]	@ 0x74
 8008874:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008878:	4642      	mov	r2, r8
 800887a:	464b      	mov	r3, r9
 800887c:	1891      	adds	r1, r2, r2
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	415b      	adcs	r3, r3
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008888:	4641      	mov	r1, r8
 800888a:	1851      	adds	r1, r2, r1
 800888c:	6039      	str	r1, [r7, #0]
 800888e:	4649      	mov	r1, r9
 8008890:	414b      	adcs	r3, r1
 8008892:	607b      	str	r3, [r7, #4]
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	f04f 0300 	mov.w	r3, #0
 800889c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088a0:	4659      	mov	r1, fp
 80088a2:	00cb      	lsls	r3, r1, #3
 80088a4:	4651      	mov	r1, sl
 80088a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088aa:	4651      	mov	r1, sl
 80088ac:	00ca      	lsls	r2, r1, #3
 80088ae:	4610      	mov	r0, r2
 80088b0:	4619      	mov	r1, r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	4642      	mov	r2, r8
 80088b6:	189b      	adds	r3, r3, r2
 80088b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ba:	464b      	mov	r3, r9
 80088bc:	460a      	mov	r2, r1
 80088be:	eb42 0303 	adc.w	r3, r2, r3
 80088c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80088ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80088d0:	f04f 0200 	mov.w	r2, #0
 80088d4:	f04f 0300 	mov.w	r3, #0
 80088d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80088dc:	4649      	mov	r1, r9
 80088de:	008b      	lsls	r3, r1, #2
 80088e0:	4641      	mov	r1, r8
 80088e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088e6:	4641      	mov	r1, r8
 80088e8:	008a      	lsls	r2, r1, #2
 80088ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80088ee:	f7f8 fa4b 	bl	8000d88 <__aeabi_uldivmod>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4b0d      	ldr	r3, [pc, #52]	@ (800892c <UART_SetConfig+0x4e4>)
 80088f8:	fba3 1302 	umull	r1, r3, r3, r2
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	2164      	movs	r1, #100	@ 0x64
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	3332      	adds	r3, #50	@ 0x32
 800890a:	4a08      	ldr	r2, [pc, #32]	@ (800892c <UART_SetConfig+0x4e4>)
 800890c:	fba2 2303 	umull	r2, r3, r2, r3
 8008910:	095b      	lsrs	r3, r3, #5
 8008912:	f003 020f 	and.w	r2, r3, #15
 8008916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4422      	add	r2, r4
 800891e:	609a      	str	r2, [r3, #8]
}
 8008920:	bf00      	nop
 8008922:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008926:	46bd      	mov	sp, r7
 8008928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800892c:	51eb851f 	.word	0x51eb851f

08008930 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008934:	4904      	ldr	r1, [pc, #16]	@ (8008948 <MX_FATFS_Init+0x18>)
 8008936:	4805      	ldr	r0, [pc, #20]	@ (800894c <MX_FATFS_Init+0x1c>)
 8008938:	f003 fb42 	bl	800bfc0 <FATFS_LinkDriver>
 800893c:	4603      	mov	r3, r0
 800893e:	461a      	mov	r2, r3
 8008940:	4b03      	ldr	r3, [pc, #12]	@ (8008950 <MX_FATFS_Init+0x20>)
 8008942:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008944:	bf00      	nop
 8008946:	bd80      	pop	{r7, pc}
 8008948:	200010ac 	.word	0x200010ac
 800894c:	2000001c 	.word	0x2000001c
 8008950:	200010a8 	.word	0x200010a8

08008954 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008958:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800895a:	4618      	mov	r0, r3
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 f9d7 	bl	8008d24 <USER_SPI_initialize>
 8008976:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 fab5 	bl	8008efc <USER_SPI_status>
 8008992:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	607a      	str	r2, [r7, #4]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80089ac:	7bf8      	ldrb	r0, [r7, #15]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	68b9      	ldr	r1, [r7, #8]
 80089b4:	f000 fab8 	bl	8008f28 <USER_SPI_read>
 80089b8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	603b      	str	r3, [r7, #0]
 80089ce:	4603      	mov	r3, r0
 80089d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80089d2:	7bf8      	ldrb	r0, [r7, #15]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	68b9      	ldr	r1, [r7, #8]
 80089da:	f000 fb0b 	bl	8008ff4 <USER_SPI_write>
 80089de:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	603a      	str	r2, [r7, #0]
 80089f2:	71fb      	strb	r3, [r7, #7]
 80089f4:	460b      	mov	r3, r1
 80089f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80089f8:	79b9      	ldrb	r1, [r7, #6]
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fb74 	bl	80090ec <USER_SPI_ioctl>
 8008a04:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008a18:	f7fc fc04 	bl	8005224 <HAL_GetTick>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	4a04      	ldr	r2, [pc, #16]	@ (8008a30 <SPI_Timer_On+0x20>)
 8008a20:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008a22:	4a04      	ldr	r2, [pc, #16]	@ (8008a34 <SPI_Timer_On+0x24>)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6013      	str	r3, [r2, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	200010b4 	.word	0x200010b4
 8008a34:	200010b8 	.word	0x200010b8

08008a38 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008a3c:	f7fc fbf2 	bl	8005224 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	4b06      	ldr	r3, [pc, #24]	@ (8008a5c <SPI_Timer_Status+0x24>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	4b05      	ldr	r3, [pc, #20]	@ (8008a60 <SPI_Timer_Status+0x28>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	bf34      	ite	cc
 8008a50:	2301      	movcc	r3, #1
 8008a52:	2300      	movcs	r3, #0
 8008a54:	b2db      	uxtb	r3, r3
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	200010b4 	.word	0x200010b4
 8008a60:	200010b8 	.word	0x200010b8

08008a64 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008a6e:	f107 020f 	add.w	r2, r7, #15
 8008a72:	1df9      	adds	r1, r7, #7
 8008a74:	2332      	movs	r3, #50	@ 0x32
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4804      	ldr	r0, [pc, #16]	@ (8008a8c <xchg_spi+0x28>)
 8008a7c:	f7fe f9dd 	bl	8006e3a <HAL_SPI_TransmitReceive>
    return rxDat;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000e18 	.word	0x20000e18

08008a90 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008a90:	b590      	push	{r4, r7, lr}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e00a      	b.n	8008ab6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	18d4      	adds	r4, r2, r3
 8008aa6:	20ff      	movs	r0, #255	@ 0xff
 8008aa8:	f7ff ffdc 	bl	8008a64 <xchg_spi>
 8008aac:	4603      	mov	r3, r0
 8008aae:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d3f0      	bcc.n	8008aa0 <rcvr_spi_multi+0x10>
	}
}
 8008abe:	bf00      	nop
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd90      	pop	{r4, r7, pc}

08008ac8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	4803      	ldr	r0, [pc, #12]	@ (8008aec <xmit_spi_multi+0x24>)
 8008ade:	f7fe f868 	bl	8006bb2 <HAL_SPI_Transmit>
}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000e18 	.word	0x20000e18

08008af0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008af8:	f7fc fb94 	bl	8005224 <HAL_GetTick>
 8008afc:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008b02:	20ff      	movs	r0, #255	@ 0xff
 8008b04:	f7ff ffae 	bl	8008a64 <xchg_spi>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	2bff      	cmp	r3, #255	@ 0xff
 8008b10:	d007      	beq.n	8008b22 <wait_ready+0x32>
 8008b12:	f7fc fb87 	bl	8005224 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d8ef      	bhi.n	8008b02 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	2bff      	cmp	r3, #255	@ 0xff
 8008b26:	bf0c      	ite	eq
 8008b28:	2301      	moveq	r3, #1
 8008b2a:	2300      	movne	r3, #0
 8008b2c:	b2db      	uxtb	r3, r3
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b42:	4804      	ldr	r0, [pc, #16]	@ (8008b54 <despiselect+0x1c>)
 8008b44:	f7fd fa18 	bl	8005f78 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008b48:	20ff      	movs	r0, #255	@ 0xff
 8008b4a:	f7ff ff8b 	bl	8008a64 <xchg_spi>

}
 8008b4e:	bf00      	nop
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40020000 	.word	0x40020000

08008b58 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b62:	480a      	ldr	r0, [pc, #40]	@ (8008b8c <spiselect+0x34>)
 8008b64:	f7fd fa08 	bl	8005f78 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008b68:	20ff      	movs	r0, #255	@ 0xff
 8008b6a:	f7ff ff7b 	bl	8008a64 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008b6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008b72:	f7ff ffbd 	bl	8008af0 <wait_ready>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <spiselect+0x28>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e002      	b.n	8008b86 <spiselect+0x2e>

	despiselect();
 8008b80:	f7ff ffda 	bl	8008b38 <despiselect>
	return 0;	/* Timeout */
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	40020000 	.word	0x40020000

08008b90 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008b9a:	20c8      	movs	r0, #200	@ 0xc8
 8008b9c:	f7ff ff38 	bl	8008a10 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008ba0:	20ff      	movs	r0, #255	@ 0xff
 8008ba2:	f7ff ff5f 	bl	8008a64 <xchg_spi>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	2bff      	cmp	r3, #255	@ 0xff
 8008bae:	d104      	bne.n	8008bba <rcvr_datablock+0x2a>
 8008bb0:	f7ff ff42 	bl	8008a38 <SPI_Timer_Status>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1f2      	bne.n	8008ba0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	2bfe      	cmp	r3, #254	@ 0xfe
 8008bbe:	d001      	beq.n	8008bc4 <rcvr_datablock+0x34>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e00a      	b.n	8008bda <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f7ff ff62 	bl	8008a90 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008bcc:	20ff      	movs	r0, #255	@ 0xff
 8008bce:	f7ff ff49 	bl	8008a64 <xchg_spi>
 8008bd2:	20ff      	movs	r0, #255	@ 0xff
 8008bd4:	f7ff ff46 	bl	8008a64 <xchg_spi>

	return 1;						/* Function succeeded */
 8008bd8:	2301      	movs	r3, #1
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008bee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008bf2:	f7ff ff7d 	bl	8008af0 <wait_ready>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <xmit_datablock+0x1e>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e01e      	b.n	8008c3e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff ff2e 	bl	8008a64 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	2bfd      	cmp	r3, #253	@ 0xfd
 8008c0c:	d016      	beq.n	8008c3c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008c0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff ff58 	bl	8008ac8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008c18:	20ff      	movs	r0, #255	@ 0xff
 8008c1a:	f7ff ff23 	bl	8008a64 <xchg_spi>
 8008c1e:	20ff      	movs	r0, #255	@ 0xff
 8008c20:	f7ff ff20 	bl	8008a64 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008c24:	20ff      	movs	r0, #255	@ 0xff
 8008c26:	f7ff ff1d 	bl	8008a64 <xchg_spi>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	f003 031f 	and.w	r3, r3, #31
 8008c34:	2b05      	cmp	r3, #5
 8008c36:	d001      	beq.n	8008c3c <xmit_datablock+0x5a>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e000      	b.n	8008c3e <xmit_datablock+0x5c>
	}
	return 1;
 8008c3c:	2301      	movs	r3, #1
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	6039      	str	r1, [r7, #0]
 8008c50:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	da0e      	bge.n	8008c78 <send_cmd+0x32>
		cmd &= 0x7F;
 8008c5a:	79fb      	ldrb	r3, [r7, #7]
 8008c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c60:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008c62:	2100      	movs	r1, #0
 8008c64:	2037      	movs	r0, #55	@ 0x37
 8008c66:	f7ff ffee 	bl	8008c46 <send_cmd>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d901      	bls.n	8008c78 <send_cmd+0x32>
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	e051      	b.n	8008d1c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	2b0c      	cmp	r3, #12
 8008c7c:	d008      	beq.n	8008c90 <send_cmd+0x4a>
		despiselect();
 8008c7e:	f7ff ff5b 	bl	8008b38 <despiselect>
		if (!spiselect()) return 0xFF;
 8008c82:	f7ff ff69 	bl	8008b58 <spiselect>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <send_cmd+0x4a>
 8008c8c:	23ff      	movs	r3, #255	@ 0xff
 8008c8e:	e045      	b.n	8008d1c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff fee3 	bl	8008a64 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	0e1b      	lsrs	r3, r3, #24
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fedd 	bl	8008a64 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	0c1b      	lsrs	r3, r3, #16
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff fed7 	bl	8008a64 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	0a1b      	lsrs	r3, r3, #8
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff fed1 	bl	8008a64 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7ff fecc 	bl	8008a64 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008ccc:	2301      	movs	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <send_cmd+0x94>
 8008cd6:	2395      	movs	r3, #149	@ 0x95
 8008cd8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	2b08      	cmp	r3, #8
 8008cde:	d101      	bne.n	8008ce4 <send_cmd+0x9e>
 8008ce0:	2387      	movs	r3, #135	@ 0x87
 8008ce2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff febc 	bl	8008a64 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	2b0c      	cmp	r3, #12
 8008cf0:	d102      	bne.n	8008cf8 <send_cmd+0xb2>
 8008cf2:	20ff      	movs	r0, #255	@ 0xff
 8008cf4:	f7ff feb6 	bl	8008a64 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008cf8:	230a      	movs	r3, #10
 8008cfa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008cfc:	20ff      	movs	r0, #255	@ 0xff
 8008cfe:	f7ff feb1 	bl	8008a64 <xchg_spi>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008d06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	da05      	bge.n	8008d1a <send_cmd+0xd4>
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	73fb      	strb	r3, [r7, #15]
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1f0      	bne.n	8008cfc <send_cmd+0xb6>

	return res;							/* Return received response */
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <USER_SPI_initialize+0x14>
 8008d34:	2301      	movs	r3, #1
 8008d36:	e0d6      	b.n	8008ee6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8008d38:	4b6d      	ldr	r3, [pc, #436]	@ (8008ef0 <USER_SPI_initialize+0x1cc>)
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <USER_SPI_initialize+0x2a>
 8008d46:	4b6a      	ldr	r3, [pc, #424]	@ (8008ef0 <USER_SPI_initialize+0x1cc>)
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	e0cb      	b.n	8008ee6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8008d4e:	4b69      	ldr	r3, [pc, #420]	@ (8008ef4 <USER_SPI_initialize+0x1d0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008d58:	4b66      	ldr	r3, [pc, #408]	@ (8008ef4 <USER_SPI_initialize+0x1d0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8008d60:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8008d62:	230a      	movs	r3, #10
 8008d64:	73fb      	strb	r3, [r7, #15]
 8008d66:	e005      	b.n	8008d74 <USER_SPI_initialize+0x50>
 8008d68:	20ff      	movs	r0, #255	@ 0xff
 8008d6a:	f7ff fe7b 	bl	8008a64 <xchg_spi>
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	73fb      	strb	r3, [r7, #15]
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1f6      	bne.n	8008d68 <USER_SPI_initialize+0x44>

	ty = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8008d7e:	2100      	movs	r1, #0
 8008d80:	2000      	movs	r0, #0
 8008d82:	f7ff ff60 	bl	8008c46 <send_cmd>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	f040 808b 	bne.w	8008ea4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8008d8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008d92:	f7ff fe3d 	bl	8008a10 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008d96:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008d9a:	2008      	movs	r0, #8
 8008d9c:	f7ff ff53 	bl	8008c46 <send_cmd>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d151      	bne.n	8008e4a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008da6:	2300      	movs	r3, #0
 8008da8:	73fb      	strb	r3, [r7, #15]
 8008daa:	e00d      	b.n	8008dc8 <USER_SPI_initialize+0xa4>
 8008dac:	7bfc      	ldrb	r4, [r7, #15]
 8008dae:	20ff      	movs	r0, #255	@ 0xff
 8008db0:	f7ff fe58 	bl	8008a64 <xchg_spi>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	f104 0310 	add.w	r3, r4, #16
 8008dbc:	443b      	add	r3, r7
 8008dbe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	73fb      	strb	r3, [r7, #15]
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d9ee      	bls.n	8008dac <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8008dce:	7abb      	ldrb	r3, [r7, #10]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d167      	bne.n	8008ea4 <USER_SPI_initialize+0x180>
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	2baa      	cmp	r3, #170	@ 0xaa
 8008dd8:	d164      	bne.n	8008ea4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008dda:	bf00      	nop
 8008ddc:	f7ff fe2c 	bl	8008a38 <SPI_Timer_Status>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d007      	beq.n	8008df6 <USER_SPI_initialize+0xd2>
 8008de6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008dea:	20a9      	movs	r0, #169	@ 0xa9
 8008dec:	f7ff ff2b 	bl	8008c46 <send_cmd>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1f2      	bne.n	8008ddc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008df6:	f7ff fe1f 	bl	8008a38 <SPI_Timer_Status>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d051      	beq.n	8008ea4 <USER_SPI_initialize+0x180>
 8008e00:	2100      	movs	r1, #0
 8008e02:	203a      	movs	r0, #58	@ 0x3a
 8008e04:	f7ff ff1f 	bl	8008c46 <send_cmd>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d14a      	bne.n	8008ea4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]
 8008e12:	e00d      	b.n	8008e30 <USER_SPI_initialize+0x10c>
 8008e14:	7bfc      	ldrb	r4, [r7, #15]
 8008e16:	20ff      	movs	r0, #255	@ 0xff
 8008e18:	f7ff fe24 	bl	8008a64 <xchg_spi>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f104 0310 	add.w	r3, r4, #16
 8008e24:	443b      	add	r3, r7
 8008e26:	f803 2c08 	strb.w	r2, [r3, #-8]
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	73fb      	strb	r3, [r7, #15]
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d9ee      	bls.n	8008e14 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8008e36:	7a3b      	ldrb	r3, [r7, #8]
 8008e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <USER_SPI_initialize+0x120>
 8008e40:	230c      	movs	r3, #12
 8008e42:	e000      	b.n	8008e46 <USER_SPI_initialize+0x122>
 8008e44:	2304      	movs	r3, #4
 8008e46:	737b      	strb	r3, [r7, #13]
 8008e48:	e02c      	b.n	8008ea4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	20a9      	movs	r0, #169	@ 0xa9
 8008e4e:	f7ff fefa 	bl	8008c46 <send_cmd>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d804      	bhi.n	8008e62 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8008e58:	2302      	movs	r3, #2
 8008e5a:	737b      	strb	r3, [r7, #13]
 8008e5c:	23a9      	movs	r3, #169	@ 0xa9
 8008e5e:	73bb      	strb	r3, [r7, #14]
 8008e60:	e003      	b.n	8008e6a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8008e62:	2301      	movs	r3, #1
 8008e64:	737b      	strb	r3, [r7, #13]
 8008e66:	2301      	movs	r3, #1
 8008e68:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8008e6a:	bf00      	nop
 8008e6c:	f7ff fde4 	bl	8008a38 <SPI_Timer_Status>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <USER_SPI_initialize+0x162>
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2100      	movs	r1, #0
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff fee3 	bl	8008c46 <send_cmd>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f2      	bne.n	8008e6c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008e86:	f7ff fdd7 	bl	8008a38 <SPI_Timer_Status>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d007      	beq.n	8008ea0 <USER_SPI_initialize+0x17c>
 8008e90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008e94:	2010      	movs	r0, #16
 8008e96:	f7ff fed6 	bl	8008c46 <send_cmd>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <USER_SPI_initialize+0x180>
				ty = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008ea4:	4a14      	ldr	r2, [pc, #80]	@ (8008ef8 <USER_SPI_initialize+0x1d4>)
 8008ea6:	7b7b      	ldrb	r3, [r7, #13]
 8008ea8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008eaa:	f7ff fe45 	bl	8008b38 <despiselect>

	if (ty) {			/* OK */
 8008eae:	7b7b      	ldrb	r3, [r7, #13]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d012      	beq.n	8008eda <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef4 <USER_SPI_initialize+0x1d0>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8008ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef4 <USER_SPI_initialize+0x1d0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f042 0210 	orr.w	r2, r2, #16
 8008ec6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008ec8:	4b09      	ldr	r3, [pc, #36]	@ (8008ef0 <USER_SPI_initialize+0x1cc>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	f023 0301 	bic.w	r3, r3, #1
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	4b06      	ldr	r3, [pc, #24]	@ (8008ef0 <USER_SPI_initialize+0x1cc>)
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	e002      	b.n	8008ee0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008eda:	4b05      	ldr	r3, [pc, #20]	@ (8008ef0 <USER_SPI_initialize+0x1cc>)
 8008edc:	2201      	movs	r2, #1
 8008ede:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8008ee0:	4b03      	ldr	r3, [pc, #12]	@ (8008ef0 <USER_SPI_initialize+0x1cc>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	b2db      	uxtb	r3, r3
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd90      	pop	{r4, r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000030 	.word	0x20000030
 8008ef4:	20000e18 	.word	0x20000e18
 8008ef8:	200010b0 	.word	0x200010b0

08008efc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <USER_SPI_status+0x14>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e002      	b.n	8008f16 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8008f10:	4b04      	ldr	r3, [pc, #16]	@ (8008f24 <USER_SPI_status+0x28>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	b2db      	uxtb	r3, r3
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20000030 	.word	0x20000030

08008f28 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d102      	bne.n	8008f44 <USER_SPI_read+0x1c>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <USER_SPI_read+0x20>
 8008f44:	2304      	movs	r3, #4
 8008f46:	e04d      	b.n	8008fe4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008f48:	4b28      	ldr	r3, [pc, #160]	@ (8008fec <USER_SPI_read+0xc4>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <USER_SPI_read+0x32>
 8008f56:	2303      	movs	r3, #3
 8008f58:	e044      	b.n	8008fe4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8008f5a:	4b25      	ldr	r3, [pc, #148]	@ (8008ff0 <USER_SPI_read+0xc8>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d102      	bne.n	8008f6c <USER_SPI_read+0x44>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	025b      	lsls	r3, r3, #9
 8008f6a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d111      	bne.n	8008f96 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	2011      	movs	r0, #17
 8008f76:	f7ff fe66 	bl	8008c46 <send_cmd>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d129      	bne.n	8008fd4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8008f80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f84:	68b8      	ldr	r0, [r7, #8]
 8008f86:	f7ff fe03 	bl	8008b90 <rcvr_datablock>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d021      	beq.n	8008fd4 <USER_SPI_read+0xac>
			count = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	e01e      	b.n	8008fd4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	2012      	movs	r0, #18
 8008f9a:	f7ff fe54 	bl	8008c46 <send_cmd>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d117      	bne.n	8008fd4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008fa4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008fa8:	68b8      	ldr	r0, [r7, #8]
 8008faa:	f7ff fdf1 	bl	8008b90 <rcvr_datablock>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00a      	beq.n	8008fca <USER_SPI_read+0xa2>
				buff += 512;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008fba:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	603b      	str	r3, [r7, #0]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1ed      	bne.n	8008fa4 <USER_SPI_read+0x7c>
 8008fc8:	e000      	b.n	8008fcc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8008fca:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008fcc:	2100      	movs	r1, #0
 8008fce:	200c      	movs	r0, #12
 8008fd0:	f7ff fe39 	bl	8008c46 <send_cmd>
		}
	}
	despiselect();
 8008fd4:	f7ff fdb0 	bl	8008b38 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bf14      	ite	ne
 8008fde:	2301      	movne	r3, #1
 8008fe0:	2300      	moveq	r3, #0
 8008fe2:	b2db      	uxtb	r3, r3
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20000030 	.word	0x20000030
 8008ff0:	200010b0 	.word	0x200010b0

08008ff4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	607a      	str	r2, [r7, #4]
 8008ffe:	603b      	str	r3, [r7, #0]
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d102      	bne.n	8009010 <USER_SPI_write+0x1c>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <USER_SPI_write+0x20>
 8009010:	2304      	movs	r3, #4
 8009012:	e063      	b.n	80090dc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009014:	4b33      	ldr	r3, [pc, #204]	@ (80090e4 <USER_SPI_write+0xf0>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <USER_SPI_write+0x32>
 8009022:	2303      	movs	r3, #3
 8009024:	e05a      	b.n	80090dc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009026:	4b2f      	ldr	r3, [pc, #188]	@ (80090e4 <USER_SPI_write+0xf0>)
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <USER_SPI_write+0x44>
 8009034:	2302      	movs	r3, #2
 8009036:	e051      	b.n	80090dc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009038:	4b2b      	ldr	r3, [pc, #172]	@ (80090e8 <USER_SPI_write+0xf4>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f003 0308 	and.w	r3, r3, #8
 8009040:	2b00      	cmp	r3, #0
 8009042:	d102      	bne.n	800904a <USER_SPI_write+0x56>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	025b      	lsls	r3, r3, #9
 8009048:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d110      	bne.n	8009072 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	2018      	movs	r0, #24
 8009054:	f7ff fdf7 	bl	8008c46 <send_cmd>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d136      	bne.n	80090cc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800905e:	21fe      	movs	r1, #254	@ 0xfe
 8009060:	68b8      	ldr	r0, [r7, #8]
 8009062:	f7ff fdbe 	bl	8008be2 <xmit_datablock>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d02f      	beq.n	80090cc <USER_SPI_write+0xd8>
			count = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	e02c      	b.n	80090cc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009072:	4b1d      	ldr	r3, [pc, #116]	@ (80090e8 <USER_SPI_write+0xf4>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f003 0306 	and.w	r3, r3, #6
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <USER_SPI_write+0x92>
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	2097      	movs	r0, #151	@ 0x97
 8009082:	f7ff fde0 	bl	8008c46 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	2019      	movs	r0, #25
 800908a:	f7ff fddc 	bl	8008c46 <send_cmd>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d11b      	bne.n	80090cc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009094:	21fc      	movs	r1, #252	@ 0xfc
 8009096:	68b8      	ldr	r0, [r7, #8]
 8009098:	f7ff fda3 	bl	8008be2 <xmit_datablock>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <USER_SPI_write+0xc4>
				buff += 512;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80090a8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1ee      	bne.n	8009094 <USER_SPI_write+0xa0>
 80090b6:	e000      	b.n	80090ba <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80090b8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80090ba:	21fd      	movs	r1, #253	@ 0xfd
 80090bc:	2000      	movs	r0, #0
 80090be:	f7ff fd90 	bl	8008be2 <xmit_datablock>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <USER_SPI_write+0xd8>
 80090c8:	2301      	movs	r3, #1
 80090ca:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80090cc:	f7ff fd34 	bl	8008b38 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bf14      	ite	ne
 80090d6:	2301      	movne	r3, #1
 80090d8:	2300      	moveq	r3, #0
 80090da:	b2db      	uxtb	r3, r3
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20000030 	.word	0x20000030
 80090e8:	200010b0 	.word	0x200010b0

080090ec <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08c      	sub	sp, #48	@ 0x30
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	603a      	str	r2, [r7, #0]
 80090f6:	71fb      	strb	r3, [r7, #7]
 80090f8:	460b      	mov	r3, r1
 80090fa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <USER_SPI_ioctl+0x1a>
 8009102:	2304      	movs	r3, #4
 8009104:	e15a      	b.n	80093bc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009106:	4baf      	ldr	r3, [pc, #700]	@ (80093c4 <USER_SPI_ioctl+0x2d8>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <USER_SPI_ioctl+0x2c>
 8009114:	2303      	movs	r3, #3
 8009116:	e151      	b.n	80093bc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800911e:	79bb      	ldrb	r3, [r7, #6]
 8009120:	2b04      	cmp	r3, #4
 8009122:	f200 8136 	bhi.w	8009392 <USER_SPI_ioctl+0x2a6>
 8009126:	a201      	add	r2, pc, #4	@ (adr r2, 800912c <USER_SPI_ioctl+0x40>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	08009141 	.word	0x08009141
 8009130:	08009155 	.word	0x08009155
 8009134:	08009393 	.word	0x08009393
 8009138:	08009201 	.word	0x08009201
 800913c:	080092f7 	.word	0x080092f7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009140:	f7ff fd0a 	bl	8008b58 <spiselect>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 8127 	beq.w	800939a <USER_SPI_ioctl+0x2ae>
 800914c:	2300      	movs	r3, #0
 800914e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009152:	e122      	b.n	800939a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009154:	2100      	movs	r1, #0
 8009156:	2009      	movs	r0, #9
 8009158:	f7ff fd75 	bl	8008c46 <send_cmd>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	f040 811d 	bne.w	800939e <USER_SPI_ioctl+0x2b2>
 8009164:	f107 030c 	add.w	r3, r7, #12
 8009168:	2110      	movs	r1, #16
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fd10 	bl	8008b90 <rcvr_datablock>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 8113 	beq.w	800939e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009178:	7b3b      	ldrb	r3, [r7, #12]
 800917a:	099b      	lsrs	r3, r3, #6
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b01      	cmp	r3, #1
 8009180:	d111      	bne.n	80091a6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009182:	7d7b      	ldrb	r3, [r7, #21]
 8009184:	461a      	mov	r2, r3
 8009186:	7d3b      	ldrb	r3, [r7, #20]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	4413      	add	r3, r2
 800918c:	461a      	mov	r2, r3
 800918e:	7cfb      	ldrb	r3, [r7, #19]
 8009190:	041b      	lsls	r3, r3, #16
 8009192:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8009196:	4413      	add	r3, r2
 8009198:	3301      	adds	r3, #1
 800919a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	029a      	lsls	r2, r3, #10
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	e028      	b.n	80091f8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80091a6:	7c7b      	ldrb	r3, [r7, #17]
 80091a8:	f003 030f 	and.w	r3, r3, #15
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	7dbb      	ldrb	r3, [r7, #22]
 80091b0:	09db      	lsrs	r3, r3, #7
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	4413      	add	r3, r2
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	7d7b      	ldrb	r3, [r7, #21]
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f003 0306 	and.w	r3, r3, #6
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	4413      	add	r3, r2
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	3302      	adds	r3, #2
 80091ca:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80091ce:	7d3b      	ldrb	r3, [r7, #20]
 80091d0:	099b      	lsrs	r3, r3, #6
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	7cfb      	ldrb	r3, [r7, #19]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	441a      	add	r2, r3
 80091dc:	7cbb      	ldrb	r3, [r7, #18]
 80091de:	029b      	lsls	r3, r3, #10
 80091e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80091e4:	4413      	add	r3, r2
 80091e6:	3301      	adds	r3, #1
 80091e8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80091ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80091ee:	3b09      	subs	r3, #9
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	409a      	lsls	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80091fe:	e0ce      	b.n	800939e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009200:	4b71      	ldr	r3, [pc, #452]	@ (80093c8 <USER_SPI_ioctl+0x2dc>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d031      	beq.n	8009270 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800920c:	2100      	movs	r1, #0
 800920e:	208d      	movs	r0, #141	@ 0x8d
 8009210:	f7ff fd19 	bl	8008c46 <send_cmd>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	f040 80c3 	bne.w	80093a2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800921c:	20ff      	movs	r0, #255	@ 0xff
 800921e:	f7ff fc21 	bl	8008a64 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009222:	f107 030c 	add.w	r3, r7, #12
 8009226:	2110      	movs	r1, #16
 8009228:	4618      	mov	r0, r3
 800922a:	f7ff fcb1 	bl	8008b90 <rcvr_datablock>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 80b6 	beq.w	80093a2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009236:	2330      	movs	r3, #48	@ 0x30
 8009238:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800923c:	e007      	b.n	800924e <USER_SPI_ioctl+0x162>
 800923e:	20ff      	movs	r0, #255	@ 0xff
 8009240:	f7ff fc10 	bl	8008a64 <xchg_spi>
 8009244:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009248:	3b01      	subs	r3, #1
 800924a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800924e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1f3      	bne.n	800923e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009256:	7dbb      	ldrb	r3, [r7, #22]
 8009258:	091b      	lsrs	r3, r3, #4
 800925a:	b2db      	uxtb	r3, r3
 800925c:	461a      	mov	r2, r3
 800925e:	2310      	movs	r3, #16
 8009260:	fa03 f202 	lsl.w	r2, r3, r2
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800926e:	e098      	b.n	80093a2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009270:	2100      	movs	r1, #0
 8009272:	2009      	movs	r0, #9
 8009274:	f7ff fce7 	bl	8008c46 <send_cmd>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	f040 8091 	bne.w	80093a2 <USER_SPI_ioctl+0x2b6>
 8009280:	f107 030c 	add.w	r3, r7, #12
 8009284:	2110      	movs	r1, #16
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff fc82 	bl	8008b90 <rcvr_datablock>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 8087 	beq.w	80093a2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009294:	4b4c      	ldr	r3, [pc, #304]	@ (80093c8 <USER_SPI_ioctl+0x2dc>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d012      	beq.n	80092c6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80092a0:	7dbb      	ldrb	r3, [r7, #22]
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80092a8:	7dfa      	ldrb	r2, [r7, #23]
 80092aa:	09d2      	lsrs	r2, r2, #7
 80092ac:	b2d2      	uxtb	r2, r2
 80092ae:	4413      	add	r3, r2
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	7e7b      	ldrb	r3, [r7, #25]
 80092b4:	099b      	lsrs	r3, r3, #6
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	fa02 f303 	lsl.w	r3, r2, r3
 80092be:	461a      	mov	r2, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	e013      	b.n	80092ee <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80092c6:	7dbb      	ldrb	r3, [r7, #22]
 80092c8:	109b      	asrs	r3, r3, #2
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	f003 031f 	and.w	r3, r3, #31
 80092d0:	3301      	adds	r3, #1
 80092d2:	7dfa      	ldrb	r2, [r7, #23]
 80092d4:	00d2      	lsls	r2, r2, #3
 80092d6:	f002 0218 	and.w	r2, r2, #24
 80092da:	7df9      	ldrb	r1, [r7, #23]
 80092dc:	0949      	lsrs	r1, r1, #5
 80092de:	b2c9      	uxtb	r1, r1
 80092e0:	440a      	add	r2, r1
 80092e2:	3201      	adds	r2, #1
 80092e4:	fb02 f303 	mul.w	r3, r2, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80092f4:	e055      	b.n	80093a2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80092f6:	4b34      	ldr	r3, [pc, #208]	@ (80093c8 <USER_SPI_ioctl+0x2dc>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	f003 0306 	and.w	r3, r3, #6
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d051      	beq.n	80093a6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009302:	f107 020c 	add.w	r2, r7, #12
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	210b      	movs	r1, #11
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff feee 	bl	80090ec <USER_SPI_ioctl>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d149      	bne.n	80093aa <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009316:	7b3b      	ldrb	r3, [r7, #12]
 8009318:	099b      	lsrs	r3, r3, #6
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d104      	bne.n	800932a <USER_SPI_ioctl+0x23e>
 8009320:	7dbb      	ldrb	r3, [r7, #22]
 8009322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009326:	2b00      	cmp	r3, #0
 8009328:	d041      	beq.n	80093ae <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	623b      	str	r3, [r7, #32]
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800933a:	4b23      	ldr	r3, [pc, #140]	@ (80093c8 <USER_SPI_ioctl+0x2dc>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d105      	bne.n	8009352 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009348:	025b      	lsls	r3, r3, #9
 800934a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800934c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934e:	025b      	lsls	r3, r3, #9
 8009350:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009354:	2020      	movs	r0, #32
 8009356:	f7ff fc76 	bl	8008c46 <send_cmd>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d128      	bne.n	80093b2 <USER_SPI_ioctl+0x2c6>
 8009360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009362:	2021      	movs	r0, #33	@ 0x21
 8009364:	f7ff fc6f 	bl	8008c46 <send_cmd>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d121      	bne.n	80093b2 <USER_SPI_ioctl+0x2c6>
 800936e:	2100      	movs	r1, #0
 8009370:	2026      	movs	r0, #38	@ 0x26
 8009372:	f7ff fc68 	bl	8008c46 <send_cmd>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d11a      	bne.n	80093b2 <USER_SPI_ioctl+0x2c6>
 800937c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009380:	f7ff fbb6 	bl	8008af0 <wait_ready>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d013      	beq.n	80093b2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800938a:	2300      	movs	r3, #0
 800938c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009390:	e00f      	b.n	80093b2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009392:	2304      	movs	r3, #4
 8009394:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009398:	e00c      	b.n	80093b4 <USER_SPI_ioctl+0x2c8>
		break;
 800939a:	bf00      	nop
 800939c:	e00a      	b.n	80093b4 <USER_SPI_ioctl+0x2c8>
		break;
 800939e:	bf00      	nop
 80093a0:	e008      	b.n	80093b4 <USER_SPI_ioctl+0x2c8>
		break;
 80093a2:	bf00      	nop
 80093a4:	e006      	b.n	80093b4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80093a6:	bf00      	nop
 80093a8:	e004      	b.n	80093b4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80093aa:	bf00      	nop
 80093ac:	e002      	b.n	80093b4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80093ae:	bf00      	nop
 80093b0:	e000      	b.n	80093b4 <USER_SPI_ioctl+0x2c8>
		break;
 80093b2:	bf00      	nop
	}

	despiselect();
 80093b4:	f7ff fbc0 	bl	8008b38 <despiselect>

	return res;
 80093b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3730      	adds	r7, #48	@ 0x30
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	20000030 	.word	0x20000030
 80093c8:	200010b0 	.word	0x200010b0

080093cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	4a08      	ldr	r2, [pc, #32]	@ (80093fc <disk_status+0x30>)
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	79fa      	ldrb	r2, [r7, #7]
 80093e4:	4905      	ldr	r1, [pc, #20]	@ (80093fc <disk_status+0x30>)
 80093e6:	440a      	add	r2, r1
 80093e8:	7a12      	ldrb	r2, [r2, #8]
 80093ea:	4610      	mov	r0, r2
 80093ec:	4798      	blx	r3
 80093ee:	4603      	mov	r3, r0
 80093f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	200010e4 	.word	0x200010e4

08009400 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800940e:	79fb      	ldrb	r3, [r7, #7]
 8009410:	4a0e      	ldr	r2, [pc, #56]	@ (800944c <disk_initialize+0x4c>)
 8009412:	5cd3      	ldrb	r3, [r2, r3]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d114      	bne.n	8009442 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	4a0c      	ldr	r2, [pc, #48]	@ (800944c <disk_initialize+0x4c>)
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	79fa      	ldrb	r2, [r7, #7]
 8009426:	4909      	ldr	r1, [pc, #36]	@ (800944c <disk_initialize+0x4c>)
 8009428:	440a      	add	r2, r1
 800942a:	7a12      	ldrb	r2, [r2, #8]
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d103      	bne.n	8009442 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	4a03      	ldr	r2, [pc, #12]	@ (800944c <disk_initialize+0x4c>)
 800943e:	2101      	movs	r1, #1
 8009440:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	200010e4 	.word	0x200010e4

08009450 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009450:	b590      	push	{r4, r7, lr}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
 800945a:	603b      	str	r3, [r7, #0]
 800945c:	4603      	mov	r3, r0
 800945e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	4a0a      	ldr	r2, [pc, #40]	@ (800948c <disk_read+0x3c>)
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	689c      	ldr	r4, [r3, #8]
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	4a07      	ldr	r2, [pc, #28]	@ (800948c <disk_read+0x3c>)
 8009470:	4413      	add	r3, r2
 8009472:	7a18      	ldrb	r0, [r3, #8]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	47a0      	blx	r4
 800947c:	4603      	mov	r3, r0
 800947e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
}
 8009482:	4618      	mov	r0, r3
 8009484:	371c      	adds	r7, #28
 8009486:	46bd      	mov	sp, r7
 8009488:	bd90      	pop	{r4, r7, pc}
 800948a:	bf00      	nop
 800948c:	200010e4 	.word	0x200010e4

08009490 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	4a0a      	ldr	r2, [pc, #40]	@ (80094cc <disk_write+0x3c>)
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	68dc      	ldr	r4, [r3, #12]
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	4a07      	ldr	r2, [pc, #28]	@ (80094cc <disk_write+0x3c>)
 80094b0:	4413      	add	r3, r2
 80094b2:	7a18      	ldrb	r0, [r3, #8]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	47a0      	blx	r4
 80094bc:	4603      	mov	r3, r0
 80094be:	75fb      	strb	r3, [r7, #23]
  return res;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd90      	pop	{r4, r7, pc}
 80094ca:	bf00      	nop
 80094cc:	200010e4 	.word	0x200010e4

080094d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	603a      	str	r2, [r7, #0]
 80094da:	71fb      	strb	r3, [r7, #7]
 80094dc:	460b      	mov	r3, r1
 80094de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	4a09      	ldr	r2, [pc, #36]	@ (8009508 <disk_ioctl+0x38>)
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	79fa      	ldrb	r2, [r7, #7]
 80094ee:	4906      	ldr	r1, [pc, #24]	@ (8009508 <disk_ioctl+0x38>)
 80094f0:	440a      	add	r2, r1
 80094f2:	7a10      	ldrb	r0, [r2, #8]
 80094f4:	79b9      	ldrb	r1, [r7, #6]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	4798      	blx	r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	200010e4 	.word	0x200010e4

0800950c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3301      	adds	r3, #1
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800951c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009520:	021b      	lsls	r3, r3, #8
 8009522:	b21a      	sxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	b21b      	sxth	r3, r3
 800952a:	4313      	orrs	r3, r2
 800952c:	b21b      	sxth	r3, r3
 800952e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009530:	89fb      	ldrh	r3, [r7, #14]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3303      	adds	r3, #3
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	021b      	lsls	r3, r3, #8
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	3202      	adds	r2, #2
 8009556:	7812      	ldrb	r2, [r2, #0]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	021b      	lsls	r3, r3, #8
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	3201      	adds	r2, #1
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	4313      	orrs	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	7812      	ldrb	r2, [r2, #0]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
	return rv;
 8009576:	68fb      	ldr	r3, [r7, #12]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	607a      	str	r2, [r7, #4]
 8009596:	887a      	ldrh	r2, [r7, #2]
 8009598:	b2d2      	uxtb	r2, r2
 800959a:	701a      	strb	r2, [r3, #0]
 800959c:	887b      	ldrh	r3, [r7, #2]
 800959e:	0a1b      	lsrs	r3, r3, #8
 80095a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	607a      	str	r2, [r7, #4]
 80095a8:	887a      	ldrh	r2, [r7, #2]
 80095aa:	b2d2      	uxtb	r2, r2
 80095ac:	701a      	strb	r2, [r3, #0]
}
 80095ae:	bf00      	nop
 80095b0:	370c      	adds	r7, #12
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	607a      	str	r2, [r7, #4]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	b2d2      	uxtb	r2, r2
 80095ce:	701a      	strb	r2, [r3, #0]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	0a1b      	lsrs	r3, r3, #8
 80095d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	0a1b      	lsrs	r3, r3, #8
 80095e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	607a      	str	r2, [r7, #4]
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	b2d2      	uxtb	r2, r2
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	0a1b      	lsrs	r3, r3, #8
 80095f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	b2d2      	uxtb	r2, r2
 8009604:	701a      	strb	r2, [r3, #0]
}
 8009606:	bf00      	nop
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr

08009612 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009612:	b480      	push	{r7}
 8009614:	b087      	sub	sp, #28
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00d      	beq.n	8009648 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	1c53      	adds	r3, r2, #1
 8009630:	613b      	str	r3, [r7, #16]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	1c59      	adds	r1, r3, #1
 8009636:	6179      	str	r1, [r7, #20]
 8009638:	7812      	ldrb	r2, [r2, #0]
 800963a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3b01      	subs	r3, #1
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1f1      	bne.n	800962c <mem_cpy+0x1a>
	}
}
 8009648:	bf00      	nop
 800964a:	371c      	adds	r7, #28
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	617a      	str	r2, [r7, #20]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3b01      	subs	r3, #1
 8009674:	607b      	str	r3, [r7, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1f3      	bne.n	8009664 <mem_set+0x10>
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800968a:	b480      	push	{r7}
 800968c:	b089      	sub	sp, #36	@ 0x24
 800968e:	af00      	add	r7, sp, #0
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	61fb      	str	r3, [r7, #28]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800969e:	2300      	movs	r3, #0
 80096a0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	61fa      	str	r2, [r7, #28]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	4619      	mov	r1, r3
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	61ba      	str	r2, [r7, #24]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	1acb      	subs	r3, r1, r3
 80096b6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	607b      	str	r3, [r7, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <mem_cmp+0x40>
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0eb      	beq.n	80096a2 <mem_cmp+0x18>

	return r;
 80096ca:	697b      	ldr	r3, [r7, #20]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3724      	adds	r7, #36	@ 0x24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80096e2:	e002      	b.n	80096ea <chk_chr+0x12>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3301      	adds	r3, #1
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <chk_chr+0x26>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d1f2      	bne.n	80096e4 <chk_chr+0xc>
	return *str;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	781b      	ldrb	r3, [r3, #0]
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
	...

08009710 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800971a:	2300      	movs	r3, #0
 800971c:	60bb      	str	r3, [r7, #8]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e029      	b.n	8009778 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009724:	4a27      	ldr	r2, [pc, #156]	@ (80097c4 <chk_lock+0xb4>)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	011b      	lsls	r3, r3, #4
 800972a:	4413      	add	r3, r2
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d01d      	beq.n	800976e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009732:	4a24      	ldr	r2, [pc, #144]	@ (80097c4 <chk_lock+0xb4>)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	011b      	lsls	r3, r3, #4
 8009738:	4413      	add	r3, r2
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	429a      	cmp	r2, r3
 8009742:	d116      	bne.n	8009772 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009744:	4a1f      	ldr	r2, [pc, #124]	@ (80097c4 <chk_lock+0xb4>)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	011b      	lsls	r3, r3, #4
 800974a:	4413      	add	r3, r2
 800974c:	3304      	adds	r3, #4
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009754:	429a      	cmp	r2, r3
 8009756:	d10c      	bne.n	8009772 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009758:	4a1a      	ldr	r2, [pc, #104]	@ (80097c4 <chk_lock+0xb4>)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	011b      	lsls	r3, r3, #4
 800975e:	4413      	add	r3, r2
 8009760:	3308      	adds	r3, #8
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009768:	429a      	cmp	r2, r3
 800976a:	d102      	bne.n	8009772 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800976c:	e007      	b.n	800977e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800976e:	2301      	movs	r3, #1
 8009770:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3301      	adds	r3, #1
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d9d2      	bls.n	8009724 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d109      	bne.n	8009798 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d102      	bne.n	8009790 <chk_lock+0x80>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b02      	cmp	r3, #2
 800978e:	d101      	bne.n	8009794 <chk_lock+0x84>
 8009790:	2300      	movs	r3, #0
 8009792:	e010      	b.n	80097b6 <chk_lock+0xa6>
 8009794:	2312      	movs	r3, #18
 8009796:	e00e      	b.n	80097b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d108      	bne.n	80097b0 <chk_lock+0xa0>
 800979e:	4a09      	ldr	r2, [pc, #36]	@ (80097c4 <chk_lock+0xb4>)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	011b      	lsls	r3, r3, #4
 80097a4:	4413      	add	r3, r2
 80097a6:	330c      	adds	r3, #12
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ae:	d101      	bne.n	80097b4 <chk_lock+0xa4>
 80097b0:	2310      	movs	r3, #16
 80097b2:	e000      	b.n	80097b6 <chk_lock+0xa6>
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	200010c4 	.word	0x200010c4

080097c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80097ce:	2300      	movs	r3, #0
 80097d0:	607b      	str	r3, [r7, #4]
 80097d2:	e002      	b.n	80097da <enq_lock+0x12>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	3301      	adds	r3, #1
 80097d8:	607b      	str	r3, [r7, #4]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d806      	bhi.n	80097ee <enq_lock+0x26>
 80097e0:	4a09      	ldr	r2, [pc, #36]	@ (8009808 <enq_lock+0x40>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	4413      	add	r3, r2
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1f2      	bne.n	80097d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	bf14      	ite	ne
 80097f4:	2301      	movne	r3, #1
 80097f6:	2300      	moveq	r3, #0
 80097f8:	b2db      	uxtb	r3, r3
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	200010c4 	.word	0x200010c4

0800980c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009816:	2300      	movs	r3, #0
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	e01f      	b.n	800985c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800981c:	4a41      	ldr	r2, [pc, #260]	@ (8009924 <inc_lock+0x118>)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	011b      	lsls	r3, r3, #4
 8009822:	4413      	add	r3, r2
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d113      	bne.n	8009856 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800982e:	4a3d      	ldr	r2, [pc, #244]	@ (8009924 <inc_lock+0x118>)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	011b      	lsls	r3, r3, #4
 8009834:	4413      	add	r3, r2
 8009836:	3304      	adds	r3, #4
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800983e:	429a      	cmp	r2, r3
 8009840:	d109      	bne.n	8009856 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009842:	4a38      	ldr	r2, [pc, #224]	@ (8009924 <inc_lock+0x118>)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	011b      	lsls	r3, r3, #4
 8009848:	4413      	add	r3, r2
 800984a:	3308      	adds	r3, #8
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009852:	429a      	cmp	r2, r3
 8009854:	d006      	beq.n	8009864 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d9dc      	bls.n	800981c <inc_lock+0x10>
 8009862:	e000      	b.n	8009866 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009864:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b02      	cmp	r3, #2
 800986a:	d132      	bne.n	80098d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800986c:	2300      	movs	r3, #0
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	e002      	b.n	8009878 <inc_lock+0x6c>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d806      	bhi.n	800988c <inc_lock+0x80>
 800987e:	4a29      	ldr	r2, [pc, #164]	@ (8009924 <inc_lock+0x118>)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	011b      	lsls	r3, r3, #4
 8009884:	4413      	add	r3, r2
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1f2      	bne.n	8009872 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b02      	cmp	r3, #2
 8009890:	d101      	bne.n	8009896 <inc_lock+0x8a>
 8009892:	2300      	movs	r3, #0
 8009894:	e040      	b.n	8009918 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	4922      	ldr	r1, [pc, #136]	@ (8009924 <inc_lock+0x118>)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	011b      	lsls	r3, r3, #4
 80098a0:	440b      	add	r3, r1
 80098a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	689a      	ldr	r2, [r3, #8]
 80098a8:	491e      	ldr	r1, [pc, #120]	@ (8009924 <inc_lock+0x118>)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	440b      	add	r3, r1
 80098b0:	3304      	adds	r3, #4
 80098b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	695a      	ldr	r2, [r3, #20]
 80098b8:	491a      	ldr	r1, [pc, #104]	@ (8009924 <inc_lock+0x118>)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	440b      	add	r3, r1
 80098c0:	3308      	adds	r3, #8
 80098c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80098c4:	4a17      	ldr	r2, [pc, #92]	@ (8009924 <inc_lock+0x118>)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	011b      	lsls	r3, r3, #4
 80098ca:	4413      	add	r3, r2
 80098cc:	330c      	adds	r3, #12
 80098ce:	2200      	movs	r2, #0
 80098d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d009      	beq.n	80098ec <inc_lock+0xe0>
 80098d8:	4a12      	ldr	r2, [pc, #72]	@ (8009924 <inc_lock+0x118>)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	011b      	lsls	r3, r3, #4
 80098de:	4413      	add	r3, r2
 80098e0:	330c      	adds	r3, #12
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <inc_lock+0xe0>
 80098e8:	2300      	movs	r3, #0
 80098ea:	e015      	b.n	8009918 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d108      	bne.n	8009904 <inc_lock+0xf8>
 80098f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009924 <inc_lock+0x118>)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	4413      	add	r3, r2
 80098fa:	330c      	adds	r3, #12
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	3301      	adds	r3, #1
 8009900:	b29a      	uxth	r2, r3
 8009902:	e001      	b.n	8009908 <inc_lock+0xfc>
 8009904:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009908:	4906      	ldr	r1, [pc, #24]	@ (8009924 <inc_lock+0x118>)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	440b      	add	r3, r1
 8009910:	330c      	adds	r3, #12
 8009912:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3301      	adds	r3, #1
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	200010c4 	.word	0x200010c4

08009928 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3b01      	subs	r3, #1
 8009934:	607b      	str	r3, [r7, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d825      	bhi.n	8009988 <dec_lock+0x60>
		n = Files[i].ctr;
 800993c:	4a17      	ldr	r2, [pc, #92]	@ (800999c <dec_lock+0x74>)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	011b      	lsls	r3, r3, #4
 8009942:	4413      	add	r3, r2
 8009944:	330c      	adds	r3, #12
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800994a:	89fb      	ldrh	r3, [r7, #14]
 800994c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009950:	d101      	bne.n	8009956 <dec_lock+0x2e>
 8009952:	2300      	movs	r3, #0
 8009954:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009956:	89fb      	ldrh	r3, [r7, #14]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <dec_lock+0x3a>
 800995c:	89fb      	ldrh	r3, [r7, #14]
 800995e:	3b01      	subs	r3, #1
 8009960:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009962:	4a0e      	ldr	r2, [pc, #56]	@ (800999c <dec_lock+0x74>)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	4413      	add	r3, r2
 800996a:	330c      	adds	r3, #12
 800996c:	89fa      	ldrh	r2, [r7, #14]
 800996e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009970:	89fb      	ldrh	r3, [r7, #14]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d105      	bne.n	8009982 <dec_lock+0x5a>
 8009976:	4a09      	ldr	r2, [pc, #36]	@ (800999c <dec_lock+0x74>)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	011b      	lsls	r3, r3, #4
 800997c:	4413      	add	r3, r2
 800997e:	2200      	movs	r2, #0
 8009980:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	737b      	strb	r3, [r7, #13]
 8009986:	e001      	b.n	800998c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009988:	2302      	movs	r3, #2
 800998a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800998c:	7b7b      	ldrb	r3, [r7, #13]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	200010c4 	.word	0x200010c4

080099a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e010      	b.n	80099d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80099ae:	4a0d      	ldr	r2, [pc, #52]	@ (80099e4 <clear_lock+0x44>)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	011b      	lsls	r3, r3, #4
 80099b4:	4413      	add	r3, r2
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d105      	bne.n	80099ca <clear_lock+0x2a>
 80099be:	4a09      	ldr	r2, [pc, #36]	@ (80099e4 <clear_lock+0x44>)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	011b      	lsls	r3, r3, #4
 80099c4:	4413      	add	r3, r2
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3301      	adds	r3, #1
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d9eb      	bls.n	80099ae <clear_lock+0xe>
	}
}
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	200010c4 	.word	0x200010c4

080099e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	78db      	ldrb	r3, [r3, #3]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d034      	beq.n	8009a66 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a00:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	7858      	ldrb	r0, [r3, #1]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	f7ff fd3e 	bl	8009490 <disk_write>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	73fb      	strb	r3, [r7, #15]
 8009a1e:	e022      	b.n	8009a66 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	1ad2      	subs	r2, r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d217      	bcs.n	8009a66 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	789b      	ldrb	r3, [r3, #2]
 8009a3a:	613b      	str	r3, [r7, #16]
 8009a3c:	e010      	b.n	8009a60 <sync_window+0x78>
					wsect += fs->fsize;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	4413      	add	r3, r2
 8009a46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7858      	ldrb	r0, [r3, #1]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a52:	2301      	movs	r3, #1
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	f7ff fd1b 	bl	8009490 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	613b      	str	r3, [r7, #16]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d8eb      	bhi.n	8009a3e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d01b      	beq.n	8009ac0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7ff ffad 	bl	80099e8 <sync_window>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d113      	bne.n	8009ac0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	7858      	ldrb	r0, [r3, #1]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	683a      	ldr	r2, [r7, #0]
 8009aa6:	f7ff fcd3 	bl	8009450 <disk_read>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d004      	beq.n	8009aba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff ff87 	bl	80099e8 <sync_window>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d158      	bne.n	8009b96 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d148      	bne.n	8009b7e <sync_fs+0xb2>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	791b      	ldrb	r3, [r3, #4]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d144      	bne.n	8009b7e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3330      	adds	r3, #48	@ 0x30
 8009af8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009afc:	2100      	movs	r1, #0
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff fda8 	bl	8009654 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3330      	adds	r3, #48	@ 0x30
 8009b08:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009b0c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7ff fd37 	bl	8009584 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	3330      	adds	r3, #48	@ 0x30
 8009b1a:	4921      	ldr	r1, [pc, #132]	@ (8009ba0 <sync_fs+0xd4>)
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff fd4c 	bl	80095ba <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3330      	adds	r3, #48	@ 0x30
 8009b26:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009b2a:	491e      	ldr	r1, [pc, #120]	@ (8009ba4 <sync_fs+0xd8>)
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff fd44 	bl	80095ba <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3330      	adds	r3, #48	@ 0x30
 8009b36:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4610      	mov	r0, r2
 8009b42:	f7ff fd3a 	bl	80095ba <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	3330      	adds	r3, #48	@ 0x30
 8009b4a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	4619      	mov	r1, r3
 8009b54:	4610      	mov	r0, r2
 8009b56:	f7ff fd30 	bl	80095ba <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	7858      	ldrb	r0, [r3, #1]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b72:	2301      	movs	r3, #1
 8009b74:	f7ff fc8c 	bl	8009490 <disk_write>
			fs->fsi_flag = 0;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	785b      	ldrb	r3, [r3, #1]
 8009b82:	2200      	movs	r2, #0
 8009b84:	2100      	movs	r1, #0
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fca2 	bl	80094d0 <disk_ioctl>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <sync_fs+0xca>
 8009b92:	2301      	movs	r3, #1
 8009b94:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	41615252 	.word	0x41615252
 8009ba4:	61417272 	.word	0x61417272

08009ba8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	3b02      	subs	r3, #2
 8009bb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	3b02      	subs	r3, #2
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d301      	bcc.n	8009bc8 <clust2sect+0x20>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e008      	b.n	8009bda <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	895b      	ldrh	r3, [r3, #10]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	fb03 f202 	mul.w	r2, r3, r2
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd8:	4413      	add	r3, r2
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b086      	sub	sp, #24
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d904      	bls.n	8009c06 <get_fat+0x20>
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d302      	bcc.n	8009c0c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c06:	2301      	movs	r3, #1
 8009c08:	617b      	str	r3, [r7, #20]
 8009c0a:	e08e      	b.n	8009d2a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d061      	beq.n	8009cde <get_fat+0xf8>
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	dc7b      	bgt.n	8009d16 <get_fat+0x130>
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d002      	beq.n	8009c28 <get_fat+0x42>
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d041      	beq.n	8009caa <get_fat+0xc4>
 8009c26:	e076      	b.n	8009d16 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4413      	add	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	6a1a      	ldr	r2, [r3, #32]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	0a5b      	lsrs	r3, r3, #9
 8009c3e:	4413      	add	r3, r2
 8009c40:	4619      	mov	r1, r3
 8009c42:	6938      	ldr	r0, [r7, #16]
 8009c44:	f7ff ff14 	bl	8009a70 <move_window>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d166      	bne.n	8009d1c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	60fa      	str	r2, [r7, #12]
 8009c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6a1a      	ldr	r2, [r3, #32]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	0a5b      	lsrs	r3, r3, #9
 8009c6a:	4413      	add	r3, r2
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6938      	ldr	r0, [r7, #16]
 8009c70:	f7ff fefe 	bl	8009a70 <move_window>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d152      	bne.n	8009d20 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4413      	add	r3, r2
 8009c84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c88:	021b      	lsls	r3, r3, #8
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d002      	beq.n	8009ca0 <get_fat+0xba>
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	091b      	lsrs	r3, r3, #4
 8009c9e:	e002      	b.n	8009ca6 <get_fat+0xc0>
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ca6:	617b      	str	r3, [r7, #20]
			break;
 8009ca8:	e03f      	b.n	8009d2a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	6a1a      	ldr	r2, [r3, #32]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	0a1b      	lsrs	r3, r3, #8
 8009cb2:	4413      	add	r3, r2
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6938      	ldr	r0, [r7, #16]
 8009cb8:	f7ff feda 	bl	8009a70 <move_window>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d130      	bne.n	8009d24 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009cd0:	4413      	add	r3, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7ff fc1a 	bl	800950c <ld_word>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	617b      	str	r3, [r7, #20]
			break;
 8009cdc:	e025      	b.n	8009d2a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	6a1a      	ldr	r2, [r3, #32]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	09db      	lsrs	r3, r3, #7
 8009ce6:	4413      	add	r3, r2
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6938      	ldr	r0, [r7, #16]
 8009cec:	f7ff fec0 	bl	8009a70 <move_window>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d118      	bne.n	8009d28 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009d04:	4413      	add	r3, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7ff fc19 	bl	800953e <ld_dword>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009d12:	617b      	str	r3, [r7, #20]
			break;
 8009d14:	e009      	b.n	8009d2a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009d16:	2301      	movs	r3, #1
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	e006      	b.n	8009d2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d1c:	bf00      	nop
 8009d1e:	e004      	b.n	8009d2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d20:	bf00      	nop
 8009d22:	e002      	b.n	8009d2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d24:	bf00      	nop
 8009d26:	e000      	b.n	8009d2a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d28:	bf00      	nop
		}
	}

	return val;
 8009d2a:	697b      	ldr	r3, [r7, #20]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b089      	sub	sp, #36	@ 0x24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009d40:	2302      	movs	r3, #2
 8009d42:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	f240 80d9 	bls.w	8009efe <put_fat+0x1ca>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	f080 80d3 	bcs.w	8009efe <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	f000 8096 	beq.w	8009e8e <put_fat+0x15a>
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	f300 80cb 	bgt.w	8009efe <put_fat+0x1ca>
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d002      	beq.n	8009d72 <put_fat+0x3e>
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d06e      	beq.n	8009e4e <put_fat+0x11a>
 8009d70:	e0c5      	b.n	8009efe <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	61bb      	str	r3, [r7, #24]
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	085b      	lsrs	r3, r3, #1
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6a1a      	ldr	r2, [r3, #32]
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	0a5b      	lsrs	r3, r3, #9
 8009d88:	4413      	add	r3, r2
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f7ff fe6f 	bl	8009a70 <move_window>
 8009d92:	4603      	mov	r3, r0
 8009d94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d96:	7ffb      	ldrb	r3, [r7, #31]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f040 80a9 	bne.w	8009ef0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	1c59      	adds	r1, r3, #1
 8009da8:	61b9      	str	r1, [r7, #24]
 8009daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dae:	4413      	add	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00d      	beq.n	8009dd8 <put_fat+0xa4>
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	b25b      	sxtb	r3, r3
 8009dc2:	f003 030f 	and.w	r3, r3, #15
 8009dc6:	b25a      	sxtb	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	b25b      	sxtb	r3, r3
 8009dcc:	011b      	lsls	r3, r3, #4
 8009dce:	b25b      	sxtb	r3, r3
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	b25b      	sxtb	r3, r3
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	e001      	b.n	8009ddc <put_fat+0xa8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2201      	movs	r2, #1
 8009de4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6a1a      	ldr	r2, [r3, #32]
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	0a5b      	lsrs	r3, r3, #9
 8009dee:	4413      	add	r3, r2
 8009df0:	4619      	mov	r1, r3
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f7ff fe3c 	bl	8009a70 <move_window>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009dfc:	7ffb      	ldrb	r3, [r7, #31]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d178      	bne.n	8009ef4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e0e:	4413      	add	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <put_fat+0xf0>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	091b      	lsrs	r3, r3, #4
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	e00e      	b.n	8009e42 <put_fat+0x10e>
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	b25b      	sxtb	r3, r3
 8009e2a:	f023 030f 	bic.w	r3, r3, #15
 8009e2e:	b25a      	sxtb	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	b25b      	sxtb	r3, r3
 8009e36:	f003 030f 	and.w	r3, r3, #15
 8009e3a:	b25b      	sxtb	r3, r3
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	b25b      	sxtb	r3, r3
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	70da      	strb	r2, [r3, #3]
			break;
 8009e4c:	e057      	b.n	8009efe <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6a1a      	ldr	r2, [r3, #32]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	0a1b      	lsrs	r3, r3, #8
 8009e56:	4413      	add	r3, r2
 8009e58:	4619      	mov	r1, r3
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff fe08 	bl	8009a70 <move_window>
 8009e60:	4603      	mov	r3, r0
 8009e62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e64:	7ffb      	ldrb	r3, [r7, #31]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d146      	bne.n	8009ef8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009e78:	4413      	add	r3, r2
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	b292      	uxth	r2, r2
 8009e7e:	4611      	mov	r1, r2
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7ff fb7f 	bl	8009584 <st_word>
			fs->wflag = 1;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	70da      	strb	r2, [r3, #3]
			break;
 8009e8c:	e037      	b.n	8009efe <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6a1a      	ldr	r2, [r3, #32]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	09db      	lsrs	r3, r3, #7
 8009e96:	4413      	add	r3, r2
 8009e98:	4619      	mov	r1, r3
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f7ff fde8 	bl	8009a70 <move_window>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ea4:	7ffb      	ldrb	r3, [r7, #31]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d128      	bne.n	8009efc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009ebe:	4413      	add	r3, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7ff fb3c 	bl	800953e <ld_dword>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009ecc:	4323      	orrs	r3, r4
 8009ece:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009ede:	4413      	add	r3, r2
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff fb69 	bl	80095ba <st_dword>
			fs->wflag = 1;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2201      	movs	r2, #1
 8009eec:	70da      	strb	r2, [r3, #3]
			break;
 8009eee:	e006      	b.n	8009efe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009ef0:	bf00      	nop
 8009ef2:	e004      	b.n	8009efe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009ef4:	bf00      	nop
 8009ef6:	e002      	b.n	8009efe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009ef8:	bf00      	nop
 8009efa:	e000      	b.n	8009efe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009efc:	bf00      	nop
		}
	}
	return res;
 8009efe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3724      	adds	r7, #36	@ 0x24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd90      	pop	{r4, r7, pc}

08009f08 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d904      	bls.n	8009f2e <remove_chain+0x26>
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d301      	bcc.n	8009f32 <remove_chain+0x2a>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	e04b      	b.n	8009fca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00c      	beq.n	8009f52 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009f38:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	69b8      	ldr	r0, [r7, #24]
 8009f40:	f7ff fef8 	bl	8009d34 <put_fat>
 8009f44:	4603      	mov	r3, r0
 8009f46:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009f48:	7ffb      	ldrb	r3, [r7, #31]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <remove_chain+0x4a>
 8009f4e:	7ffb      	ldrb	r3, [r7, #31]
 8009f50:	e03b      	b.n	8009fca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009f52:	68b9      	ldr	r1, [r7, #8]
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff fe46 	bl	8009be6 <get_fat>
 8009f5a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d031      	beq.n	8009fc6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d101      	bne.n	8009f6c <remove_chain+0x64>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	e02e      	b.n	8009fca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f72:	d101      	bne.n	8009f78 <remove_chain+0x70>
 8009f74:	2301      	movs	r3, #1
 8009f76:	e028      	b.n	8009fca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009f78:	2200      	movs	r2, #0
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	69b8      	ldr	r0, [r7, #24]
 8009f7e:	f7ff fed9 	bl	8009d34 <put_fat>
 8009f82:	4603      	mov	r3, r0
 8009f84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009f86:	7ffb      	ldrb	r3, [r7, #31]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <remove_chain+0x88>
 8009f8c:	7ffb      	ldrb	r3, [r7, #31]
 8009f8e:	e01c      	b.n	8009fca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	691a      	ldr	r2, [r3, #16]
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	3b02      	subs	r3, #2
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d20b      	bcs.n	8009fb6 <remove_chain+0xae>
			fs->free_clst++;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	1c5a      	adds	r2, r3, #1
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	791b      	ldrb	r3, [r3, #4]
 8009fac:	f043 0301 	orr.w	r3, r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d3c6      	bcc.n	8009f52 <remove_chain+0x4a>
 8009fc4:	e000      	b.n	8009fc8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009fc6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3720      	adds	r7, #32
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b088      	sub	sp, #32
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10d      	bne.n	800a004 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d004      	beq.n	8009ffe <create_chain+0x2c>
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	69ba      	ldr	r2, [r7, #24]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d31b      	bcc.n	800a036 <create_chain+0x64>
 8009ffe:	2301      	movs	r3, #1
 800a000:	61bb      	str	r3, [r7, #24]
 800a002:	e018      	b.n	800a036 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7ff fded 	bl	8009be6 <get_fat>
 800a00c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d801      	bhi.n	800a018 <create_chain+0x46>
 800a014:	2301      	movs	r3, #1
 800a016:	e070      	b.n	800a0fa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01e:	d101      	bne.n	800a024 <create_chain+0x52>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	e06a      	b.n	800a0fa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d201      	bcs.n	800a032 <create_chain+0x60>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	e063      	b.n	800a0fa <create_chain+0x128>
		scl = clst;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	3301      	adds	r3, #1
 800a03e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	695b      	ldr	r3, [r3, #20]
 800a044:	69fa      	ldr	r2, [r7, #28]
 800a046:	429a      	cmp	r2, r3
 800a048:	d307      	bcc.n	800a05a <create_chain+0x88>
				ncl = 2;
 800a04a:	2302      	movs	r3, #2
 800a04c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	429a      	cmp	r2, r3
 800a054:	d901      	bls.n	800a05a <create_chain+0x88>
 800a056:	2300      	movs	r3, #0
 800a058:	e04f      	b.n	800a0fa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a05a:	69f9      	ldr	r1, [r7, #28]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff fdc2 	bl	8009be6 <get_fat>
 800a062:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00e      	beq.n	800a088 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d003      	beq.n	800a078 <create_chain+0xa6>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a076:	d101      	bne.n	800a07c <create_chain+0xaa>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	e03e      	b.n	800a0fa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	429a      	cmp	r2, r3
 800a082:	d1da      	bne.n	800a03a <create_chain+0x68>
 800a084:	2300      	movs	r3, #0
 800a086:	e038      	b.n	800a0fa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a088:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a08a:	f04f 32ff 	mov.w	r2, #4294967295
 800a08e:	69f9      	ldr	r1, [r7, #28]
 800a090:	6938      	ldr	r0, [r7, #16]
 800a092:	f7ff fe4f 	bl	8009d34 <put_fat>
 800a096:	4603      	mov	r3, r0
 800a098:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d109      	bne.n	800a0b4 <create_chain+0xe2>
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d006      	beq.n	800a0b4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a0a6:	69fa      	ldr	r2, [r7, #28]
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6938      	ldr	r0, [r7, #16]
 800a0ac:	f7ff fe42 	bl	8009d34 <put_fat>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d116      	bne.n	800a0e8 <create_chain+0x116>
		fs->last_clst = ncl;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	69fa      	ldr	r2, [r7, #28]
 800a0be:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	3b02      	subs	r3, #2
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d804      	bhi.n	800a0d8 <create_chain+0x106>
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	1e5a      	subs	r2, r3, #1
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	791b      	ldrb	r3, [r3, #4]
 800a0dc:	f043 0301 	orr.w	r3, r3, #1
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	711a      	strb	r2, [r3, #4]
 800a0e6:	e007      	b.n	800a0f8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d102      	bne.n	800a0f4 <create_chain+0x122>
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f2:	e000      	b.n	800a0f6 <create_chain+0x124>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a0f8:	69fb      	ldr	r3, [r7, #28]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3720      	adds	r7, #32
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a102:	b480      	push	{r7}
 800a104:	b087      	sub	sp, #28
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a116:	3304      	adds	r3, #4
 800a118:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	0a5b      	lsrs	r3, r3, #9
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	8952      	ldrh	r2, [r2, #10]
 800a122:	fbb3 f3f2 	udiv	r3, r3, r2
 800a126:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	1d1a      	adds	r2, r3, #4
 800a12c:	613a      	str	r2, [r7, #16]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d101      	bne.n	800a13c <clmt_clust+0x3a>
 800a138:	2300      	movs	r3, #0
 800a13a:	e010      	b.n	800a15e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a13c:	697a      	ldr	r2, [r7, #20]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	429a      	cmp	r2, r3
 800a142:	d307      	bcc.n	800a154 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	3304      	adds	r3, #4
 800a150:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a152:	e7e9      	b.n	800a128 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a154:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	4413      	add	r3, r2
}
 800a15e:	4618      	mov	r0, r3
 800a160:	371c      	adds	r7, #28
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b086      	sub	sp, #24
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a180:	d204      	bcs.n	800a18c <dir_sdi+0x22>
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	f003 031f 	and.w	r3, r3, #31
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a18c:	2302      	movs	r3, #2
 800a18e:	e063      	b.n	800a258 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d106      	bne.n	800a1b0 <dir_sdi+0x46>
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d902      	bls.n	800a1b0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10c      	bne.n	800a1d0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	095b      	lsrs	r3, r3, #5
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	8912      	ldrh	r2, [r2, #8]
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d301      	bcc.n	800a1c6 <dir_sdi+0x5c>
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	e048      	b.n	800a258 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	61da      	str	r2, [r3, #28]
 800a1ce:	e029      	b.n	800a224 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	895b      	ldrh	r3, [r3, #10]
 800a1d4:	025b      	lsls	r3, r3, #9
 800a1d6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a1d8:	e019      	b.n	800a20e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6979      	ldr	r1, [r7, #20]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7ff fd01 	bl	8009be6 <get_fat>
 800a1e4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ec:	d101      	bne.n	800a1f2 <dir_sdi+0x88>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e032      	b.n	800a258 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d904      	bls.n	800a202 <dir_sdi+0x98>
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d301      	bcc.n	800a206 <dir_sdi+0x9c>
 800a202:	2302      	movs	r3, #2
 800a204:	e028      	b.n	800a258 <dir_sdi+0xee>
			ofs -= csz;
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	429a      	cmp	r2, r3
 800a214:	d2e1      	bcs.n	800a1da <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a216:	6979      	ldr	r1, [r7, #20]
 800a218:	6938      	ldr	r0, [r7, #16]
 800a21a:	f7ff fcc5 	bl	8009ba8 <clust2sect>
 800a21e:	4602      	mov	r2, r0
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <dir_sdi+0xcc>
 800a232:	2302      	movs	r3, #2
 800a234:	e010      	b.n	800a258 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	69da      	ldr	r2, [r3, #28]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	0a5b      	lsrs	r3, r3, #9
 800a23e:	441a      	add	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a250:	441a      	add	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	3320      	adds	r3, #32
 800a276:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <dir_next+0x28>
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a286:	d301      	bcc.n	800a28c <dir_next+0x2c>
 800a288:	2304      	movs	r3, #4
 800a28a:	e0aa      	b.n	800a3e2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a292:	2b00      	cmp	r3, #0
 800a294:	f040 8098 	bne.w	800a3c8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10b      	bne.n	800a2c2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	095b      	lsrs	r3, r3, #5
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	8912      	ldrh	r2, [r2, #8]
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	f0c0 8088 	bcc.w	800a3c8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	61da      	str	r2, [r3, #28]
 800a2be:	2304      	movs	r3, #4
 800a2c0:	e08f      	b.n	800a3e2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	0a5b      	lsrs	r3, r3, #9
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	8952      	ldrh	r2, [r2, #10]
 800a2ca:	3a01      	subs	r2, #1
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d17a      	bne.n	800a3c8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4610      	mov	r0, r2
 800a2dc:	f7ff fc83 	bl	8009be6 <get_fat>
 800a2e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d801      	bhi.n	800a2ec <dir_next+0x8c>
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	e07a      	b.n	800a3e2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f2:	d101      	bne.n	800a2f8 <dir_next+0x98>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e074      	b.n	800a3e2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d358      	bcc.n	800a3b4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d104      	bne.n	800a312 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	61da      	str	r2, [r3, #28]
 800a30e:	2304      	movs	r3, #4
 800a310:	e067      	b.n	800a3e2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	4619      	mov	r1, r3
 800a31a:	4610      	mov	r0, r2
 800a31c:	f7ff fe59 	bl	8009fd2 <create_chain>
 800a320:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <dir_next+0xcc>
 800a328:	2307      	movs	r3, #7
 800a32a:	e05a      	b.n	800a3e2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <dir_next+0xd6>
 800a332:	2302      	movs	r3, #2
 800a334:	e055      	b.n	800a3e2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33c:	d101      	bne.n	800a342 <dir_next+0xe2>
 800a33e:	2301      	movs	r3, #1
 800a340:	e04f      	b.n	800a3e2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff fb50 	bl	80099e8 <sync_window>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <dir_next+0xf2>
 800a34e:	2301      	movs	r3, #1
 800a350:	e047      	b.n	800a3e2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	3330      	adds	r3, #48	@ 0x30
 800a356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a35a:	2100      	movs	r1, #0
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff f979 	bl	8009654 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a362:	2300      	movs	r3, #0
 800a364:	613b      	str	r3, [r7, #16]
 800a366:	6979      	ldr	r1, [r7, #20]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff fc1d 	bl	8009ba8 <clust2sect>
 800a36e:	4602      	mov	r2, r0
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a374:	e012      	b.n	800a39c <dir_next+0x13c>
						fs->wflag = 1;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2201      	movs	r2, #1
 800a37a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f7ff fb33 	bl	80099e8 <sync_window>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <dir_next+0x12c>
 800a388:	2301      	movs	r3, #1
 800a38a:	e02a      	b.n	800a3e2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	3301      	adds	r3, #1
 800a390:	613b      	str	r3, [r7, #16]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	895b      	ldrh	r3, [r3, #10]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d3e6      	bcc.n	800a376 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	1ad2      	subs	r2, r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a3ba:	6979      	ldr	r1, [r7, #20]
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f7ff fbf3 	bl	8009ba8 <clust2sect>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3da:	441a      	add	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b086      	sub	sp, #24
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7ff feb4 	bl	800a16a <dir_sdi>
 800a402:	4603      	mov	r3, r0
 800a404:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d12b      	bne.n	800a464 <dir_alloc+0x7a>
		n = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	69db      	ldr	r3, [r3, #28]
 800a414:	4619      	mov	r1, r3
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff fb2a 	bl	8009a70 <move_window>
 800a41c:	4603      	mov	r3, r0
 800a41e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d11d      	bne.n	800a462 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2be5      	cmp	r3, #229	@ 0xe5
 800a42e:	d004      	beq.n	800a43a <dir_alloc+0x50>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d107      	bne.n	800a44a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	3301      	adds	r3, #1
 800a43e:	613b      	str	r3, [r7, #16]
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	d102      	bne.n	800a44e <dir_alloc+0x64>
 800a448:	e00c      	b.n	800a464 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a44a:	2300      	movs	r3, #0
 800a44c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a44e:	2101      	movs	r1, #1
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff ff05 	bl	800a260 <dir_next>
 800a456:	4603      	mov	r3, r0
 800a458:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0d7      	beq.n	800a410 <dir_alloc+0x26>
 800a460:	e000      	b.n	800a464 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a462:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b04      	cmp	r3, #4
 800a468:	d101      	bne.n	800a46e <dir_alloc+0x84>
 800a46a:	2307      	movs	r3, #7
 800a46c:	75fb      	strb	r3, [r7, #23]
	return res;
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	331a      	adds	r3, #26
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff f840 	bl	800950c <ld_word>
 800a48c:	4603      	mov	r3, r0
 800a48e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b03      	cmp	r3, #3
 800a496:	d109      	bne.n	800a4ac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	3314      	adds	r3, #20
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7ff f835 	bl	800950c <ld_word>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	041b      	lsls	r3, r3, #16
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	331a      	adds	r3, #26
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	b292      	uxth	r2, r2
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff f859 	bl	8009584 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d109      	bne.n	800a4ee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	f103 0214 	add.w	r2, r3, #20
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	0c1b      	lsrs	r3, r3, #16
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	f7ff f84b 	bl	8009584 <st_word>
	}
}
 800a4ee:	bf00      	nop
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b086      	sub	sp, #24
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a500:	2304      	movs	r3, #4
 800a502:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800a50a:	e03c      	b.n	800a586 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	69db      	ldr	r3, [r3, #28]
 800a510:	4619      	mov	r1, r3
 800a512:	6938      	ldr	r0, [r7, #16]
 800a514:	f7ff faac 	bl	8009a70 <move_window>
 800a518:	4603      	mov	r3, r0
 800a51a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d136      	bne.n	800a590 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800a52a:	7bfb      	ldrb	r3, [r7, #15]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d102      	bne.n	800a536 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a530:	2304      	movs	r3, #4
 800a532:	75fb      	strb	r3, [r7, #23]
 800a534:	e031      	b.n	800a59a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	330b      	adds	r3, #11
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a542:	73bb      	strb	r3, [r7, #14]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7bba      	ldrb	r2, [r7, #14]
 800a548:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	2be5      	cmp	r3, #229	@ 0xe5
 800a54e:	d011      	beq.n	800a574 <dir_read+0x7e>
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	2b2e      	cmp	r3, #46	@ 0x2e
 800a554:	d00e      	beq.n	800a574 <dir_read+0x7e>
 800a556:	7bbb      	ldrb	r3, [r7, #14]
 800a558:	2b0f      	cmp	r3, #15
 800a55a:	d00b      	beq.n	800a574 <dir_read+0x7e>
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	f023 0320 	bic.w	r3, r3, #32
 800a562:	2b08      	cmp	r3, #8
 800a564:	bf0c      	ite	eq
 800a566:	2301      	moveq	r3, #1
 800a568:	2300      	movne	r3, #0
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	4293      	cmp	r3, r2
 800a572:	d00f      	beq.n	800a594 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a574:	2100      	movs	r1, #0
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fe72 	bl	800a260 <dir_next>
 800a57c:	4603      	mov	r3, r0
 800a57e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d108      	bne.n	800a598 <dir_read+0xa2>
	while (dp->sect) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1be      	bne.n	800a50c <dir_read+0x16>
 800a58e:	e004      	b.n	800a59a <dir_read+0xa4>
		if (res != FR_OK) break;
 800a590:	bf00      	nop
 800a592:	e002      	b.n	800a59a <dir_read+0xa4>
				break;
 800a594:	bf00      	nop
 800a596:	e000      	b.n	800a59a <dir_read+0xa4>
		if (res != FR_OK) break;
 800a598:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d002      	beq.n	800a5a6 <dir_read+0xb0>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	61da      	str	r2, [r3, #28]
	return res;
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a5be:	2100      	movs	r1, #0
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff fdd2 	bl	800a16a <dir_sdi>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <dir_find+0x24>
 800a5d0:	7dfb      	ldrb	r3, [r7, #23]
 800a5d2:	e03e      	b.n	800a652 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6938      	ldr	r0, [r7, #16]
 800a5dc:	f7ff fa48 	bl	8009a70 <move_window>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d12f      	bne.n	800a64a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <dir_find+0x4e>
 800a5f8:	2304      	movs	r3, #4
 800a5fa:	75fb      	strb	r3, [r7, #23]
 800a5fc:	e028      	b.n	800a650 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	330b      	adds	r3, #11
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	330b      	adds	r3, #11
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 0308 	and.w	r3, r3, #8
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10a      	bne.n	800a636 <dir_find+0x86>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a18      	ldr	r0, [r3, #32]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3324      	adds	r3, #36	@ 0x24
 800a628:	220b      	movs	r2, #11
 800a62a:	4619      	mov	r1, r3
 800a62c:	f7ff f82d 	bl	800968a <mem_cmp>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00b      	beq.n	800a64e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a636:	2100      	movs	r1, #0
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff fe11 	bl	800a260 <dir_next>
 800a63e:	4603      	mov	r3, r0
 800a640:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0c5      	beq.n	800a5d4 <dir_find+0x24>
 800a648:	e002      	b.n	800a650 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a64a:	bf00      	nop
 800a64c:	e000      	b.n	800a650 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a64e:	bf00      	nop

	return res;
 800a650:	7dfb      	ldrb	r3, [r7, #23]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3718      	adds	r7, #24
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a668:	2101      	movs	r1, #1
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff febd 	bl	800a3ea <dir_alloc>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d11c      	bne.n	800a6b4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	69db      	ldr	r3, [r3, #28]
 800a67e:	4619      	mov	r1, r3
 800a680:	68b8      	ldr	r0, [r7, #8]
 800a682:	f7ff f9f5 	bl	8009a70 <move_window>
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d111      	bne.n	800a6b4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	2220      	movs	r2, #32
 800a696:	2100      	movs	r1, #0
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fe ffdb 	bl	8009654 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a18      	ldr	r0, [r3, #32]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3324      	adds	r3, #36	@ 0x24
 800a6a6:	220b      	movs	r2, #11
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	f7fe ffb2 	bl	8009612 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff f9cc 	bl	8009a70 <move_window>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	22e5      	movs	r2, #229	@ 0xe5
 800a6e8:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800a6f0:	7afb      	ldrb	r3, [r7, #11]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
	...

0800a6fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3324      	adds	r3, #36	@ 0x24
 800a710:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a712:	220b      	movs	r2, #11
 800a714:	2120      	movs	r1, #32
 800a716:	68b8      	ldr	r0, [r7, #8]
 800a718:	f7fe ff9c 	bl	8009654 <mem_set>
	si = i = 0; ni = 8;
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	61fb      	str	r3, [r7, #28]
 800a724:	2308      	movs	r3, #8
 800a726:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	61fa      	str	r2, [r7, #28]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	4413      	add	r3, r2
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a736:	7efb      	ldrb	r3, [r7, #27]
 800a738:	2b20      	cmp	r3, #32
 800a73a:	d94e      	bls.n	800a7da <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a73c:	7efb      	ldrb	r3, [r7, #27]
 800a73e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a740:	d006      	beq.n	800a750 <create_name+0x54>
 800a742:	7efb      	ldrb	r3, [r7, #27]
 800a744:	2b5c      	cmp	r3, #92	@ 0x5c
 800a746:	d110      	bne.n	800a76a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a748:	e002      	b.n	800a750 <create_name+0x54>
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	3301      	adds	r3, #1
 800a74e:	61fb      	str	r3, [r7, #28]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	4413      	add	r3, r2
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	2b2f      	cmp	r3, #47	@ 0x2f
 800a75a:	d0f6      	beq.n	800a74a <create_name+0x4e>
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	4413      	add	r3, r2
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b5c      	cmp	r3, #92	@ 0x5c
 800a766:	d0f0      	beq.n	800a74a <create_name+0x4e>
			break;
 800a768:	e038      	b.n	800a7dc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a76a:	7efb      	ldrb	r3, [r7, #27]
 800a76c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a76e:	d003      	beq.n	800a778 <create_name+0x7c>
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	429a      	cmp	r2, r3
 800a776:	d30c      	bcc.n	800a792 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	2b0b      	cmp	r3, #11
 800a77c:	d002      	beq.n	800a784 <create_name+0x88>
 800a77e:	7efb      	ldrb	r3, [r7, #27]
 800a780:	2b2e      	cmp	r3, #46	@ 0x2e
 800a782:	d001      	beq.n	800a788 <create_name+0x8c>
 800a784:	2306      	movs	r3, #6
 800a786:	e044      	b.n	800a812 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a788:	2308      	movs	r3, #8
 800a78a:	613b      	str	r3, [r7, #16]
 800a78c:	230b      	movs	r3, #11
 800a78e:	617b      	str	r3, [r7, #20]
			continue;
 800a790:	e022      	b.n	800a7d8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a792:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a796:	2b00      	cmp	r3, #0
 800a798:	da04      	bge.n	800a7a4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a79a:	7efb      	ldrb	r3, [r7, #27]
 800a79c:	3b80      	subs	r3, #128	@ 0x80
 800a79e:	4a1f      	ldr	r2, [pc, #124]	@ (800a81c <create_name+0x120>)
 800a7a0:	5cd3      	ldrb	r3, [r2, r3]
 800a7a2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a7a4:	7efb      	ldrb	r3, [r7, #27]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	481d      	ldr	r0, [pc, #116]	@ (800a820 <create_name+0x124>)
 800a7aa:	f7fe ff95 	bl	80096d8 <chk_chr>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <create_name+0xbc>
 800a7b4:	2306      	movs	r3, #6
 800a7b6:	e02c      	b.n	800a812 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a7b8:	7efb      	ldrb	r3, [r7, #27]
 800a7ba:	2b60      	cmp	r3, #96	@ 0x60
 800a7bc:	d905      	bls.n	800a7ca <create_name+0xce>
 800a7be:	7efb      	ldrb	r3, [r7, #27]
 800a7c0:	2b7a      	cmp	r3, #122	@ 0x7a
 800a7c2:	d802      	bhi.n	800a7ca <create_name+0xce>
 800a7c4:	7efb      	ldrb	r3, [r7, #27]
 800a7c6:	3b20      	subs	r3, #32
 800a7c8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	613a      	str	r2, [r7, #16]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	7efa      	ldrb	r2, [r7, #27]
 800a7d6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a7d8:	e7a6      	b.n	800a728 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a7da:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	441a      	add	r2, r3
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d101      	bne.n	800a7f0 <create_name+0xf4>
 800a7ec:	2306      	movs	r3, #6
 800a7ee:	e010      	b.n	800a812 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2be5      	cmp	r3, #229	@ 0xe5
 800a7f6:	d102      	bne.n	800a7fe <create_name+0x102>
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2205      	movs	r2, #5
 800a7fc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a7fe:	7efb      	ldrb	r3, [r7, #27]
 800a800:	2b20      	cmp	r3, #32
 800a802:	d801      	bhi.n	800a808 <create_name+0x10c>
 800a804:	2204      	movs	r2, #4
 800a806:	e000      	b.n	800a80a <create_name+0x10e>
 800a808:	2200      	movs	r2, #0
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	330b      	adds	r3, #11
 800a80e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a810:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	08012714 	.word	0x08012714
 800a820:	08011370 	.word	0x08011370

0800a824 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a838:	e002      	b.n	800a840 <follow_path+0x1c>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	603b      	str	r3, [r7, #0]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	2b2f      	cmp	r3, #47	@ 0x2f
 800a846:	d0f8      	beq.n	800a83a <follow_path+0x16>
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a84e:	d0f4      	beq.n	800a83a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	2200      	movs	r2, #0
 800a854:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2b1f      	cmp	r3, #31
 800a85c:	d80a      	bhi.n	800a874 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2280      	movs	r2, #128	@ 0x80
 800a862:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a866:	2100      	movs	r1, #0
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f7ff fc7e 	bl	800a16a <dir_sdi>
 800a86e:	4603      	mov	r3, r0
 800a870:	75fb      	strb	r3, [r7, #23]
 800a872:	e043      	b.n	800a8fc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a874:	463b      	mov	r3, r7
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7ff ff3f 	bl	800a6fc <create_name>
 800a87e:	4603      	mov	r3, r0
 800a880:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a882:	7dfb      	ldrb	r3, [r7, #23]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d134      	bne.n	800a8f2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff fe91 	bl	800a5b0 <dir_find>
 800a88e:	4603      	mov	r3, r0
 800a890:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a898:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00a      	beq.n	800a8b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a8a0:	7dfb      	ldrb	r3, [r7, #23]
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d127      	bne.n	800a8f6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d122      	bne.n	800a8f6 <follow_path+0xd2>
 800a8b0:	2305      	movs	r3, #5
 800a8b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a8b4:	e01f      	b.n	800a8f6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a8b6:	7afb      	ldrb	r3, [r7, #11]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d11c      	bne.n	800a8fa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	799b      	ldrb	r3, [r3, #6]
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d102      	bne.n	800a8d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a8cc:	2305      	movs	r3, #5
 800a8ce:	75fb      	strb	r3, [r7, #23]
 800a8d0:	e014      	b.n	800a8fc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e0:	4413      	add	r3, r2
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7ff fdc7 	bl	800a478 <ld_clust>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a8f0:	e7c0      	b.n	800a874 <follow_path+0x50>
			if (res != FR_OK) break;
 800a8f2:	bf00      	nop
 800a8f4:	e002      	b.n	800a8fc <follow_path+0xd8>
				break;
 800a8f6:	bf00      	nop
 800a8f8:	e000      	b.n	800a8fc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a8fa:	bf00      	nop
			}
		}
	}

	return res;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a906:	b480      	push	{r7}
 800a908:	b087      	sub	sp, #28
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a90e:	f04f 33ff 	mov.w	r3, #4294967295
 800a912:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d031      	beq.n	800a980 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	617b      	str	r3, [r7, #20]
 800a922:	e002      	b.n	800a92a <get_ldnumber+0x24>
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	3301      	adds	r3, #1
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b20      	cmp	r3, #32
 800a930:	d903      	bls.n	800a93a <get_ldnumber+0x34>
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b3a      	cmp	r3, #58	@ 0x3a
 800a938:	d1f4      	bne.n	800a924 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	2b3a      	cmp	r3, #58	@ 0x3a
 800a940:	d11c      	bne.n	800a97c <get_ldnumber+0x76>
			tp = *path;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	1c5a      	adds	r2, r3, #1
 800a94c:	60fa      	str	r2, [r7, #12]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	3b30      	subs	r3, #48	@ 0x30
 800a952:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b09      	cmp	r3, #9
 800a958:	d80e      	bhi.n	800a978 <get_ldnumber+0x72>
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d10a      	bne.n	800a978 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d107      	bne.n	800a978 <get_ldnumber+0x72>
					vol = (int)i;
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	3301      	adds	r3, #1
 800a970:	617b      	str	r3, [r7, #20]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	e002      	b.n	800a982 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a97c:	2300      	movs	r3, #0
 800a97e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a980:	693b      	ldr	r3, [r7, #16]
}
 800a982:	4618      	mov	r0, r3
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	70da      	strb	r2, [r3, #3]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7ff f860 	bl	8009a70 <move_window>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <check_fs+0x2a>
 800a9b6:	2304      	movs	r3, #4
 800a9b8:	e038      	b.n	800aa2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	3330      	adds	r3, #48	@ 0x30
 800a9be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fe fda2 	bl	800950c <ld_word>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d001      	beq.n	800a9d8 <check_fs+0x48>
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e029      	b.n	800aa2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9de:	2be9      	cmp	r3, #233	@ 0xe9
 800a9e0:	d009      	beq.n	800a9f6 <check_fs+0x66>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9e8:	2beb      	cmp	r3, #235	@ 0xeb
 800a9ea:	d11e      	bne.n	800aa2a <check_fs+0x9a>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a9f2:	2b90      	cmp	r3, #144	@ 0x90
 800a9f4:	d119      	bne.n	800aa2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	3330      	adds	r3, #48	@ 0x30
 800a9fa:	3336      	adds	r3, #54	@ 0x36
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fe fd9e 	bl	800953e <ld_dword>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800aa08:	4a0a      	ldr	r2, [pc, #40]	@ (800aa34 <check_fs+0xa4>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d101      	bne.n	800aa12 <check_fs+0x82>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e00c      	b.n	800aa2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3330      	adds	r3, #48	@ 0x30
 800aa16:	3352      	adds	r3, #82	@ 0x52
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fe fd90 	bl	800953e <ld_dword>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4a05      	ldr	r2, [pc, #20]	@ (800aa38 <check_fs+0xa8>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d101      	bne.n	800aa2a <check_fs+0x9a>
 800aa26:	2300      	movs	r3, #0
 800aa28:	e000      	b.n	800aa2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aa2a:	2302      	movs	r3, #2
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	00544146 	.word	0x00544146
 800aa38:	33544146 	.word	0x33544146

0800aa3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b096      	sub	sp, #88	@ 0x58
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	4613      	mov	r3, r2
 800aa48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7ff ff58 	bl	800a906 <get_ldnumber>
 800aa56:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	da01      	bge.n	800aa62 <find_volume+0x26>
 800aa5e:	230b      	movs	r3, #11
 800aa60:	e22d      	b.n	800aebe <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aa62:	4aa1      	ldr	r2, [pc, #644]	@ (800ace8 <find_volume+0x2ac>)
 800aa64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <find_volume+0x3a>
 800aa72:	230c      	movs	r3, #12
 800aa74:	e223      	b.n	800aebe <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	f023 0301 	bic.w	r3, r3, #1
 800aa82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d01a      	beq.n	800aac2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8e:	785b      	ldrb	r3, [r3, #1]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe fc9b 	bl	80093cc <disk_status>
 800aa96:	4603      	mov	r3, r0
 800aa98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aa9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10c      	bne.n	800aac2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d007      	beq.n	800aabe <find_volume+0x82>
 800aaae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aab2:	f003 0304 	and.w	r3, r3, #4
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800aaba:	230a      	movs	r3, #10
 800aabc:	e1ff      	b.n	800aebe <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800aabe:	2300      	movs	r3, #0
 800aac0:	e1fd      	b.n	800aebe <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac4:	2200      	movs	r2, #0
 800aac6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aace:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fe fc93 	bl	8009400 <disk_initialize>
 800aada:	4603      	mov	r3, r0
 800aadc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aae0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aae4:	f003 0301 	and.w	r3, r3, #1
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aaec:	2303      	movs	r3, #3
 800aaee:	e1e6      	b.n	800aebe <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aaf0:	79fb      	ldrb	r3, [r7, #7]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d007      	beq.n	800ab06 <find_volume+0xca>
 800aaf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aafa:	f003 0304 	and.w	r3, r3, #4
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ab02:	230a      	movs	r3, #10
 800ab04:	e1db      	b.n	800aebe <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ab0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab0c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab0e:	f7ff ff3f 	bl	800a990 <check_fs>
 800ab12:	4603      	mov	r3, r0
 800ab14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ab18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d149      	bne.n	800abb4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab20:	2300      	movs	r3, #0
 800ab22:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab24:	e01e      	b.n	800ab64 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab2e:	011b      	lsls	r3, r3, #4
 800ab30:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ab34:	4413      	add	r3, r2
 800ab36:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ab38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <find_volume+0x114>
 800ab42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab44:	3308      	adds	r3, #8
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fcf9 	bl	800953e <ld_dword>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	e000      	b.n	800ab52 <find_volume+0x116>
 800ab50:	2200      	movs	r2, #0
 800ab52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	3358      	adds	r3, #88	@ 0x58
 800ab58:	443b      	add	r3, r7
 800ab5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab60:	3301      	adds	r3, #1
 800ab62:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab66:	2b03      	cmp	r3, #3
 800ab68:	d9dd      	bls.n	800ab26 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ab6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <find_volume+0x13e>
 800ab74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab76:	3b01      	subs	r3, #1
 800ab78:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ab7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	3358      	adds	r3, #88	@ 0x58
 800ab80:	443b      	add	r3, r7
 800ab82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ab86:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ab88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <find_volume+0x15e>
 800ab8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab92:	f7ff fefd 	bl	800a990 <check_fs>
 800ab96:	4603      	mov	r3, r0
 800ab98:	e000      	b.n	800ab9c <find_volume+0x160>
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800aba0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d905      	bls.n	800abb4 <find_volume+0x178>
 800aba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abaa:	3301      	adds	r3, #1
 800abac:	643b      	str	r3, [r7, #64]	@ 0x40
 800abae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d9e2      	bls.n	800ab7a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800abb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800abb8:	2b04      	cmp	r3, #4
 800abba:	d101      	bne.n	800abc0 <find_volume+0x184>
 800abbc:	2301      	movs	r3, #1
 800abbe:	e17e      	b.n	800aebe <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800abc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d901      	bls.n	800abcc <find_volume+0x190>
 800abc8:	230d      	movs	r3, #13
 800abca:	e178      	b.n	800aebe <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800abcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abce:	3330      	adds	r3, #48	@ 0x30
 800abd0:	330b      	adds	r3, #11
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fe fc9a 	bl	800950c <ld_word>
 800abd8:	4603      	mov	r3, r0
 800abda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abde:	d001      	beq.n	800abe4 <find_volume+0x1a8>
 800abe0:	230d      	movs	r3, #13
 800abe2:	e16c      	b.n	800aebe <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800abe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe6:	3330      	adds	r3, #48	@ 0x30
 800abe8:	3316      	adds	r3, #22
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fc8e 	bl	800950c <ld_word>
 800abf0:	4603      	mov	r3, r0
 800abf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800abf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d106      	bne.n	800ac08 <find_volume+0x1cc>
 800abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfc:	3330      	adds	r3, #48	@ 0x30
 800abfe:	3324      	adds	r3, #36	@ 0x24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fe fc9c 	bl	800953e <ld_dword>
 800ac06:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ac08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac0c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac10:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800ac14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ac18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1a:	789b      	ldrb	r3, [r3, #2]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d005      	beq.n	800ac2c <find_volume+0x1f0>
 800ac20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac22:	789b      	ldrb	r3, [r3, #2]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d001      	beq.n	800ac2c <find_volume+0x1f0>
 800ac28:	230d      	movs	r3, #13
 800ac2a:	e148      	b.n	800aebe <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2e:	789b      	ldrb	r3, [r3, #2]
 800ac30:	461a      	mov	r2, r3
 800ac32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac34:	fb02 f303 	mul.w	r3, r2, r3
 800ac38:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac40:	461a      	mov	r2, r3
 800ac42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ac46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac48:	895b      	ldrh	r3, [r3, #10]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d008      	beq.n	800ac60 <find_volume+0x224>
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac50:	895b      	ldrh	r3, [r3, #10]
 800ac52:	461a      	mov	r2, r3
 800ac54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac56:	895b      	ldrh	r3, [r3, #10]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d001      	beq.n	800ac64 <find_volume+0x228>
 800ac60:	230d      	movs	r3, #13
 800ac62:	e12c      	b.n	800aebe <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	3330      	adds	r3, #48	@ 0x30
 800ac68:	3311      	adds	r3, #17
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe fc4e 	bl	800950c <ld_word>
 800ac70:	4603      	mov	r3, r0
 800ac72:	461a      	mov	r2, r3
 800ac74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ac78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7a:	891b      	ldrh	r3, [r3, #8]
 800ac7c:	f003 030f 	and.w	r3, r3, #15
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <find_volume+0x24e>
 800ac86:	230d      	movs	r3, #13
 800ac88:	e119      	b.n	800aebe <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8c:	3330      	adds	r3, #48	@ 0x30
 800ac8e:	3313      	adds	r3, #19
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fe fc3b 	bl	800950c <ld_word>
 800ac96:	4603      	mov	r3, r0
 800ac98:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ac9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d106      	bne.n	800acae <find_volume+0x272>
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	3330      	adds	r3, #48	@ 0x30
 800aca4:	3320      	adds	r3, #32
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe fc49 	bl	800953e <ld_dword>
 800acac:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800acae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb0:	3330      	adds	r3, #48	@ 0x30
 800acb2:	330e      	adds	r3, #14
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe fc29 	bl	800950c <ld_word>
 800acba:	4603      	mov	r3, r0
 800acbc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800acbe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <find_volume+0x28c>
 800acc4:	230d      	movs	r3, #13
 800acc6:	e0fa      	b.n	800aebe <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800acc8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800acca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800accc:	4413      	add	r3, r2
 800acce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acd0:	8912      	ldrh	r2, [r2, #8]
 800acd2:	0912      	lsrs	r2, r2, #4
 800acd4:	b292      	uxth	r2, r2
 800acd6:	4413      	add	r3, r2
 800acd8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800acda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acde:	429a      	cmp	r2, r3
 800ace0:	d204      	bcs.n	800acec <find_volume+0x2b0>
 800ace2:	230d      	movs	r3, #13
 800ace4:	e0eb      	b.n	800aebe <find_volume+0x482>
 800ace6:	bf00      	nop
 800ace8:	200010bc 	.word	0x200010bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800acec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acf4:	8952      	ldrh	r2, [r2, #10]
 800acf6:	fbb3 f3f2 	udiv	r3, r3, r2
 800acfa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800acfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <find_volume+0x2ca>
 800ad02:	230d      	movs	r3, #13
 800ad04:	e0db      	b.n	800aebe <find_volume+0x482>
		fmt = FS_FAT32;
 800ad06:	2303      	movs	r3, #3
 800ad08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d802      	bhi.n	800ad1c <find_volume+0x2e0>
 800ad16:	2302      	movs	r3, #2
 800ad18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d802      	bhi.n	800ad2c <find_volume+0x2f0>
 800ad26:	2301      	movs	r3, #1
 800ad28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2e:	1c9a      	adds	r2, r3, #2
 800ad30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad32:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ad34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad38:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ad3a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ad3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad3e:	441a      	add	r2, r3
 800ad40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad42:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ad44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad48:	441a      	add	r2, r3
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800ad4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d11e      	bne.n	800ad94 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ad56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad58:	3330      	adds	r3, #48	@ 0x30
 800ad5a:	332a      	adds	r3, #42	@ 0x2a
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7fe fbd5 	bl	800950c <ld_word>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <find_volume+0x330>
 800ad68:	230d      	movs	r3, #13
 800ad6a:	e0a8      	b.n	800aebe <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	891b      	ldrh	r3, [r3, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <find_volume+0x33c>
 800ad74:	230d      	movs	r3, #13
 800ad76:	e0a2      	b.n	800aebe <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	3330      	adds	r3, #48	@ 0x30
 800ad7c:	332c      	adds	r3, #44	@ 0x2c
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fe fbdd 	bl	800953e <ld_dword>
 800ad84:	4602      	mov	r2, r0
 800ad86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad88:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad92:	e01f      	b.n	800add4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ad94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad96:	891b      	ldrh	r3, [r3, #8]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <find_volume+0x364>
 800ad9c:	230d      	movs	r3, #13
 800ad9e:	e08e      	b.n	800aebe <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ada0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada2:	6a1a      	ldr	r2, [r3, #32]
 800ada4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ada6:	441a      	add	r2, r3
 800ada8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adaa:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800adac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d103      	bne.n	800adbc <find_volume+0x380>
 800adb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb6:	695b      	ldr	r3, [r3, #20]
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	e00a      	b.n	800add2 <find_volume+0x396>
 800adbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adbe:	695a      	ldr	r2, [r3, #20]
 800adc0:	4613      	mov	r3, r2
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	4413      	add	r3, r2
 800adc6:	085a      	lsrs	r2, r3, #1
 800adc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adca:	695b      	ldr	r3, [r3, #20]
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800add2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800add4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add6:	699a      	ldr	r2, [r3, #24]
 800add8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adda:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800adde:	0a5b      	lsrs	r3, r3, #9
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d201      	bcs.n	800ade8 <find_volume+0x3ac>
 800ade4:	230d      	movs	r3, #13
 800ade6:	e06a      	b.n	800aebe <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ade8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adea:	f04f 32ff 	mov.w	r2, #4294967295
 800adee:	611a      	str	r2, [r3, #16]
 800adf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf2:	691a      	ldr	r2, [r3, #16]
 800adf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800adf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfa:	2280      	movs	r2, #128	@ 0x80
 800adfc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800adfe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d149      	bne.n	800ae9a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	3330      	adds	r3, #48	@ 0x30
 800ae0a:	3330      	adds	r3, #48	@ 0x30
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7fe fb7d 	bl	800950c <ld_word>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d140      	bne.n	800ae9a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ae18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ae20:	f7fe fe26 	bl	8009a70 <move_window>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d137      	bne.n	800ae9a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ae30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae32:	3330      	adds	r3, #48	@ 0x30
 800ae34:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7fe fb67 	bl	800950c <ld_word>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	461a      	mov	r2, r3
 800ae42:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d127      	bne.n	800ae9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4c:	3330      	adds	r3, #48	@ 0x30
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe fb75 	bl	800953e <ld_dword>
 800ae54:	4603      	mov	r3, r0
 800ae56:	4a1c      	ldr	r2, [pc, #112]	@ (800aec8 <find_volume+0x48c>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d11e      	bne.n	800ae9a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ae5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5e:	3330      	adds	r3, #48	@ 0x30
 800ae60:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fe fb6a 	bl	800953e <ld_dword>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	4a17      	ldr	r2, [pc, #92]	@ (800aecc <find_volume+0x490>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d113      	bne.n	800ae9a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ae72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae74:	3330      	adds	r3, #48	@ 0x30
 800ae76:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe fb5f 	bl	800953e <ld_dword>
 800ae80:	4602      	mov	r2, r0
 800ae82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae84:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ae86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae88:	3330      	adds	r3, #48	@ 0x30
 800ae8a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe fb55 	bl	800953e <ld_dword>
 800ae94:	4602      	mov	r2, r0
 800ae96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae98:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800aea0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aea2:	4b0b      	ldr	r3, [pc, #44]	@ (800aed0 <find_volume+0x494>)
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	3301      	adds	r3, #1
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	4b09      	ldr	r3, [pc, #36]	@ (800aed0 <find_volume+0x494>)
 800aeac:	801a      	strh	r2, [r3, #0]
 800aeae:	4b08      	ldr	r3, [pc, #32]	@ (800aed0 <find_volume+0x494>)
 800aeb0:	881a      	ldrh	r2, [r3, #0]
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aeb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aeb8:	f7fe fd72 	bl	80099a0 <clear_lock>
#endif
	return FR_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3758      	adds	r7, #88	@ 0x58
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	41615252 	.word	0x41615252
 800aecc:	61417272 	.word	0x61417272
 800aed0:	200010c0 	.word	0x200010c0

0800aed4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aede:	2309      	movs	r3, #9
 800aee0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d01c      	beq.n	800af22 <validate+0x4e>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d018      	beq.n	800af22 <validate+0x4e>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d013      	beq.n	800af22 <validate+0x4e>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	889a      	ldrh	r2, [r3, #4]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	88db      	ldrh	r3, [r3, #6]
 800af04:	429a      	cmp	r2, r3
 800af06:	d10c      	bne.n	800af22 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	785b      	ldrb	r3, [r3, #1]
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe fa5c 	bl	80093cc <disk_status>
 800af14:	4603      	mov	r3, r0
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d101      	bne.n	800af22 <validate+0x4e>
			res = FR_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800af22:	7bfb      	ldrb	r3, [r7, #15]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d102      	bne.n	800af2e <validate+0x5a>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	e000      	b.n	800af30 <validate+0x5c>
 800af2e:	2300      	movs	r3, #0
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	6013      	str	r3, [r2, #0]
	return res;
 800af34:	7bfb      	ldrb	r3, [r7, #15]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	4613      	mov	r3, r2
 800af4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800af52:	f107 0310 	add.w	r3, r7, #16
 800af56:	4618      	mov	r0, r3
 800af58:	f7ff fcd5 	bl	800a906 <get_ldnumber>
 800af5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	2b00      	cmp	r3, #0
 800af62:	da01      	bge.n	800af68 <f_mount+0x28>
 800af64:	230b      	movs	r3, #11
 800af66:	e02b      	b.n	800afc0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800af68:	4a17      	ldr	r2, [pc, #92]	@ (800afc8 <f_mount+0x88>)
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d005      	beq.n	800af84 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800af78:	69b8      	ldr	r0, [r7, #24]
 800af7a:	f7fe fd11 	bl	80099a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	2200      	movs	r2, #0
 800af82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d002      	beq.n	800af90 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	490d      	ldr	r1, [pc, #52]	@ (800afc8 <f_mount+0x88>)
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <f_mount+0x66>
 800afa0:	79fb      	ldrb	r3, [r7, #7]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d001      	beq.n	800afaa <f_mount+0x6a>
 800afa6:	2300      	movs	r3, #0
 800afa8:	e00a      	b.n	800afc0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800afaa:	f107 010c 	add.w	r1, r7, #12
 800afae:	f107 0308 	add.w	r3, r7, #8
 800afb2:	2200      	movs	r2, #0
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff fd41 	bl	800aa3c <find_volume>
 800afba:	4603      	mov	r3, r0
 800afbc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800afbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3720      	adds	r7, #32
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	200010bc 	.word	0x200010bc

0800afcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b098      	sub	sp, #96	@ 0x60
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	4613      	mov	r3, r2
 800afd8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <f_open+0x18>
 800afe0:	2309      	movs	r3, #9
 800afe2:	e1a9      	b.n	800b338 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800afec:	79fa      	ldrb	r2, [r7, #7]
 800afee:	f107 0110 	add.w	r1, r7, #16
 800aff2:	f107 0308 	add.w	r3, r7, #8
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff fd20 	bl	800aa3c <find_volume>
 800affc:	4603      	mov	r3, r0
 800affe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b002:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b006:	2b00      	cmp	r3, #0
 800b008:	f040 818d 	bne.w	800b326 <f_open+0x35a>
		dj.obj.fs = fs;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	f107 0314 	add.w	r3, r7, #20
 800b016:	4611      	mov	r1, r2
 800b018:	4618      	mov	r0, r3
 800b01a:	f7ff fc03 	bl	800a824 <follow_path>
 800b01e:	4603      	mov	r3, r0
 800b020:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b024:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d118      	bne.n	800b05e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b02c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b030:	b25b      	sxtb	r3, r3
 800b032:	2b00      	cmp	r3, #0
 800b034:	da03      	bge.n	800b03e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b036:	2306      	movs	r3, #6
 800b038:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b03c:	e00f      	b.n	800b05e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	2b01      	cmp	r3, #1
 800b042:	bf8c      	ite	hi
 800b044:	2301      	movhi	r3, #1
 800b046:	2300      	movls	r3, #0
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	461a      	mov	r2, r3
 800b04c:	f107 0314 	add.w	r3, r7, #20
 800b050:	4611      	mov	r1, r2
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe fb5c 	bl	8009710 <chk_lock>
 800b058:	4603      	mov	r3, r0
 800b05a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	f003 031c 	and.w	r3, r3, #28
 800b064:	2b00      	cmp	r3, #0
 800b066:	d07f      	beq.n	800b168 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b068:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d017      	beq.n	800b0a0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b070:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b074:	2b04      	cmp	r3, #4
 800b076:	d10e      	bne.n	800b096 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b078:	f7fe fba6 	bl	80097c8 <enq_lock>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d006      	beq.n	800b090 <f_open+0xc4>
 800b082:	f107 0314 	add.w	r3, r7, #20
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff fae7 	bl	800a65a <dir_register>
 800b08c:	4603      	mov	r3, r0
 800b08e:	e000      	b.n	800b092 <f_open+0xc6>
 800b090:	2312      	movs	r3, #18
 800b092:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b096:	79fb      	ldrb	r3, [r7, #7]
 800b098:	f043 0308 	orr.w	r3, r3, #8
 800b09c:	71fb      	strb	r3, [r7, #7]
 800b09e:	e010      	b.n	800b0c2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b0a0:	7ebb      	ldrb	r3, [r7, #26]
 800b0a2:	f003 0311 	and.w	r3, r3, #17
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <f_open+0xe6>
					res = FR_DENIED;
 800b0aa:	2307      	movs	r3, #7
 800b0ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b0b0:	e007      	b.n	800b0c2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b0b2:	79fb      	ldrb	r3, [r7, #7]
 800b0b4:	f003 0304 	and.w	r3, r3, #4
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <f_open+0xf6>
 800b0bc:	2308      	movs	r3, #8
 800b0be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b0c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d168      	bne.n	800b19c <f_open+0x1d0>
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	f003 0308 	and.w	r3, r3, #8
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d063      	beq.n	800b19c <f_open+0x1d0>
				dw = GET_FATTIME();
 800b0d4:	f7fd fc3e 	bl	8008954 <get_fattime>
 800b0d8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0dc:	330e      	adds	r3, #14
 800b0de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fe fa6a 	bl	80095ba <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0e8:	3316      	adds	r3, #22
 800b0ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fe fa64 	bl	80095ba <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0f4:	330b      	adds	r3, #11
 800b0f6:	2220      	movs	r2, #32
 800b0f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0fe:	4611      	mov	r1, r2
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff f9b9 	bl	800a478 <ld_clust>
 800b106:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b10c:	2200      	movs	r2, #0
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff f9d1 	bl	800a4b6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b116:	331c      	adds	r3, #28
 800b118:	2100      	movs	r1, #0
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe fa4d 	bl	80095ba <st_dword>
					fs->wflag = 1;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	2201      	movs	r2, #1
 800b124:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d037      	beq.n	800b19c <f_open+0x1d0>
						dw = fs->winsect;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b130:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b132:	f107 0314 	add.w	r3, r7, #20
 800b136:	2200      	movs	r2, #0
 800b138:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fe fee4 	bl	8009f08 <remove_chain>
 800b140:	4603      	mov	r3, r0
 800b142:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b146:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d126      	bne.n	800b19c <f_open+0x1d0>
							res = move_window(fs, dw);
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe fc8c 	bl	8009a70 <move_window>
 800b158:	4603      	mov	r3, r0
 800b15a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b162:	3a01      	subs	r2, #1
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	e019      	b.n	800b19c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b168:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d115      	bne.n	800b19c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b170:	7ebb      	ldrb	r3, [r7, #26]
 800b172:	f003 0310 	and.w	r3, r3, #16
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b17a:	2304      	movs	r3, #4
 800b17c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b180:	e00c      	b.n	800b19c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b182:	79fb      	ldrb	r3, [r7, #7]
 800b184:	f003 0302 	and.w	r3, r3, #2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d007      	beq.n	800b19c <f_open+0x1d0>
 800b18c:	7ebb      	ldrb	r3, [r7, #26]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	2b00      	cmp	r3, #0
 800b194:	d002      	beq.n	800b19c <f_open+0x1d0>
						res = FR_DENIED;
 800b196:	2307      	movs	r3, #7
 800b198:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b19c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d126      	bne.n	800b1f2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b1a4:	79fb      	ldrb	r3, [r7, #7]
 800b1a6:	f003 0308 	and.w	r3, r3, #8
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
 800b1b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b1be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	bf8c      	ite	hi
 800b1ca:	2301      	movhi	r3, #1
 800b1cc:	2300      	movls	r3, #0
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	f107 0314 	add.w	r3, r7, #20
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe fb17 	bl	800980c <inc_lock>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d102      	bne.n	800b1f2 <f_open+0x226>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b1f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f040 8095 	bne.w	800b326 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b200:	4611      	mov	r1, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff f938 	bl	800a478 <ld_clust>
 800b208:	4602      	mov	r2, r0
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b210:	331c      	adds	r3, #28
 800b212:	4618      	mov	r0, r3
 800b214:	f7fe f993 	bl	800953e <ld_dword>
 800b218:	4602      	mov	r2, r0
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	88da      	ldrh	r2, [r3, #6]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	79fa      	ldrb	r2, [r7, #7]
 800b236:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3330      	adds	r3, #48	@ 0x30
 800b24e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b252:	2100      	movs	r1, #0
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe f9fd 	bl	8009654 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b25a:	79fb      	ldrb	r3, [r7, #7]
 800b25c:	f003 0320 	and.w	r3, r3, #32
 800b260:	2b00      	cmp	r3, #0
 800b262:	d060      	beq.n	800b326 <f_open+0x35a>
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d05c      	beq.n	800b326 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	68da      	ldr	r2, [r3, #12]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	895b      	ldrh	r3, [r3, #10]
 800b278:	025b      	lsls	r3, r3, #9
 800b27a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	657b      	str	r3, [r7, #84]	@ 0x54
 800b288:	e016      	b.n	800b2b8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fca9 	bl	8009be6 <get_fat>
 800b294:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b296:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d802      	bhi.n	800b2a2 <f_open+0x2d6>
 800b29c:	2302      	movs	r3, #2
 800b29e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b2a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a8:	d102      	bne.n	800b2b0 <f_open+0x2e4>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b2b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b2b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d103      	bne.n	800b2c8 <f_open+0x2fc>
 800b2c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b2c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d8e0      	bhi.n	800b28a <f_open+0x2be>
				}
				fp->clust = clst;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b2cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b2ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d127      	bne.n	800b326 <f_open+0x35a>
 800b2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d022      	beq.n	800b326 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fe fc5f 	bl	8009ba8 <clust2sect>
 800b2ea:	6478      	str	r0, [r7, #68]	@ 0x44
 800b2ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d103      	bne.n	800b2fa <f_open+0x32e>
						res = FR_INT_ERR;
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b2f8:	e015      	b.n	800b326 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b2fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2fc:	0a5a      	lsrs	r2, r3, #9
 800b2fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b300:	441a      	add	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	7858      	ldrb	r0, [r3, #1]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6a1a      	ldr	r2, [r3, #32]
 800b314:	2301      	movs	r3, #1
 800b316:	f7fe f89b 	bl	8009450 <disk_read>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <f_open+0x35a>
 800b320:	2301      	movs	r3, #1
 800b322:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b326:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <f_open+0x368>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b334:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3760      	adds	r7, #96	@ 0x60
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b08e      	sub	sp, #56	@ 0x38
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2200      	movs	r2, #0
 800b356:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f107 0214 	add.w	r2, r7, #20
 800b35e:	4611      	mov	r1, r2
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff fdb7 	bl	800aed4 <validate>
 800b366:	4603      	mov	r3, r0
 800b368:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b36c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b370:	2b00      	cmp	r3, #0
 800b372:	d107      	bne.n	800b384 <f_read+0x44>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	7d5b      	ldrb	r3, [r3, #21]
 800b378:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b37c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <f_read+0x4a>
 800b384:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b388:	e115      	b.n	800b5b6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	7d1b      	ldrb	r3, [r3, #20]
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <f_read+0x5a>
 800b396:	2307      	movs	r3, #7
 800b398:	e10d      	b.n	800b5b6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	f240 80fe 	bls.w	800b5ac <f_read+0x26c>
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b3b4:	e0fa      	b.n	800b5ac <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	699b      	ldr	r3, [r3, #24]
 800b3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f040 80c6 	bne.w	800b550 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	0a5b      	lsrs	r3, r3, #9
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	8952      	ldrh	r2, [r2, #10]
 800b3ce:	3a01      	subs	r2, #1
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d12f      	bne.n	800b43a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d103      	bne.n	800b3ea <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3e8:	e013      	b.n	800b412 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d007      	beq.n	800b402 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	699b      	ldr	r3, [r3, #24]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7fe fe82 	bl	800a102 <clmt_clust>
 800b3fe:	6338      	str	r0, [r7, #48]	@ 0x30
 800b400:	e007      	b.n	800b412 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	69db      	ldr	r3, [r3, #28]
 800b408:	4619      	mov	r1, r3
 800b40a:	4610      	mov	r0, r2
 800b40c:	f7fe fbeb 	bl	8009be6 <get_fat>
 800b410:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b414:	2b01      	cmp	r3, #1
 800b416:	d804      	bhi.n	800b422 <f_read+0xe2>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2202      	movs	r2, #2
 800b41c:	755a      	strb	r2, [r3, #21]
 800b41e:	2302      	movs	r3, #2
 800b420:	e0c9      	b.n	800b5b6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b428:	d104      	bne.n	800b434 <f_read+0xf4>
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2201      	movs	r2, #1
 800b42e:	755a      	strb	r2, [r3, #21]
 800b430:	2301      	movs	r3, #1
 800b432:	e0c0      	b.n	800b5b6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b438:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	69db      	ldr	r3, [r3, #28]
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7fe fbb0 	bl	8009ba8 <clust2sect>
 800b448:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d104      	bne.n	800b45a <f_read+0x11a>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2202      	movs	r2, #2
 800b454:	755a      	strb	r2, [r3, #21]
 800b456:	2302      	movs	r3, #2
 800b458:	e0ad      	b.n	800b5b6 <f_read+0x276>
			sect += csect;
 800b45a:	69ba      	ldr	r2, [r7, #24]
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	4413      	add	r3, r2
 800b460:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	0a5b      	lsrs	r3, r3, #9
 800b466:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d039      	beq.n	800b4e2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b472:	4413      	add	r3, r2
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	8952      	ldrh	r2, [r2, #10]
 800b478:	4293      	cmp	r3, r2
 800b47a:	d905      	bls.n	800b488 <f_read+0x148>
					cc = fs->csize - csect;
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	895b      	ldrh	r3, [r3, #10]
 800b480:	461a      	mov	r2, r3
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	7858      	ldrb	r0, [r3, #1]
 800b48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48e:	69ba      	ldr	r2, [r7, #24]
 800b490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b492:	f7fd ffdd 	bl	8009450 <disk_read>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d004      	beq.n	800b4a6 <f_read+0x166>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	755a      	strb	r2, [r3, #21]
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e087      	b.n	800b5b6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	7d1b      	ldrb	r3, [r3, #20]
 800b4aa:	b25b      	sxtb	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	da14      	bge.n	800b4da <f_read+0x19a>
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6a1a      	ldr	r2, [r3, #32]
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d90d      	bls.n	800b4da <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6a1a      	ldr	r2, [r3, #32]
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	025b      	lsls	r3, r3, #9
 800b4c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4ca:	18d0      	adds	r0, r2, r3
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3330      	adds	r3, #48	@ 0x30
 800b4d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	f7fe f89c 	bl	8009612 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4dc:	025b      	lsls	r3, r3, #9
 800b4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b4e0:	e050      	b.n	800b584 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d02e      	beq.n	800b54a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	7d1b      	ldrb	r3, [r3, #20]
 800b4f0:	b25b      	sxtb	r3, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	da18      	bge.n	800b528 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	7858      	ldrb	r0, [r3, #1]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6a1a      	ldr	r2, [r3, #32]
 800b504:	2301      	movs	r3, #1
 800b506:	f7fd ffc3 	bl	8009490 <disk_write>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <f_read+0x1da>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2201      	movs	r2, #1
 800b514:	755a      	strb	r2, [r3, #21]
 800b516:	2301      	movs	r3, #1
 800b518:	e04d      	b.n	800b5b6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	7d1b      	ldrb	r3, [r3, #20]
 800b51e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b522:	b2da      	uxtb	r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	7858      	ldrb	r0, [r3, #1]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b532:	2301      	movs	r3, #1
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	f7fd ff8b 	bl	8009450 <disk_read>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d004      	beq.n	800b54a <f_read+0x20a>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2201      	movs	r2, #1
 800b544:	755a      	strb	r2, [r3, #21]
 800b546:	2301      	movs	r3, #1
 800b548:	e035      	b.n	800b5b6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	69ba      	ldr	r2, [r7, #24]
 800b54e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b558:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b55e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d901      	bls.n	800b56a <f_read+0x22a>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	699b      	ldr	r3, [r3, #24]
 800b574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b578:	4413      	add	r3, r2
 800b57a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b57c:	4619      	mov	r1, r3
 800b57e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b580:	f7fe f847 	bl	8009612 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	4413      	add	r3, r2
 800b58a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	699a      	ldr	r2, [r3, #24]
 800b590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b592:	441a      	add	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	619a      	str	r2, [r3, #24]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59e:	441a      	add	r2, r3
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	601a      	str	r2, [r3, #0]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f47f af01 	bne.w	800b3b6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3738      	adds	r7, #56	@ 0x38
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b08c      	sub	sp, #48	@ 0x30
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	60f8      	str	r0, [r7, #12]
 800b5c6:	60b9      	str	r1, [r7, #8]
 800b5c8:	607a      	str	r2, [r7, #4]
 800b5ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f107 0210 	add.w	r2, r7, #16
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff fc78 	bl	800aed4 <validate>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b5ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d107      	bne.n	800b602 <f_write+0x44>
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	7d5b      	ldrb	r3, [r3, #21]
 800b5f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b5fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d002      	beq.n	800b608 <f_write+0x4a>
 800b602:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b606:	e14b      	b.n	800b8a0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	7d1b      	ldrb	r3, [r3, #20]
 800b60c:	f003 0302 	and.w	r3, r3, #2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <f_write+0x5a>
 800b614:	2307      	movs	r3, #7
 800b616:	e143      	b.n	800b8a0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	699a      	ldr	r2, [r3, #24]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	441a      	add	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	429a      	cmp	r2, r3
 800b626:	f080 812d 	bcs.w	800b884 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	43db      	mvns	r3, r3
 800b630:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b632:	e127      	b.n	800b884 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f040 80e3 	bne.w	800b808 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	0a5b      	lsrs	r3, r3, #9
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	8952      	ldrh	r2, [r2, #10]
 800b64c:	3a01      	subs	r2, #1
 800b64e:	4013      	ands	r3, r2
 800b650:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d143      	bne.n	800b6e0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10c      	bne.n	800b67a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d11a      	bne.n	800b6a2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2100      	movs	r1, #0
 800b670:	4618      	mov	r0, r3
 800b672:	f7fe fcae 	bl	8009fd2 <create_chain>
 800b676:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b678:	e013      	b.n	800b6a2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d007      	beq.n	800b692 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	699b      	ldr	r3, [r3, #24]
 800b686:	4619      	mov	r1, r3
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7fe fd3a 	bl	800a102 <clmt_clust>
 800b68e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b690:	e007      	b.n	800b6a2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	4619      	mov	r1, r3
 800b69a:	4610      	mov	r0, r2
 800b69c:	f7fe fc99 	bl	8009fd2 <create_chain>
 800b6a0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 80f2 	beq.w	800b88e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d104      	bne.n	800b6ba <f_write+0xfc>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	755a      	strb	r2, [r3, #21]
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	e0f2      	b.n	800b8a0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c0:	d104      	bne.n	800b6cc <f_write+0x10e>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	755a      	strb	r2, [r3, #21]
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e0e9      	b.n	800b8a0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6d0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d102      	bne.n	800b6e0 <f_write+0x122>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6de:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	7d1b      	ldrb	r3, [r3, #20]
 800b6e4:	b25b      	sxtb	r3, r3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	da18      	bge.n	800b71c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	7858      	ldrb	r0, [r3, #1]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6a1a      	ldr	r2, [r3, #32]
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	f7fd fec9 	bl	8009490 <disk_write>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d004      	beq.n	800b70e <f_write+0x150>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2201      	movs	r2, #1
 800b708:	755a      	strb	r2, [r3, #21]
 800b70a:	2301      	movs	r3, #1
 800b70c:	e0c8      	b.n	800b8a0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	7d1b      	ldrb	r3, [r3, #20]
 800b712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b716:	b2da      	uxtb	r2, r3
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	69db      	ldr	r3, [r3, #28]
 800b722:	4619      	mov	r1, r3
 800b724:	4610      	mov	r0, r2
 800b726:	f7fe fa3f 	bl	8009ba8 <clust2sect>
 800b72a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d104      	bne.n	800b73c <f_write+0x17e>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2202      	movs	r2, #2
 800b736:	755a      	strb	r2, [r3, #21]
 800b738:	2302      	movs	r3, #2
 800b73a:	e0b1      	b.n	800b8a0 <f_write+0x2e2>
			sect += csect;
 800b73c:	697a      	ldr	r2, [r7, #20]
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	4413      	add	r3, r2
 800b742:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	0a5b      	lsrs	r3, r3, #9
 800b748:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d03c      	beq.n	800b7ca <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b750:	69ba      	ldr	r2, [r7, #24]
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	4413      	add	r3, r2
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	8952      	ldrh	r2, [r2, #10]
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d905      	bls.n	800b76a <f_write+0x1ac>
					cc = fs->csize - csect;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	895b      	ldrh	r3, [r3, #10]
 800b762:	461a      	mov	r2, r3
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	7858      	ldrb	r0, [r3, #1]
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	69f9      	ldr	r1, [r7, #28]
 800b774:	f7fd fe8c 	bl	8009490 <disk_write>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d004      	beq.n	800b788 <f_write+0x1ca>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	755a      	strb	r2, [r3, #21]
 800b784:	2301      	movs	r3, #1
 800b786:	e08b      	b.n	800b8a0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6a1a      	ldr	r2, [r3, #32]
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	6a3a      	ldr	r2, [r7, #32]
 800b792:	429a      	cmp	r2, r3
 800b794:	d915      	bls.n	800b7c2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6a1a      	ldr	r2, [r3, #32]
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	025b      	lsls	r3, r3, #9
 800b7a6:	69fa      	ldr	r2, [r7, #28]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	f7fd ff2f 	bl	8009612 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	7d1b      	ldrb	r3, [r3, #20]
 800b7b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b7c2:	6a3b      	ldr	r3, [r7, #32]
 800b7c4:	025b      	lsls	r3, r3, #9
 800b7c6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b7c8:	e03f      	b.n	800b84a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d016      	beq.n	800b802 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	699a      	ldr	r2, [r3, #24]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d210      	bcs.n	800b802 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	7858      	ldrb	r0, [r3, #1]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	f7fd fe2f 	bl	8009450 <disk_read>
 800b7f2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d004      	beq.n	800b802 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	755a      	strb	r2, [r3, #21]
 800b7fe:	2301      	movs	r3, #1
 800b800:	e04e      	b.n	800b8a0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b810:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b814:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d901      	bls.n	800b822 <f_write+0x264>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b830:	4413      	add	r3, r2
 800b832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b834:	69f9      	ldr	r1, [r7, #28]
 800b836:	4618      	mov	r0, r3
 800b838:	f7fd feeb 	bl	8009612 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	7d1b      	ldrb	r3, [r3, #20]
 800b840:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b844:	b2da      	uxtb	r2, r3
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b84a:	69fa      	ldr	r2, [r7, #28]
 800b84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84e:	4413      	add	r3, r2
 800b850:	61fb      	str	r3, [r7, #28]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	699a      	ldr	r2, [r3, #24]
 800b856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b858:	441a      	add	r2, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	619a      	str	r2, [r3, #24]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68da      	ldr	r2, [r3, #12]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	429a      	cmp	r2, r3
 800b868:	bf38      	it	cc
 800b86a:	461a      	movcc	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	60da      	str	r2, [r3, #12]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	441a      	add	r2, r3
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	f47f aed4 	bne.w	800b634 <f_write+0x76>
 800b88c:	e000      	b.n	800b890 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b88e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	7d1b      	ldrb	r3, [r3, #20]
 800b894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3730      	adds	r7, #48	@ 0x30
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f107 0208 	add.w	r2, r7, #8
 800b8b6:	4611      	mov	r1, r2
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff fb0b 	bl	800aed4 <validate>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d168      	bne.n	800b99a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	7d1b      	ldrb	r3, [r3, #20]
 800b8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d062      	beq.n	800b99a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	7d1b      	ldrb	r3, [r3, #20]
 800b8d8:	b25b      	sxtb	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	da15      	bge.n	800b90a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	7858      	ldrb	r0, [r3, #1]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a1a      	ldr	r2, [r3, #32]
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	f7fd fdcf 	bl	8009490 <disk_write>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d001      	beq.n	800b8fc <f_sync+0x54>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e04f      	b.n	800b99c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	7d1b      	ldrb	r3, [r3, #20]
 800b900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b904:	b2da      	uxtb	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b90a:	f7fd f823 	bl	8008954 <get_fattime>
 800b90e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7fe f8a9 	bl	8009a70 <move_window>
 800b91e:	4603      	mov	r3, r0
 800b920:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d138      	bne.n	800b99a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b92c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	330b      	adds	r3, #11
 800b932:	781a      	ldrb	r2, [r3, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	330b      	adds	r3, #11
 800b938:	f042 0220 	orr.w	r2, r2, #32
 800b93c:	b2d2      	uxtb	r2, r2
 800b93e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6818      	ldr	r0, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	461a      	mov	r2, r3
 800b94a:	68f9      	ldr	r1, [r7, #12]
 800b94c:	f7fe fdb3 	bl	800a4b6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f103 021c 	add.w	r2, r3, #28
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	4619      	mov	r1, r3
 800b95c:	4610      	mov	r0, r2
 800b95e:	f7fd fe2c 	bl	80095ba <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3316      	adds	r3, #22
 800b966:	6939      	ldr	r1, [r7, #16]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fd fe26 	bl	80095ba <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3312      	adds	r3, #18
 800b972:	2100      	movs	r1, #0
 800b974:	4618      	mov	r0, r3
 800b976:	f7fd fe05 	bl	8009584 <st_word>
					fs->wflag = 1;
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2201      	movs	r2, #1
 800b97e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	4618      	mov	r0, r3
 800b984:	f7fe f8a2 	bl	8009acc <sync_fs>
 800b988:	4603      	mov	r3, r0
 800b98a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	7d1b      	ldrb	r3, [r3, #20]
 800b990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b994:	b2da      	uxtb	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3718      	adds	r7, #24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7ff ff7b 	bl	800b8a8 <f_sync>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d118      	bne.n	800b9ee <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f107 0208 	add.w	r2, r7, #8
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff fa85 	bl	800aed4 <validate>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10c      	bne.n	800b9ee <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fd ffa5 	bl	8009928 <dec_lock>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d102      	bne.n	800b9ee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b092      	sub	sp, #72	@ 0x48
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ba04:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ba08:	f107 030c 	add.w	r3, r7, #12
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff f814 	bl	800aa3c <find_volume>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800ba1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f040 8099 	bne.w	800bb56 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ba24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ba2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2c:	691a      	ldr	r2, [r3, #16]
 800ba2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	3b02      	subs	r3, #2
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d804      	bhi.n	800ba42 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ba38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3a:	691a      	ldr	r2, [r3, #16]
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	e089      	b.n	800bb56 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ba42:	2300      	movs	r3, #0
 800ba44:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ba46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d128      	bne.n	800baa0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ba4e:	2302      	movs	r3, #2
 800ba50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba54:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ba56:	f107 0314 	add.w	r3, r7, #20
 800ba5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe f8c2 	bl	8009be6 <get_fat>
 800ba62:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ba64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6a:	d103      	bne.n	800ba74 <f_getfree+0x7c>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ba72:	e063      	b.n	800bb3c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ba74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d103      	bne.n	800ba82 <f_getfree+0x8a>
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ba80:	e05c      	b.n	800bb3c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ba82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d102      	bne.n	800ba8e <f_getfree+0x96>
 800ba88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ba8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba90:	3301      	adds	r3, #1
 800ba92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba96:	695b      	ldr	r3, [r3, #20]
 800ba98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d3db      	bcc.n	800ba56 <f_getfree+0x5e>
 800ba9e:	e04d      	b.n	800bb3c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800baa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa2:	695b      	ldr	r3, [r3, #20]
 800baa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa8:	6a1b      	ldr	r3, [r3, #32]
 800baaa:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800baac:	2300      	movs	r3, #0
 800baae:	637b      	str	r3, [r7, #52]	@ 0x34
 800bab0:	2300      	movs	r3, #0
 800bab2:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800bab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d113      	bne.n	800bae2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800baba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800babc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babe:	1c5a      	adds	r2, r3, #1
 800bac0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bac2:	4619      	mov	r1, r3
 800bac4:	f7fd ffd4 	bl	8009a70 <move_window>
 800bac8:	4603      	mov	r3, r0
 800baca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800bace:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d131      	bne.n	800bb3a <f_getfree+0x142>
							p = fs->win;
 800bad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad8:	3330      	adds	r3, #48	@ 0x30
 800bada:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800badc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bae0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800bae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d10f      	bne.n	800bb0a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800baea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800baec:	f7fd fd0e 	bl	800950c <ld_word>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d102      	bne.n	800bafc <f_getfree+0x104>
 800baf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baf8:	3301      	adds	r3, #1
 800bafa:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800bafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafe:	3302      	adds	r3, #2
 800bb00:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb04:	3b02      	subs	r3, #2
 800bb06:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb08:	e010      	b.n	800bb2c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800bb0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb0c:	f7fd fd17 	bl	800953e <ld_dword>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d102      	bne.n	800bb20 <f_getfree+0x128>
 800bb1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800bb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb22:	3304      	adds	r3, #4
 800bb24:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb28:	3b04      	subs	r3, #4
 800bb2a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800bb2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1bd      	bne.n	800bab4 <f_getfree+0xbc>
 800bb38:	e000      	b.n	800bb3c <f_getfree+0x144>
							if (res != FR_OK) break;
 800bb3a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb40:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800bb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb46:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800bb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4a:	791a      	ldrb	r2, [r3, #4]
 800bb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4e:	f042 0201 	orr.w	r2, r2, #1
 800bb52:	b2d2      	uxtb	r2, r2
 800bb54:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800bb56:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3748      	adds	r7, #72	@ 0x48
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b09e      	sub	sp, #120	@ 0x78
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800bb6e:	f107 010c 	add.w	r1, r7, #12
 800bb72:	1d3b      	adds	r3, r7, #4
 800bb74:	2202      	movs	r2, #2
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fe ff60 	bl	800aa3c <find_volume>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800bb86:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f040 808e 	bne.w	800bcac <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bb96:	4611      	mov	r1, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fe fe43 	bl	800a824 <follow_path>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800bba4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d108      	bne.n	800bbbe <f_unlink+0x5c>
 800bbac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bbb0:	2102      	movs	r1, #2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd fdac 	bl	8009710 <chk_lock>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800bbbe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d172      	bne.n	800bcac <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800bbc6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800bbca:	b25b      	sxtb	r3, r3
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	da03      	bge.n	800bbd8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800bbd0:	2306      	movs	r3, #6
 800bbd2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800bbd6:	e008      	b.n	800bbea <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800bbd8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800bbdc:	f003 0301 	and.w	r3, r3, #1
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800bbe4:	2307      	movs	r3, #7
 800bbe6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800bbea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d134      	bne.n	800bc5c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fe fc3d 	bl	800a478 <ld_clust>
 800bbfe:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800bc00:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800bc04:	f003 0310 	and.w	r3, r3, #16
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d027      	beq.n	800bc5c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800bc10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc12:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800bc14:	f107 0310 	add.w	r3, r7, #16
 800bc18:	2100      	movs	r1, #0
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe faa5 	bl	800a16a <dir_sdi>
 800bc20:	4603      	mov	r3, r0
 800bc22:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800bc26:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d116      	bne.n	800bc5c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800bc2e:	f107 0310 	add.w	r3, r7, #16
 800bc32:	2100      	movs	r1, #0
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe fc5e 	bl	800a4f6 <dir_read>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800bc40:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d102      	bne.n	800bc4e <f_unlink+0xec>
 800bc48:	2307      	movs	r3, #7
 800bc4a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800bc4e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	d102      	bne.n	800bc5c <f_unlink+0xfa>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800bc5c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d123      	bne.n	800bcac <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800bc64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe fd28 	bl	800a6be <dir_remove>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800bc74:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10c      	bne.n	800bc96 <f_unlink+0x134>
 800bc7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d009      	beq.n	800bc96 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800bc82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bc86:	2200      	movs	r2, #0
 800bc88:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fe f93c 	bl	8009f08 <remove_chain>
 800bc90:	4603      	mov	r3, r0
 800bc92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800bc96:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d106      	bne.n	800bcac <f_unlink+0x14a>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fd ff13 	bl	8009acc <sync_fs>
 800bca6:	4603      	mov	r3, r0
 800bca8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800bcac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3778      	adds	r7, #120	@ 0x78
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800bcb8:	b590      	push	{r4, r7, lr}
 800bcba:	b0a5      	sub	sp, #148	@ 0x94
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800bcc2:	463b      	mov	r3, r7
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fe fe1e 	bl	800a906 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800bcca:	f107 0120 	add.w	r1, r7, #32
 800bcce:	1d3b      	adds	r3, r7, #4
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe feb2 	bl	800aa3c <find_volume>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800bcde:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f040 80db 	bne.w	800be9e <f_rename+0x1e6>
		djo.obj.fs = fs;
 800bce8:	6a3b      	ldr	r3, [r7, #32]
 800bcea:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fe fd95 	bl	800a824 <follow_path>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800bd00:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d108      	bne.n	800bd1a <f_rename+0x62>
 800bd08:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800bd0c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d002      	beq.n	800bd1a <f_rename+0x62>
 800bd14:	2306      	movs	r3, #6
 800bd16:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800bd1a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d108      	bne.n	800bd34 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800bd22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800bd26:	2102      	movs	r1, #2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fd fcf1 	bl	8009710 <chk_lock>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800bd34:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f040 80b0 	bne.w	800be9e <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800bd3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd40:	f103 010b 	add.w	r1, r3, #11
 800bd44:	f107 0308 	add.w	r3, r7, #8
 800bd48:	2215      	movs	r2, #21
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fd fc61 	bl	8009612 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800bd50:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800bd54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd58:	2230      	movs	r2, #48	@ 0x30
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fd fc59 	bl	8009612 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800bd60:	683a      	ldr	r2, [r7, #0]
 800bd62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd66:	4611      	mov	r1, r2
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fe fd5b 	bl	800a824 <follow_path>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800bd74:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10c      	bne.n	800bd96 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800bd7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d105      	bne.n	800bd90 <f_rename+0xd8>
 800bd84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d101      	bne.n	800bd90 <f_rename+0xd8>
 800bd8c:	2304      	movs	r3, #4
 800bd8e:	e000      	b.n	800bd92 <f_rename+0xda>
 800bd90:	2308      	movs	r3, #8
 800bd92:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800bd96:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	d168      	bne.n	800be70 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800bd9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fc59 	bl	800a65a <dir_register>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800bdae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d15c      	bne.n	800be70 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800bdb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800bdbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bdc0:	f103 000d 	add.w	r0, r3, #13
 800bdc4:	f107 0308 	add.w	r3, r7, #8
 800bdc8:	3302      	adds	r3, #2
 800bdca:	2213      	movs	r2, #19
 800bdcc:	4619      	mov	r1, r3
 800bdce:	f7fd fc20 	bl	8009612 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800bdd2:	7a3a      	ldrb	r2, [r7, #8]
 800bdd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bdd8:	330b      	adds	r3, #11
 800bdda:	f042 0220 	orr.w	r2, r2, #32
 800bdde:	b2d2      	uxtb	r2, r2
 800bde0:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	2201      	movs	r2, #1
 800bde6:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800bde8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bdec:	330b      	adds	r3, #11
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	f003 0310 	and.w	r3, r3, #16
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d03b      	beq.n	800be70 <f_rename+0x1b8>
 800bdf8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bdfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d037      	beq.n	800be70 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800be00:	6a3c      	ldr	r4, [r7, #32]
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fe fb35 	bl	800a478 <ld_clust>
 800be0e:	4603      	mov	r3, r0
 800be10:	4619      	mov	r1, r3
 800be12:	4620      	mov	r0, r4
 800be14:	f7fd fec8 	bl	8009ba8 <clust2sect>
 800be18:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800be1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <f_rename+0x174>
								res = FR_INT_ERR;
 800be24:	2302      	movs	r3, #2
 800be26:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800be2a:	e021      	b.n	800be70 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800be32:	4618      	mov	r0, r3
 800be34:	f7fd fe1c 	bl	8009a70 <move_window>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800be3e:	6a3b      	ldr	r3, [r7, #32]
 800be40:	3330      	adds	r3, #48	@ 0x30
 800be42:	3320      	adds	r3, #32
 800be44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800be48:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10f      	bne.n	800be70 <f_rename+0x1b8>
 800be50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be54:	3301      	adds	r3, #1
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	2b2e      	cmp	r3, #46	@ 0x2e
 800be5a:	d109      	bne.n	800be70 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be60:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800be64:	4618      	mov	r0, r3
 800be66:	f7fe fb26 	bl	800a4b6 <st_clust>
									fs->wflag = 1;
 800be6a:	6a3b      	ldr	r3, [r7, #32]
 800be6c:	2201      	movs	r2, #1
 800be6e:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800be70:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800be74:	2b00      	cmp	r3, #0
 800be76:	d112      	bne.n	800be9e <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800be78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7fe fc1e 	bl	800a6be <dir_remove>
 800be82:	4603      	mov	r3, r0
 800be84:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800be88:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d106      	bne.n	800be9e <f_rename+0x1e6>
					res = sync_fs(fs);
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	4618      	mov	r0, r3
 800be94:	f7fd fe1a 	bl	8009acc <sync_fs>
 800be98:	4603      	mov	r3, r0
 800be9a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800be9e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3794      	adds	r7, #148	@ 0x94
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd90      	pop	{r4, r7, pc}

0800beaa <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b088      	sub	sp, #32
 800beae:	af00      	add	r7, sp, #0
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	607a      	str	r2, [r7, #4]
	int n = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800bebe:	e01c      	b.n	800befa <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800bec0:	f107 0310 	add.w	r3, r7, #16
 800bec4:	f107 0114 	add.w	r1, r7, #20
 800bec8:	2201      	movs	r2, #1
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff fa38 	bl	800b340 <f_read>
		if (rc != 1) break;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d117      	bne.n	800bf06 <f_gets+0x5c>
		c = s[0];
 800bed6:	7d3b      	ldrb	r3, [r7, #20]
 800bed8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	2b0d      	cmp	r3, #13
 800bede:	d00b      	beq.n	800bef8 <f_gets+0x4e>
		*p++ = c;
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	61ba      	str	r2, [r7, #24]
 800bee6:	7dfa      	ldrb	r2, [r7, #23]
 800bee8:	701a      	strb	r2, [r3, #0]
		n++;
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	3301      	adds	r3, #1
 800beee:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800bef0:	7dfb      	ldrb	r3, [r7, #23]
 800bef2:	2b0a      	cmp	r3, #10
 800bef4:	d009      	beq.n	800bf0a <f_gets+0x60>
 800bef6:	e000      	b.n	800befa <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800bef8:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	3b01      	subs	r3, #1
 800befe:	69fa      	ldr	r2, [r7, #28]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	dbdd      	blt.n	800bec0 <f_gets+0x16>
 800bf04:	e002      	b.n	800bf0c <f_gets+0x62>
		if (rc != 1) break;
 800bf06:	bf00      	nop
 800bf08:	e000      	b.n	800bf0c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800bf0a:	bf00      	nop
	}
	*p = 0;
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <f_gets+0x72>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	e000      	b.n	800bf1e <f_gets+0x74>
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3720      	adds	r7, #32
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
	...

0800bf28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	4613      	mov	r3, r2
 800bf34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bf36:	2301      	movs	r3, #1
 800bf38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bf3e:	4b1f      	ldr	r3, [pc, #124]	@ (800bfbc <FATFS_LinkDriverEx+0x94>)
 800bf40:	7a5b      	ldrb	r3, [r3, #9]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d131      	bne.n	800bfac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf48:	4b1c      	ldr	r3, [pc, #112]	@ (800bfbc <FATFS_LinkDriverEx+0x94>)
 800bf4a:	7a5b      	ldrb	r3, [r3, #9]
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	461a      	mov	r2, r3
 800bf50:	4b1a      	ldr	r3, [pc, #104]	@ (800bfbc <FATFS_LinkDriverEx+0x94>)
 800bf52:	2100      	movs	r1, #0
 800bf54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf56:	4b19      	ldr	r3, [pc, #100]	@ (800bfbc <FATFS_LinkDriverEx+0x94>)
 800bf58:	7a5b      	ldrb	r3, [r3, #9]
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	4a17      	ldr	r2, [pc, #92]	@ (800bfbc <FATFS_LinkDriverEx+0x94>)
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf66:	4b15      	ldr	r3, [pc, #84]	@ (800bfbc <FATFS_LinkDriverEx+0x94>)
 800bf68:	7a5b      	ldrb	r3, [r3, #9]
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	4b13      	ldr	r3, [pc, #76]	@ (800bfbc <FATFS_LinkDriverEx+0x94>)
 800bf70:	4413      	add	r3, r2
 800bf72:	79fa      	ldrb	r2, [r7, #7]
 800bf74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf76:	4b11      	ldr	r3, [pc, #68]	@ (800bfbc <FATFS_LinkDriverEx+0x94>)
 800bf78:	7a5b      	ldrb	r3, [r3, #9]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	1c5a      	adds	r2, r3, #1
 800bf7e:	b2d1      	uxtb	r1, r2
 800bf80:	4a0e      	ldr	r2, [pc, #56]	@ (800bfbc <FATFS_LinkDriverEx+0x94>)
 800bf82:	7251      	strb	r1, [r2, #9]
 800bf84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf86:	7dbb      	ldrb	r3, [r7, #22]
 800bf88:	3330      	adds	r3, #48	@ 0x30
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	3301      	adds	r3, #1
 800bf94:	223a      	movs	r2, #58	@ 0x3a
 800bf96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	3302      	adds	r3, #2
 800bf9c:	222f      	movs	r2, #47	@ 0x2f
 800bf9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	3303      	adds	r3, #3
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	371c      	adds	r7, #28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	200010e4 	.word	0x200010e4

0800bfc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bfca:	2200      	movs	r2, #0
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff ffaa 	bl	800bf28 <FATFS_LinkDriverEx>
 800bfd4:	4603      	mov	r3, r0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
	...

0800bfe0 <_strtol_l.isra.0>:
 800bfe0:	2b24      	cmp	r3, #36	@ 0x24
 800bfe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe6:	4686      	mov	lr, r0
 800bfe8:	4690      	mov	r8, r2
 800bfea:	d801      	bhi.n	800bff0 <_strtol_l.isra.0+0x10>
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d106      	bne.n	800bffe <_strtol_l.isra.0+0x1e>
 800bff0:	f001 f9b2 	bl	800d358 <__errno>
 800bff4:	2316      	movs	r3, #22
 800bff6:	6003      	str	r3, [r0, #0]
 800bff8:	2000      	movs	r0, #0
 800bffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffe:	4834      	ldr	r0, [pc, #208]	@ (800c0d0 <_strtol_l.isra.0+0xf0>)
 800c000:	460d      	mov	r5, r1
 800c002:	462a      	mov	r2, r5
 800c004:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c008:	5d06      	ldrb	r6, [r0, r4]
 800c00a:	f016 0608 	ands.w	r6, r6, #8
 800c00e:	d1f8      	bne.n	800c002 <_strtol_l.isra.0+0x22>
 800c010:	2c2d      	cmp	r4, #45	@ 0x2d
 800c012:	d110      	bne.n	800c036 <_strtol_l.isra.0+0x56>
 800c014:	782c      	ldrb	r4, [r5, #0]
 800c016:	2601      	movs	r6, #1
 800c018:	1c95      	adds	r5, r2, #2
 800c01a:	f033 0210 	bics.w	r2, r3, #16
 800c01e:	d115      	bne.n	800c04c <_strtol_l.isra.0+0x6c>
 800c020:	2c30      	cmp	r4, #48	@ 0x30
 800c022:	d10d      	bne.n	800c040 <_strtol_l.isra.0+0x60>
 800c024:	782a      	ldrb	r2, [r5, #0]
 800c026:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c02a:	2a58      	cmp	r2, #88	@ 0x58
 800c02c:	d108      	bne.n	800c040 <_strtol_l.isra.0+0x60>
 800c02e:	786c      	ldrb	r4, [r5, #1]
 800c030:	3502      	adds	r5, #2
 800c032:	2310      	movs	r3, #16
 800c034:	e00a      	b.n	800c04c <_strtol_l.isra.0+0x6c>
 800c036:	2c2b      	cmp	r4, #43	@ 0x2b
 800c038:	bf04      	itt	eq
 800c03a:	782c      	ldrbeq	r4, [r5, #0]
 800c03c:	1c95      	addeq	r5, r2, #2
 800c03e:	e7ec      	b.n	800c01a <_strtol_l.isra.0+0x3a>
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1f6      	bne.n	800c032 <_strtol_l.isra.0+0x52>
 800c044:	2c30      	cmp	r4, #48	@ 0x30
 800c046:	bf14      	ite	ne
 800c048:	230a      	movne	r3, #10
 800c04a:	2308      	moveq	r3, #8
 800c04c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c050:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c054:	2200      	movs	r2, #0
 800c056:	fbbc f9f3 	udiv	r9, ip, r3
 800c05a:	4610      	mov	r0, r2
 800c05c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c060:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c064:	2f09      	cmp	r7, #9
 800c066:	d80f      	bhi.n	800c088 <_strtol_l.isra.0+0xa8>
 800c068:	463c      	mov	r4, r7
 800c06a:	42a3      	cmp	r3, r4
 800c06c:	dd1b      	ble.n	800c0a6 <_strtol_l.isra.0+0xc6>
 800c06e:	1c57      	adds	r7, r2, #1
 800c070:	d007      	beq.n	800c082 <_strtol_l.isra.0+0xa2>
 800c072:	4581      	cmp	r9, r0
 800c074:	d314      	bcc.n	800c0a0 <_strtol_l.isra.0+0xc0>
 800c076:	d101      	bne.n	800c07c <_strtol_l.isra.0+0x9c>
 800c078:	45a2      	cmp	sl, r4
 800c07a:	db11      	blt.n	800c0a0 <_strtol_l.isra.0+0xc0>
 800c07c:	fb00 4003 	mla	r0, r0, r3, r4
 800c080:	2201      	movs	r2, #1
 800c082:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c086:	e7eb      	b.n	800c060 <_strtol_l.isra.0+0x80>
 800c088:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c08c:	2f19      	cmp	r7, #25
 800c08e:	d801      	bhi.n	800c094 <_strtol_l.isra.0+0xb4>
 800c090:	3c37      	subs	r4, #55	@ 0x37
 800c092:	e7ea      	b.n	800c06a <_strtol_l.isra.0+0x8a>
 800c094:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c098:	2f19      	cmp	r7, #25
 800c09a:	d804      	bhi.n	800c0a6 <_strtol_l.isra.0+0xc6>
 800c09c:	3c57      	subs	r4, #87	@ 0x57
 800c09e:	e7e4      	b.n	800c06a <_strtol_l.isra.0+0x8a>
 800c0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a4:	e7ed      	b.n	800c082 <_strtol_l.isra.0+0xa2>
 800c0a6:	1c53      	adds	r3, r2, #1
 800c0a8:	d108      	bne.n	800c0bc <_strtol_l.isra.0+0xdc>
 800c0aa:	2322      	movs	r3, #34	@ 0x22
 800c0ac:	f8ce 3000 	str.w	r3, [lr]
 800c0b0:	4660      	mov	r0, ip
 800c0b2:	f1b8 0f00 	cmp.w	r8, #0
 800c0b6:	d0a0      	beq.n	800bffa <_strtol_l.isra.0+0x1a>
 800c0b8:	1e69      	subs	r1, r5, #1
 800c0ba:	e006      	b.n	800c0ca <_strtol_l.isra.0+0xea>
 800c0bc:	b106      	cbz	r6, 800c0c0 <_strtol_l.isra.0+0xe0>
 800c0be:	4240      	negs	r0, r0
 800c0c0:	f1b8 0f00 	cmp.w	r8, #0
 800c0c4:	d099      	beq.n	800bffa <_strtol_l.isra.0+0x1a>
 800c0c6:	2a00      	cmp	r2, #0
 800c0c8:	d1f6      	bne.n	800c0b8 <_strtol_l.isra.0+0xd8>
 800c0ca:	f8c8 1000 	str.w	r1, [r8]
 800c0ce:	e794      	b.n	800bffa <_strtol_l.isra.0+0x1a>
 800c0d0:	08012795 	.word	0x08012795

0800c0d4 <_strtol_r>:
 800c0d4:	f7ff bf84 	b.w	800bfe0 <_strtol_l.isra.0>

0800c0d8 <strtol>:
 800c0d8:	4613      	mov	r3, r2
 800c0da:	460a      	mov	r2, r1
 800c0dc:	4601      	mov	r1, r0
 800c0de:	4802      	ldr	r0, [pc, #8]	@ (800c0e8 <strtol+0x10>)
 800c0e0:	6800      	ldr	r0, [r0, #0]
 800c0e2:	f7ff bf7d 	b.w	800bfe0 <_strtol_l.isra.0>
 800c0e6:	bf00      	nop
 800c0e8:	20000040 	.word	0x20000040

0800c0ec <__cvt>:
 800c0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f0:	ec57 6b10 	vmov	r6, r7, d0
 800c0f4:	2f00      	cmp	r7, #0
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	463b      	mov	r3, r7
 800c0fc:	bfbb      	ittet	lt
 800c0fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c102:	461f      	movlt	r7, r3
 800c104:	2300      	movge	r3, #0
 800c106:	232d      	movlt	r3, #45	@ 0x2d
 800c108:	700b      	strb	r3, [r1, #0]
 800c10a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c10c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c110:	4691      	mov	r9, r2
 800c112:	f023 0820 	bic.w	r8, r3, #32
 800c116:	bfbc      	itt	lt
 800c118:	4632      	movlt	r2, r6
 800c11a:	4616      	movlt	r6, r2
 800c11c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c120:	d005      	beq.n	800c12e <__cvt+0x42>
 800c122:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c126:	d100      	bne.n	800c12a <__cvt+0x3e>
 800c128:	3401      	adds	r4, #1
 800c12a:	2102      	movs	r1, #2
 800c12c:	e000      	b.n	800c130 <__cvt+0x44>
 800c12e:	2103      	movs	r1, #3
 800c130:	ab03      	add	r3, sp, #12
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	ab02      	add	r3, sp, #8
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	ec47 6b10 	vmov	d0, r6, r7
 800c13c:	4653      	mov	r3, sl
 800c13e:	4622      	mov	r2, r4
 800c140:	f001 f9e6 	bl	800d510 <_dtoa_r>
 800c144:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c148:	4605      	mov	r5, r0
 800c14a:	d119      	bne.n	800c180 <__cvt+0x94>
 800c14c:	f019 0f01 	tst.w	r9, #1
 800c150:	d00e      	beq.n	800c170 <__cvt+0x84>
 800c152:	eb00 0904 	add.w	r9, r0, r4
 800c156:	2200      	movs	r2, #0
 800c158:	2300      	movs	r3, #0
 800c15a:	4630      	mov	r0, r6
 800c15c:	4639      	mov	r1, r7
 800c15e:	f7f4 fce3 	bl	8000b28 <__aeabi_dcmpeq>
 800c162:	b108      	cbz	r0, 800c168 <__cvt+0x7c>
 800c164:	f8cd 900c 	str.w	r9, [sp, #12]
 800c168:	2230      	movs	r2, #48	@ 0x30
 800c16a:	9b03      	ldr	r3, [sp, #12]
 800c16c:	454b      	cmp	r3, r9
 800c16e:	d31e      	bcc.n	800c1ae <__cvt+0xc2>
 800c170:	9b03      	ldr	r3, [sp, #12]
 800c172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c174:	1b5b      	subs	r3, r3, r5
 800c176:	4628      	mov	r0, r5
 800c178:	6013      	str	r3, [r2, #0]
 800c17a:	b004      	add	sp, #16
 800c17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c180:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c184:	eb00 0904 	add.w	r9, r0, r4
 800c188:	d1e5      	bne.n	800c156 <__cvt+0x6a>
 800c18a:	7803      	ldrb	r3, [r0, #0]
 800c18c:	2b30      	cmp	r3, #48	@ 0x30
 800c18e:	d10a      	bne.n	800c1a6 <__cvt+0xba>
 800c190:	2200      	movs	r2, #0
 800c192:	2300      	movs	r3, #0
 800c194:	4630      	mov	r0, r6
 800c196:	4639      	mov	r1, r7
 800c198:	f7f4 fcc6 	bl	8000b28 <__aeabi_dcmpeq>
 800c19c:	b918      	cbnz	r0, 800c1a6 <__cvt+0xba>
 800c19e:	f1c4 0401 	rsb	r4, r4, #1
 800c1a2:	f8ca 4000 	str.w	r4, [sl]
 800c1a6:	f8da 3000 	ldr.w	r3, [sl]
 800c1aa:	4499      	add	r9, r3
 800c1ac:	e7d3      	b.n	800c156 <__cvt+0x6a>
 800c1ae:	1c59      	adds	r1, r3, #1
 800c1b0:	9103      	str	r1, [sp, #12]
 800c1b2:	701a      	strb	r2, [r3, #0]
 800c1b4:	e7d9      	b.n	800c16a <__cvt+0x7e>

0800c1b6 <__exponent>:
 800c1b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1b8:	2900      	cmp	r1, #0
 800c1ba:	bfba      	itte	lt
 800c1bc:	4249      	neglt	r1, r1
 800c1be:	232d      	movlt	r3, #45	@ 0x2d
 800c1c0:	232b      	movge	r3, #43	@ 0x2b
 800c1c2:	2909      	cmp	r1, #9
 800c1c4:	7002      	strb	r2, [r0, #0]
 800c1c6:	7043      	strb	r3, [r0, #1]
 800c1c8:	dd29      	ble.n	800c21e <__exponent+0x68>
 800c1ca:	f10d 0307 	add.w	r3, sp, #7
 800c1ce:	461d      	mov	r5, r3
 800c1d0:	270a      	movs	r7, #10
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	fbb1 f6f7 	udiv	r6, r1, r7
 800c1d8:	fb07 1416 	mls	r4, r7, r6, r1
 800c1dc:	3430      	adds	r4, #48	@ 0x30
 800c1de:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	2c63      	cmp	r4, #99	@ 0x63
 800c1e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c1ea:	4631      	mov	r1, r6
 800c1ec:	dcf1      	bgt.n	800c1d2 <__exponent+0x1c>
 800c1ee:	3130      	adds	r1, #48	@ 0x30
 800c1f0:	1e94      	subs	r4, r2, #2
 800c1f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c1f6:	1c41      	adds	r1, r0, #1
 800c1f8:	4623      	mov	r3, r4
 800c1fa:	42ab      	cmp	r3, r5
 800c1fc:	d30a      	bcc.n	800c214 <__exponent+0x5e>
 800c1fe:	f10d 0309 	add.w	r3, sp, #9
 800c202:	1a9b      	subs	r3, r3, r2
 800c204:	42ac      	cmp	r4, r5
 800c206:	bf88      	it	hi
 800c208:	2300      	movhi	r3, #0
 800c20a:	3302      	adds	r3, #2
 800c20c:	4403      	add	r3, r0
 800c20e:	1a18      	subs	r0, r3, r0
 800c210:	b003      	add	sp, #12
 800c212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c214:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c218:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c21c:	e7ed      	b.n	800c1fa <__exponent+0x44>
 800c21e:	2330      	movs	r3, #48	@ 0x30
 800c220:	3130      	adds	r1, #48	@ 0x30
 800c222:	7083      	strb	r3, [r0, #2]
 800c224:	70c1      	strb	r1, [r0, #3]
 800c226:	1d03      	adds	r3, r0, #4
 800c228:	e7f1      	b.n	800c20e <__exponent+0x58>
	...

0800c22c <_printf_float>:
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	b08d      	sub	sp, #52	@ 0x34
 800c232:	460c      	mov	r4, r1
 800c234:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c238:	4616      	mov	r6, r2
 800c23a:	461f      	mov	r7, r3
 800c23c:	4605      	mov	r5, r0
 800c23e:	f001 f841 	bl	800d2c4 <_localeconv_r>
 800c242:	6803      	ldr	r3, [r0, #0]
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	4618      	mov	r0, r3
 800c248:	f7f4 f842 	bl	80002d0 <strlen>
 800c24c:	2300      	movs	r3, #0
 800c24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c250:	f8d8 3000 	ldr.w	r3, [r8]
 800c254:	9005      	str	r0, [sp, #20]
 800c256:	3307      	adds	r3, #7
 800c258:	f023 0307 	bic.w	r3, r3, #7
 800c25c:	f103 0208 	add.w	r2, r3, #8
 800c260:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c264:	f8d4 b000 	ldr.w	fp, [r4]
 800c268:	f8c8 2000 	str.w	r2, [r8]
 800c26c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c270:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c274:	9307      	str	r3, [sp, #28]
 800c276:	f8cd 8018 	str.w	r8, [sp, #24]
 800c27a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c27e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c282:	4b9c      	ldr	r3, [pc, #624]	@ (800c4f4 <_printf_float+0x2c8>)
 800c284:	f04f 32ff 	mov.w	r2, #4294967295
 800c288:	f7f4 fc80 	bl	8000b8c <__aeabi_dcmpun>
 800c28c:	bb70      	cbnz	r0, 800c2ec <_printf_float+0xc0>
 800c28e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c292:	4b98      	ldr	r3, [pc, #608]	@ (800c4f4 <_printf_float+0x2c8>)
 800c294:	f04f 32ff 	mov.w	r2, #4294967295
 800c298:	f7f4 fc5a 	bl	8000b50 <__aeabi_dcmple>
 800c29c:	bb30      	cbnz	r0, 800c2ec <_printf_float+0xc0>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	4640      	mov	r0, r8
 800c2a4:	4649      	mov	r1, r9
 800c2a6:	f7f4 fc49 	bl	8000b3c <__aeabi_dcmplt>
 800c2aa:	b110      	cbz	r0, 800c2b2 <_printf_float+0x86>
 800c2ac:	232d      	movs	r3, #45	@ 0x2d
 800c2ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2b2:	4a91      	ldr	r2, [pc, #580]	@ (800c4f8 <_printf_float+0x2cc>)
 800c2b4:	4b91      	ldr	r3, [pc, #580]	@ (800c4fc <_printf_float+0x2d0>)
 800c2b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c2ba:	bf8c      	ite	hi
 800c2bc:	4690      	movhi	r8, r2
 800c2be:	4698      	movls	r8, r3
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	6123      	str	r3, [r4, #16]
 800c2c4:	f02b 0304 	bic.w	r3, fp, #4
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	f04f 0900 	mov.w	r9, #0
 800c2ce:	9700      	str	r7, [sp, #0]
 800c2d0:	4633      	mov	r3, r6
 800c2d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f000 f9d2 	bl	800c680 <_printf_common>
 800c2dc:	3001      	adds	r0, #1
 800c2de:	f040 808d 	bne.w	800c3fc <_printf_float+0x1d0>
 800c2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e6:	b00d      	add	sp, #52	@ 0x34
 800c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ec:	4642      	mov	r2, r8
 800c2ee:	464b      	mov	r3, r9
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	f7f4 fc4a 	bl	8000b8c <__aeabi_dcmpun>
 800c2f8:	b140      	cbz	r0, 800c30c <_printf_float+0xe0>
 800c2fa:	464b      	mov	r3, r9
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	bfbc      	itt	lt
 800c300:	232d      	movlt	r3, #45	@ 0x2d
 800c302:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c306:	4a7e      	ldr	r2, [pc, #504]	@ (800c500 <_printf_float+0x2d4>)
 800c308:	4b7e      	ldr	r3, [pc, #504]	@ (800c504 <_printf_float+0x2d8>)
 800c30a:	e7d4      	b.n	800c2b6 <_printf_float+0x8a>
 800c30c:	6863      	ldr	r3, [r4, #4]
 800c30e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c312:	9206      	str	r2, [sp, #24]
 800c314:	1c5a      	adds	r2, r3, #1
 800c316:	d13b      	bne.n	800c390 <_printf_float+0x164>
 800c318:	2306      	movs	r3, #6
 800c31a:	6063      	str	r3, [r4, #4]
 800c31c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c320:	2300      	movs	r3, #0
 800c322:	6022      	str	r2, [r4, #0]
 800c324:	9303      	str	r3, [sp, #12]
 800c326:	ab0a      	add	r3, sp, #40	@ 0x28
 800c328:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c32c:	ab09      	add	r3, sp, #36	@ 0x24
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	6861      	ldr	r1, [r4, #4]
 800c332:	ec49 8b10 	vmov	d0, r8, r9
 800c336:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c33a:	4628      	mov	r0, r5
 800c33c:	f7ff fed6 	bl	800c0ec <__cvt>
 800c340:	9b06      	ldr	r3, [sp, #24]
 800c342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c344:	2b47      	cmp	r3, #71	@ 0x47
 800c346:	4680      	mov	r8, r0
 800c348:	d129      	bne.n	800c39e <_printf_float+0x172>
 800c34a:	1cc8      	adds	r0, r1, #3
 800c34c:	db02      	blt.n	800c354 <_printf_float+0x128>
 800c34e:	6863      	ldr	r3, [r4, #4]
 800c350:	4299      	cmp	r1, r3
 800c352:	dd41      	ble.n	800c3d8 <_printf_float+0x1ac>
 800c354:	f1aa 0a02 	sub.w	sl, sl, #2
 800c358:	fa5f fa8a 	uxtb.w	sl, sl
 800c35c:	3901      	subs	r1, #1
 800c35e:	4652      	mov	r2, sl
 800c360:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c364:	9109      	str	r1, [sp, #36]	@ 0x24
 800c366:	f7ff ff26 	bl	800c1b6 <__exponent>
 800c36a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c36c:	1813      	adds	r3, r2, r0
 800c36e:	2a01      	cmp	r2, #1
 800c370:	4681      	mov	r9, r0
 800c372:	6123      	str	r3, [r4, #16]
 800c374:	dc02      	bgt.n	800c37c <_printf_float+0x150>
 800c376:	6822      	ldr	r2, [r4, #0]
 800c378:	07d2      	lsls	r2, r2, #31
 800c37a:	d501      	bpl.n	800c380 <_printf_float+0x154>
 800c37c:	3301      	adds	r3, #1
 800c37e:	6123      	str	r3, [r4, #16]
 800c380:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0a2      	beq.n	800c2ce <_printf_float+0xa2>
 800c388:	232d      	movs	r3, #45	@ 0x2d
 800c38a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c38e:	e79e      	b.n	800c2ce <_printf_float+0xa2>
 800c390:	9a06      	ldr	r2, [sp, #24]
 800c392:	2a47      	cmp	r2, #71	@ 0x47
 800c394:	d1c2      	bne.n	800c31c <_printf_float+0xf0>
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1c0      	bne.n	800c31c <_printf_float+0xf0>
 800c39a:	2301      	movs	r3, #1
 800c39c:	e7bd      	b.n	800c31a <_printf_float+0xee>
 800c39e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c3a2:	d9db      	bls.n	800c35c <_printf_float+0x130>
 800c3a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c3a8:	d118      	bne.n	800c3dc <_printf_float+0x1b0>
 800c3aa:	2900      	cmp	r1, #0
 800c3ac:	6863      	ldr	r3, [r4, #4]
 800c3ae:	dd0b      	ble.n	800c3c8 <_printf_float+0x19c>
 800c3b0:	6121      	str	r1, [r4, #16]
 800c3b2:	b913      	cbnz	r3, 800c3ba <_printf_float+0x18e>
 800c3b4:	6822      	ldr	r2, [r4, #0]
 800c3b6:	07d0      	lsls	r0, r2, #31
 800c3b8:	d502      	bpl.n	800c3c0 <_printf_float+0x194>
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	440b      	add	r3, r1
 800c3be:	6123      	str	r3, [r4, #16]
 800c3c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c3c2:	f04f 0900 	mov.w	r9, #0
 800c3c6:	e7db      	b.n	800c380 <_printf_float+0x154>
 800c3c8:	b913      	cbnz	r3, 800c3d0 <_printf_float+0x1a4>
 800c3ca:	6822      	ldr	r2, [r4, #0]
 800c3cc:	07d2      	lsls	r2, r2, #31
 800c3ce:	d501      	bpl.n	800c3d4 <_printf_float+0x1a8>
 800c3d0:	3302      	adds	r3, #2
 800c3d2:	e7f4      	b.n	800c3be <_printf_float+0x192>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e7f2      	b.n	800c3be <_printf_float+0x192>
 800c3d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c3dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3de:	4299      	cmp	r1, r3
 800c3e0:	db05      	blt.n	800c3ee <_printf_float+0x1c2>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	6121      	str	r1, [r4, #16]
 800c3e6:	07d8      	lsls	r0, r3, #31
 800c3e8:	d5ea      	bpl.n	800c3c0 <_printf_float+0x194>
 800c3ea:	1c4b      	adds	r3, r1, #1
 800c3ec:	e7e7      	b.n	800c3be <_printf_float+0x192>
 800c3ee:	2900      	cmp	r1, #0
 800c3f0:	bfd4      	ite	le
 800c3f2:	f1c1 0202 	rsble	r2, r1, #2
 800c3f6:	2201      	movgt	r2, #1
 800c3f8:	4413      	add	r3, r2
 800c3fa:	e7e0      	b.n	800c3be <_printf_float+0x192>
 800c3fc:	6823      	ldr	r3, [r4, #0]
 800c3fe:	055a      	lsls	r2, r3, #21
 800c400:	d407      	bmi.n	800c412 <_printf_float+0x1e6>
 800c402:	6923      	ldr	r3, [r4, #16]
 800c404:	4642      	mov	r2, r8
 800c406:	4631      	mov	r1, r6
 800c408:	4628      	mov	r0, r5
 800c40a:	47b8      	blx	r7
 800c40c:	3001      	adds	r0, #1
 800c40e:	d12b      	bne.n	800c468 <_printf_float+0x23c>
 800c410:	e767      	b.n	800c2e2 <_printf_float+0xb6>
 800c412:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c416:	f240 80dd 	bls.w	800c5d4 <_printf_float+0x3a8>
 800c41a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c41e:	2200      	movs	r2, #0
 800c420:	2300      	movs	r3, #0
 800c422:	f7f4 fb81 	bl	8000b28 <__aeabi_dcmpeq>
 800c426:	2800      	cmp	r0, #0
 800c428:	d033      	beq.n	800c492 <_printf_float+0x266>
 800c42a:	4a37      	ldr	r2, [pc, #220]	@ (800c508 <_printf_float+0x2dc>)
 800c42c:	2301      	movs	r3, #1
 800c42e:	4631      	mov	r1, r6
 800c430:	4628      	mov	r0, r5
 800c432:	47b8      	blx	r7
 800c434:	3001      	adds	r0, #1
 800c436:	f43f af54 	beq.w	800c2e2 <_printf_float+0xb6>
 800c43a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c43e:	4543      	cmp	r3, r8
 800c440:	db02      	blt.n	800c448 <_printf_float+0x21c>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	07d8      	lsls	r0, r3, #31
 800c446:	d50f      	bpl.n	800c468 <_printf_float+0x23c>
 800c448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c44c:	4631      	mov	r1, r6
 800c44e:	4628      	mov	r0, r5
 800c450:	47b8      	blx	r7
 800c452:	3001      	adds	r0, #1
 800c454:	f43f af45 	beq.w	800c2e2 <_printf_float+0xb6>
 800c458:	f04f 0900 	mov.w	r9, #0
 800c45c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c460:	f104 0a1a 	add.w	sl, r4, #26
 800c464:	45c8      	cmp	r8, r9
 800c466:	dc09      	bgt.n	800c47c <_printf_float+0x250>
 800c468:	6823      	ldr	r3, [r4, #0]
 800c46a:	079b      	lsls	r3, r3, #30
 800c46c:	f100 8103 	bmi.w	800c676 <_printf_float+0x44a>
 800c470:	68e0      	ldr	r0, [r4, #12]
 800c472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c474:	4298      	cmp	r0, r3
 800c476:	bfb8      	it	lt
 800c478:	4618      	movlt	r0, r3
 800c47a:	e734      	b.n	800c2e6 <_printf_float+0xba>
 800c47c:	2301      	movs	r3, #1
 800c47e:	4652      	mov	r2, sl
 800c480:	4631      	mov	r1, r6
 800c482:	4628      	mov	r0, r5
 800c484:	47b8      	blx	r7
 800c486:	3001      	adds	r0, #1
 800c488:	f43f af2b 	beq.w	800c2e2 <_printf_float+0xb6>
 800c48c:	f109 0901 	add.w	r9, r9, #1
 800c490:	e7e8      	b.n	800c464 <_printf_float+0x238>
 800c492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c494:	2b00      	cmp	r3, #0
 800c496:	dc39      	bgt.n	800c50c <_printf_float+0x2e0>
 800c498:	4a1b      	ldr	r2, [pc, #108]	@ (800c508 <_printf_float+0x2dc>)
 800c49a:	2301      	movs	r3, #1
 800c49c:	4631      	mov	r1, r6
 800c49e:	4628      	mov	r0, r5
 800c4a0:	47b8      	blx	r7
 800c4a2:	3001      	adds	r0, #1
 800c4a4:	f43f af1d 	beq.w	800c2e2 <_printf_float+0xb6>
 800c4a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c4ac:	ea59 0303 	orrs.w	r3, r9, r3
 800c4b0:	d102      	bne.n	800c4b8 <_printf_float+0x28c>
 800c4b2:	6823      	ldr	r3, [r4, #0]
 800c4b4:	07d9      	lsls	r1, r3, #31
 800c4b6:	d5d7      	bpl.n	800c468 <_printf_float+0x23c>
 800c4b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4bc:	4631      	mov	r1, r6
 800c4be:	4628      	mov	r0, r5
 800c4c0:	47b8      	blx	r7
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	f43f af0d 	beq.w	800c2e2 <_printf_float+0xb6>
 800c4c8:	f04f 0a00 	mov.w	sl, #0
 800c4cc:	f104 0b1a 	add.w	fp, r4, #26
 800c4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d2:	425b      	negs	r3, r3
 800c4d4:	4553      	cmp	r3, sl
 800c4d6:	dc01      	bgt.n	800c4dc <_printf_float+0x2b0>
 800c4d8:	464b      	mov	r3, r9
 800c4da:	e793      	b.n	800c404 <_printf_float+0x1d8>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	465a      	mov	r2, fp
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	47b8      	blx	r7
 800c4e6:	3001      	adds	r0, #1
 800c4e8:	f43f aefb 	beq.w	800c2e2 <_printf_float+0xb6>
 800c4ec:	f10a 0a01 	add.w	sl, sl, #1
 800c4f0:	e7ee      	b.n	800c4d0 <_printf_float+0x2a4>
 800c4f2:	bf00      	nop
 800c4f4:	7fefffff 	.word	0x7fefffff
 800c4f8:	08012899 	.word	0x08012899
 800c4fc:	08012895 	.word	0x08012895
 800c500:	080128a1 	.word	0x080128a1
 800c504:	0801289d 	.word	0x0801289d
 800c508:	080128a5 	.word	0x080128a5
 800c50c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c50e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c512:	4553      	cmp	r3, sl
 800c514:	bfa8      	it	ge
 800c516:	4653      	movge	r3, sl
 800c518:	2b00      	cmp	r3, #0
 800c51a:	4699      	mov	r9, r3
 800c51c:	dc36      	bgt.n	800c58c <_printf_float+0x360>
 800c51e:	f04f 0b00 	mov.w	fp, #0
 800c522:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c526:	f104 021a 	add.w	r2, r4, #26
 800c52a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c52c:	9306      	str	r3, [sp, #24]
 800c52e:	eba3 0309 	sub.w	r3, r3, r9
 800c532:	455b      	cmp	r3, fp
 800c534:	dc31      	bgt.n	800c59a <_printf_float+0x36e>
 800c536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c538:	459a      	cmp	sl, r3
 800c53a:	dc3a      	bgt.n	800c5b2 <_printf_float+0x386>
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	07da      	lsls	r2, r3, #31
 800c540:	d437      	bmi.n	800c5b2 <_printf_float+0x386>
 800c542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c544:	ebaa 0903 	sub.w	r9, sl, r3
 800c548:	9b06      	ldr	r3, [sp, #24]
 800c54a:	ebaa 0303 	sub.w	r3, sl, r3
 800c54e:	4599      	cmp	r9, r3
 800c550:	bfa8      	it	ge
 800c552:	4699      	movge	r9, r3
 800c554:	f1b9 0f00 	cmp.w	r9, #0
 800c558:	dc33      	bgt.n	800c5c2 <_printf_float+0x396>
 800c55a:	f04f 0800 	mov.w	r8, #0
 800c55e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c562:	f104 0b1a 	add.w	fp, r4, #26
 800c566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c568:	ebaa 0303 	sub.w	r3, sl, r3
 800c56c:	eba3 0309 	sub.w	r3, r3, r9
 800c570:	4543      	cmp	r3, r8
 800c572:	f77f af79 	ble.w	800c468 <_printf_float+0x23c>
 800c576:	2301      	movs	r3, #1
 800c578:	465a      	mov	r2, fp
 800c57a:	4631      	mov	r1, r6
 800c57c:	4628      	mov	r0, r5
 800c57e:	47b8      	blx	r7
 800c580:	3001      	adds	r0, #1
 800c582:	f43f aeae 	beq.w	800c2e2 <_printf_float+0xb6>
 800c586:	f108 0801 	add.w	r8, r8, #1
 800c58a:	e7ec      	b.n	800c566 <_printf_float+0x33a>
 800c58c:	4642      	mov	r2, r8
 800c58e:	4631      	mov	r1, r6
 800c590:	4628      	mov	r0, r5
 800c592:	47b8      	blx	r7
 800c594:	3001      	adds	r0, #1
 800c596:	d1c2      	bne.n	800c51e <_printf_float+0x2f2>
 800c598:	e6a3      	b.n	800c2e2 <_printf_float+0xb6>
 800c59a:	2301      	movs	r3, #1
 800c59c:	4631      	mov	r1, r6
 800c59e:	4628      	mov	r0, r5
 800c5a0:	9206      	str	r2, [sp, #24]
 800c5a2:	47b8      	blx	r7
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	f43f ae9c 	beq.w	800c2e2 <_printf_float+0xb6>
 800c5aa:	9a06      	ldr	r2, [sp, #24]
 800c5ac:	f10b 0b01 	add.w	fp, fp, #1
 800c5b0:	e7bb      	b.n	800c52a <_printf_float+0x2fe>
 800c5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5b6:	4631      	mov	r1, r6
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	47b8      	blx	r7
 800c5bc:	3001      	adds	r0, #1
 800c5be:	d1c0      	bne.n	800c542 <_printf_float+0x316>
 800c5c0:	e68f      	b.n	800c2e2 <_printf_float+0xb6>
 800c5c2:	9a06      	ldr	r2, [sp, #24]
 800c5c4:	464b      	mov	r3, r9
 800c5c6:	4442      	add	r2, r8
 800c5c8:	4631      	mov	r1, r6
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	47b8      	blx	r7
 800c5ce:	3001      	adds	r0, #1
 800c5d0:	d1c3      	bne.n	800c55a <_printf_float+0x32e>
 800c5d2:	e686      	b.n	800c2e2 <_printf_float+0xb6>
 800c5d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c5d8:	f1ba 0f01 	cmp.w	sl, #1
 800c5dc:	dc01      	bgt.n	800c5e2 <_printf_float+0x3b6>
 800c5de:	07db      	lsls	r3, r3, #31
 800c5e0:	d536      	bpl.n	800c650 <_printf_float+0x424>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	4642      	mov	r2, r8
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	47b8      	blx	r7
 800c5ec:	3001      	adds	r0, #1
 800c5ee:	f43f ae78 	beq.w	800c2e2 <_printf_float+0xb6>
 800c5f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5f6:	4631      	mov	r1, r6
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	47b8      	blx	r7
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	f43f ae70 	beq.w	800c2e2 <_printf_float+0xb6>
 800c602:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c606:	2200      	movs	r2, #0
 800c608:	2300      	movs	r3, #0
 800c60a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c60e:	f7f4 fa8b 	bl	8000b28 <__aeabi_dcmpeq>
 800c612:	b9c0      	cbnz	r0, 800c646 <_printf_float+0x41a>
 800c614:	4653      	mov	r3, sl
 800c616:	f108 0201 	add.w	r2, r8, #1
 800c61a:	4631      	mov	r1, r6
 800c61c:	4628      	mov	r0, r5
 800c61e:	47b8      	blx	r7
 800c620:	3001      	adds	r0, #1
 800c622:	d10c      	bne.n	800c63e <_printf_float+0x412>
 800c624:	e65d      	b.n	800c2e2 <_printf_float+0xb6>
 800c626:	2301      	movs	r3, #1
 800c628:	465a      	mov	r2, fp
 800c62a:	4631      	mov	r1, r6
 800c62c:	4628      	mov	r0, r5
 800c62e:	47b8      	blx	r7
 800c630:	3001      	adds	r0, #1
 800c632:	f43f ae56 	beq.w	800c2e2 <_printf_float+0xb6>
 800c636:	f108 0801 	add.w	r8, r8, #1
 800c63a:	45d0      	cmp	r8, sl
 800c63c:	dbf3      	blt.n	800c626 <_printf_float+0x3fa>
 800c63e:	464b      	mov	r3, r9
 800c640:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c644:	e6df      	b.n	800c406 <_printf_float+0x1da>
 800c646:	f04f 0800 	mov.w	r8, #0
 800c64a:	f104 0b1a 	add.w	fp, r4, #26
 800c64e:	e7f4      	b.n	800c63a <_printf_float+0x40e>
 800c650:	2301      	movs	r3, #1
 800c652:	4642      	mov	r2, r8
 800c654:	e7e1      	b.n	800c61a <_printf_float+0x3ee>
 800c656:	2301      	movs	r3, #1
 800c658:	464a      	mov	r2, r9
 800c65a:	4631      	mov	r1, r6
 800c65c:	4628      	mov	r0, r5
 800c65e:	47b8      	blx	r7
 800c660:	3001      	adds	r0, #1
 800c662:	f43f ae3e 	beq.w	800c2e2 <_printf_float+0xb6>
 800c666:	f108 0801 	add.w	r8, r8, #1
 800c66a:	68e3      	ldr	r3, [r4, #12]
 800c66c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c66e:	1a5b      	subs	r3, r3, r1
 800c670:	4543      	cmp	r3, r8
 800c672:	dcf0      	bgt.n	800c656 <_printf_float+0x42a>
 800c674:	e6fc      	b.n	800c470 <_printf_float+0x244>
 800c676:	f04f 0800 	mov.w	r8, #0
 800c67a:	f104 0919 	add.w	r9, r4, #25
 800c67e:	e7f4      	b.n	800c66a <_printf_float+0x43e>

0800c680 <_printf_common>:
 800c680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c684:	4616      	mov	r6, r2
 800c686:	4698      	mov	r8, r3
 800c688:	688a      	ldr	r2, [r1, #8]
 800c68a:	690b      	ldr	r3, [r1, #16]
 800c68c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c690:	4293      	cmp	r3, r2
 800c692:	bfb8      	it	lt
 800c694:	4613      	movlt	r3, r2
 800c696:	6033      	str	r3, [r6, #0]
 800c698:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c69c:	4607      	mov	r7, r0
 800c69e:	460c      	mov	r4, r1
 800c6a0:	b10a      	cbz	r2, 800c6a6 <_printf_common+0x26>
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	6033      	str	r3, [r6, #0]
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	0699      	lsls	r1, r3, #26
 800c6aa:	bf42      	ittt	mi
 800c6ac:	6833      	ldrmi	r3, [r6, #0]
 800c6ae:	3302      	addmi	r3, #2
 800c6b0:	6033      	strmi	r3, [r6, #0]
 800c6b2:	6825      	ldr	r5, [r4, #0]
 800c6b4:	f015 0506 	ands.w	r5, r5, #6
 800c6b8:	d106      	bne.n	800c6c8 <_printf_common+0x48>
 800c6ba:	f104 0a19 	add.w	sl, r4, #25
 800c6be:	68e3      	ldr	r3, [r4, #12]
 800c6c0:	6832      	ldr	r2, [r6, #0]
 800c6c2:	1a9b      	subs	r3, r3, r2
 800c6c4:	42ab      	cmp	r3, r5
 800c6c6:	dc26      	bgt.n	800c716 <_printf_common+0x96>
 800c6c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c6cc:	6822      	ldr	r2, [r4, #0]
 800c6ce:	3b00      	subs	r3, #0
 800c6d0:	bf18      	it	ne
 800c6d2:	2301      	movne	r3, #1
 800c6d4:	0692      	lsls	r2, r2, #26
 800c6d6:	d42b      	bmi.n	800c730 <_printf_common+0xb0>
 800c6d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c6dc:	4641      	mov	r1, r8
 800c6de:	4638      	mov	r0, r7
 800c6e0:	47c8      	blx	r9
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	d01e      	beq.n	800c724 <_printf_common+0xa4>
 800c6e6:	6823      	ldr	r3, [r4, #0]
 800c6e8:	6922      	ldr	r2, [r4, #16]
 800c6ea:	f003 0306 	and.w	r3, r3, #6
 800c6ee:	2b04      	cmp	r3, #4
 800c6f0:	bf02      	ittt	eq
 800c6f2:	68e5      	ldreq	r5, [r4, #12]
 800c6f4:	6833      	ldreq	r3, [r6, #0]
 800c6f6:	1aed      	subeq	r5, r5, r3
 800c6f8:	68a3      	ldr	r3, [r4, #8]
 800c6fa:	bf0c      	ite	eq
 800c6fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c700:	2500      	movne	r5, #0
 800c702:	4293      	cmp	r3, r2
 800c704:	bfc4      	itt	gt
 800c706:	1a9b      	subgt	r3, r3, r2
 800c708:	18ed      	addgt	r5, r5, r3
 800c70a:	2600      	movs	r6, #0
 800c70c:	341a      	adds	r4, #26
 800c70e:	42b5      	cmp	r5, r6
 800c710:	d11a      	bne.n	800c748 <_printf_common+0xc8>
 800c712:	2000      	movs	r0, #0
 800c714:	e008      	b.n	800c728 <_printf_common+0xa8>
 800c716:	2301      	movs	r3, #1
 800c718:	4652      	mov	r2, sl
 800c71a:	4641      	mov	r1, r8
 800c71c:	4638      	mov	r0, r7
 800c71e:	47c8      	blx	r9
 800c720:	3001      	adds	r0, #1
 800c722:	d103      	bne.n	800c72c <_printf_common+0xac>
 800c724:	f04f 30ff 	mov.w	r0, #4294967295
 800c728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c72c:	3501      	adds	r5, #1
 800c72e:	e7c6      	b.n	800c6be <_printf_common+0x3e>
 800c730:	18e1      	adds	r1, r4, r3
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	2030      	movs	r0, #48	@ 0x30
 800c736:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c73a:	4422      	add	r2, r4
 800c73c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c740:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c744:	3302      	adds	r3, #2
 800c746:	e7c7      	b.n	800c6d8 <_printf_common+0x58>
 800c748:	2301      	movs	r3, #1
 800c74a:	4622      	mov	r2, r4
 800c74c:	4641      	mov	r1, r8
 800c74e:	4638      	mov	r0, r7
 800c750:	47c8      	blx	r9
 800c752:	3001      	adds	r0, #1
 800c754:	d0e6      	beq.n	800c724 <_printf_common+0xa4>
 800c756:	3601      	adds	r6, #1
 800c758:	e7d9      	b.n	800c70e <_printf_common+0x8e>
	...

0800c75c <_printf_i>:
 800c75c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c760:	7e0f      	ldrb	r7, [r1, #24]
 800c762:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c764:	2f78      	cmp	r7, #120	@ 0x78
 800c766:	4691      	mov	r9, r2
 800c768:	4680      	mov	r8, r0
 800c76a:	460c      	mov	r4, r1
 800c76c:	469a      	mov	sl, r3
 800c76e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c772:	d807      	bhi.n	800c784 <_printf_i+0x28>
 800c774:	2f62      	cmp	r7, #98	@ 0x62
 800c776:	d80a      	bhi.n	800c78e <_printf_i+0x32>
 800c778:	2f00      	cmp	r7, #0
 800c77a:	f000 80d1 	beq.w	800c920 <_printf_i+0x1c4>
 800c77e:	2f58      	cmp	r7, #88	@ 0x58
 800c780:	f000 80b8 	beq.w	800c8f4 <_printf_i+0x198>
 800c784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c788:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c78c:	e03a      	b.n	800c804 <_printf_i+0xa8>
 800c78e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c792:	2b15      	cmp	r3, #21
 800c794:	d8f6      	bhi.n	800c784 <_printf_i+0x28>
 800c796:	a101      	add	r1, pc, #4	@ (adr r1, 800c79c <_printf_i+0x40>)
 800c798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c79c:	0800c7f5 	.word	0x0800c7f5
 800c7a0:	0800c809 	.word	0x0800c809
 800c7a4:	0800c785 	.word	0x0800c785
 800c7a8:	0800c785 	.word	0x0800c785
 800c7ac:	0800c785 	.word	0x0800c785
 800c7b0:	0800c785 	.word	0x0800c785
 800c7b4:	0800c809 	.word	0x0800c809
 800c7b8:	0800c785 	.word	0x0800c785
 800c7bc:	0800c785 	.word	0x0800c785
 800c7c0:	0800c785 	.word	0x0800c785
 800c7c4:	0800c785 	.word	0x0800c785
 800c7c8:	0800c907 	.word	0x0800c907
 800c7cc:	0800c833 	.word	0x0800c833
 800c7d0:	0800c8c1 	.word	0x0800c8c1
 800c7d4:	0800c785 	.word	0x0800c785
 800c7d8:	0800c785 	.word	0x0800c785
 800c7dc:	0800c929 	.word	0x0800c929
 800c7e0:	0800c785 	.word	0x0800c785
 800c7e4:	0800c833 	.word	0x0800c833
 800c7e8:	0800c785 	.word	0x0800c785
 800c7ec:	0800c785 	.word	0x0800c785
 800c7f0:	0800c8c9 	.word	0x0800c8c9
 800c7f4:	6833      	ldr	r3, [r6, #0]
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	6032      	str	r2, [r6, #0]
 800c7fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c800:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c804:	2301      	movs	r3, #1
 800c806:	e09c      	b.n	800c942 <_printf_i+0x1e6>
 800c808:	6833      	ldr	r3, [r6, #0]
 800c80a:	6820      	ldr	r0, [r4, #0]
 800c80c:	1d19      	adds	r1, r3, #4
 800c80e:	6031      	str	r1, [r6, #0]
 800c810:	0606      	lsls	r6, r0, #24
 800c812:	d501      	bpl.n	800c818 <_printf_i+0xbc>
 800c814:	681d      	ldr	r5, [r3, #0]
 800c816:	e003      	b.n	800c820 <_printf_i+0xc4>
 800c818:	0645      	lsls	r5, r0, #25
 800c81a:	d5fb      	bpl.n	800c814 <_printf_i+0xb8>
 800c81c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c820:	2d00      	cmp	r5, #0
 800c822:	da03      	bge.n	800c82c <_printf_i+0xd0>
 800c824:	232d      	movs	r3, #45	@ 0x2d
 800c826:	426d      	negs	r5, r5
 800c828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c82c:	4858      	ldr	r0, [pc, #352]	@ (800c990 <_printf_i+0x234>)
 800c82e:	230a      	movs	r3, #10
 800c830:	e011      	b.n	800c856 <_printf_i+0xfa>
 800c832:	6821      	ldr	r1, [r4, #0]
 800c834:	6833      	ldr	r3, [r6, #0]
 800c836:	0608      	lsls	r0, r1, #24
 800c838:	f853 5b04 	ldr.w	r5, [r3], #4
 800c83c:	d402      	bmi.n	800c844 <_printf_i+0xe8>
 800c83e:	0649      	lsls	r1, r1, #25
 800c840:	bf48      	it	mi
 800c842:	b2ad      	uxthmi	r5, r5
 800c844:	2f6f      	cmp	r7, #111	@ 0x6f
 800c846:	4852      	ldr	r0, [pc, #328]	@ (800c990 <_printf_i+0x234>)
 800c848:	6033      	str	r3, [r6, #0]
 800c84a:	bf14      	ite	ne
 800c84c:	230a      	movne	r3, #10
 800c84e:	2308      	moveq	r3, #8
 800c850:	2100      	movs	r1, #0
 800c852:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c856:	6866      	ldr	r6, [r4, #4]
 800c858:	60a6      	str	r6, [r4, #8]
 800c85a:	2e00      	cmp	r6, #0
 800c85c:	db05      	blt.n	800c86a <_printf_i+0x10e>
 800c85e:	6821      	ldr	r1, [r4, #0]
 800c860:	432e      	orrs	r6, r5
 800c862:	f021 0104 	bic.w	r1, r1, #4
 800c866:	6021      	str	r1, [r4, #0]
 800c868:	d04b      	beq.n	800c902 <_printf_i+0x1a6>
 800c86a:	4616      	mov	r6, r2
 800c86c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c870:	fb03 5711 	mls	r7, r3, r1, r5
 800c874:	5dc7      	ldrb	r7, [r0, r7]
 800c876:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c87a:	462f      	mov	r7, r5
 800c87c:	42bb      	cmp	r3, r7
 800c87e:	460d      	mov	r5, r1
 800c880:	d9f4      	bls.n	800c86c <_printf_i+0x110>
 800c882:	2b08      	cmp	r3, #8
 800c884:	d10b      	bne.n	800c89e <_printf_i+0x142>
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	07df      	lsls	r7, r3, #31
 800c88a:	d508      	bpl.n	800c89e <_printf_i+0x142>
 800c88c:	6923      	ldr	r3, [r4, #16]
 800c88e:	6861      	ldr	r1, [r4, #4]
 800c890:	4299      	cmp	r1, r3
 800c892:	bfde      	ittt	le
 800c894:	2330      	movle	r3, #48	@ 0x30
 800c896:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c89a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c89e:	1b92      	subs	r2, r2, r6
 800c8a0:	6122      	str	r2, [r4, #16]
 800c8a2:	f8cd a000 	str.w	sl, [sp]
 800c8a6:	464b      	mov	r3, r9
 800c8a8:	aa03      	add	r2, sp, #12
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	4640      	mov	r0, r8
 800c8ae:	f7ff fee7 	bl	800c680 <_printf_common>
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	d14a      	bne.n	800c94c <_printf_i+0x1f0>
 800c8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ba:	b004      	add	sp, #16
 800c8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	f043 0320 	orr.w	r3, r3, #32
 800c8c6:	6023      	str	r3, [r4, #0]
 800c8c8:	4832      	ldr	r0, [pc, #200]	@ (800c994 <_printf_i+0x238>)
 800c8ca:	2778      	movs	r7, #120	@ 0x78
 800c8cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	6831      	ldr	r1, [r6, #0]
 800c8d4:	061f      	lsls	r7, r3, #24
 800c8d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c8da:	d402      	bmi.n	800c8e2 <_printf_i+0x186>
 800c8dc:	065f      	lsls	r7, r3, #25
 800c8de:	bf48      	it	mi
 800c8e0:	b2ad      	uxthmi	r5, r5
 800c8e2:	6031      	str	r1, [r6, #0]
 800c8e4:	07d9      	lsls	r1, r3, #31
 800c8e6:	bf44      	itt	mi
 800c8e8:	f043 0320 	orrmi.w	r3, r3, #32
 800c8ec:	6023      	strmi	r3, [r4, #0]
 800c8ee:	b11d      	cbz	r5, 800c8f8 <_printf_i+0x19c>
 800c8f0:	2310      	movs	r3, #16
 800c8f2:	e7ad      	b.n	800c850 <_printf_i+0xf4>
 800c8f4:	4826      	ldr	r0, [pc, #152]	@ (800c990 <_printf_i+0x234>)
 800c8f6:	e7e9      	b.n	800c8cc <_printf_i+0x170>
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	f023 0320 	bic.w	r3, r3, #32
 800c8fe:	6023      	str	r3, [r4, #0]
 800c900:	e7f6      	b.n	800c8f0 <_printf_i+0x194>
 800c902:	4616      	mov	r6, r2
 800c904:	e7bd      	b.n	800c882 <_printf_i+0x126>
 800c906:	6833      	ldr	r3, [r6, #0]
 800c908:	6825      	ldr	r5, [r4, #0]
 800c90a:	6961      	ldr	r1, [r4, #20]
 800c90c:	1d18      	adds	r0, r3, #4
 800c90e:	6030      	str	r0, [r6, #0]
 800c910:	062e      	lsls	r6, r5, #24
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	d501      	bpl.n	800c91a <_printf_i+0x1be>
 800c916:	6019      	str	r1, [r3, #0]
 800c918:	e002      	b.n	800c920 <_printf_i+0x1c4>
 800c91a:	0668      	lsls	r0, r5, #25
 800c91c:	d5fb      	bpl.n	800c916 <_printf_i+0x1ba>
 800c91e:	8019      	strh	r1, [r3, #0]
 800c920:	2300      	movs	r3, #0
 800c922:	6123      	str	r3, [r4, #16]
 800c924:	4616      	mov	r6, r2
 800c926:	e7bc      	b.n	800c8a2 <_printf_i+0x146>
 800c928:	6833      	ldr	r3, [r6, #0]
 800c92a:	1d1a      	adds	r2, r3, #4
 800c92c:	6032      	str	r2, [r6, #0]
 800c92e:	681e      	ldr	r6, [r3, #0]
 800c930:	6862      	ldr	r2, [r4, #4]
 800c932:	2100      	movs	r1, #0
 800c934:	4630      	mov	r0, r6
 800c936:	f7f3 fc7b 	bl	8000230 <memchr>
 800c93a:	b108      	cbz	r0, 800c940 <_printf_i+0x1e4>
 800c93c:	1b80      	subs	r0, r0, r6
 800c93e:	6060      	str	r0, [r4, #4]
 800c940:	6863      	ldr	r3, [r4, #4]
 800c942:	6123      	str	r3, [r4, #16]
 800c944:	2300      	movs	r3, #0
 800c946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c94a:	e7aa      	b.n	800c8a2 <_printf_i+0x146>
 800c94c:	6923      	ldr	r3, [r4, #16]
 800c94e:	4632      	mov	r2, r6
 800c950:	4649      	mov	r1, r9
 800c952:	4640      	mov	r0, r8
 800c954:	47d0      	blx	sl
 800c956:	3001      	adds	r0, #1
 800c958:	d0ad      	beq.n	800c8b6 <_printf_i+0x15a>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	079b      	lsls	r3, r3, #30
 800c95e:	d413      	bmi.n	800c988 <_printf_i+0x22c>
 800c960:	68e0      	ldr	r0, [r4, #12]
 800c962:	9b03      	ldr	r3, [sp, #12]
 800c964:	4298      	cmp	r0, r3
 800c966:	bfb8      	it	lt
 800c968:	4618      	movlt	r0, r3
 800c96a:	e7a6      	b.n	800c8ba <_printf_i+0x15e>
 800c96c:	2301      	movs	r3, #1
 800c96e:	4632      	mov	r2, r6
 800c970:	4649      	mov	r1, r9
 800c972:	4640      	mov	r0, r8
 800c974:	47d0      	blx	sl
 800c976:	3001      	adds	r0, #1
 800c978:	d09d      	beq.n	800c8b6 <_printf_i+0x15a>
 800c97a:	3501      	adds	r5, #1
 800c97c:	68e3      	ldr	r3, [r4, #12]
 800c97e:	9903      	ldr	r1, [sp, #12]
 800c980:	1a5b      	subs	r3, r3, r1
 800c982:	42ab      	cmp	r3, r5
 800c984:	dcf2      	bgt.n	800c96c <_printf_i+0x210>
 800c986:	e7eb      	b.n	800c960 <_printf_i+0x204>
 800c988:	2500      	movs	r5, #0
 800c98a:	f104 0619 	add.w	r6, r4, #25
 800c98e:	e7f5      	b.n	800c97c <_printf_i+0x220>
 800c990:	080128a7 	.word	0x080128a7
 800c994:	080128b8 	.word	0x080128b8

0800c998 <_scanf_float>:
 800c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	b087      	sub	sp, #28
 800c99e:	4691      	mov	r9, r2
 800c9a0:	9303      	str	r3, [sp, #12]
 800c9a2:	688b      	ldr	r3, [r1, #8]
 800c9a4:	1e5a      	subs	r2, r3, #1
 800c9a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c9aa:	bf81      	itttt	hi
 800c9ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c9b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800c9b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c9b8:	608b      	strhi	r3, [r1, #8]
 800c9ba:	680b      	ldr	r3, [r1, #0]
 800c9bc:	460a      	mov	r2, r1
 800c9be:	f04f 0500 	mov.w	r5, #0
 800c9c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c9c6:	f842 3b1c 	str.w	r3, [r2], #28
 800c9ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c9ce:	4680      	mov	r8, r0
 800c9d0:	460c      	mov	r4, r1
 800c9d2:	bf98      	it	ls
 800c9d4:	f04f 0b00 	movls.w	fp, #0
 800c9d8:	9201      	str	r2, [sp, #4]
 800c9da:	4616      	mov	r6, r2
 800c9dc:	46aa      	mov	sl, r5
 800c9de:	462f      	mov	r7, r5
 800c9e0:	9502      	str	r5, [sp, #8]
 800c9e2:	68a2      	ldr	r2, [r4, #8]
 800c9e4:	b15a      	cbz	r2, 800c9fe <_scanf_float+0x66>
 800c9e6:	f8d9 3000 	ldr.w	r3, [r9]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	2b4e      	cmp	r3, #78	@ 0x4e
 800c9ee:	d863      	bhi.n	800cab8 <_scanf_float+0x120>
 800c9f0:	2b40      	cmp	r3, #64	@ 0x40
 800c9f2:	d83b      	bhi.n	800ca6c <_scanf_float+0xd4>
 800c9f4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c9f8:	b2c8      	uxtb	r0, r1
 800c9fa:	280e      	cmp	r0, #14
 800c9fc:	d939      	bls.n	800ca72 <_scanf_float+0xda>
 800c9fe:	b11f      	cbz	r7, 800ca08 <_scanf_float+0x70>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca06:	6023      	str	r3, [r4, #0]
 800ca08:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca0c:	f1ba 0f01 	cmp.w	sl, #1
 800ca10:	f200 8114 	bhi.w	800cc3c <_scanf_float+0x2a4>
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	429e      	cmp	r6, r3
 800ca18:	f200 8105 	bhi.w	800cc26 <_scanf_float+0x28e>
 800ca1c:	2001      	movs	r0, #1
 800ca1e:	b007      	add	sp, #28
 800ca20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca24:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ca28:	2a0d      	cmp	r2, #13
 800ca2a:	d8e8      	bhi.n	800c9fe <_scanf_float+0x66>
 800ca2c:	a101      	add	r1, pc, #4	@ (adr r1, 800ca34 <_scanf_float+0x9c>)
 800ca2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca32:	bf00      	nop
 800ca34:	0800cb7d 	.word	0x0800cb7d
 800ca38:	0800c9ff 	.word	0x0800c9ff
 800ca3c:	0800c9ff 	.word	0x0800c9ff
 800ca40:	0800c9ff 	.word	0x0800c9ff
 800ca44:	0800cbd9 	.word	0x0800cbd9
 800ca48:	0800cbb3 	.word	0x0800cbb3
 800ca4c:	0800c9ff 	.word	0x0800c9ff
 800ca50:	0800c9ff 	.word	0x0800c9ff
 800ca54:	0800cb8b 	.word	0x0800cb8b
 800ca58:	0800c9ff 	.word	0x0800c9ff
 800ca5c:	0800c9ff 	.word	0x0800c9ff
 800ca60:	0800c9ff 	.word	0x0800c9ff
 800ca64:	0800c9ff 	.word	0x0800c9ff
 800ca68:	0800cb47 	.word	0x0800cb47
 800ca6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ca70:	e7da      	b.n	800ca28 <_scanf_float+0x90>
 800ca72:	290e      	cmp	r1, #14
 800ca74:	d8c3      	bhi.n	800c9fe <_scanf_float+0x66>
 800ca76:	a001      	add	r0, pc, #4	@ (adr r0, 800ca7c <_scanf_float+0xe4>)
 800ca78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ca7c:	0800cb37 	.word	0x0800cb37
 800ca80:	0800c9ff 	.word	0x0800c9ff
 800ca84:	0800cb37 	.word	0x0800cb37
 800ca88:	0800cbc7 	.word	0x0800cbc7
 800ca8c:	0800c9ff 	.word	0x0800c9ff
 800ca90:	0800cad9 	.word	0x0800cad9
 800ca94:	0800cb1d 	.word	0x0800cb1d
 800ca98:	0800cb1d 	.word	0x0800cb1d
 800ca9c:	0800cb1d 	.word	0x0800cb1d
 800caa0:	0800cb1d 	.word	0x0800cb1d
 800caa4:	0800cb1d 	.word	0x0800cb1d
 800caa8:	0800cb1d 	.word	0x0800cb1d
 800caac:	0800cb1d 	.word	0x0800cb1d
 800cab0:	0800cb1d 	.word	0x0800cb1d
 800cab4:	0800cb1d 	.word	0x0800cb1d
 800cab8:	2b6e      	cmp	r3, #110	@ 0x6e
 800caba:	d809      	bhi.n	800cad0 <_scanf_float+0x138>
 800cabc:	2b60      	cmp	r3, #96	@ 0x60
 800cabe:	d8b1      	bhi.n	800ca24 <_scanf_float+0x8c>
 800cac0:	2b54      	cmp	r3, #84	@ 0x54
 800cac2:	d07b      	beq.n	800cbbc <_scanf_float+0x224>
 800cac4:	2b59      	cmp	r3, #89	@ 0x59
 800cac6:	d19a      	bne.n	800c9fe <_scanf_float+0x66>
 800cac8:	2d07      	cmp	r5, #7
 800caca:	d198      	bne.n	800c9fe <_scanf_float+0x66>
 800cacc:	2508      	movs	r5, #8
 800cace:	e02f      	b.n	800cb30 <_scanf_float+0x198>
 800cad0:	2b74      	cmp	r3, #116	@ 0x74
 800cad2:	d073      	beq.n	800cbbc <_scanf_float+0x224>
 800cad4:	2b79      	cmp	r3, #121	@ 0x79
 800cad6:	e7f6      	b.n	800cac6 <_scanf_float+0x12e>
 800cad8:	6821      	ldr	r1, [r4, #0]
 800cada:	05c8      	lsls	r0, r1, #23
 800cadc:	d51e      	bpl.n	800cb1c <_scanf_float+0x184>
 800cade:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cae2:	6021      	str	r1, [r4, #0]
 800cae4:	3701      	adds	r7, #1
 800cae6:	f1bb 0f00 	cmp.w	fp, #0
 800caea:	d003      	beq.n	800caf4 <_scanf_float+0x15c>
 800caec:	3201      	adds	r2, #1
 800caee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800caf2:	60a2      	str	r2, [r4, #8]
 800caf4:	68a3      	ldr	r3, [r4, #8]
 800caf6:	3b01      	subs	r3, #1
 800caf8:	60a3      	str	r3, [r4, #8]
 800cafa:	6923      	ldr	r3, [r4, #16]
 800cafc:	3301      	adds	r3, #1
 800cafe:	6123      	str	r3, [r4, #16]
 800cb00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f8c9 3004 	str.w	r3, [r9, #4]
 800cb0c:	f340 8082 	ble.w	800cc14 <_scanf_float+0x27c>
 800cb10:	f8d9 3000 	ldr.w	r3, [r9]
 800cb14:	3301      	adds	r3, #1
 800cb16:	f8c9 3000 	str.w	r3, [r9]
 800cb1a:	e762      	b.n	800c9e2 <_scanf_float+0x4a>
 800cb1c:	eb1a 0105 	adds.w	r1, sl, r5
 800cb20:	f47f af6d 	bne.w	800c9fe <_scanf_float+0x66>
 800cb24:	6822      	ldr	r2, [r4, #0]
 800cb26:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cb2a:	6022      	str	r2, [r4, #0]
 800cb2c:	460d      	mov	r5, r1
 800cb2e:	468a      	mov	sl, r1
 800cb30:	f806 3b01 	strb.w	r3, [r6], #1
 800cb34:	e7de      	b.n	800caf4 <_scanf_float+0x15c>
 800cb36:	6822      	ldr	r2, [r4, #0]
 800cb38:	0610      	lsls	r0, r2, #24
 800cb3a:	f57f af60 	bpl.w	800c9fe <_scanf_float+0x66>
 800cb3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb42:	6022      	str	r2, [r4, #0]
 800cb44:	e7f4      	b.n	800cb30 <_scanf_float+0x198>
 800cb46:	f1ba 0f00 	cmp.w	sl, #0
 800cb4a:	d10c      	bne.n	800cb66 <_scanf_float+0x1ce>
 800cb4c:	b977      	cbnz	r7, 800cb6c <_scanf_float+0x1d4>
 800cb4e:	6822      	ldr	r2, [r4, #0]
 800cb50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb58:	d108      	bne.n	800cb6c <_scanf_float+0x1d4>
 800cb5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb5e:	6022      	str	r2, [r4, #0]
 800cb60:	f04f 0a01 	mov.w	sl, #1
 800cb64:	e7e4      	b.n	800cb30 <_scanf_float+0x198>
 800cb66:	f1ba 0f02 	cmp.w	sl, #2
 800cb6a:	d050      	beq.n	800cc0e <_scanf_float+0x276>
 800cb6c:	2d01      	cmp	r5, #1
 800cb6e:	d002      	beq.n	800cb76 <_scanf_float+0x1de>
 800cb70:	2d04      	cmp	r5, #4
 800cb72:	f47f af44 	bne.w	800c9fe <_scanf_float+0x66>
 800cb76:	3501      	adds	r5, #1
 800cb78:	b2ed      	uxtb	r5, r5
 800cb7a:	e7d9      	b.n	800cb30 <_scanf_float+0x198>
 800cb7c:	f1ba 0f01 	cmp.w	sl, #1
 800cb80:	f47f af3d 	bne.w	800c9fe <_scanf_float+0x66>
 800cb84:	f04f 0a02 	mov.w	sl, #2
 800cb88:	e7d2      	b.n	800cb30 <_scanf_float+0x198>
 800cb8a:	b975      	cbnz	r5, 800cbaa <_scanf_float+0x212>
 800cb8c:	2f00      	cmp	r7, #0
 800cb8e:	f47f af37 	bne.w	800ca00 <_scanf_float+0x68>
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb9c:	f040 8103 	bne.w	800cda6 <_scanf_float+0x40e>
 800cba0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cba4:	6022      	str	r2, [r4, #0]
 800cba6:	2501      	movs	r5, #1
 800cba8:	e7c2      	b.n	800cb30 <_scanf_float+0x198>
 800cbaa:	2d03      	cmp	r5, #3
 800cbac:	d0e3      	beq.n	800cb76 <_scanf_float+0x1de>
 800cbae:	2d05      	cmp	r5, #5
 800cbb0:	e7df      	b.n	800cb72 <_scanf_float+0x1da>
 800cbb2:	2d02      	cmp	r5, #2
 800cbb4:	f47f af23 	bne.w	800c9fe <_scanf_float+0x66>
 800cbb8:	2503      	movs	r5, #3
 800cbba:	e7b9      	b.n	800cb30 <_scanf_float+0x198>
 800cbbc:	2d06      	cmp	r5, #6
 800cbbe:	f47f af1e 	bne.w	800c9fe <_scanf_float+0x66>
 800cbc2:	2507      	movs	r5, #7
 800cbc4:	e7b4      	b.n	800cb30 <_scanf_float+0x198>
 800cbc6:	6822      	ldr	r2, [r4, #0]
 800cbc8:	0591      	lsls	r1, r2, #22
 800cbca:	f57f af18 	bpl.w	800c9fe <_scanf_float+0x66>
 800cbce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cbd2:	6022      	str	r2, [r4, #0]
 800cbd4:	9702      	str	r7, [sp, #8]
 800cbd6:	e7ab      	b.n	800cb30 <_scanf_float+0x198>
 800cbd8:	6822      	ldr	r2, [r4, #0]
 800cbda:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cbde:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cbe2:	d005      	beq.n	800cbf0 <_scanf_float+0x258>
 800cbe4:	0550      	lsls	r0, r2, #21
 800cbe6:	f57f af0a 	bpl.w	800c9fe <_scanf_float+0x66>
 800cbea:	2f00      	cmp	r7, #0
 800cbec:	f000 80db 	beq.w	800cda6 <_scanf_float+0x40e>
 800cbf0:	0591      	lsls	r1, r2, #22
 800cbf2:	bf58      	it	pl
 800cbf4:	9902      	ldrpl	r1, [sp, #8]
 800cbf6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cbfa:	bf58      	it	pl
 800cbfc:	1a79      	subpl	r1, r7, r1
 800cbfe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cc02:	bf58      	it	pl
 800cc04:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc08:	6022      	str	r2, [r4, #0]
 800cc0a:	2700      	movs	r7, #0
 800cc0c:	e790      	b.n	800cb30 <_scanf_float+0x198>
 800cc0e:	f04f 0a03 	mov.w	sl, #3
 800cc12:	e78d      	b.n	800cb30 <_scanf_float+0x198>
 800cc14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cc18:	4649      	mov	r1, r9
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	4798      	blx	r3
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f43f aedf 	beq.w	800c9e2 <_scanf_float+0x4a>
 800cc24:	e6eb      	b.n	800c9fe <_scanf_float+0x66>
 800cc26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc2e:	464a      	mov	r2, r9
 800cc30:	4640      	mov	r0, r8
 800cc32:	4798      	blx	r3
 800cc34:	6923      	ldr	r3, [r4, #16]
 800cc36:	3b01      	subs	r3, #1
 800cc38:	6123      	str	r3, [r4, #16]
 800cc3a:	e6eb      	b.n	800ca14 <_scanf_float+0x7c>
 800cc3c:	1e6b      	subs	r3, r5, #1
 800cc3e:	2b06      	cmp	r3, #6
 800cc40:	d824      	bhi.n	800cc8c <_scanf_float+0x2f4>
 800cc42:	2d02      	cmp	r5, #2
 800cc44:	d836      	bhi.n	800ccb4 <_scanf_float+0x31c>
 800cc46:	9b01      	ldr	r3, [sp, #4]
 800cc48:	429e      	cmp	r6, r3
 800cc4a:	f67f aee7 	bls.w	800ca1c <_scanf_float+0x84>
 800cc4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc56:	464a      	mov	r2, r9
 800cc58:	4640      	mov	r0, r8
 800cc5a:	4798      	blx	r3
 800cc5c:	6923      	ldr	r3, [r4, #16]
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	6123      	str	r3, [r4, #16]
 800cc62:	e7f0      	b.n	800cc46 <_scanf_float+0x2ae>
 800cc64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc68:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cc6c:	464a      	mov	r2, r9
 800cc6e:	4640      	mov	r0, r8
 800cc70:	4798      	blx	r3
 800cc72:	6923      	ldr	r3, [r4, #16]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	6123      	str	r3, [r4, #16]
 800cc78:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc7c:	fa5f fa8a 	uxtb.w	sl, sl
 800cc80:	f1ba 0f02 	cmp.w	sl, #2
 800cc84:	d1ee      	bne.n	800cc64 <_scanf_float+0x2cc>
 800cc86:	3d03      	subs	r5, #3
 800cc88:	b2ed      	uxtb	r5, r5
 800cc8a:	1b76      	subs	r6, r6, r5
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	05da      	lsls	r2, r3, #23
 800cc90:	d530      	bpl.n	800ccf4 <_scanf_float+0x35c>
 800cc92:	055b      	lsls	r3, r3, #21
 800cc94:	d511      	bpl.n	800ccba <_scanf_float+0x322>
 800cc96:	9b01      	ldr	r3, [sp, #4]
 800cc98:	429e      	cmp	r6, r3
 800cc9a:	f67f aebf 	bls.w	800ca1c <_scanf_float+0x84>
 800cc9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cca6:	464a      	mov	r2, r9
 800cca8:	4640      	mov	r0, r8
 800ccaa:	4798      	blx	r3
 800ccac:	6923      	ldr	r3, [r4, #16]
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	6123      	str	r3, [r4, #16]
 800ccb2:	e7f0      	b.n	800cc96 <_scanf_float+0x2fe>
 800ccb4:	46aa      	mov	sl, r5
 800ccb6:	46b3      	mov	fp, r6
 800ccb8:	e7de      	b.n	800cc78 <_scanf_float+0x2e0>
 800ccba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ccbe:	6923      	ldr	r3, [r4, #16]
 800ccc0:	2965      	cmp	r1, #101	@ 0x65
 800ccc2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ccc6:	f106 35ff 	add.w	r5, r6, #4294967295
 800ccca:	6123      	str	r3, [r4, #16]
 800cccc:	d00c      	beq.n	800cce8 <_scanf_float+0x350>
 800ccce:	2945      	cmp	r1, #69	@ 0x45
 800ccd0:	d00a      	beq.n	800cce8 <_scanf_float+0x350>
 800ccd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccd6:	464a      	mov	r2, r9
 800ccd8:	4640      	mov	r0, r8
 800ccda:	4798      	blx	r3
 800ccdc:	6923      	ldr	r3, [r4, #16]
 800ccde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cce2:	3b01      	subs	r3, #1
 800cce4:	1eb5      	subs	r5, r6, #2
 800cce6:	6123      	str	r3, [r4, #16]
 800cce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccec:	464a      	mov	r2, r9
 800ccee:	4640      	mov	r0, r8
 800ccf0:	4798      	blx	r3
 800ccf2:	462e      	mov	r6, r5
 800ccf4:	6822      	ldr	r2, [r4, #0]
 800ccf6:	f012 0210 	ands.w	r2, r2, #16
 800ccfa:	d001      	beq.n	800cd00 <_scanf_float+0x368>
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	e68e      	b.n	800ca1e <_scanf_float+0x86>
 800cd00:	7032      	strb	r2, [r6, #0]
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cd08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd0c:	d125      	bne.n	800cd5a <_scanf_float+0x3c2>
 800cd0e:	9b02      	ldr	r3, [sp, #8]
 800cd10:	429f      	cmp	r7, r3
 800cd12:	d00a      	beq.n	800cd2a <_scanf_float+0x392>
 800cd14:	1bda      	subs	r2, r3, r7
 800cd16:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cd1a:	429e      	cmp	r6, r3
 800cd1c:	bf28      	it	cs
 800cd1e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cd22:	4922      	ldr	r1, [pc, #136]	@ (800cdac <_scanf_float+0x414>)
 800cd24:	4630      	mov	r0, r6
 800cd26:	f000 fa03 	bl	800d130 <siprintf>
 800cd2a:	9901      	ldr	r1, [sp, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	4640      	mov	r0, r8
 800cd30:	f002 fd6a 	bl	800f808 <_strtod_r>
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	6821      	ldr	r1, [r4, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f011 0f02 	tst.w	r1, #2
 800cd3e:	ec57 6b10 	vmov	r6, r7, d0
 800cd42:	f103 0204 	add.w	r2, r3, #4
 800cd46:	d015      	beq.n	800cd74 <_scanf_float+0x3dc>
 800cd48:	9903      	ldr	r1, [sp, #12]
 800cd4a:	600a      	str	r2, [r1, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	e9c3 6700 	strd	r6, r7, [r3]
 800cd52:	68e3      	ldr	r3, [r4, #12]
 800cd54:	3301      	adds	r3, #1
 800cd56:	60e3      	str	r3, [r4, #12]
 800cd58:	e7d0      	b.n	800ccfc <_scanf_float+0x364>
 800cd5a:	9b04      	ldr	r3, [sp, #16]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d0e4      	beq.n	800cd2a <_scanf_float+0x392>
 800cd60:	9905      	ldr	r1, [sp, #20]
 800cd62:	230a      	movs	r3, #10
 800cd64:	3101      	adds	r1, #1
 800cd66:	4640      	mov	r0, r8
 800cd68:	f7ff f9b4 	bl	800c0d4 <_strtol_r>
 800cd6c:	9b04      	ldr	r3, [sp, #16]
 800cd6e:	9e05      	ldr	r6, [sp, #20]
 800cd70:	1ac2      	subs	r2, r0, r3
 800cd72:	e7d0      	b.n	800cd16 <_scanf_float+0x37e>
 800cd74:	f011 0f04 	tst.w	r1, #4
 800cd78:	9903      	ldr	r1, [sp, #12]
 800cd7a:	600a      	str	r2, [r1, #0]
 800cd7c:	d1e6      	bne.n	800cd4c <_scanf_float+0x3b4>
 800cd7e:	681d      	ldr	r5, [r3, #0]
 800cd80:	4632      	mov	r2, r6
 800cd82:	463b      	mov	r3, r7
 800cd84:	4630      	mov	r0, r6
 800cd86:	4639      	mov	r1, r7
 800cd88:	f7f3 ff00 	bl	8000b8c <__aeabi_dcmpun>
 800cd8c:	b128      	cbz	r0, 800cd9a <_scanf_float+0x402>
 800cd8e:	4808      	ldr	r0, [pc, #32]	@ (800cdb0 <_scanf_float+0x418>)
 800cd90:	f000 fb10 	bl	800d3b4 <nanf>
 800cd94:	ed85 0a00 	vstr	s0, [r5]
 800cd98:	e7db      	b.n	800cd52 <_scanf_float+0x3ba>
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	4639      	mov	r1, r7
 800cd9e:	f7f3 ff53 	bl	8000c48 <__aeabi_d2f>
 800cda2:	6028      	str	r0, [r5, #0]
 800cda4:	e7d5      	b.n	800cd52 <_scanf_float+0x3ba>
 800cda6:	2700      	movs	r7, #0
 800cda8:	e62e      	b.n	800ca08 <_scanf_float+0x70>
 800cdaa:	bf00      	nop
 800cdac:	080128c9 	.word	0x080128c9
 800cdb0:	0801297a 	.word	0x0801297a

0800cdb4 <std>:
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	b510      	push	{r4, lr}
 800cdb8:	4604      	mov	r4, r0
 800cdba:	e9c0 3300 	strd	r3, r3, [r0]
 800cdbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdc2:	6083      	str	r3, [r0, #8]
 800cdc4:	8181      	strh	r1, [r0, #12]
 800cdc6:	6643      	str	r3, [r0, #100]	@ 0x64
 800cdc8:	81c2      	strh	r2, [r0, #14]
 800cdca:	6183      	str	r3, [r0, #24]
 800cdcc:	4619      	mov	r1, r3
 800cdce:	2208      	movs	r2, #8
 800cdd0:	305c      	adds	r0, #92	@ 0x5c
 800cdd2:	f000 fa12 	bl	800d1fa <memset>
 800cdd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce0c <std+0x58>)
 800cdd8:	6263      	str	r3, [r4, #36]	@ 0x24
 800cdda:	4b0d      	ldr	r3, [pc, #52]	@ (800ce10 <std+0x5c>)
 800cddc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cdde:	4b0d      	ldr	r3, [pc, #52]	@ (800ce14 <std+0x60>)
 800cde0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cde2:	4b0d      	ldr	r3, [pc, #52]	@ (800ce18 <std+0x64>)
 800cde4:	6323      	str	r3, [r4, #48]	@ 0x30
 800cde6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce1c <std+0x68>)
 800cde8:	6224      	str	r4, [r4, #32]
 800cdea:	429c      	cmp	r4, r3
 800cdec:	d006      	beq.n	800cdfc <std+0x48>
 800cdee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cdf2:	4294      	cmp	r4, r2
 800cdf4:	d002      	beq.n	800cdfc <std+0x48>
 800cdf6:	33d0      	adds	r3, #208	@ 0xd0
 800cdf8:	429c      	cmp	r4, r3
 800cdfa:	d105      	bne.n	800ce08 <std+0x54>
 800cdfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce04:	f000 bad2 	b.w	800d3ac <__retarget_lock_init_recursive>
 800ce08:	bd10      	pop	{r4, pc}
 800ce0a:	bf00      	nop
 800ce0c:	0800d175 	.word	0x0800d175
 800ce10:	0800d197 	.word	0x0800d197
 800ce14:	0800d1cf 	.word	0x0800d1cf
 800ce18:	0800d1f3 	.word	0x0800d1f3
 800ce1c:	200010f0 	.word	0x200010f0

0800ce20 <stdio_exit_handler>:
 800ce20:	4a02      	ldr	r2, [pc, #8]	@ (800ce2c <stdio_exit_handler+0xc>)
 800ce22:	4903      	ldr	r1, [pc, #12]	@ (800ce30 <stdio_exit_handler+0x10>)
 800ce24:	4803      	ldr	r0, [pc, #12]	@ (800ce34 <stdio_exit_handler+0x14>)
 800ce26:	f000 b869 	b.w	800cefc <_fwalk_sglue>
 800ce2a:	bf00      	nop
 800ce2c:	20000034 	.word	0x20000034
 800ce30:	0800fe51 	.word	0x0800fe51
 800ce34:	20000044 	.word	0x20000044

0800ce38 <cleanup_stdio>:
 800ce38:	6841      	ldr	r1, [r0, #4]
 800ce3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ce6c <cleanup_stdio+0x34>)
 800ce3c:	4299      	cmp	r1, r3
 800ce3e:	b510      	push	{r4, lr}
 800ce40:	4604      	mov	r4, r0
 800ce42:	d001      	beq.n	800ce48 <cleanup_stdio+0x10>
 800ce44:	f003 f804 	bl	800fe50 <_fflush_r>
 800ce48:	68a1      	ldr	r1, [r4, #8]
 800ce4a:	4b09      	ldr	r3, [pc, #36]	@ (800ce70 <cleanup_stdio+0x38>)
 800ce4c:	4299      	cmp	r1, r3
 800ce4e:	d002      	beq.n	800ce56 <cleanup_stdio+0x1e>
 800ce50:	4620      	mov	r0, r4
 800ce52:	f002 fffd 	bl	800fe50 <_fflush_r>
 800ce56:	68e1      	ldr	r1, [r4, #12]
 800ce58:	4b06      	ldr	r3, [pc, #24]	@ (800ce74 <cleanup_stdio+0x3c>)
 800ce5a:	4299      	cmp	r1, r3
 800ce5c:	d004      	beq.n	800ce68 <cleanup_stdio+0x30>
 800ce5e:	4620      	mov	r0, r4
 800ce60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce64:	f002 bff4 	b.w	800fe50 <_fflush_r>
 800ce68:	bd10      	pop	{r4, pc}
 800ce6a:	bf00      	nop
 800ce6c:	200010f0 	.word	0x200010f0
 800ce70:	20001158 	.word	0x20001158
 800ce74:	200011c0 	.word	0x200011c0

0800ce78 <global_stdio_init.part.0>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	4b0b      	ldr	r3, [pc, #44]	@ (800cea8 <global_stdio_init.part.0+0x30>)
 800ce7c:	4c0b      	ldr	r4, [pc, #44]	@ (800ceac <global_stdio_init.part.0+0x34>)
 800ce7e:	4a0c      	ldr	r2, [pc, #48]	@ (800ceb0 <global_stdio_init.part.0+0x38>)
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	4620      	mov	r0, r4
 800ce84:	2200      	movs	r2, #0
 800ce86:	2104      	movs	r1, #4
 800ce88:	f7ff ff94 	bl	800cdb4 <std>
 800ce8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ce90:	2201      	movs	r2, #1
 800ce92:	2109      	movs	r1, #9
 800ce94:	f7ff ff8e 	bl	800cdb4 <std>
 800ce98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce9c:	2202      	movs	r2, #2
 800ce9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cea2:	2112      	movs	r1, #18
 800cea4:	f7ff bf86 	b.w	800cdb4 <std>
 800cea8:	20001228 	.word	0x20001228
 800ceac:	200010f0 	.word	0x200010f0
 800ceb0:	0800ce21 	.word	0x0800ce21

0800ceb4 <__sfp_lock_acquire>:
 800ceb4:	4801      	ldr	r0, [pc, #4]	@ (800cebc <__sfp_lock_acquire+0x8>)
 800ceb6:	f000 ba7a 	b.w	800d3ae <__retarget_lock_acquire_recursive>
 800ceba:	bf00      	nop
 800cebc:	20001231 	.word	0x20001231

0800cec0 <__sfp_lock_release>:
 800cec0:	4801      	ldr	r0, [pc, #4]	@ (800cec8 <__sfp_lock_release+0x8>)
 800cec2:	f000 ba75 	b.w	800d3b0 <__retarget_lock_release_recursive>
 800cec6:	bf00      	nop
 800cec8:	20001231 	.word	0x20001231

0800cecc <__sinit>:
 800cecc:	b510      	push	{r4, lr}
 800cece:	4604      	mov	r4, r0
 800ced0:	f7ff fff0 	bl	800ceb4 <__sfp_lock_acquire>
 800ced4:	6a23      	ldr	r3, [r4, #32]
 800ced6:	b11b      	cbz	r3, 800cee0 <__sinit+0x14>
 800ced8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cedc:	f7ff bff0 	b.w	800cec0 <__sfp_lock_release>
 800cee0:	4b04      	ldr	r3, [pc, #16]	@ (800cef4 <__sinit+0x28>)
 800cee2:	6223      	str	r3, [r4, #32]
 800cee4:	4b04      	ldr	r3, [pc, #16]	@ (800cef8 <__sinit+0x2c>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1f5      	bne.n	800ced8 <__sinit+0xc>
 800ceec:	f7ff ffc4 	bl	800ce78 <global_stdio_init.part.0>
 800cef0:	e7f2      	b.n	800ced8 <__sinit+0xc>
 800cef2:	bf00      	nop
 800cef4:	0800ce39 	.word	0x0800ce39
 800cef8:	20001228 	.word	0x20001228

0800cefc <_fwalk_sglue>:
 800cefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf00:	4607      	mov	r7, r0
 800cf02:	4688      	mov	r8, r1
 800cf04:	4614      	mov	r4, r2
 800cf06:	2600      	movs	r6, #0
 800cf08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf0c:	f1b9 0901 	subs.w	r9, r9, #1
 800cf10:	d505      	bpl.n	800cf1e <_fwalk_sglue+0x22>
 800cf12:	6824      	ldr	r4, [r4, #0]
 800cf14:	2c00      	cmp	r4, #0
 800cf16:	d1f7      	bne.n	800cf08 <_fwalk_sglue+0xc>
 800cf18:	4630      	mov	r0, r6
 800cf1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf1e:	89ab      	ldrh	r3, [r5, #12]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d907      	bls.n	800cf34 <_fwalk_sglue+0x38>
 800cf24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	d003      	beq.n	800cf34 <_fwalk_sglue+0x38>
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4638      	mov	r0, r7
 800cf30:	47c0      	blx	r8
 800cf32:	4306      	orrs	r6, r0
 800cf34:	3568      	adds	r5, #104	@ 0x68
 800cf36:	e7e9      	b.n	800cf0c <_fwalk_sglue+0x10>

0800cf38 <iprintf>:
 800cf38:	b40f      	push	{r0, r1, r2, r3}
 800cf3a:	b507      	push	{r0, r1, r2, lr}
 800cf3c:	4906      	ldr	r1, [pc, #24]	@ (800cf58 <iprintf+0x20>)
 800cf3e:	ab04      	add	r3, sp, #16
 800cf40:	6808      	ldr	r0, [r1, #0]
 800cf42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf46:	6881      	ldr	r1, [r0, #8]
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	f002 fde5 	bl	800fb18 <_vfiprintf_r>
 800cf4e:	b003      	add	sp, #12
 800cf50:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf54:	b004      	add	sp, #16
 800cf56:	4770      	bx	lr
 800cf58:	20000040 	.word	0x20000040

0800cf5c <setvbuf>:
 800cf5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf60:	461d      	mov	r5, r3
 800cf62:	4b57      	ldr	r3, [pc, #348]	@ (800d0c0 <setvbuf+0x164>)
 800cf64:	681f      	ldr	r7, [r3, #0]
 800cf66:	4604      	mov	r4, r0
 800cf68:	460e      	mov	r6, r1
 800cf6a:	4690      	mov	r8, r2
 800cf6c:	b127      	cbz	r7, 800cf78 <setvbuf+0x1c>
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	b913      	cbnz	r3, 800cf78 <setvbuf+0x1c>
 800cf72:	4638      	mov	r0, r7
 800cf74:	f7ff ffaa 	bl	800cecc <__sinit>
 800cf78:	f1b8 0f02 	cmp.w	r8, #2
 800cf7c:	d006      	beq.n	800cf8c <setvbuf+0x30>
 800cf7e:	f1b8 0f01 	cmp.w	r8, #1
 800cf82:	f200 809a 	bhi.w	800d0ba <setvbuf+0x15e>
 800cf86:	2d00      	cmp	r5, #0
 800cf88:	f2c0 8097 	blt.w	800d0ba <setvbuf+0x15e>
 800cf8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf8e:	07d9      	lsls	r1, r3, #31
 800cf90:	d405      	bmi.n	800cf9e <setvbuf+0x42>
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	059a      	lsls	r2, r3, #22
 800cf96:	d402      	bmi.n	800cf9e <setvbuf+0x42>
 800cf98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf9a:	f000 fa08 	bl	800d3ae <__retarget_lock_acquire_recursive>
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	4638      	mov	r0, r7
 800cfa2:	f002 ff55 	bl	800fe50 <_fflush_r>
 800cfa6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfa8:	b141      	cbz	r1, 800cfbc <setvbuf+0x60>
 800cfaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfae:	4299      	cmp	r1, r3
 800cfb0:	d002      	beq.n	800cfb8 <setvbuf+0x5c>
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	f001 f87c 	bl	800e0b0 <_free_r>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	61a3      	str	r3, [r4, #24]
 800cfc0:	6063      	str	r3, [r4, #4]
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	061b      	lsls	r3, r3, #24
 800cfc6:	d503      	bpl.n	800cfd0 <setvbuf+0x74>
 800cfc8:	6921      	ldr	r1, [r4, #16]
 800cfca:	4638      	mov	r0, r7
 800cfcc:	f001 f870 	bl	800e0b0 <_free_r>
 800cfd0:	89a3      	ldrh	r3, [r4, #12]
 800cfd2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800cfd6:	f023 0303 	bic.w	r3, r3, #3
 800cfda:	f1b8 0f02 	cmp.w	r8, #2
 800cfde:	81a3      	strh	r3, [r4, #12]
 800cfe0:	d061      	beq.n	800d0a6 <setvbuf+0x14a>
 800cfe2:	ab01      	add	r3, sp, #4
 800cfe4:	466a      	mov	r2, sp
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	4638      	mov	r0, r7
 800cfea:	f002 ff6b 	bl	800fec4 <__swhatbuf_r>
 800cfee:	89a3      	ldrh	r3, [r4, #12]
 800cff0:	4318      	orrs	r0, r3
 800cff2:	81a0      	strh	r0, [r4, #12]
 800cff4:	bb2d      	cbnz	r5, 800d042 <setvbuf+0xe6>
 800cff6:	9d00      	ldr	r5, [sp, #0]
 800cff8:	4628      	mov	r0, r5
 800cffa:	f001 f8a3 	bl	800e144 <malloc>
 800cffe:	4606      	mov	r6, r0
 800d000:	2800      	cmp	r0, #0
 800d002:	d152      	bne.n	800d0aa <setvbuf+0x14e>
 800d004:	f8dd 9000 	ldr.w	r9, [sp]
 800d008:	45a9      	cmp	r9, r5
 800d00a:	d140      	bne.n	800d08e <setvbuf+0x132>
 800d00c:	f04f 35ff 	mov.w	r5, #4294967295
 800d010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d014:	f043 0202 	orr.w	r2, r3, #2
 800d018:	81a2      	strh	r2, [r4, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	60a2      	str	r2, [r4, #8]
 800d01e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800d022:	6022      	str	r2, [r4, #0]
 800d024:	6122      	str	r2, [r4, #16]
 800d026:	2201      	movs	r2, #1
 800d028:	6162      	str	r2, [r4, #20]
 800d02a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d02c:	07d6      	lsls	r6, r2, #31
 800d02e:	d404      	bmi.n	800d03a <setvbuf+0xde>
 800d030:	0598      	lsls	r0, r3, #22
 800d032:	d402      	bmi.n	800d03a <setvbuf+0xde>
 800d034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d036:	f000 f9bb 	bl	800d3b0 <__retarget_lock_release_recursive>
 800d03a:	4628      	mov	r0, r5
 800d03c:	b003      	add	sp, #12
 800d03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d042:	2e00      	cmp	r6, #0
 800d044:	d0d8      	beq.n	800cff8 <setvbuf+0x9c>
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	b913      	cbnz	r3, 800d050 <setvbuf+0xf4>
 800d04a:	4638      	mov	r0, r7
 800d04c:	f7ff ff3e 	bl	800cecc <__sinit>
 800d050:	f1b8 0f01 	cmp.w	r8, #1
 800d054:	bf08      	it	eq
 800d056:	89a3      	ldrheq	r3, [r4, #12]
 800d058:	6026      	str	r6, [r4, #0]
 800d05a:	bf04      	itt	eq
 800d05c:	f043 0301 	orreq.w	r3, r3, #1
 800d060:	81a3      	strheq	r3, [r4, #12]
 800d062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d066:	f013 0208 	ands.w	r2, r3, #8
 800d06a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d06e:	d01e      	beq.n	800d0ae <setvbuf+0x152>
 800d070:	07d9      	lsls	r1, r3, #31
 800d072:	bf41      	itttt	mi
 800d074:	2200      	movmi	r2, #0
 800d076:	426d      	negmi	r5, r5
 800d078:	60a2      	strmi	r2, [r4, #8]
 800d07a:	61a5      	strmi	r5, [r4, #24]
 800d07c:	bf58      	it	pl
 800d07e:	60a5      	strpl	r5, [r4, #8]
 800d080:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d082:	07d2      	lsls	r2, r2, #31
 800d084:	d401      	bmi.n	800d08a <setvbuf+0x12e>
 800d086:	059b      	lsls	r3, r3, #22
 800d088:	d513      	bpl.n	800d0b2 <setvbuf+0x156>
 800d08a:	2500      	movs	r5, #0
 800d08c:	e7d5      	b.n	800d03a <setvbuf+0xde>
 800d08e:	4648      	mov	r0, r9
 800d090:	f001 f858 	bl	800e144 <malloc>
 800d094:	4606      	mov	r6, r0
 800d096:	2800      	cmp	r0, #0
 800d098:	d0b8      	beq.n	800d00c <setvbuf+0xb0>
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	464d      	mov	r5, r9
 800d0a4:	e7cf      	b.n	800d046 <setvbuf+0xea>
 800d0a6:	2500      	movs	r5, #0
 800d0a8:	e7b2      	b.n	800d010 <setvbuf+0xb4>
 800d0aa:	46a9      	mov	r9, r5
 800d0ac:	e7f5      	b.n	800d09a <setvbuf+0x13e>
 800d0ae:	60a2      	str	r2, [r4, #8]
 800d0b0:	e7e6      	b.n	800d080 <setvbuf+0x124>
 800d0b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0b4:	f000 f97c 	bl	800d3b0 <__retarget_lock_release_recursive>
 800d0b8:	e7e7      	b.n	800d08a <setvbuf+0x12e>
 800d0ba:	f04f 35ff 	mov.w	r5, #4294967295
 800d0be:	e7bc      	b.n	800d03a <setvbuf+0xde>
 800d0c0:	20000040 	.word	0x20000040

0800d0c4 <sniprintf>:
 800d0c4:	b40c      	push	{r2, r3}
 800d0c6:	b530      	push	{r4, r5, lr}
 800d0c8:	4b18      	ldr	r3, [pc, #96]	@ (800d12c <sniprintf+0x68>)
 800d0ca:	1e0c      	subs	r4, r1, #0
 800d0cc:	681d      	ldr	r5, [r3, #0]
 800d0ce:	b09d      	sub	sp, #116	@ 0x74
 800d0d0:	da08      	bge.n	800d0e4 <sniprintf+0x20>
 800d0d2:	238b      	movs	r3, #139	@ 0x8b
 800d0d4:	602b      	str	r3, [r5, #0]
 800d0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0da:	b01d      	add	sp, #116	@ 0x74
 800d0dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0e0:	b002      	add	sp, #8
 800d0e2:	4770      	bx	lr
 800d0e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d0e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d0ec:	f04f 0300 	mov.w	r3, #0
 800d0f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d0f2:	bf14      	ite	ne
 800d0f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d0f8:	4623      	moveq	r3, r4
 800d0fa:	9304      	str	r3, [sp, #16]
 800d0fc:	9307      	str	r3, [sp, #28]
 800d0fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d102:	9002      	str	r0, [sp, #8]
 800d104:	9006      	str	r0, [sp, #24]
 800d106:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d10a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d10c:	ab21      	add	r3, sp, #132	@ 0x84
 800d10e:	a902      	add	r1, sp, #8
 800d110:	4628      	mov	r0, r5
 800d112:	9301      	str	r3, [sp, #4]
 800d114:	f002 fbda 	bl	800f8cc <_svfiprintf_r>
 800d118:	1c43      	adds	r3, r0, #1
 800d11a:	bfbc      	itt	lt
 800d11c:	238b      	movlt	r3, #139	@ 0x8b
 800d11e:	602b      	strlt	r3, [r5, #0]
 800d120:	2c00      	cmp	r4, #0
 800d122:	d0da      	beq.n	800d0da <sniprintf+0x16>
 800d124:	9b02      	ldr	r3, [sp, #8]
 800d126:	2200      	movs	r2, #0
 800d128:	701a      	strb	r2, [r3, #0]
 800d12a:	e7d6      	b.n	800d0da <sniprintf+0x16>
 800d12c:	20000040 	.word	0x20000040

0800d130 <siprintf>:
 800d130:	b40e      	push	{r1, r2, r3}
 800d132:	b510      	push	{r4, lr}
 800d134:	b09d      	sub	sp, #116	@ 0x74
 800d136:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d138:	9002      	str	r0, [sp, #8]
 800d13a:	9006      	str	r0, [sp, #24]
 800d13c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d140:	480a      	ldr	r0, [pc, #40]	@ (800d16c <siprintf+0x3c>)
 800d142:	9107      	str	r1, [sp, #28]
 800d144:	9104      	str	r1, [sp, #16]
 800d146:	490a      	ldr	r1, [pc, #40]	@ (800d170 <siprintf+0x40>)
 800d148:	f853 2b04 	ldr.w	r2, [r3], #4
 800d14c:	9105      	str	r1, [sp, #20]
 800d14e:	2400      	movs	r4, #0
 800d150:	a902      	add	r1, sp, #8
 800d152:	6800      	ldr	r0, [r0, #0]
 800d154:	9301      	str	r3, [sp, #4]
 800d156:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d158:	f002 fbb8 	bl	800f8cc <_svfiprintf_r>
 800d15c:	9b02      	ldr	r3, [sp, #8]
 800d15e:	701c      	strb	r4, [r3, #0]
 800d160:	b01d      	add	sp, #116	@ 0x74
 800d162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d166:	b003      	add	sp, #12
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	20000040 	.word	0x20000040
 800d170:	ffff0208 	.word	0xffff0208

0800d174 <__sread>:
 800d174:	b510      	push	{r4, lr}
 800d176:	460c      	mov	r4, r1
 800d178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17c:	f000 f8c8 	bl	800d310 <_read_r>
 800d180:	2800      	cmp	r0, #0
 800d182:	bfab      	itete	ge
 800d184:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d186:	89a3      	ldrhlt	r3, [r4, #12]
 800d188:	181b      	addge	r3, r3, r0
 800d18a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d18e:	bfac      	ite	ge
 800d190:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d192:	81a3      	strhlt	r3, [r4, #12]
 800d194:	bd10      	pop	{r4, pc}

0800d196 <__swrite>:
 800d196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d19a:	461f      	mov	r7, r3
 800d19c:	898b      	ldrh	r3, [r1, #12]
 800d19e:	05db      	lsls	r3, r3, #23
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	4616      	mov	r6, r2
 800d1a6:	d505      	bpl.n	800d1b4 <__swrite+0x1e>
 800d1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ac:	2302      	movs	r3, #2
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f000 f89c 	bl	800d2ec <_lseek_r>
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1be:	81a3      	strh	r3, [r4, #12]
 800d1c0:	4632      	mov	r2, r6
 800d1c2:	463b      	mov	r3, r7
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ca:	f000 b8b3 	b.w	800d334 <_write_r>

0800d1ce <__sseek>:
 800d1ce:	b510      	push	{r4, lr}
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1d6:	f000 f889 	bl	800d2ec <_lseek_r>
 800d1da:	1c43      	adds	r3, r0, #1
 800d1dc:	89a3      	ldrh	r3, [r4, #12]
 800d1de:	bf15      	itete	ne
 800d1e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d1e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d1e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1ea:	81a3      	strheq	r3, [r4, #12]
 800d1ec:	bf18      	it	ne
 800d1ee:	81a3      	strhne	r3, [r4, #12]
 800d1f0:	bd10      	pop	{r4, pc}

0800d1f2 <__sclose>:
 800d1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f6:	f000 b869 	b.w	800d2cc <_close_r>

0800d1fa <memset>:
 800d1fa:	4402      	add	r2, r0
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d100      	bne.n	800d204 <memset+0xa>
 800d202:	4770      	bx	lr
 800d204:	f803 1b01 	strb.w	r1, [r3], #1
 800d208:	e7f9      	b.n	800d1fe <memset+0x4>
	...

0800d20c <strtok>:
 800d20c:	4b16      	ldr	r3, [pc, #88]	@ (800d268 <strtok+0x5c>)
 800d20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d212:	681f      	ldr	r7, [r3, #0]
 800d214:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d216:	4605      	mov	r5, r0
 800d218:	460e      	mov	r6, r1
 800d21a:	b9ec      	cbnz	r4, 800d258 <strtok+0x4c>
 800d21c:	2050      	movs	r0, #80	@ 0x50
 800d21e:	f000 ff91 	bl	800e144 <malloc>
 800d222:	4602      	mov	r2, r0
 800d224:	6478      	str	r0, [r7, #68]	@ 0x44
 800d226:	b920      	cbnz	r0, 800d232 <strtok+0x26>
 800d228:	4b10      	ldr	r3, [pc, #64]	@ (800d26c <strtok+0x60>)
 800d22a:	4811      	ldr	r0, [pc, #68]	@ (800d270 <strtok+0x64>)
 800d22c:	215b      	movs	r1, #91	@ 0x5b
 800d22e:	f000 f8c7 	bl	800d3c0 <__assert_func>
 800d232:	e9c0 4400 	strd	r4, r4, [r0]
 800d236:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d23a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d23e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d242:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d246:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d24a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d24e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d252:	6184      	str	r4, [r0, #24]
 800d254:	7704      	strb	r4, [r0, #28]
 800d256:	6244      	str	r4, [r0, #36]	@ 0x24
 800d258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d25a:	4631      	mov	r1, r6
 800d25c:	4628      	mov	r0, r5
 800d25e:	2301      	movs	r3, #1
 800d260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	f000 b806 	b.w	800d274 <__strtok_r>
 800d268:	20000040 	.word	0x20000040
 800d26c:	080128ce 	.word	0x080128ce
 800d270:	080128e5 	.word	0x080128e5

0800d274 <__strtok_r>:
 800d274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d276:	4604      	mov	r4, r0
 800d278:	b908      	cbnz	r0, 800d27e <__strtok_r+0xa>
 800d27a:	6814      	ldr	r4, [r2, #0]
 800d27c:	b144      	cbz	r4, 800d290 <__strtok_r+0x1c>
 800d27e:	4620      	mov	r0, r4
 800d280:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d284:	460f      	mov	r7, r1
 800d286:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d28a:	b91e      	cbnz	r6, 800d294 <__strtok_r+0x20>
 800d28c:	b965      	cbnz	r5, 800d2a8 <__strtok_r+0x34>
 800d28e:	6015      	str	r5, [r2, #0]
 800d290:	2000      	movs	r0, #0
 800d292:	e005      	b.n	800d2a0 <__strtok_r+0x2c>
 800d294:	42b5      	cmp	r5, r6
 800d296:	d1f6      	bne.n	800d286 <__strtok_r+0x12>
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1f0      	bne.n	800d27e <__strtok_r+0xa>
 800d29c:	6014      	str	r4, [r2, #0]
 800d29e:	7003      	strb	r3, [r0, #0]
 800d2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a2:	461c      	mov	r4, r3
 800d2a4:	e00c      	b.n	800d2c0 <__strtok_r+0x4c>
 800d2a6:	b91d      	cbnz	r5, 800d2b0 <__strtok_r+0x3c>
 800d2a8:	4627      	mov	r7, r4
 800d2aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2ae:	460e      	mov	r6, r1
 800d2b0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d2b4:	42ab      	cmp	r3, r5
 800d2b6:	d1f6      	bne.n	800d2a6 <__strtok_r+0x32>
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d0f2      	beq.n	800d2a2 <__strtok_r+0x2e>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	703b      	strb	r3, [r7, #0]
 800d2c0:	6014      	str	r4, [r2, #0]
 800d2c2:	e7ed      	b.n	800d2a0 <__strtok_r+0x2c>

0800d2c4 <_localeconv_r>:
 800d2c4:	4800      	ldr	r0, [pc, #0]	@ (800d2c8 <_localeconv_r+0x4>)
 800d2c6:	4770      	bx	lr
 800d2c8:	20000180 	.word	0x20000180

0800d2cc <_close_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4d06      	ldr	r5, [pc, #24]	@ (800d2e8 <_close_r+0x1c>)
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	4608      	mov	r0, r1
 800d2d6:	602b      	str	r3, [r5, #0]
 800d2d8:	f7f7 fccc 	bl	8004c74 <_close>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_close_r+0x1a>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_close_r+0x1a>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	2000122c 	.word	0x2000122c

0800d2ec <_lseek_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4d07      	ldr	r5, [pc, #28]	@ (800d30c <_lseek_r+0x20>)
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	4608      	mov	r0, r1
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	602a      	str	r2, [r5, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f7f7 fce1 	bl	8004cc2 <_lseek>
 800d300:	1c43      	adds	r3, r0, #1
 800d302:	d102      	bne.n	800d30a <_lseek_r+0x1e>
 800d304:	682b      	ldr	r3, [r5, #0]
 800d306:	b103      	cbz	r3, 800d30a <_lseek_r+0x1e>
 800d308:	6023      	str	r3, [r4, #0]
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
 800d30c:	2000122c 	.word	0x2000122c

0800d310 <_read_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4d07      	ldr	r5, [pc, #28]	@ (800d330 <_read_r+0x20>)
 800d314:	4604      	mov	r4, r0
 800d316:	4608      	mov	r0, r1
 800d318:	4611      	mov	r1, r2
 800d31a:	2200      	movs	r2, #0
 800d31c:	602a      	str	r2, [r5, #0]
 800d31e:	461a      	mov	r2, r3
 800d320:	f7f7 fc8b 	bl	8004c3a <_read>
 800d324:	1c43      	adds	r3, r0, #1
 800d326:	d102      	bne.n	800d32e <_read_r+0x1e>
 800d328:	682b      	ldr	r3, [r5, #0]
 800d32a:	b103      	cbz	r3, 800d32e <_read_r+0x1e>
 800d32c:	6023      	str	r3, [r4, #0]
 800d32e:	bd38      	pop	{r3, r4, r5, pc}
 800d330:	2000122c 	.word	0x2000122c

0800d334 <_write_r>:
 800d334:	b538      	push	{r3, r4, r5, lr}
 800d336:	4d07      	ldr	r5, [pc, #28]	@ (800d354 <_write_r+0x20>)
 800d338:	4604      	mov	r4, r0
 800d33a:	4608      	mov	r0, r1
 800d33c:	4611      	mov	r1, r2
 800d33e:	2200      	movs	r2, #0
 800d340:	602a      	str	r2, [r5, #0]
 800d342:	461a      	mov	r2, r3
 800d344:	f7f6 fd68 	bl	8003e18 <_write>
 800d348:	1c43      	adds	r3, r0, #1
 800d34a:	d102      	bne.n	800d352 <_write_r+0x1e>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	b103      	cbz	r3, 800d352 <_write_r+0x1e>
 800d350:	6023      	str	r3, [r4, #0]
 800d352:	bd38      	pop	{r3, r4, r5, pc}
 800d354:	2000122c 	.word	0x2000122c

0800d358 <__errno>:
 800d358:	4b01      	ldr	r3, [pc, #4]	@ (800d360 <__errno+0x8>)
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	20000040 	.word	0x20000040

0800d364 <__libc_init_array>:
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	4d0d      	ldr	r5, [pc, #52]	@ (800d39c <__libc_init_array+0x38>)
 800d368:	4c0d      	ldr	r4, [pc, #52]	@ (800d3a0 <__libc_init_array+0x3c>)
 800d36a:	1b64      	subs	r4, r4, r5
 800d36c:	10a4      	asrs	r4, r4, #2
 800d36e:	2600      	movs	r6, #0
 800d370:	42a6      	cmp	r6, r4
 800d372:	d109      	bne.n	800d388 <__libc_init_array+0x24>
 800d374:	4d0b      	ldr	r5, [pc, #44]	@ (800d3a4 <__libc_init_array+0x40>)
 800d376:	4c0c      	ldr	r4, [pc, #48]	@ (800d3a8 <__libc_init_array+0x44>)
 800d378:	f003 fafa 	bl	8010970 <_init>
 800d37c:	1b64      	subs	r4, r4, r5
 800d37e:	10a4      	asrs	r4, r4, #2
 800d380:	2600      	movs	r6, #0
 800d382:	42a6      	cmp	r6, r4
 800d384:	d105      	bne.n	800d392 <__libc_init_array+0x2e>
 800d386:	bd70      	pop	{r4, r5, r6, pc}
 800d388:	f855 3b04 	ldr.w	r3, [r5], #4
 800d38c:	4798      	blx	r3
 800d38e:	3601      	adds	r6, #1
 800d390:	e7ee      	b.n	800d370 <__libc_init_array+0xc>
 800d392:	f855 3b04 	ldr.w	r3, [r5], #4
 800d396:	4798      	blx	r3
 800d398:	3601      	adds	r6, #1
 800d39a:	e7f2      	b.n	800d382 <__libc_init_array+0x1e>
 800d39c:	08012c20 	.word	0x08012c20
 800d3a0:	08012c20 	.word	0x08012c20
 800d3a4:	08012c20 	.word	0x08012c20
 800d3a8:	08012c24 	.word	0x08012c24

0800d3ac <__retarget_lock_init_recursive>:
 800d3ac:	4770      	bx	lr

0800d3ae <__retarget_lock_acquire_recursive>:
 800d3ae:	4770      	bx	lr

0800d3b0 <__retarget_lock_release_recursive>:
 800d3b0:	4770      	bx	lr
	...

0800d3b4 <nanf>:
 800d3b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d3bc <nanf+0x8>
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	7fc00000 	.word	0x7fc00000

0800d3c0 <__assert_func>:
 800d3c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3c2:	4614      	mov	r4, r2
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	4b09      	ldr	r3, [pc, #36]	@ (800d3ec <__assert_func+0x2c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	68d8      	ldr	r0, [r3, #12]
 800d3ce:	b14c      	cbz	r4, 800d3e4 <__assert_func+0x24>
 800d3d0:	4b07      	ldr	r3, [pc, #28]	@ (800d3f0 <__assert_func+0x30>)
 800d3d2:	9100      	str	r1, [sp, #0]
 800d3d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3d8:	4906      	ldr	r1, [pc, #24]	@ (800d3f4 <__assert_func+0x34>)
 800d3da:	462b      	mov	r3, r5
 800d3dc:	f002 fd60 	bl	800fea0 <fiprintf>
 800d3e0:	f002 feda 	bl	8010198 <abort>
 800d3e4:	4b04      	ldr	r3, [pc, #16]	@ (800d3f8 <__assert_func+0x38>)
 800d3e6:	461c      	mov	r4, r3
 800d3e8:	e7f3      	b.n	800d3d2 <__assert_func+0x12>
 800d3ea:	bf00      	nop
 800d3ec:	20000040 	.word	0x20000040
 800d3f0:	0801293f 	.word	0x0801293f
 800d3f4:	0801294c 	.word	0x0801294c
 800d3f8:	0801297a 	.word	0x0801297a

0800d3fc <quorem>:
 800d3fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d400:	6903      	ldr	r3, [r0, #16]
 800d402:	690c      	ldr	r4, [r1, #16]
 800d404:	42a3      	cmp	r3, r4
 800d406:	4607      	mov	r7, r0
 800d408:	db7e      	blt.n	800d508 <quorem+0x10c>
 800d40a:	3c01      	subs	r4, #1
 800d40c:	f101 0814 	add.w	r8, r1, #20
 800d410:	00a3      	lsls	r3, r4, #2
 800d412:	f100 0514 	add.w	r5, r0, #20
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d422:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d426:	3301      	adds	r3, #1
 800d428:	429a      	cmp	r2, r3
 800d42a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d42e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d432:	d32e      	bcc.n	800d492 <quorem+0x96>
 800d434:	f04f 0a00 	mov.w	sl, #0
 800d438:	46c4      	mov	ip, r8
 800d43a:	46ae      	mov	lr, r5
 800d43c:	46d3      	mov	fp, sl
 800d43e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d442:	b298      	uxth	r0, r3
 800d444:	fb06 a000 	mla	r0, r6, r0, sl
 800d448:	0c02      	lsrs	r2, r0, #16
 800d44a:	0c1b      	lsrs	r3, r3, #16
 800d44c:	fb06 2303 	mla	r3, r6, r3, r2
 800d450:	f8de 2000 	ldr.w	r2, [lr]
 800d454:	b280      	uxth	r0, r0
 800d456:	b292      	uxth	r2, r2
 800d458:	1a12      	subs	r2, r2, r0
 800d45a:	445a      	add	r2, fp
 800d45c:	f8de 0000 	ldr.w	r0, [lr]
 800d460:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d464:	b29b      	uxth	r3, r3
 800d466:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d46a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d46e:	b292      	uxth	r2, r2
 800d470:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d474:	45e1      	cmp	r9, ip
 800d476:	f84e 2b04 	str.w	r2, [lr], #4
 800d47a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d47e:	d2de      	bcs.n	800d43e <quorem+0x42>
 800d480:	9b00      	ldr	r3, [sp, #0]
 800d482:	58eb      	ldr	r3, [r5, r3]
 800d484:	b92b      	cbnz	r3, 800d492 <quorem+0x96>
 800d486:	9b01      	ldr	r3, [sp, #4]
 800d488:	3b04      	subs	r3, #4
 800d48a:	429d      	cmp	r5, r3
 800d48c:	461a      	mov	r2, r3
 800d48e:	d32f      	bcc.n	800d4f0 <quorem+0xf4>
 800d490:	613c      	str	r4, [r7, #16]
 800d492:	4638      	mov	r0, r7
 800d494:	f001 f9c8 	bl	800e828 <__mcmp>
 800d498:	2800      	cmp	r0, #0
 800d49a:	db25      	blt.n	800d4e8 <quorem+0xec>
 800d49c:	4629      	mov	r1, r5
 800d49e:	2000      	movs	r0, #0
 800d4a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d4a4:	f8d1 c000 	ldr.w	ip, [r1]
 800d4a8:	fa1f fe82 	uxth.w	lr, r2
 800d4ac:	fa1f f38c 	uxth.w	r3, ip
 800d4b0:	eba3 030e 	sub.w	r3, r3, lr
 800d4b4:	4403      	add	r3, r0
 800d4b6:	0c12      	lsrs	r2, r2, #16
 800d4b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d4bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4c6:	45c1      	cmp	r9, r8
 800d4c8:	f841 3b04 	str.w	r3, [r1], #4
 800d4cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d4d0:	d2e6      	bcs.n	800d4a0 <quorem+0xa4>
 800d4d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4da:	b922      	cbnz	r2, 800d4e6 <quorem+0xea>
 800d4dc:	3b04      	subs	r3, #4
 800d4de:	429d      	cmp	r5, r3
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	d30b      	bcc.n	800d4fc <quorem+0x100>
 800d4e4:	613c      	str	r4, [r7, #16]
 800d4e6:	3601      	adds	r6, #1
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	b003      	add	sp, #12
 800d4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f0:	6812      	ldr	r2, [r2, #0]
 800d4f2:	3b04      	subs	r3, #4
 800d4f4:	2a00      	cmp	r2, #0
 800d4f6:	d1cb      	bne.n	800d490 <quorem+0x94>
 800d4f8:	3c01      	subs	r4, #1
 800d4fa:	e7c6      	b.n	800d48a <quorem+0x8e>
 800d4fc:	6812      	ldr	r2, [r2, #0]
 800d4fe:	3b04      	subs	r3, #4
 800d500:	2a00      	cmp	r2, #0
 800d502:	d1ef      	bne.n	800d4e4 <quorem+0xe8>
 800d504:	3c01      	subs	r4, #1
 800d506:	e7ea      	b.n	800d4de <quorem+0xe2>
 800d508:	2000      	movs	r0, #0
 800d50a:	e7ee      	b.n	800d4ea <quorem+0xee>
 800d50c:	0000      	movs	r0, r0
	...

0800d510 <_dtoa_r>:
 800d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	69c7      	ldr	r7, [r0, #28]
 800d516:	b097      	sub	sp, #92	@ 0x5c
 800d518:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d51c:	ec55 4b10 	vmov	r4, r5, d0
 800d520:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d522:	9107      	str	r1, [sp, #28]
 800d524:	4681      	mov	r9, r0
 800d526:	920c      	str	r2, [sp, #48]	@ 0x30
 800d528:	9311      	str	r3, [sp, #68]	@ 0x44
 800d52a:	b97f      	cbnz	r7, 800d54c <_dtoa_r+0x3c>
 800d52c:	2010      	movs	r0, #16
 800d52e:	f000 fe09 	bl	800e144 <malloc>
 800d532:	4602      	mov	r2, r0
 800d534:	f8c9 001c 	str.w	r0, [r9, #28]
 800d538:	b920      	cbnz	r0, 800d544 <_dtoa_r+0x34>
 800d53a:	4ba9      	ldr	r3, [pc, #676]	@ (800d7e0 <_dtoa_r+0x2d0>)
 800d53c:	21ef      	movs	r1, #239	@ 0xef
 800d53e:	48a9      	ldr	r0, [pc, #676]	@ (800d7e4 <_dtoa_r+0x2d4>)
 800d540:	f7ff ff3e 	bl	800d3c0 <__assert_func>
 800d544:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d548:	6007      	str	r7, [r0, #0]
 800d54a:	60c7      	str	r7, [r0, #12]
 800d54c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d550:	6819      	ldr	r1, [r3, #0]
 800d552:	b159      	cbz	r1, 800d56c <_dtoa_r+0x5c>
 800d554:	685a      	ldr	r2, [r3, #4]
 800d556:	604a      	str	r2, [r1, #4]
 800d558:	2301      	movs	r3, #1
 800d55a:	4093      	lsls	r3, r2
 800d55c:	608b      	str	r3, [r1, #8]
 800d55e:	4648      	mov	r0, r9
 800d560:	f000 fee6 	bl	800e330 <_Bfree>
 800d564:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d568:	2200      	movs	r2, #0
 800d56a:	601a      	str	r2, [r3, #0]
 800d56c:	1e2b      	subs	r3, r5, #0
 800d56e:	bfb9      	ittee	lt
 800d570:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d574:	9305      	strlt	r3, [sp, #20]
 800d576:	2300      	movge	r3, #0
 800d578:	6033      	strge	r3, [r6, #0]
 800d57a:	9f05      	ldr	r7, [sp, #20]
 800d57c:	4b9a      	ldr	r3, [pc, #616]	@ (800d7e8 <_dtoa_r+0x2d8>)
 800d57e:	bfbc      	itt	lt
 800d580:	2201      	movlt	r2, #1
 800d582:	6032      	strlt	r2, [r6, #0]
 800d584:	43bb      	bics	r3, r7
 800d586:	d112      	bne.n	800d5ae <_dtoa_r+0x9e>
 800d588:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d58a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d58e:	6013      	str	r3, [r2, #0]
 800d590:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d594:	4323      	orrs	r3, r4
 800d596:	f000 855a 	beq.w	800e04e <_dtoa_r+0xb3e>
 800d59a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d59c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d7fc <_dtoa_r+0x2ec>
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f000 855c 	beq.w	800e05e <_dtoa_r+0xb4e>
 800d5a6:	f10a 0303 	add.w	r3, sl, #3
 800d5aa:	f000 bd56 	b.w	800e05a <_dtoa_r+0xb4a>
 800d5ae:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	ec51 0b17 	vmov	r0, r1, d7
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d5be:	f7f3 fab3 	bl	8000b28 <__aeabi_dcmpeq>
 800d5c2:	4680      	mov	r8, r0
 800d5c4:	b158      	cbz	r0, 800d5de <_dtoa_r+0xce>
 800d5c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	6013      	str	r3, [r2, #0]
 800d5cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d5ce:	b113      	cbz	r3, 800d5d6 <_dtoa_r+0xc6>
 800d5d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d5d2:	4b86      	ldr	r3, [pc, #536]	@ (800d7ec <_dtoa_r+0x2dc>)
 800d5d4:	6013      	str	r3, [r2, #0]
 800d5d6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d800 <_dtoa_r+0x2f0>
 800d5da:	f000 bd40 	b.w	800e05e <_dtoa_r+0xb4e>
 800d5de:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d5e2:	aa14      	add	r2, sp, #80	@ 0x50
 800d5e4:	a915      	add	r1, sp, #84	@ 0x54
 800d5e6:	4648      	mov	r0, r9
 800d5e8:	f001 fa3e 	bl	800ea68 <__d2b>
 800d5ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d5f0:	9002      	str	r0, [sp, #8]
 800d5f2:	2e00      	cmp	r6, #0
 800d5f4:	d078      	beq.n	800d6e8 <_dtoa_r+0x1d8>
 800d5f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5f8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d5fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d604:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d608:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d60c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d610:	4619      	mov	r1, r3
 800d612:	2200      	movs	r2, #0
 800d614:	4b76      	ldr	r3, [pc, #472]	@ (800d7f0 <_dtoa_r+0x2e0>)
 800d616:	f7f2 fe67 	bl	80002e8 <__aeabi_dsub>
 800d61a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d7c8 <_dtoa_r+0x2b8>)
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	f7f3 f81a 	bl	8000658 <__aeabi_dmul>
 800d624:	a36a      	add	r3, pc, #424	@ (adr r3, 800d7d0 <_dtoa_r+0x2c0>)
 800d626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62a:	f7f2 fe5f 	bl	80002ec <__adddf3>
 800d62e:	4604      	mov	r4, r0
 800d630:	4630      	mov	r0, r6
 800d632:	460d      	mov	r5, r1
 800d634:	f7f2 ffa6 	bl	8000584 <__aeabi_i2d>
 800d638:	a367      	add	r3, pc, #412	@ (adr r3, 800d7d8 <_dtoa_r+0x2c8>)
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	f7f3 f80b 	bl	8000658 <__aeabi_dmul>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	4620      	mov	r0, r4
 800d648:	4629      	mov	r1, r5
 800d64a:	f7f2 fe4f 	bl	80002ec <__adddf3>
 800d64e:	4604      	mov	r4, r0
 800d650:	460d      	mov	r5, r1
 800d652:	f7f3 fab1 	bl	8000bb8 <__aeabi_d2iz>
 800d656:	2200      	movs	r2, #0
 800d658:	4607      	mov	r7, r0
 800d65a:	2300      	movs	r3, #0
 800d65c:	4620      	mov	r0, r4
 800d65e:	4629      	mov	r1, r5
 800d660:	f7f3 fa6c 	bl	8000b3c <__aeabi_dcmplt>
 800d664:	b140      	cbz	r0, 800d678 <_dtoa_r+0x168>
 800d666:	4638      	mov	r0, r7
 800d668:	f7f2 ff8c 	bl	8000584 <__aeabi_i2d>
 800d66c:	4622      	mov	r2, r4
 800d66e:	462b      	mov	r3, r5
 800d670:	f7f3 fa5a 	bl	8000b28 <__aeabi_dcmpeq>
 800d674:	b900      	cbnz	r0, 800d678 <_dtoa_r+0x168>
 800d676:	3f01      	subs	r7, #1
 800d678:	2f16      	cmp	r7, #22
 800d67a:	d852      	bhi.n	800d722 <_dtoa_r+0x212>
 800d67c:	4b5d      	ldr	r3, [pc, #372]	@ (800d7f4 <_dtoa_r+0x2e4>)
 800d67e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d686:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d68a:	f7f3 fa57 	bl	8000b3c <__aeabi_dcmplt>
 800d68e:	2800      	cmp	r0, #0
 800d690:	d049      	beq.n	800d726 <_dtoa_r+0x216>
 800d692:	3f01      	subs	r7, #1
 800d694:	2300      	movs	r3, #0
 800d696:	9310      	str	r3, [sp, #64]	@ 0x40
 800d698:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d69a:	1b9b      	subs	r3, r3, r6
 800d69c:	1e5a      	subs	r2, r3, #1
 800d69e:	bf45      	ittet	mi
 800d6a0:	f1c3 0301 	rsbmi	r3, r3, #1
 800d6a4:	9300      	strmi	r3, [sp, #0]
 800d6a6:	2300      	movpl	r3, #0
 800d6a8:	2300      	movmi	r3, #0
 800d6aa:	9206      	str	r2, [sp, #24]
 800d6ac:	bf54      	ite	pl
 800d6ae:	9300      	strpl	r3, [sp, #0]
 800d6b0:	9306      	strmi	r3, [sp, #24]
 800d6b2:	2f00      	cmp	r7, #0
 800d6b4:	db39      	blt.n	800d72a <_dtoa_r+0x21a>
 800d6b6:	9b06      	ldr	r3, [sp, #24]
 800d6b8:	970d      	str	r7, [sp, #52]	@ 0x34
 800d6ba:	443b      	add	r3, r7
 800d6bc:	9306      	str	r3, [sp, #24]
 800d6be:	2300      	movs	r3, #0
 800d6c0:	9308      	str	r3, [sp, #32]
 800d6c2:	9b07      	ldr	r3, [sp, #28]
 800d6c4:	2b09      	cmp	r3, #9
 800d6c6:	d863      	bhi.n	800d790 <_dtoa_r+0x280>
 800d6c8:	2b05      	cmp	r3, #5
 800d6ca:	bfc4      	itt	gt
 800d6cc:	3b04      	subgt	r3, #4
 800d6ce:	9307      	strgt	r3, [sp, #28]
 800d6d0:	9b07      	ldr	r3, [sp, #28]
 800d6d2:	f1a3 0302 	sub.w	r3, r3, #2
 800d6d6:	bfcc      	ite	gt
 800d6d8:	2400      	movgt	r4, #0
 800d6da:	2401      	movle	r4, #1
 800d6dc:	2b03      	cmp	r3, #3
 800d6de:	d863      	bhi.n	800d7a8 <_dtoa_r+0x298>
 800d6e0:	e8df f003 	tbb	[pc, r3]
 800d6e4:	2b375452 	.word	0x2b375452
 800d6e8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d6ec:	441e      	add	r6, r3
 800d6ee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d6f2:	2b20      	cmp	r3, #32
 800d6f4:	bfc1      	itttt	gt
 800d6f6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d6fa:	409f      	lslgt	r7, r3
 800d6fc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d700:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d704:	bfd6      	itet	le
 800d706:	f1c3 0320 	rsble	r3, r3, #32
 800d70a:	ea47 0003 	orrgt.w	r0, r7, r3
 800d70e:	fa04 f003 	lslle.w	r0, r4, r3
 800d712:	f7f2 ff27 	bl	8000564 <__aeabi_ui2d>
 800d716:	2201      	movs	r2, #1
 800d718:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d71c:	3e01      	subs	r6, #1
 800d71e:	9212      	str	r2, [sp, #72]	@ 0x48
 800d720:	e776      	b.n	800d610 <_dtoa_r+0x100>
 800d722:	2301      	movs	r3, #1
 800d724:	e7b7      	b.n	800d696 <_dtoa_r+0x186>
 800d726:	9010      	str	r0, [sp, #64]	@ 0x40
 800d728:	e7b6      	b.n	800d698 <_dtoa_r+0x188>
 800d72a:	9b00      	ldr	r3, [sp, #0]
 800d72c:	1bdb      	subs	r3, r3, r7
 800d72e:	9300      	str	r3, [sp, #0]
 800d730:	427b      	negs	r3, r7
 800d732:	9308      	str	r3, [sp, #32]
 800d734:	2300      	movs	r3, #0
 800d736:	930d      	str	r3, [sp, #52]	@ 0x34
 800d738:	e7c3      	b.n	800d6c2 <_dtoa_r+0x1b2>
 800d73a:	2301      	movs	r3, #1
 800d73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d73e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d740:	eb07 0b03 	add.w	fp, r7, r3
 800d744:	f10b 0301 	add.w	r3, fp, #1
 800d748:	2b01      	cmp	r3, #1
 800d74a:	9303      	str	r3, [sp, #12]
 800d74c:	bfb8      	it	lt
 800d74e:	2301      	movlt	r3, #1
 800d750:	e006      	b.n	800d760 <_dtoa_r+0x250>
 800d752:	2301      	movs	r3, #1
 800d754:	9309      	str	r3, [sp, #36]	@ 0x24
 800d756:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d758:	2b00      	cmp	r3, #0
 800d75a:	dd28      	ble.n	800d7ae <_dtoa_r+0x29e>
 800d75c:	469b      	mov	fp, r3
 800d75e:	9303      	str	r3, [sp, #12]
 800d760:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d764:	2100      	movs	r1, #0
 800d766:	2204      	movs	r2, #4
 800d768:	f102 0514 	add.w	r5, r2, #20
 800d76c:	429d      	cmp	r5, r3
 800d76e:	d926      	bls.n	800d7be <_dtoa_r+0x2ae>
 800d770:	6041      	str	r1, [r0, #4]
 800d772:	4648      	mov	r0, r9
 800d774:	f000 fd9c 	bl	800e2b0 <_Balloc>
 800d778:	4682      	mov	sl, r0
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d142      	bne.n	800d804 <_dtoa_r+0x2f4>
 800d77e:	4b1e      	ldr	r3, [pc, #120]	@ (800d7f8 <_dtoa_r+0x2e8>)
 800d780:	4602      	mov	r2, r0
 800d782:	f240 11af 	movw	r1, #431	@ 0x1af
 800d786:	e6da      	b.n	800d53e <_dtoa_r+0x2e>
 800d788:	2300      	movs	r3, #0
 800d78a:	e7e3      	b.n	800d754 <_dtoa_r+0x244>
 800d78c:	2300      	movs	r3, #0
 800d78e:	e7d5      	b.n	800d73c <_dtoa_r+0x22c>
 800d790:	2401      	movs	r4, #1
 800d792:	2300      	movs	r3, #0
 800d794:	9307      	str	r3, [sp, #28]
 800d796:	9409      	str	r4, [sp, #36]	@ 0x24
 800d798:	f04f 3bff 	mov.w	fp, #4294967295
 800d79c:	2200      	movs	r2, #0
 800d79e:	f8cd b00c 	str.w	fp, [sp, #12]
 800d7a2:	2312      	movs	r3, #18
 800d7a4:	920c      	str	r2, [sp, #48]	@ 0x30
 800d7a6:	e7db      	b.n	800d760 <_dtoa_r+0x250>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ac:	e7f4      	b.n	800d798 <_dtoa_r+0x288>
 800d7ae:	f04f 0b01 	mov.w	fp, #1
 800d7b2:	f8cd b00c 	str.w	fp, [sp, #12]
 800d7b6:	465b      	mov	r3, fp
 800d7b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d7bc:	e7d0      	b.n	800d760 <_dtoa_r+0x250>
 800d7be:	3101      	adds	r1, #1
 800d7c0:	0052      	lsls	r2, r2, #1
 800d7c2:	e7d1      	b.n	800d768 <_dtoa_r+0x258>
 800d7c4:	f3af 8000 	nop.w
 800d7c8:	636f4361 	.word	0x636f4361
 800d7cc:	3fd287a7 	.word	0x3fd287a7
 800d7d0:	8b60c8b3 	.word	0x8b60c8b3
 800d7d4:	3fc68a28 	.word	0x3fc68a28
 800d7d8:	509f79fb 	.word	0x509f79fb
 800d7dc:	3fd34413 	.word	0x3fd34413
 800d7e0:	080128ce 	.word	0x080128ce
 800d7e4:	08012988 	.word	0x08012988
 800d7e8:	7ff00000 	.word	0x7ff00000
 800d7ec:	080128a6 	.word	0x080128a6
 800d7f0:	3ff80000 	.word	0x3ff80000
 800d7f4:	08012b00 	.word	0x08012b00
 800d7f8:	080129e0 	.word	0x080129e0
 800d7fc:	08012984 	.word	0x08012984
 800d800:	080128a5 	.word	0x080128a5
 800d804:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d808:	6018      	str	r0, [r3, #0]
 800d80a:	9b03      	ldr	r3, [sp, #12]
 800d80c:	2b0e      	cmp	r3, #14
 800d80e:	f200 80a1 	bhi.w	800d954 <_dtoa_r+0x444>
 800d812:	2c00      	cmp	r4, #0
 800d814:	f000 809e 	beq.w	800d954 <_dtoa_r+0x444>
 800d818:	2f00      	cmp	r7, #0
 800d81a:	dd33      	ble.n	800d884 <_dtoa_r+0x374>
 800d81c:	4b9c      	ldr	r3, [pc, #624]	@ (800da90 <_dtoa_r+0x580>)
 800d81e:	f007 020f 	and.w	r2, r7, #15
 800d822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d826:	ed93 7b00 	vldr	d7, [r3]
 800d82a:	05f8      	lsls	r0, r7, #23
 800d82c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d830:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d834:	d516      	bpl.n	800d864 <_dtoa_r+0x354>
 800d836:	4b97      	ldr	r3, [pc, #604]	@ (800da94 <_dtoa_r+0x584>)
 800d838:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d83c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d840:	f7f3 f834 	bl	80008ac <__aeabi_ddiv>
 800d844:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d848:	f004 040f 	and.w	r4, r4, #15
 800d84c:	2603      	movs	r6, #3
 800d84e:	4d91      	ldr	r5, [pc, #580]	@ (800da94 <_dtoa_r+0x584>)
 800d850:	b954      	cbnz	r4, 800d868 <_dtoa_r+0x358>
 800d852:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d856:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d85a:	f7f3 f827 	bl	80008ac <__aeabi_ddiv>
 800d85e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d862:	e028      	b.n	800d8b6 <_dtoa_r+0x3a6>
 800d864:	2602      	movs	r6, #2
 800d866:	e7f2      	b.n	800d84e <_dtoa_r+0x33e>
 800d868:	07e1      	lsls	r1, r4, #31
 800d86a:	d508      	bpl.n	800d87e <_dtoa_r+0x36e>
 800d86c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d870:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d874:	f7f2 fef0 	bl	8000658 <__aeabi_dmul>
 800d878:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d87c:	3601      	adds	r6, #1
 800d87e:	1064      	asrs	r4, r4, #1
 800d880:	3508      	adds	r5, #8
 800d882:	e7e5      	b.n	800d850 <_dtoa_r+0x340>
 800d884:	f000 80af 	beq.w	800d9e6 <_dtoa_r+0x4d6>
 800d888:	427c      	negs	r4, r7
 800d88a:	4b81      	ldr	r3, [pc, #516]	@ (800da90 <_dtoa_r+0x580>)
 800d88c:	4d81      	ldr	r5, [pc, #516]	@ (800da94 <_dtoa_r+0x584>)
 800d88e:	f004 020f 	and.w	r2, r4, #15
 800d892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d89e:	f7f2 fedb 	bl	8000658 <__aeabi_dmul>
 800d8a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8a6:	1124      	asrs	r4, r4, #4
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	2602      	movs	r6, #2
 800d8ac:	2c00      	cmp	r4, #0
 800d8ae:	f040 808f 	bne.w	800d9d0 <_dtoa_r+0x4c0>
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1d3      	bne.n	800d85e <_dtoa_r+0x34e>
 800d8b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d8b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f000 8094 	beq.w	800d9ea <_dtoa_r+0x4da>
 800d8c2:	4b75      	ldr	r3, [pc, #468]	@ (800da98 <_dtoa_r+0x588>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f7f3 f937 	bl	8000b3c <__aeabi_dcmplt>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	f000 808b 	beq.w	800d9ea <_dtoa_r+0x4da>
 800d8d4:	9b03      	ldr	r3, [sp, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 8087 	beq.w	800d9ea <_dtoa_r+0x4da>
 800d8dc:	f1bb 0f00 	cmp.w	fp, #0
 800d8e0:	dd34      	ble.n	800d94c <_dtoa_r+0x43c>
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	4b6d      	ldr	r3, [pc, #436]	@ (800da9c <_dtoa_r+0x58c>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	f7f2 feb5 	bl	8000658 <__aeabi_dmul>
 800d8ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8f2:	f107 38ff 	add.w	r8, r7, #4294967295
 800d8f6:	3601      	adds	r6, #1
 800d8f8:	465c      	mov	r4, fp
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f7f2 fe42 	bl	8000584 <__aeabi_i2d>
 800d900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d904:	f7f2 fea8 	bl	8000658 <__aeabi_dmul>
 800d908:	4b65      	ldr	r3, [pc, #404]	@ (800daa0 <_dtoa_r+0x590>)
 800d90a:	2200      	movs	r2, #0
 800d90c:	f7f2 fcee 	bl	80002ec <__adddf3>
 800d910:	4605      	mov	r5, r0
 800d912:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d916:	2c00      	cmp	r4, #0
 800d918:	d16a      	bne.n	800d9f0 <_dtoa_r+0x4e0>
 800d91a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d91e:	4b61      	ldr	r3, [pc, #388]	@ (800daa4 <_dtoa_r+0x594>)
 800d920:	2200      	movs	r2, #0
 800d922:	f7f2 fce1 	bl	80002e8 <__aeabi_dsub>
 800d926:	4602      	mov	r2, r0
 800d928:	460b      	mov	r3, r1
 800d92a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d92e:	462a      	mov	r2, r5
 800d930:	4633      	mov	r3, r6
 800d932:	f7f3 f921 	bl	8000b78 <__aeabi_dcmpgt>
 800d936:	2800      	cmp	r0, #0
 800d938:	f040 8298 	bne.w	800de6c <_dtoa_r+0x95c>
 800d93c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d940:	462a      	mov	r2, r5
 800d942:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d946:	f7f3 f8f9 	bl	8000b3c <__aeabi_dcmplt>
 800d94a:	bb38      	cbnz	r0, 800d99c <_dtoa_r+0x48c>
 800d94c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d950:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d954:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d956:	2b00      	cmp	r3, #0
 800d958:	f2c0 8157 	blt.w	800dc0a <_dtoa_r+0x6fa>
 800d95c:	2f0e      	cmp	r7, #14
 800d95e:	f300 8154 	bgt.w	800dc0a <_dtoa_r+0x6fa>
 800d962:	4b4b      	ldr	r3, [pc, #300]	@ (800da90 <_dtoa_r+0x580>)
 800d964:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d968:	ed93 7b00 	vldr	d7, [r3]
 800d96c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d96e:	2b00      	cmp	r3, #0
 800d970:	ed8d 7b00 	vstr	d7, [sp]
 800d974:	f280 80e5 	bge.w	800db42 <_dtoa_r+0x632>
 800d978:	9b03      	ldr	r3, [sp, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f300 80e1 	bgt.w	800db42 <_dtoa_r+0x632>
 800d980:	d10c      	bne.n	800d99c <_dtoa_r+0x48c>
 800d982:	4b48      	ldr	r3, [pc, #288]	@ (800daa4 <_dtoa_r+0x594>)
 800d984:	2200      	movs	r2, #0
 800d986:	ec51 0b17 	vmov	r0, r1, d7
 800d98a:	f7f2 fe65 	bl	8000658 <__aeabi_dmul>
 800d98e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d992:	f7f3 f8e7 	bl	8000b64 <__aeabi_dcmpge>
 800d996:	2800      	cmp	r0, #0
 800d998:	f000 8266 	beq.w	800de68 <_dtoa_r+0x958>
 800d99c:	2400      	movs	r4, #0
 800d99e:	4625      	mov	r5, r4
 800d9a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9a2:	4656      	mov	r6, sl
 800d9a4:	ea6f 0803 	mvn.w	r8, r3
 800d9a8:	2700      	movs	r7, #0
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	4648      	mov	r0, r9
 800d9ae:	f000 fcbf 	bl	800e330 <_Bfree>
 800d9b2:	2d00      	cmp	r5, #0
 800d9b4:	f000 80bd 	beq.w	800db32 <_dtoa_r+0x622>
 800d9b8:	b12f      	cbz	r7, 800d9c6 <_dtoa_r+0x4b6>
 800d9ba:	42af      	cmp	r7, r5
 800d9bc:	d003      	beq.n	800d9c6 <_dtoa_r+0x4b6>
 800d9be:	4639      	mov	r1, r7
 800d9c0:	4648      	mov	r0, r9
 800d9c2:	f000 fcb5 	bl	800e330 <_Bfree>
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	4648      	mov	r0, r9
 800d9ca:	f000 fcb1 	bl	800e330 <_Bfree>
 800d9ce:	e0b0      	b.n	800db32 <_dtoa_r+0x622>
 800d9d0:	07e2      	lsls	r2, r4, #31
 800d9d2:	d505      	bpl.n	800d9e0 <_dtoa_r+0x4d0>
 800d9d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9d8:	f7f2 fe3e 	bl	8000658 <__aeabi_dmul>
 800d9dc:	3601      	adds	r6, #1
 800d9de:	2301      	movs	r3, #1
 800d9e0:	1064      	asrs	r4, r4, #1
 800d9e2:	3508      	adds	r5, #8
 800d9e4:	e762      	b.n	800d8ac <_dtoa_r+0x39c>
 800d9e6:	2602      	movs	r6, #2
 800d9e8:	e765      	b.n	800d8b6 <_dtoa_r+0x3a6>
 800d9ea:	9c03      	ldr	r4, [sp, #12]
 800d9ec:	46b8      	mov	r8, r7
 800d9ee:	e784      	b.n	800d8fa <_dtoa_r+0x3ea>
 800d9f0:	4b27      	ldr	r3, [pc, #156]	@ (800da90 <_dtoa_r+0x580>)
 800d9f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d9f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9fc:	4454      	add	r4, sl
 800d9fe:	2900      	cmp	r1, #0
 800da00:	d054      	beq.n	800daac <_dtoa_r+0x59c>
 800da02:	4929      	ldr	r1, [pc, #164]	@ (800daa8 <_dtoa_r+0x598>)
 800da04:	2000      	movs	r0, #0
 800da06:	f7f2 ff51 	bl	80008ac <__aeabi_ddiv>
 800da0a:	4633      	mov	r3, r6
 800da0c:	462a      	mov	r2, r5
 800da0e:	f7f2 fc6b 	bl	80002e8 <__aeabi_dsub>
 800da12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da16:	4656      	mov	r6, sl
 800da18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da1c:	f7f3 f8cc 	bl	8000bb8 <__aeabi_d2iz>
 800da20:	4605      	mov	r5, r0
 800da22:	f7f2 fdaf 	bl	8000584 <__aeabi_i2d>
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da2e:	f7f2 fc5b 	bl	80002e8 <__aeabi_dsub>
 800da32:	3530      	adds	r5, #48	@ 0x30
 800da34:	4602      	mov	r2, r0
 800da36:	460b      	mov	r3, r1
 800da38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da3c:	f806 5b01 	strb.w	r5, [r6], #1
 800da40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da44:	f7f3 f87a 	bl	8000b3c <__aeabi_dcmplt>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d172      	bne.n	800db32 <_dtoa_r+0x622>
 800da4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da50:	4911      	ldr	r1, [pc, #68]	@ (800da98 <_dtoa_r+0x588>)
 800da52:	2000      	movs	r0, #0
 800da54:	f7f2 fc48 	bl	80002e8 <__aeabi_dsub>
 800da58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da5c:	f7f3 f86e 	bl	8000b3c <__aeabi_dcmplt>
 800da60:	2800      	cmp	r0, #0
 800da62:	f040 80b4 	bne.w	800dbce <_dtoa_r+0x6be>
 800da66:	42a6      	cmp	r6, r4
 800da68:	f43f af70 	beq.w	800d94c <_dtoa_r+0x43c>
 800da6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800da70:	4b0a      	ldr	r3, [pc, #40]	@ (800da9c <_dtoa_r+0x58c>)
 800da72:	2200      	movs	r2, #0
 800da74:	f7f2 fdf0 	bl	8000658 <__aeabi_dmul>
 800da78:	4b08      	ldr	r3, [pc, #32]	@ (800da9c <_dtoa_r+0x58c>)
 800da7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da7e:	2200      	movs	r2, #0
 800da80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da84:	f7f2 fde8 	bl	8000658 <__aeabi_dmul>
 800da88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da8c:	e7c4      	b.n	800da18 <_dtoa_r+0x508>
 800da8e:	bf00      	nop
 800da90:	08012b00 	.word	0x08012b00
 800da94:	08012ad8 	.word	0x08012ad8
 800da98:	3ff00000 	.word	0x3ff00000
 800da9c:	40240000 	.word	0x40240000
 800daa0:	401c0000 	.word	0x401c0000
 800daa4:	40140000 	.word	0x40140000
 800daa8:	3fe00000 	.word	0x3fe00000
 800daac:	4631      	mov	r1, r6
 800daae:	4628      	mov	r0, r5
 800dab0:	f7f2 fdd2 	bl	8000658 <__aeabi_dmul>
 800dab4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dab8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800daba:	4656      	mov	r6, sl
 800dabc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dac0:	f7f3 f87a 	bl	8000bb8 <__aeabi_d2iz>
 800dac4:	4605      	mov	r5, r0
 800dac6:	f7f2 fd5d 	bl	8000584 <__aeabi_i2d>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dad2:	f7f2 fc09 	bl	80002e8 <__aeabi_dsub>
 800dad6:	3530      	adds	r5, #48	@ 0x30
 800dad8:	f806 5b01 	strb.w	r5, [r6], #1
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	42a6      	cmp	r6, r4
 800dae2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dae6:	f04f 0200 	mov.w	r2, #0
 800daea:	d124      	bne.n	800db36 <_dtoa_r+0x626>
 800daec:	4baf      	ldr	r3, [pc, #700]	@ (800ddac <_dtoa_r+0x89c>)
 800daee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800daf2:	f7f2 fbfb 	bl	80002ec <__adddf3>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dafe:	f7f3 f83b 	bl	8000b78 <__aeabi_dcmpgt>
 800db02:	2800      	cmp	r0, #0
 800db04:	d163      	bne.n	800dbce <_dtoa_r+0x6be>
 800db06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800db0a:	49a8      	ldr	r1, [pc, #672]	@ (800ddac <_dtoa_r+0x89c>)
 800db0c:	2000      	movs	r0, #0
 800db0e:	f7f2 fbeb 	bl	80002e8 <__aeabi_dsub>
 800db12:	4602      	mov	r2, r0
 800db14:	460b      	mov	r3, r1
 800db16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db1a:	f7f3 f80f 	bl	8000b3c <__aeabi_dcmplt>
 800db1e:	2800      	cmp	r0, #0
 800db20:	f43f af14 	beq.w	800d94c <_dtoa_r+0x43c>
 800db24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800db26:	1e73      	subs	r3, r6, #1
 800db28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db2e:	2b30      	cmp	r3, #48	@ 0x30
 800db30:	d0f8      	beq.n	800db24 <_dtoa_r+0x614>
 800db32:	4647      	mov	r7, r8
 800db34:	e03b      	b.n	800dbae <_dtoa_r+0x69e>
 800db36:	4b9e      	ldr	r3, [pc, #632]	@ (800ddb0 <_dtoa_r+0x8a0>)
 800db38:	f7f2 fd8e 	bl	8000658 <__aeabi_dmul>
 800db3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db40:	e7bc      	b.n	800dabc <_dtoa_r+0x5ac>
 800db42:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800db46:	4656      	mov	r6, sl
 800db48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db4c:	4620      	mov	r0, r4
 800db4e:	4629      	mov	r1, r5
 800db50:	f7f2 feac 	bl	80008ac <__aeabi_ddiv>
 800db54:	f7f3 f830 	bl	8000bb8 <__aeabi_d2iz>
 800db58:	4680      	mov	r8, r0
 800db5a:	f7f2 fd13 	bl	8000584 <__aeabi_i2d>
 800db5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db62:	f7f2 fd79 	bl	8000658 <__aeabi_dmul>
 800db66:	4602      	mov	r2, r0
 800db68:	460b      	mov	r3, r1
 800db6a:	4620      	mov	r0, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800db72:	f7f2 fbb9 	bl	80002e8 <__aeabi_dsub>
 800db76:	f806 4b01 	strb.w	r4, [r6], #1
 800db7a:	9d03      	ldr	r5, [sp, #12]
 800db7c:	eba6 040a 	sub.w	r4, r6, sl
 800db80:	42a5      	cmp	r5, r4
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	d133      	bne.n	800dbf0 <_dtoa_r+0x6e0>
 800db88:	f7f2 fbb0 	bl	80002ec <__adddf3>
 800db8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db90:	4604      	mov	r4, r0
 800db92:	460d      	mov	r5, r1
 800db94:	f7f2 fff0 	bl	8000b78 <__aeabi_dcmpgt>
 800db98:	b9c0      	cbnz	r0, 800dbcc <_dtoa_r+0x6bc>
 800db9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db9e:	4620      	mov	r0, r4
 800dba0:	4629      	mov	r1, r5
 800dba2:	f7f2 ffc1 	bl	8000b28 <__aeabi_dcmpeq>
 800dba6:	b110      	cbz	r0, 800dbae <_dtoa_r+0x69e>
 800dba8:	f018 0f01 	tst.w	r8, #1
 800dbac:	d10e      	bne.n	800dbcc <_dtoa_r+0x6bc>
 800dbae:	9902      	ldr	r1, [sp, #8]
 800dbb0:	4648      	mov	r0, r9
 800dbb2:	f000 fbbd 	bl	800e330 <_Bfree>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	7033      	strb	r3, [r6, #0]
 800dbba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbbc:	3701      	adds	r7, #1
 800dbbe:	601f      	str	r7, [r3, #0]
 800dbc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f000 824b 	beq.w	800e05e <_dtoa_r+0xb4e>
 800dbc8:	601e      	str	r6, [r3, #0]
 800dbca:	e248      	b.n	800e05e <_dtoa_r+0xb4e>
 800dbcc:	46b8      	mov	r8, r7
 800dbce:	4633      	mov	r3, r6
 800dbd0:	461e      	mov	r6, r3
 800dbd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbd6:	2a39      	cmp	r2, #57	@ 0x39
 800dbd8:	d106      	bne.n	800dbe8 <_dtoa_r+0x6d8>
 800dbda:	459a      	cmp	sl, r3
 800dbdc:	d1f8      	bne.n	800dbd0 <_dtoa_r+0x6c0>
 800dbde:	2230      	movs	r2, #48	@ 0x30
 800dbe0:	f108 0801 	add.w	r8, r8, #1
 800dbe4:	f88a 2000 	strb.w	r2, [sl]
 800dbe8:	781a      	ldrb	r2, [r3, #0]
 800dbea:	3201      	adds	r2, #1
 800dbec:	701a      	strb	r2, [r3, #0]
 800dbee:	e7a0      	b.n	800db32 <_dtoa_r+0x622>
 800dbf0:	4b6f      	ldr	r3, [pc, #444]	@ (800ddb0 <_dtoa_r+0x8a0>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f7f2 fd30 	bl	8000658 <__aeabi_dmul>
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	460d      	mov	r5, r1
 800dc00:	f7f2 ff92 	bl	8000b28 <__aeabi_dcmpeq>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	d09f      	beq.n	800db48 <_dtoa_r+0x638>
 800dc08:	e7d1      	b.n	800dbae <_dtoa_r+0x69e>
 800dc0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc0c:	2a00      	cmp	r2, #0
 800dc0e:	f000 80ea 	beq.w	800dde6 <_dtoa_r+0x8d6>
 800dc12:	9a07      	ldr	r2, [sp, #28]
 800dc14:	2a01      	cmp	r2, #1
 800dc16:	f300 80cd 	bgt.w	800ddb4 <_dtoa_r+0x8a4>
 800dc1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dc1c:	2a00      	cmp	r2, #0
 800dc1e:	f000 80c1 	beq.w	800dda4 <_dtoa_r+0x894>
 800dc22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dc26:	9c08      	ldr	r4, [sp, #32]
 800dc28:	9e00      	ldr	r6, [sp, #0]
 800dc2a:	9a00      	ldr	r2, [sp, #0]
 800dc2c:	441a      	add	r2, r3
 800dc2e:	9200      	str	r2, [sp, #0]
 800dc30:	9a06      	ldr	r2, [sp, #24]
 800dc32:	2101      	movs	r1, #1
 800dc34:	441a      	add	r2, r3
 800dc36:	4648      	mov	r0, r9
 800dc38:	9206      	str	r2, [sp, #24]
 800dc3a:	f000 fc77 	bl	800e52c <__i2b>
 800dc3e:	4605      	mov	r5, r0
 800dc40:	b166      	cbz	r6, 800dc5c <_dtoa_r+0x74c>
 800dc42:	9b06      	ldr	r3, [sp, #24]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	dd09      	ble.n	800dc5c <_dtoa_r+0x74c>
 800dc48:	42b3      	cmp	r3, r6
 800dc4a:	9a00      	ldr	r2, [sp, #0]
 800dc4c:	bfa8      	it	ge
 800dc4e:	4633      	movge	r3, r6
 800dc50:	1ad2      	subs	r2, r2, r3
 800dc52:	9200      	str	r2, [sp, #0]
 800dc54:	9a06      	ldr	r2, [sp, #24]
 800dc56:	1af6      	subs	r6, r6, r3
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	9306      	str	r3, [sp, #24]
 800dc5c:	9b08      	ldr	r3, [sp, #32]
 800dc5e:	b30b      	cbz	r3, 800dca4 <_dtoa_r+0x794>
 800dc60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f000 80c6 	beq.w	800ddf4 <_dtoa_r+0x8e4>
 800dc68:	2c00      	cmp	r4, #0
 800dc6a:	f000 80c0 	beq.w	800ddee <_dtoa_r+0x8de>
 800dc6e:	4629      	mov	r1, r5
 800dc70:	4622      	mov	r2, r4
 800dc72:	4648      	mov	r0, r9
 800dc74:	f000 fd12 	bl	800e69c <__pow5mult>
 800dc78:	9a02      	ldr	r2, [sp, #8]
 800dc7a:	4601      	mov	r1, r0
 800dc7c:	4605      	mov	r5, r0
 800dc7e:	4648      	mov	r0, r9
 800dc80:	f000 fc6a 	bl	800e558 <__multiply>
 800dc84:	9902      	ldr	r1, [sp, #8]
 800dc86:	4680      	mov	r8, r0
 800dc88:	4648      	mov	r0, r9
 800dc8a:	f000 fb51 	bl	800e330 <_Bfree>
 800dc8e:	9b08      	ldr	r3, [sp, #32]
 800dc90:	1b1b      	subs	r3, r3, r4
 800dc92:	9308      	str	r3, [sp, #32]
 800dc94:	f000 80b1 	beq.w	800ddfa <_dtoa_r+0x8ea>
 800dc98:	9a08      	ldr	r2, [sp, #32]
 800dc9a:	4641      	mov	r1, r8
 800dc9c:	4648      	mov	r0, r9
 800dc9e:	f000 fcfd 	bl	800e69c <__pow5mult>
 800dca2:	9002      	str	r0, [sp, #8]
 800dca4:	2101      	movs	r1, #1
 800dca6:	4648      	mov	r0, r9
 800dca8:	f000 fc40 	bl	800e52c <__i2b>
 800dcac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcae:	4604      	mov	r4, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f000 81d8 	beq.w	800e066 <_dtoa_r+0xb56>
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	4601      	mov	r1, r0
 800dcba:	4648      	mov	r0, r9
 800dcbc:	f000 fcee 	bl	800e69c <__pow5mult>
 800dcc0:	9b07      	ldr	r3, [sp, #28]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	f300 809f 	bgt.w	800de08 <_dtoa_r+0x8f8>
 800dcca:	9b04      	ldr	r3, [sp, #16]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	f040 8097 	bne.w	800de00 <_dtoa_r+0x8f0>
 800dcd2:	9b05      	ldr	r3, [sp, #20]
 800dcd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	f040 8093 	bne.w	800de04 <_dtoa_r+0x8f4>
 800dcde:	9b05      	ldr	r3, [sp, #20]
 800dce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dce4:	0d1b      	lsrs	r3, r3, #20
 800dce6:	051b      	lsls	r3, r3, #20
 800dce8:	b133      	cbz	r3, 800dcf8 <_dtoa_r+0x7e8>
 800dcea:	9b00      	ldr	r3, [sp, #0]
 800dcec:	3301      	adds	r3, #1
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	9b06      	ldr	r3, [sp, #24]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	9306      	str	r3, [sp, #24]
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	9308      	str	r3, [sp, #32]
 800dcfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f000 81b8 	beq.w	800e072 <_dtoa_r+0xb62>
 800dd02:	6923      	ldr	r3, [r4, #16]
 800dd04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd08:	6918      	ldr	r0, [r3, #16]
 800dd0a:	f000 fbc3 	bl	800e494 <__hi0bits>
 800dd0e:	f1c0 0020 	rsb	r0, r0, #32
 800dd12:	9b06      	ldr	r3, [sp, #24]
 800dd14:	4418      	add	r0, r3
 800dd16:	f010 001f 	ands.w	r0, r0, #31
 800dd1a:	f000 8082 	beq.w	800de22 <_dtoa_r+0x912>
 800dd1e:	f1c0 0320 	rsb	r3, r0, #32
 800dd22:	2b04      	cmp	r3, #4
 800dd24:	dd73      	ble.n	800de0e <_dtoa_r+0x8fe>
 800dd26:	9b00      	ldr	r3, [sp, #0]
 800dd28:	f1c0 001c 	rsb	r0, r0, #28
 800dd2c:	4403      	add	r3, r0
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	9b06      	ldr	r3, [sp, #24]
 800dd32:	4403      	add	r3, r0
 800dd34:	4406      	add	r6, r0
 800dd36:	9306      	str	r3, [sp, #24]
 800dd38:	9b00      	ldr	r3, [sp, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dd05      	ble.n	800dd4a <_dtoa_r+0x83a>
 800dd3e:	9902      	ldr	r1, [sp, #8]
 800dd40:	461a      	mov	r2, r3
 800dd42:	4648      	mov	r0, r9
 800dd44:	f000 fd04 	bl	800e750 <__lshift>
 800dd48:	9002      	str	r0, [sp, #8]
 800dd4a:	9b06      	ldr	r3, [sp, #24]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	dd05      	ble.n	800dd5c <_dtoa_r+0x84c>
 800dd50:	4621      	mov	r1, r4
 800dd52:	461a      	mov	r2, r3
 800dd54:	4648      	mov	r0, r9
 800dd56:	f000 fcfb 	bl	800e750 <__lshift>
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d061      	beq.n	800de26 <_dtoa_r+0x916>
 800dd62:	9802      	ldr	r0, [sp, #8]
 800dd64:	4621      	mov	r1, r4
 800dd66:	f000 fd5f 	bl	800e828 <__mcmp>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	da5b      	bge.n	800de26 <_dtoa_r+0x916>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	9902      	ldr	r1, [sp, #8]
 800dd72:	220a      	movs	r2, #10
 800dd74:	4648      	mov	r0, r9
 800dd76:	f000 fafd 	bl	800e374 <__multadd>
 800dd7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd7c:	9002      	str	r0, [sp, #8]
 800dd7e:	f107 38ff 	add.w	r8, r7, #4294967295
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f000 8177 	beq.w	800e076 <_dtoa_r+0xb66>
 800dd88:	4629      	mov	r1, r5
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	220a      	movs	r2, #10
 800dd8e:	4648      	mov	r0, r9
 800dd90:	f000 faf0 	bl	800e374 <__multadd>
 800dd94:	f1bb 0f00 	cmp.w	fp, #0
 800dd98:	4605      	mov	r5, r0
 800dd9a:	dc6f      	bgt.n	800de7c <_dtoa_r+0x96c>
 800dd9c:	9b07      	ldr	r3, [sp, #28]
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	dc49      	bgt.n	800de36 <_dtoa_r+0x926>
 800dda2:	e06b      	b.n	800de7c <_dtoa_r+0x96c>
 800dda4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dda6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ddaa:	e73c      	b.n	800dc26 <_dtoa_r+0x716>
 800ddac:	3fe00000 	.word	0x3fe00000
 800ddb0:	40240000 	.word	0x40240000
 800ddb4:	9b03      	ldr	r3, [sp, #12]
 800ddb6:	1e5c      	subs	r4, r3, #1
 800ddb8:	9b08      	ldr	r3, [sp, #32]
 800ddba:	42a3      	cmp	r3, r4
 800ddbc:	db09      	blt.n	800ddd2 <_dtoa_r+0x8c2>
 800ddbe:	1b1c      	subs	r4, r3, r4
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f6bf af30 	bge.w	800dc28 <_dtoa_r+0x718>
 800ddc8:	9b00      	ldr	r3, [sp, #0]
 800ddca:	9a03      	ldr	r2, [sp, #12]
 800ddcc:	1a9e      	subs	r6, r3, r2
 800ddce:	2300      	movs	r3, #0
 800ddd0:	e72b      	b.n	800dc2a <_dtoa_r+0x71a>
 800ddd2:	9b08      	ldr	r3, [sp, #32]
 800ddd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ddd6:	9408      	str	r4, [sp, #32]
 800ddd8:	1ae3      	subs	r3, r4, r3
 800ddda:	441a      	add	r2, r3
 800dddc:	9e00      	ldr	r6, [sp, #0]
 800ddde:	9b03      	ldr	r3, [sp, #12]
 800dde0:	920d      	str	r2, [sp, #52]	@ 0x34
 800dde2:	2400      	movs	r4, #0
 800dde4:	e721      	b.n	800dc2a <_dtoa_r+0x71a>
 800dde6:	9c08      	ldr	r4, [sp, #32]
 800dde8:	9e00      	ldr	r6, [sp, #0]
 800ddea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ddec:	e728      	b.n	800dc40 <_dtoa_r+0x730>
 800ddee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ddf2:	e751      	b.n	800dc98 <_dtoa_r+0x788>
 800ddf4:	9a08      	ldr	r2, [sp, #32]
 800ddf6:	9902      	ldr	r1, [sp, #8]
 800ddf8:	e750      	b.n	800dc9c <_dtoa_r+0x78c>
 800ddfa:	f8cd 8008 	str.w	r8, [sp, #8]
 800ddfe:	e751      	b.n	800dca4 <_dtoa_r+0x794>
 800de00:	2300      	movs	r3, #0
 800de02:	e779      	b.n	800dcf8 <_dtoa_r+0x7e8>
 800de04:	9b04      	ldr	r3, [sp, #16]
 800de06:	e777      	b.n	800dcf8 <_dtoa_r+0x7e8>
 800de08:	2300      	movs	r3, #0
 800de0a:	9308      	str	r3, [sp, #32]
 800de0c:	e779      	b.n	800dd02 <_dtoa_r+0x7f2>
 800de0e:	d093      	beq.n	800dd38 <_dtoa_r+0x828>
 800de10:	9a00      	ldr	r2, [sp, #0]
 800de12:	331c      	adds	r3, #28
 800de14:	441a      	add	r2, r3
 800de16:	9200      	str	r2, [sp, #0]
 800de18:	9a06      	ldr	r2, [sp, #24]
 800de1a:	441a      	add	r2, r3
 800de1c:	441e      	add	r6, r3
 800de1e:	9206      	str	r2, [sp, #24]
 800de20:	e78a      	b.n	800dd38 <_dtoa_r+0x828>
 800de22:	4603      	mov	r3, r0
 800de24:	e7f4      	b.n	800de10 <_dtoa_r+0x900>
 800de26:	9b03      	ldr	r3, [sp, #12]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	46b8      	mov	r8, r7
 800de2c:	dc20      	bgt.n	800de70 <_dtoa_r+0x960>
 800de2e:	469b      	mov	fp, r3
 800de30:	9b07      	ldr	r3, [sp, #28]
 800de32:	2b02      	cmp	r3, #2
 800de34:	dd1e      	ble.n	800de74 <_dtoa_r+0x964>
 800de36:	f1bb 0f00 	cmp.w	fp, #0
 800de3a:	f47f adb1 	bne.w	800d9a0 <_dtoa_r+0x490>
 800de3e:	4621      	mov	r1, r4
 800de40:	465b      	mov	r3, fp
 800de42:	2205      	movs	r2, #5
 800de44:	4648      	mov	r0, r9
 800de46:	f000 fa95 	bl	800e374 <__multadd>
 800de4a:	4601      	mov	r1, r0
 800de4c:	4604      	mov	r4, r0
 800de4e:	9802      	ldr	r0, [sp, #8]
 800de50:	f000 fcea 	bl	800e828 <__mcmp>
 800de54:	2800      	cmp	r0, #0
 800de56:	f77f ada3 	ble.w	800d9a0 <_dtoa_r+0x490>
 800de5a:	4656      	mov	r6, sl
 800de5c:	2331      	movs	r3, #49	@ 0x31
 800de5e:	f806 3b01 	strb.w	r3, [r6], #1
 800de62:	f108 0801 	add.w	r8, r8, #1
 800de66:	e59f      	b.n	800d9a8 <_dtoa_r+0x498>
 800de68:	9c03      	ldr	r4, [sp, #12]
 800de6a:	46b8      	mov	r8, r7
 800de6c:	4625      	mov	r5, r4
 800de6e:	e7f4      	b.n	800de5a <_dtoa_r+0x94a>
 800de70:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800de74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de76:	2b00      	cmp	r3, #0
 800de78:	f000 8101 	beq.w	800e07e <_dtoa_r+0xb6e>
 800de7c:	2e00      	cmp	r6, #0
 800de7e:	dd05      	ble.n	800de8c <_dtoa_r+0x97c>
 800de80:	4629      	mov	r1, r5
 800de82:	4632      	mov	r2, r6
 800de84:	4648      	mov	r0, r9
 800de86:	f000 fc63 	bl	800e750 <__lshift>
 800de8a:	4605      	mov	r5, r0
 800de8c:	9b08      	ldr	r3, [sp, #32]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d05c      	beq.n	800df4c <_dtoa_r+0xa3c>
 800de92:	6869      	ldr	r1, [r5, #4]
 800de94:	4648      	mov	r0, r9
 800de96:	f000 fa0b 	bl	800e2b0 <_Balloc>
 800de9a:	4606      	mov	r6, r0
 800de9c:	b928      	cbnz	r0, 800deaa <_dtoa_r+0x99a>
 800de9e:	4b82      	ldr	r3, [pc, #520]	@ (800e0a8 <_dtoa_r+0xb98>)
 800dea0:	4602      	mov	r2, r0
 800dea2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dea6:	f7ff bb4a 	b.w	800d53e <_dtoa_r+0x2e>
 800deaa:	692a      	ldr	r2, [r5, #16]
 800deac:	3202      	adds	r2, #2
 800deae:	0092      	lsls	r2, r2, #2
 800deb0:	f105 010c 	add.w	r1, r5, #12
 800deb4:	300c      	adds	r0, #12
 800deb6:	f002 f959 	bl	801016c <memcpy>
 800deba:	2201      	movs	r2, #1
 800debc:	4631      	mov	r1, r6
 800debe:	4648      	mov	r0, r9
 800dec0:	f000 fc46 	bl	800e750 <__lshift>
 800dec4:	f10a 0301 	add.w	r3, sl, #1
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	eb0a 030b 	add.w	r3, sl, fp
 800dece:	9308      	str	r3, [sp, #32]
 800ded0:	9b04      	ldr	r3, [sp, #16]
 800ded2:	f003 0301 	and.w	r3, r3, #1
 800ded6:	462f      	mov	r7, r5
 800ded8:	9306      	str	r3, [sp, #24]
 800deda:	4605      	mov	r5, r0
 800dedc:	9b00      	ldr	r3, [sp, #0]
 800dede:	9802      	ldr	r0, [sp, #8]
 800dee0:	4621      	mov	r1, r4
 800dee2:	f103 3bff 	add.w	fp, r3, #4294967295
 800dee6:	f7ff fa89 	bl	800d3fc <quorem>
 800deea:	4603      	mov	r3, r0
 800deec:	3330      	adds	r3, #48	@ 0x30
 800deee:	9003      	str	r0, [sp, #12]
 800def0:	4639      	mov	r1, r7
 800def2:	9802      	ldr	r0, [sp, #8]
 800def4:	9309      	str	r3, [sp, #36]	@ 0x24
 800def6:	f000 fc97 	bl	800e828 <__mcmp>
 800defa:	462a      	mov	r2, r5
 800defc:	9004      	str	r0, [sp, #16]
 800defe:	4621      	mov	r1, r4
 800df00:	4648      	mov	r0, r9
 800df02:	f000 fcad 	bl	800e860 <__mdiff>
 800df06:	68c2      	ldr	r2, [r0, #12]
 800df08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df0a:	4606      	mov	r6, r0
 800df0c:	bb02      	cbnz	r2, 800df50 <_dtoa_r+0xa40>
 800df0e:	4601      	mov	r1, r0
 800df10:	9802      	ldr	r0, [sp, #8]
 800df12:	f000 fc89 	bl	800e828 <__mcmp>
 800df16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df18:	4602      	mov	r2, r0
 800df1a:	4631      	mov	r1, r6
 800df1c:	4648      	mov	r0, r9
 800df1e:	920c      	str	r2, [sp, #48]	@ 0x30
 800df20:	9309      	str	r3, [sp, #36]	@ 0x24
 800df22:	f000 fa05 	bl	800e330 <_Bfree>
 800df26:	9b07      	ldr	r3, [sp, #28]
 800df28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df2a:	9e00      	ldr	r6, [sp, #0]
 800df2c:	ea42 0103 	orr.w	r1, r2, r3
 800df30:	9b06      	ldr	r3, [sp, #24]
 800df32:	4319      	orrs	r1, r3
 800df34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df36:	d10d      	bne.n	800df54 <_dtoa_r+0xa44>
 800df38:	2b39      	cmp	r3, #57	@ 0x39
 800df3a:	d027      	beq.n	800df8c <_dtoa_r+0xa7c>
 800df3c:	9a04      	ldr	r2, [sp, #16]
 800df3e:	2a00      	cmp	r2, #0
 800df40:	dd01      	ble.n	800df46 <_dtoa_r+0xa36>
 800df42:	9b03      	ldr	r3, [sp, #12]
 800df44:	3331      	adds	r3, #49	@ 0x31
 800df46:	f88b 3000 	strb.w	r3, [fp]
 800df4a:	e52e      	b.n	800d9aa <_dtoa_r+0x49a>
 800df4c:	4628      	mov	r0, r5
 800df4e:	e7b9      	b.n	800dec4 <_dtoa_r+0x9b4>
 800df50:	2201      	movs	r2, #1
 800df52:	e7e2      	b.n	800df1a <_dtoa_r+0xa0a>
 800df54:	9904      	ldr	r1, [sp, #16]
 800df56:	2900      	cmp	r1, #0
 800df58:	db04      	blt.n	800df64 <_dtoa_r+0xa54>
 800df5a:	9807      	ldr	r0, [sp, #28]
 800df5c:	4301      	orrs	r1, r0
 800df5e:	9806      	ldr	r0, [sp, #24]
 800df60:	4301      	orrs	r1, r0
 800df62:	d120      	bne.n	800dfa6 <_dtoa_r+0xa96>
 800df64:	2a00      	cmp	r2, #0
 800df66:	ddee      	ble.n	800df46 <_dtoa_r+0xa36>
 800df68:	9902      	ldr	r1, [sp, #8]
 800df6a:	9300      	str	r3, [sp, #0]
 800df6c:	2201      	movs	r2, #1
 800df6e:	4648      	mov	r0, r9
 800df70:	f000 fbee 	bl	800e750 <__lshift>
 800df74:	4621      	mov	r1, r4
 800df76:	9002      	str	r0, [sp, #8]
 800df78:	f000 fc56 	bl	800e828 <__mcmp>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	9b00      	ldr	r3, [sp, #0]
 800df80:	dc02      	bgt.n	800df88 <_dtoa_r+0xa78>
 800df82:	d1e0      	bne.n	800df46 <_dtoa_r+0xa36>
 800df84:	07da      	lsls	r2, r3, #31
 800df86:	d5de      	bpl.n	800df46 <_dtoa_r+0xa36>
 800df88:	2b39      	cmp	r3, #57	@ 0x39
 800df8a:	d1da      	bne.n	800df42 <_dtoa_r+0xa32>
 800df8c:	2339      	movs	r3, #57	@ 0x39
 800df8e:	f88b 3000 	strb.w	r3, [fp]
 800df92:	4633      	mov	r3, r6
 800df94:	461e      	mov	r6, r3
 800df96:	3b01      	subs	r3, #1
 800df98:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800df9c:	2a39      	cmp	r2, #57	@ 0x39
 800df9e:	d04e      	beq.n	800e03e <_dtoa_r+0xb2e>
 800dfa0:	3201      	adds	r2, #1
 800dfa2:	701a      	strb	r2, [r3, #0]
 800dfa4:	e501      	b.n	800d9aa <_dtoa_r+0x49a>
 800dfa6:	2a00      	cmp	r2, #0
 800dfa8:	dd03      	ble.n	800dfb2 <_dtoa_r+0xaa2>
 800dfaa:	2b39      	cmp	r3, #57	@ 0x39
 800dfac:	d0ee      	beq.n	800df8c <_dtoa_r+0xa7c>
 800dfae:	3301      	adds	r3, #1
 800dfb0:	e7c9      	b.n	800df46 <_dtoa_r+0xa36>
 800dfb2:	9a00      	ldr	r2, [sp, #0]
 800dfb4:	9908      	ldr	r1, [sp, #32]
 800dfb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dfba:	428a      	cmp	r2, r1
 800dfbc:	d028      	beq.n	800e010 <_dtoa_r+0xb00>
 800dfbe:	9902      	ldr	r1, [sp, #8]
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	220a      	movs	r2, #10
 800dfc4:	4648      	mov	r0, r9
 800dfc6:	f000 f9d5 	bl	800e374 <__multadd>
 800dfca:	42af      	cmp	r7, r5
 800dfcc:	9002      	str	r0, [sp, #8]
 800dfce:	f04f 0300 	mov.w	r3, #0
 800dfd2:	f04f 020a 	mov.w	r2, #10
 800dfd6:	4639      	mov	r1, r7
 800dfd8:	4648      	mov	r0, r9
 800dfda:	d107      	bne.n	800dfec <_dtoa_r+0xadc>
 800dfdc:	f000 f9ca 	bl	800e374 <__multadd>
 800dfe0:	4607      	mov	r7, r0
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	9b00      	ldr	r3, [sp, #0]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	e777      	b.n	800dedc <_dtoa_r+0x9cc>
 800dfec:	f000 f9c2 	bl	800e374 <__multadd>
 800dff0:	4629      	mov	r1, r5
 800dff2:	4607      	mov	r7, r0
 800dff4:	2300      	movs	r3, #0
 800dff6:	220a      	movs	r2, #10
 800dff8:	4648      	mov	r0, r9
 800dffa:	f000 f9bb 	bl	800e374 <__multadd>
 800dffe:	4605      	mov	r5, r0
 800e000:	e7f0      	b.n	800dfe4 <_dtoa_r+0xad4>
 800e002:	f1bb 0f00 	cmp.w	fp, #0
 800e006:	bfcc      	ite	gt
 800e008:	465e      	movgt	r6, fp
 800e00a:	2601      	movle	r6, #1
 800e00c:	4456      	add	r6, sl
 800e00e:	2700      	movs	r7, #0
 800e010:	9902      	ldr	r1, [sp, #8]
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	2201      	movs	r2, #1
 800e016:	4648      	mov	r0, r9
 800e018:	f000 fb9a 	bl	800e750 <__lshift>
 800e01c:	4621      	mov	r1, r4
 800e01e:	9002      	str	r0, [sp, #8]
 800e020:	f000 fc02 	bl	800e828 <__mcmp>
 800e024:	2800      	cmp	r0, #0
 800e026:	dcb4      	bgt.n	800df92 <_dtoa_r+0xa82>
 800e028:	d102      	bne.n	800e030 <_dtoa_r+0xb20>
 800e02a:	9b00      	ldr	r3, [sp, #0]
 800e02c:	07db      	lsls	r3, r3, #31
 800e02e:	d4b0      	bmi.n	800df92 <_dtoa_r+0xa82>
 800e030:	4633      	mov	r3, r6
 800e032:	461e      	mov	r6, r3
 800e034:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e038:	2a30      	cmp	r2, #48	@ 0x30
 800e03a:	d0fa      	beq.n	800e032 <_dtoa_r+0xb22>
 800e03c:	e4b5      	b.n	800d9aa <_dtoa_r+0x49a>
 800e03e:	459a      	cmp	sl, r3
 800e040:	d1a8      	bne.n	800df94 <_dtoa_r+0xa84>
 800e042:	2331      	movs	r3, #49	@ 0x31
 800e044:	f108 0801 	add.w	r8, r8, #1
 800e048:	f88a 3000 	strb.w	r3, [sl]
 800e04c:	e4ad      	b.n	800d9aa <_dtoa_r+0x49a>
 800e04e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e050:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e0ac <_dtoa_r+0xb9c>
 800e054:	b11b      	cbz	r3, 800e05e <_dtoa_r+0xb4e>
 800e056:	f10a 0308 	add.w	r3, sl, #8
 800e05a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e05c:	6013      	str	r3, [r2, #0]
 800e05e:	4650      	mov	r0, sl
 800e060:	b017      	add	sp, #92	@ 0x5c
 800e062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e066:	9b07      	ldr	r3, [sp, #28]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	f77f ae2e 	ble.w	800dcca <_dtoa_r+0x7ba>
 800e06e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e070:	9308      	str	r3, [sp, #32]
 800e072:	2001      	movs	r0, #1
 800e074:	e64d      	b.n	800dd12 <_dtoa_r+0x802>
 800e076:	f1bb 0f00 	cmp.w	fp, #0
 800e07a:	f77f aed9 	ble.w	800de30 <_dtoa_r+0x920>
 800e07e:	4656      	mov	r6, sl
 800e080:	9802      	ldr	r0, [sp, #8]
 800e082:	4621      	mov	r1, r4
 800e084:	f7ff f9ba 	bl	800d3fc <quorem>
 800e088:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e08c:	f806 3b01 	strb.w	r3, [r6], #1
 800e090:	eba6 020a 	sub.w	r2, r6, sl
 800e094:	4593      	cmp	fp, r2
 800e096:	ddb4      	ble.n	800e002 <_dtoa_r+0xaf2>
 800e098:	9902      	ldr	r1, [sp, #8]
 800e09a:	2300      	movs	r3, #0
 800e09c:	220a      	movs	r2, #10
 800e09e:	4648      	mov	r0, r9
 800e0a0:	f000 f968 	bl	800e374 <__multadd>
 800e0a4:	9002      	str	r0, [sp, #8]
 800e0a6:	e7eb      	b.n	800e080 <_dtoa_r+0xb70>
 800e0a8:	080129e0 	.word	0x080129e0
 800e0ac:	0801297b 	.word	0x0801297b

0800e0b0 <_free_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	2900      	cmp	r1, #0
 800e0b6:	d041      	beq.n	800e13c <_free_r+0x8c>
 800e0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0bc:	1f0c      	subs	r4, r1, #4
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	bfb8      	it	lt
 800e0c2:	18e4      	addlt	r4, r4, r3
 800e0c4:	f000 f8e8 	bl	800e298 <__malloc_lock>
 800e0c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e140 <_free_r+0x90>)
 800e0ca:	6813      	ldr	r3, [r2, #0]
 800e0cc:	b933      	cbnz	r3, 800e0dc <_free_r+0x2c>
 800e0ce:	6063      	str	r3, [r4, #4]
 800e0d0:	6014      	str	r4, [r2, #0]
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0d8:	f000 b8e4 	b.w	800e2a4 <__malloc_unlock>
 800e0dc:	42a3      	cmp	r3, r4
 800e0de:	d908      	bls.n	800e0f2 <_free_r+0x42>
 800e0e0:	6820      	ldr	r0, [r4, #0]
 800e0e2:	1821      	adds	r1, r4, r0
 800e0e4:	428b      	cmp	r3, r1
 800e0e6:	bf01      	itttt	eq
 800e0e8:	6819      	ldreq	r1, [r3, #0]
 800e0ea:	685b      	ldreq	r3, [r3, #4]
 800e0ec:	1809      	addeq	r1, r1, r0
 800e0ee:	6021      	streq	r1, [r4, #0]
 800e0f0:	e7ed      	b.n	800e0ce <_free_r+0x1e>
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	b10b      	cbz	r3, 800e0fc <_free_r+0x4c>
 800e0f8:	42a3      	cmp	r3, r4
 800e0fa:	d9fa      	bls.n	800e0f2 <_free_r+0x42>
 800e0fc:	6811      	ldr	r1, [r2, #0]
 800e0fe:	1850      	adds	r0, r2, r1
 800e100:	42a0      	cmp	r0, r4
 800e102:	d10b      	bne.n	800e11c <_free_r+0x6c>
 800e104:	6820      	ldr	r0, [r4, #0]
 800e106:	4401      	add	r1, r0
 800e108:	1850      	adds	r0, r2, r1
 800e10a:	4283      	cmp	r3, r0
 800e10c:	6011      	str	r1, [r2, #0]
 800e10e:	d1e0      	bne.n	800e0d2 <_free_r+0x22>
 800e110:	6818      	ldr	r0, [r3, #0]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	6053      	str	r3, [r2, #4]
 800e116:	4408      	add	r0, r1
 800e118:	6010      	str	r0, [r2, #0]
 800e11a:	e7da      	b.n	800e0d2 <_free_r+0x22>
 800e11c:	d902      	bls.n	800e124 <_free_r+0x74>
 800e11e:	230c      	movs	r3, #12
 800e120:	602b      	str	r3, [r5, #0]
 800e122:	e7d6      	b.n	800e0d2 <_free_r+0x22>
 800e124:	6820      	ldr	r0, [r4, #0]
 800e126:	1821      	adds	r1, r4, r0
 800e128:	428b      	cmp	r3, r1
 800e12a:	bf04      	itt	eq
 800e12c:	6819      	ldreq	r1, [r3, #0]
 800e12e:	685b      	ldreq	r3, [r3, #4]
 800e130:	6063      	str	r3, [r4, #4]
 800e132:	bf04      	itt	eq
 800e134:	1809      	addeq	r1, r1, r0
 800e136:	6021      	streq	r1, [r4, #0]
 800e138:	6054      	str	r4, [r2, #4]
 800e13a:	e7ca      	b.n	800e0d2 <_free_r+0x22>
 800e13c:	bd38      	pop	{r3, r4, r5, pc}
 800e13e:	bf00      	nop
 800e140:	20001238 	.word	0x20001238

0800e144 <malloc>:
 800e144:	4b02      	ldr	r3, [pc, #8]	@ (800e150 <malloc+0xc>)
 800e146:	4601      	mov	r1, r0
 800e148:	6818      	ldr	r0, [r3, #0]
 800e14a:	f000 b825 	b.w	800e198 <_malloc_r>
 800e14e:	bf00      	nop
 800e150:	20000040 	.word	0x20000040

0800e154 <sbrk_aligned>:
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	4e0f      	ldr	r6, [pc, #60]	@ (800e194 <sbrk_aligned+0x40>)
 800e158:	460c      	mov	r4, r1
 800e15a:	6831      	ldr	r1, [r6, #0]
 800e15c:	4605      	mov	r5, r0
 800e15e:	b911      	cbnz	r1, 800e166 <sbrk_aligned+0x12>
 800e160:	f001 fff4 	bl	801014c <_sbrk_r>
 800e164:	6030      	str	r0, [r6, #0]
 800e166:	4621      	mov	r1, r4
 800e168:	4628      	mov	r0, r5
 800e16a:	f001 ffef 	bl	801014c <_sbrk_r>
 800e16e:	1c43      	adds	r3, r0, #1
 800e170:	d103      	bne.n	800e17a <sbrk_aligned+0x26>
 800e172:	f04f 34ff 	mov.w	r4, #4294967295
 800e176:	4620      	mov	r0, r4
 800e178:	bd70      	pop	{r4, r5, r6, pc}
 800e17a:	1cc4      	adds	r4, r0, #3
 800e17c:	f024 0403 	bic.w	r4, r4, #3
 800e180:	42a0      	cmp	r0, r4
 800e182:	d0f8      	beq.n	800e176 <sbrk_aligned+0x22>
 800e184:	1a21      	subs	r1, r4, r0
 800e186:	4628      	mov	r0, r5
 800e188:	f001 ffe0 	bl	801014c <_sbrk_r>
 800e18c:	3001      	adds	r0, #1
 800e18e:	d1f2      	bne.n	800e176 <sbrk_aligned+0x22>
 800e190:	e7ef      	b.n	800e172 <sbrk_aligned+0x1e>
 800e192:	bf00      	nop
 800e194:	20001234 	.word	0x20001234

0800e198 <_malloc_r>:
 800e198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e19c:	1ccd      	adds	r5, r1, #3
 800e19e:	f025 0503 	bic.w	r5, r5, #3
 800e1a2:	3508      	adds	r5, #8
 800e1a4:	2d0c      	cmp	r5, #12
 800e1a6:	bf38      	it	cc
 800e1a8:	250c      	movcc	r5, #12
 800e1aa:	2d00      	cmp	r5, #0
 800e1ac:	4606      	mov	r6, r0
 800e1ae:	db01      	blt.n	800e1b4 <_malloc_r+0x1c>
 800e1b0:	42a9      	cmp	r1, r5
 800e1b2:	d904      	bls.n	800e1be <_malloc_r+0x26>
 800e1b4:	230c      	movs	r3, #12
 800e1b6:	6033      	str	r3, [r6, #0]
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e294 <_malloc_r+0xfc>
 800e1c2:	f000 f869 	bl	800e298 <__malloc_lock>
 800e1c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e1ca:	461c      	mov	r4, r3
 800e1cc:	bb44      	cbnz	r4, 800e220 <_malloc_r+0x88>
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f7ff ffbf 	bl	800e154 <sbrk_aligned>
 800e1d6:	1c43      	adds	r3, r0, #1
 800e1d8:	4604      	mov	r4, r0
 800e1da:	d158      	bne.n	800e28e <_malloc_r+0xf6>
 800e1dc:	f8d8 4000 	ldr.w	r4, [r8]
 800e1e0:	4627      	mov	r7, r4
 800e1e2:	2f00      	cmp	r7, #0
 800e1e4:	d143      	bne.n	800e26e <_malloc_r+0xd6>
 800e1e6:	2c00      	cmp	r4, #0
 800e1e8:	d04b      	beq.n	800e282 <_malloc_r+0xea>
 800e1ea:	6823      	ldr	r3, [r4, #0]
 800e1ec:	4639      	mov	r1, r7
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	eb04 0903 	add.w	r9, r4, r3
 800e1f4:	f001 ffaa 	bl	801014c <_sbrk_r>
 800e1f8:	4581      	cmp	r9, r0
 800e1fa:	d142      	bne.n	800e282 <_malloc_r+0xea>
 800e1fc:	6821      	ldr	r1, [r4, #0]
 800e1fe:	1a6d      	subs	r5, r5, r1
 800e200:	4629      	mov	r1, r5
 800e202:	4630      	mov	r0, r6
 800e204:	f7ff ffa6 	bl	800e154 <sbrk_aligned>
 800e208:	3001      	adds	r0, #1
 800e20a:	d03a      	beq.n	800e282 <_malloc_r+0xea>
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	442b      	add	r3, r5
 800e210:	6023      	str	r3, [r4, #0]
 800e212:	f8d8 3000 	ldr.w	r3, [r8]
 800e216:	685a      	ldr	r2, [r3, #4]
 800e218:	bb62      	cbnz	r2, 800e274 <_malloc_r+0xdc>
 800e21a:	f8c8 7000 	str.w	r7, [r8]
 800e21e:	e00f      	b.n	800e240 <_malloc_r+0xa8>
 800e220:	6822      	ldr	r2, [r4, #0]
 800e222:	1b52      	subs	r2, r2, r5
 800e224:	d420      	bmi.n	800e268 <_malloc_r+0xd0>
 800e226:	2a0b      	cmp	r2, #11
 800e228:	d917      	bls.n	800e25a <_malloc_r+0xc2>
 800e22a:	1961      	adds	r1, r4, r5
 800e22c:	42a3      	cmp	r3, r4
 800e22e:	6025      	str	r5, [r4, #0]
 800e230:	bf18      	it	ne
 800e232:	6059      	strne	r1, [r3, #4]
 800e234:	6863      	ldr	r3, [r4, #4]
 800e236:	bf08      	it	eq
 800e238:	f8c8 1000 	streq.w	r1, [r8]
 800e23c:	5162      	str	r2, [r4, r5]
 800e23e:	604b      	str	r3, [r1, #4]
 800e240:	4630      	mov	r0, r6
 800e242:	f000 f82f 	bl	800e2a4 <__malloc_unlock>
 800e246:	f104 000b 	add.w	r0, r4, #11
 800e24a:	1d23      	adds	r3, r4, #4
 800e24c:	f020 0007 	bic.w	r0, r0, #7
 800e250:	1ac2      	subs	r2, r0, r3
 800e252:	bf1c      	itt	ne
 800e254:	1a1b      	subne	r3, r3, r0
 800e256:	50a3      	strne	r3, [r4, r2]
 800e258:	e7af      	b.n	800e1ba <_malloc_r+0x22>
 800e25a:	6862      	ldr	r2, [r4, #4]
 800e25c:	42a3      	cmp	r3, r4
 800e25e:	bf0c      	ite	eq
 800e260:	f8c8 2000 	streq.w	r2, [r8]
 800e264:	605a      	strne	r2, [r3, #4]
 800e266:	e7eb      	b.n	800e240 <_malloc_r+0xa8>
 800e268:	4623      	mov	r3, r4
 800e26a:	6864      	ldr	r4, [r4, #4]
 800e26c:	e7ae      	b.n	800e1cc <_malloc_r+0x34>
 800e26e:	463c      	mov	r4, r7
 800e270:	687f      	ldr	r7, [r7, #4]
 800e272:	e7b6      	b.n	800e1e2 <_malloc_r+0x4a>
 800e274:	461a      	mov	r2, r3
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	42a3      	cmp	r3, r4
 800e27a:	d1fb      	bne.n	800e274 <_malloc_r+0xdc>
 800e27c:	2300      	movs	r3, #0
 800e27e:	6053      	str	r3, [r2, #4]
 800e280:	e7de      	b.n	800e240 <_malloc_r+0xa8>
 800e282:	230c      	movs	r3, #12
 800e284:	6033      	str	r3, [r6, #0]
 800e286:	4630      	mov	r0, r6
 800e288:	f000 f80c 	bl	800e2a4 <__malloc_unlock>
 800e28c:	e794      	b.n	800e1b8 <_malloc_r+0x20>
 800e28e:	6005      	str	r5, [r0, #0]
 800e290:	e7d6      	b.n	800e240 <_malloc_r+0xa8>
 800e292:	bf00      	nop
 800e294:	20001238 	.word	0x20001238

0800e298 <__malloc_lock>:
 800e298:	4801      	ldr	r0, [pc, #4]	@ (800e2a0 <__malloc_lock+0x8>)
 800e29a:	f7ff b888 	b.w	800d3ae <__retarget_lock_acquire_recursive>
 800e29e:	bf00      	nop
 800e2a0:	20001230 	.word	0x20001230

0800e2a4 <__malloc_unlock>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	@ (800e2ac <__malloc_unlock+0x8>)
 800e2a6:	f7ff b883 	b.w	800d3b0 <__retarget_lock_release_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	20001230 	.word	0x20001230

0800e2b0 <_Balloc>:
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	69c6      	ldr	r6, [r0, #28]
 800e2b4:	4604      	mov	r4, r0
 800e2b6:	460d      	mov	r5, r1
 800e2b8:	b976      	cbnz	r6, 800e2d8 <_Balloc+0x28>
 800e2ba:	2010      	movs	r0, #16
 800e2bc:	f7ff ff42 	bl	800e144 <malloc>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	61e0      	str	r0, [r4, #28]
 800e2c4:	b920      	cbnz	r0, 800e2d0 <_Balloc+0x20>
 800e2c6:	4b18      	ldr	r3, [pc, #96]	@ (800e328 <_Balloc+0x78>)
 800e2c8:	4818      	ldr	r0, [pc, #96]	@ (800e32c <_Balloc+0x7c>)
 800e2ca:	216b      	movs	r1, #107	@ 0x6b
 800e2cc:	f7ff f878 	bl	800d3c0 <__assert_func>
 800e2d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2d4:	6006      	str	r6, [r0, #0]
 800e2d6:	60c6      	str	r6, [r0, #12]
 800e2d8:	69e6      	ldr	r6, [r4, #28]
 800e2da:	68f3      	ldr	r3, [r6, #12]
 800e2dc:	b183      	cbz	r3, 800e300 <_Balloc+0x50>
 800e2de:	69e3      	ldr	r3, [r4, #28]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2e6:	b9b8      	cbnz	r0, 800e318 <_Balloc+0x68>
 800e2e8:	2101      	movs	r1, #1
 800e2ea:	fa01 f605 	lsl.w	r6, r1, r5
 800e2ee:	1d72      	adds	r2, r6, #5
 800e2f0:	0092      	lsls	r2, r2, #2
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f001 ff57 	bl	80101a6 <_calloc_r>
 800e2f8:	b160      	cbz	r0, 800e314 <_Balloc+0x64>
 800e2fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2fe:	e00e      	b.n	800e31e <_Balloc+0x6e>
 800e300:	2221      	movs	r2, #33	@ 0x21
 800e302:	2104      	movs	r1, #4
 800e304:	4620      	mov	r0, r4
 800e306:	f001 ff4e 	bl	80101a6 <_calloc_r>
 800e30a:	69e3      	ldr	r3, [r4, #28]
 800e30c:	60f0      	str	r0, [r6, #12]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1e4      	bne.n	800e2de <_Balloc+0x2e>
 800e314:	2000      	movs	r0, #0
 800e316:	bd70      	pop	{r4, r5, r6, pc}
 800e318:	6802      	ldr	r2, [r0, #0]
 800e31a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e31e:	2300      	movs	r3, #0
 800e320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e324:	e7f7      	b.n	800e316 <_Balloc+0x66>
 800e326:	bf00      	nop
 800e328:	080128ce 	.word	0x080128ce
 800e32c:	080129f1 	.word	0x080129f1

0800e330 <_Bfree>:
 800e330:	b570      	push	{r4, r5, r6, lr}
 800e332:	69c6      	ldr	r6, [r0, #28]
 800e334:	4605      	mov	r5, r0
 800e336:	460c      	mov	r4, r1
 800e338:	b976      	cbnz	r6, 800e358 <_Bfree+0x28>
 800e33a:	2010      	movs	r0, #16
 800e33c:	f7ff ff02 	bl	800e144 <malloc>
 800e340:	4602      	mov	r2, r0
 800e342:	61e8      	str	r0, [r5, #28]
 800e344:	b920      	cbnz	r0, 800e350 <_Bfree+0x20>
 800e346:	4b09      	ldr	r3, [pc, #36]	@ (800e36c <_Bfree+0x3c>)
 800e348:	4809      	ldr	r0, [pc, #36]	@ (800e370 <_Bfree+0x40>)
 800e34a:	218f      	movs	r1, #143	@ 0x8f
 800e34c:	f7ff f838 	bl	800d3c0 <__assert_func>
 800e350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e354:	6006      	str	r6, [r0, #0]
 800e356:	60c6      	str	r6, [r0, #12]
 800e358:	b13c      	cbz	r4, 800e36a <_Bfree+0x3a>
 800e35a:	69eb      	ldr	r3, [r5, #28]
 800e35c:	6862      	ldr	r2, [r4, #4]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e364:	6021      	str	r1, [r4, #0]
 800e366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e36a:	bd70      	pop	{r4, r5, r6, pc}
 800e36c:	080128ce 	.word	0x080128ce
 800e370:	080129f1 	.word	0x080129f1

0800e374 <__multadd>:
 800e374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e378:	690d      	ldr	r5, [r1, #16]
 800e37a:	4607      	mov	r7, r0
 800e37c:	460c      	mov	r4, r1
 800e37e:	461e      	mov	r6, r3
 800e380:	f101 0c14 	add.w	ip, r1, #20
 800e384:	2000      	movs	r0, #0
 800e386:	f8dc 3000 	ldr.w	r3, [ip]
 800e38a:	b299      	uxth	r1, r3
 800e38c:	fb02 6101 	mla	r1, r2, r1, r6
 800e390:	0c1e      	lsrs	r6, r3, #16
 800e392:	0c0b      	lsrs	r3, r1, #16
 800e394:	fb02 3306 	mla	r3, r2, r6, r3
 800e398:	b289      	uxth	r1, r1
 800e39a:	3001      	adds	r0, #1
 800e39c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3a0:	4285      	cmp	r5, r0
 800e3a2:	f84c 1b04 	str.w	r1, [ip], #4
 800e3a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e3aa:	dcec      	bgt.n	800e386 <__multadd+0x12>
 800e3ac:	b30e      	cbz	r6, 800e3f2 <__multadd+0x7e>
 800e3ae:	68a3      	ldr	r3, [r4, #8]
 800e3b0:	42ab      	cmp	r3, r5
 800e3b2:	dc19      	bgt.n	800e3e8 <__multadd+0x74>
 800e3b4:	6861      	ldr	r1, [r4, #4]
 800e3b6:	4638      	mov	r0, r7
 800e3b8:	3101      	adds	r1, #1
 800e3ba:	f7ff ff79 	bl	800e2b0 <_Balloc>
 800e3be:	4680      	mov	r8, r0
 800e3c0:	b928      	cbnz	r0, 800e3ce <__multadd+0x5a>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e3f8 <__multadd+0x84>)
 800e3c6:	480d      	ldr	r0, [pc, #52]	@ (800e3fc <__multadd+0x88>)
 800e3c8:	21ba      	movs	r1, #186	@ 0xba
 800e3ca:	f7fe fff9 	bl	800d3c0 <__assert_func>
 800e3ce:	6922      	ldr	r2, [r4, #16]
 800e3d0:	3202      	adds	r2, #2
 800e3d2:	f104 010c 	add.w	r1, r4, #12
 800e3d6:	0092      	lsls	r2, r2, #2
 800e3d8:	300c      	adds	r0, #12
 800e3da:	f001 fec7 	bl	801016c <memcpy>
 800e3de:	4621      	mov	r1, r4
 800e3e0:	4638      	mov	r0, r7
 800e3e2:	f7ff ffa5 	bl	800e330 <_Bfree>
 800e3e6:	4644      	mov	r4, r8
 800e3e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3ec:	3501      	adds	r5, #1
 800e3ee:	615e      	str	r6, [r3, #20]
 800e3f0:	6125      	str	r5, [r4, #16]
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f8:	080129e0 	.word	0x080129e0
 800e3fc:	080129f1 	.word	0x080129f1

0800e400 <__s2b>:
 800e400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e404:	460c      	mov	r4, r1
 800e406:	4615      	mov	r5, r2
 800e408:	461f      	mov	r7, r3
 800e40a:	2209      	movs	r2, #9
 800e40c:	3308      	adds	r3, #8
 800e40e:	4606      	mov	r6, r0
 800e410:	fb93 f3f2 	sdiv	r3, r3, r2
 800e414:	2100      	movs	r1, #0
 800e416:	2201      	movs	r2, #1
 800e418:	429a      	cmp	r2, r3
 800e41a:	db09      	blt.n	800e430 <__s2b+0x30>
 800e41c:	4630      	mov	r0, r6
 800e41e:	f7ff ff47 	bl	800e2b0 <_Balloc>
 800e422:	b940      	cbnz	r0, 800e436 <__s2b+0x36>
 800e424:	4602      	mov	r2, r0
 800e426:	4b19      	ldr	r3, [pc, #100]	@ (800e48c <__s2b+0x8c>)
 800e428:	4819      	ldr	r0, [pc, #100]	@ (800e490 <__s2b+0x90>)
 800e42a:	21d3      	movs	r1, #211	@ 0xd3
 800e42c:	f7fe ffc8 	bl	800d3c0 <__assert_func>
 800e430:	0052      	lsls	r2, r2, #1
 800e432:	3101      	adds	r1, #1
 800e434:	e7f0      	b.n	800e418 <__s2b+0x18>
 800e436:	9b08      	ldr	r3, [sp, #32]
 800e438:	6143      	str	r3, [r0, #20]
 800e43a:	2d09      	cmp	r5, #9
 800e43c:	f04f 0301 	mov.w	r3, #1
 800e440:	6103      	str	r3, [r0, #16]
 800e442:	dd16      	ble.n	800e472 <__s2b+0x72>
 800e444:	f104 0909 	add.w	r9, r4, #9
 800e448:	46c8      	mov	r8, r9
 800e44a:	442c      	add	r4, r5
 800e44c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e450:	4601      	mov	r1, r0
 800e452:	3b30      	subs	r3, #48	@ 0x30
 800e454:	220a      	movs	r2, #10
 800e456:	4630      	mov	r0, r6
 800e458:	f7ff ff8c 	bl	800e374 <__multadd>
 800e45c:	45a0      	cmp	r8, r4
 800e45e:	d1f5      	bne.n	800e44c <__s2b+0x4c>
 800e460:	f1a5 0408 	sub.w	r4, r5, #8
 800e464:	444c      	add	r4, r9
 800e466:	1b2d      	subs	r5, r5, r4
 800e468:	1963      	adds	r3, r4, r5
 800e46a:	42bb      	cmp	r3, r7
 800e46c:	db04      	blt.n	800e478 <__s2b+0x78>
 800e46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e472:	340a      	adds	r4, #10
 800e474:	2509      	movs	r5, #9
 800e476:	e7f6      	b.n	800e466 <__s2b+0x66>
 800e478:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e47c:	4601      	mov	r1, r0
 800e47e:	3b30      	subs	r3, #48	@ 0x30
 800e480:	220a      	movs	r2, #10
 800e482:	4630      	mov	r0, r6
 800e484:	f7ff ff76 	bl	800e374 <__multadd>
 800e488:	e7ee      	b.n	800e468 <__s2b+0x68>
 800e48a:	bf00      	nop
 800e48c:	080129e0 	.word	0x080129e0
 800e490:	080129f1 	.word	0x080129f1

0800e494 <__hi0bits>:
 800e494:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e498:	4603      	mov	r3, r0
 800e49a:	bf36      	itet	cc
 800e49c:	0403      	lslcc	r3, r0, #16
 800e49e:	2000      	movcs	r0, #0
 800e4a0:	2010      	movcc	r0, #16
 800e4a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e4a6:	bf3c      	itt	cc
 800e4a8:	021b      	lslcc	r3, r3, #8
 800e4aa:	3008      	addcc	r0, #8
 800e4ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4b0:	bf3c      	itt	cc
 800e4b2:	011b      	lslcc	r3, r3, #4
 800e4b4:	3004      	addcc	r0, #4
 800e4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4ba:	bf3c      	itt	cc
 800e4bc:	009b      	lslcc	r3, r3, #2
 800e4be:	3002      	addcc	r0, #2
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	db05      	blt.n	800e4d0 <__hi0bits+0x3c>
 800e4c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e4c8:	f100 0001 	add.w	r0, r0, #1
 800e4cc:	bf08      	it	eq
 800e4ce:	2020      	moveq	r0, #32
 800e4d0:	4770      	bx	lr

0800e4d2 <__lo0bits>:
 800e4d2:	6803      	ldr	r3, [r0, #0]
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	f013 0007 	ands.w	r0, r3, #7
 800e4da:	d00b      	beq.n	800e4f4 <__lo0bits+0x22>
 800e4dc:	07d9      	lsls	r1, r3, #31
 800e4de:	d421      	bmi.n	800e524 <__lo0bits+0x52>
 800e4e0:	0798      	lsls	r0, r3, #30
 800e4e2:	bf49      	itett	mi
 800e4e4:	085b      	lsrmi	r3, r3, #1
 800e4e6:	089b      	lsrpl	r3, r3, #2
 800e4e8:	2001      	movmi	r0, #1
 800e4ea:	6013      	strmi	r3, [r2, #0]
 800e4ec:	bf5c      	itt	pl
 800e4ee:	6013      	strpl	r3, [r2, #0]
 800e4f0:	2002      	movpl	r0, #2
 800e4f2:	4770      	bx	lr
 800e4f4:	b299      	uxth	r1, r3
 800e4f6:	b909      	cbnz	r1, 800e4fc <__lo0bits+0x2a>
 800e4f8:	0c1b      	lsrs	r3, r3, #16
 800e4fa:	2010      	movs	r0, #16
 800e4fc:	b2d9      	uxtb	r1, r3
 800e4fe:	b909      	cbnz	r1, 800e504 <__lo0bits+0x32>
 800e500:	3008      	adds	r0, #8
 800e502:	0a1b      	lsrs	r3, r3, #8
 800e504:	0719      	lsls	r1, r3, #28
 800e506:	bf04      	itt	eq
 800e508:	091b      	lsreq	r3, r3, #4
 800e50a:	3004      	addeq	r0, #4
 800e50c:	0799      	lsls	r1, r3, #30
 800e50e:	bf04      	itt	eq
 800e510:	089b      	lsreq	r3, r3, #2
 800e512:	3002      	addeq	r0, #2
 800e514:	07d9      	lsls	r1, r3, #31
 800e516:	d403      	bmi.n	800e520 <__lo0bits+0x4e>
 800e518:	085b      	lsrs	r3, r3, #1
 800e51a:	f100 0001 	add.w	r0, r0, #1
 800e51e:	d003      	beq.n	800e528 <__lo0bits+0x56>
 800e520:	6013      	str	r3, [r2, #0]
 800e522:	4770      	bx	lr
 800e524:	2000      	movs	r0, #0
 800e526:	4770      	bx	lr
 800e528:	2020      	movs	r0, #32
 800e52a:	4770      	bx	lr

0800e52c <__i2b>:
 800e52c:	b510      	push	{r4, lr}
 800e52e:	460c      	mov	r4, r1
 800e530:	2101      	movs	r1, #1
 800e532:	f7ff febd 	bl	800e2b0 <_Balloc>
 800e536:	4602      	mov	r2, r0
 800e538:	b928      	cbnz	r0, 800e546 <__i2b+0x1a>
 800e53a:	4b05      	ldr	r3, [pc, #20]	@ (800e550 <__i2b+0x24>)
 800e53c:	4805      	ldr	r0, [pc, #20]	@ (800e554 <__i2b+0x28>)
 800e53e:	f240 1145 	movw	r1, #325	@ 0x145
 800e542:	f7fe ff3d 	bl	800d3c0 <__assert_func>
 800e546:	2301      	movs	r3, #1
 800e548:	6144      	str	r4, [r0, #20]
 800e54a:	6103      	str	r3, [r0, #16]
 800e54c:	bd10      	pop	{r4, pc}
 800e54e:	bf00      	nop
 800e550:	080129e0 	.word	0x080129e0
 800e554:	080129f1 	.word	0x080129f1

0800e558 <__multiply>:
 800e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e55c:	4617      	mov	r7, r2
 800e55e:	690a      	ldr	r2, [r1, #16]
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	429a      	cmp	r2, r3
 800e564:	bfa8      	it	ge
 800e566:	463b      	movge	r3, r7
 800e568:	4689      	mov	r9, r1
 800e56a:	bfa4      	itt	ge
 800e56c:	460f      	movge	r7, r1
 800e56e:	4699      	movge	r9, r3
 800e570:	693d      	ldr	r5, [r7, #16]
 800e572:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	6879      	ldr	r1, [r7, #4]
 800e57a:	eb05 060a 	add.w	r6, r5, sl
 800e57e:	42b3      	cmp	r3, r6
 800e580:	b085      	sub	sp, #20
 800e582:	bfb8      	it	lt
 800e584:	3101      	addlt	r1, #1
 800e586:	f7ff fe93 	bl	800e2b0 <_Balloc>
 800e58a:	b930      	cbnz	r0, 800e59a <__multiply+0x42>
 800e58c:	4602      	mov	r2, r0
 800e58e:	4b41      	ldr	r3, [pc, #260]	@ (800e694 <__multiply+0x13c>)
 800e590:	4841      	ldr	r0, [pc, #260]	@ (800e698 <__multiply+0x140>)
 800e592:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e596:	f7fe ff13 	bl	800d3c0 <__assert_func>
 800e59a:	f100 0414 	add.w	r4, r0, #20
 800e59e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e5a2:	4623      	mov	r3, r4
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	4573      	cmp	r3, lr
 800e5a8:	d320      	bcc.n	800e5ec <__multiply+0x94>
 800e5aa:	f107 0814 	add.w	r8, r7, #20
 800e5ae:	f109 0114 	add.w	r1, r9, #20
 800e5b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e5b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e5ba:	9302      	str	r3, [sp, #8]
 800e5bc:	1beb      	subs	r3, r5, r7
 800e5be:	3b15      	subs	r3, #21
 800e5c0:	f023 0303 	bic.w	r3, r3, #3
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	3715      	adds	r7, #21
 800e5c8:	42bd      	cmp	r5, r7
 800e5ca:	bf38      	it	cc
 800e5cc:	2304      	movcc	r3, #4
 800e5ce:	9301      	str	r3, [sp, #4]
 800e5d0:	9b02      	ldr	r3, [sp, #8]
 800e5d2:	9103      	str	r1, [sp, #12]
 800e5d4:	428b      	cmp	r3, r1
 800e5d6:	d80c      	bhi.n	800e5f2 <__multiply+0x9a>
 800e5d8:	2e00      	cmp	r6, #0
 800e5da:	dd03      	ble.n	800e5e4 <__multiply+0x8c>
 800e5dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d055      	beq.n	800e690 <__multiply+0x138>
 800e5e4:	6106      	str	r6, [r0, #16]
 800e5e6:	b005      	add	sp, #20
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ec:	f843 2b04 	str.w	r2, [r3], #4
 800e5f0:	e7d9      	b.n	800e5a6 <__multiply+0x4e>
 800e5f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e5f6:	f1ba 0f00 	cmp.w	sl, #0
 800e5fa:	d01f      	beq.n	800e63c <__multiply+0xe4>
 800e5fc:	46c4      	mov	ip, r8
 800e5fe:	46a1      	mov	r9, r4
 800e600:	2700      	movs	r7, #0
 800e602:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e606:	f8d9 3000 	ldr.w	r3, [r9]
 800e60a:	fa1f fb82 	uxth.w	fp, r2
 800e60e:	b29b      	uxth	r3, r3
 800e610:	fb0a 330b 	mla	r3, sl, fp, r3
 800e614:	443b      	add	r3, r7
 800e616:	f8d9 7000 	ldr.w	r7, [r9]
 800e61a:	0c12      	lsrs	r2, r2, #16
 800e61c:	0c3f      	lsrs	r7, r7, #16
 800e61e:	fb0a 7202 	mla	r2, sl, r2, r7
 800e622:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e626:	b29b      	uxth	r3, r3
 800e628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e62c:	4565      	cmp	r5, ip
 800e62e:	f849 3b04 	str.w	r3, [r9], #4
 800e632:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e636:	d8e4      	bhi.n	800e602 <__multiply+0xaa>
 800e638:	9b01      	ldr	r3, [sp, #4]
 800e63a:	50e7      	str	r7, [r4, r3]
 800e63c:	9b03      	ldr	r3, [sp, #12]
 800e63e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e642:	3104      	adds	r1, #4
 800e644:	f1b9 0f00 	cmp.w	r9, #0
 800e648:	d020      	beq.n	800e68c <__multiply+0x134>
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	4647      	mov	r7, r8
 800e64e:	46a4      	mov	ip, r4
 800e650:	f04f 0a00 	mov.w	sl, #0
 800e654:	f8b7 b000 	ldrh.w	fp, [r7]
 800e658:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e65c:	fb09 220b 	mla	r2, r9, fp, r2
 800e660:	4452      	add	r2, sl
 800e662:	b29b      	uxth	r3, r3
 800e664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e668:	f84c 3b04 	str.w	r3, [ip], #4
 800e66c:	f857 3b04 	ldr.w	r3, [r7], #4
 800e670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e674:	f8bc 3000 	ldrh.w	r3, [ip]
 800e678:	fb09 330a 	mla	r3, r9, sl, r3
 800e67c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e680:	42bd      	cmp	r5, r7
 800e682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e686:	d8e5      	bhi.n	800e654 <__multiply+0xfc>
 800e688:	9a01      	ldr	r2, [sp, #4]
 800e68a:	50a3      	str	r3, [r4, r2]
 800e68c:	3404      	adds	r4, #4
 800e68e:	e79f      	b.n	800e5d0 <__multiply+0x78>
 800e690:	3e01      	subs	r6, #1
 800e692:	e7a1      	b.n	800e5d8 <__multiply+0x80>
 800e694:	080129e0 	.word	0x080129e0
 800e698:	080129f1 	.word	0x080129f1

0800e69c <__pow5mult>:
 800e69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a0:	4615      	mov	r5, r2
 800e6a2:	f012 0203 	ands.w	r2, r2, #3
 800e6a6:	4607      	mov	r7, r0
 800e6a8:	460e      	mov	r6, r1
 800e6aa:	d007      	beq.n	800e6bc <__pow5mult+0x20>
 800e6ac:	4c25      	ldr	r4, [pc, #148]	@ (800e744 <__pow5mult+0xa8>)
 800e6ae:	3a01      	subs	r2, #1
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e6b6:	f7ff fe5d 	bl	800e374 <__multadd>
 800e6ba:	4606      	mov	r6, r0
 800e6bc:	10ad      	asrs	r5, r5, #2
 800e6be:	d03d      	beq.n	800e73c <__pow5mult+0xa0>
 800e6c0:	69fc      	ldr	r4, [r7, #28]
 800e6c2:	b97c      	cbnz	r4, 800e6e4 <__pow5mult+0x48>
 800e6c4:	2010      	movs	r0, #16
 800e6c6:	f7ff fd3d 	bl	800e144 <malloc>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	61f8      	str	r0, [r7, #28]
 800e6ce:	b928      	cbnz	r0, 800e6dc <__pow5mult+0x40>
 800e6d0:	4b1d      	ldr	r3, [pc, #116]	@ (800e748 <__pow5mult+0xac>)
 800e6d2:	481e      	ldr	r0, [pc, #120]	@ (800e74c <__pow5mult+0xb0>)
 800e6d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e6d8:	f7fe fe72 	bl	800d3c0 <__assert_func>
 800e6dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6e0:	6004      	str	r4, [r0, #0]
 800e6e2:	60c4      	str	r4, [r0, #12]
 800e6e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e6e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6ec:	b94c      	cbnz	r4, 800e702 <__pow5mult+0x66>
 800e6ee:	f240 2171 	movw	r1, #625	@ 0x271
 800e6f2:	4638      	mov	r0, r7
 800e6f4:	f7ff ff1a 	bl	800e52c <__i2b>
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6fe:	4604      	mov	r4, r0
 800e700:	6003      	str	r3, [r0, #0]
 800e702:	f04f 0900 	mov.w	r9, #0
 800e706:	07eb      	lsls	r3, r5, #31
 800e708:	d50a      	bpl.n	800e720 <__pow5mult+0x84>
 800e70a:	4631      	mov	r1, r6
 800e70c:	4622      	mov	r2, r4
 800e70e:	4638      	mov	r0, r7
 800e710:	f7ff ff22 	bl	800e558 <__multiply>
 800e714:	4631      	mov	r1, r6
 800e716:	4680      	mov	r8, r0
 800e718:	4638      	mov	r0, r7
 800e71a:	f7ff fe09 	bl	800e330 <_Bfree>
 800e71e:	4646      	mov	r6, r8
 800e720:	106d      	asrs	r5, r5, #1
 800e722:	d00b      	beq.n	800e73c <__pow5mult+0xa0>
 800e724:	6820      	ldr	r0, [r4, #0]
 800e726:	b938      	cbnz	r0, 800e738 <__pow5mult+0x9c>
 800e728:	4622      	mov	r2, r4
 800e72a:	4621      	mov	r1, r4
 800e72c:	4638      	mov	r0, r7
 800e72e:	f7ff ff13 	bl	800e558 <__multiply>
 800e732:	6020      	str	r0, [r4, #0]
 800e734:	f8c0 9000 	str.w	r9, [r0]
 800e738:	4604      	mov	r4, r0
 800e73a:	e7e4      	b.n	800e706 <__pow5mult+0x6a>
 800e73c:	4630      	mov	r0, r6
 800e73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e742:	bf00      	nop
 800e744:	08012ac8 	.word	0x08012ac8
 800e748:	080128ce 	.word	0x080128ce
 800e74c:	080129f1 	.word	0x080129f1

0800e750 <__lshift>:
 800e750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e754:	460c      	mov	r4, r1
 800e756:	6849      	ldr	r1, [r1, #4]
 800e758:	6923      	ldr	r3, [r4, #16]
 800e75a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e75e:	68a3      	ldr	r3, [r4, #8]
 800e760:	4607      	mov	r7, r0
 800e762:	4691      	mov	r9, r2
 800e764:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e768:	f108 0601 	add.w	r6, r8, #1
 800e76c:	42b3      	cmp	r3, r6
 800e76e:	db0b      	blt.n	800e788 <__lshift+0x38>
 800e770:	4638      	mov	r0, r7
 800e772:	f7ff fd9d 	bl	800e2b0 <_Balloc>
 800e776:	4605      	mov	r5, r0
 800e778:	b948      	cbnz	r0, 800e78e <__lshift+0x3e>
 800e77a:	4602      	mov	r2, r0
 800e77c:	4b28      	ldr	r3, [pc, #160]	@ (800e820 <__lshift+0xd0>)
 800e77e:	4829      	ldr	r0, [pc, #164]	@ (800e824 <__lshift+0xd4>)
 800e780:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e784:	f7fe fe1c 	bl	800d3c0 <__assert_func>
 800e788:	3101      	adds	r1, #1
 800e78a:	005b      	lsls	r3, r3, #1
 800e78c:	e7ee      	b.n	800e76c <__lshift+0x1c>
 800e78e:	2300      	movs	r3, #0
 800e790:	f100 0114 	add.w	r1, r0, #20
 800e794:	f100 0210 	add.w	r2, r0, #16
 800e798:	4618      	mov	r0, r3
 800e79a:	4553      	cmp	r3, sl
 800e79c:	db33      	blt.n	800e806 <__lshift+0xb6>
 800e79e:	6920      	ldr	r0, [r4, #16]
 800e7a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7a4:	f104 0314 	add.w	r3, r4, #20
 800e7a8:	f019 091f 	ands.w	r9, r9, #31
 800e7ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e7b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e7b4:	d02b      	beq.n	800e80e <__lshift+0xbe>
 800e7b6:	f1c9 0e20 	rsb	lr, r9, #32
 800e7ba:	468a      	mov	sl, r1
 800e7bc:	2200      	movs	r2, #0
 800e7be:	6818      	ldr	r0, [r3, #0]
 800e7c0:	fa00 f009 	lsl.w	r0, r0, r9
 800e7c4:	4310      	orrs	r0, r2
 800e7c6:	f84a 0b04 	str.w	r0, [sl], #4
 800e7ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ce:	459c      	cmp	ip, r3
 800e7d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e7d4:	d8f3      	bhi.n	800e7be <__lshift+0x6e>
 800e7d6:	ebac 0304 	sub.w	r3, ip, r4
 800e7da:	3b15      	subs	r3, #21
 800e7dc:	f023 0303 	bic.w	r3, r3, #3
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	f104 0015 	add.w	r0, r4, #21
 800e7e6:	4560      	cmp	r0, ip
 800e7e8:	bf88      	it	hi
 800e7ea:	2304      	movhi	r3, #4
 800e7ec:	50ca      	str	r2, [r1, r3]
 800e7ee:	b10a      	cbz	r2, 800e7f4 <__lshift+0xa4>
 800e7f0:	f108 0602 	add.w	r6, r8, #2
 800e7f4:	3e01      	subs	r6, #1
 800e7f6:	4638      	mov	r0, r7
 800e7f8:	612e      	str	r6, [r5, #16]
 800e7fa:	4621      	mov	r1, r4
 800e7fc:	f7ff fd98 	bl	800e330 <_Bfree>
 800e800:	4628      	mov	r0, r5
 800e802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e806:	f842 0f04 	str.w	r0, [r2, #4]!
 800e80a:	3301      	adds	r3, #1
 800e80c:	e7c5      	b.n	800e79a <__lshift+0x4a>
 800e80e:	3904      	subs	r1, #4
 800e810:	f853 2b04 	ldr.w	r2, [r3], #4
 800e814:	f841 2f04 	str.w	r2, [r1, #4]!
 800e818:	459c      	cmp	ip, r3
 800e81a:	d8f9      	bhi.n	800e810 <__lshift+0xc0>
 800e81c:	e7ea      	b.n	800e7f4 <__lshift+0xa4>
 800e81e:	bf00      	nop
 800e820:	080129e0 	.word	0x080129e0
 800e824:	080129f1 	.word	0x080129f1

0800e828 <__mcmp>:
 800e828:	690a      	ldr	r2, [r1, #16]
 800e82a:	4603      	mov	r3, r0
 800e82c:	6900      	ldr	r0, [r0, #16]
 800e82e:	1a80      	subs	r0, r0, r2
 800e830:	b530      	push	{r4, r5, lr}
 800e832:	d10e      	bne.n	800e852 <__mcmp+0x2a>
 800e834:	3314      	adds	r3, #20
 800e836:	3114      	adds	r1, #20
 800e838:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e83c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e840:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e848:	4295      	cmp	r5, r2
 800e84a:	d003      	beq.n	800e854 <__mcmp+0x2c>
 800e84c:	d205      	bcs.n	800e85a <__mcmp+0x32>
 800e84e:	f04f 30ff 	mov.w	r0, #4294967295
 800e852:	bd30      	pop	{r4, r5, pc}
 800e854:	42a3      	cmp	r3, r4
 800e856:	d3f3      	bcc.n	800e840 <__mcmp+0x18>
 800e858:	e7fb      	b.n	800e852 <__mcmp+0x2a>
 800e85a:	2001      	movs	r0, #1
 800e85c:	e7f9      	b.n	800e852 <__mcmp+0x2a>
	...

0800e860 <__mdiff>:
 800e860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e864:	4689      	mov	r9, r1
 800e866:	4606      	mov	r6, r0
 800e868:	4611      	mov	r1, r2
 800e86a:	4648      	mov	r0, r9
 800e86c:	4614      	mov	r4, r2
 800e86e:	f7ff ffdb 	bl	800e828 <__mcmp>
 800e872:	1e05      	subs	r5, r0, #0
 800e874:	d112      	bne.n	800e89c <__mdiff+0x3c>
 800e876:	4629      	mov	r1, r5
 800e878:	4630      	mov	r0, r6
 800e87a:	f7ff fd19 	bl	800e2b0 <_Balloc>
 800e87e:	4602      	mov	r2, r0
 800e880:	b928      	cbnz	r0, 800e88e <__mdiff+0x2e>
 800e882:	4b3f      	ldr	r3, [pc, #252]	@ (800e980 <__mdiff+0x120>)
 800e884:	f240 2137 	movw	r1, #567	@ 0x237
 800e888:	483e      	ldr	r0, [pc, #248]	@ (800e984 <__mdiff+0x124>)
 800e88a:	f7fe fd99 	bl	800d3c0 <__assert_func>
 800e88e:	2301      	movs	r3, #1
 800e890:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e894:	4610      	mov	r0, r2
 800e896:	b003      	add	sp, #12
 800e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89c:	bfbc      	itt	lt
 800e89e:	464b      	movlt	r3, r9
 800e8a0:	46a1      	movlt	r9, r4
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e8a8:	bfba      	itte	lt
 800e8aa:	461c      	movlt	r4, r3
 800e8ac:	2501      	movlt	r5, #1
 800e8ae:	2500      	movge	r5, #0
 800e8b0:	f7ff fcfe 	bl	800e2b0 <_Balloc>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	b918      	cbnz	r0, 800e8c0 <__mdiff+0x60>
 800e8b8:	4b31      	ldr	r3, [pc, #196]	@ (800e980 <__mdiff+0x120>)
 800e8ba:	f240 2145 	movw	r1, #581	@ 0x245
 800e8be:	e7e3      	b.n	800e888 <__mdiff+0x28>
 800e8c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e8c4:	6926      	ldr	r6, [r4, #16]
 800e8c6:	60c5      	str	r5, [r0, #12]
 800e8c8:	f109 0310 	add.w	r3, r9, #16
 800e8cc:	f109 0514 	add.w	r5, r9, #20
 800e8d0:	f104 0e14 	add.w	lr, r4, #20
 800e8d4:	f100 0b14 	add.w	fp, r0, #20
 800e8d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e8dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e8e0:	9301      	str	r3, [sp, #4]
 800e8e2:	46d9      	mov	r9, fp
 800e8e4:	f04f 0c00 	mov.w	ip, #0
 800e8e8:	9b01      	ldr	r3, [sp, #4]
 800e8ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e8ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e8f2:	9301      	str	r3, [sp, #4]
 800e8f4:	fa1f f38a 	uxth.w	r3, sl
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	b283      	uxth	r3, r0
 800e8fc:	1acb      	subs	r3, r1, r3
 800e8fe:	0c00      	lsrs	r0, r0, #16
 800e900:	4463      	add	r3, ip
 800e902:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e906:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e910:	4576      	cmp	r6, lr
 800e912:	f849 3b04 	str.w	r3, [r9], #4
 800e916:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e91a:	d8e5      	bhi.n	800e8e8 <__mdiff+0x88>
 800e91c:	1b33      	subs	r3, r6, r4
 800e91e:	3b15      	subs	r3, #21
 800e920:	f023 0303 	bic.w	r3, r3, #3
 800e924:	3415      	adds	r4, #21
 800e926:	3304      	adds	r3, #4
 800e928:	42a6      	cmp	r6, r4
 800e92a:	bf38      	it	cc
 800e92c:	2304      	movcc	r3, #4
 800e92e:	441d      	add	r5, r3
 800e930:	445b      	add	r3, fp
 800e932:	461e      	mov	r6, r3
 800e934:	462c      	mov	r4, r5
 800e936:	4544      	cmp	r4, r8
 800e938:	d30e      	bcc.n	800e958 <__mdiff+0xf8>
 800e93a:	f108 0103 	add.w	r1, r8, #3
 800e93e:	1b49      	subs	r1, r1, r5
 800e940:	f021 0103 	bic.w	r1, r1, #3
 800e944:	3d03      	subs	r5, #3
 800e946:	45a8      	cmp	r8, r5
 800e948:	bf38      	it	cc
 800e94a:	2100      	movcc	r1, #0
 800e94c:	440b      	add	r3, r1
 800e94e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e952:	b191      	cbz	r1, 800e97a <__mdiff+0x11a>
 800e954:	6117      	str	r7, [r2, #16]
 800e956:	e79d      	b.n	800e894 <__mdiff+0x34>
 800e958:	f854 1b04 	ldr.w	r1, [r4], #4
 800e95c:	46e6      	mov	lr, ip
 800e95e:	0c08      	lsrs	r0, r1, #16
 800e960:	fa1c fc81 	uxtah	ip, ip, r1
 800e964:	4471      	add	r1, lr
 800e966:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e96a:	b289      	uxth	r1, r1
 800e96c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e970:	f846 1b04 	str.w	r1, [r6], #4
 800e974:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e978:	e7dd      	b.n	800e936 <__mdiff+0xd6>
 800e97a:	3f01      	subs	r7, #1
 800e97c:	e7e7      	b.n	800e94e <__mdiff+0xee>
 800e97e:	bf00      	nop
 800e980:	080129e0 	.word	0x080129e0
 800e984:	080129f1 	.word	0x080129f1

0800e988 <__ulp>:
 800e988:	b082      	sub	sp, #8
 800e98a:	ed8d 0b00 	vstr	d0, [sp]
 800e98e:	9a01      	ldr	r2, [sp, #4]
 800e990:	4b0f      	ldr	r3, [pc, #60]	@ (800e9d0 <__ulp+0x48>)
 800e992:	4013      	ands	r3, r2
 800e994:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e998:	2b00      	cmp	r3, #0
 800e99a:	dc08      	bgt.n	800e9ae <__ulp+0x26>
 800e99c:	425b      	negs	r3, r3
 800e99e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e9a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e9a6:	da04      	bge.n	800e9b2 <__ulp+0x2a>
 800e9a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e9ac:	4113      	asrs	r3, r2
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	e008      	b.n	800e9c4 <__ulp+0x3c>
 800e9b2:	f1a2 0314 	sub.w	r3, r2, #20
 800e9b6:	2b1e      	cmp	r3, #30
 800e9b8:	bfda      	itte	le
 800e9ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e9be:	40da      	lsrle	r2, r3
 800e9c0:	2201      	movgt	r2, #1
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	ec41 0b10 	vmov	d0, r0, r1
 800e9cc:	b002      	add	sp, #8
 800e9ce:	4770      	bx	lr
 800e9d0:	7ff00000 	.word	0x7ff00000

0800e9d4 <__b2d>:
 800e9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d8:	6906      	ldr	r6, [r0, #16]
 800e9da:	f100 0814 	add.w	r8, r0, #20
 800e9de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e9e2:	1f37      	subs	r7, r6, #4
 800e9e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e9e8:	4610      	mov	r0, r2
 800e9ea:	f7ff fd53 	bl	800e494 <__hi0bits>
 800e9ee:	f1c0 0320 	rsb	r3, r0, #32
 800e9f2:	280a      	cmp	r0, #10
 800e9f4:	600b      	str	r3, [r1, #0]
 800e9f6:	491b      	ldr	r1, [pc, #108]	@ (800ea64 <__b2d+0x90>)
 800e9f8:	dc15      	bgt.n	800ea26 <__b2d+0x52>
 800e9fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800e9fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800ea02:	45b8      	cmp	r8, r7
 800ea04:	ea43 0501 	orr.w	r5, r3, r1
 800ea08:	bf34      	ite	cc
 800ea0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ea0e:	2300      	movcs	r3, #0
 800ea10:	3015      	adds	r0, #21
 800ea12:	fa02 f000 	lsl.w	r0, r2, r0
 800ea16:	fa23 f30c 	lsr.w	r3, r3, ip
 800ea1a:	4303      	orrs	r3, r0
 800ea1c:	461c      	mov	r4, r3
 800ea1e:	ec45 4b10 	vmov	d0, r4, r5
 800ea22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea26:	45b8      	cmp	r8, r7
 800ea28:	bf3a      	itte	cc
 800ea2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ea2e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ea32:	2300      	movcs	r3, #0
 800ea34:	380b      	subs	r0, #11
 800ea36:	d012      	beq.n	800ea5e <__b2d+0x8a>
 800ea38:	f1c0 0120 	rsb	r1, r0, #32
 800ea3c:	fa23 f401 	lsr.w	r4, r3, r1
 800ea40:	4082      	lsls	r2, r0
 800ea42:	4322      	orrs	r2, r4
 800ea44:	4547      	cmp	r7, r8
 800ea46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ea4a:	bf8c      	ite	hi
 800ea4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ea50:	2200      	movls	r2, #0
 800ea52:	4083      	lsls	r3, r0
 800ea54:	40ca      	lsrs	r2, r1
 800ea56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	e7de      	b.n	800ea1c <__b2d+0x48>
 800ea5e:	ea42 0501 	orr.w	r5, r2, r1
 800ea62:	e7db      	b.n	800ea1c <__b2d+0x48>
 800ea64:	3ff00000 	.word	0x3ff00000

0800ea68 <__d2b>:
 800ea68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea6c:	460f      	mov	r7, r1
 800ea6e:	2101      	movs	r1, #1
 800ea70:	ec59 8b10 	vmov	r8, r9, d0
 800ea74:	4616      	mov	r6, r2
 800ea76:	f7ff fc1b 	bl	800e2b0 <_Balloc>
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	b930      	cbnz	r0, 800ea8c <__d2b+0x24>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	4b23      	ldr	r3, [pc, #140]	@ (800eb10 <__d2b+0xa8>)
 800ea82:	4824      	ldr	r0, [pc, #144]	@ (800eb14 <__d2b+0xac>)
 800ea84:	f240 310f 	movw	r1, #783	@ 0x30f
 800ea88:	f7fe fc9a 	bl	800d3c0 <__assert_func>
 800ea8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea94:	b10d      	cbz	r5, 800ea9a <__d2b+0x32>
 800ea96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ea9a:	9301      	str	r3, [sp, #4]
 800ea9c:	f1b8 0300 	subs.w	r3, r8, #0
 800eaa0:	d023      	beq.n	800eaea <__d2b+0x82>
 800eaa2:	4668      	mov	r0, sp
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	f7ff fd14 	bl	800e4d2 <__lo0bits>
 800eaaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eaae:	b1d0      	cbz	r0, 800eae6 <__d2b+0x7e>
 800eab0:	f1c0 0320 	rsb	r3, r0, #32
 800eab4:	fa02 f303 	lsl.w	r3, r2, r3
 800eab8:	430b      	orrs	r3, r1
 800eaba:	40c2      	lsrs	r2, r0
 800eabc:	6163      	str	r3, [r4, #20]
 800eabe:	9201      	str	r2, [sp, #4]
 800eac0:	9b01      	ldr	r3, [sp, #4]
 800eac2:	61a3      	str	r3, [r4, #24]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	bf0c      	ite	eq
 800eac8:	2201      	moveq	r2, #1
 800eaca:	2202      	movne	r2, #2
 800eacc:	6122      	str	r2, [r4, #16]
 800eace:	b1a5      	cbz	r5, 800eafa <__d2b+0x92>
 800ead0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ead4:	4405      	add	r5, r0
 800ead6:	603d      	str	r5, [r7, #0]
 800ead8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eadc:	6030      	str	r0, [r6, #0]
 800eade:	4620      	mov	r0, r4
 800eae0:	b003      	add	sp, #12
 800eae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eae6:	6161      	str	r1, [r4, #20]
 800eae8:	e7ea      	b.n	800eac0 <__d2b+0x58>
 800eaea:	a801      	add	r0, sp, #4
 800eaec:	f7ff fcf1 	bl	800e4d2 <__lo0bits>
 800eaf0:	9b01      	ldr	r3, [sp, #4]
 800eaf2:	6163      	str	r3, [r4, #20]
 800eaf4:	3020      	adds	r0, #32
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	e7e8      	b.n	800eacc <__d2b+0x64>
 800eafa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eafe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eb02:	6038      	str	r0, [r7, #0]
 800eb04:	6918      	ldr	r0, [r3, #16]
 800eb06:	f7ff fcc5 	bl	800e494 <__hi0bits>
 800eb0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb0e:	e7e5      	b.n	800eadc <__d2b+0x74>
 800eb10:	080129e0 	.word	0x080129e0
 800eb14:	080129f1 	.word	0x080129f1

0800eb18 <__ratio>:
 800eb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1c:	b085      	sub	sp, #20
 800eb1e:	e9cd 1000 	strd	r1, r0, [sp]
 800eb22:	a902      	add	r1, sp, #8
 800eb24:	f7ff ff56 	bl	800e9d4 <__b2d>
 800eb28:	9800      	ldr	r0, [sp, #0]
 800eb2a:	a903      	add	r1, sp, #12
 800eb2c:	ec55 4b10 	vmov	r4, r5, d0
 800eb30:	f7ff ff50 	bl	800e9d4 <__b2d>
 800eb34:	9b01      	ldr	r3, [sp, #4]
 800eb36:	6919      	ldr	r1, [r3, #16]
 800eb38:	9b00      	ldr	r3, [sp, #0]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	1ac9      	subs	r1, r1, r3
 800eb3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800eb42:	1a9b      	subs	r3, r3, r2
 800eb44:	ec5b ab10 	vmov	sl, fp, d0
 800eb48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	bfce      	itee	gt
 800eb50:	462a      	movgt	r2, r5
 800eb52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb56:	465a      	movle	r2, fp
 800eb58:	462f      	mov	r7, r5
 800eb5a:	46d9      	mov	r9, fp
 800eb5c:	bfcc      	ite	gt
 800eb5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eb66:	464b      	mov	r3, r9
 800eb68:	4652      	mov	r2, sl
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	f7f1 fe9d 	bl	80008ac <__aeabi_ddiv>
 800eb72:	ec41 0b10 	vmov	d0, r0, r1
 800eb76:	b005      	add	sp, #20
 800eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb7c <__copybits>:
 800eb7c:	3901      	subs	r1, #1
 800eb7e:	b570      	push	{r4, r5, r6, lr}
 800eb80:	1149      	asrs	r1, r1, #5
 800eb82:	6914      	ldr	r4, [r2, #16]
 800eb84:	3101      	adds	r1, #1
 800eb86:	f102 0314 	add.w	r3, r2, #20
 800eb8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb92:	1f05      	subs	r5, r0, #4
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	d30c      	bcc.n	800ebb2 <__copybits+0x36>
 800eb98:	1aa3      	subs	r3, r4, r2
 800eb9a:	3b11      	subs	r3, #17
 800eb9c:	f023 0303 	bic.w	r3, r3, #3
 800eba0:	3211      	adds	r2, #17
 800eba2:	42a2      	cmp	r2, r4
 800eba4:	bf88      	it	hi
 800eba6:	2300      	movhi	r3, #0
 800eba8:	4418      	add	r0, r3
 800ebaa:	2300      	movs	r3, #0
 800ebac:	4288      	cmp	r0, r1
 800ebae:	d305      	bcc.n	800ebbc <__copybits+0x40>
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	f853 6b04 	ldr.w	r6, [r3], #4
 800ebb6:	f845 6f04 	str.w	r6, [r5, #4]!
 800ebba:	e7eb      	b.n	800eb94 <__copybits+0x18>
 800ebbc:	f840 3b04 	str.w	r3, [r0], #4
 800ebc0:	e7f4      	b.n	800ebac <__copybits+0x30>

0800ebc2 <__any_on>:
 800ebc2:	f100 0214 	add.w	r2, r0, #20
 800ebc6:	6900      	ldr	r0, [r0, #16]
 800ebc8:	114b      	asrs	r3, r1, #5
 800ebca:	4298      	cmp	r0, r3
 800ebcc:	b510      	push	{r4, lr}
 800ebce:	db11      	blt.n	800ebf4 <__any_on+0x32>
 800ebd0:	dd0a      	ble.n	800ebe8 <__any_on+0x26>
 800ebd2:	f011 011f 	ands.w	r1, r1, #31
 800ebd6:	d007      	beq.n	800ebe8 <__any_on+0x26>
 800ebd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ebdc:	fa24 f001 	lsr.w	r0, r4, r1
 800ebe0:	fa00 f101 	lsl.w	r1, r0, r1
 800ebe4:	428c      	cmp	r4, r1
 800ebe6:	d10b      	bne.n	800ec00 <__any_on+0x3e>
 800ebe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d803      	bhi.n	800ebf8 <__any_on+0x36>
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	bd10      	pop	{r4, pc}
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	e7f7      	b.n	800ebe8 <__any_on+0x26>
 800ebf8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebfc:	2900      	cmp	r1, #0
 800ebfe:	d0f5      	beq.n	800ebec <__any_on+0x2a>
 800ec00:	2001      	movs	r0, #1
 800ec02:	e7f6      	b.n	800ebf2 <__any_on+0x30>

0800ec04 <sulp>:
 800ec04:	b570      	push	{r4, r5, r6, lr}
 800ec06:	4604      	mov	r4, r0
 800ec08:	460d      	mov	r5, r1
 800ec0a:	ec45 4b10 	vmov	d0, r4, r5
 800ec0e:	4616      	mov	r6, r2
 800ec10:	f7ff feba 	bl	800e988 <__ulp>
 800ec14:	ec51 0b10 	vmov	r0, r1, d0
 800ec18:	b17e      	cbz	r6, 800ec3a <sulp+0x36>
 800ec1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	dd09      	ble.n	800ec3a <sulp+0x36>
 800ec26:	051b      	lsls	r3, r3, #20
 800ec28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ec2c:	2400      	movs	r4, #0
 800ec2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ec32:	4622      	mov	r2, r4
 800ec34:	462b      	mov	r3, r5
 800ec36:	f7f1 fd0f 	bl	8000658 <__aeabi_dmul>
 800ec3a:	ec41 0b10 	vmov	d0, r0, r1
 800ec3e:	bd70      	pop	{r4, r5, r6, pc}

0800ec40 <_strtod_l>:
 800ec40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec44:	b09f      	sub	sp, #124	@ 0x7c
 800ec46:	460c      	mov	r4, r1
 800ec48:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ec4e:	9005      	str	r0, [sp, #20]
 800ec50:	f04f 0a00 	mov.w	sl, #0
 800ec54:	f04f 0b00 	mov.w	fp, #0
 800ec58:	460a      	mov	r2, r1
 800ec5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec5c:	7811      	ldrb	r1, [r2, #0]
 800ec5e:	292b      	cmp	r1, #43	@ 0x2b
 800ec60:	d04a      	beq.n	800ecf8 <_strtod_l+0xb8>
 800ec62:	d838      	bhi.n	800ecd6 <_strtod_l+0x96>
 800ec64:	290d      	cmp	r1, #13
 800ec66:	d832      	bhi.n	800ecce <_strtod_l+0x8e>
 800ec68:	2908      	cmp	r1, #8
 800ec6a:	d832      	bhi.n	800ecd2 <_strtod_l+0x92>
 800ec6c:	2900      	cmp	r1, #0
 800ec6e:	d03b      	beq.n	800ece8 <_strtod_l+0xa8>
 800ec70:	2200      	movs	r2, #0
 800ec72:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ec76:	782a      	ldrb	r2, [r5, #0]
 800ec78:	2a30      	cmp	r2, #48	@ 0x30
 800ec7a:	f040 80b2 	bne.w	800ede2 <_strtod_l+0x1a2>
 800ec7e:	786a      	ldrb	r2, [r5, #1]
 800ec80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec84:	2a58      	cmp	r2, #88	@ 0x58
 800ec86:	d16e      	bne.n	800ed66 <_strtod_l+0x126>
 800ec88:	9302      	str	r3, [sp, #8]
 800ec8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec8c:	9301      	str	r3, [sp, #4]
 800ec8e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	4a8f      	ldr	r2, [pc, #572]	@ (800eed0 <_strtod_l+0x290>)
 800ec94:	9805      	ldr	r0, [sp, #20]
 800ec96:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ec98:	a919      	add	r1, sp, #100	@ 0x64
 800ec9a:	f001 faff 	bl	801029c <__gethex>
 800ec9e:	f010 060f 	ands.w	r6, r0, #15
 800eca2:	4604      	mov	r4, r0
 800eca4:	d005      	beq.n	800ecb2 <_strtod_l+0x72>
 800eca6:	2e06      	cmp	r6, #6
 800eca8:	d128      	bne.n	800ecfc <_strtod_l+0xbc>
 800ecaa:	3501      	adds	r5, #1
 800ecac:	2300      	movs	r3, #0
 800ecae:	9519      	str	r5, [sp, #100]	@ 0x64
 800ecb0:	930e      	str	r3, [sp, #56]	@ 0x38
 800ecb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f040 858e 	bne.w	800f7d6 <_strtod_l+0xb96>
 800ecba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecbc:	b1cb      	cbz	r3, 800ecf2 <_strtod_l+0xb2>
 800ecbe:	4652      	mov	r2, sl
 800ecc0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ecc4:	ec43 2b10 	vmov	d0, r2, r3
 800ecc8:	b01f      	add	sp, #124	@ 0x7c
 800ecca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecce:	2920      	cmp	r1, #32
 800ecd0:	d1ce      	bne.n	800ec70 <_strtod_l+0x30>
 800ecd2:	3201      	adds	r2, #1
 800ecd4:	e7c1      	b.n	800ec5a <_strtod_l+0x1a>
 800ecd6:	292d      	cmp	r1, #45	@ 0x2d
 800ecd8:	d1ca      	bne.n	800ec70 <_strtod_l+0x30>
 800ecda:	2101      	movs	r1, #1
 800ecdc:	910e      	str	r1, [sp, #56]	@ 0x38
 800ecde:	1c51      	adds	r1, r2, #1
 800ece0:	9119      	str	r1, [sp, #100]	@ 0x64
 800ece2:	7852      	ldrb	r2, [r2, #1]
 800ece4:	2a00      	cmp	r2, #0
 800ece6:	d1c5      	bne.n	800ec74 <_strtod_l+0x34>
 800ece8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ecea:	9419      	str	r4, [sp, #100]	@ 0x64
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f040 8570 	bne.w	800f7d2 <_strtod_l+0xb92>
 800ecf2:	4652      	mov	r2, sl
 800ecf4:	465b      	mov	r3, fp
 800ecf6:	e7e5      	b.n	800ecc4 <_strtod_l+0x84>
 800ecf8:	2100      	movs	r1, #0
 800ecfa:	e7ef      	b.n	800ecdc <_strtod_l+0x9c>
 800ecfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ecfe:	b13a      	cbz	r2, 800ed10 <_strtod_l+0xd0>
 800ed00:	2135      	movs	r1, #53	@ 0x35
 800ed02:	a81c      	add	r0, sp, #112	@ 0x70
 800ed04:	f7ff ff3a 	bl	800eb7c <__copybits>
 800ed08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed0a:	9805      	ldr	r0, [sp, #20]
 800ed0c:	f7ff fb10 	bl	800e330 <_Bfree>
 800ed10:	3e01      	subs	r6, #1
 800ed12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ed14:	2e04      	cmp	r6, #4
 800ed16:	d806      	bhi.n	800ed26 <_strtod_l+0xe6>
 800ed18:	e8df f006 	tbb	[pc, r6]
 800ed1c:	201d0314 	.word	0x201d0314
 800ed20:	14          	.byte	0x14
 800ed21:	00          	.byte	0x00
 800ed22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ed26:	05e1      	lsls	r1, r4, #23
 800ed28:	bf48      	it	mi
 800ed2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ed2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed32:	0d1b      	lsrs	r3, r3, #20
 800ed34:	051b      	lsls	r3, r3, #20
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d1bb      	bne.n	800ecb2 <_strtod_l+0x72>
 800ed3a:	f7fe fb0d 	bl	800d358 <__errno>
 800ed3e:	2322      	movs	r3, #34	@ 0x22
 800ed40:	6003      	str	r3, [r0, #0]
 800ed42:	e7b6      	b.n	800ecb2 <_strtod_l+0x72>
 800ed44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ed48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ed4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ed50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed54:	e7e7      	b.n	800ed26 <_strtod_l+0xe6>
 800ed56:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800eed8 <_strtod_l+0x298>
 800ed5a:	e7e4      	b.n	800ed26 <_strtod_l+0xe6>
 800ed5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ed60:	f04f 3aff 	mov.w	sl, #4294967295
 800ed64:	e7df      	b.n	800ed26 <_strtod_l+0xe6>
 800ed66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed68:	1c5a      	adds	r2, r3, #1
 800ed6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed6c:	785b      	ldrb	r3, [r3, #1]
 800ed6e:	2b30      	cmp	r3, #48	@ 0x30
 800ed70:	d0f9      	beq.n	800ed66 <_strtod_l+0x126>
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d09d      	beq.n	800ecb2 <_strtod_l+0x72>
 800ed76:	2301      	movs	r3, #1
 800ed78:	2700      	movs	r7, #0
 800ed7a:	9308      	str	r3, [sp, #32]
 800ed7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed7e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed80:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ed82:	46b9      	mov	r9, r7
 800ed84:	220a      	movs	r2, #10
 800ed86:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ed88:	7805      	ldrb	r5, [r0, #0]
 800ed8a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ed8e:	b2d9      	uxtb	r1, r3
 800ed90:	2909      	cmp	r1, #9
 800ed92:	d928      	bls.n	800ede6 <_strtod_l+0x1a6>
 800ed94:	494f      	ldr	r1, [pc, #316]	@ (800eed4 <_strtod_l+0x294>)
 800ed96:	2201      	movs	r2, #1
 800ed98:	f001 f9a4 	bl	80100e4 <strncmp>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d032      	beq.n	800ee06 <_strtod_l+0x1c6>
 800eda0:	2000      	movs	r0, #0
 800eda2:	462a      	mov	r2, r5
 800eda4:	900a      	str	r0, [sp, #40]	@ 0x28
 800eda6:	464d      	mov	r5, r9
 800eda8:	4603      	mov	r3, r0
 800edaa:	2a65      	cmp	r2, #101	@ 0x65
 800edac:	d001      	beq.n	800edb2 <_strtod_l+0x172>
 800edae:	2a45      	cmp	r2, #69	@ 0x45
 800edb0:	d114      	bne.n	800eddc <_strtod_l+0x19c>
 800edb2:	b91d      	cbnz	r5, 800edbc <_strtod_l+0x17c>
 800edb4:	9a08      	ldr	r2, [sp, #32]
 800edb6:	4302      	orrs	r2, r0
 800edb8:	d096      	beq.n	800ece8 <_strtod_l+0xa8>
 800edba:	2500      	movs	r5, #0
 800edbc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800edbe:	1c62      	adds	r2, r4, #1
 800edc0:	9219      	str	r2, [sp, #100]	@ 0x64
 800edc2:	7862      	ldrb	r2, [r4, #1]
 800edc4:	2a2b      	cmp	r2, #43	@ 0x2b
 800edc6:	d07a      	beq.n	800eebe <_strtod_l+0x27e>
 800edc8:	2a2d      	cmp	r2, #45	@ 0x2d
 800edca:	d07e      	beq.n	800eeca <_strtod_l+0x28a>
 800edcc:	f04f 0c00 	mov.w	ip, #0
 800edd0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800edd4:	2909      	cmp	r1, #9
 800edd6:	f240 8085 	bls.w	800eee4 <_strtod_l+0x2a4>
 800edda:	9419      	str	r4, [sp, #100]	@ 0x64
 800eddc:	f04f 0800 	mov.w	r8, #0
 800ede0:	e0a5      	b.n	800ef2e <_strtod_l+0x2ee>
 800ede2:	2300      	movs	r3, #0
 800ede4:	e7c8      	b.n	800ed78 <_strtod_l+0x138>
 800ede6:	f1b9 0f08 	cmp.w	r9, #8
 800edea:	bfd8      	it	le
 800edec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800edee:	f100 0001 	add.w	r0, r0, #1
 800edf2:	bfda      	itte	le
 800edf4:	fb02 3301 	mlale	r3, r2, r1, r3
 800edf8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800edfa:	fb02 3707 	mlagt	r7, r2, r7, r3
 800edfe:	f109 0901 	add.w	r9, r9, #1
 800ee02:	9019      	str	r0, [sp, #100]	@ 0x64
 800ee04:	e7bf      	b.n	800ed86 <_strtod_l+0x146>
 800ee06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee08:	1c5a      	adds	r2, r3, #1
 800ee0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee0c:	785a      	ldrb	r2, [r3, #1]
 800ee0e:	f1b9 0f00 	cmp.w	r9, #0
 800ee12:	d03b      	beq.n	800ee8c <_strtod_l+0x24c>
 800ee14:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee16:	464d      	mov	r5, r9
 800ee18:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ee1c:	2b09      	cmp	r3, #9
 800ee1e:	d912      	bls.n	800ee46 <_strtod_l+0x206>
 800ee20:	2301      	movs	r3, #1
 800ee22:	e7c2      	b.n	800edaa <_strtod_l+0x16a>
 800ee24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee26:	1c5a      	adds	r2, r3, #1
 800ee28:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee2a:	785a      	ldrb	r2, [r3, #1]
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	2a30      	cmp	r2, #48	@ 0x30
 800ee30:	d0f8      	beq.n	800ee24 <_strtod_l+0x1e4>
 800ee32:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ee36:	2b08      	cmp	r3, #8
 800ee38:	f200 84d2 	bhi.w	800f7e0 <_strtod_l+0xba0>
 800ee3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee3e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee40:	2000      	movs	r0, #0
 800ee42:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee44:	4605      	mov	r5, r0
 800ee46:	3a30      	subs	r2, #48	@ 0x30
 800ee48:	f100 0301 	add.w	r3, r0, #1
 800ee4c:	d018      	beq.n	800ee80 <_strtod_l+0x240>
 800ee4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee50:	4419      	add	r1, r3
 800ee52:	910a      	str	r1, [sp, #40]	@ 0x28
 800ee54:	462e      	mov	r6, r5
 800ee56:	f04f 0e0a 	mov.w	lr, #10
 800ee5a:	1c71      	adds	r1, r6, #1
 800ee5c:	eba1 0c05 	sub.w	ip, r1, r5
 800ee60:	4563      	cmp	r3, ip
 800ee62:	dc15      	bgt.n	800ee90 <_strtod_l+0x250>
 800ee64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ee68:	182b      	adds	r3, r5, r0
 800ee6a:	2b08      	cmp	r3, #8
 800ee6c:	f105 0501 	add.w	r5, r5, #1
 800ee70:	4405      	add	r5, r0
 800ee72:	dc1a      	bgt.n	800eeaa <_strtod_l+0x26a>
 800ee74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee76:	230a      	movs	r3, #10
 800ee78:	fb03 2301 	mla	r3, r3, r1, r2
 800ee7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee7e:	2300      	movs	r3, #0
 800ee80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee82:	1c51      	adds	r1, r2, #1
 800ee84:	9119      	str	r1, [sp, #100]	@ 0x64
 800ee86:	7852      	ldrb	r2, [r2, #1]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	e7c5      	b.n	800ee18 <_strtod_l+0x1d8>
 800ee8c:	4648      	mov	r0, r9
 800ee8e:	e7ce      	b.n	800ee2e <_strtod_l+0x1ee>
 800ee90:	2e08      	cmp	r6, #8
 800ee92:	dc05      	bgt.n	800eea0 <_strtod_l+0x260>
 800ee94:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ee96:	fb0e f606 	mul.w	r6, lr, r6
 800ee9a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ee9c:	460e      	mov	r6, r1
 800ee9e:	e7dc      	b.n	800ee5a <_strtod_l+0x21a>
 800eea0:	2910      	cmp	r1, #16
 800eea2:	bfd8      	it	le
 800eea4:	fb0e f707 	mulle.w	r7, lr, r7
 800eea8:	e7f8      	b.n	800ee9c <_strtod_l+0x25c>
 800eeaa:	2b0f      	cmp	r3, #15
 800eeac:	bfdc      	itt	le
 800eeae:	230a      	movle	r3, #10
 800eeb0:	fb03 2707 	mlale	r7, r3, r7, r2
 800eeb4:	e7e3      	b.n	800ee7e <_strtod_l+0x23e>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800eeba:	2301      	movs	r3, #1
 800eebc:	e77a      	b.n	800edb4 <_strtod_l+0x174>
 800eebe:	f04f 0c00 	mov.w	ip, #0
 800eec2:	1ca2      	adds	r2, r4, #2
 800eec4:	9219      	str	r2, [sp, #100]	@ 0x64
 800eec6:	78a2      	ldrb	r2, [r4, #2]
 800eec8:	e782      	b.n	800edd0 <_strtod_l+0x190>
 800eeca:	f04f 0c01 	mov.w	ip, #1
 800eece:	e7f8      	b.n	800eec2 <_strtod_l+0x282>
 800eed0:	08012bdc 	.word	0x08012bdc
 800eed4:	08012a4a 	.word	0x08012a4a
 800eed8:	7ff00000 	.word	0x7ff00000
 800eedc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eede:	1c51      	adds	r1, r2, #1
 800eee0:	9119      	str	r1, [sp, #100]	@ 0x64
 800eee2:	7852      	ldrb	r2, [r2, #1]
 800eee4:	2a30      	cmp	r2, #48	@ 0x30
 800eee6:	d0f9      	beq.n	800eedc <_strtod_l+0x29c>
 800eee8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800eeec:	2908      	cmp	r1, #8
 800eeee:	f63f af75 	bhi.w	800eddc <_strtod_l+0x19c>
 800eef2:	3a30      	subs	r2, #48	@ 0x30
 800eef4:	9209      	str	r2, [sp, #36]	@ 0x24
 800eef6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eef8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eefa:	f04f 080a 	mov.w	r8, #10
 800eefe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef00:	1c56      	adds	r6, r2, #1
 800ef02:	9619      	str	r6, [sp, #100]	@ 0x64
 800ef04:	7852      	ldrb	r2, [r2, #1]
 800ef06:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ef0a:	f1be 0f09 	cmp.w	lr, #9
 800ef0e:	d939      	bls.n	800ef84 <_strtod_l+0x344>
 800ef10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ef12:	1a76      	subs	r6, r6, r1
 800ef14:	2e08      	cmp	r6, #8
 800ef16:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ef1a:	dc03      	bgt.n	800ef24 <_strtod_l+0x2e4>
 800ef1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef1e:	4588      	cmp	r8, r1
 800ef20:	bfa8      	it	ge
 800ef22:	4688      	movge	r8, r1
 800ef24:	f1bc 0f00 	cmp.w	ip, #0
 800ef28:	d001      	beq.n	800ef2e <_strtod_l+0x2ee>
 800ef2a:	f1c8 0800 	rsb	r8, r8, #0
 800ef2e:	2d00      	cmp	r5, #0
 800ef30:	d14e      	bne.n	800efd0 <_strtod_l+0x390>
 800ef32:	9908      	ldr	r1, [sp, #32]
 800ef34:	4308      	orrs	r0, r1
 800ef36:	f47f aebc 	bne.w	800ecb2 <_strtod_l+0x72>
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	f47f aed4 	bne.w	800ece8 <_strtod_l+0xa8>
 800ef40:	2a69      	cmp	r2, #105	@ 0x69
 800ef42:	d028      	beq.n	800ef96 <_strtod_l+0x356>
 800ef44:	dc25      	bgt.n	800ef92 <_strtod_l+0x352>
 800ef46:	2a49      	cmp	r2, #73	@ 0x49
 800ef48:	d025      	beq.n	800ef96 <_strtod_l+0x356>
 800ef4a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ef4c:	f47f aecc 	bne.w	800ece8 <_strtod_l+0xa8>
 800ef50:	499a      	ldr	r1, [pc, #616]	@ (800f1bc <_strtod_l+0x57c>)
 800ef52:	a819      	add	r0, sp, #100	@ 0x64
 800ef54:	f001 fbc4 	bl	80106e0 <__match>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	f43f aec5 	beq.w	800ece8 <_strtod_l+0xa8>
 800ef5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	2b28      	cmp	r3, #40	@ 0x28
 800ef64:	d12e      	bne.n	800efc4 <_strtod_l+0x384>
 800ef66:	4996      	ldr	r1, [pc, #600]	@ (800f1c0 <_strtod_l+0x580>)
 800ef68:	aa1c      	add	r2, sp, #112	@ 0x70
 800ef6a:	a819      	add	r0, sp, #100	@ 0x64
 800ef6c:	f001 fbcc 	bl	8010708 <__hexnan>
 800ef70:	2805      	cmp	r0, #5
 800ef72:	d127      	bne.n	800efc4 <_strtod_l+0x384>
 800ef74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef76:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ef7a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ef7e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ef82:	e696      	b.n	800ecb2 <_strtod_l+0x72>
 800ef84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef86:	fb08 2101 	mla	r1, r8, r1, r2
 800ef8a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ef8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef90:	e7b5      	b.n	800eefe <_strtod_l+0x2be>
 800ef92:	2a6e      	cmp	r2, #110	@ 0x6e
 800ef94:	e7da      	b.n	800ef4c <_strtod_l+0x30c>
 800ef96:	498b      	ldr	r1, [pc, #556]	@ (800f1c4 <_strtod_l+0x584>)
 800ef98:	a819      	add	r0, sp, #100	@ 0x64
 800ef9a:	f001 fba1 	bl	80106e0 <__match>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	f43f aea2 	beq.w	800ece8 <_strtod_l+0xa8>
 800efa4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efa6:	4988      	ldr	r1, [pc, #544]	@ (800f1c8 <_strtod_l+0x588>)
 800efa8:	3b01      	subs	r3, #1
 800efaa:	a819      	add	r0, sp, #100	@ 0x64
 800efac:	9319      	str	r3, [sp, #100]	@ 0x64
 800efae:	f001 fb97 	bl	80106e0 <__match>
 800efb2:	b910      	cbnz	r0, 800efba <_strtod_l+0x37a>
 800efb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efb6:	3301      	adds	r3, #1
 800efb8:	9319      	str	r3, [sp, #100]	@ 0x64
 800efba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f1d8 <_strtod_l+0x598>
 800efbe:	f04f 0a00 	mov.w	sl, #0
 800efc2:	e676      	b.n	800ecb2 <_strtod_l+0x72>
 800efc4:	4881      	ldr	r0, [pc, #516]	@ (800f1cc <_strtod_l+0x58c>)
 800efc6:	f001 f8df 	bl	8010188 <nan>
 800efca:	ec5b ab10 	vmov	sl, fp, d0
 800efce:	e670      	b.n	800ecb2 <_strtod_l+0x72>
 800efd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efd2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800efd4:	eba8 0303 	sub.w	r3, r8, r3
 800efd8:	f1b9 0f00 	cmp.w	r9, #0
 800efdc:	bf08      	it	eq
 800efde:	46a9      	moveq	r9, r5
 800efe0:	2d10      	cmp	r5, #16
 800efe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800efe4:	462c      	mov	r4, r5
 800efe6:	bfa8      	it	ge
 800efe8:	2410      	movge	r4, #16
 800efea:	f7f1 fabb 	bl	8000564 <__aeabi_ui2d>
 800efee:	2d09      	cmp	r5, #9
 800eff0:	4682      	mov	sl, r0
 800eff2:	468b      	mov	fp, r1
 800eff4:	dc13      	bgt.n	800f01e <_strtod_l+0x3de>
 800eff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f43f ae5a 	beq.w	800ecb2 <_strtod_l+0x72>
 800effe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f000:	dd78      	ble.n	800f0f4 <_strtod_l+0x4b4>
 800f002:	2b16      	cmp	r3, #22
 800f004:	dc5f      	bgt.n	800f0c6 <_strtod_l+0x486>
 800f006:	4972      	ldr	r1, [pc, #456]	@ (800f1d0 <_strtod_l+0x590>)
 800f008:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f010:	4652      	mov	r2, sl
 800f012:	465b      	mov	r3, fp
 800f014:	f7f1 fb20 	bl	8000658 <__aeabi_dmul>
 800f018:	4682      	mov	sl, r0
 800f01a:	468b      	mov	fp, r1
 800f01c:	e649      	b.n	800ecb2 <_strtod_l+0x72>
 800f01e:	4b6c      	ldr	r3, [pc, #432]	@ (800f1d0 <_strtod_l+0x590>)
 800f020:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f024:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f028:	f7f1 fb16 	bl	8000658 <__aeabi_dmul>
 800f02c:	4682      	mov	sl, r0
 800f02e:	4638      	mov	r0, r7
 800f030:	468b      	mov	fp, r1
 800f032:	f7f1 fa97 	bl	8000564 <__aeabi_ui2d>
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4650      	mov	r0, sl
 800f03c:	4659      	mov	r1, fp
 800f03e:	f7f1 f955 	bl	80002ec <__adddf3>
 800f042:	2d0f      	cmp	r5, #15
 800f044:	4682      	mov	sl, r0
 800f046:	468b      	mov	fp, r1
 800f048:	ddd5      	ble.n	800eff6 <_strtod_l+0x3b6>
 800f04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f04c:	1b2c      	subs	r4, r5, r4
 800f04e:	441c      	add	r4, r3
 800f050:	2c00      	cmp	r4, #0
 800f052:	f340 8093 	ble.w	800f17c <_strtod_l+0x53c>
 800f056:	f014 030f 	ands.w	r3, r4, #15
 800f05a:	d00a      	beq.n	800f072 <_strtod_l+0x432>
 800f05c:	495c      	ldr	r1, [pc, #368]	@ (800f1d0 <_strtod_l+0x590>)
 800f05e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f062:	4652      	mov	r2, sl
 800f064:	465b      	mov	r3, fp
 800f066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f06a:	f7f1 faf5 	bl	8000658 <__aeabi_dmul>
 800f06e:	4682      	mov	sl, r0
 800f070:	468b      	mov	fp, r1
 800f072:	f034 040f 	bics.w	r4, r4, #15
 800f076:	d073      	beq.n	800f160 <_strtod_l+0x520>
 800f078:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f07c:	dd49      	ble.n	800f112 <_strtod_l+0x4d2>
 800f07e:	2400      	movs	r4, #0
 800f080:	46a0      	mov	r8, r4
 800f082:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f084:	46a1      	mov	r9, r4
 800f086:	9a05      	ldr	r2, [sp, #20]
 800f088:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f1d8 <_strtod_l+0x598>
 800f08c:	2322      	movs	r3, #34	@ 0x22
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	f04f 0a00 	mov.w	sl, #0
 800f094:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f096:	2b00      	cmp	r3, #0
 800f098:	f43f ae0b 	beq.w	800ecb2 <_strtod_l+0x72>
 800f09c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f09e:	9805      	ldr	r0, [sp, #20]
 800f0a0:	f7ff f946 	bl	800e330 <_Bfree>
 800f0a4:	9805      	ldr	r0, [sp, #20]
 800f0a6:	4649      	mov	r1, r9
 800f0a8:	f7ff f942 	bl	800e330 <_Bfree>
 800f0ac:	9805      	ldr	r0, [sp, #20]
 800f0ae:	4641      	mov	r1, r8
 800f0b0:	f7ff f93e 	bl	800e330 <_Bfree>
 800f0b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f0b6:	9805      	ldr	r0, [sp, #20]
 800f0b8:	f7ff f93a 	bl	800e330 <_Bfree>
 800f0bc:	9805      	ldr	r0, [sp, #20]
 800f0be:	4621      	mov	r1, r4
 800f0c0:	f7ff f936 	bl	800e330 <_Bfree>
 800f0c4:	e5f5      	b.n	800ecb2 <_strtod_l+0x72>
 800f0c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	dbbc      	blt.n	800f04a <_strtod_l+0x40a>
 800f0d0:	4c3f      	ldr	r4, [pc, #252]	@ (800f1d0 <_strtod_l+0x590>)
 800f0d2:	f1c5 050f 	rsb	r5, r5, #15
 800f0d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f0da:	4652      	mov	r2, sl
 800f0dc:	465b      	mov	r3, fp
 800f0de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0e2:	f7f1 fab9 	bl	8000658 <__aeabi_dmul>
 800f0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0e8:	1b5d      	subs	r5, r3, r5
 800f0ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f0ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f0f2:	e78f      	b.n	800f014 <_strtod_l+0x3d4>
 800f0f4:	3316      	adds	r3, #22
 800f0f6:	dba8      	blt.n	800f04a <_strtod_l+0x40a>
 800f0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0fa:	eba3 0808 	sub.w	r8, r3, r8
 800f0fe:	4b34      	ldr	r3, [pc, #208]	@ (800f1d0 <_strtod_l+0x590>)
 800f100:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f104:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f108:	4650      	mov	r0, sl
 800f10a:	4659      	mov	r1, fp
 800f10c:	f7f1 fbce 	bl	80008ac <__aeabi_ddiv>
 800f110:	e782      	b.n	800f018 <_strtod_l+0x3d8>
 800f112:	2300      	movs	r3, #0
 800f114:	4f2f      	ldr	r7, [pc, #188]	@ (800f1d4 <_strtod_l+0x594>)
 800f116:	1124      	asrs	r4, r4, #4
 800f118:	4650      	mov	r0, sl
 800f11a:	4659      	mov	r1, fp
 800f11c:	461e      	mov	r6, r3
 800f11e:	2c01      	cmp	r4, #1
 800f120:	dc21      	bgt.n	800f166 <_strtod_l+0x526>
 800f122:	b10b      	cbz	r3, 800f128 <_strtod_l+0x4e8>
 800f124:	4682      	mov	sl, r0
 800f126:	468b      	mov	fp, r1
 800f128:	492a      	ldr	r1, [pc, #168]	@ (800f1d4 <_strtod_l+0x594>)
 800f12a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f12e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f132:	4652      	mov	r2, sl
 800f134:	465b      	mov	r3, fp
 800f136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f13a:	f7f1 fa8d 	bl	8000658 <__aeabi_dmul>
 800f13e:	4b26      	ldr	r3, [pc, #152]	@ (800f1d8 <_strtod_l+0x598>)
 800f140:	460a      	mov	r2, r1
 800f142:	400b      	ands	r3, r1
 800f144:	4925      	ldr	r1, [pc, #148]	@ (800f1dc <_strtod_l+0x59c>)
 800f146:	428b      	cmp	r3, r1
 800f148:	4682      	mov	sl, r0
 800f14a:	d898      	bhi.n	800f07e <_strtod_l+0x43e>
 800f14c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f150:	428b      	cmp	r3, r1
 800f152:	bf86      	itte	hi
 800f154:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f1e0 <_strtod_l+0x5a0>
 800f158:	f04f 3aff 	movhi.w	sl, #4294967295
 800f15c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f160:	2300      	movs	r3, #0
 800f162:	9308      	str	r3, [sp, #32]
 800f164:	e076      	b.n	800f254 <_strtod_l+0x614>
 800f166:	07e2      	lsls	r2, r4, #31
 800f168:	d504      	bpl.n	800f174 <_strtod_l+0x534>
 800f16a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f16e:	f7f1 fa73 	bl	8000658 <__aeabi_dmul>
 800f172:	2301      	movs	r3, #1
 800f174:	3601      	adds	r6, #1
 800f176:	1064      	asrs	r4, r4, #1
 800f178:	3708      	adds	r7, #8
 800f17a:	e7d0      	b.n	800f11e <_strtod_l+0x4de>
 800f17c:	d0f0      	beq.n	800f160 <_strtod_l+0x520>
 800f17e:	4264      	negs	r4, r4
 800f180:	f014 020f 	ands.w	r2, r4, #15
 800f184:	d00a      	beq.n	800f19c <_strtod_l+0x55c>
 800f186:	4b12      	ldr	r3, [pc, #72]	@ (800f1d0 <_strtod_l+0x590>)
 800f188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f18c:	4650      	mov	r0, sl
 800f18e:	4659      	mov	r1, fp
 800f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f194:	f7f1 fb8a 	bl	80008ac <__aeabi_ddiv>
 800f198:	4682      	mov	sl, r0
 800f19a:	468b      	mov	fp, r1
 800f19c:	1124      	asrs	r4, r4, #4
 800f19e:	d0df      	beq.n	800f160 <_strtod_l+0x520>
 800f1a0:	2c1f      	cmp	r4, #31
 800f1a2:	dd1f      	ble.n	800f1e4 <_strtod_l+0x5a4>
 800f1a4:	2400      	movs	r4, #0
 800f1a6:	46a0      	mov	r8, r4
 800f1a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f1aa:	46a1      	mov	r9, r4
 800f1ac:	9a05      	ldr	r2, [sp, #20]
 800f1ae:	2322      	movs	r3, #34	@ 0x22
 800f1b0:	f04f 0a00 	mov.w	sl, #0
 800f1b4:	f04f 0b00 	mov.w	fp, #0
 800f1b8:	6013      	str	r3, [r2, #0]
 800f1ba:	e76b      	b.n	800f094 <_strtod_l+0x454>
 800f1bc:	080128a2 	.word	0x080128a2
 800f1c0:	08012bc8 	.word	0x08012bc8
 800f1c4:	0801289a 	.word	0x0801289a
 800f1c8:	0801297e 	.word	0x0801297e
 800f1cc:	0801297a 	.word	0x0801297a
 800f1d0:	08012b00 	.word	0x08012b00
 800f1d4:	08012ad8 	.word	0x08012ad8
 800f1d8:	7ff00000 	.word	0x7ff00000
 800f1dc:	7ca00000 	.word	0x7ca00000
 800f1e0:	7fefffff 	.word	0x7fefffff
 800f1e4:	f014 0310 	ands.w	r3, r4, #16
 800f1e8:	bf18      	it	ne
 800f1ea:	236a      	movne	r3, #106	@ 0x6a
 800f1ec:	4ea9      	ldr	r6, [pc, #676]	@ (800f494 <_strtod_l+0x854>)
 800f1ee:	9308      	str	r3, [sp, #32]
 800f1f0:	4650      	mov	r0, sl
 800f1f2:	4659      	mov	r1, fp
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	07e7      	lsls	r7, r4, #31
 800f1f8:	d504      	bpl.n	800f204 <_strtod_l+0x5c4>
 800f1fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f1fe:	f7f1 fa2b 	bl	8000658 <__aeabi_dmul>
 800f202:	2301      	movs	r3, #1
 800f204:	1064      	asrs	r4, r4, #1
 800f206:	f106 0608 	add.w	r6, r6, #8
 800f20a:	d1f4      	bne.n	800f1f6 <_strtod_l+0x5b6>
 800f20c:	b10b      	cbz	r3, 800f212 <_strtod_l+0x5d2>
 800f20e:	4682      	mov	sl, r0
 800f210:	468b      	mov	fp, r1
 800f212:	9b08      	ldr	r3, [sp, #32]
 800f214:	b1b3      	cbz	r3, 800f244 <_strtod_l+0x604>
 800f216:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f21a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f21e:	2b00      	cmp	r3, #0
 800f220:	4659      	mov	r1, fp
 800f222:	dd0f      	ble.n	800f244 <_strtod_l+0x604>
 800f224:	2b1f      	cmp	r3, #31
 800f226:	dd56      	ble.n	800f2d6 <_strtod_l+0x696>
 800f228:	2b34      	cmp	r3, #52	@ 0x34
 800f22a:	bfde      	ittt	le
 800f22c:	f04f 33ff 	movle.w	r3, #4294967295
 800f230:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f234:	4093      	lslle	r3, r2
 800f236:	f04f 0a00 	mov.w	sl, #0
 800f23a:	bfcc      	ite	gt
 800f23c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f240:	ea03 0b01 	andle.w	fp, r3, r1
 800f244:	2200      	movs	r2, #0
 800f246:	2300      	movs	r3, #0
 800f248:	4650      	mov	r0, sl
 800f24a:	4659      	mov	r1, fp
 800f24c:	f7f1 fc6c 	bl	8000b28 <__aeabi_dcmpeq>
 800f250:	2800      	cmp	r0, #0
 800f252:	d1a7      	bne.n	800f1a4 <_strtod_l+0x564>
 800f254:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f25a:	9805      	ldr	r0, [sp, #20]
 800f25c:	462b      	mov	r3, r5
 800f25e:	464a      	mov	r2, r9
 800f260:	f7ff f8ce 	bl	800e400 <__s2b>
 800f264:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f266:	2800      	cmp	r0, #0
 800f268:	f43f af09 	beq.w	800f07e <_strtod_l+0x43e>
 800f26c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f26e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f270:	2a00      	cmp	r2, #0
 800f272:	eba3 0308 	sub.w	r3, r3, r8
 800f276:	bfa8      	it	ge
 800f278:	2300      	movge	r3, #0
 800f27a:	9312      	str	r3, [sp, #72]	@ 0x48
 800f27c:	2400      	movs	r4, #0
 800f27e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f282:	9316      	str	r3, [sp, #88]	@ 0x58
 800f284:	46a0      	mov	r8, r4
 800f286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f288:	9805      	ldr	r0, [sp, #20]
 800f28a:	6859      	ldr	r1, [r3, #4]
 800f28c:	f7ff f810 	bl	800e2b0 <_Balloc>
 800f290:	4681      	mov	r9, r0
 800f292:	2800      	cmp	r0, #0
 800f294:	f43f aef7 	beq.w	800f086 <_strtod_l+0x446>
 800f298:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f29a:	691a      	ldr	r2, [r3, #16]
 800f29c:	3202      	adds	r2, #2
 800f29e:	f103 010c 	add.w	r1, r3, #12
 800f2a2:	0092      	lsls	r2, r2, #2
 800f2a4:	300c      	adds	r0, #12
 800f2a6:	f000 ff61 	bl	801016c <memcpy>
 800f2aa:	ec4b ab10 	vmov	d0, sl, fp
 800f2ae:	9805      	ldr	r0, [sp, #20]
 800f2b0:	aa1c      	add	r2, sp, #112	@ 0x70
 800f2b2:	a91b      	add	r1, sp, #108	@ 0x6c
 800f2b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f2b8:	f7ff fbd6 	bl	800ea68 <__d2b>
 800f2bc:	901a      	str	r0, [sp, #104]	@ 0x68
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	f43f aee1 	beq.w	800f086 <_strtod_l+0x446>
 800f2c4:	9805      	ldr	r0, [sp, #20]
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	f7ff f930 	bl	800e52c <__i2b>
 800f2cc:	4680      	mov	r8, r0
 800f2ce:	b948      	cbnz	r0, 800f2e4 <_strtod_l+0x6a4>
 800f2d0:	f04f 0800 	mov.w	r8, #0
 800f2d4:	e6d7      	b.n	800f086 <_strtod_l+0x446>
 800f2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2da:	fa02 f303 	lsl.w	r3, r2, r3
 800f2de:	ea03 0a0a 	and.w	sl, r3, sl
 800f2e2:	e7af      	b.n	800f244 <_strtod_l+0x604>
 800f2e4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f2e6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f2e8:	2d00      	cmp	r5, #0
 800f2ea:	bfab      	itete	ge
 800f2ec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f2ee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f2f0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f2f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f2f4:	bfac      	ite	ge
 800f2f6:	18ef      	addge	r7, r5, r3
 800f2f8:	1b5e      	sublt	r6, r3, r5
 800f2fa:	9b08      	ldr	r3, [sp, #32]
 800f2fc:	1aed      	subs	r5, r5, r3
 800f2fe:	4415      	add	r5, r2
 800f300:	4b65      	ldr	r3, [pc, #404]	@ (800f498 <_strtod_l+0x858>)
 800f302:	3d01      	subs	r5, #1
 800f304:	429d      	cmp	r5, r3
 800f306:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f30a:	da50      	bge.n	800f3ae <_strtod_l+0x76e>
 800f30c:	1b5b      	subs	r3, r3, r5
 800f30e:	2b1f      	cmp	r3, #31
 800f310:	eba2 0203 	sub.w	r2, r2, r3
 800f314:	f04f 0101 	mov.w	r1, #1
 800f318:	dc3d      	bgt.n	800f396 <_strtod_l+0x756>
 800f31a:	fa01 f303 	lsl.w	r3, r1, r3
 800f31e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f320:	2300      	movs	r3, #0
 800f322:	9310      	str	r3, [sp, #64]	@ 0x40
 800f324:	18bd      	adds	r5, r7, r2
 800f326:	9b08      	ldr	r3, [sp, #32]
 800f328:	42af      	cmp	r7, r5
 800f32a:	4416      	add	r6, r2
 800f32c:	441e      	add	r6, r3
 800f32e:	463b      	mov	r3, r7
 800f330:	bfa8      	it	ge
 800f332:	462b      	movge	r3, r5
 800f334:	42b3      	cmp	r3, r6
 800f336:	bfa8      	it	ge
 800f338:	4633      	movge	r3, r6
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	bfc2      	ittt	gt
 800f33e:	1aed      	subgt	r5, r5, r3
 800f340:	1af6      	subgt	r6, r6, r3
 800f342:	1aff      	subgt	r7, r7, r3
 800f344:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f346:	2b00      	cmp	r3, #0
 800f348:	dd16      	ble.n	800f378 <_strtod_l+0x738>
 800f34a:	4641      	mov	r1, r8
 800f34c:	9805      	ldr	r0, [sp, #20]
 800f34e:	461a      	mov	r2, r3
 800f350:	f7ff f9a4 	bl	800e69c <__pow5mult>
 800f354:	4680      	mov	r8, r0
 800f356:	2800      	cmp	r0, #0
 800f358:	d0ba      	beq.n	800f2d0 <_strtod_l+0x690>
 800f35a:	4601      	mov	r1, r0
 800f35c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f35e:	9805      	ldr	r0, [sp, #20]
 800f360:	f7ff f8fa 	bl	800e558 <__multiply>
 800f364:	900a      	str	r0, [sp, #40]	@ 0x28
 800f366:	2800      	cmp	r0, #0
 800f368:	f43f ae8d 	beq.w	800f086 <_strtod_l+0x446>
 800f36c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f36e:	9805      	ldr	r0, [sp, #20]
 800f370:	f7fe ffde 	bl	800e330 <_Bfree>
 800f374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f376:	931a      	str	r3, [sp, #104]	@ 0x68
 800f378:	2d00      	cmp	r5, #0
 800f37a:	dc1d      	bgt.n	800f3b8 <_strtod_l+0x778>
 800f37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f37e:	2b00      	cmp	r3, #0
 800f380:	dd23      	ble.n	800f3ca <_strtod_l+0x78a>
 800f382:	4649      	mov	r1, r9
 800f384:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f386:	9805      	ldr	r0, [sp, #20]
 800f388:	f7ff f988 	bl	800e69c <__pow5mult>
 800f38c:	4681      	mov	r9, r0
 800f38e:	b9e0      	cbnz	r0, 800f3ca <_strtod_l+0x78a>
 800f390:	f04f 0900 	mov.w	r9, #0
 800f394:	e677      	b.n	800f086 <_strtod_l+0x446>
 800f396:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f39a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f39e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f3a2:	35e2      	adds	r5, #226	@ 0xe2
 800f3a4:	fa01 f305 	lsl.w	r3, r1, r5
 800f3a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f3ac:	e7ba      	b.n	800f324 <_strtod_l+0x6e4>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f3b6:	e7b5      	b.n	800f324 <_strtod_l+0x6e4>
 800f3b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3ba:	9805      	ldr	r0, [sp, #20]
 800f3bc:	462a      	mov	r2, r5
 800f3be:	f7ff f9c7 	bl	800e750 <__lshift>
 800f3c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d1d9      	bne.n	800f37c <_strtod_l+0x73c>
 800f3c8:	e65d      	b.n	800f086 <_strtod_l+0x446>
 800f3ca:	2e00      	cmp	r6, #0
 800f3cc:	dd07      	ble.n	800f3de <_strtod_l+0x79e>
 800f3ce:	4649      	mov	r1, r9
 800f3d0:	9805      	ldr	r0, [sp, #20]
 800f3d2:	4632      	mov	r2, r6
 800f3d4:	f7ff f9bc 	bl	800e750 <__lshift>
 800f3d8:	4681      	mov	r9, r0
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	d0d8      	beq.n	800f390 <_strtod_l+0x750>
 800f3de:	2f00      	cmp	r7, #0
 800f3e0:	dd08      	ble.n	800f3f4 <_strtod_l+0x7b4>
 800f3e2:	4641      	mov	r1, r8
 800f3e4:	9805      	ldr	r0, [sp, #20]
 800f3e6:	463a      	mov	r2, r7
 800f3e8:	f7ff f9b2 	bl	800e750 <__lshift>
 800f3ec:	4680      	mov	r8, r0
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	f43f ae49 	beq.w	800f086 <_strtod_l+0x446>
 800f3f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3f6:	9805      	ldr	r0, [sp, #20]
 800f3f8:	464a      	mov	r2, r9
 800f3fa:	f7ff fa31 	bl	800e860 <__mdiff>
 800f3fe:	4604      	mov	r4, r0
 800f400:	2800      	cmp	r0, #0
 800f402:	f43f ae40 	beq.w	800f086 <_strtod_l+0x446>
 800f406:	68c3      	ldr	r3, [r0, #12]
 800f408:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f40a:	2300      	movs	r3, #0
 800f40c:	60c3      	str	r3, [r0, #12]
 800f40e:	4641      	mov	r1, r8
 800f410:	f7ff fa0a 	bl	800e828 <__mcmp>
 800f414:	2800      	cmp	r0, #0
 800f416:	da45      	bge.n	800f4a4 <_strtod_l+0x864>
 800f418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f41a:	ea53 030a 	orrs.w	r3, r3, sl
 800f41e:	d16b      	bne.n	800f4f8 <_strtod_l+0x8b8>
 800f420:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f424:	2b00      	cmp	r3, #0
 800f426:	d167      	bne.n	800f4f8 <_strtod_l+0x8b8>
 800f428:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f42c:	0d1b      	lsrs	r3, r3, #20
 800f42e:	051b      	lsls	r3, r3, #20
 800f430:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f434:	d960      	bls.n	800f4f8 <_strtod_l+0x8b8>
 800f436:	6963      	ldr	r3, [r4, #20]
 800f438:	b913      	cbnz	r3, 800f440 <_strtod_l+0x800>
 800f43a:	6923      	ldr	r3, [r4, #16]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	dd5b      	ble.n	800f4f8 <_strtod_l+0x8b8>
 800f440:	4621      	mov	r1, r4
 800f442:	2201      	movs	r2, #1
 800f444:	9805      	ldr	r0, [sp, #20]
 800f446:	f7ff f983 	bl	800e750 <__lshift>
 800f44a:	4641      	mov	r1, r8
 800f44c:	4604      	mov	r4, r0
 800f44e:	f7ff f9eb 	bl	800e828 <__mcmp>
 800f452:	2800      	cmp	r0, #0
 800f454:	dd50      	ble.n	800f4f8 <_strtod_l+0x8b8>
 800f456:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f45a:	9a08      	ldr	r2, [sp, #32]
 800f45c:	0d1b      	lsrs	r3, r3, #20
 800f45e:	051b      	lsls	r3, r3, #20
 800f460:	2a00      	cmp	r2, #0
 800f462:	d06a      	beq.n	800f53a <_strtod_l+0x8fa>
 800f464:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f468:	d867      	bhi.n	800f53a <_strtod_l+0x8fa>
 800f46a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f46e:	f67f ae9d 	bls.w	800f1ac <_strtod_l+0x56c>
 800f472:	4b0a      	ldr	r3, [pc, #40]	@ (800f49c <_strtod_l+0x85c>)
 800f474:	4650      	mov	r0, sl
 800f476:	4659      	mov	r1, fp
 800f478:	2200      	movs	r2, #0
 800f47a:	f7f1 f8ed 	bl	8000658 <__aeabi_dmul>
 800f47e:	4b08      	ldr	r3, [pc, #32]	@ (800f4a0 <_strtod_l+0x860>)
 800f480:	400b      	ands	r3, r1
 800f482:	4682      	mov	sl, r0
 800f484:	468b      	mov	fp, r1
 800f486:	2b00      	cmp	r3, #0
 800f488:	f47f ae08 	bne.w	800f09c <_strtod_l+0x45c>
 800f48c:	9a05      	ldr	r2, [sp, #20]
 800f48e:	2322      	movs	r3, #34	@ 0x22
 800f490:	6013      	str	r3, [r2, #0]
 800f492:	e603      	b.n	800f09c <_strtod_l+0x45c>
 800f494:	08012bf0 	.word	0x08012bf0
 800f498:	fffffc02 	.word	0xfffffc02
 800f49c:	39500000 	.word	0x39500000
 800f4a0:	7ff00000 	.word	0x7ff00000
 800f4a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f4a8:	d165      	bne.n	800f576 <_strtod_l+0x936>
 800f4aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f4ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4b0:	b35a      	cbz	r2, 800f50a <_strtod_l+0x8ca>
 800f4b2:	4a9f      	ldr	r2, [pc, #636]	@ (800f730 <_strtod_l+0xaf0>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d12b      	bne.n	800f510 <_strtod_l+0x8d0>
 800f4b8:	9b08      	ldr	r3, [sp, #32]
 800f4ba:	4651      	mov	r1, sl
 800f4bc:	b303      	cbz	r3, 800f500 <_strtod_l+0x8c0>
 800f4be:	4b9d      	ldr	r3, [pc, #628]	@ (800f734 <_strtod_l+0xaf4>)
 800f4c0:	465a      	mov	r2, fp
 800f4c2:	4013      	ands	r3, r2
 800f4c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f4cc:	d81b      	bhi.n	800f506 <_strtod_l+0x8c6>
 800f4ce:	0d1b      	lsrs	r3, r3, #20
 800f4d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800f4d8:	4299      	cmp	r1, r3
 800f4da:	d119      	bne.n	800f510 <_strtod_l+0x8d0>
 800f4dc:	4b96      	ldr	r3, [pc, #600]	@ (800f738 <_strtod_l+0xaf8>)
 800f4de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d102      	bne.n	800f4ea <_strtod_l+0x8aa>
 800f4e4:	3101      	adds	r1, #1
 800f4e6:	f43f adce 	beq.w	800f086 <_strtod_l+0x446>
 800f4ea:	4b92      	ldr	r3, [pc, #584]	@ (800f734 <_strtod_l+0xaf4>)
 800f4ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4ee:	401a      	ands	r2, r3
 800f4f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f4f4:	f04f 0a00 	mov.w	sl, #0
 800f4f8:	9b08      	ldr	r3, [sp, #32]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d1b9      	bne.n	800f472 <_strtod_l+0x832>
 800f4fe:	e5cd      	b.n	800f09c <_strtod_l+0x45c>
 800f500:	f04f 33ff 	mov.w	r3, #4294967295
 800f504:	e7e8      	b.n	800f4d8 <_strtod_l+0x898>
 800f506:	4613      	mov	r3, r2
 800f508:	e7e6      	b.n	800f4d8 <_strtod_l+0x898>
 800f50a:	ea53 030a 	orrs.w	r3, r3, sl
 800f50e:	d0a2      	beq.n	800f456 <_strtod_l+0x816>
 800f510:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f512:	b1db      	cbz	r3, 800f54c <_strtod_l+0x90c>
 800f514:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f516:	4213      	tst	r3, r2
 800f518:	d0ee      	beq.n	800f4f8 <_strtod_l+0x8b8>
 800f51a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f51c:	9a08      	ldr	r2, [sp, #32]
 800f51e:	4650      	mov	r0, sl
 800f520:	4659      	mov	r1, fp
 800f522:	b1bb      	cbz	r3, 800f554 <_strtod_l+0x914>
 800f524:	f7ff fb6e 	bl	800ec04 <sulp>
 800f528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f52c:	ec53 2b10 	vmov	r2, r3, d0
 800f530:	f7f0 fedc 	bl	80002ec <__adddf3>
 800f534:	4682      	mov	sl, r0
 800f536:	468b      	mov	fp, r1
 800f538:	e7de      	b.n	800f4f8 <_strtod_l+0x8b8>
 800f53a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f53e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f542:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f546:	f04f 3aff 	mov.w	sl, #4294967295
 800f54a:	e7d5      	b.n	800f4f8 <_strtod_l+0x8b8>
 800f54c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f54e:	ea13 0f0a 	tst.w	r3, sl
 800f552:	e7e1      	b.n	800f518 <_strtod_l+0x8d8>
 800f554:	f7ff fb56 	bl	800ec04 <sulp>
 800f558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f55c:	ec53 2b10 	vmov	r2, r3, d0
 800f560:	f7f0 fec2 	bl	80002e8 <__aeabi_dsub>
 800f564:	2200      	movs	r2, #0
 800f566:	2300      	movs	r3, #0
 800f568:	4682      	mov	sl, r0
 800f56a:	468b      	mov	fp, r1
 800f56c:	f7f1 fadc 	bl	8000b28 <__aeabi_dcmpeq>
 800f570:	2800      	cmp	r0, #0
 800f572:	d0c1      	beq.n	800f4f8 <_strtod_l+0x8b8>
 800f574:	e61a      	b.n	800f1ac <_strtod_l+0x56c>
 800f576:	4641      	mov	r1, r8
 800f578:	4620      	mov	r0, r4
 800f57a:	f7ff facd 	bl	800eb18 <__ratio>
 800f57e:	ec57 6b10 	vmov	r6, r7, d0
 800f582:	2200      	movs	r2, #0
 800f584:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f588:	4630      	mov	r0, r6
 800f58a:	4639      	mov	r1, r7
 800f58c:	f7f1 fae0 	bl	8000b50 <__aeabi_dcmple>
 800f590:	2800      	cmp	r0, #0
 800f592:	d06f      	beq.n	800f674 <_strtod_l+0xa34>
 800f594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f596:	2b00      	cmp	r3, #0
 800f598:	d17a      	bne.n	800f690 <_strtod_l+0xa50>
 800f59a:	f1ba 0f00 	cmp.w	sl, #0
 800f59e:	d158      	bne.n	800f652 <_strtod_l+0xa12>
 800f5a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d15a      	bne.n	800f660 <_strtod_l+0xa20>
 800f5aa:	4b64      	ldr	r3, [pc, #400]	@ (800f73c <_strtod_l+0xafc>)
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	4639      	mov	r1, r7
 800f5b2:	f7f1 fac3 	bl	8000b3c <__aeabi_dcmplt>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d159      	bne.n	800f66e <_strtod_l+0xa2e>
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	4639      	mov	r1, r7
 800f5be:	4b60      	ldr	r3, [pc, #384]	@ (800f740 <_strtod_l+0xb00>)
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f7f1 f849 	bl	8000658 <__aeabi_dmul>
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	460f      	mov	r7, r1
 800f5ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f5ce:	9606      	str	r6, [sp, #24]
 800f5d0:	9307      	str	r3, [sp, #28]
 800f5d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5d6:	4d57      	ldr	r5, [pc, #348]	@ (800f734 <_strtod_l+0xaf4>)
 800f5d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f5dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5de:	401d      	ands	r5, r3
 800f5e0:	4b58      	ldr	r3, [pc, #352]	@ (800f744 <_strtod_l+0xb04>)
 800f5e2:	429d      	cmp	r5, r3
 800f5e4:	f040 80b2 	bne.w	800f74c <_strtod_l+0xb0c>
 800f5e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f5ee:	ec4b ab10 	vmov	d0, sl, fp
 800f5f2:	f7ff f9c9 	bl	800e988 <__ulp>
 800f5f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5fa:	ec51 0b10 	vmov	r0, r1, d0
 800f5fe:	f7f1 f82b 	bl	8000658 <__aeabi_dmul>
 800f602:	4652      	mov	r2, sl
 800f604:	465b      	mov	r3, fp
 800f606:	f7f0 fe71 	bl	80002ec <__adddf3>
 800f60a:	460b      	mov	r3, r1
 800f60c:	4949      	ldr	r1, [pc, #292]	@ (800f734 <_strtod_l+0xaf4>)
 800f60e:	4a4e      	ldr	r2, [pc, #312]	@ (800f748 <_strtod_l+0xb08>)
 800f610:	4019      	ands	r1, r3
 800f612:	4291      	cmp	r1, r2
 800f614:	4682      	mov	sl, r0
 800f616:	d942      	bls.n	800f69e <_strtod_l+0xa5e>
 800f618:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f61a:	4b47      	ldr	r3, [pc, #284]	@ (800f738 <_strtod_l+0xaf8>)
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d103      	bne.n	800f628 <_strtod_l+0x9e8>
 800f620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f622:	3301      	adds	r3, #1
 800f624:	f43f ad2f 	beq.w	800f086 <_strtod_l+0x446>
 800f628:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f738 <_strtod_l+0xaf8>
 800f62c:	f04f 3aff 	mov.w	sl, #4294967295
 800f630:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f632:	9805      	ldr	r0, [sp, #20]
 800f634:	f7fe fe7c 	bl	800e330 <_Bfree>
 800f638:	9805      	ldr	r0, [sp, #20]
 800f63a:	4649      	mov	r1, r9
 800f63c:	f7fe fe78 	bl	800e330 <_Bfree>
 800f640:	9805      	ldr	r0, [sp, #20]
 800f642:	4641      	mov	r1, r8
 800f644:	f7fe fe74 	bl	800e330 <_Bfree>
 800f648:	9805      	ldr	r0, [sp, #20]
 800f64a:	4621      	mov	r1, r4
 800f64c:	f7fe fe70 	bl	800e330 <_Bfree>
 800f650:	e619      	b.n	800f286 <_strtod_l+0x646>
 800f652:	f1ba 0f01 	cmp.w	sl, #1
 800f656:	d103      	bne.n	800f660 <_strtod_l+0xa20>
 800f658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f43f ada6 	beq.w	800f1ac <_strtod_l+0x56c>
 800f660:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f710 <_strtod_l+0xad0>
 800f664:	4f35      	ldr	r7, [pc, #212]	@ (800f73c <_strtod_l+0xafc>)
 800f666:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f66a:	2600      	movs	r6, #0
 800f66c:	e7b1      	b.n	800f5d2 <_strtod_l+0x992>
 800f66e:	4f34      	ldr	r7, [pc, #208]	@ (800f740 <_strtod_l+0xb00>)
 800f670:	2600      	movs	r6, #0
 800f672:	e7aa      	b.n	800f5ca <_strtod_l+0x98a>
 800f674:	4b32      	ldr	r3, [pc, #200]	@ (800f740 <_strtod_l+0xb00>)
 800f676:	4630      	mov	r0, r6
 800f678:	4639      	mov	r1, r7
 800f67a:	2200      	movs	r2, #0
 800f67c:	f7f0 ffec 	bl	8000658 <__aeabi_dmul>
 800f680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f682:	4606      	mov	r6, r0
 800f684:	460f      	mov	r7, r1
 800f686:	2b00      	cmp	r3, #0
 800f688:	d09f      	beq.n	800f5ca <_strtod_l+0x98a>
 800f68a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f68e:	e7a0      	b.n	800f5d2 <_strtod_l+0x992>
 800f690:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f718 <_strtod_l+0xad8>
 800f694:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f698:	ec57 6b17 	vmov	r6, r7, d7
 800f69c:	e799      	b.n	800f5d2 <_strtod_l+0x992>
 800f69e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f6a2:	9b08      	ldr	r3, [sp, #32]
 800f6a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1c1      	bne.n	800f630 <_strtod_l+0x9f0>
 800f6ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f6b0:	0d1b      	lsrs	r3, r3, #20
 800f6b2:	051b      	lsls	r3, r3, #20
 800f6b4:	429d      	cmp	r5, r3
 800f6b6:	d1bb      	bne.n	800f630 <_strtod_l+0x9f0>
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	4639      	mov	r1, r7
 800f6bc:	f7f1 fb7c 	bl	8000db8 <__aeabi_d2lz>
 800f6c0:	f7f0 ff9c 	bl	80005fc <__aeabi_l2d>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	4639      	mov	r1, r7
 800f6cc:	f7f0 fe0c 	bl	80002e8 <__aeabi_dsub>
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f6d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f6dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6de:	ea46 060a 	orr.w	r6, r6, sl
 800f6e2:	431e      	orrs	r6, r3
 800f6e4:	d06f      	beq.n	800f7c6 <_strtod_l+0xb86>
 800f6e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f720 <_strtod_l+0xae0>)
 800f6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ec:	f7f1 fa26 	bl	8000b3c <__aeabi_dcmplt>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	f47f acd3 	bne.w	800f09c <_strtod_l+0x45c>
 800f6f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f728 <_strtod_l+0xae8>)
 800f6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f700:	f7f1 fa3a 	bl	8000b78 <__aeabi_dcmpgt>
 800f704:	2800      	cmp	r0, #0
 800f706:	d093      	beq.n	800f630 <_strtod_l+0x9f0>
 800f708:	e4c8      	b.n	800f09c <_strtod_l+0x45c>
 800f70a:	bf00      	nop
 800f70c:	f3af 8000 	nop.w
 800f710:	00000000 	.word	0x00000000
 800f714:	bff00000 	.word	0xbff00000
 800f718:	00000000 	.word	0x00000000
 800f71c:	3ff00000 	.word	0x3ff00000
 800f720:	94a03595 	.word	0x94a03595
 800f724:	3fdfffff 	.word	0x3fdfffff
 800f728:	35afe535 	.word	0x35afe535
 800f72c:	3fe00000 	.word	0x3fe00000
 800f730:	000fffff 	.word	0x000fffff
 800f734:	7ff00000 	.word	0x7ff00000
 800f738:	7fefffff 	.word	0x7fefffff
 800f73c:	3ff00000 	.word	0x3ff00000
 800f740:	3fe00000 	.word	0x3fe00000
 800f744:	7fe00000 	.word	0x7fe00000
 800f748:	7c9fffff 	.word	0x7c9fffff
 800f74c:	9b08      	ldr	r3, [sp, #32]
 800f74e:	b323      	cbz	r3, 800f79a <_strtod_l+0xb5a>
 800f750:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f754:	d821      	bhi.n	800f79a <_strtod_l+0xb5a>
 800f756:	a328      	add	r3, pc, #160	@ (adr r3, 800f7f8 <_strtod_l+0xbb8>)
 800f758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75c:	4630      	mov	r0, r6
 800f75e:	4639      	mov	r1, r7
 800f760:	f7f1 f9f6 	bl	8000b50 <__aeabi_dcmple>
 800f764:	b1a0      	cbz	r0, 800f790 <_strtod_l+0xb50>
 800f766:	4639      	mov	r1, r7
 800f768:	4630      	mov	r0, r6
 800f76a:	f7f1 fa4d 	bl	8000c08 <__aeabi_d2uiz>
 800f76e:	2801      	cmp	r0, #1
 800f770:	bf38      	it	cc
 800f772:	2001      	movcc	r0, #1
 800f774:	f7f0 fef6 	bl	8000564 <__aeabi_ui2d>
 800f778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f77a:	4606      	mov	r6, r0
 800f77c:	460f      	mov	r7, r1
 800f77e:	b9fb      	cbnz	r3, 800f7c0 <_strtod_l+0xb80>
 800f780:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f784:	9014      	str	r0, [sp, #80]	@ 0x50
 800f786:	9315      	str	r3, [sp, #84]	@ 0x54
 800f788:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f78c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f790:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f792:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f796:	1b5b      	subs	r3, r3, r5
 800f798:	9311      	str	r3, [sp, #68]	@ 0x44
 800f79a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f79e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f7a2:	f7ff f8f1 	bl	800e988 <__ulp>
 800f7a6:	4650      	mov	r0, sl
 800f7a8:	ec53 2b10 	vmov	r2, r3, d0
 800f7ac:	4659      	mov	r1, fp
 800f7ae:	f7f0 ff53 	bl	8000658 <__aeabi_dmul>
 800f7b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f7b6:	f7f0 fd99 	bl	80002ec <__adddf3>
 800f7ba:	4682      	mov	sl, r0
 800f7bc:	468b      	mov	fp, r1
 800f7be:	e770      	b.n	800f6a2 <_strtod_l+0xa62>
 800f7c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f7c4:	e7e0      	b.n	800f788 <_strtod_l+0xb48>
 800f7c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f800 <_strtod_l+0xbc0>)
 800f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7cc:	f7f1 f9b6 	bl	8000b3c <__aeabi_dcmplt>
 800f7d0:	e798      	b.n	800f704 <_strtod_l+0xac4>
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800f7d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f7d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7da:	6013      	str	r3, [r2, #0]
 800f7dc:	f7ff ba6d 	b.w	800ecba <_strtod_l+0x7a>
 800f7e0:	2a65      	cmp	r2, #101	@ 0x65
 800f7e2:	f43f ab68 	beq.w	800eeb6 <_strtod_l+0x276>
 800f7e6:	2a45      	cmp	r2, #69	@ 0x45
 800f7e8:	f43f ab65 	beq.w	800eeb6 <_strtod_l+0x276>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	f7ff bba0 	b.w	800ef32 <_strtod_l+0x2f2>
 800f7f2:	bf00      	nop
 800f7f4:	f3af 8000 	nop.w
 800f7f8:	ffc00000 	.word	0xffc00000
 800f7fc:	41dfffff 	.word	0x41dfffff
 800f800:	94a03595 	.word	0x94a03595
 800f804:	3fcfffff 	.word	0x3fcfffff

0800f808 <_strtod_r>:
 800f808:	4b01      	ldr	r3, [pc, #4]	@ (800f810 <_strtod_r+0x8>)
 800f80a:	f7ff ba19 	b.w	800ec40 <_strtod_l>
 800f80e:	bf00      	nop
 800f810:	20000090 	.word	0x20000090

0800f814 <__ssputs_r>:
 800f814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f818:	688e      	ldr	r6, [r1, #8]
 800f81a:	461f      	mov	r7, r3
 800f81c:	42be      	cmp	r6, r7
 800f81e:	680b      	ldr	r3, [r1, #0]
 800f820:	4682      	mov	sl, r0
 800f822:	460c      	mov	r4, r1
 800f824:	4690      	mov	r8, r2
 800f826:	d82d      	bhi.n	800f884 <__ssputs_r+0x70>
 800f828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f82c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f830:	d026      	beq.n	800f880 <__ssputs_r+0x6c>
 800f832:	6965      	ldr	r5, [r4, #20]
 800f834:	6909      	ldr	r1, [r1, #16]
 800f836:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f83a:	eba3 0901 	sub.w	r9, r3, r1
 800f83e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f842:	1c7b      	adds	r3, r7, #1
 800f844:	444b      	add	r3, r9
 800f846:	106d      	asrs	r5, r5, #1
 800f848:	429d      	cmp	r5, r3
 800f84a:	bf38      	it	cc
 800f84c:	461d      	movcc	r5, r3
 800f84e:	0553      	lsls	r3, r2, #21
 800f850:	d527      	bpl.n	800f8a2 <__ssputs_r+0x8e>
 800f852:	4629      	mov	r1, r5
 800f854:	f7fe fca0 	bl	800e198 <_malloc_r>
 800f858:	4606      	mov	r6, r0
 800f85a:	b360      	cbz	r0, 800f8b6 <__ssputs_r+0xa2>
 800f85c:	6921      	ldr	r1, [r4, #16]
 800f85e:	464a      	mov	r2, r9
 800f860:	f000 fc84 	bl	801016c <memcpy>
 800f864:	89a3      	ldrh	r3, [r4, #12]
 800f866:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f86a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f86e:	81a3      	strh	r3, [r4, #12]
 800f870:	6126      	str	r6, [r4, #16]
 800f872:	6165      	str	r5, [r4, #20]
 800f874:	444e      	add	r6, r9
 800f876:	eba5 0509 	sub.w	r5, r5, r9
 800f87a:	6026      	str	r6, [r4, #0]
 800f87c:	60a5      	str	r5, [r4, #8]
 800f87e:	463e      	mov	r6, r7
 800f880:	42be      	cmp	r6, r7
 800f882:	d900      	bls.n	800f886 <__ssputs_r+0x72>
 800f884:	463e      	mov	r6, r7
 800f886:	6820      	ldr	r0, [r4, #0]
 800f888:	4632      	mov	r2, r6
 800f88a:	4641      	mov	r1, r8
 800f88c:	f000 fc10 	bl	80100b0 <memmove>
 800f890:	68a3      	ldr	r3, [r4, #8]
 800f892:	1b9b      	subs	r3, r3, r6
 800f894:	60a3      	str	r3, [r4, #8]
 800f896:	6823      	ldr	r3, [r4, #0]
 800f898:	4433      	add	r3, r6
 800f89a:	6023      	str	r3, [r4, #0]
 800f89c:	2000      	movs	r0, #0
 800f89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8a2:	462a      	mov	r2, r5
 800f8a4:	f000 ffdd 	bl	8010862 <_realloc_r>
 800f8a8:	4606      	mov	r6, r0
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	d1e0      	bne.n	800f870 <__ssputs_r+0x5c>
 800f8ae:	6921      	ldr	r1, [r4, #16]
 800f8b0:	4650      	mov	r0, sl
 800f8b2:	f7fe fbfd 	bl	800e0b0 <_free_r>
 800f8b6:	230c      	movs	r3, #12
 800f8b8:	f8ca 3000 	str.w	r3, [sl]
 800f8bc:	89a3      	ldrh	r3, [r4, #12]
 800f8be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8c2:	81a3      	strh	r3, [r4, #12]
 800f8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c8:	e7e9      	b.n	800f89e <__ssputs_r+0x8a>
	...

0800f8cc <_svfiprintf_r>:
 800f8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d0:	4698      	mov	r8, r3
 800f8d2:	898b      	ldrh	r3, [r1, #12]
 800f8d4:	061b      	lsls	r3, r3, #24
 800f8d6:	b09d      	sub	sp, #116	@ 0x74
 800f8d8:	4607      	mov	r7, r0
 800f8da:	460d      	mov	r5, r1
 800f8dc:	4614      	mov	r4, r2
 800f8de:	d510      	bpl.n	800f902 <_svfiprintf_r+0x36>
 800f8e0:	690b      	ldr	r3, [r1, #16]
 800f8e2:	b973      	cbnz	r3, 800f902 <_svfiprintf_r+0x36>
 800f8e4:	2140      	movs	r1, #64	@ 0x40
 800f8e6:	f7fe fc57 	bl	800e198 <_malloc_r>
 800f8ea:	6028      	str	r0, [r5, #0]
 800f8ec:	6128      	str	r0, [r5, #16]
 800f8ee:	b930      	cbnz	r0, 800f8fe <_svfiprintf_r+0x32>
 800f8f0:	230c      	movs	r3, #12
 800f8f2:	603b      	str	r3, [r7, #0]
 800f8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f8:	b01d      	add	sp, #116	@ 0x74
 800f8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8fe:	2340      	movs	r3, #64	@ 0x40
 800f900:	616b      	str	r3, [r5, #20]
 800f902:	2300      	movs	r3, #0
 800f904:	9309      	str	r3, [sp, #36]	@ 0x24
 800f906:	2320      	movs	r3, #32
 800f908:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f90c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f910:	2330      	movs	r3, #48	@ 0x30
 800f912:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fab0 <_svfiprintf_r+0x1e4>
 800f916:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f91a:	f04f 0901 	mov.w	r9, #1
 800f91e:	4623      	mov	r3, r4
 800f920:	469a      	mov	sl, r3
 800f922:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f926:	b10a      	cbz	r2, 800f92c <_svfiprintf_r+0x60>
 800f928:	2a25      	cmp	r2, #37	@ 0x25
 800f92a:	d1f9      	bne.n	800f920 <_svfiprintf_r+0x54>
 800f92c:	ebba 0b04 	subs.w	fp, sl, r4
 800f930:	d00b      	beq.n	800f94a <_svfiprintf_r+0x7e>
 800f932:	465b      	mov	r3, fp
 800f934:	4622      	mov	r2, r4
 800f936:	4629      	mov	r1, r5
 800f938:	4638      	mov	r0, r7
 800f93a:	f7ff ff6b 	bl	800f814 <__ssputs_r>
 800f93e:	3001      	adds	r0, #1
 800f940:	f000 80a7 	beq.w	800fa92 <_svfiprintf_r+0x1c6>
 800f944:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f946:	445a      	add	r2, fp
 800f948:	9209      	str	r2, [sp, #36]	@ 0x24
 800f94a:	f89a 3000 	ldrb.w	r3, [sl]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 809f 	beq.w	800fa92 <_svfiprintf_r+0x1c6>
 800f954:	2300      	movs	r3, #0
 800f956:	f04f 32ff 	mov.w	r2, #4294967295
 800f95a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f95e:	f10a 0a01 	add.w	sl, sl, #1
 800f962:	9304      	str	r3, [sp, #16]
 800f964:	9307      	str	r3, [sp, #28]
 800f966:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f96a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f96c:	4654      	mov	r4, sl
 800f96e:	2205      	movs	r2, #5
 800f970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f974:	484e      	ldr	r0, [pc, #312]	@ (800fab0 <_svfiprintf_r+0x1e4>)
 800f976:	f7f0 fc5b 	bl	8000230 <memchr>
 800f97a:	9a04      	ldr	r2, [sp, #16]
 800f97c:	b9d8      	cbnz	r0, 800f9b6 <_svfiprintf_r+0xea>
 800f97e:	06d0      	lsls	r0, r2, #27
 800f980:	bf44      	itt	mi
 800f982:	2320      	movmi	r3, #32
 800f984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f988:	0711      	lsls	r1, r2, #28
 800f98a:	bf44      	itt	mi
 800f98c:	232b      	movmi	r3, #43	@ 0x2b
 800f98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f992:	f89a 3000 	ldrb.w	r3, [sl]
 800f996:	2b2a      	cmp	r3, #42	@ 0x2a
 800f998:	d015      	beq.n	800f9c6 <_svfiprintf_r+0xfa>
 800f99a:	9a07      	ldr	r2, [sp, #28]
 800f99c:	4654      	mov	r4, sl
 800f99e:	2000      	movs	r0, #0
 800f9a0:	f04f 0c0a 	mov.w	ip, #10
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9aa:	3b30      	subs	r3, #48	@ 0x30
 800f9ac:	2b09      	cmp	r3, #9
 800f9ae:	d94b      	bls.n	800fa48 <_svfiprintf_r+0x17c>
 800f9b0:	b1b0      	cbz	r0, 800f9e0 <_svfiprintf_r+0x114>
 800f9b2:	9207      	str	r2, [sp, #28]
 800f9b4:	e014      	b.n	800f9e0 <_svfiprintf_r+0x114>
 800f9b6:	eba0 0308 	sub.w	r3, r0, r8
 800f9ba:	fa09 f303 	lsl.w	r3, r9, r3
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	9304      	str	r3, [sp, #16]
 800f9c2:	46a2      	mov	sl, r4
 800f9c4:	e7d2      	b.n	800f96c <_svfiprintf_r+0xa0>
 800f9c6:	9b03      	ldr	r3, [sp, #12]
 800f9c8:	1d19      	adds	r1, r3, #4
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	9103      	str	r1, [sp, #12]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	bfbb      	ittet	lt
 800f9d2:	425b      	neglt	r3, r3
 800f9d4:	f042 0202 	orrlt.w	r2, r2, #2
 800f9d8:	9307      	strge	r3, [sp, #28]
 800f9da:	9307      	strlt	r3, [sp, #28]
 800f9dc:	bfb8      	it	lt
 800f9de:	9204      	strlt	r2, [sp, #16]
 800f9e0:	7823      	ldrb	r3, [r4, #0]
 800f9e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9e4:	d10a      	bne.n	800f9fc <_svfiprintf_r+0x130>
 800f9e6:	7863      	ldrb	r3, [r4, #1]
 800f9e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9ea:	d132      	bne.n	800fa52 <_svfiprintf_r+0x186>
 800f9ec:	9b03      	ldr	r3, [sp, #12]
 800f9ee:	1d1a      	adds	r2, r3, #4
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	9203      	str	r2, [sp, #12]
 800f9f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9f8:	3402      	adds	r4, #2
 800f9fa:	9305      	str	r3, [sp, #20]
 800f9fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fac0 <_svfiprintf_r+0x1f4>
 800fa00:	7821      	ldrb	r1, [r4, #0]
 800fa02:	2203      	movs	r2, #3
 800fa04:	4650      	mov	r0, sl
 800fa06:	f7f0 fc13 	bl	8000230 <memchr>
 800fa0a:	b138      	cbz	r0, 800fa1c <_svfiprintf_r+0x150>
 800fa0c:	9b04      	ldr	r3, [sp, #16]
 800fa0e:	eba0 000a 	sub.w	r0, r0, sl
 800fa12:	2240      	movs	r2, #64	@ 0x40
 800fa14:	4082      	lsls	r2, r0
 800fa16:	4313      	orrs	r3, r2
 800fa18:	3401      	adds	r4, #1
 800fa1a:	9304      	str	r3, [sp, #16]
 800fa1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa20:	4824      	ldr	r0, [pc, #144]	@ (800fab4 <_svfiprintf_r+0x1e8>)
 800fa22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa26:	2206      	movs	r2, #6
 800fa28:	f7f0 fc02 	bl	8000230 <memchr>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d036      	beq.n	800fa9e <_svfiprintf_r+0x1d2>
 800fa30:	4b21      	ldr	r3, [pc, #132]	@ (800fab8 <_svfiprintf_r+0x1ec>)
 800fa32:	bb1b      	cbnz	r3, 800fa7c <_svfiprintf_r+0x1b0>
 800fa34:	9b03      	ldr	r3, [sp, #12]
 800fa36:	3307      	adds	r3, #7
 800fa38:	f023 0307 	bic.w	r3, r3, #7
 800fa3c:	3308      	adds	r3, #8
 800fa3e:	9303      	str	r3, [sp, #12]
 800fa40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa42:	4433      	add	r3, r6
 800fa44:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa46:	e76a      	b.n	800f91e <_svfiprintf_r+0x52>
 800fa48:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa4c:	460c      	mov	r4, r1
 800fa4e:	2001      	movs	r0, #1
 800fa50:	e7a8      	b.n	800f9a4 <_svfiprintf_r+0xd8>
 800fa52:	2300      	movs	r3, #0
 800fa54:	3401      	adds	r4, #1
 800fa56:	9305      	str	r3, [sp, #20]
 800fa58:	4619      	mov	r1, r3
 800fa5a:	f04f 0c0a 	mov.w	ip, #10
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa64:	3a30      	subs	r2, #48	@ 0x30
 800fa66:	2a09      	cmp	r2, #9
 800fa68:	d903      	bls.n	800fa72 <_svfiprintf_r+0x1a6>
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d0c6      	beq.n	800f9fc <_svfiprintf_r+0x130>
 800fa6e:	9105      	str	r1, [sp, #20]
 800fa70:	e7c4      	b.n	800f9fc <_svfiprintf_r+0x130>
 800fa72:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa76:	4604      	mov	r4, r0
 800fa78:	2301      	movs	r3, #1
 800fa7a:	e7f0      	b.n	800fa5e <_svfiprintf_r+0x192>
 800fa7c:	ab03      	add	r3, sp, #12
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	462a      	mov	r2, r5
 800fa82:	4b0e      	ldr	r3, [pc, #56]	@ (800fabc <_svfiprintf_r+0x1f0>)
 800fa84:	a904      	add	r1, sp, #16
 800fa86:	4638      	mov	r0, r7
 800fa88:	f7fc fbd0 	bl	800c22c <_printf_float>
 800fa8c:	1c42      	adds	r2, r0, #1
 800fa8e:	4606      	mov	r6, r0
 800fa90:	d1d6      	bne.n	800fa40 <_svfiprintf_r+0x174>
 800fa92:	89ab      	ldrh	r3, [r5, #12]
 800fa94:	065b      	lsls	r3, r3, #25
 800fa96:	f53f af2d 	bmi.w	800f8f4 <_svfiprintf_r+0x28>
 800fa9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa9c:	e72c      	b.n	800f8f8 <_svfiprintf_r+0x2c>
 800fa9e:	ab03      	add	r3, sp, #12
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	462a      	mov	r2, r5
 800faa4:	4b05      	ldr	r3, [pc, #20]	@ (800fabc <_svfiprintf_r+0x1f0>)
 800faa6:	a904      	add	r1, sp, #16
 800faa8:	4638      	mov	r0, r7
 800faaa:	f7fc fe57 	bl	800c75c <_printf_i>
 800faae:	e7ed      	b.n	800fa8c <_svfiprintf_r+0x1c0>
 800fab0:	08012a4c 	.word	0x08012a4c
 800fab4:	08012a56 	.word	0x08012a56
 800fab8:	0800c22d 	.word	0x0800c22d
 800fabc:	0800f815 	.word	0x0800f815
 800fac0:	08012a52 	.word	0x08012a52

0800fac4 <__sfputc_r>:
 800fac4:	6893      	ldr	r3, [r2, #8]
 800fac6:	3b01      	subs	r3, #1
 800fac8:	2b00      	cmp	r3, #0
 800faca:	b410      	push	{r4}
 800facc:	6093      	str	r3, [r2, #8]
 800face:	da08      	bge.n	800fae2 <__sfputc_r+0x1e>
 800fad0:	6994      	ldr	r4, [r2, #24]
 800fad2:	42a3      	cmp	r3, r4
 800fad4:	db01      	blt.n	800fada <__sfputc_r+0x16>
 800fad6:	290a      	cmp	r1, #10
 800fad8:	d103      	bne.n	800fae2 <__sfputc_r+0x1e>
 800fada:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fade:	f000 ba53 	b.w	800ff88 <__swbuf_r>
 800fae2:	6813      	ldr	r3, [r2, #0]
 800fae4:	1c58      	adds	r0, r3, #1
 800fae6:	6010      	str	r0, [r2, #0]
 800fae8:	7019      	strb	r1, [r3, #0]
 800faea:	4608      	mov	r0, r1
 800faec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800faf0:	4770      	bx	lr

0800faf2 <__sfputs_r>:
 800faf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf4:	4606      	mov	r6, r0
 800faf6:	460f      	mov	r7, r1
 800faf8:	4614      	mov	r4, r2
 800fafa:	18d5      	adds	r5, r2, r3
 800fafc:	42ac      	cmp	r4, r5
 800fafe:	d101      	bne.n	800fb04 <__sfputs_r+0x12>
 800fb00:	2000      	movs	r0, #0
 800fb02:	e007      	b.n	800fb14 <__sfputs_r+0x22>
 800fb04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb08:	463a      	mov	r2, r7
 800fb0a:	4630      	mov	r0, r6
 800fb0c:	f7ff ffda 	bl	800fac4 <__sfputc_r>
 800fb10:	1c43      	adds	r3, r0, #1
 800fb12:	d1f3      	bne.n	800fafc <__sfputs_r+0xa>
 800fb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb18 <_vfiprintf_r>:
 800fb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	460d      	mov	r5, r1
 800fb1e:	b09d      	sub	sp, #116	@ 0x74
 800fb20:	4614      	mov	r4, r2
 800fb22:	4698      	mov	r8, r3
 800fb24:	4606      	mov	r6, r0
 800fb26:	b118      	cbz	r0, 800fb30 <_vfiprintf_r+0x18>
 800fb28:	6a03      	ldr	r3, [r0, #32]
 800fb2a:	b90b      	cbnz	r3, 800fb30 <_vfiprintf_r+0x18>
 800fb2c:	f7fd f9ce 	bl	800cecc <__sinit>
 800fb30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb32:	07d9      	lsls	r1, r3, #31
 800fb34:	d405      	bmi.n	800fb42 <_vfiprintf_r+0x2a>
 800fb36:	89ab      	ldrh	r3, [r5, #12]
 800fb38:	059a      	lsls	r2, r3, #22
 800fb3a:	d402      	bmi.n	800fb42 <_vfiprintf_r+0x2a>
 800fb3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb3e:	f7fd fc36 	bl	800d3ae <__retarget_lock_acquire_recursive>
 800fb42:	89ab      	ldrh	r3, [r5, #12]
 800fb44:	071b      	lsls	r3, r3, #28
 800fb46:	d501      	bpl.n	800fb4c <_vfiprintf_r+0x34>
 800fb48:	692b      	ldr	r3, [r5, #16]
 800fb4a:	b99b      	cbnz	r3, 800fb74 <_vfiprintf_r+0x5c>
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f000 fa58 	bl	8010004 <__swsetup_r>
 800fb54:	b170      	cbz	r0, 800fb74 <_vfiprintf_r+0x5c>
 800fb56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb58:	07dc      	lsls	r4, r3, #31
 800fb5a:	d504      	bpl.n	800fb66 <_vfiprintf_r+0x4e>
 800fb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb60:	b01d      	add	sp, #116	@ 0x74
 800fb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb66:	89ab      	ldrh	r3, [r5, #12]
 800fb68:	0598      	lsls	r0, r3, #22
 800fb6a:	d4f7      	bmi.n	800fb5c <_vfiprintf_r+0x44>
 800fb6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb6e:	f7fd fc1f 	bl	800d3b0 <__retarget_lock_release_recursive>
 800fb72:	e7f3      	b.n	800fb5c <_vfiprintf_r+0x44>
 800fb74:	2300      	movs	r3, #0
 800fb76:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb78:	2320      	movs	r3, #32
 800fb7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb82:	2330      	movs	r3, #48	@ 0x30
 800fb84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fd34 <_vfiprintf_r+0x21c>
 800fb88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fb8c:	f04f 0901 	mov.w	r9, #1
 800fb90:	4623      	mov	r3, r4
 800fb92:	469a      	mov	sl, r3
 800fb94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb98:	b10a      	cbz	r2, 800fb9e <_vfiprintf_r+0x86>
 800fb9a:	2a25      	cmp	r2, #37	@ 0x25
 800fb9c:	d1f9      	bne.n	800fb92 <_vfiprintf_r+0x7a>
 800fb9e:	ebba 0b04 	subs.w	fp, sl, r4
 800fba2:	d00b      	beq.n	800fbbc <_vfiprintf_r+0xa4>
 800fba4:	465b      	mov	r3, fp
 800fba6:	4622      	mov	r2, r4
 800fba8:	4629      	mov	r1, r5
 800fbaa:	4630      	mov	r0, r6
 800fbac:	f7ff ffa1 	bl	800faf2 <__sfputs_r>
 800fbb0:	3001      	adds	r0, #1
 800fbb2:	f000 80a7 	beq.w	800fd04 <_vfiprintf_r+0x1ec>
 800fbb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbb8:	445a      	add	r2, fp
 800fbba:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 809f 	beq.w	800fd04 <_vfiprintf_r+0x1ec>
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbd0:	f10a 0a01 	add.w	sl, sl, #1
 800fbd4:	9304      	str	r3, [sp, #16]
 800fbd6:	9307      	str	r3, [sp, #28]
 800fbd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fbdc:	931a      	str	r3, [sp, #104]	@ 0x68
 800fbde:	4654      	mov	r4, sl
 800fbe0:	2205      	movs	r2, #5
 800fbe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbe6:	4853      	ldr	r0, [pc, #332]	@ (800fd34 <_vfiprintf_r+0x21c>)
 800fbe8:	f7f0 fb22 	bl	8000230 <memchr>
 800fbec:	9a04      	ldr	r2, [sp, #16]
 800fbee:	b9d8      	cbnz	r0, 800fc28 <_vfiprintf_r+0x110>
 800fbf0:	06d1      	lsls	r1, r2, #27
 800fbf2:	bf44      	itt	mi
 800fbf4:	2320      	movmi	r3, #32
 800fbf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbfa:	0713      	lsls	r3, r2, #28
 800fbfc:	bf44      	itt	mi
 800fbfe:	232b      	movmi	r3, #43	@ 0x2b
 800fc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc04:	f89a 3000 	ldrb.w	r3, [sl]
 800fc08:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc0a:	d015      	beq.n	800fc38 <_vfiprintf_r+0x120>
 800fc0c:	9a07      	ldr	r2, [sp, #28]
 800fc0e:	4654      	mov	r4, sl
 800fc10:	2000      	movs	r0, #0
 800fc12:	f04f 0c0a 	mov.w	ip, #10
 800fc16:	4621      	mov	r1, r4
 800fc18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc1c:	3b30      	subs	r3, #48	@ 0x30
 800fc1e:	2b09      	cmp	r3, #9
 800fc20:	d94b      	bls.n	800fcba <_vfiprintf_r+0x1a2>
 800fc22:	b1b0      	cbz	r0, 800fc52 <_vfiprintf_r+0x13a>
 800fc24:	9207      	str	r2, [sp, #28]
 800fc26:	e014      	b.n	800fc52 <_vfiprintf_r+0x13a>
 800fc28:	eba0 0308 	sub.w	r3, r0, r8
 800fc2c:	fa09 f303 	lsl.w	r3, r9, r3
 800fc30:	4313      	orrs	r3, r2
 800fc32:	9304      	str	r3, [sp, #16]
 800fc34:	46a2      	mov	sl, r4
 800fc36:	e7d2      	b.n	800fbde <_vfiprintf_r+0xc6>
 800fc38:	9b03      	ldr	r3, [sp, #12]
 800fc3a:	1d19      	adds	r1, r3, #4
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	9103      	str	r1, [sp, #12]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	bfbb      	ittet	lt
 800fc44:	425b      	neglt	r3, r3
 800fc46:	f042 0202 	orrlt.w	r2, r2, #2
 800fc4a:	9307      	strge	r3, [sp, #28]
 800fc4c:	9307      	strlt	r3, [sp, #28]
 800fc4e:	bfb8      	it	lt
 800fc50:	9204      	strlt	r2, [sp, #16]
 800fc52:	7823      	ldrb	r3, [r4, #0]
 800fc54:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc56:	d10a      	bne.n	800fc6e <_vfiprintf_r+0x156>
 800fc58:	7863      	ldrb	r3, [r4, #1]
 800fc5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc5c:	d132      	bne.n	800fcc4 <_vfiprintf_r+0x1ac>
 800fc5e:	9b03      	ldr	r3, [sp, #12]
 800fc60:	1d1a      	adds	r2, r3, #4
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	9203      	str	r2, [sp, #12]
 800fc66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc6a:	3402      	adds	r4, #2
 800fc6c:	9305      	str	r3, [sp, #20]
 800fc6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fd44 <_vfiprintf_r+0x22c>
 800fc72:	7821      	ldrb	r1, [r4, #0]
 800fc74:	2203      	movs	r2, #3
 800fc76:	4650      	mov	r0, sl
 800fc78:	f7f0 fada 	bl	8000230 <memchr>
 800fc7c:	b138      	cbz	r0, 800fc8e <_vfiprintf_r+0x176>
 800fc7e:	9b04      	ldr	r3, [sp, #16]
 800fc80:	eba0 000a 	sub.w	r0, r0, sl
 800fc84:	2240      	movs	r2, #64	@ 0x40
 800fc86:	4082      	lsls	r2, r0
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	3401      	adds	r4, #1
 800fc8c:	9304      	str	r3, [sp, #16]
 800fc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc92:	4829      	ldr	r0, [pc, #164]	@ (800fd38 <_vfiprintf_r+0x220>)
 800fc94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fc98:	2206      	movs	r2, #6
 800fc9a:	f7f0 fac9 	bl	8000230 <memchr>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d03f      	beq.n	800fd22 <_vfiprintf_r+0x20a>
 800fca2:	4b26      	ldr	r3, [pc, #152]	@ (800fd3c <_vfiprintf_r+0x224>)
 800fca4:	bb1b      	cbnz	r3, 800fcee <_vfiprintf_r+0x1d6>
 800fca6:	9b03      	ldr	r3, [sp, #12]
 800fca8:	3307      	adds	r3, #7
 800fcaa:	f023 0307 	bic.w	r3, r3, #7
 800fcae:	3308      	adds	r3, #8
 800fcb0:	9303      	str	r3, [sp, #12]
 800fcb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcb4:	443b      	add	r3, r7
 800fcb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcb8:	e76a      	b.n	800fb90 <_vfiprintf_r+0x78>
 800fcba:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcbe:	460c      	mov	r4, r1
 800fcc0:	2001      	movs	r0, #1
 800fcc2:	e7a8      	b.n	800fc16 <_vfiprintf_r+0xfe>
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	3401      	adds	r4, #1
 800fcc8:	9305      	str	r3, [sp, #20]
 800fcca:	4619      	mov	r1, r3
 800fccc:	f04f 0c0a 	mov.w	ip, #10
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcd6:	3a30      	subs	r2, #48	@ 0x30
 800fcd8:	2a09      	cmp	r2, #9
 800fcda:	d903      	bls.n	800fce4 <_vfiprintf_r+0x1cc>
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d0c6      	beq.n	800fc6e <_vfiprintf_r+0x156>
 800fce0:	9105      	str	r1, [sp, #20]
 800fce2:	e7c4      	b.n	800fc6e <_vfiprintf_r+0x156>
 800fce4:	fb0c 2101 	mla	r1, ip, r1, r2
 800fce8:	4604      	mov	r4, r0
 800fcea:	2301      	movs	r3, #1
 800fcec:	e7f0      	b.n	800fcd0 <_vfiprintf_r+0x1b8>
 800fcee:	ab03      	add	r3, sp, #12
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	462a      	mov	r2, r5
 800fcf4:	4b12      	ldr	r3, [pc, #72]	@ (800fd40 <_vfiprintf_r+0x228>)
 800fcf6:	a904      	add	r1, sp, #16
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	f7fc fa97 	bl	800c22c <_printf_float>
 800fcfe:	4607      	mov	r7, r0
 800fd00:	1c78      	adds	r0, r7, #1
 800fd02:	d1d6      	bne.n	800fcb2 <_vfiprintf_r+0x19a>
 800fd04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd06:	07d9      	lsls	r1, r3, #31
 800fd08:	d405      	bmi.n	800fd16 <_vfiprintf_r+0x1fe>
 800fd0a:	89ab      	ldrh	r3, [r5, #12]
 800fd0c:	059a      	lsls	r2, r3, #22
 800fd0e:	d402      	bmi.n	800fd16 <_vfiprintf_r+0x1fe>
 800fd10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd12:	f7fd fb4d 	bl	800d3b0 <__retarget_lock_release_recursive>
 800fd16:	89ab      	ldrh	r3, [r5, #12]
 800fd18:	065b      	lsls	r3, r3, #25
 800fd1a:	f53f af1f 	bmi.w	800fb5c <_vfiprintf_r+0x44>
 800fd1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd20:	e71e      	b.n	800fb60 <_vfiprintf_r+0x48>
 800fd22:	ab03      	add	r3, sp, #12
 800fd24:	9300      	str	r3, [sp, #0]
 800fd26:	462a      	mov	r2, r5
 800fd28:	4b05      	ldr	r3, [pc, #20]	@ (800fd40 <_vfiprintf_r+0x228>)
 800fd2a:	a904      	add	r1, sp, #16
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	f7fc fd15 	bl	800c75c <_printf_i>
 800fd32:	e7e4      	b.n	800fcfe <_vfiprintf_r+0x1e6>
 800fd34:	08012a4c 	.word	0x08012a4c
 800fd38:	08012a56 	.word	0x08012a56
 800fd3c:	0800c22d 	.word	0x0800c22d
 800fd40:	0800faf3 	.word	0x0800faf3
 800fd44:	08012a52 	.word	0x08012a52

0800fd48 <__sflush_r>:
 800fd48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd50:	0716      	lsls	r6, r2, #28
 800fd52:	4605      	mov	r5, r0
 800fd54:	460c      	mov	r4, r1
 800fd56:	d454      	bmi.n	800fe02 <__sflush_r+0xba>
 800fd58:	684b      	ldr	r3, [r1, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	dc02      	bgt.n	800fd64 <__sflush_r+0x1c>
 800fd5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	dd48      	ble.n	800fdf6 <__sflush_r+0xae>
 800fd64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fd66:	2e00      	cmp	r6, #0
 800fd68:	d045      	beq.n	800fdf6 <__sflush_r+0xae>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fd70:	682f      	ldr	r7, [r5, #0]
 800fd72:	6a21      	ldr	r1, [r4, #32]
 800fd74:	602b      	str	r3, [r5, #0]
 800fd76:	d030      	beq.n	800fdda <__sflush_r+0x92>
 800fd78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	0759      	lsls	r1, r3, #29
 800fd7e:	d505      	bpl.n	800fd8c <__sflush_r+0x44>
 800fd80:	6863      	ldr	r3, [r4, #4]
 800fd82:	1ad2      	subs	r2, r2, r3
 800fd84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fd86:	b10b      	cbz	r3, 800fd8c <__sflush_r+0x44>
 800fd88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fd8a:	1ad2      	subs	r2, r2, r3
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fd90:	6a21      	ldr	r1, [r4, #32]
 800fd92:	4628      	mov	r0, r5
 800fd94:	47b0      	blx	r6
 800fd96:	1c43      	adds	r3, r0, #1
 800fd98:	89a3      	ldrh	r3, [r4, #12]
 800fd9a:	d106      	bne.n	800fdaa <__sflush_r+0x62>
 800fd9c:	6829      	ldr	r1, [r5, #0]
 800fd9e:	291d      	cmp	r1, #29
 800fda0:	d82b      	bhi.n	800fdfa <__sflush_r+0xb2>
 800fda2:	4a2a      	ldr	r2, [pc, #168]	@ (800fe4c <__sflush_r+0x104>)
 800fda4:	40ca      	lsrs	r2, r1
 800fda6:	07d6      	lsls	r6, r2, #31
 800fda8:	d527      	bpl.n	800fdfa <__sflush_r+0xb2>
 800fdaa:	2200      	movs	r2, #0
 800fdac:	6062      	str	r2, [r4, #4]
 800fdae:	04d9      	lsls	r1, r3, #19
 800fdb0:	6922      	ldr	r2, [r4, #16]
 800fdb2:	6022      	str	r2, [r4, #0]
 800fdb4:	d504      	bpl.n	800fdc0 <__sflush_r+0x78>
 800fdb6:	1c42      	adds	r2, r0, #1
 800fdb8:	d101      	bne.n	800fdbe <__sflush_r+0x76>
 800fdba:	682b      	ldr	r3, [r5, #0]
 800fdbc:	b903      	cbnz	r3, 800fdc0 <__sflush_r+0x78>
 800fdbe:	6560      	str	r0, [r4, #84]	@ 0x54
 800fdc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fdc2:	602f      	str	r7, [r5, #0]
 800fdc4:	b1b9      	cbz	r1, 800fdf6 <__sflush_r+0xae>
 800fdc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fdca:	4299      	cmp	r1, r3
 800fdcc:	d002      	beq.n	800fdd4 <__sflush_r+0x8c>
 800fdce:	4628      	mov	r0, r5
 800fdd0:	f7fe f96e 	bl	800e0b0 <_free_r>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	6363      	str	r3, [r4, #52]	@ 0x34
 800fdd8:	e00d      	b.n	800fdf6 <__sflush_r+0xae>
 800fdda:	2301      	movs	r3, #1
 800fddc:	4628      	mov	r0, r5
 800fdde:	47b0      	blx	r6
 800fde0:	4602      	mov	r2, r0
 800fde2:	1c50      	adds	r0, r2, #1
 800fde4:	d1c9      	bne.n	800fd7a <__sflush_r+0x32>
 800fde6:	682b      	ldr	r3, [r5, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d0c6      	beq.n	800fd7a <__sflush_r+0x32>
 800fdec:	2b1d      	cmp	r3, #29
 800fdee:	d001      	beq.n	800fdf4 <__sflush_r+0xac>
 800fdf0:	2b16      	cmp	r3, #22
 800fdf2:	d11e      	bne.n	800fe32 <__sflush_r+0xea>
 800fdf4:	602f      	str	r7, [r5, #0]
 800fdf6:	2000      	movs	r0, #0
 800fdf8:	e022      	b.n	800fe40 <__sflush_r+0xf8>
 800fdfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdfe:	b21b      	sxth	r3, r3
 800fe00:	e01b      	b.n	800fe3a <__sflush_r+0xf2>
 800fe02:	690f      	ldr	r7, [r1, #16]
 800fe04:	2f00      	cmp	r7, #0
 800fe06:	d0f6      	beq.n	800fdf6 <__sflush_r+0xae>
 800fe08:	0793      	lsls	r3, r2, #30
 800fe0a:	680e      	ldr	r6, [r1, #0]
 800fe0c:	bf08      	it	eq
 800fe0e:	694b      	ldreq	r3, [r1, #20]
 800fe10:	600f      	str	r7, [r1, #0]
 800fe12:	bf18      	it	ne
 800fe14:	2300      	movne	r3, #0
 800fe16:	eba6 0807 	sub.w	r8, r6, r7
 800fe1a:	608b      	str	r3, [r1, #8]
 800fe1c:	f1b8 0f00 	cmp.w	r8, #0
 800fe20:	dde9      	ble.n	800fdf6 <__sflush_r+0xae>
 800fe22:	6a21      	ldr	r1, [r4, #32]
 800fe24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fe26:	4643      	mov	r3, r8
 800fe28:	463a      	mov	r2, r7
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	47b0      	blx	r6
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	dc08      	bgt.n	800fe44 <__sflush_r+0xfc>
 800fe32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe3a:	81a3      	strh	r3, [r4, #12]
 800fe3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe44:	4407      	add	r7, r0
 800fe46:	eba8 0800 	sub.w	r8, r8, r0
 800fe4a:	e7e7      	b.n	800fe1c <__sflush_r+0xd4>
 800fe4c:	20400001 	.word	0x20400001

0800fe50 <_fflush_r>:
 800fe50:	b538      	push	{r3, r4, r5, lr}
 800fe52:	690b      	ldr	r3, [r1, #16]
 800fe54:	4605      	mov	r5, r0
 800fe56:	460c      	mov	r4, r1
 800fe58:	b913      	cbnz	r3, 800fe60 <_fflush_r+0x10>
 800fe5a:	2500      	movs	r5, #0
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	bd38      	pop	{r3, r4, r5, pc}
 800fe60:	b118      	cbz	r0, 800fe6a <_fflush_r+0x1a>
 800fe62:	6a03      	ldr	r3, [r0, #32]
 800fe64:	b90b      	cbnz	r3, 800fe6a <_fflush_r+0x1a>
 800fe66:	f7fd f831 	bl	800cecc <__sinit>
 800fe6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d0f3      	beq.n	800fe5a <_fflush_r+0xa>
 800fe72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fe74:	07d0      	lsls	r0, r2, #31
 800fe76:	d404      	bmi.n	800fe82 <_fflush_r+0x32>
 800fe78:	0599      	lsls	r1, r3, #22
 800fe7a:	d402      	bmi.n	800fe82 <_fflush_r+0x32>
 800fe7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe7e:	f7fd fa96 	bl	800d3ae <__retarget_lock_acquire_recursive>
 800fe82:	4628      	mov	r0, r5
 800fe84:	4621      	mov	r1, r4
 800fe86:	f7ff ff5f 	bl	800fd48 <__sflush_r>
 800fe8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe8c:	07da      	lsls	r2, r3, #31
 800fe8e:	4605      	mov	r5, r0
 800fe90:	d4e4      	bmi.n	800fe5c <_fflush_r+0xc>
 800fe92:	89a3      	ldrh	r3, [r4, #12]
 800fe94:	059b      	lsls	r3, r3, #22
 800fe96:	d4e1      	bmi.n	800fe5c <_fflush_r+0xc>
 800fe98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe9a:	f7fd fa89 	bl	800d3b0 <__retarget_lock_release_recursive>
 800fe9e:	e7dd      	b.n	800fe5c <_fflush_r+0xc>

0800fea0 <fiprintf>:
 800fea0:	b40e      	push	{r1, r2, r3}
 800fea2:	b503      	push	{r0, r1, lr}
 800fea4:	4601      	mov	r1, r0
 800fea6:	ab03      	add	r3, sp, #12
 800fea8:	4805      	ldr	r0, [pc, #20]	@ (800fec0 <fiprintf+0x20>)
 800feaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800feae:	6800      	ldr	r0, [r0, #0]
 800feb0:	9301      	str	r3, [sp, #4]
 800feb2:	f7ff fe31 	bl	800fb18 <_vfiprintf_r>
 800feb6:	b002      	add	sp, #8
 800feb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800febc:	b003      	add	sp, #12
 800febe:	4770      	bx	lr
 800fec0:	20000040 	.word	0x20000040

0800fec4 <__swhatbuf_r>:
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	460c      	mov	r4, r1
 800fec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fecc:	2900      	cmp	r1, #0
 800fece:	b096      	sub	sp, #88	@ 0x58
 800fed0:	4615      	mov	r5, r2
 800fed2:	461e      	mov	r6, r3
 800fed4:	da0d      	bge.n	800fef2 <__swhatbuf_r+0x2e>
 800fed6:	89a3      	ldrh	r3, [r4, #12]
 800fed8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fedc:	f04f 0100 	mov.w	r1, #0
 800fee0:	bf14      	ite	ne
 800fee2:	2340      	movne	r3, #64	@ 0x40
 800fee4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fee8:	2000      	movs	r0, #0
 800feea:	6031      	str	r1, [r6, #0]
 800feec:	602b      	str	r3, [r5, #0]
 800feee:	b016      	add	sp, #88	@ 0x58
 800fef0:	bd70      	pop	{r4, r5, r6, pc}
 800fef2:	466a      	mov	r2, sp
 800fef4:	f000 f908 	bl	8010108 <_fstat_r>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	dbec      	blt.n	800fed6 <__swhatbuf_r+0x12>
 800fefc:	9901      	ldr	r1, [sp, #4]
 800fefe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ff02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ff06:	4259      	negs	r1, r3
 800ff08:	4159      	adcs	r1, r3
 800ff0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff0e:	e7eb      	b.n	800fee8 <__swhatbuf_r+0x24>

0800ff10 <__smakebuf_r>:
 800ff10:	898b      	ldrh	r3, [r1, #12]
 800ff12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff14:	079d      	lsls	r5, r3, #30
 800ff16:	4606      	mov	r6, r0
 800ff18:	460c      	mov	r4, r1
 800ff1a:	d507      	bpl.n	800ff2c <__smakebuf_r+0x1c>
 800ff1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff20:	6023      	str	r3, [r4, #0]
 800ff22:	6123      	str	r3, [r4, #16]
 800ff24:	2301      	movs	r3, #1
 800ff26:	6163      	str	r3, [r4, #20]
 800ff28:	b003      	add	sp, #12
 800ff2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff2c:	ab01      	add	r3, sp, #4
 800ff2e:	466a      	mov	r2, sp
 800ff30:	f7ff ffc8 	bl	800fec4 <__swhatbuf_r>
 800ff34:	9f00      	ldr	r7, [sp, #0]
 800ff36:	4605      	mov	r5, r0
 800ff38:	4639      	mov	r1, r7
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	f7fe f92c 	bl	800e198 <_malloc_r>
 800ff40:	b948      	cbnz	r0, 800ff56 <__smakebuf_r+0x46>
 800ff42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff46:	059a      	lsls	r2, r3, #22
 800ff48:	d4ee      	bmi.n	800ff28 <__smakebuf_r+0x18>
 800ff4a:	f023 0303 	bic.w	r3, r3, #3
 800ff4e:	f043 0302 	orr.w	r3, r3, #2
 800ff52:	81a3      	strh	r3, [r4, #12]
 800ff54:	e7e2      	b.n	800ff1c <__smakebuf_r+0xc>
 800ff56:	89a3      	ldrh	r3, [r4, #12]
 800ff58:	6020      	str	r0, [r4, #0]
 800ff5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff5e:	81a3      	strh	r3, [r4, #12]
 800ff60:	9b01      	ldr	r3, [sp, #4]
 800ff62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff66:	b15b      	cbz	r3, 800ff80 <__smakebuf_r+0x70>
 800ff68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	f000 f8dd 	bl	801012c <_isatty_r>
 800ff72:	b128      	cbz	r0, 800ff80 <__smakebuf_r+0x70>
 800ff74:	89a3      	ldrh	r3, [r4, #12]
 800ff76:	f023 0303 	bic.w	r3, r3, #3
 800ff7a:	f043 0301 	orr.w	r3, r3, #1
 800ff7e:	81a3      	strh	r3, [r4, #12]
 800ff80:	89a3      	ldrh	r3, [r4, #12]
 800ff82:	431d      	orrs	r5, r3
 800ff84:	81a5      	strh	r5, [r4, #12]
 800ff86:	e7cf      	b.n	800ff28 <__smakebuf_r+0x18>

0800ff88 <__swbuf_r>:
 800ff88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff8a:	460e      	mov	r6, r1
 800ff8c:	4614      	mov	r4, r2
 800ff8e:	4605      	mov	r5, r0
 800ff90:	b118      	cbz	r0, 800ff9a <__swbuf_r+0x12>
 800ff92:	6a03      	ldr	r3, [r0, #32]
 800ff94:	b90b      	cbnz	r3, 800ff9a <__swbuf_r+0x12>
 800ff96:	f7fc ff99 	bl	800cecc <__sinit>
 800ff9a:	69a3      	ldr	r3, [r4, #24]
 800ff9c:	60a3      	str	r3, [r4, #8]
 800ff9e:	89a3      	ldrh	r3, [r4, #12]
 800ffa0:	071a      	lsls	r2, r3, #28
 800ffa2:	d501      	bpl.n	800ffa8 <__swbuf_r+0x20>
 800ffa4:	6923      	ldr	r3, [r4, #16]
 800ffa6:	b943      	cbnz	r3, 800ffba <__swbuf_r+0x32>
 800ffa8:	4621      	mov	r1, r4
 800ffaa:	4628      	mov	r0, r5
 800ffac:	f000 f82a 	bl	8010004 <__swsetup_r>
 800ffb0:	b118      	cbz	r0, 800ffba <__swbuf_r+0x32>
 800ffb2:	f04f 37ff 	mov.w	r7, #4294967295
 800ffb6:	4638      	mov	r0, r7
 800ffb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffba:	6823      	ldr	r3, [r4, #0]
 800ffbc:	6922      	ldr	r2, [r4, #16]
 800ffbe:	1a98      	subs	r0, r3, r2
 800ffc0:	6963      	ldr	r3, [r4, #20]
 800ffc2:	b2f6      	uxtb	r6, r6
 800ffc4:	4283      	cmp	r3, r0
 800ffc6:	4637      	mov	r7, r6
 800ffc8:	dc05      	bgt.n	800ffd6 <__swbuf_r+0x4e>
 800ffca:	4621      	mov	r1, r4
 800ffcc:	4628      	mov	r0, r5
 800ffce:	f7ff ff3f 	bl	800fe50 <_fflush_r>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d1ed      	bne.n	800ffb2 <__swbuf_r+0x2a>
 800ffd6:	68a3      	ldr	r3, [r4, #8]
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	60a3      	str	r3, [r4, #8]
 800ffdc:	6823      	ldr	r3, [r4, #0]
 800ffde:	1c5a      	adds	r2, r3, #1
 800ffe0:	6022      	str	r2, [r4, #0]
 800ffe2:	701e      	strb	r6, [r3, #0]
 800ffe4:	6962      	ldr	r2, [r4, #20]
 800ffe6:	1c43      	adds	r3, r0, #1
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d004      	beq.n	800fff6 <__swbuf_r+0x6e>
 800ffec:	89a3      	ldrh	r3, [r4, #12]
 800ffee:	07db      	lsls	r3, r3, #31
 800fff0:	d5e1      	bpl.n	800ffb6 <__swbuf_r+0x2e>
 800fff2:	2e0a      	cmp	r6, #10
 800fff4:	d1df      	bne.n	800ffb6 <__swbuf_r+0x2e>
 800fff6:	4621      	mov	r1, r4
 800fff8:	4628      	mov	r0, r5
 800fffa:	f7ff ff29 	bl	800fe50 <_fflush_r>
 800fffe:	2800      	cmp	r0, #0
 8010000:	d0d9      	beq.n	800ffb6 <__swbuf_r+0x2e>
 8010002:	e7d6      	b.n	800ffb2 <__swbuf_r+0x2a>

08010004 <__swsetup_r>:
 8010004:	b538      	push	{r3, r4, r5, lr}
 8010006:	4b29      	ldr	r3, [pc, #164]	@ (80100ac <__swsetup_r+0xa8>)
 8010008:	4605      	mov	r5, r0
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	460c      	mov	r4, r1
 801000e:	b118      	cbz	r0, 8010018 <__swsetup_r+0x14>
 8010010:	6a03      	ldr	r3, [r0, #32]
 8010012:	b90b      	cbnz	r3, 8010018 <__swsetup_r+0x14>
 8010014:	f7fc ff5a 	bl	800cecc <__sinit>
 8010018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801001c:	0719      	lsls	r1, r3, #28
 801001e:	d422      	bmi.n	8010066 <__swsetup_r+0x62>
 8010020:	06da      	lsls	r2, r3, #27
 8010022:	d407      	bmi.n	8010034 <__swsetup_r+0x30>
 8010024:	2209      	movs	r2, #9
 8010026:	602a      	str	r2, [r5, #0]
 8010028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801002c:	81a3      	strh	r3, [r4, #12]
 801002e:	f04f 30ff 	mov.w	r0, #4294967295
 8010032:	e033      	b.n	801009c <__swsetup_r+0x98>
 8010034:	0758      	lsls	r0, r3, #29
 8010036:	d512      	bpl.n	801005e <__swsetup_r+0x5a>
 8010038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801003a:	b141      	cbz	r1, 801004e <__swsetup_r+0x4a>
 801003c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010040:	4299      	cmp	r1, r3
 8010042:	d002      	beq.n	801004a <__swsetup_r+0x46>
 8010044:	4628      	mov	r0, r5
 8010046:	f7fe f833 	bl	800e0b0 <_free_r>
 801004a:	2300      	movs	r3, #0
 801004c:	6363      	str	r3, [r4, #52]	@ 0x34
 801004e:	89a3      	ldrh	r3, [r4, #12]
 8010050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010054:	81a3      	strh	r3, [r4, #12]
 8010056:	2300      	movs	r3, #0
 8010058:	6063      	str	r3, [r4, #4]
 801005a:	6923      	ldr	r3, [r4, #16]
 801005c:	6023      	str	r3, [r4, #0]
 801005e:	89a3      	ldrh	r3, [r4, #12]
 8010060:	f043 0308 	orr.w	r3, r3, #8
 8010064:	81a3      	strh	r3, [r4, #12]
 8010066:	6923      	ldr	r3, [r4, #16]
 8010068:	b94b      	cbnz	r3, 801007e <__swsetup_r+0x7a>
 801006a:	89a3      	ldrh	r3, [r4, #12]
 801006c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010074:	d003      	beq.n	801007e <__swsetup_r+0x7a>
 8010076:	4621      	mov	r1, r4
 8010078:	4628      	mov	r0, r5
 801007a:	f7ff ff49 	bl	800ff10 <__smakebuf_r>
 801007e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010082:	f013 0201 	ands.w	r2, r3, #1
 8010086:	d00a      	beq.n	801009e <__swsetup_r+0x9a>
 8010088:	2200      	movs	r2, #0
 801008a:	60a2      	str	r2, [r4, #8]
 801008c:	6962      	ldr	r2, [r4, #20]
 801008e:	4252      	negs	r2, r2
 8010090:	61a2      	str	r2, [r4, #24]
 8010092:	6922      	ldr	r2, [r4, #16]
 8010094:	b942      	cbnz	r2, 80100a8 <__swsetup_r+0xa4>
 8010096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801009a:	d1c5      	bne.n	8010028 <__swsetup_r+0x24>
 801009c:	bd38      	pop	{r3, r4, r5, pc}
 801009e:	0799      	lsls	r1, r3, #30
 80100a0:	bf58      	it	pl
 80100a2:	6962      	ldrpl	r2, [r4, #20]
 80100a4:	60a2      	str	r2, [r4, #8]
 80100a6:	e7f4      	b.n	8010092 <__swsetup_r+0x8e>
 80100a8:	2000      	movs	r0, #0
 80100aa:	e7f7      	b.n	801009c <__swsetup_r+0x98>
 80100ac:	20000040 	.word	0x20000040

080100b0 <memmove>:
 80100b0:	4288      	cmp	r0, r1
 80100b2:	b510      	push	{r4, lr}
 80100b4:	eb01 0402 	add.w	r4, r1, r2
 80100b8:	d902      	bls.n	80100c0 <memmove+0x10>
 80100ba:	4284      	cmp	r4, r0
 80100bc:	4623      	mov	r3, r4
 80100be:	d807      	bhi.n	80100d0 <memmove+0x20>
 80100c0:	1e43      	subs	r3, r0, #1
 80100c2:	42a1      	cmp	r1, r4
 80100c4:	d008      	beq.n	80100d8 <memmove+0x28>
 80100c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100ce:	e7f8      	b.n	80100c2 <memmove+0x12>
 80100d0:	4402      	add	r2, r0
 80100d2:	4601      	mov	r1, r0
 80100d4:	428a      	cmp	r2, r1
 80100d6:	d100      	bne.n	80100da <memmove+0x2a>
 80100d8:	bd10      	pop	{r4, pc}
 80100da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80100e2:	e7f7      	b.n	80100d4 <memmove+0x24>

080100e4 <strncmp>:
 80100e4:	b510      	push	{r4, lr}
 80100e6:	b16a      	cbz	r2, 8010104 <strncmp+0x20>
 80100e8:	3901      	subs	r1, #1
 80100ea:	1884      	adds	r4, r0, r2
 80100ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d103      	bne.n	8010100 <strncmp+0x1c>
 80100f8:	42a0      	cmp	r0, r4
 80100fa:	d001      	beq.n	8010100 <strncmp+0x1c>
 80100fc:	2a00      	cmp	r2, #0
 80100fe:	d1f5      	bne.n	80100ec <strncmp+0x8>
 8010100:	1ad0      	subs	r0, r2, r3
 8010102:	bd10      	pop	{r4, pc}
 8010104:	4610      	mov	r0, r2
 8010106:	e7fc      	b.n	8010102 <strncmp+0x1e>

08010108 <_fstat_r>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	4d07      	ldr	r5, [pc, #28]	@ (8010128 <_fstat_r+0x20>)
 801010c:	2300      	movs	r3, #0
 801010e:	4604      	mov	r4, r0
 8010110:	4608      	mov	r0, r1
 8010112:	4611      	mov	r1, r2
 8010114:	602b      	str	r3, [r5, #0]
 8010116:	f7f4 fdb9 	bl	8004c8c <_fstat>
 801011a:	1c43      	adds	r3, r0, #1
 801011c:	d102      	bne.n	8010124 <_fstat_r+0x1c>
 801011e:	682b      	ldr	r3, [r5, #0]
 8010120:	b103      	cbz	r3, 8010124 <_fstat_r+0x1c>
 8010122:	6023      	str	r3, [r4, #0]
 8010124:	bd38      	pop	{r3, r4, r5, pc}
 8010126:	bf00      	nop
 8010128:	2000122c 	.word	0x2000122c

0801012c <_isatty_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d06      	ldr	r5, [pc, #24]	@ (8010148 <_isatty_r+0x1c>)
 8010130:	2300      	movs	r3, #0
 8010132:	4604      	mov	r4, r0
 8010134:	4608      	mov	r0, r1
 8010136:	602b      	str	r3, [r5, #0]
 8010138:	f7f4 fdb8 	bl	8004cac <_isatty>
 801013c:	1c43      	adds	r3, r0, #1
 801013e:	d102      	bne.n	8010146 <_isatty_r+0x1a>
 8010140:	682b      	ldr	r3, [r5, #0]
 8010142:	b103      	cbz	r3, 8010146 <_isatty_r+0x1a>
 8010144:	6023      	str	r3, [r4, #0]
 8010146:	bd38      	pop	{r3, r4, r5, pc}
 8010148:	2000122c 	.word	0x2000122c

0801014c <_sbrk_r>:
 801014c:	b538      	push	{r3, r4, r5, lr}
 801014e:	4d06      	ldr	r5, [pc, #24]	@ (8010168 <_sbrk_r+0x1c>)
 8010150:	2300      	movs	r3, #0
 8010152:	4604      	mov	r4, r0
 8010154:	4608      	mov	r0, r1
 8010156:	602b      	str	r3, [r5, #0]
 8010158:	f7f4 fdc0 	bl	8004cdc <_sbrk>
 801015c:	1c43      	adds	r3, r0, #1
 801015e:	d102      	bne.n	8010166 <_sbrk_r+0x1a>
 8010160:	682b      	ldr	r3, [r5, #0]
 8010162:	b103      	cbz	r3, 8010166 <_sbrk_r+0x1a>
 8010164:	6023      	str	r3, [r4, #0]
 8010166:	bd38      	pop	{r3, r4, r5, pc}
 8010168:	2000122c 	.word	0x2000122c

0801016c <memcpy>:
 801016c:	440a      	add	r2, r1
 801016e:	4291      	cmp	r1, r2
 8010170:	f100 33ff 	add.w	r3, r0, #4294967295
 8010174:	d100      	bne.n	8010178 <memcpy+0xc>
 8010176:	4770      	bx	lr
 8010178:	b510      	push	{r4, lr}
 801017a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801017e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010182:	4291      	cmp	r1, r2
 8010184:	d1f9      	bne.n	801017a <memcpy+0xe>
 8010186:	bd10      	pop	{r4, pc}

08010188 <nan>:
 8010188:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010190 <nan+0x8>
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop
 8010190:	00000000 	.word	0x00000000
 8010194:	7ff80000 	.word	0x7ff80000

08010198 <abort>:
 8010198:	b508      	push	{r3, lr}
 801019a:	2006      	movs	r0, #6
 801019c:	f000 fbc4 	bl	8010928 <raise>
 80101a0:	2001      	movs	r0, #1
 80101a2:	f7f4 fd3f 	bl	8004c24 <_exit>

080101a6 <_calloc_r>:
 80101a6:	b570      	push	{r4, r5, r6, lr}
 80101a8:	fba1 5402 	umull	r5, r4, r1, r2
 80101ac:	b934      	cbnz	r4, 80101bc <_calloc_r+0x16>
 80101ae:	4629      	mov	r1, r5
 80101b0:	f7fd fff2 	bl	800e198 <_malloc_r>
 80101b4:	4606      	mov	r6, r0
 80101b6:	b928      	cbnz	r0, 80101c4 <_calloc_r+0x1e>
 80101b8:	4630      	mov	r0, r6
 80101ba:	bd70      	pop	{r4, r5, r6, pc}
 80101bc:	220c      	movs	r2, #12
 80101be:	6002      	str	r2, [r0, #0]
 80101c0:	2600      	movs	r6, #0
 80101c2:	e7f9      	b.n	80101b8 <_calloc_r+0x12>
 80101c4:	462a      	mov	r2, r5
 80101c6:	4621      	mov	r1, r4
 80101c8:	f7fd f817 	bl	800d1fa <memset>
 80101cc:	e7f4      	b.n	80101b8 <_calloc_r+0x12>

080101ce <rshift>:
 80101ce:	6903      	ldr	r3, [r0, #16]
 80101d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80101d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80101dc:	f100 0414 	add.w	r4, r0, #20
 80101e0:	dd45      	ble.n	801026e <rshift+0xa0>
 80101e2:	f011 011f 	ands.w	r1, r1, #31
 80101e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80101ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80101ee:	d10c      	bne.n	801020a <rshift+0x3c>
 80101f0:	f100 0710 	add.w	r7, r0, #16
 80101f4:	4629      	mov	r1, r5
 80101f6:	42b1      	cmp	r1, r6
 80101f8:	d334      	bcc.n	8010264 <rshift+0x96>
 80101fa:	1a9b      	subs	r3, r3, r2
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	1eea      	subs	r2, r5, #3
 8010200:	4296      	cmp	r6, r2
 8010202:	bf38      	it	cc
 8010204:	2300      	movcc	r3, #0
 8010206:	4423      	add	r3, r4
 8010208:	e015      	b.n	8010236 <rshift+0x68>
 801020a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801020e:	f1c1 0820 	rsb	r8, r1, #32
 8010212:	40cf      	lsrs	r7, r1
 8010214:	f105 0e04 	add.w	lr, r5, #4
 8010218:	46a1      	mov	r9, r4
 801021a:	4576      	cmp	r6, lr
 801021c:	46f4      	mov	ip, lr
 801021e:	d815      	bhi.n	801024c <rshift+0x7e>
 8010220:	1a9a      	subs	r2, r3, r2
 8010222:	0092      	lsls	r2, r2, #2
 8010224:	3a04      	subs	r2, #4
 8010226:	3501      	adds	r5, #1
 8010228:	42ae      	cmp	r6, r5
 801022a:	bf38      	it	cc
 801022c:	2200      	movcc	r2, #0
 801022e:	18a3      	adds	r3, r4, r2
 8010230:	50a7      	str	r7, [r4, r2]
 8010232:	b107      	cbz	r7, 8010236 <rshift+0x68>
 8010234:	3304      	adds	r3, #4
 8010236:	1b1a      	subs	r2, r3, r4
 8010238:	42a3      	cmp	r3, r4
 801023a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801023e:	bf08      	it	eq
 8010240:	2300      	moveq	r3, #0
 8010242:	6102      	str	r2, [r0, #16]
 8010244:	bf08      	it	eq
 8010246:	6143      	streq	r3, [r0, #20]
 8010248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801024c:	f8dc c000 	ldr.w	ip, [ip]
 8010250:	fa0c fc08 	lsl.w	ip, ip, r8
 8010254:	ea4c 0707 	orr.w	r7, ip, r7
 8010258:	f849 7b04 	str.w	r7, [r9], #4
 801025c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010260:	40cf      	lsrs	r7, r1
 8010262:	e7da      	b.n	801021a <rshift+0x4c>
 8010264:	f851 cb04 	ldr.w	ip, [r1], #4
 8010268:	f847 cf04 	str.w	ip, [r7, #4]!
 801026c:	e7c3      	b.n	80101f6 <rshift+0x28>
 801026e:	4623      	mov	r3, r4
 8010270:	e7e1      	b.n	8010236 <rshift+0x68>

08010272 <__hexdig_fun>:
 8010272:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010276:	2b09      	cmp	r3, #9
 8010278:	d802      	bhi.n	8010280 <__hexdig_fun+0xe>
 801027a:	3820      	subs	r0, #32
 801027c:	b2c0      	uxtb	r0, r0
 801027e:	4770      	bx	lr
 8010280:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010284:	2b05      	cmp	r3, #5
 8010286:	d801      	bhi.n	801028c <__hexdig_fun+0x1a>
 8010288:	3847      	subs	r0, #71	@ 0x47
 801028a:	e7f7      	b.n	801027c <__hexdig_fun+0xa>
 801028c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010290:	2b05      	cmp	r3, #5
 8010292:	d801      	bhi.n	8010298 <__hexdig_fun+0x26>
 8010294:	3827      	subs	r0, #39	@ 0x27
 8010296:	e7f1      	b.n	801027c <__hexdig_fun+0xa>
 8010298:	2000      	movs	r0, #0
 801029a:	4770      	bx	lr

0801029c <__gethex>:
 801029c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a0:	b085      	sub	sp, #20
 80102a2:	468a      	mov	sl, r1
 80102a4:	9302      	str	r3, [sp, #8]
 80102a6:	680b      	ldr	r3, [r1, #0]
 80102a8:	9001      	str	r0, [sp, #4]
 80102aa:	4690      	mov	r8, r2
 80102ac:	1c9c      	adds	r4, r3, #2
 80102ae:	46a1      	mov	r9, r4
 80102b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80102b4:	2830      	cmp	r0, #48	@ 0x30
 80102b6:	d0fa      	beq.n	80102ae <__gethex+0x12>
 80102b8:	eba9 0303 	sub.w	r3, r9, r3
 80102bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80102c0:	f7ff ffd7 	bl	8010272 <__hexdig_fun>
 80102c4:	4605      	mov	r5, r0
 80102c6:	2800      	cmp	r0, #0
 80102c8:	d168      	bne.n	801039c <__gethex+0x100>
 80102ca:	49a0      	ldr	r1, [pc, #640]	@ (801054c <__gethex+0x2b0>)
 80102cc:	2201      	movs	r2, #1
 80102ce:	4648      	mov	r0, r9
 80102d0:	f7ff ff08 	bl	80100e4 <strncmp>
 80102d4:	4607      	mov	r7, r0
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d167      	bne.n	80103aa <__gethex+0x10e>
 80102da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80102de:	4626      	mov	r6, r4
 80102e0:	f7ff ffc7 	bl	8010272 <__hexdig_fun>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d062      	beq.n	80103ae <__gethex+0x112>
 80102e8:	4623      	mov	r3, r4
 80102ea:	7818      	ldrb	r0, [r3, #0]
 80102ec:	2830      	cmp	r0, #48	@ 0x30
 80102ee:	4699      	mov	r9, r3
 80102f0:	f103 0301 	add.w	r3, r3, #1
 80102f4:	d0f9      	beq.n	80102ea <__gethex+0x4e>
 80102f6:	f7ff ffbc 	bl	8010272 <__hexdig_fun>
 80102fa:	fab0 f580 	clz	r5, r0
 80102fe:	096d      	lsrs	r5, r5, #5
 8010300:	f04f 0b01 	mov.w	fp, #1
 8010304:	464a      	mov	r2, r9
 8010306:	4616      	mov	r6, r2
 8010308:	3201      	adds	r2, #1
 801030a:	7830      	ldrb	r0, [r6, #0]
 801030c:	f7ff ffb1 	bl	8010272 <__hexdig_fun>
 8010310:	2800      	cmp	r0, #0
 8010312:	d1f8      	bne.n	8010306 <__gethex+0x6a>
 8010314:	498d      	ldr	r1, [pc, #564]	@ (801054c <__gethex+0x2b0>)
 8010316:	2201      	movs	r2, #1
 8010318:	4630      	mov	r0, r6
 801031a:	f7ff fee3 	bl	80100e4 <strncmp>
 801031e:	2800      	cmp	r0, #0
 8010320:	d13f      	bne.n	80103a2 <__gethex+0x106>
 8010322:	b944      	cbnz	r4, 8010336 <__gethex+0x9a>
 8010324:	1c74      	adds	r4, r6, #1
 8010326:	4622      	mov	r2, r4
 8010328:	4616      	mov	r6, r2
 801032a:	3201      	adds	r2, #1
 801032c:	7830      	ldrb	r0, [r6, #0]
 801032e:	f7ff ffa0 	bl	8010272 <__hexdig_fun>
 8010332:	2800      	cmp	r0, #0
 8010334:	d1f8      	bne.n	8010328 <__gethex+0x8c>
 8010336:	1ba4      	subs	r4, r4, r6
 8010338:	00a7      	lsls	r7, r4, #2
 801033a:	7833      	ldrb	r3, [r6, #0]
 801033c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010340:	2b50      	cmp	r3, #80	@ 0x50
 8010342:	d13e      	bne.n	80103c2 <__gethex+0x126>
 8010344:	7873      	ldrb	r3, [r6, #1]
 8010346:	2b2b      	cmp	r3, #43	@ 0x2b
 8010348:	d033      	beq.n	80103b2 <__gethex+0x116>
 801034a:	2b2d      	cmp	r3, #45	@ 0x2d
 801034c:	d034      	beq.n	80103b8 <__gethex+0x11c>
 801034e:	1c71      	adds	r1, r6, #1
 8010350:	2400      	movs	r4, #0
 8010352:	7808      	ldrb	r0, [r1, #0]
 8010354:	f7ff ff8d 	bl	8010272 <__hexdig_fun>
 8010358:	1e43      	subs	r3, r0, #1
 801035a:	b2db      	uxtb	r3, r3
 801035c:	2b18      	cmp	r3, #24
 801035e:	d830      	bhi.n	80103c2 <__gethex+0x126>
 8010360:	f1a0 0210 	sub.w	r2, r0, #16
 8010364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010368:	f7ff ff83 	bl	8010272 <__hexdig_fun>
 801036c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010370:	fa5f fc8c 	uxtb.w	ip, ip
 8010374:	f1bc 0f18 	cmp.w	ip, #24
 8010378:	f04f 030a 	mov.w	r3, #10
 801037c:	d91e      	bls.n	80103bc <__gethex+0x120>
 801037e:	b104      	cbz	r4, 8010382 <__gethex+0xe6>
 8010380:	4252      	negs	r2, r2
 8010382:	4417      	add	r7, r2
 8010384:	f8ca 1000 	str.w	r1, [sl]
 8010388:	b1ed      	cbz	r5, 80103c6 <__gethex+0x12a>
 801038a:	f1bb 0f00 	cmp.w	fp, #0
 801038e:	bf0c      	ite	eq
 8010390:	2506      	moveq	r5, #6
 8010392:	2500      	movne	r5, #0
 8010394:	4628      	mov	r0, r5
 8010396:	b005      	add	sp, #20
 8010398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039c:	2500      	movs	r5, #0
 801039e:	462c      	mov	r4, r5
 80103a0:	e7b0      	b.n	8010304 <__gethex+0x68>
 80103a2:	2c00      	cmp	r4, #0
 80103a4:	d1c7      	bne.n	8010336 <__gethex+0x9a>
 80103a6:	4627      	mov	r7, r4
 80103a8:	e7c7      	b.n	801033a <__gethex+0x9e>
 80103aa:	464e      	mov	r6, r9
 80103ac:	462f      	mov	r7, r5
 80103ae:	2501      	movs	r5, #1
 80103b0:	e7c3      	b.n	801033a <__gethex+0x9e>
 80103b2:	2400      	movs	r4, #0
 80103b4:	1cb1      	adds	r1, r6, #2
 80103b6:	e7cc      	b.n	8010352 <__gethex+0xb6>
 80103b8:	2401      	movs	r4, #1
 80103ba:	e7fb      	b.n	80103b4 <__gethex+0x118>
 80103bc:	fb03 0002 	mla	r0, r3, r2, r0
 80103c0:	e7ce      	b.n	8010360 <__gethex+0xc4>
 80103c2:	4631      	mov	r1, r6
 80103c4:	e7de      	b.n	8010384 <__gethex+0xe8>
 80103c6:	eba6 0309 	sub.w	r3, r6, r9
 80103ca:	3b01      	subs	r3, #1
 80103cc:	4629      	mov	r1, r5
 80103ce:	2b07      	cmp	r3, #7
 80103d0:	dc0a      	bgt.n	80103e8 <__gethex+0x14c>
 80103d2:	9801      	ldr	r0, [sp, #4]
 80103d4:	f7fd ff6c 	bl	800e2b0 <_Balloc>
 80103d8:	4604      	mov	r4, r0
 80103da:	b940      	cbnz	r0, 80103ee <__gethex+0x152>
 80103dc:	4b5c      	ldr	r3, [pc, #368]	@ (8010550 <__gethex+0x2b4>)
 80103de:	4602      	mov	r2, r0
 80103e0:	21e4      	movs	r1, #228	@ 0xe4
 80103e2:	485c      	ldr	r0, [pc, #368]	@ (8010554 <__gethex+0x2b8>)
 80103e4:	f7fc ffec 	bl	800d3c0 <__assert_func>
 80103e8:	3101      	adds	r1, #1
 80103ea:	105b      	asrs	r3, r3, #1
 80103ec:	e7ef      	b.n	80103ce <__gethex+0x132>
 80103ee:	f100 0a14 	add.w	sl, r0, #20
 80103f2:	2300      	movs	r3, #0
 80103f4:	4655      	mov	r5, sl
 80103f6:	469b      	mov	fp, r3
 80103f8:	45b1      	cmp	r9, r6
 80103fa:	d337      	bcc.n	801046c <__gethex+0x1d0>
 80103fc:	f845 bb04 	str.w	fp, [r5], #4
 8010400:	eba5 050a 	sub.w	r5, r5, sl
 8010404:	10ad      	asrs	r5, r5, #2
 8010406:	6125      	str	r5, [r4, #16]
 8010408:	4658      	mov	r0, fp
 801040a:	f7fe f843 	bl	800e494 <__hi0bits>
 801040e:	016d      	lsls	r5, r5, #5
 8010410:	f8d8 6000 	ldr.w	r6, [r8]
 8010414:	1a2d      	subs	r5, r5, r0
 8010416:	42b5      	cmp	r5, r6
 8010418:	dd54      	ble.n	80104c4 <__gethex+0x228>
 801041a:	1bad      	subs	r5, r5, r6
 801041c:	4629      	mov	r1, r5
 801041e:	4620      	mov	r0, r4
 8010420:	f7fe fbcf 	bl	800ebc2 <__any_on>
 8010424:	4681      	mov	r9, r0
 8010426:	b178      	cbz	r0, 8010448 <__gethex+0x1ac>
 8010428:	1e6b      	subs	r3, r5, #1
 801042a:	1159      	asrs	r1, r3, #5
 801042c:	f003 021f 	and.w	r2, r3, #31
 8010430:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010434:	f04f 0901 	mov.w	r9, #1
 8010438:	fa09 f202 	lsl.w	r2, r9, r2
 801043c:	420a      	tst	r2, r1
 801043e:	d003      	beq.n	8010448 <__gethex+0x1ac>
 8010440:	454b      	cmp	r3, r9
 8010442:	dc36      	bgt.n	80104b2 <__gethex+0x216>
 8010444:	f04f 0902 	mov.w	r9, #2
 8010448:	4629      	mov	r1, r5
 801044a:	4620      	mov	r0, r4
 801044c:	f7ff febf 	bl	80101ce <rshift>
 8010450:	442f      	add	r7, r5
 8010452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010456:	42bb      	cmp	r3, r7
 8010458:	da42      	bge.n	80104e0 <__gethex+0x244>
 801045a:	9801      	ldr	r0, [sp, #4]
 801045c:	4621      	mov	r1, r4
 801045e:	f7fd ff67 	bl	800e330 <_Bfree>
 8010462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010464:	2300      	movs	r3, #0
 8010466:	6013      	str	r3, [r2, #0]
 8010468:	25a3      	movs	r5, #163	@ 0xa3
 801046a:	e793      	b.n	8010394 <__gethex+0xf8>
 801046c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010470:	2a2e      	cmp	r2, #46	@ 0x2e
 8010472:	d012      	beq.n	801049a <__gethex+0x1fe>
 8010474:	2b20      	cmp	r3, #32
 8010476:	d104      	bne.n	8010482 <__gethex+0x1e6>
 8010478:	f845 bb04 	str.w	fp, [r5], #4
 801047c:	f04f 0b00 	mov.w	fp, #0
 8010480:	465b      	mov	r3, fp
 8010482:	7830      	ldrb	r0, [r6, #0]
 8010484:	9303      	str	r3, [sp, #12]
 8010486:	f7ff fef4 	bl	8010272 <__hexdig_fun>
 801048a:	9b03      	ldr	r3, [sp, #12]
 801048c:	f000 000f 	and.w	r0, r0, #15
 8010490:	4098      	lsls	r0, r3
 8010492:	ea4b 0b00 	orr.w	fp, fp, r0
 8010496:	3304      	adds	r3, #4
 8010498:	e7ae      	b.n	80103f8 <__gethex+0x15c>
 801049a:	45b1      	cmp	r9, r6
 801049c:	d8ea      	bhi.n	8010474 <__gethex+0x1d8>
 801049e:	492b      	ldr	r1, [pc, #172]	@ (801054c <__gethex+0x2b0>)
 80104a0:	9303      	str	r3, [sp, #12]
 80104a2:	2201      	movs	r2, #1
 80104a4:	4630      	mov	r0, r6
 80104a6:	f7ff fe1d 	bl	80100e4 <strncmp>
 80104aa:	9b03      	ldr	r3, [sp, #12]
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d1e1      	bne.n	8010474 <__gethex+0x1d8>
 80104b0:	e7a2      	b.n	80103f8 <__gethex+0x15c>
 80104b2:	1ea9      	subs	r1, r5, #2
 80104b4:	4620      	mov	r0, r4
 80104b6:	f7fe fb84 	bl	800ebc2 <__any_on>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d0c2      	beq.n	8010444 <__gethex+0x1a8>
 80104be:	f04f 0903 	mov.w	r9, #3
 80104c2:	e7c1      	b.n	8010448 <__gethex+0x1ac>
 80104c4:	da09      	bge.n	80104da <__gethex+0x23e>
 80104c6:	1b75      	subs	r5, r6, r5
 80104c8:	4621      	mov	r1, r4
 80104ca:	9801      	ldr	r0, [sp, #4]
 80104cc:	462a      	mov	r2, r5
 80104ce:	f7fe f93f 	bl	800e750 <__lshift>
 80104d2:	1b7f      	subs	r7, r7, r5
 80104d4:	4604      	mov	r4, r0
 80104d6:	f100 0a14 	add.w	sl, r0, #20
 80104da:	f04f 0900 	mov.w	r9, #0
 80104de:	e7b8      	b.n	8010452 <__gethex+0x1b6>
 80104e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80104e4:	42bd      	cmp	r5, r7
 80104e6:	dd6f      	ble.n	80105c8 <__gethex+0x32c>
 80104e8:	1bed      	subs	r5, r5, r7
 80104ea:	42ae      	cmp	r6, r5
 80104ec:	dc34      	bgt.n	8010558 <__gethex+0x2bc>
 80104ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80104f2:	2b02      	cmp	r3, #2
 80104f4:	d022      	beq.n	801053c <__gethex+0x2a0>
 80104f6:	2b03      	cmp	r3, #3
 80104f8:	d024      	beq.n	8010544 <__gethex+0x2a8>
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d115      	bne.n	801052a <__gethex+0x28e>
 80104fe:	42ae      	cmp	r6, r5
 8010500:	d113      	bne.n	801052a <__gethex+0x28e>
 8010502:	2e01      	cmp	r6, #1
 8010504:	d10b      	bne.n	801051e <__gethex+0x282>
 8010506:	9a02      	ldr	r2, [sp, #8]
 8010508:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801050c:	6013      	str	r3, [r2, #0]
 801050e:	2301      	movs	r3, #1
 8010510:	6123      	str	r3, [r4, #16]
 8010512:	f8ca 3000 	str.w	r3, [sl]
 8010516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010518:	2562      	movs	r5, #98	@ 0x62
 801051a:	601c      	str	r4, [r3, #0]
 801051c:	e73a      	b.n	8010394 <__gethex+0xf8>
 801051e:	1e71      	subs	r1, r6, #1
 8010520:	4620      	mov	r0, r4
 8010522:	f7fe fb4e 	bl	800ebc2 <__any_on>
 8010526:	2800      	cmp	r0, #0
 8010528:	d1ed      	bne.n	8010506 <__gethex+0x26a>
 801052a:	9801      	ldr	r0, [sp, #4]
 801052c:	4621      	mov	r1, r4
 801052e:	f7fd feff 	bl	800e330 <_Bfree>
 8010532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010534:	2300      	movs	r3, #0
 8010536:	6013      	str	r3, [r2, #0]
 8010538:	2550      	movs	r5, #80	@ 0x50
 801053a:	e72b      	b.n	8010394 <__gethex+0xf8>
 801053c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1f3      	bne.n	801052a <__gethex+0x28e>
 8010542:	e7e0      	b.n	8010506 <__gethex+0x26a>
 8010544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010546:	2b00      	cmp	r3, #0
 8010548:	d1dd      	bne.n	8010506 <__gethex+0x26a>
 801054a:	e7ee      	b.n	801052a <__gethex+0x28e>
 801054c:	08012a4a 	.word	0x08012a4a
 8010550:	080129e0 	.word	0x080129e0
 8010554:	08012a65 	.word	0x08012a65
 8010558:	1e6f      	subs	r7, r5, #1
 801055a:	f1b9 0f00 	cmp.w	r9, #0
 801055e:	d130      	bne.n	80105c2 <__gethex+0x326>
 8010560:	b127      	cbz	r7, 801056c <__gethex+0x2d0>
 8010562:	4639      	mov	r1, r7
 8010564:	4620      	mov	r0, r4
 8010566:	f7fe fb2c 	bl	800ebc2 <__any_on>
 801056a:	4681      	mov	r9, r0
 801056c:	117a      	asrs	r2, r7, #5
 801056e:	2301      	movs	r3, #1
 8010570:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010574:	f007 071f 	and.w	r7, r7, #31
 8010578:	40bb      	lsls	r3, r7
 801057a:	4213      	tst	r3, r2
 801057c:	4629      	mov	r1, r5
 801057e:	4620      	mov	r0, r4
 8010580:	bf18      	it	ne
 8010582:	f049 0902 	orrne.w	r9, r9, #2
 8010586:	f7ff fe22 	bl	80101ce <rshift>
 801058a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801058e:	1b76      	subs	r6, r6, r5
 8010590:	2502      	movs	r5, #2
 8010592:	f1b9 0f00 	cmp.w	r9, #0
 8010596:	d047      	beq.n	8010628 <__gethex+0x38c>
 8010598:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801059c:	2b02      	cmp	r3, #2
 801059e:	d015      	beq.n	80105cc <__gethex+0x330>
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d017      	beq.n	80105d4 <__gethex+0x338>
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d109      	bne.n	80105bc <__gethex+0x320>
 80105a8:	f019 0f02 	tst.w	r9, #2
 80105ac:	d006      	beq.n	80105bc <__gethex+0x320>
 80105ae:	f8da 3000 	ldr.w	r3, [sl]
 80105b2:	ea49 0903 	orr.w	r9, r9, r3
 80105b6:	f019 0f01 	tst.w	r9, #1
 80105ba:	d10e      	bne.n	80105da <__gethex+0x33e>
 80105bc:	f045 0510 	orr.w	r5, r5, #16
 80105c0:	e032      	b.n	8010628 <__gethex+0x38c>
 80105c2:	f04f 0901 	mov.w	r9, #1
 80105c6:	e7d1      	b.n	801056c <__gethex+0x2d0>
 80105c8:	2501      	movs	r5, #1
 80105ca:	e7e2      	b.n	8010592 <__gethex+0x2f6>
 80105cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105ce:	f1c3 0301 	rsb	r3, r3, #1
 80105d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80105d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d0f0      	beq.n	80105bc <__gethex+0x320>
 80105da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80105de:	f104 0314 	add.w	r3, r4, #20
 80105e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80105e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80105ea:	f04f 0c00 	mov.w	ip, #0
 80105ee:	4618      	mov	r0, r3
 80105f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80105f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80105f8:	d01b      	beq.n	8010632 <__gethex+0x396>
 80105fa:	3201      	adds	r2, #1
 80105fc:	6002      	str	r2, [r0, #0]
 80105fe:	2d02      	cmp	r5, #2
 8010600:	f104 0314 	add.w	r3, r4, #20
 8010604:	d13c      	bne.n	8010680 <__gethex+0x3e4>
 8010606:	f8d8 2000 	ldr.w	r2, [r8]
 801060a:	3a01      	subs	r2, #1
 801060c:	42b2      	cmp	r2, r6
 801060e:	d109      	bne.n	8010624 <__gethex+0x388>
 8010610:	1171      	asrs	r1, r6, #5
 8010612:	2201      	movs	r2, #1
 8010614:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010618:	f006 061f 	and.w	r6, r6, #31
 801061c:	fa02 f606 	lsl.w	r6, r2, r6
 8010620:	421e      	tst	r6, r3
 8010622:	d13a      	bne.n	801069a <__gethex+0x3fe>
 8010624:	f045 0520 	orr.w	r5, r5, #32
 8010628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801062a:	601c      	str	r4, [r3, #0]
 801062c:	9b02      	ldr	r3, [sp, #8]
 801062e:	601f      	str	r7, [r3, #0]
 8010630:	e6b0      	b.n	8010394 <__gethex+0xf8>
 8010632:	4299      	cmp	r1, r3
 8010634:	f843 cc04 	str.w	ip, [r3, #-4]
 8010638:	d8d9      	bhi.n	80105ee <__gethex+0x352>
 801063a:	68a3      	ldr	r3, [r4, #8]
 801063c:	459b      	cmp	fp, r3
 801063e:	db17      	blt.n	8010670 <__gethex+0x3d4>
 8010640:	6861      	ldr	r1, [r4, #4]
 8010642:	9801      	ldr	r0, [sp, #4]
 8010644:	3101      	adds	r1, #1
 8010646:	f7fd fe33 	bl	800e2b0 <_Balloc>
 801064a:	4681      	mov	r9, r0
 801064c:	b918      	cbnz	r0, 8010656 <__gethex+0x3ba>
 801064e:	4b1a      	ldr	r3, [pc, #104]	@ (80106b8 <__gethex+0x41c>)
 8010650:	4602      	mov	r2, r0
 8010652:	2184      	movs	r1, #132	@ 0x84
 8010654:	e6c5      	b.n	80103e2 <__gethex+0x146>
 8010656:	6922      	ldr	r2, [r4, #16]
 8010658:	3202      	adds	r2, #2
 801065a:	f104 010c 	add.w	r1, r4, #12
 801065e:	0092      	lsls	r2, r2, #2
 8010660:	300c      	adds	r0, #12
 8010662:	f7ff fd83 	bl	801016c <memcpy>
 8010666:	4621      	mov	r1, r4
 8010668:	9801      	ldr	r0, [sp, #4]
 801066a:	f7fd fe61 	bl	800e330 <_Bfree>
 801066e:	464c      	mov	r4, r9
 8010670:	6923      	ldr	r3, [r4, #16]
 8010672:	1c5a      	adds	r2, r3, #1
 8010674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010678:	6122      	str	r2, [r4, #16]
 801067a:	2201      	movs	r2, #1
 801067c:	615a      	str	r2, [r3, #20]
 801067e:	e7be      	b.n	80105fe <__gethex+0x362>
 8010680:	6922      	ldr	r2, [r4, #16]
 8010682:	455a      	cmp	r2, fp
 8010684:	dd0b      	ble.n	801069e <__gethex+0x402>
 8010686:	2101      	movs	r1, #1
 8010688:	4620      	mov	r0, r4
 801068a:	f7ff fda0 	bl	80101ce <rshift>
 801068e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010692:	3701      	adds	r7, #1
 8010694:	42bb      	cmp	r3, r7
 8010696:	f6ff aee0 	blt.w	801045a <__gethex+0x1be>
 801069a:	2501      	movs	r5, #1
 801069c:	e7c2      	b.n	8010624 <__gethex+0x388>
 801069e:	f016 061f 	ands.w	r6, r6, #31
 80106a2:	d0fa      	beq.n	801069a <__gethex+0x3fe>
 80106a4:	4453      	add	r3, sl
 80106a6:	f1c6 0620 	rsb	r6, r6, #32
 80106aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80106ae:	f7fd fef1 	bl	800e494 <__hi0bits>
 80106b2:	42b0      	cmp	r0, r6
 80106b4:	dbe7      	blt.n	8010686 <__gethex+0x3ea>
 80106b6:	e7f0      	b.n	801069a <__gethex+0x3fe>
 80106b8:	080129e0 	.word	0x080129e0

080106bc <L_shift>:
 80106bc:	f1c2 0208 	rsb	r2, r2, #8
 80106c0:	0092      	lsls	r2, r2, #2
 80106c2:	b570      	push	{r4, r5, r6, lr}
 80106c4:	f1c2 0620 	rsb	r6, r2, #32
 80106c8:	6843      	ldr	r3, [r0, #4]
 80106ca:	6804      	ldr	r4, [r0, #0]
 80106cc:	fa03 f506 	lsl.w	r5, r3, r6
 80106d0:	432c      	orrs	r4, r5
 80106d2:	40d3      	lsrs	r3, r2
 80106d4:	6004      	str	r4, [r0, #0]
 80106d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80106da:	4288      	cmp	r0, r1
 80106dc:	d3f4      	bcc.n	80106c8 <L_shift+0xc>
 80106de:	bd70      	pop	{r4, r5, r6, pc}

080106e0 <__match>:
 80106e0:	b530      	push	{r4, r5, lr}
 80106e2:	6803      	ldr	r3, [r0, #0]
 80106e4:	3301      	adds	r3, #1
 80106e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106ea:	b914      	cbnz	r4, 80106f2 <__match+0x12>
 80106ec:	6003      	str	r3, [r0, #0]
 80106ee:	2001      	movs	r0, #1
 80106f0:	bd30      	pop	{r4, r5, pc}
 80106f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80106fa:	2d19      	cmp	r5, #25
 80106fc:	bf98      	it	ls
 80106fe:	3220      	addls	r2, #32
 8010700:	42a2      	cmp	r2, r4
 8010702:	d0f0      	beq.n	80106e6 <__match+0x6>
 8010704:	2000      	movs	r0, #0
 8010706:	e7f3      	b.n	80106f0 <__match+0x10>

08010708 <__hexnan>:
 8010708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070c:	680b      	ldr	r3, [r1, #0]
 801070e:	6801      	ldr	r1, [r0, #0]
 8010710:	115e      	asrs	r6, r3, #5
 8010712:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010716:	f013 031f 	ands.w	r3, r3, #31
 801071a:	b087      	sub	sp, #28
 801071c:	bf18      	it	ne
 801071e:	3604      	addne	r6, #4
 8010720:	2500      	movs	r5, #0
 8010722:	1f37      	subs	r7, r6, #4
 8010724:	4682      	mov	sl, r0
 8010726:	4690      	mov	r8, r2
 8010728:	9301      	str	r3, [sp, #4]
 801072a:	f846 5c04 	str.w	r5, [r6, #-4]
 801072e:	46b9      	mov	r9, r7
 8010730:	463c      	mov	r4, r7
 8010732:	9502      	str	r5, [sp, #8]
 8010734:	46ab      	mov	fp, r5
 8010736:	784a      	ldrb	r2, [r1, #1]
 8010738:	1c4b      	adds	r3, r1, #1
 801073a:	9303      	str	r3, [sp, #12]
 801073c:	b342      	cbz	r2, 8010790 <__hexnan+0x88>
 801073e:	4610      	mov	r0, r2
 8010740:	9105      	str	r1, [sp, #20]
 8010742:	9204      	str	r2, [sp, #16]
 8010744:	f7ff fd95 	bl	8010272 <__hexdig_fun>
 8010748:	2800      	cmp	r0, #0
 801074a:	d151      	bne.n	80107f0 <__hexnan+0xe8>
 801074c:	9a04      	ldr	r2, [sp, #16]
 801074e:	9905      	ldr	r1, [sp, #20]
 8010750:	2a20      	cmp	r2, #32
 8010752:	d818      	bhi.n	8010786 <__hexnan+0x7e>
 8010754:	9b02      	ldr	r3, [sp, #8]
 8010756:	459b      	cmp	fp, r3
 8010758:	dd13      	ble.n	8010782 <__hexnan+0x7a>
 801075a:	454c      	cmp	r4, r9
 801075c:	d206      	bcs.n	801076c <__hexnan+0x64>
 801075e:	2d07      	cmp	r5, #7
 8010760:	dc04      	bgt.n	801076c <__hexnan+0x64>
 8010762:	462a      	mov	r2, r5
 8010764:	4649      	mov	r1, r9
 8010766:	4620      	mov	r0, r4
 8010768:	f7ff ffa8 	bl	80106bc <L_shift>
 801076c:	4544      	cmp	r4, r8
 801076e:	d952      	bls.n	8010816 <__hexnan+0x10e>
 8010770:	2300      	movs	r3, #0
 8010772:	f1a4 0904 	sub.w	r9, r4, #4
 8010776:	f844 3c04 	str.w	r3, [r4, #-4]
 801077a:	f8cd b008 	str.w	fp, [sp, #8]
 801077e:	464c      	mov	r4, r9
 8010780:	461d      	mov	r5, r3
 8010782:	9903      	ldr	r1, [sp, #12]
 8010784:	e7d7      	b.n	8010736 <__hexnan+0x2e>
 8010786:	2a29      	cmp	r2, #41	@ 0x29
 8010788:	d157      	bne.n	801083a <__hexnan+0x132>
 801078a:	3102      	adds	r1, #2
 801078c:	f8ca 1000 	str.w	r1, [sl]
 8010790:	f1bb 0f00 	cmp.w	fp, #0
 8010794:	d051      	beq.n	801083a <__hexnan+0x132>
 8010796:	454c      	cmp	r4, r9
 8010798:	d206      	bcs.n	80107a8 <__hexnan+0xa0>
 801079a:	2d07      	cmp	r5, #7
 801079c:	dc04      	bgt.n	80107a8 <__hexnan+0xa0>
 801079e:	462a      	mov	r2, r5
 80107a0:	4649      	mov	r1, r9
 80107a2:	4620      	mov	r0, r4
 80107a4:	f7ff ff8a 	bl	80106bc <L_shift>
 80107a8:	4544      	cmp	r4, r8
 80107aa:	d936      	bls.n	801081a <__hexnan+0x112>
 80107ac:	f1a8 0204 	sub.w	r2, r8, #4
 80107b0:	4623      	mov	r3, r4
 80107b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80107b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80107ba:	429f      	cmp	r7, r3
 80107bc:	d2f9      	bcs.n	80107b2 <__hexnan+0xaa>
 80107be:	1b3b      	subs	r3, r7, r4
 80107c0:	f023 0303 	bic.w	r3, r3, #3
 80107c4:	3304      	adds	r3, #4
 80107c6:	3401      	adds	r4, #1
 80107c8:	3e03      	subs	r6, #3
 80107ca:	42b4      	cmp	r4, r6
 80107cc:	bf88      	it	hi
 80107ce:	2304      	movhi	r3, #4
 80107d0:	4443      	add	r3, r8
 80107d2:	2200      	movs	r2, #0
 80107d4:	f843 2b04 	str.w	r2, [r3], #4
 80107d8:	429f      	cmp	r7, r3
 80107da:	d2fb      	bcs.n	80107d4 <__hexnan+0xcc>
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	b91b      	cbnz	r3, 80107e8 <__hexnan+0xe0>
 80107e0:	4547      	cmp	r7, r8
 80107e2:	d128      	bne.n	8010836 <__hexnan+0x12e>
 80107e4:	2301      	movs	r3, #1
 80107e6:	603b      	str	r3, [r7, #0]
 80107e8:	2005      	movs	r0, #5
 80107ea:	b007      	add	sp, #28
 80107ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f0:	3501      	adds	r5, #1
 80107f2:	2d08      	cmp	r5, #8
 80107f4:	f10b 0b01 	add.w	fp, fp, #1
 80107f8:	dd06      	ble.n	8010808 <__hexnan+0x100>
 80107fa:	4544      	cmp	r4, r8
 80107fc:	d9c1      	bls.n	8010782 <__hexnan+0x7a>
 80107fe:	2300      	movs	r3, #0
 8010800:	f844 3c04 	str.w	r3, [r4, #-4]
 8010804:	2501      	movs	r5, #1
 8010806:	3c04      	subs	r4, #4
 8010808:	6822      	ldr	r2, [r4, #0]
 801080a:	f000 000f 	and.w	r0, r0, #15
 801080e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010812:	6020      	str	r0, [r4, #0]
 8010814:	e7b5      	b.n	8010782 <__hexnan+0x7a>
 8010816:	2508      	movs	r5, #8
 8010818:	e7b3      	b.n	8010782 <__hexnan+0x7a>
 801081a:	9b01      	ldr	r3, [sp, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d0dd      	beq.n	80107dc <__hexnan+0xd4>
 8010820:	f1c3 0320 	rsb	r3, r3, #32
 8010824:	f04f 32ff 	mov.w	r2, #4294967295
 8010828:	40da      	lsrs	r2, r3
 801082a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801082e:	4013      	ands	r3, r2
 8010830:	f846 3c04 	str.w	r3, [r6, #-4]
 8010834:	e7d2      	b.n	80107dc <__hexnan+0xd4>
 8010836:	3f04      	subs	r7, #4
 8010838:	e7d0      	b.n	80107dc <__hexnan+0xd4>
 801083a:	2004      	movs	r0, #4
 801083c:	e7d5      	b.n	80107ea <__hexnan+0xe2>

0801083e <__ascii_mbtowc>:
 801083e:	b082      	sub	sp, #8
 8010840:	b901      	cbnz	r1, 8010844 <__ascii_mbtowc+0x6>
 8010842:	a901      	add	r1, sp, #4
 8010844:	b142      	cbz	r2, 8010858 <__ascii_mbtowc+0x1a>
 8010846:	b14b      	cbz	r3, 801085c <__ascii_mbtowc+0x1e>
 8010848:	7813      	ldrb	r3, [r2, #0]
 801084a:	600b      	str	r3, [r1, #0]
 801084c:	7812      	ldrb	r2, [r2, #0]
 801084e:	1e10      	subs	r0, r2, #0
 8010850:	bf18      	it	ne
 8010852:	2001      	movne	r0, #1
 8010854:	b002      	add	sp, #8
 8010856:	4770      	bx	lr
 8010858:	4610      	mov	r0, r2
 801085a:	e7fb      	b.n	8010854 <__ascii_mbtowc+0x16>
 801085c:	f06f 0001 	mvn.w	r0, #1
 8010860:	e7f8      	b.n	8010854 <__ascii_mbtowc+0x16>

08010862 <_realloc_r>:
 8010862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010866:	4607      	mov	r7, r0
 8010868:	4614      	mov	r4, r2
 801086a:	460d      	mov	r5, r1
 801086c:	b921      	cbnz	r1, 8010878 <_realloc_r+0x16>
 801086e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010872:	4611      	mov	r1, r2
 8010874:	f7fd bc90 	b.w	800e198 <_malloc_r>
 8010878:	b92a      	cbnz	r2, 8010886 <_realloc_r+0x24>
 801087a:	f7fd fc19 	bl	800e0b0 <_free_r>
 801087e:	4625      	mov	r5, r4
 8010880:	4628      	mov	r0, r5
 8010882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010886:	f000 f86b 	bl	8010960 <_malloc_usable_size_r>
 801088a:	4284      	cmp	r4, r0
 801088c:	4606      	mov	r6, r0
 801088e:	d802      	bhi.n	8010896 <_realloc_r+0x34>
 8010890:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010894:	d8f4      	bhi.n	8010880 <_realloc_r+0x1e>
 8010896:	4621      	mov	r1, r4
 8010898:	4638      	mov	r0, r7
 801089a:	f7fd fc7d 	bl	800e198 <_malloc_r>
 801089e:	4680      	mov	r8, r0
 80108a0:	b908      	cbnz	r0, 80108a6 <_realloc_r+0x44>
 80108a2:	4645      	mov	r5, r8
 80108a4:	e7ec      	b.n	8010880 <_realloc_r+0x1e>
 80108a6:	42b4      	cmp	r4, r6
 80108a8:	4622      	mov	r2, r4
 80108aa:	4629      	mov	r1, r5
 80108ac:	bf28      	it	cs
 80108ae:	4632      	movcs	r2, r6
 80108b0:	f7ff fc5c 	bl	801016c <memcpy>
 80108b4:	4629      	mov	r1, r5
 80108b6:	4638      	mov	r0, r7
 80108b8:	f7fd fbfa 	bl	800e0b0 <_free_r>
 80108bc:	e7f1      	b.n	80108a2 <_realloc_r+0x40>

080108be <__ascii_wctomb>:
 80108be:	4603      	mov	r3, r0
 80108c0:	4608      	mov	r0, r1
 80108c2:	b141      	cbz	r1, 80108d6 <__ascii_wctomb+0x18>
 80108c4:	2aff      	cmp	r2, #255	@ 0xff
 80108c6:	d904      	bls.n	80108d2 <__ascii_wctomb+0x14>
 80108c8:	228a      	movs	r2, #138	@ 0x8a
 80108ca:	601a      	str	r2, [r3, #0]
 80108cc:	f04f 30ff 	mov.w	r0, #4294967295
 80108d0:	4770      	bx	lr
 80108d2:	700a      	strb	r2, [r1, #0]
 80108d4:	2001      	movs	r0, #1
 80108d6:	4770      	bx	lr

080108d8 <_raise_r>:
 80108d8:	291f      	cmp	r1, #31
 80108da:	b538      	push	{r3, r4, r5, lr}
 80108dc:	4605      	mov	r5, r0
 80108de:	460c      	mov	r4, r1
 80108e0:	d904      	bls.n	80108ec <_raise_r+0x14>
 80108e2:	2316      	movs	r3, #22
 80108e4:	6003      	str	r3, [r0, #0]
 80108e6:	f04f 30ff 	mov.w	r0, #4294967295
 80108ea:	bd38      	pop	{r3, r4, r5, pc}
 80108ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80108ee:	b112      	cbz	r2, 80108f6 <_raise_r+0x1e>
 80108f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108f4:	b94b      	cbnz	r3, 801090a <_raise_r+0x32>
 80108f6:	4628      	mov	r0, r5
 80108f8:	f000 f830 	bl	801095c <_getpid_r>
 80108fc:	4622      	mov	r2, r4
 80108fe:	4601      	mov	r1, r0
 8010900:	4628      	mov	r0, r5
 8010902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010906:	f000 b817 	b.w	8010938 <_kill_r>
 801090a:	2b01      	cmp	r3, #1
 801090c:	d00a      	beq.n	8010924 <_raise_r+0x4c>
 801090e:	1c59      	adds	r1, r3, #1
 8010910:	d103      	bne.n	801091a <_raise_r+0x42>
 8010912:	2316      	movs	r3, #22
 8010914:	6003      	str	r3, [r0, #0]
 8010916:	2001      	movs	r0, #1
 8010918:	e7e7      	b.n	80108ea <_raise_r+0x12>
 801091a:	2100      	movs	r1, #0
 801091c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010920:	4620      	mov	r0, r4
 8010922:	4798      	blx	r3
 8010924:	2000      	movs	r0, #0
 8010926:	e7e0      	b.n	80108ea <_raise_r+0x12>

08010928 <raise>:
 8010928:	4b02      	ldr	r3, [pc, #8]	@ (8010934 <raise+0xc>)
 801092a:	4601      	mov	r1, r0
 801092c:	6818      	ldr	r0, [r3, #0]
 801092e:	f7ff bfd3 	b.w	80108d8 <_raise_r>
 8010932:	bf00      	nop
 8010934:	20000040 	.word	0x20000040

08010938 <_kill_r>:
 8010938:	b538      	push	{r3, r4, r5, lr}
 801093a:	4d07      	ldr	r5, [pc, #28]	@ (8010958 <_kill_r+0x20>)
 801093c:	2300      	movs	r3, #0
 801093e:	4604      	mov	r4, r0
 8010940:	4608      	mov	r0, r1
 8010942:	4611      	mov	r1, r2
 8010944:	602b      	str	r3, [r5, #0]
 8010946:	f7f4 f95d 	bl	8004c04 <_kill>
 801094a:	1c43      	adds	r3, r0, #1
 801094c:	d102      	bne.n	8010954 <_kill_r+0x1c>
 801094e:	682b      	ldr	r3, [r5, #0]
 8010950:	b103      	cbz	r3, 8010954 <_kill_r+0x1c>
 8010952:	6023      	str	r3, [r4, #0]
 8010954:	bd38      	pop	{r3, r4, r5, pc}
 8010956:	bf00      	nop
 8010958:	2000122c 	.word	0x2000122c

0801095c <_getpid_r>:
 801095c:	f7f4 b94a 	b.w	8004bf4 <_getpid>

08010960 <_malloc_usable_size_r>:
 8010960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010964:	1f18      	subs	r0, r3, #4
 8010966:	2b00      	cmp	r3, #0
 8010968:	bfbc      	itt	lt
 801096a:	580b      	ldrlt	r3, [r1, r0]
 801096c:	18c0      	addlt	r0, r0, r3
 801096e:	4770      	bx	lr

08010970 <_init>:
 8010970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010972:	bf00      	nop
 8010974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010976:	bc08      	pop	{r3}
 8010978:	469e      	mov	lr, r3
 801097a:	4770      	bx	lr

0801097c <_fini>:
 801097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097e:	bf00      	nop
 8010980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010982:	bc08      	pop	{r3}
 8010984:	469e      	mov	lr, r3
 8010986:	4770      	bx	lr
