
test_case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dce0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  0800deb0  0800deb0  0000eeb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e980  0800e980  000101fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e980  0800e980  0000f980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e988  0800e988  000101fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e988  0800e988  0000f988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e98c  0800e98c  0000f98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800e990  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e54  200001fc  0800eb8c  000101fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001050  0800eb8c  00011050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178b1  00000000  00000000  0001022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f68  00000000  00000000  00027add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0002ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8f  00000000  00000000  0002ce90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273e0  00000000  00000000  0002de1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed68  00000000  00000000  000551ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d777d  00000000  00000000  00073f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b6e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006894  00000000  00000000  0014b728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00151fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800de98 	.word	0x0800de98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0800de98 	.word	0x0800de98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 ba09 	b.w	80010fc <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9be 	b.w	80010fc <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	468e      	mov	lr, r1
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	4688      	mov	r8, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14a      	bne.n	8000eaa <__udivmoddi4+0xa6>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d962      	bls.n	8000ee0 <__udivmoddi4+0xdc>
 8000e1a:	fab2 f682 	clz	r6, r2
 8000e1e:	b14e      	cbz	r6, 8000e34 <__udivmoddi4+0x30>
 8000e20:	f1c6 0320 	rsb	r3, r6, #32
 8000e24:	fa01 f806 	lsl.w	r8, r1, r6
 8000e28:	fa20 f303 	lsr.w	r3, r0, r3
 8000e2c:	40b7      	lsls	r7, r6
 8000e2e:	ea43 0808 	orr.w	r8, r3, r8
 8000e32:	40b4      	lsls	r4, r6
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	fa1f fc87 	uxth.w	ip, r7
 8000e3c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e40:	0c23      	lsrs	r3, r4, #16
 8000e42:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e4a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0x62>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e58:	f080 80ea 	bcs.w	8001030 <__udivmoddi4+0x22c>
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	f240 80e7 	bls.w	8001030 <__udivmoddi4+0x22c>
 8000e62:	3902      	subs	r1, #2
 8000e64:	443b      	add	r3, r7
 8000e66:	1a9a      	subs	r2, r3, r2
 8000e68:	b2a3      	uxth	r3, r4
 8000e6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e76:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e7a:	459c      	cmp	ip, r3
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x8e>
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e84:	f080 80d6 	bcs.w	8001034 <__udivmoddi4+0x230>
 8000e88:	459c      	cmp	ip, r3
 8000e8a:	f240 80d3 	bls.w	8001034 <__udivmoddi4+0x230>
 8000e8e:	443b      	add	r3, r7
 8000e90:	3802      	subs	r0, #2
 8000e92:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e96:	eba3 030c 	sub.w	r3, r3, ip
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	b11d      	cbz	r5, 8000ea6 <__udivmoddi4+0xa2>
 8000e9e:	40f3      	lsrs	r3, r6
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d905      	bls.n	8000eba <__udivmoddi4+0xb6>
 8000eae:	b10d      	cbz	r5, 8000eb4 <__udivmoddi4+0xb0>
 8000eb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e7f5      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000eba:	fab3 f183 	clz	r1, r3
 8000ebe:	2900      	cmp	r1, #0
 8000ec0:	d146      	bne.n	8000f50 <__udivmoddi4+0x14c>
 8000ec2:	4573      	cmp	r3, lr
 8000ec4:	d302      	bcc.n	8000ecc <__udivmoddi4+0xc8>
 8000ec6:	4282      	cmp	r2, r0
 8000ec8:	f200 8105 	bhi.w	80010d6 <__udivmoddi4+0x2d2>
 8000ecc:	1a84      	subs	r4, r0, r2
 8000ece:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	4690      	mov	r8, r2
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d0e5      	beq.n	8000ea6 <__udivmoddi4+0xa2>
 8000eda:	e9c5 4800 	strd	r4, r8, [r5]
 8000ede:	e7e2      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	f000 8090 	beq.w	8001006 <__udivmoddi4+0x202>
 8000ee6:	fab2 f682 	clz	r6, r2
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	f040 80a4 	bne.w	8001038 <__udivmoddi4+0x234>
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	0c03      	lsrs	r3, r0, #16
 8000ef4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef8:	b280      	uxth	r0, r0
 8000efa:	b2bc      	uxth	r4, r7
 8000efc:	2101      	movs	r1, #1
 8000efe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f02:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f0a:	fb04 f20c 	mul.w	r2, r4, ip
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x11e>
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x11c>
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	f200 80e0 	bhi.w	80010e0 <__udivmoddi4+0x2dc>
 8000f20:	46c4      	mov	ip, r8
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f28:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f2c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f30:	fb02 f404 	mul.w	r4, r2, r4
 8000f34:	429c      	cmp	r4, r3
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x144>
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f3e:	d202      	bcs.n	8000f46 <__udivmoddi4+0x142>
 8000f40:	429c      	cmp	r4, r3
 8000f42:	f200 80ca 	bhi.w	80010da <__udivmoddi4+0x2d6>
 8000f46:	4602      	mov	r2, r0
 8000f48:	1b1b      	subs	r3, r3, r4
 8000f4a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f4e:	e7a5      	b.n	8000e9c <__udivmoddi4+0x98>
 8000f50:	f1c1 0620 	rsb	r6, r1, #32
 8000f54:	408b      	lsls	r3, r1
 8000f56:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f60:	fa20 f306 	lsr.w	r3, r0, r6
 8000f64:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f68:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f6c:	4323      	orrs	r3, r4
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	fa1f fc87 	uxth.w	ip, r7
 8000f76:	fbbe f0f9 	udiv	r0, lr, r9
 8000f7a:	0c1c      	lsrs	r4, r3, #16
 8000f7c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f80:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f84:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f88:	45a6      	cmp	lr, r4
 8000f8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f8e:	d909      	bls.n	8000fa4 <__udivmoddi4+0x1a0>
 8000f90:	193c      	adds	r4, r7, r4
 8000f92:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f96:	f080 809c 	bcs.w	80010d2 <__udivmoddi4+0x2ce>
 8000f9a:	45a6      	cmp	lr, r4
 8000f9c:	f240 8099 	bls.w	80010d2 <__udivmoddi4+0x2ce>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	443c      	add	r4, r7
 8000fa4:	eba4 040e 	sub.w	r4, r4, lr
 8000fa8:	fa1f fe83 	uxth.w	lr, r3
 8000fac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fb8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fbc:	45a4      	cmp	ip, r4
 8000fbe:	d908      	bls.n	8000fd2 <__udivmoddi4+0x1ce>
 8000fc0:	193c      	adds	r4, r7, r4
 8000fc2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fc6:	f080 8082 	bcs.w	80010ce <__udivmoddi4+0x2ca>
 8000fca:	45a4      	cmp	ip, r4
 8000fcc:	d97f      	bls.n	80010ce <__udivmoddi4+0x2ca>
 8000fce:	3b02      	subs	r3, #2
 8000fd0:	443c      	add	r4, r7
 8000fd2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fd6:	eba4 040c 	sub.w	r4, r4, ip
 8000fda:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fde:	4564      	cmp	r4, ip
 8000fe0:	4673      	mov	r3, lr
 8000fe2:	46e1      	mov	r9, ip
 8000fe4:	d362      	bcc.n	80010ac <__udivmoddi4+0x2a8>
 8000fe6:	d05f      	beq.n	80010a8 <__udivmoddi4+0x2a4>
 8000fe8:	b15d      	cbz	r5, 8001002 <__udivmoddi4+0x1fe>
 8000fea:	ebb8 0203 	subs.w	r2, r8, r3
 8000fee:	eb64 0409 	sbc.w	r4, r4, r9
 8000ff2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ff6:	fa22 f301 	lsr.w	r3, r2, r1
 8000ffa:	431e      	orrs	r6, r3
 8000ffc:	40cc      	lsrs	r4, r1
 8000ffe:	e9c5 6400 	strd	r6, r4, [r5]
 8001002:	2100      	movs	r1, #0
 8001004:	e74f      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8001006:	fbb1 fcf2 	udiv	ip, r1, r2
 800100a:	0c01      	lsrs	r1, r0, #16
 800100c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001010:	b280      	uxth	r0, r0
 8001012:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001016:	463b      	mov	r3, r7
 8001018:	4638      	mov	r0, r7
 800101a:	463c      	mov	r4, r7
 800101c:	46b8      	mov	r8, r7
 800101e:	46be      	mov	lr, r7
 8001020:	2620      	movs	r6, #32
 8001022:	fbb1 f1f7 	udiv	r1, r1, r7
 8001026:	eba2 0208 	sub.w	r2, r2, r8
 800102a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800102e:	e766      	b.n	8000efe <__udivmoddi4+0xfa>
 8001030:	4601      	mov	r1, r0
 8001032:	e718      	b.n	8000e66 <__udivmoddi4+0x62>
 8001034:	4610      	mov	r0, r2
 8001036:	e72c      	b.n	8000e92 <__udivmoddi4+0x8e>
 8001038:	f1c6 0220 	rsb	r2, r6, #32
 800103c:	fa2e f302 	lsr.w	r3, lr, r2
 8001040:	40b7      	lsls	r7, r6
 8001042:	40b1      	lsls	r1, r6
 8001044:	fa20 f202 	lsr.w	r2, r0, r2
 8001048:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800104c:	430a      	orrs	r2, r1
 800104e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001052:	b2bc      	uxth	r4, r7
 8001054:	fb0e 3318 	mls	r3, lr, r8, r3
 8001058:	0c11      	lsrs	r1, r2, #16
 800105a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105e:	fb08 f904 	mul.w	r9, r8, r4
 8001062:	40b0      	lsls	r0, r6
 8001064:	4589      	cmp	r9, r1
 8001066:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800106a:	b280      	uxth	r0, r0
 800106c:	d93e      	bls.n	80010ec <__udivmoddi4+0x2e8>
 800106e:	1879      	adds	r1, r7, r1
 8001070:	f108 3cff 	add.w	ip, r8, #4294967295
 8001074:	d201      	bcs.n	800107a <__udivmoddi4+0x276>
 8001076:	4589      	cmp	r9, r1
 8001078:	d81f      	bhi.n	80010ba <__udivmoddi4+0x2b6>
 800107a:	eba1 0109 	sub.w	r1, r1, r9
 800107e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001082:	fb09 f804 	mul.w	r8, r9, r4
 8001086:	fb0e 1119 	mls	r1, lr, r9, r1
 800108a:	b292      	uxth	r2, r2
 800108c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001090:	4542      	cmp	r2, r8
 8001092:	d229      	bcs.n	80010e8 <__udivmoddi4+0x2e4>
 8001094:	18ba      	adds	r2, r7, r2
 8001096:	f109 31ff 	add.w	r1, r9, #4294967295
 800109a:	d2c4      	bcs.n	8001026 <__udivmoddi4+0x222>
 800109c:	4542      	cmp	r2, r8
 800109e:	d2c2      	bcs.n	8001026 <__udivmoddi4+0x222>
 80010a0:	f1a9 0102 	sub.w	r1, r9, #2
 80010a4:	443a      	add	r2, r7
 80010a6:	e7be      	b.n	8001026 <__udivmoddi4+0x222>
 80010a8:	45f0      	cmp	r8, lr
 80010aa:	d29d      	bcs.n	8000fe8 <__udivmoddi4+0x1e4>
 80010ac:	ebbe 0302 	subs.w	r3, lr, r2
 80010b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010b4:	3801      	subs	r0, #1
 80010b6:	46e1      	mov	r9, ip
 80010b8:	e796      	b.n	8000fe8 <__udivmoddi4+0x1e4>
 80010ba:	eba7 0909 	sub.w	r9, r7, r9
 80010be:	4449      	add	r1, r9
 80010c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c8:	fb09 f804 	mul.w	r8, r9, r4
 80010cc:	e7db      	b.n	8001086 <__udivmoddi4+0x282>
 80010ce:	4673      	mov	r3, lr
 80010d0:	e77f      	b.n	8000fd2 <__udivmoddi4+0x1ce>
 80010d2:	4650      	mov	r0, sl
 80010d4:	e766      	b.n	8000fa4 <__udivmoddi4+0x1a0>
 80010d6:	4608      	mov	r0, r1
 80010d8:	e6fd      	b.n	8000ed6 <__udivmoddi4+0xd2>
 80010da:	443b      	add	r3, r7
 80010dc:	3a02      	subs	r2, #2
 80010de:	e733      	b.n	8000f48 <__udivmoddi4+0x144>
 80010e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010e4:	443b      	add	r3, r7
 80010e6:	e71c      	b.n	8000f22 <__udivmoddi4+0x11e>
 80010e8:	4649      	mov	r1, r9
 80010ea:	e79c      	b.n	8001026 <__udivmoddi4+0x222>
 80010ec:	eba1 0109 	sub.w	r1, r1, r9
 80010f0:	46c4      	mov	ip, r8
 80010f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010f6:	fb09 f804 	mul.w	r8, r9, r4
 80010fa:	e7c4      	b.n	8001086 <__udivmoddi4+0x282>

080010fc <__aeabi_idiv0>:
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <getTare>:



int num = 2;

uint32_t getTare(){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	printf("Remove all weight from the drawer(5 seconds)\n\r");
 8001106:	4815      	ldr	r0, [pc, #84]	@ (800115c <getTare+0x5c>)
 8001108:	f009 f9ac 	bl	800a464 <iprintf>
	HAL_Delay(5000);
 800110c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001110:	f002 f82e 	bl	8003170 <HAL_Delay>
	printf("Gathering initial Tare of Load Cell...\n\r");
 8001114:	4812      	ldr	r0, [pc, #72]	@ (8001160 <getTare+0x60>)
 8001116:	f009 f9a5 	bl	800a464 <iprintf>
	int weight_temp = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 1; i <= 4; i++){
 800111e:	2301      	movs	r3, #1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	e00e      	b.n	8001142 <getTare+0x42>
			weight_temp = (int)weighRaw();
 8001124:	f001 faf5 	bl	8002712 <weighRaw>
 8001128:	6078      	str	r0, [r7, #4]
			printf("Tare attempt %d: %d\n\r", i, weight_temp);
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <getTare+0x64>)
 8001132:	f009 f997 	bl	800a464 <iprintf>
			HAL_Delay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f002 f81a 	bl	8003170 <HAL_Delay>
	for(uint16_t i = 1; i <= 4; i++){
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	3301      	adds	r3, #1
 8001140:	807b      	strh	r3, [r7, #2]
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d9ed      	bls.n	8001124 <getTare+0x24>
		}
	printf("Tare Set: %d\n\r", weight_temp);
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4807      	ldr	r0, [pc, #28]	@ (8001168 <getTare+0x68>)
 800114c:	f009 f98a 	bl	800a464 <iprintf>
	return weight_temp;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	0800deb0 	.word	0x0800deb0
 8001160:	0800dee0 	.word	0x0800dee0
 8001164:	0800df0c 	.word	0x0800df0c
 8001168:	0800df24 	.word	0x0800df24

0800116c <Calibrate>:

void Calibrate(){
 800116c:	b580      	push	{r7, lr}
 800116e:	b092      	sub	sp, #72	@ 0x48
 8001170:	af00      	add	r7, sp, #0
	printf("Beginning with Row: 1 Drawer: 1\n\r");
 8001172:	4899      	ldr	r0, [pc, #612]	@ (80013d8 <Calibrate+0x26c>)
 8001174:	f009 f976 	bl	800a464 <iprintf>

	uint32_t tare = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	633b      	str	r3, [r7, #48]	@ 0x30
	int knownHX711 = 1;
 800117c:	2301      	movs	r3, #1
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t thresh = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28

	f_unlink("drawerConfig.txt"); //deletes the original file
 8001184:	4895      	ldr	r0, [pc, #596]	@ (80013dc <Calibrate+0x270>)
 8001186:	f007 ff82 	bl	800908e <f_unlink>
	f_unlink("temp_drawerConfig.txt"); //deletes the original file
 800118a:	4895      	ldr	r0, [pc, #596]	@ (80013e0 <Calibrate+0x274>)
 800118c:	f007 ff7f 	bl	800908e <f_unlink>


	for(int i = 1; i <= 4; i++){
 8001190:	2301      	movs	r3, #1
 8001192:	647b      	str	r3, [r7, #68]	@ 0x44
 8001194:	e116      	b.n	80013c4 <Calibrate+0x258>

		uint16_t A_mast = MuxCombos[i-1].A;
 8001196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	4992      	ldr	r1, [pc, #584]	@ (80013e4 <Calibrate+0x278>)
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	3302      	adds	r3, #2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
		uint16_t B_mast = MuxCombos[i-1].B;
 80011aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	498d      	ldr	r1, [pc, #564]	@ (80013e4 <Calibrate+0x278>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	3301      	adds	r3, #1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t C_mast = MuxCombos[i-1].C;
 80011be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	4988      	ldr	r1, [pc, #544]	@ (80013e4 <Calibrate+0x278>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	847b      	strh	r3, [r7, #34]	@ 0x22

		muxSET(A_mast, B_mast, C_mast, 1);
 80011d0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80011d2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80011d4:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80011d6:	2301      	movs	r3, #1
 80011d8:	f001 f908 	bl	80023ec <muxSET>

		setRelay(i);
 80011dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 f94b 	bl	800247c <setRelay>

		if(i == 1){
 80011e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d174      	bne.n	80012d6 <Calibrate+0x16a>
			for(int j = 1; j <= 4; j++){
 80011ec:	2301      	movs	r3, #1
 80011ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80011f0:	e06d      	b.n	80012ce <Calibrate+0x162>

				uint16_t A_slave = MuxCombos[j-1].A;
 80011f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	497b      	ldr	r1, [pc, #492]	@ (80013e4 <Calibrate+0x278>)
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	440b      	add	r3, r1
 8001200:	3302      	adds	r3, #2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	827b      	strh	r3, [r7, #18]
				uint16_t B_slave = MuxCombos[j-1].B;
 8001206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001208:	1e5a      	subs	r2, r3, #1
 800120a:	4976      	ldr	r1, [pc, #472]	@ (80013e4 <Calibrate+0x278>)
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	440b      	add	r3, r1
 8001214:	3301      	adds	r3, #1
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	823b      	strh	r3, [r7, #16]
				uint16_t C_slave = MuxCombos[j-1].C;
 800121a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	4971      	ldr	r1, [pc, #452]	@ (80013e4 <Calibrate+0x278>)
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	440b      	add	r3, r1
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	81fb      	strh	r3, [r7, #14]

				muxSET(A_slave, B_slave, C_slave, 0);
 800122c:	89fa      	ldrh	r2, [r7, #14]
 800122e:	8a39      	ldrh	r1, [r7, #16]
 8001230:	8a78      	ldrh	r0, [r7, #18]
 8001232:	2300      	movs	r3, #0
 8001234:	f001 f8da 	bl	80023ec <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, j);
 8001238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800123a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800123c:	486a      	ldr	r0, [pc, #424]	@ (80013e8 <Calibrate+0x27c>)
 800123e:	f009 f911 	bl	800a464 <iprintf>
				tare = getTare();
 8001242:	f7ff ff5d 	bl	8001100 <getTare>
 8001246:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button twice when ready to calibrate\n\r");
 8001248:	4868      	ldr	r0, [pc, #416]	@ (80013ec <Calibrate+0x280>)
 800124a:	f009 f90b 	bl	800a464 <iprintf>

				//double press confirmation here
						button_output(num);
 800124e:	4b68      	ldr	r3, [pc, #416]	@ (80013f0 <Calibrate+0x284>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f001 f862 	bl	800231c <button_output>


				knownHX711 = weighRawTare(tare);
 8001258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800125a:	f001 fa94 	bl	8002786 <weighRawTare>
 800125e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8001260:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001262:	4864      	ldr	r0, [pc, #400]	@ (80013f4 <Calibrate+0x288>)
 8001264:	f009 f8fe 	bl	800a464 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126a:	4618      	mov	r0, r3
 800126c:	f001 facc 	bl	8002808 <getCalFactor>
 8001270:	ed87 0a02 	vstr	s0, [r7, #8]

				for(int p = 0; p < 4; p++){
 8001274:	2300      	movs	r3, #0
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001278:	e010      	b.n	800129c <Calibrate+0x130>
					int weight = weigh(tare, calFactor);
 800127a:	ed97 0a02 	vldr	s0, [r7, #8]
 800127e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001280:	f001 f9f8 	bl	8002674 <weigh>
 8001284:	6078      	str	r0, [r7, #4]
					printf("Weight: %d\n\r", weight);
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	485b      	ldr	r0, [pc, #364]	@ (80013f8 <Calibrate+0x28c>)
 800128a:	f009 f8eb 	bl	800a464 <iprintf>
					HAL_Delay(400);
 800128e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001292:	f001 ff6d 	bl	8003170 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001298:	3301      	adds	r3, #1
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800129c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800129e:	2b03      	cmp	r3, #3
 80012a0:	ddeb      	ble.n	800127a <Calibrate+0x10e>
				}

				thresh = refillDrawer(tare, calFactor);
 80012a2:	ed97 0a02 	vldr	s0, [r7, #8]
 80012a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012a8:	f000 f8f4 	bl	8001494 <refillDrawer>
 80012ac:	4603      	mov	r3, r0
 80012ae:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 80012b0:	f000 fc28 	bl	8001b04 <SD_init>

				saveDrawerConfig(i, j, calFactor, tare, thresh);
 80012b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012b6:	b298      	uxth	r0, r3
 80012b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ba:	b299      	uxth	r1, r3
 80012bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80012c4:	f000 fc5a 	bl	8001b7c <saveDrawerConfig>
			for(int j = 1; j <= 4; j++){
 80012c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ca:	3301      	adds	r3, #1
 80012cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80012ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	dd8e      	ble.n	80011f2 <Calibrate+0x86>
 80012d4:	e073      	b.n	80013be <Calibrate+0x252>
			}
		}
		else{
			for(int k = 1; k <= 7; k++){
 80012d6:	2301      	movs	r3, #1
 80012d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012da:	e06d      	b.n	80013b8 <Calibrate+0x24c>

				uint16_t A_slave = MuxCombos[k-1].A;
 80012dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012de:	1e5a      	subs	r2, r3, #1
 80012e0:	4940      	ldr	r1, [pc, #256]	@ (80013e4 <Calibrate+0x278>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	3302      	adds	r3, #2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	843b      	strh	r3, [r7, #32]
				uint16_t B_slave = MuxCombos[k-1].B;
 80012f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012f2:	1e5a      	subs	r2, r3, #1
 80012f4:	493b      	ldr	r1, [pc, #236]	@ (80013e4 <Calibrate+0x278>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	3301      	adds	r3, #1
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	83fb      	strh	r3, [r7, #30]
				uint16_t C_slave = MuxCombos[k-1].C;
 8001304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	4936      	ldr	r1, [pc, #216]	@ (80013e4 <Calibrate+0x278>)
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	440b      	add	r3, r1
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	83bb      	strh	r3, [r7, #28]

				muxSET(A_slave, B_slave, C_slave, 0);
 8001316:	8bba      	ldrh	r2, [r7, #28]
 8001318:	8bf9      	ldrh	r1, [r7, #30]
 800131a:	8c38      	ldrh	r0, [r7, #32]
 800131c:	2300      	movs	r3, #0
 800131e:	f001 f865 	bl	80023ec <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, k);
 8001322:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001324:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001326:	4830      	ldr	r0, [pc, #192]	@ (80013e8 <Calibrate+0x27c>)
 8001328:	f009 f89c 	bl	800a464 <iprintf>
				tare = getTare();
 800132c:	f7ff fee8 	bl	8001100 <getTare>
 8001330:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button twice when ready to calibrate\n\r");
 8001332:	482e      	ldr	r0, [pc, #184]	@ (80013ec <Calibrate+0x280>)
 8001334:	f009 f896 	bl	800a464 <iprintf>

				//double press confirmation here
				button_output(num);
 8001338:	4b2d      	ldr	r3, [pc, #180]	@ (80013f0 <Calibrate+0x284>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 ffed 	bl	800231c <button_output>


				knownHX711 = weighRawTare(tare);
 8001342:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001344:	f001 fa1f 	bl	8002786 <weighRawTare>
 8001348:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 800134a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800134c:	4829      	ldr	r0, [pc, #164]	@ (80013f4 <Calibrate+0x288>)
 800134e:	f009 f889 	bl	800a464 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fa57 	bl	8002808 <getCalFactor>
 800135a:	ed87 0a06 	vstr	s0, [r7, #24]

				for(int p = 0; p < 4; p++){
 800135e:	2300      	movs	r3, #0
 8001360:	637b      	str	r3, [r7, #52]	@ 0x34
 8001362:	e010      	b.n	8001386 <Calibrate+0x21a>
					int weight = weigh(tare, calFactor);
 8001364:	ed97 0a06 	vldr	s0, [r7, #24]
 8001368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800136a:	f001 f983 	bl	8002674 <weigh>
 800136e:	6178      	str	r0, [r7, #20]
					printf("Weight: %d\n\r", weight);
 8001370:	6979      	ldr	r1, [r7, #20]
 8001372:	4821      	ldr	r0, [pc, #132]	@ (80013f8 <Calibrate+0x28c>)
 8001374:	f009 f876 	bl	800a464 <iprintf>
					HAL_Delay(400);
 8001378:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800137c:	f001 fef8 	bl	8003170 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001382:	3301      	adds	r3, #1
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
 8001386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001388:	2b03      	cmp	r3, #3
 800138a:	ddeb      	ble.n	8001364 <Calibrate+0x1f8>
				}

				thresh = refillDrawer(tare, calFactor);
 800138c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001392:	f000 f87f 	bl	8001494 <refillDrawer>
 8001396:	4603      	mov	r3, r0
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 800139a:	f000 fbb3 	bl	8001b04 <SD_init>

				saveDrawerConfig(i, k, calFactor, tare, thresh);
 800139e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013a0:	b298      	uxth	r0, r3
 80013a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013a4:	b299      	uxth	r1, r3
 80013a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013aa:	ed97 0a06 	vldr	s0, [r7, #24]
 80013ae:	f000 fbe5 	bl	8001b7c <saveDrawerConfig>
			for(int k = 1; k <= 7; k++){
 80013b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013b4:	3301      	adds	r3, #1
 80013b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013ba:	2b07      	cmp	r3, #7
 80013bc:	dd8e      	ble.n	80012dc <Calibrate+0x170>
	for(int i = 1; i <= 4; i++){
 80013be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013c0:	3301      	adds	r3, #1
 80013c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80013c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	f77f aee5 	ble.w	8001196 <Calibrate+0x2a>

			}
		}
	}
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3748      	adds	r7, #72	@ 0x48
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	0800df34 	.word	0x0800df34
 80013dc:	0800df58 	.word	0x0800df58
 80013e0:	0800df6c 	.word	0x0800df6c
 80013e4:	0800e450 	.word	0x0800e450
 80013e8:	0800df84 	.word	0x0800df84
 80013ec:	0800df9c 	.word	0x0800df9c
 80013f0:	20000000 	.word	0x20000000
 80013f4:	0800dffc 	.word	0x0800dffc
 80013f8:	0800e010 	.word	0x0800e010
 80013fc:	00000000 	.word	0x00000000

08001400 <getThresh>:
uint32_t press_time = 0;  // Timestamp of the first press
uint8_t press_count = 0;  // A Flag that's used for indicating a second press

int num2 = 1;

uint32_t getThresh(uint32_t tare, float calFactor){
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	ed87 0a00 	vstr	s0, [r7]
	uint32_t sum = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
	float avg = 0;
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < 4; i++){
 8001416:	2300      	movs	r3, #0
 8001418:	827b      	strh	r3, [r7, #18]
 800141a:	e00d      	b.n	8001438 <getThresh+0x38>
		uint16_t weight = weigh(tare, calFactor);
 800141c:	ed97 0a00 	vldr	s0, [r7]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f001 f927 	bl	8002674 <weigh>
 8001426:	4603      	mov	r3, r0
 8001428:	817b      	strh	r3, [r7, #10]
		sum += weight;
 800142a:	897b      	ldrh	r3, [r7, #10]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	4413      	add	r3, r2
 8001430:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < 4; i++){
 8001432:	8a7b      	ldrh	r3, [r7, #18]
 8001434:	3301      	adds	r3, #1
 8001436:	827b      	strh	r3, [r7, #18]
 8001438:	8a7b      	ldrh	r3, [r7, #18]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d9ee      	bls.n	800141c <getThresh+0x1c>
	}

	avg = sum / 4.0;
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff f880 	bl	8000544 <__aeabi_ui2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <getThresh+0x90>)
 800144a:	f7ff fa1f 	bl	800088c <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fbe7 	bl	8000c28 <__aeabi_d2f>
 800145a:	4603      	mov	r3, r0
 800145c:	60fb      	str	r3, [r7, #12]

	return (avg * 0.1); //returns 10% of the normalized weight as the threshold
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7ff f892 	bl	8000588 <__aeabi_f2d>
 8001464:	a308      	add	r3, pc, #32	@ (adr r3, 8001488 <getThresh+0x88>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f8e5 	bl	8000638 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fbb7 	bl	8000be8 <__aeabi_d2uiz>
 800147a:	4603      	mov	r3, r0

}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	9999999a 	.word	0x9999999a
 800148c:	3fb99999 	.word	0x3fb99999
 8001490:	40100000 	.word	0x40100000

08001494 <refillDrawer>:



int refillDrawer(uint32_t tare, float calFactor){
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	ed87 0a00 	vstr	s0, [r7]
	printf("Please refill the current drawer\n\rPress and Hold the button when ready\n\r");
 80014a0:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <refillDrawer+0x3c>)
 80014a2:	f008 ffdf 	bl	800a464 <iprintf>

	//function to wait for a double press then a confirmation press
	button_output(num2);
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <refillDrawer+0x40>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 ff36 	bl	800231c <button_output>

	//doublePress(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);

	uint32_t thresh = getThresh(tare, calFactor);
 80014b0:	ed97 0a00 	vldr	s0, [r7]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffa3 	bl	8001400 <getThresh>
 80014ba:	60f8      	str	r0, [r7, #12]
	printf("Threshold set to %ld\n\r", thresh);
 80014bc:	68f9      	ldr	r1, [r7, #12]
 80014be:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <refillDrawer+0x44>)
 80014c0:	f008 ffd0 	bl	800a464 <iprintf>
	return thresh;
 80014c4:	68fb      	ldr	r3, [r7, #12]


}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	0800e020 	.word	0x0800e020
 80014d4:	20000004 	.word	0x20000004
 80014d8:	0800e06c 	.word	0x0800e06c

080014dc <main_function>:
#include <manager_weight.h>
#include <manager_relay.h>



void main_function(){
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b099      	sub	sp, #100	@ 0x64
 80014e0:	af00      	add	r7, sp, #0


	struct drawerInfo drawerInst;
	uint32_t tare = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	64bb      	str	r3, [r7, #72]	@ 0x48
	float calFactor = 1;
 80014e6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014ea:	647b      	str	r3, [r7, #68]	@ 0x44
	int thresh;

	uint32_t sum;
	uint16_t normalizedWeight;

	for(uint16_t i = 1; i <= 4; i++){
 80014ec:	2301      	movs	r3, #1
 80014ee:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80014f2:	e14c      	b.n	800178e <main_function+0x2b2>
			printf("Row %d", i);
 80014f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80014f8:	4619      	mov	r1, r3
 80014fa:	48aa      	ldr	r0, [pc, #680]	@ (80017a4 <main_function+0x2c8>)
 80014fc:	f008 ffb2 	bl	800a464 <iprintf>

			uint16_t A_mast = MuxCombos[i-1].A;
 8001500:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	49a8      	ldr	r1, [pc, #672]	@ (80017a8 <main_function+0x2cc>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	440b      	add	r3, r1
 8001510:	3302      	adds	r3, #2
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			uint16_t B_mast = MuxCombos[i-1].B;
 8001518:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	49a2      	ldr	r1, [pc, #648]	@ (80017a8 <main_function+0x2cc>)
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	440b      	add	r3, r1
 8001528:	3301      	adds	r3, #1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t C_mast = MuxCombos[i-1].C;
 8001530:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	499c      	ldr	r1, [pc, #624]	@ (80017a8 <main_function+0x2cc>)
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	440b      	add	r3, r1
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	87fb      	strh	r3, [r7, #62]	@ 0x3e

			muxSET(A_mast, B_mast, C_mast, 1);
 8001544:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001546:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800154a:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 800154e:	2301      	movs	r3, #1
 8001550:	f000 ff4c 	bl	80023ec <muxSET>

			setRelay(i);
 8001554:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 ff8e 	bl	800247c <setRelay>

			if(i == 1){
 8001560:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001564:	2b01      	cmp	r3, #1
 8001566:	f040 8089 	bne.w	800167c <main_function+0x1a0>
				for(uint16_t j = 1; j <= 4; j++){
 800156a:	2301      	movs	r3, #1
 800156c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8001570:	e07e      	b.n	8001670 <main_function+0x194>

					sum = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[j-1].A;
 800157a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800157e:	1e5a      	subs	r2, r3, #1
 8001580:	4989      	ldr	r1, [pc, #548]	@ (80017a8 <main_function+0x2cc>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	440b      	add	r3, r1
 800158a:	3302      	adds	r3, #2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	857b      	strh	r3, [r7, #42]	@ 0x2a
					uint16_t B_slave = MuxCombos[j-1].B;
 8001590:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	4984      	ldr	r1, [pc, #528]	@ (80017a8 <main_function+0x2cc>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	440b      	add	r3, r1
 80015a0:	3301      	adds	r3, #1
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	853b      	strh	r3, [r7, #40]	@ 0x28
					uint16_t C_slave = MuxCombos[j-1].C;
 80015a6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80015aa:	1e5a      	subs	r2, r3, #1
 80015ac:	497e      	ldr	r1, [pc, #504]	@ (80017a8 <main_function+0x2cc>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

					muxSET(A_slave, B_slave, C_slave, 0);
 80015ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80015bc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80015be:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 80015c0:	2300      	movs	r3, #0
 80015c2:	f000 ff13 	bl	80023ec <muxSET>

					printf("Drawer %d", j);
 80015c6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80015ca:	4619      	mov	r1, r3
 80015cc:	4877      	ldr	r0, [pc, #476]	@ (80017ac <main_function+0x2d0>)
 80015ce:	f008 ff49 	bl	800a464 <iprintf>

					drawerInst = getFileInfo(i, j);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80015da:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fcb2 	bl	8001f48 <getFileInfo>

					tare = drawerInst.Tare;
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 80015ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f4:	ee17 3a90 	vmov	r3, s15
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 80015fa:	2300      	movs	r3, #0
 80015fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80015fe:	e010      	b.n	8001622 <main_function+0x146>

						int weight = weigh(tare, calFactor);
 8001600:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001604:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001606:	f001 f835 	bl	8002674 <weigh>
 800160a:	6238      	str	r0, [r7, #32]
						sum += weight;
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001610:	4413      	add	r3, r2
 8001612:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8001614:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001618:	f001 fdaa 	bl	8003170 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 800161c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800161e:	3301      	adds	r3, #1
 8001620:	657b      	str	r3, [r7, #84]	@ 0x54
 8001622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001624:	2b03      	cmp	r3, #3
 8001626:	ddeb      	ble.n	8001600 <main_function+0x124>
					}

					normalizedWeight = sum / 4;
 8001628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 800162e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001630:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8001634:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001636:	429a      	cmp	r2, r3
 8001638:	db15      	blt.n	8001666 <main_function+0x18a>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 800163a:	485d      	ldr	r0, [pc, #372]	@ (80017b0 <main_function+0x2d4>)
 800163c:	f008 ff12 	bl	800a464 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 8001640:	485c      	ldr	r0, [pc, #368]	@ (80017b4 <main_function+0x2d8>)
 8001642:	f008 ff0f 	bl	800a464 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 8001646:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800164a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800164c:	f7ff ff22 	bl	8001494 <refillDrawer>
 8001650:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, j, calFactor, tare, thresh);
 8001652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001654:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8001658:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 800165c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800165e:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001662:	f000 fb9d 	bl	8001da0 <updateDrawerConfig>
				for(uint16_t j = 1; j <= 4; j++){
 8001666:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800166a:	3301      	adds	r3, #1
 800166c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8001670:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001674:	2b04      	cmp	r3, #4
 8001676:	f67f af7c 	bls.w	8001572 <main_function+0x96>
 800167a:	e083      	b.n	8001784 <main_function+0x2a8>


				}
			}
			else{
				for(int k = 1; k <= 7; k++){
 800167c:	2301      	movs	r3, #1
 800167e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001680:	e07c      	b.n	800177c <main_function+0x2a0>

					sum = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[k-1].A;
 800168a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800168c:	1e5a      	subs	r2, r3, #1
 800168e:	4946      	ldr	r1, [pc, #280]	@ (80017a8 <main_function+0x2cc>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	440b      	add	r3, r1
 8001698:	3302      	adds	r3, #2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	877b      	strh	r3, [r7, #58]	@ 0x3a
					uint16_t B_slave = MuxCombos[k-1].B;
 800169e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	4941      	ldr	r1, [pc, #260]	@ (80017a8 <main_function+0x2cc>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	3301      	adds	r3, #1
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	873b      	strh	r3, [r7, #56]	@ 0x38
					uint16_t C_slave = MuxCombos[k-1].C;
 80016b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	493c      	ldr	r1, [pc, #240]	@ (80017a8 <main_function+0x2cc>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	440b      	add	r3, r1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	86fb      	strh	r3, [r7, #54]	@ 0x36

					muxSET(A_slave, B_slave, C_slave, 0);
 80016c4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80016c6:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80016c8:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 80016ca:	2300      	movs	r3, #0
 80016cc:	f000 fe8e 	bl	80023ec <muxSET>

					printf("Drawer %d", k);
 80016d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80016d2:	4836      	ldr	r0, [pc, #216]	@ (80017ac <main_function+0x2d0>)
 80016d4:	f008 fec6 	bl	800a464 <iprintf>

					drawerInst = getFileInfo(i, k);
 80016d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016da:	b29a      	uxth	r2, r3
 80016dc:	463b      	mov	r3, r7
 80016de:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fc30 	bl	8001f48 <getFileInfo>
 80016e8:	f107 0410 	add.w	r4, r7, #16
 80016ec:	463b      	mov	r3, r7
 80016ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

					tare = drawerInst.Tare;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 80016fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001704:	ee17 3a90 	vmov	r3, s15
 8001708:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 800170a:	2300      	movs	r3, #0
 800170c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800170e:	e010      	b.n	8001732 <main_function+0x256>

						int weight = weigh(tare, calFactor);
 8001710:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001714:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001716:	f000 ffad 	bl	8002674 <weigh>
 800171a:	62f8      	str	r0, [r7, #44]	@ 0x2c
						sum += weight;
 800171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001720:	4413      	add	r3, r2
 8001722:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8001724:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001728:	f001 fd22 	bl	8003170 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 800172c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800172e:	3301      	adds	r3, #1
 8001730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001734:	2b03      	cmp	r3, #3
 8001736:	ddeb      	ble.n	8001710 <main_function+0x234>
					}

					normalizedWeight = sum / 4;
 8001738:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 800173e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001740:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8001744:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001746:	429a      	cmp	r2, r3
 8001748:	db15      	blt.n	8001776 <main_function+0x29a>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 800174a:	4819      	ldr	r0, [pc, #100]	@ (80017b0 <main_function+0x2d4>)
 800174c:	f008 fe8a 	bl	800a464 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 8001750:	4818      	ldr	r0, [pc, #96]	@ (80017b4 <main_function+0x2d8>)
 8001752:	f008 fe87 	bl	800a464 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 8001756:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800175a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800175c:	f7ff fe9a 	bl	8001494 <refillDrawer>
 8001760:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, k, calFactor, tare, thresh);
 8001762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001764:	b299      	uxth	r1, r3
 8001766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001768:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 800176c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800176e:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001772:	f000 fb15 	bl	8001da0 <updateDrawerConfig>
				for(int k = 1; k <= 7; k++){
 8001776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001778:	3301      	adds	r3, #1
 800177a:	653b      	str	r3, [r7, #80]	@ 0x50
 800177c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800177e:	2b07      	cmp	r3, #7
 8001780:	f77f af7f 	ble.w	8001682 <main_function+0x1a6>
	for(uint16_t i = 1; i <= 4; i++){
 8001784:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001788:	3301      	adds	r3, #1
 800178a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800178e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001792:	2b04      	cmp	r3, #4
 8001794:	f67f aeae 	bls.w	80014f4 <main_function+0x18>

				}
			}
	}

}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3764      	adds	r7, #100	@ 0x64
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd90      	pop	{r4, r7, pc}
 80017a2:	bf00      	nop
 80017a4:	0800e084 	.word	0x0800e084
 80017a8:	0800e450 	.word	0x0800e450
 80017ac:	0800e08c 	.word	0x0800e08c
 80017b0:	0800e098 	.word	0x0800e098
 80017b4:	0800e0d4 	.word	0x0800e0d4

080017b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b64      	ldr	r3, [pc, #400]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a63      	ldr	r2, [pc, #396]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b61      	ldr	r3, [pc, #388]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b56      	ldr	r3, [pc, #344]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a55      	ldr	r2, [pc, #340]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b4f      	ldr	r3, [pc, #316]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a4e      	ldr	r2, [pc, #312]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b4c      	ldr	r3, [pc, #304]	@ (8001964 <MX_GPIO_Init+0x1ac>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SLAVE_C_Pin|SLAVE_B_Pin|REL_1_Pin|REL_3_Pin
 800183e:	2200      	movs	r2, #0
 8001840:	f641 4103 	movw	r1, #7171	@ 0x1c03
 8001844:	4848      	ldr	r0, [pc, #288]	@ (8001968 <MX_GPIO_Init+0x1b0>)
 8001846:	f001 ff75 	bl	8003734 <HAL_GPIO_WritePin>
                          |REL_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAST_A_Pin|MAST_B_Pin|MAST_C_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2113      	movs	r1, #19
 800184e:	4847      	ldr	r0, [pc, #284]	@ (800196c <MX_GPIO_Init+0x1b4>)
 8001850:	f001 ff70 	bl	8003734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLAVE_A_Pin|SCK_DRW_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f240 4101 	movw	r1, #1025	@ 0x401
 800185a:	4845      	ldr	r0, [pc, #276]	@ (8001970 <MX_GPIO_Init+0x1b8>)
 800185c:	f001 ff6a 	bl	8003734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001866:	4841      	ldr	r0, [pc, #260]	@ (800196c <MX_GPIO_Init+0x1b4>)
 8001868:	f001 ff64 	bl	8003734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2104      	movs	r1, #4
 8001870:	4840      	ldr	r0, [pc, #256]	@ (8001974 <MX_GPIO_Init+0x1bc>)
 8001872:	f001 ff5f 	bl	8003734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLAVE_C_Pin SLAVE_B_Pin REL_1_Pin REL_3_Pin
                           REL_2_Pin */
  GPIO_InitStruct.Pin = SLAVE_C_Pin|SLAVE_B_Pin|REL_1_Pin|REL_3_Pin
 8001876:	f641 4303 	movw	r3, #7171	@ 0x1c03
 800187a:	617b      	str	r3, [r7, #20]
                          |REL_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4836      	ldr	r0, [pc, #216]	@ (8001968 <MX_GPIO_Init+0x1b0>)
 8001890:	f001 fda4 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MAST_A_Pin MAST_B_Pin MAST_C_Pin */
  GPIO_InitStruct.Pin = MAST_A_Pin|MAST_B_Pin|MAST_C_Pin;
 8001894:	2313      	movs	r3, #19
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4830      	ldr	r0, [pc, #192]	@ (800196c <MX_GPIO_Init+0x1b4>)
 80018ac:	f001 fd96 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SLAVE_A_Pin SCK_DRW_Pin */
  GPIO_InitStruct.Pin = SLAVE_A_Pin|SCK_DRW_Pin;
 80018b0:	f240 4301 	movw	r3, #1025	@ 0x401
 80018b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4829      	ldr	r0, [pc, #164]	@ (8001970 <MX_GPIO_Init+0x1b8>)
 80018ca:	f001 fd87 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BTN_Pin CONFIRM_BTN_Pin */
  GPIO_InitStruct.Pin = RESET_BTN_Pin|CONFIRM_BTN_Pin;
 80018ce:	2306      	movs	r3, #6
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018d2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4823      	ldr	r0, [pc, #140]	@ (8001970 <MX_GPIO_Init+0x1b8>)
 80018e4:	f001 fd7a 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DAT_IN_Pin */
  GPIO_InitStruct.Pin = DAT_IN_Pin;
 80018e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAT_IN_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	481b      	ldr	r0, [pc, #108]	@ (800196c <MX_GPIO_Init+0x1b4>)
 80018fe:	f001 fd6d 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001908:	2301      	movs	r3, #1
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800190c:	2301      	movs	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4814      	ldr	r0, [pc, #80]	@ (800196c <MX_GPIO_Init+0x1b4>)
 800191c:	f001 fd5e 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : REL_4_Pin */
  GPIO_InitStruct.Pin = REL_4_Pin;
 8001920:	2304      	movs	r3, #4
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(REL_4_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	480f      	ldr	r0, [pc, #60]	@ (8001974 <MX_GPIO_Init+0x1bc>)
 8001938:	f001 fd50 	bl	80033dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	2007      	movs	r0, #7
 8001942:	f001 fd14 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001946:	2007      	movs	r0, #7
 8001948:	f001 fd2d 	bl	80033a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2008      	movs	r0, #8
 8001952:	f001 fd0c 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001956:	2008      	movs	r0, #8
 8001958:	f001 fd25 	bl	80033a6 <HAL_NVIC_EnableIRQ>

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	@ 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	40020800 	.word	0x40020800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40020c00 	.word	0x40020c00

08001978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	//disables internal buffering for input stream for scanf
	setvbuf(stdin, NULL, _IONBF, 0);
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <main+0x98>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6858      	ldr	r0, [r3, #4]
 8001982:	2300      	movs	r3, #0
 8001984:	2202      	movs	r2, #2
 8001986:	2100      	movs	r1, #0
 8001988:	f008 fd7e 	bl	800a488 <setvbuf>

	/* Configure the system clock */
	SystemClock_Config();
 800198c:	f000 f848 	bl	8001a20 <SystemClock_Config>

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001990:	f001 fb7c 	bl	800308c <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001994:	f7ff ff10 	bl	80017b8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001998:	f001 fadc 	bl	8002f54 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800199c:	f001 f998 	bl	8002cd0 <MX_TIM2_Init>
  MX_FATFS_Init();
 80019a0:	f004 fa5c 	bl	8005e5c <MX_FATFS_Init>
  MX_SPI1_Init();
 80019a4:	f000 ff54 	bl	8002850 <MX_SPI1_Init>

	printf("Hello from STM32 UART!\n\r");
 80019a8:	481a      	ldr	r0, [pc, #104]	@ (8001a14 <main+0x9c>)
 80019aa:	f008 fd5b 	bl	800a464 <iprintf>

	HAL_TIM_Base_Start(&htim2);
 80019ae:	481a      	ldr	r0, [pc, #104]	@ (8001a18 <main+0xa0>)
 80019b0:	f003 f8f6 	bl	8004ba0 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019ba:	4818      	ldr	r0, [pc, #96]	@ (8001a1c <main+0xa4>)
 80019bc:	f001 feba 	bl	8003734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019c0:	200a      	movs	r0, #10
 80019c2:	f001 fbd5 	bl	8003170 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019cc:	4813      	ldr	r0, [pc, #76]	@ (8001a1c <main+0xa4>)
 80019ce:	f001 feb1 	bl	8003734 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80019d2:	200a      	movs	r0, #10
 80019d4:	f001 fbcc 	bl	8003170 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d8:	f001 fb58 	bl	800308c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019dc:	f000 f820 	bl	8001a20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e0:	f7ff feea 	bl	80017b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80019e4:	f001 f974 	bl	8002cd0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80019e8:	f001 fab4 	bl	8002f54 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80019ec:	f004 fa36 	bl	8005e5c <MX_FATFS_Init>
  MX_SPI1_Init();
 80019f0:	f000 ff2e 	bl	8002850 <MX_SPI1_Init>
  MX_SPI2_Init();
 80019f4:	f000 ff62 	bl	80028bc <MX_SPI2_Init>
  MX_TIM3_Init();
 80019f8:	f001 f9b6 	bl	8002d68 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019fc:	f001 fa02 	bl	8002e04 <MX_TIM4_Init>
//
//		HAL_Delay(1000);
//
//  }

  Calibrate();
 8001a00:	f7ff fbb4 	bl	800116c <Calibrate>
  main_function();
 8001a04:	f7ff fd6a 	bl	80014dc <main_function>
 8001a08:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000040 	.word	0x20000040
 8001a14:	0800e104 	.word	0x0800e104
 8001a18:	20000d98 	.word	0x20000d98
 8001a1c:	40020400 	.word	0x40020400

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b094      	sub	sp, #80	@ 0x50
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	2234      	movs	r2, #52	@ 0x34
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f008 fe79 	bl	800a726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <SystemClock_Config+0xd0>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	4a28      	ldr	r2, [pc, #160]	@ (8001af0 <SystemClock_Config+0xd0>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a54:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <SystemClock_Config+0xd0>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a60:	2300      	movs	r3, #0
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <SystemClock_Config+0xd4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a6c:	4a21      	ldr	r2, [pc, #132]	@ (8001af4 <SystemClock_Config+0xd4>)
 8001a6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <SystemClock_Config+0xd4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a84:	2301      	movs	r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a88:	2310      	movs	r3, #16
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a94:	2308      	movs	r3, #8
 8001a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001a98:	2340      	movs	r3, #64	@ 0x40
 8001a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 f937 	bl	8003d20 <HAL_RCC_OscConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ab8:	f000 f81e 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abc:	230f      	movs	r3, #15
 8001abe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 fe5d 	bl	8003798 <HAL_RCC_ClockConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ae4:	f000 f808 	bl	8001af8 <Error_Handler>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3750      	adds	r7, #80	@ 0x50
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40007000 	.word	0x40007000

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <Error_Handler+0x8>

08001b04 <SD_init>:

static char buffer[MAX_FILELINE];
BYTE previousLine[MAX_FILELINE];


void  SD_init(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4916      	ldr	r1, [pc, #88]	@ (8001b68 <SD_init+0x64>)
 8001b0e:	4817      	ldr	r0, [pc, #92]	@ (8001b6c <SD_init+0x68>)
 8001b10:	f006 fcac 	bl	800846c <f_mount>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <SD_init+0x6c>)
 8001b1a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <SD_init+0x6c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d007      	beq.n	8001b34 <SD_init+0x30>
		printf("f_mount error (%i)\r\n", fres);
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <SD_init+0x6c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4812      	ldr	r0, [pc, #72]	@ (8001b74 <SD_init+0x70>)
 8001b2c:	f008 fc9a 	bl	800a464 <iprintf>
		while(1);
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <SD_init+0x2c>
	//Let's get some statistics from the SD card
	DWORD free_clusters;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8001b34:	463a      	mov	r2, r7
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480b      	ldr	r0, [pc, #44]	@ (8001b68 <SD_init+0x64>)
 8001b3c:	f007 f9f2 	bl	8008f24 <f_getfree>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <SD_init+0x6c>)
 8001b46:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <SD_init+0x6c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <SD_init+0x5c>
		printf("f_getfree error (%i)\r\n", fres);
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <SD_init+0x6c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <SD_init+0x74>)
 8001b58:	f008 fc84 	bl	800a464 <iprintf>
		while(1);
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <SD_init+0x58>
	}

}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	0800e138 	.word	0x0800e138
 8001b6c:	20000218 	.word	0x20000218
 8001b70:	200008a8 	.word	0x200008a8
 8001b74:	0800e13c 	.word	0x0800e13c
 8001b78:	0800e154 	.word	0x0800e154

08001b7c <saveDrawerConfig>:

void saveDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){
 8001b7c:	b5b0      	push	{r4, r5, r7, lr}
 8001b7e:	b08c      	sub	sp, #48	@ 0x30
 8001b80:	af06      	add	r7, sp, #24
 8001b82:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	81fb      	strh	r3, [r7, #14]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	81bb      	strh	r3, [r7, #12]

	UINT bytesWrote;

	//f_unlink((TCHAR*)filename); //deletes the original file

	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND | FA_CREATE_NEW);
 8001b92:	4b33      	ldr	r3, [pc, #204]	@ (8001c60 <saveDrawerConfig+0xe4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2236      	movs	r2, #54	@ 0x36
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4832      	ldr	r0, [pc, #200]	@ (8001c64 <saveDrawerConfig+0xe8>)
 8001b9c:	f006 fcac 	bl	80084f8 <f_open>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b30      	ldr	r3, [pc, #192]	@ (8001c68 <saveDrawerConfig+0xec>)
 8001ba6:	701a      	strb	r2, [r3, #0]

	if(fres == FR_EXIST){
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c68 <saveDrawerConfig+0xec>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d116      	bne.n	8001bde <saveDrawerConfig+0x62>
				fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND);
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <saveDrawerConfig+0xe4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2232      	movs	r2, #50	@ 0x32
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	482a      	ldr	r0, [pc, #168]	@ (8001c64 <saveDrawerConfig+0xe8>)
 8001bba:	f006 fc9d 	bl	80084f8 <f_open>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <saveDrawerConfig+0xec>)
 8001bc4:	701a      	strb	r2, [r3, #0]
				if(fres != FR_OK){
 8001bc6:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <saveDrawerConfig+0xec>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d017      	beq.n	8001bfe <saveDrawerConfig+0x82>
					printf("f_write error (%i) IN saveDrawerConfig\r\n", fres);
 8001bce:	4b26      	ldr	r3, [pc, #152]	@ (8001c68 <saveDrawerConfig+0xec>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4825      	ldr	r0, [pc, #148]	@ (8001c6c <saveDrawerConfig+0xf0>)
 8001bd6:	f008 fc45 	bl	800a464 <iprintf>
					while(1);
 8001bda:	bf00      	nop
 8001bdc:	e7fd      	b.n	8001bda <saveDrawerConfig+0x5e>
				}
	}
	else if(fres == FR_OK){
 8001bde:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <saveDrawerConfig+0xec>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d103      	bne.n	8001bee <saveDrawerConfig+0x72>
		printf("Created new file");
 8001be6:	4822      	ldr	r0, [pc, #136]	@ (8001c70 <saveDrawerConfig+0xf4>)
 8001be8:	f008 fc3c 	bl	800a464 <iprintf>
 8001bec:	e007      	b.n	8001bfe <saveDrawerConfig+0x82>
	}
	else {
		printf("f_open error (%i) IN saveDrawerConfig\r\n", fres);
 8001bee:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <saveDrawerConfig+0xec>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	481f      	ldr	r0, [pc, #124]	@ (8001c74 <saveDrawerConfig+0xf8>)
 8001bf6:	f008 fc35 	bl	800a464 <iprintf>
		while(1);
 8001bfa:	bf00      	nop
 8001bfc:	e7fd      	b.n	8001bfa <saveDrawerConfig+0x7e>
	}

	snprintf((char*)buffer, sizeof(buffer),"Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld\n", row, drawer, calFactor, Tare, thresh);
 8001bfe:	89fd      	ldrh	r5, [r7, #14]
 8001c00:	89bc      	ldrh	r4, [r7, #12]
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	f7fe fcc0 	bl	8000588 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	9105      	str	r1, [sp, #20]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	9104      	str	r1, [sp, #16]
 8001c14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c18:	9400      	str	r4, [sp, #0]
 8001c1a:	462b      	mov	r3, r5
 8001c1c:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <saveDrawerConfig+0xfc>)
 8001c1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c22:	4816      	ldr	r0, [pc, #88]	@ (8001c7c <saveDrawerConfig+0x100>)
 8001c24:	f008 fce4 	bl	800a5f0 <sniprintf>
	fres = f_write(&fil, buffer, strlen(buffer), &bytesWrote);
 8001c28:	4814      	ldr	r0, [pc, #80]	@ (8001c7c <saveDrawerConfig+0x100>)
 8001c2a:	f7fe fb41 	bl	80002b0 <strlen>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4911      	ldr	r1, [pc, #68]	@ (8001c7c <saveDrawerConfig+0x100>)
 8001c36:	480b      	ldr	r0, [pc, #44]	@ (8001c64 <saveDrawerConfig+0xe8>)
 8001c38:	f006 ff57 	bl	8008aea <f_write>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <saveDrawerConfig+0xec>)
 8001c42:	701a      	strb	r2, [r3, #0]
	printf("Wrote %i bytes to %s\r\n", bytesWrote,filename);
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	4a06      	ldr	r2, [pc, #24]	@ (8001c60 <saveDrawerConfig+0xe4>)
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <saveDrawerConfig+0x104>)
 8001c4e:	f008 fc09 	bl	800a464 <iprintf>


	f_close(&fil);
 8001c52:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <saveDrawerConfig+0xe8>)
 8001c54:	f007 f93c 	bl	8008ed0 <f_close>

}
 8001c58:	bf00      	nop
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000448 	.word	0x20000448
 8001c68:	200008a8 	.word	0x200008a8
 8001c6c:	0800e16c 	.word	0x0800e16c
 8001c70:	0800e198 	.word	0x0800e198
 8001c74:	0800e1ac 	.word	0x0800e1ac
 8001c78:	0800e1d4 	.word	0x0800e1d4
 8001c7c:	200008ac 	.word	0x200008ac
 8001c80:	0800e208 	.word	0x0800e208

08001c84 <getData>:

uint32_t getData(char* token){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i <= 1; i++){
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	81fb      	strh	r3, [r7, #14]
 8001c90:	e011      	b.n	8001cb6 <getData+0x32>
		char* temp_token = strtok(token, ":");
 8001c92:	490d      	ldr	r1, [pc, #52]	@ (8001cc8 <getData+0x44>)
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f008 fd4f 	bl	800a738 <strtok>
 8001c9a:	60b8      	str	r0, [r7, #8]
		if(i == 1){
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d106      	bne.n	8001cb0 <getData+0x2c>

			return strtol(temp_token, NULL, 10);
 8001ca2:	220a      	movs	r2, #10
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	68b8      	ldr	r0, [r7, #8]
 8001ca8:	f007 fcac 	bl	8009604 <strtol>
 8001cac:	4603      	mov	r3, r0
 8001cae:	e006      	b.n	8001cbe <getData+0x3a>
	for(uint16_t i = 0; i <= 1; i++){
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	81fb      	strh	r3, [r7, #14]
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d9ea      	bls.n	8001c92 <getData+0xe>
		}
	}
	return 0;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	0800e220 	.word	0x0800e220

08001ccc <getLineMarker>:

uint16_t getLineMarker(uint16_t row, uint16_t drawer){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	80fb      	strh	r3, [r7, #6]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	80bb      	strh	r3, [r7, #4]

	fres = f_open(&fil, filename, FA_READ);
 8001cdc:	4b29      	ldr	r3, [pc, #164]	@ (8001d84 <getLineMarker+0xb8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4828      	ldr	r0, [pc, #160]	@ (8001d88 <getLineMarker+0xbc>)
 8001ce6:	f006 fc07 	bl	80084f8 <f_open>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <getLineMarker+0xc0>)
 8001cf0:	701a      	strb	r2, [r3, #0]
	uint16_t fileIndex = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (fres != FR_OK){
 8001cf6:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <getLineMarker+0xc0>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <getLineMarker+0x42>
		printf("f_open error (%i) IN getLineMarker\r\n", fres);
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <getLineMarker+0xc0>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4822      	ldr	r0, [pc, #136]	@ (8001d90 <getLineMarker+0xc4>)
 8001d06:	f008 fbad 	bl	800a464 <iprintf>
		while(1);
 8001d0a:	bf00      	nop
 8001d0c:	e7fd      	b.n	8001d0a <getLineMarker+0x3e>
	}
	else{
		TCHAR* rres = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
		do{
			rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8001d12:	4a1d      	ldr	r2, [pc, #116]	@ (8001d88 <getLineMarker+0xbc>)
 8001d14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d18:	481e      	ldr	r0, [pc, #120]	@ (8001d94 <getLineMarker+0xc8>)
 8001d1a:	f007 fb5c 	bl	80093d6 <f_gets>
 8001d1e:	6138      	str	r0, [r7, #16]

			//char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
			char* token = strtok(rres, ";");
 8001d20:	491d      	ldr	r1, [pc, #116]	@ (8001d98 <getLineMarker+0xcc>)
 8001d22:	6938      	ldr	r0, [r7, #16]
 8001d24:	f008 fd08 	bl	800a738 <strtok>
 8001d28:	60f8      	str	r0, [r7, #12]

				for(uint16_t i = 0; i <= 1 ; i++){
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	82bb      	strh	r3, [r7, #20]
 8001d2e:	e00a      	b.n	8001d46 <getLineMarker+0x7a>
					array[i] = getData(token);
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff ffa7 	bl	8001c84 <getData>
 8001d36:	4602      	mov	r2, r0
 8001d38:	8abb      	ldrh	r3, [r7, #20]
 8001d3a:	b2d1      	uxtb	r1, r2
 8001d3c:	4a17      	ldr	r2, [pc, #92]	@ (8001d9c <getLineMarker+0xd0>)
 8001d3e:	54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i <= 1 ; i++){
 8001d40:	8abb      	ldrh	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	82bb      	strh	r3, [r7, #20]
 8001d46:	8abb      	ldrh	r3, [r7, #20]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d9f1      	bls.n	8001d30 <getLineMarker+0x64>
				}

			if(row == array[0] && drawer == array[1]){
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <getLineMarker+0xd0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d107      	bne.n	8001d68 <getLineMarker+0x9c>
 8001d58:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <getLineMarker+0xd0>)
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	88bb      	ldrh	r3, [r7, #4]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <getLineMarker+0x9c>
					return fileIndex;
 8001d64:	8afb      	ldrh	r3, [r7, #22]
 8001d66:	e009      	b.n	8001d7c <getLineMarker+0xb0>
			}
			else{
				fileIndex++;
 8001d68:	8afb      	ldrh	r3, [r7, #22]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	82fb      	strh	r3, [r7, #22]

			}
		}while(rres != 0);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ce      	bne.n	8001d12 <getLineMarker+0x46>
	}
	f_close(&fil);
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <getLineMarker+0xbc>)
 8001d76:	f007 f8ab 	bl	8008ed0 <f_close>
	return 0;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000448 	.word	0x20000448
 8001d8c:	200008a8 	.word	0x200008a8
 8001d90:	0800e224 	.word	0x0800e224
 8001d94:	200008ac 	.word	0x200008ac
 8001d98:	0800e24c 	.word	0x0800e24c
 8001d9c:	20000cac 	.word	0x20000cac

08001da0 <updateDrawerConfig>:

void updateDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){ //will need to add ID marker and compare if they are the same, if not then change both locations
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	b08e      	sub	sp, #56	@ 0x38
 8001da4:	af06      	add	r7, sp, #24
 8001da6:	ed87 0a02 	vstr	s0, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4603      	mov	r3, r0
 8001db0:	81fb      	strh	r3, [r7, #14]
 8001db2:	460b      	mov	r3, r1
 8001db4:	81bb      	strh	r3, [r7, #12]

	fres = f_open(&fil, filename, FA_READ);
 8001db6:	4b58      	ldr	r3, [pc, #352]	@ (8001f18 <updateDrawerConfig+0x178>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4857      	ldr	r0, [pc, #348]	@ (8001f1c <updateDrawerConfig+0x17c>)
 8001dc0:	f006 fb9a 	bl	80084f8 <f_open>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b55      	ldr	r3, [pc, #340]	@ (8001f20 <updateDrawerConfig+0x180>)
 8001dca:	701a      	strb	r2, [r3, #0]
	fres_temp = f_open(&fil_temp, temp_filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001dcc:	4b55      	ldr	r3, [pc, #340]	@ (8001f24 <updateDrawerConfig+0x184>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	221a      	movs	r2, #26
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4854      	ldr	r0, [pc, #336]	@ (8001f28 <updateDrawerConfig+0x188>)
 8001dd6:	f006 fb8f 	bl	80084f8 <f_open>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <updateDrawerConfig+0x18c>)
 8001de0:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8001de2:	4b4f      	ldr	r3, [pc, #316]	@ (8001f20 <updateDrawerConfig+0x180>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <updateDrawerConfig+0x5a>
		printf("f_open error (%i) IN updateDrawerConfig FOR filename\r\n", fres);
 8001dea:	4b4d      	ldr	r3, [pc, #308]	@ (8001f20 <updateDrawerConfig+0x180>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	484f      	ldr	r0, [pc, #316]	@ (8001f30 <updateDrawerConfig+0x190>)
 8001df2:	f008 fb37 	bl	800a464 <iprintf>
		while(1);
 8001df6:	bf00      	nop
 8001df8:	e7fd      	b.n	8001df6 <updateDrawerConfig+0x56>
	}
	if (fres_temp != FR_OK){
 8001dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8001f2c <updateDrawerConfig+0x18c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <updateDrawerConfig+0x72>
		printf("f_open error (%i) IN updateDrawerConfig FOR temp_filename\r\n", fres_temp);
 8001e02:	4b4a      	ldr	r3, [pc, #296]	@ (8001f2c <updateDrawerConfig+0x18c>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	4619      	mov	r1, r3
 8001e08:	484a      	ldr	r0, [pc, #296]	@ (8001f34 <updateDrawerConfig+0x194>)
 8001e0a:	f008 fb2b 	bl	800a464 <iprintf>
		while(1);
 8001e0e:	bf00      	nop
 8001e10:	e7fd      	b.n	8001e0e <updateDrawerConfig+0x6e>
	}

	UINT bytesWrote;

	bool keep_reading = true;
 8001e12:	2301      	movs	r3, #1
 8001e14:	77fb      	strb	r3, [r7, #31]
	uint16_t lineMarker = getLineMarker(row, drawer);
 8001e16:	89ba      	ldrh	r2, [r7, #12]
 8001e18:	89fb      	ldrh	r3, [r7, #14]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff55 	bl	8001ccc <getLineMarker>
 8001e22:	4603      	mov	r3, r0
 8001e24:	837b      	strh	r3, [r7, #26]
	uint16_t currentLine = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	83bb      	strh	r3, [r7, #28]
	do{

		TCHAR* rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8001e2a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f1c <updateDrawerConfig+0x17c>)
 8001e2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e30:	4841      	ldr	r0, [pc, #260]	@ (8001f38 <updateDrawerConfig+0x198>)
 8001e32:	f007 fad0 	bl	80093d6 <f_gets>
 8001e36:	6178      	str	r0, [r7, #20]

		if(rres == 0) keep_reading = false;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <updateDrawerConfig+0xa4>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	77fb      	strb	r3, [r7, #31]
 8001e42:	e04c      	b.n	8001ede <updateDrawerConfig+0x13e>
		else if(currentLine == lineMarker){ //ID matching would go here, check if IDs match, if not then save previous line, update line, then search for original location of ID and replace that line
 8001e44:	8bba      	ldrh	r2, [r7, #28]
 8001e46:	8b7b      	ldrh	r3, [r7, #26]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d12e      	bne.n	8001eaa <updateDrawerConfig+0x10a>
			snprintf((char*)buffer, MAX_FILELINE, "Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld", row, drawer, calFactor, Tare, thresh);
 8001e4c:	89fd      	ldrh	r5, [r7, #14]
 8001e4e:	89bc      	ldrh	r4, [r7, #12]
 8001e50:	68b8      	ldr	r0, [r7, #8]
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	9105      	str	r1, [sp, #20]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	9104      	str	r1, [sp, #16]
 8001e62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e66:	9400      	str	r4, [sp, #0]
 8001e68:	462b      	mov	r3, r5
 8001e6a:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <updateDrawerConfig+0x19c>)
 8001e6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e70:	4831      	ldr	r0, [pc, #196]	@ (8001f38 <updateDrawerConfig+0x198>)
 8001e72:	f008 fbbd 	bl	800a5f0 <sniprintf>
			//fputs(buffer, temp);

			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8001e76:	4830      	ldr	r0, [pc, #192]	@ (8001f38 <updateDrawerConfig+0x198>)
 8001e78:	f7fe fa1a 	bl	80002b0 <strlen>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	492d      	ldr	r1, [pc, #180]	@ (8001f38 <updateDrawerConfig+0x198>)
 8001e84:	4828      	ldr	r0, [pc, #160]	@ (8001f28 <updateDrawerConfig+0x188>)
 8001e86:	f006 fe30 	bl	8008aea <f_write>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <updateDrawerConfig+0x180>)
 8001e90:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8001e92:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <updateDrawerConfig+0x180>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d021      	beq.n	8001ede <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(1)\r\n", fres);
 8001e9a:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <updateDrawerConfig+0x180>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4827      	ldr	r0, [pc, #156]	@ (8001f40 <updateDrawerConfig+0x1a0>)
 8001ea2:	f008 fadf 	bl	800a464 <iprintf>
				while(1);
 8001ea6:	bf00      	nop
 8001ea8:	e7fd      	b.n	8001ea6 <updateDrawerConfig+0x106>
			}

		}
		else {
			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8001eaa:	4823      	ldr	r0, [pc, #140]	@ (8001f38 <updateDrawerConfig+0x198>)
 8001eac:	f7fe fa00 	bl	80002b0 <strlen>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	4920      	ldr	r1, [pc, #128]	@ (8001f38 <updateDrawerConfig+0x198>)
 8001eb8:	481b      	ldr	r0, [pc, #108]	@ (8001f28 <updateDrawerConfig+0x188>)
 8001eba:	f006 fe16 	bl	8008aea <f_write>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <updateDrawerConfig+0x180>)
 8001ec4:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8001ec6:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <updateDrawerConfig+0x180>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(2)\r\n", fres);
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <updateDrawerConfig+0x180>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	481b      	ldr	r0, [pc, #108]	@ (8001f44 <updateDrawerConfig+0x1a4>)
 8001ed6:	f008 fac5 	bl	800a464 <iprintf>
				while(1);
 8001eda:	bf00      	nop
 8001edc:	e7fd      	b.n	8001eda <updateDrawerConfig+0x13a>
			}
		}


		currentLine++;
 8001ede:	8bbb      	ldrh	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	83bb      	strh	r3, [r7, #28]

	}while(keep_reading);
 8001ee4:	7ffb      	ldrb	r3, [r7, #31]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d19f      	bne.n	8001e2a <updateDrawerConfig+0x8a>

	f_close(&fil);
 8001eea:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <updateDrawerConfig+0x17c>)
 8001eec:	f006 fff0 	bl	8008ed0 <f_close>
	f_close(&fil_temp);
 8001ef0:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <updateDrawerConfig+0x188>)
 8001ef2:	f006 ffed 	bl	8008ed0 <f_close>

	f_unlink((TCHAR*)filename); //deletes the original file
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <updateDrawerConfig+0x178>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f007 f8c7 	bl	800908e <f_unlink>
	f_rename((TCHAR*)temp_filename, (TCHAR*)filename); //rename the temp file to be the new "orginal" file
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <updateDrawerConfig+0x184>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <updateDrawerConfig+0x178>)
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f007 f96a 	bl	80091e4 <f_rename>


}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bdb0      	pop	{r4, r5, r7, pc}
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20000448 	.word	0x20000448
 8001f20:	200008a8 	.word	0x200008a8
 8001f24:	2000000c 	.word	0x2000000c
 8001f28:	20000678 	.word	0x20000678
 8001f2c:	200008a9 	.word	0x200008a9
 8001f30:	0800e250 	.word	0x0800e250
 8001f34:	0800e288 	.word	0x0800e288
 8001f38:	200008ac 	.word	0x200008ac
 8001f3c:	0800e2c4 	.word	0x0800e2c4
 8001f40:	0800e2f8 	.word	0x0800e2f8
 8001f44:	0800e328 	.word	0x0800e328

08001f48 <getFileInfo>:


struct drawerInfo getFileInfo(uint16_t row, uint16_t drawer){ //add ID parameter here later
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b08d      	sub	sp, #52	@ 0x34
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	803b      	strh	r3, [r7, #0]

	struct drawerInfo drawerInst = { 0 };
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
	static unsigned int array[5];

	uint16_t lineMarker = getLineMarker(row, drawer);
 8001f66:	883a      	ldrh	r2, [r7, #0]
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fead 	bl	8001ccc <getLineMarker>
 8001f72:	4603      	mov	r3, r0
 8001f74:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t fileIndex = 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	fres = f_open(&fil, filename, FA_READ);
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002074 <getFileInfo+0x12c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4619      	mov	r1, r3
 8001f82:	483d      	ldr	r0, [pc, #244]	@ (8002078 <getFileInfo+0x130>)
 8001f84:	f006 fab8 	bl	80084f8 <f_open>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <getFileInfo+0x134>)
 8001f8e:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8001f90:	4b3a      	ldr	r3, [pc, #232]	@ (800207c <getFileInfo+0x134>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <getFileInfo+0x60>
			printf("f_open error (%i) IN getFileInfo\r\n", fres);
 8001f98:	4b38      	ldr	r3, [pc, #224]	@ (800207c <getFileInfo+0x134>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4838      	ldr	r0, [pc, #224]	@ (8002080 <getFileInfo+0x138>)
 8001fa0:	f008 fa60 	bl	800a464 <iprintf>
			while(1);
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <getFileInfo+0x5c>
		}
	else {
		TCHAR* rres = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
		do {

				rres = f_gets((TCHAR*) buffer, MAX_FILELINE, &fil);
 8001fac:	4a32      	ldr	r2, [pc, #200]	@ (8002078 <getFileInfo+0x130>)
 8001fae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fb2:	4834      	ldr	r0, [pc, #208]	@ (8002084 <getFileInfo+0x13c>)
 8001fb4:	f007 fa0f 	bl	80093d6 <f_gets>
 8001fb8:	61f8      	str	r0, [r7, #28]

				if (fileIndex == lineMarker) {
 8001fba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001fbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d140      	bne.n	8002044 <getFileInfo+0xfc>
						char* token = strtok(buffer, ";");
 8001fc2:	4931      	ldr	r1, [pc, #196]	@ (8002088 <getFileInfo+0x140>)
 8001fc4:	482f      	ldr	r0, [pc, #188]	@ (8002084 <getFileInfo+0x13c>)
 8001fc6:	f008 fbb7 	bl	800a738 <strtok>
 8001fca:	62b8      	str	r0, [r7, #40]	@ 0x28
						unsigned int index = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24

						while (token != NULL) {
 8001fd0:	e00f      	b.n	8001ff2 <getFileInfo+0xaa>
								array[index] = getData(token);
 8001fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fd4:	f7ff fe56 	bl	8001c84 <getData>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	492c      	ldr	r1, [pc, #176]	@ (800208c <getFileInfo+0x144>)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								token = strtok(NULL, ";");
 8001fe2:	4929      	ldr	r1, [pc, #164]	@ (8002088 <getFileInfo+0x140>)
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f008 fba7 	bl	800a738 <strtok>
 8001fea:	62b8      	str	r0, [r7, #40]	@ 0x28
								index++;
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	3301      	adds	r3, #1
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
						while (token != NULL) {
 8001ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ec      	bne.n	8001fd2 <getFileInfo+0x8a>
						}
						f_close(&fil);
 8001ff8:	481f      	ldr	r0, [pc, #124]	@ (8002078 <getFileInfo+0x130>)
 8001ffa:	f006 ff69 	bl	8008ed0 <f_close>

						drawerInst.row = array[0];
 8001ffe:	4b23      	ldr	r3, [pc, #140]	@ (800208c <getFileInfo+0x144>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	81bb      	strh	r3, [r7, #12]
						drawerInst.drawer = array[1];
 8002006:	4b21      	ldr	r3, [pc, #132]	@ (800208c <getFileInfo+0x144>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	b29b      	uxth	r3, r3
 800200c:	81fb      	strh	r3, [r7, #14]
						drawerInst.calFactor = array[2];
 800200e:	4b1f      	ldr	r3, [pc, #124]	@ (800208c <getFileInfo+0x144>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201a:	edc7 7a04 	vstr	s15, [r7, #16]
						drawerInst.Tare = array[3];
 800201e:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <getFileInfo+0x144>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	617b      	str	r3, [r7, #20]
						drawerInst.thresh = array[4];
 8002024:	4b19      	ldr	r3, [pc, #100]	@ (800208c <getFileInfo+0x144>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002030:	edc7 7a06 	vstr	s15, [r7, #24]

						return drawerInst;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	461c      	mov	r4, r3
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800203e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002042:	e012      	b.n	800206a <getFileInfo+0x122>
				}
				fileIndex++;
 8002044:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002046:	3301      	adds	r3, #1
 8002048:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		}while(rres != 0);
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ad      	bne.n	8001fac <getFileInfo+0x64>
	}

	f_close(&fil);
 8002050:	4809      	ldr	r0, [pc, #36]	@ (8002078 <getFileInfo+0x130>)
 8002052:	f006 ff3d 	bl	8008ed0 <f_close>
	printf("An error occurred during info extraction.");
 8002056:	480e      	ldr	r0, [pc, #56]	@ (8002090 <getFileInfo+0x148>)
 8002058:	f008 fa04 	bl	800a464 <iprintf>
	return drawerInst;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	461c      	mov	r4, r3
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	3734      	adds	r7, #52	@ 0x34
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008
 8002078:	20000448 	.word	0x20000448
 800207c:	200008a8 	.word	0x200008a8
 8002080:	0800e358 	.word	0x0800e358
 8002084:	200008ac 	.word	0x200008ac
 8002088:	0800e24c 	.word	0x0800e24c
 800208c:	20000cb0 	.word	0x20000cb0
 8002090:	0800e37c 	.word	0x0800e37c

08002094 <_write>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

//Code to enable printf statements
int _write(int file, char *data, int len) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	4804      	ldr	r0, [pc, #16]	@ (80020bc <_write+0x28>)
 80020ac:	f003 fa84 	bl	80055b8 <HAL_UART_Transmit>
    return len;
 80020b0:	687b      	ldr	r3, [r7, #4]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000e70 	.word	0x20000e70

080020c0 <__io_getchar>:

//Code to enable scanf statements
GETCHAR_PROTOTYPE
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <__io_getchar+0x48>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <__io_getchar+0x48>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80020e0:	1df9      	adds	r1, r7, #7
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	2201      	movs	r2, #1
 80020e8:	4807      	ldr	r0, [pc, #28]	@ (8002108 <__io_getchar+0x48>)
 80020ea:	f003 faf0 	bl	80056ce <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80020ee:	1df9      	adds	r1, r7, #7
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	2201      	movs	r2, #1
 80020f6:	4804      	ldr	r0, [pc, #16]	@ (8002108 <__io_getchar+0x48>)
 80020f8:	f003 fa5e 	bl	80055b8 <HAL_UART_Transmit>
  return ch;
 80020fc:	79fb      	ldrb	r3, [r7, #7]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000e70 	.word	0x20000e70

0800210c <HAL_GPIO_EXTI_Callback>:
unsigned int released_time; // Timestamp of the button released

int num_button = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
	// D7
	if (GPIO_Pin == RESET_BTN_Pin) {
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d137      	bne.n	800218c <HAL_GPIO_EXTI_Callback+0x80>
		num_button = 1;
 800211c:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <HAL_GPIO_EXTI_Callback+0x10c>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
		if 	(timer_active == 0){
 8002122:	4b3e      	ldr	r3, [pc, #248]	@ (800221c <HAL_GPIO_EXTI_Callback+0x110>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d171      	bne.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
			if(HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin) == GPIO_PIN_SET && i == 0){
 800212a:	2102      	movs	r1, #2
 800212c:	483c      	ldr	r0, [pc, #240]	@ (8002220 <HAL_GPIO_EXTI_Callback+0x114>)
 800212e:	f001 fae9 	bl	8003704 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10c      	bne.n	8002152 <HAL_GPIO_EXTI_Callback+0x46>
 8002138:	4b3a      	ldr	r3, [pc, #232]	@ (8002224 <HAL_GPIO_EXTI_Callback+0x118>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d108      	bne.n	8002152 <HAL_GPIO_EXTI_Callback+0x46>
					i = 1; // states the button already been pressed to ignore interrupts
 8002140:	4b38      	ldr	r3, [pc, #224]	@ (8002224 <HAL_GPIO_EXTI_Callback+0x118>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]
					//printf("%d i\n\r", i);
					time_start = HAL_GetTick(); // reads when button is pressed
 8002146:	f001 f807 	bl	8003158 <HAL_GetTick>
 800214a:	4603      	mov	r3, r0
 800214c:	4a36      	ldr	r2, [pc, #216]	@ (8002228 <HAL_GPIO_EXTI_Callback+0x11c>)
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e05d      	b.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
				}

				else if (HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin) == GPIO_PIN_RESET && j == 0){
 8002152:	2102      	movs	r1, #2
 8002154:	4832      	ldr	r0, [pc, #200]	@ (8002220 <HAL_GPIO_EXTI_Callback+0x114>)
 8002156:	f001 fad5 	bl	8003704 <HAL_GPIO_ReadPin>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d156      	bne.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
 8002160:	4b32      	ldr	r3, [pc, #200]	@ (800222c <HAL_GPIO_EXTI_Callback+0x120>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d152      	bne.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
					j = 1;
 8002168:	4b30      	ldr	r3, [pc, #192]	@ (800222c <HAL_GPIO_EXTI_Callback+0x120>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
					count = 1;
 800216e:	4b30      	ldr	r3, [pc, #192]	@ (8002230 <HAL_GPIO_EXTI_Callback+0x124>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
					/*printf("%d j\n\r", j);*/
					released_time = HAL_GetTick();// reads when button is released
 8002174:	f000 fff0 	bl	8003158 <HAL_GetTick>
 8002178:	4603      	mov	r3, r0
 800217a:	4a2e      	ldr	r2, [pc, #184]	@ (8002234 <HAL_GPIO_EXTI_Callback+0x128>)
 800217c:	6013      	str	r3, [r2, #0]
					HAL_TIM_Base_Start_IT(&htim3);
 800217e:	482e      	ldr	r0, [pc, #184]	@ (8002238 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002180:	f002 fd76 	bl	8004c70 <HAL_TIM_Base_Start_IT>
					timer_active = 1; // timer has active so button sequence is paused
 8002184:	4b25      	ldr	r3, [pc, #148]	@ (800221c <HAL_GPIO_EXTI_Callback+0x110>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
						num_button = 2;
					}
				}
			}

}
 800218a:	e040      	b.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
		else if (GPIO_Pin == CONFIRM_BTN_Pin){
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	2b04      	cmp	r3, #4
 8002190:	d13d      	bne.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
			if(count != 2){
 8002192:	4b27      	ldr	r3, [pc, #156]	@ (8002230 <HAL_GPIO_EXTI_Callback+0x124>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d039      	beq.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
				if ( count == 0){
 800219a:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <HAL_GPIO_EXTI_Callback+0x124>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_GPIO_EXTI_Callback+0x9c>
				HAL_TIM_Base_Start_IT(&htim3);
 80021a2:	4825      	ldr	r0, [pc, #148]	@ (8002238 <HAL_GPIO_EXTI_Callback+0x12c>)
 80021a4:	f002 fd64 	bl	8004c70 <HAL_TIM_Base_Start_IT>
					if(HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin) == GPIO_PIN_SET && i == 0){
 80021a8:	2104      	movs	r1, #4
 80021aa:	481d      	ldr	r0, [pc, #116]	@ (8002220 <HAL_GPIO_EXTI_Callback+0x114>)
 80021ac:	f001 faaa 	bl	8003704 <HAL_GPIO_ReadPin>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10c      	bne.n	80021d0 <HAL_GPIO_EXTI_Callback+0xc4>
 80021b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <HAL_GPIO_EXTI_Callback+0x118>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <HAL_GPIO_EXTI_Callback+0xc4>
						i = 1;
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_GPIO_EXTI_Callback+0x118>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
						time_start = HAL_GetTick(); // reads when button is pressed
 80021c4:	f000 ffc8 	bl	8003158 <HAL_GetTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <HAL_GPIO_EXTI_Callback+0x11c>)
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e01e      	b.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
					else if(HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin) == GPIO_PIN_RESET && j == 0) {
 80021d0:	2104      	movs	r1, #4
 80021d2:	4813      	ldr	r0, [pc, #76]	@ (8002220 <HAL_GPIO_EXTI_Callback+0x114>)
 80021d4:	f001 fa96 	bl	8003704 <HAL_GPIO_ReadPin>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d117      	bne.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_GPIO_EXTI_Callback+0x120>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d113      	bne.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
						j = 1;
 80021e6:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_GPIO_EXTI_Callback+0x120>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
						count++;
 80021ec:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_GPIO_EXTI_Callback+0x124>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002230 <HAL_GPIO_EXTI_Callback+0x124>)
 80021f4:	6013      	str	r3, [r2, #0]
						released_time = HAL_GetTick();// reads when button is released
 80021f6:	f000 ffaf 	bl	8003158 <HAL_GetTick>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <HAL_GPIO_EXTI_Callback+0x128>)
 80021fe:	6013      	str	r3, [r2, #0]
						HAL_TIM_Base_Start_IT(&htim4);// timer used to reset i and j values & handle debounce
 8002200:	480e      	ldr	r0, [pc, #56]	@ (800223c <HAL_GPIO_EXTI_Callback+0x130>)
 8002202:	f002 fd35 	bl	8004c70 <HAL_TIM_Base_Start_IT>
						num_button = 2;
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002208:	2202      	movs	r2, #2
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	e7ff      	b.n	800220e <HAL_GPIO_EXTI_Callback+0x102>
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000ce0 	.word	0x20000ce0
 800221c:	20000cd4 	.word	0x20000cd4
 8002220:	40020400 	.word	0x40020400
 8002224:	20000cc8 	.word	0x20000cc8
 8002228:	20000cd8 	.word	0x20000cd8
 800222c:	20000ccc 	.word	0x20000ccc
 8002230:	20000cd0 	.word	0x20000cd0
 8002234:	20000cdc 	.word	0x20000cdc
 8002238:	20000de0 	.word	0x20000de0
 800223c:	20000e28 	.word	0x20000e28

08002240 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	// executes once the time runs out
	if(htim -> Instance == TIM3){
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <HAL_TIM_PeriodElapsedCallback+0xac>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d133      	bne.n	80022ba <HAL_TIM_PeriodElapsedCallback+0x7a>
		if ( count == 1){
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d118      	bne.n	800228c <HAL_TIM_PeriodElapsedCallback+0x4c>
			// short press
			if (released_time - time_start <= 900){
 800225a:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b26      	ldr	r3, [pc, #152]	@ (80022f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8002268:	d803      	bhi.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x32>
				button_press = press_short;
 800226a:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e013      	b.n	800229a <HAL_TIM_PeriodElapsedCallback+0x5a>
			}
			// long press
			else if (released_time - time_start >= 1100){
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f240 424b 	movw	r2, #1099	@ 0x44b
 8002280:	4293      	cmp	r3, r2
 8002282:	d90a      	bls.n	800229a <HAL_TIM_PeriodElapsedCallback+0x5a>
				button_press = press_long;
 8002284:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002286:	2203      	movs	r2, #3
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e006      	b.n	800229a <HAL_TIM_PeriodElapsedCallback+0x5a>
			}
		}
		// double press
		else if ( count == 2){
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d102      	bne.n	800229a <HAL_TIM_PeriodElapsedCallback+0x5a>
			button_press = press_double;
 8002294:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
		}

		HAL_TIM_Base_Stop_IT(&htim3); // stops timer interrupt
 800229a:	4819      	ldr	r0, [pc, #100]	@ (8002300 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800229c:	f002 fd58 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
		//resets flags & press count
		i = 0;
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
		timer_active = 0;
 80022a6:	4b18      	ldr	r3, [pc, #96]	@ (8002308 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
		j = 0;
 80022ac:	4b17      	ldr	r3, [pc, #92]	@ (800230c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
		count = 0;
 80022b2:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
			// resets flags
			i = 0;
			j = 0;
		}

}
 80022b8:	e013      	b.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
		else if (htim -> Instance == TIM4){
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10e      	bne.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
			printf("%d\n\r",count);
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4812      	ldr	r0, [pc, #72]	@ (8002314 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022cc:	f008 f8ca 	bl	800a464 <iprintf>
			HAL_TIM_Base_Stop_IT(&htim4); // stops timer interrupt
 80022d0:	4811      	ldr	r0, [pc, #68]	@ (8002318 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80022d2:	f002 fd3d 	bl	8004d50 <HAL_TIM_Base_Stop_IT>
			i = 0;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
			j = 0;
 80022dc:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40000400 	.word	0x40000400
 80022f0:	20000cd0 	.word	0x20000cd0
 80022f4:	20000cdc 	.word	0x20000cdc
 80022f8:	20000cd8 	.word	0x20000cd8
 80022fc:	20000cc4 	.word	0x20000cc4
 8002300:	20000de0 	.word	0x20000de0
 8002304:	20000cc8 	.word	0x20000cc8
 8002308:	20000cd4 	.word	0x20000cd4
 800230c:	20000ccc 	.word	0x20000ccc
 8002310:	40000800 	.word	0x40000800
 8002314:	0800e3a8 	.word	0x0800e3a8
 8002318:	20000e28 	.word	0x20000e28

0800231c <button_output>:

void button_output(int button_num){
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	  while (true){
		  // checks if user presses the correct button
		  if(num_button != 0){
 8002324:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <button_output+0xb0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0fb      	beq.n	8002324 <button_output+0x8>
			 if (button_num == num_button){
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <button_output+0xb0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d135      	bne.n	80023a2 <button_output+0x86>
// different button states
			  if (button_press == press_short){
 8002336:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <button_output+0xb4>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10c      	bne.n	800235a <button_output+0x3e>
				  printf("short %d\n\r",i);
 8002340:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <button_output+0xb8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	4824      	ldr	r0, [pc, #144]	@ (80023d8 <button_output+0xbc>)
 8002348:	f008 f88c 	bl	800a464 <iprintf>
				  num_button = 0;
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <button_output+0xb0>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
				  button_press = press_none;
 8002352:	4b1f      	ldr	r3, [pc, #124]	@ (80023d0 <button_output+0xb4>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
				  break;
 8002358:	e034      	b.n	80023c4 <button_output+0xa8>
			  }
				else if (button_press == press_long){
 800235a:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <button_output+0xb4>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b03      	cmp	r3, #3
 8002362:	d10c      	bne.n	800237e <button_output+0x62>
						  printf("long %d\n\r",i);
 8002364:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <button_output+0xb8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	481c      	ldr	r0, [pc, #112]	@ (80023dc <button_output+0xc0>)
 800236c:	f008 f87a 	bl	800a464 <iprintf>
						  num_button = 0;
 8002370:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <button_output+0xb0>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
						  button_press = press_none;
 8002376:	4b16      	ldr	r3, [pc, #88]	@ (80023d0 <button_output+0xb4>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
						  break;
 800237c:	e022      	b.n	80023c4 <button_output+0xa8>
					  }

			else if (button_press == press_double) {
 800237e:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <button_output+0xb4>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d1cd      	bne.n	8002324 <button_output+0x8>
					printf("double %d\n\r",i);
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <button_output+0xb8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	4814      	ldr	r0, [pc, #80]	@ (80023e0 <button_output+0xc4>)
 8002390:	f008 f868 	bl	800a464 <iprintf>
					num_button = 0;
 8002394:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <button_output+0xb0>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
					button_press = press_none;
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <button_output+0xb4>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
					break;
 80023a0:	e010      	b.n	80023c4 <button_output+0xa8>
			}
		  }
			 // displays if user presses wrong button
			 else {
				 printf("Wrong Button, Please Wait Three Seconds To Try Again \n\r");
 80023a2:	4810      	ldr	r0, [pc, #64]	@ (80023e4 <button_output+0xc8>)
 80023a4:	f008 f85e 	bl	800a464 <iprintf>
				 HAL_Delay(500);
 80023a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023ac:	f000 fee0 	bl	8003170 <HAL_Delay>
				 num_button = 0;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <button_output+0xb0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
				 count = 0;
 80023b6:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <button_output+0xcc>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
				 button_press = press_none;
 80023bc:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <button_output+0xb4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
		  if(num_button != 0){
 80023c2:	e7af      	b.n	8002324 <button_output+0x8>
			 }
		}
	}
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000ce0 	.word	0x20000ce0
 80023d0:	20000cc4 	.word	0x20000cc4
 80023d4:	20000cc8 	.word	0x20000cc8
 80023d8:	0800e3b0 	.word	0x0800e3b0
 80023dc:	0800e3bc 	.word	0x0800e3bc
 80023e0:	0800e3c8 	.word	0x0800e3c8
 80023e4:	0800e3d4 	.word	0x0800e3d4
 80023e8:	20000cd0 	.word	0x20000cd0

080023ec <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4604      	mov	r4, r0
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	80fb      	strh	r3, [r7, #6]
 80023fe:	4603      	mov	r3, r0
 8002400:	80bb      	strh	r3, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]
 8002406:	4613      	mov	r3, r2
 8002408:	707b      	strb	r3, [r7, #1]
  if(control){
 800240a:	787b      	ldrb	r3, [r7, #1]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <muxSET+0x50>
    HAL_GPIO_WritePin(MAST_A_GPIO_Port, MAST_A_Pin, A);
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	2101      	movs	r1, #1
 8002418:	4815      	ldr	r0, [pc, #84]	@ (8002470 <muxSET+0x84>)
 800241a:	f001 f98b 	bl	8003734 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_B_GPIO_Port, MAST_B_Pin, B);
 800241e:	88bb      	ldrh	r3, [r7, #4]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	2102      	movs	r1, #2
 8002426:	4812      	ldr	r0, [pc, #72]	@ (8002470 <muxSET+0x84>)
 8002428:	f001 f984 	bl	8003734 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_C_GPIO_Port, MAST_C_Pin, C);
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	2110      	movs	r1, #16
 8002434:	480e      	ldr	r0, [pc, #56]	@ (8002470 <muxSET+0x84>)
 8002436:	f001 f97d 	bl	8003734 <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
  }
}
 800243a:	e014      	b.n	8002466 <muxSET+0x7a>
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	2101      	movs	r1, #1
 8002444:	480b      	ldr	r0, [pc, #44]	@ (8002474 <muxSET+0x88>)
 8002446:	f001 f975 	bl	8003734 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
 800244a:	88bb      	ldrh	r3, [r7, #4]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	2102      	movs	r1, #2
 8002452:	4809      	ldr	r0, [pc, #36]	@ (8002478 <muxSET+0x8c>)
 8002454:	f001 f96e 	bl	8003734 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	2101      	movs	r1, #1
 8002460:	4805      	ldr	r0, [pc, #20]	@ (8002478 <muxSET+0x8c>)
 8002462:	f001 f967 	bl	8003734 <HAL_GPIO_WritePin>
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400
 8002478:	40020800 	.word	0x40020800

0800247c <setRelay>:
#include <manager_io.h>
#include <manager_mux.h>
#include <manager_weight.h>


void setRelay(uint8_t rowNum){
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]

	switch (rowNum){
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	3b01      	subs	r3, #1
 800248a:	2b03      	cmp	r3, #3
 800248c:	d86a      	bhi.n	8002564 <setRelay+0xe8>
 800248e:	a201      	add	r2, pc, #4	@ (adr r2, 8002494 <setRelay+0x18>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080024a5 	.word	0x080024a5
 8002498:	080024d5 	.word	0x080024d5
 800249c:	08002505 	.word	0x08002505
 80024a0:	08002535 	.word	0x08002535
		case 1:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 1);
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024aa:	4830      	ldr	r0, [pc, #192]	@ (800256c <setRelay+0xf0>)
 80024ac:	f001 f942 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024b6:	482d      	ldr	r0, [pc, #180]	@ (800256c <setRelay+0xf0>)
 80024b8:	f001 f93c 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024c2:	482a      	ldr	r0, [pc, #168]	@ (800256c <setRelay+0xf0>)
 80024c4:	f001 f936 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2104      	movs	r1, #4
 80024cc:	4828      	ldr	r0, [pc, #160]	@ (8002570 <setRelay+0xf4>)
 80024ce:	f001 f931 	bl	8003734 <HAL_GPIO_WritePin>
			break;
 80024d2:	e048      	b.n	8002566 <setRelay+0xea>

		case 2:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024da:	4824      	ldr	r0, [pc, #144]	@ (800256c <setRelay+0xf0>)
 80024dc:	f001 f92a 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 1);
 80024e0:	2201      	movs	r2, #1
 80024e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024e6:	4821      	ldr	r0, [pc, #132]	@ (800256c <setRelay+0xf0>)
 80024e8:	f001 f924 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 80024ec:	2200      	movs	r2, #0
 80024ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024f2:	481e      	ldr	r0, [pc, #120]	@ (800256c <setRelay+0xf0>)
 80024f4:	f001 f91e 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2104      	movs	r1, #4
 80024fc:	481c      	ldr	r0, [pc, #112]	@ (8002570 <setRelay+0xf4>)
 80024fe:	f001 f919 	bl	8003734 <HAL_GPIO_WritePin>
			break;
 8002502:	e030      	b.n	8002566 <setRelay+0xea>

		case 3:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800250a:	4818      	ldr	r0, [pc, #96]	@ (800256c <setRelay+0xf0>)
 800250c:	f001 f912 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8002510:	2200      	movs	r2, #0
 8002512:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002516:	4815      	ldr	r0, [pc, #84]	@ (800256c <setRelay+0xf0>)
 8002518:	f001 f90c 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 1);
 800251c:	2201      	movs	r2, #1
 800251e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002522:	4812      	ldr	r0, [pc, #72]	@ (800256c <setRelay+0xf0>)
 8002524:	f001 f906 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002528:	2200      	movs	r2, #0
 800252a:	2104      	movs	r1, #4
 800252c:	4810      	ldr	r0, [pc, #64]	@ (8002570 <setRelay+0xf4>)
 800252e:	f001 f901 	bl	8003734 <HAL_GPIO_WritePin>
			break;
 8002532:	e018      	b.n	8002566 <setRelay+0xea>

		case 4:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800253a:	480c      	ldr	r0, [pc, #48]	@ (800256c <setRelay+0xf0>)
 800253c:	f001 f8fa 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002546:	4809      	ldr	r0, [pc, #36]	@ (800256c <setRelay+0xf0>)
 8002548:	f001 f8f4 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002552:	4806      	ldr	r0, [pc, #24]	@ (800256c <setRelay+0xf0>)
 8002554:	f001 f8ee 	bl	8003734 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 1);
 8002558:	2201      	movs	r2, #1
 800255a:	2104      	movs	r1, #4
 800255c:	4804      	ldr	r0, [pc, #16]	@ (8002570 <setRelay+0xf4>)
 800255e:	f001 f8e9 	bl	8003734 <HAL_GPIO_WritePin>
			break;
 8002562:	e000      	b.n	8002566 <setRelay+0xea>

		default:
			return;
 8002564:	bf00      	nop
	}
}
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40020800 	.word	0x40020800
 8002570:	40020c00 	.word	0x40020c00

08002574 <microDelay>:
#include "gpio.h"
#include "tim.h"


void microDelay(uint16_t delay)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <microDelay+0x30>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8002586:	bf00      	nop
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <microDelay+0x30>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	429a      	cmp	r2, r3
 8002592:	d3f9      	bcc.n	8002588 <microDelay+0x14>
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000d98 	.word	0x20000d98

080025a8 <getHX711>:

int32_t getHX711(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 80025b2:	f000 fdd1 	bl	8003158 <HAL_GetTick>
 80025b6:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 80025b8:	e008      	b.n	80025cc <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 80025ba:	f000 fdcd 	bl	8003158 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80025c6:	d901      	bls.n	80025cc <getHX711+0x24>
      return 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e04b      	b.n	8002664 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 80025cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025d0:	4826      	ldr	r0, [pc, #152]	@ (800266c <getHX711+0xc4>)
 80025d2:	f001 f897 	bl	8003704 <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d0ee      	beq.n	80025ba <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 80025dc:	2300      	movs	r3, #0
 80025de:	72fb      	strb	r3, [r7, #11]
 80025e0:	e025      	b.n	800262e <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 80025e2:	2201      	movs	r2, #1
 80025e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025e8:	4821      	ldr	r0, [pc, #132]	@ (8002670 <getHX711+0xc8>)
 80025ea:	f001 f8a3 	bl	8003734 <HAL_GPIO_WritePin>
    microDelay(1);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7ff ffc0 	bl	8002574 <microDelay>
    data = data << 1;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 80025fa:	2200      	movs	r2, #0
 80025fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002600:	481b      	ldr	r0, [pc, #108]	@ (8002670 <getHX711+0xc8>)
 8002602:	f001 f897 	bl	8003734 <HAL_GPIO_WritePin>
    microDelay(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f7ff ffb4 	bl	8002574 <microDelay>
    if(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 800260c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002610:	4816      	ldr	r0, [pc, #88]	@ (800266c <getHX711+0xc4>)
 8002612:	f001 f877 	bl	8003704 <HAL_GPIO_ReadPin>
 8002616:	4603      	mov	r3, r0
 8002618:	2b01      	cmp	r3, #1
 800261a:	d102      	bne.n	8002622 <getHX711+0x7a>
      data ++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 8002622:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	3301      	adds	r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	72fb      	strb	r3, [r7, #11]
 800262e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002632:	2b17      	cmp	r3, #23
 8002634:	ddd5      	ble.n	80025e2 <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 800263c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 800263e:	2201      	movs	r2, #1
 8002640:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002644:	480a      	ldr	r0, [pc, #40]	@ (8002670 <getHX711+0xc8>)
 8002646:	f001 f875 	bl	8003734 <HAL_GPIO_WritePin>
  microDelay(1);
 800264a:	2001      	movs	r0, #1
 800264c:	f7ff ff92 	bl	8002574 <microDelay>
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002656:	4806      	ldr	r0, [pc, #24]	@ (8002670 <getHX711+0xc8>)
 8002658:	f001 f86c 	bl	8003734 <HAL_GPIO_WritePin>
  microDelay(1);
 800265c:	2001      	movs	r0, #1
 800265e:	f7ff ff89 	bl	8002574 <microDelay>
  return data;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400

08002674 <weigh>:

int weigh(uint32_t tare, float calFactor)
{
 8002674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002678:	b088      	sub	sp, #32
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	ed87 0a00 	vstr	s0, [r7]
  int64_t  total = 0;
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 800268e:	2332      	movs	r3, #50	@ 0x32
 8002690:	613b      	str	r3, [r7, #16]

  int milligram = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  int32_t average = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 800269a:	2300      	movs	r3, #0
 800269c:	82fb      	strh	r3, [r7, #22]
 800269e:	e010      	b.n	80026c2 <weigh+0x4e>
  {
      total += getHX711();
 80026a0:	f7ff ff82 	bl	80025a8 <getHX711>
 80026a4:	4603      	mov	r3, r0
 80026a6:	17da      	asrs	r2, r3, #31
 80026a8:	461c      	mov	r4, r3
 80026aa:	4615      	mov	r5, r2
 80026ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b0:	eb12 0804 	adds.w	r8, r2, r4
 80026b4:	eb43 0905 	adc.w	r9, r3, r5
 80026b8:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 80026bc:	8afb      	ldrh	r3, [r7, #22]
 80026be:	3301      	adds	r3, #1
 80026c0:	82fb      	strh	r3, [r7, #22]
 80026c2:	8afb      	ldrh	r3, [r7, #22]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	dcea      	bgt.n	80026a0 <weigh+0x2c>
  }
  average = (int32_t)(total / samples);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	17da      	asrs	r2, r3, #31
 80026ce:	469a      	mov	sl, r3
 80026d0:	4693      	mov	fp, r2
 80026d2:	4652      	mov	r2, sl
 80026d4:	465b      	mov	r3, fp
 80026d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026da:	f7fe faf5 	bl	8000cc8 <__aeabi_ldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4613      	mov	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]
  milligram = (int)(average - tare)*calFactor;
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f4:	edd7 7a00 	vldr	s15, [r7]
 80026f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002700:	ee17 3a90 	vmov	r3, s15
 8002704:	60fb      	str	r3, [r7, #12]
  return milligram;
 8002706:	68fb      	ldr	r3, [r7, #12]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002712 <weighRaw>:

int32_t weighRaw()
{
 8002712:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
  int64_t  	total = 0;
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  	samples = 50;
 8002726:	2332      	movs	r3, #50	@ 0x32
 8002728:	60bb      	str	r3, [r7, #8]
  int32_t 	average = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]

  for(uint16_t i=0 ; i<samples ; i++)
 800272e:	2300      	movs	r3, #0
 8002730:	81fb      	strh	r3, [r7, #14]
 8002732:	e010      	b.n	8002756 <weighRaw+0x44>
  {
      total += getHX711();
 8002734:	f7ff ff38 	bl	80025a8 <getHX711>
 8002738:	4603      	mov	r3, r0
 800273a:	17da      	asrs	r2, r3, #31
 800273c:	461c      	mov	r4, r3
 800273e:	4615      	mov	r5, r2
 8002740:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002744:	eb12 0804 	adds.w	r8, r2, r4
 8002748:	eb43 0905 	adc.w	r9, r3, r5
 800274c:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 8002750:	89fb      	ldrh	r3, [r7, #14]
 8002752:	3301      	adds	r3, #1
 8002754:	81fb      	strh	r3, [r7, #14]
 8002756:	89fb      	ldrh	r3, [r7, #14]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	429a      	cmp	r2, r3
 800275c:	dcea      	bgt.n	8002734 <weighRaw+0x22>
  }
  average = (int32_t)(total / samples);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	17da      	asrs	r2, r3, #31
 8002762:	469a      	mov	sl, r3
 8002764:	4693      	mov	fp, r2
 8002766:	4652      	mov	r2, sl
 8002768:	465b      	mov	r3, fp
 800276a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800276e:	f7fe faab 	bl	8000cc8 <__aeabi_ldivmod>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4613      	mov	r3, r2
 8002778:	607b      	str	r3, [r7, #4]
  return average;
 800277a:	687b      	ldr	r3, [r7, #4]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002786 <weighRawTare>:

int32_t weighRawTare(uint32_t tare)
{
 8002786:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  int64_t  	total = 0;
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  	samples = 50;
 800279c:	2332      	movs	r3, #50	@ 0x32
 800279e:	613b      	str	r3, [r7, #16]
  int32_t 	average = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  int32_t 	avgTare = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	82fb      	strh	r3, [r7, #22]
 80027ac:	e010      	b.n	80027d0 <weighRawTare+0x4a>
  {
      total += getHX711();
 80027ae:	f7ff fefb 	bl	80025a8 <getHX711>
 80027b2:	4603      	mov	r3, r0
 80027b4:	17da      	asrs	r2, r3, #31
 80027b6:	461c      	mov	r4, r3
 80027b8:	4615      	mov	r5, r2
 80027ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027be:	eb12 0804 	adds.w	r8, r2, r4
 80027c2:	eb43 0905 	adc.w	r9, r3, r5
 80027c6:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 80027ca:	8afb      	ldrh	r3, [r7, #22]
 80027cc:	3301      	adds	r3, #1
 80027ce:	82fb      	strh	r3, [r7, #22]
 80027d0:	8afb      	ldrh	r3, [r7, #22]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	dcea      	bgt.n	80027ae <weighRawTare+0x28>
  }
  average = (int32_t)(total / samples);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	17da      	asrs	r2, r3, #31
 80027dc:	469a      	mov	sl, r3
 80027de:	4693      	mov	fp, r2
 80027e0:	4652      	mov	r2, sl
 80027e2:	465b      	mov	r3, fp
 80027e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027e8:	f7fe fa6e 	bl	8000cc8 <__aeabi_ldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  avgTare = average - tare;
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	60bb      	str	r3, [r7, #8]
  return avgTare;
 80027fc:	68bb      	ldr	r3, [r7, #8]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002808 <getCalFactor>:

float getCalFactor(uint32_t knownHX711){
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	float cal = 20000.0 / knownHX711;
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7fd fe97 	bl	8000544 <__aeabi_ui2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	a10b      	add	r1, pc, #44	@ (adr r1, 8002848 <getCalFactor+0x40>)
 800281c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002820:	f7fe f834 	bl	800088c <__aeabi_ddiv>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fe f9fc 	bl	8000c28 <__aeabi_d2f>
 8002830:	4603      	mov	r3, r0
 8002832:	60fb      	str	r3, [r7, #12]
	return cal;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	ee07 3a90 	vmov	s15, r3
}
 800283a:	eeb0 0a67 	vmov.f32	s0, s15
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f3af 8000 	nop.w
 8002848:	00000000 	.word	0x00000000
 800284c:	40d38800 	.word	0x40d38800

08002850 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002854:	4b17      	ldr	r3, [pc, #92]	@ (80028b4 <MX_SPI1_Init+0x64>)
 8002856:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <MX_SPI1_Init+0x68>)
 8002858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <MX_SPI1_Init+0x64>)
 800285c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002862:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <MX_SPI1_Init+0x64>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002868:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <MX_SPI1_Init+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800286e:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <MX_SPI1_Init+0x64>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002874:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <MX_SPI1_Init+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800287a:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <MX_SPI1_Init+0x64>)
 800287c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002880:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002882:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <MX_SPI1_Init+0x64>)
 8002884:	2200      	movs	r2, #0
 8002886:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <MX_SPI1_Init+0x64>)
 800288a:	2200      	movs	r2, #0
 800288c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800288e:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <MX_SPI1_Init+0x64>)
 8002890:	2200      	movs	r2, #0
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002894:	4b07      	ldr	r3, [pc, #28]	@ (80028b4 <MX_SPI1_Init+0x64>)
 8002896:	2200      	movs	r2, #0
 8002898:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <MX_SPI1_Init+0x64>)
 800289c:	220a      	movs	r2, #10
 800289e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028a0:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <MX_SPI1_Init+0x64>)
 80028a2:	f001 fcdb 	bl	800425c <HAL_SPI_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028ac:	f7ff f924 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000ce4 	.word	0x20000ce4
 80028b8:	40013000 	.word	0x40013000

080028bc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028c0:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028c2:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <MX_SPI2_Init+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028c6:	4b16      	ldr	r3, [pc, #88]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028ce:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028d4:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <MX_SPI2_Init+0x64>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002900:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <MX_SPI2_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <MX_SPI2_Init+0x64>)
 8002908:	220a      	movs	r2, #10
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800290c:	4804      	ldr	r0, [pc, #16]	@ (8002920 <MX_SPI2_Init+0x64>)
 800290e:	f001 fca5 	bl	800425c <HAL_SPI_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002918:	f7ff f8ee 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000d3c 	.word	0x20000d3c
 8002924:	40003800 	.word	0x40003800

08002928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	@ 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a41      	ldr	r2, [pc, #260]	@ (8002a4c <HAL_SPI_MspInit+0x124>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d12c      	bne.n	80029a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	4b40      	ldr	r3, [pc, #256]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	4a3f      	ldr	r2, [pc, #252]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 8002954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002958:	6453      	str	r3, [r2, #68]	@ 0x44
 800295a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	4b39      	ldr	r3, [pc, #228]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a38      	ldr	r2, [pc, #224]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b36      	ldr	r3, [pc, #216]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002982:	23e0      	movs	r3, #224	@ 0xe0
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298e:	2303      	movs	r3, #3
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002992:	2305      	movs	r3, #5
 8002994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	4619      	mov	r1, r3
 800299c:	482d      	ldr	r0, [pc, #180]	@ (8002a54 <HAL_SPI_MspInit+0x12c>)
 800299e:	f000 fd1d 	bl	80033dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029a2:	e04f      	b.n	8002a44 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a58 <HAL_SPI_MspInit+0x130>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d14a      	bne.n	8002a44 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	4b27      	ldr	r3, [pc, #156]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	4a26      	ldr	r2, [pc, #152]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029be:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029da:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b19      	ldr	r3, [pc, #100]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a18      	ldr	r2, [pc, #96]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <HAL_SPI_MspInit+0x128>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a02:	2308      	movs	r3, #8
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a12:	2305      	movs	r3, #5
 8002a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480f      	ldr	r0, [pc, #60]	@ (8002a5c <HAL_SPI_MspInit+0x134>)
 8002a1e:	f000 fcdd 	bl	80033dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a34:	2305      	movs	r3, #5
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4808      	ldr	r0, [pc, #32]	@ (8002a60 <HAL_SPI_MspInit+0x138>)
 8002a40:	f000 fccc 	bl	80033dc <HAL_GPIO_Init>
}
 8002a44:	bf00      	nop
 8002a46:	3730      	adds	r7, #48	@ 0x30
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40013000 	.word	0x40013000
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40003800 	.word	0x40003800
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020400 	.word	0x40020400

08002a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <HAL_MspInit+0x4c>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab0 <HAL_MspInit+0x4c>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <HAL_MspInit+0x4c>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_MspInit+0x4c>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <HAL_MspInit+0x4c>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <HAL_MspInit+0x4c>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800

08002ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <NMI_Handler+0x4>

08002abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <HardFault_Handler+0x4>

08002ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <MemManage_Handler+0x4>

08002acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <BusFault_Handler+0x4>

08002ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <UsageFault_Handler+0x4>

08002adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0a:	f000 fb11 	bl	8003130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_BTN_Pin);
 8002b16:	2002      	movs	r0, #2
 8002b18:	f000 fe26 	bl	8003768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CONFIRM_BTN_Pin);
 8002b24:	2004      	movs	r0, #4
 8002b26:	f000 fe1f 	bl	8003768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b34:	4802      	ldr	r0, [pc, #8]	@ (8002b40 <TIM3_IRQHandler+0x10>)
 8002b36:	f002 f93a 	bl	8004dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000de0 	.word	0x20000de0

08002b44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b48:	4802      	ldr	r0, [pc, #8]	@ (8002b54 <TIM4_IRQHandler+0x10>)
 8002b4a:	f002 f930 	bl	8004dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000e28 	.word	0x20000e28

08002b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return 1;
 8002b5c:	2301      	movs	r3, #1
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_kill>:

int _kill(int pid, int sig)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b72:	f007 fe87 	bl	800a884 <__errno>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2216      	movs	r2, #22
 8002b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_exit>:

void _exit (int status)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ffe7 	bl	8002b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b9a:	bf00      	nop
 8002b9c:	e7fd      	b.n	8002b9a <_exit+0x12>

08002b9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e00a      	b.n	8002bc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bb0:	f7ff fa86 	bl	80020c0 <__io_getchar>
 8002bb4:	4601      	mov	r1, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	60ba      	str	r2, [r7, #8]
 8002bbc:	b2ca      	uxtb	r2, r1
 8002bbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	dbf0      	blt.n	8002bb0 <_read+0x12>
  }

  return len;
 8002bce:	687b      	ldr	r3, [r7, #4]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c00:	605a      	str	r2, [r3, #4]
  return 0;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <_isatty>:

int _isatty(int file)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c18:	2301      	movs	r3, #1
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c48:	4a14      	ldr	r2, [pc, #80]	@ (8002c9c <_sbrk+0x5c>)
 8002c4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <_sbrk+0x60>)
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <_sbrk+0x64>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ca8 <_sbrk+0x68>)
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c62:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d207      	bcs.n	8002c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c70:	f007 fe08 	bl	800a884 <__errno>
 8002c74:	4603      	mov	r3, r0
 8002c76:	220c      	movs	r2, #12
 8002c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	e009      	b.n	8002c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c86:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <_sbrk+0x64>)
 8002c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20020000 	.word	0x20020000
 8002ca0:	00000400 	.word	0x00000400
 8002ca4:	20000d94 	.word	0x20000d94
 8002ca8:	20001050 	.word	0x20001050

08002cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <SystemInit+0x20>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ccc <SystemInit+0x20>)
 8002cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002cee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d00:	4b18      	ldr	r3, [pc, #96]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295
 8002d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d08:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d14:	4813      	ldr	r0, [pc, #76]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d16:	f001 fef3 	bl	8004b00 <HAL_TIM_Base_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d20:	f7fe feea 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480c      	ldr	r0, [pc, #48]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d32:	f002 f92c 	bl	8004f8e <HAL_TIM_ConfigClockSource>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d3c:	f7fe fedc 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d48:	463b      	mov	r3, r7
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <MX_TIM2_Init+0x94>)
 8002d4e:	f002 fb53 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d58:	f7fe fece 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d5c:	bf00      	nop
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000d98 	.word	0x20000d98

08002d68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d84:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <MX_TIM3_Init+0x94>)
 8002d86:	4a1e      	ldr	r2, [pc, #120]	@ (8002e00 <MX_TIM3_Init+0x98>)
 8002d88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dfc <MX_TIM3_Init+0x94>)
 8002d8c:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8002d90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d92:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <MX_TIM3_Init+0x94>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19000 - 1;
 8002d98:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <MX_TIM3_Init+0x94>)
 8002d9a:	f644 2237 	movw	r2, #18999	@ 0x4a37
 8002d9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da0:	4b16      	ldr	r3, [pc, #88]	@ (8002dfc <MX_TIM3_Init+0x94>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002da6:	4b15      	ldr	r3, [pc, #84]	@ (8002dfc <MX_TIM3_Init+0x94>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dac:	4813      	ldr	r0, [pc, #76]	@ (8002dfc <MX_TIM3_Init+0x94>)
 8002dae:	f001 fea7 	bl	8004b00 <HAL_TIM_Base_Init>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002db8:	f7fe fe9e 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480c      	ldr	r0, [pc, #48]	@ (8002dfc <MX_TIM3_Init+0x94>)
 8002dca:	f002 f8e0 	bl	8004f8e <HAL_TIM_ConfigClockSource>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002dd4:	f7fe fe90 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002de0:	463b      	mov	r3, r7
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	@ (8002dfc <MX_TIM3_Init+0x94>)
 8002de6:	f002 fb07 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002df0:	f7fe fe82 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002df4:	bf00      	nop
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000de0 	.word	0x20000de0
 8002e00:	40000400 	.word	0x40000400

08002e04 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e18:	463b      	mov	r3, r7
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e20:	4b1d      	ldr	r3, [pc, #116]	@ (8002e98 <MX_TIM4_Init+0x94>)
 8002e22:	4a1e      	ldr	r2, [pc, #120]	@ (8002e9c <MX_TIM4_Init+0x98>)
 8002e24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6400 - 1;
 8002e26:	4b1c      	ldr	r3, [pc, #112]	@ (8002e98 <MX_TIM4_Init+0x94>)
 8002e28:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8002e2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e98 <MX_TIM4_Init+0x94>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1135 - 1;
 8002e34:	4b18      	ldr	r3, [pc, #96]	@ (8002e98 <MX_TIM4_Init+0x94>)
 8002e36:	f240 426e 	movw	r2, #1134	@ 0x46e
 8002e3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e3c:	4b16      	ldr	r3, [pc, #88]	@ (8002e98 <MX_TIM4_Init+0x94>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e42:	4b15      	ldr	r3, [pc, #84]	@ (8002e98 <MX_TIM4_Init+0x94>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e48:	4813      	ldr	r0, [pc, #76]	@ (8002e98 <MX_TIM4_Init+0x94>)
 8002e4a:	f001 fe59 	bl	8004b00 <HAL_TIM_Base_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002e54:	f7fe fe50 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	4619      	mov	r1, r3
 8002e64:	480c      	ldr	r0, [pc, #48]	@ (8002e98 <MX_TIM4_Init+0x94>)
 8002e66:	f002 f892 	bl	8004f8e <HAL_TIM_ConfigClockSource>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002e70:	f7fe fe42 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e7c:	463b      	mov	r3, r7
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4805      	ldr	r0, [pc, #20]	@ (8002e98 <MX_TIM4_Init+0x94>)
 8002e82:	f002 fab9 	bl	80053f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002e8c:	f7fe fe34 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e90:	bf00      	nop
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000e28 	.word	0x20000e28
 8002e9c:	40000800 	.word	0x40000800

08002ea0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_TIM_Base_MspInit+0xa8>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	4a23      	ldr	r2, [pc, #140]	@ (8002f48 <HAL_TIM_Base_MspInit+0xa8>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec2:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <HAL_TIM_Base_MspInit+0xa8>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002ece:	e036      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f4c <HAL_TIM_Base_MspInit+0xac>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d116      	bne.n	8002f08 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <HAL_TIM_Base_MspInit+0xa8>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	4a19      	ldr	r2, [pc, #100]	@ (8002f48 <HAL_TIM_Base_MspInit+0xa8>)
 8002ee4:	f043 0302 	orr.w	r3, r3, #2
 8002ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eea:	4b17      	ldr	r3, [pc, #92]	@ (8002f48 <HAL_TIM_Base_MspInit+0xa8>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	201d      	movs	r0, #29
 8002efc:	f000 fa37 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f00:	201d      	movs	r0, #29
 8002f02:	f000 fa50 	bl	80033a6 <HAL_NVIC_EnableIRQ>
}
 8002f06:	e01a      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a10      	ldr	r2, [pc, #64]	@ (8002f50 <HAL_TIM_Base_MspInit+0xb0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d115      	bne.n	8002f3e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <HAL_TIM_Base_MspInit+0xa8>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <HAL_TIM_Base_MspInit+0xa8>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <HAL_TIM_Base_MspInit+0xa8>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	201e      	movs	r0, #30
 8002f34:	f000 fa1b 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f38:	201e      	movs	r0, #30
 8002f3a:	f000 fa34 	bl	80033a6 <HAL_NVIC_EnableIRQ>
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800

08002f54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <MX_USART2_UART_Init+0x4c>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	@ (8002fa4 <MX_USART2_UART_Init+0x50>)
 8002f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f5e:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <MX_USART2_UART_Init+0x4c>)
 8002f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <MX_USART2_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <MX_USART2_UART_Init+0x4c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <MX_USART2_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <MX_USART2_UART_Init+0x4c>)
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <MX_USART2_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f84:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <MX_USART2_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f8a:	4805      	ldr	r0, [pc, #20]	@ (8002fa0 <MX_USART2_UART_Init+0x4c>)
 8002f8c:	f002 fac4 	bl	8005518 <HAL_UART_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f96:	f7fe fdaf 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000e70 	.word	0x20000e70
 8002fa4:	40004400 	.word	0x40004400

08002fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	@ (800302c <HAL_UART_MspInit+0x84>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d12b      	bne.n	8003022 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	4b18      	ldr	r3, [pc, #96]	@ (8003030 <HAL_UART_MspInit+0x88>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <HAL_UART_MspInit+0x88>)
 8002fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fda:	4b15      	ldr	r3, [pc, #84]	@ (8003030 <HAL_UART_MspInit+0x88>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <HAL_UART_MspInit+0x88>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fee:	4a10      	ldr	r2, [pc, #64]	@ (8003030 <HAL_UART_MspInit+0x88>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <HAL_UART_MspInit+0x88>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003002:	230c      	movs	r3, #12
 8003004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003012:	2307      	movs	r3, #7
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4619      	mov	r1, r3
 800301c:	4805      	ldr	r0, [pc, #20]	@ (8003034 <HAL_UART_MspInit+0x8c>)
 800301e:	f000 f9dd 	bl	80033dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003022:	bf00      	nop
 8003024:	3728      	adds	r7, #40	@ 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40004400 	.word	0x40004400
 8003030:	40023800 	.word	0x40023800
 8003034:	40020000 	.word	0x40020000

08003038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003038:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003070 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800303c:	f7ff fe36 	bl	8002cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003040:	480c      	ldr	r0, [pc, #48]	@ (8003074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003042:	490d      	ldr	r1, [pc, #52]	@ (8003078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003044:	4a0d      	ldr	r2, [pc, #52]	@ (800307c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003048:	e002      	b.n	8003050 <LoopCopyDataInit>

0800304a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800304c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800304e:	3304      	adds	r3, #4

08003050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003054:	d3f9      	bcc.n	800304a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003056:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003058:	4c0a      	ldr	r4, [pc, #40]	@ (8003084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800305c:	e001      	b.n	8003062 <LoopFillZerobss>

0800305e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800305e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003060:	3204      	adds	r2, #4

08003062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003064:	d3fb      	bcc.n	800305e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003066:	f007 fc13 	bl	800a890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306a:	f7fe fc85 	bl	8001978 <main>
  bx  lr    
 800306e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003078:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800307c:	0800e990 	.word	0x0800e990
  ldr r2, =_sbss
 8003080:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003084:	20001050 	.word	0x20001050

08003088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003088:	e7fe      	b.n	8003088 <ADC_IRQHandler>
	...

0800308c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003090:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0d      	ldr	r2, [pc, #52]	@ (80030cc <HAL_Init+0x40>)
 8003096:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800309a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_Init+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0a      	ldr	r2, [pc, #40]	@ (80030cc <HAL_Init+0x40>)
 80030a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a8:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <HAL_Init+0x40>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b4:	2003      	movs	r0, #3
 80030b6:	f000 f94f 	bl	8003358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ba:	200f      	movs	r0, #15
 80030bc:	f000 f808 	bl	80030d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c0:	f7ff fcd0 	bl	8002a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023c00 	.word	0x40023c00

080030d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d8:	4b12      	ldr	r3, [pc, #72]	@ (8003124 <HAL_InitTick+0x54>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_InitTick+0x58>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f967 	bl	80033c2 <HAL_SYSTICK_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00e      	b.n	800311c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b0f      	cmp	r3, #15
 8003102:	d80a      	bhi.n	800311a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003104:	2200      	movs	r2, #0
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f000 f92f 	bl	800336e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003110:	4a06      	ldr	r2, [pc, #24]	@ (800312c <HAL_InitTick+0x5c>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000010 	.word	0x20000010
 8003128:	20000018 	.word	0x20000018
 800312c:	20000014 	.word	0x20000014

08003130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_IncTick+0x20>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_IncTick+0x24>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4413      	add	r3, r2
 8003140:	4a04      	ldr	r2, [pc, #16]	@ (8003154 <HAL_IncTick+0x24>)
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000018 	.word	0x20000018
 8003154:	20000eb8 	.word	0x20000eb8

08003158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return uwTick;
 800315c:	4b03      	ldr	r3, [pc, #12]	@ (800316c <HAL_GetTick+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000eb8 	.word	0x20000eb8

08003170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff ffee 	bl	8003158 <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d005      	beq.n	8003196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318a:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <HAL_Delay+0x44>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003196:	bf00      	nop
 8003198:	f7ff ffde 	bl	8003158 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d8f7      	bhi.n	8003198 <HAL_Delay+0x28>
  {
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000018 	.word	0x20000018

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4907      	ldr	r1, [pc, #28]	@ (8003254 <__NVIC_EnableIRQ+0x38>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100

08003258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003268:	2b00      	cmp	r3, #0
 800326a:	db0a      	blt.n	8003282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	490c      	ldr	r1, [pc, #48]	@ (80032a4 <__NVIC_SetPriority+0x4c>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	440b      	add	r3, r1
 800327c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003280:	e00a      	b.n	8003298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4908      	ldr	r1, [pc, #32]	@ (80032a8 <__NVIC_SetPriority+0x50>)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3b04      	subs	r3, #4
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	440b      	add	r3, r1
 8003296:	761a      	strb	r2, [r3, #24]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000e100 	.word	0xe000e100
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f1c3 0307 	rsb	r3, r3, #7
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf28      	it	cs
 80032ca:	2304      	movcs	r3, #4
 80032cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d902      	bls.n	80032dc <NVIC_EncodePriority+0x30>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3b03      	subs	r3, #3
 80032da:	e000      	b.n	80032de <NVIC_EncodePriority+0x32>
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	401a      	ands	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f4:	f04f 31ff 	mov.w	r1, #4294967295
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	43d9      	mvns	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	4313      	orrs	r3, r2
         );
}
 8003306:	4618      	mov	r0, r3
 8003308:	3724      	adds	r7, #36	@ 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003324:	d301      	bcc.n	800332a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003326:	2301      	movs	r3, #1
 8003328:	e00f      	b.n	800334a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332a:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <SysTick_Config+0x40>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003332:	210f      	movs	r1, #15
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	f7ff ff8e 	bl	8003258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <SysTick_Config+0x40>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003342:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <SysTick_Config+0x40>)
 8003344:	2207      	movs	r2, #7
 8003346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	e000e010 	.word	0xe000e010

08003358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff29 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800336e:	b580      	push	{r7, lr}
 8003370:	b086      	sub	sp, #24
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003380:	f7ff ff3e 	bl	8003200 <__NVIC_GetPriorityGrouping>
 8003384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7ff ff8e 	bl	80032ac <NVIC_EncodePriority>
 8003390:	4602      	mov	r2, r0
 8003392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff5d 	bl	8003258 <__NVIC_SetPriority>
}
 800339e:	bf00      	nop
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff31 	bl	800321c <__NVIC_EnableIRQ>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ffa2 	bl	8003314 <SysTick_Config>
 80033d0:	4603      	mov	r3, r0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	@ 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	e165      	b.n	80036c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f8:	2201      	movs	r2, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	429a      	cmp	r2, r3
 8003412:	f040 8154 	bne.w	80036be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d005      	beq.n	800342e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342a:	2b02      	cmp	r3, #2
 800342c:	d130      	bne.n	8003490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2203      	movs	r2, #3
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003464:	2201      	movs	r2, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 0201 	and.w	r2, r3, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b03      	cmp	r3, #3
 800349a:	d017      	beq.n	80034cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d123      	bne.n	8003520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	08da      	lsrs	r2, r3, #3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3208      	adds	r2, #8
 80034e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	220f      	movs	r2, #15
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	08da      	lsrs	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3208      	adds	r2, #8
 800351a:	69b9      	ldr	r1, [r7, #24]
 800351c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0203 	and.w	r2, r3, #3
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80ae 	beq.w	80036be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4b5d      	ldr	r3, [pc, #372]	@ (80036dc <HAL_GPIO_Init+0x300>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356a:	4a5c      	ldr	r2, [pc, #368]	@ (80036dc <HAL_GPIO_Init+0x300>)
 800356c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003570:	6453      	str	r3, [r2, #68]	@ 0x44
 8003572:	4b5a      	ldr	r3, [pc, #360]	@ (80036dc <HAL_GPIO_Init+0x300>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800357e:	4a58      	ldr	r2, [pc, #352]	@ (80036e0 <HAL_GPIO_Init+0x304>)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	3302      	adds	r3, #2
 8003586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	220f      	movs	r2, #15
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4f      	ldr	r2, [pc, #316]	@ (80036e4 <HAL_GPIO_Init+0x308>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d025      	beq.n	80035f6 <HAL_GPIO_Init+0x21a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4e      	ldr	r2, [pc, #312]	@ (80036e8 <HAL_GPIO_Init+0x30c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01f      	beq.n	80035f2 <HAL_GPIO_Init+0x216>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4d      	ldr	r2, [pc, #308]	@ (80036ec <HAL_GPIO_Init+0x310>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d019      	beq.n	80035ee <HAL_GPIO_Init+0x212>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4c      	ldr	r2, [pc, #304]	@ (80036f0 <HAL_GPIO_Init+0x314>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_GPIO_Init+0x20e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4b      	ldr	r2, [pc, #300]	@ (80036f4 <HAL_GPIO_Init+0x318>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00d      	beq.n	80035e6 <HAL_GPIO_Init+0x20a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4a      	ldr	r2, [pc, #296]	@ (80036f8 <HAL_GPIO_Init+0x31c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <HAL_GPIO_Init+0x206>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a49      	ldr	r2, [pc, #292]	@ (80036fc <HAL_GPIO_Init+0x320>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_GPIO_Init+0x202>
 80035da:	2306      	movs	r3, #6
 80035dc:	e00c      	b.n	80035f8 <HAL_GPIO_Init+0x21c>
 80035de:	2307      	movs	r3, #7
 80035e0:	e00a      	b.n	80035f8 <HAL_GPIO_Init+0x21c>
 80035e2:	2305      	movs	r3, #5
 80035e4:	e008      	b.n	80035f8 <HAL_GPIO_Init+0x21c>
 80035e6:	2304      	movs	r3, #4
 80035e8:	e006      	b.n	80035f8 <HAL_GPIO_Init+0x21c>
 80035ea:	2303      	movs	r3, #3
 80035ec:	e004      	b.n	80035f8 <HAL_GPIO_Init+0x21c>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e002      	b.n	80035f8 <HAL_GPIO_Init+0x21c>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_GPIO_Init+0x21c>
 80035f6:	2300      	movs	r3, #0
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	f002 0203 	and.w	r2, r2, #3
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	4093      	lsls	r3, r2
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003608:	4935      	ldr	r1, [pc, #212]	@ (80036e0 <HAL_GPIO_Init+0x304>)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	3302      	adds	r3, #2
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003616:	4b3a      	ldr	r3, [pc, #232]	@ (8003700 <HAL_GPIO_Init+0x324>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800363a:	4a31      	ldr	r2, [pc, #196]	@ (8003700 <HAL_GPIO_Init+0x324>)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003640:	4b2f      	ldr	r3, [pc, #188]	@ (8003700 <HAL_GPIO_Init+0x324>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003664:	4a26      	ldr	r2, [pc, #152]	@ (8003700 <HAL_GPIO_Init+0x324>)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800366a:	4b25      	ldr	r3, [pc, #148]	@ (8003700 <HAL_GPIO_Init+0x324>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800368e:	4a1c      	ldr	r2, [pc, #112]	@ (8003700 <HAL_GPIO_Init+0x324>)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003694:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <HAL_GPIO_Init+0x324>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b8:	4a11      	ldr	r2, [pc, #68]	@ (8003700 <HAL_GPIO_Init+0x324>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3301      	adds	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2b0f      	cmp	r3, #15
 80036c8:	f67f ae96 	bls.w	80033f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3724      	adds	r7, #36	@ 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40013800 	.word	0x40013800
 80036e4:	40020000 	.word	0x40020000
 80036e8:	40020400 	.word	0x40020400
 80036ec:	40020800 	.word	0x40020800
 80036f0:	40020c00 	.word	0x40020c00
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40021400 	.word	0x40021400
 80036fc:	40021800 	.word	0x40021800
 8003700:	40013c00 	.word	0x40013c00

08003704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	4013      	ands	r3, r2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	e001      	b.n	8003726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	807b      	strh	r3, [r7, #2]
 8003740:	4613      	mov	r3, r2
 8003742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003744:	787b      	ldrb	r3, [r7, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003750:	e003      	b.n	800375a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	041a      	lsls	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	619a      	str	r2, [r3, #24]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003772:	4b08      	ldr	r3, [pc, #32]	@ (8003794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d006      	beq.n	800378c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800377e:	4a05      	ldr	r2, [pc, #20]	@ (8003794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fcc0 	bl	800210c <HAL_GPIO_EXTI_Callback>
  }
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40013c00 	.word	0x40013c00

08003798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0cc      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4b68      	ldr	r3, [pc, #416]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d90c      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b65      	ldr	r3, [pc, #404]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b63      	ldr	r3, [pc, #396]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0b8      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d020      	beq.n	8003822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ec:	4b59      	ldr	r3, [pc, #356]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a58      	ldr	r2, [pc, #352]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003804:	4b53      	ldr	r3, [pc, #332]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a52      	ldr	r2, [pc, #328]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800380e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b50      	ldr	r3, [pc, #320]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	494d      	ldr	r1, [pc, #308]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d044      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b47      	ldr	r3, [pc, #284]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d119      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e07f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d003      	beq.n	8003856 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003852:	2b03      	cmp	r3, #3
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b3f      	ldr	r3, [pc, #252]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003866:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e067      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003876:	4b37      	ldr	r3, [pc, #220]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4934      	ldr	r1, [pc, #208]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003888:	f7ff fc66 	bl	8003158 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7ff fc62 	bl	8003158 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e04f      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 020c 	and.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1eb      	bne.n	8003890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b8:	4b25      	ldr	r3, [pc, #148]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d20c      	bcs.n	80038e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b22      	ldr	r3, [pc, #136]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b20      	ldr	r3, [pc, #128]	@ (8003950 <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e032      	b.n	8003946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ec:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4916      	ldr	r1, [pc, #88]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800390a:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	490e      	ldr	r1, [pc, #56]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800391e:	f000 f855 	bl	80039cc <HAL_RCC_GetSysClockFreq>
 8003922:	4602      	mov	r2, r0
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	490a      	ldr	r1, [pc, #40]	@ (8003958 <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	5ccb      	ldrb	r3, [r1, r3]
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	4a09      	ldr	r2, [pc, #36]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800393a:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fbc6 	bl	80030d0 <HAL_InitTick>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023c00 	.word	0x40023c00
 8003954:	40023800 	.word	0x40023800
 8003958:	0800e468 	.word	0x0800e468
 800395c:	20000010 	.word	0x20000010
 8003960:	20000014 	.word	0x20000014

08003964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000010 	.word	0x20000010

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003980:	f7ff fff0 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	@ (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	0800e478 	.word	0x0800e478

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039a8:	f7ff ffdc 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0b5b      	lsrs	r3, r3, #13
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	@ (80039c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	0800e478 	.word	0x0800e478

080039cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b0a6      	sub	sp, #152	@ 0x98
 80039d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f2:	4bc8      	ldr	r3, [pc, #800]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	f200 817e 	bhi.w	8003cfc <HAL_RCC_GetSysClockFreq+0x330>
 8003a00:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a3d 	.word	0x08003a3d
 8003a0c:	08003cfd 	.word	0x08003cfd
 8003a10:	08003cfd 	.word	0x08003cfd
 8003a14:	08003cfd 	.word	0x08003cfd
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003cfd 	.word	0x08003cfd
 8003a20:	08003cfd 	.word	0x08003cfd
 8003a24:	08003cfd 	.word	0x08003cfd
 8003a28:	08003a4d 	.word	0x08003a4d
 8003a2c:	08003cfd 	.word	0x08003cfd
 8003a30:	08003cfd 	.word	0x08003cfd
 8003a34:	08003cfd 	.word	0x08003cfd
 8003a38:	08003bb7 	.word	0x08003bb7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4bb6      	ldr	r3, [pc, #728]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003a3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a42:	e15f      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a44:	4bb5      	ldr	r3, [pc, #724]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a4a:	e15b      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4bb1      	ldr	r3, [pc, #708]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a58:	4bae      	ldr	r3, [pc, #696]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d031      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a64:	4bab      	ldr	r3, [pc, #684]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a78:	2300      	movs	r3, #0
 8003a7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a7c:	4ba7      	ldr	r3, [pc, #668]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a7e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003a82:	462a      	mov	r2, r5
 8003a84:	fb03 f202 	mul.w	r2, r3, r2
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	4aa2      	ldr	r2, [pc, #648]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a94:	4621      	mov	r1, r4
 8003a96:	fba1 1202 	umull	r1, r2, r1, r2
 8003a9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003aa0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003aa2:	4413      	add	r3, r2
 8003aa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aaa:	2200      	movs	r2, #0
 8003aac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003aae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ab0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ab4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003ab8:	f7fd f956 	bl	8000d68 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ac6:	e064      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac8:	4b92      	ldr	r3, [pc, #584]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	099b      	lsrs	r3, r3, #6
 8003ace:	2200      	movs	r2, #0
 8003ad0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ad2:	657a      	str	r2, [r7, #84]	@ 0x54
 8003ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003adc:	2300      	movs	r3, #0
 8003ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003ae4:	4622      	mov	r2, r4
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	0159      	lsls	r1, r3, #5
 8003af2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af6:	0150      	lsls	r0, r2, #5
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4621      	mov	r1, r4
 8003afe:	1a51      	subs	r1, r2, r1
 8003b00:	6139      	str	r1, [r7, #16]
 8003b02:	4629      	mov	r1, r5
 8003b04:	eb63 0301 	sbc.w	r3, r3, r1
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b16:	4659      	mov	r1, fp
 8003b18:	018b      	lsls	r3, r1, #6
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b20:	4651      	mov	r1, sl
 8003b22:	018a      	lsls	r2, r1, #6
 8003b24:	4651      	mov	r1, sl
 8003b26:	ebb2 0801 	subs.w	r8, r2, r1
 8003b2a:	4659      	mov	r1, fp
 8003b2c:	eb63 0901 	sbc.w	r9, r3, r1
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b44:	4690      	mov	r8, r2
 8003b46:	4699      	mov	r9, r3
 8003b48:	4623      	mov	r3, r4
 8003b4a:	eb18 0303 	adds.w	r3, r8, r3
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	462b      	mov	r3, r5
 8003b52:	eb49 0303 	adc.w	r3, r9, r3
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b64:	4629      	mov	r1, r5
 8003b66:	028b      	lsls	r3, r1, #10
 8003b68:	4621      	mov	r1, r4
 8003b6a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b6e:	4621      	mov	r1, r4
 8003b70:	028a      	lsls	r2, r1, #10
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b84:	f7fd f8f0 	bl	8000d68 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b92:	4b60      	ldr	r3, [pc, #384]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003ba4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003bb4:	e0a6      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb6:	4b57      	ldr	r3, [pc, #348]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc2:	4b54      	ldr	r3, [pc, #336]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d02a      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bce:	4b51      	ldr	r3, [pc, #324]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003be0:	2100      	movs	r1, #0
 8003be2:	4b4e      	ldr	r3, [pc, #312]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003be4:	fb03 f201 	mul.w	r2, r3, r1
 8003be8:	2300      	movs	r3, #0
 8003bea:	fb00 f303 	mul.w	r3, r0, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a4a      	ldr	r2, [pc, #296]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x350>)
 8003bf2:	fba0 1202 	umull	r1, r2, r0, r2
 8003bf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bf8:	460a      	mov	r2, r1
 8003bfa:	673a      	str	r2, [r7, #112]	@ 0x70
 8003bfc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003bfe:	4413      	add	r3, r2
 8003c00:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c06:	2200      	movs	r2, #0
 8003c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c0a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003c10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003c14:	f7fd f8a8 	bl	8000d68 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c22:	e05b      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c24:	4b3b      	ldr	r3, [pc, #236]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	f04f 0000 	mov.w	r0, #0
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	0159      	lsls	r1, r3, #5
 8003c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c52:	0150      	lsls	r0, r2, #5
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4641      	mov	r1, r8
 8003c5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c5e:	4649      	mov	r1, r9
 8003c60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c78:	ebb2 040a 	subs.w	r4, r2, sl
 8003c7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	00eb      	lsls	r3, r5, #3
 8003c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c8e:	00e2      	lsls	r2, r4, #3
 8003c90:	4614      	mov	r4, r2
 8003c92:	461d      	mov	r5, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	18e3      	adds	r3, r4, r3
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cae:	4629      	mov	r1, r5
 8003cb0:	028b      	lsls	r3, r1, #10
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cb8:	4621      	mov	r1, r4
 8003cba:	028a      	lsls	r2, r1, #10
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	61fa      	str	r2, [r7, #28]
 8003cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cce:	f7fd f84b 	bl	8000d68 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	0f1b      	lsrs	r3, r3, #28
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003cfa:	e003      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003d02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3798      	adds	r7, #152	@ 0x98
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	017d7840 	.word	0x017d7840

08003d20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e28d      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8083 	beq.w	8003e46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d40:	4b94      	ldr	r3, [pc, #592]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d019      	beq.n	8003d80 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d4c:	4b91      	ldr	r3, [pc, #580]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d58:	4b8e      	ldr	r3, [pc, #568]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d64:	d00c      	beq.n	8003d80 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d66:	4b8b      	ldr	r3, [pc, #556]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d112      	bne.n	8003d98 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d72:	4b88      	ldr	r3, [pc, #544]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d7e:	d10b      	bne.n	8003d98 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d80:	4b84      	ldr	r3, [pc, #528]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d05b      	beq.n	8003e44 <HAL_RCC_OscConfig+0x124>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d157      	bne.n	8003e44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e25a      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da0:	d106      	bne.n	8003db0 <HAL_RCC_OscConfig+0x90>
 8003da2:	4b7c      	ldr	r3, [pc, #496]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7b      	ldr	r2, [pc, #492]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e01d      	b.n	8003dec <HAL_RCC_OscConfig+0xcc>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xb4>
 8003dba:	4b76      	ldr	r3, [pc, #472]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a75      	ldr	r2, [pc, #468]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b73      	ldr	r3, [pc, #460]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a72      	ldr	r2, [pc, #456]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0xcc>
 8003dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6e      	ldr	r2, [pc, #440]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b6c      	ldr	r3, [pc, #432]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a6b      	ldr	r2, [pc, #428]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7ff f9b0 	bl	8003158 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7ff f9ac 	bl	8003158 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	@ 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e21f      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b61      	ldr	r3, [pc, #388]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0xdc>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7ff f99c 	bl	8003158 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7ff f998 	bl	8003158 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	@ 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e20b      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	4b57      	ldr	r3, [pc, #348]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x104>
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d06f      	beq.n	8003f32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e52:	4b50      	ldr	r3, [pc, #320]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d017      	beq.n	8003e8e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d105      	bne.n	8003e76 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e76:	4b47      	ldr	r3, [pc, #284]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e82:	4b44      	ldr	r3, [pc, #272]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d116      	bne.n	8003ebc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	4b41      	ldr	r3, [pc, #260]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x186>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e1d3      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4937      	ldr	r1, [pc, #220]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	e03a      	b.n	8003f32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec4:	4b34      	ldr	r3, [pc, #208]	@ (8003f98 <HAL_RCC_OscConfig+0x278>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7ff f945 	bl	8003158 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7ff f941 	bl	8003158 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1b4      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b28      	ldr	r3, [pc, #160]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4925      	ldr	r1, [pc, #148]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
 8003f04:	e015      	b.n	8003f32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b24      	ldr	r3, [pc, #144]	@ (8003f98 <HAL_RCC_OscConfig+0x278>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7ff f924 	bl	8003158 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f14:	f7ff f920 	bl	8003158 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e193      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d036      	beq.n	8003fac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4c:	f7ff f904 	bl	8003158 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f54:	f7ff f900 	bl	8003158 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e173      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <HAL_RCC_OscConfig+0x274>)
 8003f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x234>
 8003f72:	e01b      	b.n	8003fac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f74:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <HAL_RCC_OscConfig+0x27c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7a:	f7ff f8ed 	bl	8003158 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f80:	e00e      	b.n	8003fa0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f82:	f7ff f8e9 	bl	8003158 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d907      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e15c      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
 8003f94:	40023800 	.word	0x40023800
 8003f98:	42470000 	.word	0x42470000
 8003f9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa0:	4b8a      	ldr	r3, [pc, #552]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ea      	bne.n	8003f82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8097 	beq.w	80040e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbe:	4b83      	ldr	r3, [pc, #524]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	4b7f      	ldr	r3, [pc, #508]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	4a7e      	ldr	r2, [pc, #504]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fda:	4b7c      	ldr	r3, [pc, #496]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fea:	4b79      	ldr	r3, [pc, #484]	@ (80041d0 <HAL_RCC_OscConfig+0x4b0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d118      	bne.n	8004028 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff6:	4b76      	ldr	r3, [pc, #472]	@ (80041d0 <HAL_RCC_OscConfig+0x4b0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a75      	ldr	r2, [pc, #468]	@ (80041d0 <HAL_RCC_OscConfig+0x4b0>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004002:	f7ff f8a9 	bl	8003158 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400a:	f7ff f8a5 	bl	8003158 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e118      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	4b6c      	ldr	r3, [pc, #432]	@ (80041d0 <HAL_RCC_OscConfig+0x4b0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d106      	bne.n	800403e <HAL_RCC_OscConfig+0x31e>
 8004030:	4b66      	ldr	r3, [pc, #408]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004034:	4a65      	ldr	r2, [pc, #404]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	@ 0x70
 800403c:	e01c      	b.n	8004078 <HAL_RCC_OscConfig+0x358>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b05      	cmp	r3, #5
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x340>
 8004046:	4b61      	ldr	r3, [pc, #388]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404a:	4a60      	ldr	r2, [pc, #384]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 800404c:	f043 0304 	orr.w	r3, r3, #4
 8004050:	6713      	str	r3, [r2, #112]	@ 0x70
 8004052:	4b5e      	ldr	r3, [pc, #376]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004056:	4a5d      	ldr	r2, [pc, #372]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6713      	str	r3, [r2, #112]	@ 0x70
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0x358>
 8004060:	4b5a      	ldr	r3, [pc, #360]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004064:	4a59      	ldr	r2, [pc, #356]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	6713      	str	r3, [r2, #112]	@ 0x70
 800406c:	4b57      	ldr	r3, [pc, #348]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004070:	4a56      	ldr	r2, [pc, #344]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004072:	f023 0304 	bic.w	r3, r3, #4
 8004076:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7ff f86a 	bl	8003158 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7ff f866 	bl	8003158 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0d7      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409e:	4b4b      	ldr	r3, [pc, #300]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ee      	beq.n	8004088 <HAL_RCC_OscConfig+0x368>
 80040aa:	e014      	b.n	80040d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ac:	f7ff f854 	bl	8003158 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b4:	f7ff f850 	bl	8003158 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e0c1      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ca:	4b40      	ldr	r3, [pc, #256]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ee      	bne.n	80040b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040dc:	4b3b      	ldr	r3, [pc, #236]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	4a3a      	ldr	r2, [pc, #232]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80ad 	beq.w	800424c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040f2:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d060      	beq.n	80041c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d145      	bne.n	8004192 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	4b33      	ldr	r3, [pc, #204]	@ (80041d4 <HAL_RCC_OscConfig+0x4b4>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7ff f824 	bl	8003158 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004114:	f7ff f820 	bl	8003158 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e093      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	4b29      	ldr	r3, [pc, #164]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	019b      	lsls	r3, r3, #6
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	3b01      	subs	r3, #1
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	071b      	lsls	r3, r3, #28
 800415e:	491b      	ldr	r1, [pc, #108]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_RCC_OscConfig+0x4b4>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fe fff5 	bl	8003158 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004172:	f7fe fff1 	bl	8003158 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e064      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004184:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x452>
 8004190:	e05c      	b.n	800424c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004192:	4b10      	ldr	r3, [pc, #64]	@ (80041d4 <HAL_RCC_OscConfig+0x4b4>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fe ffde 	bl	8003158 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fe ffda 	bl	8003158 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e04d      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_RCC_OscConfig+0x4ac>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x480>
 80041be:	e045      	b.n	800424c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e040      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40007000 	.word	0x40007000
 80041d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004258 <HAL_RCC_OscConfig+0x538>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d030      	beq.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d129      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d122      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800420e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004210:	4293      	cmp	r3, r2
 8004212:	d119      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	3b01      	subs	r3, #1
 8004222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d10f      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d107      	bne.n	8004248 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004242:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800

0800425c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e07b      	b.n	8004366 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d108      	bne.n	8004288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427e:	d009      	beq.n	8004294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	61da      	str	r2, [r3, #28]
 8004286:	e005      	b.n	8004294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fe fb3a 	bl	8002928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004318:	ea42 0103 	orr.w	r1, r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0104 	and.w	r1, r3, #4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	f003 0210 	and.w	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004354:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b088      	sub	sp, #32
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800437e:	f7fe feeb 	bl	8003158 <HAL_GetTick>
 8004382:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d001      	beq.n	8004398 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
 8004396:	e12a      	b.n	80045ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_SPI_Transmit+0x36>
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e122      	b.n	80045ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_SPI_Transmit+0x48>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e11b      	b.n	80045ee <HAL_SPI_Transmit+0x280>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2203      	movs	r2, #3
 80043c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004404:	d10f      	bne.n	8004426 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004414:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004424:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b40      	cmp	r3, #64	@ 0x40
 8004432:	d007      	beq.n	8004444 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800444c:	d152      	bne.n	80044f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_Transmit+0xee>
 8004456:	8b7b      	ldrh	r3, [r7, #26]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d145      	bne.n	80044e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	1c9a      	adds	r2, r3, #2
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004480:	e032      	b.n	80044e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d112      	bne.n	80044b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004494:	881a      	ldrh	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	1c9a      	adds	r2, r3, #2
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044b4:	e018      	b.n	80044e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b6:	f7fe fe4f 	bl	8003158 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d803      	bhi.n	80044ce <HAL_SPI_Transmit+0x160>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d102      	bne.n	80044d4 <HAL_SPI_Transmit+0x166>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e082      	b.n	80045ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1c7      	bne.n	8004482 <HAL_SPI_Transmit+0x114>
 80044f2:	e053      	b.n	800459c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_Transmit+0x194>
 80044fc:	8b7b      	ldrh	r3, [r7, #26]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d147      	bne.n	8004592 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	330c      	adds	r3, #12
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004528:	e033      	b.n	8004592 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b02      	cmp	r3, #2
 8004536:	d113      	bne.n	8004560 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	7812      	ldrb	r2, [r2, #0]
 8004544:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800455e:	e018      	b.n	8004592 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004560:	f7fe fdfa 	bl	8003158 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d803      	bhi.n	8004578 <HAL_SPI_Transmit+0x20a>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d102      	bne.n	800457e <HAL_SPI_Transmit+0x210>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e02d      	b.n	80045ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1c6      	bne.n	800452a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	6839      	ldr	r1, [r7, #0]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fa59 	bl	8004a58 <SPI_EndRxTxTransaction>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b08a      	sub	sp, #40	@ 0x28
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004604:	2301      	movs	r3, #1
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004608:	f7fe fda6 	bl	8003158 <HAL_GetTick>
 800460c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004614:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004620:	7ffb      	ldrb	r3, [r7, #31]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d00c      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x4a>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800462c:	d106      	bne.n	800463c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_SPI_TransmitReceive+0x46>
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d001      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
 800463e:	e17f      	b.n	8004940 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x5c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x5c>
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e174      	b.n	8004940 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_SPI_TransmitReceive+0x6e>
 8004660:	2302      	movs	r3, #2
 8004662:	e16d      	b.n	8004940 <HAL_SPI_TransmitReceive+0x34a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b04      	cmp	r3, #4
 8004676:	d003      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2205      	movs	r2, #5
 800467c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	887a      	ldrh	r2, [r7, #2]
 8004696:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	887a      	ldrh	r2, [r7, #2]
 80046a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c0:	2b40      	cmp	r3, #64	@ 0x40
 80046c2:	d007      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046dc:	d17e      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_SPI_TransmitReceive+0xf6>
 80046e6:	8afb      	ldrh	r3, [r7, #22]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d16c      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fc:	1c9a      	adds	r2, r3, #2
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004710:	e059      	b.n	80047c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d11b      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x162>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_SPI_TransmitReceive+0x162>
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	2b01      	cmp	r3, #1
 800472e:	d113      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	881a      	ldrh	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d119      	bne.n	800479a <HAL_SPI_TransmitReceive+0x1a4>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d014      	beq.n	800479a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	b292      	uxth	r2, r2
 800477c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004796:	2301      	movs	r3, #1
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800479a:	f7fe fcdd 	bl	8003158 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d80d      	bhi.n	80047c6 <HAL_SPI_TransmitReceive+0x1d0>
 80047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d009      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e0bc      	b.n	8004940 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1a0      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x11c>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d19b      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x11c>
 80047da:	e082      	b.n	80048e2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x1f4>
 80047e4:	8afb      	ldrh	r3, [r7, #22]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d171      	bne.n	80048ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	7812      	ldrb	r2, [r2, #0]
 80047f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004810:	e05d      	b.n	80048ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b02      	cmp	r3, #2
 800481e:	d11c      	bne.n	800485a <HAL_SPI_TransmitReceive+0x264>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d017      	beq.n	800485a <HAL_SPI_TransmitReceive+0x264>
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	2b01      	cmp	r3, #1
 800482e:	d114      	bne.n	800485a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d119      	bne.n	800489c <HAL_SPI_TransmitReceive+0x2a6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d014      	beq.n	800489c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004898:	2301      	movs	r3, #1
 800489a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800489c:	f7fe fc5c 	bl	8003158 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d803      	bhi.n	80048b4 <HAL_SPI_TransmitReceive+0x2be>
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d102      	bne.n	80048ba <HAL_SPI_TransmitReceive+0x2c4>
 80048b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e038      	b.n	8004940 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d19c      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x21c>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d197      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048e2:	6a3a      	ldr	r2, [r7, #32]
 80048e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f8b6 	bl	8004a58 <SPI_EndRxTxTransaction>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e01d      	b.n	8004940 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800490c:	2300      	movs	r3, #0
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800493e:	2300      	movs	r3, #0
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3728      	adds	r7, #40	@ 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004958:	f7fe fbfe 	bl	8003158 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4413      	add	r3, r2
 8004966:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004968:	f7fe fbf6 	bl	8003158 <HAL_GetTick>
 800496c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800496e:	4b39      	ldr	r3, [pc, #228]	@ (8004a54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	015b      	lsls	r3, r3, #5
 8004974:	0d1b      	lsrs	r3, r3, #20
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800497e:	e054      	b.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d050      	beq.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004988:	f7fe fbe6 	bl	8003158 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	429a      	cmp	r2, r3
 8004996:	d902      	bls.n	800499e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d13d      	bne.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049b6:	d111      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c0:	d004      	beq.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ca:	d107      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e4:	d10f      	bne.n	8004a06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e017      	b.n	8004a4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d19b      	bne.n	8004980 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000010 	.word	0x20000010

08004a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff ff6a 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e032      	b.n	8004af0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <SPI_EndRxTxTransaction+0xa0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <SPI_EndRxTxTransaction+0xa4>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	0d5b      	lsrs	r3, r3, #21
 8004a96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aa8:	d112      	bne.n	8004ad0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2180      	movs	r1, #128	@ 0x80
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff ff47 	bl	8004948 <SPI_WaitFlagStateUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d016      	beq.n	8004aee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e00f      	b.n	8004af0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae6:	2b80      	cmp	r3, #128	@ 0x80
 8004ae8:	d0f2      	beq.n	8004ad0 <SPI_EndRxTxTransaction+0x78>
 8004aea:	e000      	b.n	8004aee <SPI_EndRxTxTransaction+0x96>
        break;
 8004aec:	bf00      	nop
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000010 	.word	0x20000010
 8004afc:	165e9f81 	.word	0x165e9f81

08004b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e041      	b.n	8004b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fe f9ba 	bl	8002ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f000 fb14 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d001      	beq.n	8004bb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e046      	b.n	8004c46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a23      	ldr	r2, [pc, #140]	@ (8004c54 <HAL_TIM_Base_Start+0xb4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d022      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd2:	d01d      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c58 <HAL_TIM_Base_Start+0xb8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c5c <HAL_TIM_Base_Start+0xbc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	@ (8004c60 <HAL_TIM_Base_Start+0xc0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <HAL_TIM_Base_Start+0xc4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <HAL_TIM_Base_Start+0xc8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_Base_Start+0x70>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <HAL_TIM_Base_Start+0xcc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d111      	bne.n	8004c34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d010      	beq.n	8004c44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	e007      	b.n	8004c44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40010400 	.word	0x40010400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40001800 	.word	0x40001800

08004c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d001      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e04e      	b.n	8004d26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a23      	ldr	r2, [pc, #140]	@ (8004d34 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d022      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb2:	d01d      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d38 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d018      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d3c <HAL_TIM_Base_Start_IT+0xcc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00e      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d44 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_TIM_Base_Start_IT+0x80>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a18      	ldr	r2, [pc, #96]	@ (8004d4c <HAL_TIM_Base_Start_IT+0xdc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d111      	bne.n	8004d14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b06      	cmp	r3, #6
 8004d00:	d010      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0201 	orr.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d12:	e007      	b.n	8004d24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40001800 	.word	0x40001800

08004d50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6a1a      	ldr	r2, [r3, #32]
 8004d6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10f      	bne.n	8004d98 <HAL_TIM_Base_Stop_IT+0x48>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d107      	bne.n	8004d98 <HAL_TIM_Base_Stop_IT+0x48>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d020      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01b      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f06f 0202 	mvn.w	r2, #2
 8004de2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f999 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004dfe:	e005      	b.n	8004e0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f98b 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f99c 	bl	8005144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01b      	beq.n	8004e5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0204 	mvn.w	r2, #4
 8004e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f973 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004e4a:	e005      	b.n	8004e58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f965 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f976 	bl	8005144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d020      	beq.n	8004eaa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01b      	beq.n	8004eaa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f06f 0208 	mvn.w	r2, #8
 8004e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f94d 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004e96:	e005      	b.n	8004ea4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f93f 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f950 	bl	8005144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d020      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01b      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f06f 0210 	mvn.w	r2, #16
 8004ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2208      	movs	r2, #8
 8004ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f927 	bl	8005130 <HAL_TIM_IC_CaptureCallback>
 8004ee2:	e005      	b.n	8004ef0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f919 	bl	800511c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f92a 	bl	8005144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00c      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f06f 0201 	mvn.w	r2, #1
 8004f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fd f993 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00c      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fae3 	bl	8005504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f8fb 	bl	8005158 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00c      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f06f 0220 	mvn.w	r2, #32
 8004f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fab5 	bl	80054f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_ConfigClockSource+0x1c>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e0b4      	b.n	8005114 <HAL_TIM_ConfigClockSource+0x186>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fc8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fd0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe2:	d03e      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0xd4>
 8004fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe8:	f200 8087 	bhi.w	80050fa <HAL_TIM_ConfigClockSource+0x16c>
 8004fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff0:	f000 8086 	beq.w	8005100 <HAL_TIM_ConfigClockSource+0x172>
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff8:	d87f      	bhi.n	80050fa <HAL_TIM_ConfigClockSource+0x16c>
 8004ffa:	2b70      	cmp	r3, #112	@ 0x70
 8004ffc:	d01a      	beq.n	8005034 <HAL_TIM_ConfigClockSource+0xa6>
 8004ffe:	2b70      	cmp	r3, #112	@ 0x70
 8005000:	d87b      	bhi.n	80050fa <HAL_TIM_ConfigClockSource+0x16c>
 8005002:	2b60      	cmp	r3, #96	@ 0x60
 8005004:	d050      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0x11a>
 8005006:	2b60      	cmp	r3, #96	@ 0x60
 8005008:	d877      	bhi.n	80050fa <HAL_TIM_ConfigClockSource+0x16c>
 800500a:	2b50      	cmp	r3, #80	@ 0x50
 800500c:	d03c      	beq.n	8005088 <HAL_TIM_ConfigClockSource+0xfa>
 800500e:	2b50      	cmp	r3, #80	@ 0x50
 8005010:	d873      	bhi.n	80050fa <HAL_TIM_ConfigClockSource+0x16c>
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d058      	beq.n	80050c8 <HAL_TIM_ConfigClockSource+0x13a>
 8005016:	2b40      	cmp	r3, #64	@ 0x40
 8005018:	d86f      	bhi.n	80050fa <HAL_TIM_ConfigClockSource+0x16c>
 800501a:	2b30      	cmp	r3, #48	@ 0x30
 800501c:	d064      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0x15a>
 800501e:	2b30      	cmp	r3, #48	@ 0x30
 8005020:	d86b      	bhi.n	80050fa <HAL_TIM_ConfigClockSource+0x16c>
 8005022:	2b20      	cmp	r3, #32
 8005024:	d060      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0x15a>
 8005026:	2b20      	cmp	r3, #32
 8005028:	d867      	bhi.n	80050fa <HAL_TIM_ConfigClockSource+0x16c>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d05c      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0x15a>
 800502e:	2b10      	cmp	r3, #16
 8005030:	d05a      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0x15a>
 8005032:	e062      	b.n	80050fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005044:	f000 f9b8 	bl	80053b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005056:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	609a      	str	r2, [r3, #8]
      break;
 8005060:	e04f      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005072:	f000 f9a1 	bl	80053b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005084:	609a      	str	r2, [r3, #8]
      break;
 8005086:	e03c      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005094:	461a      	mov	r2, r3
 8005096:	f000 f915 	bl	80052c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2150      	movs	r1, #80	@ 0x50
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 f96e 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 80050a6:	e02c      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050b4:	461a      	mov	r2, r3
 80050b6:	f000 f934 	bl	8005322 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2160      	movs	r1, #96	@ 0x60
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f95e 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 80050c6:	e01c      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d4:	461a      	mov	r2, r3
 80050d6:	f000 f8f5 	bl	80052c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2140      	movs	r1, #64	@ 0x40
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 f94e 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 80050e6:	e00c      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f000 f945 	bl	8005382 <TIM_ITRx_SetConfig>
      break;
 80050f8:	e003      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
      break;
 80050fe:	e000      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005100:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a46      	ldr	r2, [pc, #280]	@ (8005298 <TIM_Base_SetConfig+0x12c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518a:	d00f      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a43      	ldr	r2, [pc, #268]	@ (800529c <TIM_Base_SetConfig+0x130>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00b      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a42      	ldr	r2, [pc, #264]	@ (80052a0 <TIM_Base_SetConfig+0x134>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a41      	ldr	r2, [pc, #260]	@ (80052a4 <TIM_Base_SetConfig+0x138>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a40      	ldr	r2, [pc, #256]	@ (80052a8 <TIM_Base_SetConfig+0x13c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a35      	ldr	r2, [pc, #212]	@ (8005298 <TIM_Base_SetConfig+0x12c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d02b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051cc:	d027      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a32      	ldr	r2, [pc, #200]	@ (800529c <TIM_Base_SetConfig+0x130>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d023      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a31      	ldr	r2, [pc, #196]	@ (80052a0 <TIM_Base_SetConfig+0x134>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01f      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a30      	ldr	r2, [pc, #192]	@ (80052a4 <TIM_Base_SetConfig+0x138>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2f      	ldr	r2, [pc, #188]	@ (80052a8 <TIM_Base_SetConfig+0x13c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d017      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2e      	ldr	r2, [pc, #184]	@ (80052ac <TIM_Base_SetConfig+0x140>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2d      	ldr	r2, [pc, #180]	@ (80052b0 <TIM_Base_SetConfig+0x144>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00f      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2c      	ldr	r2, [pc, #176]	@ (80052b4 <TIM_Base_SetConfig+0x148>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2b      	ldr	r2, [pc, #172]	@ (80052b8 <TIM_Base_SetConfig+0x14c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2a      	ldr	r2, [pc, #168]	@ (80052bc <TIM_Base_SetConfig+0x150>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a29      	ldr	r2, [pc, #164]	@ (80052c0 <TIM_Base_SetConfig+0x154>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a10      	ldr	r2, [pc, #64]	@ (8005298 <TIM_Base_SetConfig+0x12c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0xf8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a12      	ldr	r2, [pc, #72]	@ (80052a8 <TIM_Base_SetConfig+0x13c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d105      	bne.n	800528a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f023 0201 	bic.w	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	611a      	str	r2, [r3, #16]
  }
}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40010400 	.word	0x40010400
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400
 80052b4:	40014800 	.word	0x40014800
 80052b8:	40001800 	.word	0x40001800
 80052bc:	40001c00 	.word	0x40001c00
 80052c0:	40002000 	.word	0x40002000

080052c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0201 	bic.w	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 030a 	bic.w	r3, r3, #10
 8005300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	621a      	str	r2, [r3, #32]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005322:	b480      	push	{r7}
 8005324:	b087      	sub	sp, #28
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f023 0210 	bic.w	r2, r3, #16
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800534c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800535e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	f043 0307 	orr.w	r3, r3, #7
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	431a      	orrs	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800540c:	2302      	movs	r3, #2
 800540e:	e05a      	b.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a21      	ldr	r2, [pc, #132]	@ (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545c:	d01d      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1d      	ldr	r2, [pc, #116]	@ (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1b      	ldr	r2, [pc, #108]	@ (80054dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1a      	ldr	r2, [pc, #104]	@ (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a18      	ldr	r2, [pc, #96]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a17      	ldr	r2, [pc, #92]	@ (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a15      	ldr	r2, [pc, #84]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10c      	bne.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40001800 	.word	0x40001800

080054f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e042      	b.n	80055b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fd fd32 	bl	8002fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	@ 0x24
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800555a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fa09 	bl	8005974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d175      	bne.n	80056c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_UART_Transmit+0x2c>
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e06e      	b.n	80056c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2221      	movs	r2, #33	@ 0x21
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055f6:	f7fd fdaf 	bl	8003158 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	88fa      	ldrh	r2, [r7, #6]
 8005606:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005610:	d108      	bne.n	8005624 <HAL_UART_Transmit+0x6c>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	e003      	b.n	800562c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800562c:	e02e      	b.n	800568c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	2180      	movs	r1, #128	@ 0x80
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f8df 	bl	80057fc <UART_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e03a      	b.n	80056c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	3302      	adds	r3, #2
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	e007      	b.n	800567e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	3301      	adds	r3, #1
 800567c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1cb      	bne.n	800562e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	2140      	movs	r1, #64	@ 0x40
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f8ab 	bl	80057fc <UART_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e006      	b.n	80056c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e000      	b.n	80056c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056c4:	2302      	movs	r3, #2
  }
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b08a      	sub	sp, #40	@ 0x28
 80056d2:	af02      	add	r7, sp, #8
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	f040 8081 	bne.w	80057f2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_UART_Receive+0x2e>
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e079      	b.n	80057f4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2222      	movs	r2, #34	@ 0x22
 800570a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005714:	f7fd fd20 	bl	8003158 <HAL_GetTick>
 8005718:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	88fa      	ldrh	r2, [r7, #6]
 800571e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572e:	d108      	bne.n	8005742 <HAL_UART_Receive+0x74>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	e003      	b.n	800574a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005746:	2300      	movs	r3, #0
 8005748:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800574a:	e047      	b.n	80057dc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	2120      	movs	r1, #32
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f850 	bl	80057fc <UART_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e042      	b.n	80057f4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10c      	bne.n	800578e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005780:	b29a      	uxth	r2, r3
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	3302      	adds	r3, #2
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e01f      	b.n	80057ce <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005796:	d007      	beq.n	80057a8 <HAL_UART_Receive+0xda>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <HAL_UART_Receive+0xe8>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	e008      	b.n	80057c8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	3301      	adds	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1b2      	bne.n	800574c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e000      	b.n	80057f4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80057f2:	2302      	movs	r3, #2
  }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580c:	e03b      	b.n	8005886 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d037      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005816:	f7fd fc9f 	bl	8003158 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	6a3a      	ldr	r2, [r7, #32]
 8005822:	429a      	cmp	r2, r3
 8005824:	d302      	bcc.n	800582c <UART_WaitOnFlagUntilTimeout+0x30>
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e03a      	b.n	80058a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	d023      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0x8a>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b80      	cmp	r3, #128	@ 0x80
 8005842:	d020      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b40      	cmp	r3, #64	@ 0x40
 8005848:	d01d      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0308 	and.w	r3, r3, #8
 8005854:	2b08      	cmp	r3, #8
 8005856:	d116      	bne.n	8005886 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 f81d 	bl	80058ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2208      	movs	r2, #8
 8005878:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e00f      	b.n	80058a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4013      	ands	r3, r2
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	429a      	cmp	r2, r3
 8005894:	bf0c      	ite	eq
 8005896:	2301      	moveq	r3, #1
 8005898:	2300      	movne	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	79fb      	ldrb	r3, [r7, #7]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d0b4      	beq.n	800580e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b095      	sub	sp, #84	@ 0x54
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80058d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e5      	bne.n	80058b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3314      	adds	r3, #20
 8005908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800590a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800590c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	2b01      	cmp	r3, #1
 8005924:	d119      	bne.n	800595a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	60bb      	str	r3, [r7, #8]
   return(result);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f023 0310 	bic.w	r3, r3, #16
 800593c:	647b      	str	r3, [r7, #68]	@ 0x44
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	330c      	adds	r3, #12
 8005944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005946:	61ba      	str	r2, [r7, #24]
 8005948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6979      	ldr	r1, [r7, #20]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	613b      	str	r3, [r7, #16]
   return(result);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005968:	bf00      	nop
 800596a:	3754      	adds	r7, #84	@ 0x54
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005978:	b0c0      	sub	sp, #256	@ 0x100
 800597a:	af00      	add	r7, sp, #0
 800597c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	68d9      	ldr	r1, [r3, #12]
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	ea40 0301 	orr.w	r3, r0, r1
 800599c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059cc:	f021 010c 	bic.w	r1, r1, #12
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059da:	430b      	orrs	r3, r1
 80059dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ee:	6999      	ldr	r1, [r3, #24]
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	ea40 0301 	orr.w	r3, r0, r1
 80059fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4b8f      	ldr	r3, [pc, #572]	@ (8005c40 <UART_SetConfig+0x2cc>)
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d005      	beq.n	8005a14 <UART_SetConfig+0xa0>
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8005c44 <UART_SetConfig+0x2d0>)
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d104      	bne.n	8005a1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a14:	f7fd ffc6 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8005a18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a1c:	e003      	b.n	8005a26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a1e:	f7fd ffad 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8005a22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a30:	f040 810c 	bne.w	8005c4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	1891      	adds	r1, r2, r2
 8005a4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a4e:	415b      	adcs	r3, r3
 8005a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a56:	4621      	mov	r1, r4
 8005a58:	eb12 0801 	adds.w	r8, r2, r1
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	eb43 0901 	adc.w	r9, r3, r1
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a76:	4690      	mov	r8, r2
 8005a78:	4699      	mov	r9, r3
 8005a7a:	4623      	mov	r3, r4
 8005a7c:	eb18 0303 	adds.w	r3, r8, r3
 8005a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a84:	462b      	mov	r3, r5
 8005a86:	eb49 0303 	adc.w	r3, r9, r3
 8005a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	18db      	adds	r3, r3, r3
 8005aa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	eb42 0303 	adc.w	r3, r2, r3
 8005aae:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ab4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ab8:	f7fb f956 	bl	8000d68 <__aeabi_uldivmod>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4b61      	ldr	r3, [pc, #388]	@ (8005c48 <UART_SetConfig+0x2d4>)
 8005ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	011c      	lsls	r4, r3, #4
 8005aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ad4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ad8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005adc:	4642      	mov	r2, r8
 8005ade:	464b      	mov	r3, r9
 8005ae0:	1891      	adds	r1, r2, r2
 8005ae2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ae4:	415b      	adcs	r3, r3
 8005ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005aec:	4641      	mov	r1, r8
 8005aee:	eb12 0a01 	adds.w	sl, r2, r1
 8005af2:	4649      	mov	r1, r9
 8005af4:	eb43 0b01 	adc.w	fp, r3, r1
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b0c:	4692      	mov	sl, r2
 8005b0e:	469b      	mov	fp, r3
 8005b10:	4643      	mov	r3, r8
 8005b12:	eb1a 0303 	adds.w	r3, sl, r3
 8005b16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	18db      	adds	r3, r3, r3
 8005b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b3e:	4613      	mov	r3, r2
 8005b40:	eb42 0303 	adc.w	r3, r2, r3
 8005b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b4e:	f7fb f90b 	bl	8000d68 <__aeabi_uldivmod>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	4b3b      	ldr	r3, [pc, #236]	@ (8005c48 <UART_SetConfig+0x2d4>)
 8005b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	2264      	movs	r2, #100	@ 0x64
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	1acb      	subs	r3, r1, r3
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b6e:	4b36      	ldr	r3, [pc, #216]	@ (8005c48 <UART_SetConfig+0x2d4>)
 8005b70:	fba3 2302 	umull	r2, r3, r3, r2
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b7c:	441c      	add	r4, r3
 8005b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	1891      	adds	r1, r2, r2
 8005b96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b98:	415b      	adcs	r3, r3
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	1851      	adds	r1, r2, r1
 8005ba4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	414b      	adcs	r3, r1
 8005baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bb8:	4659      	mov	r1, fp
 8005bba:	00cb      	lsls	r3, r1, #3
 8005bbc:	4651      	mov	r1, sl
 8005bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bc2:	4651      	mov	r1, sl
 8005bc4:	00ca      	lsls	r2, r1, #3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4642      	mov	r2, r8
 8005bce:	189b      	adds	r3, r3, r2
 8005bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	460a      	mov	r2, r1
 8005bd8:	eb42 0303 	adc.w	r3, r2, r3
 8005bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	18db      	adds	r3, r3, r3
 8005bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	eb42 0303 	adc.w	r3, r2, r3
 8005c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c0a:	f7fb f8ad 	bl	8000d68 <__aeabi_uldivmod>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4b0d      	ldr	r3, [pc, #52]	@ (8005c48 <UART_SetConfig+0x2d4>)
 8005c14:	fba3 1302 	umull	r1, r3, r3, r2
 8005c18:	095b      	lsrs	r3, r3, #5
 8005c1a:	2164      	movs	r1, #100	@ 0x64
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	3332      	adds	r3, #50	@ 0x32
 8005c26:	4a08      	ldr	r2, [pc, #32]	@ (8005c48 <UART_SetConfig+0x2d4>)
 8005c28:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	f003 0207 	and.w	r2, r3, #7
 8005c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4422      	add	r2, r4
 8005c3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c3c:	e106      	b.n	8005e4c <UART_SetConfig+0x4d8>
 8005c3e:	bf00      	nop
 8005c40:	40011000 	.word	0x40011000
 8005c44:	40011400 	.word	0x40011400
 8005c48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c5e:	4642      	mov	r2, r8
 8005c60:	464b      	mov	r3, r9
 8005c62:	1891      	adds	r1, r2, r2
 8005c64:	6239      	str	r1, [r7, #32]
 8005c66:	415b      	adcs	r3, r3
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c6e:	4641      	mov	r1, r8
 8005c70:	1854      	adds	r4, r2, r1
 8005c72:	4649      	mov	r1, r9
 8005c74:	eb43 0501 	adc.w	r5, r3, r1
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	00eb      	lsls	r3, r5, #3
 8005c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c86:	00e2      	lsls	r2, r4, #3
 8005c88:	4614      	mov	r4, r2
 8005c8a:	461d      	mov	r5, r3
 8005c8c:	4643      	mov	r3, r8
 8005c8e:	18e3      	adds	r3, r4, r3
 8005c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c94:	464b      	mov	r3, r9
 8005c96:	eb45 0303 	adc.w	r3, r5, r3
 8005c9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005caa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cba:	4629      	mov	r1, r5
 8005cbc:	008b      	lsls	r3, r1, #2
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	008a      	lsls	r2, r1, #2
 8005cc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ccc:	f7fb f84c 	bl	8000d68 <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4b60      	ldr	r3, [pc, #384]	@ (8005e58 <UART_SetConfig+0x4e4>)
 8005cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	011c      	lsls	r4, r3, #4
 8005cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ce8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005cec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	1891      	adds	r1, r2, r2
 8005cf6:	61b9      	str	r1, [r7, #24]
 8005cf8:	415b      	adcs	r3, r3
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d00:	4641      	mov	r1, r8
 8005d02:	1851      	adds	r1, r2, r1
 8005d04:	6139      	str	r1, [r7, #16]
 8005d06:	4649      	mov	r1, r9
 8005d08:	414b      	adcs	r3, r1
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d18:	4659      	mov	r1, fp
 8005d1a:	00cb      	lsls	r3, r1, #3
 8005d1c:	4651      	mov	r1, sl
 8005d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d22:	4651      	mov	r1, sl
 8005d24:	00ca      	lsls	r2, r1, #3
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	189b      	adds	r3, r3, r2
 8005d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d34:	464b      	mov	r3, r9
 8005d36:	460a      	mov	r2, r1
 8005d38:	eb42 0303 	adc.w	r3, r2, r3
 8005d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d58:	4649      	mov	r1, r9
 8005d5a:	008b      	lsls	r3, r1, #2
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d62:	4641      	mov	r1, r8
 8005d64:	008a      	lsls	r2, r1, #2
 8005d66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d6a:	f7fa fffd 	bl	8000d68 <__aeabi_uldivmod>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4611      	mov	r1, r2
 8005d74:	4b38      	ldr	r3, [pc, #224]	@ (8005e58 <UART_SetConfig+0x4e4>)
 8005d76:	fba3 2301 	umull	r2, r3, r3, r1
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	2264      	movs	r2, #100	@ 0x64
 8005d7e:	fb02 f303 	mul.w	r3, r2, r3
 8005d82:	1acb      	subs	r3, r1, r3
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	3332      	adds	r3, #50	@ 0x32
 8005d88:	4a33      	ldr	r2, [pc, #204]	@ (8005e58 <UART_SetConfig+0x4e4>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d94:	441c      	add	r4, r3
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005da0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005da4:	4642      	mov	r2, r8
 8005da6:	464b      	mov	r3, r9
 8005da8:	1891      	adds	r1, r2, r2
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	415b      	adcs	r3, r3
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005db4:	4641      	mov	r1, r8
 8005db6:	1851      	adds	r1, r2, r1
 8005db8:	6039      	str	r1, [r7, #0]
 8005dba:	4649      	mov	r1, r9
 8005dbc:	414b      	adcs	r3, r1
 8005dbe:	607b      	str	r3, [r7, #4]
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dcc:	4659      	mov	r1, fp
 8005dce:	00cb      	lsls	r3, r1, #3
 8005dd0:	4651      	mov	r1, sl
 8005dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dd6:	4651      	mov	r1, sl
 8005dd8:	00ca      	lsls	r2, r1, #3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	4642      	mov	r2, r8
 8005de2:	189b      	adds	r3, r3, r2
 8005de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005de6:	464b      	mov	r3, r9
 8005de8:	460a      	mov	r2, r1
 8005dea:	eb42 0303 	adc.w	r3, r2, r3
 8005dee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e08:	4649      	mov	r1, r9
 8005e0a:	008b      	lsls	r3, r1, #2
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e12:	4641      	mov	r1, r8
 8005e14:	008a      	lsls	r2, r1, #2
 8005e16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e1a:	f7fa ffa5 	bl	8000d68 <__aeabi_uldivmod>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4b0d      	ldr	r3, [pc, #52]	@ (8005e58 <UART_SetConfig+0x4e4>)
 8005e24:	fba3 1302 	umull	r1, r3, r3, r2
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	2164      	movs	r1, #100	@ 0x64
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	3332      	adds	r3, #50	@ 0x32
 8005e36:	4a08      	ldr	r2, [pc, #32]	@ (8005e58 <UART_SetConfig+0x4e4>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	f003 020f 	and.w	r2, r3, #15
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4422      	add	r2, r4
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e52:	46bd      	mov	sp, r7
 8005e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e58:	51eb851f 	.word	0x51eb851f

08005e5c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005e60:	4904      	ldr	r1, [pc, #16]	@ (8005e74 <MX_FATFS_Init+0x18>)
 8005e62:	4805      	ldr	r0, [pc, #20]	@ (8005e78 <MX_FATFS_Init+0x1c>)
 8005e64:	f003 fb42 	bl	80094ec <FATFS_LinkDriver>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4b03      	ldr	r3, [pc, #12]	@ (8005e7c <MX_FATFS_Init+0x20>)
 8005e6e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005e70:	bf00      	nop
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000ec0 	.word	0x20000ec0
 8005e78:	2000001c 	.word	0x2000001c
 8005e7c:	20000ebc 	.word	0x20000ebc

08005e80 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005e84:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	4603      	mov	r3, r0
 8005e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 f9d7 	bl	8006250 <USER_SPI_initialize>
 8005ea2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fab5 	bl	8006428 <USER_SPI_status>
 8005ebe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8005ed8:	7bf8      	ldrb	r0, [r7, #15]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	f000 fab8 	bl	8006454 <USER_SPI_read>
 8005ee4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8005efe:	7bf8      	ldrb	r0, [r7, #15]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	f000 fb0b 	bl	8006520 <USER_SPI_write>
 8005f0a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	603a      	str	r2, [r7, #0]
 8005f1e:	71fb      	strb	r3, [r7, #7]
 8005f20:	460b      	mov	r3, r1
 8005f22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8005f24:	79b9      	ldrb	r1, [r7, #6]
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fb74 	bl	8006618 <USER_SPI_ioctl>
 8005f30:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005f44:	f7fd f908 	bl	8003158 <HAL_GetTick>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4a04      	ldr	r2, [pc, #16]	@ (8005f5c <SPI_Timer_On+0x20>)
 8005f4c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005f4e:	4a04      	ldr	r2, [pc, #16]	@ (8005f60 <SPI_Timer_On+0x24>)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20000ec8 	.word	0x20000ec8
 8005f60:	20000ecc 	.word	0x20000ecc

08005f64 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005f68:	f7fd f8f6 	bl	8003158 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <SPI_Timer_Status+0x24>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <SPI_Timer_Status+0x28>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	bf34      	ite	cc
 8005f7c:	2301      	movcc	r3, #1
 8005f7e:	2300      	movcs	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000ec8 	.word	0x20000ec8
 8005f8c:	20000ecc 	.word	0x20000ecc

08005f90 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005f9a:	f107 020f 	add.w	r2, r7, #15
 8005f9e:	1df9      	adds	r1, r7, #7
 8005fa0:	2332      	movs	r3, #50	@ 0x32
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4804      	ldr	r0, [pc, #16]	@ (8005fb8 <xchg_spi+0x28>)
 8005fa8:	f7fe fb25 	bl	80045f6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000ce4 	.word	0x20000ce4

08005fbc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e00a      	b.n	8005fe2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	18d4      	adds	r4, r2, r3
 8005fd2:	20ff      	movs	r0, #255	@ 0xff
 8005fd4:	f7ff ffdc 	bl	8005f90 <xchg_spi>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d3f0      	bcc.n	8005fcc <rcvr_spi_multi+0x10>
	}
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd90      	pop	{r4, r7, pc}

08005ff4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	b29a      	uxth	r2, r3
 8006002:	f04f 33ff 	mov.w	r3, #4294967295
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4803      	ldr	r0, [pc, #12]	@ (8006018 <xmit_spi_multi+0x24>)
 800600a:	f7fe f9b0 	bl	800436e <HAL_SPI_Transmit>
}
 800600e:	bf00      	nop
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20000ce4 	.word	0x20000ce4

0800601c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006024:	f7fd f898 	bl	8003158 <HAL_GetTick>
 8006028:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800602e:	20ff      	movs	r0, #255	@ 0xff
 8006030:	f7ff ffae 	bl	8005f90 <xchg_spi>
 8006034:	4603      	mov	r3, r0
 8006036:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	2bff      	cmp	r3, #255	@ 0xff
 800603c:	d007      	beq.n	800604e <wait_ready+0x32>
 800603e:	f7fd f88b 	bl	8003158 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	d8ef      	bhi.n	800602e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	2bff      	cmp	r3, #255	@ 0xff
 8006052:	bf0c      	ite	eq
 8006054:	2301      	moveq	r3, #1
 8006056:	2300      	movne	r3, #0
 8006058:	b2db      	uxtb	r3, r3
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006068:	2201      	movs	r2, #1
 800606a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800606e:	4804      	ldr	r0, [pc, #16]	@ (8006080 <despiselect+0x1c>)
 8006070:	f7fd fb60 	bl	8003734 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006074:	20ff      	movs	r0, #255	@ 0xff
 8006076:	f7ff ff8b 	bl	8005f90 <xchg_spi>

}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40020000 	.word	0x40020000

08006084 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006088:	2200      	movs	r2, #0
 800608a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800608e:	480a      	ldr	r0, [pc, #40]	@ (80060b8 <spiselect+0x34>)
 8006090:	f7fd fb50 	bl	8003734 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006094:	20ff      	movs	r0, #255	@ 0xff
 8006096:	f7ff ff7b 	bl	8005f90 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800609a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800609e:	f7ff ffbd 	bl	800601c <wait_ready>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <spiselect+0x28>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e002      	b.n	80060b2 <spiselect+0x2e>

	despiselect();
 80060ac:	f7ff ffda 	bl	8006064 <despiselect>
	return 0;	/* Timeout */
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40020000 	.word	0x40020000

080060bc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80060c6:	20c8      	movs	r0, #200	@ 0xc8
 80060c8:	f7ff ff38 	bl	8005f3c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80060cc:	20ff      	movs	r0, #255	@ 0xff
 80060ce:	f7ff ff5f 	bl	8005f90 <xchg_spi>
 80060d2:	4603      	mov	r3, r0
 80060d4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	2bff      	cmp	r3, #255	@ 0xff
 80060da:	d104      	bne.n	80060e6 <rcvr_datablock+0x2a>
 80060dc:	f7ff ff42 	bl	8005f64 <SPI_Timer_Status>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f2      	bne.n	80060cc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80060ea:	d001      	beq.n	80060f0 <rcvr_datablock+0x34>
 80060ec:	2300      	movs	r3, #0
 80060ee:	e00a      	b.n	8006106 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff ff62 	bl	8005fbc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80060f8:	20ff      	movs	r0, #255	@ 0xff
 80060fa:	f7ff ff49 	bl	8005f90 <xchg_spi>
 80060fe:	20ff      	movs	r0, #255	@ 0xff
 8006100:	f7ff ff46 	bl	8005f90 <xchg_spi>

	return 1;						/* Function succeeded */
 8006104:	2301      	movs	r3, #1
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800611a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800611e:	f7ff ff7d 	bl	800601c <wait_ready>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <xmit_datablock+0x1e>
 8006128:	2300      	movs	r3, #0
 800612a:	e01e      	b.n	800616a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff ff2e 	bl	8005f90 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	2bfd      	cmp	r3, #253	@ 0xfd
 8006138:	d016      	beq.n	8006168 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800613a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff ff58 	bl	8005ff4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006144:	20ff      	movs	r0, #255	@ 0xff
 8006146:	f7ff ff23 	bl	8005f90 <xchg_spi>
 800614a:	20ff      	movs	r0, #255	@ 0xff
 800614c:	f7ff ff20 	bl	8005f90 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006150:	20ff      	movs	r0, #255	@ 0xff
 8006152:	f7ff ff1d 	bl	8005f90 <xchg_spi>
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2b05      	cmp	r3, #5
 8006162:	d001      	beq.n	8006168 <xmit_datablock+0x5a>
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <xmit_datablock+0x5c>
	}
	return 1;
 8006168:	2301      	movs	r3, #1
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	4603      	mov	r3, r0
 800617a:	6039      	str	r1, [r7, #0]
 800617c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800617e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006182:	2b00      	cmp	r3, #0
 8006184:	da0e      	bge.n	80061a4 <send_cmd+0x32>
		cmd &= 0x7F;
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800618c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800618e:	2100      	movs	r1, #0
 8006190:	2037      	movs	r0, #55	@ 0x37
 8006192:	f7ff ffee 	bl	8006172 <send_cmd>
 8006196:	4603      	mov	r3, r0
 8006198:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d901      	bls.n	80061a4 <send_cmd+0x32>
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	e051      	b.n	8006248 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	2b0c      	cmp	r3, #12
 80061a8:	d008      	beq.n	80061bc <send_cmd+0x4a>
		despiselect();
 80061aa:	f7ff ff5b 	bl	8006064 <despiselect>
		if (!spiselect()) return 0xFF;
 80061ae:	f7ff ff69 	bl	8006084 <spiselect>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <send_cmd+0x4a>
 80061b8:	23ff      	movs	r3, #255	@ 0xff
 80061ba:	e045      	b.n	8006248 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fee3 	bl	8005f90 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	0e1b      	lsrs	r3, r3, #24
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fedd 	bl	8005f90 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	0c1b      	lsrs	r3, r3, #16
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fed7 	bl	8005f90 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	0a1b      	lsrs	r3, r3, #8
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fed1 	bl	8005f90 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff fecc 	bl	8005f90 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <send_cmd+0x94>
 8006202:	2395      	movs	r3, #149	@ 0x95
 8006204:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d101      	bne.n	8006210 <send_cmd+0x9e>
 800620c:	2387      	movs	r3, #135	@ 0x87
 800620e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff febc 	bl	8005f90 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	2b0c      	cmp	r3, #12
 800621c:	d102      	bne.n	8006224 <send_cmd+0xb2>
 800621e:	20ff      	movs	r0, #255	@ 0xff
 8006220:	f7ff feb6 	bl	8005f90 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006224:	230a      	movs	r3, #10
 8006226:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006228:	20ff      	movs	r0, #255	@ 0xff
 800622a:	f7ff feb1 	bl	8005f90 <xchg_spi>
 800622e:	4603      	mov	r3, r0
 8006230:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006232:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006236:	2b00      	cmp	r3, #0
 8006238:	da05      	bge.n	8006246 <send_cmd+0xd4>
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	3b01      	subs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f0      	bne.n	8006228 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006246:	7bbb      	ldrb	r3, [r7, #14]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <USER_SPI_initialize+0x14>
 8006260:	2301      	movs	r3, #1
 8006262:	e0d6      	b.n	8006412 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006264:	4b6d      	ldr	r3, [pc, #436]	@ (800641c <USER_SPI_initialize+0x1cc>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <USER_SPI_initialize+0x2a>
 8006272:	4b6a      	ldr	r3, [pc, #424]	@ (800641c <USER_SPI_initialize+0x1cc>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	e0cb      	b.n	8006412 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800627a:	4b69      	ldr	r3, [pc, #420]	@ (8006420 <USER_SPI_initialize+0x1d0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006284:	4b66      	ldr	r3, [pc, #408]	@ (8006420 <USER_SPI_initialize+0x1d0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800628c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800628e:	230a      	movs	r3, #10
 8006290:	73fb      	strb	r3, [r7, #15]
 8006292:	e005      	b.n	80062a0 <USER_SPI_initialize+0x50>
 8006294:	20ff      	movs	r0, #255	@ 0xff
 8006296:	f7ff fe7b 	bl	8005f90 <xchg_spi>
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	3b01      	subs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f6      	bne.n	8006294 <USER_SPI_initialize+0x44>

	ty = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80062aa:	2100      	movs	r1, #0
 80062ac:	2000      	movs	r0, #0
 80062ae:	f7ff ff60 	bl	8006172 <send_cmd>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	f040 808b 	bne.w	80063d0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80062ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80062be:	f7ff fe3d 	bl	8005f3c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80062c2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80062c6:	2008      	movs	r0, #8
 80062c8:	f7ff ff53 	bl	8006172 <send_cmd>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d151      	bne.n	8006376 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
 80062d6:	e00d      	b.n	80062f4 <USER_SPI_initialize+0xa4>
 80062d8:	7bfc      	ldrb	r4, [r7, #15]
 80062da:	20ff      	movs	r0, #255	@ 0xff
 80062dc:	f7ff fe58 	bl	8005f90 <xchg_spi>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	f104 0310 	add.w	r3, r4, #16
 80062e8:	443b      	add	r3, r7
 80062ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	3301      	adds	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d9ee      	bls.n	80062d8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80062fa:	7abb      	ldrb	r3, [r7, #10]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d167      	bne.n	80063d0 <USER_SPI_initialize+0x180>
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	2baa      	cmp	r3, #170	@ 0xaa
 8006304:	d164      	bne.n	80063d0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006306:	bf00      	nop
 8006308:	f7ff fe2c 	bl	8005f64 <SPI_Timer_Status>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <USER_SPI_initialize+0xd2>
 8006312:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006316:	20a9      	movs	r0, #169	@ 0xa9
 8006318:	f7ff ff2b 	bl	8006172 <send_cmd>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f2      	bne.n	8006308 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006322:	f7ff fe1f 	bl	8005f64 <SPI_Timer_Status>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d051      	beq.n	80063d0 <USER_SPI_initialize+0x180>
 800632c:	2100      	movs	r1, #0
 800632e:	203a      	movs	r0, #58	@ 0x3a
 8006330:	f7ff ff1f 	bl	8006172 <send_cmd>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d14a      	bne.n	80063d0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
 800633e:	e00d      	b.n	800635c <USER_SPI_initialize+0x10c>
 8006340:	7bfc      	ldrb	r4, [r7, #15]
 8006342:	20ff      	movs	r0, #255	@ 0xff
 8006344:	f7ff fe24 	bl	8005f90 <xchg_spi>
 8006348:	4603      	mov	r3, r0
 800634a:	461a      	mov	r2, r3
 800634c:	f104 0310 	add.w	r3, r4, #16
 8006350:	443b      	add	r3, r7
 8006352:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	3301      	adds	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b03      	cmp	r3, #3
 8006360:	d9ee      	bls.n	8006340 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006362:	7a3b      	ldrb	r3, [r7, #8]
 8006364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <USER_SPI_initialize+0x120>
 800636c:	230c      	movs	r3, #12
 800636e:	e000      	b.n	8006372 <USER_SPI_initialize+0x122>
 8006370:	2304      	movs	r3, #4
 8006372:	737b      	strb	r3, [r7, #13]
 8006374:	e02c      	b.n	80063d0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006376:	2100      	movs	r1, #0
 8006378:	20a9      	movs	r0, #169	@ 0xa9
 800637a:	f7ff fefa 	bl	8006172 <send_cmd>
 800637e:	4603      	mov	r3, r0
 8006380:	2b01      	cmp	r3, #1
 8006382:	d804      	bhi.n	800638e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006384:	2302      	movs	r3, #2
 8006386:	737b      	strb	r3, [r7, #13]
 8006388:	23a9      	movs	r3, #169	@ 0xa9
 800638a:	73bb      	strb	r3, [r7, #14]
 800638c:	e003      	b.n	8006396 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800638e:	2301      	movs	r3, #1
 8006390:	737b      	strb	r3, [r7, #13]
 8006392:	2301      	movs	r3, #1
 8006394:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006396:	bf00      	nop
 8006398:	f7ff fde4 	bl	8005f64 <SPI_Timer_Status>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <USER_SPI_initialize+0x162>
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fee3 	bl	8006172 <send_cmd>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f2      	bne.n	8006398 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80063b2:	f7ff fdd7 	bl	8005f64 <SPI_Timer_Status>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <USER_SPI_initialize+0x17c>
 80063bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80063c0:	2010      	movs	r0, #16
 80063c2:	f7ff fed6 	bl	8006172 <send_cmd>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <USER_SPI_initialize+0x180>
				ty = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80063d0:	4a14      	ldr	r2, [pc, #80]	@ (8006424 <USER_SPI_initialize+0x1d4>)
 80063d2:	7b7b      	ldrb	r3, [r7, #13]
 80063d4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80063d6:	f7ff fe45 	bl	8006064 <despiselect>

	if (ty) {			/* OK */
 80063da:	7b7b      	ldrb	r3, [r7, #13]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d012      	beq.n	8006406 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80063e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006420 <USER_SPI_initialize+0x1d0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <USER_SPI_initialize+0x1d0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0210 	orr.w	r2, r2, #16
 80063f2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80063f4:	4b09      	ldr	r3, [pc, #36]	@ (800641c <USER_SPI_initialize+0x1cc>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	4b06      	ldr	r3, [pc, #24]	@ (800641c <USER_SPI_initialize+0x1cc>)
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e002      	b.n	800640c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006406:	4b05      	ldr	r3, [pc, #20]	@ (800641c <USER_SPI_initialize+0x1cc>)
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800640c:	4b03      	ldr	r3, [pc, #12]	@ (800641c <USER_SPI_initialize+0x1cc>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	b2db      	uxtb	r3, r3
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bd90      	pop	{r4, r7, pc}
 800641a:	bf00      	nop
 800641c:	20000030 	.word	0x20000030
 8006420:	20000ce4 	.word	0x20000ce4
 8006424:	20000ec4 	.word	0x20000ec4

08006428 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <USER_SPI_status+0x14>
 8006438:	2301      	movs	r3, #1
 800643a:	e002      	b.n	8006442 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800643c:	4b04      	ldr	r3, [pc, #16]	@ (8006450 <USER_SPI_status+0x28>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b2db      	uxtb	r3, r3
}
 8006442:	4618      	mov	r0, r3
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000030 	.word	0x20000030

08006454 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <USER_SPI_read+0x1c>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <USER_SPI_read+0x20>
 8006470:	2304      	movs	r3, #4
 8006472:	e04d      	b.n	8006510 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006474:	4b28      	ldr	r3, [pc, #160]	@ (8006518 <USER_SPI_read+0xc4>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <USER_SPI_read+0x32>
 8006482:	2303      	movs	r3, #3
 8006484:	e044      	b.n	8006510 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006486:	4b25      	ldr	r3, [pc, #148]	@ (800651c <USER_SPI_read+0xc8>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d102      	bne.n	8006498 <USER_SPI_read+0x44>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	025b      	lsls	r3, r3, #9
 8006496:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d111      	bne.n	80064c2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	2011      	movs	r0, #17
 80064a2:	f7ff fe66 	bl	8006172 <send_cmd>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d129      	bne.n	8006500 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80064ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80064b0:	68b8      	ldr	r0, [r7, #8]
 80064b2:	f7ff fe03 	bl	80060bc <rcvr_datablock>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d021      	beq.n	8006500 <USER_SPI_read+0xac>
			count = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	e01e      	b.n	8006500 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	2012      	movs	r0, #18
 80064c6:	f7ff fe54 	bl	8006172 <send_cmd>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d117      	bne.n	8006500 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80064d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80064d4:	68b8      	ldr	r0, [r7, #8]
 80064d6:	f7ff fdf1 	bl	80060bc <rcvr_datablock>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <USER_SPI_read+0xa2>
				buff += 512;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80064e6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	603b      	str	r3, [r7, #0]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1ed      	bne.n	80064d0 <USER_SPI_read+0x7c>
 80064f4:	e000      	b.n	80064f8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80064f6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80064f8:	2100      	movs	r1, #0
 80064fa:	200c      	movs	r0, #12
 80064fc:	f7ff fe39 	bl	8006172 <send_cmd>
		}
	}
	despiselect();
 8006500:	f7ff fdb0 	bl	8006064 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	bf14      	ite	ne
 800650a:	2301      	movne	r3, #1
 800650c:	2300      	moveq	r3, #0
 800650e:	b2db      	uxtb	r3, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000030 	.word	0x20000030
 800651c:	20000ec4 	.word	0x20000ec4

08006520 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d102      	bne.n	800653c <USER_SPI_write+0x1c>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <USER_SPI_write+0x20>
 800653c:	2304      	movs	r3, #4
 800653e:	e063      	b.n	8006608 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006540:	4b33      	ldr	r3, [pc, #204]	@ (8006610 <USER_SPI_write+0xf0>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <USER_SPI_write+0x32>
 800654e:	2303      	movs	r3, #3
 8006550:	e05a      	b.n	8006608 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006552:	4b2f      	ldr	r3, [pc, #188]	@ (8006610 <USER_SPI_write+0xf0>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <USER_SPI_write+0x44>
 8006560:	2302      	movs	r3, #2
 8006562:	e051      	b.n	8006608 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006564:	4b2b      	ldr	r3, [pc, #172]	@ (8006614 <USER_SPI_write+0xf4>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d102      	bne.n	8006576 <USER_SPI_write+0x56>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	025b      	lsls	r3, r3, #9
 8006574:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d110      	bne.n	800659e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	2018      	movs	r0, #24
 8006580:	f7ff fdf7 	bl	8006172 <send_cmd>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d136      	bne.n	80065f8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800658a:	21fe      	movs	r1, #254	@ 0xfe
 800658c:	68b8      	ldr	r0, [r7, #8]
 800658e:	f7ff fdbe 	bl	800610e <xmit_datablock>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d02f      	beq.n	80065f8 <USER_SPI_write+0xd8>
			count = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	e02c      	b.n	80065f8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800659e:	4b1d      	ldr	r3, [pc, #116]	@ (8006614 <USER_SPI_write+0xf4>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	f003 0306 	and.w	r3, r3, #6
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <USER_SPI_write+0x92>
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	2097      	movs	r0, #151	@ 0x97
 80065ae:	f7ff fde0 	bl	8006172 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	2019      	movs	r0, #25
 80065b6:	f7ff fddc 	bl	8006172 <send_cmd>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11b      	bne.n	80065f8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80065c0:	21fc      	movs	r1, #252	@ 0xfc
 80065c2:	68b8      	ldr	r0, [r7, #8]
 80065c4:	f7ff fda3 	bl	800610e <xmit_datablock>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <USER_SPI_write+0xc4>
				buff += 512;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80065d4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	3b01      	subs	r3, #1
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1ee      	bne.n	80065c0 <USER_SPI_write+0xa0>
 80065e2:	e000      	b.n	80065e6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80065e4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80065e6:	21fd      	movs	r1, #253	@ 0xfd
 80065e8:	2000      	movs	r0, #0
 80065ea:	f7ff fd90 	bl	800610e <xmit_datablock>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <USER_SPI_write+0xd8>
 80065f4:	2301      	movs	r3, #1
 80065f6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80065f8:	f7ff fd34 	bl	8006064 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bf14      	ite	ne
 8006602:	2301      	movne	r3, #1
 8006604:	2300      	moveq	r3, #0
 8006606:	b2db      	uxtb	r3, r3
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000030 	.word	0x20000030
 8006614:	20000ec4 	.word	0x20000ec4

08006618 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08c      	sub	sp, #48	@ 0x30
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	603a      	str	r2, [r7, #0]
 8006622:	71fb      	strb	r3, [r7, #7]
 8006624:	460b      	mov	r3, r1
 8006626:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <USER_SPI_ioctl+0x1a>
 800662e:	2304      	movs	r3, #4
 8006630:	e15a      	b.n	80068e8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006632:	4baf      	ldr	r3, [pc, #700]	@ (80068f0 <USER_SPI_ioctl+0x2d8>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <USER_SPI_ioctl+0x2c>
 8006640:	2303      	movs	r3, #3
 8006642:	e151      	b.n	80068e8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800664a:	79bb      	ldrb	r3, [r7, #6]
 800664c:	2b04      	cmp	r3, #4
 800664e:	f200 8136 	bhi.w	80068be <USER_SPI_ioctl+0x2a6>
 8006652:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <USER_SPI_ioctl+0x40>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	0800666d 	.word	0x0800666d
 800665c:	08006681 	.word	0x08006681
 8006660:	080068bf 	.word	0x080068bf
 8006664:	0800672d 	.word	0x0800672d
 8006668:	08006823 	.word	0x08006823
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800666c:	f7ff fd0a 	bl	8006084 <spiselect>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 8127 	beq.w	80068c6 <USER_SPI_ioctl+0x2ae>
 8006678:	2300      	movs	r3, #0
 800667a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800667e:	e122      	b.n	80068c6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006680:	2100      	movs	r1, #0
 8006682:	2009      	movs	r0, #9
 8006684:	f7ff fd75 	bl	8006172 <send_cmd>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 811d 	bne.w	80068ca <USER_SPI_ioctl+0x2b2>
 8006690:	f107 030c 	add.w	r3, r7, #12
 8006694:	2110      	movs	r1, #16
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fd10 	bl	80060bc <rcvr_datablock>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 8113 	beq.w	80068ca <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80066a4:	7b3b      	ldrb	r3, [r7, #12]
 80066a6:	099b      	lsrs	r3, r3, #6
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d111      	bne.n	80066d2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80066ae:	7d7b      	ldrb	r3, [r7, #21]
 80066b0:	461a      	mov	r2, r3
 80066b2:	7d3b      	ldrb	r3, [r7, #20]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	4413      	add	r3, r2
 80066b8:	461a      	mov	r2, r3
 80066ba:	7cfb      	ldrb	r3, [r7, #19]
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80066c2:	4413      	add	r3, r2
 80066c4:	3301      	adds	r3, #1
 80066c6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	029a      	lsls	r2, r3, #10
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	e028      	b.n	8006724 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80066d2:	7c7b      	ldrb	r3, [r7, #17]
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	7dbb      	ldrb	r3, [r7, #22]
 80066dc:	09db      	lsrs	r3, r3, #7
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	4413      	add	r3, r2
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	7d7b      	ldrb	r3, [r7, #21]
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	f003 0306 	and.w	r3, r3, #6
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	4413      	add	r3, r2
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	3302      	adds	r3, #2
 80066f6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80066fa:	7d3b      	ldrb	r3, [r7, #20]
 80066fc:	099b      	lsrs	r3, r3, #6
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	441a      	add	r2, r3
 8006708:	7cbb      	ldrb	r3, [r7, #18]
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006710:	4413      	add	r3, r2
 8006712:	3301      	adds	r3, #1
 8006714:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006716:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800671a:	3b09      	subs	r3, #9
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	409a      	lsls	r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800672a:	e0ce      	b.n	80068ca <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800672c:	4b71      	ldr	r3, [pc, #452]	@ (80068f4 <USER_SPI_ioctl+0x2dc>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d031      	beq.n	800679c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006738:	2100      	movs	r1, #0
 800673a:	208d      	movs	r0, #141	@ 0x8d
 800673c:	f7ff fd19 	bl	8006172 <send_cmd>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f040 80c3 	bne.w	80068ce <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006748:	20ff      	movs	r0, #255	@ 0xff
 800674a:	f7ff fc21 	bl	8005f90 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800674e:	f107 030c 	add.w	r3, r7, #12
 8006752:	2110      	movs	r1, #16
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fcb1 	bl	80060bc <rcvr_datablock>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80b6 	beq.w	80068ce <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006762:	2330      	movs	r3, #48	@ 0x30
 8006764:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006768:	e007      	b.n	800677a <USER_SPI_ioctl+0x162>
 800676a:	20ff      	movs	r0, #255	@ 0xff
 800676c:	f7ff fc10 	bl	8005f90 <xchg_spi>
 8006770:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006774:	3b01      	subs	r3, #1
 8006776:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800677a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f3      	bne.n	800676a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006782:	7dbb      	ldrb	r3, [r7, #22]
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	b2db      	uxtb	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	2310      	movs	r3, #16
 800678c:	fa03 f202 	lsl.w	r2, r3, r2
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800679a:	e098      	b.n	80068ce <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800679c:	2100      	movs	r1, #0
 800679e:	2009      	movs	r0, #9
 80067a0:	f7ff fce7 	bl	8006172 <send_cmd>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f040 8091 	bne.w	80068ce <USER_SPI_ioctl+0x2b6>
 80067ac:	f107 030c 	add.w	r3, r7, #12
 80067b0:	2110      	movs	r1, #16
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fc82 	bl	80060bc <rcvr_datablock>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 8087 	beq.w	80068ce <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80067c0:	4b4c      	ldr	r3, [pc, #304]	@ (80068f4 <USER_SPI_ioctl+0x2dc>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d012      	beq.n	80067f2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80067cc:	7dbb      	ldrb	r3, [r7, #22]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80067d4:	7dfa      	ldrb	r2, [r7, #23]
 80067d6:	09d2      	lsrs	r2, r2, #7
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	4413      	add	r3, r2
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	7e7b      	ldrb	r3, [r7, #25]
 80067e0:	099b      	lsrs	r3, r3, #6
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	e013      	b.n	800681a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80067f2:	7dbb      	ldrb	r3, [r7, #22]
 80067f4:	109b      	asrs	r3, r3, #2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	3301      	adds	r3, #1
 80067fe:	7dfa      	ldrb	r2, [r7, #23]
 8006800:	00d2      	lsls	r2, r2, #3
 8006802:	f002 0218 	and.w	r2, r2, #24
 8006806:	7df9      	ldrb	r1, [r7, #23]
 8006808:	0949      	lsrs	r1, r1, #5
 800680a:	b2c9      	uxtb	r1, r1
 800680c:	440a      	add	r2, r1
 800680e:	3201      	adds	r2, #1
 8006810:	fb02 f303 	mul.w	r3, r2, r3
 8006814:	461a      	mov	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006820:	e055      	b.n	80068ce <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006822:	4b34      	ldr	r3, [pc, #208]	@ (80068f4 <USER_SPI_ioctl+0x2dc>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	f003 0306 	and.w	r3, r3, #6
 800682a:	2b00      	cmp	r3, #0
 800682c:	d051      	beq.n	80068d2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800682e:	f107 020c 	add.w	r2, r7, #12
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	210b      	movs	r1, #11
 8006836:	4618      	mov	r0, r3
 8006838:	f7ff feee 	bl	8006618 <USER_SPI_ioctl>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d149      	bne.n	80068d6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006842:	7b3b      	ldrb	r3, [r7, #12]
 8006844:	099b      	lsrs	r3, r3, #6
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <USER_SPI_ioctl+0x23e>
 800684c:	7dbb      	ldrb	r3, [r7, #22]
 800684e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d041      	beq.n	80068da <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006866:	4b23      	ldr	r3, [pc, #140]	@ (80068f4 <USER_SPI_ioctl+0x2dc>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006874:	025b      	lsls	r3, r3, #9
 8006876:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	025b      	lsls	r3, r3, #9
 800687c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800687e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006880:	2020      	movs	r0, #32
 8006882:	f7ff fc76 	bl	8006172 <send_cmd>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d128      	bne.n	80068de <USER_SPI_ioctl+0x2c6>
 800688c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800688e:	2021      	movs	r0, #33	@ 0x21
 8006890:	f7ff fc6f 	bl	8006172 <send_cmd>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d121      	bne.n	80068de <USER_SPI_ioctl+0x2c6>
 800689a:	2100      	movs	r1, #0
 800689c:	2026      	movs	r0, #38	@ 0x26
 800689e:	f7ff fc68 	bl	8006172 <send_cmd>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11a      	bne.n	80068de <USER_SPI_ioctl+0x2c6>
 80068a8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80068ac:	f7ff fbb6 	bl	800601c <wait_ready>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d013      	beq.n	80068de <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80068b6:	2300      	movs	r3, #0
 80068b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80068bc:	e00f      	b.n	80068de <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80068be:	2304      	movs	r3, #4
 80068c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80068c4:	e00c      	b.n	80068e0 <USER_SPI_ioctl+0x2c8>
		break;
 80068c6:	bf00      	nop
 80068c8:	e00a      	b.n	80068e0 <USER_SPI_ioctl+0x2c8>
		break;
 80068ca:	bf00      	nop
 80068cc:	e008      	b.n	80068e0 <USER_SPI_ioctl+0x2c8>
		break;
 80068ce:	bf00      	nop
 80068d0:	e006      	b.n	80068e0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80068d2:	bf00      	nop
 80068d4:	e004      	b.n	80068e0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80068d6:	bf00      	nop
 80068d8:	e002      	b.n	80068e0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <USER_SPI_ioctl+0x2c8>
		break;
 80068de:	bf00      	nop
	}

	despiselect();
 80068e0:	f7ff fbc0 	bl	8006064 <despiselect>

	return res;
 80068e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3730      	adds	r7, #48	@ 0x30
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000030 	.word	0x20000030
 80068f4:	20000ec4 	.word	0x20000ec4

080068f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	4a08      	ldr	r2, [pc, #32]	@ (8006928 <disk_status+0x30>)
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	79fa      	ldrb	r2, [r7, #7]
 8006910:	4905      	ldr	r1, [pc, #20]	@ (8006928 <disk_status+0x30>)
 8006912:	440a      	add	r2, r1
 8006914:	7a12      	ldrb	r2, [r2, #8]
 8006916:	4610      	mov	r0, r2
 8006918:	4798      	blx	r3
 800691a:	4603      	mov	r3, r0
 800691c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20000ef8 	.word	0x20000ef8

0800692c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	4a0e      	ldr	r2, [pc, #56]	@ (8006978 <disk_initialize+0x4c>)
 800693e:	5cd3      	ldrb	r3, [r2, r3]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d114      	bne.n	800696e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	4a0c      	ldr	r2, [pc, #48]	@ (8006978 <disk_initialize+0x4c>)
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	79fa      	ldrb	r2, [r7, #7]
 8006952:	4909      	ldr	r1, [pc, #36]	@ (8006978 <disk_initialize+0x4c>)
 8006954:	440a      	add	r2, r1
 8006956:	7a12      	ldrb	r2, [r2, #8]
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d103      	bne.n	800696e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	4a03      	ldr	r2, [pc, #12]	@ (8006978 <disk_initialize+0x4c>)
 800696a:	2101      	movs	r1, #1
 800696c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000ef8 	.word	0x20000ef8

0800697c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800697c:	b590      	push	{r4, r7, lr}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	4a0a      	ldr	r2, [pc, #40]	@ (80069b8 <disk_read+0x3c>)
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	689c      	ldr	r4, [r3, #8]
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	4a07      	ldr	r2, [pc, #28]	@ (80069b8 <disk_read+0x3c>)
 800699c:	4413      	add	r3, r2
 800699e:	7a18      	ldrb	r0, [r3, #8]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	47a0      	blx	r4
 80069a8:	4603      	mov	r3, r0
 80069aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd90      	pop	{r4, r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000ef8 	.word	0x20000ef8

080069bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80069bc:	b590      	push	{r4, r7, lr}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	607a      	str	r2, [r7, #4]
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	4603      	mov	r3, r0
 80069ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	4a0a      	ldr	r2, [pc, #40]	@ (80069f8 <disk_write+0x3c>)
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	68dc      	ldr	r4, [r3, #12]
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	4a07      	ldr	r2, [pc, #28]	@ (80069f8 <disk_write+0x3c>)
 80069dc:	4413      	add	r3, r2
 80069de:	7a18      	ldrb	r0, [r3, #8]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	47a0      	blx	r4
 80069e8:	4603      	mov	r3, r0
 80069ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd90      	pop	{r4, r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000ef8 	.word	0x20000ef8

080069fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	603a      	str	r2, [r7, #0]
 8006a06:	71fb      	strb	r3, [r7, #7]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	4a09      	ldr	r2, [pc, #36]	@ (8006a34 <disk_ioctl+0x38>)
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	79fa      	ldrb	r2, [r7, #7]
 8006a1a:	4906      	ldr	r1, [pc, #24]	@ (8006a34 <disk_ioctl+0x38>)
 8006a1c:	440a      	add	r2, r1
 8006a1e:	7a10      	ldrb	r0, [r2, #8]
 8006a20:	79b9      	ldrb	r1, [r7, #6]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	4798      	blx	r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	73fb      	strb	r3, [r7, #15]
  return res;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20000ef8 	.word	0x20000ef8

08006a38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3301      	adds	r3, #1
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	b21a      	sxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3303      	adds	r3, #3
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	3202      	adds	r2, #2
 8006a82:	7812      	ldrb	r2, [r2, #0]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	3201      	adds	r2, #1
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	7812      	ldrb	r2, [r2, #0]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
	return rv;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	607a      	str	r2, [r7, #4]
 8006ac2:	887a      	ldrh	r2, [r7, #2]
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	887b      	ldrh	r3, [r7, #2]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	887a      	ldrh	r2, [r7, #2]
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	607a      	str	r2, [r7, #4]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	0a1b      	lsrs	r3, r3, #8
 8006b00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006b3e:	b480      	push	{r7}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00d      	beq.n	8006b74 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	1c53      	adds	r3, r2, #1
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	1c59      	adds	r1, r3, #1
 8006b62:	6179      	str	r1, [r7, #20]
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1f1      	bne.n	8006b58 <mem_cpy+0x1a>
	}
}
 8006b74:	bf00      	nop
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	617a      	str	r2, [r7, #20]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1f3      	bne.n	8006b90 <mem_set+0x10>
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006bb6:	b480      	push	{r7}
 8006bb8:	b089      	sub	sp, #36	@ 0x24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	61fa      	str	r2, [r7, #28]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	61ba      	str	r2, [r7, #24]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	1acb      	subs	r3, r1, r3
 8006be2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	607b      	str	r3, [r7, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <mem_cmp+0x40>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0eb      	beq.n	8006bce <mem_cmp+0x18>

	return r;
 8006bf6:	697b      	ldr	r3, [r7, #20]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3724      	adds	r7, #36	@ 0x24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006c0e:	e002      	b.n	8006c16 <chk_chr+0x12>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3301      	adds	r3, #1
 8006c14:	607b      	str	r3, [r7, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <chk_chr+0x26>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d1f2      	bne.n	8006c10 <chk_chr+0xc>
	return *str;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
	...

08006c3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c46:	2300      	movs	r3, #0
 8006c48:	60bb      	str	r3, [r7, #8]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e029      	b.n	8006ca4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006c50:	4a27      	ldr	r2, [pc, #156]	@ (8006cf0 <chk_lock+0xb4>)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	4413      	add	r3, r2
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01d      	beq.n	8006c9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c5e:	4a24      	ldr	r2, [pc, #144]	@ (8006cf0 <chk_lock+0xb4>)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	4413      	add	r3, r2
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d116      	bne.n	8006c9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006c70:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf0 <chk_lock+0xb4>)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	4413      	add	r3, r2
 8006c78:	3304      	adds	r3, #4
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d10c      	bne.n	8006c9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c84:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf0 <chk_lock+0xb4>)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	011b      	lsls	r3, r3, #4
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d102      	bne.n	8006c9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c98:	e007      	b.n	8006caa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d9d2      	bls.n	8006c50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d109      	bne.n	8006cc4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d102      	bne.n	8006cbc <chk_lock+0x80>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d101      	bne.n	8006cc0 <chk_lock+0x84>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e010      	b.n	8006ce2 <chk_lock+0xa6>
 8006cc0:	2312      	movs	r3, #18
 8006cc2:	e00e      	b.n	8006ce2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d108      	bne.n	8006cdc <chk_lock+0xa0>
 8006cca:	4a09      	ldr	r2, [pc, #36]	@ (8006cf0 <chk_lock+0xb4>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	4413      	add	r3, r2
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cda:	d101      	bne.n	8006ce0 <chk_lock+0xa4>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	e000      	b.n	8006ce2 <chk_lock+0xa6>
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000ed8 	.word	0x20000ed8

08006cf4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	e002      	b.n	8006d06 <enq_lock+0x12>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3301      	adds	r3, #1
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d806      	bhi.n	8006d1a <enq_lock+0x26>
 8006d0c:	4a09      	ldr	r2, [pc, #36]	@ (8006d34 <enq_lock+0x40>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	4413      	add	r3, r2
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f2      	bne.n	8006d00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	bf14      	ite	ne
 8006d20:	2301      	movne	r3, #1
 8006d22:	2300      	moveq	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	20000ed8 	.word	0x20000ed8

08006d38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	e01f      	b.n	8006d88 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006d48:	4a41      	ldr	r2, [pc, #260]	@ (8006e50 <inc_lock+0x118>)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	4413      	add	r3, r2
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d113      	bne.n	8006d82 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8006e50 <inc_lock+0x118>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	4413      	add	r3, r2
 8006d62:	3304      	adds	r3, #4
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d109      	bne.n	8006d82 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006d6e:	4a38      	ldr	r2, [pc, #224]	@ (8006e50 <inc_lock+0x118>)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	4413      	add	r3, r2
 8006d76:	3308      	adds	r3, #8
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d006      	beq.n	8006d90 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3301      	adds	r3, #1
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d9dc      	bls.n	8006d48 <inc_lock+0x10>
 8006d8e:	e000      	b.n	8006d92 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006d90:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d132      	bne.n	8006dfe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e002      	b.n	8006da4 <inc_lock+0x6c>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3301      	adds	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d806      	bhi.n	8006db8 <inc_lock+0x80>
 8006daa:	4a29      	ldr	r2, [pc, #164]	@ (8006e50 <inc_lock+0x118>)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	4413      	add	r3, r2
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f2      	bne.n	8006d9e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d101      	bne.n	8006dc2 <inc_lock+0x8a>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e040      	b.n	8006e44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4922      	ldr	r1, [pc, #136]	@ (8006e50 <inc_lock+0x118>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	440b      	add	r3, r1
 8006dce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	491e      	ldr	r1, [pc, #120]	@ (8006e50 <inc_lock+0x118>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	440b      	add	r3, r1
 8006ddc:	3304      	adds	r3, #4
 8006dde:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695a      	ldr	r2, [r3, #20]
 8006de4:	491a      	ldr	r1, [pc, #104]	@ (8006e50 <inc_lock+0x118>)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	440b      	add	r3, r1
 8006dec:	3308      	adds	r3, #8
 8006dee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006df0:	4a17      	ldr	r2, [pc, #92]	@ (8006e50 <inc_lock+0x118>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	4413      	add	r3, r2
 8006df8:	330c      	adds	r3, #12
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <inc_lock+0xe0>
 8006e04:	4a12      	ldr	r2, [pc, #72]	@ (8006e50 <inc_lock+0x118>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	4413      	add	r3, r2
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <inc_lock+0xe0>
 8006e14:	2300      	movs	r3, #0
 8006e16:	e015      	b.n	8006e44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <inc_lock+0xf8>
 8006e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e50 <inc_lock+0x118>)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	011b      	lsls	r3, r3, #4
 8006e24:	4413      	add	r3, r2
 8006e26:	330c      	adds	r3, #12
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	e001      	b.n	8006e34 <inc_lock+0xfc>
 8006e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e34:	4906      	ldr	r1, [pc, #24]	@ (8006e50 <inc_lock+0x118>)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	440b      	add	r3, r1
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	20000ed8 	.word	0x20000ed8

08006e54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	607b      	str	r3, [r7, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d825      	bhi.n	8006eb4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006e68:	4a17      	ldr	r2, [pc, #92]	@ (8006ec8 <dec_lock+0x74>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	4413      	add	r3, r2
 8006e70:	330c      	adds	r3, #12
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006e76:	89fb      	ldrh	r3, [r7, #14]
 8006e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e7c:	d101      	bne.n	8006e82 <dec_lock+0x2e>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006e82:	89fb      	ldrh	r3, [r7, #14]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <dec_lock+0x3a>
 8006e88:	89fb      	ldrh	r3, [r7, #14]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8006ec8 <dec_lock+0x74>)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	4413      	add	r3, r2
 8006e96:	330c      	adds	r3, #12
 8006e98:	89fa      	ldrh	r2, [r7, #14]
 8006e9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006e9c:	89fb      	ldrh	r3, [r7, #14]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <dec_lock+0x5a>
 8006ea2:	4a09      	ldr	r2, [pc, #36]	@ (8006ec8 <dec_lock+0x74>)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	4413      	add	r3, r2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	737b      	strb	r3, [r7, #13]
 8006eb2:	e001      	b.n	8006eb8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006eb8:	7b7b      	ldrb	r3, [r7, #13]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20000ed8 	.word	0x20000ed8

08006ecc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e010      	b.n	8006efc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006eda:	4a0d      	ldr	r2, [pc, #52]	@ (8006f10 <clear_lock+0x44>)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	4413      	add	r3, r2
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d105      	bne.n	8006ef6 <clear_lock+0x2a>
 8006eea:	4a09      	ldr	r2, [pc, #36]	@ (8006f10 <clear_lock+0x44>)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	4413      	add	r3, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d9eb      	bls.n	8006eda <clear_lock+0xe>
	}
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	20000ed8 	.word	0x20000ed8

08006f14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	78db      	ldrb	r3, [r3, #3]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d034      	beq.n	8006f92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7858      	ldrb	r0, [r3, #1]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f38:	2301      	movs	r3, #1
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	f7ff fd3e 	bl	80069bc <disk_write>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
 8006f4a:	e022      	b.n	8006f92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	1ad2      	subs	r2, r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d217      	bcs.n	8006f92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	789b      	ldrb	r3, [r3, #2]
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	e010      	b.n	8006f8c <sync_window+0x78>
					wsect += fs->fsize;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4413      	add	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7858      	ldrb	r0, [r3, #1]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f7e:	2301      	movs	r3, #1
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	f7ff fd1b 	bl	80069bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d8eb      	bhi.n	8006f6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d01b      	beq.n	8006fec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff ffad 	bl	8006f14 <sync_window>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d113      	bne.n	8006fec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7858      	ldrb	r0, [r3, #1]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006fce:	2301      	movs	r3, #1
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	f7ff fcd3 	bl	800697c <disk_read>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ff87 	bl	8006f14 <sync_window>
 8007006:	4603      	mov	r3, r0
 8007008:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d158      	bne.n	80070c2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b03      	cmp	r3, #3
 8007016:	d148      	bne.n	80070aa <sync_fs+0xb2>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	791b      	ldrb	r3, [r3, #4]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d144      	bne.n	80070aa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3330      	adds	r3, #48	@ 0x30
 8007024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fda8 	bl	8006b80 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3330      	adds	r3, #48	@ 0x30
 8007034:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007038:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff fd37 	bl	8006ab0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3330      	adds	r3, #48	@ 0x30
 8007046:	4921      	ldr	r1, [pc, #132]	@ (80070cc <sync_fs+0xd4>)
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff fd4c 	bl	8006ae6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3330      	adds	r3, #48	@ 0x30
 8007052:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007056:	491e      	ldr	r1, [pc, #120]	@ (80070d0 <sync_fs+0xd8>)
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fd44 	bl	8006ae6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3330      	adds	r3, #48	@ 0x30
 8007062:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f7ff fd3a 	bl	8006ae6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3330      	adds	r3, #48	@ 0x30
 8007076:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f7ff fd30 	bl	8006ae6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	7858      	ldrb	r0, [r3, #1]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709e:	2301      	movs	r3, #1
 80070a0:	f7ff fc8c 	bl	80069bc <disk_write>
			fs->fsi_flag = 0;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2200      	movs	r2, #0
 80070b0:	2100      	movs	r1, #0
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fca2 	bl	80069fc <disk_ioctl>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <sync_fs+0xca>
 80070be:	2301      	movs	r3, #1
 80070c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	41615252 	.word	0x41615252
 80070d0:	61417272 	.word	0x61417272

080070d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	3b02      	subs	r3, #2
 80070e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	3b02      	subs	r3, #2
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d301      	bcc.n	80070f4 <clust2sect+0x20>
 80070f0:	2300      	movs	r3, #0
 80070f2:	e008      	b.n	8007106 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	895b      	ldrh	r3, [r3, #10]
 80070f8:	461a      	mov	r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	fb03 f202 	mul.w	r2, r3, r2
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	4413      	add	r3, r2
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b086      	sub	sp, #24
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d904      	bls.n	8007132 <get_fat+0x20>
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007132:	2301      	movs	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	e08e      	b.n	8007256 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007138:	f04f 33ff 	mov.w	r3, #4294967295
 800713c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d061      	beq.n	800720a <get_fat+0xf8>
 8007146:	2b03      	cmp	r3, #3
 8007148:	dc7b      	bgt.n	8007242 <get_fat+0x130>
 800714a:	2b01      	cmp	r3, #1
 800714c:	d002      	beq.n	8007154 <get_fat+0x42>
 800714e:	2b02      	cmp	r3, #2
 8007150:	d041      	beq.n	80071d6 <get_fat+0xc4>
 8007152:	e076      	b.n	8007242 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	0a5b      	lsrs	r3, r3, #9
 800716a:	4413      	add	r3, r2
 800716c:	4619      	mov	r1, r3
 800716e:	6938      	ldr	r0, [r7, #16]
 8007170:	f7ff ff14 	bl	8006f9c <move_window>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d166      	bne.n	8007248 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	60fa      	str	r2, [r7, #12]
 8007180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4413      	add	r3, r2
 8007188:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800718c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6a1a      	ldr	r2, [r3, #32]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	0a5b      	lsrs	r3, r3, #9
 8007196:	4413      	add	r3, r2
 8007198:	4619      	mov	r1, r3
 800719a:	6938      	ldr	r0, [r7, #16]
 800719c:	f7ff fefe 	bl	8006f9c <move_window>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d152      	bne.n	800724c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4413      	add	r3, r2
 80071b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <get_fat+0xba>
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	091b      	lsrs	r3, r3, #4
 80071ca:	e002      	b.n	80071d2 <get_fat+0xc0>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d2:	617b      	str	r3, [r7, #20]
			break;
 80071d4:	e03f      	b.n	8007256 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	6a1a      	ldr	r2, [r3, #32]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	0a1b      	lsrs	r3, r3, #8
 80071de:	4413      	add	r3, r2
 80071e0:	4619      	mov	r1, r3
 80071e2:	6938      	ldr	r0, [r7, #16]
 80071e4:	f7ff feda 	bl	8006f9c <move_window>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d130      	bne.n	8007250 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80071fc:	4413      	add	r3, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff fc1a 	bl	8006a38 <ld_word>
 8007204:	4603      	mov	r3, r0
 8007206:	617b      	str	r3, [r7, #20]
			break;
 8007208:	e025      	b.n	8007256 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	6a1a      	ldr	r2, [r3, #32]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	09db      	lsrs	r3, r3, #7
 8007212:	4413      	add	r3, r2
 8007214:	4619      	mov	r1, r3
 8007216:	6938      	ldr	r0, [r7, #16]
 8007218:	f7ff fec0 	bl	8006f9c <move_window>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d118      	bne.n	8007254 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007230:	4413      	add	r3, r2
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fc19 	bl	8006a6a <ld_dword>
 8007238:	4603      	mov	r3, r0
 800723a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800723e:	617b      	str	r3, [r7, #20]
			break;
 8007240:	e009      	b.n	8007256 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007242:	2301      	movs	r3, #1
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e006      	b.n	8007256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007248:	bf00      	nop
 800724a:	e004      	b.n	8007256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800724c:	bf00      	nop
 800724e:	e002      	b.n	8007256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007250:	bf00      	nop
 8007252:	e000      	b.n	8007256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007254:	bf00      	nop
		}
	}

	return val;
 8007256:	697b      	ldr	r3, [r7, #20]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007260:	b590      	push	{r4, r7, lr}
 8007262:	b089      	sub	sp, #36	@ 0x24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800726c:	2302      	movs	r3, #2
 800726e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b01      	cmp	r3, #1
 8007274:	f240 80d9 	bls.w	800742a <put_fat+0x1ca>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	f080 80d3 	bcs.w	800742a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b03      	cmp	r3, #3
 800728a:	f000 8096 	beq.w	80073ba <put_fat+0x15a>
 800728e:	2b03      	cmp	r3, #3
 8007290:	f300 80cb 	bgt.w	800742a <put_fat+0x1ca>
 8007294:	2b01      	cmp	r3, #1
 8007296:	d002      	beq.n	800729e <put_fat+0x3e>
 8007298:	2b02      	cmp	r3, #2
 800729a:	d06e      	beq.n	800737a <put_fat+0x11a>
 800729c:	e0c5      	b.n	800742a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	61bb      	str	r3, [r7, #24]
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	085b      	lsrs	r3, r3, #1
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	4413      	add	r3, r2
 80072aa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a1a      	ldr	r2, [r3, #32]
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	0a5b      	lsrs	r3, r3, #9
 80072b4:	4413      	add	r3, r2
 80072b6:	4619      	mov	r1, r3
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f7ff fe6f 	bl	8006f9c <move_window>
 80072be:	4603      	mov	r3, r0
 80072c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072c2:	7ffb      	ldrb	r3, [r7, #31]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 80a9 	bne.w	800741c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	1c59      	adds	r1, r3, #1
 80072d4:	61b9      	str	r1, [r7, #24]
 80072d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072da:	4413      	add	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00d      	beq.n	8007304 <put_fat+0xa4>
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b25b      	sxtb	r3, r3
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	b25a      	sxtb	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	b25b      	sxtb	r3, r3
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	b25b      	sxtb	r3, r3
 80072fc:	4313      	orrs	r3, r2
 80072fe:	b25b      	sxtb	r3, r3
 8007300:	b2db      	uxtb	r3, r3
 8007302:	e001      	b.n	8007308 <put_fat+0xa8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a1a      	ldr	r2, [r3, #32]
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	0a5b      	lsrs	r3, r3, #9
 800731a:	4413      	add	r3, r2
 800731c:	4619      	mov	r1, r3
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff fe3c 	bl	8006f9c <move_window>
 8007324:	4603      	mov	r3, r0
 8007326:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007328:	7ffb      	ldrb	r3, [r7, #31]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d178      	bne.n	8007420 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733a:	4413      	add	r3, r2
 800733c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <put_fat+0xf0>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	091b      	lsrs	r3, r3, #4
 800734c:	b2db      	uxtb	r3, r3
 800734e:	e00e      	b.n	800736e <put_fat+0x10e>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	b25b      	sxtb	r3, r3
 8007356:	f023 030f 	bic.w	r3, r3, #15
 800735a:	b25a      	sxtb	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	b25b      	sxtb	r3, r3
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	b25b      	sxtb	r3, r3
 8007368:	4313      	orrs	r3, r2
 800736a:	b25b      	sxtb	r3, r3
 800736c:	b2db      	uxtb	r3, r3
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	70da      	strb	r2, [r3, #3]
			break;
 8007378:	e057      	b.n	800742a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a1a      	ldr	r2, [r3, #32]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	0a1b      	lsrs	r3, r3, #8
 8007382:	4413      	add	r3, r2
 8007384:	4619      	mov	r1, r3
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7ff fe08 	bl	8006f9c <move_window>
 800738c:	4603      	mov	r3, r0
 800738e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007390:	7ffb      	ldrb	r3, [r7, #31]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d146      	bne.n	8007424 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80073a4:	4413      	add	r3, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	b292      	uxth	r2, r2
 80073aa:	4611      	mov	r1, r2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff fb7f 	bl	8006ab0 <st_word>
			fs->wflag = 1;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	70da      	strb	r2, [r3, #3]
			break;
 80073b8:	e037      	b.n	800742a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	09db      	lsrs	r3, r3, #7
 80073c2:	4413      	add	r3, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f7ff fde8 	bl	8006f9c <move_window>
 80073cc:	4603      	mov	r3, r0
 80073ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073d0:	7ffb      	ldrb	r3, [r7, #31]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d128      	bne.n	8007428 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80073ea:	4413      	add	r3, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fb3c 	bl	8006a6a <ld_dword>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80073f8:	4323      	orrs	r3, r4
 80073fa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800740a:	4413      	add	r3, r2
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fb69 	bl	8006ae6 <st_dword>
			fs->wflag = 1;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	70da      	strb	r2, [r3, #3]
			break;
 800741a:	e006      	b.n	800742a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800741c:	bf00      	nop
 800741e:	e004      	b.n	800742a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007420:	bf00      	nop
 8007422:	e002      	b.n	800742a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007424:	bf00      	nop
 8007426:	e000      	b.n	800742a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007428:	bf00      	nop
		}
	}
	return res;
 800742a:	7ffb      	ldrb	r3, [r7, #31]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3724      	adds	r7, #36	@ 0x24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd90      	pop	{r4, r7, pc}

08007434 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d904      	bls.n	800745a <remove_chain+0x26>
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	429a      	cmp	r2, r3
 8007458:	d301      	bcc.n	800745e <remove_chain+0x2a>
 800745a:	2302      	movs	r3, #2
 800745c:	e04b      	b.n	80074f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007464:	f04f 32ff 	mov.w	r2, #4294967295
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	69b8      	ldr	r0, [r7, #24]
 800746c:	f7ff fef8 	bl	8007260 <put_fat>
 8007470:	4603      	mov	r3, r0
 8007472:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007474:	7ffb      	ldrb	r3, [r7, #31]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <remove_chain+0x4a>
 800747a:	7ffb      	ldrb	r3, [r7, #31]
 800747c:	e03b      	b.n	80074f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff fe46 	bl	8007112 <get_fat>
 8007486:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d031      	beq.n	80074f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <remove_chain+0x64>
 8007494:	2302      	movs	r3, #2
 8007496:	e02e      	b.n	80074f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749e:	d101      	bne.n	80074a4 <remove_chain+0x70>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e028      	b.n	80074f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80074a4:	2200      	movs	r2, #0
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	69b8      	ldr	r0, [r7, #24]
 80074aa:	f7ff fed9 	bl	8007260 <put_fat>
 80074ae:	4603      	mov	r3, r0
 80074b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80074b2:	7ffb      	ldrb	r3, [r7, #31]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <remove_chain+0x88>
 80074b8:	7ffb      	ldrb	r3, [r7, #31]
 80074ba:	e01c      	b.n	80074f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	3b02      	subs	r3, #2
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d20b      	bcs.n	80074e2 <remove_chain+0xae>
			fs->free_clst++;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	791b      	ldrb	r3, [r3, #4]
 80074d8:	f043 0301 	orr.w	r3, r3, #1
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d3c6      	bcc.n	800747e <remove_chain+0x4a>
 80074f0:	e000      	b.n	80074f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80074f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b088      	sub	sp, #32
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10d      	bne.n	8007530 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d004      	beq.n	800752a <create_chain+0x2c>
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	429a      	cmp	r2, r3
 8007528:	d31b      	bcc.n	8007562 <create_chain+0x64>
 800752a:	2301      	movs	r3, #1
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e018      	b.n	8007562 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff fded 	bl	8007112 <get_fat>
 8007538:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d801      	bhi.n	8007544 <create_chain+0x46>
 8007540:	2301      	movs	r3, #1
 8007542:	e070      	b.n	8007626 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754a:	d101      	bne.n	8007550 <create_chain+0x52>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	e06a      	b.n	8007626 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	429a      	cmp	r2, r3
 8007558:	d201      	bcs.n	800755e <create_chain+0x60>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	e063      	b.n	8007626 <create_chain+0x128>
		scl = clst;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	3301      	adds	r3, #1
 800756a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	429a      	cmp	r2, r3
 8007574:	d307      	bcc.n	8007586 <create_chain+0x88>
				ncl = 2;
 8007576:	2302      	movs	r3, #2
 8007578:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	429a      	cmp	r2, r3
 8007580:	d901      	bls.n	8007586 <create_chain+0x88>
 8007582:	2300      	movs	r3, #0
 8007584:	e04f      	b.n	8007626 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007586:	69f9      	ldr	r1, [r7, #28]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fdc2 	bl	8007112 <get_fat>
 800758e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00e      	beq.n	80075b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d003      	beq.n	80075a4 <create_chain+0xa6>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a2:	d101      	bne.n	80075a8 <create_chain+0xaa>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	e03e      	b.n	8007626 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d1da      	bne.n	8007566 <create_chain+0x68>
 80075b0:	2300      	movs	r3, #0
 80075b2:	e038      	b.n	8007626 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80075b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80075b6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ba:	69f9      	ldr	r1, [r7, #28]
 80075bc:	6938      	ldr	r0, [r7, #16]
 80075be:	f7ff fe4f 	bl	8007260 <put_fat>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d109      	bne.n	80075e0 <create_chain+0xe2>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d006      	beq.n	80075e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6938      	ldr	r0, [r7, #16]
 80075d8:	f7ff fe42 	bl	8007260 <put_fat>
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d116      	bne.n	8007614 <create_chain+0x116>
		fs->last_clst = ncl;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	3b02      	subs	r3, #2
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d804      	bhi.n	8007604 <create_chain+0x106>
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	1e5a      	subs	r2, r3, #1
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	791b      	ldrb	r3, [r3, #4]
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	b2da      	uxtb	r2, r3
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	711a      	strb	r2, [r3, #4]
 8007612:	e007      	b.n	8007624 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d102      	bne.n	8007620 <create_chain+0x122>
 800761a:	f04f 33ff 	mov.w	r3, #4294967295
 800761e:	e000      	b.n	8007622 <create_chain+0x124>
 8007620:	2301      	movs	r3, #1
 8007622:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007624:	69fb      	ldr	r3, [r7, #28]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3720      	adds	r7, #32
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800762e:	b480      	push	{r7}
 8007630:	b087      	sub	sp, #28
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007642:	3304      	adds	r3, #4
 8007644:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	0a5b      	lsrs	r3, r3, #9
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	8952      	ldrh	r2, [r2, #10]
 800764e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007652:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	1d1a      	adds	r2, r3, #4
 8007658:	613a      	str	r2, [r7, #16]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <clmt_clust+0x3a>
 8007664:	2300      	movs	r3, #0
 8007666:	e010      	b.n	800768a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	429a      	cmp	r2, r3
 800766e:	d307      	bcc.n	8007680 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3304      	adds	r3, #4
 800767c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800767e:	e7e9      	b.n	8007654 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007680:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	4413      	add	r3, r2
}
 800768a:	4618      	mov	r0, r3
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b086      	sub	sp, #24
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076ac:	d204      	bcs.n	80076b8 <dir_sdi+0x22>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <dir_sdi+0x26>
		return FR_INT_ERR;
 80076b8:	2302      	movs	r3, #2
 80076ba:	e063      	b.n	8007784 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <dir_sdi+0x46>
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d902      	bls.n	80076dc <dir_sdi+0x46>
		clst = fs->dirbase;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076da:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10c      	bne.n	80076fc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	8912      	ldrh	r2, [r2, #8]
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d301      	bcc.n	80076f2 <dir_sdi+0x5c>
 80076ee:	2302      	movs	r3, #2
 80076f0:	e048      	b.n	8007784 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	61da      	str	r2, [r3, #28]
 80076fa:	e029      	b.n	8007750 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	895b      	ldrh	r3, [r3, #10]
 8007700:	025b      	lsls	r3, r3, #9
 8007702:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007704:	e019      	b.n	800773a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6979      	ldr	r1, [r7, #20]
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fd01 	bl	8007112 <get_fat>
 8007710:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d101      	bne.n	800771e <dir_sdi+0x88>
 800771a:	2301      	movs	r3, #1
 800771c:	e032      	b.n	8007784 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d904      	bls.n	800772e <dir_sdi+0x98>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	429a      	cmp	r2, r3
 800772c:	d301      	bcc.n	8007732 <dir_sdi+0x9c>
 800772e:	2302      	movs	r3, #2
 8007730:	e028      	b.n	8007784 <dir_sdi+0xee>
			ofs -= csz;
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	429a      	cmp	r2, r3
 8007740:	d2e1      	bcs.n	8007706 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007742:	6979      	ldr	r1, [r7, #20]
 8007744:	6938      	ldr	r0, [r7, #16]
 8007746:	f7ff fcc5 	bl	80070d4 <clust2sect>
 800774a:	4602      	mov	r2, r0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <dir_sdi+0xcc>
 800775e:	2302      	movs	r3, #2
 8007760:	e010      	b.n	8007784 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69da      	ldr	r2, [r3, #28]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	0a5b      	lsrs	r3, r3, #9
 800776a:	441a      	add	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777c:	441a      	add	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	3320      	adds	r3, #32
 80077a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <dir_next+0x28>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077b2:	d301      	bcc.n	80077b8 <dir_next+0x2c>
 80077b4:	2304      	movs	r3, #4
 80077b6:	e0aa      	b.n	800790e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f040 8098 	bne.w	80078f4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10b      	bne.n	80077ee <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	095b      	lsrs	r3, r3, #5
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	8912      	ldrh	r2, [r2, #8]
 80077de:	4293      	cmp	r3, r2
 80077e0:	f0c0 8088 	bcc.w	80078f4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	61da      	str	r2, [r3, #28]
 80077ea:	2304      	movs	r3, #4
 80077ec:	e08f      	b.n	800790e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	0a5b      	lsrs	r3, r3, #9
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	8952      	ldrh	r2, [r2, #10]
 80077f6:	3a01      	subs	r2, #1
 80077f8:	4013      	ands	r3, r2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d17a      	bne.n	80078f4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7ff fc83 	bl	8007112 <get_fat>
 800780c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d801      	bhi.n	8007818 <dir_next+0x8c>
 8007814:	2302      	movs	r3, #2
 8007816:	e07a      	b.n	800790e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781e:	d101      	bne.n	8007824 <dir_next+0x98>
 8007820:	2301      	movs	r3, #1
 8007822:	e074      	b.n	800790e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	429a      	cmp	r2, r3
 800782c:	d358      	bcc.n	80078e0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d104      	bne.n	800783e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	61da      	str	r2, [r3, #28]
 800783a:	2304      	movs	r3, #4
 800783c:	e067      	b.n	800790e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7ff fe59 	bl	80074fe <create_chain>
 800784c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <dir_next+0xcc>
 8007854:	2307      	movs	r3, #7
 8007856:	e05a      	b.n	800790e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d101      	bne.n	8007862 <dir_next+0xd6>
 800785e:	2302      	movs	r3, #2
 8007860:	e055      	b.n	800790e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d101      	bne.n	800786e <dir_next+0xe2>
 800786a:	2301      	movs	r3, #1
 800786c:	e04f      	b.n	800790e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff fb50 	bl	8006f14 <sync_window>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <dir_next+0xf2>
 800787a:	2301      	movs	r3, #1
 800787c:	e047      	b.n	800790e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3330      	adds	r3, #48	@ 0x30
 8007882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007886:	2100      	movs	r1, #0
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff f979 	bl	8006b80 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	6979      	ldr	r1, [r7, #20]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff fc1d 	bl	80070d4 <clust2sect>
 800789a:	4602      	mov	r2, r0
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078a0:	e012      	b.n	80078c8 <dir_next+0x13c>
						fs->wflag = 1;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7ff fb33 	bl	8006f14 <sync_window>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <dir_next+0x12c>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e02a      	b.n	800790e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	3301      	adds	r3, #1
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	895b      	ldrh	r3, [r3, #10]
 80078cc:	461a      	mov	r2, r3
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d3e6      	bcc.n	80078a2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad2      	subs	r2, r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80078e6:	6979      	ldr	r1, [r7, #20]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7ff fbf3 	bl	80070d4 <clust2sect>
 80078ee:	4602      	mov	r2, r0
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007906:	441a      	add	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007926:	2100      	movs	r1, #0
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff feb4 	bl	8007696 <dir_sdi>
 800792e:	4603      	mov	r3, r0
 8007930:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d12b      	bne.n	8007990 <dir_alloc+0x7a>
		n = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	4619      	mov	r1, r3
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fb2a 	bl	8006f9c <move_window>
 8007948:	4603      	mov	r3, r0
 800794a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d11d      	bne.n	800798e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2be5      	cmp	r3, #229	@ 0xe5
 800795a:	d004      	beq.n	8007966 <dir_alloc+0x50>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d107      	bne.n	8007976 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	3301      	adds	r3, #1
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	429a      	cmp	r2, r3
 8007972:	d102      	bne.n	800797a <dir_alloc+0x64>
 8007974:	e00c      	b.n	8007990 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800797a:	2101      	movs	r1, #1
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff ff05 	bl	800778c <dir_next>
 8007982:	4603      	mov	r3, r0
 8007984:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0d7      	beq.n	800793c <dir_alloc+0x26>
 800798c:	e000      	b.n	8007990 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800798e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007990:	7dfb      	ldrb	r3, [r7, #23]
 8007992:	2b04      	cmp	r3, #4
 8007994:	d101      	bne.n	800799a <dir_alloc+0x84>
 8007996:	2307      	movs	r3, #7
 8007998:	75fb      	strb	r3, [r7, #23]
	return res;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	331a      	adds	r3, #26
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff f840 	bl	8006a38 <ld_word>
 80079b8:	4603      	mov	r3, r0
 80079ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d109      	bne.n	80079d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	3314      	adds	r3, #20
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff f835 	bl	8006a38 <ld_word>
 80079ce:	4603      	mov	r3, r0
 80079d0:	041b      	lsls	r3, r3, #16
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80079d8:	68fb      	ldr	r3, [r7, #12]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	331a      	adds	r3, #26
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	b292      	uxth	r2, r2
 80079f6:	4611      	mov	r1, r2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7ff f859 	bl	8006ab0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d109      	bne.n	8007a1a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f103 0214 	add.w	r2, r3, #20
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	0c1b      	lsrs	r3, r3, #16
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	4610      	mov	r0, r2
 8007a16:	f7ff f84b 	bl	8006ab0 <st_word>
	}
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007a36:	e03c      	b.n	8007ab2 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6938      	ldr	r0, [r7, #16]
 8007a40:	f7ff faac 	bl	8006f9c <move_window>
 8007a44:	4603      	mov	r3, r0
 8007a46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d136      	bne.n	8007abc <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	75fb      	strb	r3, [r7, #23]
 8007a60:	e031      	b.n	8007ac6 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	330b      	adds	r3, #11
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a6e:	73bb      	strb	r3, [r7, #14]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	7bba      	ldrb	r2, [r7, #14]
 8007a74:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2be5      	cmp	r3, #229	@ 0xe5
 8007a7a:	d011      	beq.n	8007aa0 <dir_read+0x7e>
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a80:	d00e      	beq.n	8007aa0 <dir_read+0x7e>
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b0f      	cmp	r3, #15
 8007a86:	d00b      	beq.n	8007aa0 <dir_read+0x7e>
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	f023 0320 	bic.w	r3, r3, #32
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	bf0c      	ite	eq
 8007a92:	2301      	moveq	r3, #1
 8007a94:	2300      	movne	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00f      	beq.n	8007ac0 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fe72 	bl	800778c <dir_next>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d108      	bne.n	8007ac4 <dir_read+0xa2>
	while (dp->sect) {
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1be      	bne.n	8007a38 <dir_read+0x16>
 8007aba:	e004      	b.n	8007ac6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007abc:	bf00      	nop
 8007abe:	e002      	b.n	8007ac6 <dir_read+0xa4>
				break;
 8007ac0:	bf00      	nop
 8007ac2:	e000      	b.n	8007ac6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007ac4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <dir_read+0xb0>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	61da      	str	r2, [r3, #28]
	return res;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007aea:	2100      	movs	r1, #0
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff fdd2 	bl	8007696 <dir_sdi>
 8007af2:	4603      	mov	r3, r0
 8007af4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <dir_find+0x24>
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	e03e      	b.n	8007b7e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	4619      	mov	r1, r3
 8007b06:	6938      	ldr	r0, [r7, #16]
 8007b08:	f7ff fa48 	bl	8006f9c <move_window>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d12f      	bne.n	8007b76 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <dir_find+0x4e>
 8007b24:	2304      	movs	r3, #4
 8007b26:	75fb      	strb	r3, [r7, #23]
 8007b28:	e028      	b.n	8007b7c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	330b      	adds	r3, #11
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	330b      	adds	r3, #11
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <dir_find+0x86>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a18      	ldr	r0, [r3, #32]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3324      	adds	r3, #36	@ 0x24
 8007b54:	220b      	movs	r2, #11
 8007b56:	4619      	mov	r1, r3
 8007b58:	f7ff f82d 	bl	8006bb6 <mem_cmp>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00b      	beq.n	8007b7a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b62:	2100      	movs	r1, #0
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff fe11 	bl	800778c <dir_next>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0c5      	beq.n	8007b00 <dir_find+0x24>
 8007b74:	e002      	b.n	8007b7c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007b76:	bf00      	nop
 8007b78:	e000      	b.n	8007b7c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b7a:	bf00      	nop

	return res;
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007b94:	2101      	movs	r1, #1
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff febd 	bl	8007916 <dir_alloc>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d11c      	bne.n	8007be0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	4619      	mov	r1, r3
 8007bac:	68b8      	ldr	r0, [r7, #8]
 8007bae:	f7ff f9f5 	bl	8006f9c <move_window>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d111      	bne.n	8007be0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe ffdb 	bl	8006b80 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a18      	ldr	r0, [r3, #32]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3324      	adds	r3, #36	@ 0x24
 8007bd2:	220b      	movs	r2, #11
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	f7fe ffb2 	bl	8006b3e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff f9cc 	bl	8006f9c <move_window>
 8007c04:	4603      	mov	r3, r0
 8007c06:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d106      	bne.n	8007c1c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	22e5      	movs	r2, #229	@ 0xe5
 8007c14:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3324      	adds	r3, #36	@ 0x24
 8007c3c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007c3e:	220b      	movs	r2, #11
 8007c40:	2120      	movs	r1, #32
 8007c42:	68b8      	ldr	r0, [r7, #8]
 8007c44:	f7fe ff9c 	bl	8006b80 <mem_set>
	si = i = 0; ni = 8;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	2308      	movs	r3, #8
 8007c52:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	61fa      	str	r2, [r7, #28]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007c62:	7efb      	ldrb	r3, [r7, #27]
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d94e      	bls.n	8007d06 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007c68:	7efb      	ldrb	r3, [r7, #27]
 8007c6a:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c6c:	d006      	beq.n	8007c7c <create_name+0x54>
 8007c6e:	7efb      	ldrb	r3, [r7, #27]
 8007c70:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c72:	d110      	bne.n	8007c96 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007c74:	e002      	b.n	8007c7c <create_name+0x54>
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	4413      	add	r3, r2
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c86:	d0f6      	beq.n	8007c76 <create_name+0x4e>
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c92:	d0f0      	beq.n	8007c76 <create_name+0x4e>
			break;
 8007c94:	e038      	b.n	8007d08 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007c96:	7efb      	ldrb	r3, [r7, #27]
 8007c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c9a:	d003      	beq.n	8007ca4 <create_name+0x7c>
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d30c      	bcc.n	8007cbe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2b0b      	cmp	r3, #11
 8007ca8:	d002      	beq.n	8007cb0 <create_name+0x88>
 8007caa:	7efb      	ldrb	r3, [r7, #27]
 8007cac:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cae:	d001      	beq.n	8007cb4 <create_name+0x8c>
 8007cb0:	2306      	movs	r3, #6
 8007cb2:	e044      	b.n	8007d3e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007cb4:	2308      	movs	r3, #8
 8007cb6:	613b      	str	r3, [r7, #16]
 8007cb8:	230b      	movs	r3, #11
 8007cba:	617b      	str	r3, [r7, #20]
			continue;
 8007cbc:	e022      	b.n	8007d04 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007cbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	da04      	bge.n	8007cd0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007cc6:	7efb      	ldrb	r3, [r7, #27]
 8007cc8:	3b80      	subs	r3, #128	@ 0x80
 8007cca:	4a1f      	ldr	r2, [pc, #124]	@ (8007d48 <create_name+0x120>)
 8007ccc:	5cd3      	ldrb	r3, [r2, r3]
 8007cce:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007cd0:	7efb      	ldrb	r3, [r7, #27]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	481d      	ldr	r0, [pc, #116]	@ (8007d4c <create_name+0x124>)
 8007cd6:	f7fe ff95 	bl	8006c04 <chk_chr>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <create_name+0xbc>
 8007ce0:	2306      	movs	r3, #6
 8007ce2:	e02c      	b.n	8007d3e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007ce4:	7efb      	ldrb	r3, [r7, #27]
 8007ce6:	2b60      	cmp	r3, #96	@ 0x60
 8007ce8:	d905      	bls.n	8007cf6 <create_name+0xce>
 8007cea:	7efb      	ldrb	r3, [r7, #27]
 8007cec:	2b7a      	cmp	r3, #122	@ 0x7a
 8007cee:	d802      	bhi.n	8007cf6 <create_name+0xce>
 8007cf0:	7efb      	ldrb	r3, [r7, #27]
 8007cf2:	3b20      	subs	r3, #32
 8007cf4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	613a      	str	r2, [r7, #16]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	4413      	add	r3, r2
 8007d00:	7efa      	ldrb	r2, [r7, #27]
 8007d02:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007d04:	e7a6      	b.n	8007c54 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007d06:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	441a      	add	r2, r3
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <create_name+0xf4>
 8007d18:	2306      	movs	r3, #6
 8007d1a:	e010      	b.n	8007d3e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2be5      	cmp	r3, #229	@ 0xe5
 8007d22:	d102      	bne.n	8007d2a <create_name+0x102>
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2205      	movs	r2, #5
 8007d28:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007d2a:	7efb      	ldrb	r3, [r7, #27]
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d801      	bhi.n	8007d34 <create_name+0x10c>
 8007d30:	2204      	movs	r2, #4
 8007d32:	e000      	b.n	8007d36 <create_name+0x10e>
 8007d34:	2200      	movs	r2, #0
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	330b      	adds	r3, #11
 8007d3a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007d3c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3720      	adds	r7, #32
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	0800e480 	.word	0x0800e480
 8007d4c:	0800e40c 	.word	0x0800e40c

08007d50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d64:	e002      	b.n	8007d6c <follow_path+0x1c>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b2f      	cmp	r3, #47	@ 0x2f
 8007d72:	d0f8      	beq.n	8007d66 <follow_path+0x16>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b5c      	cmp	r3, #92	@ 0x5c
 8007d7a:	d0f4      	beq.n	8007d66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b1f      	cmp	r3, #31
 8007d88:	d80a      	bhi.n	8007da0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2280      	movs	r2, #128	@ 0x80
 8007d8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007d92:	2100      	movs	r1, #0
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7ff fc7e 	bl	8007696 <dir_sdi>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]
 8007d9e:	e043      	b.n	8007e28 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007da0:	463b      	mov	r3, r7
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff ff3f 	bl	8007c28 <create_name>
 8007daa:	4603      	mov	r3, r0
 8007dac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d134      	bne.n	8007e1e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff fe91 	bl	8007adc <dir_find>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007dc4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d127      	bne.n	8007e22 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007dd2:	7afb      	ldrb	r3, [r7, #11]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d122      	bne.n	8007e22 <follow_path+0xd2>
 8007ddc:	2305      	movs	r3, #5
 8007dde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007de0:	e01f      	b.n	8007e22 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007de2:	7afb      	ldrb	r3, [r7, #11]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d11c      	bne.n	8007e26 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	799b      	ldrb	r3, [r3, #6]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007df8:	2305      	movs	r3, #5
 8007dfa:	75fb      	strb	r3, [r7, #23]
 8007dfc:	e014      	b.n	8007e28 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0c:	4413      	add	r3, r2
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7ff fdc7 	bl	80079a4 <ld_clust>
 8007e16:	4602      	mov	r2, r0
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e1c:	e7c0      	b.n	8007da0 <follow_path+0x50>
			if (res != FR_OK) break;
 8007e1e:	bf00      	nop
 8007e20:	e002      	b.n	8007e28 <follow_path+0xd8>
				break;
 8007e22:	bf00      	nop
 8007e24:	e000      	b.n	8007e28 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e26:	bf00      	nop
			}
		}
	}

	return res;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b087      	sub	sp, #28
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d031      	beq.n	8007eac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	617b      	str	r3, [r7, #20]
 8007e4e:	e002      	b.n	8007e56 <get_ldnumber+0x24>
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	3301      	adds	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	d903      	bls.n	8007e66 <get_ldnumber+0x34>
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e64:	d1f4      	bne.n	8007e50 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b3a      	cmp	r3, #58	@ 0x3a
 8007e6c:	d11c      	bne.n	8007ea8 <get_ldnumber+0x76>
			tp = *path;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	60fa      	str	r2, [r7, #12]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	3b30      	subs	r3, #48	@ 0x30
 8007e7e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b09      	cmp	r3, #9
 8007e84:	d80e      	bhi.n	8007ea4 <get_ldnumber+0x72>
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d10a      	bne.n	8007ea4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d107      	bne.n	8007ea4 <get_ldnumber+0x72>
					vol = (int)i;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	e002      	b.n	8007eae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007eac:	693b      	ldr	r3, [r7, #16]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
	...

08007ebc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	70da      	strb	r2, [r3, #3]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff f860 	bl	8006f9c <move_window>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <check_fs+0x2a>
 8007ee2:	2304      	movs	r3, #4
 8007ee4:	e038      	b.n	8007f58 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3330      	adds	r3, #48	@ 0x30
 8007eea:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fda2 	bl	8006a38 <ld_word>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d001      	beq.n	8007f04 <check_fs+0x48>
 8007f00:	2303      	movs	r3, #3
 8007f02:	e029      	b.n	8007f58 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f0a:	2be9      	cmp	r3, #233	@ 0xe9
 8007f0c:	d009      	beq.n	8007f22 <check_fs+0x66>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f14:	2beb      	cmp	r3, #235	@ 0xeb
 8007f16:	d11e      	bne.n	8007f56 <check_fs+0x9a>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007f1e:	2b90      	cmp	r3, #144	@ 0x90
 8007f20:	d119      	bne.n	8007f56 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3330      	adds	r3, #48	@ 0x30
 8007f26:	3336      	adds	r3, #54	@ 0x36
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fd9e 	bl	8006a6a <ld_dword>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f34:	4a0a      	ldr	r2, [pc, #40]	@ (8007f60 <check_fs+0xa4>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d101      	bne.n	8007f3e <check_fs+0x82>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e00c      	b.n	8007f58 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3330      	adds	r3, #48	@ 0x30
 8007f42:	3352      	adds	r3, #82	@ 0x52
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fe fd90 	bl	8006a6a <ld_dword>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4a05      	ldr	r2, [pc, #20]	@ (8007f64 <check_fs+0xa8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d101      	bne.n	8007f56 <check_fs+0x9a>
 8007f52:	2300      	movs	r3, #0
 8007f54:	e000      	b.n	8007f58 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f56:	2302      	movs	r3, #2
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	00544146 	.word	0x00544146
 8007f64:	33544146 	.word	0x33544146

08007f68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b096      	sub	sp, #88	@ 0x58
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7ff ff58 	bl	8007e32 <get_ldnumber>
 8007f82:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da01      	bge.n	8007f8e <find_volume+0x26>
 8007f8a:	230b      	movs	r3, #11
 8007f8c:	e22d      	b.n	80083ea <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f8e:	4aa1      	ldr	r2, [pc, #644]	@ (8008214 <find_volume+0x2ac>)
 8007f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f96:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <find_volume+0x3a>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	e223      	b.n	80083ea <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fa6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	f023 0301 	bic.w	r3, r3, #1
 8007fae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01a      	beq.n	8007fee <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fc9b 	bl	80068f8 <disk_status>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10c      	bne.n	8007fee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d007      	beq.n	8007fea <find_volume+0x82>
 8007fda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	e1ff      	b.n	80083ea <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007fea:	2300      	movs	r3, #0
 8007fec:	e1fd      	b.n	80083ea <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe fc93 	bl	800692c <disk_initialize>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800800c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008018:	2303      	movs	r3, #3
 800801a:	e1e6      	b.n	80083ea <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <find_volume+0xca>
 8008022:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800802e:	230a      	movs	r3, #10
 8008030:	e1db      	b.n	80083ea <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008036:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008038:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800803a:	f7ff ff3f 	bl	8007ebc <check_fs>
 800803e:	4603      	mov	r3, r0
 8008040:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008044:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008048:	2b02      	cmp	r3, #2
 800804a:	d149      	bne.n	80080e0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800804c:	2300      	movs	r3, #0
 800804e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008050:	e01e      	b.n	8008090 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008054:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008060:	4413      	add	r3, r2
 8008062:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	3304      	adds	r3, #4
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d006      	beq.n	800807c <find_volume+0x114>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	3308      	adds	r3, #8
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fcf9 	bl	8006a6a <ld_dword>
 8008078:	4602      	mov	r2, r0
 800807a:	e000      	b.n	800807e <find_volume+0x116>
 800807c:	2200      	movs	r2, #0
 800807e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	3358      	adds	r3, #88	@ 0x58
 8008084:	443b      	add	r3, r7
 8008086:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800808a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800808c:	3301      	adds	r3, #1
 800808e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008092:	2b03      	cmp	r3, #3
 8008094:	d9dd      	bls.n	8008052 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008096:	2300      	movs	r3, #0
 8008098:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800809a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <find_volume+0x13e>
 80080a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a2:	3b01      	subs	r3, #1
 80080a4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80080a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	3358      	adds	r3, #88	@ 0x58
 80080ac:	443b      	add	r3, r7
 80080ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80080b2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80080b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d005      	beq.n	80080c6 <find_volume+0x15e>
 80080ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080be:	f7ff fefd 	bl	8007ebc <check_fs>
 80080c2:	4603      	mov	r3, r0
 80080c4:	e000      	b.n	80080c8 <find_volume+0x160>
 80080c6:	2303      	movs	r3, #3
 80080c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80080cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d905      	bls.n	80080e0 <find_volume+0x178>
 80080d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080d6:	3301      	adds	r3, #1
 80080d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80080da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d9e2      	bls.n	80080a6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80080e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d101      	bne.n	80080ec <find_volume+0x184>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e17e      	b.n	80083ea <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80080ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d901      	bls.n	80080f8 <find_volume+0x190>
 80080f4:	230d      	movs	r3, #13
 80080f6:	e178      	b.n	80083ea <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80080f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fa:	3330      	adds	r3, #48	@ 0x30
 80080fc:	330b      	adds	r3, #11
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fc9a 	bl	8006a38 <ld_word>
 8008104:	4603      	mov	r3, r0
 8008106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800810a:	d001      	beq.n	8008110 <find_volume+0x1a8>
 800810c:	230d      	movs	r3, #13
 800810e:	e16c      	b.n	80083ea <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008112:	3330      	adds	r3, #48	@ 0x30
 8008114:	3316      	adds	r3, #22
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fc8e 	bl	8006a38 <ld_word>
 800811c:	4603      	mov	r3, r0
 800811e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <find_volume+0x1cc>
 8008126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008128:	3330      	adds	r3, #48	@ 0x30
 800812a:	3324      	adds	r3, #36	@ 0x24
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe fc9c 	bl	8006a6a <ld_dword>
 8008132:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008136:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008138:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800813a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008142:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008146:	789b      	ldrb	r3, [r3, #2]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d005      	beq.n	8008158 <find_volume+0x1f0>
 800814c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814e:	789b      	ldrb	r3, [r3, #2]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d001      	beq.n	8008158 <find_volume+0x1f0>
 8008154:	230d      	movs	r3, #13
 8008156:	e148      	b.n	80083ea <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815a:	789b      	ldrb	r3, [r3, #2]
 800815c:	461a      	mov	r2, r3
 800815e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008160:	fb02 f303 	mul.w	r3, r2, r3
 8008164:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800816c:	461a      	mov	r2, r3
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	895b      	ldrh	r3, [r3, #10]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d008      	beq.n	800818c <find_volume+0x224>
 800817a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817c:	895b      	ldrh	r3, [r3, #10]
 800817e:	461a      	mov	r2, r3
 8008180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008182:	895b      	ldrh	r3, [r3, #10]
 8008184:	3b01      	subs	r3, #1
 8008186:	4013      	ands	r3, r2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <find_volume+0x228>
 800818c:	230d      	movs	r3, #13
 800818e:	e12c      	b.n	80083ea <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008192:	3330      	adds	r3, #48	@ 0x30
 8008194:	3311      	adds	r3, #17
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fc4e 	bl	8006a38 <ld_word>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80081a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a6:	891b      	ldrh	r3, [r3, #8]
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <find_volume+0x24e>
 80081b2:	230d      	movs	r3, #13
 80081b4:	e119      	b.n	80083ea <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80081b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b8:	3330      	adds	r3, #48	@ 0x30
 80081ba:	3313      	adds	r3, #19
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe fc3b 	bl	8006a38 <ld_word>
 80081c2:	4603      	mov	r3, r0
 80081c4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80081c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <find_volume+0x272>
 80081cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ce:	3330      	adds	r3, #48	@ 0x30
 80081d0:	3320      	adds	r3, #32
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fc49 	bl	8006a6a <ld_dword>
 80081d8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	3330      	adds	r3, #48	@ 0x30
 80081de:	330e      	adds	r3, #14
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fe fc29 	bl	8006a38 <ld_word>
 80081e6:	4603      	mov	r3, r0
 80081e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80081ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <find_volume+0x28c>
 80081f0:	230d      	movs	r3, #13
 80081f2:	e0fa      	b.n	80083ea <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80081f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80081f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081f8:	4413      	add	r3, r2
 80081fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081fc:	8912      	ldrh	r2, [r2, #8]
 80081fe:	0912      	lsrs	r2, r2, #4
 8008200:	b292      	uxth	r2, r2
 8008202:	4413      	add	r3, r2
 8008204:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008206:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820a:	429a      	cmp	r2, r3
 800820c:	d204      	bcs.n	8008218 <find_volume+0x2b0>
 800820e:	230d      	movs	r3, #13
 8008210:	e0eb      	b.n	80083ea <find_volume+0x482>
 8008212:	bf00      	nop
 8008214:	20000ed0 	.word	0x20000ed0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008220:	8952      	ldrh	r2, [r2, #10]
 8008222:	fbb3 f3f2 	udiv	r3, r3, r2
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <find_volume+0x2ca>
 800822e:	230d      	movs	r3, #13
 8008230:	e0db      	b.n	80083ea <find_volume+0x482>
		fmt = FS_FAT32;
 8008232:	2303      	movs	r3, #3
 8008234:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800823e:	4293      	cmp	r3, r2
 8008240:	d802      	bhi.n	8008248 <find_volume+0x2e0>
 8008242:	2302      	movs	r3, #2
 8008244:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800824e:	4293      	cmp	r3, r2
 8008250:	d802      	bhi.n	8008258 <find_volume+0x2f0>
 8008252:	2301      	movs	r3, #1
 8008254:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825a:	1c9a      	adds	r2, r3, #2
 800825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008262:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008264:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008266:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800826a:	441a      	add	r2, r3
 800826c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008270:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008274:	441a      	add	r2, r3
 8008276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008278:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800827a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800827e:	2b03      	cmp	r3, #3
 8008280:	d11e      	bne.n	80082c0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008284:	3330      	adds	r3, #48	@ 0x30
 8008286:	332a      	adds	r3, #42	@ 0x2a
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fbd5 	bl	8006a38 <ld_word>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <find_volume+0x330>
 8008294:	230d      	movs	r3, #13
 8008296:	e0a8      	b.n	80083ea <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829a:	891b      	ldrh	r3, [r3, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <find_volume+0x33c>
 80082a0:	230d      	movs	r3, #13
 80082a2:	e0a2      	b.n	80083ea <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80082a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a6:	3330      	adds	r3, #48	@ 0x30
 80082a8:	332c      	adds	r3, #44	@ 0x2c
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fbdd 	bl	8006a6a <ld_dword>
 80082b0:	4602      	mov	r2, r0
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80082b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082be:	e01f      	b.n	8008300 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80082c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c2:	891b      	ldrh	r3, [r3, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <find_volume+0x364>
 80082c8:	230d      	movs	r3, #13
 80082ca:	e08e      	b.n	80083ea <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80082cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ce:	6a1a      	ldr	r2, [r3, #32]
 80082d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d2:	441a      	add	r2, r3
 80082d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80082d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d103      	bne.n	80082e8 <find_volume+0x380>
 80082e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	e00a      	b.n	80082fe <find_volume+0x396>
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	695a      	ldr	r2, [r3, #20]
 80082ec:	4613      	mov	r3, r2
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	4413      	add	r3, r2
 80082f2:	085a      	lsrs	r2, r3, #1
 80082f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80082fe:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008306:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800830a:	0a5b      	lsrs	r3, r3, #9
 800830c:	429a      	cmp	r2, r3
 800830e:	d201      	bcs.n	8008314 <find_volume+0x3ac>
 8008310:	230d      	movs	r3, #13
 8008312:	e06a      	b.n	80083ea <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008316:	f04f 32ff 	mov.w	r2, #4294967295
 800831a:	611a      	str	r2, [r3, #16]
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008322:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008326:	2280      	movs	r2, #128	@ 0x80
 8008328:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800832a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800832e:	2b03      	cmp	r3, #3
 8008330:	d149      	bne.n	80083c6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008334:	3330      	adds	r3, #48	@ 0x30
 8008336:	3330      	adds	r3, #48	@ 0x30
 8008338:	4618      	mov	r0, r3
 800833a:	f7fe fb7d 	bl	8006a38 <ld_word>
 800833e:	4603      	mov	r3, r0
 8008340:	2b01      	cmp	r3, #1
 8008342:	d140      	bne.n	80083c6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008346:	3301      	adds	r3, #1
 8008348:	4619      	mov	r1, r3
 800834a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800834c:	f7fe fe26 	bl	8006f9c <move_window>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d137      	bne.n	80083c6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008358:	2200      	movs	r2, #0
 800835a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	3330      	adds	r3, #48	@ 0x30
 8008360:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fb67 	bl	8006a38 <ld_word>
 800836a:	4603      	mov	r3, r0
 800836c:	461a      	mov	r2, r3
 800836e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008372:	429a      	cmp	r2, r3
 8008374:	d127      	bne.n	80083c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008378:	3330      	adds	r3, #48	@ 0x30
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe fb75 	bl	8006a6a <ld_dword>
 8008380:	4603      	mov	r3, r0
 8008382:	4a1c      	ldr	r2, [pc, #112]	@ (80083f4 <find_volume+0x48c>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d11e      	bne.n	80083c6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838a:	3330      	adds	r3, #48	@ 0x30
 800838c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe fb6a 	bl	8006a6a <ld_dword>
 8008396:	4603      	mov	r3, r0
 8008398:	4a17      	ldr	r2, [pc, #92]	@ (80083f8 <find_volume+0x490>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d113      	bne.n	80083c6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800839e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a0:	3330      	adds	r3, #48	@ 0x30
 80083a2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe fb5f 	bl	8006a6a <ld_dword>
 80083ac:	4602      	mov	r2, r0
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	3330      	adds	r3, #48	@ 0x30
 80083b6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fb55 	bl	8006a6a <ld_dword>
 80083c0:	4602      	mov	r2, r0
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80083c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80083cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80083ce:	4b0b      	ldr	r3, [pc, #44]	@ (80083fc <find_volume+0x494>)
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	3301      	adds	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	4b09      	ldr	r3, [pc, #36]	@ (80083fc <find_volume+0x494>)
 80083d8:	801a      	strh	r2, [r3, #0]
 80083da:	4b08      	ldr	r3, [pc, #32]	@ (80083fc <find_volume+0x494>)
 80083dc:	881a      	ldrh	r2, [r3, #0]
 80083de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80083e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083e4:	f7fe fd72 	bl	8006ecc <clear_lock>
#endif
	return FR_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3758      	adds	r7, #88	@ 0x58
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	41615252 	.word	0x41615252
 80083f8:	61417272 	.word	0x61417272
 80083fc:	20000ed4 	.word	0x20000ed4

08008400 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800840a:	2309      	movs	r3, #9
 800840c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01c      	beq.n	800844e <validate+0x4e>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d018      	beq.n	800844e <validate+0x4e>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d013      	beq.n	800844e <validate+0x4e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	889a      	ldrh	r2, [r3, #4]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	88db      	ldrh	r3, [r3, #6]
 8008430:	429a      	cmp	r2, r3
 8008432:	d10c      	bne.n	800844e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fa5c 	bl	80068f8 <disk_status>
 8008440:	4603      	mov	r3, r0
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <validate+0x4e>
			res = FR_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <validate+0x5a>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	e000      	b.n	800845c <validate+0x5c>
 800845a:	2300      	movs	r3, #0
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	6013      	str	r3, [r2, #0]
	return res;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800847e:	f107 0310 	add.w	r3, r7, #16
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff fcd5 	bl	8007e32 <get_ldnumber>
 8008488:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	2b00      	cmp	r3, #0
 800848e:	da01      	bge.n	8008494 <f_mount+0x28>
 8008490:	230b      	movs	r3, #11
 8008492:	e02b      	b.n	80084ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008494:	4a17      	ldr	r2, [pc, #92]	@ (80084f4 <f_mount+0x88>)
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800849c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80084a4:	69b8      	ldr	r0, [r7, #24]
 80084a6:	f7fe fd11 	bl	8006ecc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	490d      	ldr	r1, [pc, #52]	@ (80084f4 <f_mount+0x88>)
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <f_mount+0x66>
 80084cc:	79fb      	ldrb	r3, [r7, #7]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d001      	beq.n	80084d6 <f_mount+0x6a>
 80084d2:	2300      	movs	r3, #0
 80084d4:	e00a      	b.n	80084ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80084d6:	f107 010c 	add.w	r1, r7, #12
 80084da:	f107 0308 	add.w	r3, r7, #8
 80084de:	2200      	movs	r2, #0
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff fd41 	bl	8007f68 <find_volume>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20000ed0 	.word	0x20000ed0

080084f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b098      	sub	sp, #96	@ 0x60
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	4613      	mov	r3, r2
 8008504:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <f_open+0x18>
 800850c:	2309      	movs	r3, #9
 800850e:	e1a9      	b.n	8008864 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008516:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008518:	79fa      	ldrb	r2, [r7, #7]
 800851a:	f107 0110 	add.w	r1, r7, #16
 800851e:	f107 0308 	add.w	r3, r7, #8
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff fd20 	bl	8007f68 <find_volume>
 8008528:	4603      	mov	r3, r0
 800852a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800852e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008532:	2b00      	cmp	r3, #0
 8008534:	f040 818d 	bne.w	8008852 <f_open+0x35a>
		dj.obj.fs = fs;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	f107 0314 	add.w	r3, r7, #20
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff fc03 	bl	8007d50 <follow_path>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008550:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008554:	2b00      	cmp	r3, #0
 8008556:	d118      	bne.n	800858a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008558:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800855c:	b25b      	sxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	da03      	bge.n	800856a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008562:	2306      	movs	r3, #6
 8008564:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008568:	e00f      	b.n	800858a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	2b01      	cmp	r3, #1
 800856e:	bf8c      	ite	hi
 8008570:	2301      	movhi	r3, #1
 8008572:	2300      	movls	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	461a      	mov	r2, r3
 8008578:	f107 0314 	add.w	r3, r7, #20
 800857c:	4611      	mov	r1, r2
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fb5c 	bl	8006c3c <chk_lock>
 8008584:	4603      	mov	r3, r0
 8008586:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	f003 031c 	and.w	r3, r3, #28
 8008590:	2b00      	cmp	r3, #0
 8008592:	d07f      	beq.n	8008694 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008594:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008598:	2b00      	cmp	r3, #0
 800859a:	d017      	beq.n	80085cc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800859c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d10e      	bne.n	80085c2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80085a4:	f7fe fba6 	bl	8006cf4 <enq_lock>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d006      	beq.n	80085bc <f_open+0xc4>
 80085ae:	f107 0314 	add.w	r3, r7, #20
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fae7 	bl	8007b86 <dir_register>
 80085b8:	4603      	mov	r3, r0
 80085ba:	e000      	b.n	80085be <f_open+0xc6>
 80085bc:	2312      	movs	r3, #18
 80085be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	f043 0308 	orr.w	r3, r3, #8
 80085c8:	71fb      	strb	r3, [r7, #7]
 80085ca:	e010      	b.n	80085ee <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80085cc:	7ebb      	ldrb	r3, [r7, #26]
 80085ce:	f003 0311 	and.w	r3, r3, #17
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <f_open+0xe6>
					res = FR_DENIED;
 80085d6:	2307      	movs	r3, #7
 80085d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80085dc:	e007      	b.n	80085ee <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <f_open+0xf6>
 80085e8:	2308      	movs	r3, #8
 80085ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80085ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d168      	bne.n	80086c8 <f_open+0x1d0>
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d063      	beq.n	80086c8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008600:	f7fd fc3e 	bl	8005e80 <get_fattime>
 8008604:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008608:	330e      	adds	r3, #14
 800860a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fa6a 	bl	8006ae6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008614:	3316      	adds	r3, #22
 8008616:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fa64 	bl	8006ae6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800861e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008620:	330b      	adds	r3, #11
 8008622:	2220      	movs	r2, #32
 8008624:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff f9b9 	bl	80079a4 <ld_clust>
 8008632:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008638:	2200      	movs	r2, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff f9d1 	bl	80079e2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008642:	331c      	adds	r3, #28
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fa4d 	bl	8006ae6 <st_dword>
					fs->wflag = 1;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2201      	movs	r2, #1
 8008650:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008654:	2b00      	cmp	r3, #0
 8008656:	d037      	beq.n	80086c8 <f_open+0x1d0>
						dw = fs->winsect;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800865e:	f107 0314 	add.w	r3, r7, #20
 8008662:	2200      	movs	r2, #0
 8008664:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe fee4 	bl	8007434 <remove_chain>
 800866c:	4603      	mov	r3, r0
 800866e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008672:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008676:	2b00      	cmp	r3, #0
 8008678:	d126      	bne.n	80086c8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fc8c 	bl	8006f9c <move_window>
 8008684:	4603      	mov	r3, r0
 8008686:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800868e:	3a01      	subs	r2, #1
 8008690:	60da      	str	r2, [r3, #12]
 8008692:	e019      	b.n	80086c8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008694:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008698:	2b00      	cmp	r3, #0
 800869a:	d115      	bne.n	80086c8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800869c:	7ebb      	ldrb	r3, [r7, #26]
 800869e:	f003 0310 	and.w	r3, r3, #16
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <f_open+0x1b6>
					res = FR_NO_FILE;
 80086a6:	2304      	movs	r3, #4
 80086a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80086ac:	e00c      	b.n	80086c8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <f_open+0x1d0>
 80086b8:	7ebb      	ldrb	r3, [r7, #26]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <f_open+0x1d0>
						res = FR_DENIED;
 80086c2:	2307      	movs	r3, #7
 80086c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80086c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d126      	bne.n	800871e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80086ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	bf8c      	ite	hi
 80086f6:	2301      	movhi	r3, #1
 80086f8:	2300      	movls	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	461a      	mov	r2, r3
 80086fe:	f107 0314 	add.w	r3, r7, #20
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe fb17 	bl	8006d38 <inc_lock>
 800870a:	4602      	mov	r2, r0
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d102      	bne.n	800871e <f_open+0x226>
 8008718:	2302      	movs	r3, #2
 800871a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800871e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008722:	2b00      	cmp	r3, #0
 8008724:	f040 8095 	bne.w	8008852 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800872c:	4611      	mov	r1, r2
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff f938 	bl	80079a4 <ld_clust>
 8008734:	4602      	mov	r2, r0
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800873a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873c:	331c      	adds	r3, #28
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe f993 	bl	8006a6a <ld_dword>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	88da      	ldrh	r2, [r3, #6]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	79fa      	ldrb	r2, [r7, #7]
 8008762:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3330      	adds	r3, #48	@ 0x30
 800877a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800877e:	2100      	movs	r1, #0
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe f9fd 	bl	8006b80 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	f003 0320 	and.w	r3, r3, #32
 800878c:	2b00      	cmp	r3, #0
 800878e:	d060      	beq.n	8008852 <f_open+0x35a>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d05c      	beq.n	8008852 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	895b      	ldrh	r3, [r3, #10]
 80087a4:	025b      	lsls	r3, r3, #9
 80087a6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80087b4:	e016      	b.n	80087e4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fca9 	bl	8007112 <get_fat>
 80087c0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80087c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d802      	bhi.n	80087ce <f_open+0x2d6>
 80087c8:	2302      	movs	r3, #2
 80087ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80087ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d4:	d102      	bne.n	80087dc <f_open+0x2e4>
 80087d6:	2301      	movs	r3, #1
 80087d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80087e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d103      	bne.n	80087f4 <f_open+0x2fc>
 80087ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d8e0      	bhi.n	80087b6 <f_open+0x2be>
				}
				fp->clust = clst;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80087fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d127      	bne.n	8008852 <f_open+0x35a>
 8008802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008808:	2b00      	cmp	r3, #0
 800880a:	d022      	beq.n	8008852 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe fc5f 	bl	80070d4 <clust2sect>
 8008816:	6478      	str	r0, [r7, #68]	@ 0x44
 8008818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800881a:	2b00      	cmp	r3, #0
 800881c:	d103      	bne.n	8008826 <f_open+0x32e>
						res = FR_INT_ERR;
 800881e:	2302      	movs	r3, #2
 8008820:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008824:	e015      	b.n	8008852 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008828:	0a5a      	lsrs	r2, r3, #9
 800882a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800882c:	441a      	add	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	7858      	ldrb	r0, [r3, #1]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a1a      	ldr	r2, [r3, #32]
 8008840:	2301      	movs	r3, #1
 8008842:	f7fe f89b 	bl	800697c <disk_read>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <f_open+0x35a>
 800884c:	2301      	movs	r3, #1
 800884e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008852:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <f_open+0x368>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008860:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008864:	4618      	mov	r0, r3
 8008866:	3760      	adds	r7, #96	@ 0x60
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08e      	sub	sp, #56	@ 0x38
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f107 0214 	add.w	r2, r7, #20
 800888a:	4611      	mov	r1, r2
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff fdb7 	bl	8008400 <validate>
 8008892:	4603      	mov	r3, r0
 8008894:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008898:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800889c:	2b00      	cmp	r3, #0
 800889e:	d107      	bne.n	80088b0 <f_read+0x44>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	7d5b      	ldrb	r3, [r3, #21]
 80088a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80088a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <f_read+0x4a>
 80088b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80088b4:	e115      	b.n	8008ae2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	7d1b      	ldrb	r3, [r3, #20]
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <f_read+0x5a>
 80088c2:	2307      	movs	r3, #7
 80088c4:	e10d      	b.n	8008ae2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	f240 80fe 	bls.w	8008ad8 <f_read+0x26c>
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80088e0:	e0fa      	b.n	8008ad8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f040 80c6 	bne.w	8008a7c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	0a5b      	lsrs	r3, r3, #9
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	8952      	ldrh	r2, [r2, #10]
 80088fa:	3a01      	subs	r2, #1
 80088fc:	4013      	ands	r3, r2
 80088fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d12f      	bne.n	8008966 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d103      	bne.n	8008916 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	633b      	str	r3, [r7, #48]	@ 0x30
 8008914:	e013      	b.n	800893e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d007      	beq.n	800892e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	4619      	mov	r1, r3
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7fe fe82 	bl	800762e <clmt_clust>
 800892a:	6338      	str	r0, [r7, #48]	@ 0x30
 800892c:	e007      	b.n	800893e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f7fe fbeb 	bl	8007112 <get_fat>
 800893c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	2b01      	cmp	r3, #1
 8008942:	d804      	bhi.n	800894e <f_read+0xe2>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2202      	movs	r2, #2
 8008948:	755a      	strb	r2, [r3, #21]
 800894a:	2302      	movs	r3, #2
 800894c:	e0c9      	b.n	8008ae2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008954:	d104      	bne.n	8008960 <f_read+0xf4>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	755a      	strb	r2, [r3, #21]
 800895c:	2301      	movs	r3, #1
 800895e:	e0c0      	b.n	8008ae2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008964:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	4619      	mov	r1, r3
 800896e:	4610      	mov	r0, r2
 8008970:	f7fe fbb0 	bl	80070d4 <clust2sect>
 8008974:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d104      	bne.n	8008986 <f_read+0x11a>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2202      	movs	r2, #2
 8008980:	755a      	strb	r2, [r3, #21]
 8008982:	2302      	movs	r3, #2
 8008984:	e0ad      	b.n	8008ae2 <f_read+0x276>
			sect += csect;
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	4413      	add	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	0a5b      	lsrs	r3, r3, #9
 8008992:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008996:	2b00      	cmp	r3, #0
 8008998:	d039      	beq.n	8008a0e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899e:	4413      	add	r3, r2
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	8952      	ldrh	r2, [r2, #10]
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d905      	bls.n	80089b4 <f_read+0x148>
					cc = fs->csize - csect;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	895b      	ldrh	r3, [r3, #10]
 80089ac:	461a      	mov	r2, r3
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	7858      	ldrb	r0, [r3, #1]
 80089b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80089be:	f7fd ffdd 	bl	800697c <disk_read>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <f_read+0x166>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2201      	movs	r2, #1
 80089cc:	755a      	strb	r2, [r3, #21]
 80089ce:	2301      	movs	r3, #1
 80089d0:	e087      	b.n	8008ae2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	7d1b      	ldrb	r3, [r3, #20]
 80089d6:	b25b      	sxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	da14      	bge.n	8008a06 <f_read+0x19a>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a1a      	ldr	r2, [r3, #32]
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d90d      	bls.n	8008a06 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1a      	ldr	r2, [r3, #32]
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	025b      	lsls	r3, r3, #9
 80089f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f6:	18d0      	adds	r0, r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3330      	adds	r3, #48	@ 0x30
 80089fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a00:	4619      	mov	r1, r3
 8008a02:	f7fe f89c 	bl	8006b3e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a08:	025b      	lsls	r3, r3, #9
 8008a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008a0c:	e050      	b.n	8008ab0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d02e      	beq.n	8008a76 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	7d1b      	ldrb	r3, [r3, #20]
 8008a1c:	b25b      	sxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	da18      	bge.n	8008a54 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	7858      	ldrb	r0, [r3, #1]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a1a      	ldr	r2, [r3, #32]
 8008a30:	2301      	movs	r3, #1
 8008a32:	f7fd ffc3 	bl	80069bc <disk_write>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <f_read+0x1da>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	755a      	strb	r2, [r3, #21]
 8008a42:	2301      	movs	r3, #1
 8008a44:	e04d      	b.n	8008ae2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	7d1b      	ldrb	r3, [r3, #20]
 8008a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	7858      	ldrb	r0, [r3, #1]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a5e:	2301      	movs	r3, #1
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	f7fd ff8b 	bl	800697c <disk_read>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <f_read+0x20a>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	755a      	strb	r2, [r3, #21]
 8008a72:	2301      	movs	r3, #1
 8008a74:	e035      	b.n	8008ae2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a84:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d901      	bls.n	8008a96 <f_read+0x22a>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa4:	4413      	add	r3, r2
 8008aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008aac:	f7fe f847 	bl	8006b3e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab4:	4413      	add	r3, r2
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	699a      	ldr	r2, [r3, #24]
 8008abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abe:	441a      	add	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	619a      	str	r2, [r3, #24]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aca:	441a      	add	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f47f af01 	bne.w	80088e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3738      	adds	r7, #56	@ 0x38
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b08c      	sub	sp, #48	@ 0x30
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	607a      	str	r2, [r7, #4]
 8008af6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f107 0210 	add.w	r2, r7, #16
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff fc78 	bl	8008400 <validate>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d107      	bne.n	8008b2e <f_write+0x44>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	7d5b      	ldrb	r3, [r3, #21]
 8008b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <f_write+0x4a>
 8008b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b32:	e14b      	b.n	8008dcc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	7d1b      	ldrb	r3, [r3, #20]
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <f_write+0x5a>
 8008b40:	2307      	movs	r3, #7
 8008b42:	e143      	b.n	8008dcc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	699a      	ldr	r2, [r3, #24]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	441a      	add	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	f080 812d 	bcs.w	8008db0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	43db      	mvns	r3, r3
 8008b5c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b5e:	e127      	b.n	8008db0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f040 80e3 	bne.w	8008d34 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	0a5b      	lsrs	r3, r3, #9
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	8952      	ldrh	r2, [r2, #10]
 8008b78:	3a01      	subs	r2, #1
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d143      	bne.n	8008c0c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10c      	bne.n	8008ba6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d11a      	bne.n	8008bce <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fcae 	bl	80074fe <create_chain>
 8008ba2:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008ba4:	e013      	b.n	8008bce <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d007      	beq.n	8008bbe <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f7fe fd3a 	bl	800762e <clmt_clust>
 8008bba:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008bbc:	e007      	b.n	8008bce <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7fe fc99 	bl	80074fe <create_chain>
 8008bcc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 80f2 	beq.w	8008dba <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d104      	bne.n	8008be6 <f_write+0xfc>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2202      	movs	r2, #2
 8008be0:	755a      	strb	r2, [r3, #21]
 8008be2:	2302      	movs	r3, #2
 8008be4:	e0f2      	b.n	8008dcc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bec:	d104      	bne.n	8008bf8 <f_write+0x10e>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	755a      	strb	r2, [r3, #21]
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e0e9      	b.n	8008dcc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bfc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d102      	bne.n	8008c0c <f_write+0x122>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c0a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	7d1b      	ldrb	r3, [r3, #20]
 8008c10:	b25b      	sxtb	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	da18      	bge.n	8008c48 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	7858      	ldrb	r0, [r3, #1]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6a1a      	ldr	r2, [r3, #32]
 8008c24:	2301      	movs	r3, #1
 8008c26:	f7fd fec9 	bl	80069bc <disk_write>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d004      	beq.n	8008c3a <f_write+0x150>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	755a      	strb	r2, [r3, #21]
 8008c36:	2301      	movs	r3, #1
 8008c38:	e0c8      	b.n	8008dcc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	7d1b      	ldrb	r3, [r3, #20]
 8008c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4610      	mov	r0, r2
 8008c52:	f7fe fa3f 	bl	80070d4 <clust2sect>
 8008c56:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d104      	bne.n	8008c68 <f_write+0x17e>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2202      	movs	r2, #2
 8008c62:	755a      	strb	r2, [r3, #21]
 8008c64:	2302      	movs	r3, #2
 8008c66:	e0b1      	b.n	8008dcc <f_write+0x2e2>
			sect += csect;
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	0a5b      	lsrs	r3, r3, #9
 8008c74:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d03c      	beq.n	8008cf6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	4413      	add	r3, r2
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	8952      	ldrh	r2, [r2, #10]
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d905      	bls.n	8008c96 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	895b      	ldrh	r3, [r3, #10]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	7858      	ldrb	r0, [r3, #1]
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	69f9      	ldr	r1, [r7, #28]
 8008ca0:	f7fd fe8c 	bl	80069bc <disk_write>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d004      	beq.n	8008cb4 <f_write+0x1ca>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2201      	movs	r2, #1
 8008cae:	755a      	strb	r2, [r3, #21]
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e08b      	b.n	8008dcc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a1a      	ldr	r2, [r3, #32]
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	6a3a      	ldr	r2, [r7, #32]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d915      	bls.n	8008cee <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a1a      	ldr	r2, [r3, #32]
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	025b      	lsls	r3, r3, #9
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cda:	4619      	mov	r1, r3
 8008cdc:	f7fd ff2f 	bl	8006b3e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	7d1b      	ldrb	r3, [r3, #20]
 8008ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	025b      	lsls	r3, r3, #9
 8008cf2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008cf4:	e03f      	b.n	8008d76 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d016      	beq.n	8008d2e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	699a      	ldr	r2, [r3, #24]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d210      	bcs.n	8008d2e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	7858      	ldrb	r0, [r3, #1]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d16:	2301      	movs	r3, #1
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	f7fd fe2f 	bl	800697c <disk_read>
 8008d1e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	755a      	strb	r2, [r3, #21]
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e04e      	b.n	8008dcc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008d40:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d901      	bls.n	8008d4e <f_write+0x264>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5c:	4413      	add	r3, r2
 8008d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d60:	69f9      	ldr	r1, [r7, #28]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fd feeb 	bl	8006b3e <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	7d1b      	ldrb	r3, [r3, #20]
 8008d6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7a:	4413      	add	r3, r2
 8008d7c:	61fb      	str	r3, [r7, #28]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	441a      	add	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	619a      	str	r2, [r3, #24]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	bf38      	it	cc
 8008d96:	461a      	movcc	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	60da      	str	r2, [r3, #12]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	441a      	add	r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f47f aed4 	bne.w	8008b60 <f_write+0x76>
 8008db8:	e000      	b.n	8008dbc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008dba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	7d1b      	ldrb	r3, [r3, #20]
 8008dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3730      	adds	r7, #48	@ 0x30
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f107 0208 	add.w	r2, r7, #8
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff fb0b 	bl	8008400 <validate>
 8008dea:	4603      	mov	r3, r0
 8008dec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d168      	bne.n	8008ec6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	7d1b      	ldrb	r3, [r3, #20]
 8008df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d062      	beq.n	8008ec6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7d1b      	ldrb	r3, [r3, #20]
 8008e04:	b25b      	sxtb	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	da15      	bge.n	8008e36 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	7858      	ldrb	r0, [r3, #1]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a1a      	ldr	r2, [r3, #32]
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f7fd fdcf 	bl	80069bc <disk_write>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <f_sync+0x54>
 8008e24:	2301      	movs	r3, #1
 8008e26:	e04f      	b.n	8008ec8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7d1b      	ldrb	r3, [r3, #20]
 8008e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e36:	f7fd f823 	bl	8005e80 <get_fattime>
 8008e3a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f7fe f8a9 	bl	8006f9c <move_window>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d138      	bne.n	8008ec6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	330b      	adds	r3, #11
 8008e5e:	781a      	ldrb	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	330b      	adds	r3, #11
 8008e64:	f042 0220 	orr.w	r2, r2, #32
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	461a      	mov	r2, r3
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	f7fe fdb3 	bl	80079e2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f103 021c 	add.w	r2, r3, #28
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	4619      	mov	r1, r3
 8008e88:	4610      	mov	r0, r2
 8008e8a:	f7fd fe2c 	bl	8006ae6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3316      	adds	r3, #22
 8008e92:	6939      	ldr	r1, [r7, #16]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fd fe26 	bl	8006ae6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3312      	adds	r3, #18
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fd fe05 	bl	8006ab0 <st_word>
					fs->wflag = 1;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe f8a2 	bl	8006ff8 <sync_fs>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7d1b      	ldrb	r3, [r3, #20]
 8008ebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff ff7b 	bl	8008dd4 <f_sync>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d118      	bne.n	8008f1a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f107 0208 	add.w	r2, r7, #8
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff fa85 	bl	8008400 <validate>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10c      	bne.n	8008f1a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fd ffa5 	bl	8006e54 <dec_lock>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d102      	bne.n	8008f1a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b092      	sub	sp, #72	@ 0x48
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008f30:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008f34:	f107 030c 	add.w	r3, r7, #12
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff f814 	bl	8007f68 <find_volume>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008f46:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f040 8099 	bne.w	8009082 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f58:	691a      	ldr	r2, [r3, #16]
 8008f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	3b02      	subs	r3, #2
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d804      	bhi.n	8008f6e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f66:	691a      	ldr	r2, [r3, #16]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	e089      	b.n	8009082 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d128      	bne.n	8008fcc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f80:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008f82:	f107 0314 	add.w	r3, r7, #20
 8008f86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe f8c2 	bl	8007112 <get_fat>
 8008f8e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f96:	d103      	bne.n	8008fa0 <f_getfree+0x7c>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008f9e:	e063      	b.n	8009068 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d103      	bne.n	8008fae <f_getfree+0x8a>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008fac:	e05c      	b.n	8009068 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <f_getfree+0x96>
 8008fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d3db      	bcc.n	8008f82 <f_getfree+0x5e>
 8008fca:	e04d      	b.n	8009068 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fdc:	2300      	movs	r3, #0
 8008fde:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d113      	bne.n	800900e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008fee:	4619      	mov	r1, r3
 8008ff0:	f7fd ffd4 	bl	8006f9c <move_window>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008ffa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d131      	bne.n	8009066 <f_getfree+0x142>
							p = fs->win;
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	3330      	adds	r3, #48	@ 0x30
 8009006:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800900c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800900e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d10f      	bne.n	8009036 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009018:	f7fd fd0e 	bl	8006a38 <ld_word>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d102      	bne.n	8009028 <f_getfree+0x104>
 8009022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009024:	3301      	adds	r3, #1
 8009026:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902a:	3302      	adds	r3, #2
 800902c:	633b      	str	r3, [r7, #48]	@ 0x30
 800902e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009030:	3b02      	subs	r3, #2
 8009032:	637b      	str	r3, [r7, #52]	@ 0x34
 8009034:	e010      	b.n	8009058 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009036:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009038:	f7fd fd17 	bl	8006a6a <ld_dword>
 800903c:	4603      	mov	r3, r0
 800903e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <f_getfree+0x128>
 8009046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009048:	3301      	adds	r3, #1
 800904a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	3304      	adds	r3, #4
 8009050:	633b      	str	r3, [r7, #48]	@ 0x30
 8009052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009054:	3b04      	subs	r3, #4
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800905a:	3b01      	subs	r3, #1
 800905c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800905e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1bd      	bne.n	8008fe0 <f_getfree+0xbc>
 8009064:	e000      	b.n	8009068 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009066:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800906c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800906e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009072:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009076:	791a      	ldrb	r2, [r3, #4]
 8009078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009082:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009086:	4618      	mov	r0, r3
 8009088:	3748      	adds	r7, #72	@ 0x48
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b09e      	sub	sp, #120	@ 0x78
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800909a:	f107 010c 	add.w	r1, r7, #12
 800909e:	1d3b      	adds	r3, r7, #4
 80090a0:	2202      	movs	r2, #2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe ff60 	bl	8007f68 <find_volume>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 80090b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f040 808e 	bne.w	80091d8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80090c2:	4611      	mov	r1, r2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe fe43 	bl	8007d50 <follow_path>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80090d0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d108      	bne.n	80090ea <f_unlink+0x5c>
 80090d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80090dc:	2102      	movs	r1, #2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fd fdac 	bl	8006c3c <chk_lock>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80090ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d172      	bne.n	80091d8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80090f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80090f6:	b25b      	sxtb	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	da03      	bge.n	8009104 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80090fc:	2306      	movs	r3, #6
 80090fe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009102:	e008      	b.n	8009116 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009104:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009110:	2307      	movs	r3, #7
 8009112:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8009116:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800911a:	2b00      	cmp	r3, #0
 800911c:	d134      	bne.n	8009188 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fc3d 	bl	80079a4 <ld_clust>
 800912a:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800912c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009130:	f003 0310 	and.w	r3, r3, #16
 8009134:	2b00      	cmp	r3, #0
 8009136:	d027      	beq.n	8009188 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800913c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800913e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009140:	f107 0310 	add.w	r3, r7, #16
 8009144:	2100      	movs	r1, #0
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe faa5 	bl	8007696 <dir_sdi>
 800914c:	4603      	mov	r3, r0
 800914e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 8009152:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009156:	2b00      	cmp	r3, #0
 8009158:	d116      	bne.n	8009188 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800915a:	f107 0310 	add.w	r3, r7, #16
 800915e:	2100      	movs	r1, #0
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fc5e 	bl	8007a22 <dir_read>
 8009166:	4603      	mov	r3, r0
 8009168:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800916c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009170:	2b00      	cmp	r3, #0
 8009172:	d102      	bne.n	800917a <f_unlink+0xec>
 8009174:	2307      	movs	r3, #7
 8009176:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800917a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800917e:	2b04      	cmp	r3, #4
 8009180:	d102      	bne.n	8009188 <f_unlink+0xfa>
 8009182:	2300      	movs	r3, #0
 8009184:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8009188:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800918c:	2b00      	cmp	r3, #0
 800918e:	d123      	bne.n	80091d8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009190:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe fd28 	bl	8007bea <dir_remove>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80091a0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10c      	bne.n	80091c2 <f_unlink+0x134>
 80091a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d009      	beq.n	80091c2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80091ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80091b2:	2200      	movs	r2, #0
 80091b4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe f93c 	bl	8007434 <remove_chain>
 80091bc:	4603      	mov	r3, r0
 80091be:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80091c2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d106      	bne.n	80091d8 <f_unlink+0x14a>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fd ff13 	bl	8006ff8 <sync_fs>
 80091d2:	4603      	mov	r3, r0
 80091d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80091d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3778      	adds	r7, #120	@ 0x78
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 80091e4:	b590      	push	{r4, r7, lr}
 80091e6:	b0a5      	sub	sp, #148	@ 0x94
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 80091ee:	463b      	mov	r3, r7
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fe1e 	bl	8007e32 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 80091f6:	f107 0120 	add.w	r1, r7, #32
 80091fa:	1d3b      	adds	r3, r7, #4
 80091fc:	2202      	movs	r2, #2
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe feb2 	bl	8007f68 <find_volume>
 8009204:	4603      	mov	r3, r0
 8009206:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800920a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800920e:	2b00      	cmp	r3, #0
 8009210:	f040 80db 	bne.w	80093ca <f_rename+0x1e6>
		djo.obj.fs = fs;
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fd95 	bl	8007d50 <follow_path>
 8009226:	4603      	mov	r3, r0
 8009228:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800922c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009230:	2b00      	cmp	r3, #0
 8009232:	d108      	bne.n	8009246 <f_rename+0x62>
 8009234:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8009238:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <f_rename+0x62>
 8009240:	2306      	movs	r3, #6
 8009242:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 8009246:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800924a:	2b00      	cmp	r3, #0
 800924c:	d108      	bne.n	8009260 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800924e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009252:	2102      	movs	r1, #2
 8009254:	4618      	mov	r0, r3
 8009256:	f7fd fcf1 	bl	8006c3c <chk_lock>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 8009260:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009264:	2b00      	cmp	r3, #0
 8009266:	f040 80b0 	bne.w	80093ca <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800926a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800926c:	f103 010b 	add.w	r1, r3, #11
 8009270:	f107 0308 	add.w	r3, r7, #8
 8009274:	2215      	movs	r2, #21
 8009276:	4618      	mov	r0, r3
 8009278:	f7fd fc61 	bl	8006b3e <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800927c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8009280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009284:	2230      	movs	r2, #48	@ 0x30
 8009286:	4618      	mov	r0, r3
 8009288:	f7fd fc59 	bl	8006b3e <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009292:	4611      	mov	r1, r2
 8009294:	4618      	mov	r0, r3
 8009296:	f7fe fd5b 	bl	8007d50 <follow_path>
 800929a:	4603      	mov	r3, r0
 800929c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 80092a0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10c      	bne.n	80092c2 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 80092a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d105      	bne.n	80092bc <f_rename+0xd8>
 80092b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d101      	bne.n	80092bc <f_rename+0xd8>
 80092b8:	2304      	movs	r3, #4
 80092ba:	e000      	b.n	80092be <f_rename+0xda>
 80092bc:	2308      	movs	r3, #8
 80092be:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 80092c2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d168      	bne.n	800939c <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 80092ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fe fc59 	bl	8007b86 <dir_register>
 80092d4:	4603      	mov	r3, r0
 80092d6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 80092da:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d15c      	bne.n	800939c <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 80092e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 80092e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092ec:	f103 000d 	add.w	r0, r3, #13
 80092f0:	f107 0308 	add.w	r3, r7, #8
 80092f4:	3302      	adds	r3, #2
 80092f6:	2213      	movs	r2, #19
 80092f8:	4619      	mov	r1, r3
 80092fa:	f7fd fc20 	bl	8006b3e <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 80092fe:	7a3a      	ldrb	r2, [r7, #8]
 8009300:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009304:	330b      	adds	r3, #11
 8009306:	f042 0220 	orr.w	r2, r2, #32
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	2201      	movs	r2, #1
 8009312:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8009314:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009318:	330b      	adds	r3, #11
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	2b00      	cmp	r3, #0
 8009322:	d03b      	beq.n	800939c <f_rename+0x1b8>
 8009324:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009328:	429a      	cmp	r2, r3
 800932a:	d037      	beq.n	800939c <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800932c:	6a3c      	ldr	r4, [r7, #32]
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fb35 	bl	80079a4 <ld_clust>
 800933a:	4603      	mov	r3, r0
 800933c:	4619      	mov	r1, r3
 800933e:	4620      	mov	r0, r4
 8009340:	f7fd fec8 	bl	80070d4 <clust2sect>
 8009344:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 8009348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800934c:	2b00      	cmp	r3, #0
 800934e:	d103      	bne.n	8009358 <f_rename+0x174>
								res = FR_INT_ERR;
 8009350:	2302      	movs	r3, #2
 8009352:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8009356:	e021      	b.n	800939c <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800935e:	4618      	mov	r0, r3
 8009360:	f7fd fe1c 	bl	8006f9c <move_window>
 8009364:	4603      	mov	r3, r0
 8009366:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	3330      	adds	r3, #48	@ 0x30
 800936e:	3320      	adds	r3, #32
 8009370:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 8009374:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10f      	bne.n	800939c <f_rename+0x1b8>
 800937c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009380:	3301      	adds	r3, #1
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2b2e      	cmp	r3, #46	@ 0x2e
 8009386:	d109      	bne.n	800939c <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800938c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe fb26 	bl	80079e2 <st_clust>
									fs->wflag = 1;
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	2201      	movs	r2, #1
 800939a:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800939c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d112      	bne.n	80093ca <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 80093a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fc1e 	bl	8007bea <dir_remove>
 80093ae:	4603      	mov	r3, r0
 80093b0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 80093b4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d106      	bne.n	80093ca <f_rename+0x1e6>
					res = sync_fs(fs);
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fd fe1a 	bl	8006ff8 <sync_fs>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80093ca:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3794      	adds	r7, #148	@ 0x94
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd90      	pop	{r4, r7, pc}

080093d6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b088      	sub	sp, #32
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
	int n = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80093ea:	e01c      	b.n	8009426 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80093ec:	f107 0310 	add.w	r3, r7, #16
 80093f0:	f107 0114 	add.w	r1, r7, #20
 80093f4:	2201      	movs	r2, #1
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff fa38 	bl	800886c <f_read>
		if (rc != 1) break;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d117      	bne.n	8009432 <f_gets+0x5c>
		c = s[0];
 8009402:	7d3b      	ldrb	r3, [r7, #20]
 8009404:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b0d      	cmp	r3, #13
 800940a:	d00b      	beq.n	8009424 <f_gets+0x4e>
		*p++ = c;
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	61ba      	str	r2, [r7, #24]
 8009412:	7dfa      	ldrb	r2, [r7, #23]
 8009414:	701a      	strb	r2, [r3, #0]
		n++;
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	3301      	adds	r3, #1
 800941a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	2b0a      	cmp	r3, #10
 8009420:	d009      	beq.n	8009436 <f_gets+0x60>
 8009422:	e000      	b.n	8009426 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009424:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	3b01      	subs	r3, #1
 800942a:	69fa      	ldr	r2, [r7, #28]
 800942c:	429a      	cmp	r2, r3
 800942e:	dbdd      	blt.n	80093ec <f_gets+0x16>
 8009430:	e002      	b.n	8009438 <f_gets+0x62>
		if (rc != 1) break;
 8009432:	bf00      	nop
 8009434:	e000      	b.n	8009438 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8009436:	bf00      	nop
	}
	*p = 0;
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	2200      	movs	r2, #0
 800943c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <f_gets+0x72>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	e000      	b.n	800944a <f_gets+0x74>
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3720      	adds	r7, #32
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	4613      	mov	r3, r2
 8009460:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009462:	2301      	movs	r3, #1
 8009464:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800946a:	4b1f      	ldr	r3, [pc, #124]	@ (80094e8 <FATFS_LinkDriverEx+0x94>)
 800946c:	7a5b      	ldrb	r3, [r3, #9]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d131      	bne.n	80094d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009474:	4b1c      	ldr	r3, [pc, #112]	@ (80094e8 <FATFS_LinkDriverEx+0x94>)
 8009476:	7a5b      	ldrb	r3, [r3, #9]
 8009478:	b2db      	uxtb	r3, r3
 800947a:	461a      	mov	r2, r3
 800947c:	4b1a      	ldr	r3, [pc, #104]	@ (80094e8 <FATFS_LinkDriverEx+0x94>)
 800947e:	2100      	movs	r1, #0
 8009480:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009482:	4b19      	ldr	r3, [pc, #100]	@ (80094e8 <FATFS_LinkDriverEx+0x94>)
 8009484:	7a5b      	ldrb	r3, [r3, #9]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	4a17      	ldr	r2, [pc, #92]	@ (80094e8 <FATFS_LinkDriverEx+0x94>)
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009492:	4b15      	ldr	r3, [pc, #84]	@ (80094e8 <FATFS_LinkDriverEx+0x94>)
 8009494:	7a5b      	ldrb	r3, [r3, #9]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	461a      	mov	r2, r3
 800949a:	4b13      	ldr	r3, [pc, #76]	@ (80094e8 <FATFS_LinkDriverEx+0x94>)
 800949c:	4413      	add	r3, r2
 800949e:	79fa      	ldrb	r2, [r7, #7]
 80094a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80094a2:	4b11      	ldr	r3, [pc, #68]	@ (80094e8 <FATFS_LinkDriverEx+0x94>)
 80094a4:	7a5b      	ldrb	r3, [r3, #9]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	1c5a      	adds	r2, r3, #1
 80094aa:	b2d1      	uxtb	r1, r2
 80094ac:	4a0e      	ldr	r2, [pc, #56]	@ (80094e8 <FATFS_LinkDriverEx+0x94>)
 80094ae:	7251      	strb	r1, [r2, #9]
 80094b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80094b2:	7dbb      	ldrb	r3, [r7, #22]
 80094b4:	3330      	adds	r3, #48	@ 0x30
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	3301      	adds	r3, #1
 80094c0:	223a      	movs	r2, #58	@ 0x3a
 80094c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	3302      	adds	r3, #2
 80094c8:	222f      	movs	r2, #47	@ 0x2f
 80094ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	3303      	adds	r3, #3
 80094d0:	2200      	movs	r2, #0
 80094d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	20000ef8 	.word	0x20000ef8

080094ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80094f6:	2200      	movs	r2, #0
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff ffaa 	bl	8009454 <FATFS_LinkDriverEx>
 8009500:	4603      	mov	r3, r0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <_strtol_l.isra.0>:
 800950c:	2b24      	cmp	r3, #36	@ 0x24
 800950e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009512:	4686      	mov	lr, r0
 8009514:	4690      	mov	r8, r2
 8009516:	d801      	bhi.n	800951c <_strtol_l.isra.0+0x10>
 8009518:	2b01      	cmp	r3, #1
 800951a:	d106      	bne.n	800952a <_strtol_l.isra.0+0x1e>
 800951c:	f001 f9b2 	bl	800a884 <__errno>
 8009520:	2316      	movs	r3, #22
 8009522:	6003      	str	r3, [r0, #0]
 8009524:	2000      	movs	r0, #0
 8009526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952a:	4834      	ldr	r0, [pc, #208]	@ (80095fc <_strtol_l.isra.0+0xf0>)
 800952c:	460d      	mov	r5, r1
 800952e:	462a      	mov	r2, r5
 8009530:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009534:	5d06      	ldrb	r6, [r0, r4]
 8009536:	f016 0608 	ands.w	r6, r6, #8
 800953a:	d1f8      	bne.n	800952e <_strtol_l.isra.0+0x22>
 800953c:	2c2d      	cmp	r4, #45	@ 0x2d
 800953e:	d110      	bne.n	8009562 <_strtol_l.isra.0+0x56>
 8009540:	782c      	ldrb	r4, [r5, #0]
 8009542:	2601      	movs	r6, #1
 8009544:	1c95      	adds	r5, r2, #2
 8009546:	f033 0210 	bics.w	r2, r3, #16
 800954a:	d115      	bne.n	8009578 <_strtol_l.isra.0+0x6c>
 800954c:	2c30      	cmp	r4, #48	@ 0x30
 800954e:	d10d      	bne.n	800956c <_strtol_l.isra.0+0x60>
 8009550:	782a      	ldrb	r2, [r5, #0]
 8009552:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009556:	2a58      	cmp	r2, #88	@ 0x58
 8009558:	d108      	bne.n	800956c <_strtol_l.isra.0+0x60>
 800955a:	786c      	ldrb	r4, [r5, #1]
 800955c:	3502      	adds	r5, #2
 800955e:	2310      	movs	r3, #16
 8009560:	e00a      	b.n	8009578 <_strtol_l.isra.0+0x6c>
 8009562:	2c2b      	cmp	r4, #43	@ 0x2b
 8009564:	bf04      	itt	eq
 8009566:	782c      	ldrbeq	r4, [r5, #0]
 8009568:	1c95      	addeq	r5, r2, #2
 800956a:	e7ec      	b.n	8009546 <_strtol_l.isra.0+0x3a>
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1f6      	bne.n	800955e <_strtol_l.isra.0+0x52>
 8009570:	2c30      	cmp	r4, #48	@ 0x30
 8009572:	bf14      	ite	ne
 8009574:	230a      	movne	r3, #10
 8009576:	2308      	moveq	r3, #8
 8009578:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800957c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009580:	2200      	movs	r2, #0
 8009582:	fbbc f9f3 	udiv	r9, ip, r3
 8009586:	4610      	mov	r0, r2
 8009588:	fb03 ca19 	mls	sl, r3, r9, ip
 800958c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009590:	2f09      	cmp	r7, #9
 8009592:	d80f      	bhi.n	80095b4 <_strtol_l.isra.0+0xa8>
 8009594:	463c      	mov	r4, r7
 8009596:	42a3      	cmp	r3, r4
 8009598:	dd1b      	ble.n	80095d2 <_strtol_l.isra.0+0xc6>
 800959a:	1c57      	adds	r7, r2, #1
 800959c:	d007      	beq.n	80095ae <_strtol_l.isra.0+0xa2>
 800959e:	4581      	cmp	r9, r0
 80095a0:	d314      	bcc.n	80095cc <_strtol_l.isra.0+0xc0>
 80095a2:	d101      	bne.n	80095a8 <_strtol_l.isra.0+0x9c>
 80095a4:	45a2      	cmp	sl, r4
 80095a6:	db11      	blt.n	80095cc <_strtol_l.isra.0+0xc0>
 80095a8:	fb00 4003 	mla	r0, r0, r3, r4
 80095ac:	2201      	movs	r2, #1
 80095ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095b2:	e7eb      	b.n	800958c <_strtol_l.isra.0+0x80>
 80095b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80095b8:	2f19      	cmp	r7, #25
 80095ba:	d801      	bhi.n	80095c0 <_strtol_l.isra.0+0xb4>
 80095bc:	3c37      	subs	r4, #55	@ 0x37
 80095be:	e7ea      	b.n	8009596 <_strtol_l.isra.0+0x8a>
 80095c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80095c4:	2f19      	cmp	r7, #25
 80095c6:	d804      	bhi.n	80095d2 <_strtol_l.isra.0+0xc6>
 80095c8:	3c57      	subs	r4, #87	@ 0x57
 80095ca:	e7e4      	b.n	8009596 <_strtol_l.isra.0+0x8a>
 80095cc:	f04f 32ff 	mov.w	r2, #4294967295
 80095d0:	e7ed      	b.n	80095ae <_strtol_l.isra.0+0xa2>
 80095d2:	1c53      	adds	r3, r2, #1
 80095d4:	d108      	bne.n	80095e8 <_strtol_l.isra.0+0xdc>
 80095d6:	2322      	movs	r3, #34	@ 0x22
 80095d8:	f8ce 3000 	str.w	r3, [lr]
 80095dc:	4660      	mov	r0, ip
 80095de:	f1b8 0f00 	cmp.w	r8, #0
 80095e2:	d0a0      	beq.n	8009526 <_strtol_l.isra.0+0x1a>
 80095e4:	1e69      	subs	r1, r5, #1
 80095e6:	e006      	b.n	80095f6 <_strtol_l.isra.0+0xea>
 80095e8:	b106      	cbz	r6, 80095ec <_strtol_l.isra.0+0xe0>
 80095ea:	4240      	negs	r0, r0
 80095ec:	f1b8 0f00 	cmp.w	r8, #0
 80095f0:	d099      	beq.n	8009526 <_strtol_l.isra.0+0x1a>
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	d1f6      	bne.n	80095e4 <_strtol_l.isra.0+0xd8>
 80095f6:	f8c8 1000 	str.w	r1, [r8]
 80095fa:	e794      	b.n	8009526 <_strtol_l.isra.0+0x1a>
 80095fc:	0800e501 	.word	0x0800e501

08009600 <_strtol_r>:
 8009600:	f7ff bf84 	b.w	800950c <_strtol_l.isra.0>

08009604 <strtol>:
 8009604:	4613      	mov	r3, r2
 8009606:	460a      	mov	r2, r1
 8009608:	4601      	mov	r1, r0
 800960a:	4802      	ldr	r0, [pc, #8]	@ (8009614 <strtol+0x10>)
 800960c:	6800      	ldr	r0, [r0, #0]
 800960e:	f7ff bf7d 	b.w	800950c <_strtol_l.isra.0>
 8009612:	bf00      	nop
 8009614:	20000040 	.word	0x20000040

08009618 <__cvt>:
 8009618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800961c:	ec57 6b10 	vmov	r6, r7, d0
 8009620:	2f00      	cmp	r7, #0
 8009622:	460c      	mov	r4, r1
 8009624:	4619      	mov	r1, r3
 8009626:	463b      	mov	r3, r7
 8009628:	bfbb      	ittet	lt
 800962a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800962e:	461f      	movlt	r7, r3
 8009630:	2300      	movge	r3, #0
 8009632:	232d      	movlt	r3, #45	@ 0x2d
 8009634:	700b      	strb	r3, [r1, #0]
 8009636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009638:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800963c:	4691      	mov	r9, r2
 800963e:	f023 0820 	bic.w	r8, r3, #32
 8009642:	bfbc      	itt	lt
 8009644:	4632      	movlt	r2, r6
 8009646:	4616      	movlt	r6, r2
 8009648:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800964c:	d005      	beq.n	800965a <__cvt+0x42>
 800964e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009652:	d100      	bne.n	8009656 <__cvt+0x3e>
 8009654:	3401      	adds	r4, #1
 8009656:	2102      	movs	r1, #2
 8009658:	e000      	b.n	800965c <__cvt+0x44>
 800965a:	2103      	movs	r1, #3
 800965c:	ab03      	add	r3, sp, #12
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	ab02      	add	r3, sp, #8
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	ec47 6b10 	vmov	d0, r6, r7
 8009668:	4653      	mov	r3, sl
 800966a:	4622      	mov	r2, r4
 800966c:	f001 f9e4 	bl	800aa38 <_dtoa_r>
 8009670:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009674:	4605      	mov	r5, r0
 8009676:	d119      	bne.n	80096ac <__cvt+0x94>
 8009678:	f019 0f01 	tst.w	r9, #1
 800967c:	d00e      	beq.n	800969c <__cvt+0x84>
 800967e:	eb00 0904 	add.w	r9, r0, r4
 8009682:	2200      	movs	r2, #0
 8009684:	2300      	movs	r3, #0
 8009686:	4630      	mov	r0, r6
 8009688:	4639      	mov	r1, r7
 800968a:	f7f7 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800968e:	b108      	cbz	r0, 8009694 <__cvt+0x7c>
 8009690:	f8cd 900c 	str.w	r9, [sp, #12]
 8009694:	2230      	movs	r2, #48	@ 0x30
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	454b      	cmp	r3, r9
 800969a:	d31e      	bcc.n	80096da <__cvt+0xc2>
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096a0:	1b5b      	subs	r3, r3, r5
 80096a2:	4628      	mov	r0, r5
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	b004      	add	sp, #16
 80096a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80096b0:	eb00 0904 	add.w	r9, r0, r4
 80096b4:	d1e5      	bne.n	8009682 <__cvt+0x6a>
 80096b6:	7803      	ldrb	r3, [r0, #0]
 80096b8:	2b30      	cmp	r3, #48	@ 0x30
 80096ba:	d10a      	bne.n	80096d2 <__cvt+0xba>
 80096bc:	2200      	movs	r2, #0
 80096be:	2300      	movs	r3, #0
 80096c0:	4630      	mov	r0, r6
 80096c2:	4639      	mov	r1, r7
 80096c4:	f7f7 fa20 	bl	8000b08 <__aeabi_dcmpeq>
 80096c8:	b918      	cbnz	r0, 80096d2 <__cvt+0xba>
 80096ca:	f1c4 0401 	rsb	r4, r4, #1
 80096ce:	f8ca 4000 	str.w	r4, [sl]
 80096d2:	f8da 3000 	ldr.w	r3, [sl]
 80096d6:	4499      	add	r9, r3
 80096d8:	e7d3      	b.n	8009682 <__cvt+0x6a>
 80096da:	1c59      	adds	r1, r3, #1
 80096dc:	9103      	str	r1, [sp, #12]
 80096de:	701a      	strb	r2, [r3, #0]
 80096e0:	e7d9      	b.n	8009696 <__cvt+0x7e>

080096e2 <__exponent>:
 80096e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096e4:	2900      	cmp	r1, #0
 80096e6:	bfba      	itte	lt
 80096e8:	4249      	neglt	r1, r1
 80096ea:	232d      	movlt	r3, #45	@ 0x2d
 80096ec:	232b      	movge	r3, #43	@ 0x2b
 80096ee:	2909      	cmp	r1, #9
 80096f0:	7002      	strb	r2, [r0, #0]
 80096f2:	7043      	strb	r3, [r0, #1]
 80096f4:	dd29      	ble.n	800974a <__exponent+0x68>
 80096f6:	f10d 0307 	add.w	r3, sp, #7
 80096fa:	461d      	mov	r5, r3
 80096fc:	270a      	movs	r7, #10
 80096fe:	461a      	mov	r2, r3
 8009700:	fbb1 f6f7 	udiv	r6, r1, r7
 8009704:	fb07 1416 	mls	r4, r7, r6, r1
 8009708:	3430      	adds	r4, #48	@ 0x30
 800970a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800970e:	460c      	mov	r4, r1
 8009710:	2c63      	cmp	r4, #99	@ 0x63
 8009712:	f103 33ff 	add.w	r3, r3, #4294967295
 8009716:	4631      	mov	r1, r6
 8009718:	dcf1      	bgt.n	80096fe <__exponent+0x1c>
 800971a:	3130      	adds	r1, #48	@ 0x30
 800971c:	1e94      	subs	r4, r2, #2
 800971e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009722:	1c41      	adds	r1, r0, #1
 8009724:	4623      	mov	r3, r4
 8009726:	42ab      	cmp	r3, r5
 8009728:	d30a      	bcc.n	8009740 <__exponent+0x5e>
 800972a:	f10d 0309 	add.w	r3, sp, #9
 800972e:	1a9b      	subs	r3, r3, r2
 8009730:	42ac      	cmp	r4, r5
 8009732:	bf88      	it	hi
 8009734:	2300      	movhi	r3, #0
 8009736:	3302      	adds	r3, #2
 8009738:	4403      	add	r3, r0
 800973a:	1a18      	subs	r0, r3, r0
 800973c:	b003      	add	sp, #12
 800973e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009740:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009744:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009748:	e7ed      	b.n	8009726 <__exponent+0x44>
 800974a:	2330      	movs	r3, #48	@ 0x30
 800974c:	3130      	adds	r1, #48	@ 0x30
 800974e:	7083      	strb	r3, [r0, #2]
 8009750:	70c1      	strb	r1, [r0, #3]
 8009752:	1d03      	adds	r3, r0, #4
 8009754:	e7f1      	b.n	800973a <__exponent+0x58>
	...

08009758 <_printf_float>:
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	b08d      	sub	sp, #52	@ 0x34
 800975e:	460c      	mov	r4, r1
 8009760:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009764:	4616      	mov	r6, r2
 8009766:	461f      	mov	r7, r3
 8009768:	4605      	mov	r5, r0
 800976a:	f001 f841 	bl	800a7f0 <_localeconv_r>
 800976e:	6803      	ldr	r3, [r0, #0]
 8009770:	9304      	str	r3, [sp, #16]
 8009772:	4618      	mov	r0, r3
 8009774:	f7f6 fd9c 	bl	80002b0 <strlen>
 8009778:	2300      	movs	r3, #0
 800977a:	930a      	str	r3, [sp, #40]	@ 0x28
 800977c:	f8d8 3000 	ldr.w	r3, [r8]
 8009780:	9005      	str	r0, [sp, #20]
 8009782:	3307      	adds	r3, #7
 8009784:	f023 0307 	bic.w	r3, r3, #7
 8009788:	f103 0208 	add.w	r2, r3, #8
 800978c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009790:	f8d4 b000 	ldr.w	fp, [r4]
 8009794:	f8c8 2000 	str.w	r2, [r8]
 8009798:	e9d3 8900 	ldrd	r8, r9, [r3]
 800979c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80097a0:	9307      	str	r3, [sp, #28]
 80097a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80097a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80097aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097ae:	4b9c      	ldr	r3, [pc, #624]	@ (8009a20 <_printf_float+0x2c8>)
 80097b0:	f04f 32ff 	mov.w	r2, #4294967295
 80097b4:	f7f7 f9da 	bl	8000b6c <__aeabi_dcmpun>
 80097b8:	bb70      	cbnz	r0, 8009818 <_printf_float+0xc0>
 80097ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097be:	4b98      	ldr	r3, [pc, #608]	@ (8009a20 <_printf_float+0x2c8>)
 80097c0:	f04f 32ff 	mov.w	r2, #4294967295
 80097c4:	f7f7 f9b4 	bl	8000b30 <__aeabi_dcmple>
 80097c8:	bb30      	cbnz	r0, 8009818 <_printf_float+0xc0>
 80097ca:	2200      	movs	r2, #0
 80097cc:	2300      	movs	r3, #0
 80097ce:	4640      	mov	r0, r8
 80097d0:	4649      	mov	r1, r9
 80097d2:	f7f7 f9a3 	bl	8000b1c <__aeabi_dcmplt>
 80097d6:	b110      	cbz	r0, 80097de <_printf_float+0x86>
 80097d8:	232d      	movs	r3, #45	@ 0x2d
 80097da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097de:	4a91      	ldr	r2, [pc, #580]	@ (8009a24 <_printf_float+0x2cc>)
 80097e0:	4b91      	ldr	r3, [pc, #580]	@ (8009a28 <_printf_float+0x2d0>)
 80097e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80097e6:	bf8c      	ite	hi
 80097e8:	4690      	movhi	r8, r2
 80097ea:	4698      	movls	r8, r3
 80097ec:	2303      	movs	r3, #3
 80097ee:	6123      	str	r3, [r4, #16]
 80097f0:	f02b 0304 	bic.w	r3, fp, #4
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	f04f 0900 	mov.w	r9, #0
 80097fa:	9700      	str	r7, [sp, #0]
 80097fc:	4633      	mov	r3, r6
 80097fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	f000 f9d2 	bl	8009bac <_printf_common>
 8009808:	3001      	adds	r0, #1
 800980a:	f040 808d 	bne.w	8009928 <_printf_float+0x1d0>
 800980e:	f04f 30ff 	mov.w	r0, #4294967295
 8009812:	b00d      	add	sp, #52	@ 0x34
 8009814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	4640      	mov	r0, r8
 800981e:	4649      	mov	r1, r9
 8009820:	f7f7 f9a4 	bl	8000b6c <__aeabi_dcmpun>
 8009824:	b140      	cbz	r0, 8009838 <_printf_float+0xe0>
 8009826:	464b      	mov	r3, r9
 8009828:	2b00      	cmp	r3, #0
 800982a:	bfbc      	itt	lt
 800982c:	232d      	movlt	r3, #45	@ 0x2d
 800982e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009832:	4a7e      	ldr	r2, [pc, #504]	@ (8009a2c <_printf_float+0x2d4>)
 8009834:	4b7e      	ldr	r3, [pc, #504]	@ (8009a30 <_printf_float+0x2d8>)
 8009836:	e7d4      	b.n	80097e2 <_printf_float+0x8a>
 8009838:	6863      	ldr	r3, [r4, #4]
 800983a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800983e:	9206      	str	r2, [sp, #24]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	d13b      	bne.n	80098bc <_printf_float+0x164>
 8009844:	2306      	movs	r3, #6
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800984c:	2300      	movs	r3, #0
 800984e:	6022      	str	r2, [r4, #0]
 8009850:	9303      	str	r3, [sp, #12]
 8009852:	ab0a      	add	r3, sp, #40	@ 0x28
 8009854:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009858:	ab09      	add	r3, sp, #36	@ 0x24
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	6861      	ldr	r1, [r4, #4]
 800985e:	ec49 8b10 	vmov	d0, r8, r9
 8009862:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009866:	4628      	mov	r0, r5
 8009868:	f7ff fed6 	bl	8009618 <__cvt>
 800986c:	9b06      	ldr	r3, [sp, #24]
 800986e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009870:	2b47      	cmp	r3, #71	@ 0x47
 8009872:	4680      	mov	r8, r0
 8009874:	d129      	bne.n	80098ca <_printf_float+0x172>
 8009876:	1cc8      	adds	r0, r1, #3
 8009878:	db02      	blt.n	8009880 <_printf_float+0x128>
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	4299      	cmp	r1, r3
 800987e:	dd41      	ble.n	8009904 <_printf_float+0x1ac>
 8009880:	f1aa 0a02 	sub.w	sl, sl, #2
 8009884:	fa5f fa8a 	uxtb.w	sl, sl
 8009888:	3901      	subs	r1, #1
 800988a:	4652      	mov	r2, sl
 800988c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009890:	9109      	str	r1, [sp, #36]	@ 0x24
 8009892:	f7ff ff26 	bl	80096e2 <__exponent>
 8009896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009898:	1813      	adds	r3, r2, r0
 800989a:	2a01      	cmp	r2, #1
 800989c:	4681      	mov	r9, r0
 800989e:	6123      	str	r3, [r4, #16]
 80098a0:	dc02      	bgt.n	80098a8 <_printf_float+0x150>
 80098a2:	6822      	ldr	r2, [r4, #0]
 80098a4:	07d2      	lsls	r2, r2, #31
 80098a6:	d501      	bpl.n	80098ac <_printf_float+0x154>
 80098a8:	3301      	adds	r3, #1
 80098aa:	6123      	str	r3, [r4, #16]
 80098ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0a2      	beq.n	80097fa <_printf_float+0xa2>
 80098b4:	232d      	movs	r3, #45	@ 0x2d
 80098b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098ba:	e79e      	b.n	80097fa <_printf_float+0xa2>
 80098bc:	9a06      	ldr	r2, [sp, #24]
 80098be:	2a47      	cmp	r2, #71	@ 0x47
 80098c0:	d1c2      	bne.n	8009848 <_printf_float+0xf0>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1c0      	bne.n	8009848 <_printf_float+0xf0>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e7bd      	b.n	8009846 <_printf_float+0xee>
 80098ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098ce:	d9db      	bls.n	8009888 <_printf_float+0x130>
 80098d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80098d4:	d118      	bne.n	8009908 <_printf_float+0x1b0>
 80098d6:	2900      	cmp	r1, #0
 80098d8:	6863      	ldr	r3, [r4, #4]
 80098da:	dd0b      	ble.n	80098f4 <_printf_float+0x19c>
 80098dc:	6121      	str	r1, [r4, #16]
 80098de:	b913      	cbnz	r3, 80098e6 <_printf_float+0x18e>
 80098e0:	6822      	ldr	r2, [r4, #0]
 80098e2:	07d0      	lsls	r0, r2, #31
 80098e4:	d502      	bpl.n	80098ec <_printf_float+0x194>
 80098e6:	3301      	adds	r3, #1
 80098e8:	440b      	add	r3, r1
 80098ea:	6123      	str	r3, [r4, #16]
 80098ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80098ee:	f04f 0900 	mov.w	r9, #0
 80098f2:	e7db      	b.n	80098ac <_printf_float+0x154>
 80098f4:	b913      	cbnz	r3, 80098fc <_printf_float+0x1a4>
 80098f6:	6822      	ldr	r2, [r4, #0]
 80098f8:	07d2      	lsls	r2, r2, #31
 80098fa:	d501      	bpl.n	8009900 <_printf_float+0x1a8>
 80098fc:	3302      	adds	r3, #2
 80098fe:	e7f4      	b.n	80098ea <_printf_float+0x192>
 8009900:	2301      	movs	r3, #1
 8009902:	e7f2      	b.n	80098ea <_printf_float+0x192>
 8009904:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800990a:	4299      	cmp	r1, r3
 800990c:	db05      	blt.n	800991a <_printf_float+0x1c2>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	6121      	str	r1, [r4, #16]
 8009912:	07d8      	lsls	r0, r3, #31
 8009914:	d5ea      	bpl.n	80098ec <_printf_float+0x194>
 8009916:	1c4b      	adds	r3, r1, #1
 8009918:	e7e7      	b.n	80098ea <_printf_float+0x192>
 800991a:	2900      	cmp	r1, #0
 800991c:	bfd4      	ite	le
 800991e:	f1c1 0202 	rsble	r2, r1, #2
 8009922:	2201      	movgt	r2, #1
 8009924:	4413      	add	r3, r2
 8009926:	e7e0      	b.n	80098ea <_printf_float+0x192>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	055a      	lsls	r2, r3, #21
 800992c:	d407      	bmi.n	800993e <_printf_float+0x1e6>
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	4642      	mov	r2, r8
 8009932:	4631      	mov	r1, r6
 8009934:	4628      	mov	r0, r5
 8009936:	47b8      	blx	r7
 8009938:	3001      	adds	r0, #1
 800993a:	d12b      	bne.n	8009994 <_printf_float+0x23c>
 800993c:	e767      	b.n	800980e <_printf_float+0xb6>
 800993e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009942:	f240 80dd 	bls.w	8009b00 <_printf_float+0x3a8>
 8009946:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800994a:	2200      	movs	r2, #0
 800994c:	2300      	movs	r3, #0
 800994e:	f7f7 f8db 	bl	8000b08 <__aeabi_dcmpeq>
 8009952:	2800      	cmp	r0, #0
 8009954:	d033      	beq.n	80099be <_printf_float+0x266>
 8009956:	4a37      	ldr	r2, [pc, #220]	@ (8009a34 <_printf_float+0x2dc>)
 8009958:	2301      	movs	r3, #1
 800995a:	4631      	mov	r1, r6
 800995c:	4628      	mov	r0, r5
 800995e:	47b8      	blx	r7
 8009960:	3001      	adds	r0, #1
 8009962:	f43f af54 	beq.w	800980e <_printf_float+0xb6>
 8009966:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800996a:	4543      	cmp	r3, r8
 800996c:	db02      	blt.n	8009974 <_printf_float+0x21c>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	07d8      	lsls	r0, r3, #31
 8009972:	d50f      	bpl.n	8009994 <_printf_float+0x23c>
 8009974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	47b8      	blx	r7
 800997e:	3001      	adds	r0, #1
 8009980:	f43f af45 	beq.w	800980e <_printf_float+0xb6>
 8009984:	f04f 0900 	mov.w	r9, #0
 8009988:	f108 38ff 	add.w	r8, r8, #4294967295
 800998c:	f104 0a1a 	add.w	sl, r4, #26
 8009990:	45c8      	cmp	r8, r9
 8009992:	dc09      	bgt.n	80099a8 <_printf_float+0x250>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	079b      	lsls	r3, r3, #30
 8009998:	f100 8103 	bmi.w	8009ba2 <_printf_float+0x44a>
 800999c:	68e0      	ldr	r0, [r4, #12]
 800999e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099a0:	4298      	cmp	r0, r3
 80099a2:	bfb8      	it	lt
 80099a4:	4618      	movlt	r0, r3
 80099a6:	e734      	b.n	8009812 <_printf_float+0xba>
 80099a8:	2301      	movs	r3, #1
 80099aa:	4652      	mov	r2, sl
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	f43f af2b 	beq.w	800980e <_printf_float+0xb6>
 80099b8:	f109 0901 	add.w	r9, r9, #1
 80099bc:	e7e8      	b.n	8009990 <_printf_float+0x238>
 80099be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc39      	bgt.n	8009a38 <_printf_float+0x2e0>
 80099c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009a34 <_printf_float+0x2dc>)
 80099c6:	2301      	movs	r3, #1
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f af1d 	beq.w	800980e <_printf_float+0xb6>
 80099d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80099d8:	ea59 0303 	orrs.w	r3, r9, r3
 80099dc:	d102      	bne.n	80099e4 <_printf_float+0x28c>
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	07d9      	lsls	r1, r3, #31
 80099e2:	d5d7      	bpl.n	8009994 <_printf_float+0x23c>
 80099e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	f43f af0d 	beq.w	800980e <_printf_float+0xb6>
 80099f4:	f04f 0a00 	mov.w	sl, #0
 80099f8:	f104 0b1a 	add.w	fp, r4, #26
 80099fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099fe:	425b      	negs	r3, r3
 8009a00:	4553      	cmp	r3, sl
 8009a02:	dc01      	bgt.n	8009a08 <_printf_float+0x2b0>
 8009a04:	464b      	mov	r3, r9
 8009a06:	e793      	b.n	8009930 <_printf_float+0x1d8>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	465a      	mov	r2, fp
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47b8      	blx	r7
 8009a12:	3001      	adds	r0, #1
 8009a14:	f43f aefb 	beq.w	800980e <_printf_float+0xb6>
 8009a18:	f10a 0a01 	add.w	sl, sl, #1
 8009a1c:	e7ee      	b.n	80099fc <_printf_float+0x2a4>
 8009a1e:	bf00      	nop
 8009a20:	7fefffff 	.word	0x7fefffff
 8009a24:	0800e605 	.word	0x0800e605
 8009a28:	0800e601 	.word	0x0800e601
 8009a2c:	0800e60d 	.word	0x0800e60d
 8009a30:	0800e609 	.word	0x0800e609
 8009a34:	0800e611 	.word	0x0800e611
 8009a38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a3e:	4553      	cmp	r3, sl
 8009a40:	bfa8      	it	ge
 8009a42:	4653      	movge	r3, sl
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	4699      	mov	r9, r3
 8009a48:	dc36      	bgt.n	8009ab8 <_printf_float+0x360>
 8009a4a:	f04f 0b00 	mov.w	fp, #0
 8009a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a52:	f104 021a 	add.w	r2, r4, #26
 8009a56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a58:	9306      	str	r3, [sp, #24]
 8009a5a:	eba3 0309 	sub.w	r3, r3, r9
 8009a5e:	455b      	cmp	r3, fp
 8009a60:	dc31      	bgt.n	8009ac6 <_printf_float+0x36e>
 8009a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a64:	459a      	cmp	sl, r3
 8009a66:	dc3a      	bgt.n	8009ade <_printf_float+0x386>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	07da      	lsls	r2, r3, #31
 8009a6c:	d437      	bmi.n	8009ade <_printf_float+0x386>
 8009a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a70:	ebaa 0903 	sub.w	r9, sl, r3
 8009a74:	9b06      	ldr	r3, [sp, #24]
 8009a76:	ebaa 0303 	sub.w	r3, sl, r3
 8009a7a:	4599      	cmp	r9, r3
 8009a7c:	bfa8      	it	ge
 8009a7e:	4699      	movge	r9, r3
 8009a80:	f1b9 0f00 	cmp.w	r9, #0
 8009a84:	dc33      	bgt.n	8009aee <_printf_float+0x396>
 8009a86:	f04f 0800 	mov.w	r8, #0
 8009a8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a8e:	f104 0b1a 	add.w	fp, r4, #26
 8009a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a94:	ebaa 0303 	sub.w	r3, sl, r3
 8009a98:	eba3 0309 	sub.w	r3, r3, r9
 8009a9c:	4543      	cmp	r3, r8
 8009a9e:	f77f af79 	ble.w	8009994 <_printf_float+0x23c>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	465a      	mov	r2, fp
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b8      	blx	r7
 8009aac:	3001      	adds	r0, #1
 8009aae:	f43f aeae 	beq.w	800980e <_printf_float+0xb6>
 8009ab2:	f108 0801 	add.w	r8, r8, #1
 8009ab6:	e7ec      	b.n	8009a92 <_printf_float+0x33a>
 8009ab8:	4642      	mov	r2, r8
 8009aba:	4631      	mov	r1, r6
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d1c2      	bne.n	8009a4a <_printf_float+0x2f2>
 8009ac4:	e6a3      	b.n	800980e <_printf_float+0xb6>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4628      	mov	r0, r5
 8009acc:	9206      	str	r2, [sp, #24]
 8009ace:	47b8      	blx	r7
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	f43f ae9c 	beq.w	800980e <_printf_float+0xb6>
 8009ad6:	9a06      	ldr	r2, [sp, #24]
 8009ad8:	f10b 0b01 	add.w	fp, fp, #1
 8009adc:	e7bb      	b.n	8009a56 <_printf_float+0x2fe>
 8009ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	47b8      	blx	r7
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d1c0      	bne.n	8009a6e <_printf_float+0x316>
 8009aec:	e68f      	b.n	800980e <_printf_float+0xb6>
 8009aee:	9a06      	ldr	r2, [sp, #24]
 8009af0:	464b      	mov	r3, r9
 8009af2:	4442      	add	r2, r8
 8009af4:	4631      	mov	r1, r6
 8009af6:	4628      	mov	r0, r5
 8009af8:	47b8      	blx	r7
 8009afa:	3001      	adds	r0, #1
 8009afc:	d1c3      	bne.n	8009a86 <_printf_float+0x32e>
 8009afe:	e686      	b.n	800980e <_printf_float+0xb6>
 8009b00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b04:	f1ba 0f01 	cmp.w	sl, #1
 8009b08:	dc01      	bgt.n	8009b0e <_printf_float+0x3b6>
 8009b0a:	07db      	lsls	r3, r3, #31
 8009b0c:	d536      	bpl.n	8009b7c <_printf_float+0x424>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	4642      	mov	r2, r8
 8009b12:	4631      	mov	r1, r6
 8009b14:	4628      	mov	r0, r5
 8009b16:	47b8      	blx	r7
 8009b18:	3001      	adds	r0, #1
 8009b1a:	f43f ae78 	beq.w	800980e <_printf_float+0xb6>
 8009b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b22:	4631      	mov	r1, r6
 8009b24:	4628      	mov	r0, r5
 8009b26:	47b8      	blx	r7
 8009b28:	3001      	adds	r0, #1
 8009b2a:	f43f ae70 	beq.w	800980e <_printf_float+0xb6>
 8009b2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b32:	2200      	movs	r2, #0
 8009b34:	2300      	movs	r3, #0
 8009b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b3a:	f7f6 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 8009b3e:	b9c0      	cbnz	r0, 8009b72 <_printf_float+0x41a>
 8009b40:	4653      	mov	r3, sl
 8009b42:	f108 0201 	add.w	r2, r8, #1
 8009b46:	4631      	mov	r1, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b8      	blx	r7
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d10c      	bne.n	8009b6a <_printf_float+0x412>
 8009b50:	e65d      	b.n	800980e <_printf_float+0xb6>
 8009b52:	2301      	movs	r3, #1
 8009b54:	465a      	mov	r2, fp
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	47b8      	blx	r7
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	f43f ae56 	beq.w	800980e <_printf_float+0xb6>
 8009b62:	f108 0801 	add.w	r8, r8, #1
 8009b66:	45d0      	cmp	r8, sl
 8009b68:	dbf3      	blt.n	8009b52 <_printf_float+0x3fa>
 8009b6a:	464b      	mov	r3, r9
 8009b6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b70:	e6df      	b.n	8009932 <_printf_float+0x1da>
 8009b72:	f04f 0800 	mov.w	r8, #0
 8009b76:	f104 0b1a 	add.w	fp, r4, #26
 8009b7a:	e7f4      	b.n	8009b66 <_printf_float+0x40e>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4642      	mov	r2, r8
 8009b80:	e7e1      	b.n	8009b46 <_printf_float+0x3ee>
 8009b82:	2301      	movs	r3, #1
 8009b84:	464a      	mov	r2, r9
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	f43f ae3e 	beq.w	800980e <_printf_float+0xb6>
 8009b92:	f108 0801 	add.w	r8, r8, #1
 8009b96:	68e3      	ldr	r3, [r4, #12]
 8009b98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b9a:	1a5b      	subs	r3, r3, r1
 8009b9c:	4543      	cmp	r3, r8
 8009b9e:	dcf0      	bgt.n	8009b82 <_printf_float+0x42a>
 8009ba0:	e6fc      	b.n	800999c <_printf_float+0x244>
 8009ba2:	f04f 0800 	mov.w	r8, #0
 8009ba6:	f104 0919 	add.w	r9, r4, #25
 8009baa:	e7f4      	b.n	8009b96 <_printf_float+0x43e>

08009bac <_printf_common>:
 8009bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb0:	4616      	mov	r6, r2
 8009bb2:	4698      	mov	r8, r3
 8009bb4:	688a      	ldr	r2, [r1, #8]
 8009bb6:	690b      	ldr	r3, [r1, #16]
 8009bb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	bfb8      	it	lt
 8009bc0:	4613      	movlt	r3, r2
 8009bc2:	6033      	str	r3, [r6, #0]
 8009bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009bc8:	4607      	mov	r7, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	b10a      	cbz	r2, 8009bd2 <_printf_common+0x26>
 8009bce:	3301      	adds	r3, #1
 8009bd0:	6033      	str	r3, [r6, #0]
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	0699      	lsls	r1, r3, #26
 8009bd6:	bf42      	ittt	mi
 8009bd8:	6833      	ldrmi	r3, [r6, #0]
 8009bda:	3302      	addmi	r3, #2
 8009bdc:	6033      	strmi	r3, [r6, #0]
 8009bde:	6825      	ldr	r5, [r4, #0]
 8009be0:	f015 0506 	ands.w	r5, r5, #6
 8009be4:	d106      	bne.n	8009bf4 <_printf_common+0x48>
 8009be6:	f104 0a19 	add.w	sl, r4, #25
 8009bea:	68e3      	ldr	r3, [r4, #12]
 8009bec:	6832      	ldr	r2, [r6, #0]
 8009bee:	1a9b      	subs	r3, r3, r2
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	dc26      	bgt.n	8009c42 <_printf_common+0x96>
 8009bf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009bf8:	6822      	ldr	r2, [r4, #0]
 8009bfa:	3b00      	subs	r3, #0
 8009bfc:	bf18      	it	ne
 8009bfe:	2301      	movne	r3, #1
 8009c00:	0692      	lsls	r2, r2, #26
 8009c02:	d42b      	bmi.n	8009c5c <_printf_common+0xb0>
 8009c04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c08:	4641      	mov	r1, r8
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	47c8      	blx	r9
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d01e      	beq.n	8009c50 <_printf_common+0xa4>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	6922      	ldr	r2, [r4, #16]
 8009c16:	f003 0306 	and.w	r3, r3, #6
 8009c1a:	2b04      	cmp	r3, #4
 8009c1c:	bf02      	ittt	eq
 8009c1e:	68e5      	ldreq	r5, [r4, #12]
 8009c20:	6833      	ldreq	r3, [r6, #0]
 8009c22:	1aed      	subeq	r5, r5, r3
 8009c24:	68a3      	ldr	r3, [r4, #8]
 8009c26:	bf0c      	ite	eq
 8009c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c2c:	2500      	movne	r5, #0
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	bfc4      	itt	gt
 8009c32:	1a9b      	subgt	r3, r3, r2
 8009c34:	18ed      	addgt	r5, r5, r3
 8009c36:	2600      	movs	r6, #0
 8009c38:	341a      	adds	r4, #26
 8009c3a:	42b5      	cmp	r5, r6
 8009c3c:	d11a      	bne.n	8009c74 <_printf_common+0xc8>
 8009c3e:	2000      	movs	r0, #0
 8009c40:	e008      	b.n	8009c54 <_printf_common+0xa8>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4652      	mov	r2, sl
 8009c46:	4641      	mov	r1, r8
 8009c48:	4638      	mov	r0, r7
 8009c4a:	47c8      	blx	r9
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d103      	bne.n	8009c58 <_printf_common+0xac>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c58:	3501      	adds	r5, #1
 8009c5a:	e7c6      	b.n	8009bea <_printf_common+0x3e>
 8009c5c:	18e1      	adds	r1, r4, r3
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	2030      	movs	r0, #48	@ 0x30
 8009c62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c66:	4422      	add	r2, r4
 8009c68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c70:	3302      	adds	r3, #2
 8009c72:	e7c7      	b.n	8009c04 <_printf_common+0x58>
 8009c74:	2301      	movs	r3, #1
 8009c76:	4622      	mov	r2, r4
 8009c78:	4641      	mov	r1, r8
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	47c8      	blx	r9
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d0e6      	beq.n	8009c50 <_printf_common+0xa4>
 8009c82:	3601      	adds	r6, #1
 8009c84:	e7d9      	b.n	8009c3a <_printf_common+0x8e>
	...

08009c88 <_printf_i>:
 8009c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c8c:	7e0f      	ldrb	r7, [r1, #24]
 8009c8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c90:	2f78      	cmp	r7, #120	@ 0x78
 8009c92:	4691      	mov	r9, r2
 8009c94:	4680      	mov	r8, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	469a      	mov	sl, r3
 8009c9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c9e:	d807      	bhi.n	8009cb0 <_printf_i+0x28>
 8009ca0:	2f62      	cmp	r7, #98	@ 0x62
 8009ca2:	d80a      	bhi.n	8009cba <_printf_i+0x32>
 8009ca4:	2f00      	cmp	r7, #0
 8009ca6:	f000 80d1 	beq.w	8009e4c <_printf_i+0x1c4>
 8009caa:	2f58      	cmp	r7, #88	@ 0x58
 8009cac:	f000 80b8 	beq.w	8009e20 <_printf_i+0x198>
 8009cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009cb8:	e03a      	b.n	8009d30 <_printf_i+0xa8>
 8009cba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cbe:	2b15      	cmp	r3, #21
 8009cc0:	d8f6      	bhi.n	8009cb0 <_printf_i+0x28>
 8009cc2:	a101      	add	r1, pc, #4	@ (adr r1, 8009cc8 <_printf_i+0x40>)
 8009cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cc8:	08009d21 	.word	0x08009d21
 8009ccc:	08009d35 	.word	0x08009d35
 8009cd0:	08009cb1 	.word	0x08009cb1
 8009cd4:	08009cb1 	.word	0x08009cb1
 8009cd8:	08009cb1 	.word	0x08009cb1
 8009cdc:	08009cb1 	.word	0x08009cb1
 8009ce0:	08009d35 	.word	0x08009d35
 8009ce4:	08009cb1 	.word	0x08009cb1
 8009ce8:	08009cb1 	.word	0x08009cb1
 8009cec:	08009cb1 	.word	0x08009cb1
 8009cf0:	08009cb1 	.word	0x08009cb1
 8009cf4:	08009e33 	.word	0x08009e33
 8009cf8:	08009d5f 	.word	0x08009d5f
 8009cfc:	08009ded 	.word	0x08009ded
 8009d00:	08009cb1 	.word	0x08009cb1
 8009d04:	08009cb1 	.word	0x08009cb1
 8009d08:	08009e55 	.word	0x08009e55
 8009d0c:	08009cb1 	.word	0x08009cb1
 8009d10:	08009d5f 	.word	0x08009d5f
 8009d14:	08009cb1 	.word	0x08009cb1
 8009d18:	08009cb1 	.word	0x08009cb1
 8009d1c:	08009df5 	.word	0x08009df5
 8009d20:	6833      	ldr	r3, [r6, #0]
 8009d22:	1d1a      	adds	r2, r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6032      	str	r2, [r6, #0]
 8009d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d30:	2301      	movs	r3, #1
 8009d32:	e09c      	b.n	8009e6e <_printf_i+0x1e6>
 8009d34:	6833      	ldr	r3, [r6, #0]
 8009d36:	6820      	ldr	r0, [r4, #0]
 8009d38:	1d19      	adds	r1, r3, #4
 8009d3a:	6031      	str	r1, [r6, #0]
 8009d3c:	0606      	lsls	r6, r0, #24
 8009d3e:	d501      	bpl.n	8009d44 <_printf_i+0xbc>
 8009d40:	681d      	ldr	r5, [r3, #0]
 8009d42:	e003      	b.n	8009d4c <_printf_i+0xc4>
 8009d44:	0645      	lsls	r5, r0, #25
 8009d46:	d5fb      	bpl.n	8009d40 <_printf_i+0xb8>
 8009d48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d4c:	2d00      	cmp	r5, #0
 8009d4e:	da03      	bge.n	8009d58 <_printf_i+0xd0>
 8009d50:	232d      	movs	r3, #45	@ 0x2d
 8009d52:	426d      	negs	r5, r5
 8009d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d58:	4858      	ldr	r0, [pc, #352]	@ (8009ebc <_printf_i+0x234>)
 8009d5a:	230a      	movs	r3, #10
 8009d5c:	e011      	b.n	8009d82 <_printf_i+0xfa>
 8009d5e:	6821      	ldr	r1, [r4, #0]
 8009d60:	6833      	ldr	r3, [r6, #0]
 8009d62:	0608      	lsls	r0, r1, #24
 8009d64:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d68:	d402      	bmi.n	8009d70 <_printf_i+0xe8>
 8009d6a:	0649      	lsls	r1, r1, #25
 8009d6c:	bf48      	it	mi
 8009d6e:	b2ad      	uxthmi	r5, r5
 8009d70:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d72:	4852      	ldr	r0, [pc, #328]	@ (8009ebc <_printf_i+0x234>)
 8009d74:	6033      	str	r3, [r6, #0]
 8009d76:	bf14      	ite	ne
 8009d78:	230a      	movne	r3, #10
 8009d7a:	2308      	moveq	r3, #8
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d82:	6866      	ldr	r6, [r4, #4]
 8009d84:	60a6      	str	r6, [r4, #8]
 8009d86:	2e00      	cmp	r6, #0
 8009d88:	db05      	blt.n	8009d96 <_printf_i+0x10e>
 8009d8a:	6821      	ldr	r1, [r4, #0]
 8009d8c:	432e      	orrs	r6, r5
 8009d8e:	f021 0104 	bic.w	r1, r1, #4
 8009d92:	6021      	str	r1, [r4, #0]
 8009d94:	d04b      	beq.n	8009e2e <_printf_i+0x1a6>
 8009d96:	4616      	mov	r6, r2
 8009d98:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d9c:	fb03 5711 	mls	r7, r3, r1, r5
 8009da0:	5dc7      	ldrb	r7, [r0, r7]
 8009da2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009da6:	462f      	mov	r7, r5
 8009da8:	42bb      	cmp	r3, r7
 8009daa:	460d      	mov	r5, r1
 8009dac:	d9f4      	bls.n	8009d98 <_printf_i+0x110>
 8009dae:	2b08      	cmp	r3, #8
 8009db0:	d10b      	bne.n	8009dca <_printf_i+0x142>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	07df      	lsls	r7, r3, #31
 8009db6:	d508      	bpl.n	8009dca <_printf_i+0x142>
 8009db8:	6923      	ldr	r3, [r4, #16]
 8009dba:	6861      	ldr	r1, [r4, #4]
 8009dbc:	4299      	cmp	r1, r3
 8009dbe:	bfde      	ittt	le
 8009dc0:	2330      	movle	r3, #48	@ 0x30
 8009dc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009dca:	1b92      	subs	r2, r2, r6
 8009dcc:	6122      	str	r2, [r4, #16]
 8009dce:	f8cd a000 	str.w	sl, [sp]
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	aa03      	add	r2, sp, #12
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4640      	mov	r0, r8
 8009dda:	f7ff fee7 	bl	8009bac <_printf_common>
 8009dde:	3001      	adds	r0, #1
 8009de0:	d14a      	bne.n	8009e78 <_printf_i+0x1f0>
 8009de2:	f04f 30ff 	mov.w	r0, #4294967295
 8009de6:	b004      	add	sp, #16
 8009de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	f043 0320 	orr.w	r3, r3, #32
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	4832      	ldr	r0, [pc, #200]	@ (8009ec0 <_printf_i+0x238>)
 8009df6:	2778      	movs	r7, #120	@ 0x78
 8009df8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	6831      	ldr	r1, [r6, #0]
 8009e00:	061f      	lsls	r7, r3, #24
 8009e02:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e06:	d402      	bmi.n	8009e0e <_printf_i+0x186>
 8009e08:	065f      	lsls	r7, r3, #25
 8009e0a:	bf48      	it	mi
 8009e0c:	b2ad      	uxthmi	r5, r5
 8009e0e:	6031      	str	r1, [r6, #0]
 8009e10:	07d9      	lsls	r1, r3, #31
 8009e12:	bf44      	itt	mi
 8009e14:	f043 0320 	orrmi.w	r3, r3, #32
 8009e18:	6023      	strmi	r3, [r4, #0]
 8009e1a:	b11d      	cbz	r5, 8009e24 <_printf_i+0x19c>
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	e7ad      	b.n	8009d7c <_printf_i+0xf4>
 8009e20:	4826      	ldr	r0, [pc, #152]	@ (8009ebc <_printf_i+0x234>)
 8009e22:	e7e9      	b.n	8009df8 <_printf_i+0x170>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	f023 0320 	bic.w	r3, r3, #32
 8009e2a:	6023      	str	r3, [r4, #0]
 8009e2c:	e7f6      	b.n	8009e1c <_printf_i+0x194>
 8009e2e:	4616      	mov	r6, r2
 8009e30:	e7bd      	b.n	8009dae <_printf_i+0x126>
 8009e32:	6833      	ldr	r3, [r6, #0]
 8009e34:	6825      	ldr	r5, [r4, #0]
 8009e36:	6961      	ldr	r1, [r4, #20]
 8009e38:	1d18      	adds	r0, r3, #4
 8009e3a:	6030      	str	r0, [r6, #0]
 8009e3c:	062e      	lsls	r6, r5, #24
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	d501      	bpl.n	8009e46 <_printf_i+0x1be>
 8009e42:	6019      	str	r1, [r3, #0]
 8009e44:	e002      	b.n	8009e4c <_printf_i+0x1c4>
 8009e46:	0668      	lsls	r0, r5, #25
 8009e48:	d5fb      	bpl.n	8009e42 <_printf_i+0x1ba>
 8009e4a:	8019      	strh	r1, [r3, #0]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	6123      	str	r3, [r4, #16]
 8009e50:	4616      	mov	r6, r2
 8009e52:	e7bc      	b.n	8009dce <_printf_i+0x146>
 8009e54:	6833      	ldr	r3, [r6, #0]
 8009e56:	1d1a      	adds	r2, r3, #4
 8009e58:	6032      	str	r2, [r6, #0]
 8009e5a:	681e      	ldr	r6, [r3, #0]
 8009e5c:	6862      	ldr	r2, [r4, #4]
 8009e5e:	2100      	movs	r1, #0
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7f6 f9d5 	bl	8000210 <memchr>
 8009e66:	b108      	cbz	r0, 8009e6c <_printf_i+0x1e4>
 8009e68:	1b80      	subs	r0, r0, r6
 8009e6a:	6060      	str	r0, [r4, #4]
 8009e6c:	6863      	ldr	r3, [r4, #4]
 8009e6e:	6123      	str	r3, [r4, #16]
 8009e70:	2300      	movs	r3, #0
 8009e72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e76:	e7aa      	b.n	8009dce <_printf_i+0x146>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	4632      	mov	r2, r6
 8009e7c:	4649      	mov	r1, r9
 8009e7e:	4640      	mov	r0, r8
 8009e80:	47d0      	blx	sl
 8009e82:	3001      	adds	r0, #1
 8009e84:	d0ad      	beq.n	8009de2 <_printf_i+0x15a>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	079b      	lsls	r3, r3, #30
 8009e8a:	d413      	bmi.n	8009eb4 <_printf_i+0x22c>
 8009e8c:	68e0      	ldr	r0, [r4, #12]
 8009e8e:	9b03      	ldr	r3, [sp, #12]
 8009e90:	4298      	cmp	r0, r3
 8009e92:	bfb8      	it	lt
 8009e94:	4618      	movlt	r0, r3
 8009e96:	e7a6      	b.n	8009de6 <_printf_i+0x15e>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4632      	mov	r2, r6
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	47d0      	blx	sl
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	d09d      	beq.n	8009de2 <_printf_i+0x15a>
 8009ea6:	3501      	adds	r5, #1
 8009ea8:	68e3      	ldr	r3, [r4, #12]
 8009eaa:	9903      	ldr	r1, [sp, #12]
 8009eac:	1a5b      	subs	r3, r3, r1
 8009eae:	42ab      	cmp	r3, r5
 8009eb0:	dcf2      	bgt.n	8009e98 <_printf_i+0x210>
 8009eb2:	e7eb      	b.n	8009e8c <_printf_i+0x204>
 8009eb4:	2500      	movs	r5, #0
 8009eb6:	f104 0619 	add.w	r6, r4, #25
 8009eba:	e7f5      	b.n	8009ea8 <_printf_i+0x220>
 8009ebc:	0800e613 	.word	0x0800e613
 8009ec0:	0800e624 	.word	0x0800e624

08009ec4 <_scanf_float>:
 8009ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	b087      	sub	sp, #28
 8009eca:	4691      	mov	r9, r2
 8009ecc:	9303      	str	r3, [sp, #12]
 8009ece:	688b      	ldr	r3, [r1, #8]
 8009ed0:	1e5a      	subs	r2, r3, #1
 8009ed2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009ed6:	bf81      	itttt	hi
 8009ed8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009edc:	eb03 0b05 	addhi.w	fp, r3, r5
 8009ee0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009ee4:	608b      	strhi	r3, [r1, #8]
 8009ee6:	680b      	ldr	r3, [r1, #0]
 8009ee8:	460a      	mov	r2, r1
 8009eea:	f04f 0500 	mov.w	r5, #0
 8009eee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009ef2:	f842 3b1c 	str.w	r3, [r2], #28
 8009ef6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009efa:	4680      	mov	r8, r0
 8009efc:	460c      	mov	r4, r1
 8009efe:	bf98      	it	ls
 8009f00:	f04f 0b00 	movls.w	fp, #0
 8009f04:	9201      	str	r2, [sp, #4]
 8009f06:	4616      	mov	r6, r2
 8009f08:	46aa      	mov	sl, r5
 8009f0a:	462f      	mov	r7, r5
 8009f0c:	9502      	str	r5, [sp, #8]
 8009f0e:	68a2      	ldr	r2, [r4, #8]
 8009f10:	b15a      	cbz	r2, 8009f2a <_scanf_float+0x66>
 8009f12:	f8d9 3000 	ldr.w	r3, [r9]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	2b4e      	cmp	r3, #78	@ 0x4e
 8009f1a:	d863      	bhi.n	8009fe4 <_scanf_float+0x120>
 8009f1c:	2b40      	cmp	r3, #64	@ 0x40
 8009f1e:	d83b      	bhi.n	8009f98 <_scanf_float+0xd4>
 8009f20:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009f24:	b2c8      	uxtb	r0, r1
 8009f26:	280e      	cmp	r0, #14
 8009f28:	d939      	bls.n	8009f9e <_scanf_float+0xda>
 8009f2a:	b11f      	cbz	r7, 8009f34 <_scanf_float+0x70>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f38:	f1ba 0f01 	cmp.w	sl, #1
 8009f3c:	f200 8114 	bhi.w	800a168 <_scanf_float+0x2a4>
 8009f40:	9b01      	ldr	r3, [sp, #4]
 8009f42:	429e      	cmp	r6, r3
 8009f44:	f200 8105 	bhi.w	800a152 <_scanf_float+0x28e>
 8009f48:	2001      	movs	r0, #1
 8009f4a:	b007      	add	sp, #28
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f50:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009f54:	2a0d      	cmp	r2, #13
 8009f56:	d8e8      	bhi.n	8009f2a <_scanf_float+0x66>
 8009f58:	a101      	add	r1, pc, #4	@ (adr r1, 8009f60 <_scanf_float+0x9c>)
 8009f5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	0800a0a9 	.word	0x0800a0a9
 8009f64:	08009f2b 	.word	0x08009f2b
 8009f68:	08009f2b 	.word	0x08009f2b
 8009f6c:	08009f2b 	.word	0x08009f2b
 8009f70:	0800a105 	.word	0x0800a105
 8009f74:	0800a0df 	.word	0x0800a0df
 8009f78:	08009f2b 	.word	0x08009f2b
 8009f7c:	08009f2b 	.word	0x08009f2b
 8009f80:	0800a0b7 	.word	0x0800a0b7
 8009f84:	08009f2b 	.word	0x08009f2b
 8009f88:	08009f2b 	.word	0x08009f2b
 8009f8c:	08009f2b 	.word	0x08009f2b
 8009f90:	08009f2b 	.word	0x08009f2b
 8009f94:	0800a073 	.word	0x0800a073
 8009f98:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009f9c:	e7da      	b.n	8009f54 <_scanf_float+0x90>
 8009f9e:	290e      	cmp	r1, #14
 8009fa0:	d8c3      	bhi.n	8009f2a <_scanf_float+0x66>
 8009fa2:	a001      	add	r0, pc, #4	@ (adr r0, 8009fa8 <_scanf_float+0xe4>)
 8009fa4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009fa8:	0800a063 	.word	0x0800a063
 8009fac:	08009f2b 	.word	0x08009f2b
 8009fb0:	0800a063 	.word	0x0800a063
 8009fb4:	0800a0f3 	.word	0x0800a0f3
 8009fb8:	08009f2b 	.word	0x08009f2b
 8009fbc:	0800a005 	.word	0x0800a005
 8009fc0:	0800a049 	.word	0x0800a049
 8009fc4:	0800a049 	.word	0x0800a049
 8009fc8:	0800a049 	.word	0x0800a049
 8009fcc:	0800a049 	.word	0x0800a049
 8009fd0:	0800a049 	.word	0x0800a049
 8009fd4:	0800a049 	.word	0x0800a049
 8009fd8:	0800a049 	.word	0x0800a049
 8009fdc:	0800a049 	.word	0x0800a049
 8009fe0:	0800a049 	.word	0x0800a049
 8009fe4:	2b6e      	cmp	r3, #110	@ 0x6e
 8009fe6:	d809      	bhi.n	8009ffc <_scanf_float+0x138>
 8009fe8:	2b60      	cmp	r3, #96	@ 0x60
 8009fea:	d8b1      	bhi.n	8009f50 <_scanf_float+0x8c>
 8009fec:	2b54      	cmp	r3, #84	@ 0x54
 8009fee:	d07b      	beq.n	800a0e8 <_scanf_float+0x224>
 8009ff0:	2b59      	cmp	r3, #89	@ 0x59
 8009ff2:	d19a      	bne.n	8009f2a <_scanf_float+0x66>
 8009ff4:	2d07      	cmp	r5, #7
 8009ff6:	d198      	bne.n	8009f2a <_scanf_float+0x66>
 8009ff8:	2508      	movs	r5, #8
 8009ffa:	e02f      	b.n	800a05c <_scanf_float+0x198>
 8009ffc:	2b74      	cmp	r3, #116	@ 0x74
 8009ffe:	d073      	beq.n	800a0e8 <_scanf_float+0x224>
 800a000:	2b79      	cmp	r3, #121	@ 0x79
 800a002:	e7f6      	b.n	8009ff2 <_scanf_float+0x12e>
 800a004:	6821      	ldr	r1, [r4, #0]
 800a006:	05c8      	lsls	r0, r1, #23
 800a008:	d51e      	bpl.n	800a048 <_scanf_float+0x184>
 800a00a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a00e:	6021      	str	r1, [r4, #0]
 800a010:	3701      	adds	r7, #1
 800a012:	f1bb 0f00 	cmp.w	fp, #0
 800a016:	d003      	beq.n	800a020 <_scanf_float+0x15c>
 800a018:	3201      	adds	r2, #1
 800a01a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a01e:	60a2      	str	r2, [r4, #8]
 800a020:	68a3      	ldr	r3, [r4, #8]
 800a022:	3b01      	subs	r3, #1
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	6923      	ldr	r3, [r4, #16]
 800a028:	3301      	adds	r3, #1
 800a02a:	6123      	str	r3, [r4, #16]
 800a02c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a030:	3b01      	subs	r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	f8c9 3004 	str.w	r3, [r9, #4]
 800a038:	f340 8082 	ble.w	800a140 <_scanf_float+0x27c>
 800a03c:	f8d9 3000 	ldr.w	r3, [r9]
 800a040:	3301      	adds	r3, #1
 800a042:	f8c9 3000 	str.w	r3, [r9]
 800a046:	e762      	b.n	8009f0e <_scanf_float+0x4a>
 800a048:	eb1a 0105 	adds.w	r1, sl, r5
 800a04c:	f47f af6d 	bne.w	8009f2a <_scanf_float+0x66>
 800a050:	6822      	ldr	r2, [r4, #0]
 800a052:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a056:	6022      	str	r2, [r4, #0]
 800a058:	460d      	mov	r5, r1
 800a05a:	468a      	mov	sl, r1
 800a05c:	f806 3b01 	strb.w	r3, [r6], #1
 800a060:	e7de      	b.n	800a020 <_scanf_float+0x15c>
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	0610      	lsls	r0, r2, #24
 800a066:	f57f af60 	bpl.w	8009f2a <_scanf_float+0x66>
 800a06a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a06e:	6022      	str	r2, [r4, #0]
 800a070:	e7f4      	b.n	800a05c <_scanf_float+0x198>
 800a072:	f1ba 0f00 	cmp.w	sl, #0
 800a076:	d10c      	bne.n	800a092 <_scanf_float+0x1ce>
 800a078:	b977      	cbnz	r7, 800a098 <_scanf_float+0x1d4>
 800a07a:	6822      	ldr	r2, [r4, #0]
 800a07c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a080:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a084:	d108      	bne.n	800a098 <_scanf_float+0x1d4>
 800a086:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a08a:	6022      	str	r2, [r4, #0]
 800a08c:	f04f 0a01 	mov.w	sl, #1
 800a090:	e7e4      	b.n	800a05c <_scanf_float+0x198>
 800a092:	f1ba 0f02 	cmp.w	sl, #2
 800a096:	d050      	beq.n	800a13a <_scanf_float+0x276>
 800a098:	2d01      	cmp	r5, #1
 800a09a:	d002      	beq.n	800a0a2 <_scanf_float+0x1de>
 800a09c:	2d04      	cmp	r5, #4
 800a09e:	f47f af44 	bne.w	8009f2a <_scanf_float+0x66>
 800a0a2:	3501      	adds	r5, #1
 800a0a4:	b2ed      	uxtb	r5, r5
 800a0a6:	e7d9      	b.n	800a05c <_scanf_float+0x198>
 800a0a8:	f1ba 0f01 	cmp.w	sl, #1
 800a0ac:	f47f af3d 	bne.w	8009f2a <_scanf_float+0x66>
 800a0b0:	f04f 0a02 	mov.w	sl, #2
 800a0b4:	e7d2      	b.n	800a05c <_scanf_float+0x198>
 800a0b6:	b975      	cbnz	r5, 800a0d6 <_scanf_float+0x212>
 800a0b8:	2f00      	cmp	r7, #0
 800a0ba:	f47f af37 	bne.w	8009f2c <_scanf_float+0x68>
 800a0be:	6822      	ldr	r2, [r4, #0]
 800a0c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a0c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a0c8:	f040 8103 	bne.w	800a2d2 <_scanf_float+0x40e>
 800a0cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a0d0:	6022      	str	r2, [r4, #0]
 800a0d2:	2501      	movs	r5, #1
 800a0d4:	e7c2      	b.n	800a05c <_scanf_float+0x198>
 800a0d6:	2d03      	cmp	r5, #3
 800a0d8:	d0e3      	beq.n	800a0a2 <_scanf_float+0x1de>
 800a0da:	2d05      	cmp	r5, #5
 800a0dc:	e7df      	b.n	800a09e <_scanf_float+0x1da>
 800a0de:	2d02      	cmp	r5, #2
 800a0e0:	f47f af23 	bne.w	8009f2a <_scanf_float+0x66>
 800a0e4:	2503      	movs	r5, #3
 800a0e6:	e7b9      	b.n	800a05c <_scanf_float+0x198>
 800a0e8:	2d06      	cmp	r5, #6
 800a0ea:	f47f af1e 	bne.w	8009f2a <_scanf_float+0x66>
 800a0ee:	2507      	movs	r5, #7
 800a0f0:	e7b4      	b.n	800a05c <_scanf_float+0x198>
 800a0f2:	6822      	ldr	r2, [r4, #0]
 800a0f4:	0591      	lsls	r1, r2, #22
 800a0f6:	f57f af18 	bpl.w	8009f2a <_scanf_float+0x66>
 800a0fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a0fe:	6022      	str	r2, [r4, #0]
 800a100:	9702      	str	r7, [sp, #8]
 800a102:	e7ab      	b.n	800a05c <_scanf_float+0x198>
 800a104:	6822      	ldr	r2, [r4, #0]
 800a106:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a10a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a10e:	d005      	beq.n	800a11c <_scanf_float+0x258>
 800a110:	0550      	lsls	r0, r2, #21
 800a112:	f57f af0a 	bpl.w	8009f2a <_scanf_float+0x66>
 800a116:	2f00      	cmp	r7, #0
 800a118:	f000 80db 	beq.w	800a2d2 <_scanf_float+0x40e>
 800a11c:	0591      	lsls	r1, r2, #22
 800a11e:	bf58      	it	pl
 800a120:	9902      	ldrpl	r1, [sp, #8]
 800a122:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a126:	bf58      	it	pl
 800a128:	1a79      	subpl	r1, r7, r1
 800a12a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a12e:	bf58      	it	pl
 800a130:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a134:	6022      	str	r2, [r4, #0]
 800a136:	2700      	movs	r7, #0
 800a138:	e790      	b.n	800a05c <_scanf_float+0x198>
 800a13a:	f04f 0a03 	mov.w	sl, #3
 800a13e:	e78d      	b.n	800a05c <_scanf_float+0x198>
 800a140:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a144:	4649      	mov	r1, r9
 800a146:	4640      	mov	r0, r8
 800a148:	4798      	blx	r3
 800a14a:	2800      	cmp	r0, #0
 800a14c:	f43f aedf 	beq.w	8009f0e <_scanf_float+0x4a>
 800a150:	e6eb      	b.n	8009f2a <_scanf_float+0x66>
 800a152:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a15a:	464a      	mov	r2, r9
 800a15c:	4640      	mov	r0, r8
 800a15e:	4798      	blx	r3
 800a160:	6923      	ldr	r3, [r4, #16]
 800a162:	3b01      	subs	r3, #1
 800a164:	6123      	str	r3, [r4, #16]
 800a166:	e6eb      	b.n	8009f40 <_scanf_float+0x7c>
 800a168:	1e6b      	subs	r3, r5, #1
 800a16a:	2b06      	cmp	r3, #6
 800a16c:	d824      	bhi.n	800a1b8 <_scanf_float+0x2f4>
 800a16e:	2d02      	cmp	r5, #2
 800a170:	d836      	bhi.n	800a1e0 <_scanf_float+0x31c>
 800a172:	9b01      	ldr	r3, [sp, #4]
 800a174:	429e      	cmp	r6, r3
 800a176:	f67f aee7 	bls.w	8009f48 <_scanf_float+0x84>
 800a17a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a17e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a182:	464a      	mov	r2, r9
 800a184:	4640      	mov	r0, r8
 800a186:	4798      	blx	r3
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	e7f0      	b.n	800a172 <_scanf_float+0x2ae>
 800a190:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a194:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a198:	464a      	mov	r2, r9
 800a19a:	4640      	mov	r0, r8
 800a19c:	4798      	blx	r3
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1a8:	fa5f fa8a 	uxtb.w	sl, sl
 800a1ac:	f1ba 0f02 	cmp.w	sl, #2
 800a1b0:	d1ee      	bne.n	800a190 <_scanf_float+0x2cc>
 800a1b2:	3d03      	subs	r5, #3
 800a1b4:	b2ed      	uxtb	r5, r5
 800a1b6:	1b76      	subs	r6, r6, r5
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	05da      	lsls	r2, r3, #23
 800a1bc:	d530      	bpl.n	800a220 <_scanf_float+0x35c>
 800a1be:	055b      	lsls	r3, r3, #21
 800a1c0:	d511      	bpl.n	800a1e6 <_scanf_float+0x322>
 800a1c2:	9b01      	ldr	r3, [sp, #4]
 800a1c4:	429e      	cmp	r6, r3
 800a1c6:	f67f aebf 	bls.w	8009f48 <_scanf_float+0x84>
 800a1ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1d2:	464a      	mov	r2, r9
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4798      	blx	r3
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	6123      	str	r3, [r4, #16]
 800a1de:	e7f0      	b.n	800a1c2 <_scanf_float+0x2fe>
 800a1e0:	46aa      	mov	sl, r5
 800a1e2:	46b3      	mov	fp, r6
 800a1e4:	e7de      	b.n	800a1a4 <_scanf_float+0x2e0>
 800a1e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a1ea:	6923      	ldr	r3, [r4, #16]
 800a1ec:	2965      	cmp	r1, #101	@ 0x65
 800a1ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a1f6:	6123      	str	r3, [r4, #16]
 800a1f8:	d00c      	beq.n	800a214 <_scanf_float+0x350>
 800a1fa:	2945      	cmp	r1, #69	@ 0x45
 800a1fc:	d00a      	beq.n	800a214 <_scanf_float+0x350>
 800a1fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a202:	464a      	mov	r2, r9
 800a204:	4640      	mov	r0, r8
 800a206:	4798      	blx	r3
 800a208:	6923      	ldr	r3, [r4, #16]
 800a20a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a20e:	3b01      	subs	r3, #1
 800a210:	1eb5      	subs	r5, r6, #2
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a218:	464a      	mov	r2, r9
 800a21a:	4640      	mov	r0, r8
 800a21c:	4798      	blx	r3
 800a21e:	462e      	mov	r6, r5
 800a220:	6822      	ldr	r2, [r4, #0]
 800a222:	f012 0210 	ands.w	r2, r2, #16
 800a226:	d001      	beq.n	800a22c <_scanf_float+0x368>
 800a228:	2000      	movs	r0, #0
 800a22a:	e68e      	b.n	8009f4a <_scanf_float+0x86>
 800a22c:	7032      	strb	r2, [r6, #0]
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a238:	d125      	bne.n	800a286 <_scanf_float+0x3c2>
 800a23a:	9b02      	ldr	r3, [sp, #8]
 800a23c:	429f      	cmp	r7, r3
 800a23e:	d00a      	beq.n	800a256 <_scanf_float+0x392>
 800a240:	1bda      	subs	r2, r3, r7
 800a242:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a246:	429e      	cmp	r6, r3
 800a248:	bf28      	it	cs
 800a24a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a24e:	4922      	ldr	r1, [pc, #136]	@ (800a2d8 <_scanf_float+0x414>)
 800a250:	4630      	mov	r0, r6
 800a252:	f000 fa03 	bl	800a65c <siprintf>
 800a256:	9901      	ldr	r1, [sp, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	4640      	mov	r0, r8
 800a25c:	f002 fd68 	bl	800cd30 <_strtod_r>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	6821      	ldr	r1, [r4, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f011 0f02 	tst.w	r1, #2
 800a26a:	ec57 6b10 	vmov	r6, r7, d0
 800a26e:	f103 0204 	add.w	r2, r3, #4
 800a272:	d015      	beq.n	800a2a0 <_scanf_float+0x3dc>
 800a274:	9903      	ldr	r1, [sp, #12]
 800a276:	600a      	str	r2, [r1, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	e9c3 6700 	strd	r6, r7, [r3]
 800a27e:	68e3      	ldr	r3, [r4, #12]
 800a280:	3301      	adds	r3, #1
 800a282:	60e3      	str	r3, [r4, #12]
 800a284:	e7d0      	b.n	800a228 <_scanf_float+0x364>
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0e4      	beq.n	800a256 <_scanf_float+0x392>
 800a28c:	9905      	ldr	r1, [sp, #20]
 800a28e:	230a      	movs	r3, #10
 800a290:	3101      	adds	r1, #1
 800a292:	4640      	mov	r0, r8
 800a294:	f7ff f9b4 	bl	8009600 <_strtol_r>
 800a298:	9b04      	ldr	r3, [sp, #16]
 800a29a:	9e05      	ldr	r6, [sp, #20]
 800a29c:	1ac2      	subs	r2, r0, r3
 800a29e:	e7d0      	b.n	800a242 <_scanf_float+0x37e>
 800a2a0:	f011 0f04 	tst.w	r1, #4
 800a2a4:	9903      	ldr	r1, [sp, #12]
 800a2a6:	600a      	str	r2, [r1, #0]
 800a2a8:	d1e6      	bne.n	800a278 <_scanf_float+0x3b4>
 800a2aa:	681d      	ldr	r5, [r3, #0]
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	463b      	mov	r3, r7
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	4639      	mov	r1, r7
 800a2b4:	f7f6 fc5a 	bl	8000b6c <__aeabi_dcmpun>
 800a2b8:	b128      	cbz	r0, 800a2c6 <_scanf_float+0x402>
 800a2ba:	4808      	ldr	r0, [pc, #32]	@ (800a2dc <_scanf_float+0x418>)
 800a2bc:	f000 fb10 	bl	800a8e0 <nanf>
 800a2c0:	ed85 0a00 	vstr	s0, [r5]
 800a2c4:	e7db      	b.n	800a27e <_scanf_float+0x3ba>
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	f7f6 fcad 	bl	8000c28 <__aeabi_d2f>
 800a2ce:	6028      	str	r0, [r5, #0]
 800a2d0:	e7d5      	b.n	800a27e <_scanf_float+0x3ba>
 800a2d2:	2700      	movs	r7, #0
 800a2d4:	e62e      	b.n	8009f34 <_scanf_float+0x70>
 800a2d6:	bf00      	nop
 800a2d8:	0800e635 	.word	0x0800e635
 800a2dc:	0800e6e6 	.word	0x0800e6e6

0800a2e0 <std>:
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	b510      	push	{r4, lr}
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a2ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2ee:	6083      	str	r3, [r0, #8]
 800a2f0:	8181      	strh	r1, [r0, #12]
 800a2f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2f4:	81c2      	strh	r2, [r0, #14]
 800a2f6:	6183      	str	r3, [r0, #24]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	2208      	movs	r2, #8
 800a2fc:	305c      	adds	r0, #92	@ 0x5c
 800a2fe:	f000 fa12 	bl	800a726 <memset>
 800a302:	4b0d      	ldr	r3, [pc, #52]	@ (800a338 <std+0x58>)
 800a304:	6263      	str	r3, [r4, #36]	@ 0x24
 800a306:	4b0d      	ldr	r3, [pc, #52]	@ (800a33c <std+0x5c>)
 800a308:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a30a:	4b0d      	ldr	r3, [pc, #52]	@ (800a340 <std+0x60>)
 800a30c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a30e:	4b0d      	ldr	r3, [pc, #52]	@ (800a344 <std+0x64>)
 800a310:	6323      	str	r3, [r4, #48]	@ 0x30
 800a312:	4b0d      	ldr	r3, [pc, #52]	@ (800a348 <std+0x68>)
 800a314:	6224      	str	r4, [r4, #32]
 800a316:	429c      	cmp	r4, r3
 800a318:	d006      	beq.n	800a328 <std+0x48>
 800a31a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a31e:	4294      	cmp	r4, r2
 800a320:	d002      	beq.n	800a328 <std+0x48>
 800a322:	33d0      	adds	r3, #208	@ 0xd0
 800a324:	429c      	cmp	r4, r3
 800a326:	d105      	bne.n	800a334 <std+0x54>
 800a328:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a330:	f000 bad2 	b.w	800a8d8 <__retarget_lock_init_recursive>
 800a334:	bd10      	pop	{r4, pc}
 800a336:	bf00      	nop
 800a338:	0800a6a1 	.word	0x0800a6a1
 800a33c:	0800a6c3 	.word	0x0800a6c3
 800a340:	0800a6fb 	.word	0x0800a6fb
 800a344:	0800a71f 	.word	0x0800a71f
 800a348:	20000f04 	.word	0x20000f04

0800a34c <stdio_exit_handler>:
 800a34c:	4a02      	ldr	r2, [pc, #8]	@ (800a358 <stdio_exit_handler+0xc>)
 800a34e:	4903      	ldr	r1, [pc, #12]	@ (800a35c <stdio_exit_handler+0x10>)
 800a350:	4803      	ldr	r0, [pc, #12]	@ (800a360 <stdio_exit_handler+0x14>)
 800a352:	f000 b869 	b.w	800a428 <_fwalk_sglue>
 800a356:	bf00      	nop
 800a358:	20000034 	.word	0x20000034
 800a35c:	0800d379 	.word	0x0800d379
 800a360:	20000044 	.word	0x20000044

0800a364 <cleanup_stdio>:
 800a364:	6841      	ldr	r1, [r0, #4]
 800a366:	4b0c      	ldr	r3, [pc, #48]	@ (800a398 <cleanup_stdio+0x34>)
 800a368:	4299      	cmp	r1, r3
 800a36a:	b510      	push	{r4, lr}
 800a36c:	4604      	mov	r4, r0
 800a36e:	d001      	beq.n	800a374 <cleanup_stdio+0x10>
 800a370:	f003 f802 	bl	800d378 <_fflush_r>
 800a374:	68a1      	ldr	r1, [r4, #8]
 800a376:	4b09      	ldr	r3, [pc, #36]	@ (800a39c <cleanup_stdio+0x38>)
 800a378:	4299      	cmp	r1, r3
 800a37a:	d002      	beq.n	800a382 <cleanup_stdio+0x1e>
 800a37c:	4620      	mov	r0, r4
 800a37e:	f002 fffb 	bl	800d378 <_fflush_r>
 800a382:	68e1      	ldr	r1, [r4, #12]
 800a384:	4b06      	ldr	r3, [pc, #24]	@ (800a3a0 <cleanup_stdio+0x3c>)
 800a386:	4299      	cmp	r1, r3
 800a388:	d004      	beq.n	800a394 <cleanup_stdio+0x30>
 800a38a:	4620      	mov	r0, r4
 800a38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a390:	f002 bff2 	b.w	800d378 <_fflush_r>
 800a394:	bd10      	pop	{r4, pc}
 800a396:	bf00      	nop
 800a398:	20000f04 	.word	0x20000f04
 800a39c:	20000f6c 	.word	0x20000f6c
 800a3a0:	20000fd4 	.word	0x20000fd4

0800a3a4 <global_stdio_init.part.0>:
 800a3a4:	b510      	push	{r4, lr}
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d4 <global_stdio_init.part.0+0x30>)
 800a3a8:	4c0b      	ldr	r4, [pc, #44]	@ (800a3d8 <global_stdio_init.part.0+0x34>)
 800a3aa:	4a0c      	ldr	r2, [pc, #48]	@ (800a3dc <global_stdio_init.part.0+0x38>)
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2104      	movs	r1, #4
 800a3b4:	f7ff ff94 	bl	800a2e0 <std>
 800a3b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3bc:	2201      	movs	r2, #1
 800a3be:	2109      	movs	r1, #9
 800a3c0:	f7ff ff8e 	bl	800a2e0 <std>
 800a3c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3ce:	2112      	movs	r1, #18
 800a3d0:	f7ff bf86 	b.w	800a2e0 <std>
 800a3d4:	2000103c 	.word	0x2000103c
 800a3d8:	20000f04 	.word	0x20000f04
 800a3dc:	0800a34d 	.word	0x0800a34d

0800a3e0 <__sfp_lock_acquire>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	@ (800a3e8 <__sfp_lock_acquire+0x8>)
 800a3e2:	f000 ba7a 	b.w	800a8da <__retarget_lock_acquire_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	20001045 	.word	0x20001045

0800a3ec <__sfp_lock_release>:
 800a3ec:	4801      	ldr	r0, [pc, #4]	@ (800a3f4 <__sfp_lock_release+0x8>)
 800a3ee:	f000 ba75 	b.w	800a8dc <__retarget_lock_release_recursive>
 800a3f2:	bf00      	nop
 800a3f4:	20001045 	.word	0x20001045

0800a3f8 <__sinit>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	f7ff fff0 	bl	800a3e0 <__sfp_lock_acquire>
 800a400:	6a23      	ldr	r3, [r4, #32]
 800a402:	b11b      	cbz	r3, 800a40c <__sinit+0x14>
 800a404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a408:	f7ff bff0 	b.w	800a3ec <__sfp_lock_release>
 800a40c:	4b04      	ldr	r3, [pc, #16]	@ (800a420 <__sinit+0x28>)
 800a40e:	6223      	str	r3, [r4, #32]
 800a410:	4b04      	ldr	r3, [pc, #16]	@ (800a424 <__sinit+0x2c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1f5      	bne.n	800a404 <__sinit+0xc>
 800a418:	f7ff ffc4 	bl	800a3a4 <global_stdio_init.part.0>
 800a41c:	e7f2      	b.n	800a404 <__sinit+0xc>
 800a41e:	bf00      	nop
 800a420:	0800a365 	.word	0x0800a365
 800a424:	2000103c 	.word	0x2000103c

0800a428 <_fwalk_sglue>:
 800a428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a42c:	4607      	mov	r7, r0
 800a42e:	4688      	mov	r8, r1
 800a430:	4614      	mov	r4, r2
 800a432:	2600      	movs	r6, #0
 800a434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a438:	f1b9 0901 	subs.w	r9, r9, #1
 800a43c:	d505      	bpl.n	800a44a <_fwalk_sglue+0x22>
 800a43e:	6824      	ldr	r4, [r4, #0]
 800a440:	2c00      	cmp	r4, #0
 800a442:	d1f7      	bne.n	800a434 <_fwalk_sglue+0xc>
 800a444:	4630      	mov	r0, r6
 800a446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44a:	89ab      	ldrh	r3, [r5, #12]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d907      	bls.n	800a460 <_fwalk_sglue+0x38>
 800a450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a454:	3301      	adds	r3, #1
 800a456:	d003      	beq.n	800a460 <_fwalk_sglue+0x38>
 800a458:	4629      	mov	r1, r5
 800a45a:	4638      	mov	r0, r7
 800a45c:	47c0      	blx	r8
 800a45e:	4306      	orrs	r6, r0
 800a460:	3568      	adds	r5, #104	@ 0x68
 800a462:	e7e9      	b.n	800a438 <_fwalk_sglue+0x10>

0800a464 <iprintf>:
 800a464:	b40f      	push	{r0, r1, r2, r3}
 800a466:	b507      	push	{r0, r1, r2, lr}
 800a468:	4906      	ldr	r1, [pc, #24]	@ (800a484 <iprintf+0x20>)
 800a46a:	ab04      	add	r3, sp, #16
 800a46c:	6808      	ldr	r0, [r1, #0]
 800a46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a472:	6881      	ldr	r1, [r0, #8]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	f002 fde3 	bl	800d040 <_vfiprintf_r>
 800a47a:	b003      	add	sp, #12
 800a47c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a480:	b004      	add	sp, #16
 800a482:	4770      	bx	lr
 800a484:	20000040 	.word	0x20000040

0800a488 <setvbuf>:
 800a488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a48c:	461d      	mov	r5, r3
 800a48e:	4b57      	ldr	r3, [pc, #348]	@ (800a5ec <setvbuf+0x164>)
 800a490:	681f      	ldr	r7, [r3, #0]
 800a492:	4604      	mov	r4, r0
 800a494:	460e      	mov	r6, r1
 800a496:	4690      	mov	r8, r2
 800a498:	b127      	cbz	r7, 800a4a4 <setvbuf+0x1c>
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	b913      	cbnz	r3, 800a4a4 <setvbuf+0x1c>
 800a49e:	4638      	mov	r0, r7
 800a4a0:	f7ff ffaa 	bl	800a3f8 <__sinit>
 800a4a4:	f1b8 0f02 	cmp.w	r8, #2
 800a4a8:	d006      	beq.n	800a4b8 <setvbuf+0x30>
 800a4aa:	f1b8 0f01 	cmp.w	r8, #1
 800a4ae:	f200 809a 	bhi.w	800a5e6 <setvbuf+0x15e>
 800a4b2:	2d00      	cmp	r5, #0
 800a4b4:	f2c0 8097 	blt.w	800a5e6 <setvbuf+0x15e>
 800a4b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4ba:	07d9      	lsls	r1, r3, #31
 800a4bc:	d405      	bmi.n	800a4ca <setvbuf+0x42>
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	059a      	lsls	r2, r3, #22
 800a4c2:	d402      	bmi.n	800a4ca <setvbuf+0x42>
 800a4c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4c6:	f000 fa08 	bl	800a8da <__retarget_lock_acquire_recursive>
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	f002 ff53 	bl	800d378 <_fflush_r>
 800a4d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4d4:	b141      	cbz	r1, 800a4e8 <setvbuf+0x60>
 800a4d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	d002      	beq.n	800a4e4 <setvbuf+0x5c>
 800a4de:	4638      	mov	r0, r7
 800a4e0:	f001 f87a 	bl	800b5d8 <_free_r>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61a3      	str	r3, [r4, #24]
 800a4ec:	6063      	str	r3, [r4, #4]
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	061b      	lsls	r3, r3, #24
 800a4f2:	d503      	bpl.n	800a4fc <setvbuf+0x74>
 800a4f4:	6921      	ldr	r1, [r4, #16]
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	f001 f86e 	bl	800b5d8 <_free_r>
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800a502:	f023 0303 	bic.w	r3, r3, #3
 800a506:	f1b8 0f02 	cmp.w	r8, #2
 800a50a:	81a3      	strh	r3, [r4, #12]
 800a50c:	d061      	beq.n	800a5d2 <setvbuf+0x14a>
 800a50e:	ab01      	add	r3, sp, #4
 800a510:	466a      	mov	r2, sp
 800a512:	4621      	mov	r1, r4
 800a514:	4638      	mov	r0, r7
 800a516:	f002 ff69 	bl	800d3ec <__swhatbuf_r>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	4318      	orrs	r0, r3
 800a51e:	81a0      	strh	r0, [r4, #12]
 800a520:	bb2d      	cbnz	r5, 800a56e <setvbuf+0xe6>
 800a522:	9d00      	ldr	r5, [sp, #0]
 800a524:	4628      	mov	r0, r5
 800a526:	f001 f8a1 	bl	800b66c <malloc>
 800a52a:	4606      	mov	r6, r0
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d152      	bne.n	800a5d6 <setvbuf+0x14e>
 800a530:	f8dd 9000 	ldr.w	r9, [sp]
 800a534:	45a9      	cmp	r9, r5
 800a536:	d140      	bne.n	800a5ba <setvbuf+0x132>
 800a538:	f04f 35ff 	mov.w	r5, #4294967295
 800a53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a540:	f043 0202 	orr.w	r2, r3, #2
 800a544:	81a2      	strh	r2, [r4, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	60a2      	str	r2, [r4, #8]
 800a54a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800a54e:	6022      	str	r2, [r4, #0]
 800a550:	6122      	str	r2, [r4, #16]
 800a552:	2201      	movs	r2, #1
 800a554:	6162      	str	r2, [r4, #20]
 800a556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a558:	07d6      	lsls	r6, r2, #31
 800a55a:	d404      	bmi.n	800a566 <setvbuf+0xde>
 800a55c:	0598      	lsls	r0, r3, #22
 800a55e:	d402      	bmi.n	800a566 <setvbuf+0xde>
 800a560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a562:	f000 f9bb 	bl	800a8dc <__retarget_lock_release_recursive>
 800a566:	4628      	mov	r0, r5
 800a568:	b003      	add	sp, #12
 800a56a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a56e:	2e00      	cmp	r6, #0
 800a570:	d0d8      	beq.n	800a524 <setvbuf+0x9c>
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	b913      	cbnz	r3, 800a57c <setvbuf+0xf4>
 800a576:	4638      	mov	r0, r7
 800a578:	f7ff ff3e 	bl	800a3f8 <__sinit>
 800a57c:	f1b8 0f01 	cmp.w	r8, #1
 800a580:	bf08      	it	eq
 800a582:	89a3      	ldrheq	r3, [r4, #12]
 800a584:	6026      	str	r6, [r4, #0]
 800a586:	bf04      	itt	eq
 800a588:	f043 0301 	orreq.w	r3, r3, #1
 800a58c:	81a3      	strheq	r3, [r4, #12]
 800a58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a592:	f013 0208 	ands.w	r2, r3, #8
 800a596:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a59a:	d01e      	beq.n	800a5da <setvbuf+0x152>
 800a59c:	07d9      	lsls	r1, r3, #31
 800a59e:	bf41      	itttt	mi
 800a5a0:	2200      	movmi	r2, #0
 800a5a2:	426d      	negmi	r5, r5
 800a5a4:	60a2      	strmi	r2, [r4, #8]
 800a5a6:	61a5      	strmi	r5, [r4, #24]
 800a5a8:	bf58      	it	pl
 800a5aa:	60a5      	strpl	r5, [r4, #8]
 800a5ac:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5ae:	07d2      	lsls	r2, r2, #31
 800a5b0:	d401      	bmi.n	800a5b6 <setvbuf+0x12e>
 800a5b2:	059b      	lsls	r3, r3, #22
 800a5b4:	d513      	bpl.n	800a5de <setvbuf+0x156>
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	e7d5      	b.n	800a566 <setvbuf+0xde>
 800a5ba:	4648      	mov	r0, r9
 800a5bc:	f001 f856 	bl	800b66c <malloc>
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d0b8      	beq.n	800a538 <setvbuf+0xb0>
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5cc:	81a3      	strh	r3, [r4, #12]
 800a5ce:	464d      	mov	r5, r9
 800a5d0:	e7cf      	b.n	800a572 <setvbuf+0xea>
 800a5d2:	2500      	movs	r5, #0
 800a5d4:	e7b2      	b.n	800a53c <setvbuf+0xb4>
 800a5d6:	46a9      	mov	r9, r5
 800a5d8:	e7f5      	b.n	800a5c6 <setvbuf+0x13e>
 800a5da:	60a2      	str	r2, [r4, #8]
 800a5dc:	e7e6      	b.n	800a5ac <setvbuf+0x124>
 800a5de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5e0:	f000 f97c 	bl	800a8dc <__retarget_lock_release_recursive>
 800a5e4:	e7e7      	b.n	800a5b6 <setvbuf+0x12e>
 800a5e6:	f04f 35ff 	mov.w	r5, #4294967295
 800a5ea:	e7bc      	b.n	800a566 <setvbuf+0xde>
 800a5ec:	20000040 	.word	0x20000040

0800a5f0 <sniprintf>:
 800a5f0:	b40c      	push	{r2, r3}
 800a5f2:	b530      	push	{r4, r5, lr}
 800a5f4:	4b18      	ldr	r3, [pc, #96]	@ (800a658 <sniprintf+0x68>)
 800a5f6:	1e0c      	subs	r4, r1, #0
 800a5f8:	681d      	ldr	r5, [r3, #0]
 800a5fa:	b09d      	sub	sp, #116	@ 0x74
 800a5fc:	da08      	bge.n	800a610 <sniprintf+0x20>
 800a5fe:	238b      	movs	r3, #139	@ 0x8b
 800a600:	602b      	str	r3, [r5, #0]
 800a602:	f04f 30ff 	mov.w	r0, #4294967295
 800a606:	b01d      	add	sp, #116	@ 0x74
 800a608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a60c:	b002      	add	sp, #8
 800a60e:	4770      	bx	lr
 800a610:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a614:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a618:	f04f 0300 	mov.w	r3, #0
 800a61c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a61e:	bf14      	ite	ne
 800a620:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a624:	4623      	moveq	r3, r4
 800a626:	9304      	str	r3, [sp, #16]
 800a628:	9307      	str	r3, [sp, #28]
 800a62a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a62e:	9002      	str	r0, [sp, #8]
 800a630:	9006      	str	r0, [sp, #24]
 800a632:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a636:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a638:	ab21      	add	r3, sp, #132	@ 0x84
 800a63a:	a902      	add	r1, sp, #8
 800a63c:	4628      	mov	r0, r5
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	f002 fbd8 	bl	800cdf4 <_svfiprintf_r>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	bfbc      	itt	lt
 800a648:	238b      	movlt	r3, #139	@ 0x8b
 800a64a:	602b      	strlt	r3, [r5, #0]
 800a64c:	2c00      	cmp	r4, #0
 800a64e:	d0da      	beq.n	800a606 <sniprintf+0x16>
 800a650:	9b02      	ldr	r3, [sp, #8]
 800a652:	2200      	movs	r2, #0
 800a654:	701a      	strb	r2, [r3, #0]
 800a656:	e7d6      	b.n	800a606 <sniprintf+0x16>
 800a658:	20000040 	.word	0x20000040

0800a65c <siprintf>:
 800a65c:	b40e      	push	{r1, r2, r3}
 800a65e:	b510      	push	{r4, lr}
 800a660:	b09d      	sub	sp, #116	@ 0x74
 800a662:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a664:	9002      	str	r0, [sp, #8]
 800a666:	9006      	str	r0, [sp, #24]
 800a668:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a66c:	480a      	ldr	r0, [pc, #40]	@ (800a698 <siprintf+0x3c>)
 800a66e:	9107      	str	r1, [sp, #28]
 800a670:	9104      	str	r1, [sp, #16]
 800a672:	490a      	ldr	r1, [pc, #40]	@ (800a69c <siprintf+0x40>)
 800a674:	f853 2b04 	ldr.w	r2, [r3], #4
 800a678:	9105      	str	r1, [sp, #20]
 800a67a:	2400      	movs	r4, #0
 800a67c:	a902      	add	r1, sp, #8
 800a67e:	6800      	ldr	r0, [r0, #0]
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a684:	f002 fbb6 	bl	800cdf4 <_svfiprintf_r>
 800a688:	9b02      	ldr	r3, [sp, #8]
 800a68a:	701c      	strb	r4, [r3, #0]
 800a68c:	b01d      	add	sp, #116	@ 0x74
 800a68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a692:	b003      	add	sp, #12
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	20000040 	.word	0x20000040
 800a69c:	ffff0208 	.word	0xffff0208

0800a6a0 <__sread>:
 800a6a0:	b510      	push	{r4, lr}
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a8:	f000 f8c8 	bl	800a83c <_read_r>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	bfab      	itete	ge
 800a6b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a6b4:	181b      	addge	r3, r3, r0
 800a6b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a6ba:	bfac      	ite	ge
 800a6bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6be:	81a3      	strhlt	r3, [r4, #12]
 800a6c0:	bd10      	pop	{r4, pc}

0800a6c2 <__swrite>:
 800a6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c6:	461f      	mov	r7, r3
 800a6c8:	898b      	ldrh	r3, [r1, #12]
 800a6ca:	05db      	lsls	r3, r3, #23
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	4616      	mov	r6, r2
 800a6d2:	d505      	bpl.n	800a6e0 <__swrite+0x1e>
 800a6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d8:	2302      	movs	r3, #2
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f000 f89c 	bl	800a818 <_lseek_r>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6ea:	81a3      	strh	r3, [r4, #12]
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f6:	f000 b8b3 	b.w	800a860 <_write_r>

0800a6fa <__sseek>:
 800a6fa:	b510      	push	{r4, lr}
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a702:	f000 f889 	bl	800a818 <_lseek_r>
 800a706:	1c43      	adds	r3, r0, #1
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	bf15      	itete	ne
 800a70c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a70e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a716:	81a3      	strheq	r3, [r4, #12]
 800a718:	bf18      	it	ne
 800a71a:	81a3      	strhne	r3, [r4, #12]
 800a71c:	bd10      	pop	{r4, pc}

0800a71e <__sclose>:
 800a71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a722:	f000 b869 	b.w	800a7f8 <_close_r>

0800a726 <memset>:
 800a726:	4402      	add	r2, r0
 800a728:	4603      	mov	r3, r0
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d100      	bne.n	800a730 <memset+0xa>
 800a72e:	4770      	bx	lr
 800a730:	f803 1b01 	strb.w	r1, [r3], #1
 800a734:	e7f9      	b.n	800a72a <memset+0x4>
	...

0800a738 <strtok>:
 800a738:	4b16      	ldr	r3, [pc, #88]	@ (800a794 <strtok+0x5c>)
 800a73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73e:	681f      	ldr	r7, [r3, #0]
 800a740:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a742:	4605      	mov	r5, r0
 800a744:	460e      	mov	r6, r1
 800a746:	b9ec      	cbnz	r4, 800a784 <strtok+0x4c>
 800a748:	2050      	movs	r0, #80	@ 0x50
 800a74a:	f000 ff8f 	bl	800b66c <malloc>
 800a74e:	4602      	mov	r2, r0
 800a750:	6478      	str	r0, [r7, #68]	@ 0x44
 800a752:	b920      	cbnz	r0, 800a75e <strtok+0x26>
 800a754:	4b10      	ldr	r3, [pc, #64]	@ (800a798 <strtok+0x60>)
 800a756:	4811      	ldr	r0, [pc, #68]	@ (800a79c <strtok+0x64>)
 800a758:	215b      	movs	r1, #91	@ 0x5b
 800a75a:	f000 f8c7 	bl	800a8ec <__assert_func>
 800a75e:	e9c0 4400 	strd	r4, r4, [r0]
 800a762:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a766:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a76a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a76e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a772:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a776:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a77a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a77e:	6184      	str	r4, [r0, #24]
 800a780:	7704      	strb	r4, [r0, #28]
 800a782:	6244      	str	r4, [r0, #36]	@ 0x24
 800a784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a786:	4631      	mov	r1, r6
 800a788:	4628      	mov	r0, r5
 800a78a:	2301      	movs	r3, #1
 800a78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a790:	f000 b806 	b.w	800a7a0 <__strtok_r>
 800a794:	20000040 	.word	0x20000040
 800a798:	0800e63a 	.word	0x0800e63a
 800a79c:	0800e651 	.word	0x0800e651

0800a7a0 <__strtok_r>:
 800a7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	b908      	cbnz	r0, 800a7aa <__strtok_r+0xa>
 800a7a6:	6814      	ldr	r4, [r2, #0]
 800a7a8:	b144      	cbz	r4, 800a7bc <__strtok_r+0x1c>
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a7b0:	460f      	mov	r7, r1
 800a7b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a7b6:	b91e      	cbnz	r6, 800a7c0 <__strtok_r+0x20>
 800a7b8:	b965      	cbnz	r5, 800a7d4 <__strtok_r+0x34>
 800a7ba:	6015      	str	r5, [r2, #0]
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e005      	b.n	800a7cc <__strtok_r+0x2c>
 800a7c0:	42b5      	cmp	r5, r6
 800a7c2:	d1f6      	bne.n	800a7b2 <__strtok_r+0x12>
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1f0      	bne.n	800a7aa <__strtok_r+0xa>
 800a7c8:	6014      	str	r4, [r2, #0]
 800a7ca:	7003      	strb	r3, [r0, #0]
 800a7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ce:	461c      	mov	r4, r3
 800a7d0:	e00c      	b.n	800a7ec <__strtok_r+0x4c>
 800a7d2:	b91d      	cbnz	r5, 800a7dc <__strtok_r+0x3c>
 800a7d4:	4627      	mov	r7, r4
 800a7d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7da:	460e      	mov	r6, r1
 800a7dc:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a7e0:	42ab      	cmp	r3, r5
 800a7e2:	d1f6      	bne.n	800a7d2 <__strtok_r+0x32>
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0f2      	beq.n	800a7ce <__strtok_r+0x2e>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	703b      	strb	r3, [r7, #0]
 800a7ec:	6014      	str	r4, [r2, #0]
 800a7ee:	e7ed      	b.n	800a7cc <__strtok_r+0x2c>

0800a7f0 <_localeconv_r>:
 800a7f0:	4800      	ldr	r0, [pc, #0]	@ (800a7f4 <_localeconv_r+0x4>)
 800a7f2:	4770      	bx	lr
 800a7f4:	20000180 	.word	0x20000180

0800a7f8 <_close_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d06      	ldr	r5, [pc, #24]	@ (800a814 <_close_r+0x1c>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	602b      	str	r3, [r5, #0]
 800a804:	f7f8 f9e8 	bl	8002bd8 <_close>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_close_r+0x1a>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_close_r+0x1a>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20001040 	.word	0x20001040

0800a818 <_lseek_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4d07      	ldr	r5, [pc, #28]	@ (800a838 <_lseek_r+0x20>)
 800a81c:	4604      	mov	r4, r0
 800a81e:	4608      	mov	r0, r1
 800a820:	4611      	mov	r1, r2
 800a822:	2200      	movs	r2, #0
 800a824:	602a      	str	r2, [r5, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	f7f8 f9fd 	bl	8002c26 <_lseek>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_lseek_r+0x1e>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_lseek_r+0x1e>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	20001040 	.word	0x20001040

0800a83c <_read_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d07      	ldr	r5, [pc, #28]	@ (800a85c <_read_r+0x20>)
 800a840:	4604      	mov	r4, r0
 800a842:	4608      	mov	r0, r1
 800a844:	4611      	mov	r1, r2
 800a846:	2200      	movs	r2, #0
 800a848:	602a      	str	r2, [r5, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	f7f8 f9a7 	bl	8002b9e <_read>
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	d102      	bne.n	800a85a <_read_r+0x1e>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	b103      	cbz	r3, 800a85a <_read_r+0x1e>
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	bd38      	pop	{r3, r4, r5, pc}
 800a85c:	20001040 	.word	0x20001040

0800a860 <_write_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d07      	ldr	r5, [pc, #28]	@ (800a880 <_write_r+0x20>)
 800a864:	4604      	mov	r4, r0
 800a866:	4608      	mov	r0, r1
 800a868:	4611      	mov	r1, r2
 800a86a:	2200      	movs	r2, #0
 800a86c:	602a      	str	r2, [r5, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	f7f7 fc10 	bl	8002094 <_write>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_write_r+0x1e>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_write_r+0x1e>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20001040 	.word	0x20001040

0800a884 <__errno>:
 800a884:	4b01      	ldr	r3, [pc, #4]	@ (800a88c <__errno+0x8>)
 800a886:	6818      	ldr	r0, [r3, #0]
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	20000040 	.word	0x20000040

0800a890 <__libc_init_array>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	4d0d      	ldr	r5, [pc, #52]	@ (800a8c8 <__libc_init_array+0x38>)
 800a894:	4c0d      	ldr	r4, [pc, #52]	@ (800a8cc <__libc_init_array+0x3c>)
 800a896:	1b64      	subs	r4, r4, r5
 800a898:	10a4      	asrs	r4, r4, #2
 800a89a:	2600      	movs	r6, #0
 800a89c:	42a6      	cmp	r6, r4
 800a89e:	d109      	bne.n	800a8b4 <__libc_init_array+0x24>
 800a8a0:	4d0b      	ldr	r5, [pc, #44]	@ (800a8d0 <__libc_init_array+0x40>)
 800a8a2:	4c0c      	ldr	r4, [pc, #48]	@ (800a8d4 <__libc_init_array+0x44>)
 800a8a4:	f003 faf8 	bl	800de98 <_init>
 800a8a8:	1b64      	subs	r4, r4, r5
 800a8aa:	10a4      	asrs	r4, r4, #2
 800a8ac:	2600      	movs	r6, #0
 800a8ae:	42a6      	cmp	r6, r4
 800a8b0:	d105      	bne.n	800a8be <__libc_init_array+0x2e>
 800a8b2:	bd70      	pop	{r4, r5, r6, pc}
 800a8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b8:	4798      	blx	r3
 800a8ba:	3601      	adds	r6, #1
 800a8bc:	e7ee      	b.n	800a89c <__libc_init_array+0xc>
 800a8be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c2:	4798      	blx	r3
 800a8c4:	3601      	adds	r6, #1
 800a8c6:	e7f2      	b.n	800a8ae <__libc_init_array+0x1e>
 800a8c8:	0800e988 	.word	0x0800e988
 800a8cc:	0800e988 	.word	0x0800e988
 800a8d0:	0800e988 	.word	0x0800e988
 800a8d4:	0800e98c 	.word	0x0800e98c

0800a8d8 <__retarget_lock_init_recursive>:
 800a8d8:	4770      	bx	lr

0800a8da <__retarget_lock_acquire_recursive>:
 800a8da:	4770      	bx	lr

0800a8dc <__retarget_lock_release_recursive>:
 800a8dc:	4770      	bx	lr
	...

0800a8e0 <nanf>:
 800a8e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a8e8 <nanf+0x8>
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	7fc00000 	.word	0x7fc00000

0800a8ec <__assert_func>:
 800a8ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8ee:	4614      	mov	r4, r2
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4b09      	ldr	r3, [pc, #36]	@ (800a918 <__assert_func+0x2c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	68d8      	ldr	r0, [r3, #12]
 800a8fa:	b14c      	cbz	r4, 800a910 <__assert_func+0x24>
 800a8fc:	4b07      	ldr	r3, [pc, #28]	@ (800a91c <__assert_func+0x30>)
 800a8fe:	9100      	str	r1, [sp, #0]
 800a900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a904:	4906      	ldr	r1, [pc, #24]	@ (800a920 <__assert_func+0x34>)
 800a906:	462b      	mov	r3, r5
 800a908:	f002 fd5e 	bl	800d3c8 <fiprintf>
 800a90c:	f002 fed8 	bl	800d6c0 <abort>
 800a910:	4b04      	ldr	r3, [pc, #16]	@ (800a924 <__assert_func+0x38>)
 800a912:	461c      	mov	r4, r3
 800a914:	e7f3      	b.n	800a8fe <__assert_func+0x12>
 800a916:	bf00      	nop
 800a918:	20000040 	.word	0x20000040
 800a91c:	0800e6ab 	.word	0x0800e6ab
 800a920:	0800e6b8 	.word	0x0800e6b8
 800a924:	0800e6e6 	.word	0x0800e6e6

0800a928 <quorem>:
 800a928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	6903      	ldr	r3, [r0, #16]
 800a92e:	690c      	ldr	r4, [r1, #16]
 800a930:	42a3      	cmp	r3, r4
 800a932:	4607      	mov	r7, r0
 800a934:	db7e      	blt.n	800aa34 <quorem+0x10c>
 800a936:	3c01      	subs	r4, #1
 800a938:	f101 0814 	add.w	r8, r1, #20
 800a93c:	00a3      	lsls	r3, r4, #2
 800a93e:	f100 0514 	add.w	r5, r0, #20
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a94e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a952:	3301      	adds	r3, #1
 800a954:	429a      	cmp	r2, r3
 800a956:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a95a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a95e:	d32e      	bcc.n	800a9be <quorem+0x96>
 800a960:	f04f 0a00 	mov.w	sl, #0
 800a964:	46c4      	mov	ip, r8
 800a966:	46ae      	mov	lr, r5
 800a968:	46d3      	mov	fp, sl
 800a96a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a96e:	b298      	uxth	r0, r3
 800a970:	fb06 a000 	mla	r0, r6, r0, sl
 800a974:	0c02      	lsrs	r2, r0, #16
 800a976:	0c1b      	lsrs	r3, r3, #16
 800a978:	fb06 2303 	mla	r3, r6, r3, r2
 800a97c:	f8de 2000 	ldr.w	r2, [lr]
 800a980:	b280      	uxth	r0, r0
 800a982:	b292      	uxth	r2, r2
 800a984:	1a12      	subs	r2, r2, r0
 800a986:	445a      	add	r2, fp
 800a988:	f8de 0000 	ldr.w	r0, [lr]
 800a98c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a990:	b29b      	uxth	r3, r3
 800a992:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a996:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a99a:	b292      	uxth	r2, r2
 800a99c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a9a0:	45e1      	cmp	r9, ip
 800a9a2:	f84e 2b04 	str.w	r2, [lr], #4
 800a9a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a9aa:	d2de      	bcs.n	800a96a <quorem+0x42>
 800a9ac:	9b00      	ldr	r3, [sp, #0]
 800a9ae:	58eb      	ldr	r3, [r5, r3]
 800a9b0:	b92b      	cbnz	r3, 800a9be <quorem+0x96>
 800a9b2:	9b01      	ldr	r3, [sp, #4]
 800a9b4:	3b04      	subs	r3, #4
 800a9b6:	429d      	cmp	r5, r3
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	d32f      	bcc.n	800aa1c <quorem+0xf4>
 800a9bc:	613c      	str	r4, [r7, #16]
 800a9be:	4638      	mov	r0, r7
 800a9c0:	f001 f9c6 	bl	800bd50 <__mcmp>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	db25      	blt.n	800aa14 <quorem+0xec>
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9d0:	f8d1 c000 	ldr.w	ip, [r1]
 800a9d4:	fa1f fe82 	uxth.w	lr, r2
 800a9d8:	fa1f f38c 	uxth.w	r3, ip
 800a9dc:	eba3 030e 	sub.w	r3, r3, lr
 800a9e0:	4403      	add	r3, r0
 800a9e2:	0c12      	lsrs	r2, r2, #16
 800a9e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a9e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9f2:	45c1      	cmp	r9, r8
 800a9f4:	f841 3b04 	str.w	r3, [r1], #4
 800a9f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9fc:	d2e6      	bcs.n	800a9cc <quorem+0xa4>
 800a9fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa06:	b922      	cbnz	r2, 800aa12 <quorem+0xea>
 800aa08:	3b04      	subs	r3, #4
 800aa0a:	429d      	cmp	r5, r3
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	d30b      	bcc.n	800aa28 <quorem+0x100>
 800aa10:	613c      	str	r4, [r7, #16]
 800aa12:	3601      	adds	r6, #1
 800aa14:	4630      	mov	r0, r6
 800aa16:	b003      	add	sp, #12
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	6812      	ldr	r2, [r2, #0]
 800aa1e:	3b04      	subs	r3, #4
 800aa20:	2a00      	cmp	r2, #0
 800aa22:	d1cb      	bne.n	800a9bc <quorem+0x94>
 800aa24:	3c01      	subs	r4, #1
 800aa26:	e7c6      	b.n	800a9b6 <quorem+0x8e>
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	3b04      	subs	r3, #4
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	d1ef      	bne.n	800aa10 <quorem+0xe8>
 800aa30:	3c01      	subs	r4, #1
 800aa32:	e7ea      	b.n	800aa0a <quorem+0xe2>
 800aa34:	2000      	movs	r0, #0
 800aa36:	e7ee      	b.n	800aa16 <quorem+0xee>

0800aa38 <_dtoa_r>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	69c7      	ldr	r7, [r0, #28]
 800aa3e:	b097      	sub	sp, #92	@ 0x5c
 800aa40:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aa44:	ec55 4b10 	vmov	r4, r5, d0
 800aa48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800aa4a:	9107      	str	r1, [sp, #28]
 800aa4c:	4681      	mov	r9, r0
 800aa4e:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa50:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa52:	b97f      	cbnz	r7, 800aa74 <_dtoa_r+0x3c>
 800aa54:	2010      	movs	r0, #16
 800aa56:	f000 fe09 	bl	800b66c <malloc>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	f8c9 001c 	str.w	r0, [r9, #28]
 800aa60:	b920      	cbnz	r0, 800aa6c <_dtoa_r+0x34>
 800aa62:	4ba9      	ldr	r3, [pc, #676]	@ (800ad08 <_dtoa_r+0x2d0>)
 800aa64:	21ef      	movs	r1, #239	@ 0xef
 800aa66:	48a9      	ldr	r0, [pc, #676]	@ (800ad0c <_dtoa_r+0x2d4>)
 800aa68:	f7ff ff40 	bl	800a8ec <__assert_func>
 800aa6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa70:	6007      	str	r7, [r0, #0]
 800aa72:	60c7      	str	r7, [r0, #12]
 800aa74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa78:	6819      	ldr	r1, [r3, #0]
 800aa7a:	b159      	cbz	r1, 800aa94 <_dtoa_r+0x5c>
 800aa7c:	685a      	ldr	r2, [r3, #4]
 800aa7e:	604a      	str	r2, [r1, #4]
 800aa80:	2301      	movs	r3, #1
 800aa82:	4093      	lsls	r3, r2
 800aa84:	608b      	str	r3, [r1, #8]
 800aa86:	4648      	mov	r0, r9
 800aa88:	f000 fee6 	bl	800b858 <_Bfree>
 800aa8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa90:	2200      	movs	r2, #0
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	1e2b      	subs	r3, r5, #0
 800aa96:	bfb9      	ittee	lt
 800aa98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa9c:	9305      	strlt	r3, [sp, #20]
 800aa9e:	2300      	movge	r3, #0
 800aaa0:	6033      	strge	r3, [r6, #0]
 800aaa2:	9f05      	ldr	r7, [sp, #20]
 800aaa4:	4b9a      	ldr	r3, [pc, #616]	@ (800ad10 <_dtoa_r+0x2d8>)
 800aaa6:	bfbc      	itt	lt
 800aaa8:	2201      	movlt	r2, #1
 800aaaa:	6032      	strlt	r2, [r6, #0]
 800aaac:	43bb      	bics	r3, r7
 800aaae:	d112      	bne.n	800aad6 <_dtoa_r+0x9e>
 800aab0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aab2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aabc:	4323      	orrs	r3, r4
 800aabe:	f000 855a 	beq.w	800b576 <_dtoa_r+0xb3e>
 800aac2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aac4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ad24 <_dtoa_r+0x2ec>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 855c 	beq.w	800b586 <_dtoa_r+0xb4e>
 800aace:	f10a 0303 	add.w	r3, sl, #3
 800aad2:	f000 bd56 	b.w	800b582 <_dtoa_r+0xb4a>
 800aad6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aada:	2200      	movs	r2, #0
 800aadc:	ec51 0b17 	vmov	r0, r1, d7
 800aae0:	2300      	movs	r3, #0
 800aae2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800aae6:	f7f6 f80f 	bl	8000b08 <__aeabi_dcmpeq>
 800aaea:	4680      	mov	r8, r0
 800aaec:	b158      	cbz	r0, 800ab06 <_dtoa_r+0xce>
 800aaee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aaf6:	b113      	cbz	r3, 800aafe <_dtoa_r+0xc6>
 800aaf8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aafa:	4b86      	ldr	r3, [pc, #536]	@ (800ad14 <_dtoa_r+0x2dc>)
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ad28 <_dtoa_r+0x2f0>
 800ab02:	f000 bd40 	b.w	800b586 <_dtoa_r+0xb4e>
 800ab06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ab0a:	aa14      	add	r2, sp, #80	@ 0x50
 800ab0c:	a915      	add	r1, sp, #84	@ 0x54
 800ab0e:	4648      	mov	r0, r9
 800ab10:	f001 fa3e 	bl	800bf90 <__d2b>
 800ab14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ab18:	9002      	str	r0, [sp, #8]
 800ab1a:	2e00      	cmp	r6, #0
 800ab1c:	d078      	beq.n	800ac10 <_dtoa_r+0x1d8>
 800ab1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ab24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab38:	4619      	mov	r1, r3
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	4b76      	ldr	r3, [pc, #472]	@ (800ad18 <_dtoa_r+0x2e0>)
 800ab3e:	f7f5 fbc3 	bl	80002c8 <__aeabi_dsub>
 800ab42:	a36b      	add	r3, pc, #428	@ (adr r3, 800acf0 <_dtoa_r+0x2b8>)
 800ab44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab48:	f7f5 fd76 	bl	8000638 <__aeabi_dmul>
 800ab4c:	a36a      	add	r3, pc, #424	@ (adr r3, 800acf8 <_dtoa_r+0x2c0>)
 800ab4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab52:	f7f5 fbbb 	bl	80002cc <__adddf3>
 800ab56:	4604      	mov	r4, r0
 800ab58:	4630      	mov	r0, r6
 800ab5a:	460d      	mov	r5, r1
 800ab5c:	f7f5 fd02 	bl	8000564 <__aeabi_i2d>
 800ab60:	a367      	add	r3, pc, #412	@ (adr r3, 800ad00 <_dtoa_r+0x2c8>)
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	f7f5 fd67 	bl	8000638 <__aeabi_dmul>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4620      	mov	r0, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	f7f5 fbab 	bl	80002cc <__adddf3>
 800ab76:	4604      	mov	r4, r0
 800ab78:	460d      	mov	r5, r1
 800ab7a:	f7f6 f80d 	bl	8000b98 <__aeabi_d2iz>
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4607      	mov	r7, r0
 800ab82:	2300      	movs	r3, #0
 800ab84:	4620      	mov	r0, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	f7f5 ffc8 	bl	8000b1c <__aeabi_dcmplt>
 800ab8c:	b140      	cbz	r0, 800aba0 <_dtoa_r+0x168>
 800ab8e:	4638      	mov	r0, r7
 800ab90:	f7f5 fce8 	bl	8000564 <__aeabi_i2d>
 800ab94:	4622      	mov	r2, r4
 800ab96:	462b      	mov	r3, r5
 800ab98:	f7f5 ffb6 	bl	8000b08 <__aeabi_dcmpeq>
 800ab9c:	b900      	cbnz	r0, 800aba0 <_dtoa_r+0x168>
 800ab9e:	3f01      	subs	r7, #1
 800aba0:	2f16      	cmp	r7, #22
 800aba2:	d852      	bhi.n	800ac4a <_dtoa_r+0x212>
 800aba4:	4b5d      	ldr	r3, [pc, #372]	@ (800ad1c <_dtoa_r+0x2e4>)
 800aba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abb2:	f7f5 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d049      	beq.n	800ac4e <_dtoa_r+0x216>
 800abba:	3f01      	subs	r7, #1
 800abbc:	2300      	movs	r3, #0
 800abbe:	9310      	str	r3, [sp, #64]	@ 0x40
 800abc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800abc2:	1b9b      	subs	r3, r3, r6
 800abc4:	1e5a      	subs	r2, r3, #1
 800abc6:	bf45      	ittet	mi
 800abc8:	f1c3 0301 	rsbmi	r3, r3, #1
 800abcc:	9300      	strmi	r3, [sp, #0]
 800abce:	2300      	movpl	r3, #0
 800abd0:	2300      	movmi	r3, #0
 800abd2:	9206      	str	r2, [sp, #24]
 800abd4:	bf54      	ite	pl
 800abd6:	9300      	strpl	r3, [sp, #0]
 800abd8:	9306      	strmi	r3, [sp, #24]
 800abda:	2f00      	cmp	r7, #0
 800abdc:	db39      	blt.n	800ac52 <_dtoa_r+0x21a>
 800abde:	9b06      	ldr	r3, [sp, #24]
 800abe0:	970d      	str	r7, [sp, #52]	@ 0x34
 800abe2:	443b      	add	r3, r7
 800abe4:	9306      	str	r3, [sp, #24]
 800abe6:	2300      	movs	r3, #0
 800abe8:	9308      	str	r3, [sp, #32]
 800abea:	9b07      	ldr	r3, [sp, #28]
 800abec:	2b09      	cmp	r3, #9
 800abee:	d863      	bhi.n	800acb8 <_dtoa_r+0x280>
 800abf0:	2b05      	cmp	r3, #5
 800abf2:	bfc4      	itt	gt
 800abf4:	3b04      	subgt	r3, #4
 800abf6:	9307      	strgt	r3, [sp, #28]
 800abf8:	9b07      	ldr	r3, [sp, #28]
 800abfa:	f1a3 0302 	sub.w	r3, r3, #2
 800abfe:	bfcc      	ite	gt
 800ac00:	2400      	movgt	r4, #0
 800ac02:	2401      	movle	r4, #1
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d863      	bhi.n	800acd0 <_dtoa_r+0x298>
 800ac08:	e8df f003 	tbb	[pc, r3]
 800ac0c:	2b375452 	.word	0x2b375452
 800ac10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ac14:	441e      	add	r6, r3
 800ac16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ac1a:	2b20      	cmp	r3, #32
 800ac1c:	bfc1      	itttt	gt
 800ac1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ac22:	409f      	lslgt	r7, r3
 800ac24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ac28:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac2c:	bfd6      	itet	le
 800ac2e:	f1c3 0320 	rsble	r3, r3, #32
 800ac32:	ea47 0003 	orrgt.w	r0, r7, r3
 800ac36:	fa04 f003 	lslle.w	r0, r4, r3
 800ac3a:	f7f5 fc83 	bl	8000544 <__aeabi_ui2d>
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac44:	3e01      	subs	r6, #1
 800ac46:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac48:	e776      	b.n	800ab38 <_dtoa_r+0x100>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e7b7      	b.n	800abbe <_dtoa_r+0x186>
 800ac4e:	9010      	str	r0, [sp, #64]	@ 0x40
 800ac50:	e7b6      	b.n	800abc0 <_dtoa_r+0x188>
 800ac52:	9b00      	ldr	r3, [sp, #0]
 800ac54:	1bdb      	subs	r3, r3, r7
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	427b      	negs	r3, r7
 800ac5a:	9308      	str	r3, [sp, #32]
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac60:	e7c3      	b.n	800abea <_dtoa_r+0x1b2>
 800ac62:	2301      	movs	r3, #1
 800ac64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac68:	eb07 0b03 	add.w	fp, r7, r3
 800ac6c:	f10b 0301 	add.w	r3, fp, #1
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	9303      	str	r3, [sp, #12]
 800ac74:	bfb8      	it	lt
 800ac76:	2301      	movlt	r3, #1
 800ac78:	e006      	b.n	800ac88 <_dtoa_r+0x250>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	dd28      	ble.n	800acd6 <_dtoa_r+0x29e>
 800ac84:	469b      	mov	fp, r3
 800ac86:	9303      	str	r3, [sp, #12]
 800ac88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	2204      	movs	r2, #4
 800ac90:	f102 0514 	add.w	r5, r2, #20
 800ac94:	429d      	cmp	r5, r3
 800ac96:	d926      	bls.n	800ace6 <_dtoa_r+0x2ae>
 800ac98:	6041      	str	r1, [r0, #4]
 800ac9a:	4648      	mov	r0, r9
 800ac9c:	f000 fd9c 	bl	800b7d8 <_Balloc>
 800aca0:	4682      	mov	sl, r0
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d142      	bne.n	800ad2c <_dtoa_r+0x2f4>
 800aca6:	4b1e      	ldr	r3, [pc, #120]	@ (800ad20 <_dtoa_r+0x2e8>)
 800aca8:	4602      	mov	r2, r0
 800acaa:	f240 11af 	movw	r1, #431	@ 0x1af
 800acae:	e6da      	b.n	800aa66 <_dtoa_r+0x2e>
 800acb0:	2300      	movs	r3, #0
 800acb2:	e7e3      	b.n	800ac7c <_dtoa_r+0x244>
 800acb4:	2300      	movs	r3, #0
 800acb6:	e7d5      	b.n	800ac64 <_dtoa_r+0x22c>
 800acb8:	2401      	movs	r4, #1
 800acba:	2300      	movs	r3, #0
 800acbc:	9307      	str	r3, [sp, #28]
 800acbe:	9409      	str	r4, [sp, #36]	@ 0x24
 800acc0:	f04f 3bff 	mov.w	fp, #4294967295
 800acc4:	2200      	movs	r2, #0
 800acc6:	f8cd b00c 	str.w	fp, [sp, #12]
 800acca:	2312      	movs	r3, #18
 800accc:	920c      	str	r2, [sp, #48]	@ 0x30
 800acce:	e7db      	b.n	800ac88 <_dtoa_r+0x250>
 800acd0:	2301      	movs	r3, #1
 800acd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800acd4:	e7f4      	b.n	800acc0 <_dtoa_r+0x288>
 800acd6:	f04f 0b01 	mov.w	fp, #1
 800acda:	f8cd b00c 	str.w	fp, [sp, #12]
 800acde:	465b      	mov	r3, fp
 800ace0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ace4:	e7d0      	b.n	800ac88 <_dtoa_r+0x250>
 800ace6:	3101      	adds	r1, #1
 800ace8:	0052      	lsls	r2, r2, #1
 800acea:	e7d1      	b.n	800ac90 <_dtoa_r+0x258>
 800acec:	f3af 8000 	nop.w
 800acf0:	636f4361 	.word	0x636f4361
 800acf4:	3fd287a7 	.word	0x3fd287a7
 800acf8:	8b60c8b3 	.word	0x8b60c8b3
 800acfc:	3fc68a28 	.word	0x3fc68a28
 800ad00:	509f79fb 	.word	0x509f79fb
 800ad04:	3fd34413 	.word	0x3fd34413
 800ad08:	0800e63a 	.word	0x0800e63a
 800ad0c:	0800e6f4 	.word	0x0800e6f4
 800ad10:	7ff00000 	.word	0x7ff00000
 800ad14:	0800e612 	.word	0x0800e612
 800ad18:	3ff80000 	.word	0x3ff80000
 800ad1c:	0800e868 	.word	0x0800e868
 800ad20:	0800e74c 	.word	0x0800e74c
 800ad24:	0800e6f0 	.word	0x0800e6f0
 800ad28:	0800e611 	.word	0x0800e611
 800ad2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad30:	6018      	str	r0, [r3, #0]
 800ad32:	9b03      	ldr	r3, [sp, #12]
 800ad34:	2b0e      	cmp	r3, #14
 800ad36:	f200 80a1 	bhi.w	800ae7c <_dtoa_r+0x444>
 800ad3a:	2c00      	cmp	r4, #0
 800ad3c:	f000 809e 	beq.w	800ae7c <_dtoa_r+0x444>
 800ad40:	2f00      	cmp	r7, #0
 800ad42:	dd33      	ble.n	800adac <_dtoa_r+0x374>
 800ad44:	4b9c      	ldr	r3, [pc, #624]	@ (800afb8 <_dtoa_r+0x580>)
 800ad46:	f007 020f 	and.w	r2, r7, #15
 800ad4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad4e:	ed93 7b00 	vldr	d7, [r3]
 800ad52:	05f8      	lsls	r0, r7, #23
 800ad54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ad58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad5c:	d516      	bpl.n	800ad8c <_dtoa_r+0x354>
 800ad5e:	4b97      	ldr	r3, [pc, #604]	@ (800afbc <_dtoa_r+0x584>)
 800ad60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad68:	f7f5 fd90 	bl	800088c <__aeabi_ddiv>
 800ad6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad70:	f004 040f 	and.w	r4, r4, #15
 800ad74:	2603      	movs	r6, #3
 800ad76:	4d91      	ldr	r5, [pc, #580]	@ (800afbc <_dtoa_r+0x584>)
 800ad78:	b954      	cbnz	r4, 800ad90 <_dtoa_r+0x358>
 800ad7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad82:	f7f5 fd83 	bl	800088c <__aeabi_ddiv>
 800ad86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad8a:	e028      	b.n	800adde <_dtoa_r+0x3a6>
 800ad8c:	2602      	movs	r6, #2
 800ad8e:	e7f2      	b.n	800ad76 <_dtoa_r+0x33e>
 800ad90:	07e1      	lsls	r1, r4, #31
 800ad92:	d508      	bpl.n	800ada6 <_dtoa_r+0x36e>
 800ad94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad9c:	f7f5 fc4c 	bl	8000638 <__aeabi_dmul>
 800ada0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ada4:	3601      	adds	r6, #1
 800ada6:	1064      	asrs	r4, r4, #1
 800ada8:	3508      	adds	r5, #8
 800adaa:	e7e5      	b.n	800ad78 <_dtoa_r+0x340>
 800adac:	f000 80af 	beq.w	800af0e <_dtoa_r+0x4d6>
 800adb0:	427c      	negs	r4, r7
 800adb2:	4b81      	ldr	r3, [pc, #516]	@ (800afb8 <_dtoa_r+0x580>)
 800adb4:	4d81      	ldr	r5, [pc, #516]	@ (800afbc <_dtoa_r+0x584>)
 800adb6:	f004 020f 	and.w	r2, r4, #15
 800adba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800adc6:	f7f5 fc37 	bl	8000638 <__aeabi_dmul>
 800adca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adce:	1124      	asrs	r4, r4, #4
 800add0:	2300      	movs	r3, #0
 800add2:	2602      	movs	r6, #2
 800add4:	2c00      	cmp	r4, #0
 800add6:	f040 808f 	bne.w	800aef8 <_dtoa_r+0x4c0>
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1d3      	bne.n	800ad86 <_dtoa_r+0x34e>
 800adde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ade0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 8094 	beq.w	800af12 <_dtoa_r+0x4da>
 800adea:	4b75      	ldr	r3, [pc, #468]	@ (800afc0 <_dtoa_r+0x588>)
 800adec:	2200      	movs	r2, #0
 800adee:	4620      	mov	r0, r4
 800adf0:	4629      	mov	r1, r5
 800adf2:	f7f5 fe93 	bl	8000b1c <__aeabi_dcmplt>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f000 808b 	beq.w	800af12 <_dtoa_r+0x4da>
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 8087 	beq.w	800af12 <_dtoa_r+0x4da>
 800ae04:	f1bb 0f00 	cmp.w	fp, #0
 800ae08:	dd34      	ble.n	800ae74 <_dtoa_r+0x43c>
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	4b6d      	ldr	r3, [pc, #436]	@ (800afc4 <_dtoa_r+0x58c>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7f5 fc11 	bl	8000638 <__aeabi_dmul>
 800ae16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae1a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ae1e:	3601      	adds	r6, #1
 800ae20:	465c      	mov	r4, fp
 800ae22:	4630      	mov	r0, r6
 800ae24:	f7f5 fb9e 	bl	8000564 <__aeabi_i2d>
 800ae28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae2c:	f7f5 fc04 	bl	8000638 <__aeabi_dmul>
 800ae30:	4b65      	ldr	r3, [pc, #404]	@ (800afc8 <_dtoa_r+0x590>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	f7f5 fa4a 	bl	80002cc <__adddf3>
 800ae38:	4605      	mov	r5, r0
 800ae3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	d16a      	bne.n	800af18 <_dtoa_r+0x4e0>
 800ae42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae46:	4b61      	ldr	r3, [pc, #388]	@ (800afcc <_dtoa_r+0x594>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f7f5 fa3d 	bl	80002c8 <__aeabi_dsub>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae56:	462a      	mov	r2, r5
 800ae58:	4633      	mov	r3, r6
 800ae5a:	f7f5 fe7d 	bl	8000b58 <__aeabi_dcmpgt>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	f040 8298 	bne.w	800b394 <_dtoa_r+0x95c>
 800ae64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae68:	462a      	mov	r2, r5
 800ae6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae6e:	f7f5 fe55 	bl	8000b1c <__aeabi_dcmplt>
 800ae72:	bb38      	cbnz	r0, 800aec4 <_dtoa_r+0x48c>
 800ae74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ae78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f2c0 8157 	blt.w	800b132 <_dtoa_r+0x6fa>
 800ae84:	2f0e      	cmp	r7, #14
 800ae86:	f300 8154 	bgt.w	800b132 <_dtoa_r+0x6fa>
 800ae8a:	4b4b      	ldr	r3, [pc, #300]	@ (800afb8 <_dtoa_r+0x580>)
 800ae8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae90:	ed93 7b00 	vldr	d7, [r3]
 800ae94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	ed8d 7b00 	vstr	d7, [sp]
 800ae9c:	f280 80e5 	bge.w	800b06a <_dtoa_r+0x632>
 800aea0:	9b03      	ldr	r3, [sp, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f300 80e1 	bgt.w	800b06a <_dtoa_r+0x632>
 800aea8:	d10c      	bne.n	800aec4 <_dtoa_r+0x48c>
 800aeaa:	4b48      	ldr	r3, [pc, #288]	@ (800afcc <_dtoa_r+0x594>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	ec51 0b17 	vmov	r0, r1, d7
 800aeb2:	f7f5 fbc1 	bl	8000638 <__aeabi_dmul>
 800aeb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeba:	f7f5 fe43 	bl	8000b44 <__aeabi_dcmpge>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f000 8266 	beq.w	800b390 <_dtoa_r+0x958>
 800aec4:	2400      	movs	r4, #0
 800aec6:	4625      	mov	r5, r4
 800aec8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aeca:	4656      	mov	r6, sl
 800aecc:	ea6f 0803 	mvn.w	r8, r3
 800aed0:	2700      	movs	r7, #0
 800aed2:	4621      	mov	r1, r4
 800aed4:	4648      	mov	r0, r9
 800aed6:	f000 fcbf 	bl	800b858 <_Bfree>
 800aeda:	2d00      	cmp	r5, #0
 800aedc:	f000 80bd 	beq.w	800b05a <_dtoa_r+0x622>
 800aee0:	b12f      	cbz	r7, 800aeee <_dtoa_r+0x4b6>
 800aee2:	42af      	cmp	r7, r5
 800aee4:	d003      	beq.n	800aeee <_dtoa_r+0x4b6>
 800aee6:	4639      	mov	r1, r7
 800aee8:	4648      	mov	r0, r9
 800aeea:	f000 fcb5 	bl	800b858 <_Bfree>
 800aeee:	4629      	mov	r1, r5
 800aef0:	4648      	mov	r0, r9
 800aef2:	f000 fcb1 	bl	800b858 <_Bfree>
 800aef6:	e0b0      	b.n	800b05a <_dtoa_r+0x622>
 800aef8:	07e2      	lsls	r2, r4, #31
 800aefa:	d505      	bpl.n	800af08 <_dtoa_r+0x4d0>
 800aefc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af00:	f7f5 fb9a 	bl	8000638 <__aeabi_dmul>
 800af04:	3601      	adds	r6, #1
 800af06:	2301      	movs	r3, #1
 800af08:	1064      	asrs	r4, r4, #1
 800af0a:	3508      	adds	r5, #8
 800af0c:	e762      	b.n	800add4 <_dtoa_r+0x39c>
 800af0e:	2602      	movs	r6, #2
 800af10:	e765      	b.n	800adde <_dtoa_r+0x3a6>
 800af12:	9c03      	ldr	r4, [sp, #12]
 800af14:	46b8      	mov	r8, r7
 800af16:	e784      	b.n	800ae22 <_dtoa_r+0x3ea>
 800af18:	4b27      	ldr	r3, [pc, #156]	@ (800afb8 <_dtoa_r+0x580>)
 800af1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af24:	4454      	add	r4, sl
 800af26:	2900      	cmp	r1, #0
 800af28:	d054      	beq.n	800afd4 <_dtoa_r+0x59c>
 800af2a:	4929      	ldr	r1, [pc, #164]	@ (800afd0 <_dtoa_r+0x598>)
 800af2c:	2000      	movs	r0, #0
 800af2e:	f7f5 fcad 	bl	800088c <__aeabi_ddiv>
 800af32:	4633      	mov	r3, r6
 800af34:	462a      	mov	r2, r5
 800af36:	f7f5 f9c7 	bl	80002c8 <__aeabi_dsub>
 800af3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af3e:	4656      	mov	r6, sl
 800af40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af44:	f7f5 fe28 	bl	8000b98 <__aeabi_d2iz>
 800af48:	4605      	mov	r5, r0
 800af4a:	f7f5 fb0b 	bl	8000564 <__aeabi_i2d>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af56:	f7f5 f9b7 	bl	80002c8 <__aeabi_dsub>
 800af5a:	3530      	adds	r5, #48	@ 0x30
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af64:	f806 5b01 	strb.w	r5, [r6], #1
 800af68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af6c:	f7f5 fdd6 	bl	8000b1c <__aeabi_dcmplt>
 800af70:	2800      	cmp	r0, #0
 800af72:	d172      	bne.n	800b05a <_dtoa_r+0x622>
 800af74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af78:	4911      	ldr	r1, [pc, #68]	@ (800afc0 <_dtoa_r+0x588>)
 800af7a:	2000      	movs	r0, #0
 800af7c:	f7f5 f9a4 	bl	80002c8 <__aeabi_dsub>
 800af80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af84:	f7f5 fdca 	bl	8000b1c <__aeabi_dcmplt>
 800af88:	2800      	cmp	r0, #0
 800af8a:	f040 80b4 	bne.w	800b0f6 <_dtoa_r+0x6be>
 800af8e:	42a6      	cmp	r6, r4
 800af90:	f43f af70 	beq.w	800ae74 <_dtoa_r+0x43c>
 800af94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800af98:	4b0a      	ldr	r3, [pc, #40]	@ (800afc4 <_dtoa_r+0x58c>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	f7f5 fb4c 	bl	8000638 <__aeabi_dmul>
 800afa0:	4b08      	ldr	r3, [pc, #32]	@ (800afc4 <_dtoa_r+0x58c>)
 800afa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afa6:	2200      	movs	r2, #0
 800afa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afac:	f7f5 fb44 	bl	8000638 <__aeabi_dmul>
 800afb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afb4:	e7c4      	b.n	800af40 <_dtoa_r+0x508>
 800afb6:	bf00      	nop
 800afb8:	0800e868 	.word	0x0800e868
 800afbc:	0800e840 	.word	0x0800e840
 800afc0:	3ff00000 	.word	0x3ff00000
 800afc4:	40240000 	.word	0x40240000
 800afc8:	401c0000 	.word	0x401c0000
 800afcc:	40140000 	.word	0x40140000
 800afd0:	3fe00000 	.word	0x3fe00000
 800afd4:	4631      	mov	r1, r6
 800afd6:	4628      	mov	r0, r5
 800afd8:	f7f5 fb2e 	bl	8000638 <__aeabi_dmul>
 800afdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afe0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800afe2:	4656      	mov	r6, sl
 800afe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afe8:	f7f5 fdd6 	bl	8000b98 <__aeabi_d2iz>
 800afec:	4605      	mov	r5, r0
 800afee:	f7f5 fab9 	bl	8000564 <__aeabi_i2d>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800affa:	f7f5 f965 	bl	80002c8 <__aeabi_dsub>
 800affe:	3530      	adds	r5, #48	@ 0x30
 800b000:	f806 5b01 	strb.w	r5, [r6], #1
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	42a6      	cmp	r6, r4
 800b00a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b00e:	f04f 0200 	mov.w	r2, #0
 800b012:	d124      	bne.n	800b05e <_dtoa_r+0x626>
 800b014:	4baf      	ldr	r3, [pc, #700]	@ (800b2d4 <_dtoa_r+0x89c>)
 800b016:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b01a:	f7f5 f957 	bl	80002cc <__adddf3>
 800b01e:	4602      	mov	r2, r0
 800b020:	460b      	mov	r3, r1
 800b022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b026:	f7f5 fd97 	bl	8000b58 <__aeabi_dcmpgt>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d163      	bne.n	800b0f6 <_dtoa_r+0x6be>
 800b02e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b032:	49a8      	ldr	r1, [pc, #672]	@ (800b2d4 <_dtoa_r+0x89c>)
 800b034:	2000      	movs	r0, #0
 800b036:	f7f5 f947 	bl	80002c8 <__aeabi_dsub>
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b042:	f7f5 fd6b 	bl	8000b1c <__aeabi_dcmplt>
 800b046:	2800      	cmp	r0, #0
 800b048:	f43f af14 	beq.w	800ae74 <_dtoa_r+0x43c>
 800b04c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b04e:	1e73      	subs	r3, r6, #1
 800b050:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b052:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b056:	2b30      	cmp	r3, #48	@ 0x30
 800b058:	d0f8      	beq.n	800b04c <_dtoa_r+0x614>
 800b05a:	4647      	mov	r7, r8
 800b05c:	e03b      	b.n	800b0d6 <_dtoa_r+0x69e>
 800b05e:	4b9e      	ldr	r3, [pc, #632]	@ (800b2d8 <_dtoa_r+0x8a0>)
 800b060:	f7f5 faea 	bl	8000638 <__aeabi_dmul>
 800b064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b068:	e7bc      	b.n	800afe4 <_dtoa_r+0x5ac>
 800b06a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b06e:	4656      	mov	r6, sl
 800b070:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f7f5 fc08 	bl	800088c <__aeabi_ddiv>
 800b07c:	f7f5 fd8c 	bl	8000b98 <__aeabi_d2iz>
 800b080:	4680      	mov	r8, r0
 800b082:	f7f5 fa6f 	bl	8000564 <__aeabi_i2d>
 800b086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b08a:	f7f5 fad5 	bl	8000638 <__aeabi_dmul>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	4620      	mov	r0, r4
 800b094:	4629      	mov	r1, r5
 800b096:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b09a:	f7f5 f915 	bl	80002c8 <__aeabi_dsub>
 800b09e:	f806 4b01 	strb.w	r4, [r6], #1
 800b0a2:	9d03      	ldr	r5, [sp, #12]
 800b0a4:	eba6 040a 	sub.w	r4, r6, sl
 800b0a8:	42a5      	cmp	r5, r4
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	d133      	bne.n	800b118 <_dtoa_r+0x6e0>
 800b0b0:	f7f5 f90c 	bl	80002cc <__adddf3>
 800b0b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	460d      	mov	r5, r1
 800b0bc:	f7f5 fd4c 	bl	8000b58 <__aeabi_dcmpgt>
 800b0c0:	b9c0      	cbnz	r0, 800b0f4 <_dtoa_r+0x6bc>
 800b0c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	f7f5 fd1d 	bl	8000b08 <__aeabi_dcmpeq>
 800b0ce:	b110      	cbz	r0, 800b0d6 <_dtoa_r+0x69e>
 800b0d0:	f018 0f01 	tst.w	r8, #1
 800b0d4:	d10e      	bne.n	800b0f4 <_dtoa_r+0x6bc>
 800b0d6:	9902      	ldr	r1, [sp, #8]
 800b0d8:	4648      	mov	r0, r9
 800b0da:	f000 fbbd 	bl	800b858 <_Bfree>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	7033      	strb	r3, [r6, #0]
 800b0e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b0e4:	3701      	adds	r7, #1
 800b0e6:	601f      	str	r7, [r3, #0]
 800b0e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f000 824b 	beq.w	800b586 <_dtoa_r+0xb4e>
 800b0f0:	601e      	str	r6, [r3, #0]
 800b0f2:	e248      	b.n	800b586 <_dtoa_r+0xb4e>
 800b0f4:	46b8      	mov	r8, r7
 800b0f6:	4633      	mov	r3, r6
 800b0f8:	461e      	mov	r6, r3
 800b0fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0fe:	2a39      	cmp	r2, #57	@ 0x39
 800b100:	d106      	bne.n	800b110 <_dtoa_r+0x6d8>
 800b102:	459a      	cmp	sl, r3
 800b104:	d1f8      	bne.n	800b0f8 <_dtoa_r+0x6c0>
 800b106:	2230      	movs	r2, #48	@ 0x30
 800b108:	f108 0801 	add.w	r8, r8, #1
 800b10c:	f88a 2000 	strb.w	r2, [sl]
 800b110:	781a      	ldrb	r2, [r3, #0]
 800b112:	3201      	adds	r2, #1
 800b114:	701a      	strb	r2, [r3, #0]
 800b116:	e7a0      	b.n	800b05a <_dtoa_r+0x622>
 800b118:	4b6f      	ldr	r3, [pc, #444]	@ (800b2d8 <_dtoa_r+0x8a0>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	f7f5 fa8c 	bl	8000638 <__aeabi_dmul>
 800b120:	2200      	movs	r2, #0
 800b122:	2300      	movs	r3, #0
 800b124:	4604      	mov	r4, r0
 800b126:	460d      	mov	r5, r1
 800b128:	f7f5 fcee 	bl	8000b08 <__aeabi_dcmpeq>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d09f      	beq.n	800b070 <_dtoa_r+0x638>
 800b130:	e7d1      	b.n	800b0d6 <_dtoa_r+0x69e>
 800b132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b134:	2a00      	cmp	r2, #0
 800b136:	f000 80ea 	beq.w	800b30e <_dtoa_r+0x8d6>
 800b13a:	9a07      	ldr	r2, [sp, #28]
 800b13c:	2a01      	cmp	r2, #1
 800b13e:	f300 80cd 	bgt.w	800b2dc <_dtoa_r+0x8a4>
 800b142:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b144:	2a00      	cmp	r2, #0
 800b146:	f000 80c1 	beq.w	800b2cc <_dtoa_r+0x894>
 800b14a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b14e:	9c08      	ldr	r4, [sp, #32]
 800b150:	9e00      	ldr	r6, [sp, #0]
 800b152:	9a00      	ldr	r2, [sp, #0]
 800b154:	441a      	add	r2, r3
 800b156:	9200      	str	r2, [sp, #0]
 800b158:	9a06      	ldr	r2, [sp, #24]
 800b15a:	2101      	movs	r1, #1
 800b15c:	441a      	add	r2, r3
 800b15e:	4648      	mov	r0, r9
 800b160:	9206      	str	r2, [sp, #24]
 800b162:	f000 fc77 	bl	800ba54 <__i2b>
 800b166:	4605      	mov	r5, r0
 800b168:	b166      	cbz	r6, 800b184 <_dtoa_r+0x74c>
 800b16a:	9b06      	ldr	r3, [sp, #24]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dd09      	ble.n	800b184 <_dtoa_r+0x74c>
 800b170:	42b3      	cmp	r3, r6
 800b172:	9a00      	ldr	r2, [sp, #0]
 800b174:	bfa8      	it	ge
 800b176:	4633      	movge	r3, r6
 800b178:	1ad2      	subs	r2, r2, r3
 800b17a:	9200      	str	r2, [sp, #0]
 800b17c:	9a06      	ldr	r2, [sp, #24]
 800b17e:	1af6      	subs	r6, r6, r3
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	9306      	str	r3, [sp, #24]
 800b184:	9b08      	ldr	r3, [sp, #32]
 800b186:	b30b      	cbz	r3, 800b1cc <_dtoa_r+0x794>
 800b188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 80c6 	beq.w	800b31c <_dtoa_r+0x8e4>
 800b190:	2c00      	cmp	r4, #0
 800b192:	f000 80c0 	beq.w	800b316 <_dtoa_r+0x8de>
 800b196:	4629      	mov	r1, r5
 800b198:	4622      	mov	r2, r4
 800b19a:	4648      	mov	r0, r9
 800b19c:	f000 fd12 	bl	800bbc4 <__pow5mult>
 800b1a0:	9a02      	ldr	r2, [sp, #8]
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	4648      	mov	r0, r9
 800b1a8:	f000 fc6a 	bl	800ba80 <__multiply>
 800b1ac:	9902      	ldr	r1, [sp, #8]
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	4648      	mov	r0, r9
 800b1b2:	f000 fb51 	bl	800b858 <_Bfree>
 800b1b6:	9b08      	ldr	r3, [sp, #32]
 800b1b8:	1b1b      	subs	r3, r3, r4
 800b1ba:	9308      	str	r3, [sp, #32]
 800b1bc:	f000 80b1 	beq.w	800b322 <_dtoa_r+0x8ea>
 800b1c0:	9a08      	ldr	r2, [sp, #32]
 800b1c2:	4641      	mov	r1, r8
 800b1c4:	4648      	mov	r0, r9
 800b1c6:	f000 fcfd 	bl	800bbc4 <__pow5mult>
 800b1ca:	9002      	str	r0, [sp, #8]
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	4648      	mov	r0, r9
 800b1d0:	f000 fc40 	bl	800ba54 <__i2b>
 800b1d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f000 81d8 	beq.w	800b58e <_dtoa_r+0xb56>
 800b1de:	461a      	mov	r2, r3
 800b1e0:	4601      	mov	r1, r0
 800b1e2:	4648      	mov	r0, r9
 800b1e4:	f000 fcee 	bl	800bbc4 <__pow5mult>
 800b1e8:	9b07      	ldr	r3, [sp, #28]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	f300 809f 	bgt.w	800b330 <_dtoa_r+0x8f8>
 800b1f2:	9b04      	ldr	r3, [sp, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f040 8097 	bne.w	800b328 <_dtoa_r+0x8f0>
 800b1fa:	9b05      	ldr	r3, [sp, #20]
 800b1fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b200:	2b00      	cmp	r3, #0
 800b202:	f040 8093 	bne.w	800b32c <_dtoa_r+0x8f4>
 800b206:	9b05      	ldr	r3, [sp, #20]
 800b208:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b20c:	0d1b      	lsrs	r3, r3, #20
 800b20e:	051b      	lsls	r3, r3, #20
 800b210:	b133      	cbz	r3, 800b220 <_dtoa_r+0x7e8>
 800b212:	9b00      	ldr	r3, [sp, #0]
 800b214:	3301      	adds	r3, #1
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	9b06      	ldr	r3, [sp, #24]
 800b21a:	3301      	adds	r3, #1
 800b21c:	9306      	str	r3, [sp, #24]
 800b21e:	2301      	movs	r3, #1
 800b220:	9308      	str	r3, [sp, #32]
 800b222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 81b8 	beq.w	800b59a <_dtoa_r+0xb62>
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b230:	6918      	ldr	r0, [r3, #16]
 800b232:	f000 fbc3 	bl	800b9bc <__hi0bits>
 800b236:	f1c0 0020 	rsb	r0, r0, #32
 800b23a:	9b06      	ldr	r3, [sp, #24]
 800b23c:	4418      	add	r0, r3
 800b23e:	f010 001f 	ands.w	r0, r0, #31
 800b242:	f000 8082 	beq.w	800b34a <_dtoa_r+0x912>
 800b246:	f1c0 0320 	rsb	r3, r0, #32
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	dd73      	ble.n	800b336 <_dtoa_r+0x8fe>
 800b24e:	9b00      	ldr	r3, [sp, #0]
 800b250:	f1c0 001c 	rsb	r0, r0, #28
 800b254:	4403      	add	r3, r0
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	9b06      	ldr	r3, [sp, #24]
 800b25a:	4403      	add	r3, r0
 800b25c:	4406      	add	r6, r0
 800b25e:	9306      	str	r3, [sp, #24]
 800b260:	9b00      	ldr	r3, [sp, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	dd05      	ble.n	800b272 <_dtoa_r+0x83a>
 800b266:	9902      	ldr	r1, [sp, #8]
 800b268:	461a      	mov	r2, r3
 800b26a:	4648      	mov	r0, r9
 800b26c:	f000 fd04 	bl	800bc78 <__lshift>
 800b270:	9002      	str	r0, [sp, #8]
 800b272:	9b06      	ldr	r3, [sp, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	dd05      	ble.n	800b284 <_dtoa_r+0x84c>
 800b278:	4621      	mov	r1, r4
 800b27a:	461a      	mov	r2, r3
 800b27c:	4648      	mov	r0, r9
 800b27e:	f000 fcfb 	bl	800bc78 <__lshift>
 800b282:	4604      	mov	r4, r0
 800b284:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b286:	2b00      	cmp	r3, #0
 800b288:	d061      	beq.n	800b34e <_dtoa_r+0x916>
 800b28a:	9802      	ldr	r0, [sp, #8]
 800b28c:	4621      	mov	r1, r4
 800b28e:	f000 fd5f 	bl	800bd50 <__mcmp>
 800b292:	2800      	cmp	r0, #0
 800b294:	da5b      	bge.n	800b34e <_dtoa_r+0x916>
 800b296:	2300      	movs	r3, #0
 800b298:	9902      	ldr	r1, [sp, #8]
 800b29a:	220a      	movs	r2, #10
 800b29c:	4648      	mov	r0, r9
 800b29e:	f000 fafd 	bl	800b89c <__multadd>
 800b2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2a4:	9002      	str	r0, [sp, #8]
 800b2a6:	f107 38ff 	add.w	r8, r7, #4294967295
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 8177 	beq.w	800b59e <_dtoa_r+0xb66>
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	220a      	movs	r2, #10
 800b2b6:	4648      	mov	r0, r9
 800b2b8:	f000 faf0 	bl	800b89c <__multadd>
 800b2bc:	f1bb 0f00 	cmp.w	fp, #0
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	dc6f      	bgt.n	800b3a4 <_dtoa_r+0x96c>
 800b2c4:	9b07      	ldr	r3, [sp, #28]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	dc49      	bgt.n	800b35e <_dtoa_r+0x926>
 800b2ca:	e06b      	b.n	800b3a4 <_dtoa_r+0x96c>
 800b2cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b2d2:	e73c      	b.n	800b14e <_dtoa_r+0x716>
 800b2d4:	3fe00000 	.word	0x3fe00000
 800b2d8:	40240000 	.word	0x40240000
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	1e5c      	subs	r4, r3, #1
 800b2e0:	9b08      	ldr	r3, [sp, #32]
 800b2e2:	42a3      	cmp	r3, r4
 800b2e4:	db09      	blt.n	800b2fa <_dtoa_r+0x8c2>
 800b2e6:	1b1c      	subs	r4, r3, r4
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f6bf af30 	bge.w	800b150 <_dtoa_r+0x718>
 800b2f0:	9b00      	ldr	r3, [sp, #0]
 800b2f2:	9a03      	ldr	r2, [sp, #12]
 800b2f4:	1a9e      	subs	r6, r3, r2
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	e72b      	b.n	800b152 <_dtoa_r+0x71a>
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2fe:	9408      	str	r4, [sp, #32]
 800b300:	1ae3      	subs	r3, r4, r3
 800b302:	441a      	add	r2, r3
 800b304:	9e00      	ldr	r6, [sp, #0]
 800b306:	9b03      	ldr	r3, [sp, #12]
 800b308:	920d      	str	r2, [sp, #52]	@ 0x34
 800b30a:	2400      	movs	r4, #0
 800b30c:	e721      	b.n	800b152 <_dtoa_r+0x71a>
 800b30e:	9c08      	ldr	r4, [sp, #32]
 800b310:	9e00      	ldr	r6, [sp, #0]
 800b312:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b314:	e728      	b.n	800b168 <_dtoa_r+0x730>
 800b316:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b31a:	e751      	b.n	800b1c0 <_dtoa_r+0x788>
 800b31c:	9a08      	ldr	r2, [sp, #32]
 800b31e:	9902      	ldr	r1, [sp, #8]
 800b320:	e750      	b.n	800b1c4 <_dtoa_r+0x78c>
 800b322:	f8cd 8008 	str.w	r8, [sp, #8]
 800b326:	e751      	b.n	800b1cc <_dtoa_r+0x794>
 800b328:	2300      	movs	r3, #0
 800b32a:	e779      	b.n	800b220 <_dtoa_r+0x7e8>
 800b32c:	9b04      	ldr	r3, [sp, #16]
 800b32e:	e777      	b.n	800b220 <_dtoa_r+0x7e8>
 800b330:	2300      	movs	r3, #0
 800b332:	9308      	str	r3, [sp, #32]
 800b334:	e779      	b.n	800b22a <_dtoa_r+0x7f2>
 800b336:	d093      	beq.n	800b260 <_dtoa_r+0x828>
 800b338:	9a00      	ldr	r2, [sp, #0]
 800b33a:	331c      	adds	r3, #28
 800b33c:	441a      	add	r2, r3
 800b33e:	9200      	str	r2, [sp, #0]
 800b340:	9a06      	ldr	r2, [sp, #24]
 800b342:	441a      	add	r2, r3
 800b344:	441e      	add	r6, r3
 800b346:	9206      	str	r2, [sp, #24]
 800b348:	e78a      	b.n	800b260 <_dtoa_r+0x828>
 800b34a:	4603      	mov	r3, r0
 800b34c:	e7f4      	b.n	800b338 <_dtoa_r+0x900>
 800b34e:	9b03      	ldr	r3, [sp, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	46b8      	mov	r8, r7
 800b354:	dc20      	bgt.n	800b398 <_dtoa_r+0x960>
 800b356:	469b      	mov	fp, r3
 800b358:	9b07      	ldr	r3, [sp, #28]
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	dd1e      	ble.n	800b39c <_dtoa_r+0x964>
 800b35e:	f1bb 0f00 	cmp.w	fp, #0
 800b362:	f47f adb1 	bne.w	800aec8 <_dtoa_r+0x490>
 800b366:	4621      	mov	r1, r4
 800b368:	465b      	mov	r3, fp
 800b36a:	2205      	movs	r2, #5
 800b36c:	4648      	mov	r0, r9
 800b36e:	f000 fa95 	bl	800b89c <__multadd>
 800b372:	4601      	mov	r1, r0
 800b374:	4604      	mov	r4, r0
 800b376:	9802      	ldr	r0, [sp, #8]
 800b378:	f000 fcea 	bl	800bd50 <__mcmp>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f77f ada3 	ble.w	800aec8 <_dtoa_r+0x490>
 800b382:	4656      	mov	r6, sl
 800b384:	2331      	movs	r3, #49	@ 0x31
 800b386:	f806 3b01 	strb.w	r3, [r6], #1
 800b38a:	f108 0801 	add.w	r8, r8, #1
 800b38e:	e59f      	b.n	800aed0 <_dtoa_r+0x498>
 800b390:	9c03      	ldr	r4, [sp, #12]
 800b392:	46b8      	mov	r8, r7
 800b394:	4625      	mov	r5, r4
 800b396:	e7f4      	b.n	800b382 <_dtoa_r+0x94a>
 800b398:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b39c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 8101 	beq.w	800b5a6 <_dtoa_r+0xb6e>
 800b3a4:	2e00      	cmp	r6, #0
 800b3a6:	dd05      	ble.n	800b3b4 <_dtoa_r+0x97c>
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	4648      	mov	r0, r9
 800b3ae:	f000 fc63 	bl	800bc78 <__lshift>
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	9b08      	ldr	r3, [sp, #32]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d05c      	beq.n	800b474 <_dtoa_r+0xa3c>
 800b3ba:	6869      	ldr	r1, [r5, #4]
 800b3bc:	4648      	mov	r0, r9
 800b3be:	f000 fa0b 	bl	800b7d8 <_Balloc>
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	b928      	cbnz	r0, 800b3d2 <_dtoa_r+0x99a>
 800b3c6:	4b82      	ldr	r3, [pc, #520]	@ (800b5d0 <_dtoa_r+0xb98>)
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b3ce:	f7ff bb4a 	b.w	800aa66 <_dtoa_r+0x2e>
 800b3d2:	692a      	ldr	r2, [r5, #16]
 800b3d4:	3202      	adds	r2, #2
 800b3d6:	0092      	lsls	r2, r2, #2
 800b3d8:	f105 010c 	add.w	r1, r5, #12
 800b3dc:	300c      	adds	r0, #12
 800b3de:	f002 f959 	bl	800d694 <memcpy>
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	4631      	mov	r1, r6
 800b3e6:	4648      	mov	r0, r9
 800b3e8:	f000 fc46 	bl	800bc78 <__lshift>
 800b3ec:	f10a 0301 	add.w	r3, sl, #1
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	eb0a 030b 	add.w	r3, sl, fp
 800b3f6:	9308      	str	r3, [sp, #32]
 800b3f8:	9b04      	ldr	r3, [sp, #16]
 800b3fa:	f003 0301 	and.w	r3, r3, #1
 800b3fe:	462f      	mov	r7, r5
 800b400:	9306      	str	r3, [sp, #24]
 800b402:	4605      	mov	r5, r0
 800b404:	9b00      	ldr	r3, [sp, #0]
 800b406:	9802      	ldr	r0, [sp, #8]
 800b408:	4621      	mov	r1, r4
 800b40a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b40e:	f7ff fa8b 	bl	800a928 <quorem>
 800b412:	4603      	mov	r3, r0
 800b414:	3330      	adds	r3, #48	@ 0x30
 800b416:	9003      	str	r0, [sp, #12]
 800b418:	4639      	mov	r1, r7
 800b41a:	9802      	ldr	r0, [sp, #8]
 800b41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b41e:	f000 fc97 	bl	800bd50 <__mcmp>
 800b422:	462a      	mov	r2, r5
 800b424:	9004      	str	r0, [sp, #16]
 800b426:	4621      	mov	r1, r4
 800b428:	4648      	mov	r0, r9
 800b42a:	f000 fcad 	bl	800bd88 <__mdiff>
 800b42e:	68c2      	ldr	r2, [r0, #12]
 800b430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b432:	4606      	mov	r6, r0
 800b434:	bb02      	cbnz	r2, 800b478 <_dtoa_r+0xa40>
 800b436:	4601      	mov	r1, r0
 800b438:	9802      	ldr	r0, [sp, #8]
 800b43a:	f000 fc89 	bl	800bd50 <__mcmp>
 800b43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b440:	4602      	mov	r2, r0
 800b442:	4631      	mov	r1, r6
 800b444:	4648      	mov	r0, r9
 800b446:	920c      	str	r2, [sp, #48]	@ 0x30
 800b448:	9309      	str	r3, [sp, #36]	@ 0x24
 800b44a:	f000 fa05 	bl	800b858 <_Bfree>
 800b44e:	9b07      	ldr	r3, [sp, #28]
 800b450:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b452:	9e00      	ldr	r6, [sp, #0]
 800b454:	ea42 0103 	orr.w	r1, r2, r3
 800b458:	9b06      	ldr	r3, [sp, #24]
 800b45a:	4319      	orrs	r1, r3
 800b45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b45e:	d10d      	bne.n	800b47c <_dtoa_r+0xa44>
 800b460:	2b39      	cmp	r3, #57	@ 0x39
 800b462:	d027      	beq.n	800b4b4 <_dtoa_r+0xa7c>
 800b464:	9a04      	ldr	r2, [sp, #16]
 800b466:	2a00      	cmp	r2, #0
 800b468:	dd01      	ble.n	800b46e <_dtoa_r+0xa36>
 800b46a:	9b03      	ldr	r3, [sp, #12]
 800b46c:	3331      	adds	r3, #49	@ 0x31
 800b46e:	f88b 3000 	strb.w	r3, [fp]
 800b472:	e52e      	b.n	800aed2 <_dtoa_r+0x49a>
 800b474:	4628      	mov	r0, r5
 800b476:	e7b9      	b.n	800b3ec <_dtoa_r+0x9b4>
 800b478:	2201      	movs	r2, #1
 800b47a:	e7e2      	b.n	800b442 <_dtoa_r+0xa0a>
 800b47c:	9904      	ldr	r1, [sp, #16]
 800b47e:	2900      	cmp	r1, #0
 800b480:	db04      	blt.n	800b48c <_dtoa_r+0xa54>
 800b482:	9807      	ldr	r0, [sp, #28]
 800b484:	4301      	orrs	r1, r0
 800b486:	9806      	ldr	r0, [sp, #24]
 800b488:	4301      	orrs	r1, r0
 800b48a:	d120      	bne.n	800b4ce <_dtoa_r+0xa96>
 800b48c:	2a00      	cmp	r2, #0
 800b48e:	ddee      	ble.n	800b46e <_dtoa_r+0xa36>
 800b490:	9902      	ldr	r1, [sp, #8]
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	2201      	movs	r2, #1
 800b496:	4648      	mov	r0, r9
 800b498:	f000 fbee 	bl	800bc78 <__lshift>
 800b49c:	4621      	mov	r1, r4
 800b49e:	9002      	str	r0, [sp, #8]
 800b4a0:	f000 fc56 	bl	800bd50 <__mcmp>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	9b00      	ldr	r3, [sp, #0]
 800b4a8:	dc02      	bgt.n	800b4b0 <_dtoa_r+0xa78>
 800b4aa:	d1e0      	bne.n	800b46e <_dtoa_r+0xa36>
 800b4ac:	07da      	lsls	r2, r3, #31
 800b4ae:	d5de      	bpl.n	800b46e <_dtoa_r+0xa36>
 800b4b0:	2b39      	cmp	r3, #57	@ 0x39
 800b4b2:	d1da      	bne.n	800b46a <_dtoa_r+0xa32>
 800b4b4:	2339      	movs	r3, #57	@ 0x39
 800b4b6:	f88b 3000 	strb.w	r3, [fp]
 800b4ba:	4633      	mov	r3, r6
 800b4bc:	461e      	mov	r6, r3
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b4c4:	2a39      	cmp	r2, #57	@ 0x39
 800b4c6:	d04e      	beq.n	800b566 <_dtoa_r+0xb2e>
 800b4c8:	3201      	adds	r2, #1
 800b4ca:	701a      	strb	r2, [r3, #0]
 800b4cc:	e501      	b.n	800aed2 <_dtoa_r+0x49a>
 800b4ce:	2a00      	cmp	r2, #0
 800b4d0:	dd03      	ble.n	800b4da <_dtoa_r+0xaa2>
 800b4d2:	2b39      	cmp	r3, #57	@ 0x39
 800b4d4:	d0ee      	beq.n	800b4b4 <_dtoa_r+0xa7c>
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	e7c9      	b.n	800b46e <_dtoa_r+0xa36>
 800b4da:	9a00      	ldr	r2, [sp, #0]
 800b4dc:	9908      	ldr	r1, [sp, #32]
 800b4de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4e2:	428a      	cmp	r2, r1
 800b4e4:	d028      	beq.n	800b538 <_dtoa_r+0xb00>
 800b4e6:	9902      	ldr	r1, [sp, #8]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	220a      	movs	r2, #10
 800b4ec:	4648      	mov	r0, r9
 800b4ee:	f000 f9d5 	bl	800b89c <__multadd>
 800b4f2:	42af      	cmp	r7, r5
 800b4f4:	9002      	str	r0, [sp, #8]
 800b4f6:	f04f 0300 	mov.w	r3, #0
 800b4fa:	f04f 020a 	mov.w	r2, #10
 800b4fe:	4639      	mov	r1, r7
 800b500:	4648      	mov	r0, r9
 800b502:	d107      	bne.n	800b514 <_dtoa_r+0xadc>
 800b504:	f000 f9ca 	bl	800b89c <__multadd>
 800b508:	4607      	mov	r7, r0
 800b50a:	4605      	mov	r5, r0
 800b50c:	9b00      	ldr	r3, [sp, #0]
 800b50e:	3301      	adds	r3, #1
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	e777      	b.n	800b404 <_dtoa_r+0x9cc>
 800b514:	f000 f9c2 	bl	800b89c <__multadd>
 800b518:	4629      	mov	r1, r5
 800b51a:	4607      	mov	r7, r0
 800b51c:	2300      	movs	r3, #0
 800b51e:	220a      	movs	r2, #10
 800b520:	4648      	mov	r0, r9
 800b522:	f000 f9bb 	bl	800b89c <__multadd>
 800b526:	4605      	mov	r5, r0
 800b528:	e7f0      	b.n	800b50c <_dtoa_r+0xad4>
 800b52a:	f1bb 0f00 	cmp.w	fp, #0
 800b52e:	bfcc      	ite	gt
 800b530:	465e      	movgt	r6, fp
 800b532:	2601      	movle	r6, #1
 800b534:	4456      	add	r6, sl
 800b536:	2700      	movs	r7, #0
 800b538:	9902      	ldr	r1, [sp, #8]
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	2201      	movs	r2, #1
 800b53e:	4648      	mov	r0, r9
 800b540:	f000 fb9a 	bl	800bc78 <__lshift>
 800b544:	4621      	mov	r1, r4
 800b546:	9002      	str	r0, [sp, #8]
 800b548:	f000 fc02 	bl	800bd50 <__mcmp>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	dcb4      	bgt.n	800b4ba <_dtoa_r+0xa82>
 800b550:	d102      	bne.n	800b558 <_dtoa_r+0xb20>
 800b552:	9b00      	ldr	r3, [sp, #0]
 800b554:	07db      	lsls	r3, r3, #31
 800b556:	d4b0      	bmi.n	800b4ba <_dtoa_r+0xa82>
 800b558:	4633      	mov	r3, r6
 800b55a:	461e      	mov	r6, r3
 800b55c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b560:	2a30      	cmp	r2, #48	@ 0x30
 800b562:	d0fa      	beq.n	800b55a <_dtoa_r+0xb22>
 800b564:	e4b5      	b.n	800aed2 <_dtoa_r+0x49a>
 800b566:	459a      	cmp	sl, r3
 800b568:	d1a8      	bne.n	800b4bc <_dtoa_r+0xa84>
 800b56a:	2331      	movs	r3, #49	@ 0x31
 800b56c:	f108 0801 	add.w	r8, r8, #1
 800b570:	f88a 3000 	strb.w	r3, [sl]
 800b574:	e4ad      	b.n	800aed2 <_dtoa_r+0x49a>
 800b576:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b578:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b5d4 <_dtoa_r+0xb9c>
 800b57c:	b11b      	cbz	r3, 800b586 <_dtoa_r+0xb4e>
 800b57e:	f10a 0308 	add.w	r3, sl, #8
 800b582:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	4650      	mov	r0, sl
 800b588:	b017      	add	sp, #92	@ 0x5c
 800b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58e:	9b07      	ldr	r3, [sp, #28]
 800b590:	2b01      	cmp	r3, #1
 800b592:	f77f ae2e 	ble.w	800b1f2 <_dtoa_r+0x7ba>
 800b596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b598:	9308      	str	r3, [sp, #32]
 800b59a:	2001      	movs	r0, #1
 800b59c:	e64d      	b.n	800b23a <_dtoa_r+0x802>
 800b59e:	f1bb 0f00 	cmp.w	fp, #0
 800b5a2:	f77f aed9 	ble.w	800b358 <_dtoa_r+0x920>
 800b5a6:	4656      	mov	r6, sl
 800b5a8:	9802      	ldr	r0, [sp, #8]
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	f7ff f9bc 	bl	800a928 <quorem>
 800b5b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b5b4:	f806 3b01 	strb.w	r3, [r6], #1
 800b5b8:	eba6 020a 	sub.w	r2, r6, sl
 800b5bc:	4593      	cmp	fp, r2
 800b5be:	ddb4      	ble.n	800b52a <_dtoa_r+0xaf2>
 800b5c0:	9902      	ldr	r1, [sp, #8]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	220a      	movs	r2, #10
 800b5c6:	4648      	mov	r0, r9
 800b5c8:	f000 f968 	bl	800b89c <__multadd>
 800b5cc:	9002      	str	r0, [sp, #8]
 800b5ce:	e7eb      	b.n	800b5a8 <_dtoa_r+0xb70>
 800b5d0:	0800e74c 	.word	0x0800e74c
 800b5d4:	0800e6e7 	.word	0x0800e6e7

0800b5d8 <_free_r>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	4605      	mov	r5, r0
 800b5dc:	2900      	cmp	r1, #0
 800b5de:	d041      	beq.n	800b664 <_free_r+0x8c>
 800b5e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5e4:	1f0c      	subs	r4, r1, #4
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	bfb8      	it	lt
 800b5ea:	18e4      	addlt	r4, r4, r3
 800b5ec:	f000 f8e8 	bl	800b7c0 <__malloc_lock>
 800b5f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b668 <_free_r+0x90>)
 800b5f2:	6813      	ldr	r3, [r2, #0]
 800b5f4:	b933      	cbnz	r3, 800b604 <_free_r+0x2c>
 800b5f6:	6063      	str	r3, [r4, #4]
 800b5f8:	6014      	str	r4, [r2, #0]
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b600:	f000 b8e4 	b.w	800b7cc <__malloc_unlock>
 800b604:	42a3      	cmp	r3, r4
 800b606:	d908      	bls.n	800b61a <_free_r+0x42>
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	1821      	adds	r1, r4, r0
 800b60c:	428b      	cmp	r3, r1
 800b60e:	bf01      	itttt	eq
 800b610:	6819      	ldreq	r1, [r3, #0]
 800b612:	685b      	ldreq	r3, [r3, #4]
 800b614:	1809      	addeq	r1, r1, r0
 800b616:	6021      	streq	r1, [r4, #0]
 800b618:	e7ed      	b.n	800b5f6 <_free_r+0x1e>
 800b61a:	461a      	mov	r2, r3
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	b10b      	cbz	r3, 800b624 <_free_r+0x4c>
 800b620:	42a3      	cmp	r3, r4
 800b622:	d9fa      	bls.n	800b61a <_free_r+0x42>
 800b624:	6811      	ldr	r1, [r2, #0]
 800b626:	1850      	adds	r0, r2, r1
 800b628:	42a0      	cmp	r0, r4
 800b62a:	d10b      	bne.n	800b644 <_free_r+0x6c>
 800b62c:	6820      	ldr	r0, [r4, #0]
 800b62e:	4401      	add	r1, r0
 800b630:	1850      	adds	r0, r2, r1
 800b632:	4283      	cmp	r3, r0
 800b634:	6011      	str	r1, [r2, #0]
 800b636:	d1e0      	bne.n	800b5fa <_free_r+0x22>
 800b638:	6818      	ldr	r0, [r3, #0]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	6053      	str	r3, [r2, #4]
 800b63e:	4408      	add	r0, r1
 800b640:	6010      	str	r0, [r2, #0]
 800b642:	e7da      	b.n	800b5fa <_free_r+0x22>
 800b644:	d902      	bls.n	800b64c <_free_r+0x74>
 800b646:	230c      	movs	r3, #12
 800b648:	602b      	str	r3, [r5, #0]
 800b64a:	e7d6      	b.n	800b5fa <_free_r+0x22>
 800b64c:	6820      	ldr	r0, [r4, #0]
 800b64e:	1821      	adds	r1, r4, r0
 800b650:	428b      	cmp	r3, r1
 800b652:	bf04      	itt	eq
 800b654:	6819      	ldreq	r1, [r3, #0]
 800b656:	685b      	ldreq	r3, [r3, #4]
 800b658:	6063      	str	r3, [r4, #4]
 800b65a:	bf04      	itt	eq
 800b65c:	1809      	addeq	r1, r1, r0
 800b65e:	6021      	streq	r1, [r4, #0]
 800b660:	6054      	str	r4, [r2, #4]
 800b662:	e7ca      	b.n	800b5fa <_free_r+0x22>
 800b664:	bd38      	pop	{r3, r4, r5, pc}
 800b666:	bf00      	nop
 800b668:	2000104c 	.word	0x2000104c

0800b66c <malloc>:
 800b66c:	4b02      	ldr	r3, [pc, #8]	@ (800b678 <malloc+0xc>)
 800b66e:	4601      	mov	r1, r0
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	f000 b825 	b.w	800b6c0 <_malloc_r>
 800b676:	bf00      	nop
 800b678:	20000040 	.word	0x20000040

0800b67c <sbrk_aligned>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	4e0f      	ldr	r6, [pc, #60]	@ (800b6bc <sbrk_aligned+0x40>)
 800b680:	460c      	mov	r4, r1
 800b682:	6831      	ldr	r1, [r6, #0]
 800b684:	4605      	mov	r5, r0
 800b686:	b911      	cbnz	r1, 800b68e <sbrk_aligned+0x12>
 800b688:	f001 fff4 	bl	800d674 <_sbrk_r>
 800b68c:	6030      	str	r0, [r6, #0]
 800b68e:	4621      	mov	r1, r4
 800b690:	4628      	mov	r0, r5
 800b692:	f001 ffef 	bl	800d674 <_sbrk_r>
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	d103      	bne.n	800b6a2 <sbrk_aligned+0x26>
 800b69a:	f04f 34ff 	mov.w	r4, #4294967295
 800b69e:	4620      	mov	r0, r4
 800b6a0:	bd70      	pop	{r4, r5, r6, pc}
 800b6a2:	1cc4      	adds	r4, r0, #3
 800b6a4:	f024 0403 	bic.w	r4, r4, #3
 800b6a8:	42a0      	cmp	r0, r4
 800b6aa:	d0f8      	beq.n	800b69e <sbrk_aligned+0x22>
 800b6ac:	1a21      	subs	r1, r4, r0
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f001 ffe0 	bl	800d674 <_sbrk_r>
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d1f2      	bne.n	800b69e <sbrk_aligned+0x22>
 800b6b8:	e7ef      	b.n	800b69a <sbrk_aligned+0x1e>
 800b6ba:	bf00      	nop
 800b6bc:	20001048 	.word	0x20001048

0800b6c0 <_malloc_r>:
 800b6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c4:	1ccd      	adds	r5, r1, #3
 800b6c6:	f025 0503 	bic.w	r5, r5, #3
 800b6ca:	3508      	adds	r5, #8
 800b6cc:	2d0c      	cmp	r5, #12
 800b6ce:	bf38      	it	cc
 800b6d0:	250c      	movcc	r5, #12
 800b6d2:	2d00      	cmp	r5, #0
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	db01      	blt.n	800b6dc <_malloc_r+0x1c>
 800b6d8:	42a9      	cmp	r1, r5
 800b6da:	d904      	bls.n	800b6e6 <_malloc_r+0x26>
 800b6dc:	230c      	movs	r3, #12
 800b6de:	6033      	str	r3, [r6, #0]
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b7bc <_malloc_r+0xfc>
 800b6ea:	f000 f869 	bl	800b7c0 <__malloc_lock>
 800b6ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b6f2:	461c      	mov	r4, r3
 800b6f4:	bb44      	cbnz	r4, 800b748 <_malloc_r+0x88>
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f7ff ffbf 	bl	800b67c <sbrk_aligned>
 800b6fe:	1c43      	adds	r3, r0, #1
 800b700:	4604      	mov	r4, r0
 800b702:	d158      	bne.n	800b7b6 <_malloc_r+0xf6>
 800b704:	f8d8 4000 	ldr.w	r4, [r8]
 800b708:	4627      	mov	r7, r4
 800b70a:	2f00      	cmp	r7, #0
 800b70c:	d143      	bne.n	800b796 <_malloc_r+0xd6>
 800b70e:	2c00      	cmp	r4, #0
 800b710:	d04b      	beq.n	800b7aa <_malloc_r+0xea>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	4639      	mov	r1, r7
 800b716:	4630      	mov	r0, r6
 800b718:	eb04 0903 	add.w	r9, r4, r3
 800b71c:	f001 ffaa 	bl	800d674 <_sbrk_r>
 800b720:	4581      	cmp	r9, r0
 800b722:	d142      	bne.n	800b7aa <_malloc_r+0xea>
 800b724:	6821      	ldr	r1, [r4, #0]
 800b726:	1a6d      	subs	r5, r5, r1
 800b728:	4629      	mov	r1, r5
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7ff ffa6 	bl	800b67c <sbrk_aligned>
 800b730:	3001      	adds	r0, #1
 800b732:	d03a      	beq.n	800b7aa <_malloc_r+0xea>
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	442b      	add	r3, r5
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	f8d8 3000 	ldr.w	r3, [r8]
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	bb62      	cbnz	r2, 800b79c <_malloc_r+0xdc>
 800b742:	f8c8 7000 	str.w	r7, [r8]
 800b746:	e00f      	b.n	800b768 <_malloc_r+0xa8>
 800b748:	6822      	ldr	r2, [r4, #0]
 800b74a:	1b52      	subs	r2, r2, r5
 800b74c:	d420      	bmi.n	800b790 <_malloc_r+0xd0>
 800b74e:	2a0b      	cmp	r2, #11
 800b750:	d917      	bls.n	800b782 <_malloc_r+0xc2>
 800b752:	1961      	adds	r1, r4, r5
 800b754:	42a3      	cmp	r3, r4
 800b756:	6025      	str	r5, [r4, #0]
 800b758:	bf18      	it	ne
 800b75a:	6059      	strne	r1, [r3, #4]
 800b75c:	6863      	ldr	r3, [r4, #4]
 800b75e:	bf08      	it	eq
 800b760:	f8c8 1000 	streq.w	r1, [r8]
 800b764:	5162      	str	r2, [r4, r5]
 800b766:	604b      	str	r3, [r1, #4]
 800b768:	4630      	mov	r0, r6
 800b76a:	f000 f82f 	bl	800b7cc <__malloc_unlock>
 800b76e:	f104 000b 	add.w	r0, r4, #11
 800b772:	1d23      	adds	r3, r4, #4
 800b774:	f020 0007 	bic.w	r0, r0, #7
 800b778:	1ac2      	subs	r2, r0, r3
 800b77a:	bf1c      	itt	ne
 800b77c:	1a1b      	subne	r3, r3, r0
 800b77e:	50a3      	strne	r3, [r4, r2]
 800b780:	e7af      	b.n	800b6e2 <_malloc_r+0x22>
 800b782:	6862      	ldr	r2, [r4, #4]
 800b784:	42a3      	cmp	r3, r4
 800b786:	bf0c      	ite	eq
 800b788:	f8c8 2000 	streq.w	r2, [r8]
 800b78c:	605a      	strne	r2, [r3, #4]
 800b78e:	e7eb      	b.n	800b768 <_malloc_r+0xa8>
 800b790:	4623      	mov	r3, r4
 800b792:	6864      	ldr	r4, [r4, #4]
 800b794:	e7ae      	b.n	800b6f4 <_malloc_r+0x34>
 800b796:	463c      	mov	r4, r7
 800b798:	687f      	ldr	r7, [r7, #4]
 800b79a:	e7b6      	b.n	800b70a <_malloc_r+0x4a>
 800b79c:	461a      	mov	r2, r3
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	42a3      	cmp	r3, r4
 800b7a2:	d1fb      	bne.n	800b79c <_malloc_r+0xdc>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	6053      	str	r3, [r2, #4]
 800b7a8:	e7de      	b.n	800b768 <_malloc_r+0xa8>
 800b7aa:	230c      	movs	r3, #12
 800b7ac:	6033      	str	r3, [r6, #0]
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	f000 f80c 	bl	800b7cc <__malloc_unlock>
 800b7b4:	e794      	b.n	800b6e0 <_malloc_r+0x20>
 800b7b6:	6005      	str	r5, [r0, #0]
 800b7b8:	e7d6      	b.n	800b768 <_malloc_r+0xa8>
 800b7ba:	bf00      	nop
 800b7bc:	2000104c 	.word	0x2000104c

0800b7c0 <__malloc_lock>:
 800b7c0:	4801      	ldr	r0, [pc, #4]	@ (800b7c8 <__malloc_lock+0x8>)
 800b7c2:	f7ff b88a 	b.w	800a8da <__retarget_lock_acquire_recursive>
 800b7c6:	bf00      	nop
 800b7c8:	20001044 	.word	0x20001044

0800b7cc <__malloc_unlock>:
 800b7cc:	4801      	ldr	r0, [pc, #4]	@ (800b7d4 <__malloc_unlock+0x8>)
 800b7ce:	f7ff b885 	b.w	800a8dc <__retarget_lock_release_recursive>
 800b7d2:	bf00      	nop
 800b7d4:	20001044 	.word	0x20001044

0800b7d8 <_Balloc>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	69c6      	ldr	r6, [r0, #28]
 800b7dc:	4604      	mov	r4, r0
 800b7de:	460d      	mov	r5, r1
 800b7e0:	b976      	cbnz	r6, 800b800 <_Balloc+0x28>
 800b7e2:	2010      	movs	r0, #16
 800b7e4:	f7ff ff42 	bl	800b66c <malloc>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	61e0      	str	r0, [r4, #28]
 800b7ec:	b920      	cbnz	r0, 800b7f8 <_Balloc+0x20>
 800b7ee:	4b18      	ldr	r3, [pc, #96]	@ (800b850 <_Balloc+0x78>)
 800b7f0:	4818      	ldr	r0, [pc, #96]	@ (800b854 <_Balloc+0x7c>)
 800b7f2:	216b      	movs	r1, #107	@ 0x6b
 800b7f4:	f7ff f87a 	bl	800a8ec <__assert_func>
 800b7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7fc:	6006      	str	r6, [r0, #0]
 800b7fe:	60c6      	str	r6, [r0, #12]
 800b800:	69e6      	ldr	r6, [r4, #28]
 800b802:	68f3      	ldr	r3, [r6, #12]
 800b804:	b183      	cbz	r3, 800b828 <_Balloc+0x50>
 800b806:	69e3      	ldr	r3, [r4, #28]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b80e:	b9b8      	cbnz	r0, 800b840 <_Balloc+0x68>
 800b810:	2101      	movs	r1, #1
 800b812:	fa01 f605 	lsl.w	r6, r1, r5
 800b816:	1d72      	adds	r2, r6, #5
 800b818:	0092      	lsls	r2, r2, #2
 800b81a:	4620      	mov	r0, r4
 800b81c:	f001 ff57 	bl	800d6ce <_calloc_r>
 800b820:	b160      	cbz	r0, 800b83c <_Balloc+0x64>
 800b822:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b826:	e00e      	b.n	800b846 <_Balloc+0x6e>
 800b828:	2221      	movs	r2, #33	@ 0x21
 800b82a:	2104      	movs	r1, #4
 800b82c:	4620      	mov	r0, r4
 800b82e:	f001 ff4e 	bl	800d6ce <_calloc_r>
 800b832:	69e3      	ldr	r3, [r4, #28]
 800b834:	60f0      	str	r0, [r6, #12]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e4      	bne.n	800b806 <_Balloc+0x2e>
 800b83c:	2000      	movs	r0, #0
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	6802      	ldr	r2, [r0, #0]
 800b842:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b846:	2300      	movs	r3, #0
 800b848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b84c:	e7f7      	b.n	800b83e <_Balloc+0x66>
 800b84e:	bf00      	nop
 800b850:	0800e63a 	.word	0x0800e63a
 800b854:	0800e75d 	.word	0x0800e75d

0800b858 <_Bfree>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	69c6      	ldr	r6, [r0, #28]
 800b85c:	4605      	mov	r5, r0
 800b85e:	460c      	mov	r4, r1
 800b860:	b976      	cbnz	r6, 800b880 <_Bfree+0x28>
 800b862:	2010      	movs	r0, #16
 800b864:	f7ff ff02 	bl	800b66c <malloc>
 800b868:	4602      	mov	r2, r0
 800b86a:	61e8      	str	r0, [r5, #28]
 800b86c:	b920      	cbnz	r0, 800b878 <_Bfree+0x20>
 800b86e:	4b09      	ldr	r3, [pc, #36]	@ (800b894 <_Bfree+0x3c>)
 800b870:	4809      	ldr	r0, [pc, #36]	@ (800b898 <_Bfree+0x40>)
 800b872:	218f      	movs	r1, #143	@ 0x8f
 800b874:	f7ff f83a 	bl	800a8ec <__assert_func>
 800b878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b87c:	6006      	str	r6, [r0, #0]
 800b87e:	60c6      	str	r6, [r0, #12]
 800b880:	b13c      	cbz	r4, 800b892 <_Bfree+0x3a>
 800b882:	69eb      	ldr	r3, [r5, #28]
 800b884:	6862      	ldr	r2, [r4, #4]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b88c:	6021      	str	r1, [r4, #0]
 800b88e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	0800e63a 	.word	0x0800e63a
 800b898:	0800e75d 	.word	0x0800e75d

0800b89c <__multadd>:
 800b89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a0:	690d      	ldr	r5, [r1, #16]
 800b8a2:	4607      	mov	r7, r0
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	461e      	mov	r6, r3
 800b8a8:	f101 0c14 	add.w	ip, r1, #20
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	f8dc 3000 	ldr.w	r3, [ip]
 800b8b2:	b299      	uxth	r1, r3
 800b8b4:	fb02 6101 	mla	r1, r2, r1, r6
 800b8b8:	0c1e      	lsrs	r6, r3, #16
 800b8ba:	0c0b      	lsrs	r3, r1, #16
 800b8bc:	fb02 3306 	mla	r3, r2, r6, r3
 800b8c0:	b289      	uxth	r1, r1
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8c8:	4285      	cmp	r5, r0
 800b8ca:	f84c 1b04 	str.w	r1, [ip], #4
 800b8ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8d2:	dcec      	bgt.n	800b8ae <__multadd+0x12>
 800b8d4:	b30e      	cbz	r6, 800b91a <__multadd+0x7e>
 800b8d6:	68a3      	ldr	r3, [r4, #8]
 800b8d8:	42ab      	cmp	r3, r5
 800b8da:	dc19      	bgt.n	800b910 <__multadd+0x74>
 800b8dc:	6861      	ldr	r1, [r4, #4]
 800b8de:	4638      	mov	r0, r7
 800b8e0:	3101      	adds	r1, #1
 800b8e2:	f7ff ff79 	bl	800b7d8 <_Balloc>
 800b8e6:	4680      	mov	r8, r0
 800b8e8:	b928      	cbnz	r0, 800b8f6 <__multadd+0x5a>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b920 <__multadd+0x84>)
 800b8ee:	480d      	ldr	r0, [pc, #52]	@ (800b924 <__multadd+0x88>)
 800b8f0:	21ba      	movs	r1, #186	@ 0xba
 800b8f2:	f7fe fffb 	bl	800a8ec <__assert_func>
 800b8f6:	6922      	ldr	r2, [r4, #16]
 800b8f8:	3202      	adds	r2, #2
 800b8fa:	f104 010c 	add.w	r1, r4, #12
 800b8fe:	0092      	lsls	r2, r2, #2
 800b900:	300c      	adds	r0, #12
 800b902:	f001 fec7 	bl	800d694 <memcpy>
 800b906:	4621      	mov	r1, r4
 800b908:	4638      	mov	r0, r7
 800b90a:	f7ff ffa5 	bl	800b858 <_Bfree>
 800b90e:	4644      	mov	r4, r8
 800b910:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b914:	3501      	adds	r5, #1
 800b916:	615e      	str	r6, [r3, #20]
 800b918:	6125      	str	r5, [r4, #16]
 800b91a:	4620      	mov	r0, r4
 800b91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b920:	0800e74c 	.word	0x0800e74c
 800b924:	0800e75d 	.word	0x0800e75d

0800b928 <__s2b>:
 800b928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b92c:	460c      	mov	r4, r1
 800b92e:	4615      	mov	r5, r2
 800b930:	461f      	mov	r7, r3
 800b932:	2209      	movs	r2, #9
 800b934:	3308      	adds	r3, #8
 800b936:	4606      	mov	r6, r0
 800b938:	fb93 f3f2 	sdiv	r3, r3, r2
 800b93c:	2100      	movs	r1, #0
 800b93e:	2201      	movs	r2, #1
 800b940:	429a      	cmp	r2, r3
 800b942:	db09      	blt.n	800b958 <__s2b+0x30>
 800b944:	4630      	mov	r0, r6
 800b946:	f7ff ff47 	bl	800b7d8 <_Balloc>
 800b94a:	b940      	cbnz	r0, 800b95e <__s2b+0x36>
 800b94c:	4602      	mov	r2, r0
 800b94e:	4b19      	ldr	r3, [pc, #100]	@ (800b9b4 <__s2b+0x8c>)
 800b950:	4819      	ldr	r0, [pc, #100]	@ (800b9b8 <__s2b+0x90>)
 800b952:	21d3      	movs	r1, #211	@ 0xd3
 800b954:	f7fe ffca 	bl	800a8ec <__assert_func>
 800b958:	0052      	lsls	r2, r2, #1
 800b95a:	3101      	adds	r1, #1
 800b95c:	e7f0      	b.n	800b940 <__s2b+0x18>
 800b95e:	9b08      	ldr	r3, [sp, #32]
 800b960:	6143      	str	r3, [r0, #20]
 800b962:	2d09      	cmp	r5, #9
 800b964:	f04f 0301 	mov.w	r3, #1
 800b968:	6103      	str	r3, [r0, #16]
 800b96a:	dd16      	ble.n	800b99a <__s2b+0x72>
 800b96c:	f104 0909 	add.w	r9, r4, #9
 800b970:	46c8      	mov	r8, r9
 800b972:	442c      	add	r4, r5
 800b974:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b978:	4601      	mov	r1, r0
 800b97a:	3b30      	subs	r3, #48	@ 0x30
 800b97c:	220a      	movs	r2, #10
 800b97e:	4630      	mov	r0, r6
 800b980:	f7ff ff8c 	bl	800b89c <__multadd>
 800b984:	45a0      	cmp	r8, r4
 800b986:	d1f5      	bne.n	800b974 <__s2b+0x4c>
 800b988:	f1a5 0408 	sub.w	r4, r5, #8
 800b98c:	444c      	add	r4, r9
 800b98e:	1b2d      	subs	r5, r5, r4
 800b990:	1963      	adds	r3, r4, r5
 800b992:	42bb      	cmp	r3, r7
 800b994:	db04      	blt.n	800b9a0 <__s2b+0x78>
 800b996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99a:	340a      	adds	r4, #10
 800b99c:	2509      	movs	r5, #9
 800b99e:	e7f6      	b.n	800b98e <__s2b+0x66>
 800b9a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9a4:	4601      	mov	r1, r0
 800b9a6:	3b30      	subs	r3, #48	@ 0x30
 800b9a8:	220a      	movs	r2, #10
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7ff ff76 	bl	800b89c <__multadd>
 800b9b0:	e7ee      	b.n	800b990 <__s2b+0x68>
 800b9b2:	bf00      	nop
 800b9b4:	0800e74c 	.word	0x0800e74c
 800b9b8:	0800e75d 	.word	0x0800e75d

0800b9bc <__hi0bits>:
 800b9bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	bf36      	itet	cc
 800b9c4:	0403      	lslcc	r3, r0, #16
 800b9c6:	2000      	movcs	r0, #0
 800b9c8:	2010      	movcc	r0, #16
 800b9ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9ce:	bf3c      	itt	cc
 800b9d0:	021b      	lslcc	r3, r3, #8
 800b9d2:	3008      	addcc	r0, #8
 800b9d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9d8:	bf3c      	itt	cc
 800b9da:	011b      	lslcc	r3, r3, #4
 800b9dc:	3004      	addcc	r0, #4
 800b9de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9e2:	bf3c      	itt	cc
 800b9e4:	009b      	lslcc	r3, r3, #2
 800b9e6:	3002      	addcc	r0, #2
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	db05      	blt.n	800b9f8 <__hi0bits+0x3c>
 800b9ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9f0:	f100 0001 	add.w	r0, r0, #1
 800b9f4:	bf08      	it	eq
 800b9f6:	2020      	moveq	r0, #32
 800b9f8:	4770      	bx	lr

0800b9fa <__lo0bits>:
 800b9fa:	6803      	ldr	r3, [r0, #0]
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	f013 0007 	ands.w	r0, r3, #7
 800ba02:	d00b      	beq.n	800ba1c <__lo0bits+0x22>
 800ba04:	07d9      	lsls	r1, r3, #31
 800ba06:	d421      	bmi.n	800ba4c <__lo0bits+0x52>
 800ba08:	0798      	lsls	r0, r3, #30
 800ba0a:	bf49      	itett	mi
 800ba0c:	085b      	lsrmi	r3, r3, #1
 800ba0e:	089b      	lsrpl	r3, r3, #2
 800ba10:	2001      	movmi	r0, #1
 800ba12:	6013      	strmi	r3, [r2, #0]
 800ba14:	bf5c      	itt	pl
 800ba16:	6013      	strpl	r3, [r2, #0]
 800ba18:	2002      	movpl	r0, #2
 800ba1a:	4770      	bx	lr
 800ba1c:	b299      	uxth	r1, r3
 800ba1e:	b909      	cbnz	r1, 800ba24 <__lo0bits+0x2a>
 800ba20:	0c1b      	lsrs	r3, r3, #16
 800ba22:	2010      	movs	r0, #16
 800ba24:	b2d9      	uxtb	r1, r3
 800ba26:	b909      	cbnz	r1, 800ba2c <__lo0bits+0x32>
 800ba28:	3008      	adds	r0, #8
 800ba2a:	0a1b      	lsrs	r3, r3, #8
 800ba2c:	0719      	lsls	r1, r3, #28
 800ba2e:	bf04      	itt	eq
 800ba30:	091b      	lsreq	r3, r3, #4
 800ba32:	3004      	addeq	r0, #4
 800ba34:	0799      	lsls	r1, r3, #30
 800ba36:	bf04      	itt	eq
 800ba38:	089b      	lsreq	r3, r3, #2
 800ba3a:	3002      	addeq	r0, #2
 800ba3c:	07d9      	lsls	r1, r3, #31
 800ba3e:	d403      	bmi.n	800ba48 <__lo0bits+0x4e>
 800ba40:	085b      	lsrs	r3, r3, #1
 800ba42:	f100 0001 	add.w	r0, r0, #1
 800ba46:	d003      	beq.n	800ba50 <__lo0bits+0x56>
 800ba48:	6013      	str	r3, [r2, #0]
 800ba4a:	4770      	bx	lr
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	4770      	bx	lr
 800ba50:	2020      	movs	r0, #32
 800ba52:	4770      	bx	lr

0800ba54 <__i2b>:
 800ba54:	b510      	push	{r4, lr}
 800ba56:	460c      	mov	r4, r1
 800ba58:	2101      	movs	r1, #1
 800ba5a:	f7ff febd 	bl	800b7d8 <_Balloc>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	b928      	cbnz	r0, 800ba6e <__i2b+0x1a>
 800ba62:	4b05      	ldr	r3, [pc, #20]	@ (800ba78 <__i2b+0x24>)
 800ba64:	4805      	ldr	r0, [pc, #20]	@ (800ba7c <__i2b+0x28>)
 800ba66:	f240 1145 	movw	r1, #325	@ 0x145
 800ba6a:	f7fe ff3f 	bl	800a8ec <__assert_func>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	6144      	str	r4, [r0, #20]
 800ba72:	6103      	str	r3, [r0, #16]
 800ba74:	bd10      	pop	{r4, pc}
 800ba76:	bf00      	nop
 800ba78:	0800e74c 	.word	0x0800e74c
 800ba7c:	0800e75d 	.word	0x0800e75d

0800ba80 <__multiply>:
 800ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba84:	4617      	mov	r7, r2
 800ba86:	690a      	ldr	r2, [r1, #16]
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	bfa8      	it	ge
 800ba8e:	463b      	movge	r3, r7
 800ba90:	4689      	mov	r9, r1
 800ba92:	bfa4      	itt	ge
 800ba94:	460f      	movge	r7, r1
 800ba96:	4699      	movge	r9, r3
 800ba98:	693d      	ldr	r5, [r7, #16]
 800ba9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	6879      	ldr	r1, [r7, #4]
 800baa2:	eb05 060a 	add.w	r6, r5, sl
 800baa6:	42b3      	cmp	r3, r6
 800baa8:	b085      	sub	sp, #20
 800baaa:	bfb8      	it	lt
 800baac:	3101      	addlt	r1, #1
 800baae:	f7ff fe93 	bl	800b7d8 <_Balloc>
 800bab2:	b930      	cbnz	r0, 800bac2 <__multiply+0x42>
 800bab4:	4602      	mov	r2, r0
 800bab6:	4b41      	ldr	r3, [pc, #260]	@ (800bbbc <__multiply+0x13c>)
 800bab8:	4841      	ldr	r0, [pc, #260]	@ (800bbc0 <__multiply+0x140>)
 800baba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800babe:	f7fe ff15 	bl	800a8ec <__assert_func>
 800bac2:	f100 0414 	add.w	r4, r0, #20
 800bac6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800baca:	4623      	mov	r3, r4
 800bacc:	2200      	movs	r2, #0
 800bace:	4573      	cmp	r3, lr
 800bad0:	d320      	bcc.n	800bb14 <__multiply+0x94>
 800bad2:	f107 0814 	add.w	r8, r7, #20
 800bad6:	f109 0114 	add.w	r1, r9, #20
 800bada:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bade:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bae2:	9302      	str	r3, [sp, #8]
 800bae4:	1beb      	subs	r3, r5, r7
 800bae6:	3b15      	subs	r3, #21
 800bae8:	f023 0303 	bic.w	r3, r3, #3
 800baec:	3304      	adds	r3, #4
 800baee:	3715      	adds	r7, #21
 800baf0:	42bd      	cmp	r5, r7
 800baf2:	bf38      	it	cc
 800baf4:	2304      	movcc	r3, #4
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	9b02      	ldr	r3, [sp, #8]
 800bafa:	9103      	str	r1, [sp, #12]
 800bafc:	428b      	cmp	r3, r1
 800bafe:	d80c      	bhi.n	800bb1a <__multiply+0x9a>
 800bb00:	2e00      	cmp	r6, #0
 800bb02:	dd03      	ble.n	800bb0c <__multiply+0x8c>
 800bb04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d055      	beq.n	800bbb8 <__multiply+0x138>
 800bb0c:	6106      	str	r6, [r0, #16]
 800bb0e:	b005      	add	sp, #20
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	f843 2b04 	str.w	r2, [r3], #4
 800bb18:	e7d9      	b.n	800bace <__multiply+0x4e>
 800bb1a:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb1e:	f1ba 0f00 	cmp.w	sl, #0
 800bb22:	d01f      	beq.n	800bb64 <__multiply+0xe4>
 800bb24:	46c4      	mov	ip, r8
 800bb26:	46a1      	mov	r9, r4
 800bb28:	2700      	movs	r7, #0
 800bb2a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb2e:	f8d9 3000 	ldr.w	r3, [r9]
 800bb32:	fa1f fb82 	uxth.w	fp, r2
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb3c:	443b      	add	r3, r7
 800bb3e:	f8d9 7000 	ldr.w	r7, [r9]
 800bb42:	0c12      	lsrs	r2, r2, #16
 800bb44:	0c3f      	lsrs	r7, r7, #16
 800bb46:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb4a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb54:	4565      	cmp	r5, ip
 800bb56:	f849 3b04 	str.w	r3, [r9], #4
 800bb5a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bb5e:	d8e4      	bhi.n	800bb2a <__multiply+0xaa>
 800bb60:	9b01      	ldr	r3, [sp, #4]
 800bb62:	50e7      	str	r7, [r4, r3]
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb6a:	3104      	adds	r1, #4
 800bb6c:	f1b9 0f00 	cmp.w	r9, #0
 800bb70:	d020      	beq.n	800bbb4 <__multiply+0x134>
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	4647      	mov	r7, r8
 800bb76:	46a4      	mov	ip, r4
 800bb78:	f04f 0a00 	mov.w	sl, #0
 800bb7c:	f8b7 b000 	ldrh.w	fp, [r7]
 800bb80:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bb84:	fb09 220b 	mla	r2, r9, fp, r2
 800bb88:	4452      	add	r2, sl
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb90:	f84c 3b04 	str.w	r3, [ip], #4
 800bb94:	f857 3b04 	ldr.w	r3, [r7], #4
 800bb98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb9c:	f8bc 3000 	ldrh.w	r3, [ip]
 800bba0:	fb09 330a 	mla	r3, r9, sl, r3
 800bba4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bba8:	42bd      	cmp	r5, r7
 800bbaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbae:	d8e5      	bhi.n	800bb7c <__multiply+0xfc>
 800bbb0:	9a01      	ldr	r2, [sp, #4]
 800bbb2:	50a3      	str	r3, [r4, r2]
 800bbb4:	3404      	adds	r4, #4
 800bbb6:	e79f      	b.n	800baf8 <__multiply+0x78>
 800bbb8:	3e01      	subs	r6, #1
 800bbba:	e7a1      	b.n	800bb00 <__multiply+0x80>
 800bbbc:	0800e74c 	.word	0x0800e74c
 800bbc0:	0800e75d 	.word	0x0800e75d

0800bbc4 <__pow5mult>:
 800bbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbc8:	4615      	mov	r5, r2
 800bbca:	f012 0203 	ands.w	r2, r2, #3
 800bbce:	4607      	mov	r7, r0
 800bbd0:	460e      	mov	r6, r1
 800bbd2:	d007      	beq.n	800bbe4 <__pow5mult+0x20>
 800bbd4:	4c25      	ldr	r4, [pc, #148]	@ (800bc6c <__pow5mult+0xa8>)
 800bbd6:	3a01      	subs	r2, #1
 800bbd8:	2300      	movs	r3, #0
 800bbda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbde:	f7ff fe5d 	bl	800b89c <__multadd>
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	10ad      	asrs	r5, r5, #2
 800bbe6:	d03d      	beq.n	800bc64 <__pow5mult+0xa0>
 800bbe8:	69fc      	ldr	r4, [r7, #28]
 800bbea:	b97c      	cbnz	r4, 800bc0c <__pow5mult+0x48>
 800bbec:	2010      	movs	r0, #16
 800bbee:	f7ff fd3d 	bl	800b66c <malloc>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	61f8      	str	r0, [r7, #28]
 800bbf6:	b928      	cbnz	r0, 800bc04 <__pow5mult+0x40>
 800bbf8:	4b1d      	ldr	r3, [pc, #116]	@ (800bc70 <__pow5mult+0xac>)
 800bbfa:	481e      	ldr	r0, [pc, #120]	@ (800bc74 <__pow5mult+0xb0>)
 800bbfc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc00:	f7fe fe74 	bl	800a8ec <__assert_func>
 800bc04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc08:	6004      	str	r4, [r0, #0]
 800bc0a:	60c4      	str	r4, [r0, #12]
 800bc0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc14:	b94c      	cbnz	r4, 800bc2a <__pow5mult+0x66>
 800bc16:	f240 2171 	movw	r1, #625	@ 0x271
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	f7ff ff1a 	bl	800ba54 <__i2b>
 800bc20:	2300      	movs	r3, #0
 800bc22:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc26:	4604      	mov	r4, r0
 800bc28:	6003      	str	r3, [r0, #0]
 800bc2a:	f04f 0900 	mov.w	r9, #0
 800bc2e:	07eb      	lsls	r3, r5, #31
 800bc30:	d50a      	bpl.n	800bc48 <__pow5mult+0x84>
 800bc32:	4631      	mov	r1, r6
 800bc34:	4622      	mov	r2, r4
 800bc36:	4638      	mov	r0, r7
 800bc38:	f7ff ff22 	bl	800ba80 <__multiply>
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4680      	mov	r8, r0
 800bc40:	4638      	mov	r0, r7
 800bc42:	f7ff fe09 	bl	800b858 <_Bfree>
 800bc46:	4646      	mov	r6, r8
 800bc48:	106d      	asrs	r5, r5, #1
 800bc4a:	d00b      	beq.n	800bc64 <__pow5mult+0xa0>
 800bc4c:	6820      	ldr	r0, [r4, #0]
 800bc4e:	b938      	cbnz	r0, 800bc60 <__pow5mult+0x9c>
 800bc50:	4622      	mov	r2, r4
 800bc52:	4621      	mov	r1, r4
 800bc54:	4638      	mov	r0, r7
 800bc56:	f7ff ff13 	bl	800ba80 <__multiply>
 800bc5a:	6020      	str	r0, [r4, #0]
 800bc5c:	f8c0 9000 	str.w	r9, [r0]
 800bc60:	4604      	mov	r4, r0
 800bc62:	e7e4      	b.n	800bc2e <__pow5mult+0x6a>
 800bc64:	4630      	mov	r0, r6
 800bc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc6a:	bf00      	nop
 800bc6c:	0800e834 	.word	0x0800e834
 800bc70:	0800e63a 	.word	0x0800e63a
 800bc74:	0800e75d 	.word	0x0800e75d

0800bc78 <__lshift>:
 800bc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	6849      	ldr	r1, [r1, #4]
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc86:	68a3      	ldr	r3, [r4, #8]
 800bc88:	4607      	mov	r7, r0
 800bc8a:	4691      	mov	r9, r2
 800bc8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc90:	f108 0601 	add.w	r6, r8, #1
 800bc94:	42b3      	cmp	r3, r6
 800bc96:	db0b      	blt.n	800bcb0 <__lshift+0x38>
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f7ff fd9d 	bl	800b7d8 <_Balloc>
 800bc9e:	4605      	mov	r5, r0
 800bca0:	b948      	cbnz	r0, 800bcb6 <__lshift+0x3e>
 800bca2:	4602      	mov	r2, r0
 800bca4:	4b28      	ldr	r3, [pc, #160]	@ (800bd48 <__lshift+0xd0>)
 800bca6:	4829      	ldr	r0, [pc, #164]	@ (800bd4c <__lshift+0xd4>)
 800bca8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcac:	f7fe fe1e 	bl	800a8ec <__assert_func>
 800bcb0:	3101      	adds	r1, #1
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	e7ee      	b.n	800bc94 <__lshift+0x1c>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	f100 0114 	add.w	r1, r0, #20
 800bcbc:	f100 0210 	add.w	r2, r0, #16
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	4553      	cmp	r3, sl
 800bcc4:	db33      	blt.n	800bd2e <__lshift+0xb6>
 800bcc6:	6920      	ldr	r0, [r4, #16]
 800bcc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bccc:	f104 0314 	add.w	r3, r4, #20
 800bcd0:	f019 091f 	ands.w	r9, r9, #31
 800bcd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcdc:	d02b      	beq.n	800bd36 <__lshift+0xbe>
 800bcde:	f1c9 0e20 	rsb	lr, r9, #32
 800bce2:	468a      	mov	sl, r1
 800bce4:	2200      	movs	r2, #0
 800bce6:	6818      	ldr	r0, [r3, #0]
 800bce8:	fa00 f009 	lsl.w	r0, r0, r9
 800bcec:	4310      	orrs	r0, r2
 800bcee:	f84a 0b04 	str.w	r0, [sl], #4
 800bcf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf6:	459c      	cmp	ip, r3
 800bcf8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcfc:	d8f3      	bhi.n	800bce6 <__lshift+0x6e>
 800bcfe:	ebac 0304 	sub.w	r3, ip, r4
 800bd02:	3b15      	subs	r3, #21
 800bd04:	f023 0303 	bic.w	r3, r3, #3
 800bd08:	3304      	adds	r3, #4
 800bd0a:	f104 0015 	add.w	r0, r4, #21
 800bd0e:	4560      	cmp	r0, ip
 800bd10:	bf88      	it	hi
 800bd12:	2304      	movhi	r3, #4
 800bd14:	50ca      	str	r2, [r1, r3]
 800bd16:	b10a      	cbz	r2, 800bd1c <__lshift+0xa4>
 800bd18:	f108 0602 	add.w	r6, r8, #2
 800bd1c:	3e01      	subs	r6, #1
 800bd1e:	4638      	mov	r0, r7
 800bd20:	612e      	str	r6, [r5, #16]
 800bd22:	4621      	mov	r1, r4
 800bd24:	f7ff fd98 	bl	800b858 <_Bfree>
 800bd28:	4628      	mov	r0, r5
 800bd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd32:	3301      	adds	r3, #1
 800bd34:	e7c5      	b.n	800bcc2 <__lshift+0x4a>
 800bd36:	3904      	subs	r1, #4
 800bd38:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd40:	459c      	cmp	ip, r3
 800bd42:	d8f9      	bhi.n	800bd38 <__lshift+0xc0>
 800bd44:	e7ea      	b.n	800bd1c <__lshift+0xa4>
 800bd46:	bf00      	nop
 800bd48:	0800e74c 	.word	0x0800e74c
 800bd4c:	0800e75d 	.word	0x0800e75d

0800bd50 <__mcmp>:
 800bd50:	690a      	ldr	r2, [r1, #16]
 800bd52:	4603      	mov	r3, r0
 800bd54:	6900      	ldr	r0, [r0, #16]
 800bd56:	1a80      	subs	r0, r0, r2
 800bd58:	b530      	push	{r4, r5, lr}
 800bd5a:	d10e      	bne.n	800bd7a <__mcmp+0x2a>
 800bd5c:	3314      	adds	r3, #20
 800bd5e:	3114      	adds	r1, #20
 800bd60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd70:	4295      	cmp	r5, r2
 800bd72:	d003      	beq.n	800bd7c <__mcmp+0x2c>
 800bd74:	d205      	bcs.n	800bd82 <__mcmp+0x32>
 800bd76:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7a:	bd30      	pop	{r4, r5, pc}
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	d3f3      	bcc.n	800bd68 <__mcmp+0x18>
 800bd80:	e7fb      	b.n	800bd7a <__mcmp+0x2a>
 800bd82:	2001      	movs	r0, #1
 800bd84:	e7f9      	b.n	800bd7a <__mcmp+0x2a>
	...

0800bd88 <__mdiff>:
 800bd88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8c:	4689      	mov	r9, r1
 800bd8e:	4606      	mov	r6, r0
 800bd90:	4611      	mov	r1, r2
 800bd92:	4648      	mov	r0, r9
 800bd94:	4614      	mov	r4, r2
 800bd96:	f7ff ffdb 	bl	800bd50 <__mcmp>
 800bd9a:	1e05      	subs	r5, r0, #0
 800bd9c:	d112      	bne.n	800bdc4 <__mdiff+0x3c>
 800bd9e:	4629      	mov	r1, r5
 800bda0:	4630      	mov	r0, r6
 800bda2:	f7ff fd19 	bl	800b7d8 <_Balloc>
 800bda6:	4602      	mov	r2, r0
 800bda8:	b928      	cbnz	r0, 800bdb6 <__mdiff+0x2e>
 800bdaa:	4b3f      	ldr	r3, [pc, #252]	@ (800bea8 <__mdiff+0x120>)
 800bdac:	f240 2137 	movw	r1, #567	@ 0x237
 800bdb0:	483e      	ldr	r0, [pc, #248]	@ (800beac <__mdiff+0x124>)
 800bdb2:	f7fe fd9b 	bl	800a8ec <__assert_func>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	b003      	add	sp, #12
 800bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc4:	bfbc      	itt	lt
 800bdc6:	464b      	movlt	r3, r9
 800bdc8:	46a1      	movlt	r9, r4
 800bdca:	4630      	mov	r0, r6
 800bdcc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdd0:	bfba      	itte	lt
 800bdd2:	461c      	movlt	r4, r3
 800bdd4:	2501      	movlt	r5, #1
 800bdd6:	2500      	movge	r5, #0
 800bdd8:	f7ff fcfe 	bl	800b7d8 <_Balloc>
 800bddc:	4602      	mov	r2, r0
 800bdde:	b918      	cbnz	r0, 800bde8 <__mdiff+0x60>
 800bde0:	4b31      	ldr	r3, [pc, #196]	@ (800bea8 <__mdiff+0x120>)
 800bde2:	f240 2145 	movw	r1, #581	@ 0x245
 800bde6:	e7e3      	b.n	800bdb0 <__mdiff+0x28>
 800bde8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bdec:	6926      	ldr	r6, [r4, #16]
 800bdee:	60c5      	str	r5, [r0, #12]
 800bdf0:	f109 0310 	add.w	r3, r9, #16
 800bdf4:	f109 0514 	add.w	r5, r9, #20
 800bdf8:	f104 0e14 	add.w	lr, r4, #20
 800bdfc:	f100 0b14 	add.w	fp, r0, #20
 800be00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	46d9      	mov	r9, fp
 800be0c:	f04f 0c00 	mov.w	ip, #0
 800be10:	9b01      	ldr	r3, [sp, #4]
 800be12:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be16:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be1a:	9301      	str	r3, [sp, #4]
 800be1c:	fa1f f38a 	uxth.w	r3, sl
 800be20:	4619      	mov	r1, r3
 800be22:	b283      	uxth	r3, r0
 800be24:	1acb      	subs	r3, r1, r3
 800be26:	0c00      	lsrs	r0, r0, #16
 800be28:	4463      	add	r3, ip
 800be2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be32:	b29b      	uxth	r3, r3
 800be34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be38:	4576      	cmp	r6, lr
 800be3a:	f849 3b04 	str.w	r3, [r9], #4
 800be3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be42:	d8e5      	bhi.n	800be10 <__mdiff+0x88>
 800be44:	1b33      	subs	r3, r6, r4
 800be46:	3b15      	subs	r3, #21
 800be48:	f023 0303 	bic.w	r3, r3, #3
 800be4c:	3415      	adds	r4, #21
 800be4e:	3304      	adds	r3, #4
 800be50:	42a6      	cmp	r6, r4
 800be52:	bf38      	it	cc
 800be54:	2304      	movcc	r3, #4
 800be56:	441d      	add	r5, r3
 800be58:	445b      	add	r3, fp
 800be5a:	461e      	mov	r6, r3
 800be5c:	462c      	mov	r4, r5
 800be5e:	4544      	cmp	r4, r8
 800be60:	d30e      	bcc.n	800be80 <__mdiff+0xf8>
 800be62:	f108 0103 	add.w	r1, r8, #3
 800be66:	1b49      	subs	r1, r1, r5
 800be68:	f021 0103 	bic.w	r1, r1, #3
 800be6c:	3d03      	subs	r5, #3
 800be6e:	45a8      	cmp	r8, r5
 800be70:	bf38      	it	cc
 800be72:	2100      	movcc	r1, #0
 800be74:	440b      	add	r3, r1
 800be76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be7a:	b191      	cbz	r1, 800bea2 <__mdiff+0x11a>
 800be7c:	6117      	str	r7, [r2, #16]
 800be7e:	e79d      	b.n	800bdbc <__mdiff+0x34>
 800be80:	f854 1b04 	ldr.w	r1, [r4], #4
 800be84:	46e6      	mov	lr, ip
 800be86:	0c08      	lsrs	r0, r1, #16
 800be88:	fa1c fc81 	uxtah	ip, ip, r1
 800be8c:	4471      	add	r1, lr
 800be8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be92:	b289      	uxth	r1, r1
 800be94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be98:	f846 1b04 	str.w	r1, [r6], #4
 800be9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bea0:	e7dd      	b.n	800be5e <__mdiff+0xd6>
 800bea2:	3f01      	subs	r7, #1
 800bea4:	e7e7      	b.n	800be76 <__mdiff+0xee>
 800bea6:	bf00      	nop
 800bea8:	0800e74c 	.word	0x0800e74c
 800beac:	0800e75d 	.word	0x0800e75d

0800beb0 <__ulp>:
 800beb0:	b082      	sub	sp, #8
 800beb2:	ed8d 0b00 	vstr	d0, [sp]
 800beb6:	9a01      	ldr	r2, [sp, #4]
 800beb8:	4b0f      	ldr	r3, [pc, #60]	@ (800bef8 <__ulp+0x48>)
 800beba:	4013      	ands	r3, r2
 800bebc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	dc08      	bgt.n	800bed6 <__ulp+0x26>
 800bec4:	425b      	negs	r3, r3
 800bec6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800beca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bece:	da04      	bge.n	800beda <__ulp+0x2a>
 800bed0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bed4:	4113      	asrs	r3, r2
 800bed6:	2200      	movs	r2, #0
 800bed8:	e008      	b.n	800beec <__ulp+0x3c>
 800beda:	f1a2 0314 	sub.w	r3, r2, #20
 800bede:	2b1e      	cmp	r3, #30
 800bee0:	bfda      	itte	le
 800bee2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bee6:	40da      	lsrle	r2, r3
 800bee8:	2201      	movgt	r2, #1
 800beea:	2300      	movs	r3, #0
 800beec:	4619      	mov	r1, r3
 800beee:	4610      	mov	r0, r2
 800bef0:	ec41 0b10 	vmov	d0, r0, r1
 800bef4:	b002      	add	sp, #8
 800bef6:	4770      	bx	lr
 800bef8:	7ff00000 	.word	0x7ff00000

0800befc <__b2d>:
 800befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf00:	6906      	ldr	r6, [r0, #16]
 800bf02:	f100 0814 	add.w	r8, r0, #20
 800bf06:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bf0a:	1f37      	subs	r7, r6, #4
 800bf0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf10:	4610      	mov	r0, r2
 800bf12:	f7ff fd53 	bl	800b9bc <__hi0bits>
 800bf16:	f1c0 0320 	rsb	r3, r0, #32
 800bf1a:	280a      	cmp	r0, #10
 800bf1c:	600b      	str	r3, [r1, #0]
 800bf1e:	491b      	ldr	r1, [pc, #108]	@ (800bf8c <__b2d+0x90>)
 800bf20:	dc15      	bgt.n	800bf4e <__b2d+0x52>
 800bf22:	f1c0 0c0b 	rsb	ip, r0, #11
 800bf26:	fa22 f30c 	lsr.w	r3, r2, ip
 800bf2a:	45b8      	cmp	r8, r7
 800bf2c:	ea43 0501 	orr.w	r5, r3, r1
 800bf30:	bf34      	ite	cc
 800bf32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf36:	2300      	movcs	r3, #0
 800bf38:	3015      	adds	r0, #21
 800bf3a:	fa02 f000 	lsl.w	r0, r2, r0
 800bf3e:	fa23 f30c 	lsr.w	r3, r3, ip
 800bf42:	4303      	orrs	r3, r0
 800bf44:	461c      	mov	r4, r3
 800bf46:	ec45 4b10 	vmov	d0, r4, r5
 800bf4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf4e:	45b8      	cmp	r8, r7
 800bf50:	bf3a      	itte	cc
 800bf52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf56:	f1a6 0708 	subcc.w	r7, r6, #8
 800bf5a:	2300      	movcs	r3, #0
 800bf5c:	380b      	subs	r0, #11
 800bf5e:	d012      	beq.n	800bf86 <__b2d+0x8a>
 800bf60:	f1c0 0120 	rsb	r1, r0, #32
 800bf64:	fa23 f401 	lsr.w	r4, r3, r1
 800bf68:	4082      	lsls	r2, r0
 800bf6a:	4322      	orrs	r2, r4
 800bf6c:	4547      	cmp	r7, r8
 800bf6e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bf72:	bf8c      	ite	hi
 800bf74:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf78:	2200      	movls	r2, #0
 800bf7a:	4083      	lsls	r3, r0
 800bf7c:	40ca      	lsrs	r2, r1
 800bf7e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf82:	4313      	orrs	r3, r2
 800bf84:	e7de      	b.n	800bf44 <__b2d+0x48>
 800bf86:	ea42 0501 	orr.w	r5, r2, r1
 800bf8a:	e7db      	b.n	800bf44 <__b2d+0x48>
 800bf8c:	3ff00000 	.word	0x3ff00000

0800bf90 <__d2b>:
 800bf90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf94:	460f      	mov	r7, r1
 800bf96:	2101      	movs	r1, #1
 800bf98:	ec59 8b10 	vmov	r8, r9, d0
 800bf9c:	4616      	mov	r6, r2
 800bf9e:	f7ff fc1b 	bl	800b7d8 <_Balloc>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	b930      	cbnz	r0, 800bfb4 <__d2b+0x24>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	4b23      	ldr	r3, [pc, #140]	@ (800c038 <__d2b+0xa8>)
 800bfaa:	4824      	ldr	r0, [pc, #144]	@ (800c03c <__d2b+0xac>)
 800bfac:	f240 310f 	movw	r1, #783	@ 0x30f
 800bfb0:	f7fe fc9c 	bl	800a8ec <__assert_func>
 800bfb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfbc:	b10d      	cbz	r5, 800bfc2 <__d2b+0x32>
 800bfbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfc2:	9301      	str	r3, [sp, #4]
 800bfc4:	f1b8 0300 	subs.w	r3, r8, #0
 800bfc8:	d023      	beq.n	800c012 <__d2b+0x82>
 800bfca:	4668      	mov	r0, sp
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	f7ff fd14 	bl	800b9fa <__lo0bits>
 800bfd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfd6:	b1d0      	cbz	r0, 800c00e <__d2b+0x7e>
 800bfd8:	f1c0 0320 	rsb	r3, r0, #32
 800bfdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe0:	430b      	orrs	r3, r1
 800bfe2:	40c2      	lsrs	r2, r0
 800bfe4:	6163      	str	r3, [r4, #20]
 800bfe6:	9201      	str	r2, [sp, #4]
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	61a3      	str	r3, [r4, #24]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	bf0c      	ite	eq
 800bff0:	2201      	moveq	r2, #1
 800bff2:	2202      	movne	r2, #2
 800bff4:	6122      	str	r2, [r4, #16]
 800bff6:	b1a5      	cbz	r5, 800c022 <__d2b+0x92>
 800bff8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bffc:	4405      	add	r5, r0
 800bffe:	603d      	str	r5, [r7, #0]
 800c000:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c004:	6030      	str	r0, [r6, #0]
 800c006:	4620      	mov	r0, r4
 800c008:	b003      	add	sp, #12
 800c00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c00e:	6161      	str	r1, [r4, #20]
 800c010:	e7ea      	b.n	800bfe8 <__d2b+0x58>
 800c012:	a801      	add	r0, sp, #4
 800c014:	f7ff fcf1 	bl	800b9fa <__lo0bits>
 800c018:	9b01      	ldr	r3, [sp, #4]
 800c01a:	6163      	str	r3, [r4, #20]
 800c01c:	3020      	adds	r0, #32
 800c01e:	2201      	movs	r2, #1
 800c020:	e7e8      	b.n	800bff4 <__d2b+0x64>
 800c022:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c026:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c02a:	6038      	str	r0, [r7, #0]
 800c02c:	6918      	ldr	r0, [r3, #16]
 800c02e:	f7ff fcc5 	bl	800b9bc <__hi0bits>
 800c032:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c036:	e7e5      	b.n	800c004 <__d2b+0x74>
 800c038:	0800e74c 	.word	0x0800e74c
 800c03c:	0800e75d 	.word	0x0800e75d

0800c040 <__ratio>:
 800c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c044:	b085      	sub	sp, #20
 800c046:	e9cd 1000 	strd	r1, r0, [sp]
 800c04a:	a902      	add	r1, sp, #8
 800c04c:	f7ff ff56 	bl	800befc <__b2d>
 800c050:	9800      	ldr	r0, [sp, #0]
 800c052:	a903      	add	r1, sp, #12
 800c054:	ec55 4b10 	vmov	r4, r5, d0
 800c058:	f7ff ff50 	bl	800befc <__b2d>
 800c05c:	9b01      	ldr	r3, [sp, #4]
 800c05e:	6919      	ldr	r1, [r3, #16]
 800c060:	9b00      	ldr	r3, [sp, #0]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	1ac9      	subs	r1, r1, r3
 800c066:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c06a:	1a9b      	subs	r3, r3, r2
 800c06c:	ec5b ab10 	vmov	sl, fp, d0
 800c070:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c074:	2b00      	cmp	r3, #0
 800c076:	bfce      	itee	gt
 800c078:	462a      	movgt	r2, r5
 800c07a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c07e:	465a      	movle	r2, fp
 800c080:	462f      	mov	r7, r5
 800c082:	46d9      	mov	r9, fp
 800c084:	bfcc      	ite	gt
 800c086:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c08a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c08e:	464b      	mov	r3, r9
 800c090:	4652      	mov	r2, sl
 800c092:	4620      	mov	r0, r4
 800c094:	4639      	mov	r1, r7
 800c096:	f7f4 fbf9 	bl	800088c <__aeabi_ddiv>
 800c09a:	ec41 0b10 	vmov	d0, r0, r1
 800c09e:	b005      	add	sp, #20
 800c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0a4 <__copybits>:
 800c0a4:	3901      	subs	r1, #1
 800c0a6:	b570      	push	{r4, r5, r6, lr}
 800c0a8:	1149      	asrs	r1, r1, #5
 800c0aa:	6914      	ldr	r4, [r2, #16]
 800c0ac:	3101      	adds	r1, #1
 800c0ae:	f102 0314 	add.w	r3, r2, #20
 800c0b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c0b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0ba:	1f05      	subs	r5, r0, #4
 800c0bc:	42a3      	cmp	r3, r4
 800c0be:	d30c      	bcc.n	800c0da <__copybits+0x36>
 800c0c0:	1aa3      	subs	r3, r4, r2
 800c0c2:	3b11      	subs	r3, #17
 800c0c4:	f023 0303 	bic.w	r3, r3, #3
 800c0c8:	3211      	adds	r2, #17
 800c0ca:	42a2      	cmp	r2, r4
 800c0cc:	bf88      	it	hi
 800c0ce:	2300      	movhi	r3, #0
 800c0d0:	4418      	add	r0, r3
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4288      	cmp	r0, r1
 800c0d6:	d305      	bcc.n	800c0e4 <__copybits+0x40>
 800c0d8:	bd70      	pop	{r4, r5, r6, pc}
 800c0da:	f853 6b04 	ldr.w	r6, [r3], #4
 800c0de:	f845 6f04 	str.w	r6, [r5, #4]!
 800c0e2:	e7eb      	b.n	800c0bc <__copybits+0x18>
 800c0e4:	f840 3b04 	str.w	r3, [r0], #4
 800c0e8:	e7f4      	b.n	800c0d4 <__copybits+0x30>

0800c0ea <__any_on>:
 800c0ea:	f100 0214 	add.w	r2, r0, #20
 800c0ee:	6900      	ldr	r0, [r0, #16]
 800c0f0:	114b      	asrs	r3, r1, #5
 800c0f2:	4298      	cmp	r0, r3
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	db11      	blt.n	800c11c <__any_on+0x32>
 800c0f8:	dd0a      	ble.n	800c110 <__any_on+0x26>
 800c0fa:	f011 011f 	ands.w	r1, r1, #31
 800c0fe:	d007      	beq.n	800c110 <__any_on+0x26>
 800c100:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c104:	fa24 f001 	lsr.w	r0, r4, r1
 800c108:	fa00 f101 	lsl.w	r1, r0, r1
 800c10c:	428c      	cmp	r4, r1
 800c10e:	d10b      	bne.n	800c128 <__any_on+0x3e>
 800c110:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c114:	4293      	cmp	r3, r2
 800c116:	d803      	bhi.n	800c120 <__any_on+0x36>
 800c118:	2000      	movs	r0, #0
 800c11a:	bd10      	pop	{r4, pc}
 800c11c:	4603      	mov	r3, r0
 800c11e:	e7f7      	b.n	800c110 <__any_on+0x26>
 800c120:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c124:	2900      	cmp	r1, #0
 800c126:	d0f5      	beq.n	800c114 <__any_on+0x2a>
 800c128:	2001      	movs	r0, #1
 800c12a:	e7f6      	b.n	800c11a <__any_on+0x30>

0800c12c <sulp>:
 800c12c:	b570      	push	{r4, r5, r6, lr}
 800c12e:	4604      	mov	r4, r0
 800c130:	460d      	mov	r5, r1
 800c132:	ec45 4b10 	vmov	d0, r4, r5
 800c136:	4616      	mov	r6, r2
 800c138:	f7ff feba 	bl	800beb0 <__ulp>
 800c13c:	ec51 0b10 	vmov	r0, r1, d0
 800c140:	b17e      	cbz	r6, 800c162 <sulp+0x36>
 800c142:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c146:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	dd09      	ble.n	800c162 <sulp+0x36>
 800c14e:	051b      	lsls	r3, r3, #20
 800c150:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c154:	2400      	movs	r4, #0
 800c156:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c15a:	4622      	mov	r2, r4
 800c15c:	462b      	mov	r3, r5
 800c15e:	f7f4 fa6b 	bl	8000638 <__aeabi_dmul>
 800c162:	ec41 0b10 	vmov	d0, r0, r1
 800c166:	bd70      	pop	{r4, r5, r6, pc}

0800c168 <_strtod_l>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	b09f      	sub	sp, #124	@ 0x7c
 800c16e:	460c      	mov	r4, r1
 800c170:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c172:	2200      	movs	r2, #0
 800c174:	921a      	str	r2, [sp, #104]	@ 0x68
 800c176:	9005      	str	r0, [sp, #20]
 800c178:	f04f 0a00 	mov.w	sl, #0
 800c17c:	f04f 0b00 	mov.w	fp, #0
 800c180:	460a      	mov	r2, r1
 800c182:	9219      	str	r2, [sp, #100]	@ 0x64
 800c184:	7811      	ldrb	r1, [r2, #0]
 800c186:	292b      	cmp	r1, #43	@ 0x2b
 800c188:	d04a      	beq.n	800c220 <_strtod_l+0xb8>
 800c18a:	d838      	bhi.n	800c1fe <_strtod_l+0x96>
 800c18c:	290d      	cmp	r1, #13
 800c18e:	d832      	bhi.n	800c1f6 <_strtod_l+0x8e>
 800c190:	2908      	cmp	r1, #8
 800c192:	d832      	bhi.n	800c1fa <_strtod_l+0x92>
 800c194:	2900      	cmp	r1, #0
 800c196:	d03b      	beq.n	800c210 <_strtod_l+0xa8>
 800c198:	2200      	movs	r2, #0
 800c19a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c19c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c19e:	782a      	ldrb	r2, [r5, #0]
 800c1a0:	2a30      	cmp	r2, #48	@ 0x30
 800c1a2:	f040 80b2 	bne.w	800c30a <_strtod_l+0x1a2>
 800c1a6:	786a      	ldrb	r2, [r5, #1]
 800c1a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c1ac:	2a58      	cmp	r2, #88	@ 0x58
 800c1ae:	d16e      	bne.n	800c28e <_strtod_l+0x126>
 800c1b0:	9302      	str	r3, [sp, #8]
 800c1b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	4a8f      	ldr	r2, [pc, #572]	@ (800c3f8 <_strtod_l+0x290>)
 800c1bc:	9805      	ldr	r0, [sp, #20]
 800c1be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c1c0:	a919      	add	r1, sp, #100	@ 0x64
 800c1c2:	f001 faff 	bl	800d7c4 <__gethex>
 800c1c6:	f010 060f 	ands.w	r6, r0, #15
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	d005      	beq.n	800c1da <_strtod_l+0x72>
 800c1ce:	2e06      	cmp	r6, #6
 800c1d0:	d128      	bne.n	800c224 <_strtod_l+0xbc>
 800c1d2:	3501      	adds	r5, #1
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c1d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c1da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f040 858e 	bne.w	800ccfe <_strtod_l+0xb96>
 800c1e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1e4:	b1cb      	cbz	r3, 800c21a <_strtod_l+0xb2>
 800c1e6:	4652      	mov	r2, sl
 800c1e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c1ec:	ec43 2b10 	vmov	d0, r2, r3
 800c1f0:	b01f      	add	sp, #124	@ 0x7c
 800c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f6:	2920      	cmp	r1, #32
 800c1f8:	d1ce      	bne.n	800c198 <_strtod_l+0x30>
 800c1fa:	3201      	adds	r2, #1
 800c1fc:	e7c1      	b.n	800c182 <_strtod_l+0x1a>
 800c1fe:	292d      	cmp	r1, #45	@ 0x2d
 800c200:	d1ca      	bne.n	800c198 <_strtod_l+0x30>
 800c202:	2101      	movs	r1, #1
 800c204:	910e      	str	r1, [sp, #56]	@ 0x38
 800c206:	1c51      	adds	r1, r2, #1
 800c208:	9119      	str	r1, [sp, #100]	@ 0x64
 800c20a:	7852      	ldrb	r2, [r2, #1]
 800c20c:	2a00      	cmp	r2, #0
 800c20e:	d1c5      	bne.n	800c19c <_strtod_l+0x34>
 800c210:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c212:	9419      	str	r4, [sp, #100]	@ 0x64
 800c214:	2b00      	cmp	r3, #0
 800c216:	f040 8570 	bne.w	800ccfa <_strtod_l+0xb92>
 800c21a:	4652      	mov	r2, sl
 800c21c:	465b      	mov	r3, fp
 800c21e:	e7e5      	b.n	800c1ec <_strtod_l+0x84>
 800c220:	2100      	movs	r1, #0
 800c222:	e7ef      	b.n	800c204 <_strtod_l+0x9c>
 800c224:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c226:	b13a      	cbz	r2, 800c238 <_strtod_l+0xd0>
 800c228:	2135      	movs	r1, #53	@ 0x35
 800c22a:	a81c      	add	r0, sp, #112	@ 0x70
 800c22c:	f7ff ff3a 	bl	800c0a4 <__copybits>
 800c230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c232:	9805      	ldr	r0, [sp, #20]
 800c234:	f7ff fb10 	bl	800b858 <_Bfree>
 800c238:	3e01      	subs	r6, #1
 800c23a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c23c:	2e04      	cmp	r6, #4
 800c23e:	d806      	bhi.n	800c24e <_strtod_l+0xe6>
 800c240:	e8df f006 	tbb	[pc, r6]
 800c244:	201d0314 	.word	0x201d0314
 800c248:	14          	.byte	0x14
 800c249:	00          	.byte	0x00
 800c24a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c24e:	05e1      	lsls	r1, r4, #23
 800c250:	bf48      	it	mi
 800c252:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c256:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c25a:	0d1b      	lsrs	r3, r3, #20
 800c25c:	051b      	lsls	r3, r3, #20
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1bb      	bne.n	800c1da <_strtod_l+0x72>
 800c262:	f7fe fb0f 	bl	800a884 <__errno>
 800c266:	2322      	movs	r3, #34	@ 0x22
 800c268:	6003      	str	r3, [r0, #0]
 800c26a:	e7b6      	b.n	800c1da <_strtod_l+0x72>
 800c26c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c270:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c274:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c278:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c27c:	e7e7      	b.n	800c24e <_strtod_l+0xe6>
 800c27e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c400 <_strtod_l+0x298>
 800c282:	e7e4      	b.n	800c24e <_strtod_l+0xe6>
 800c284:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c288:	f04f 3aff 	mov.w	sl, #4294967295
 800c28c:	e7df      	b.n	800c24e <_strtod_l+0xe6>
 800c28e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	9219      	str	r2, [sp, #100]	@ 0x64
 800c294:	785b      	ldrb	r3, [r3, #1]
 800c296:	2b30      	cmp	r3, #48	@ 0x30
 800c298:	d0f9      	beq.n	800c28e <_strtod_l+0x126>
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d09d      	beq.n	800c1da <_strtod_l+0x72>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	2700      	movs	r7, #0
 800c2a2:	9308      	str	r3, [sp, #32]
 800c2a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c2aa:	46b9      	mov	r9, r7
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c2b0:	7805      	ldrb	r5, [r0, #0]
 800c2b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c2b6:	b2d9      	uxtb	r1, r3
 800c2b8:	2909      	cmp	r1, #9
 800c2ba:	d928      	bls.n	800c30e <_strtod_l+0x1a6>
 800c2bc:	494f      	ldr	r1, [pc, #316]	@ (800c3fc <_strtod_l+0x294>)
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f001 f9a4 	bl	800d60c <strncmp>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d032      	beq.n	800c32e <_strtod_l+0x1c6>
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	462a      	mov	r2, r5
 800c2cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c2ce:	464d      	mov	r5, r9
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2a65      	cmp	r2, #101	@ 0x65
 800c2d4:	d001      	beq.n	800c2da <_strtod_l+0x172>
 800c2d6:	2a45      	cmp	r2, #69	@ 0x45
 800c2d8:	d114      	bne.n	800c304 <_strtod_l+0x19c>
 800c2da:	b91d      	cbnz	r5, 800c2e4 <_strtod_l+0x17c>
 800c2dc:	9a08      	ldr	r2, [sp, #32]
 800c2de:	4302      	orrs	r2, r0
 800c2e0:	d096      	beq.n	800c210 <_strtod_l+0xa8>
 800c2e2:	2500      	movs	r5, #0
 800c2e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c2e6:	1c62      	adds	r2, r4, #1
 800c2e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2ea:	7862      	ldrb	r2, [r4, #1]
 800c2ec:	2a2b      	cmp	r2, #43	@ 0x2b
 800c2ee:	d07a      	beq.n	800c3e6 <_strtod_l+0x27e>
 800c2f0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c2f2:	d07e      	beq.n	800c3f2 <_strtod_l+0x28a>
 800c2f4:	f04f 0c00 	mov.w	ip, #0
 800c2f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c2fc:	2909      	cmp	r1, #9
 800c2fe:	f240 8085 	bls.w	800c40c <_strtod_l+0x2a4>
 800c302:	9419      	str	r4, [sp, #100]	@ 0x64
 800c304:	f04f 0800 	mov.w	r8, #0
 800c308:	e0a5      	b.n	800c456 <_strtod_l+0x2ee>
 800c30a:	2300      	movs	r3, #0
 800c30c:	e7c8      	b.n	800c2a0 <_strtod_l+0x138>
 800c30e:	f1b9 0f08 	cmp.w	r9, #8
 800c312:	bfd8      	it	le
 800c314:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c316:	f100 0001 	add.w	r0, r0, #1
 800c31a:	bfda      	itte	le
 800c31c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c320:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c322:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c326:	f109 0901 	add.w	r9, r9, #1
 800c32a:	9019      	str	r0, [sp, #100]	@ 0x64
 800c32c:	e7bf      	b.n	800c2ae <_strtod_l+0x146>
 800c32e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c330:	1c5a      	adds	r2, r3, #1
 800c332:	9219      	str	r2, [sp, #100]	@ 0x64
 800c334:	785a      	ldrb	r2, [r3, #1]
 800c336:	f1b9 0f00 	cmp.w	r9, #0
 800c33a:	d03b      	beq.n	800c3b4 <_strtod_l+0x24c>
 800c33c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c33e:	464d      	mov	r5, r9
 800c340:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c344:	2b09      	cmp	r3, #9
 800c346:	d912      	bls.n	800c36e <_strtod_l+0x206>
 800c348:	2301      	movs	r3, #1
 800c34a:	e7c2      	b.n	800c2d2 <_strtod_l+0x16a>
 800c34c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c34e:	1c5a      	adds	r2, r3, #1
 800c350:	9219      	str	r2, [sp, #100]	@ 0x64
 800c352:	785a      	ldrb	r2, [r3, #1]
 800c354:	3001      	adds	r0, #1
 800c356:	2a30      	cmp	r2, #48	@ 0x30
 800c358:	d0f8      	beq.n	800c34c <_strtod_l+0x1e4>
 800c35a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c35e:	2b08      	cmp	r3, #8
 800c360:	f200 84d2 	bhi.w	800cd08 <_strtod_l+0xba0>
 800c364:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c366:	900a      	str	r0, [sp, #40]	@ 0x28
 800c368:	2000      	movs	r0, #0
 800c36a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c36c:	4605      	mov	r5, r0
 800c36e:	3a30      	subs	r2, #48	@ 0x30
 800c370:	f100 0301 	add.w	r3, r0, #1
 800c374:	d018      	beq.n	800c3a8 <_strtod_l+0x240>
 800c376:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c378:	4419      	add	r1, r3
 800c37a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c37c:	462e      	mov	r6, r5
 800c37e:	f04f 0e0a 	mov.w	lr, #10
 800c382:	1c71      	adds	r1, r6, #1
 800c384:	eba1 0c05 	sub.w	ip, r1, r5
 800c388:	4563      	cmp	r3, ip
 800c38a:	dc15      	bgt.n	800c3b8 <_strtod_l+0x250>
 800c38c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c390:	182b      	adds	r3, r5, r0
 800c392:	2b08      	cmp	r3, #8
 800c394:	f105 0501 	add.w	r5, r5, #1
 800c398:	4405      	add	r5, r0
 800c39a:	dc1a      	bgt.n	800c3d2 <_strtod_l+0x26a>
 800c39c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c39e:	230a      	movs	r3, #10
 800c3a0:	fb03 2301 	mla	r3, r3, r1, r2
 800c3a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3aa:	1c51      	adds	r1, r2, #1
 800c3ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800c3ae:	7852      	ldrb	r2, [r2, #1]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	e7c5      	b.n	800c340 <_strtod_l+0x1d8>
 800c3b4:	4648      	mov	r0, r9
 800c3b6:	e7ce      	b.n	800c356 <_strtod_l+0x1ee>
 800c3b8:	2e08      	cmp	r6, #8
 800c3ba:	dc05      	bgt.n	800c3c8 <_strtod_l+0x260>
 800c3bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c3be:	fb0e f606 	mul.w	r6, lr, r6
 800c3c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c3c4:	460e      	mov	r6, r1
 800c3c6:	e7dc      	b.n	800c382 <_strtod_l+0x21a>
 800c3c8:	2910      	cmp	r1, #16
 800c3ca:	bfd8      	it	le
 800c3cc:	fb0e f707 	mulle.w	r7, lr, r7
 800c3d0:	e7f8      	b.n	800c3c4 <_strtod_l+0x25c>
 800c3d2:	2b0f      	cmp	r3, #15
 800c3d4:	bfdc      	itt	le
 800c3d6:	230a      	movle	r3, #10
 800c3d8:	fb03 2707 	mlale	r7, r3, r7, r2
 800c3dc:	e7e3      	b.n	800c3a6 <_strtod_l+0x23e>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e77a      	b.n	800c2dc <_strtod_l+0x174>
 800c3e6:	f04f 0c00 	mov.w	ip, #0
 800c3ea:	1ca2      	adds	r2, r4, #2
 800c3ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3ee:	78a2      	ldrb	r2, [r4, #2]
 800c3f0:	e782      	b.n	800c2f8 <_strtod_l+0x190>
 800c3f2:	f04f 0c01 	mov.w	ip, #1
 800c3f6:	e7f8      	b.n	800c3ea <_strtod_l+0x282>
 800c3f8:	0800e944 	.word	0x0800e944
 800c3fc:	0800e7b6 	.word	0x0800e7b6
 800c400:	7ff00000 	.word	0x7ff00000
 800c404:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c406:	1c51      	adds	r1, r2, #1
 800c408:	9119      	str	r1, [sp, #100]	@ 0x64
 800c40a:	7852      	ldrb	r2, [r2, #1]
 800c40c:	2a30      	cmp	r2, #48	@ 0x30
 800c40e:	d0f9      	beq.n	800c404 <_strtod_l+0x29c>
 800c410:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c414:	2908      	cmp	r1, #8
 800c416:	f63f af75 	bhi.w	800c304 <_strtod_l+0x19c>
 800c41a:	3a30      	subs	r2, #48	@ 0x30
 800c41c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c41e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c420:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c422:	f04f 080a 	mov.w	r8, #10
 800c426:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c428:	1c56      	adds	r6, r2, #1
 800c42a:	9619      	str	r6, [sp, #100]	@ 0x64
 800c42c:	7852      	ldrb	r2, [r2, #1]
 800c42e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c432:	f1be 0f09 	cmp.w	lr, #9
 800c436:	d939      	bls.n	800c4ac <_strtod_l+0x344>
 800c438:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c43a:	1a76      	subs	r6, r6, r1
 800c43c:	2e08      	cmp	r6, #8
 800c43e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c442:	dc03      	bgt.n	800c44c <_strtod_l+0x2e4>
 800c444:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c446:	4588      	cmp	r8, r1
 800c448:	bfa8      	it	ge
 800c44a:	4688      	movge	r8, r1
 800c44c:	f1bc 0f00 	cmp.w	ip, #0
 800c450:	d001      	beq.n	800c456 <_strtod_l+0x2ee>
 800c452:	f1c8 0800 	rsb	r8, r8, #0
 800c456:	2d00      	cmp	r5, #0
 800c458:	d14e      	bne.n	800c4f8 <_strtod_l+0x390>
 800c45a:	9908      	ldr	r1, [sp, #32]
 800c45c:	4308      	orrs	r0, r1
 800c45e:	f47f aebc 	bne.w	800c1da <_strtod_l+0x72>
 800c462:	2b00      	cmp	r3, #0
 800c464:	f47f aed4 	bne.w	800c210 <_strtod_l+0xa8>
 800c468:	2a69      	cmp	r2, #105	@ 0x69
 800c46a:	d028      	beq.n	800c4be <_strtod_l+0x356>
 800c46c:	dc25      	bgt.n	800c4ba <_strtod_l+0x352>
 800c46e:	2a49      	cmp	r2, #73	@ 0x49
 800c470:	d025      	beq.n	800c4be <_strtod_l+0x356>
 800c472:	2a4e      	cmp	r2, #78	@ 0x4e
 800c474:	f47f aecc 	bne.w	800c210 <_strtod_l+0xa8>
 800c478:	499a      	ldr	r1, [pc, #616]	@ (800c6e4 <_strtod_l+0x57c>)
 800c47a:	a819      	add	r0, sp, #100	@ 0x64
 800c47c:	f001 fbc4 	bl	800dc08 <__match>
 800c480:	2800      	cmp	r0, #0
 800c482:	f43f aec5 	beq.w	800c210 <_strtod_l+0xa8>
 800c486:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	2b28      	cmp	r3, #40	@ 0x28
 800c48c:	d12e      	bne.n	800c4ec <_strtod_l+0x384>
 800c48e:	4996      	ldr	r1, [pc, #600]	@ (800c6e8 <_strtod_l+0x580>)
 800c490:	aa1c      	add	r2, sp, #112	@ 0x70
 800c492:	a819      	add	r0, sp, #100	@ 0x64
 800c494:	f001 fbcc 	bl	800dc30 <__hexnan>
 800c498:	2805      	cmp	r0, #5
 800c49a:	d127      	bne.n	800c4ec <_strtod_l+0x384>
 800c49c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c49e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c4a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c4a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c4aa:	e696      	b.n	800c1da <_strtod_l+0x72>
 800c4ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4ae:	fb08 2101 	mla	r1, r8, r1, r2
 800c4b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c4b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4b8:	e7b5      	b.n	800c426 <_strtod_l+0x2be>
 800c4ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800c4bc:	e7da      	b.n	800c474 <_strtod_l+0x30c>
 800c4be:	498b      	ldr	r1, [pc, #556]	@ (800c6ec <_strtod_l+0x584>)
 800c4c0:	a819      	add	r0, sp, #100	@ 0x64
 800c4c2:	f001 fba1 	bl	800dc08 <__match>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	f43f aea2 	beq.w	800c210 <_strtod_l+0xa8>
 800c4cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4ce:	4988      	ldr	r1, [pc, #544]	@ (800c6f0 <_strtod_l+0x588>)
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	a819      	add	r0, sp, #100	@ 0x64
 800c4d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c4d6:	f001 fb97 	bl	800dc08 <__match>
 800c4da:	b910      	cbnz	r0, 800c4e2 <_strtod_l+0x37a>
 800c4dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4de:	3301      	adds	r3, #1
 800c4e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c4e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c700 <_strtod_l+0x598>
 800c4e6:	f04f 0a00 	mov.w	sl, #0
 800c4ea:	e676      	b.n	800c1da <_strtod_l+0x72>
 800c4ec:	4881      	ldr	r0, [pc, #516]	@ (800c6f4 <_strtod_l+0x58c>)
 800c4ee:	f001 f8df 	bl	800d6b0 <nan>
 800c4f2:	ec5b ab10 	vmov	sl, fp, d0
 800c4f6:	e670      	b.n	800c1da <_strtod_l+0x72>
 800c4f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c4fc:	eba8 0303 	sub.w	r3, r8, r3
 800c500:	f1b9 0f00 	cmp.w	r9, #0
 800c504:	bf08      	it	eq
 800c506:	46a9      	moveq	r9, r5
 800c508:	2d10      	cmp	r5, #16
 800c50a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c50c:	462c      	mov	r4, r5
 800c50e:	bfa8      	it	ge
 800c510:	2410      	movge	r4, #16
 800c512:	f7f4 f817 	bl	8000544 <__aeabi_ui2d>
 800c516:	2d09      	cmp	r5, #9
 800c518:	4682      	mov	sl, r0
 800c51a:	468b      	mov	fp, r1
 800c51c:	dc13      	bgt.n	800c546 <_strtod_l+0x3de>
 800c51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	f43f ae5a 	beq.w	800c1da <_strtod_l+0x72>
 800c526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c528:	dd78      	ble.n	800c61c <_strtod_l+0x4b4>
 800c52a:	2b16      	cmp	r3, #22
 800c52c:	dc5f      	bgt.n	800c5ee <_strtod_l+0x486>
 800c52e:	4972      	ldr	r1, [pc, #456]	@ (800c6f8 <_strtod_l+0x590>)
 800c530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c534:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c538:	4652      	mov	r2, sl
 800c53a:	465b      	mov	r3, fp
 800c53c:	f7f4 f87c 	bl	8000638 <__aeabi_dmul>
 800c540:	4682      	mov	sl, r0
 800c542:	468b      	mov	fp, r1
 800c544:	e649      	b.n	800c1da <_strtod_l+0x72>
 800c546:	4b6c      	ldr	r3, [pc, #432]	@ (800c6f8 <_strtod_l+0x590>)
 800c548:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c54c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c550:	f7f4 f872 	bl	8000638 <__aeabi_dmul>
 800c554:	4682      	mov	sl, r0
 800c556:	4638      	mov	r0, r7
 800c558:	468b      	mov	fp, r1
 800c55a:	f7f3 fff3 	bl	8000544 <__aeabi_ui2d>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4650      	mov	r0, sl
 800c564:	4659      	mov	r1, fp
 800c566:	f7f3 feb1 	bl	80002cc <__adddf3>
 800c56a:	2d0f      	cmp	r5, #15
 800c56c:	4682      	mov	sl, r0
 800c56e:	468b      	mov	fp, r1
 800c570:	ddd5      	ble.n	800c51e <_strtod_l+0x3b6>
 800c572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c574:	1b2c      	subs	r4, r5, r4
 800c576:	441c      	add	r4, r3
 800c578:	2c00      	cmp	r4, #0
 800c57a:	f340 8093 	ble.w	800c6a4 <_strtod_l+0x53c>
 800c57e:	f014 030f 	ands.w	r3, r4, #15
 800c582:	d00a      	beq.n	800c59a <_strtod_l+0x432>
 800c584:	495c      	ldr	r1, [pc, #368]	@ (800c6f8 <_strtod_l+0x590>)
 800c586:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c58a:	4652      	mov	r2, sl
 800c58c:	465b      	mov	r3, fp
 800c58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c592:	f7f4 f851 	bl	8000638 <__aeabi_dmul>
 800c596:	4682      	mov	sl, r0
 800c598:	468b      	mov	fp, r1
 800c59a:	f034 040f 	bics.w	r4, r4, #15
 800c59e:	d073      	beq.n	800c688 <_strtod_l+0x520>
 800c5a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c5a4:	dd49      	ble.n	800c63a <_strtod_l+0x4d2>
 800c5a6:	2400      	movs	r4, #0
 800c5a8:	46a0      	mov	r8, r4
 800c5aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c5ac:	46a1      	mov	r9, r4
 800c5ae:	9a05      	ldr	r2, [sp, #20]
 800c5b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c700 <_strtod_l+0x598>
 800c5b4:	2322      	movs	r3, #34	@ 0x22
 800c5b6:	6013      	str	r3, [r2, #0]
 800c5b8:	f04f 0a00 	mov.w	sl, #0
 800c5bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f43f ae0b 	beq.w	800c1da <_strtod_l+0x72>
 800c5c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5c6:	9805      	ldr	r0, [sp, #20]
 800c5c8:	f7ff f946 	bl	800b858 <_Bfree>
 800c5cc:	9805      	ldr	r0, [sp, #20]
 800c5ce:	4649      	mov	r1, r9
 800c5d0:	f7ff f942 	bl	800b858 <_Bfree>
 800c5d4:	9805      	ldr	r0, [sp, #20]
 800c5d6:	4641      	mov	r1, r8
 800c5d8:	f7ff f93e 	bl	800b858 <_Bfree>
 800c5dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5de:	9805      	ldr	r0, [sp, #20]
 800c5e0:	f7ff f93a 	bl	800b858 <_Bfree>
 800c5e4:	9805      	ldr	r0, [sp, #20]
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	f7ff f936 	bl	800b858 <_Bfree>
 800c5ec:	e5f5      	b.n	800c1da <_strtod_l+0x72>
 800c5ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	dbbc      	blt.n	800c572 <_strtod_l+0x40a>
 800c5f8:	4c3f      	ldr	r4, [pc, #252]	@ (800c6f8 <_strtod_l+0x590>)
 800c5fa:	f1c5 050f 	rsb	r5, r5, #15
 800c5fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c602:	4652      	mov	r2, sl
 800c604:	465b      	mov	r3, fp
 800c606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c60a:	f7f4 f815 	bl	8000638 <__aeabi_dmul>
 800c60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c610:	1b5d      	subs	r5, r3, r5
 800c612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c616:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c61a:	e78f      	b.n	800c53c <_strtod_l+0x3d4>
 800c61c:	3316      	adds	r3, #22
 800c61e:	dba8      	blt.n	800c572 <_strtod_l+0x40a>
 800c620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c622:	eba3 0808 	sub.w	r8, r3, r8
 800c626:	4b34      	ldr	r3, [pc, #208]	@ (800c6f8 <_strtod_l+0x590>)
 800c628:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c62c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c630:	4650      	mov	r0, sl
 800c632:	4659      	mov	r1, fp
 800c634:	f7f4 f92a 	bl	800088c <__aeabi_ddiv>
 800c638:	e782      	b.n	800c540 <_strtod_l+0x3d8>
 800c63a:	2300      	movs	r3, #0
 800c63c:	4f2f      	ldr	r7, [pc, #188]	@ (800c6fc <_strtod_l+0x594>)
 800c63e:	1124      	asrs	r4, r4, #4
 800c640:	4650      	mov	r0, sl
 800c642:	4659      	mov	r1, fp
 800c644:	461e      	mov	r6, r3
 800c646:	2c01      	cmp	r4, #1
 800c648:	dc21      	bgt.n	800c68e <_strtod_l+0x526>
 800c64a:	b10b      	cbz	r3, 800c650 <_strtod_l+0x4e8>
 800c64c:	4682      	mov	sl, r0
 800c64e:	468b      	mov	fp, r1
 800c650:	492a      	ldr	r1, [pc, #168]	@ (800c6fc <_strtod_l+0x594>)
 800c652:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c656:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c65a:	4652      	mov	r2, sl
 800c65c:	465b      	mov	r3, fp
 800c65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c662:	f7f3 ffe9 	bl	8000638 <__aeabi_dmul>
 800c666:	4b26      	ldr	r3, [pc, #152]	@ (800c700 <_strtod_l+0x598>)
 800c668:	460a      	mov	r2, r1
 800c66a:	400b      	ands	r3, r1
 800c66c:	4925      	ldr	r1, [pc, #148]	@ (800c704 <_strtod_l+0x59c>)
 800c66e:	428b      	cmp	r3, r1
 800c670:	4682      	mov	sl, r0
 800c672:	d898      	bhi.n	800c5a6 <_strtod_l+0x43e>
 800c674:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c678:	428b      	cmp	r3, r1
 800c67a:	bf86      	itte	hi
 800c67c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c708 <_strtod_l+0x5a0>
 800c680:	f04f 3aff 	movhi.w	sl, #4294967295
 800c684:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c688:	2300      	movs	r3, #0
 800c68a:	9308      	str	r3, [sp, #32]
 800c68c:	e076      	b.n	800c77c <_strtod_l+0x614>
 800c68e:	07e2      	lsls	r2, r4, #31
 800c690:	d504      	bpl.n	800c69c <_strtod_l+0x534>
 800c692:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c696:	f7f3 ffcf 	bl	8000638 <__aeabi_dmul>
 800c69a:	2301      	movs	r3, #1
 800c69c:	3601      	adds	r6, #1
 800c69e:	1064      	asrs	r4, r4, #1
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	e7d0      	b.n	800c646 <_strtod_l+0x4de>
 800c6a4:	d0f0      	beq.n	800c688 <_strtod_l+0x520>
 800c6a6:	4264      	negs	r4, r4
 800c6a8:	f014 020f 	ands.w	r2, r4, #15
 800c6ac:	d00a      	beq.n	800c6c4 <_strtod_l+0x55c>
 800c6ae:	4b12      	ldr	r3, [pc, #72]	@ (800c6f8 <_strtod_l+0x590>)
 800c6b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6b4:	4650      	mov	r0, sl
 800c6b6:	4659      	mov	r1, fp
 800c6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6bc:	f7f4 f8e6 	bl	800088c <__aeabi_ddiv>
 800c6c0:	4682      	mov	sl, r0
 800c6c2:	468b      	mov	fp, r1
 800c6c4:	1124      	asrs	r4, r4, #4
 800c6c6:	d0df      	beq.n	800c688 <_strtod_l+0x520>
 800c6c8:	2c1f      	cmp	r4, #31
 800c6ca:	dd1f      	ble.n	800c70c <_strtod_l+0x5a4>
 800c6cc:	2400      	movs	r4, #0
 800c6ce:	46a0      	mov	r8, r4
 800c6d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c6d2:	46a1      	mov	r9, r4
 800c6d4:	9a05      	ldr	r2, [sp, #20]
 800c6d6:	2322      	movs	r3, #34	@ 0x22
 800c6d8:	f04f 0a00 	mov.w	sl, #0
 800c6dc:	f04f 0b00 	mov.w	fp, #0
 800c6e0:	6013      	str	r3, [r2, #0]
 800c6e2:	e76b      	b.n	800c5bc <_strtod_l+0x454>
 800c6e4:	0800e60e 	.word	0x0800e60e
 800c6e8:	0800e930 	.word	0x0800e930
 800c6ec:	0800e606 	.word	0x0800e606
 800c6f0:	0800e6ea 	.word	0x0800e6ea
 800c6f4:	0800e6e6 	.word	0x0800e6e6
 800c6f8:	0800e868 	.word	0x0800e868
 800c6fc:	0800e840 	.word	0x0800e840
 800c700:	7ff00000 	.word	0x7ff00000
 800c704:	7ca00000 	.word	0x7ca00000
 800c708:	7fefffff 	.word	0x7fefffff
 800c70c:	f014 0310 	ands.w	r3, r4, #16
 800c710:	bf18      	it	ne
 800c712:	236a      	movne	r3, #106	@ 0x6a
 800c714:	4ea9      	ldr	r6, [pc, #676]	@ (800c9bc <_strtod_l+0x854>)
 800c716:	9308      	str	r3, [sp, #32]
 800c718:	4650      	mov	r0, sl
 800c71a:	4659      	mov	r1, fp
 800c71c:	2300      	movs	r3, #0
 800c71e:	07e7      	lsls	r7, r4, #31
 800c720:	d504      	bpl.n	800c72c <_strtod_l+0x5c4>
 800c722:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c726:	f7f3 ff87 	bl	8000638 <__aeabi_dmul>
 800c72a:	2301      	movs	r3, #1
 800c72c:	1064      	asrs	r4, r4, #1
 800c72e:	f106 0608 	add.w	r6, r6, #8
 800c732:	d1f4      	bne.n	800c71e <_strtod_l+0x5b6>
 800c734:	b10b      	cbz	r3, 800c73a <_strtod_l+0x5d2>
 800c736:	4682      	mov	sl, r0
 800c738:	468b      	mov	fp, r1
 800c73a:	9b08      	ldr	r3, [sp, #32]
 800c73c:	b1b3      	cbz	r3, 800c76c <_strtod_l+0x604>
 800c73e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c742:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c746:	2b00      	cmp	r3, #0
 800c748:	4659      	mov	r1, fp
 800c74a:	dd0f      	ble.n	800c76c <_strtod_l+0x604>
 800c74c:	2b1f      	cmp	r3, #31
 800c74e:	dd56      	ble.n	800c7fe <_strtod_l+0x696>
 800c750:	2b34      	cmp	r3, #52	@ 0x34
 800c752:	bfde      	ittt	le
 800c754:	f04f 33ff 	movle.w	r3, #4294967295
 800c758:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c75c:	4093      	lslle	r3, r2
 800c75e:	f04f 0a00 	mov.w	sl, #0
 800c762:	bfcc      	ite	gt
 800c764:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c768:	ea03 0b01 	andle.w	fp, r3, r1
 800c76c:	2200      	movs	r2, #0
 800c76e:	2300      	movs	r3, #0
 800c770:	4650      	mov	r0, sl
 800c772:	4659      	mov	r1, fp
 800c774:	f7f4 f9c8 	bl	8000b08 <__aeabi_dcmpeq>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d1a7      	bne.n	800c6cc <_strtod_l+0x564>
 800c77c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c782:	9805      	ldr	r0, [sp, #20]
 800c784:	462b      	mov	r3, r5
 800c786:	464a      	mov	r2, r9
 800c788:	f7ff f8ce 	bl	800b928 <__s2b>
 800c78c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c78e:	2800      	cmp	r0, #0
 800c790:	f43f af09 	beq.w	800c5a6 <_strtod_l+0x43e>
 800c794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c798:	2a00      	cmp	r2, #0
 800c79a:	eba3 0308 	sub.w	r3, r3, r8
 800c79e:	bfa8      	it	ge
 800c7a0:	2300      	movge	r3, #0
 800c7a2:	9312      	str	r3, [sp, #72]	@ 0x48
 800c7a4:	2400      	movs	r4, #0
 800c7a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c7aa:	9316      	str	r3, [sp, #88]	@ 0x58
 800c7ac:	46a0      	mov	r8, r4
 800c7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7b0:	9805      	ldr	r0, [sp, #20]
 800c7b2:	6859      	ldr	r1, [r3, #4]
 800c7b4:	f7ff f810 	bl	800b7d8 <_Balloc>
 800c7b8:	4681      	mov	r9, r0
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	f43f aef7 	beq.w	800c5ae <_strtod_l+0x446>
 800c7c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7c2:	691a      	ldr	r2, [r3, #16]
 800c7c4:	3202      	adds	r2, #2
 800c7c6:	f103 010c 	add.w	r1, r3, #12
 800c7ca:	0092      	lsls	r2, r2, #2
 800c7cc:	300c      	adds	r0, #12
 800c7ce:	f000 ff61 	bl	800d694 <memcpy>
 800c7d2:	ec4b ab10 	vmov	d0, sl, fp
 800c7d6:	9805      	ldr	r0, [sp, #20]
 800c7d8:	aa1c      	add	r2, sp, #112	@ 0x70
 800c7da:	a91b      	add	r1, sp, #108	@ 0x6c
 800c7dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c7e0:	f7ff fbd6 	bl	800bf90 <__d2b>
 800c7e4:	901a      	str	r0, [sp, #104]	@ 0x68
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f43f aee1 	beq.w	800c5ae <_strtod_l+0x446>
 800c7ec:	9805      	ldr	r0, [sp, #20]
 800c7ee:	2101      	movs	r1, #1
 800c7f0:	f7ff f930 	bl	800ba54 <__i2b>
 800c7f4:	4680      	mov	r8, r0
 800c7f6:	b948      	cbnz	r0, 800c80c <_strtod_l+0x6a4>
 800c7f8:	f04f 0800 	mov.w	r8, #0
 800c7fc:	e6d7      	b.n	800c5ae <_strtod_l+0x446>
 800c7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c802:	fa02 f303 	lsl.w	r3, r2, r3
 800c806:	ea03 0a0a 	and.w	sl, r3, sl
 800c80a:	e7af      	b.n	800c76c <_strtod_l+0x604>
 800c80c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c80e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c810:	2d00      	cmp	r5, #0
 800c812:	bfab      	itete	ge
 800c814:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c816:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c818:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c81a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c81c:	bfac      	ite	ge
 800c81e:	18ef      	addge	r7, r5, r3
 800c820:	1b5e      	sublt	r6, r3, r5
 800c822:	9b08      	ldr	r3, [sp, #32]
 800c824:	1aed      	subs	r5, r5, r3
 800c826:	4415      	add	r5, r2
 800c828:	4b65      	ldr	r3, [pc, #404]	@ (800c9c0 <_strtod_l+0x858>)
 800c82a:	3d01      	subs	r5, #1
 800c82c:	429d      	cmp	r5, r3
 800c82e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c832:	da50      	bge.n	800c8d6 <_strtod_l+0x76e>
 800c834:	1b5b      	subs	r3, r3, r5
 800c836:	2b1f      	cmp	r3, #31
 800c838:	eba2 0203 	sub.w	r2, r2, r3
 800c83c:	f04f 0101 	mov.w	r1, #1
 800c840:	dc3d      	bgt.n	800c8be <_strtod_l+0x756>
 800c842:	fa01 f303 	lsl.w	r3, r1, r3
 800c846:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c848:	2300      	movs	r3, #0
 800c84a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c84c:	18bd      	adds	r5, r7, r2
 800c84e:	9b08      	ldr	r3, [sp, #32]
 800c850:	42af      	cmp	r7, r5
 800c852:	4416      	add	r6, r2
 800c854:	441e      	add	r6, r3
 800c856:	463b      	mov	r3, r7
 800c858:	bfa8      	it	ge
 800c85a:	462b      	movge	r3, r5
 800c85c:	42b3      	cmp	r3, r6
 800c85e:	bfa8      	it	ge
 800c860:	4633      	movge	r3, r6
 800c862:	2b00      	cmp	r3, #0
 800c864:	bfc2      	ittt	gt
 800c866:	1aed      	subgt	r5, r5, r3
 800c868:	1af6      	subgt	r6, r6, r3
 800c86a:	1aff      	subgt	r7, r7, r3
 800c86c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c86e:	2b00      	cmp	r3, #0
 800c870:	dd16      	ble.n	800c8a0 <_strtod_l+0x738>
 800c872:	4641      	mov	r1, r8
 800c874:	9805      	ldr	r0, [sp, #20]
 800c876:	461a      	mov	r2, r3
 800c878:	f7ff f9a4 	bl	800bbc4 <__pow5mult>
 800c87c:	4680      	mov	r8, r0
 800c87e:	2800      	cmp	r0, #0
 800c880:	d0ba      	beq.n	800c7f8 <_strtod_l+0x690>
 800c882:	4601      	mov	r1, r0
 800c884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c886:	9805      	ldr	r0, [sp, #20]
 800c888:	f7ff f8fa 	bl	800ba80 <__multiply>
 800c88c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c88e:	2800      	cmp	r0, #0
 800c890:	f43f ae8d 	beq.w	800c5ae <_strtod_l+0x446>
 800c894:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c896:	9805      	ldr	r0, [sp, #20]
 800c898:	f7fe ffde 	bl	800b858 <_Bfree>
 800c89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c89e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8a0:	2d00      	cmp	r5, #0
 800c8a2:	dc1d      	bgt.n	800c8e0 <_strtod_l+0x778>
 800c8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	dd23      	ble.n	800c8f2 <_strtod_l+0x78a>
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c8ae:	9805      	ldr	r0, [sp, #20]
 800c8b0:	f7ff f988 	bl	800bbc4 <__pow5mult>
 800c8b4:	4681      	mov	r9, r0
 800c8b6:	b9e0      	cbnz	r0, 800c8f2 <_strtod_l+0x78a>
 800c8b8:	f04f 0900 	mov.w	r9, #0
 800c8bc:	e677      	b.n	800c5ae <_strtod_l+0x446>
 800c8be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c8c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c8c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c8ca:	35e2      	adds	r5, #226	@ 0xe2
 800c8cc:	fa01 f305 	lsl.w	r3, r1, r5
 800c8d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c8d4:	e7ba      	b.n	800c84c <_strtod_l+0x6e4>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8da:	2301      	movs	r3, #1
 800c8dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8de:	e7b5      	b.n	800c84c <_strtod_l+0x6e4>
 800c8e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8e2:	9805      	ldr	r0, [sp, #20]
 800c8e4:	462a      	mov	r2, r5
 800c8e6:	f7ff f9c7 	bl	800bc78 <__lshift>
 800c8ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d1d9      	bne.n	800c8a4 <_strtod_l+0x73c>
 800c8f0:	e65d      	b.n	800c5ae <_strtod_l+0x446>
 800c8f2:	2e00      	cmp	r6, #0
 800c8f4:	dd07      	ble.n	800c906 <_strtod_l+0x79e>
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	9805      	ldr	r0, [sp, #20]
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	f7ff f9bc 	bl	800bc78 <__lshift>
 800c900:	4681      	mov	r9, r0
 800c902:	2800      	cmp	r0, #0
 800c904:	d0d8      	beq.n	800c8b8 <_strtod_l+0x750>
 800c906:	2f00      	cmp	r7, #0
 800c908:	dd08      	ble.n	800c91c <_strtod_l+0x7b4>
 800c90a:	4641      	mov	r1, r8
 800c90c:	9805      	ldr	r0, [sp, #20]
 800c90e:	463a      	mov	r2, r7
 800c910:	f7ff f9b2 	bl	800bc78 <__lshift>
 800c914:	4680      	mov	r8, r0
 800c916:	2800      	cmp	r0, #0
 800c918:	f43f ae49 	beq.w	800c5ae <_strtod_l+0x446>
 800c91c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c91e:	9805      	ldr	r0, [sp, #20]
 800c920:	464a      	mov	r2, r9
 800c922:	f7ff fa31 	bl	800bd88 <__mdiff>
 800c926:	4604      	mov	r4, r0
 800c928:	2800      	cmp	r0, #0
 800c92a:	f43f ae40 	beq.w	800c5ae <_strtod_l+0x446>
 800c92e:	68c3      	ldr	r3, [r0, #12]
 800c930:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c932:	2300      	movs	r3, #0
 800c934:	60c3      	str	r3, [r0, #12]
 800c936:	4641      	mov	r1, r8
 800c938:	f7ff fa0a 	bl	800bd50 <__mcmp>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	da45      	bge.n	800c9cc <_strtod_l+0x864>
 800c940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c942:	ea53 030a 	orrs.w	r3, r3, sl
 800c946:	d16b      	bne.n	800ca20 <_strtod_l+0x8b8>
 800c948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d167      	bne.n	800ca20 <_strtod_l+0x8b8>
 800c950:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c954:	0d1b      	lsrs	r3, r3, #20
 800c956:	051b      	lsls	r3, r3, #20
 800c958:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c95c:	d960      	bls.n	800ca20 <_strtod_l+0x8b8>
 800c95e:	6963      	ldr	r3, [r4, #20]
 800c960:	b913      	cbnz	r3, 800c968 <_strtod_l+0x800>
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	2b01      	cmp	r3, #1
 800c966:	dd5b      	ble.n	800ca20 <_strtod_l+0x8b8>
 800c968:	4621      	mov	r1, r4
 800c96a:	2201      	movs	r2, #1
 800c96c:	9805      	ldr	r0, [sp, #20]
 800c96e:	f7ff f983 	bl	800bc78 <__lshift>
 800c972:	4641      	mov	r1, r8
 800c974:	4604      	mov	r4, r0
 800c976:	f7ff f9eb 	bl	800bd50 <__mcmp>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	dd50      	ble.n	800ca20 <_strtod_l+0x8b8>
 800c97e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c982:	9a08      	ldr	r2, [sp, #32]
 800c984:	0d1b      	lsrs	r3, r3, #20
 800c986:	051b      	lsls	r3, r3, #20
 800c988:	2a00      	cmp	r2, #0
 800c98a:	d06a      	beq.n	800ca62 <_strtod_l+0x8fa>
 800c98c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c990:	d867      	bhi.n	800ca62 <_strtod_l+0x8fa>
 800c992:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c996:	f67f ae9d 	bls.w	800c6d4 <_strtod_l+0x56c>
 800c99a:	4b0a      	ldr	r3, [pc, #40]	@ (800c9c4 <_strtod_l+0x85c>)
 800c99c:	4650      	mov	r0, sl
 800c99e:	4659      	mov	r1, fp
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f7f3 fe49 	bl	8000638 <__aeabi_dmul>
 800c9a6:	4b08      	ldr	r3, [pc, #32]	@ (800c9c8 <_strtod_l+0x860>)
 800c9a8:	400b      	ands	r3, r1
 800c9aa:	4682      	mov	sl, r0
 800c9ac:	468b      	mov	fp, r1
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f47f ae08 	bne.w	800c5c4 <_strtod_l+0x45c>
 800c9b4:	9a05      	ldr	r2, [sp, #20]
 800c9b6:	2322      	movs	r3, #34	@ 0x22
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	e603      	b.n	800c5c4 <_strtod_l+0x45c>
 800c9bc:	0800e958 	.word	0x0800e958
 800c9c0:	fffffc02 	.word	0xfffffc02
 800c9c4:	39500000 	.word	0x39500000
 800c9c8:	7ff00000 	.word	0x7ff00000
 800c9cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c9d0:	d165      	bne.n	800ca9e <_strtod_l+0x936>
 800c9d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c9d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9d8:	b35a      	cbz	r2, 800ca32 <_strtod_l+0x8ca>
 800c9da:	4a9f      	ldr	r2, [pc, #636]	@ (800cc58 <_strtod_l+0xaf0>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d12b      	bne.n	800ca38 <_strtod_l+0x8d0>
 800c9e0:	9b08      	ldr	r3, [sp, #32]
 800c9e2:	4651      	mov	r1, sl
 800c9e4:	b303      	cbz	r3, 800ca28 <_strtod_l+0x8c0>
 800c9e6:	4b9d      	ldr	r3, [pc, #628]	@ (800cc5c <_strtod_l+0xaf4>)
 800c9e8:	465a      	mov	r2, fp
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f4:	d81b      	bhi.n	800ca2e <_strtod_l+0x8c6>
 800c9f6:	0d1b      	lsrs	r3, r3, #20
 800c9f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800ca00:	4299      	cmp	r1, r3
 800ca02:	d119      	bne.n	800ca38 <_strtod_l+0x8d0>
 800ca04:	4b96      	ldr	r3, [pc, #600]	@ (800cc60 <_strtod_l+0xaf8>)
 800ca06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d102      	bne.n	800ca12 <_strtod_l+0x8aa>
 800ca0c:	3101      	adds	r1, #1
 800ca0e:	f43f adce 	beq.w	800c5ae <_strtod_l+0x446>
 800ca12:	4b92      	ldr	r3, [pc, #584]	@ (800cc5c <_strtod_l+0xaf4>)
 800ca14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca16:	401a      	ands	r2, r3
 800ca18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ca1c:	f04f 0a00 	mov.w	sl, #0
 800ca20:	9b08      	ldr	r3, [sp, #32]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1b9      	bne.n	800c99a <_strtod_l+0x832>
 800ca26:	e5cd      	b.n	800c5c4 <_strtod_l+0x45c>
 800ca28:	f04f 33ff 	mov.w	r3, #4294967295
 800ca2c:	e7e8      	b.n	800ca00 <_strtod_l+0x898>
 800ca2e:	4613      	mov	r3, r2
 800ca30:	e7e6      	b.n	800ca00 <_strtod_l+0x898>
 800ca32:	ea53 030a 	orrs.w	r3, r3, sl
 800ca36:	d0a2      	beq.n	800c97e <_strtod_l+0x816>
 800ca38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca3a:	b1db      	cbz	r3, 800ca74 <_strtod_l+0x90c>
 800ca3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca3e:	4213      	tst	r3, r2
 800ca40:	d0ee      	beq.n	800ca20 <_strtod_l+0x8b8>
 800ca42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca44:	9a08      	ldr	r2, [sp, #32]
 800ca46:	4650      	mov	r0, sl
 800ca48:	4659      	mov	r1, fp
 800ca4a:	b1bb      	cbz	r3, 800ca7c <_strtod_l+0x914>
 800ca4c:	f7ff fb6e 	bl	800c12c <sulp>
 800ca50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca54:	ec53 2b10 	vmov	r2, r3, d0
 800ca58:	f7f3 fc38 	bl	80002cc <__adddf3>
 800ca5c:	4682      	mov	sl, r0
 800ca5e:	468b      	mov	fp, r1
 800ca60:	e7de      	b.n	800ca20 <_strtod_l+0x8b8>
 800ca62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ca66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca6e:	f04f 3aff 	mov.w	sl, #4294967295
 800ca72:	e7d5      	b.n	800ca20 <_strtod_l+0x8b8>
 800ca74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca76:	ea13 0f0a 	tst.w	r3, sl
 800ca7a:	e7e1      	b.n	800ca40 <_strtod_l+0x8d8>
 800ca7c:	f7ff fb56 	bl	800c12c <sulp>
 800ca80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca84:	ec53 2b10 	vmov	r2, r3, d0
 800ca88:	f7f3 fc1e 	bl	80002c8 <__aeabi_dsub>
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	2300      	movs	r3, #0
 800ca90:	4682      	mov	sl, r0
 800ca92:	468b      	mov	fp, r1
 800ca94:	f7f4 f838 	bl	8000b08 <__aeabi_dcmpeq>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	d0c1      	beq.n	800ca20 <_strtod_l+0x8b8>
 800ca9c:	e61a      	b.n	800c6d4 <_strtod_l+0x56c>
 800ca9e:	4641      	mov	r1, r8
 800caa0:	4620      	mov	r0, r4
 800caa2:	f7ff facd 	bl	800c040 <__ratio>
 800caa6:	ec57 6b10 	vmov	r6, r7, d0
 800caaa:	2200      	movs	r2, #0
 800caac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cab0:	4630      	mov	r0, r6
 800cab2:	4639      	mov	r1, r7
 800cab4:	f7f4 f83c 	bl	8000b30 <__aeabi_dcmple>
 800cab8:	2800      	cmp	r0, #0
 800caba:	d06f      	beq.n	800cb9c <_strtod_l+0xa34>
 800cabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d17a      	bne.n	800cbb8 <_strtod_l+0xa50>
 800cac2:	f1ba 0f00 	cmp.w	sl, #0
 800cac6:	d158      	bne.n	800cb7a <_strtod_l+0xa12>
 800cac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d15a      	bne.n	800cb88 <_strtod_l+0xa20>
 800cad2:	4b64      	ldr	r3, [pc, #400]	@ (800cc64 <_strtod_l+0xafc>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	4630      	mov	r0, r6
 800cad8:	4639      	mov	r1, r7
 800cada:	f7f4 f81f 	bl	8000b1c <__aeabi_dcmplt>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d159      	bne.n	800cb96 <_strtod_l+0xa2e>
 800cae2:	4630      	mov	r0, r6
 800cae4:	4639      	mov	r1, r7
 800cae6:	4b60      	ldr	r3, [pc, #384]	@ (800cc68 <_strtod_l+0xb00>)
 800cae8:	2200      	movs	r2, #0
 800caea:	f7f3 fda5 	bl	8000638 <__aeabi_dmul>
 800caee:	4606      	mov	r6, r0
 800caf0:	460f      	mov	r7, r1
 800caf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800caf6:	9606      	str	r6, [sp, #24]
 800caf8:	9307      	str	r3, [sp, #28]
 800cafa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cafe:	4d57      	ldr	r5, [pc, #348]	@ (800cc5c <_strtod_l+0xaf4>)
 800cb00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cb04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb06:	401d      	ands	r5, r3
 800cb08:	4b58      	ldr	r3, [pc, #352]	@ (800cc6c <_strtod_l+0xb04>)
 800cb0a:	429d      	cmp	r5, r3
 800cb0c:	f040 80b2 	bne.w	800cc74 <_strtod_l+0xb0c>
 800cb10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cb16:	ec4b ab10 	vmov	d0, sl, fp
 800cb1a:	f7ff f9c9 	bl	800beb0 <__ulp>
 800cb1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb22:	ec51 0b10 	vmov	r0, r1, d0
 800cb26:	f7f3 fd87 	bl	8000638 <__aeabi_dmul>
 800cb2a:	4652      	mov	r2, sl
 800cb2c:	465b      	mov	r3, fp
 800cb2e:	f7f3 fbcd 	bl	80002cc <__adddf3>
 800cb32:	460b      	mov	r3, r1
 800cb34:	4949      	ldr	r1, [pc, #292]	@ (800cc5c <_strtod_l+0xaf4>)
 800cb36:	4a4e      	ldr	r2, [pc, #312]	@ (800cc70 <_strtod_l+0xb08>)
 800cb38:	4019      	ands	r1, r3
 800cb3a:	4291      	cmp	r1, r2
 800cb3c:	4682      	mov	sl, r0
 800cb3e:	d942      	bls.n	800cbc6 <_strtod_l+0xa5e>
 800cb40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb42:	4b47      	ldr	r3, [pc, #284]	@ (800cc60 <_strtod_l+0xaf8>)
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d103      	bne.n	800cb50 <_strtod_l+0x9e8>
 800cb48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	f43f ad2f 	beq.w	800c5ae <_strtod_l+0x446>
 800cb50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cc60 <_strtod_l+0xaf8>
 800cb54:	f04f 3aff 	mov.w	sl, #4294967295
 800cb58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb5a:	9805      	ldr	r0, [sp, #20]
 800cb5c:	f7fe fe7c 	bl	800b858 <_Bfree>
 800cb60:	9805      	ldr	r0, [sp, #20]
 800cb62:	4649      	mov	r1, r9
 800cb64:	f7fe fe78 	bl	800b858 <_Bfree>
 800cb68:	9805      	ldr	r0, [sp, #20]
 800cb6a:	4641      	mov	r1, r8
 800cb6c:	f7fe fe74 	bl	800b858 <_Bfree>
 800cb70:	9805      	ldr	r0, [sp, #20]
 800cb72:	4621      	mov	r1, r4
 800cb74:	f7fe fe70 	bl	800b858 <_Bfree>
 800cb78:	e619      	b.n	800c7ae <_strtod_l+0x646>
 800cb7a:	f1ba 0f01 	cmp.w	sl, #1
 800cb7e:	d103      	bne.n	800cb88 <_strtod_l+0xa20>
 800cb80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f43f ada6 	beq.w	800c6d4 <_strtod_l+0x56c>
 800cb88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cc38 <_strtod_l+0xad0>
 800cb8c:	4f35      	ldr	r7, [pc, #212]	@ (800cc64 <_strtod_l+0xafc>)
 800cb8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb92:	2600      	movs	r6, #0
 800cb94:	e7b1      	b.n	800cafa <_strtod_l+0x992>
 800cb96:	4f34      	ldr	r7, [pc, #208]	@ (800cc68 <_strtod_l+0xb00>)
 800cb98:	2600      	movs	r6, #0
 800cb9a:	e7aa      	b.n	800caf2 <_strtod_l+0x98a>
 800cb9c:	4b32      	ldr	r3, [pc, #200]	@ (800cc68 <_strtod_l+0xb00>)
 800cb9e:	4630      	mov	r0, r6
 800cba0:	4639      	mov	r1, r7
 800cba2:	2200      	movs	r2, #0
 800cba4:	f7f3 fd48 	bl	8000638 <__aeabi_dmul>
 800cba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbaa:	4606      	mov	r6, r0
 800cbac:	460f      	mov	r7, r1
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d09f      	beq.n	800caf2 <_strtod_l+0x98a>
 800cbb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cbb6:	e7a0      	b.n	800cafa <_strtod_l+0x992>
 800cbb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cc40 <_strtod_l+0xad8>
 800cbbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cbc0:	ec57 6b17 	vmov	r6, r7, d7
 800cbc4:	e799      	b.n	800cafa <_strtod_l+0x992>
 800cbc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cbca:	9b08      	ldr	r3, [sp, #32]
 800cbcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1c1      	bne.n	800cb58 <_strtod_l+0x9f0>
 800cbd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cbd8:	0d1b      	lsrs	r3, r3, #20
 800cbda:	051b      	lsls	r3, r3, #20
 800cbdc:	429d      	cmp	r5, r3
 800cbde:	d1bb      	bne.n	800cb58 <_strtod_l+0x9f0>
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	4639      	mov	r1, r7
 800cbe4:	f7f4 f8d8 	bl	8000d98 <__aeabi_d2lz>
 800cbe8:	f7f3 fcf8 	bl	80005dc <__aeabi_l2d>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	f7f3 fb68 	bl	80002c8 <__aeabi_dsub>
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cc00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc06:	ea46 060a 	orr.w	r6, r6, sl
 800cc0a:	431e      	orrs	r6, r3
 800cc0c:	d06f      	beq.n	800ccee <_strtod_l+0xb86>
 800cc0e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cc48 <_strtod_l+0xae0>)
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	f7f3 ff82 	bl	8000b1c <__aeabi_dcmplt>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	f47f acd3 	bne.w	800c5c4 <_strtod_l+0x45c>
 800cc1e:	a30c      	add	r3, pc, #48	@ (adr r3, 800cc50 <_strtod_l+0xae8>)
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc28:	f7f3 ff96 	bl	8000b58 <__aeabi_dcmpgt>
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	d093      	beq.n	800cb58 <_strtod_l+0x9f0>
 800cc30:	e4c8      	b.n	800c5c4 <_strtod_l+0x45c>
 800cc32:	bf00      	nop
 800cc34:	f3af 8000 	nop.w
 800cc38:	00000000 	.word	0x00000000
 800cc3c:	bff00000 	.word	0xbff00000
 800cc40:	00000000 	.word	0x00000000
 800cc44:	3ff00000 	.word	0x3ff00000
 800cc48:	94a03595 	.word	0x94a03595
 800cc4c:	3fdfffff 	.word	0x3fdfffff
 800cc50:	35afe535 	.word	0x35afe535
 800cc54:	3fe00000 	.word	0x3fe00000
 800cc58:	000fffff 	.word	0x000fffff
 800cc5c:	7ff00000 	.word	0x7ff00000
 800cc60:	7fefffff 	.word	0x7fefffff
 800cc64:	3ff00000 	.word	0x3ff00000
 800cc68:	3fe00000 	.word	0x3fe00000
 800cc6c:	7fe00000 	.word	0x7fe00000
 800cc70:	7c9fffff 	.word	0x7c9fffff
 800cc74:	9b08      	ldr	r3, [sp, #32]
 800cc76:	b323      	cbz	r3, 800ccc2 <_strtod_l+0xb5a>
 800cc78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cc7c:	d821      	bhi.n	800ccc2 <_strtod_l+0xb5a>
 800cc7e:	a328      	add	r3, pc, #160	@ (adr r3, 800cd20 <_strtod_l+0xbb8>)
 800cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc84:	4630      	mov	r0, r6
 800cc86:	4639      	mov	r1, r7
 800cc88:	f7f3 ff52 	bl	8000b30 <__aeabi_dcmple>
 800cc8c:	b1a0      	cbz	r0, 800ccb8 <_strtod_l+0xb50>
 800cc8e:	4639      	mov	r1, r7
 800cc90:	4630      	mov	r0, r6
 800cc92:	f7f3 ffa9 	bl	8000be8 <__aeabi_d2uiz>
 800cc96:	2801      	cmp	r0, #1
 800cc98:	bf38      	it	cc
 800cc9a:	2001      	movcc	r0, #1
 800cc9c:	f7f3 fc52 	bl	8000544 <__aeabi_ui2d>
 800cca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cca2:	4606      	mov	r6, r0
 800cca4:	460f      	mov	r7, r1
 800cca6:	b9fb      	cbnz	r3, 800cce8 <_strtod_l+0xb80>
 800cca8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ccac:	9014      	str	r0, [sp, #80]	@ 0x50
 800ccae:	9315      	str	r3, [sp, #84]	@ 0x54
 800ccb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ccb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ccb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ccba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ccbe:	1b5b      	subs	r3, r3, r5
 800ccc0:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ccc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ccca:	f7ff f8f1 	bl	800beb0 <__ulp>
 800ccce:	4650      	mov	r0, sl
 800ccd0:	ec53 2b10 	vmov	r2, r3, d0
 800ccd4:	4659      	mov	r1, fp
 800ccd6:	f7f3 fcaf 	bl	8000638 <__aeabi_dmul>
 800ccda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ccde:	f7f3 faf5 	bl	80002cc <__adddf3>
 800cce2:	4682      	mov	sl, r0
 800cce4:	468b      	mov	fp, r1
 800cce6:	e770      	b.n	800cbca <_strtod_l+0xa62>
 800cce8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ccec:	e7e0      	b.n	800ccb0 <_strtod_l+0xb48>
 800ccee:	a30e      	add	r3, pc, #56	@ (adr r3, 800cd28 <_strtod_l+0xbc0>)
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	f7f3 ff12 	bl	8000b1c <__aeabi_dcmplt>
 800ccf8:	e798      	b.n	800cc2c <_strtod_l+0xac4>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	930e      	str	r3, [sp, #56]	@ 0x38
 800ccfe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cd00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd02:	6013      	str	r3, [r2, #0]
 800cd04:	f7ff ba6d 	b.w	800c1e2 <_strtod_l+0x7a>
 800cd08:	2a65      	cmp	r2, #101	@ 0x65
 800cd0a:	f43f ab68 	beq.w	800c3de <_strtod_l+0x276>
 800cd0e:	2a45      	cmp	r2, #69	@ 0x45
 800cd10:	f43f ab65 	beq.w	800c3de <_strtod_l+0x276>
 800cd14:	2301      	movs	r3, #1
 800cd16:	f7ff bba0 	b.w	800c45a <_strtod_l+0x2f2>
 800cd1a:	bf00      	nop
 800cd1c:	f3af 8000 	nop.w
 800cd20:	ffc00000 	.word	0xffc00000
 800cd24:	41dfffff 	.word	0x41dfffff
 800cd28:	94a03595 	.word	0x94a03595
 800cd2c:	3fcfffff 	.word	0x3fcfffff

0800cd30 <_strtod_r>:
 800cd30:	4b01      	ldr	r3, [pc, #4]	@ (800cd38 <_strtod_r+0x8>)
 800cd32:	f7ff ba19 	b.w	800c168 <_strtod_l>
 800cd36:	bf00      	nop
 800cd38:	20000090 	.word	0x20000090

0800cd3c <__ssputs_r>:
 800cd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd40:	688e      	ldr	r6, [r1, #8]
 800cd42:	461f      	mov	r7, r3
 800cd44:	42be      	cmp	r6, r7
 800cd46:	680b      	ldr	r3, [r1, #0]
 800cd48:	4682      	mov	sl, r0
 800cd4a:	460c      	mov	r4, r1
 800cd4c:	4690      	mov	r8, r2
 800cd4e:	d82d      	bhi.n	800cdac <__ssputs_r+0x70>
 800cd50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd58:	d026      	beq.n	800cda8 <__ssputs_r+0x6c>
 800cd5a:	6965      	ldr	r5, [r4, #20]
 800cd5c:	6909      	ldr	r1, [r1, #16]
 800cd5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd62:	eba3 0901 	sub.w	r9, r3, r1
 800cd66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd6a:	1c7b      	adds	r3, r7, #1
 800cd6c:	444b      	add	r3, r9
 800cd6e:	106d      	asrs	r5, r5, #1
 800cd70:	429d      	cmp	r5, r3
 800cd72:	bf38      	it	cc
 800cd74:	461d      	movcc	r5, r3
 800cd76:	0553      	lsls	r3, r2, #21
 800cd78:	d527      	bpl.n	800cdca <__ssputs_r+0x8e>
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7fe fca0 	bl	800b6c0 <_malloc_r>
 800cd80:	4606      	mov	r6, r0
 800cd82:	b360      	cbz	r0, 800cdde <__ssputs_r+0xa2>
 800cd84:	6921      	ldr	r1, [r4, #16]
 800cd86:	464a      	mov	r2, r9
 800cd88:	f000 fc84 	bl	800d694 <memcpy>
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd96:	81a3      	strh	r3, [r4, #12]
 800cd98:	6126      	str	r6, [r4, #16]
 800cd9a:	6165      	str	r5, [r4, #20]
 800cd9c:	444e      	add	r6, r9
 800cd9e:	eba5 0509 	sub.w	r5, r5, r9
 800cda2:	6026      	str	r6, [r4, #0]
 800cda4:	60a5      	str	r5, [r4, #8]
 800cda6:	463e      	mov	r6, r7
 800cda8:	42be      	cmp	r6, r7
 800cdaa:	d900      	bls.n	800cdae <__ssputs_r+0x72>
 800cdac:	463e      	mov	r6, r7
 800cdae:	6820      	ldr	r0, [r4, #0]
 800cdb0:	4632      	mov	r2, r6
 800cdb2:	4641      	mov	r1, r8
 800cdb4:	f000 fc10 	bl	800d5d8 <memmove>
 800cdb8:	68a3      	ldr	r3, [r4, #8]
 800cdba:	1b9b      	subs	r3, r3, r6
 800cdbc:	60a3      	str	r3, [r4, #8]
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	4433      	add	r3, r6
 800cdc2:	6023      	str	r3, [r4, #0]
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdca:	462a      	mov	r2, r5
 800cdcc:	f000 ffdd 	bl	800dd8a <_realloc_r>
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d1e0      	bne.n	800cd98 <__ssputs_r+0x5c>
 800cdd6:	6921      	ldr	r1, [r4, #16]
 800cdd8:	4650      	mov	r0, sl
 800cdda:	f7fe fbfd 	bl	800b5d8 <_free_r>
 800cdde:	230c      	movs	r3, #12
 800cde0:	f8ca 3000 	str.w	r3, [sl]
 800cde4:	89a3      	ldrh	r3, [r4, #12]
 800cde6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdea:	81a3      	strh	r3, [r4, #12]
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	e7e9      	b.n	800cdc6 <__ssputs_r+0x8a>
	...

0800cdf4 <_svfiprintf_r>:
 800cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf8:	4698      	mov	r8, r3
 800cdfa:	898b      	ldrh	r3, [r1, #12]
 800cdfc:	061b      	lsls	r3, r3, #24
 800cdfe:	b09d      	sub	sp, #116	@ 0x74
 800ce00:	4607      	mov	r7, r0
 800ce02:	460d      	mov	r5, r1
 800ce04:	4614      	mov	r4, r2
 800ce06:	d510      	bpl.n	800ce2a <_svfiprintf_r+0x36>
 800ce08:	690b      	ldr	r3, [r1, #16]
 800ce0a:	b973      	cbnz	r3, 800ce2a <_svfiprintf_r+0x36>
 800ce0c:	2140      	movs	r1, #64	@ 0x40
 800ce0e:	f7fe fc57 	bl	800b6c0 <_malloc_r>
 800ce12:	6028      	str	r0, [r5, #0]
 800ce14:	6128      	str	r0, [r5, #16]
 800ce16:	b930      	cbnz	r0, 800ce26 <_svfiprintf_r+0x32>
 800ce18:	230c      	movs	r3, #12
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce20:	b01d      	add	sp, #116	@ 0x74
 800ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce26:	2340      	movs	r3, #64	@ 0x40
 800ce28:	616b      	str	r3, [r5, #20]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce2e:	2320      	movs	r3, #32
 800ce30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce38:	2330      	movs	r3, #48	@ 0x30
 800ce3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cfd8 <_svfiprintf_r+0x1e4>
 800ce3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce42:	f04f 0901 	mov.w	r9, #1
 800ce46:	4623      	mov	r3, r4
 800ce48:	469a      	mov	sl, r3
 800ce4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce4e:	b10a      	cbz	r2, 800ce54 <_svfiprintf_r+0x60>
 800ce50:	2a25      	cmp	r2, #37	@ 0x25
 800ce52:	d1f9      	bne.n	800ce48 <_svfiprintf_r+0x54>
 800ce54:	ebba 0b04 	subs.w	fp, sl, r4
 800ce58:	d00b      	beq.n	800ce72 <_svfiprintf_r+0x7e>
 800ce5a:	465b      	mov	r3, fp
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	4629      	mov	r1, r5
 800ce60:	4638      	mov	r0, r7
 800ce62:	f7ff ff6b 	bl	800cd3c <__ssputs_r>
 800ce66:	3001      	adds	r0, #1
 800ce68:	f000 80a7 	beq.w	800cfba <_svfiprintf_r+0x1c6>
 800ce6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce6e:	445a      	add	r2, fp
 800ce70:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce72:	f89a 3000 	ldrb.w	r3, [sl]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 809f 	beq.w	800cfba <_svfiprintf_r+0x1c6>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce86:	f10a 0a01 	add.w	sl, sl, #1
 800ce8a:	9304      	str	r3, [sp, #16]
 800ce8c:	9307      	str	r3, [sp, #28]
 800ce8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce92:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce94:	4654      	mov	r4, sl
 800ce96:	2205      	movs	r2, #5
 800ce98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce9c:	484e      	ldr	r0, [pc, #312]	@ (800cfd8 <_svfiprintf_r+0x1e4>)
 800ce9e:	f7f3 f9b7 	bl	8000210 <memchr>
 800cea2:	9a04      	ldr	r2, [sp, #16]
 800cea4:	b9d8      	cbnz	r0, 800cede <_svfiprintf_r+0xea>
 800cea6:	06d0      	lsls	r0, r2, #27
 800cea8:	bf44      	itt	mi
 800ceaa:	2320      	movmi	r3, #32
 800ceac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ceb0:	0711      	lsls	r1, r2, #28
 800ceb2:	bf44      	itt	mi
 800ceb4:	232b      	movmi	r3, #43	@ 0x2b
 800ceb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ceba:	f89a 3000 	ldrb.w	r3, [sl]
 800cebe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cec0:	d015      	beq.n	800ceee <_svfiprintf_r+0xfa>
 800cec2:	9a07      	ldr	r2, [sp, #28]
 800cec4:	4654      	mov	r4, sl
 800cec6:	2000      	movs	r0, #0
 800cec8:	f04f 0c0a 	mov.w	ip, #10
 800cecc:	4621      	mov	r1, r4
 800cece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ced2:	3b30      	subs	r3, #48	@ 0x30
 800ced4:	2b09      	cmp	r3, #9
 800ced6:	d94b      	bls.n	800cf70 <_svfiprintf_r+0x17c>
 800ced8:	b1b0      	cbz	r0, 800cf08 <_svfiprintf_r+0x114>
 800ceda:	9207      	str	r2, [sp, #28]
 800cedc:	e014      	b.n	800cf08 <_svfiprintf_r+0x114>
 800cede:	eba0 0308 	sub.w	r3, r0, r8
 800cee2:	fa09 f303 	lsl.w	r3, r9, r3
 800cee6:	4313      	orrs	r3, r2
 800cee8:	9304      	str	r3, [sp, #16]
 800ceea:	46a2      	mov	sl, r4
 800ceec:	e7d2      	b.n	800ce94 <_svfiprintf_r+0xa0>
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	1d19      	adds	r1, r3, #4
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	9103      	str	r1, [sp, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	bfbb      	ittet	lt
 800cefa:	425b      	neglt	r3, r3
 800cefc:	f042 0202 	orrlt.w	r2, r2, #2
 800cf00:	9307      	strge	r3, [sp, #28]
 800cf02:	9307      	strlt	r3, [sp, #28]
 800cf04:	bfb8      	it	lt
 800cf06:	9204      	strlt	r2, [sp, #16]
 800cf08:	7823      	ldrb	r3, [r4, #0]
 800cf0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf0c:	d10a      	bne.n	800cf24 <_svfiprintf_r+0x130>
 800cf0e:	7863      	ldrb	r3, [r4, #1]
 800cf10:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf12:	d132      	bne.n	800cf7a <_svfiprintf_r+0x186>
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	1d1a      	adds	r2, r3, #4
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	9203      	str	r2, [sp, #12]
 800cf1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf20:	3402      	adds	r4, #2
 800cf22:	9305      	str	r3, [sp, #20]
 800cf24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cfe8 <_svfiprintf_r+0x1f4>
 800cf28:	7821      	ldrb	r1, [r4, #0]
 800cf2a:	2203      	movs	r2, #3
 800cf2c:	4650      	mov	r0, sl
 800cf2e:	f7f3 f96f 	bl	8000210 <memchr>
 800cf32:	b138      	cbz	r0, 800cf44 <_svfiprintf_r+0x150>
 800cf34:	9b04      	ldr	r3, [sp, #16]
 800cf36:	eba0 000a 	sub.w	r0, r0, sl
 800cf3a:	2240      	movs	r2, #64	@ 0x40
 800cf3c:	4082      	lsls	r2, r0
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	3401      	adds	r4, #1
 800cf42:	9304      	str	r3, [sp, #16]
 800cf44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf48:	4824      	ldr	r0, [pc, #144]	@ (800cfdc <_svfiprintf_r+0x1e8>)
 800cf4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf4e:	2206      	movs	r2, #6
 800cf50:	f7f3 f95e 	bl	8000210 <memchr>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d036      	beq.n	800cfc6 <_svfiprintf_r+0x1d2>
 800cf58:	4b21      	ldr	r3, [pc, #132]	@ (800cfe0 <_svfiprintf_r+0x1ec>)
 800cf5a:	bb1b      	cbnz	r3, 800cfa4 <_svfiprintf_r+0x1b0>
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	3307      	adds	r3, #7
 800cf60:	f023 0307 	bic.w	r3, r3, #7
 800cf64:	3308      	adds	r3, #8
 800cf66:	9303      	str	r3, [sp, #12]
 800cf68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf6a:	4433      	add	r3, r6
 800cf6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf6e:	e76a      	b.n	800ce46 <_svfiprintf_r+0x52>
 800cf70:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf74:	460c      	mov	r4, r1
 800cf76:	2001      	movs	r0, #1
 800cf78:	e7a8      	b.n	800cecc <_svfiprintf_r+0xd8>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	3401      	adds	r4, #1
 800cf7e:	9305      	str	r3, [sp, #20]
 800cf80:	4619      	mov	r1, r3
 800cf82:	f04f 0c0a 	mov.w	ip, #10
 800cf86:	4620      	mov	r0, r4
 800cf88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf8c:	3a30      	subs	r2, #48	@ 0x30
 800cf8e:	2a09      	cmp	r2, #9
 800cf90:	d903      	bls.n	800cf9a <_svfiprintf_r+0x1a6>
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0c6      	beq.n	800cf24 <_svfiprintf_r+0x130>
 800cf96:	9105      	str	r1, [sp, #20]
 800cf98:	e7c4      	b.n	800cf24 <_svfiprintf_r+0x130>
 800cf9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e7f0      	b.n	800cf86 <_svfiprintf_r+0x192>
 800cfa4:	ab03      	add	r3, sp, #12
 800cfa6:	9300      	str	r3, [sp, #0]
 800cfa8:	462a      	mov	r2, r5
 800cfaa:	4b0e      	ldr	r3, [pc, #56]	@ (800cfe4 <_svfiprintf_r+0x1f0>)
 800cfac:	a904      	add	r1, sp, #16
 800cfae:	4638      	mov	r0, r7
 800cfb0:	f7fc fbd2 	bl	8009758 <_printf_float>
 800cfb4:	1c42      	adds	r2, r0, #1
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	d1d6      	bne.n	800cf68 <_svfiprintf_r+0x174>
 800cfba:	89ab      	ldrh	r3, [r5, #12]
 800cfbc:	065b      	lsls	r3, r3, #25
 800cfbe:	f53f af2d 	bmi.w	800ce1c <_svfiprintf_r+0x28>
 800cfc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfc4:	e72c      	b.n	800ce20 <_svfiprintf_r+0x2c>
 800cfc6:	ab03      	add	r3, sp, #12
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	462a      	mov	r2, r5
 800cfcc:	4b05      	ldr	r3, [pc, #20]	@ (800cfe4 <_svfiprintf_r+0x1f0>)
 800cfce:	a904      	add	r1, sp, #16
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	f7fc fe59 	bl	8009c88 <_printf_i>
 800cfd6:	e7ed      	b.n	800cfb4 <_svfiprintf_r+0x1c0>
 800cfd8:	0800e7b8 	.word	0x0800e7b8
 800cfdc:	0800e7c2 	.word	0x0800e7c2
 800cfe0:	08009759 	.word	0x08009759
 800cfe4:	0800cd3d 	.word	0x0800cd3d
 800cfe8:	0800e7be 	.word	0x0800e7be

0800cfec <__sfputc_r>:
 800cfec:	6893      	ldr	r3, [r2, #8]
 800cfee:	3b01      	subs	r3, #1
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	b410      	push	{r4}
 800cff4:	6093      	str	r3, [r2, #8]
 800cff6:	da08      	bge.n	800d00a <__sfputc_r+0x1e>
 800cff8:	6994      	ldr	r4, [r2, #24]
 800cffa:	42a3      	cmp	r3, r4
 800cffc:	db01      	blt.n	800d002 <__sfputc_r+0x16>
 800cffe:	290a      	cmp	r1, #10
 800d000:	d103      	bne.n	800d00a <__sfputc_r+0x1e>
 800d002:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d006:	f000 ba53 	b.w	800d4b0 <__swbuf_r>
 800d00a:	6813      	ldr	r3, [r2, #0]
 800d00c:	1c58      	adds	r0, r3, #1
 800d00e:	6010      	str	r0, [r2, #0]
 800d010:	7019      	strb	r1, [r3, #0]
 800d012:	4608      	mov	r0, r1
 800d014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <__sfputs_r>:
 800d01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01c:	4606      	mov	r6, r0
 800d01e:	460f      	mov	r7, r1
 800d020:	4614      	mov	r4, r2
 800d022:	18d5      	adds	r5, r2, r3
 800d024:	42ac      	cmp	r4, r5
 800d026:	d101      	bne.n	800d02c <__sfputs_r+0x12>
 800d028:	2000      	movs	r0, #0
 800d02a:	e007      	b.n	800d03c <__sfputs_r+0x22>
 800d02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d030:	463a      	mov	r2, r7
 800d032:	4630      	mov	r0, r6
 800d034:	f7ff ffda 	bl	800cfec <__sfputc_r>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d1f3      	bne.n	800d024 <__sfputs_r+0xa>
 800d03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d040 <_vfiprintf_r>:
 800d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	460d      	mov	r5, r1
 800d046:	b09d      	sub	sp, #116	@ 0x74
 800d048:	4614      	mov	r4, r2
 800d04a:	4698      	mov	r8, r3
 800d04c:	4606      	mov	r6, r0
 800d04e:	b118      	cbz	r0, 800d058 <_vfiprintf_r+0x18>
 800d050:	6a03      	ldr	r3, [r0, #32]
 800d052:	b90b      	cbnz	r3, 800d058 <_vfiprintf_r+0x18>
 800d054:	f7fd f9d0 	bl	800a3f8 <__sinit>
 800d058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d05a:	07d9      	lsls	r1, r3, #31
 800d05c:	d405      	bmi.n	800d06a <_vfiprintf_r+0x2a>
 800d05e:	89ab      	ldrh	r3, [r5, #12]
 800d060:	059a      	lsls	r2, r3, #22
 800d062:	d402      	bmi.n	800d06a <_vfiprintf_r+0x2a>
 800d064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d066:	f7fd fc38 	bl	800a8da <__retarget_lock_acquire_recursive>
 800d06a:	89ab      	ldrh	r3, [r5, #12]
 800d06c:	071b      	lsls	r3, r3, #28
 800d06e:	d501      	bpl.n	800d074 <_vfiprintf_r+0x34>
 800d070:	692b      	ldr	r3, [r5, #16]
 800d072:	b99b      	cbnz	r3, 800d09c <_vfiprintf_r+0x5c>
 800d074:	4629      	mov	r1, r5
 800d076:	4630      	mov	r0, r6
 800d078:	f000 fa58 	bl	800d52c <__swsetup_r>
 800d07c:	b170      	cbz	r0, 800d09c <_vfiprintf_r+0x5c>
 800d07e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d080:	07dc      	lsls	r4, r3, #31
 800d082:	d504      	bpl.n	800d08e <_vfiprintf_r+0x4e>
 800d084:	f04f 30ff 	mov.w	r0, #4294967295
 800d088:	b01d      	add	sp, #116	@ 0x74
 800d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08e:	89ab      	ldrh	r3, [r5, #12]
 800d090:	0598      	lsls	r0, r3, #22
 800d092:	d4f7      	bmi.n	800d084 <_vfiprintf_r+0x44>
 800d094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d096:	f7fd fc21 	bl	800a8dc <__retarget_lock_release_recursive>
 800d09a:	e7f3      	b.n	800d084 <_vfiprintf_r+0x44>
 800d09c:	2300      	movs	r3, #0
 800d09e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0a0:	2320      	movs	r3, #32
 800d0a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0aa:	2330      	movs	r3, #48	@ 0x30
 800d0ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d25c <_vfiprintf_r+0x21c>
 800d0b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0b4:	f04f 0901 	mov.w	r9, #1
 800d0b8:	4623      	mov	r3, r4
 800d0ba:	469a      	mov	sl, r3
 800d0bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0c0:	b10a      	cbz	r2, 800d0c6 <_vfiprintf_r+0x86>
 800d0c2:	2a25      	cmp	r2, #37	@ 0x25
 800d0c4:	d1f9      	bne.n	800d0ba <_vfiprintf_r+0x7a>
 800d0c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d0ca:	d00b      	beq.n	800d0e4 <_vfiprintf_r+0xa4>
 800d0cc:	465b      	mov	r3, fp
 800d0ce:	4622      	mov	r2, r4
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f7ff ffa1 	bl	800d01a <__sfputs_r>
 800d0d8:	3001      	adds	r0, #1
 800d0da:	f000 80a7 	beq.w	800d22c <_vfiprintf_r+0x1ec>
 800d0de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0e0:	445a      	add	r2, fp
 800d0e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 809f 	beq.w	800d22c <_vfiprintf_r+0x1ec>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0f8:	f10a 0a01 	add.w	sl, sl, #1
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	9307      	str	r3, [sp, #28]
 800d100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d104:	931a      	str	r3, [sp, #104]	@ 0x68
 800d106:	4654      	mov	r4, sl
 800d108:	2205      	movs	r2, #5
 800d10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d10e:	4853      	ldr	r0, [pc, #332]	@ (800d25c <_vfiprintf_r+0x21c>)
 800d110:	f7f3 f87e 	bl	8000210 <memchr>
 800d114:	9a04      	ldr	r2, [sp, #16]
 800d116:	b9d8      	cbnz	r0, 800d150 <_vfiprintf_r+0x110>
 800d118:	06d1      	lsls	r1, r2, #27
 800d11a:	bf44      	itt	mi
 800d11c:	2320      	movmi	r3, #32
 800d11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d122:	0713      	lsls	r3, r2, #28
 800d124:	bf44      	itt	mi
 800d126:	232b      	movmi	r3, #43	@ 0x2b
 800d128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d12c:	f89a 3000 	ldrb.w	r3, [sl]
 800d130:	2b2a      	cmp	r3, #42	@ 0x2a
 800d132:	d015      	beq.n	800d160 <_vfiprintf_r+0x120>
 800d134:	9a07      	ldr	r2, [sp, #28]
 800d136:	4654      	mov	r4, sl
 800d138:	2000      	movs	r0, #0
 800d13a:	f04f 0c0a 	mov.w	ip, #10
 800d13e:	4621      	mov	r1, r4
 800d140:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d144:	3b30      	subs	r3, #48	@ 0x30
 800d146:	2b09      	cmp	r3, #9
 800d148:	d94b      	bls.n	800d1e2 <_vfiprintf_r+0x1a2>
 800d14a:	b1b0      	cbz	r0, 800d17a <_vfiprintf_r+0x13a>
 800d14c:	9207      	str	r2, [sp, #28]
 800d14e:	e014      	b.n	800d17a <_vfiprintf_r+0x13a>
 800d150:	eba0 0308 	sub.w	r3, r0, r8
 800d154:	fa09 f303 	lsl.w	r3, r9, r3
 800d158:	4313      	orrs	r3, r2
 800d15a:	9304      	str	r3, [sp, #16]
 800d15c:	46a2      	mov	sl, r4
 800d15e:	e7d2      	b.n	800d106 <_vfiprintf_r+0xc6>
 800d160:	9b03      	ldr	r3, [sp, #12]
 800d162:	1d19      	adds	r1, r3, #4
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	9103      	str	r1, [sp, #12]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	bfbb      	ittet	lt
 800d16c:	425b      	neglt	r3, r3
 800d16e:	f042 0202 	orrlt.w	r2, r2, #2
 800d172:	9307      	strge	r3, [sp, #28]
 800d174:	9307      	strlt	r3, [sp, #28]
 800d176:	bfb8      	it	lt
 800d178:	9204      	strlt	r2, [sp, #16]
 800d17a:	7823      	ldrb	r3, [r4, #0]
 800d17c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d17e:	d10a      	bne.n	800d196 <_vfiprintf_r+0x156>
 800d180:	7863      	ldrb	r3, [r4, #1]
 800d182:	2b2a      	cmp	r3, #42	@ 0x2a
 800d184:	d132      	bne.n	800d1ec <_vfiprintf_r+0x1ac>
 800d186:	9b03      	ldr	r3, [sp, #12]
 800d188:	1d1a      	adds	r2, r3, #4
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	9203      	str	r2, [sp, #12]
 800d18e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d192:	3402      	adds	r4, #2
 800d194:	9305      	str	r3, [sp, #20]
 800d196:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d26c <_vfiprintf_r+0x22c>
 800d19a:	7821      	ldrb	r1, [r4, #0]
 800d19c:	2203      	movs	r2, #3
 800d19e:	4650      	mov	r0, sl
 800d1a0:	f7f3 f836 	bl	8000210 <memchr>
 800d1a4:	b138      	cbz	r0, 800d1b6 <_vfiprintf_r+0x176>
 800d1a6:	9b04      	ldr	r3, [sp, #16]
 800d1a8:	eba0 000a 	sub.w	r0, r0, sl
 800d1ac:	2240      	movs	r2, #64	@ 0x40
 800d1ae:	4082      	lsls	r2, r0
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	3401      	adds	r4, #1
 800d1b4:	9304      	str	r3, [sp, #16]
 800d1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ba:	4829      	ldr	r0, [pc, #164]	@ (800d260 <_vfiprintf_r+0x220>)
 800d1bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d1c0:	2206      	movs	r2, #6
 800d1c2:	f7f3 f825 	bl	8000210 <memchr>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d03f      	beq.n	800d24a <_vfiprintf_r+0x20a>
 800d1ca:	4b26      	ldr	r3, [pc, #152]	@ (800d264 <_vfiprintf_r+0x224>)
 800d1cc:	bb1b      	cbnz	r3, 800d216 <_vfiprintf_r+0x1d6>
 800d1ce:	9b03      	ldr	r3, [sp, #12]
 800d1d0:	3307      	adds	r3, #7
 800d1d2:	f023 0307 	bic.w	r3, r3, #7
 800d1d6:	3308      	adds	r3, #8
 800d1d8:	9303      	str	r3, [sp, #12]
 800d1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1dc:	443b      	add	r3, r7
 800d1de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1e0:	e76a      	b.n	800d0b8 <_vfiprintf_r+0x78>
 800d1e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	2001      	movs	r0, #1
 800d1ea:	e7a8      	b.n	800d13e <_vfiprintf_r+0xfe>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	3401      	adds	r4, #1
 800d1f0:	9305      	str	r3, [sp, #20]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	f04f 0c0a 	mov.w	ip, #10
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1fe:	3a30      	subs	r2, #48	@ 0x30
 800d200:	2a09      	cmp	r2, #9
 800d202:	d903      	bls.n	800d20c <_vfiprintf_r+0x1cc>
 800d204:	2b00      	cmp	r3, #0
 800d206:	d0c6      	beq.n	800d196 <_vfiprintf_r+0x156>
 800d208:	9105      	str	r1, [sp, #20]
 800d20a:	e7c4      	b.n	800d196 <_vfiprintf_r+0x156>
 800d20c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d210:	4604      	mov	r4, r0
 800d212:	2301      	movs	r3, #1
 800d214:	e7f0      	b.n	800d1f8 <_vfiprintf_r+0x1b8>
 800d216:	ab03      	add	r3, sp, #12
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	462a      	mov	r2, r5
 800d21c:	4b12      	ldr	r3, [pc, #72]	@ (800d268 <_vfiprintf_r+0x228>)
 800d21e:	a904      	add	r1, sp, #16
 800d220:	4630      	mov	r0, r6
 800d222:	f7fc fa99 	bl	8009758 <_printf_float>
 800d226:	4607      	mov	r7, r0
 800d228:	1c78      	adds	r0, r7, #1
 800d22a:	d1d6      	bne.n	800d1da <_vfiprintf_r+0x19a>
 800d22c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d22e:	07d9      	lsls	r1, r3, #31
 800d230:	d405      	bmi.n	800d23e <_vfiprintf_r+0x1fe>
 800d232:	89ab      	ldrh	r3, [r5, #12]
 800d234:	059a      	lsls	r2, r3, #22
 800d236:	d402      	bmi.n	800d23e <_vfiprintf_r+0x1fe>
 800d238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d23a:	f7fd fb4f 	bl	800a8dc <__retarget_lock_release_recursive>
 800d23e:	89ab      	ldrh	r3, [r5, #12]
 800d240:	065b      	lsls	r3, r3, #25
 800d242:	f53f af1f 	bmi.w	800d084 <_vfiprintf_r+0x44>
 800d246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d248:	e71e      	b.n	800d088 <_vfiprintf_r+0x48>
 800d24a:	ab03      	add	r3, sp, #12
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	462a      	mov	r2, r5
 800d250:	4b05      	ldr	r3, [pc, #20]	@ (800d268 <_vfiprintf_r+0x228>)
 800d252:	a904      	add	r1, sp, #16
 800d254:	4630      	mov	r0, r6
 800d256:	f7fc fd17 	bl	8009c88 <_printf_i>
 800d25a:	e7e4      	b.n	800d226 <_vfiprintf_r+0x1e6>
 800d25c:	0800e7b8 	.word	0x0800e7b8
 800d260:	0800e7c2 	.word	0x0800e7c2
 800d264:	08009759 	.word	0x08009759
 800d268:	0800d01b 	.word	0x0800d01b
 800d26c:	0800e7be 	.word	0x0800e7be

0800d270 <__sflush_r>:
 800d270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d278:	0716      	lsls	r6, r2, #28
 800d27a:	4605      	mov	r5, r0
 800d27c:	460c      	mov	r4, r1
 800d27e:	d454      	bmi.n	800d32a <__sflush_r+0xba>
 800d280:	684b      	ldr	r3, [r1, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	dc02      	bgt.n	800d28c <__sflush_r+0x1c>
 800d286:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d288:	2b00      	cmp	r3, #0
 800d28a:	dd48      	ble.n	800d31e <__sflush_r+0xae>
 800d28c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d28e:	2e00      	cmp	r6, #0
 800d290:	d045      	beq.n	800d31e <__sflush_r+0xae>
 800d292:	2300      	movs	r3, #0
 800d294:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d298:	682f      	ldr	r7, [r5, #0]
 800d29a:	6a21      	ldr	r1, [r4, #32]
 800d29c:	602b      	str	r3, [r5, #0]
 800d29e:	d030      	beq.n	800d302 <__sflush_r+0x92>
 800d2a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d2a2:	89a3      	ldrh	r3, [r4, #12]
 800d2a4:	0759      	lsls	r1, r3, #29
 800d2a6:	d505      	bpl.n	800d2b4 <__sflush_r+0x44>
 800d2a8:	6863      	ldr	r3, [r4, #4]
 800d2aa:	1ad2      	subs	r2, r2, r3
 800d2ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2ae:	b10b      	cbz	r3, 800d2b4 <__sflush_r+0x44>
 800d2b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d2b2:	1ad2      	subs	r2, r2, r3
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2b8:	6a21      	ldr	r1, [r4, #32]
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	47b0      	blx	r6
 800d2be:	1c43      	adds	r3, r0, #1
 800d2c0:	89a3      	ldrh	r3, [r4, #12]
 800d2c2:	d106      	bne.n	800d2d2 <__sflush_r+0x62>
 800d2c4:	6829      	ldr	r1, [r5, #0]
 800d2c6:	291d      	cmp	r1, #29
 800d2c8:	d82b      	bhi.n	800d322 <__sflush_r+0xb2>
 800d2ca:	4a2a      	ldr	r2, [pc, #168]	@ (800d374 <__sflush_r+0x104>)
 800d2cc:	40ca      	lsrs	r2, r1
 800d2ce:	07d6      	lsls	r6, r2, #31
 800d2d0:	d527      	bpl.n	800d322 <__sflush_r+0xb2>
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	6062      	str	r2, [r4, #4]
 800d2d6:	04d9      	lsls	r1, r3, #19
 800d2d8:	6922      	ldr	r2, [r4, #16]
 800d2da:	6022      	str	r2, [r4, #0]
 800d2dc:	d504      	bpl.n	800d2e8 <__sflush_r+0x78>
 800d2de:	1c42      	adds	r2, r0, #1
 800d2e0:	d101      	bne.n	800d2e6 <__sflush_r+0x76>
 800d2e2:	682b      	ldr	r3, [r5, #0]
 800d2e4:	b903      	cbnz	r3, 800d2e8 <__sflush_r+0x78>
 800d2e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2ea:	602f      	str	r7, [r5, #0]
 800d2ec:	b1b9      	cbz	r1, 800d31e <__sflush_r+0xae>
 800d2ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2f2:	4299      	cmp	r1, r3
 800d2f4:	d002      	beq.n	800d2fc <__sflush_r+0x8c>
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	f7fe f96e 	bl	800b5d8 <_free_r>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800d300:	e00d      	b.n	800d31e <__sflush_r+0xae>
 800d302:	2301      	movs	r3, #1
 800d304:	4628      	mov	r0, r5
 800d306:	47b0      	blx	r6
 800d308:	4602      	mov	r2, r0
 800d30a:	1c50      	adds	r0, r2, #1
 800d30c:	d1c9      	bne.n	800d2a2 <__sflush_r+0x32>
 800d30e:	682b      	ldr	r3, [r5, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d0c6      	beq.n	800d2a2 <__sflush_r+0x32>
 800d314:	2b1d      	cmp	r3, #29
 800d316:	d001      	beq.n	800d31c <__sflush_r+0xac>
 800d318:	2b16      	cmp	r3, #22
 800d31a:	d11e      	bne.n	800d35a <__sflush_r+0xea>
 800d31c:	602f      	str	r7, [r5, #0]
 800d31e:	2000      	movs	r0, #0
 800d320:	e022      	b.n	800d368 <__sflush_r+0xf8>
 800d322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d326:	b21b      	sxth	r3, r3
 800d328:	e01b      	b.n	800d362 <__sflush_r+0xf2>
 800d32a:	690f      	ldr	r7, [r1, #16]
 800d32c:	2f00      	cmp	r7, #0
 800d32e:	d0f6      	beq.n	800d31e <__sflush_r+0xae>
 800d330:	0793      	lsls	r3, r2, #30
 800d332:	680e      	ldr	r6, [r1, #0]
 800d334:	bf08      	it	eq
 800d336:	694b      	ldreq	r3, [r1, #20]
 800d338:	600f      	str	r7, [r1, #0]
 800d33a:	bf18      	it	ne
 800d33c:	2300      	movne	r3, #0
 800d33e:	eba6 0807 	sub.w	r8, r6, r7
 800d342:	608b      	str	r3, [r1, #8]
 800d344:	f1b8 0f00 	cmp.w	r8, #0
 800d348:	dde9      	ble.n	800d31e <__sflush_r+0xae>
 800d34a:	6a21      	ldr	r1, [r4, #32]
 800d34c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d34e:	4643      	mov	r3, r8
 800d350:	463a      	mov	r2, r7
 800d352:	4628      	mov	r0, r5
 800d354:	47b0      	blx	r6
 800d356:	2800      	cmp	r0, #0
 800d358:	dc08      	bgt.n	800d36c <__sflush_r+0xfc>
 800d35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d35e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	f04f 30ff 	mov.w	r0, #4294967295
 800d368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d36c:	4407      	add	r7, r0
 800d36e:	eba8 0800 	sub.w	r8, r8, r0
 800d372:	e7e7      	b.n	800d344 <__sflush_r+0xd4>
 800d374:	20400001 	.word	0x20400001

0800d378 <_fflush_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	690b      	ldr	r3, [r1, #16]
 800d37c:	4605      	mov	r5, r0
 800d37e:	460c      	mov	r4, r1
 800d380:	b913      	cbnz	r3, 800d388 <_fflush_r+0x10>
 800d382:	2500      	movs	r5, #0
 800d384:	4628      	mov	r0, r5
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	b118      	cbz	r0, 800d392 <_fflush_r+0x1a>
 800d38a:	6a03      	ldr	r3, [r0, #32]
 800d38c:	b90b      	cbnz	r3, 800d392 <_fflush_r+0x1a>
 800d38e:	f7fd f833 	bl	800a3f8 <__sinit>
 800d392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d0f3      	beq.n	800d382 <_fflush_r+0xa>
 800d39a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d39c:	07d0      	lsls	r0, r2, #31
 800d39e:	d404      	bmi.n	800d3aa <_fflush_r+0x32>
 800d3a0:	0599      	lsls	r1, r3, #22
 800d3a2:	d402      	bmi.n	800d3aa <_fflush_r+0x32>
 800d3a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3a6:	f7fd fa98 	bl	800a8da <__retarget_lock_acquire_recursive>
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	4621      	mov	r1, r4
 800d3ae:	f7ff ff5f 	bl	800d270 <__sflush_r>
 800d3b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d3b4:	07da      	lsls	r2, r3, #31
 800d3b6:	4605      	mov	r5, r0
 800d3b8:	d4e4      	bmi.n	800d384 <_fflush_r+0xc>
 800d3ba:	89a3      	ldrh	r3, [r4, #12]
 800d3bc:	059b      	lsls	r3, r3, #22
 800d3be:	d4e1      	bmi.n	800d384 <_fflush_r+0xc>
 800d3c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3c2:	f7fd fa8b 	bl	800a8dc <__retarget_lock_release_recursive>
 800d3c6:	e7dd      	b.n	800d384 <_fflush_r+0xc>

0800d3c8 <fiprintf>:
 800d3c8:	b40e      	push	{r1, r2, r3}
 800d3ca:	b503      	push	{r0, r1, lr}
 800d3cc:	4601      	mov	r1, r0
 800d3ce:	ab03      	add	r3, sp, #12
 800d3d0:	4805      	ldr	r0, [pc, #20]	@ (800d3e8 <fiprintf+0x20>)
 800d3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3d6:	6800      	ldr	r0, [r0, #0]
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	f7ff fe31 	bl	800d040 <_vfiprintf_r>
 800d3de:	b002      	add	sp, #8
 800d3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3e4:	b003      	add	sp, #12
 800d3e6:	4770      	bx	lr
 800d3e8:	20000040 	.word	0x20000040

0800d3ec <__swhatbuf_r>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f4:	2900      	cmp	r1, #0
 800d3f6:	b096      	sub	sp, #88	@ 0x58
 800d3f8:	4615      	mov	r5, r2
 800d3fa:	461e      	mov	r6, r3
 800d3fc:	da0d      	bge.n	800d41a <__swhatbuf_r+0x2e>
 800d3fe:	89a3      	ldrh	r3, [r4, #12]
 800d400:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d404:	f04f 0100 	mov.w	r1, #0
 800d408:	bf14      	ite	ne
 800d40a:	2340      	movne	r3, #64	@ 0x40
 800d40c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d410:	2000      	movs	r0, #0
 800d412:	6031      	str	r1, [r6, #0]
 800d414:	602b      	str	r3, [r5, #0]
 800d416:	b016      	add	sp, #88	@ 0x58
 800d418:	bd70      	pop	{r4, r5, r6, pc}
 800d41a:	466a      	mov	r2, sp
 800d41c:	f000 f908 	bl	800d630 <_fstat_r>
 800d420:	2800      	cmp	r0, #0
 800d422:	dbec      	blt.n	800d3fe <__swhatbuf_r+0x12>
 800d424:	9901      	ldr	r1, [sp, #4]
 800d426:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d42a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d42e:	4259      	negs	r1, r3
 800d430:	4159      	adcs	r1, r3
 800d432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d436:	e7eb      	b.n	800d410 <__swhatbuf_r+0x24>

0800d438 <__smakebuf_r>:
 800d438:	898b      	ldrh	r3, [r1, #12]
 800d43a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d43c:	079d      	lsls	r5, r3, #30
 800d43e:	4606      	mov	r6, r0
 800d440:	460c      	mov	r4, r1
 800d442:	d507      	bpl.n	800d454 <__smakebuf_r+0x1c>
 800d444:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	6123      	str	r3, [r4, #16]
 800d44c:	2301      	movs	r3, #1
 800d44e:	6163      	str	r3, [r4, #20]
 800d450:	b003      	add	sp, #12
 800d452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d454:	ab01      	add	r3, sp, #4
 800d456:	466a      	mov	r2, sp
 800d458:	f7ff ffc8 	bl	800d3ec <__swhatbuf_r>
 800d45c:	9f00      	ldr	r7, [sp, #0]
 800d45e:	4605      	mov	r5, r0
 800d460:	4639      	mov	r1, r7
 800d462:	4630      	mov	r0, r6
 800d464:	f7fe f92c 	bl	800b6c0 <_malloc_r>
 800d468:	b948      	cbnz	r0, 800d47e <__smakebuf_r+0x46>
 800d46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d46e:	059a      	lsls	r2, r3, #22
 800d470:	d4ee      	bmi.n	800d450 <__smakebuf_r+0x18>
 800d472:	f023 0303 	bic.w	r3, r3, #3
 800d476:	f043 0302 	orr.w	r3, r3, #2
 800d47a:	81a3      	strh	r3, [r4, #12]
 800d47c:	e7e2      	b.n	800d444 <__smakebuf_r+0xc>
 800d47e:	89a3      	ldrh	r3, [r4, #12]
 800d480:	6020      	str	r0, [r4, #0]
 800d482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d486:	81a3      	strh	r3, [r4, #12]
 800d488:	9b01      	ldr	r3, [sp, #4]
 800d48a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d48e:	b15b      	cbz	r3, 800d4a8 <__smakebuf_r+0x70>
 800d490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d494:	4630      	mov	r0, r6
 800d496:	f000 f8dd 	bl	800d654 <_isatty_r>
 800d49a:	b128      	cbz	r0, 800d4a8 <__smakebuf_r+0x70>
 800d49c:	89a3      	ldrh	r3, [r4, #12]
 800d49e:	f023 0303 	bic.w	r3, r3, #3
 800d4a2:	f043 0301 	orr.w	r3, r3, #1
 800d4a6:	81a3      	strh	r3, [r4, #12]
 800d4a8:	89a3      	ldrh	r3, [r4, #12]
 800d4aa:	431d      	orrs	r5, r3
 800d4ac:	81a5      	strh	r5, [r4, #12]
 800d4ae:	e7cf      	b.n	800d450 <__smakebuf_r+0x18>

0800d4b0 <__swbuf_r>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	460e      	mov	r6, r1
 800d4b4:	4614      	mov	r4, r2
 800d4b6:	4605      	mov	r5, r0
 800d4b8:	b118      	cbz	r0, 800d4c2 <__swbuf_r+0x12>
 800d4ba:	6a03      	ldr	r3, [r0, #32]
 800d4bc:	b90b      	cbnz	r3, 800d4c2 <__swbuf_r+0x12>
 800d4be:	f7fc ff9b 	bl	800a3f8 <__sinit>
 800d4c2:	69a3      	ldr	r3, [r4, #24]
 800d4c4:	60a3      	str	r3, [r4, #8]
 800d4c6:	89a3      	ldrh	r3, [r4, #12]
 800d4c8:	071a      	lsls	r2, r3, #28
 800d4ca:	d501      	bpl.n	800d4d0 <__swbuf_r+0x20>
 800d4cc:	6923      	ldr	r3, [r4, #16]
 800d4ce:	b943      	cbnz	r3, 800d4e2 <__swbuf_r+0x32>
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	f000 f82a 	bl	800d52c <__swsetup_r>
 800d4d8:	b118      	cbz	r0, 800d4e2 <__swbuf_r+0x32>
 800d4da:	f04f 37ff 	mov.w	r7, #4294967295
 800d4de:	4638      	mov	r0, r7
 800d4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	6922      	ldr	r2, [r4, #16]
 800d4e6:	1a98      	subs	r0, r3, r2
 800d4e8:	6963      	ldr	r3, [r4, #20]
 800d4ea:	b2f6      	uxtb	r6, r6
 800d4ec:	4283      	cmp	r3, r0
 800d4ee:	4637      	mov	r7, r6
 800d4f0:	dc05      	bgt.n	800d4fe <__swbuf_r+0x4e>
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f7ff ff3f 	bl	800d378 <_fflush_r>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d1ed      	bne.n	800d4da <__swbuf_r+0x2a>
 800d4fe:	68a3      	ldr	r3, [r4, #8]
 800d500:	3b01      	subs	r3, #1
 800d502:	60a3      	str	r3, [r4, #8]
 800d504:	6823      	ldr	r3, [r4, #0]
 800d506:	1c5a      	adds	r2, r3, #1
 800d508:	6022      	str	r2, [r4, #0]
 800d50a:	701e      	strb	r6, [r3, #0]
 800d50c:	6962      	ldr	r2, [r4, #20]
 800d50e:	1c43      	adds	r3, r0, #1
 800d510:	429a      	cmp	r2, r3
 800d512:	d004      	beq.n	800d51e <__swbuf_r+0x6e>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	07db      	lsls	r3, r3, #31
 800d518:	d5e1      	bpl.n	800d4de <__swbuf_r+0x2e>
 800d51a:	2e0a      	cmp	r6, #10
 800d51c:	d1df      	bne.n	800d4de <__swbuf_r+0x2e>
 800d51e:	4621      	mov	r1, r4
 800d520:	4628      	mov	r0, r5
 800d522:	f7ff ff29 	bl	800d378 <_fflush_r>
 800d526:	2800      	cmp	r0, #0
 800d528:	d0d9      	beq.n	800d4de <__swbuf_r+0x2e>
 800d52a:	e7d6      	b.n	800d4da <__swbuf_r+0x2a>

0800d52c <__swsetup_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	4b29      	ldr	r3, [pc, #164]	@ (800d5d4 <__swsetup_r+0xa8>)
 800d530:	4605      	mov	r5, r0
 800d532:	6818      	ldr	r0, [r3, #0]
 800d534:	460c      	mov	r4, r1
 800d536:	b118      	cbz	r0, 800d540 <__swsetup_r+0x14>
 800d538:	6a03      	ldr	r3, [r0, #32]
 800d53a:	b90b      	cbnz	r3, 800d540 <__swsetup_r+0x14>
 800d53c:	f7fc ff5c 	bl	800a3f8 <__sinit>
 800d540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d544:	0719      	lsls	r1, r3, #28
 800d546:	d422      	bmi.n	800d58e <__swsetup_r+0x62>
 800d548:	06da      	lsls	r2, r3, #27
 800d54a:	d407      	bmi.n	800d55c <__swsetup_r+0x30>
 800d54c:	2209      	movs	r2, #9
 800d54e:	602a      	str	r2, [r5, #0]
 800d550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	f04f 30ff 	mov.w	r0, #4294967295
 800d55a:	e033      	b.n	800d5c4 <__swsetup_r+0x98>
 800d55c:	0758      	lsls	r0, r3, #29
 800d55e:	d512      	bpl.n	800d586 <__swsetup_r+0x5a>
 800d560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d562:	b141      	cbz	r1, 800d576 <__swsetup_r+0x4a>
 800d564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d568:	4299      	cmp	r1, r3
 800d56a:	d002      	beq.n	800d572 <__swsetup_r+0x46>
 800d56c:	4628      	mov	r0, r5
 800d56e:	f7fe f833 	bl	800b5d8 <_free_r>
 800d572:	2300      	movs	r3, #0
 800d574:	6363      	str	r3, [r4, #52]	@ 0x34
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d57c:	81a3      	strh	r3, [r4, #12]
 800d57e:	2300      	movs	r3, #0
 800d580:	6063      	str	r3, [r4, #4]
 800d582:	6923      	ldr	r3, [r4, #16]
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	89a3      	ldrh	r3, [r4, #12]
 800d588:	f043 0308 	orr.w	r3, r3, #8
 800d58c:	81a3      	strh	r3, [r4, #12]
 800d58e:	6923      	ldr	r3, [r4, #16]
 800d590:	b94b      	cbnz	r3, 800d5a6 <__swsetup_r+0x7a>
 800d592:	89a3      	ldrh	r3, [r4, #12]
 800d594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d59c:	d003      	beq.n	800d5a6 <__swsetup_r+0x7a>
 800d59e:	4621      	mov	r1, r4
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	f7ff ff49 	bl	800d438 <__smakebuf_r>
 800d5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5aa:	f013 0201 	ands.w	r2, r3, #1
 800d5ae:	d00a      	beq.n	800d5c6 <__swsetup_r+0x9a>
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	60a2      	str	r2, [r4, #8]
 800d5b4:	6962      	ldr	r2, [r4, #20]
 800d5b6:	4252      	negs	r2, r2
 800d5b8:	61a2      	str	r2, [r4, #24]
 800d5ba:	6922      	ldr	r2, [r4, #16]
 800d5bc:	b942      	cbnz	r2, 800d5d0 <__swsetup_r+0xa4>
 800d5be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d5c2:	d1c5      	bne.n	800d550 <__swsetup_r+0x24>
 800d5c4:	bd38      	pop	{r3, r4, r5, pc}
 800d5c6:	0799      	lsls	r1, r3, #30
 800d5c8:	bf58      	it	pl
 800d5ca:	6962      	ldrpl	r2, [r4, #20]
 800d5cc:	60a2      	str	r2, [r4, #8]
 800d5ce:	e7f4      	b.n	800d5ba <__swsetup_r+0x8e>
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	e7f7      	b.n	800d5c4 <__swsetup_r+0x98>
 800d5d4:	20000040 	.word	0x20000040

0800d5d8 <memmove>:
 800d5d8:	4288      	cmp	r0, r1
 800d5da:	b510      	push	{r4, lr}
 800d5dc:	eb01 0402 	add.w	r4, r1, r2
 800d5e0:	d902      	bls.n	800d5e8 <memmove+0x10>
 800d5e2:	4284      	cmp	r4, r0
 800d5e4:	4623      	mov	r3, r4
 800d5e6:	d807      	bhi.n	800d5f8 <memmove+0x20>
 800d5e8:	1e43      	subs	r3, r0, #1
 800d5ea:	42a1      	cmp	r1, r4
 800d5ec:	d008      	beq.n	800d600 <memmove+0x28>
 800d5ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5f6:	e7f8      	b.n	800d5ea <memmove+0x12>
 800d5f8:	4402      	add	r2, r0
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	428a      	cmp	r2, r1
 800d5fe:	d100      	bne.n	800d602 <memmove+0x2a>
 800d600:	bd10      	pop	{r4, pc}
 800d602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d60a:	e7f7      	b.n	800d5fc <memmove+0x24>

0800d60c <strncmp>:
 800d60c:	b510      	push	{r4, lr}
 800d60e:	b16a      	cbz	r2, 800d62c <strncmp+0x20>
 800d610:	3901      	subs	r1, #1
 800d612:	1884      	adds	r4, r0, r2
 800d614:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d618:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d103      	bne.n	800d628 <strncmp+0x1c>
 800d620:	42a0      	cmp	r0, r4
 800d622:	d001      	beq.n	800d628 <strncmp+0x1c>
 800d624:	2a00      	cmp	r2, #0
 800d626:	d1f5      	bne.n	800d614 <strncmp+0x8>
 800d628:	1ad0      	subs	r0, r2, r3
 800d62a:	bd10      	pop	{r4, pc}
 800d62c:	4610      	mov	r0, r2
 800d62e:	e7fc      	b.n	800d62a <strncmp+0x1e>

0800d630 <_fstat_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d07      	ldr	r5, [pc, #28]	@ (800d650 <_fstat_r+0x20>)
 800d634:	2300      	movs	r3, #0
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	4611      	mov	r1, r2
 800d63c:	602b      	str	r3, [r5, #0]
 800d63e:	f7f5 fad7 	bl	8002bf0 <_fstat>
 800d642:	1c43      	adds	r3, r0, #1
 800d644:	d102      	bne.n	800d64c <_fstat_r+0x1c>
 800d646:	682b      	ldr	r3, [r5, #0]
 800d648:	b103      	cbz	r3, 800d64c <_fstat_r+0x1c>
 800d64a:	6023      	str	r3, [r4, #0]
 800d64c:	bd38      	pop	{r3, r4, r5, pc}
 800d64e:	bf00      	nop
 800d650:	20001040 	.word	0x20001040

0800d654 <_isatty_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d06      	ldr	r5, [pc, #24]	@ (800d670 <_isatty_r+0x1c>)
 800d658:	2300      	movs	r3, #0
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	602b      	str	r3, [r5, #0]
 800d660:	f7f5 fad6 	bl	8002c10 <_isatty>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	d102      	bne.n	800d66e <_isatty_r+0x1a>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b103      	cbz	r3, 800d66e <_isatty_r+0x1a>
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	20001040 	.word	0x20001040

0800d674 <_sbrk_r>:
 800d674:	b538      	push	{r3, r4, r5, lr}
 800d676:	4d06      	ldr	r5, [pc, #24]	@ (800d690 <_sbrk_r+0x1c>)
 800d678:	2300      	movs	r3, #0
 800d67a:	4604      	mov	r4, r0
 800d67c:	4608      	mov	r0, r1
 800d67e:	602b      	str	r3, [r5, #0]
 800d680:	f7f5 fade 	bl	8002c40 <_sbrk>
 800d684:	1c43      	adds	r3, r0, #1
 800d686:	d102      	bne.n	800d68e <_sbrk_r+0x1a>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	b103      	cbz	r3, 800d68e <_sbrk_r+0x1a>
 800d68c:	6023      	str	r3, [r4, #0]
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
 800d690:	20001040 	.word	0x20001040

0800d694 <memcpy>:
 800d694:	440a      	add	r2, r1
 800d696:	4291      	cmp	r1, r2
 800d698:	f100 33ff 	add.w	r3, r0, #4294967295
 800d69c:	d100      	bne.n	800d6a0 <memcpy+0xc>
 800d69e:	4770      	bx	lr
 800d6a0:	b510      	push	{r4, lr}
 800d6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6aa:	4291      	cmp	r1, r2
 800d6ac:	d1f9      	bne.n	800d6a2 <memcpy+0xe>
 800d6ae:	bd10      	pop	{r4, pc}

0800d6b0 <nan>:
 800d6b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d6b8 <nan+0x8>
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	00000000 	.word	0x00000000
 800d6bc:	7ff80000 	.word	0x7ff80000

0800d6c0 <abort>:
 800d6c0:	b508      	push	{r3, lr}
 800d6c2:	2006      	movs	r0, #6
 800d6c4:	f000 fbc4 	bl	800de50 <raise>
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	f7f5 fa5d 	bl	8002b88 <_exit>

0800d6ce <_calloc_r>:
 800d6ce:	b570      	push	{r4, r5, r6, lr}
 800d6d0:	fba1 5402 	umull	r5, r4, r1, r2
 800d6d4:	b934      	cbnz	r4, 800d6e4 <_calloc_r+0x16>
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	f7fd fff2 	bl	800b6c0 <_malloc_r>
 800d6dc:	4606      	mov	r6, r0
 800d6de:	b928      	cbnz	r0, 800d6ec <_calloc_r+0x1e>
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	bd70      	pop	{r4, r5, r6, pc}
 800d6e4:	220c      	movs	r2, #12
 800d6e6:	6002      	str	r2, [r0, #0]
 800d6e8:	2600      	movs	r6, #0
 800d6ea:	e7f9      	b.n	800d6e0 <_calloc_r+0x12>
 800d6ec:	462a      	mov	r2, r5
 800d6ee:	4621      	mov	r1, r4
 800d6f0:	f7fd f819 	bl	800a726 <memset>
 800d6f4:	e7f4      	b.n	800d6e0 <_calloc_r+0x12>

0800d6f6 <rshift>:
 800d6f6:	6903      	ldr	r3, [r0, #16]
 800d6f8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d700:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d704:	f100 0414 	add.w	r4, r0, #20
 800d708:	dd45      	ble.n	800d796 <rshift+0xa0>
 800d70a:	f011 011f 	ands.w	r1, r1, #31
 800d70e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d712:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d716:	d10c      	bne.n	800d732 <rshift+0x3c>
 800d718:	f100 0710 	add.w	r7, r0, #16
 800d71c:	4629      	mov	r1, r5
 800d71e:	42b1      	cmp	r1, r6
 800d720:	d334      	bcc.n	800d78c <rshift+0x96>
 800d722:	1a9b      	subs	r3, r3, r2
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	1eea      	subs	r2, r5, #3
 800d728:	4296      	cmp	r6, r2
 800d72a:	bf38      	it	cc
 800d72c:	2300      	movcc	r3, #0
 800d72e:	4423      	add	r3, r4
 800d730:	e015      	b.n	800d75e <rshift+0x68>
 800d732:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d736:	f1c1 0820 	rsb	r8, r1, #32
 800d73a:	40cf      	lsrs	r7, r1
 800d73c:	f105 0e04 	add.w	lr, r5, #4
 800d740:	46a1      	mov	r9, r4
 800d742:	4576      	cmp	r6, lr
 800d744:	46f4      	mov	ip, lr
 800d746:	d815      	bhi.n	800d774 <rshift+0x7e>
 800d748:	1a9a      	subs	r2, r3, r2
 800d74a:	0092      	lsls	r2, r2, #2
 800d74c:	3a04      	subs	r2, #4
 800d74e:	3501      	adds	r5, #1
 800d750:	42ae      	cmp	r6, r5
 800d752:	bf38      	it	cc
 800d754:	2200      	movcc	r2, #0
 800d756:	18a3      	adds	r3, r4, r2
 800d758:	50a7      	str	r7, [r4, r2]
 800d75a:	b107      	cbz	r7, 800d75e <rshift+0x68>
 800d75c:	3304      	adds	r3, #4
 800d75e:	1b1a      	subs	r2, r3, r4
 800d760:	42a3      	cmp	r3, r4
 800d762:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d766:	bf08      	it	eq
 800d768:	2300      	moveq	r3, #0
 800d76a:	6102      	str	r2, [r0, #16]
 800d76c:	bf08      	it	eq
 800d76e:	6143      	streq	r3, [r0, #20]
 800d770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d774:	f8dc c000 	ldr.w	ip, [ip]
 800d778:	fa0c fc08 	lsl.w	ip, ip, r8
 800d77c:	ea4c 0707 	orr.w	r7, ip, r7
 800d780:	f849 7b04 	str.w	r7, [r9], #4
 800d784:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d788:	40cf      	lsrs	r7, r1
 800d78a:	e7da      	b.n	800d742 <rshift+0x4c>
 800d78c:	f851 cb04 	ldr.w	ip, [r1], #4
 800d790:	f847 cf04 	str.w	ip, [r7, #4]!
 800d794:	e7c3      	b.n	800d71e <rshift+0x28>
 800d796:	4623      	mov	r3, r4
 800d798:	e7e1      	b.n	800d75e <rshift+0x68>

0800d79a <__hexdig_fun>:
 800d79a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d79e:	2b09      	cmp	r3, #9
 800d7a0:	d802      	bhi.n	800d7a8 <__hexdig_fun+0xe>
 800d7a2:	3820      	subs	r0, #32
 800d7a4:	b2c0      	uxtb	r0, r0
 800d7a6:	4770      	bx	lr
 800d7a8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d7ac:	2b05      	cmp	r3, #5
 800d7ae:	d801      	bhi.n	800d7b4 <__hexdig_fun+0x1a>
 800d7b0:	3847      	subs	r0, #71	@ 0x47
 800d7b2:	e7f7      	b.n	800d7a4 <__hexdig_fun+0xa>
 800d7b4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d7b8:	2b05      	cmp	r3, #5
 800d7ba:	d801      	bhi.n	800d7c0 <__hexdig_fun+0x26>
 800d7bc:	3827      	subs	r0, #39	@ 0x27
 800d7be:	e7f1      	b.n	800d7a4 <__hexdig_fun+0xa>
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	4770      	bx	lr

0800d7c4 <__gethex>:
 800d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c8:	b085      	sub	sp, #20
 800d7ca:	468a      	mov	sl, r1
 800d7cc:	9302      	str	r3, [sp, #8]
 800d7ce:	680b      	ldr	r3, [r1, #0]
 800d7d0:	9001      	str	r0, [sp, #4]
 800d7d2:	4690      	mov	r8, r2
 800d7d4:	1c9c      	adds	r4, r3, #2
 800d7d6:	46a1      	mov	r9, r4
 800d7d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d7dc:	2830      	cmp	r0, #48	@ 0x30
 800d7de:	d0fa      	beq.n	800d7d6 <__gethex+0x12>
 800d7e0:	eba9 0303 	sub.w	r3, r9, r3
 800d7e4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d7e8:	f7ff ffd7 	bl	800d79a <__hexdig_fun>
 800d7ec:	4605      	mov	r5, r0
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	d168      	bne.n	800d8c4 <__gethex+0x100>
 800d7f2:	49a0      	ldr	r1, [pc, #640]	@ (800da74 <__gethex+0x2b0>)
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	4648      	mov	r0, r9
 800d7f8:	f7ff ff08 	bl	800d60c <strncmp>
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d167      	bne.n	800d8d2 <__gethex+0x10e>
 800d802:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d806:	4626      	mov	r6, r4
 800d808:	f7ff ffc7 	bl	800d79a <__hexdig_fun>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d062      	beq.n	800d8d6 <__gethex+0x112>
 800d810:	4623      	mov	r3, r4
 800d812:	7818      	ldrb	r0, [r3, #0]
 800d814:	2830      	cmp	r0, #48	@ 0x30
 800d816:	4699      	mov	r9, r3
 800d818:	f103 0301 	add.w	r3, r3, #1
 800d81c:	d0f9      	beq.n	800d812 <__gethex+0x4e>
 800d81e:	f7ff ffbc 	bl	800d79a <__hexdig_fun>
 800d822:	fab0 f580 	clz	r5, r0
 800d826:	096d      	lsrs	r5, r5, #5
 800d828:	f04f 0b01 	mov.w	fp, #1
 800d82c:	464a      	mov	r2, r9
 800d82e:	4616      	mov	r6, r2
 800d830:	3201      	adds	r2, #1
 800d832:	7830      	ldrb	r0, [r6, #0]
 800d834:	f7ff ffb1 	bl	800d79a <__hexdig_fun>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d1f8      	bne.n	800d82e <__gethex+0x6a>
 800d83c:	498d      	ldr	r1, [pc, #564]	@ (800da74 <__gethex+0x2b0>)
 800d83e:	2201      	movs	r2, #1
 800d840:	4630      	mov	r0, r6
 800d842:	f7ff fee3 	bl	800d60c <strncmp>
 800d846:	2800      	cmp	r0, #0
 800d848:	d13f      	bne.n	800d8ca <__gethex+0x106>
 800d84a:	b944      	cbnz	r4, 800d85e <__gethex+0x9a>
 800d84c:	1c74      	adds	r4, r6, #1
 800d84e:	4622      	mov	r2, r4
 800d850:	4616      	mov	r6, r2
 800d852:	3201      	adds	r2, #1
 800d854:	7830      	ldrb	r0, [r6, #0]
 800d856:	f7ff ffa0 	bl	800d79a <__hexdig_fun>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d1f8      	bne.n	800d850 <__gethex+0x8c>
 800d85e:	1ba4      	subs	r4, r4, r6
 800d860:	00a7      	lsls	r7, r4, #2
 800d862:	7833      	ldrb	r3, [r6, #0]
 800d864:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d868:	2b50      	cmp	r3, #80	@ 0x50
 800d86a:	d13e      	bne.n	800d8ea <__gethex+0x126>
 800d86c:	7873      	ldrb	r3, [r6, #1]
 800d86e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d870:	d033      	beq.n	800d8da <__gethex+0x116>
 800d872:	2b2d      	cmp	r3, #45	@ 0x2d
 800d874:	d034      	beq.n	800d8e0 <__gethex+0x11c>
 800d876:	1c71      	adds	r1, r6, #1
 800d878:	2400      	movs	r4, #0
 800d87a:	7808      	ldrb	r0, [r1, #0]
 800d87c:	f7ff ff8d 	bl	800d79a <__hexdig_fun>
 800d880:	1e43      	subs	r3, r0, #1
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b18      	cmp	r3, #24
 800d886:	d830      	bhi.n	800d8ea <__gethex+0x126>
 800d888:	f1a0 0210 	sub.w	r2, r0, #16
 800d88c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d890:	f7ff ff83 	bl	800d79a <__hexdig_fun>
 800d894:	f100 3cff 	add.w	ip, r0, #4294967295
 800d898:	fa5f fc8c 	uxtb.w	ip, ip
 800d89c:	f1bc 0f18 	cmp.w	ip, #24
 800d8a0:	f04f 030a 	mov.w	r3, #10
 800d8a4:	d91e      	bls.n	800d8e4 <__gethex+0x120>
 800d8a6:	b104      	cbz	r4, 800d8aa <__gethex+0xe6>
 800d8a8:	4252      	negs	r2, r2
 800d8aa:	4417      	add	r7, r2
 800d8ac:	f8ca 1000 	str.w	r1, [sl]
 800d8b0:	b1ed      	cbz	r5, 800d8ee <__gethex+0x12a>
 800d8b2:	f1bb 0f00 	cmp.w	fp, #0
 800d8b6:	bf0c      	ite	eq
 800d8b8:	2506      	moveq	r5, #6
 800d8ba:	2500      	movne	r5, #0
 800d8bc:	4628      	mov	r0, r5
 800d8be:	b005      	add	sp, #20
 800d8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c4:	2500      	movs	r5, #0
 800d8c6:	462c      	mov	r4, r5
 800d8c8:	e7b0      	b.n	800d82c <__gethex+0x68>
 800d8ca:	2c00      	cmp	r4, #0
 800d8cc:	d1c7      	bne.n	800d85e <__gethex+0x9a>
 800d8ce:	4627      	mov	r7, r4
 800d8d0:	e7c7      	b.n	800d862 <__gethex+0x9e>
 800d8d2:	464e      	mov	r6, r9
 800d8d4:	462f      	mov	r7, r5
 800d8d6:	2501      	movs	r5, #1
 800d8d8:	e7c3      	b.n	800d862 <__gethex+0x9e>
 800d8da:	2400      	movs	r4, #0
 800d8dc:	1cb1      	adds	r1, r6, #2
 800d8de:	e7cc      	b.n	800d87a <__gethex+0xb6>
 800d8e0:	2401      	movs	r4, #1
 800d8e2:	e7fb      	b.n	800d8dc <__gethex+0x118>
 800d8e4:	fb03 0002 	mla	r0, r3, r2, r0
 800d8e8:	e7ce      	b.n	800d888 <__gethex+0xc4>
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	e7de      	b.n	800d8ac <__gethex+0xe8>
 800d8ee:	eba6 0309 	sub.w	r3, r6, r9
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	2b07      	cmp	r3, #7
 800d8f8:	dc0a      	bgt.n	800d910 <__gethex+0x14c>
 800d8fa:	9801      	ldr	r0, [sp, #4]
 800d8fc:	f7fd ff6c 	bl	800b7d8 <_Balloc>
 800d900:	4604      	mov	r4, r0
 800d902:	b940      	cbnz	r0, 800d916 <__gethex+0x152>
 800d904:	4b5c      	ldr	r3, [pc, #368]	@ (800da78 <__gethex+0x2b4>)
 800d906:	4602      	mov	r2, r0
 800d908:	21e4      	movs	r1, #228	@ 0xe4
 800d90a:	485c      	ldr	r0, [pc, #368]	@ (800da7c <__gethex+0x2b8>)
 800d90c:	f7fc ffee 	bl	800a8ec <__assert_func>
 800d910:	3101      	adds	r1, #1
 800d912:	105b      	asrs	r3, r3, #1
 800d914:	e7ef      	b.n	800d8f6 <__gethex+0x132>
 800d916:	f100 0a14 	add.w	sl, r0, #20
 800d91a:	2300      	movs	r3, #0
 800d91c:	4655      	mov	r5, sl
 800d91e:	469b      	mov	fp, r3
 800d920:	45b1      	cmp	r9, r6
 800d922:	d337      	bcc.n	800d994 <__gethex+0x1d0>
 800d924:	f845 bb04 	str.w	fp, [r5], #4
 800d928:	eba5 050a 	sub.w	r5, r5, sl
 800d92c:	10ad      	asrs	r5, r5, #2
 800d92e:	6125      	str	r5, [r4, #16]
 800d930:	4658      	mov	r0, fp
 800d932:	f7fe f843 	bl	800b9bc <__hi0bits>
 800d936:	016d      	lsls	r5, r5, #5
 800d938:	f8d8 6000 	ldr.w	r6, [r8]
 800d93c:	1a2d      	subs	r5, r5, r0
 800d93e:	42b5      	cmp	r5, r6
 800d940:	dd54      	ble.n	800d9ec <__gethex+0x228>
 800d942:	1bad      	subs	r5, r5, r6
 800d944:	4629      	mov	r1, r5
 800d946:	4620      	mov	r0, r4
 800d948:	f7fe fbcf 	bl	800c0ea <__any_on>
 800d94c:	4681      	mov	r9, r0
 800d94e:	b178      	cbz	r0, 800d970 <__gethex+0x1ac>
 800d950:	1e6b      	subs	r3, r5, #1
 800d952:	1159      	asrs	r1, r3, #5
 800d954:	f003 021f 	and.w	r2, r3, #31
 800d958:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d95c:	f04f 0901 	mov.w	r9, #1
 800d960:	fa09 f202 	lsl.w	r2, r9, r2
 800d964:	420a      	tst	r2, r1
 800d966:	d003      	beq.n	800d970 <__gethex+0x1ac>
 800d968:	454b      	cmp	r3, r9
 800d96a:	dc36      	bgt.n	800d9da <__gethex+0x216>
 800d96c:	f04f 0902 	mov.w	r9, #2
 800d970:	4629      	mov	r1, r5
 800d972:	4620      	mov	r0, r4
 800d974:	f7ff febf 	bl	800d6f6 <rshift>
 800d978:	442f      	add	r7, r5
 800d97a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d97e:	42bb      	cmp	r3, r7
 800d980:	da42      	bge.n	800da08 <__gethex+0x244>
 800d982:	9801      	ldr	r0, [sp, #4]
 800d984:	4621      	mov	r1, r4
 800d986:	f7fd ff67 	bl	800b858 <_Bfree>
 800d98a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d98c:	2300      	movs	r3, #0
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	25a3      	movs	r5, #163	@ 0xa3
 800d992:	e793      	b.n	800d8bc <__gethex+0xf8>
 800d994:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d998:	2a2e      	cmp	r2, #46	@ 0x2e
 800d99a:	d012      	beq.n	800d9c2 <__gethex+0x1fe>
 800d99c:	2b20      	cmp	r3, #32
 800d99e:	d104      	bne.n	800d9aa <__gethex+0x1e6>
 800d9a0:	f845 bb04 	str.w	fp, [r5], #4
 800d9a4:	f04f 0b00 	mov.w	fp, #0
 800d9a8:	465b      	mov	r3, fp
 800d9aa:	7830      	ldrb	r0, [r6, #0]
 800d9ac:	9303      	str	r3, [sp, #12]
 800d9ae:	f7ff fef4 	bl	800d79a <__hexdig_fun>
 800d9b2:	9b03      	ldr	r3, [sp, #12]
 800d9b4:	f000 000f 	and.w	r0, r0, #15
 800d9b8:	4098      	lsls	r0, r3
 800d9ba:	ea4b 0b00 	orr.w	fp, fp, r0
 800d9be:	3304      	adds	r3, #4
 800d9c0:	e7ae      	b.n	800d920 <__gethex+0x15c>
 800d9c2:	45b1      	cmp	r9, r6
 800d9c4:	d8ea      	bhi.n	800d99c <__gethex+0x1d8>
 800d9c6:	492b      	ldr	r1, [pc, #172]	@ (800da74 <__gethex+0x2b0>)
 800d9c8:	9303      	str	r3, [sp, #12]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	f7ff fe1d 	bl	800d60c <strncmp>
 800d9d2:	9b03      	ldr	r3, [sp, #12]
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d1e1      	bne.n	800d99c <__gethex+0x1d8>
 800d9d8:	e7a2      	b.n	800d920 <__gethex+0x15c>
 800d9da:	1ea9      	subs	r1, r5, #2
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f7fe fb84 	bl	800c0ea <__any_on>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d0c2      	beq.n	800d96c <__gethex+0x1a8>
 800d9e6:	f04f 0903 	mov.w	r9, #3
 800d9ea:	e7c1      	b.n	800d970 <__gethex+0x1ac>
 800d9ec:	da09      	bge.n	800da02 <__gethex+0x23e>
 800d9ee:	1b75      	subs	r5, r6, r5
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	9801      	ldr	r0, [sp, #4]
 800d9f4:	462a      	mov	r2, r5
 800d9f6:	f7fe f93f 	bl	800bc78 <__lshift>
 800d9fa:	1b7f      	subs	r7, r7, r5
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	f100 0a14 	add.w	sl, r0, #20
 800da02:	f04f 0900 	mov.w	r9, #0
 800da06:	e7b8      	b.n	800d97a <__gethex+0x1b6>
 800da08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800da0c:	42bd      	cmp	r5, r7
 800da0e:	dd6f      	ble.n	800daf0 <__gethex+0x32c>
 800da10:	1bed      	subs	r5, r5, r7
 800da12:	42ae      	cmp	r6, r5
 800da14:	dc34      	bgt.n	800da80 <__gethex+0x2bc>
 800da16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da1a:	2b02      	cmp	r3, #2
 800da1c:	d022      	beq.n	800da64 <__gethex+0x2a0>
 800da1e:	2b03      	cmp	r3, #3
 800da20:	d024      	beq.n	800da6c <__gethex+0x2a8>
 800da22:	2b01      	cmp	r3, #1
 800da24:	d115      	bne.n	800da52 <__gethex+0x28e>
 800da26:	42ae      	cmp	r6, r5
 800da28:	d113      	bne.n	800da52 <__gethex+0x28e>
 800da2a:	2e01      	cmp	r6, #1
 800da2c:	d10b      	bne.n	800da46 <__gethex+0x282>
 800da2e:	9a02      	ldr	r2, [sp, #8]
 800da30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da34:	6013      	str	r3, [r2, #0]
 800da36:	2301      	movs	r3, #1
 800da38:	6123      	str	r3, [r4, #16]
 800da3a:	f8ca 3000 	str.w	r3, [sl]
 800da3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da40:	2562      	movs	r5, #98	@ 0x62
 800da42:	601c      	str	r4, [r3, #0]
 800da44:	e73a      	b.n	800d8bc <__gethex+0xf8>
 800da46:	1e71      	subs	r1, r6, #1
 800da48:	4620      	mov	r0, r4
 800da4a:	f7fe fb4e 	bl	800c0ea <__any_on>
 800da4e:	2800      	cmp	r0, #0
 800da50:	d1ed      	bne.n	800da2e <__gethex+0x26a>
 800da52:	9801      	ldr	r0, [sp, #4]
 800da54:	4621      	mov	r1, r4
 800da56:	f7fd feff 	bl	800b858 <_Bfree>
 800da5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da5c:	2300      	movs	r3, #0
 800da5e:	6013      	str	r3, [r2, #0]
 800da60:	2550      	movs	r5, #80	@ 0x50
 800da62:	e72b      	b.n	800d8bc <__gethex+0xf8>
 800da64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1f3      	bne.n	800da52 <__gethex+0x28e>
 800da6a:	e7e0      	b.n	800da2e <__gethex+0x26a>
 800da6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1dd      	bne.n	800da2e <__gethex+0x26a>
 800da72:	e7ee      	b.n	800da52 <__gethex+0x28e>
 800da74:	0800e7b6 	.word	0x0800e7b6
 800da78:	0800e74c 	.word	0x0800e74c
 800da7c:	0800e7d1 	.word	0x0800e7d1
 800da80:	1e6f      	subs	r7, r5, #1
 800da82:	f1b9 0f00 	cmp.w	r9, #0
 800da86:	d130      	bne.n	800daea <__gethex+0x326>
 800da88:	b127      	cbz	r7, 800da94 <__gethex+0x2d0>
 800da8a:	4639      	mov	r1, r7
 800da8c:	4620      	mov	r0, r4
 800da8e:	f7fe fb2c 	bl	800c0ea <__any_on>
 800da92:	4681      	mov	r9, r0
 800da94:	117a      	asrs	r2, r7, #5
 800da96:	2301      	movs	r3, #1
 800da98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da9c:	f007 071f 	and.w	r7, r7, #31
 800daa0:	40bb      	lsls	r3, r7
 800daa2:	4213      	tst	r3, r2
 800daa4:	4629      	mov	r1, r5
 800daa6:	4620      	mov	r0, r4
 800daa8:	bf18      	it	ne
 800daaa:	f049 0902 	orrne.w	r9, r9, #2
 800daae:	f7ff fe22 	bl	800d6f6 <rshift>
 800dab2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dab6:	1b76      	subs	r6, r6, r5
 800dab8:	2502      	movs	r5, #2
 800daba:	f1b9 0f00 	cmp.w	r9, #0
 800dabe:	d047      	beq.n	800db50 <__gethex+0x38c>
 800dac0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d015      	beq.n	800daf4 <__gethex+0x330>
 800dac8:	2b03      	cmp	r3, #3
 800daca:	d017      	beq.n	800dafc <__gethex+0x338>
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d109      	bne.n	800dae4 <__gethex+0x320>
 800dad0:	f019 0f02 	tst.w	r9, #2
 800dad4:	d006      	beq.n	800dae4 <__gethex+0x320>
 800dad6:	f8da 3000 	ldr.w	r3, [sl]
 800dada:	ea49 0903 	orr.w	r9, r9, r3
 800dade:	f019 0f01 	tst.w	r9, #1
 800dae2:	d10e      	bne.n	800db02 <__gethex+0x33e>
 800dae4:	f045 0510 	orr.w	r5, r5, #16
 800dae8:	e032      	b.n	800db50 <__gethex+0x38c>
 800daea:	f04f 0901 	mov.w	r9, #1
 800daee:	e7d1      	b.n	800da94 <__gethex+0x2d0>
 800daf0:	2501      	movs	r5, #1
 800daf2:	e7e2      	b.n	800daba <__gethex+0x2f6>
 800daf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daf6:	f1c3 0301 	rsb	r3, r3, #1
 800dafa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d0f0      	beq.n	800dae4 <__gethex+0x320>
 800db02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800db06:	f104 0314 	add.w	r3, r4, #20
 800db0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800db0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800db12:	f04f 0c00 	mov.w	ip, #0
 800db16:	4618      	mov	r0, r3
 800db18:	f853 2b04 	ldr.w	r2, [r3], #4
 800db1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800db20:	d01b      	beq.n	800db5a <__gethex+0x396>
 800db22:	3201      	adds	r2, #1
 800db24:	6002      	str	r2, [r0, #0]
 800db26:	2d02      	cmp	r5, #2
 800db28:	f104 0314 	add.w	r3, r4, #20
 800db2c:	d13c      	bne.n	800dba8 <__gethex+0x3e4>
 800db2e:	f8d8 2000 	ldr.w	r2, [r8]
 800db32:	3a01      	subs	r2, #1
 800db34:	42b2      	cmp	r2, r6
 800db36:	d109      	bne.n	800db4c <__gethex+0x388>
 800db38:	1171      	asrs	r1, r6, #5
 800db3a:	2201      	movs	r2, #1
 800db3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db40:	f006 061f 	and.w	r6, r6, #31
 800db44:	fa02 f606 	lsl.w	r6, r2, r6
 800db48:	421e      	tst	r6, r3
 800db4a:	d13a      	bne.n	800dbc2 <__gethex+0x3fe>
 800db4c:	f045 0520 	orr.w	r5, r5, #32
 800db50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db52:	601c      	str	r4, [r3, #0]
 800db54:	9b02      	ldr	r3, [sp, #8]
 800db56:	601f      	str	r7, [r3, #0]
 800db58:	e6b0      	b.n	800d8bc <__gethex+0xf8>
 800db5a:	4299      	cmp	r1, r3
 800db5c:	f843 cc04 	str.w	ip, [r3, #-4]
 800db60:	d8d9      	bhi.n	800db16 <__gethex+0x352>
 800db62:	68a3      	ldr	r3, [r4, #8]
 800db64:	459b      	cmp	fp, r3
 800db66:	db17      	blt.n	800db98 <__gethex+0x3d4>
 800db68:	6861      	ldr	r1, [r4, #4]
 800db6a:	9801      	ldr	r0, [sp, #4]
 800db6c:	3101      	adds	r1, #1
 800db6e:	f7fd fe33 	bl	800b7d8 <_Balloc>
 800db72:	4681      	mov	r9, r0
 800db74:	b918      	cbnz	r0, 800db7e <__gethex+0x3ba>
 800db76:	4b1a      	ldr	r3, [pc, #104]	@ (800dbe0 <__gethex+0x41c>)
 800db78:	4602      	mov	r2, r0
 800db7a:	2184      	movs	r1, #132	@ 0x84
 800db7c:	e6c5      	b.n	800d90a <__gethex+0x146>
 800db7e:	6922      	ldr	r2, [r4, #16]
 800db80:	3202      	adds	r2, #2
 800db82:	f104 010c 	add.w	r1, r4, #12
 800db86:	0092      	lsls	r2, r2, #2
 800db88:	300c      	adds	r0, #12
 800db8a:	f7ff fd83 	bl	800d694 <memcpy>
 800db8e:	4621      	mov	r1, r4
 800db90:	9801      	ldr	r0, [sp, #4]
 800db92:	f7fd fe61 	bl	800b858 <_Bfree>
 800db96:	464c      	mov	r4, r9
 800db98:	6923      	ldr	r3, [r4, #16]
 800db9a:	1c5a      	adds	r2, r3, #1
 800db9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dba0:	6122      	str	r2, [r4, #16]
 800dba2:	2201      	movs	r2, #1
 800dba4:	615a      	str	r2, [r3, #20]
 800dba6:	e7be      	b.n	800db26 <__gethex+0x362>
 800dba8:	6922      	ldr	r2, [r4, #16]
 800dbaa:	455a      	cmp	r2, fp
 800dbac:	dd0b      	ble.n	800dbc6 <__gethex+0x402>
 800dbae:	2101      	movs	r1, #1
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f7ff fda0 	bl	800d6f6 <rshift>
 800dbb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbba:	3701      	adds	r7, #1
 800dbbc:	42bb      	cmp	r3, r7
 800dbbe:	f6ff aee0 	blt.w	800d982 <__gethex+0x1be>
 800dbc2:	2501      	movs	r5, #1
 800dbc4:	e7c2      	b.n	800db4c <__gethex+0x388>
 800dbc6:	f016 061f 	ands.w	r6, r6, #31
 800dbca:	d0fa      	beq.n	800dbc2 <__gethex+0x3fe>
 800dbcc:	4453      	add	r3, sl
 800dbce:	f1c6 0620 	rsb	r6, r6, #32
 800dbd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dbd6:	f7fd fef1 	bl	800b9bc <__hi0bits>
 800dbda:	42b0      	cmp	r0, r6
 800dbdc:	dbe7      	blt.n	800dbae <__gethex+0x3ea>
 800dbde:	e7f0      	b.n	800dbc2 <__gethex+0x3fe>
 800dbe0:	0800e74c 	.word	0x0800e74c

0800dbe4 <L_shift>:
 800dbe4:	f1c2 0208 	rsb	r2, r2, #8
 800dbe8:	0092      	lsls	r2, r2, #2
 800dbea:	b570      	push	{r4, r5, r6, lr}
 800dbec:	f1c2 0620 	rsb	r6, r2, #32
 800dbf0:	6843      	ldr	r3, [r0, #4]
 800dbf2:	6804      	ldr	r4, [r0, #0]
 800dbf4:	fa03 f506 	lsl.w	r5, r3, r6
 800dbf8:	432c      	orrs	r4, r5
 800dbfa:	40d3      	lsrs	r3, r2
 800dbfc:	6004      	str	r4, [r0, #0]
 800dbfe:	f840 3f04 	str.w	r3, [r0, #4]!
 800dc02:	4288      	cmp	r0, r1
 800dc04:	d3f4      	bcc.n	800dbf0 <L_shift+0xc>
 800dc06:	bd70      	pop	{r4, r5, r6, pc}

0800dc08 <__match>:
 800dc08:	b530      	push	{r4, r5, lr}
 800dc0a:	6803      	ldr	r3, [r0, #0]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc12:	b914      	cbnz	r4, 800dc1a <__match+0x12>
 800dc14:	6003      	str	r3, [r0, #0]
 800dc16:	2001      	movs	r0, #1
 800dc18:	bd30      	pop	{r4, r5, pc}
 800dc1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc1e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dc22:	2d19      	cmp	r5, #25
 800dc24:	bf98      	it	ls
 800dc26:	3220      	addls	r2, #32
 800dc28:	42a2      	cmp	r2, r4
 800dc2a:	d0f0      	beq.n	800dc0e <__match+0x6>
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	e7f3      	b.n	800dc18 <__match+0x10>

0800dc30 <__hexnan>:
 800dc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc34:	680b      	ldr	r3, [r1, #0]
 800dc36:	6801      	ldr	r1, [r0, #0]
 800dc38:	115e      	asrs	r6, r3, #5
 800dc3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc3e:	f013 031f 	ands.w	r3, r3, #31
 800dc42:	b087      	sub	sp, #28
 800dc44:	bf18      	it	ne
 800dc46:	3604      	addne	r6, #4
 800dc48:	2500      	movs	r5, #0
 800dc4a:	1f37      	subs	r7, r6, #4
 800dc4c:	4682      	mov	sl, r0
 800dc4e:	4690      	mov	r8, r2
 800dc50:	9301      	str	r3, [sp, #4]
 800dc52:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc56:	46b9      	mov	r9, r7
 800dc58:	463c      	mov	r4, r7
 800dc5a:	9502      	str	r5, [sp, #8]
 800dc5c:	46ab      	mov	fp, r5
 800dc5e:	784a      	ldrb	r2, [r1, #1]
 800dc60:	1c4b      	adds	r3, r1, #1
 800dc62:	9303      	str	r3, [sp, #12]
 800dc64:	b342      	cbz	r2, 800dcb8 <__hexnan+0x88>
 800dc66:	4610      	mov	r0, r2
 800dc68:	9105      	str	r1, [sp, #20]
 800dc6a:	9204      	str	r2, [sp, #16]
 800dc6c:	f7ff fd95 	bl	800d79a <__hexdig_fun>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d151      	bne.n	800dd18 <__hexnan+0xe8>
 800dc74:	9a04      	ldr	r2, [sp, #16]
 800dc76:	9905      	ldr	r1, [sp, #20]
 800dc78:	2a20      	cmp	r2, #32
 800dc7a:	d818      	bhi.n	800dcae <__hexnan+0x7e>
 800dc7c:	9b02      	ldr	r3, [sp, #8]
 800dc7e:	459b      	cmp	fp, r3
 800dc80:	dd13      	ble.n	800dcaa <__hexnan+0x7a>
 800dc82:	454c      	cmp	r4, r9
 800dc84:	d206      	bcs.n	800dc94 <__hexnan+0x64>
 800dc86:	2d07      	cmp	r5, #7
 800dc88:	dc04      	bgt.n	800dc94 <__hexnan+0x64>
 800dc8a:	462a      	mov	r2, r5
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f7ff ffa8 	bl	800dbe4 <L_shift>
 800dc94:	4544      	cmp	r4, r8
 800dc96:	d952      	bls.n	800dd3e <__hexnan+0x10e>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	f1a4 0904 	sub.w	r9, r4, #4
 800dc9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dca2:	f8cd b008 	str.w	fp, [sp, #8]
 800dca6:	464c      	mov	r4, r9
 800dca8:	461d      	mov	r5, r3
 800dcaa:	9903      	ldr	r1, [sp, #12]
 800dcac:	e7d7      	b.n	800dc5e <__hexnan+0x2e>
 800dcae:	2a29      	cmp	r2, #41	@ 0x29
 800dcb0:	d157      	bne.n	800dd62 <__hexnan+0x132>
 800dcb2:	3102      	adds	r1, #2
 800dcb4:	f8ca 1000 	str.w	r1, [sl]
 800dcb8:	f1bb 0f00 	cmp.w	fp, #0
 800dcbc:	d051      	beq.n	800dd62 <__hexnan+0x132>
 800dcbe:	454c      	cmp	r4, r9
 800dcc0:	d206      	bcs.n	800dcd0 <__hexnan+0xa0>
 800dcc2:	2d07      	cmp	r5, #7
 800dcc4:	dc04      	bgt.n	800dcd0 <__hexnan+0xa0>
 800dcc6:	462a      	mov	r2, r5
 800dcc8:	4649      	mov	r1, r9
 800dcca:	4620      	mov	r0, r4
 800dccc:	f7ff ff8a 	bl	800dbe4 <L_shift>
 800dcd0:	4544      	cmp	r4, r8
 800dcd2:	d936      	bls.n	800dd42 <__hexnan+0x112>
 800dcd4:	f1a8 0204 	sub.w	r2, r8, #4
 800dcd8:	4623      	mov	r3, r4
 800dcda:	f853 1b04 	ldr.w	r1, [r3], #4
 800dcde:	f842 1f04 	str.w	r1, [r2, #4]!
 800dce2:	429f      	cmp	r7, r3
 800dce4:	d2f9      	bcs.n	800dcda <__hexnan+0xaa>
 800dce6:	1b3b      	subs	r3, r7, r4
 800dce8:	f023 0303 	bic.w	r3, r3, #3
 800dcec:	3304      	adds	r3, #4
 800dcee:	3401      	adds	r4, #1
 800dcf0:	3e03      	subs	r6, #3
 800dcf2:	42b4      	cmp	r4, r6
 800dcf4:	bf88      	it	hi
 800dcf6:	2304      	movhi	r3, #4
 800dcf8:	4443      	add	r3, r8
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f843 2b04 	str.w	r2, [r3], #4
 800dd00:	429f      	cmp	r7, r3
 800dd02:	d2fb      	bcs.n	800dcfc <__hexnan+0xcc>
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	b91b      	cbnz	r3, 800dd10 <__hexnan+0xe0>
 800dd08:	4547      	cmp	r7, r8
 800dd0a:	d128      	bne.n	800dd5e <__hexnan+0x12e>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	603b      	str	r3, [r7, #0]
 800dd10:	2005      	movs	r0, #5
 800dd12:	b007      	add	sp, #28
 800dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd18:	3501      	adds	r5, #1
 800dd1a:	2d08      	cmp	r5, #8
 800dd1c:	f10b 0b01 	add.w	fp, fp, #1
 800dd20:	dd06      	ble.n	800dd30 <__hexnan+0x100>
 800dd22:	4544      	cmp	r4, r8
 800dd24:	d9c1      	bls.n	800dcaa <__hexnan+0x7a>
 800dd26:	2300      	movs	r3, #0
 800dd28:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd2c:	2501      	movs	r5, #1
 800dd2e:	3c04      	subs	r4, #4
 800dd30:	6822      	ldr	r2, [r4, #0]
 800dd32:	f000 000f 	and.w	r0, r0, #15
 800dd36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dd3a:	6020      	str	r0, [r4, #0]
 800dd3c:	e7b5      	b.n	800dcaa <__hexnan+0x7a>
 800dd3e:	2508      	movs	r5, #8
 800dd40:	e7b3      	b.n	800dcaa <__hexnan+0x7a>
 800dd42:	9b01      	ldr	r3, [sp, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d0dd      	beq.n	800dd04 <__hexnan+0xd4>
 800dd48:	f1c3 0320 	rsb	r3, r3, #32
 800dd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd50:	40da      	lsrs	r2, r3
 800dd52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd56:	4013      	ands	r3, r2
 800dd58:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd5c:	e7d2      	b.n	800dd04 <__hexnan+0xd4>
 800dd5e:	3f04      	subs	r7, #4
 800dd60:	e7d0      	b.n	800dd04 <__hexnan+0xd4>
 800dd62:	2004      	movs	r0, #4
 800dd64:	e7d5      	b.n	800dd12 <__hexnan+0xe2>

0800dd66 <__ascii_mbtowc>:
 800dd66:	b082      	sub	sp, #8
 800dd68:	b901      	cbnz	r1, 800dd6c <__ascii_mbtowc+0x6>
 800dd6a:	a901      	add	r1, sp, #4
 800dd6c:	b142      	cbz	r2, 800dd80 <__ascii_mbtowc+0x1a>
 800dd6e:	b14b      	cbz	r3, 800dd84 <__ascii_mbtowc+0x1e>
 800dd70:	7813      	ldrb	r3, [r2, #0]
 800dd72:	600b      	str	r3, [r1, #0]
 800dd74:	7812      	ldrb	r2, [r2, #0]
 800dd76:	1e10      	subs	r0, r2, #0
 800dd78:	bf18      	it	ne
 800dd7a:	2001      	movne	r0, #1
 800dd7c:	b002      	add	sp, #8
 800dd7e:	4770      	bx	lr
 800dd80:	4610      	mov	r0, r2
 800dd82:	e7fb      	b.n	800dd7c <__ascii_mbtowc+0x16>
 800dd84:	f06f 0001 	mvn.w	r0, #1
 800dd88:	e7f8      	b.n	800dd7c <__ascii_mbtowc+0x16>

0800dd8a <_realloc_r>:
 800dd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8e:	4607      	mov	r7, r0
 800dd90:	4614      	mov	r4, r2
 800dd92:	460d      	mov	r5, r1
 800dd94:	b921      	cbnz	r1, 800dda0 <_realloc_r+0x16>
 800dd96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9a:	4611      	mov	r1, r2
 800dd9c:	f7fd bc90 	b.w	800b6c0 <_malloc_r>
 800dda0:	b92a      	cbnz	r2, 800ddae <_realloc_r+0x24>
 800dda2:	f7fd fc19 	bl	800b5d8 <_free_r>
 800dda6:	4625      	mov	r5, r4
 800dda8:	4628      	mov	r0, r5
 800ddaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddae:	f000 f86b 	bl	800de88 <_malloc_usable_size_r>
 800ddb2:	4284      	cmp	r4, r0
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	d802      	bhi.n	800ddbe <_realloc_r+0x34>
 800ddb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddbc:	d8f4      	bhi.n	800dda8 <_realloc_r+0x1e>
 800ddbe:	4621      	mov	r1, r4
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	f7fd fc7d 	bl	800b6c0 <_malloc_r>
 800ddc6:	4680      	mov	r8, r0
 800ddc8:	b908      	cbnz	r0, 800ddce <_realloc_r+0x44>
 800ddca:	4645      	mov	r5, r8
 800ddcc:	e7ec      	b.n	800dda8 <_realloc_r+0x1e>
 800ddce:	42b4      	cmp	r4, r6
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	bf28      	it	cs
 800ddd6:	4632      	movcs	r2, r6
 800ddd8:	f7ff fc5c 	bl	800d694 <memcpy>
 800dddc:	4629      	mov	r1, r5
 800ddde:	4638      	mov	r0, r7
 800dde0:	f7fd fbfa 	bl	800b5d8 <_free_r>
 800dde4:	e7f1      	b.n	800ddca <_realloc_r+0x40>

0800dde6 <__ascii_wctomb>:
 800dde6:	4603      	mov	r3, r0
 800dde8:	4608      	mov	r0, r1
 800ddea:	b141      	cbz	r1, 800ddfe <__ascii_wctomb+0x18>
 800ddec:	2aff      	cmp	r2, #255	@ 0xff
 800ddee:	d904      	bls.n	800ddfa <__ascii_wctomb+0x14>
 800ddf0:	228a      	movs	r2, #138	@ 0x8a
 800ddf2:	601a      	str	r2, [r3, #0]
 800ddf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf8:	4770      	bx	lr
 800ddfa:	700a      	strb	r2, [r1, #0]
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	4770      	bx	lr

0800de00 <_raise_r>:
 800de00:	291f      	cmp	r1, #31
 800de02:	b538      	push	{r3, r4, r5, lr}
 800de04:	4605      	mov	r5, r0
 800de06:	460c      	mov	r4, r1
 800de08:	d904      	bls.n	800de14 <_raise_r+0x14>
 800de0a:	2316      	movs	r3, #22
 800de0c:	6003      	str	r3, [r0, #0]
 800de0e:	f04f 30ff 	mov.w	r0, #4294967295
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de16:	b112      	cbz	r2, 800de1e <_raise_r+0x1e>
 800de18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de1c:	b94b      	cbnz	r3, 800de32 <_raise_r+0x32>
 800de1e:	4628      	mov	r0, r5
 800de20:	f000 f830 	bl	800de84 <_getpid_r>
 800de24:	4622      	mov	r2, r4
 800de26:	4601      	mov	r1, r0
 800de28:	4628      	mov	r0, r5
 800de2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de2e:	f000 b817 	b.w	800de60 <_kill_r>
 800de32:	2b01      	cmp	r3, #1
 800de34:	d00a      	beq.n	800de4c <_raise_r+0x4c>
 800de36:	1c59      	adds	r1, r3, #1
 800de38:	d103      	bne.n	800de42 <_raise_r+0x42>
 800de3a:	2316      	movs	r3, #22
 800de3c:	6003      	str	r3, [r0, #0]
 800de3e:	2001      	movs	r0, #1
 800de40:	e7e7      	b.n	800de12 <_raise_r+0x12>
 800de42:	2100      	movs	r1, #0
 800de44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de48:	4620      	mov	r0, r4
 800de4a:	4798      	blx	r3
 800de4c:	2000      	movs	r0, #0
 800de4e:	e7e0      	b.n	800de12 <_raise_r+0x12>

0800de50 <raise>:
 800de50:	4b02      	ldr	r3, [pc, #8]	@ (800de5c <raise+0xc>)
 800de52:	4601      	mov	r1, r0
 800de54:	6818      	ldr	r0, [r3, #0]
 800de56:	f7ff bfd3 	b.w	800de00 <_raise_r>
 800de5a:	bf00      	nop
 800de5c:	20000040 	.word	0x20000040

0800de60 <_kill_r>:
 800de60:	b538      	push	{r3, r4, r5, lr}
 800de62:	4d07      	ldr	r5, [pc, #28]	@ (800de80 <_kill_r+0x20>)
 800de64:	2300      	movs	r3, #0
 800de66:	4604      	mov	r4, r0
 800de68:	4608      	mov	r0, r1
 800de6a:	4611      	mov	r1, r2
 800de6c:	602b      	str	r3, [r5, #0]
 800de6e:	f7f4 fe7b 	bl	8002b68 <_kill>
 800de72:	1c43      	adds	r3, r0, #1
 800de74:	d102      	bne.n	800de7c <_kill_r+0x1c>
 800de76:	682b      	ldr	r3, [r5, #0]
 800de78:	b103      	cbz	r3, 800de7c <_kill_r+0x1c>
 800de7a:	6023      	str	r3, [r4, #0]
 800de7c:	bd38      	pop	{r3, r4, r5, pc}
 800de7e:	bf00      	nop
 800de80:	20001040 	.word	0x20001040

0800de84 <_getpid_r>:
 800de84:	f7f4 be68 	b.w	8002b58 <_getpid>

0800de88 <_malloc_usable_size_r>:
 800de88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de8c:	1f18      	subs	r0, r3, #4
 800de8e:	2b00      	cmp	r3, #0
 800de90:	bfbc      	itt	lt
 800de92:	580b      	ldrlt	r3, [r1, r0]
 800de94:	18c0      	addlt	r0, r0, r3
 800de96:	4770      	bx	lr

0800de98 <_init>:
 800de98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9a:	bf00      	nop
 800de9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9e:	bc08      	pop	{r3}
 800dea0:	469e      	mov	lr, r3
 800dea2:	4770      	bx	lr

0800dea4 <_fini>:
 800dea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea6:	bf00      	nop
 800dea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deaa:	bc08      	pop	{r3}
 800deac:	469e      	mov	lr, r3
 800deae:	4770      	bx	lr
