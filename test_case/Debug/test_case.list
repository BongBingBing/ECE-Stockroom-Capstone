
test_case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d500  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a8c  0800d6d0  0800d6d0  0000e6d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e15c  0800e15c  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e15c  0800e15c  0000f15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e164  0800e164  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e164  0800e164  0000f164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e168  0800e168  0000f168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e16c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da4  200001f4  0800e360  000101f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f98  0800e360  00010f98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169d7  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e33  00000000  00000000  00026bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0002aa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f60  00000000  00000000  0002be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027342  00000000  00000000  0002cda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed7a  00000000  00000000  000540e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7573  00000000  00000000  00072e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0014a3cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f4  00000000  00000000  0014a458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00150c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d6b8 	.word	0x0800d6b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800d6b8 	.word	0x0800d6b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <getTare>:





uint32_t getTare(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	printf("Remove all weight from the drawer(5 seconds)\n\r");
 80010ca:	4815      	ldr	r0, [pc, #84]	@ (8001120 <getTare+0x5c>)
 80010cc:	f008 fd82 	bl	8009bd4 <iprintf>
	HAL_Delay(5000);
 80010d0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80010d4:	f001 fe0c 	bl	8002cf0 <HAL_Delay>
	printf("Gathering initial Tare of Load Cell...\n\r");
 80010d8:	4812      	ldr	r0, [pc, #72]	@ (8001124 <getTare+0x60>)
 80010da:	f008 fd7b 	bl	8009bd4 <iprintf>
	int weight_temp = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 1; i <= 4; i++){
 80010e2:	2301      	movs	r3, #1
 80010e4:	807b      	strh	r3, [r7, #2]
 80010e6:	e00e      	b.n	8001106 <getTare+0x42>
			weight_temp = (int)weighRaw();
 80010e8:	f001 f9c9 	bl	800247e <weighRaw>
 80010ec:	6078      	str	r0, [r7, #4]
			printf("Tare attempt %d: %d\n\r", i, weight_temp);
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4619      	mov	r1, r3
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <getTare+0x64>)
 80010f6:	f008 fd6d 	bl	8009bd4 <iprintf>
			HAL_Delay(10);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 fdf8 	bl	8002cf0 <HAL_Delay>
	for(uint16_t i = 1; i <= 4; i++){
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	3301      	adds	r3, #1
 8001104:	807b      	strh	r3, [r7, #2]
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d9ed      	bls.n	80010e8 <getTare+0x24>
		}
	printf("Tare Set: %d\n\r", weight_temp);
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4807      	ldr	r0, [pc, #28]	@ (800112c <getTare+0x68>)
 8001110:	f008 fd60 	bl	8009bd4 <iprintf>
	return weight_temp;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	0800d6d0 	.word	0x0800d6d0
 8001124:	0800d700 	.word	0x0800d700
 8001128:	0800d72c 	.word	0x0800d72c
 800112c:	0800d744 	.word	0x0800d744

08001130 <Calibrate>:

void Calibrate(){
 8001130:	b580      	push	{r7, lr}
 8001132:	b092      	sub	sp, #72	@ 0x48
 8001134:	af00      	add	r7, sp, #0
	printf("Beginning with Row: 1 Drawer: 1\n\r");
 8001136:	4898      	ldr	r0, [pc, #608]	@ (8001398 <Calibrate+0x268>)
 8001138:	f008 fd4c 	bl	8009bd4 <iprintf>

	uint32_t tare = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
	int knownHX711 = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t thresh = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28

	f_unlink("drwConf.txt"); //deletes the original file
 8001148:	4894      	ldr	r0, [pc, #592]	@ (800139c <Calibrate+0x26c>)
 800114a:	f007 fb50 	bl	80087ee <f_unlink>
	f_unlink("tmpConf.txt"); //deletes the original file
 800114e:	4894      	ldr	r0, [pc, #592]	@ (80013a0 <Calibrate+0x270>)
 8001150:	f007 fb4d 	bl	80087ee <f_unlink>


	for(int i = 1; i <= 4; i++){
 8001154:	2301      	movs	r3, #1
 8001156:	647b      	str	r3, [r7, #68]	@ 0x44
 8001158:	e114      	b.n	8001384 <Calibrate+0x254>

		uint16_t A_mast = MuxCombos[i-1].A;
 800115a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	4991      	ldr	r1, [pc, #580]	@ (80013a4 <Calibrate+0x274>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	440b      	add	r3, r1
 8001168:	3302      	adds	r3, #2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	84fb      	strh	r3, [r7, #38]	@ 0x26
		uint16_t B_mast = MuxCombos[i-1].B;
 800116e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001170:	1e5a      	subs	r2, r3, #1
 8001172:	498c      	ldr	r1, [pc, #560]	@ (80013a4 <Calibrate+0x274>)
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	440b      	add	r3, r1
 800117c:	3301      	adds	r3, #1
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t C_mast = MuxCombos[i-1].C;
 8001182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001184:	1e5a      	subs	r2, r3, #1
 8001186:	4987      	ldr	r1, [pc, #540]	@ (80013a4 <Calibrate+0x274>)
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	440b      	add	r3, r1
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	847b      	strh	r3, [r7, #34]	@ 0x22

		muxSET(A_mast, B_mast, C_mast, 1);
 8001194:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001196:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001198:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800119a:	2301      	movs	r3, #1
 800119c:	f000 ffdc 	bl	8002158 <muxSET>

		setRelay(i);
 80011a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 f81f 	bl	80021e8 <setRelay>

		if(i == 1){
 80011aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d173      	bne.n	8001298 <Calibrate+0x168>
			for(int j = 1; j <= 4; j++){
 80011b0:	2301      	movs	r3, #1
 80011b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80011b4:	e06c      	b.n	8001290 <Calibrate+0x160>

				uint16_t A_slave = MuxCombos[j-1].A;
 80011b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011b8:	1e5a      	subs	r2, r3, #1
 80011ba:	497a      	ldr	r1, [pc, #488]	@ (80013a4 <Calibrate+0x274>)
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	3302      	adds	r3, #2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	827b      	strh	r3, [r7, #18]
				uint16_t B_slave = MuxCombos[j-1].B;
 80011ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	4975      	ldr	r1, [pc, #468]	@ (80013a4 <Calibrate+0x274>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	3301      	adds	r3, #1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	823b      	strh	r3, [r7, #16]
				uint16_t C_slave = MuxCombos[j-1].C;
 80011de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	4970      	ldr	r1, [pc, #448]	@ (80013a4 <Calibrate+0x274>)
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	81fb      	strh	r3, [r7, #14]

				muxSET(A_slave, B_slave, C_slave, 0);
 80011f0:	89fa      	ldrh	r2, [r7, #14]
 80011f2:	8a39      	ldrh	r1, [r7, #16]
 80011f4:	8a78      	ldrh	r0, [r7, #18]
 80011f6:	2300      	movs	r3, #0
 80011f8:	f000 ffae 	bl	8002158 <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, j);
 80011fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001200:	4869      	ldr	r0, [pc, #420]	@ (80013a8 <Calibrate+0x278>)
 8001202:	f008 fce7 	bl	8009bd4 <iprintf>
				tare = getTare();
 8001206:	f7ff ff5d 	bl	80010c4 <getTare>
 800120a:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button once when ready to calibrate\n\r");
 800120c:	4867      	ldr	r0, [pc, #412]	@ (80013ac <Calibrate+0x27c>)
 800120e:	f008 fce1 	bl	8009bd4 <iprintf>

				//single press confirmation here

				singlePress(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 8001212:	2104      	movs	r1, #4
 8001214:	4866      	ldr	r0, [pc, #408]	@ (80013b0 <Calibrate+0x280>)
 8001216:	f000 ff85 	bl	8002124 <singlePress>

				knownHX711 = weighRawTare(tare);
 800121a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800121c:	f001 f969 	bl	80024f2 <weighRawTare>
 8001220:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8001222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001224:	4863      	ldr	r0, [pc, #396]	@ (80013b4 <Calibrate+0x284>)
 8001226:	f008 fcd5 	bl	8009bd4 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 800122a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800122c:	4618      	mov	r0, r3
 800122e:	f001 f9a3 	bl	8002578 <getCalFactor>
 8001232:	ed87 0a02 	vstr	s0, [r7, #8]

				for(int p = 0; p < 4; p++){
 8001236:	2300      	movs	r3, #0
 8001238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800123a:	e010      	b.n	800125e <Calibrate+0x12e>
					int weight = weigh(tare, calFactor);
 800123c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001240:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001242:	f001 f8cd 	bl	80023e0 <weigh>
 8001246:	6078      	str	r0, [r7, #4]
					printf("Weight: %d\n\r", weight);
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	485b      	ldr	r0, [pc, #364]	@ (80013b8 <Calibrate+0x288>)
 800124c:	f008 fcc2 	bl	8009bd4 <iprintf>
					HAL_Delay(400);
 8001250:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001254:	f001 fd4c 	bl	8002cf0 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800125a:	3301      	adds	r3, #1
 800125c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800125e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001260:	2b03      	cmp	r3, #3
 8001262:	ddeb      	ble.n	800123c <Calibrate+0x10c>
				}

				thresh = refillDrawer(tare, calFactor);
 8001264:	ed97 0a02 	vldr	s0, [r7, #8]
 8001268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800126a:	f000 f8f3 	bl	8001454 <refillDrawer>
 800126e:	4603      	mov	r3, r0
 8001270:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 8001272:	f000 fc11 	bl	8001a98 <SD_init>

				saveDrawerConfig(i, j, calFactor, tare, thresh);
 8001276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001278:	b298      	uxth	r0, r3
 800127a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800127c:	b299      	uxth	r1, r3
 800127e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001282:	ed97 0a02 	vldr	s0, [r7, #8]
 8001286:	f000 fc43 	bl	8001b10 <saveDrawerConfig>
			for(int j = 1; j <= 4; j++){
 800128a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800128c:	3301      	adds	r3, #1
 800128e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001292:	2b04      	cmp	r3, #4
 8001294:	dd8f      	ble.n	80011b6 <Calibrate+0x86>
 8001296:	e072      	b.n	800137e <Calibrate+0x24e>
			}
		}
		else{
			for(int k = 1; k <= 7; k++){
 8001298:	2301      	movs	r3, #1
 800129a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800129c:	e06c      	b.n	8001378 <Calibrate+0x248>

				uint16_t A_slave = MuxCombos[k-1].A;
 800129e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	4940      	ldr	r1, [pc, #256]	@ (80013a4 <Calibrate+0x274>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	3302      	adds	r3, #2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	843b      	strh	r3, [r7, #32]
				uint16_t B_slave = MuxCombos[k-1].B;
 80012b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012b4:	1e5a      	subs	r2, r3, #1
 80012b6:	493b      	ldr	r1, [pc, #236]	@ (80013a4 <Calibrate+0x274>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	440b      	add	r3, r1
 80012c0:	3301      	adds	r3, #1
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	83fb      	strh	r3, [r7, #30]
				uint16_t C_slave = MuxCombos[k-1].C;
 80012c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	4936      	ldr	r1, [pc, #216]	@ (80013a4 <Calibrate+0x274>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	83bb      	strh	r3, [r7, #28]

				muxSET(A_slave, B_slave, C_slave, 0);
 80012d8:	8bba      	ldrh	r2, [r7, #28]
 80012da:	8bf9      	ldrh	r1, [r7, #30]
 80012dc:	8c38      	ldrh	r0, [r7, #32]
 80012de:	2300      	movs	r3, #0
 80012e0:	f000 ff3a 	bl	8002158 <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, k);
 80012e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80012e8:	482f      	ldr	r0, [pc, #188]	@ (80013a8 <Calibrate+0x278>)
 80012ea:	f008 fc73 	bl	8009bd4 <iprintf>
				tare = getTare();
 80012ee:	f7ff fee9 	bl	80010c4 <getTare>
 80012f2:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button once when ready to calibrate\n\r");
 80012f4:	482d      	ldr	r0, [pc, #180]	@ (80013ac <Calibrate+0x27c>)
 80012f6:	f008 fc6d 	bl	8009bd4 <iprintf>

				//single press confirmation here
				singlePress(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 80012fa:	2104      	movs	r1, #4
 80012fc:	482c      	ldr	r0, [pc, #176]	@ (80013b0 <Calibrate+0x280>)
 80012fe:	f000 ff11 	bl	8002124 <singlePress>

				knownHX711 = weighRawTare(tare);
 8001302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001304:	f001 f8f5 	bl	80024f2 <weighRawTare>
 8001308:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 800130a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800130c:	4829      	ldr	r0, [pc, #164]	@ (80013b4 <Calibrate+0x284>)
 800130e:	f008 fc61 	bl	8009bd4 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001314:	4618      	mov	r0, r3
 8001316:	f001 f92f 	bl	8002578 <getCalFactor>
 800131a:	ed87 0a06 	vstr	s0, [r7, #24]

				for(int p = 0; p < 4; p++){
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	@ 0x34
 8001322:	e010      	b.n	8001346 <Calibrate+0x216>
					int weight = weigh(tare, calFactor);
 8001324:	ed97 0a06 	vldr	s0, [r7, #24]
 8001328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800132a:	f001 f859 	bl	80023e0 <weigh>
 800132e:	6178      	str	r0, [r7, #20]
					printf("Weight: %d\n\r", weight);
 8001330:	6979      	ldr	r1, [r7, #20]
 8001332:	4821      	ldr	r0, [pc, #132]	@ (80013b8 <Calibrate+0x288>)
 8001334:	f008 fc4e 	bl	8009bd4 <iprintf>
					HAL_Delay(400);
 8001338:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800133c:	f001 fcd8 	bl	8002cf0 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001342:	3301      	adds	r3, #1
 8001344:	637b      	str	r3, [r7, #52]	@ 0x34
 8001346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001348:	2b03      	cmp	r3, #3
 800134a:	ddeb      	ble.n	8001324 <Calibrate+0x1f4>
				}

				thresh = refillDrawer(tare, calFactor);
 800134c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001352:	f000 f87f 	bl	8001454 <refillDrawer>
 8001356:	4603      	mov	r3, r0
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 800135a:	f000 fb9d 	bl	8001a98 <SD_init>

				saveDrawerConfig(i, k, calFactor, tare, thresh);
 800135e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001360:	b298      	uxth	r0, r3
 8001362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001364:	b299      	uxth	r1, r3
 8001366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800136a:	ed97 0a06 	vldr	s0, [r7, #24]
 800136e:	f000 fbcf 	bl	8001b10 <saveDrawerConfig>
			for(int k = 1; k <= 7; k++){
 8001372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001374:	3301      	adds	r3, #1
 8001376:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800137a:	2b07      	cmp	r3, #7
 800137c:	dd8f      	ble.n	800129e <Calibrate+0x16e>
	for(int i = 1; i <= 4; i++){
 800137e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001380:	3301      	adds	r3, #1
 8001382:	647b      	str	r3, [r7, #68]	@ 0x44
 8001384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001386:	2b04      	cmp	r3, #4
 8001388:	f77f aee7 	ble.w	800115a <Calibrate+0x2a>

			}
		}
	}
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3748      	adds	r7, #72	@ 0x48
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	0800d754 	.word	0x0800d754
 800139c:	0800d778 	.word	0x0800d778
 80013a0:	0800d784 	.word	0x0800d784
 80013a4:	0800dc20 	.word	0x0800dc20
 80013a8:	0800d790 	.word	0x0800d790
 80013ac:	0800d7a8 	.word	0x0800d7a8
 80013b0:	40020400 	.word	0x40020400
 80013b4:	0800d804 	.word	0x0800d804
 80013b8:	0800d818 	.word	0x0800d818
 80013bc:	00000000 	.word	0x00000000

080013c0 <getThresh>:

uint32_t DP_Threshold = 2000; // 2 second threshold
uint32_t press_time = 0;  // Timestamp of the first press
uint8_t press_count = 0;  // A Flag that's used for indicating a second press

uint32_t getThresh(uint32_t tare, float calFactor){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	ed87 0a00 	vstr	s0, [r7]
	uint32_t sum = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
	float avg = 0;
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < 4; i++){
 80013d6:	2300      	movs	r3, #0
 80013d8:	827b      	strh	r3, [r7, #18]
 80013da:	e00d      	b.n	80013f8 <getThresh+0x38>
		uint16_t weight = weigh(tare, calFactor);
 80013dc:	ed97 0a00 	vldr	s0, [r7]
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fffd 	bl	80023e0 <weigh>
 80013e6:	4603      	mov	r3, r0
 80013e8:	817b      	strh	r3, [r7, #10]
		sum += weight;
 80013ea:	897b      	ldrh	r3, [r7, #10]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	4413      	add	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < 4; i++){
 80013f2:	8a7b      	ldrh	r3, [r7, #18]
 80013f4:	3301      	adds	r3, #1
 80013f6:	827b      	strh	r3, [r7, #18]
 80013f8:	8a7b      	ldrh	r3, [r7, #18]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d9ee      	bls.n	80013dc <getThresh+0x1c>
	}

	avg = sum / 4.0;
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff f8a0 	bl	8000544 <__aeabi_ui2d>
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <getThresh+0x90>)
 800140a:	f7ff fa3f 	bl	800088c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fc07 	bl	8000c28 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	60fb      	str	r3, [r7, #12]

	return (avg * 0.1); //returns 10% of the normalized weight as the threshold
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff f8b2 	bl	8000588 <__aeabi_f2d>
 8001424:	a308      	add	r3, pc, #32	@ (adr r3, 8001448 <getThresh+0x88>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff f905 	bl	8000638 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fbd7 	bl	8000be8 <__aeabi_d2uiz>
 800143a:	4603      	mov	r3, r0

}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	f3af 8000 	nop.w
 8001448:	9999999a 	.word	0x9999999a
 800144c:	3fb99999 	.word	0x3fb99999
 8001450:	40100000 	.word	0x40100000

08001454 <refillDrawer>:



int refillDrawer(uint32_t tare, float calFactor){
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	ed87 0a00 	vstr	s0, [r7]
	printf("Please refill the current drawer\n\rPress the button twice when ready\n\r");
 8001460:	480a      	ldr	r0, [pc, #40]	@ (800148c <refillDrawer+0x38>)
 8001462:	f008 fbb7 	bl	8009bd4 <iprintf>

	//function to wait for a double press then a confirmation press
	doublePress(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 8001466:	2104      	movs	r1, #4
 8001468:	4809      	ldr	r0, [pc, #36]	@ (8001490 <refillDrawer+0x3c>)
 800146a:	f000 fe19 	bl	80020a0 <doublePress>

	uint32_t thresh = getThresh(tare, calFactor);
 800146e:	ed97 0a00 	vldr	s0, [r7]
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa4 	bl	80013c0 <getThresh>
 8001478:	60f8      	str	r0, [r7, #12]
	printf("Threshold set to %ld\n\r", thresh);
 800147a:	68f9      	ldr	r1, [r7, #12]
 800147c:	4805      	ldr	r0, [pc, #20]	@ (8001494 <refillDrawer+0x40>)
 800147e:	f008 fba9 	bl	8009bd4 <iprintf>
	return thresh;
 8001482:	68fb      	ldr	r3, [r7, #12]


}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	0800d828 	.word	0x0800d828
 8001490:	40020400 	.word	0x40020400
 8001494:	0800d870 	.word	0x0800d870

08001498 <main_function>:
#include <manager_weight.h>
#include <manager_relay.h>



void main_function(){
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b099      	sub	sp, #100	@ 0x64
 800149c:	af00      	add	r7, sp, #0


	struct drawerInfo drawerInst;
	uint32_t tare = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	64bb      	str	r3, [r7, #72]	@ 0x48
	float calFactor = 1;
 80014a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014a6:	647b      	str	r3, [r7, #68]	@ 0x44
	int thresh;

	uint32_t sum;
	uint16_t normalizedWeight;

	for(uint16_t i = 1; i <= 4; i++){
 80014a8:	2301      	movs	r3, #1
 80014aa:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80014ae:	e14c      	b.n	800174a <main_function+0x2b2>
			printf("Row %d", i);
 80014b0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80014b4:	4619      	mov	r1, r3
 80014b6:	48aa      	ldr	r0, [pc, #680]	@ (8001760 <main_function+0x2c8>)
 80014b8:	f008 fb8c 	bl	8009bd4 <iprintf>

			uint16_t A_mast = MuxCombos[i-1].A;
 80014bc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	49a8      	ldr	r1, [pc, #672]	@ (8001764 <main_function+0x2cc>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	3302      	adds	r3, #2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			uint16_t B_mast = MuxCombos[i-1].B;
 80014d4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	49a2      	ldr	r1, [pc, #648]	@ (8001764 <main_function+0x2cc>)
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	3301      	adds	r3, #1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t C_mast = MuxCombos[i-1].C;
 80014ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	499c      	ldr	r1, [pc, #624]	@ (8001764 <main_function+0x2cc>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e

			muxSET(A_mast, B_mast, C_mast, 1);
 8001500:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001502:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8001506:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 800150a:	2301      	movs	r3, #1
 800150c:	f000 fe24 	bl	8002158 <muxSET>

			setRelay(i);
 8001510:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fe66 	bl	80021e8 <setRelay>

			if(i == 1){
 800151c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001520:	2b01      	cmp	r3, #1
 8001522:	f040 8089 	bne.w	8001638 <main_function+0x1a0>
				for(uint16_t j = 1; j <= 4; j++){
 8001526:	2301      	movs	r3, #1
 8001528:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800152c:	e07e      	b.n	800162c <main_function+0x194>

					sum = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[j-1].A;
 8001536:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	4989      	ldr	r1, [pc, #548]	@ (8001764 <main_function+0x2cc>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	440b      	add	r3, r1
 8001546:	3302      	adds	r3, #2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	857b      	strh	r3, [r7, #42]	@ 0x2a
					uint16_t B_slave = MuxCombos[j-1].B;
 800154c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	4984      	ldr	r1, [pc, #528]	@ (8001764 <main_function+0x2cc>)
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	440b      	add	r3, r1
 800155c:	3301      	adds	r3, #1
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	853b      	strh	r3, [r7, #40]	@ 0x28
					uint16_t C_slave = MuxCombos[j-1].C;
 8001562:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	497e      	ldr	r1, [pc, #504]	@ (8001764 <main_function+0x2cc>)
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	440b      	add	r3, r1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	84fb      	strh	r3, [r7, #38]	@ 0x26

					muxSET(A_slave, B_slave, C_slave, 0);
 8001576:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001578:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800157a:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 800157c:	2300      	movs	r3, #0
 800157e:	f000 fdeb 	bl	8002158 <muxSET>

					printf("Drawer %d", j);
 8001582:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001586:	4619      	mov	r1, r3
 8001588:	4877      	ldr	r0, [pc, #476]	@ (8001768 <main_function+0x2d0>)
 800158a:	f008 fb23 	bl	8009bd4 <iprintf>

					drawerInst = getFileInfo(i, j);
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8001596:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fc9e 	bl	8001edc <getFileInfo>

					tare = drawerInst.Tare;
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 80015a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80015ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b0:	ee17 3a90 	vmov	r3, s15
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 80015b6:	2300      	movs	r3, #0
 80015b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80015ba:	e010      	b.n	80015de <main_function+0x146>

						int weight = weigh(tare, calFactor);
 80015bc:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80015c0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80015c2:	f000 ff0d 	bl	80023e0 <weigh>
 80015c6:	6238      	str	r0, [r7, #32]
						sum += weight;
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80015cc:	4413      	add	r3, r2
 80015ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 80015d0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80015d4:	f001 fb8c 	bl	8002cf0 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 80015d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015da:	3301      	adds	r3, #1
 80015dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80015de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	ddeb      	ble.n	80015bc <main_function+0x124>
					}

					normalizedWeight = sum / 4;
 80015e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 80015ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ec:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 80015f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80015f2:	429a      	cmp	r2, r3
 80015f4:	db15      	blt.n	8001622 <main_function+0x18a>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 80015f6:	485d      	ldr	r0, [pc, #372]	@ (800176c <main_function+0x2d4>)
 80015f8:	f008 faec 	bl	8009bd4 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 80015fc:	485c      	ldr	r0, [pc, #368]	@ (8001770 <main_function+0x2d8>)
 80015fe:	f008 fae9 	bl	8009bd4 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 8001602:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001606:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001608:	f7ff ff24 	bl	8001454 <refillDrawer>
 800160c:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, j, calFactor, tare, thresh);
 800160e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001610:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8001614:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8001618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800161a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800161e:	f000 fb89 	bl	8001d34 <updateDrawerConfig>
				for(uint16_t j = 1; j <= 4; j++){
 8001622:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001626:	3301      	adds	r3, #1
 8001628:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800162c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001630:	2b04      	cmp	r3, #4
 8001632:	f67f af7c 	bls.w	800152e <main_function+0x96>
 8001636:	e083      	b.n	8001740 <main_function+0x2a8>


				}
			}
			else{
				for(int k = 1; k <= 7; k++){
 8001638:	2301      	movs	r3, #1
 800163a:	653b      	str	r3, [r7, #80]	@ 0x50
 800163c:	e07c      	b.n	8001738 <main_function+0x2a0>

					sum = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[k-1].A;
 8001646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	4946      	ldr	r1, [pc, #280]	@ (8001764 <main_function+0x2cc>)
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	440b      	add	r3, r1
 8001654:	3302      	adds	r3, #2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	877b      	strh	r3, [r7, #58]	@ 0x3a
					uint16_t B_slave = MuxCombos[k-1].B;
 800165a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	4941      	ldr	r1, [pc, #260]	@ (8001764 <main_function+0x2cc>)
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	440b      	add	r3, r1
 8001668:	3301      	adds	r3, #1
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	873b      	strh	r3, [r7, #56]	@ 0x38
					uint16_t C_slave = MuxCombos[k-1].C;
 800166e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	493c      	ldr	r1, [pc, #240]	@ (8001764 <main_function+0x2cc>)
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	440b      	add	r3, r1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	86fb      	strh	r3, [r7, #54]	@ 0x36

					muxSET(A_slave, B_slave, C_slave, 0);
 8001680:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001682:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8001684:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8001686:	2300      	movs	r3, #0
 8001688:	f000 fd66 	bl	8002158 <muxSET>

					printf("Drawer %d", k);
 800168c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800168e:	4836      	ldr	r0, [pc, #216]	@ (8001768 <main_function+0x2d0>)
 8001690:	f008 faa0 	bl	8009bd4 <iprintf>

					drawerInst = getFileInfo(i, k);
 8001694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001696:	b29a      	uxth	r2, r3
 8001698:	463b      	mov	r3, r7
 800169a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fc1c 	bl	8001edc <getFileInfo>
 80016a4:	f107 0410 	add.w	r4, r7, #16
 80016a8:	463b      	mov	r3, r7
 80016aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

					tare = drawerInst.Tare;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 80016b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c0:	ee17 3a90 	vmov	r3, s15
 80016c4:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 80016c6:	2300      	movs	r3, #0
 80016c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016ca:	e010      	b.n	80016ee <main_function+0x256>

						int weight = weigh(tare, calFactor);
 80016cc:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80016d0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80016d2:	f000 fe85 	bl	80023e0 <weigh>
 80016d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
						sum += weight;
 80016d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80016dc:	4413      	add	r3, r2
 80016de:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 80016e0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80016e4:	f001 fb04 	bl	8002cf0 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 80016e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016ea:	3301      	adds	r3, #1
 80016ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	ddeb      	ble.n	80016cc <main_function+0x234>
					}

					normalizedWeight = sum / 4;
 80016f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 80016fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016fc:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8001700:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001702:	429a      	cmp	r2, r3
 8001704:	db15      	blt.n	8001732 <main_function+0x29a>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 8001706:	4819      	ldr	r0, [pc, #100]	@ (800176c <main_function+0x2d4>)
 8001708:	f008 fa64 	bl	8009bd4 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 800170c:	4818      	ldr	r0, [pc, #96]	@ (8001770 <main_function+0x2d8>)
 800170e:	f008 fa61 	bl	8009bd4 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 8001712:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001716:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001718:	f7ff fe9c 	bl	8001454 <refillDrawer>
 800171c:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, k, calFactor, tare, thresh);
 800171e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001720:	b299      	uxth	r1, r3
 8001722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001724:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8001728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800172a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800172e:	f000 fb01 	bl	8001d34 <updateDrawerConfig>
				for(int k = 1; k <= 7; k++){
 8001732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001734:	3301      	adds	r3, #1
 8001736:	653b      	str	r3, [r7, #80]	@ 0x50
 8001738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800173a:	2b07      	cmp	r3, #7
 800173c:	f77f af7f 	ble.w	800163e <main_function+0x1a6>
	for(uint16_t i = 1; i <= 4; i++){
 8001740:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001744:	3301      	adds	r3, #1
 8001746:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800174a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800174e:	2b04      	cmp	r3, #4
 8001750:	f67f aeae 	bls.w	80014b0 <main_function+0x18>

				}
			}
	}

}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3764      	adds	r7, #100	@ 0x64
 800175a:	46bd      	mov	sp, r7
 800175c:	bd90      	pop	{r4, r7, pc}
 800175e:	bf00      	nop
 8001760:	0800d888 	.word	0x0800d888
 8001764:	0800dc20 	.word	0x0800dc20
 8001768:	0800d890 	.word	0x0800d890
 800176c:	0800d89c 	.word	0x0800d89c
 8001770:	0800d8d8 	.word	0x0800d8d8

08001774 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b5c      	ldr	r3, [pc, #368]	@ (8001900 <MX_GPIO_Init+0x18c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a5b      	ldr	r2, [pc, #364]	@ (8001900 <MX_GPIO_Init+0x18c>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <MX_GPIO_Init+0x18c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b55      	ldr	r3, [pc, #340]	@ (8001900 <MX_GPIO_Init+0x18c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a54      	ldr	r2, [pc, #336]	@ (8001900 <MX_GPIO_Init+0x18c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b52      	ldr	r3, [pc, #328]	@ (8001900 <MX_GPIO_Init+0x18c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001900 <MX_GPIO_Init+0x18c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001900 <MX_GPIO_Init+0x18c>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001900 <MX_GPIO_Init+0x18c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <MX_GPIO_Init+0x18c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a46      	ldr	r2, [pc, #280]	@ (8001900 <MX_GPIO_Init+0x18c>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b44      	ldr	r3, [pc, #272]	@ (8001900 <MX_GPIO_Init+0x18c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SLAVE_C_Pin|SLAVE_B_Pin|REL_1_Pin|REL_3_Pin
 80017fa:	2200      	movs	r2, #0
 80017fc:	f641 4103 	movw	r1, #7171	@ 0x1c03
 8001800:	4840      	ldr	r0, [pc, #256]	@ (8001904 <MX_GPIO_Init+0x190>)
 8001802:	f001 fd2b 	bl	800325c <HAL_GPIO_WritePin>
                          |REL_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAST_A_Pin|MAST_B_Pin|MAST_C_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2113      	movs	r1, #19
 800180a:	483f      	ldr	r0, [pc, #252]	@ (8001908 <MX_GPIO_Init+0x194>)
 800180c:	f001 fd26 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLAVE_A_Pin|SCK_DRW_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f240 4101 	movw	r1, #1025	@ 0x401
 8001816:	483d      	ldr	r0, [pc, #244]	@ (800190c <MX_GPIO_Init+0x198>)
 8001818:	f001 fd20 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001822:	4839      	ldr	r0, [pc, #228]	@ (8001908 <MX_GPIO_Init+0x194>)
 8001824:	f001 fd1a 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	2104      	movs	r1, #4
 800182c:	4838      	ldr	r0, [pc, #224]	@ (8001910 <MX_GPIO_Init+0x19c>)
 800182e:	f001 fd15 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLAVE_C_Pin SLAVE_B_Pin REL_1_Pin REL_3_Pin
                           REL_2_Pin */
  GPIO_InitStruct.Pin = SLAVE_C_Pin|SLAVE_B_Pin|REL_1_Pin|REL_3_Pin
 8001832:	f641 4303 	movw	r3, #7171	@ 0x1c03
 8001836:	617b      	str	r3, [r7, #20]
                          |REL_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	482e      	ldr	r0, [pc, #184]	@ (8001904 <MX_GPIO_Init+0x190>)
 800184c:	f001 fb5a 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAST_A_Pin MAST_B_Pin MAST_C_Pin */
  GPIO_InitStruct.Pin = MAST_A_Pin|MAST_B_Pin|MAST_C_Pin;
 8001850:	2313      	movs	r3, #19
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	4828      	ldr	r0, [pc, #160]	@ (8001908 <MX_GPIO_Init+0x194>)
 8001868:	f001 fb4c 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLAVE_A_Pin SCK_DRW_Pin */
  GPIO_InitStruct.Pin = SLAVE_A_Pin|SCK_DRW_Pin;
 800186c:	f240 4301 	movw	r3, #1025	@ 0x401
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4821      	ldr	r0, [pc, #132]	@ (800190c <MX_GPIO_Init+0x198>)
 8001886:	f001 fb3d 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BTN_Pin CONFIRM_BTN_Pin */
  GPIO_InitStruct.Pin = RESET_BTN_Pin|CONFIRM_BTN_Pin;
 800188a:	2306      	movs	r3, #6
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	481b      	ldr	r0, [pc, #108]	@ (800190c <MX_GPIO_Init+0x198>)
 800189e:	f001 fb31 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAT_IN_Pin */
  GPIO_InitStruct.Pin = DAT_IN_Pin;
 80018a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAT_IN_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4814      	ldr	r0, [pc, #80]	@ (8001908 <MX_GPIO_Init+0x194>)
 80018b8:	f001 fb24 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80018bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <MX_GPIO_Init+0x194>)
 80018d6:	f001 fb15 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : REL_4_Pin */
  GPIO_InitStruct.Pin = REL_4_Pin;
 80018da:	2304      	movs	r3, #4
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(REL_4_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	@ (8001910 <MX_GPIO_Init+0x19c>)
 80018f2:	f001 fb07 	bl	8002f04 <HAL_GPIO_Init>

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	@ 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40020800 	.word	0x40020800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	40020c00 	.word	0x40020c00

08001914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	//disables internal buffering for input stream for scanf
	setvbuf(stdin, NULL, _IONBF, 0);
 8001918:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <main+0x90>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6858      	ldr	r0, [r3, #4]
 800191e:	2300      	movs	r3, #0
 8001920:	2202      	movs	r2, #2
 8001922:	2100      	movs	r1, #0
 8001924:	f008 f9c6 	bl	8009cb4 <setvbuf>

	/* Configure the system clock */
	SystemClock_Config();
 8001928:	f000 f844 	bl	80019b4 <SystemClock_Config>

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800192c:	f001 f96e 	bl	8002c0c <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001930:	f7ff ff20 	bl	8001774 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001934:	f001 f8ce 	bl	8002ad4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001938:	f001 f860 	bl	80029fc <MX_TIM2_Init>
  MX_FATFS_Init();
 800193c:	f003 fe40 	bl	80055c0 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001940:	f000 fe3e 	bl	80025c0 <MX_SPI1_Init>

	printf("Hello from STM32 UART!\n\r");
 8001944:	4818      	ldr	r0, [pc, #96]	@ (80019a8 <main+0x94>)
 8001946:	f008 f945 	bl	8009bd4 <iprintf>

	HAL_TIM_Base_Start(&htim2);
 800194a:	4818      	ldr	r0, [pc, #96]	@ (80019ac <main+0x98>)
 800194c:	f002 fea4 	bl	8004698 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001956:	4816      	ldr	r0, [pc, #88]	@ (80019b0 <main+0x9c>)
 8001958:	f001 fc80 	bl	800325c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800195c:	200a      	movs	r0, #10
 800195e:	f001 f9c7 	bl	8002cf0 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001968:	4811      	ldr	r0, [pc, #68]	@ (80019b0 <main+0x9c>)
 800196a:	f001 fc77 	bl	800325c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800196e:	200a      	movs	r0, #10
 8001970:	f001 f9be 	bl	8002cf0 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001974:	f001 f94a 	bl	8002c0c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001978:	f000 f81c 	bl	80019b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197c:	f7ff fefa 	bl	8001774 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001980:	f001 f83c 	bl	80029fc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001984:	f001 f8a6 	bl	8002ad4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001988:	f003 fe1a 	bl	80055c0 <MX_FATFS_Init>
  MX_SPI1_Init();
 800198c:	f000 fe18 	bl	80025c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001990:	f000 fe4c 	bl	800262c <MX_SPI2_Init>
//
//		HAL_Delay(1000);
//
//  }

  Calibrate();
 8001994:	f7ff fbcc 	bl	8001130 <Calibrate>
  main_function();
 8001998:	f7ff fd7e 	bl	8001498 <main_function>
 800199c:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000038 	.word	0x20000038
 80019a8:	0800d908 	.word	0x0800d908
 80019ac:	20000d70 	.word	0x20000d70
 80019b0:	40020400 	.word	0x40020400

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	@ 0x50
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	2234      	movs	r2, #52	@ 0x34
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f008 fb56 	bl	800a074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <SystemClock_Config+0xd0>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a28      	ldr	r2, [pc, #160]	@ (8001a84 <SystemClock_Config+0xd0>)
 80019e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e8:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <SystemClock_Config+0xd0>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019f4:	2300      	movs	r3, #0
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <SystemClock_Config+0xd4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a00:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <SystemClock_Config+0xd4>)
 8001a02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <SystemClock_Config+0xd4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a20:	2302      	movs	r3, #2
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001a2c:	2340      	movs	r3, #64	@ 0x40
 8001a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fee9 	bl	8003818 <HAL_RCC_OscConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a4c:	f000 f81e 	bl	8001a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a50:	230f      	movs	r3, #15
 8001a52:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a54:	2302      	movs	r3, #2
 8001a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fc0f 	bl	8003290 <HAL_RCC_ClockConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a78:	f000 f808 	bl	8001a8c <Error_Handler>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3750      	adds	r7, #80	@ 0x50
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <Error_Handler+0x8>

08001a98 <SD_init>:

static char buffer[MAX_FILELINE];
BYTE previousLine[MAX_FILELINE];


void  SD_init(){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4916      	ldr	r1, [pc, #88]	@ (8001afc <SD_init+0x64>)
 8001aa2:	4817      	ldr	r0, [pc, #92]	@ (8001b00 <SD_init+0x68>)
 8001aa4:	f006 f892 	bl	8007bcc <f_mount>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <SD_init+0x6c>)
 8001aae:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <SD_init+0x6c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <SD_init+0x30>
		printf("f_mount error (%i)\r\n", fres);
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <SD_init+0x6c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4812      	ldr	r0, [pc, #72]	@ (8001b08 <SD_init+0x70>)
 8001ac0:	f008 f888 	bl	8009bd4 <iprintf>
		while(1);
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <SD_init+0x2c>
	//Let's get some statistics from the SD card
	DWORD free_clusters;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8001ac8:	463a      	mov	r2, r7
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	480b      	ldr	r0, [pc, #44]	@ (8001afc <SD_init+0x64>)
 8001ad0:	f006 fdd8 	bl	8008684 <f_getfree>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <SD_init+0x6c>)
 8001ada:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <SD_init+0x6c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <SD_init+0x5c>
		printf("f_getfree error (%i)\r\n", fres);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <SD_init+0x6c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4808      	ldr	r0, [pc, #32]	@ (8001b0c <SD_init+0x74>)
 8001aec:	f008 f872 	bl	8009bd4 <iprintf>
		while(1);
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <SD_init+0x58>
	}

}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	0800d93c 	.word	0x0800d93c
 8001b00:	20000210 	.word	0x20000210
 8001b04:	200008a0 	.word	0x200008a0
 8001b08:	0800d940 	.word	0x0800d940
 8001b0c:	0800d958 	.word	0x0800d958

08001b10 <saveDrawerConfig>:

void saveDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b08c      	sub	sp, #48	@ 0x30
 8001b14:	af06      	add	r7, sp, #24
 8001b16:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4603      	mov	r3, r0
 8001b20:	81fb      	strh	r3, [r7, #14]
 8001b22:	460b      	mov	r3, r1
 8001b24:	81bb      	strh	r3, [r7, #12]

	UINT bytesWrote;

	//f_unlink((TCHAR*)filename); //deletes the original file

	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND | FA_CREATE_NEW);
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <saveDrawerConfig+0xe4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2236      	movs	r2, #54	@ 0x36
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4832      	ldr	r0, [pc, #200]	@ (8001bf8 <saveDrawerConfig+0xe8>)
 8001b30:	f006 f892 	bl	8007c58 <f_open>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <saveDrawerConfig+0xec>)
 8001b3a:	701a      	strb	r2, [r3, #0]

	if(fres == FR_EXIST){
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <saveDrawerConfig+0xec>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d116      	bne.n	8001b72 <saveDrawerConfig+0x62>
				fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND);
 8001b44:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <saveDrawerConfig+0xe4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2232      	movs	r2, #50	@ 0x32
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	482a      	ldr	r0, [pc, #168]	@ (8001bf8 <saveDrawerConfig+0xe8>)
 8001b4e:	f006 f883 	bl	8007c58 <f_open>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <saveDrawerConfig+0xec>)
 8001b58:	701a      	strb	r2, [r3, #0]
				if(fres != FR_OK){
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <saveDrawerConfig+0xec>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d017      	beq.n	8001b92 <saveDrawerConfig+0x82>
					printf("f_write error (%i) IN saveDrawerConfig\r\n", fres);
 8001b62:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <saveDrawerConfig+0xec>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4825      	ldr	r0, [pc, #148]	@ (8001c00 <saveDrawerConfig+0xf0>)
 8001b6a:	f008 f833 	bl	8009bd4 <iprintf>
					while(1);
 8001b6e:	bf00      	nop
 8001b70:	e7fd      	b.n	8001b6e <saveDrawerConfig+0x5e>
				}
	}
	else if(fres == FR_OK){
 8001b72:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <saveDrawerConfig+0xec>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d103      	bne.n	8001b82 <saveDrawerConfig+0x72>
		printf("Created new file");
 8001b7a:	4822      	ldr	r0, [pc, #136]	@ (8001c04 <saveDrawerConfig+0xf4>)
 8001b7c:	f008 f82a 	bl	8009bd4 <iprintf>
 8001b80:	e007      	b.n	8001b92 <saveDrawerConfig+0x82>
	}
	else {
		printf("f_open error (%i) IN saveDrawerConfig\r\n", fres);
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <saveDrawerConfig+0xec>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	481f      	ldr	r0, [pc, #124]	@ (8001c08 <saveDrawerConfig+0xf8>)
 8001b8a:	f008 f823 	bl	8009bd4 <iprintf>
		while(1);
 8001b8e:	bf00      	nop
 8001b90:	e7fd      	b.n	8001b8e <saveDrawerConfig+0x7e>
	}

	snprintf((char*)buffer, sizeof(buffer),"Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld\n", row, drawer, calFactor, Tare, thresh);
 8001b92:	89fd      	ldrh	r5, [r7, #14]
 8001b94:	89bc      	ldrh	r4, [r7, #12]
 8001b96:	68b8      	ldr	r0, [r7, #8]
 8001b98:	f7fe fcf6 	bl	8000588 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	6839      	ldr	r1, [r7, #0]
 8001ba2:	9105      	str	r1, [sp, #20]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	9104      	str	r1, [sp, #16]
 8001ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bac:	9400      	str	r4, [sp, #0]
 8001bae:	462b      	mov	r3, r5
 8001bb0:	4a16      	ldr	r2, [pc, #88]	@ (8001c0c <saveDrawerConfig+0xfc>)
 8001bb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bb6:	4816      	ldr	r0, [pc, #88]	@ (8001c10 <saveDrawerConfig+0x100>)
 8001bb8:	f008 f930 	bl	8009e1c <sniprintf>
	fres = f_write(&fil, buffer, strlen(buffer), &bytesWrote);
 8001bbc:	4814      	ldr	r0, [pc, #80]	@ (8001c10 <saveDrawerConfig+0x100>)
 8001bbe:	f7fe fb77 	bl	80002b0 <strlen>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4911      	ldr	r1, [pc, #68]	@ (8001c10 <saveDrawerConfig+0x100>)
 8001bca:	480b      	ldr	r0, [pc, #44]	@ (8001bf8 <saveDrawerConfig+0xe8>)
 8001bcc:	f006 fb3d 	bl	800824a <f_write>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <saveDrawerConfig+0xec>)
 8001bd6:	701a      	strb	r2, [r3, #0]
	printf("Wrote %i bytes to %s\r\n", bytesWrote,filename);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <saveDrawerConfig+0xe4>)
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <saveDrawerConfig+0x104>)
 8001be2:	f007 fff7 	bl	8009bd4 <iprintf>


	f_close(&fil);
 8001be6:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <saveDrawerConfig+0xe8>)
 8001be8:	f006 fd22 	bl	8008630 <f_close>

}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000440 	.word	0x20000440
 8001bfc:	200008a0 	.word	0x200008a0
 8001c00:	0800d970 	.word	0x0800d970
 8001c04:	0800d99c 	.word	0x0800d99c
 8001c08:	0800d9b0 	.word	0x0800d9b0
 8001c0c:	0800d9d8 	.word	0x0800d9d8
 8001c10:	200008a4 	.word	0x200008a4
 8001c14:	0800da0c 	.word	0x0800da0c

08001c18 <getData>:

uint32_t getData(char* token){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i <= 1; i++){
 8001c20:	2300      	movs	r3, #0
 8001c22:	81fb      	strh	r3, [r7, #14]
 8001c24:	e011      	b.n	8001c4a <getData+0x32>
		char* temp_token = strtok(token, ":");
 8001c26:	490d      	ldr	r1, [pc, #52]	@ (8001c5c <getData+0x44>)
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f008 fa2b 	bl	800a084 <strtok>
 8001c2e:	60b8      	str	r0, [r7, #8]
		if(i == 1){
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d106      	bne.n	8001c44 <getData+0x2c>

			return strtol(temp_token, NULL, 10);
 8001c36:	220a      	movs	r2, #10
 8001c38:	2100      	movs	r1, #0
 8001c3a:	68b8      	ldr	r0, [r7, #8]
 8001c3c:	f007 f892 	bl	8008d64 <strtol>
 8001c40:	4603      	mov	r3, r0
 8001c42:	e006      	b.n	8001c52 <getData+0x3a>
	for(uint16_t i = 0; i <= 1; i++){
 8001c44:	89fb      	ldrh	r3, [r7, #14]
 8001c46:	3301      	adds	r3, #1
 8001c48:	81fb      	strh	r3, [r7, #14]
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d9ea      	bls.n	8001c26 <getData+0xe>
		}
	}
	return 0;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	0800da24 	.word	0x0800da24

08001c60 <getLineMarker>:

uint16_t getLineMarker(uint16_t row, uint16_t drawer){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	460a      	mov	r2, r1
 8001c6a:	80fb      	strh	r3, [r7, #6]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	80bb      	strh	r3, [r7, #4]

	fres = f_open(&fil, filename, FA_READ);
 8001c70:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <getLineMarker+0xb8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4619      	mov	r1, r3
 8001c78:	4828      	ldr	r0, [pc, #160]	@ (8001d1c <getLineMarker+0xbc>)
 8001c7a:	f005 ffed 	bl	8007c58 <f_open>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <getLineMarker+0xc0>)
 8001c84:	701a      	strb	r2, [r3, #0]
	uint16_t fileIndex = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (fres != FR_OK){
 8001c8a:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <getLineMarker+0xc0>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <getLineMarker+0x42>
		printf("f_open error (%i) IN getLineMarker\r\n", fres);
 8001c92:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <getLineMarker+0xc0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4822      	ldr	r0, [pc, #136]	@ (8001d24 <getLineMarker+0xc4>)
 8001c9a:	f007 ff9b 	bl	8009bd4 <iprintf>
		while(1);
 8001c9e:	bf00      	nop
 8001ca0:	e7fd      	b.n	8001c9e <getLineMarker+0x3e>
	}
	else{
		TCHAR* rres = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
		do{
			rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d1c <getLineMarker+0xbc>)
 8001ca8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cac:	481e      	ldr	r0, [pc, #120]	@ (8001d28 <getLineMarker+0xc8>)
 8001cae:	f006 ff42 	bl	8008b36 <f_gets>
 8001cb2:	6138      	str	r0, [r7, #16]

			//char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
			char* token = strtok(rres, ";");
 8001cb4:	491d      	ldr	r1, [pc, #116]	@ (8001d2c <getLineMarker+0xcc>)
 8001cb6:	6938      	ldr	r0, [r7, #16]
 8001cb8:	f008 f9e4 	bl	800a084 <strtok>
 8001cbc:	60f8      	str	r0, [r7, #12]

				for(uint16_t i = 0; i <= 1 ; i++){
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	82bb      	strh	r3, [r7, #20]
 8001cc2:	e00a      	b.n	8001cda <getLineMarker+0x7a>
					array[i] = getData(token);
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff ffa7 	bl	8001c18 <getData>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	8abb      	ldrh	r3, [r7, #20]
 8001cce:	b2d1      	uxtb	r1, r2
 8001cd0:	4a17      	ldr	r2, [pc, #92]	@ (8001d30 <getLineMarker+0xd0>)
 8001cd2:	54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i <= 1 ; i++){
 8001cd4:	8abb      	ldrh	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	82bb      	strh	r3, [r7, #20]
 8001cda:	8abb      	ldrh	r3, [r7, #20]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d9f1      	bls.n	8001cc4 <getLineMarker+0x64>
				}

			if(row == array[0] && drawer == array[1]){
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <getLineMarker+0xd0>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d107      	bne.n	8001cfc <getLineMarker+0x9c>
 8001cec:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <getLineMarker+0xd0>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <getLineMarker+0x9c>
					return fileIndex;
 8001cf8:	8afb      	ldrh	r3, [r7, #22]
 8001cfa:	e009      	b.n	8001d10 <getLineMarker+0xb0>
			}
			else{
				fileIndex++;
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	82fb      	strh	r3, [r7, #22]

			}
		}while(rres != 0);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ce      	bne.n	8001ca6 <getLineMarker+0x46>
	}
	f_close(&fil);
 8001d08:	4804      	ldr	r0, [pc, #16]	@ (8001d1c <getLineMarker+0xbc>)
 8001d0a:	f006 fc91 	bl	8008630 <f_close>
	return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000000 	.word	0x20000000
 8001d1c:	20000440 	.word	0x20000440
 8001d20:	200008a0 	.word	0x200008a0
 8001d24:	0800da28 	.word	0x0800da28
 8001d28:	200008a4 	.word	0x200008a4
 8001d2c:	0800da50 	.word	0x0800da50
 8001d30:	20000ca4 	.word	0x20000ca4

08001d34 <updateDrawerConfig>:

void updateDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){ //will need to add ID marker and compare if they are the same, if not then change both locations
 8001d34:	b5b0      	push	{r4, r5, r7, lr}
 8001d36:	b08e      	sub	sp, #56	@ 0x38
 8001d38:	af06      	add	r7, sp, #24
 8001d3a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4603      	mov	r3, r0
 8001d44:	81fb      	strh	r3, [r7, #14]
 8001d46:	460b      	mov	r3, r1
 8001d48:	81bb      	strh	r3, [r7, #12]

	fres = f_open(&fil, filename, FA_READ);
 8001d4a:	4b58      	ldr	r3, [pc, #352]	@ (8001eac <updateDrawerConfig+0x178>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4619      	mov	r1, r3
 8001d52:	4857      	ldr	r0, [pc, #348]	@ (8001eb0 <updateDrawerConfig+0x17c>)
 8001d54:	f005 ff80 	bl	8007c58 <f_open>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b55      	ldr	r3, [pc, #340]	@ (8001eb4 <updateDrawerConfig+0x180>)
 8001d5e:	701a      	strb	r2, [r3, #0]
	fres_temp = f_open(&fil_temp, temp_filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001d60:	4b55      	ldr	r3, [pc, #340]	@ (8001eb8 <updateDrawerConfig+0x184>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	221a      	movs	r2, #26
 8001d66:	4619      	mov	r1, r3
 8001d68:	4854      	ldr	r0, [pc, #336]	@ (8001ebc <updateDrawerConfig+0x188>)
 8001d6a:	f005 ff75 	bl	8007c58 <f_open>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b53      	ldr	r3, [pc, #332]	@ (8001ec0 <updateDrawerConfig+0x18c>)
 8001d74:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8001d76:	4b4f      	ldr	r3, [pc, #316]	@ (8001eb4 <updateDrawerConfig+0x180>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <updateDrawerConfig+0x5a>
		printf("f_open error (%i) IN updateDrawerConfig FOR filename\r\n", fres);
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb4 <updateDrawerConfig+0x180>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	484f      	ldr	r0, [pc, #316]	@ (8001ec4 <updateDrawerConfig+0x190>)
 8001d86:	f007 ff25 	bl	8009bd4 <iprintf>
		while(1);
 8001d8a:	bf00      	nop
 8001d8c:	e7fd      	b.n	8001d8a <updateDrawerConfig+0x56>
	}
	if (fres_temp != FR_OK){
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec0 <updateDrawerConfig+0x18c>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <updateDrawerConfig+0x72>
		printf("f_open error (%i) IN updateDrawerConfig FOR temp_filename\r\n", fres_temp);
 8001d96:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec0 <updateDrawerConfig+0x18c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	484a      	ldr	r0, [pc, #296]	@ (8001ec8 <updateDrawerConfig+0x194>)
 8001d9e:	f007 ff19 	bl	8009bd4 <iprintf>
		while(1);
 8001da2:	bf00      	nop
 8001da4:	e7fd      	b.n	8001da2 <updateDrawerConfig+0x6e>
	}

	UINT bytesWrote;

	bool keep_reading = true;
 8001da6:	2301      	movs	r3, #1
 8001da8:	77fb      	strb	r3, [r7, #31]
	uint16_t lineMarker = getLineMarker(row, drawer);
 8001daa:	89ba      	ldrh	r2, [r7, #12]
 8001dac:	89fb      	ldrh	r3, [r7, #14]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff55 	bl	8001c60 <getLineMarker>
 8001db6:	4603      	mov	r3, r0
 8001db8:	837b      	strh	r3, [r7, #26]
	uint16_t currentLine = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	83bb      	strh	r3, [r7, #28]
	do{

		TCHAR* rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8001dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8001eb0 <updateDrawerConfig+0x17c>)
 8001dc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dc4:	4841      	ldr	r0, [pc, #260]	@ (8001ecc <updateDrawerConfig+0x198>)
 8001dc6:	f006 feb6 	bl	8008b36 <f_gets>
 8001dca:	6178      	str	r0, [r7, #20]

		if(rres == 0) keep_reading = false;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <updateDrawerConfig+0xa4>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	77fb      	strb	r3, [r7, #31]
 8001dd6:	e04c      	b.n	8001e72 <updateDrawerConfig+0x13e>
		else if(currentLine == lineMarker){ //ID matching would go here, check if IDs match, if not then save previous line, update line, then search for original location of ID and replace that line
 8001dd8:	8bba      	ldrh	r2, [r7, #28]
 8001dda:	8b7b      	ldrh	r3, [r7, #26]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d12e      	bne.n	8001e3e <updateDrawerConfig+0x10a>
			snprintf((char*)buffer, MAX_FILELINE, "Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld", row, drawer, calFactor, Tare, thresh);
 8001de0:	89fd      	ldrh	r5, [r7, #14]
 8001de2:	89bc      	ldrh	r4, [r7, #12]
 8001de4:	68b8      	ldr	r0, [r7, #8]
 8001de6:	f7fe fbcf 	bl	8000588 <__aeabi_f2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	9105      	str	r1, [sp, #20]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	9104      	str	r1, [sp, #16]
 8001df6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dfa:	9400      	str	r4, [sp, #0]
 8001dfc:	462b      	mov	r3, r5
 8001dfe:	4a34      	ldr	r2, [pc, #208]	@ (8001ed0 <updateDrawerConfig+0x19c>)
 8001e00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e04:	4831      	ldr	r0, [pc, #196]	@ (8001ecc <updateDrawerConfig+0x198>)
 8001e06:	f008 f809 	bl	8009e1c <sniprintf>
			//fputs(buffer, temp);

			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8001e0a:	4830      	ldr	r0, [pc, #192]	@ (8001ecc <updateDrawerConfig+0x198>)
 8001e0c:	f7fe fa50 	bl	80002b0 <strlen>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	492d      	ldr	r1, [pc, #180]	@ (8001ecc <updateDrawerConfig+0x198>)
 8001e18:	4828      	ldr	r0, [pc, #160]	@ (8001ebc <updateDrawerConfig+0x188>)
 8001e1a:	f006 fa16 	bl	800824a <f_write>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <updateDrawerConfig+0x180>)
 8001e24:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8001e26:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <updateDrawerConfig+0x180>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d021      	beq.n	8001e72 <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(1)\r\n", fres);
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <updateDrawerConfig+0x180>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	4619      	mov	r1, r3
 8001e34:	4827      	ldr	r0, [pc, #156]	@ (8001ed4 <updateDrawerConfig+0x1a0>)
 8001e36:	f007 fecd 	bl	8009bd4 <iprintf>
				while(1);
 8001e3a:	bf00      	nop
 8001e3c:	e7fd      	b.n	8001e3a <updateDrawerConfig+0x106>
			}

		}
		else {
			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8001e3e:	4823      	ldr	r0, [pc, #140]	@ (8001ecc <updateDrawerConfig+0x198>)
 8001e40:	f7fe fa36 	bl	80002b0 <strlen>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	4920      	ldr	r1, [pc, #128]	@ (8001ecc <updateDrawerConfig+0x198>)
 8001e4c:	481b      	ldr	r0, [pc, #108]	@ (8001ebc <updateDrawerConfig+0x188>)
 8001e4e:	f006 f9fc 	bl	800824a <f_write>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <updateDrawerConfig+0x180>)
 8001e58:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <updateDrawerConfig+0x180>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(2)\r\n", fres);
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <updateDrawerConfig+0x180>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	481b      	ldr	r0, [pc, #108]	@ (8001ed8 <updateDrawerConfig+0x1a4>)
 8001e6a:	f007 feb3 	bl	8009bd4 <iprintf>
				while(1);
 8001e6e:	bf00      	nop
 8001e70:	e7fd      	b.n	8001e6e <updateDrawerConfig+0x13a>
			}
		}


		currentLine++;
 8001e72:	8bbb      	ldrh	r3, [r7, #28]
 8001e74:	3301      	adds	r3, #1
 8001e76:	83bb      	strh	r3, [r7, #28]

	}while(keep_reading);
 8001e78:	7ffb      	ldrb	r3, [r7, #31]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d19f      	bne.n	8001dbe <updateDrawerConfig+0x8a>

	f_close(&fil);
 8001e7e:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <updateDrawerConfig+0x17c>)
 8001e80:	f006 fbd6 	bl	8008630 <f_close>
	f_close(&fil_temp);
 8001e84:	480d      	ldr	r0, [pc, #52]	@ (8001ebc <updateDrawerConfig+0x188>)
 8001e86:	f006 fbd3 	bl	8008630 <f_close>

	f_unlink((TCHAR*)filename); //deletes the original file
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <updateDrawerConfig+0x178>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f006 fcad 	bl	80087ee <f_unlink>
	f_rename((TCHAR*)temp_filename, (TCHAR*)filename); //rename the temp file to be the new "orginal" file
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <updateDrawerConfig+0x184>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <updateDrawerConfig+0x178>)
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f006 fd50 	bl	8008944 <f_rename>


}
 8001ea4:	bf00      	nop
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20000440 	.word	0x20000440
 8001eb4:	200008a0 	.word	0x200008a0
 8001eb8:	20000004 	.word	0x20000004
 8001ebc:	20000670 	.word	0x20000670
 8001ec0:	200008a1 	.word	0x200008a1
 8001ec4:	0800da54 	.word	0x0800da54
 8001ec8:	0800da8c 	.word	0x0800da8c
 8001ecc:	200008a4 	.word	0x200008a4
 8001ed0:	0800dac8 	.word	0x0800dac8
 8001ed4:	0800dafc 	.word	0x0800dafc
 8001ed8:	0800db2c 	.word	0x0800db2c

08001edc <getFileInfo>:


struct drawerInfo getFileInfo(uint16_t row, uint16_t drawer){ //add ID parameter here later
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b08d      	sub	sp, #52	@ 0x34
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	803b      	strh	r3, [r7, #0]

	struct drawerInfo drawerInst = { 0 };
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
	static unsigned int array[5];

	uint16_t lineMarker = getLineMarker(row, drawer);
 8001efa:	883a      	ldrh	r2, [r7, #0]
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fead 	bl	8001c60 <getLineMarker>
 8001f06:	4603      	mov	r3, r0
 8001f08:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t fileIndex = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	fres = f_open(&fil, filename, FA_READ);
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002008 <getFileInfo+0x12c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4619      	mov	r1, r3
 8001f16:	483d      	ldr	r0, [pc, #244]	@ (800200c <getFileInfo+0x130>)
 8001f18:	f005 fe9e 	bl	8007c58 <f_open>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <getFileInfo+0x134>)
 8001f22:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8001f24:	4b3a      	ldr	r3, [pc, #232]	@ (8002010 <getFileInfo+0x134>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <getFileInfo+0x60>
			printf("f_open error (%i) IN getFileInfo\r\n", fres);
 8001f2c:	4b38      	ldr	r3, [pc, #224]	@ (8002010 <getFileInfo+0x134>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4838      	ldr	r0, [pc, #224]	@ (8002014 <getFileInfo+0x138>)
 8001f34:	f007 fe4e 	bl	8009bd4 <iprintf>
			while(1);
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <getFileInfo+0x5c>
		}
	else {
		TCHAR* rres = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
		do {

				rres = f_gets((TCHAR*) buffer, MAX_FILELINE, &fil);
 8001f40:	4a32      	ldr	r2, [pc, #200]	@ (800200c <getFileInfo+0x130>)
 8001f42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f46:	4834      	ldr	r0, [pc, #208]	@ (8002018 <getFileInfo+0x13c>)
 8001f48:	f006 fdf5 	bl	8008b36 <f_gets>
 8001f4c:	61f8      	str	r0, [r7, #28]

				if (fileIndex == lineMarker) {
 8001f4e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001f50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d140      	bne.n	8001fd8 <getFileInfo+0xfc>
						char* token = strtok(buffer, ";");
 8001f56:	4931      	ldr	r1, [pc, #196]	@ (800201c <getFileInfo+0x140>)
 8001f58:	482f      	ldr	r0, [pc, #188]	@ (8002018 <getFileInfo+0x13c>)
 8001f5a:	f008 f893 	bl	800a084 <strtok>
 8001f5e:	62b8      	str	r0, [r7, #40]	@ 0x28
						unsigned int index = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24

						while (token != NULL) {
 8001f64:	e00f      	b.n	8001f86 <getFileInfo+0xaa>
								array[index] = getData(token);
 8001f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f68:	f7ff fe56 	bl	8001c18 <getData>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	492c      	ldr	r1, [pc, #176]	@ (8002020 <getFileInfo+0x144>)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								token = strtok(NULL, ";");
 8001f76:	4929      	ldr	r1, [pc, #164]	@ (800201c <getFileInfo+0x140>)
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f008 f883 	bl	800a084 <strtok>
 8001f7e:	62b8      	str	r0, [r7, #40]	@ 0x28
								index++;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	3301      	adds	r3, #1
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
						while (token != NULL) {
 8001f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ec      	bne.n	8001f66 <getFileInfo+0x8a>
						}
						f_close(&fil);
 8001f8c:	481f      	ldr	r0, [pc, #124]	@ (800200c <getFileInfo+0x130>)
 8001f8e:	f006 fb4f 	bl	8008630 <f_close>

						drawerInst.row = array[0];
 8001f92:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <getFileInfo+0x144>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	81bb      	strh	r3, [r7, #12]
						drawerInst.drawer = array[1];
 8001f9a:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <getFileInfo+0x144>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	81fb      	strh	r3, [r7, #14]
						drawerInst.calFactor = array[2];
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <getFileInfo+0x144>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fae:	edc7 7a04 	vstr	s15, [r7, #16]
						drawerInst.Tare = array[3];
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <getFileInfo+0x144>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	617b      	str	r3, [r7, #20]
						drawerInst.thresh = array[4];
 8001fb8:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <getFileInfo+0x144>)
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc4:	edc7 7a06 	vstr	s15, [r7, #24]

						return drawerInst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	461c      	mov	r4, r3
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fd6:	e012      	b.n	8001ffe <getFileInfo+0x122>
				}
				fileIndex++;
 8001fd8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001fda:	3301      	adds	r3, #1
 8001fdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		}while(rres != 0);
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ad      	bne.n	8001f40 <getFileInfo+0x64>
	}

	f_close(&fil);
 8001fe4:	4809      	ldr	r0, [pc, #36]	@ (800200c <getFileInfo+0x130>)
 8001fe6:	f006 fb23 	bl	8008630 <f_close>
	printf("An error occurred during info extraction.");
 8001fea:	480e      	ldr	r0, [pc, #56]	@ (8002024 <getFileInfo+0x148>)
 8001fec:	f007 fdf2 	bl	8009bd4 <iprintf>
	return drawerInst;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	461c      	mov	r4, r3
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ffa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	3734      	adds	r7, #52	@ 0x34
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000
 800200c:	20000440 	.word	0x20000440
 8002010:	200008a0 	.word	0x200008a0
 8002014:	0800db5c 	.word	0x0800db5c
 8002018:	200008a4 	.word	0x200008a4
 800201c:	0800da50 	.word	0x0800da50
 8002020:	20000ca8 	.word	0x20000ca8
 8002024:	0800db80 	.word	0x0800db80

08002028 <_write>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

//Code to enable printf statements
int _write(int file, char *data, int len) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	b29a      	uxth	r2, r3
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	4804      	ldr	r0, [pc, #16]	@ (8002050 <_write+0x28>)
 8002040:	f002 fe6c 	bl	8004d1c <HAL_UART_Transmit>
    return len;
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000db8 	.word	0x20000db8

08002054 <__io_getchar>:

//Code to enable scanf statements
GETCHAR_PROTOTYPE
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 800205e:	2300      	movs	r3, #0
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <__io_getchar+0x48>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <__io_getchar+0x48>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002074:	1df9      	adds	r1, r7, #7
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
 800207a:	2201      	movs	r2, #1
 800207c:	4807      	ldr	r0, [pc, #28]	@ (800209c <__io_getchar+0x48>)
 800207e:	f002 fed8 	bl	8004e32 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002082:	1df9      	adds	r1, r7, #7
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	2201      	movs	r2, #1
 800208a:	4804      	ldr	r0, [pc, #16]	@ (800209c <__io_getchar+0x48>)
 800208c:	f002 fe46 	bl	8004d1c <HAL_UART_Transmit>
  return ch;
 8002090:	79fb      	ldrb	r3, [r7, #7]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000db8 	.word	0x20000db8

080020a0 <doublePress>:

void doublePress(GPIO_TypeDef* port,uint16_t pin){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState last_state = GPIO_PIN_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	74bb      	strb	r3, [r7, #18]
  GPIO_PinState button_state;

  uint32_t DP_Threshold = 2000; // 2 second threshold
 80020b0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80020b4:	60fb      	str	r3, [r7, #12]
  uint32_t press_time = 0;         // Timestamp of the first press
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  uint8_t press_count = 0;  // A Flag that's used for indicating a second press
 80020ba:	2300      	movs	r3, #0
 80020bc:	74fb      	strb	r3, [r7, #19]

	while(true){
		button_state = HAL_GPIO_ReadPin( port, pin);
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f001 f8b2 	bl	800322c <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	72fb      	strb	r3, [r7, #11]

		if (button_state != last_state) { // Button state changed
 80020cc:	7afa      	ldrb	r2, [r7, #11]
 80020ce:	7cbb      	ldrb	r3, [r7, #18]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d0f4      	beq.n	80020be <doublePress+0x1e>
			HAL_Delay(50); // Debounce delay
 80020d4:	2032      	movs	r0, #50	@ 0x32
 80020d6:	f000 fe0b 	bl	8002cf0 <HAL_Delay>

			if (button_state == GPIO_PIN_SET) { // Button pressed
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d1ee      	bne.n	80020be <doublePress+0x1e>
				if (press_count == 0) {
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d108      	bne.n	80020f8 <doublePress+0x58>
					// Reads First press
					printf("Button press\n\r");
 80020e6:	480d      	ldr	r0, [pc, #52]	@ (800211c <doublePress+0x7c>)
 80020e8:	f007 fd74 	bl	8009bd4 <iprintf>
					press_time = HAL_GetTick(); // saves the time of the first press
 80020ec:	f000 fdf4 	bl	8002cd8 <HAL_GetTick>
 80020f0:	6178      	str	r0, [r7, #20]
					press_count = 1;    // proof of first button press
 80020f2:	2301      	movs	r3, #1
 80020f4:	74fb      	strb	r3, [r7, #19]
 80020f6:	e7e2      	b.n	80020be <doublePress+0x1e>
				}
				else if ((HAL_GetTick() - press_time) <= DP_Threshold){	// if the press_count = 1 and the button is pressed again, it is a double press
 80020f8:	f000 fdee 	bl	8002cd8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d3da      	bcc.n	80020be <doublePress+0x1e>
					printf("Double press\n\r");
 8002108:	4805      	ldr	r0, [pc, #20]	@ (8002120 <doublePress+0x80>)
 800210a:	f007 fd63 	bl	8009bd4 <iprintf>
					press_count = 0; // Reset state
 800210e:	2300      	movs	r3, #0
 8002110:	74fb      	strb	r3, [r7, #19]
					break;
 8002112:	bf00      	nop
				}
			}
		}
	}
}
 8002114:	bf00      	nop
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	0800dbac 	.word	0x0800dbac
 8002120:	0800dbbc 	.word	0x0800dbbc

08002124 <singlePress>:



void singlePress(GPIO_TypeDef* port,uint16_t pin){
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState button_state;

	while(true){
		button_state = HAL_GPIO_ReadPin(port, pin);
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f001 f879 	bl	800322c <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	73fb      	strb	r3, [r7, #15]
		if (button_state == GPIO_PIN_SET) { // Button pressed
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d1f5      	bne.n	8002130 <singlePress+0xc>

			printf("Button press\n");
 8002144:	4803      	ldr	r0, [pc, #12]	@ (8002154 <singlePress+0x30>)
 8002146:	f007 fdad 	bl	8009ca4 <puts>
			break;
 800214a:	bf00      	nop
		}
	}
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	0800dbcc 	.word	0x0800dbcc

08002158 <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4604      	mov	r4, r0
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4623      	mov	r3, r4
 8002168:	80fb      	strh	r3, [r7, #6]
 800216a:	4603      	mov	r3, r0
 800216c:	80bb      	strh	r3, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	807b      	strh	r3, [r7, #2]
 8002172:	4613      	mov	r3, r2
 8002174:	707b      	strb	r3, [r7, #1]
  if(control){
 8002176:	787b      	ldrb	r3, [r7, #1]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <muxSET+0x50>
    HAL_GPIO_WritePin(MAST_A_GPIO_Port, MAST_A_Pin, A);
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	2101      	movs	r1, #1
 8002184:	4815      	ldr	r0, [pc, #84]	@ (80021dc <muxSET+0x84>)
 8002186:	f001 f869 	bl	800325c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_B_GPIO_Port, MAST_B_Pin, B);
 800218a:	88bb      	ldrh	r3, [r7, #4]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	2102      	movs	r1, #2
 8002192:	4812      	ldr	r0, [pc, #72]	@ (80021dc <muxSET+0x84>)
 8002194:	f001 f862 	bl	800325c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_C_GPIO_Port, MAST_C_Pin, C);
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	2110      	movs	r1, #16
 80021a0:	480e      	ldr	r0, [pc, #56]	@ (80021dc <muxSET+0x84>)
 80021a2:	f001 f85b 	bl	800325c <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
  }
}
 80021a6:	e014      	b.n	80021d2 <muxSET+0x7a>
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	2101      	movs	r1, #1
 80021b0:	480b      	ldr	r0, [pc, #44]	@ (80021e0 <muxSET+0x88>)
 80021b2:	f001 f853 	bl	800325c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
 80021b6:	88bb      	ldrh	r3, [r7, #4]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	2102      	movs	r1, #2
 80021be:	4809      	ldr	r0, [pc, #36]	@ (80021e4 <muxSET+0x8c>)
 80021c0:	f001 f84c 	bl	800325c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	2101      	movs	r1, #1
 80021cc:	4805      	ldr	r0, [pc, #20]	@ (80021e4 <muxSET+0x8c>)
 80021ce:	f001 f845 	bl	800325c <HAL_GPIO_WritePin>
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	bf00      	nop
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800

080021e8 <setRelay>:
#include <manager_io.h>
#include <manager_mux.h>
#include <manager_weight.h>


void setRelay(uint8_t rowNum){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]

	switch (rowNum){
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d86a      	bhi.n	80022d0 <setRelay+0xe8>
 80021fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002200 <setRelay+0x18>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002211 	.word	0x08002211
 8002204:	08002241 	.word	0x08002241
 8002208:	08002271 	.word	0x08002271
 800220c:	080022a1 	.word	0x080022a1
		case 1:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 1);
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002216:	4830      	ldr	r0, [pc, #192]	@ (80022d8 <setRelay+0xf0>)
 8002218:	f001 f820 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002222:	482d      	ldr	r0, [pc, #180]	@ (80022d8 <setRelay+0xf0>)
 8002224:	f001 f81a 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800222e:	482a      	ldr	r0, [pc, #168]	@ (80022d8 <setRelay+0xf0>)
 8002230:	f001 f814 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2104      	movs	r1, #4
 8002238:	4828      	ldr	r0, [pc, #160]	@ (80022dc <setRelay+0xf4>)
 800223a:	f001 f80f 	bl	800325c <HAL_GPIO_WritePin>
			break;
 800223e:	e048      	b.n	80022d2 <setRelay+0xea>

		case 2:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002246:	4824      	ldr	r0, [pc, #144]	@ (80022d8 <setRelay+0xf0>)
 8002248:	f001 f808 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 1);
 800224c:	2201      	movs	r2, #1
 800224e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002252:	4821      	ldr	r0, [pc, #132]	@ (80022d8 <setRelay+0xf0>)
 8002254:	f001 f802 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800225e:	481e      	ldr	r0, [pc, #120]	@ (80022d8 <setRelay+0xf0>)
 8002260:	f000 fffc 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2104      	movs	r1, #4
 8002268:	481c      	ldr	r0, [pc, #112]	@ (80022dc <setRelay+0xf4>)
 800226a:	f000 fff7 	bl	800325c <HAL_GPIO_WritePin>
			break;
 800226e:	e030      	b.n	80022d2 <setRelay+0xea>

		case 3:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002276:	4818      	ldr	r0, [pc, #96]	@ (80022d8 <setRelay+0xf0>)
 8002278:	f000 fff0 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002282:	4815      	ldr	r0, [pc, #84]	@ (80022d8 <setRelay+0xf0>)
 8002284:	f000 ffea 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 1);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800228e:	4812      	ldr	r0, [pc, #72]	@ (80022d8 <setRelay+0xf0>)
 8002290:	f000 ffe4 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	2104      	movs	r1, #4
 8002298:	4810      	ldr	r0, [pc, #64]	@ (80022dc <setRelay+0xf4>)
 800229a:	f000 ffdf 	bl	800325c <HAL_GPIO_WritePin>
			break;
 800229e:	e018      	b.n	80022d2 <setRelay+0xea>

		case 4:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022a6:	480c      	ldr	r0, [pc, #48]	@ (80022d8 <setRelay+0xf0>)
 80022a8:	f000 ffd8 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022b2:	4809      	ldr	r0, [pc, #36]	@ (80022d8 <setRelay+0xf0>)
 80022b4:	f000 ffd2 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022be:	4806      	ldr	r0, [pc, #24]	@ (80022d8 <setRelay+0xf0>)
 80022c0:	f000 ffcc 	bl	800325c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 1);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2104      	movs	r1, #4
 80022c8:	4804      	ldr	r0, [pc, #16]	@ (80022dc <setRelay+0xf4>)
 80022ca:	f000 ffc7 	bl	800325c <HAL_GPIO_WritePin>
			break;
 80022ce:	e000      	b.n	80022d2 <setRelay+0xea>

		default:
			return;
 80022d0:	bf00      	nop
	}
}
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40020800 	.word	0x40020800
 80022dc:	40020c00 	.word	0x40020c00

080022e0 <microDelay>:
#include "gpio.h"
#include "tim.h"


void microDelay(uint16_t delay)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80022ea:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <microDelay+0x30>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 80022f2:	bf00      	nop
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <microDelay+0x30>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d3f9      	bcc.n	80022f4 <microDelay+0x14>
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000d70 	.word	0x20000d70

08002314 <getHX711>:

int32_t getHX711(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 800231e:	f000 fcdb 	bl	8002cd8 <HAL_GetTick>
 8002322:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8002324:	e008      	b.n	8002338 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8002326:	f000 fcd7 	bl	8002cd8 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2bc8      	cmp	r3, #200	@ 0xc8
 8002332:	d901      	bls.n	8002338 <getHX711+0x24>
      return 0;
 8002334:	2300      	movs	r3, #0
 8002336:	e04b      	b.n	80023d0 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8002338:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800233c:	4826      	ldr	r0, [pc, #152]	@ (80023d8 <getHX711+0xc4>)
 800233e:	f000 ff75 	bl	800322c <HAL_GPIO_ReadPin>
 8002342:	4603      	mov	r3, r0
 8002344:	2b01      	cmp	r3, #1
 8002346:	d0ee      	beq.n	8002326 <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8002348:	2300      	movs	r3, #0
 800234a:	72fb      	strb	r3, [r7, #11]
 800234c:	e025      	b.n	800239a <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 800234e:	2201      	movs	r2, #1
 8002350:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002354:	4821      	ldr	r0, [pc, #132]	@ (80023dc <getHX711+0xc8>)
 8002356:	f000 ff81 	bl	800325c <HAL_GPIO_WritePin>
    microDelay(1);
 800235a:	2001      	movs	r0, #1
 800235c:	f7ff ffc0 	bl	80022e0 <microDelay>
    data = data << 1;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800236c:	481b      	ldr	r0, [pc, #108]	@ (80023dc <getHX711+0xc8>)
 800236e:	f000 ff75 	bl	800325c <HAL_GPIO_WritePin>
    microDelay(1);
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff ffb4 	bl	80022e0 <microDelay>
    if(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8002378:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800237c:	4816      	ldr	r0, [pc, #88]	@ (80023d8 <getHX711+0xc4>)
 800237e:	f000 ff55 	bl	800322c <HAL_GPIO_ReadPin>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <getHX711+0x7a>
      data ++;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3301      	adds	r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 800238e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3301      	adds	r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	72fb      	strb	r3, [r7, #11]
 800239a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800239e:	2b17      	cmp	r3, #23
 80023a0:	ddd5      	ble.n	800234e <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80023a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 80023aa:	2201      	movs	r2, #1
 80023ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023b0:	480a      	ldr	r0, [pc, #40]	@ (80023dc <getHX711+0xc8>)
 80023b2:	f000 ff53 	bl	800325c <HAL_GPIO_WritePin>
  microDelay(1);
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7ff ff92 	bl	80022e0 <microDelay>
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80023c2:	4806      	ldr	r0, [pc, #24]	@ (80023dc <getHX711+0xc8>)
 80023c4:	f000 ff4a 	bl	800325c <HAL_GPIO_WritePin>
  microDelay(1);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff ff89 	bl	80022e0 <microDelay>
  return data;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400

080023e0 <weigh>:

int weigh(uint32_t tare, float calFactor)
{
 80023e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e4:	b088      	sub	sp, #32
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	ed87 0a00 	vstr	s0, [r7]
  int64_t  total = 0;
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 80023fa:	2332      	movs	r3, #50	@ 0x32
 80023fc:	613b      	str	r3, [r7, #16]

  int milligram = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  int32_t average = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 8002406:	2300      	movs	r3, #0
 8002408:	82fb      	strh	r3, [r7, #22]
 800240a:	e010      	b.n	800242e <weigh+0x4e>
  {
      total += getHX711();
 800240c:	f7ff ff82 	bl	8002314 <getHX711>
 8002410:	4603      	mov	r3, r0
 8002412:	17da      	asrs	r2, r3, #31
 8002414:	461c      	mov	r4, r3
 8002416:	4615      	mov	r5, r2
 8002418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800241c:	eb12 0804 	adds.w	r8, r2, r4
 8002420:	eb43 0905 	adc.w	r9, r3, r5
 8002424:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8002428:	8afb      	ldrh	r3, [r7, #22]
 800242a:	3301      	adds	r3, #1
 800242c:	82fb      	strh	r3, [r7, #22]
 800242e:	8afb      	ldrh	r3, [r7, #22]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	429a      	cmp	r2, r3
 8002434:	dcea      	bgt.n	800240c <weigh+0x2c>
  }
  average = (int32_t)(total / samples);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	17da      	asrs	r2, r3, #31
 800243a:	469a      	mov	sl, r3
 800243c:	4693      	mov	fp, r2
 800243e:	4652      	mov	r2, sl
 8002440:	465b      	mov	r3, fp
 8002442:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002446:	f7fe fc3f 	bl	8000cc8 <__aeabi_ldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4613      	mov	r3, r2
 8002450:	60bb      	str	r3, [r7, #8]
  milligram = (int)(average - tare)*calFactor;
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002460:	edd7 7a00 	vldr	s15, [r7]
 8002464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246c:	ee17 3a90 	vmov	r3, s15
 8002470:	60fb      	str	r3, [r7, #12]
  return milligram;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800247e <weighRaw>:

int32_t weighRaw()
{
 800247e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
  int64_t  	total = 0;
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  	samples = 50;
 8002492:	2332      	movs	r3, #50	@ 0x32
 8002494:	60bb      	str	r3, [r7, #8]
  int32_t 	average = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]

  for(uint16_t i=0 ; i<samples ; i++)
 800249a:	2300      	movs	r3, #0
 800249c:	81fb      	strh	r3, [r7, #14]
 800249e:	e010      	b.n	80024c2 <weighRaw+0x44>
  {
      total += getHX711();
 80024a0:	f7ff ff38 	bl	8002314 <getHX711>
 80024a4:	4603      	mov	r3, r0
 80024a6:	17da      	asrs	r2, r3, #31
 80024a8:	461c      	mov	r4, r3
 80024aa:	4615      	mov	r5, r2
 80024ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024b0:	eb12 0804 	adds.w	r8, r2, r4
 80024b4:	eb43 0905 	adc.w	r9, r3, r5
 80024b8:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 80024bc:	89fb      	ldrh	r3, [r7, #14]
 80024be:	3301      	adds	r3, #1
 80024c0:	81fb      	strh	r3, [r7, #14]
 80024c2:	89fb      	ldrh	r3, [r7, #14]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	dcea      	bgt.n	80024a0 <weighRaw+0x22>
  }
  average = (int32_t)(total / samples);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	17da      	asrs	r2, r3, #31
 80024ce:	469a      	mov	sl, r3
 80024d0:	4693      	mov	fp, r2
 80024d2:	4652      	mov	r2, sl
 80024d4:	465b      	mov	r3, fp
 80024d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024da:	f7fe fbf5 	bl	8000cc8 <__aeabi_ldivmod>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4613      	mov	r3, r2
 80024e4:	607b      	str	r3, [r7, #4]
  return average;
 80024e6:	687b      	ldr	r3, [r7, #4]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080024f2 <weighRawTare>:

int32_t weighRawTare(uint32_t tare)
{
 80024f2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  int64_t  	total = 0;
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  	samples = 50;
 8002508:	2332      	movs	r3, #50	@ 0x32
 800250a:	613b      	str	r3, [r7, #16]
  int32_t 	average = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  int32_t 	avgTare = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	82fb      	strh	r3, [r7, #22]
 8002518:	e010      	b.n	800253c <weighRawTare+0x4a>
  {
      total += getHX711();
 800251a:	f7ff fefb 	bl	8002314 <getHX711>
 800251e:	4603      	mov	r3, r0
 8002520:	17da      	asrs	r2, r3, #31
 8002522:	461c      	mov	r4, r3
 8002524:	4615      	mov	r5, r2
 8002526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800252a:	eb12 0804 	adds.w	r8, r2, r4
 800252e:	eb43 0905 	adc.w	r9, r3, r5
 8002532:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8002536:	8afb      	ldrh	r3, [r7, #22]
 8002538:	3301      	adds	r3, #1
 800253a:	82fb      	strh	r3, [r7, #22]
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	dcea      	bgt.n	800251a <weighRawTare+0x28>
  }
  average = (int32_t)(total / samples);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	17da      	asrs	r2, r3, #31
 8002548:	469a      	mov	sl, r3
 800254a:	4693      	mov	fp, r2
 800254c:	4652      	mov	r2, sl
 800254e:	465b      	mov	r3, fp
 8002550:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002554:	f7fe fbb8 	bl	8000cc8 <__aeabi_ldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4613      	mov	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  avgTare = average - tare;
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	60bb      	str	r3, [r7, #8]
  return avgTare;
 8002568:	68bb      	ldr	r3, [r7, #8]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002574:	0000      	movs	r0, r0
	...

08002578 <getCalFactor>:

float getCalFactor(uint32_t knownHX711){
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	float cal = 20000.0 / knownHX711;
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7fd ffdf 	bl	8000544 <__aeabi_ui2d>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	a10b      	add	r1, pc, #44	@ (adr r1, 80025b8 <getCalFactor+0x40>)
 800258c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002590:	f7fe f97c 	bl	800088c <__aeabi_ddiv>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	f7fe fb44 	bl	8000c28 <__aeabi_d2f>
 80025a0:	4603      	mov	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]
	return cal;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	ee07 3a90 	vmov	s15, r3
}
 80025aa:	eeb0 0a67 	vmov.f32	s0, s15
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	f3af 8000 	nop.w
 80025b8:	00000000 	.word	0x00000000
 80025bc:	40d38800 	.word	0x40d38800

080025c0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025c4:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <MX_SPI1_Init+0x64>)
 80025c6:	4a18      	ldr	r2, [pc, #96]	@ (8002628 <MX_SPI1_Init+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ca:	4b16      	ldr	r3, [pc, #88]	@ (8002624 <MX_SPI1_Init+0x64>)
 80025cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025d2:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <MX_SPI1_Init+0x64>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <MX_SPI1_Init+0x64>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <MX_SPI1_Init+0x64>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <MX_SPI1_Init+0x64>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <MX_SPI1_Init+0x64>)
 80025ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <MX_SPI1_Init+0x64>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <MX_SPI1_Init+0x64>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <MX_SPI1_Init+0x64>)
 8002600:	2200      	movs	r2, #0
 8002602:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002604:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <MX_SPI1_Init+0x64>)
 8002606:	2200      	movs	r2, #0
 8002608:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <MX_SPI1_Init+0x64>)
 800260c:	220a      	movs	r2, #10
 800260e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002610:	4804      	ldr	r0, [pc, #16]	@ (8002624 <MX_SPI1_Init+0x64>)
 8002612:	f001 fb9f 	bl	8003d54 <HAL_SPI_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800261c:	f7ff fa36 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000cbc 	.word	0x20000cbc
 8002628:	40013000 	.word	0x40013000

0800262c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002630:	4b17      	ldr	r3, [pc, #92]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002632:	4a18      	ldr	r2, [pc, #96]	@ (8002694 <MX_SPI2_Init+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002636:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002638:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800263c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <MX_SPI2_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002650:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800265c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800265e:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002660:	2200      	movs	r2, #0
 8002662:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002664:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002666:	2200      	movs	r2, #0
 8002668:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <MX_SPI2_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002670:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <MX_SPI2_Init+0x64>)
 8002678:	220a      	movs	r2, #10
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800267c:	4804      	ldr	r0, [pc, #16]	@ (8002690 <MX_SPI2_Init+0x64>)
 800267e:	f001 fb69 	bl	8003d54 <HAL_SPI_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002688:	f7ff fa00 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000d14 	.word	0x20000d14
 8002694:	40003800 	.word	0x40003800

08002698 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	@ 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a41      	ldr	r2, [pc, #260]	@ (80027bc <HAL_SPI_MspInit+0x124>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d12c      	bne.n	8002714 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	4b40      	ldr	r3, [pc, #256]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	4a3f      	ldr	r2, [pc, #252]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 80026c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ca:	4b3d      	ldr	r3, [pc, #244]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	4b39      	ldr	r3, [pc, #228]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a38      	ldr	r2, [pc, #224]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b36      	ldr	r3, [pc, #216]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026f2:	23e0      	movs	r3, #224	@ 0xe0
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002702:	2305      	movs	r3, #5
 8002704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	482d      	ldr	r0, [pc, #180]	@ (80027c4 <HAL_SPI_MspInit+0x12c>)
 800270e:	f000 fbf9 	bl	8002f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002712:	e04f      	b.n	80027b4 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a2b      	ldr	r2, [pc, #172]	@ (80027c8 <HAL_SPI_MspInit+0x130>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d14a      	bne.n	80027b4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b27      	ldr	r3, [pc, #156]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	4a26      	ldr	r2, [pc, #152]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 8002728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800272c:	6413      	str	r3, [r2, #64]	@ 0x40
 800272e:	4b24      	ldr	r3, [pc, #144]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b20      	ldr	r3, [pc, #128]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	4a1f      	ldr	r2, [pc, #124]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6313      	str	r3, [r2, #48]	@ 0x30
 800274a:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	4a18      	ldr	r2, [pc, #96]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	6313      	str	r3, [r2, #48]	@ 0x30
 8002766:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <HAL_SPI_MspInit+0x128>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002772:	2308      	movs	r3, #8
 8002774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002782:	2305      	movs	r3, #5
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002786:	f107 031c 	add.w	r3, r7, #28
 800278a:	4619      	mov	r1, r3
 800278c:	480f      	ldr	r0, [pc, #60]	@ (80027cc <HAL_SPI_MspInit+0x134>)
 800278e:	f000 fbb9 	bl	8002f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002792:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027a4:	2305      	movs	r3, #5
 80027a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	4619      	mov	r1, r3
 80027ae:	4808      	ldr	r0, [pc, #32]	@ (80027d0 <HAL_SPI_MspInit+0x138>)
 80027b0:	f000 fba8 	bl	8002f04 <HAL_GPIO_Init>
}
 80027b4:	bf00      	nop
 80027b6:	3730      	adds	r7, #48	@ 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40013000 	.word	0x40013000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40003800 	.word	0x40003800
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020400 	.word	0x40020400

080027d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <HAL_MspInit+0x4c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002820 <HAL_MspInit+0x4c>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <HAL_MspInit+0x4c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <HAL_MspInit+0x4c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	4a08      	ldr	r2, [pc, #32]	@ (8002820 <HAL_MspInit+0x4c>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002804:	6413      	str	r3, [r2, #64]	@ 0x40
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_MspInit+0x4c>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800

08002824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <NMI_Handler+0x4>

0800282c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <HardFault_Handler+0x4>

08002834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <MemManage_Handler+0x4>

0800283c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <BusFault_Handler+0x4>

08002844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <UsageFault_Handler+0x4>

0800284c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800287a:	f000 fa19 	bl	8002cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}

08002882 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  return 1;
 8002886:	2301      	movs	r3, #1
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <_kill>:

int _kill(int pid, int sig)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800289c:	f007 fc98 	bl	800a1d0 <__errno>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2216      	movs	r2, #22
 80028a4:	601a      	str	r2, [r3, #0]
  return -1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_exit>:

void _exit (int status)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028ba:	f04f 31ff 	mov.w	r1, #4294967295
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffe7 	bl	8002892 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <_exit+0x12>

080028c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e00a      	b.n	80028f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028da:	f7ff fbbb 	bl	8002054 <__io_getchar>
 80028de:	4601      	mov	r1, r0
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	60ba      	str	r2, [r7, #8]
 80028e6:	b2ca      	uxtb	r2, r1
 80028e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3301      	adds	r3, #1
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	dbf0      	blt.n	80028da <_read+0x12>
  }

  return len;
 80028f8:	687b      	ldr	r3, [r7, #4]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800292a:	605a      	str	r2, [r3, #4]
  return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <_isatty>:

int _isatty(int file)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002974:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <_sbrk+0x5c>)
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <_sbrk+0x60>)
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002988:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <_sbrk+0x64>)
 800298a:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <_sbrk+0x68>)
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d207      	bcs.n	80029ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800299c:	f007 fc18 	bl	800a1d0 <__errno>
 80029a0:	4603      	mov	r3, r0
 80029a2:	220c      	movs	r2, #12
 80029a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	e009      	b.n	80029c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029ac:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <_sbrk+0x64>)
 80029bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20020000 	.word	0x20020000
 80029cc:	00000400 	.word	0x00000400
 80029d0:	20000d6c 	.word	0x20000d6c
 80029d4:	20000f98 	.word	0x20000f98

080029d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <SystemInit+0x20>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <SystemInit+0x20>)
 80029e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a10:	463b      	mov	r3, r7
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	@ (8002a90 <MX_TIM2_Init+0x94>)
 8002a1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <MX_TIM2_Init+0x94>)
 8002a22:	2207      	movs	r2, #7
 8002a24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <MX_TIM2_Init+0x94>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <MX_TIM2_Init+0x94>)
 8002a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a34:	4b16      	ldr	r3, [pc, #88]	@ (8002a90 <MX_TIM2_Init+0x94>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <MX_TIM2_Init+0x94>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a40:	4813      	ldr	r0, [pc, #76]	@ (8002a90 <MX_TIM2_Init+0x94>)
 8002a42:	f001 fdd9 	bl	80045f8 <HAL_TIM_Base_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a4c:	f7ff f81e 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a56:	f107 0308 	add.w	r3, r7, #8
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	480c      	ldr	r0, [pc, #48]	@ (8002a90 <MX_TIM2_Init+0x94>)
 8002a5e:	f001 fe83 	bl	8004768 <HAL_TIM_ConfigClockSource>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a68:	f7ff f810 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a74:	463b      	mov	r3, r7
 8002a76:	4619      	mov	r1, r3
 8002a78:	4805      	ldr	r0, [pc, #20]	@ (8002a90 <MX_TIM2_Init+0x94>)
 8002a7a:	f002 f883 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a84:	f7ff f802 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a88:	bf00      	nop
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000d70 	.word	0x20000d70

08002a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	4a08      	ldr	r2, [pc, #32]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002ada:	4a12      	ldr	r2, [pc, #72]	@ (8002b24 <MX_USART2_UART_Init+0x50>)
 8002adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002ae0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002af8:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002afa:	220c      	movs	r2, #12
 8002afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afe:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b0a:	4805      	ldr	r0, [pc, #20]	@ (8002b20 <MX_USART2_UART_Init+0x4c>)
 8002b0c:	f002 f8b6 	bl	8004c7c <HAL_UART_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b16:	f7fe ffb9 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000db8 	.word	0x20000db8
 8002b24:	40004400 	.word	0x40004400

08002b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	@ (8002bac <HAL_UART_MspInit+0x84>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d12b      	bne.n	8002ba2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b18      	ldr	r3, [pc, #96]	@ (8002bb0 <HAL_UART_MspInit+0x88>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	4a17      	ldr	r2, [pc, #92]	@ (8002bb0 <HAL_UART_MspInit+0x88>)
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <HAL_UART_MspInit+0x88>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_UART_MspInit+0x88>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <HAL_UART_MspInit+0x88>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b76:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_UART_MspInit+0x88>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b82:	230c      	movs	r3, #12
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b92:	2307      	movs	r3, #7
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4805      	ldr	r0, [pc, #20]	@ (8002bb4 <HAL_UART_MspInit+0x8c>)
 8002b9e:	f000 f9b1 	bl	8002f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	@ 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40004400 	.word	0x40004400
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020000 	.word	0x40020000

08002bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bbc:	f7ff ff0c 	bl	80029d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc0:	480c      	ldr	r0, [pc, #48]	@ (8002bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bc2:	490d      	ldr	r1, [pc, #52]	@ (8002bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc8:	e002      	b.n	8002bd0 <LoopCopyDataInit>

08002bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bce:	3304      	adds	r3, #4

08002bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd4:	d3f9      	bcc.n	8002bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bdc:	e001      	b.n	8002be2 <LoopFillZerobss>

08002bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be0:	3204      	adds	r2, #4

08002be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be4:	d3fb      	bcc.n	8002bde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002be6:	f007 faf9 	bl	800a1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bea:	f7fe fe93 	bl	8001914 <main>
  bx  lr    
 8002bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002bfc:	0800e16c 	.word	0x0800e16c
  ldr r2, =_sbss
 8002c00:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002c04:	20000f98 	.word	0x20000f98

08002c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <HAL_Init+0x40>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <HAL_Init+0x40>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <HAL_Init+0x40>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 f931 	bl	8002e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3a:	200f      	movs	r0, #15
 8002c3c:	f000 f808 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c40:	f7ff fdc8 	bl	80027d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_InitTick+0x54>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_InitTick+0x58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f93b 	bl	8002eea <HAL_SYSTICK_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00e      	b.n	8002c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d80a      	bhi.n	8002c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f000 f911 	bl	8002eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c90:	4a06      	ldr	r2, [pc, #24]	@ (8002cac <HAL_InitTick+0x5c>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000008 	.word	0x20000008
 8002ca8:	20000010 	.word	0x20000010
 8002cac:	2000000c 	.word	0x2000000c

08002cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_IncTick+0x20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <HAL_IncTick+0x24>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	@ (8002cd4 <HAL_IncTick+0x24>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000010 	.word	0x20000010
 8002cd4:	20000e00 	.word	0x20000e00

08002cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return uwTick;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <HAL_GetTick+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000e00 	.word	0x20000e00

08002cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf8:	f7ff ffee 	bl	8002cd8 <HAL_GetTick>
 8002cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d005      	beq.n	8002d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <HAL_Delay+0x44>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d16:	bf00      	nop
 8002d18:	f7ff ffde 	bl	8002cd8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d8f7      	bhi.n	8002d18 <HAL_Delay+0x28>
  {
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000010 	.word	0x20000010

08002d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d54:	4013      	ands	r3, r2
 8002d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <__NVIC_GetPriorityGrouping+0x18>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0307 	and.w	r3, r3, #7
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	@ (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	@ (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e68:	d301      	bcc.n	8002e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00f      	b.n	8002e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e98 <SysTick_Config+0x40>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e76:	210f      	movs	r1, #15
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f7ff ff8e 	bl	8002d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <SysTick_Config+0x40>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e86:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <SysTick_Config+0x40>)
 8002e88:	2207      	movs	r2, #7
 8002e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000e010 	.word	0xe000e010

08002e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff47 	bl	8002d38 <__NVIC_SetPriorityGrouping>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec4:	f7ff ff5c 	bl	8002d80 <__NVIC_GetPriorityGrouping>
 8002ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	6978      	ldr	r0, [r7, #20]
 8002ed0:	f7ff ff8e 	bl	8002df0 <NVIC_EncodePriority>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff5d 	bl	8002d9c <__NVIC_SetPriority>
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffb0 	bl	8002e58 <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	e165      	b.n	80031ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f20:	2201      	movs	r2, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f040 8154 	bne.w	80031e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d005      	beq.n	8002f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d130      	bne.n	8002fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0201 	and.w	r2, r3, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d017      	beq.n	8002ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d123      	bne.n	8003048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	69b9      	ldr	r1, [r7, #24]
 8003044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80ae 	beq.w	80031e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b5d      	ldr	r3, [pc, #372]	@ (8003204 <HAL_GPIO_Init+0x300>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	4a5c      	ldr	r2, [pc, #368]	@ (8003204 <HAL_GPIO_Init+0x300>)
 8003094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003098:	6453      	str	r3, [r2, #68]	@ 0x44
 800309a:	4b5a      	ldr	r3, [pc, #360]	@ (8003204 <HAL_GPIO_Init+0x300>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a6:	4a58      	ldr	r2, [pc, #352]	@ (8003208 <HAL_GPIO_Init+0x304>)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	220f      	movs	r2, #15
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4f      	ldr	r2, [pc, #316]	@ (800320c <HAL_GPIO_Init+0x308>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d025      	beq.n	800311e <HAL_GPIO_Init+0x21a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003210 <HAL_GPIO_Init+0x30c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01f      	beq.n	800311a <HAL_GPIO_Init+0x216>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003214 <HAL_GPIO_Init+0x310>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_Init+0x212>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003218 <HAL_GPIO_Init+0x314>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0x20e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4b      	ldr	r2, [pc, #300]	@ (800321c <HAL_GPIO_Init+0x318>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_Init+0x20a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003220 <HAL_GPIO_Init+0x31c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x206>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a49      	ldr	r2, [pc, #292]	@ (8003224 <HAL_GPIO_Init+0x320>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_Init+0x202>
 8003102:	2306      	movs	r3, #6
 8003104:	e00c      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 8003106:	2307      	movs	r3, #7
 8003108:	e00a      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 800310a:	2305      	movs	r3, #5
 800310c:	e008      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 800310e:	2304      	movs	r3, #4
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 8003112:	2303      	movs	r3, #3
 8003114:	e004      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x21c>
 800311e:	2300      	movs	r3, #0
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f002 0203 	and.w	r2, r2, #3
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003130:	4935      	ldr	r1, [pc, #212]	@ (8003208 <HAL_GPIO_Init+0x304>)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313e:	4b3a      	ldr	r3, [pc, #232]	@ (8003228 <HAL_GPIO_Init+0x324>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003162:	4a31      	ldr	r2, [pc, #196]	@ (8003228 <HAL_GPIO_Init+0x324>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003168:	4b2f      	ldr	r3, [pc, #188]	@ (8003228 <HAL_GPIO_Init+0x324>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800318c:	4a26      	ldr	r2, [pc, #152]	@ (8003228 <HAL_GPIO_Init+0x324>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003192:	4b25      	ldr	r3, [pc, #148]	@ (8003228 <HAL_GPIO_Init+0x324>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003228 <HAL_GPIO_Init+0x324>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_GPIO_Init+0x324>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e0:	4a11      	ldr	r2, [pc, #68]	@ (8003228 <HAL_GPIO_Init+0x324>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	f67f ae96 	bls.w	8002f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3724      	adds	r7, #36	@ 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40021400 	.word	0x40021400
 8003224:	40021800 	.word	0x40021800
 8003228:	40013c00 	.word	0x40013c00

0800322c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	887b      	ldrh	r3, [r7, #2]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e001      	b.n	800324e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
 8003268:	4613      	mov	r3, r2
 800326a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800326c:	787b      	ldrb	r3, [r7, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003278:	e003      	b.n	8003282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	041a      	lsls	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	619a      	str	r2, [r3, #24]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0cc      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a4:	4b68      	ldr	r3, [pc, #416]	@ (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d90c      	bls.n	80032cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b65      	ldr	r3, [pc, #404]	@ (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b63      	ldr	r3, [pc, #396]	@ (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0b8      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e4:	4b59      	ldr	r3, [pc, #356]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a58      	ldr	r2, [pc, #352]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032fc:	4b53      	ldr	r3, [pc, #332]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a52      	ldr	r2, [pc, #328]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b50      	ldr	r3, [pc, #320]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	494d      	ldr	r1, [pc, #308]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d044      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b47      	ldr	r3, [pc, #284]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d119      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d003      	beq.n	800334e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334a:	2b03      	cmp	r3, #3
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	4b3f      	ldr	r3, [pc, #252]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335e:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e067      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336e:	4b37      	ldr	r3, [pc, #220]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 0203 	bic.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4934      	ldr	r1, [pc, #208]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003380:	f7ff fcaa 	bl	8002cd8 <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7ff fca6 	bl	8002cd8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e04f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	4b2b      	ldr	r3, [pc, #172]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 020c 	and.w	r2, r3, #12
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1eb      	bne.n	8003388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b0:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d20c      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b22      	ldr	r3, [pc, #136]	@ (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b20      	ldr	r3, [pc, #128]	@ (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e032      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e4:	4b19      	ldr	r3, [pc, #100]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4916      	ldr	r1, [pc, #88]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003402:	4b12      	ldr	r3, [pc, #72]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	490e      	ldr	r1, [pc, #56]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003416:	f000 f855 	bl	80034c4 <HAL_RCC_GetSysClockFreq>
 800341a:	4602      	mov	r2, r0
 800341c:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	490a      	ldr	r1, [pc, #40]	@ (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	5ccb      	ldrb	r3, [r1, r3]
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	4a09      	ldr	r2, [pc, #36]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003432:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fc0a 	bl	8002c50 <HAL_InitTick>

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023c00 	.word	0x40023c00
 800344c:	40023800 	.word	0x40023800
 8003450:	0800dc38 	.word	0x0800dc38
 8003454:	20000008 	.word	0x20000008
 8003458:	2000000c 	.word	0x2000000c

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b03      	ldr	r3, [pc, #12]	@ (8003470 <HAL_RCC_GetHCLKFreq+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000008 	.word	0x20000008

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff0 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0a9b      	lsrs	r3, r3, #10
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	@ (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	0800dc48 	.word	0x0800dc48

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a0:	f7ff ffdc 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0b5b      	lsrs	r3, r3, #13
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	@ (80034c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	0800dc48 	.word	0x0800dc48

080034c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c8:	b0a6      	sub	sp, #152	@ 0x98
 80034ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ea:	4bc8      	ldr	r3, [pc, #800]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	f200 817e 	bhi.w	80037f4 <HAL_RCC_GetSysClockFreq+0x330>
 80034f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003535 	.word	0x08003535
 8003504:	080037f5 	.word	0x080037f5
 8003508:	080037f5 	.word	0x080037f5
 800350c:	080037f5 	.word	0x080037f5
 8003510:	0800353d 	.word	0x0800353d
 8003514:	080037f5 	.word	0x080037f5
 8003518:	080037f5 	.word	0x080037f5
 800351c:	080037f5 	.word	0x080037f5
 8003520:	08003545 	.word	0x08003545
 8003524:	080037f5 	.word	0x080037f5
 8003528:	080037f5 	.word	0x080037f5
 800352c:	080037f5 	.word	0x080037f5
 8003530:	080036af 	.word	0x080036af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4bb6      	ldr	r3, [pc, #728]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800353a:	e15f      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800353c:	4bb5      	ldr	r3, [pc, #724]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x350>)
 800353e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003542:	e15b      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003544:	4bb1      	ldr	r3, [pc, #708]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800354c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003550:	4bae      	ldr	r3, [pc, #696]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d031      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355c:	4bab      	ldr	r3, [pc, #684]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	2200      	movs	r2, #0
 8003564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003566:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800356a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003570:	2300      	movs	r3, #0
 8003572:	667b      	str	r3, [r7, #100]	@ 0x64
 8003574:	4ba7      	ldr	r3, [pc, #668]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x350>)
 8003576:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800357a:	462a      	mov	r2, r5
 800357c:	fb03 f202 	mul.w	r2, r3, r2
 8003580:	2300      	movs	r3, #0
 8003582:	4621      	mov	r1, r4
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	4aa2      	ldr	r2, [pc, #648]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x350>)
 800358c:	4621      	mov	r1, r4
 800358e:	fba1 1202 	umull	r1, r2, r1, r2
 8003592:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003594:	460a      	mov	r2, r1
 8003596:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003598:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800359a:	4413      	add	r3, r2
 800359c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800359e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a2:	2200      	movs	r2, #0
 80035a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80035a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80035b0:	f7fd fbda 	bl	8000d68 <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4613      	mov	r3, r2
 80035ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035be:	e064      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c0:	4b92      	ldr	r3, [pc, #584]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	2200      	movs	r2, #0
 80035c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80035ca:	657a      	str	r2, [r7, #84]	@ 0x54
 80035cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035d4:	2300      	movs	r3, #0
 80035d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035d8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80035dc:	4622      	mov	r2, r4
 80035de:	462b      	mov	r3, r5
 80035e0:	f04f 0000 	mov.w	r0, #0
 80035e4:	f04f 0100 	mov.w	r1, #0
 80035e8:	0159      	lsls	r1, r3, #5
 80035ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ee:	0150      	lsls	r0, r2, #5
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4621      	mov	r1, r4
 80035f6:	1a51      	subs	r1, r2, r1
 80035f8:	6139      	str	r1, [r7, #16]
 80035fa:	4629      	mov	r1, r5
 80035fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800360e:	4659      	mov	r1, fp
 8003610:	018b      	lsls	r3, r1, #6
 8003612:	4651      	mov	r1, sl
 8003614:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003618:	4651      	mov	r1, sl
 800361a:	018a      	lsls	r2, r1, #6
 800361c:	4651      	mov	r1, sl
 800361e:	ebb2 0801 	subs.w	r8, r2, r1
 8003622:	4659      	mov	r1, fp
 8003624:	eb63 0901 	sbc.w	r9, r3, r1
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003634:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003638:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800363c:	4690      	mov	r8, r2
 800363e:	4699      	mov	r9, r3
 8003640:	4623      	mov	r3, r4
 8003642:	eb18 0303 	adds.w	r3, r8, r3
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	462b      	mov	r3, r5
 800364a:	eb49 0303 	adc.w	r3, r9, r3
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800365c:	4629      	mov	r1, r5
 800365e:	028b      	lsls	r3, r1, #10
 8003660:	4621      	mov	r1, r4
 8003662:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003666:	4621      	mov	r1, r4
 8003668:	028a      	lsls	r2, r1, #10
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003672:	2200      	movs	r2, #0
 8003674:	643b      	str	r3, [r7, #64]	@ 0x40
 8003676:	647a      	str	r2, [r7, #68]	@ 0x44
 8003678:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800367c:	f7fd fb74 	bl	8000d68 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800368a:	4b60      	ldr	r3, [pc, #384]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	0c1b      	lsrs	r3, r3, #16
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	3301      	adds	r3, #1
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800369c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80036ac:	e0a6      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ae:	4b57      	ldr	r3, [pc, #348]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ba:	4b54      	ldr	r3, [pc, #336]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02a      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	4b51      	ldr	r3, [pc, #324]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	2200      	movs	r2, #0
 80036ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d8:	2100      	movs	r1, #0
 80036da:	4b4e      	ldr	r3, [pc, #312]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x350>)
 80036dc:	fb03 f201 	mul.w	r2, r3, r1
 80036e0:	2300      	movs	r3, #0
 80036e2:	fb00 f303 	mul.w	r3, r0, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x350>)
 80036ea:	fba0 1202 	umull	r1, r2, r0, r2
 80036ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80036f0:	460a      	mov	r2, r1
 80036f2:	673a      	str	r2, [r7, #112]	@ 0x70
 80036f4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80036f6:	4413      	add	r3, r2
 80036f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80036fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036fe:	2200      	movs	r2, #0
 8003700:	633b      	str	r3, [r7, #48]	@ 0x30
 8003702:	637a      	str	r2, [r7, #52]	@ 0x34
 8003704:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003708:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800370c:	f7fd fb2c 	bl	8000d68 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800371a:	e05b      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371c:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	2200      	movs	r2, #0
 8003724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	2300      	movs	r3, #0
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
 8003734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003738:	4642      	mov	r2, r8
 800373a:	464b      	mov	r3, r9
 800373c:	f04f 0000 	mov.w	r0, #0
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	0159      	lsls	r1, r3, #5
 8003746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374a:	0150      	lsls	r0, r2, #5
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4641      	mov	r1, r8
 8003752:	ebb2 0a01 	subs.w	sl, r2, r1
 8003756:	4649      	mov	r1, r9
 8003758:	eb63 0b01 	sbc.w	fp, r3, r1
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800376c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003770:	ebb2 040a 	subs.w	r4, r2, sl
 8003774:	eb63 050b 	sbc.w	r5, r3, fp
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	00eb      	lsls	r3, r5, #3
 8003782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003786:	00e2      	lsls	r2, r4, #3
 8003788:	4614      	mov	r4, r2
 800378a:	461d      	mov	r5, r3
 800378c:	4643      	mov	r3, r8
 800378e:	18e3      	adds	r3, r4, r3
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	464b      	mov	r3, r9
 8003794:	eb45 0303 	adc.w	r3, r5, r3
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a6:	4629      	mov	r1, r5
 80037a8:	028b      	lsls	r3, r1, #10
 80037aa:	4621      	mov	r1, r4
 80037ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037b0:	4621      	mov	r1, r4
 80037b2:	028a      	lsls	r2, r1, #10
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037bc:	2200      	movs	r2, #0
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	61fa      	str	r2, [r7, #28]
 80037c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c6:	f7fd facf 	bl	8000d68 <__aeabi_uldivmod>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4613      	mov	r3, r2
 80037d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037d4:	4b0d      	ldr	r3, [pc, #52]	@ (800380c <HAL_RCC_GetSysClockFreq+0x348>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0f1b      	lsrs	r3, r3, #28
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80037e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80037f2:	e003      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x34c>)
 80037f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80037fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003800:	4618      	mov	r0, r3
 8003802:	3798      	adds	r7, #152	@ 0x98
 8003804:	46bd      	mov	sp, r7
 8003806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	00f42400 	.word	0x00f42400
 8003814:	017d7840 	.word	0x017d7840

08003818 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e28d      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8083 	beq.w	800393e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003838:	4b94      	ldr	r3, [pc, #592]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b04      	cmp	r3, #4
 8003842:	d019      	beq.n	8003878 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003844:	4b91      	ldr	r3, [pc, #580]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
        || \
 800384c:	2b08      	cmp	r3, #8
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003850:	4b8e      	ldr	r3, [pc, #568]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800385c:	d00c      	beq.n	8003878 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d112      	bne.n	8003890 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4b88      	ldr	r3, [pc, #544]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003876:	d10b      	bne.n	8003890 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	4b84      	ldr	r3, [pc, #528]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d05b      	beq.n	800393c <HAL_RCC_OscConfig+0x124>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d157      	bne.n	800393c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e25a      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003898:	d106      	bne.n	80038a8 <HAL_RCC_OscConfig+0x90>
 800389a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a7b      	ldr	r2, [pc, #492]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e01d      	b.n	80038e4 <HAL_RCC_OscConfig+0xcc>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0xb4>
 80038b2:	4b76      	ldr	r3, [pc, #472]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a75      	ldr	r2, [pc, #468]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b73      	ldr	r3, [pc, #460]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a72      	ldr	r2, [pc, #456]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0xcc>
 80038cc:	4b6f      	ldr	r3, [pc, #444]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6e      	ldr	r2, [pc, #440]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b6c      	ldr	r3, [pc, #432]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6b      	ldr	r2, [pc, #428]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7ff f9f4 	bl	8002cd8 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7ff f9f0 	bl	8002cd8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	@ 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e21f      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b61      	ldr	r3, [pc, #388]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0xdc>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7ff f9e0 	bl	8002cd8 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7ff f9dc 	bl	8002cd8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	@ 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e20b      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	4b57      	ldr	r3, [pc, #348]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x104>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d06f      	beq.n	8003a2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800394a:	4b50      	ldr	r3, [pc, #320]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b00      	cmp	r3, #0
 8003954:	d017      	beq.n	8003986 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003956:	4b4d      	ldr	r3, [pc, #308]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
        || \
 800395e:	2b08      	cmp	r3, #8
 8003960:	d105      	bne.n	800396e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003962:	4b4a      	ldr	r3, [pc, #296]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b47      	ldr	r3, [pc, #284]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003976:	2b0c      	cmp	r3, #12
 8003978:	d11c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397a:	4b44      	ldr	r3, [pc, #272]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d116      	bne.n	80039b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	4b41      	ldr	r3, [pc, #260]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_RCC_OscConfig+0x186>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e1d3      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4937      	ldr	r1, [pc, #220]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b2:	e03a      	b.n	8003a2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d020      	beq.n	80039fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039bc:	4b34      	ldr	r3, [pc, #208]	@ (8003a90 <HAL_RCC_OscConfig+0x278>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7ff f989 	bl	8002cd8 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ca:	f7ff f985 	bl	8002cd8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e1b4      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039dc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e8:	4b28      	ldr	r3, [pc, #160]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4925      	ldr	r1, [pc, #148]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]
 80039fc:	e015      	b.n	8003a2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fe:	4b24      	ldr	r3, [pc, #144]	@ (8003a90 <HAL_RCC_OscConfig+0x278>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7ff f968 	bl	8002cd8 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0c:	f7ff f964 	bl	8002cd8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e193      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d036      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d016      	beq.n	8003a6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3e:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <HAL_RCC_OscConfig+0x27c>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a44:	f7ff f948 	bl	8002cd8 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4c:	f7ff f944 	bl	8002cd8 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e173      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x234>
 8003a6a:	e01b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6c:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <HAL_RCC_OscConfig+0x27c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a72:	f7ff f931 	bl	8002cd8 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a78:	e00e      	b.n	8003a98 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7a:	f7ff f92d 	bl	8002cd8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d907      	bls.n	8003a98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e15c      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	42470000 	.word	0x42470000
 8003a94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a98:	4b8a      	ldr	r3, [pc, #552]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1ea      	bne.n	8003a7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8097 	beq.w	8003be0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab6:	4b83      	ldr	r3, [pc, #524]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10f      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	4a7e      	ldr	r2, [pc, #504]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ad2:	4b7c      	ldr	r3, [pc, #496]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	4b79      	ldr	r3, [pc, #484]	@ (8003cc8 <HAL_RCC_OscConfig+0x4b0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d118      	bne.n	8003b20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aee:	4b76      	ldr	r3, [pc, #472]	@ (8003cc8 <HAL_RCC_OscConfig+0x4b0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a75      	ldr	r2, [pc, #468]	@ (8003cc8 <HAL_RCC_OscConfig+0x4b0>)
 8003af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afa:	f7ff f8ed 	bl	8002cd8 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b02:	f7ff f8e9 	bl	8002cd8 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e118      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b14:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc8 <HAL_RCC_OscConfig+0x4b0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d106      	bne.n	8003b36 <HAL_RCC_OscConfig+0x31e>
 8003b28:	4b66      	ldr	r3, [pc, #408]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	4a65      	ldr	r2, [pc, #404]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b34:	e01c      	b.n	8003b70 <HAL_RCC_OscConfig+0x358>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x340>
 8003b3e:	4b61      	ldr	r3, [pc, #388]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	4a60      	ldr	r2, [pc, #384]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b44:	f043 0304 	orr.w	r3, r3, #4
 8003b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4a:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0x358>
 8003b58:	4b5a      	ldr	r3, [pc, #360]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	4a59      	ldr	r2, [pc, #356]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b64:	4b57      	ldr	r3, [pc, #348]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	4a56      	ldr	r2, [pc, #344]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	f023 0304 	bic.w	r3, r3, #4
 8003b6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7ff f8ae 	bl	8002cd8 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7ff f8aa 	bl	8002cd8 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e0d7      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ee      	beq.n	8003b80 <HAL_RCC_OscConfig+0x368>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7ff f898 	bl	8002cd8 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7ff f894 	bl	8002cd8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0c1      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc2:	4b40      	ldr	r3, [pc, #256]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1ee      	bne.n	8003bac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80ad 	beq.w	8003d44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bea:	4b36      	ldr	r3, [pc, #216]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d060      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d145      	bne.n	8003c8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b33      	ldr	r3, [pc, #204]	@ (8003ccc <HAL_RCC_OscConfig+0x4b4>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7ff f868 	bl	8002cd8 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7ff f864 	bl	8002cd8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e093      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	4b29      	ldr	r3, [pc, #164]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69da      	ldr	r2, [r3, #28]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	019b      	lsls	r3, r3, #6
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	3b01      	subs	r3, #1
 8003c44:	041b      	lsls	r3, r3, #16
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	491b      	ldr	r1, [pc, #108]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <HAL_RCC_OscConfig+0x4b4>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c62:	f7ff f839 	bl	8002cd8 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6a:	f7ff f835 	bl	8002cd8 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e064      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x452>
 8003c88:	e05c      	b.n	8003d44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <HAL_RCC_OscConfig+0x4b4>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7ff f822 	bl	8002cd8 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7ff f81e 	bl	8002cd8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e04d      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <HAL_RCC_OscConfig+0x4ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x480>
 8003cb6:	e045      	b.n	8003d44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d107      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e040      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d50 <HAL_RCC_OscConfig+0x538>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d030      	beq.n	8003d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d129      	bne.n	8003d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d122      	bne.n	8003d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d00:	4013      	ands	r3, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d119      	bne.n	8003d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d10f      	bne.n	8003d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800

08003d54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e07b      	b.n	8003e5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d108      	bne.n	8003d80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d76:	d009      	beq.n	8003d8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	61da      	str	r2, [r3, #28]
 8003d7e:	e005      	b.n	8003d8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fe fc76 	bl	8002698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e10:	ea42 0103 	orr.w	r1, r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	f003 0104 	and.w	r1, r3, #4
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	f003 0210 	and.w	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b088      	sub	sp, #32
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e76:	f7fe ff2f 	bl	8002cd8 <HAL_GetTick>
 8003e7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d001      	beq.n	8003e90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e12a      	b.n	80040e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_SPI_Transmit+0x36>
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e122      	b.n	80040e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_SPI_Transmit+0x48>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e11b      	b.n	80040e6 <HAL_SPI_Transmit+0x280>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	88fa      	ldrh	r2, [r7, #6]
 8003ece:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003efc:	d10f      	bne.n	8003f1e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f28:	2b40      	cmp	r3, #64	@ 0x40
 8003f2a:	d007      	beq.n	8003f3c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f44:	d152      	bne.n	8003fec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_SPI_Transmit+0xee>
 8003f4e:	8b7b      	ldrh	r3, [r7, #26]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d145      	bne.n	8003fe0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f58:	881a      	ldrh	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f78:	e032      	b.n	8003fe0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d112      	bne.n	8003fae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8c:	881a      	ldrh	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	1c9a      	adds	r2, r3, #2
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fac:	e018      	b.n	8003fe0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fae:	f7fe fe93 	bl	8002cd8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d803      	bhi.n	8003fc6 <HAL_SPI_Transmit+0x160>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d102      	bne.n	8003fcc <HAL_SPI_Transmit+0x166>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e082      	b.n	80040e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1c7      	bne.n	8003f7a <HAL_SPI_Transmit+0x114>
 8003fea:	e053      	b.n	8004094 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_SPI_Transmit+0x194>
 8003ff4:	8b7b      	ldrh	r3, [r7, #26]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d147      	bne.n	800408a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004020:	e033      	b.n	800408a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b02      	cmp	r3, #2
 800402e:	d113      	bne.n	8004058 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004056:	e018      	b.n	800408a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004058:	f7fe fe3e 	bl	8002cd8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d803      	bhi.n	8004070 <HAL_SPI_Transmit+0x20a>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d102      	bne.n	8004076 <HAL_SPI_Transmit+0x210>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e02d      	b.n	80040e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1c6      	bne.n	8004022 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	6839      	ldr	r1, [r7, #0]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fa59 	bl	8004550 <SPI_EndRxTxTransaction>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b08a      	sub	sp, #40	@ 0x28
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040fc:	2301      	movs	r3, #1
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004100:	f7fe fdea 	bl	8002cd8 <HAL_GetTick>
 8004104:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800410c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004118:	7ffb      	ldrb	r3, [r7, #31]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d00c      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x4a>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004124:	d106      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x46>
 800412e:	7ffb      	ldrb	r3, [r7, #31]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d001      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
 8004136:	e17f      	b.n	8004438 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_SPI_TransmitReceive+0x5c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_SPI_TransmitReceive+0x5c>
 8004144:	887b      	ldrh	r3, [r7, #2]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e174      	b.n	8004438 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_SPI_TransmitReceive+0x6e>
 8004158:	2302      	movs	r3, #2
 800415a:	e16d      	b.n	8004438 <HAL_SPI_TransmitReceive+0x34a>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b04      	cmp	r3, #4
 800416e:	d003      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2205      	movs	r2, #5
 8004174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	887a      	ldrh	r2, [r7, #2]
 8004188:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	887a      	ldrh	r2, [r7, #2]
 800418e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b40      	cmp	r3, #64	@ 0x40
 80041ba:	d007      	beq.n	80041cc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041d4:	d17e      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0xf6>
 80041de:	8afb      	ldrh	r3, [r7, #22]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d16c      	bne.n	80042be <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	881a      	ldrh	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004208:	e059      	b.n	80042be <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b02      	cmp	r3, #2
 8004216:	d11b      	bne.n	8004250 <HAL_SPI_TransmitReceive+0x162>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x162>
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	2b01      	cmp	r3, #1
 8004226:	d113      	bne.n	8004250 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	1c9a      	adds	r2, r3, #2
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d119      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x1a4>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d014      	beq.n	8004292 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	b292      	uxth	r2, r2
 8004274:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427a:	1c9a      	adds	r2, r3, #2
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800428e:	2301      	movs	r3, #1
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004292:	f7fe fd21 	bl	8002cd8 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429e:	429a      	cmp	r2, r3
 80042a0:	d80d      	bhi.n	80042be <HAL_SPI_TransmitReceive+0x1d0>
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d009      	beq.n	80042be <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0bc      	b.n	8004438 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1a0      	bne.n	800420a <HAL_SPI_TransmitReceive+0x11c>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d19b      	bne.n	800420a <HAL_SPI_TransmitReceive+0x11c>
 80042d2:	e082      	b.n	80043da <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x1f4>
 80042dc:	8afb      	ldrh	r3, [r7, #22]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d171      	bne.n	80043c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	330c      	adds	r3, #12
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004308:	e05d      	b.n	80043c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b02      	cmp	r3, #2
 8004316:	d11c      	bne.n	8004352 <HAL_SPI_TransmitReceive+0x264>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <HAL_SPI_TransmitReceive+0x264>
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	2b01      	cmp	r3, #1
 8004326:	d114      	bne.n	8004352 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	7812      	ldrb	r2, [r2, #0]
 8004334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b01      	cmp	r3, #1
 800435e:	d119      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x2a6>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d014      	beq.n	8004394 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004390:	2301      	movs	r3, #1
 8004392:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004394:	f7fe fca0 	bl	8002cd8 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d803      	bhi.n	80043ac <HAL_SPI_TransmitReceive+0x2be>
 80043a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d102      	bne.n	80043b2 <HAL_SPI_TransmitReceive+0x2c4>
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e038      	b.n	8004438 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d19c      	bne.n	800430a <HAL_SPI_TransmitReceive+0x21c>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d197      	bne.n	800430a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f8b6 	bl	8004550 <SPI_EndRxTxTransaction>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e01d      	b.n	8004438 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004436:	2300      	movs	r3, #0
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3728      	adds	r7, #40	@ 0x28
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004450:	f7fe fc42 	bl	8002cd8 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	4413      	add	r3, r2
 800445e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004460:	f7fe fc3a 	bl	8002cd8 <HAL_GetTick>
 8004464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004466:	4b39      	ldr	r3, [pc, #228]	@ (800454c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	015b      	lsls	r3, r3, #5
 800446c:	0d1b      	lsrs	r3, r3, #20
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004476:	e054      	b.n	8004522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d050      	beq.n	8004522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004480:	f7fe fc2a 	bl	8002cd8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	429a      	cmp	r2, r3
 800448e:	d902      	bls.n	8004496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d13d      	bne.n	8004512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ae:	d111      	bne.n	80044d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b8:	d004      	beq.n	80044c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c2:	d107      	bne.n	80044d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044dc:	d10f      	bne.n	80044fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e017      	b.n	8004542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	3b01      	subs	r3, #1
 8004520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	429a      	cmp	r2, r3
 800453e:	d19b      	bne.n	8004478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000008 	.word	0x20000008

08004550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2201      	movs	r2, #1
 8004564:	2102      	movs	r1, #2
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff ff6a 	bl	8004440 <SPI_WaitFlagStateUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e032      	b.n	80045e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004582:	4b1b      	ldr	r3, [pc, #108]	@ (80045f0 <SPI_EndRxTxTransaction+0xa0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1b      	ldr	r2, [pc, #108]	@ (80045f4 <SPI_EndRxTxTransaction+0xa4>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	0d5b      	lsrs	r3, r3, #21
 800458e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a0:	d112      	bne.n	80045c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	@ 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff ff47 	bl	8004440 <SPI_WaitFlagStateUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d016      	beq.n	80045e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e00f      	b.n	80045e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045de:	2b80      	cmp	r3, #128	@ 0x80
 80045e0:	d0f2      	beq.n	80045c8 <SPI_EndRxTxTransaction+0x78>
 80045e2:	e000      	b.n	80045e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80045e4:	bf00      	nop
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000008 	.word	0x20000008
 80045f4:	165e9f81 	.word	0x165e9f81

080045f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e041      	b.n	800468e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fe fa38 	bl	8002a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f000 f95e 	bl	80048f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e046      	b.n	800473e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a23      	ldr	r2, [pc, #140]	@ (800474c <HAL_TIM_Base_Start+0xb4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d022      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ca:	d01d      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004750 <HAL_TIM_Base_Start+0xb8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d018      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1e      	ldr	r2, [pc, #120]	@ (8004754 <HAL_TIM_Base_Start+0xbc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d013      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004758 <HAL_TIM_Base_Start+0xc0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1b      	ldr	r2, [pc, #108]	@ (800475c <HAL_TIM_Base_Start+0xc4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a19      	ldr	r2, [pc, #100]	@ (8004760 <HAL_TIM_Base_Start+0xc8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a18      	ldr	r2, [pc, #96]	@ (8004764 <HAL_TIM_Base_Start+0xcc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d111      	bne.n	800472c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d010      	beq.n	800473c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472a:	e007      	b.n	800473c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40010000 	.word	0x40010000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40010400 	.word	0x40010400
 8004760:	40014000 	.word	0x40014000
 8004764:	40001800 	.word	0x40001800

08004768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIM_ConfigClockSource+0x1c>
 8004780:	2302      	movs	r3, #2
 8004782:	e0b4      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x186>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047bc:	d03e      	beq.n	800483c <HAL_TIM_ConfigClockSource+0xd4>
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c2:	f200 8087 	bhi.w	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ca:	f000 8086 	beq.w	80048da <HAL_TIM_ConfigClockSource+0x172>
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d2:	d87f      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b70      	cmp	r3, #112	@ 0x70
 80047d6:	d01a      	beq.n	800480e <HAL_TIM_ConfigClockSource+0xa6>
 80047d8:	2b70      	cmp	r3, #112	@ 0x70
 80047da:	d87b      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047dc:	2b60      	cmp	r3, #96	@ 0x60
 80047de:	d050      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0x11a>
 80047e0:	2b60      	cmp	r3, #96	@ 0x60
 80047e2:	d877      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047e4:	2b50      	cmp	r3, #80	@ 0x50
 80047e6:	d03c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0xfa>
 80047e8:	2b50      	cmp	r3, #80	@ 0x50
 80047ea:	d873      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d058      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x13a>
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d86f      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b30      	cmp	r3, #48	@ 0x30
 80047f6:	d064      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 80047f8:	2b30      	cmp	r3, #48	@ 0x30
 80047fa:	d86b      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d060      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004800:	2b20      	cmp	r3, #32
 8004802:	d867      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d05c      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	2b10      	cmp	r3, #16
 800480a:	d05a      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	e062      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800481e:	f000 f991 	bl	8004b44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	609a      	str	r2, [r3, #8]
      break;
 800483a:	e04f      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800484c:	f000 f97a 	bl	8004b44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800485e:	609a      	str	r2, [r3, #8]
      break;
 8004860:	e03c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	461a      	mov	r2, r3
 8004870:	f000 f8ee 	bl	8004a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2150      	movs	r1, #80	@ 0x50
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f947 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 8004880:	e02c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800488e:	461a      	mov	r2, r3
 8004890:	f000 f90d 	bl	8004aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2160      	movs	r1, #96	@ 0x60
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f937 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 80048a0:	e01c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 f8ce 	bl	8004a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2140      	movs	r1, #64	@ 0x40
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f927 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 80048c0:	e00c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 f91e 	bl	8004b0e <TIM_ITRx_SetConfig>
      break;
 80048d2:	e003      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e000      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a46      	ldr	r2, [pc, #280]	@ (8004a24 <TIM_Base_SetConfig+0x12c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004916:	d00f      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a43      	ldr	r2, [pc, #268]	@ (8004a28 <TIM_Base_SetConfig+0x130>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a42      	ldr	r2, [pc, #264]	@ (8004a2c <TIM_Base_SetConfig+0x134>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a41      	ldr	r2, [pc, #260]	@ (8004a30 <TIM_Base_SetConfig+0x138>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a40      	ldr	r2, [pc, #256]	@ (8004a34 <TIM_Base_SetConfig+0x13c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a35      	ldr	r2, [pc, #212]	@ (8004a24 <TIM_Base_SetConfig+0x12c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d02b      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004958:	d027      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a32      	ldr	r2, [pc, #200]	@ (8004a28 <TIM_Base_SetConfig+0x130>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d023      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a31      	ldr	r2, [pc, #196]	@ (8004a2c <TIM_Base_SetConfig+0x134>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01f      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a30      	ldr	r2, [pc, #192]	@ (8004a30 <TIM_Base_SetConfig+0x138>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01b      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2f      	ldr	r2, [pc, #188]	@ (8004a34 <TIM_Base_SetConfig+0x13c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d017      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a38 <TIM_Base_SetConfig+0x140>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2d      	ldr	r2, [pc, #180]	@ (8004a3c <TIM_Base_SetConfig+0x144>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00f      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a40 <TIM_Base_SetConfig+0x148>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00b      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2b      	ldr	r2, [pc, #172]	@ (8004a44 <TIM_Base_SetConfig+0x14c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d007      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a48 <TIM_Base_SetConfig+0x150>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d003      	beq.n	80049aa <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a29      	ldr	r2, [pc, #164]	@ (8004a4c <TIM_Base_SetConfig+0x154>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d108      	bne.n	80049bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a10      	ldr	r2, [pc, #64]	@ (8004a24 <TIM_Base_SetConfig+0x12c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a12      	ldr	r2, [pc, #72]	@ (8004a34 <TIM_Base_SetConfig+0x13c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d103      	bne.n	80049f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d105      	bne.n	8004a16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f023 0201 	bic.w	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]
  }
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40010400 	.word	0x40010400
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800
 8004a44:	40001800 	.word	0x40001800
 8004a48:	40001c00 	.word	0x40001c00
 8004a4c:	40002000 	.word	0x40002000

08004a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f023 0201 	bic.w	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 030a 	bic.w	r3, r3, #10
 8004a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b087      	sub	sp, #28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f023 0210 	bic.w	r2, r3, #16
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004aea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f043 0307 	orr.w	r3, r3, #7
 8004b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	021a      	lsls	r2, r3, #8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e05a      	b.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a21      	ldr	r2, [pc, #132]	@ (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be8:	d01d      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1d      	ldr	r2, [pc, #116]	@ (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1a      	ldr	r2, [pc, #104]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a18      	ldr	r2, [pc, #96]	@ (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a17      	ldr	r2, [pc, #92]	@ (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a15      	ldr	r2, [pc, #84]	@ (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10c      	bne.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40001800 	.word	0x40001800

08004c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e042      	b.n	8004d14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd ff40 	bl	8002b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	@ 0x24
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fa09 	bl	80050d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	@ 0x28
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d175      	bne.n	8004e28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_UART_Transmit+0x2c>
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e06e      	b.n	8004e2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2221      	movs	r2, #33	@ 0x21
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d5a:	f7fd ffbd 	bl	8002cd8 <HAL_GetTick>
 8004d5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	88fa      	ldrh	r2, [r7, #6]
 8004d6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d74:	d108      	bne.n	8004d88 <HAL_UART_Transmit+0x6c>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e003      	b.n	8004d90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d90:	e02e      	b.n	8004df0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2180      	movs	r1, #128	@ 0x80
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f8df 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e03a      	b.n	8004e2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10b      	bne.n	8004dd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	3302      	adds	r3, #2
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	e007      	b.n	8004de2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	781a      	ldrb	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	3301      	adds	r3, #1
 8004de0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1cb      	bne.n	8004d92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2140      	movs	r1, #64	@ 0x40
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f8ab 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e006      	b.n	8004e2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b08a      	sub	sp, #40	@ 0x28
 8004e36:	af02      	add	r7, sp, #8
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	f040 8081 	bne.w	8004f56 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_Receive+0x2e>
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e079      	b.n	8004f58 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2222      	movs	r2, #34	@ 0x22
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e78:	f7fd ff2e 	bl	8002cd8 <HAL_GetTick>
 8004e7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	88fa      	ldrh	r2, [r7, #6]
 8004e82:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e92:	d108      	bne.n	8004ea6 <HAL_UART_Receive+0x74>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	e003      	b.n	8004eae <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004eae:	e047      	b.n	8004f40 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2120      	movs	r1, #32
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f850 	bl	8004f60 <UART_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e042      	b.n	8004f58 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10c      	bne.n	8004ef2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	3302      	adds	r3, #2
 8004eee:	61bb      	str	r3, [r7, #24]
 8004ef0:	e01f      	b.n	8004f32 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efa:	d007      	beq.n	8004f0c <HAL_UART_Receive+0xda>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <HAL_UART_Receive+0xe8>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	e008      	b.n	8004f2c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1b2      	bne.n	8004eb0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e000      	b.n	8004f58 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
  }
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f70:	e03b      	b.n	8004fea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d037      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7a:	f7fd fead 	bl	8002cd8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d302      	bcc.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e03a      	b.n	800500a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d023      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b80      	cmp	r3, #128	@ 0x80
 8004fa6:	d020      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b40      	cmp	r3, #64	@ 0x40
 8004fac:	d01d      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d116      	bne.n	8004fea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f81d 	bl	8005012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2208      	movs	r2, #8
 8004fdc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e00f      	b.n	800500a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2301      	moveq	r3, #1
 8004ffc:	2300      	movne	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	429a      	cmp	r2, r3
 8005006:	d0b4      	beq.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005012:	b480      	push	{r7}
 8005014:	b095      	sub	sp, #84	@ 0x54
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800503a:	643a      	str	r2, [r7, #64]	@ 0x40
 800503c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005040:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e5      	bne.n	800501a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3314      	adds	r3, #20
 8005054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	61fb      	str	r3, [r7, #28]
   return(result);
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3314      	adds	r3, #20
 800506c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800506e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e5      	bne.n	800504e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005086:	2b01      	cmp	r3, #1
 8005088:	d119      	bne.n	80050be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	60bb      	str	r3, [r7, #8]
   return(result);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f023 0310 	bic.w	r3, r3, #16
 80050a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050aa:	61ba      	str	r2, [r7, #24]
 80050ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6979      	ldr	r1, [r7, #20]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	613b      	str	r3, [r7, #16]
   return(result);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050cc:	bf00      	nop
 80050ce:	3754      	adds	r7, #84	@ 0x54
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050dc:	b0c0      	sub	sp, #256	@ 0x100
 80050de:	af00      	add	r7, sp, #0
 80050e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	68d9      	ldr	r1, [r3, #12]
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	ea40 0301 	orr.w	r3, r0, r1
 8005100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	431a      	orrs	r2, r3
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	431a      	orrs	r2, r3
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005130:	f021 010c 	bic.w	r1, r1, #12
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800513e:	430b      	orrs	r3, r1
 8005140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005152:	6999      	ldr	r1, [r3, #24]
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	ea40 0301 	orr.w	r3, r0, r1
 800515e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b8f      	ldr	r3, [pc, #572]	@ (80053a4 <UART_SetConfig+0x2cc>)
 8005168:	429a      	cmp	r2, r3
 800516a:	d005      	beq.n	8005178 <UART_SetConfig+0xa0>
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b8d      	ldr	r3, [pc, #564]	@ (80053a8 <UART_SetConfig+0x2d0>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d104      	bne.n	8005182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005178:	f7fe f990 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 800517c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005180:	e003      	b.n	800518a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005182:	f7fe f977 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8005186:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005194:	f040 810c 	bne.w	80053b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800519c:	2200      	movs	r2, #0
 800519e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051aa:	4622      	mov	r2, r4
 80051ac:	462b      	mov	r3, r5
 80051ae:	1891      	adds	r1, r2, r2
 80051b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051b2:	415b      	adcs	r3, r3
 80051b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051ba:	4621      	mov	r1, r4
 80051bc:	eb12 0801 	adds.w	r8, r2, r1
 80051c0:	4629      	mov	r1, r5
 80051c2:	eb43 0901 	adc.w	r9, r3, r1
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051da:	4690      	mov	r8, r2
 80051dc:	4699      	mov	r9, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	eb18 0303 	adds.w	r3, r8, r3
 80051e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051e8:	462b      	mov	r3, r5
 80051ea:	eb49 0303 	adc.w	r3, r9, r3
 80051ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005206:	460b      	mov	r3, r1
 8005208:	18db      	adds	r3, r3, r3
 800520a:	653b      	str	r3, [r7, #80]	@ 0x50
 800520c:	4613      	mov	r3, r2
 800520e:	eb42 0303 	adc.w	r3, r2, r3
 8005212:	657b      	str	r3, [r7, #84]	@ 0x54
 8005214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800521c:	f7fb fda4 	bl	8000d68 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4b61      	ldr	r3, [pc, #388]	@ (80053ac <UART_SetConfig+0x2d4>)
 8005226:	fba3 2302 	umull	r2, r3, r3, r2
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	011c      	lsls	r4, r3, #4
 800522e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005232:	2200      	movs	r2, #0
 8005234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005238:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800523c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005240:	4642      	mov	r2, r8
 8005242:	464b      	mov	r3, r9
 8005244:	1891      	adds	r1, r2, r2
 8005246:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005248:	415b      	adcs	r3, r3
 800524a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800524c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005250:	4641      	mov	r1, r8
 8005252:	eb12 0a01 	adds.w	sl, r2, r1
 8005256:	4649      	mov	r1, r9
 8005258:	eb43 0b01 	adc.w	fp, r3, r1
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800526c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005270:	4692      	mov	sl, r2
 8005272:	469b      	mov	fp, r3
 8005274:	4643      	mov	r3, r8
 8005276:	eb1a 0303 	adds.w	r3, sl, r3
 800527a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800527e:	464b      	mov	r3, r9
 8005280:	eb4b 0303 	adc.w	r3, fp, r3
 8005284:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005294:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800529c:	460b      	mov	r3, r1
 800529e:	18db      	adds	r3, r3, r3
 80052a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052a2:	4613      	mov	r3, r2
 80052a4:	eb42 0303 	adc.w	r3, r2, r3
 80052a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052b2:	f7fb fd59 	bl	8000d68 <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	4b3b      	ldr	r3, [pc, #236]	@ (80053ac <UART_SetConfig+0x2d4>)
 80052be:	fba3 2301 	umull	r2, r3, r3, r1
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	2264      	movs	r2, #100	@ 0x64
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	1acb      	subs	r3, r1, r3
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052d2:	4b36      	ldr	r3, [pc, #216]	@ (80053ac <UART_SetConfig+0x2d4>)
 80052d4:	fba3 2302 	umull	r2, r3, r3, r2
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052e0:	441c      	add	r4, r3
 80052e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	1891      	adds	r1, r2, r2
 80052fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052fc:	415b      	adcs	r3, r3
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005304:	4641      	mov	r1, r8
 8005306:	1851      	adds	r1, r2, r1
 8005308:	6339      	str	r1, [r7, #48]	@ 0x30
 800530a:	4649      	mov	r1, r9
 800530c:	414b      	adcs	r3, r1
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800531c:	4659      	mov	r1, fp
 800531e:	00cb      	lsls	r3, r1, #3
 8005320:	4651      	mov	r1, sl
 8005322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005326:	4651      	mov	r1, sl
 8005328:	00ca      	lsls	r2, r1, #3
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	4603      	mov	r3, r0
 8005330:	4642      	mov	r2, r8
 8005332:	189b      	adds	r3, r3, r2
 8005334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005338:	464b      	mov	r3, r9
 800533a:	460a      	mov	r2, r1
 800533c:	eb42 0303 	adc.w	r3, r2, r3
 8005340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005350:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005358:	460b      	mov	r3, r1
 800535a:	18db      	adds	r3, r3, r3
 800535c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800535e:	4613      	mov	r3, r2
 8005360:	eb42 0303 	adc.w	r3, r2, r3
 8005364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800536a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800536e:	f7fb fcfb 	bl	8000d68 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4b0d      	ldr	r3, [pc, #52]	@ (80053ac <UART_SetConfig+0x2d4>)
 8005378:	fba3 1302 	umull	r1, r3, r3, r2
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	2164      	movs	r1, #100	@ 0x64
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	3332      	adds	r3, #50	@ 0x32
 800538a:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <UART_SetConfig+0x2d4>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	f003 0207 	and.w	r2, r3, #7
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4422      	add	r2, r4
 800539e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053a0:	e106      	b.n	80055b0 <UART_SetConfig+0x4d8>
 80053a2:	bf00      	nop
 80053a4:	40011000 	.word	0x40011000
 80053a8:	40011400 	.word	0x40011400
 80053ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053c2:	4642      	mov	r2, r8
 80053c4:	464b      	mov	r3, r9
 80053c6:	1891      	adds	r1, r2, r2
 80053c8:	6239      	str	r1, [r7, #32]
 80053ca:	415b      	adcs	r3, r3
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053d2:	4641      	mov	r1, r8
 80053d4:	1854      	adds	r4, r2, r1
 80053d6:	4649      	mov	r1, r9
 80053d8:	eb43 0501 	adc.w	r5, r3, r1
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	00eb      	lsls	r3, r5, #3
 80053e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ea:	00e2      	lsls	r2, r4, #3
 80053ec:	4614      	mov	r4, r2
 80053ee:	461d      	mov	r5, r3
 80053f0:	4643      	mov	r3, r8
 80053f2:	18e3      	adds	r3, r4, r3
 80053f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053f8:	464b      	mov	r3, r9
 80053fa:	eb45 0303 	adc.w	r3, r5, r3
 80053fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800540e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800541e:	4629      	mov	r1, r5
 8005420:	008b      	lsls	r3, r1, #2
 8005422:	4621      	mov	r1, r4
 8005424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005428:	4621      	mov	r1, r4
 800542a:	008a      	lsls	r2, r1, #2
 800542c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005430:	f7fb fc9a 	bl	8000d68 <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4b60      	ldr	r3, [pc, #384]	@ (80055bc <UART_SetConfig+0x4e4>)
 800543a:	fba3 2302 	umull	r2, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	011c      	lsls	r4, r3, #4
 8005442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005446:	2200      	movs	r2, #0
 8005448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800544c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005454:	4642      	mov	r2, r8
 8005456:	464b      	mov	r3, r9
 8005458:	1891      	adds	r1, r2, r2
 800545a:	61b9      	str	r1, [r7, #24]
 800545c:	415b      	adcs	r3, r3
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005464:	4641      	mov	r1, r8
 8005466:	1851      	adds	r1, r2, r1
 8005468:	6139      	str	r1, [r7, #16]
 800546a:	4649      	mov	r1, r9
 800546c:	414b      	adcs	r3, r1
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800547c:	4659      	mov	r1, fp
 800547e:	00cb      	lsls	r3, r1, #3
 8005480:	4651      	mov	r1, sl
 8005482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005486:	4651      	mov	r1, sl
 8005488:	00ca      	lsls	r2, r1, #3
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	4603      	mov	r3, r0
 8005490:	4642      	mov	r2, r8
 8005492:	189b      	adds	r3, r3, r2
 8005494:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005498:	464b      	mov	r3, r9
 800549a:	460a      	mov	r2, r1
 800549c:	eb42 0303 	adc.w	r3, r2, r3
 80054a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054bc:	4649      	mov	r1, r9
 80054be:	008b      	lsls	r3, r1, #2
 80054c0:	4641      	mov	r1, r8
 80054c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c6:	4641      	mov	r1, r8
 80054c8:	008a      	lsls	r2, r1, #2
 80054ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054ce:	f7fb fc4b 	bl	8000d68 <__aeabi_uldivmod>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	4b38      	ldr	r3, [pc, #224]	@ (80055bc <UART_SetConfig+0x4e4>)
 80054da:	fba3 2301 	umull	r2, r3, r3, r1
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	2264      	movs	r2, #100	@ 0x64
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
 80054e6:	1acb      	subs	r3, r1, r3
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	3332      	adds	r3, #50	@ 0x32
 80054ec:	4a33      	ldr	r2, [pc, #204]	@ (80055bc <UART_SetConfig+0x4e4>)
 80054ee:	fba2 2303 	umull	r2, r3, r2, r3
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054f8:	441c      	add	r4, r3
 80054fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fe:	2200      	movs	r2, #0
 8005500:	673b      	str	r3, [r7, #112]	@ 0x70
 8005502:	677a      	str	r2, [r7, #116]	@ 0x74
 8005504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	1891      	adds	r1, r2, r2
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	415b      	adcs	r3, r3
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005518:	4641      	mov	r1, r8
 800551a:	1851      	adds	r1, r2, r1
 800551c:	6039      	str	r1, [r7, #0]
 800551e:	4649      	mov	r1, r9
 8005520:	414b      	adcs	r3, r1
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005530:	4659      	mov	r1, fp
 8005532:	00cb      	lsls	r3, r1, #3
 8005534:	4651      	mov	r1, sl
 8005536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800553a:	4651      	mov	r1, sl
 800553c:	00ca      	lsls	r2, r1, #3
 800553e:	4610      	mov	r0, r2
 8005540:	4619      	mov	r1, r3
 8005542:	4603      	mov	r3, r0
 8005544:	4642      	mov	r2, r8
 8005546:	189b      	adds	r3, r3, r2
 8005548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800554a:	464b      	mov	r3, r9
 800554c:	460a      	mov	r2, r1
 800554e:	eb42 0303 	adc.w	r3, r2, r3
 8005552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	663b      	str	r3, [r7, #96]	@ 0x60
 800555e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800556c:	4649      	mov	r1, r9
 800556e:	008b      	lsls	r3, r1, #2
 8005570:	4641      	mov	r1, r8
 8005572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005576:	4641      	mov	r1, r8
 8005578:	008a      	lsls	r2, r1, #2
 800557a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800557e:	f7fb fbf3 	bl	8000d68 <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <UART_SetConfig+0x4e4>)
 8005588:	fba3 1302 	umull	r1, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	2164      	movs	r1, #100	@ 0x64
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	3332      	adds	r3, #50	@ 0x32
 800559a:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <UART_SetConfig+0x4e4>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	f003 020f 	and.w	r2, r3, #15
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4422      	add	r2, r4
 80055ae:	609a      	str	r2, [r3, #8]
}
 80055b0:	bf00      	nop
 80055b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055b6:	46bd      	mov	sp, r7
 80055b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055bc:	51eb851f 	.word	0x51eb851f

080055c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80055c4:	4904      	ldr	r1, [pc, #16]	@ (80055d8 <MX_FATFS_Init+0x18>)
 80055c6:	4805      	ldr	r0, [pc, #20]	@ (80055dc <MX_FATFS_Init+0x1c>)
 80055c8:	f003 fb40 	bl	8008c4c <FATFS_LinkDriver>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <MX_FATFS_Init+0x20>)
 80055d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000e08 	.word	0x20000e08
 80055dc:	20000014 	.word	0x20000014
 80055e0:	20000e04 	.word	0x20000e04

080055e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80055e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 f9d7 	bl	80059b4 <USER_SPI_initialize>
 8005606:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fab5 	bl	8005b8c <USER_SPI_status>
 8005622:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4603      	mov	r3, r0
 800563a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800563c:	7bf8      	ldrb	r0, [r7, #15]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	f000 fab8 	bl	8005bb8 <USER_SPI_read>
 8005648:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	4603      	mov	r3, r0
 8005660:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8005662:	7bf8      	ldrb	r0, [r7, #15]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	f000 fb0b 	bl	8005c84 <USER_SPI_write>
 800566e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	603a      	str	r2, [r7, #0]
 8005682:	71fb      	strb	r3, [r7, #7]
 8005684:	460b      	mov	r3, r1
 8005686:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8005688:	79b9      	ldrb	r1, [r7, #6]
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fb74 	bl	8005d7c <USER_SPI_ioctl>
 8005694:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80056a8:	f7fd fb16 	bl	8002cd8 <HAL_GetTick>
 80056ac:	4603      	mov	r3, r0
 80056ae:	4a04      	ldr	r2, [pc, #16]	@ (80056c0 <SPI_Timer_On+0x20>)
 80056b0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80056b2:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <SPI_Timer_On+0x24>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6013      	str	r3, [r2, #0]
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000e10 	.word	0x20000e10
 80056c4:	20000e14 	.word	0x20000e14

080056c8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80056cc:	f7fd fb04 	bl	8002cd8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	4b06      	ldr	r3, [pc, #24]	@ (80056ec <SPI_Timer_Status+0x24>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <SPI_Timer_Status+0x28>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	bf34      	ite	cc
 80056e0:	2301      	movcc	r3, #1
 80056e2:	2300      	movcs	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000e10 	.word	0x20000e10
 80056f0:	20000e14 	.word	0x20000e14

080056f4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80056fe:	f107 020f 	add.w	r2, r7, #15
 8005702:	1df9      	adds	r1, r7, #7
 8005704:	2332      	movs	r3, #50	@ 0x32
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2301      	movs	r3, #1
 800570a:	4804      	ldr	r0, [pc, #16]	@ (800571c <xchg_spi+0x28>)
 800570c:	f7fe fcef 	bl	80040ee <HAL_SPI_TransmitReceive>
    return rxDat;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000cbc 	.word	0x20000cbc

08005720 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	e00a      	b.n	8005746 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	18d4      	adds	r4, r2, r3
 8005736:	20ff      	movs	r0, #255	@ 0xff
 8005738:	f7ff ffdc 	bl	80056f4 <xchg_spi>
 800573c:	4603      	mov	r3, r0
 800573e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d3f0      	bcc.n	8005730 <rcvr_spi_multi+0x10>
	}
}
 800574e:	bf00      	nop
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	bd90      	pop	{r4, r7, pc}

08005758 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	b29a      	uxth	r2, r3
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4803      	ldr	r0, [pc, #12]	@ (800577c <xmit_spi_multi+0x24>)
 800576e:	f7fe fb7a 	bl	8003e66 <HAL_SPI_Transmit>
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000cbc 	.word	0x20000cbc

08005780 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005788:	f7fd faa6 	bl	8002cd8 <HAL_GetTick>
 800578c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005792:	20ff      	movs	r0, #255	@ 0xff
 8005794:	f7ff ffae 	bl	80056f4 <xchg_spi>
 8005798:	4603      	mov	r3, r0
 800579a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2bff      	cmp	r3, #255	@ 0xff
 80057a0:	d007      	beq.n	80057b2 <wait_ready+0x32>
 80057a2:	f7fd fa99 	bl	8002cd8 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d8ef      	bhi.n	8005792 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2bff      	cmp	r3, #255	@ 0xff
 80057b6:	bf0c      	ite	eq
 80057b8:	2301      	moveq	r3, #1
 80057ba:	2300      	movne	r3, #0
 80057bc:	b2db      	uxtb	r3, r3
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80057cc:	2201      	movs	r2, #1
 80057ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057d2:	4804      	ldr	r0, [pc, #16]	@ (80057e4 <despiselect+0x1c>)
 80057d4:	f7fd fd42 	bl	800325c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80057d8:	20ff      	movs	r0, #255	@ 0xff
 80057da:	f7ff ff8b 	bl	80056f4 <xchg_spi>

}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40020000 	.word	0x40020000

080057e8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80057ec:	2200      	movs	r2, #0
 80057ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057f2:	480a      	ldr	r0, [pc, #40]	@ (800581c <spiselect+0x34>)
 80057f4:	f7fd fd32 	bl	800325c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80057f8:	20ff      	movs	r0, #255	@ 0xff
 80057fa:	f7ff ff7b 	bl	80056f4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80057fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005802:	f7ff ffbd 	bl	8005780 <wait_ready>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <spiselect+0x28>
 800580c:	2301      	movs	r3, #1
 800580e:	e002      	b.n	8005816 <spiselect+0x2e>

	despiselect();
 8005810:	f7ff ffda 	bl	80057c8 <despiselect>
	return 0;	/* Timeout */
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40020000 	.word	0x40020000

08005820 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800582a:	20c8      	movs	r0, #200	@ 0xc8
 800582c:	f7ff ff38 	bl	80056a0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005830:	20ff      	movs	r0, #255	@ 0xff
 8005832:	f7ff ff5f 	bl	80056f4 <xchg_spi>
 8005836:	4603      	mov	r3, r0
 8005838:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2bff      	cmp	r3, #255	@ 0xff
 800583e:	d104      	bne.n	800584a <rcvr_datablock+0x2a>
 8005840:	f7ff ff42 	bl	80056c8 <SPI_Timer_Status>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f2      	bne.n	8005830 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2bfe      	cmp	r3, #254	@ 0xfe
 800584e:	d001      	beq.n	8005854 <rcvr_datablock+0x34>
 8005850:	2300      	movs	r3, #0
 8005852:	e00a      	b.n	800586a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ff62 	bl	8005720 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800585c:	20ff      	movs	r0, #255	@ 0xff
 800585e:	f7ff ff49 	bl	80056f4 <xchg_spi>
 8005862:	20ff      	movs	r0, #255	@ 0xff
 8005864:	f7ff ff46 	bl	80056f4 <xchg_spi>

	return 1;						/* Function succeeded */
 8005868:	2301      	movs	r3, #1
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800587e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005882:	f7ff ff7d 	bl	8005780 <wait_ready>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <xmit_datablock+0x1e>
 800588c:	2300      	movs	r3, #0
 800588e:	e01e      	b.n	80058ce <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff ff2e 	bl	80056f4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	2bfd      	cmp	r3, #253	@ 0xfd
 800589c:	d016      	beq.n	80058cc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800589e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff ff58 	bl	8005758 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80058a8:	20ff      	movs	r0, #255	@ 0xff
 80058aa:	f7ff ff23 	bl	80056f4 <xchg_spi>
 80058ae:	20ff      	movs	r0, #255	@ 0xff
 80058b0:	f7ff ff20 	bl	80056f4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80058b4:	20ff      	movs	r0, #255	@ 0xff
 80058b6:	f7ff ff1d 	bl	80056f4 <xchg_spi>
 80058ba:	4603      	mov	r3, r0
 80058bc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2b05      	cmp	r3, #5
 80058c6:	d001      	beq.n	80058cc <xmit_datablock+0x5a>
 80058c8:	2300      	movs	r3, #0
 80058ca:	e000      	b.n	80058ce <xmit_datablock+0x5c>
	}
	return 1;
 80058cc:	2301      	movs	r3, #1
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	4603      	mov	r3, r0
 80058de:	6039      	str	r1, [r7, #0]
 80058e0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80058e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	da0e      	bge.n	8005908 <send_cmd+0x32>
		cmd &= 0x7F;
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058f0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80058f2:	2100      	movs	r1, #0
 80058f4:	2037      	movs	r0, #55	@ 0x37
 80058f6:	f7ff ffee 	bl	80058d6 <send_cmd>
 80058fa:	4603      	mov	r3, r0
 80058fc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80058fe:	7bbb      	ldrb	r3, [r7, #14]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d901      	bls.n	8005908 <send_cmd+0x32>
 8005904:	7bbb      	ldrb	r3, [r7, #14]
 8005906:	e051      	b.n	80059ac <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	2b0c      	cmp	r3, #12
 800590c:	d008      	beq.n	8005920 <send_cmd+0x4a>
		despiselect();
 800590e:	f7ff ff5b 	bl	80057c8 <despiselect>
		if (!spiselect()) return 0xFF;
 8005912:	f7ff ff69 	bl	80057e8 <spiselect>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <send_cmd+0x4a>
 800591c:	23ff      	movs	r3, #255	@ 0xff
 800591e:	e045      	b.n	80059ac <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005926:	b2db      	uxtb	r3, r3
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fee3 	bl	80056f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	0e1b      	lsrs	r3, r3, #24
 8005932:	b2db      	uxtb	r3, r3
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fedd 	bl	80056f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	0c1b      	lsrs	r3, r3, #16
 800593e:	b2db      	uxtb	r3, r3
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fed7 	bl	80056f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	b2db      	uxtb	r3, r3
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fed1 	bl	80056f4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fecc 	bl	80056f4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <send_cmd+0x94>
 8005966:	2395      	movs	r3, #149	@ 0x95
 8005968:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d101      	bne.n	8005974 <send_cmd+0x9e>
 8005970:	2387      	movs	r3, #135	@ 0x87
 8005972:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff febc 	bl	80056f4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b0c      	cmp	r3, #12
 8005980:	d102      	bne.n	8005988 <send_cmd+0xb2>
 8005982:	20ff      	movs	r0, #255	@ 0xff
 8005984:	f7ff feb6 	bl	80056f4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005988:	230a      	movs	r3, #10
 800598a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800598c:	20ff      	movs	r0, #255	@ 0xff
 800598e:	f7ff feb1 	bl	80056f4 <xchg_spi>
 8005992:	4603      	mov	r3, r0
 8005994:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800599a:	2b00      	cmp	r3, #0
 800599c:	da05      	bge.n	80059aa <send_cmd+0xd4>
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <send_cmd+0xb6>

	return res;							/* Return received response */
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <USER_SPI_initialize+0x14>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0d6      	b.n	8005b76 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80059c8:	4b6d      	ldr	r3, [pc, #436]	@ (8005b80 <USER_SPI_initialize+0x1cc>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <USER_SPI_initialize+0x2a>
 80059d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b80 <USER_SPI_initialize+0x1cc>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	e0cb      	b.n	8005b76 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80059de:	4b69      	ldr	r3, [pc, #420]	@ (8005b84 <USER_SPI_initialize+0x1d0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80059e8:	4b66      	ldr	r3, [pc, #408]	@ (8005b84 <USER_SPI_initialize+0x1d0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80059f0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80059f2:	230a      	movs	r3, #10
 80059f4:	73fb      	strb	r3, [r7, #15]
 80059f6:	e005      	b.n	8005a04 <USER_SPI_initialize+0x50>
 80059f8:	20ff      	movs	r0, #255	@ 0xff
 80059fa:	f7ff fe7b 	bl	80056f4 <xchg_spi>
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f6      	bne.n	80059f8 <USER_SPI_initialize+0x44>

	ty = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005a0e:	2100      	movs	r1, #0
 8005a10:	2000      	movs	r0, #0
 8005a12:	f7ff ff60 	bl	80058d6 <send_cmd>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	f040 808b 	bne.w	8005b34 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005a1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a22:	f7ff fe3d 	bl	80056a0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005a26:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8005a2a:	2008      	movs	r0, #8
 8005a2c:	f7ff ff53 	bl	80058d6 <send_cmd>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d151      	bne.n	8005ada <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
 8005a3a:	e00d      	b.n	8005a58 <USER_SPI_initialize+0xa4>
 8005a3c:	7bfc      	ldrb	r4, [r7, #15]
 8005a3e:	20ff      	movs	r0, #255	@ 0xff
 8005a40:	f7ff fe58 	bl	80056f4 <xchg_spi>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	f104 0310 	add.w	r3, r4, #16
 8005a4c:	443b      	add	r3, r7
 8005a4e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	3301      	adds	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d9ee      	bls.n	8005a3c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005a5e:	7abb      	ldrb	r3, [r7, #10]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d167      	bne.n	8005b34 <USER_SPI_initialize+0x180>
 8005a64:	7afb      	ldrb	r3, [r7, #11]
 8005a66:	2baa      	cmp	r3, #170	@ 0xaa
 8005a68:	d164      	bne.n	8005b34 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005a6a:	bf00      	nop
 8005a6c:	f7ff fe2c 	bl	80056c8 <SPI_Timer_Status>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <USER_SPI_initialize+0xd2>
 8005a76:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005a7a:	20a9      	movs	r0, #169	@ 0xa9
 8005a7c:	f7ff ff2b 	bl	80058d6 <send_cmd>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f2      	bne.n	8005a6c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005a86:	f7ff fe1f 	bl	80056c8 <SPI_Timer_Status>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d051      	beq.n	8005b34 <USER_SPI_initialize+0x180>
 8005a90:	2100      	movs	r1, #0
 8005a92:	203a      	movs	r0, #58	@ 0x3a
 8005a94:	f7ff ff1f 	bl	80058d6 <send_cmd>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d14a      	bne.n	8005b34 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
 8005aa2:	e00d      	b.n	8005ac0 <USER_SPI_initialize+0x10c>
 8005aa4:	7bfc      	ldrb	r4, [r7, #15]
 8005aa6:	20ff      	movs	r0, #255	@ 0xff
 8005aa8:	f7ff fe24 	bl	80056f4 <xchg_spi>
 8005aac:	4603      	mov	r3, r0
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f104 0310 	add.w	r3, r4, #16
 8005ab4:	443b      	add	r3, r7
 8005ab6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	3301      	adds	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d9ee      	bls.n	8005aa4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005ac6:	7a3b      	ldrb	r3, [r7, #8]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <USER_SPI_initialize+0x120>
 8005ad0:	230c      	movs	r3, #12
 8005ad2:	e000      	b.n	8005ad6 <USER_SPI_initialize+0x122>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	737b      	strb	r3, [r7, #13]
 8005ad8:	e02c      	b.n	8005b34 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005ada:	2100      	movs	r1, #0
 8005adc:	20a9      	movs	r0, #169	@ 0xa9
 8005ade:	f7ff fefa 	bl	80058d6 <send_cmd>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d804      	bhi.n	8005af2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005ae8:	2302      	movs	r3, #2
 8005aea:	737b      	strb	r3, [r7, #13]
 8005aec:	23a9      	movs	r3, #169	@ 0xa9
 8005aee:	73bb      	strb	r3, [r7, #14]
 8005af0:	e003      	b.n	8005afa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005af2:	2301      	movs	r3, #1
 8005af4:	737b      	strb	r3, [r7, #13]
 8005af6:	2301      	movs	r3, #1
 8005af8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005afa:	bf00      	nop
 8005afc:	f7ff fde4 	bl	80056c8 <SPI_Timer_Status>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <USER_SPI_initialize+0x162>
 8005b06:	7bbb      	ldrb	r3, [r7, #14]
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fee3 	bl	80058d6 <send_cmd>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f2      	bne.n	8005afc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005b16:	f7ff fdd7 	bl	80056c8 <SPI_Timer_Status>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <USER_SPI_initialize+0x17c>
 8005b20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b24:	2010      	movs	r0, #16
 8005b26:	f7ff fed6 	bl	80058d6 <send_cmd>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <USER_SPI_initialize+0x180>
				ty = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005b34:	4a14      	ldr	r2, [pc, #80]	@ (8005b88 <USER_SPI_initialize+0x1d4>)
 8005b36:	7b7b      	ldrb	r3, [r7, #13]
 8005b38:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005b3a:	f7ff fe45 	bl	80057c8 <despiselect>

	if (ty) {			/* OK */
 8005b3e:	7b7b      	ldrb	r3, [r7, #13]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d012      	beq.n	8005b6a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005b44:	4b0f      	ldr	r3, [pc, #60]	@ (8005b84 <USER_SPI_initialize+0x1d0>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <USER_SPI_initialize+0x1d0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0210 	orr.w	r2, r2, #16
 8005b56:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005b58:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <USER_SPI_initialize+0x1cc>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f023 0301 	bic.w	r3, r3, #1
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <USER_SPI_initialize+0x1cc>)
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	e002      	b.n	8005b70 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005b6a:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <USER_SPI_initialize+0x1cc>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005b70:	4b03      	ldr	r3, [pc, #12]	@ (8005b80 <USER_SPI_initialize+0x1cc>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	b2db      	uxtb	r3, r3
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd90      	pop	{r4, r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000028 	.word	0x20000028
 8005b84:	20000cbc 	.word	0x20000cbc
 8005b88:	20000e0c 	.word	0x20000e0c

08005b8c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <USER_SPI_status+0x14>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e002      	b.n	8005ba6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005ba0:	4b04      	ldr	r3, [pc, #16]	@ (8005bb4 <USER_SPI_status+0x28>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20000028 	.word	0x20000028

08005bb8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <USER_SPI_read+0x1c>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <USER_SPI_read+0x20>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	e04d      	b.n	8005c74 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005bd8:	4b28      	ldr	r3, [pc, #160]	@ (8005c7c <USER_SPI_read+0xc4>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <USER_SPI_read+0x32>
 8005be6:	2303      	movs	r3, #3
 8005be8:	e044      	b.n	8005c74 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005bea:	4b25      	ldr	r3, [pc, #148]	@ (8005c80 <USER_SPI_read+0xc8>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <USER_SPI_read+0x44>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	025b      	lsls	r3, r3, #9
 8005bfa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d111      	bne.n	8005c26 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	2011      	movs	r0, #17
 8005c06:	f7ff fe66 	bl	80058d6 <send_cmd>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d129      	bne.n	8005c64 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005c10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c14:	68b8      	ldr	r0, [r7, #8]
 8005c16:	f7ff fe03 	bl	8005820 <rcvr_datablock>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d021      	beq.n	8005c64 <USER_SPI_read+0xac>
			count = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	e01e      	b.n	8005c64 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	2012      	movs	r0, #18
 8005c2a:	f7ff fe54 	bl	80058d6 <send_cmd>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d117      	bne.n	8005c64 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005c34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c38:	68b8      	ldr	r0, [r7, #8]
 8005c3a:	f7ff fdf1 	bl	8005820 <rcvr_datablock>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <USER_SPI_read+0xa2>
				buff += 512;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005c4a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1ed      	bne.n	8005c34 <USER_SPI_read+0x7c>
 8005c58:	e000      	b.n	8005c5c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005c5a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	200c      	movs	r0, #12
 8005c60:	f7ff fe39 	bl	80058d6 <send_cmd>
		}
	}
	despiselect();
 8005c64:	f7ff fdb0 	bl	80057c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bf14      	ite	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	2300      	moveq	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000028 	.word	0x20000028
 8005c80:	20000e0c 	.word	0x20000e0c

08005c84 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <USER_SPI_write+0x1c>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <USER_SPI_write+0x20>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	e063      	b.n	8005d6c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005ca4:	4b33      	ldr	r3, [pc, #204]	@ (8005d74 <USER_SPI_write+0xf0>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <USER_SPI_write+0x32>
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e05a      	b.n	8005d6c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8005d74 <USER_SPI_write+0xf0>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <USER_SPI_write+0x44>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e051      	b.n	8005d6c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d78 <USER_SPI_write+0xf4>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <USER_SPI_write+0x56>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	025b      	lsls	r3, r3, #9
 8005cd8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d110      	bne.n	8005d02 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	2018      	movs	r0, #24
 8005ce4:	f7ff fdf7 	bl	80058d6 <send_cmd>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d136      	bne.n	8005d5c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005cee:	21fe      	movs	r1, #254	@ 0xfe
 8005cf0:	68b8      	ldr	r0, [r7, #8]
 8005cf2:	f7ff fdbe 	bl	8005872 <xmit_datablock>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d02f      	beq.n	8005d5c <USER_SPI_write+0xd8>
			count = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	e02c      	b.n	8005d5c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005d02:	4b1d      	ldr	r3, [pc, #116]	@ (8005d78 <USER_SPI_write+0xf4>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 0306 	and.w	r3, r3, #6
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <USER_SPI_write+0x92>
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	2097      	movs	r0, #151	@ 0x97
 8005d12:	f7ff fde0 	bl	80058d6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	2019      	movs	r0, #25
 8005d1a:	f7ff fddc 	bl	80058d6 <send_cmd>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d11b      	bne.n	8005d5c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005d24:	21fc      	movs	r1, #252	@ 0xfc
 8005d26:	68b8      	ldr	r0, [r7, #8]
 8005d28:	f7ff fda3 	bl	8005872 <xmit_datablock>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <USER_SPI_write+0xc4>
				buff += 512;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005d38:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ee      	bne.n	8005d24 <USER_SPI_write+0xa0>
 8005d46:	e000      	b.n	8005d4a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005d48:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005d4a:	21fd      	movs	r1, #253	@ 0xfd
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	f7ff fd90 	bl	8005872 <xmit_datablock>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <USER_SPI_write+0xd8>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005d5c:	f7ff fd34 	bl	80057c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bf14      	ite	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000028 	.word	0x20000028
 8005d78:	20000e0c 	.word	0x20000e0c

08005d7c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08c      	sub	sp, #48	@ 0x30
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	603a      	str	r2, [r7, #0]
 8005d86:	71fb      	strb	r3, [r7, #7]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <USER_SPI_ioctl+0x1a>
 8005d92:	2304      	movs	r3, #4
 8005d94:	e15a      	b.n	800604c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005d96:	4baf      	ldr	r3, [pc, #700]	@ (8006054 <USER_SPI_ioctl+0x2d8>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <USER_SPI_ioctl+0x2c>
 8005da4:	2303      	movs	r3, #3
 8005da6:	e151      	b.n	800604c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8005dae:	79bb      	ldrb	r3, [r7, #6]
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	f200 8136 	bhi.w	8006022 <USER_SPI_ioctl+0x2a6>
 8005db6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <USER_SPI_ioctl+0x40>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005dd1 	.word	0x08005dd1
 8005dc0:	08005de5 	.word	0x08005de5
 8005dc4:	08006023 	.word	0x08006023
 8005dc8:	08005e91 	.word	0x08005e91
 8005dcc:	08005f87 	.word	0x08005f87
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005dd0:	f7ff fd0a 	bl	80057e8 <spiselect>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 8127 	beq.w	800602a <USER_SPI_ioctl+0x2ae>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005de2:	e122      	b.n	800602a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005de4:	2100      	movs	r1, #0
 8005de6:	2009      	movs	r0, #9
 8005de8:	f7ff fd75 	bl	80058d6 <send_cmd>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 811d 	bne.w	800602e <USER_SPI_ioctl+0x2b2>
 8005df4:	f107 030c 	add.w	r3, r7, #12
 8005df8:	2110      	movs	r1, #16
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff fd10 	bl	8005820 <rcvr_datablock>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 8113 	beq.w	800602e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005e08:	7b3b      	ldrb	r3, [r7, #12]
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d111      	bne.n	8005e36 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005e12:	7d7b      	ldrb	r3, [r7, #21]
 8005e14:	461a      	mov	r2, r3
 8005e16:	7d3b      	ldrb	r3, [r7, #20]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	4413      	add	r3, r2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	7cfb      	ldrb	r3, [r7, #19]
 8005e20:	041b      	lsls	r3, r3, #16
 8005e22:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8005e26:	4413      	add	r3, r2
 8005e28:	3301      	adds	r3, #1
 8005e2a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	029a      	lsls	r2, r3, #10
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	e028      	b.n	8005e88 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005e36:	7c7b      	ldrb	r3, [r7, #17]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	7dbb      	ldrb	r3, [r7, #22]
 8005e40:	09db      	lsrs	r3, r3, #7
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	4413      	add	r3, r2
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	7d7b      	ldrb	r3, [r7, #21]
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f003 0306 	and.w	r3, r3, #6
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	3302      	adds	r3, #2
 8005e5a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005e5e:	7d3b      	ldrb	r3, [r7, #20]
 8005e60:	099b      	lsrs	r3, r3, #6
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	461a      	mov	r2, r3
 8005e66:	7cfb      	ldrb	r3, [r7, #19]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	7cbb      	ldrb	r3, [r7, #18]
 8005e6e:	029b      	lsls	r3, r3, #10
 8005e70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e74:	4413      	add	r3, r2
 8005e76:	3301      	adds	r3, #1
 8005e78:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005e7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e7e:	3b09      	subs	r3, #9
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	409a      	lsls	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8005e8e:	e0ce      	b.n	800602e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005e90:	4b71      	ldr	r3, [pc, #452]	@ (8006058 <USER_SPI_ioctl+0x2dc>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d031      	beq.n	8005f00 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	208d      	movs	r0, #141	@ 0x8d
 8005ea0:	f7ff fd19 	bl	80058d6 <send_cmd>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f040 80c3 	bne.w	8006032 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005eac:	20ff      	movs	r0, #255	@ 0xff
 8005eae:	f7ff fc21 	bl	80056f4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005eb2:	f107 030c 	add.w	r3, r7, #12
 8005eb6:	2110      	movs	r1, #16
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff fcb1 	bl	8005820 <rcvr_datablock>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80b6 	beq.w	8006032 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005ec6:	2330      	movs	r3, #48	@ 0x30
 8005ec8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005ecc:	e007      	b.n	8005ede <USER_SPI_ioctl+0x162>
 8005ece:	20ff      	movs	r0, #255	@ 0xff
 8005ed0:	f7ff fc10 	bl	80056f4 <xchg_spi>
 8005ed4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005ede:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f3      	bne.n	8005ece <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005ee6:	7dbb      	ldrb	r3, [r7, #22]
 8005ee8:	091b      	lsrs	r3, r3, #4
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	2310      	movs	r3, #16
 8005ef0:	fa03 f202 	lsl.w	r2, r3, r2
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005efe:	e098      	b.n	8006032 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005f00:	2100      	movs	r1, #0
 8005f02:	2009      	movs	r0, #9
 8005f04:	f7ff fce7 	bl	80058d6 <send_cmd>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 8091 	bne.w	8006032 <USER_SPI_ioctl+0x2b6>
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	2110      	movs	r1, #16
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fc82 	bl	8005820 <rcvr_datablock>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 8087 	beq.w	8006032 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005f24:	4b4c      	ldr	r3, [pc, #304]	@ (8006058 <USER_SPI_ioctl+0x2dc>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d012      	beq.n	8005f56 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005f30:	7dbb      	ldrb	r3, [r7, #22]
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005f38:	7dfa      	ldrb	r2, [r7, #23]
 8005f3a:	09d2      	lsrs	r2, r2, #7
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	4413      	add	r3, r2
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	7e7b      	ldrb	r3, [r7, #25]
 8005f44:	099b      	lsrs	r3, r3, #6
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e013      	b.n	8005f7e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005f56:	7dbb      	ldrb	r3, [r7, #22]
 8005f58:	109b      	asrs	r3, r3, #2
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	3301      	adds	r3, #1
 8005f62:	7dfa      	ldrb	r2, [r7, #23]
 8005f64:	00d2      	lsls	r2, r2, #3
 8005f66:	f002 0218 	and.w	r2, r2, #24
 8005f6a:	7df9      	ldrb	r1, [r7, #23]
 8005f6c:	0949      	lsrs	r1, r1, #5
 8005f6e:	b2c9      	uxtb	r1, r1
 8005f70:	440a      	add	r2, r1
 8005f72:	3201      	adds	r2, #1
 8005f74:	fb02 f303 	mul.w	r3, r2, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8005f84:	e055      	b.n	8006032 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005f86:	4b34      	ldr	r3, [pc, #208]	@ (8006058 <USER_SPI_ioctl+0x2dc>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	f003 0306 	and.w	r3, r3, #6
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d051      	beq.n	8006036 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005f92:	f107 020c 	add.w	r2, r7, #12
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	210b      	movs	r1, #11
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff feee 	bl	8005d7c <USER_SPI_ioctl>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d149      	bne.n	800603a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005fa6:	7b3b      	ldrb	r3, [r7, #12]
 8005fa8:	099b      	lsrs	r3, r3, #6
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <USER_SPI_ioctl+0x23e>
 8005fb0:	7dbb      	ldrb	r3, [r7, #22]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d041      	beq.n	800603e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8005fca:	4b23      	ldr	r3, [pc, #140]	@ (8006058 <USER_SPI_ioctl+0x2dc>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	025b      	lsls	r3, r3, #9
 8005fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	025b      	lsls	r3, r3, #9
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fe4:	2020      	movs	r0, #32
 8005fe6:	f7ff fc76 	bl	80058d6 <send_cmd>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d128      	bne.n	8006042 <USER_SPI_ioctl+0x2c6>
 8005ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ff2:	2021      	movs	r0, #33	@ 0x21
 8005ff4:	f7ff fc6f 	bl	80058d6 <send_cmd>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d121      	bne.n	8006042 <USER_SPI_ioctl+0x2c6>
 8005ffe:	2100      	movs	r1, #0
 8006000:	2026      	movs	r0, #38	@ 0x26
 8006002:	f7ff fc68 	bl	80058d6 <send_cmd>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d11a      	bne.n	8006042 <USER_SPI_ioctl+0x2c6>
 800600c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006010:	f7ff fbb6 	bl	8005780 <wait_ready>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d013      	beq.n	8006042 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800601a:	2300      	movs	r3, #0
 800601c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006020:	e00f      	b.n	8006042 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006022:	2304      	movs	r3, #4
 8006024:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006028:	e00c      	b.n	8006044 <USER_SPI_ioctl+0x2c8>
		break;
 800602a:	bf00      	nop
 800602c:	e00a      	b.n	8006044 <USER_SPI_ioctl+0x2c8>
		break;
 800602e:	bf00      	nop
 8006030:	e008      	b.n	8006044 <USER_SPI_ioctl+0x2c8>
		break;
 8006032:	bf00      	nop
 8006034:	e006      	b.n	8006044 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006036:	bf00      	nop
 8006038:	e004      	b.n	8006044 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <USER_SPI_ioctl+0x2c8>
		break;
 8006042:	bf00      	nop
	}

	despiselect();
 8006044:	f7ff fbc0 	bl	80057c8 <despiselect>

	return res;
 8006048:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800604c:	4618      	mov	r0, r3
 800604e:	3730      	adds	r7, #48	@ 0x30
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000028 	.word	0x20000028
 8006058:	20000e0c 	.word	0x20000e0c

0800605c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	4a08      	ldr	r2, [pc, #32]	@ (800608c <disk_status+0x30>)
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	79fa      	ldrb	r2, [r7, #7]
 8006074:	4905      	ldr	r1, [pc, #20]	@ (800608c <disk_status+0x30>)
 8006076:	440a      	add	r2, r1
 8006078:	7a12      	ldrb	r2, [r2, #8]
 800607a:	4610      	mov	r0, r2
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000e40 	.word	0x20000e40

08006090 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	4a0e      	ldr	r2, [pc, #56]	@ (80060dc <disk_initialize+0x4c>)
 80060a2:	5cd3      	ldrb	r3, [r2, r3]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d114      	bne.n	80060d2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	4a0c      	ldr	r2, [pc, #48]	@ (80060dc <disk_initialize+0x4c>)
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	79fa      	ldrb	r2, [r7, #7]
 80060b6:	4909      	ldr	r1, [pc, #36]	@ (80060dc <disk_initialize+0x4c>)
 80060b8:	440a      	add	r2, r1
 80060ba:	7a12      	ldrb	r2, [r2, #8]
 80060bc:	4610      	mov	r0, r2
 80060be:	4798      	blx	r3
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d103      	bne.n	80060d2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	4a03      	ldr	r2, [pc, #12]	@ (80060dc <disk_initialize+0x4c>)
 80060ce:	2101      	movs	r1, #1
 80060d0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000e40 	.word	0x20000e40

080060e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80060e0:	b590      	push	{r4, r7, lr}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	4a0a      	ldr	r2, [pc, #40]	@ (800611c <disk_read+0x3c>)
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	689c      	ldr	r4, [r3, #8]
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	4a07      	ldr	r2, [pc, #28]	@ (800611c <disk_read+0x3c>)
 8006100:	4413      	add	r3, r2
 8006102:	7a18      	ldrb	r0, [r3, #8]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	47a0      	blx	r4
 800610c:	4603      	mov	r3, r0
 800610e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
}
 8006112:	4618      	mov	r0, r3
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd90      	pop	{r4, r7, pc}
 800611a:	bf00      	nop
 800611c:	20000e40 	.word	0x20000e40

08006120 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006120:	b590      	push	{r4, r7, lr}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4603      	mov	r3, r0
 800612e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	4a0a      	ldr	r2, [pc, #40]	@ (800615c <disk_write+0x3c>)
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68dc      	ldr	r4, [r3, #12]
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4a07      	ldr	r2, [pc, #28]	@ (800615c <disk_write+0x3c>)
 8006140:	4413      	add	r3, r2
 8006142:	7a18      	ldrb	r0, [r3, #8]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	47a0      	blx	r4
 800614c:	4603      	mov	r3, r0
 800614e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
}
 8006152:	4618      	mov	r0, r3
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}
 800615a:	bf00      	nop
 800615c:	20000e40 	.word	0x20000e40

08006160 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	603a      	str	r2, [r7, #0]
 800616a:	71fb      	strb	r3, [r7, #7]
 800616c:	460b      	mov	r3, r1
 800616e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	4a09      	ldr	r2, [pc, #36]	@ (8006198 <disk_ioctl+0x38>)
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	79fa      	ldrb	r2, [r7, #7]
 800617e:	4906      	ldr	r1, [pc, #24]	@ (8006198 <disk_ioctl+0x38>)
 8006180:	440a      	add	r2, r1
 8006182:	7a10      	ldrb	r0, [r2, #8]
 8006184:	79b9      	ldrb	r1, [r7, #6]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	4798      	blx	r3
 800618a:	4603      	mov	r3, r0
 800618c:	73fb      	strb	r3, [r7, #15]
  return res;
 800618e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000e40 	.word	0x20000e40

0800619c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3301      	adds	r3, #1
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80061ac:	89fb      	ldrh	r3, [r7, #14]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	b21a      	sxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	b21b      	sxth	r3, r3
 80061b8:	4313      	orrs	r3, r2
 80061ba:	b21b      	sxth	r3, r3
 80061bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80061be:	89fb      	ldrh	r3, [r7, #14]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3303      	adds	r3, #3
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	3202      	adds	r2, #2
 80061e4:	7812      	ldrb	r2, [r2, #0]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	021b      	lsls	r3, r3, #8
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	3201      	adds	r2, #1
 80061f2:	7812      	ldrb	r2, [r2, #0]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
	return rv;
 8006204:	68fb      	ldr	r3, [r7, #12]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	460b      	mov	r3, r1
 800621c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	887a      	ldrh	r2, [r7, #2]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	887b      	ldrh	r3, [r7, #2]
 800622c:	0a1b      	lsrs	r3, r3, #8
 800622e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	607a      	str	r2, [r7, #4]
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	0a1b      	lsrs	r3, r3, #8
 8006262:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	607a      	str	r2, [r7, #4]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	0a1b      	lsrs	r3, r3, #8
 8006274:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00d      	beq.n	80062d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	1c53      	adds	r3, r2, #1
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	1c59      	adds	r1, r3, #1
 80062c4:	6179      	str	r1, [r7, #20]
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	607b      	str	r3, [r7, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f1      	bne.n	80062ba <mem_cpy+0x1a>
	}
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80062e2:	b480      	push	{r7}
 80062e4:	b087      	sub	sp, #28
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	617a      	str	r2, [r7, #20]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3b01      	subs	r3, #1
 8006302:	607b      	str	r3, [r7, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f3      	bne.n	80062f2 <mem_set+0x10>
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	@ 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	61fa      	str	r2, [r7, #28]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	4619      	mov	r1, r3
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	61ba      	str	r2, [r7, #24]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	1acb      	subs	r3, r1, r3
 8006344:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3b01      	subs	r3, #1
 800634a:	607b      	str	r3, [r7, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <mem_cmp+0x40>
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0eb      	beq.n	8006330 <mem_cmp+0x18>

	return r;
 8006358:	697b      	ldr	r3, [r7, #20]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3724      	adds	r7, #36	@ 0x24
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006370:	e002      	b.n	8006378 <chk_chr+0x12>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3301      	adds	r3, #1
 8006376:	607b      	str	r3, [r7, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <chk_chr+0x26>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	4293      	cmp	r3, r2
 800638a:	d1f2      	bne.n	8006372 <chk_chr+0xc>
	return *str;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	781b      	ldrb	r3, [r3, #0]
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063a6:	2300      	movs	r3, #0
 80063a8:	60bb      	str	r3, [r7, #8]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e029      	b.n	8006404 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80063b0:	4a27      	ldr	r2, [pc, #156]	@ (8006450 <chk_lock+0xb4>)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	4413      	add	r3, r2
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d01d      	beq.n	80063fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80063be:	4a24      	ldr	r2, [pc, #144]	@ (8006450 <chk_lock+0xb4>)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	4413      	add	r3, r2
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d116      	bne.n	80063fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80063d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006450 <chk_lock+0xb4>)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	4413      	add	r3, r2
 80063d8:	3304      	adds	r3, #4
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d10c      	bne.n	80063fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80063e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006450 <chk_lock+0xb4>)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	4413      	add	r3, r2
 80063ec:	3308      	adds	r3, #8
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d102      	bne.n	80063fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80063f8:	e007      	b.n	800640a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3301      	adds	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d9d2      	bls.n	80063b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d109      	bne.n	8006424 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <chk_lock+0x80>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d101      	bne.n	8006420 <chk_lock+0x84>
 800641c:	2300      	movs	r3, #0
 800641e:	e010      	b.n	8006442 <chk_lock+0xa6>
 8006420:	2312      	movs	r3, #18
 8006422:	e00e      	b.n	8006442 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d108      	bne.n	800643c <chk_lock+0xa0>
 800642a:	4a09      	ldr	r2, [pc, #36]	@ (8006450 <chk_lock+0xb4>)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	4413      	add	r3, r2
 8006432:	330c      	adds	r3, #12
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800643a:	d101      	bne.n	8006440 <chk_lock+0xa4>
 800643c:	2310      	movs	r3, #16
 800643e:	e000      	b.n	8006442 <chk_lock+0xa6>
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000e20 	.word	0x20000e20

08006454 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800645a:	2300      	movs	r3, #0
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	e002      	b.n	8006466 <enq_lock+0x12>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3301      	adds	r3, #1
 8006464:	607b      	str	r3, [r7, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d806      	bhi.n	800647a <enq_lock+0x26>
 800646c:	4a09      	ldr	r2, [pc, #36]	@ (8006494 <enq_lock+0x40>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	4413      	add	r3, r2
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f2      	bne.n	8006460 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b02      	cmp	r3, #2
 800647e:	bf14      	ite	ne
 8006480:	2301      	movne	r3, #1
 8006482:	2300      	moveq	r3, #0
 8006484:	b2db      	uxtb	r3, r3
}
 8006486:	4618      	mov	r0, r3
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000e20 	.word	0x20000e20

08006498 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	e01f      	b.n	80064e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80064a8:	4a41      	ldr	r2, [pc, #260]	@ (80065b0 <inc_lock+0x118>)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	4413      	add	r3, r2
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d113      	bne.n	80064e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80064ba:	4a3d      	ldr	r2, [pc, #244]	@ (80065b0 <inc_lock+0x118>)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	4413      	add	r3, r2
 80064c2:	3304      	adds	r3, #4
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d109      	bne.n	80064e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80064ce:	4a38      	ldr	r2, [pc, #224]	@ (80065b0 <inc_lock+0x118>)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	4413      	add	r3, r2
 80064d6:	3308      	adds	r3, #8
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80064de:	429a      	cmp	r2, r3
 80064e0:	d006      	beq.n	80064f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3301      	adds	r3, #1
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d9dc      	bls.n	80064a8 <inc_lock+0x10>
 80064ee:	e000      	b.n	80064f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80064f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d132      	bne.n	800655e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e002      	b.n	8006504 <inc_lock+0x6c>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d806      	bhi.n	8006518 <inc_lock+0x80>
 800650a:	4a29      	ldr	r2, [pc, #164]	@ (80065b0 <inc_lock+0x118>)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	4413      	add	r3, r2
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f2      	bne.n	80064fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b02      	cmp	r3, #2
 800651c:	d101      	bne.n	8006522 <inc_lock+0x8a>
 800651e:	2300      	movs	r3, #0
 8006520:	e040      	b.n	80065a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4922      	ldr	r1, [pc, #136]	@ (80065b0 <inc_lock+0x118>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	440b      	add	r3, r1
 800652e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	491e      	ldr	r1, [pc, #120]	@ (80065b0 <inc_lock+0x118>)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	440b      	add	r3, r1
 800653c:	3304      	adds	r3, #4
 800653e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	491a      	ldr	r1, [pc, #104]	@ (80065b0 <inc_lock+0x118>)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	440b      	add	r3, r1
 800654c:	3308      	adds	r3, #8
 800654e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006550:	4a17      	ldr	r2, [pc, #92]	@ (80065b0 <inc_lock+0x118>)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	4413      	add	r3, r2
 8006558:	330c      	adds	r3, #12
 800655a:	2200      	movs	r2, #0
 800655c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d009      	beq.n	8006578 <inc_lock+0xe0>
 8006564:	4a12      	ldr	r2, [pc, #72]	@ (80065b0 <inc_lock+0x118>)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	4413      	add	r3, r2
 800656c:	330c      	adds	r3, #12
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <inc_lock+0xe0>
 8006574:	2300      	movs	r3, #0
 8006576:	e015      	b.n	80065a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d108      	bne.n	8006590 <inc_lock+0xf8>
 800657e:	4a0c      	ldr	r2, [pc, #48]	@ (80065b0 <inc_lock+0x118>)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	4413      	add	r3, r2
 8006586:	330c      	adds	r3, #12
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	e001      	b.n	8006594 <inc_lock+0xfc>
 8006590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006594:	4906      	ldr	r1, [pc, #24]	@ (80065b0 <inc_lock+0x118>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	440b      	add	r3, r1
 800659c:	330c      	adds	r3, #12
 800659e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	20000e20 	.word	0x20000e20

080065b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3b01      	subs	r3, #1
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d825      	bhi.n	8006614 <dec_lock+0x60>
		n = Files[i].ctr;
 80065c8:	4a17      	ldr	r2, [pc, #92]	@ (8006628 <dec_lock+0x74>)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	4413      	add	r3, r2
 80065d0:	330c      	adds	r3, #12
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80065d6:	89fb      	ldrh	r3, [r7, #14]
 80065d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065dc:	d101      	bne.n	80065e2 <dec_lock+0x2e>
 80065de:	2300      	movs	r3, #0
 80065e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80065e2:	89fb      	ldrh	r3, [r7, #14]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <dec_lock+0x3a>
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80065ee:	4a0e      	ldr	r2, [pc, #56]	@ (8006628 <dec_lock+0x74>)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	4413      	add	r3, r2
 80065f6:	330c      	adds	r3, #12
 80065f8:	89fa      	ldrh	r2, [r7, #14]
 80065fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80065fc:	89fb      	ldrh	r3, [r7, #14]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <dec_lock+0x5a>
 8006602:	4a09      	ldr	r2, [pc, #36]	@ (8006628 <dec_lock+0x74>)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	4413      	add	r3, r2
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	737b      	strb	r3, [r7, #13]
 8006612:	e001      	b.n	8006618 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006614:	2302      	movs	r3, #2
 8006616:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006618:	7b7b      	ldrb	r3, [r7, #13]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000e20 	.word	0x20000e20

0800662c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e010      	b.n	800665c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800663a:	4a0d      	ldr	r2, [pc, #52]	@ (8006670 <clear_lock+0x44>)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	4413      	add	r3, r2
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d105      	bne.n	8006656 <clear_lock+0x2a>
 800664a:	4a09      	ldr	r2, [pc, #36]	@ (8006670 <clear_lock+0x44>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	4413      	add	r3, r2
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d9eb      	bls.n	800663a <clear_lock+0xe>
	}
}
 8006662:	bf00      	nop
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	20000e20 	.word	0x20000e20

08006674 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	78db      	ldrb	r3, [r3, #3]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d034      	beq.n	80066f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	7858      	ldrb	r0, [r3, #1]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006698:	2301      	movs	r3, #1
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	f7ff fd40 	bl	8006120 <disk_write>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <sync_window+0x38>
			res = FR_DISK_ERR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	73fb      	strb	r3, [r7, #15]
 80066aa:	e022      	b.n	80066f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	1ad2      	subs	r2, r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d217      	bcs.n	80066f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	789b      	ldrb	r3, [r3, #2]
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	e010      	b.n	80066ec <sync_window+0x78>
					wsect += fs->fsize;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4413      	add	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	7858      	ldrb	r0, [r3, #1]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80066de:	2301      	movs	r3, #1
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	f7ff fd1d 	bl	8006120 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d8eb      	bhi.n	80066ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d01b      	beq.n	800674c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff ffad 	bl	8006674 <sync_window>
 800671a:	4603      	mov	r3, r0
 800671c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d113      	bne.n	800674c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	7858      	ldrb	r0, [r3, #1]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800672e:	2301      	movs	r3, #1
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	f7ff fcd5 	bl	80060e0 <disk_read>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800673c:	f04f 33ff 	mov.w	r3, #4294967295
 8006740:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006742:	2301      	movs	r3, #1
 8006744:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff87 	bl	8006674 <sync_window>
 8006766:	4603      	mov	r3, r0
 8006768:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d158      	bne.n	8006822 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d148      	bne.n	800680a <sync_fs+0xb2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	791b      	ldrb	r3, [r3, #4]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d144      	bne.n	800680a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3330      	adds	r3, #48	@ 0x30
 8006784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fda9 	bl	80062e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3330      	adds	r3, #48	@ 0x30
 8006794:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006798:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fd38 	bl	8006212 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3330      	adds	r3, #48	@ 0x30
 80067a6:	4921      	ldr	r1, [pc, #132]	@ (800682c <sync_fs+0xd4>)
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff fd4d 	bl	8006248 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3330      	adds	r3, #48	@ 0x30
 80067b2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80067b6:	491e      	ldr	r1, [pc, #120]	@ (8006830 <sync_fs+0xd8>)
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fd45 	bl	8006248 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3330      	adds	r3, #48	@ 0x30
 80067c2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7ff fd3b 	bl	8006248 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3330      	adds	r3, #48	@ 0x30
 80067d6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f7ff fd31 	bl	8006248 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	7858      	ldrb	r0, [r3, #1]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fe:	2301      	movs	r3, #1
 8006800:	f7ff fc8e 	bl	8006120 <disk_write>
			fs->fsi_flag = 0;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2200      	movs	r2, #0
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fca4 	bl	8006160 <disk_ioctl>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <sync_fs+0xca>
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006822:	7bfb      	ldrb	r3, [r7, #15]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	41615252 	.word	0x41615252
 8006830:	61417272 	.word	0x61417272

08006834 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	3b02      	subs	r3, #2
 8006842:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	3b02      	subs	r3, #2
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d301      	bcc.n	8006854 <clust2sect+0x20>
 8006850:	2300      	movs	r3, #0
 8006852:	e008      	b.n	8006866 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	895b      	ldrh	r3, [r3, #10]
 8006858:	461a      	mov	r2, r3
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	fb03 f202 	mul.w	r2, r3, r2
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	4413      	add	r3, r2
}
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b086      	sub	sp, #24
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d904      	bls.n	8006892 <get_fat+0x20>
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	d302      	bcc.n	8006898 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006892:	2301      	movs	r3, #1
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	e08e      	b.n	80069b6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006898:	f04f 33ff 	mov.w	r3, #4294967295
 800689c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d061      	beq.n	800696a <get_fat+0xf8>
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	dc7b      	bgt.n	80069a2 <get_fat+0x130>
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d002      	beq.n	80068b4 <get_fat+0x42>
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d041      	beq.n	8006936 <get_fat+0xc4>
 80068b2:	e076      	b.n	80069a2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	0a5b      	lsrs	r3, r3, #9
 80068ca:	4413      	add	r3, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	6938      	ldr	r0, [r7, #16]
 80068d0:	f7ff ff14 	bl	80066fc <move_window>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d166      	bne.n	80069a8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	60fa      	str	r2, [r7, #12]
 80068e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	6a1a      	ldr	r2, [r3, #32]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	0a5b      	lsrs	r3, r3, #9
 80068f6:	4413      	add	r3, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	6938      	ldr	r0, [r7, #16]
 80068fc:	f7ff fefe 	bl	80066fc <move_window>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d152      	bne.n	80069ac <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4313      	orrs	r3, r2
 800691a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <get_fat+0xba>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	e002      	b.n	8006932 <get_fat+0xc0>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006932:	617b      	str	r3, [r7, #20]
			break;
 8006934:	e03f      	b.n	80069b6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	0a1b      	lsrs	r3, r3, #8
 800693e:	4413      	add	r3, r2
 8006940:	4619      	mov	r1, r3
 8006942:	6938      	ldr	r0, [r7, #16]
 8006944:	f7ff feda 	bl	80066fc <move_window>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d130      	bne.n	80069b0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800695c:	4413      	add	r3, r2
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fc1c 	bl	800619c <ld_word>
 8006964:	4603      	mov	r3, r0
 8006966:	617b      	str	r3, [r7, #20]
			break;
 8006968:	e025      	b.n	80069b6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	6a1a      	ldr	r2, [r3, #32]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	09db      	lsrs	r3, r3, #7
 8006972:	4413      	add	r3, r2
 8006974:	4619      	mov	r1, r3
 8006976:	6938      	ldr	r0, [r7, #16]
 8006978:	f7ff fec0 	bl	80066fc <move_window>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d118      	bne.n	80069b4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006990:	4413      	add	r3, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff fc1a 	bl	80061cc <ld_dword>
 8006998:	4603      	mov	r3, r0
 800699a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800699e:	617b      	str	r3, [r7, #20]
			break;
 80069a0:	e009      	b.n	80069b6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80069a2:	2301      	movs	r3, #1
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e006      	b.n	80069b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069a8:	bf00      	nop
 80069aa:	e004      	b.n	80069b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069ac:	bf00      	nop
 80069ae:	e002      	b.n	80069b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069b0:	bf00      	nop
 80069b2:	e000      	b.n	80069b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069b4:	bf00      	nop
		}
	}

	return val;
 80069b6:	697b      	ldr	r3, [r7, #20]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80069c0:	b590      	push	{r4, r7, lr}
 80069c2:	b089      	sub	sp, #36	@ 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80069cc:	2302      	movs	r3, #2
 80069ce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	f240 80d9 	bls.w	8006b8a <put_fat+0x1ca>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	f080 80d3 	bcs.w	8006b8a <put_fat+0x1ca>
		switch (fs->fs_type) {
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	f000 8096 	beq.w	8006b1a <put_fat+0x15a>
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	f300 80cb 	bgt.w	8006b8a <put_fat+0x1ca>
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d002      	beq.n	80069fe <put_fat+0x3e>
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d06e      	beq.n	8006ada <put_fat+0x11a>
 80069fc:	e0c5      	b.n	8006b8a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4413      	add	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1a      	ldr	r2, [r3, #32]
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	0a5b      	lsrs	r3, r3, #9
 8006a14:	4413      	add	r3, r2
 8006a16:	4619      	mov	r1, r3
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fe6f 	bl	80066fc <move_window>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a22:	7ffb      	ldrb	r3, [r7, #31]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f040 80a9 	bne.w	8006b7c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	1c59      	adds	r1, r3, #1
 8006a34:	61b9      	str	r1, [r7, #24]
 8006a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3a:	4413      	add	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00d      	beq.n	8006a64 <put_fat+0xa4>
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	b25a      	sxtb	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	b25b      	sxtb	r3, r3
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	e001      	b.n	8006a68 <put_fat+0xa8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	0a5b      	lsrs	r3, r3, #9
 8006a7a:	4413      	add	r3, r2
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff fe3c 	bl	80066fc <move_window>
 8006a84:	4603      	mov	r3, r0
 8006a86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a88:	7ffb      	ldrb	r3, [r7, #31]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d178      	bne.n	8006b80 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9a:	4413      	add	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <put_fat+0xf0>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	091b      	lsrs	r3, r3, #4
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	e00e      	b.n	8006ace <put_fat+0x10e>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	b25b      	sxtb	r3, r3
 8006ab6:	f023 030f 	bic.w	r3, r3, #15
 8006aba:	b25a      	sxtb	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b25b      	sxtb	r3, r3
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	70da      	strb	r2, [r3, #3]
			break;
 8006ad8:	e057      	b.n	8006b8a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a1a      	ldr	r2, [r3, #32]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	0a1b      	lsrs	r3, r3, #8
 8006ae2:	4413      	add	r3, r2
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7ff fe08 	bl	80066fc <move_window>
 8006aec:	4603      	mov	r3, r0
 8006aee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006af0:	7ffb      	ldrb	r3, [r7, #31]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d146      	bne.n	8006b84 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006b04:	4413      	add	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	b292      	uxth	r2, r2
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fb80 	bl	8006212 <st_word>
			fs->wflag = 1;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	70da      	strb	r2, [r3, #3]
			break;
 8006b18:	e037      	b.n	8006b8a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	09db      	lsrs	r3, r3, #7
 8006b22:	4413      	add	r3, r2
 8006b24:	4619      	mov	r1, r3
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7ff fde8 	bl	80066fc <move_window>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b30:	7ffb      	ldrb	r3, [r7, #31]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d128      	bne.n	8006b88 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006b4a:	4413      	add	r3, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff fb3d 	bl	80061cc <ld_dword>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006b58:	4323      	orrs	r3, r4
 8006b5a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006b6a:	4413      	add	r3, r2
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fb6a 	bl	8006248 <st_dword>
			fs->wflag = 1;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	70da      	strb	r2, [r3, #3]
			break;
 8006b7a:	e006      	b.n	8006b8a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b7c:	bf00      	nop
 8006b7e:	e004      	b.n	8006b8a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b80:	bf00      	nop
 8006b82:	e002      	b.n	8006b8a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b84:	bf00      	nop
 8006b86:	e000      	b.n	8006b8a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006b88:	bf00      	nop
		}
	}
	return res;
 8006b8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3724      	adds	r7, #36	@ 0x24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd90      	pop	{r4, r7, pc}

08006b94 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d904      	bls.n	8006bba <remove_chain+0x26>
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d301      	bcc.n	8006bbe <remove_chain+0x2a>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e04b      	b.n	8006c56 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	69b8      	ldr	r0, [r7, #24]
 8006bcc:	f7ff fef8 	bl	80069c0 <put_fat>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006bd4:	7ffb      	ldrb	r3, [r7, #31]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <remove_chain+0x4a>
 8006bda:	7ffb      	ldrb	r3, [r7, #31]
 8006bdc:	e03b      	b.n	8006c56 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff fe46 	bl	8006872 <get_fat>
 8006be6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d031      	beq.n	8006c52 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <remove_chain+0x64>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e02e      	b.n	8006c56 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfe:	d101      	bne.n	8006c04 <remove_chain+0x70>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e028      	b.n	8006c56 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006c04:	2200      	movs	r2, #0
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	69b8      	ldr	r0, [r7, #24]
 8006c0a:	f7ff fed9 	bl	80069c0 <put_fat>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006c12:	7ffb      	ldrb	r3, [r7, #31]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <remove_chain+0x88>
 8006c18:	7ffb      	ldrb	r3, [r7, #31]
 8006c1a:	e01c      	b.n	8006c56 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	3b02      	subs	r3, #2
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d20b      	bcs.n	8006c42 <remove_chain+0xae>
			fs->free_clst++;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	791b      	ldrb	r3, [r3, #4]
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d3c6      	bcc.n	8006bde <remove_chain+0x4a>
 8006c50:	e000      	b.n	8006c54 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006c52:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3720      	adds	r7, #32
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b088      	sub	sp, #32
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10d      	bne.n	8006c90 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d004      	beq.n	8006c8a <create_chain+0x2c>
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d31b      	bcc.n	8006cc2 <create_chain+0x64>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	e018      	b.n	8006cc2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fded 	bl	8006872 <get_fat>
 8006c98:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d801      	bhi.n	8006ca4 <create_chain+0x46>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e070      	b.n	8006d86 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d101      	bne.n	8006cb0 <create_chain+0x52>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	e06a      	b.n	8006d86 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d201      	bcs.n	8006cbe <create_chain+0x60>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	e063      	b.n	8006d86 <create_chain+0x128>
		scl = clst;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d307      	bcc.n	8006ce6 <create_chain+0x88>
				ncl = 2;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d901      	bls.n	8006ce6 <create_chain+0x88>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e04f      	b.n	8006d86 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006ce6:	69f9      	ldr	r1, [r7, #28]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff fdc2 	bl	8006872 <get_fat>
 8006cee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00e      	beq.n	8006d14 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d003      	beq.n	8006d04 <create_chain+0xa6>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d101      	bne.n	8006d08 <create_chain+0xaa>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	e03e      	b.n	8006d86 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d1da      	bne.n	8006cc6 <create_chain+0x68>
 8006d10:	2300      	movs	r3, #0
 8006d12:	e038      	b.n	8006d86 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006d14:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006d16:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1a:	69f9      	ldr	r1, [r7, #28]
 8006d1c:	6938      	ldr	r0, [r7, #16]
 8006d1e:	f7ff fe4f 	bl	80069c0 <put_fat>
 8006d22:	4603      	mov	r3, r0
 8006d24:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d109      	bne.n	8006d40 <create_chain+0xe2>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d006      	beq.n	8006d40 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6938      	ldr	r0, [r7, #16]
 8006d38:	f7ff fe42 	bl	80069c0 <put_fat>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d116      	bne.n	8006d74 <create_chain+0x116>
		fs->last_clst = ncl;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	3b02      	subs	r3, #2
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d804      	bhi.n	8006d64 <create_chain+0x106>
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	1e5a      	subs	r2, r3, #1
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	791b      	ldrb	r3, [r3, #4]
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	711a      	strb	r2, [r3, #4]
 8006d72:	e007      	b.n	8006d84 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d102      	bne.n	8006d80 <create_chain+0x122>
 8006d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7e:	e000      	b.n	8006d82 <create_chain+0x124>
 8006d80:	2301      	movs	r3, #1
 8006d82:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006d84:	69fb      	ldr	r3, [r7, #28]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b087      	sub	sp, #28
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da2:	3304      	adds	r3, #4
 8006da4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	0a5b      	lsrs	r3, r3, #9
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	8952      	ldrh	r2, [r2, #10]
 8006dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006db2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1d1a      	adds	r2, r3, #4
 8006db8:	613a      	str	r2, [r7, #16]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <clmt_clust+0x3a>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e010      	b.n	8006dea <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d307      	bcc.n	8006de0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006dde:	e7e9      	b.n	8006db4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006de0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	4413      	add	r3, r2
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b086      	sub	sp, #24
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e0c:	d204      	bcs.n	8006e18 <dir_sdi+0x22>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <dir_sdi+0x26>
		return FR_INT_ERR;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e063      	b.n	8006ee4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <dir_sdi+0x46>
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d902      	bls.n	8006e3c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10c      	bne.n	8006e5c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	8912      	ldrh	r2, [r2, #8]
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d301      	bcc.n	8006e52 <dir_sdi+0x5c>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e048      	b.n	8006ee4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	61da      	str	r2, [r3, #28]
 8006e5a:	e029      	b.n	8006eb0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	895b      	ldrh	r3, [r3, #10]
 8006e60:	025b      	lsls	r3, r3, #9
 8006e62:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e64:	e019      	b.n	8006e9a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff fd01 	bl	8006872 <get_fat>
 8006e70:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d101      	bne.n	8006e7e <dir_sdi+0x88>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e032      	b.n	8006ee4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d904      	bls.n	8006e8e <dir_sdi+0x98>
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d301      	bcc.n	8006e92 <dir_sdi+0x9c>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e028      	b.n	8006ee4 <dir_sdi+0xee>
			ofs -= csz;
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d2e1      	bcs.n	8006e66 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006ea2:	6979      	ldr	r1, [r7, #20]
 8006ea4:	6938      	ldr	r0, [r7, #16]
 8006ea6:	f7ff fcc5 	bl	8006834 <clust2sect>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <dir_sdi+0xcc>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e010      	b.n	8006ee4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69da      	ldr	r2, [r3, #28]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	0a5b      	lsrs	r3, r3, #9
 8006eca:	441a      	add	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006edc:	441a      	add	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	3320      	adds	r3, #32
 8006f02:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <dir_next+0x28>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f12:	d301      	bcc.n	8006f18 <dir_next+0x2c>
 8006f14:	2304      	movs	r3, #4
 8006f16:	e0aa      	b.n	800706e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f040 8098 	bne.w	8007054 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	8912      	ldrh	r2, [r2, #8]
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	f0c0 8088 	bcc.w	8007054 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	61da      	str	r2, [r3, #28]
 8006f4a:	2304      	movs	r3, #4
 8006f4c:	e08f      	b.n	800706e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	0a5b      	lsrs	r3, r3, #9
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	8952      	ldrh	r2, [r2, #10]
 8006f56:	3a01      	subs	r2, #1
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d17a      	bne.n	8007054 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	f7ff fc83 	bl	8006872 <get_fat>
 8006f6c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d801      	bhi.n	8006f78 <dir_next+0x8c>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e07a      	b.n	800706e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d101      	bne.n	8006f84 <dir_next+0x98>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e074      	b.n	800706e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d358      	bcc.n	8007040 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	61da      	str	r2, [r3, #28]
 8006f9a:	2304      	movs	r3, #4
 8006f9c:	e067      	b.n	800706e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f7ff fe59 	bl	8006c5e <create_chain>
 8006fac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <dir_next+0xcc>
 8006fb4:	2307      	movs	r3, #7
 8006fb6:	e05a      	b.n	800706e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <dir_next+0xd6>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e055      	b.n	800706e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d101      	bne.n	8006fce <dir_next+0xe2>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e04f      	b.n	800706e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7ff fb50 	bl	8006674 <sync_window>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <dir_next+0xf2>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e047      	b.n	800706e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3330      	adds	r3, #48	@ 0x30
 8006fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff f97a 	bl	80062e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006fee:	2300      	movs	r3, #0
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	6979      	ldr	r1, [r7, #20]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fc1d 	bl	8006834 <clust2sect>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007000:	e012      	b.n	8007028 <dir_next+0x13c>
						fs->wflag = 1;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff fb33 	bl	8006674 <sync_window>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <dir_next+0x12c>
 8007014:	2301      	movs	r3, #1
 8007016:	e02a      	b.n	800706e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	3301      	adds	r3, #1
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	895b      	ldrh	r3, [r3, #10]
 800702c:	461a      	mov	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4293      	cmp	r3, r2
 8007032:	d3e6      	bcc.n	8007002 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad2      	subs	r2, r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007046:	6979      	ldr	r1, [r7, #20]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff fbf3 	bl	8006834 <clust2sect>
 800704e:	4602      	mov	r2, r0
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007066:	441a      	add	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b086      	sub	sp, #24
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007086:	2100      	movs	r1, #0
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff feb4 	bl	8006df6 <dir_sdi>
 800708e:	4603      	mov	r3, r0
 8007090:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d12b      	bne.n	80070f0 <dir_alloc+0x7a>
		n = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	4619      	mov	r1, r3
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f7ff fb2a 	bl	80066fc <move_window>
 80070a8:	4603      	mov	r3, r0
 80070aa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d11d      	bne.n	80070ee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2be5      	cmp	r3, #229	@ 0xe5
 80070ba:	d004      	beq.n	80070c6 <dir_alloc+0x50>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d107      	bne.n	80070d6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	3301      	adds	r3, #1
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d102      	bne.n	80070da <dir_alloc+0x64>
 80070d4:	e00c      	b.n	80070f0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80070d6:	2300      	movs	r3, #0
 80070d8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80070da:	2101      	movs	r1, #1
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ff05 	bl	8006eec <dir_next>
 80070e2:	4603      	mov	r3, r0
 80070e4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0d7      	beq.n	800709c <dir_alloc+0x26>
 80070ec:	e000      	b.n	80070f0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80070ee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d101      	bne.n	80070fa <dir_alloc+0x84>
 80070f6:	2307      	movs	r3, #7
 80070f8:	75fb      	strb	r3, [r7, #23]
	return res;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	331a      	adds	r3, #26
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff f842 	bl	800619c <ld_word>
 8007118:	4603      	mov	r3, r0
 800711a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d109      	bne.n	8007138 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	3314      	adds	r3, #20
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff f837 	bl	800619c <ld_word>
 800712e:	4603      	mov	r3, r0
 8007130:	041b      	lsls	r3, r3, #16
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007138:	68fb      	ldr	r3, [r7, #12]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	331a      	adds	r3, #26
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	b292      	uxth	r2, r2
 8007156:	4611      	mov	r1, r2
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff f85a 	bl	8006212 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b03      	cmp	r3, #3
 8007164:	d109      	bne.n	800717a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f103 0214 	add.w	r2, r3, #20
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	0c1b      	lsrs	r3, r3, #16
 8007170:	b29b      	uxth	r3, r3
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7ff f84c 	bl	8006212 <st_word>
	}
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b086      	sub	sp, #24
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800718c:	2304      	movs	r3, #4
 800718e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007196:	e03c      	b.n	8007212 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	4619      	mov	r1, r3
 800719e:	6938      	ldr	r0, [r7, #16]
 80071a0:	f7ff faac 	bl	80066fc <move_window>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d136      	bne.n	800721c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80071bc:	2304      	movs	r3, #4
 80071be:	75fb      	strb	r3, [r7, #23]
 80071c0:	e031      	b.n	8007226 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	330b      	adds	r3, #11
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071ce:	73bb      	strb	r3, [r7, #14]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	7bba      	ldrb	r2, [r7, #14]
 80071d4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	2be5      	cmp	r3, #229	@ 0xe5
 80071da:	d011      	beq.n	8007200 <dir_read+0x7e>
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	2b2e      	cmp	r3, #46	@ 0x2e
 80071e0:	d00e      	beq.n	8007200 <dir_read+0x7e>
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b0f      	cmp	r3, #15
 80071e6:	d00b      	beq.n	8007200 <dir_read+0x7e>
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	f023 0320 	bic.w	r3, r3, #32
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	bf0c      	ite	eq
 80071f2:	2301      	moveq	r3, #1
 80071f4:	2300      	movne	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00f      	beq.n	8007220 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007200:	2100      	movs	r1, #0
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff fe72 	bl	8006eec <dir_next>
 8007208:	4603      	mov	r3, r0
 800720a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d108      	bne.n	8007224 <dir_read+0xa2>
	while (dp->sect) {
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1be      	bne.n	8007198 <dir_read+0x16>
 800721a:	e004      	b.n	8007226 <dir_read+0xa4>
		if (res != FR_OK) break;
 800721c:	bf00      	nop
 800721e:	e002      	b.n	8007226 <dir_read+0xa4>
				break;
 8007220:	bf00      	nop
 8007222:	e000      	b.n	8007226 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007224:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <dir_read+0xb0>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	61da      	str	r2, [r3, #28]
	return res;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800724a:	2100      	movs	r1, #0
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fdd2 	bl	8006df6 <dir_sdi>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <dir_find+0x24>
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	e03e      	b.n	80072de <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	4619      	mov	r1, r3
 8007266:	6938      	ldr	r0, [r7, #16]
 8007268:	f7ff fa48 	bl	80066fc <move_window>
 800726c:	4603      	mov	r3, r0
 800726e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d12f      	bne.n	80072d6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d102      	bne.n	800728a <dir_find+0x4e>
 8007284:	2304      	movs	r3, #4
 8007286:	75fb      	strb	r3, [r7, #23]
 8007288:	e028      	b.n	80072dc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	330b      	adds	r3, #11
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007296:	b2da      	uxtb	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	330b      	adds	r3, #11
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <dir_find+0x86>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a18      	ldr	r0, [r3, #32]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3324      	adds	r3, #36	@ 0x24
 80072b4:	220b      	movs	r2, #11
 80072b6:	4619      	mov	r1, r3
 80072b8:	f7ff f82e 	bl	8006318 <mem_cmp>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80072c2:	2100      	movs	r1, #0
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff fe11 	bl	8006eec <dir_next>
 80072ca:	4603      	mov	r3, r0
 80072cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0c5      	beq.n	8007260 <dir_find+0x24>
 80072d4:	e002      	b.n	80072dc <dir_find+0xa0>
		if (res != FR_OK) break;
 80072d6:	bf00      	nop
 80072d8:	e000      	b.n	80072dc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80072da:	bf00      	nop

	return res;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80072f4:	2101      	movs	r1, #1
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff febd 	bl	8007076 <dir_alloc>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d11c      	bne.n	8007340 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	4619      	mov	r1, r3
 800730c:	68b8      	ldr	r0, [r7, #8]
 800730e:	f7ff f9f5 	bl	80066fc <move_window>
 8007312:	4603      	mov	r3, r0
 8007314:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d111      	bne.n	8007340 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	2220      	movs	r2, #32
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe ffdc 	bl	80062e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a18      	ldr	r0, [r3, #32]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3324      	adds	r3, #36	@ 0x24
 8007332:	220b      	movs	r2, #11
 8007334:	4619      	mov	r1, r3
 8007336:	f7fe ffb3 	bl	80062a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2201      	movs	r2, #1
 800733e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	4619      	mov	r1, r3
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff f9cc 	bl	80066fc <move_window>
 8007364:	4603      	mov	r3, r0
 8007366:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8007368:	7afb      	ldrb	r3, [r7, #11]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	22e5      	movs	r2, #229	@ 0xe5
 8007374:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800737c:	7afb      	ldrb	r3, [r7, #11]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3324      	adds	r3, #36	@ 0x24
 800739c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800739e:	220b      	movs	r2, #11
 80073a0:	2120      	movs	r1, #32
 80073a2:	68b8      	ldr	r0, [r7, #8]
 80073a4:	f7fe ff9d 	bl	80062e2 <mem_set>
	si = i = 0; ni = 8;
 80073a8:	2300      	movs	r3, #0
 80073aa:	613b      	str	r3, [r7, #16]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	2308      	movs	r3, #8
 80073b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	61fa      	str	r2, [r7, #28]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80073c2:	7efb      	ldrb	r3, [r7, #27]
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d94e      	bls.n	8007466 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80073c8:	7efb      	ldrb	r3, [r7, #27]
 80073ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80073cc:	d006      	beq.n	80073dc <create_name+0x54>
 80073ce:	7efb      	ldrb	r3, [r7, #27]
 80073d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80073d2:	d110      	bne.n	80073f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80073d4:	e002      	b.n	80073dc <create_name+0x54>
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	3301      	adds	r3, #1
 80073da:	61fb      	str	r3, [r7, #28]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80073e6:	d0f6      	beq.n	80073d6 <create_name+0x4e>
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80073f2:	d0f0      	beq.n	80073d6 <create_name+0x4e>
			break;
 80073f4:	e038      	b.n	8007468 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80073f6:	7efb      	ldrb	r3, [r7, #27]
 80073f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80073fa:	d003      	beq.n	8007404 <create_name+0x7c>
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	429a      	cmp	r2, r3
 8007402:	d30c      	bcc.n	800741e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b0b      	cmp	r3, #11
 8007408:	d002      	beq.n	8007410 <create_name+0x88>
 800740a:	7efb      	ldrb	r3, [r7, #27]
 800740c:	2b2e      	cmp	r3, #46	@ 0x2e
 800740e:	d001      	beq.n	8007414 <create_name+0x8c>
 8007410:	2306      	movs	r3, #6
 8007412:	e044      	b.n	800749e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007414:	2308      	movs	r3, #8
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	230b      	movs	r3, #11
 800741a:	617b      	str	r3, [r7, #20]
			continue;
 800741c:	e022      	b.n	8007464 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800741e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007422:	2b00      	cmp	r3, #0
 8007424:	da04      	bge.n	8007430 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007426:	7efb      	ldrb	r3, [r7, #27]
 8007428:	3b80      	subs	r3, #128	@ 0x80
 800742a:	4a1f      	ldr	r2, [pc, #124]	@ (80074a8 <create_name+0x120>)
 800742c:	5cd3      	ldrb	r3, [r2, r3]
 800742e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007430:	7efb      	ldrb	r3, [r7, #27]
 8007432:	4619      	mov	r1, r3
 8007434:	481d      	ldr	r0, [pc, #116]	@ (80074ac <create_name+0x124>)
 8007436:	f7fe ff96 	bl	8006366 <chk_chr>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <create_name+0xbc>
 8007440:	2306      	movs	r3, #6
 8007442:	e02c      	b.n	800749e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007444:	7efb      	ldrb	r3, [r7, #27]
 8007446:	2b60      	cmp	r3, #96	@ 0x60
 8007448:	d905      	bls.n	8007456 <create_name+0xce>
 800744a:	7efb      	ldrb	r3, [r7, #27]
 800744c:	2b7a      	cmp	r3, #122	@ 0x7a
 800744e:	d802      	bhi.n	8007456 <create_name+0xce>
 8007450:	7efb      	ldrb	r3, [r7, #27]
 8007452:	3b20      	subs	r3, #32
 8007454:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	613a      	str	r2, [r7, #16]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	4413      	add	r3, r2
 8007460:	7efa      	ldrb	r2, [r7, #27]
 8007462:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007464:	e7a6      	b.n	80073b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007466:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	441a      	add	r2, r3
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <create_name+0xf4>
 8007478:	2306      	movs	r3, #6
 800747a:	e010      	b.n	800749e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2be5      	cmp	r3, #229	@ 0xe5
 8007482:	d102      	bne.n	800748a <create_name+0x102>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2205      	movs	r2, #5
 8007488:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800748a:	7efb      	ldrb	r3, [r7, #27]
 800748c:	2b20      	cmp	r3, #32
 800748e:	d801      	bhi.n	8007494 <create_name+0x10c>
 8007490:	2204      	movs	r2, #4
 8007492:	e000      	b.n	8007496 <create_name+0x10e>
 8007494:	2200      	movs	r2, #0
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	330b      	adds	r3, #11
 800749a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800749c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	0800dc50 	.word	0x0800dc50
 80074ac:	0800dbdc 	.word	0x0800dbdc

080074b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80074c4:	e002      	b.n	80074cc <follow_path+0x1c>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	3301      	adds	r3, #1
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80074d2:	d0f8      	beq.n	80074c6 <follow_path+0x16>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80074da:	d0f4      	beq.n	80074c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	2200      	movs	r2, #0
 80074e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b1f      	cmp	r3, #31
 80074e8:	d80a      	bhi.n	8007500 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2280      	movs	r2, #128	@ 0x80
 80074ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80074f2:	2100      	movs	r1, #0
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff fc7e 	bl	8006df6 <dir_sdi>
 80074fa:	4603      	mov	r3, r0
 80074fc:	75fb      	strb	r3, [r7, #23]
 80074fe:	e043      	b.n	8007588 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007500:	463b      	mov	r3, r7
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff ff3f 	bl	8007388 <create_name>
 800750a:	4603      	mov	r3, r0
 800750c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d134      	bne.n	800757e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff fe91 	bl	800723c <dir_find>
 800751a:	4603      	mov	r3, r0
 800751c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007524:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	2b04      	cmp	r3, #4
 8007530:	d127      	bne.n	8007582 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d122      	bne.n	8007582 <follow_path+0xd2>
 800753c:	2305      	movs	r3, #5
 800753e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007540:	e01f      	b.n	8007582 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d11c      	bne.n	8007586 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	799b      	ldrb	r3, [r3, #6]
 8007550:	f003 0310 	and.w	r3, r3, #16
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007558:	2305      	movs	r3, #5
 800755a:	75fb      	strb	r3, [r7, #23]
 800755c:	e014      	b.n	8007588 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756c:	4413      	add	r3, r2
 800756e:	4619      	mov	r1, r3
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff fdc7 	bl	8007104 <ld_clust>
 8007576:	4602      	mov	r2, r0
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800757c:	e7c0      	b.n	8007500 <follow_path+0x50>
			if (res != FR_OK) break;
 800757e:	bf00      	nop
 8007580:	e002      	b.n	8007588 <follow_path+0xd8>
				break;
 8007582:	bf00      	nop
 8007584:	e000      	b.n	8007588 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007586:	bf00      	nop
			}
		}
	}

	return res;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007592:	b480      	push	{r7}
 8007594:	b087      	sub	sp, #28
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800759a:	f04f 33ff 	mov.w	r3, #4294967295
 800759e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d031      	beq.n	800760c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	e002      	b.n	80075b6 <get_ldnumber+0x24>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	3301      	adds	r3, #1
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d903      	bls.n	80075c6 <get_ldnumber+0x34>
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b3a      	cmp	r3, #58	@ 0x3a
 80075c4:	d1f4      	bne.n	80075b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b3a      	cmp	r3, #58	@ 0x3a
 80075cc:	d11c      	bne.n	8007608 <get_ldnumber+0x76>
			tp = *path;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	60fa      	str	r2, [r7, #12]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	3b30      	subs	r3, #48	@ 0x30
 80075de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b09      	cmp	r3, #9
 80075e4:	d80e      	bhi.n	8007604 <get_ldnumber+0x72>
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d10a      	bne.n	8007604 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d107      	bne.n	8007604 <get_ldnumber+0x72>
					vol = (int)i;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	3301      	adds	r3, #1
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	e002      	b.n	800760e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007608:	2300      	movs	r3, #0
 800760a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800760c:	693b      	ldr	r3, [r7, #16]
}
 800760e:	4618      	mov	r0, r3
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	70da      	strb	r2, [r3, #3]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f04f 32ff 	mov.w	r2, #4294967295
 8007632:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff f860 	bl	80066fc <move_window>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <check_fs+0x2a>
 8007642:	2304      	movs	r3, #4
 8007644:	e038      	b.n	80076b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3330      	adds	r3, #48	@ 0x30
 800764a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fda4 	bl	800619c <ld_word>
 8007654:	4603      	mov	r3, r0
 8007656:	461a      	mov	r2, r3
 8007658:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800765c:	429a      	cmp	r2, r3
 800765e:	d001      	beq.n	8007664 <check_fs+0x48>
 8007660:	2303      	movs	r3, #3
 8007662:	e029      	b.n	80076b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800766a:	2be9      	cmp	r3, #233	@ 0xe9
 800766c:	d009      	beq.n	8007682 <check_fs+0x66>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007674:	2beb      	cmp	r3, #235	@ 0xeb
 8007676:	d11e      	bne.n	80076b6 <check_fs+0x9a>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800767e:	2b90      	cmp	r3, #144	@ 0x90
 8007680:	d119      	bne.n	80076b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3330      	adds	r3, #48	@ 0x30
 8007686:	3336      	adds	r3, #54	@ 0x36
 8007688:	4618      	mov	r0, r3
 800768a:	f7fe fd9f 	bl	80061cc <ld_dword>
 800768e:	4603      	mov	r3, r0
 8007690:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007694:	4a0a      	ldr	r2, [pc, #40]	@ (80076c0 <check_fs+0xa4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d101      	bne.n	800769e <check_fs+0x82>
 800769a:	2300      	movs	r3, #0
 800769c:	e00c      	b.n	80076b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3330      	adds	r3, #48	@ 0x30
 80076a2:	3352      	adds	r3, #82	@ 0x52
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fd91 	bl	80061cc <ld_dword>
 80076aa:	4603      	mov	r3, r0
 80076ac:	4a05      	ldr	r2, [pc, #20]	@ (80076c4 <check_fs+0xa8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d101      	bne.n	80076b6 <check_fs+0x9a>
 80076b2:	2300      	movs	r3, #0
 80076b4:	e000      	b.n	80076b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80076b6:	2302      	movs	r3, #2
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	00544146 	.word	0x00544146
 80076c4:	33544146 	.word	0x33544146

080076c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b096      	sub	sp, #88	@ 0x58
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff ff58 	bl	8007592 <get_ldnumber>
 80076e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80076e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	da01      	bge.n	80076ee <find_volume+0x26>
 80076ea:	230b      	movs	r3, #11
 80076ec:	e22d      	b.n	8007b4a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80076ee:	4aa1      	ldr	r2, [pc, #644]	@ (8007974 <find_volume+0x2ac>)
 80076f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80076f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <find_volume+0x3a>
 80076fe:	230c      	movs	r3, #12
 8007700:	e223      	b.n	8007b4a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007706:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01a      	beq.n	800774e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe fc9d 	bl	800605c <disk_status>
 8007722:	4603      	mov	r3, r0
 8007724:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007728:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10c      	bne.n	800774e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d007      	beq.n	800774a <find_volume+0x82>
 800773a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007746:	230a      	movs	r3, #10
 8007748:	e1ff      	b.n	8007b4a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800774a:	2300      	movs	r3, #0
 800774c:	e1fd      	b.n	8007b4a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	2200      	movs	r2, #0
 8007752:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007756:	b2da      	uxtb	r2, r3
 8007758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe fc95 	bl	8006090 <disk_initialize>
 8007766:	4603      	mov	r3, r0
 8007768:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800776c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007778:	2303      	movs	r3, #3
 800777a:	e1e6      	b.n	8007b4a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <find_volume+0xca>
 8007782:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800778e:	230a      	movs	r3, #10
 8007790:	e1db      	b.n	8007b4a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007796:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007798:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800779a:	f7ff ff3f 	bl	800761c <check_fs>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80077a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d149      	bne.n	8007840 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077ac:	2300      	movs	r3, #0
 80077ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80077b0:	e01e      	b.n	80077f0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80077c0:	4413      	add	r3, r2
 80077c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80077c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c6:	3304      	adds	r3, #4
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d006      	beq.n	80077dc <find_volume+0x114>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d0:	3308      	adds	r3, #8
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fcfa 	bl	80061cc <ld_dword>
 80077d8:	4602      	mov	r2, r0
 80077da:	e000      	b.n	80077de <find_volume+0x116>
 80077dc:	2200      	movs	r2, #0
 80077de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	3358      	adds	r3, #88	@ 0x58
 80077e4:	443b      	add	r3, r7
 80077e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ec:	3301      	adds	r3, #1
 80077ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80077f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d9dd      	bls.n	80077b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80077f6:	2300      	movs	r3, #0
 80077f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80077fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <find_volume+0x13e>
 8007800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007802:	3b01      	subs	r3, #1
 8007804:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	3358      	adds	r3, #88	@ 0x58
 800780c:	443b      	add	r3, r7
 800780e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007812:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <find_volume+0x15e>
 800781a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800781c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800781e:	f7ff fefd 	bl	800761c <check_fs>
 8007822:	4603      	mov	r3, r0
 8007824:	e000      	b.n	8007828 <find_volume+0x160>
 8007826:	2303      	movs	r3, #3
 8007828:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800782c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007830:	2b01      	cmp	r3, #1
 8007832:	d905      	bls.n	8007840 <find_volume+0x178>
 8007834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007836:	3301      	adds	r3, #1
 8007838:	643b      	str	r3, [r7, #64]	@ 0x40
 800783a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783c:	2b03      	cmp	r3, #3
 800783e:	d9e2      	bls.n	8007806 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007840:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007844:	2b04      	cmp	r3, #4
 8007846:	d101      	bne.n	800784c <find_volume+0x184>
 8007848:	2301      	movs	r3, #1
 800784a:	e17e      	b.n	8007b4a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800784c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007850:	2b01      	cmp	r3, #1
 8007852:	d901      	bls.n	8007858 <find_volume+0x190>
 8007854:	230d      	movs	r3, #13
 8007856:	e178      	b.n	8007b4a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785a:	3330      	adds	r3, #48	@ 0x30
 800785c:	330b      	adds	r3, #11
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fc9c 	bl	800619c <ld_word>
 8007864:	4603      	mov	r3, r0
 8007866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800786a:	d001      	beq.n	8007870 <find_volume+0x1a8>
 800786c:	230d      	movs	r3, #13
 800786e:	e16c      	b.n	8007b4a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007872:	3330      	adds	r3, #48	@ 0x30
 8007874:	3316      	adds	r3, #22
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe fc90 	bl	800619c <ld_word>
 800787c:	4603      	mov	r3, r0
 800787e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d106      	bne.n	8007894 <find_volume+0x1cc>
 8007886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007888:	3330      	adds	r3, #48	@ 0x30
 800788a:	3324      	adds	r3, #36	@ 0x24
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe fc9d 	bl	80061cc <ld_dword>
 8007892:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007896:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007898:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800789a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80078a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80078a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a6:	789b      	ldrb	r3, [r3, #2]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d005      	beq.n	80078b8 <find_volume+0x1f0>
 80078ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ae:	789b      	ldrb	r3, [r3, #2]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d001      	beq.n	80078b8 <find_volume+0x1f0>
 80078b4:	230d      	movs	r3, #13
 80078b6:	e148      	b.n	8007b4a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80078b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ba:	789b      	ldrb	r3, [r3, #2]
 80078bc:	461a      	mov	r2, r3
 80078be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078c0:	fb02 f303 	mul.w	r3, r2, r3
 80078c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078cc:	461a      	mov	r2, r3
 80078ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80078d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d4:	895b      	ldrh	r3, [r3, #10]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d008      	beq.n	80078ec <find_volume+0x224>
 80078da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078dc:	895b      	ldrh	r3, [r3, #10]
 80078de:	461a      	mov	r2, r3
 80078e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e2:	895b      	ldrh	r3, [r3, #10]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	4013      	ands	r3, r2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <find_volume+0x228>
 80078ec:	230d      	movs	r3, #13
 80078ee:	e12c      	b.n	8007b4a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80078f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f2:	3330      	adds	r3, #48	@ 0x30
 80078f4:	3311      	adds	r3, #17
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe fc50 	bl	800619c <ld_word>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461a      	mov	r2, r3
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	891b      	ldrh	r3, [r3, #8]
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <find_volume+0x24e>
 8007912:	230d      	movs	r3, #13
 8007914:	e119      	b.n	8007b4a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007918:	3330      	adds	r3, #48	@ 0x30
 800791a:	3313      	adds	r3, #19
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe fc3d 	bl	800619c <ld_word>
 8007922:	4603      	mov	r3, r0
 8007924:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <find_volume+0x272>
 800792c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792e:	3330      	adds	r3, #48	@ 0x30
 8007930:	3320      	adds	r3, #32
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fc4a 	bl	80061cc <ld_dword>
 8007938:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800793a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793c:	3330      	adds	r3, #48	@ 0x30
 800793e:	330e      	adds	r3, #14
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe fc2b 	bl	800619c <ld_word>
 8007946:	4603      	mov	r3, r0
 8007948:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800794a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <find_volume+0x28c>
 8007950:	230d      	movs	r3, #13
 8007952:	e0fa      	b.n	8007b4a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007954:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007958:	4413      	add	r3, r2
 800795a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800795c:	8912      	ldrh	r2, [r2, #8]
 800795e:	0912      	lsrs	r2, r2, #4
 8007960:	b292      	uxth	r2, r2
 8007962:	4413      	add	r3, r2
 8007964:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796a:	429a      	cmp	r2, r3
 800796c:	d204      	bcs.n	8007978 <find_volume+0x2b0>
 800796e:	230d      	movs	r3, #13
 8007970:	e0eb      	b.n	8007b4a <find_volume+0x482>
 8007972:	bf00      	nop
 8007974:	20000e18 	.word	0x20000e18
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007980:	8952      	ldrh	r2, [r2, #10]
 8007982:	fbb3 f3f2 	udiv	r3, r3, r2
 8007986:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <find_volume+0x2ca>
 800798e:	230d      	movs	r3, #13
 8007990:	e0db      	b.n	8007b4a <find_volume+0x482>
		fmt = FS_FAT32;
 8007992:	2303      	movs	r3, #3
 8007994:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800799e:	4293      	cmp	r3, r2
 80079a0:	d802      	bhi.n	80079a8 <find_volume+0x2e0>
 80079a2:	2302      	movs	r3, #2
 80079a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d802      	bhi.n	80079b8 <find_volume+0x2f0>
 80079b2:	2301      	movs	r3, #1
 80079b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	1c9a      	adds	r2, r3, #2
 80079bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079be:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80079c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079c4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80079c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80079c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ca:	441a      	add	r2, r3
 80079cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ce:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80079d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	441a      	add	r2, r3
 80079d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80079da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d11e      	bne.n	8007a20 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80079e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e4:	3330      	adds	r3, #48	@ 0x30
 80079e6:	332a      	adds	r3, #42	@ 0x2a
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fbd7 	bl	800619c <ld_word>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <find_volume+0x330>
 80079f4:	230d      	movs	r3, #13
 80079f6:	e0a8      	b.n	8007b4a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80079f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fa:	891b      	ldrh	r3, [r3, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <find_volume+0x33c>
 8007a00:	230d      	movs	r3, #13
 8007a02:	e0a2      	b.n	8007b4a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	3330      	adds	r3, #48	@ 0x30
 8007a08:	332c      	adds	r3, #44	@ 0x2c
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe fbde 	bl	80061cc <ld_dword>
 8007a10:	4602      	mov	r2, r0
 8007a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a14:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a1e:	e01f      	b.n	8007a60 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a22:	891b      	ldrh	r3, [r3, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <find_volume+0x364>
 8007a28:	230d      	movs	r3, #13
 8007a2a:	e08e      	b.n	8007b4a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2e:	6a1a      	ldr	r2, [r3, #32]
 8007a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a32:	441a      	add	r2, r3
 8007a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a36:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d103      	bne.n	8007a48 <find_volume+0x380>
 8007a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	e00a      	b.n	8007a5e <find_volume+0x396>
 8007a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	4413      	add	r3, r2
 8007a52:	085a      	lsrs	r2, r3, #1
 8007a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007a5e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a66:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007a6a:	0a5b      	lsrs	r3, r3, #9
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d201      	bcs.n	8007a74 <find_volume+0x3ac>
 8007a70:	230d      	movs	r3, #13
 8007a72:	e06a      	b.n	8007b4a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a76:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7a:	611a      	str	r2, [r3, #16]
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a82:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a86:	2280      	movs	r2, #128	@ 0x80
 8007a88:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007a8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d149      	bne.n	8007b26 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a94:	3330      	adds	r3, #48	@ 0x30
 8007a96:	3330      	adds	r3, #48	@ 0x30
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fe fb7f 	bl	800619c <ld_word>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d140      	bne.n	8007b26 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007aac:	f7fe fe26 	bl	80066fc <move_window>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d137      	bne.n	8007b26 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab8:	2200      	movs	r2, #0
 8007aba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abe:	3330      	adds	r3, #48	@ 0x30
 8007ac0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe fb69 	bl	800619c <ld_word>
 8007aca:	4603      	mov	r3, r0
 8007acc:	461a      	mov	r2, r3
 8007ace:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d127      	bne.n	8007b26 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	3330      	adds	r3, #48	@ 0x30
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fb76 	bl	80061cc <ld_dword>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8007b54 <find_volume+0x48c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d11e      	bne.n	8007b26 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	3330      	adds	r3, #48	@ 0x30
 8007aec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fe fb6b 	bl	80061cc <ld_dword>
 8007af6:	4603      	mov	r3, r0
 8007af8:	4a17      	ldr	r2, [pc, #92]	@ (8007b58 <find_volume+0x490>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d113      	bne.n	8007b26 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b00:	3330      	adds	r3, #48	@ 0x30
 8007b02:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fb60 	bl	80061cc <ld_dword>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b10:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b14:	3330      	adds	r3, #48	@ 0x30
 8007b16:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fb56 	bl	80061cc <ld_dword>
 8007b20:	4602      	mov	r2, r0
 8007b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b24:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007b2c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b5c <find_volume+0x494>)
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	4b09      	ldr	r3, [pc, #36]	@ (8007b5c <find_volume+0x494>)
 8007b38:	801a      	strh	r2, [r3, #0]
 8007b3a:	4b08      	ldr	r3, [pc, #32]	@ (8007b5c <find_volume+0x494>)
 8007b3c:	881a      	ldrh	r2, [r3, #0]
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b40:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007b42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b44:	f7fe fd72 	bl	800662c <clear_lock>
#endif
	return FR_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3758      	adds	r7, #88	@ 0x58
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	41615252 	.word	0x41615252
 8007b58:	61417272 	.word	0x61417272
 8007b5c:	20000e1c 	.word	0x20000e1c

08007b60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007b6a:	2309      	movs	r3, #9
 8007b6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01c      	beq.n	8007bae <validate+0x4e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d018      	beq.n	8007bae <validate+0x4e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d013      	beq.n	8007bae <validate+0x4e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	889a      	ldrh	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	88db      	ldrh	r3, [r3, #6]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d10c      	bne.n	8007bae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe fa5e 	bl	800605c <disk_status>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <validate+0x4e>
			res = FR_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <validate+0x5a>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	e000      	b.n	8007bbc <validate+0x5c>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	6013      	str	r3, [r2, #0]
	return res;
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007bde:	f107 0310 	add.w	r3, r7, #16
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff fcd5 	bl	8007592 <get_ldnumber>
 8007be8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	da01      	bge.n	8007bf4 <f_mount+0x28>
 8007bf0:	230b      	movs	r3, #11
 8007bf2:	e02b      	b.n	8007c4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007bf4:	4a17      	ldr	r2, [pc, #92]	@ (8007c54 <f_mount+0x88>)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007c04:	69b8      	ldr	r0, [r7, #24]
 8007c06:	f7fe fd11 	bl	800662c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	490d      	ldr	r1, [pc, #52]	@ (8007c54 <f_mount+0x88>)
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <f_mount+0x66>
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d001      	beq.n	8007c36 <f_mount+0x6a>
 8007c32:	2300      	movs	r3, #0
 8007c34:	e00a      	b.n	8007c4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007c36:	f107 010c 	add.w	r1, r7, #12
 8007c3a:	f107 0308 	add.w	r3, r7, #8
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff fd41 	bl	80076c8 <find_volume>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3720      	adds	r7, #32
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20000e18 	.word	0x20000e18

08007c58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b098      	sub	sp, #96	@ 0x60
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4613      	mov	r3, r2
 8007c64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <f_open+0x18>
 8007c6c:	2309      	movs	r3, #9
 8007c6e:	e1a9      	b.n	8007fc4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007c78:	79fa      	ldrb	r2, [r7, #7]
 8007c7a:	f107 0110 	add.w	r1, r7, #16
 8007c7e:	f107 0308 	add.w	r3, r7, #8
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fd20 	bl	80076c8 <find_volume>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f040 818d 	bne.w	8007fb2 <f_open+0x35a>
		dj.obj.fs = fs;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	f107 0314 	add.w	r3, r7, #20
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7ff fc03 	bl	80074b0 <follow_path>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d118      	bne.n	8007cea <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007cb8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007cbc:	b25b      	sxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	da03      	bge.n	8007cca <f_open+0x72>
				res = FR_INVALID_NAME;
 8007cc2:	2306      	movs	r3, #6
 8007cc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007cc8:	e00f      	b.n	8007cea <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	bf8c      	ite	hi
 8007cd0:	2301      	movhi	r3, #1
 8007cd2:	2300      	movls	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f107 0314 	add.w	r3, r7, #20
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fb5c 	bl	800639c <chk_lock>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	f003 031c 	and.w	r3, r3, #28
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d07f      	beq.n	8007df4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007cf4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d017      	beq.n	8007d2c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d10e      	bne.n	8007d22 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d04:	f7fe fba6 	bl	8006454 <enq_lock>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d006      	beq.n	8007d1c <f_open+0xc4>
 8007d0e:	f107 0314 	add.w	r3, r7, #20
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff fae7 	bl	80072e6 <dir_register>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	e000      	b.n	8007d1e <f_open+0xc6>
 8007d1c:	2312      	movs	r3, #18
 8007d1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	f043 0308 	orr.w	r3, r3, #8
 8007d28:	71fb      	strb	r3, [r7, #7]
 8007d2a:	e010      	b.n	8007d4e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d2c:	7ebb      	ldrb	r3, [r7, #26]
 8007d2e:	f003 0311 	and.w	r3, r3, #17
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <f_open+0xe6>
					res = FR_DENIED;
 8007d36:	2307      	movs	r3, #7
 8007d38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007d3c:	e007      	b.n	8007d4e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <f_open+0xf6>
 8007d48:	2308      	movs	r3, #8
 8007d4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d168      	bne.n	8007e28 <f_open+0x1d0>
 8007d56:	79fb      	ldrb	r3, [r7, #7]
 8007d58:	f003 0308 	and.w	r3, r3, #8
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d063      	beq.n	8007e28 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007d60:	f7fd fc40 	bl	80055e4 <get_fattime>
 8007d64:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d68:	330e      	adds	r3, #14
 8007d6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe fa6b 	bl	8006248 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d74:	3316      	adds	r3, #22
 8007d76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fa65 	bl	8006248 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d80:	330b      	adds	r3, #11
 8007d82:	2220      	movs	r2, #32
 8007d84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff f9b9 	bl	8007104 <ld_clust>
 8007d92:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007d98:	2200      	movs	r2, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff f9d1 	bl	8007142 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da2:	331c      	adds	r3, #28
 8007da4:	2100      	movs	r1, #0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fa4e 	bl	8006248 <st_dword>
					fs->wflag = 1;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	2201      	movs	r2, #1
 8007db0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d037      	beq.n	8007e28 <f_open+0x1d0>
						dw = fs->winsect;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe fee4 	bl	8006b94 <remove_chain>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d126      	bne.n	8007e28 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe fc8c 	bl	80066fc <move_window>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dee:	3a01      	subs	r2, #1
 8007df0:	60da      	str	r2, [r3, #12]
 8007df2:	e019      	b.n	8007e28 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007df4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d115      	bne.n	8007e28 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007dfc:	7ebb      	ldrb	r3, [r7, #26]
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <f_open+0x1b6>
					res = FR_NO_FILE;
 8007e06:	2304      	movs	r3, #4
 8007e08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007e0c:	e00c      	b.n	8007e28 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d007      	beq.n	8007e28 <f_open+0x1d0>
 8007e18:	7ebb      	ldrb	r3, [r7, #26]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <f_open+0x1d0>
						res = FR_DENIED;
 8007e22:	2307      	movs	r3, #7
 8007e24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007e28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d126      	bne.n	8007e7e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	f003 0308 	and.w	r3, r3, #8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e40:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007e4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	bf8c      	ite	hi
 8007e56:	2301      	movhi	r3, #1
 8007e58:	2300      	movls	r3, #0
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	f107 0314 	add.w	r3, r7, #20
 8007e62:	4611      	mov	r1, r2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe fb17 	bl	8006498 <inc_lock>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <f_open+0x226>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f040 8095 	bne.w	8007fb2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff f938 	bl	8007104 <ld_clust>
 8007e94:	4602      	mov	r2, r0
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e9c:	331c      	adds	r3, #28
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe f994 	bl	80061cc <ld_dword>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	88da      	ldrh	r2, [r3, #6]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	79fa      	ldrb	r2, [r7, #7]
 8007ec2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3330      	adds	r3, #48	@ 0x30
 8007eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ede:	2100      	movs	r1, #0
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe f9fe 	bl	80062e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d060      	beq.n	8007fb2 <f_open+0x35a>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d05c      	beq.n	8007fb2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	895b      	ldrh	r3, [r3, #10]
 8007f04:	025b      	lsls	r3, r3, #9
 8007f06:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f14:	e016      	b.n	8007f44 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fca9 	bl	8006872 <get_fat>
 8007f20:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d802      	bhi.n	8007f2e <f_open+0x2d6>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007f2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f34:	d102      	bne.n	8007f3c <f_open+0x2e4>
 8007f36:	2301      	movs	r3, #1
 8007f38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <f_open+0x2fc>
 8007f4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d8e0      	bhi.n	8007f16 <f_open+0x2be>
				}
				fp->clust = clst;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f58:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d127      	bne.n	8007fb2 <f_open+0x35a>
 8007f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d022      	beq.n	8007fb2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe fc5f 	bl	8006834 <clust2sect>
 8007f76:	6478      	str	r0, [r7, #68]	@ 0x44
 8007f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <f_open+0x32e>
						res = FR_INT_ERR;
 8007f7e:	2302      	movs	r3, #2
 8007f80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007f84:	e015      	b.n	8007fb2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f88:	0a5a      	lsrs	r2, r3, #9
 8007f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f8c:	441a      	add	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	7858      	ldrb	r0, [r3, #1]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6a1a      	ldr	r2, [r3, #32]
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f7fe f89d 	bl	80060e0 <disk_read>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <f_open+0x35a>
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <f_open+0x368>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3760      	adds	r7, #96	@ 0x60
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08e      	sub	sp, #56	@ 0x38
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f107 0214 	add.w	r2, r7, #20
 8007fea:	4611      	mov	r1, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff fdb7 	bl	8007b60 <validate>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <f_read+0x44>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	7d5b      	ldrb	r3, [r3, #21]
 8008004:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008008:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <f_read+0x4a>
 8008010:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008014:	e115      	b.n	8008242 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	7d1b      	ldrb	r3, [r3, #20]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <f_read+0x5a>
 8008022:	2307      	movs	r3, #7
 8008024:	e10d      	b.n	8008242 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	429a      	cmp	r2, r3
 8008038:	f240 80fe 	bls.w	8008238 <f_read+0x26c>
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008040:	e0fa      	b.n	8008238 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804a:	2b00      	cmp	r3, #0
 800804c:	f040 80c6 	bne.w	80081dc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	0a5b      	lsrs	r3, r3, #9
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	8952      	ldrh	r2, [r2, #10]
 800805a:	3a01      	subs	r2, #1
 800805c:	4013      	ands	r3, r2
 800805e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d12f      	bne.n	80080c6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d103      	bne.n	8008076 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	633b      	str	r3, [r7, #48]	@ 0x30
 8008074:	e013      	b.n	800809e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7fe fe82 	bl	8006d8e <clmt_clust>
 800808a:	6338      	str	r0, [r7, #48]	@ 0x30
 800808c:	e007      	b.n	800809e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	4619      	mov	r1, r3
 8008096:	4610      	mov	r0, r2
 8008098:	f7fe fbeb 	bl	8006872 <get_fat>
 800809c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d804      	bhi.n	80080ae <f_read+0xe2>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2202      	movs	r2, #2
 80080a8:	755a      	strb	r2, [r3, #21]
 80080aa:	2302      	movs	r3, #2
 80080ac:	e0c9      	b.n	8008242 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d104      	bne.n	80080c0 <f_read+0xf4>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	755a      	strb	r2, [r3, #21]
 80080bc:	2301      	movs	r3, #1
 80080be:	e0c0      	b.n	8008242 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f7fe fbb0 	bl	8006834 <clust2sect>
 80080d4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d104      	bne.n	80080e6 <f_read+0x11a>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2202      	movs	r2, #2
 80080e0:	755a      	strb	r2, [r3, #21]
 80080e2:	2302      	movs	r3, #2
 80080e4:	e0ad      	b.n	8008242 <f_read+0x276>
			sect += csect;
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	4413      	add	r3, r2
 80080ec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	0a5b      	lsrs	r3, r3, #9
 80080f2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d039      	beq.n	800816e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	4413      	add	r3, r2
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	8952      	ldrh	r2, [r2, #10]
 8008104:	4293      	cmp	r3, r2
 8008106:	d905      	bls.n	8008114 <f_read+0x148>
					cc = fs->csize - csect;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	895b      	ldrh	r3, [r3, #10]
 800810c:	461a      	mov	r2, r3
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	7858      	ldrb	r0, [r3, #1]
 8008118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800811e:	f7fd ffdf 	bl	80060e0 <disk_read>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d004      	beq.n	8008132 <f_read+0x166>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	755a      	strb	r2, [r3, #21]
 800812e:	2301      	movs	r3, #1
 8008130:	e087      	b.n	8008242 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	7d1b      	ldrb	r3, [r3, #20]
 8008136:	b25b      	sxtb	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	da14      	bge.n	8008166 <f_read+0x19a>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a1a      	ldr	r2, [r3, #32]
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008146:	429a      	cmp	r2, r3
 8008148:	d90d      	bls.n	8008166 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a1a      	ldr	r2, [r3, #32]
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	025b      	lsls	r3, r3, #9
 8008154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008156:	18d0      	adds	r0, r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3330      	adds	r3, #48	@ 0x30
 800815c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008160:	4619      	mov	r1, r3
 8008162:	f7fe f89d 	bl	80062a0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008168:	025b      	lsls	r3, r3, #9
 800816a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800816c:	e050      	b.n	8008210 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	d02e      	beq.n	80081d6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	7d1b      	ldrb	r3, [r3, #20]
 800817c:	b25b      	sxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	da18      	bge.n	80081b4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	7858      	ldrb	r0, [r3, #1]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a1a      	ldr	r2, [r3, #32]
 8008190:	2301      	movs	r3, #1
 8008192:	f7fd ffc5 	bl	8006120 <disk_write>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <f_read+0x1da>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	755a      	strb	r2, [r3, #21]
 80081a2:	2301      	movs	r3, #1
 80081a4:	e04d      	b.n	8008242 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	7d1b      	ldrb	r3, [r3, #20]
 80081aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	7858      	ldrb	r0, [r3, #1]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081be:	2301      	movs	r3, #1
 80081c0:	69ba      	ldr	r2, [r7, #24]
 80081c2:	f7fd ff8d 	bl	80060e0 <disk_read>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <f_read+0x20a>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	755a      	strb	r2, [r3, #21]
 80081d2:	2301      	movs	r3, #1
 80081d4:	e035      	b.n	8008242 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80081e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80081ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d901      	bls.n	80081f6 <f_read+0x22a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008204:	4413      	add	r3, r2
 8008206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008208:	4619      	mov	r1, r3
 800820a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800820c:	f7fe f848 	bl	80062a0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008214:	4413      	add	r3, r2
 8008216:	627b      	str	r3, [r7, #36]	@ 0x24
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	699a      	ldr	r2, [r3, #24]
 800821c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821e:	441a      	add	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	619a      	str	r2, [r3, #24]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822a:	441a      	add	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f47f af01 	bne.w	8008042 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3738      	adds	r7, #56	@ 0x38
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b08c      	sub	sp, #48	@ 0x30
 800824e:	af00      	add	r7, sp, #0
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	607a      	str	r2, [r7, #4]
 8008256:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f107 0210 	add.w	r2, r7, #16
 8008268:	4611      	mov	r1, r2
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff fc78 	bl	8007b60 <validate>
 8008270:	4603      	mov	r3, r0
 8008272:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008276:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800827a:	2b00      	cmp	r3, #0
 800827c:	d107      	bne.n	800828e <f_write+0x44>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	7d5b      	ldrb	r3, [r3, #21]
 8008282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008286:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <f_write+0x4a>
 800828e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008292:	e14b      	b.n	800852c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	7d1b      	ldrb	r3, [r3, #20]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <f_write+0x5a>
 80082a0:	2307      	movs	r3, #7
 80082a2:	e143      	b.n	800852c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	441a      	add	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	f080 812d 	bcs.w	8008510 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	43db      	mvns	r3, r3
 80082bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80082be:	e127      	b.n	8008510 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f040 80e3 	bne.w	8008494 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	0a5b      	lsrs	r3, r3, #9
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	8952      	ldrh	r2, [r2, #10]
 80082d8:	3a01      	subs	r2, #1
 80082da:	4013      	ands	r3, r2
 80082dc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d143      	bne.n	800836c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10c      	bne.n	8008306 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11a      	bne.n	800832e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2100      	movs	r1, #0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe fcae 	bl	8006c5e <create_chain>
 8008302:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008304:	e013      	b.n	800832e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	4619      	mov	r1, r3
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7fe fd3a 	bl	8006d8e <clmt_clust>
 800831a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800831c:	e007      	b.n	800832e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fe fc99 	bl	8006c5e <create_chain>
 800832c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 80f2 	beq.w	800851a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008338:	2b01      	cmp	r3, #1
 800833a:	d104      	bne.n	8008346 <f_write+0xfc>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2202      	movs	r2, #2
 8008340:	755a      	strb	r2, [r3, #21]
 8008342:	2302      	movs	r3, #2
 8008344:	e0f2      	b.n	800852c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d104      	bne.n	8008358 <f_write+0x10e>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2201      	movs	r2, #1
 8008352:	755a      	strb	r2, [r3, #21]
 8008354:	2301      	movs	r3, #1
 8008356:	e0e9      	b.n	800852c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800835c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d102      	bne.n	800836c <f_write+0x122>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800836a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	7d1b      	ldrb	r3, [r3, #20]
 8008370:	b25b      	sxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	da18      	bge.n	80083a8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	7858      	ldrb	r0, [r3, #1]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a1a      	ldr	r2, [r3, #32]
 8008384:	2301      	movs	r3, #1
 8008386:	f7fd fecb 	bl	8006120 <disk_write>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <f_write+0x150>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2201      	movs	r2, #1
 8008394:	755a      	strb	r2, [r3, #21]
 8008396:	2301      	movs	r3, #1
 8008398:	e0c8      	b.n	800852c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	7d1b      	ldrb	r3, [r3, #20]
 800839e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f7fe fa3f 	bl	8006834 <clust2sect>
 80083b6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <f_write+0x17e>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2202      	movs	r2, #2
 80083c2:	755a      	strb	r2, [r3, #21]
 80083c4:	2302      	movs	r3, #2
 80083c6:	e0b1      	b.n	800852c <f_write+0x2e2>
			sect += csect;
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	4413      	add	r3, r2
 80083ce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	0a5b      	lsrs	r3, r3, #9
 80083d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d03c      	beq.n	8008456 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	4413      	add	r3, r2
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	8952      	ldrh	r2, [r2, #10]
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d905      	bls.n	80083f6 <f_write+0x1ac>
					cc = fs->csize - csect;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	895b      	ldrh	r3, [r3, #10]
 80083ee:	461a      	mov	r2, r3
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	7858      	ldrb	r0, [r3, #1]
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	69f9      	ldr	r1, [r7, #28]
 8008400:	f7fd fe8e 	bl	8006120 <disk_write>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d004      	beq.n	8008414 <f_write+0x1ca>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2201      	movs	r2, #1
 800840e:	755a      	strb	r2, [r3, #21]
 8008410:	2301      	movs	r3, #1
 8008412:	e08b      	b.n	800852c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a1a      	ldr	r2, [r3, #32]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	6a3a      	ldr	r2, [r7, #32]
 800841e:	429a      	cmp	r2, r3
 8008420:	d915      	bls.n	800844e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a1a      	ldr	r2, [r3, #32]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	025b      	lsls	r3, r3, #9
 8008432:	69fa      	ldr	r2, [r7, #28]
 8008434:	4413      	add	r3, r2
 8008436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800843a:	4619      	mov	r1, r3
 800843c:	f7fd ff30 	bl	80062a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	7d1b      	ldrb	r3, [r3, #20]
 8008444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008448:	b2da      	uxtb	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	025b      	lsls	r3, r3, #9
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008454:	e03f      	b.n	80084d6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	429a      	cmp	r2, r3
 800845e:	d016      	beq.n	800848e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	699a      	ldr	r2, [r3, #24]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008468:	429a      	cmp	r2, r3
 800846a:	d210      	bcs.n	800848e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	7858      	ldrb	r0, [r3, #1]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008476:	2301      	movs	r3, #1
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	f7fd fe31 	bl	80060e0 <disk_read>
 800847e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	755a      	strb	r2, [r3, #21]
 800848a:	2301      	movs	r3, #1
 800848c:	e04e      	b.n	800852c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80084a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d901      	bls.n	80084ae <f_write+0x264>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084bc:	4413      	add	r3, r2
 80084be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c0:	69f9      	ldr	r1, [r7, #28]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fd feec 	bl	80062a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	7d1b      	ldrb	r3, [r3, #20]
 80084cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	4413      	add	r3, r2
 80084dc:	61fb      	str	r3, [r7, #28]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	699a      	ldr	r2, [r3, #24]
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	441a      	add	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	619a      	str	r2, [r3, #24]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	bf38      	it	cc
 80084f6:	461a      	movcc	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	60da      	str	r2, [r3, #12]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008502:	441a      	add	r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f47f aed4 	bne.w	80082c0 <f_write+0x76>
 8008518:	e000      	b.n	800851c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800851a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	7d1b      	ldrb	r3, [r3, #20]
 8008520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008524:	b2da      	uxtb	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3730      	adds	r7, #48	@ 0x30
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f107 0208 	add.w	r2, r7, #8
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff fb0b 	bl	8007b60 <validate>
 800854a:	4603      	mov	r3, r0
 800854c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800854e:	7dfb      	ldrb	r3, [r7, #23]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d168      	bne.n	8008626 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7d1b      	ldrb	r3, [r3, #20]
 8008558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	d062      	beq.n	8008626 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	7d1b      	ldrb	r3, [r3, #20]
 8008564:	b25b      	sxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	da15      	bge.n	8008596 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	7858      	ldrb	r0, [r3, #1]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1a      	ldr	r2, [r3, #32]
 8008578:	2301      	movs	r3, #1
 800857a:	f7fd fdd1 	bl	8006120 <disk_write>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <f_sync+0x54>
 8008584:	2301      	movs	r3, #1
 8008586:	e04f      	b.n	8008628 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	7d1b      	ldrb	r3, [r3, #20]
 800858c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008590:	b2da      	uxtb	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008596:	f7fd f825 	bl	80055e4 <get_fattime>
 800859a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a2:	4619      	mov	r1, r3
 80085a4:	4610      	mov	r0, r2
 80085a6:	f7fe f8a9 	bl	80066fc <move_window>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d138      	bne.n	8008626 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	330b      	adds	r3, #11
 80085be:	781a      	ldrb	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	330b      	adds	r3, #11
 80085c4:	f042 0220 	orr.w	r2, r2, #32
 80085c8:	b2d2      	uxtb	r2, r2
 80085ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	461a      	mov	r2, r3
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	f7fe fdb3 	bl	8007142 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f103 021c 	add.w	r2, r3, #28
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f7fd fe2d 	bl	8006248 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3316      	adds	r3, #22
 80085f2:	6939      	ldr	r1, [r7, #16]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fd fe27 	bl	8006248 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3312      	adds	r3, #18
 80085fe:	2100      	movs	r1, #0
 8008600:	4618      	mov	r0, r3
 8008602:	f7fd fe06 	bl	8006212 <st_word>
					fs->wflag = 1;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2201      	movs	r2, #1
 800860a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe f8a2 	bl	8006758 <sync_fs>
 8008614:	4603      	mov	r3, r0
 8008616:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	7d1b      	ldrb	r3, [r3, #20]
 800861c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008620:	b2da      	uxtb	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008626:	7dfb      	ldrb	r3, [r7, #23]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7ff ff7b 	bl	8008534 <f_sync>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d118      	bne.n	800867a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f107 0208 	add.w	r2, r7, #8
 800864e:	4611      	mov	r1, r2
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fa85 	bl	8007b60 <validate>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10c      	bne.n	800867a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	4618      	mov	r0, r3
 8008666:	f7fd ffa5 	bl	80065b4 <dec_lock>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b092      	sub	sp, #72	@ 0x48
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008690:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008694:	f107 030c 	add.w	r3, r7, #12
 8008698:	2200      	movs	r2, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff f814 	bl	80076c8 <find_volume>
 80086a0:	4603      	mov	r3, r0
 80086a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80086a6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f040 8099 	bne.w	80087e2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80086b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80086b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	3b02      	subs	r3, #2
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d804      	bhi.n	80086ce <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80086c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c6:	691a      	ldr	r2, [r3, #16]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e089      	b.n	80087e2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80086d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d128      	bne.n	800872c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80086da:	2302      	movs	r3, #2
 80086dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80086e2:	f107 0314 	add.w	r3, r7, #20
 80086e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe f8c2 	bl	8006872 <get_fat>
 80086ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80086f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f6:	d103      	bne.n	8008700 <f_getfree+0x7c>
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80086fe:	e063      	b.n	80087c8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008702:	2b01      	cmp	r3, #1
 8008704:	d103      	bne.n	800870e <f_getfree+0x8a>
 8008706:	2302      	movs	r3, #2
 8008708:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800870c:	e05c      	b.n	80087c8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800870e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <f_getfree+0x96>
 8008714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008716:	3301      	adds	r3, #1
 8008718:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800871a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800871c:	3301      	adds	r3, #1
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008726:	429a      	cmp	r2, r3
 8008728:	d3db      	bcc.n	80086e2 <f_getfree+0x5e>
 800872a:	e04d      	b.n	80087c8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
 800873c:	2300      	movs	r3, #0
 800873e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008742:	2b00      	cmp	r3, #0
 8008744:	d113      	bne.n	800876e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800874e:	4619      	mov	r1, r3
 8008750:	f7fd ffd4 	bl	80066fc <move_window>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800875a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800875e:	2b00      	cmp	r3, #0
 8008760:	d131      	bne.n	80087c6 <f_getfree+0x142>
							p = fs->win;
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	3330      	adds	r3, #48	@ 0x30
 8008766:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008768:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800876c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b02      	cmp	r3, #2
 8008774:	d10f      	bne.n	8008796 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008776:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008778:	f7fd fd10 	bl	800619c <ld_word>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <f_getfree+0x104>
 8008782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008784:	3301      	adds	r3, #1
 8008786:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878a:	3302      	adds	r3, #2
 800878c:	633b      	str	r3, [r7, #48]	@ 0x30
 800878e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008790:	3b02      	subs	r3, #2
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34
 8008794:	e010      	b.n	80087b8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008796:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008798:	f7fd fd18 	bl	80061cc <ld_dword>
 800879c:	4603      	mov	r3, r0
 800879e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d102      	bne.n	80087ac <f_getfree+0x128>
 80087a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087a8:	3301      	adds	r3, #1
 80087aa:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80087ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ae:	3304      	adds	r3, #4
 80087b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80087b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b4:	3b04      	subs	r3, #4
 80087b6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80087b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ba:	3b01      	subs	r3, #1
 80087bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1bd      	bne.n	8008740 <f_getfree+0xbc>
 80087c4:	e000      	b.n	80087c8 <f_getfree+0x144>
							if (res != FR_OK) break;
 80087c6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087cc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80087ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087d2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	791a      	ldrb	r2, [r3, #4]
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80087e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3748      	adds	r7, #72	@ 0x48
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b09e      	sub	sp, #120	@ 0x78
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80087fa:	f107 010c 	add.w	r1, r7, #12
 80087fe:	1d3b      	adds	r3, r7, #4
 8008800:	2202      	movs	r2, #2
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe ff60 	bl	80076c8 <find_volume>
 8008808:	4603      	mov	r3, r0
 800880a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8008812:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008816:	2b00      	cmp	r3, #0
 8008818:	f040 808e 	bne.w	8008938 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008822:	4611      	mov	r1, r2
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fe43 	bl	80074b0 <follow_path>
 800882a:	4603      	mov	r3, r0
 800882c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008830:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008834:	2b00      	cmp	r3, #0
 8008836:	d108      	bne.n	800884a <f_unlink+0x5c>
 8008838:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800883c:	2102      	movs	r1, #2
 800883e:	4618      	mov	r0, r3
 8008840:	f7fd fdac 	bl	800639c <chk_lock>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800884a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800884e:	2b00      	cmp	r3, #0
 8008850:	d172      	bne.n	8008938 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008852:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008856:	b25b      	sxtb	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	da03      	bge.n	8008864 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800885c:	2306      	movs	r3, #6
 800885e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8008862:	e008      	b.n	8008876 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008864:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008870:	2307      	movs	r3, #7
 8008872:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 8008876:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800887a:	2b00      	cmp	r3, #0
 800887c:	d134      	bne.n	80088e8 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fc3d 	bl	8007104 <ld_clust>
 800888a:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800888c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b00      	cmp	r3, #0
 8008896:	d027      	beq.n	80088e8 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800889c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800889e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80088a0:	f107 0310 	add.w	r3, r7, #16
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe faa5 	bl	8006df6 <dir_sdi>
 80088ac:	4603      	mov	r3, r0
 80088ae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 80088b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d116      	bne.n	80088e8 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80088ba:	f107 0310 	add.w	r3, r7, #16
 80088be:	2100      	movs	r1, #0
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fc5e 	bl	8007182 <dir_read>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80088cc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <f_unlink+0xec>
 80088d4:	2307      	movs	r3, #7
 80088d6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80088da:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80088de:	2b04      	cmp	r3, #4
 80088e0:	d102      	bne.n	80088e8 <f_unlink+0xfa>
 80088e2:	2300      	movs	r3, #0
 80088e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80088e8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d123      	bne.n	8008938 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80088f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe fd28 	bl	800734a <dir_remove>
 80088fa:	4603      	mov	r3, r0
 80088fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008900:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <f_unlink+0x134>
 8008908:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800890e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008912:	2200      	movs	r2, #0
 8008914:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe f93c 	bl	8006b94 <remove_chain>
 800891c:	4603      	mov	r3, r0
 800891e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008922:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <f_unlink+0x14a>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	4618      	mov	r0, r3
 800892e:	f7fd ff13 	bl	8006758 <sync_fs>
 8008932:	4603      	mov	r3, r0
 8008934:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008938:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800893c:	4618      	mov	r0, r3
 800893e:	3778      	adds	r7, #120	@ 0x78
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 8008944:	b590      	push	{r4, r7, lr}
 8008946:	b0a5      	sub	sp, #148	@ 0x94
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800894e:	463b      	mov	r3, r7
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe fe1e 	bl	8007592 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8008956:	f107 0120 	add.w	r1, r7, #32
 800895a:	1d3b      	adds	r3, r7, #4
 800895c:	2202      	movs	r2, #2
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe feb2 	bl	80076c8 <find_volume>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800896a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800896e:	2b00      	cmp	r3, #0
 8008970:	f040 80db 	bne.w	8008b2a <f_rename+0x1e6>
		djo.obj.fs = fs;
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f7fe fd95 	bl	80074b0 <follow_path>
 8008986:	4603      	mov	r3, r0
 8008988:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800898c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8008990:	2b00      	cmp	r3, #0
 8008992:	d108      	bne.n	80089a6 <f_rename+0x62>
 8008994:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8008998:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <f_rename+0x62>
 80089a0:	2306      	movs	r3, #6
 80089a2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 80089a6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d108      	bne.n	80089c0 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 80089ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80089b2:	2102      	movs	r1, #2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fd fcf1 	bl	800639c <chk_lock>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 80089c0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f040 80b0 	bne.w	8008b2a <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 80089ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089cc:	f103 010b 	add.w	r1, r3, #11
 80089d0:	f107 0308 	add.w	r3, r7, #8
 80089d4:	2215      	movs	r2, #21
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fd fc62 	bl	80062a0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 80089dc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80089e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089e4:	2230      	movs	r2, #48	@ 0x30
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fd fc5a 	bl	80062a0 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089f2:	4611      	mov	r1, r2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe fd5b 	bl	80074b0 <follow_path>
 80089fa:	4603      	mov	r3, r0
 80089fc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8008a00:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10c      	bne.n	8008a22 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8008a08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d105      	bne.n	8008a1c <f_rename+0xd8>
 8008a10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d101      	bne.n	8008a1c <f_rename+0xd8>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	e000      	b.n	8008a1e <f_rename+0xda>
 8008a1c:	2308      	movs	r3, #8
 8008a1e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8008a22:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	d168      	bne.n	8008afc <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 8008a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fc59 	bl	80072e6 <dir_register>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 8008a3a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d15c      	bne.n	8008afc <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 8008a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 8008a48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a4c:	f103 000d 	add.w	r0, r3, #13
 8008a50:	f107 0308 	add.w	r3, r7, #8
 8008a54:	3302      	adds	r3, #2
 8008a56:	2213      	movs	r2, #19
 8008a58:	4619      	mov	r1, r3
 8008a5a:	f7fd fc21 	bl	80062a0 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 8008a5e:	7a3a      	ldrb	r2, [r7, #8]
 8008a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a64:	330b      	adds	r3, #11
 8008a66:	f042 0220 	orr.w	r2, r2, #32
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	2201      	movs	r2, #1
 8008a72:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8008a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a78:	330b      	adds	r3, #11
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f003 0310 	and.w	r3, r3, #16
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d03b      	beq.n	8008afc <f_rename+0x1b8>
 8008a84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d037      	beq.n	8008afc <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8008a8c:	6a3c      	ldr	r4, [r7, #32]
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fb35 	bl	8007104 <ld_clust>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f7fd fec8 	bl	8006834 <clust2sect>
 8008aa4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 8008aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d103      	bne.n	8008ab8 <f_rename+0x174>
								res = FR_INT_ERR;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8008ab6:	e021      	b.n	8008afc <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fd fe1c 	bl	80066fc <move_window>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	3330      	adds	r3, #48	@ 0x30
 8008ace:	3320      	adds	r3, #32
 8008ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 8008ad4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10f      	bne.n	8008afc <f_rename+0x1b8>
 8008adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ae6:	d109      	bne.n	8008afc <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aec:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fe fb26 	bl	8007142 <st_clust>
									fs->wflag = 1;
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	2201      	movs	r2, #1
 8008afa:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 8008afc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d112      	bne.n	8008b2a <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 8008b04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fe fc1e 	bl	800734a <dir_remove>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 8008b14:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d106      	bne.n	8008b2a <f_rename+0x1e6>
					res = sync_fs(fs);
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fd fe1a 	bl	8006758 <sync_fs>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008b2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3794      	adds	r7, #148	@ 0x94
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd90      	pop	{r4, r7, pc}

08008b36 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b088      	sub	sp, #32
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008b4a:	e01c      	b.n	8008b86 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008b4c:	f107 0310 	add.w	r3, r7, #16
 8008b50:	f107 0114 	add.w	r1, r7, #20
 8008b54:	2201      	movs	r2, #1
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff fa38 	bl	8007fcc <f_read>
		if (rc != 1) break;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d117      	bne.n	8008b92 <f_gets+0x5c>
		c = s[0];
 8008b62:	7d3b      	ldrb	r3, [r7, #20]
 8008b64:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	2b0d      	cmp	r3, #13
 8008b6a:	d00b      	beq.n	8008b84 <f_gets+0x4e>
		*p++ = c;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	61ba      	str	r2, [r7, #24]
 8008b72:	7dfa      	ldrb	r2, [r7, #23]
 8008b74:	701a      	strb	r2, [r3, #0]
		n++;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	2b0a      	cmp	r3, #10
 8008b80:	d009      	beq.n	8008b96 <f_gets+0x60>
 8008b82:	e000      	b.n	8008b86 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008b84:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	69fa      	ldr	r2, [r7, #28]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	dbdd      	blt.n	8008b4c <f_gets+0x16>
 8008b90:	e002      	b.n	8008b98 <f_gets+0x62>
		if (rc != 1) break;
 8008b92:	bf00      	nop
 8008b94:	e000      	b.n	8008b98 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008b96:	bf00      	nop
	}
	*p = 0;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <f_gets+0x72>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	e000      	b.n	8008baa <f_gets+0x74>
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3720      	adds	r7, #32
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008bca:	4b1f      	ldr	r3, [pc, #124]	@ (8008c48 <FATFS_LinkDriverEx+0x94>)
 8008bcc:	7a5b      	ldrb	r3, [r3, #9]
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d131      	bne.n	8008c38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8008c48 <FATFS_LinkDriverEx+0x94>)
 8008bd6:	7a5b      	ldrb	r3, [r3, #9]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	461a      	mov	r2, r3
 8008bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c48 <FATFS_LinkDriverEx+0x94>)
 8008bde:	2100      	movs	r1, #0
 8008be0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008be2:	4b19      	ldr	r3, [pc, #100]	@ (8008c48 <FATFS_LinkDriverEx+0x94>)
 8008be4:	7a5b      	ldrb	r3, [r3, #9]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	4a17      	ldr	r2, [pc, #92]	@ (8008c48 <FATFS_LinkDriverEx+0x94>)
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008bf2:	4b15      	ldr	r3, [pc, #84]	@ (8008c48 <FATFS_LinkDriverEx+0x94>)
 8008bf4:	7a5b      	ldrb	r3, [r3, #9]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4b13      	ldr	r3, [pc, #76]	@ (8008c48 <FATFS_LinkDriverEx+0x94>)
 8008bfc:	4413      	add	r3, r2
 8008bfe:	79fa      	ldrb	r2, [r7, #7]
 8008c00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008c02:	4b11      	ldr	r3, [pc, #68]	@ (8008c48 <FATFS_LinkDriverEx+0x94>)
 8008c04:	7a5b      	ldrb	r3, [r3, #9]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	b2d1      	uxtb	r1, r2
 8008c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8008c48 <FATFS_LinkDriverEx+0x94>)
 8008c0e:	7251      	strb	r1, [r2, #9]
 8008c10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008c12:	7dbb      	ldrb	r3, [r7, #22]
 8008c14:	3330      	adds	r3, #48	@ 0x30
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	223a      	movs	r2, #58	@ 0x3a
 8008c22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	3302      	adds	r3, #2
 8008c28:	222f      	movs	r2, #47	@ 0x2f
 8008c2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	3303      	adds	r3, #3
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	20000e40 	.word	0x20000e40

08008c4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008c56:	2200      	movs	r2, #0
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7ff ffaa 	bl	8008bb4 <FATFS_LinkDriverEx>
 8008c60:	4603      	mov	r3, r0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <_strtol_l.constprop.0>:
 8008c6c:	2b24      	cmp	r3, #36	@ 0x24
 8008c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c72:	4686      	mov	lr, r0
 8008c74:	4690      	mov	r8, r2
 8008c76:	d801      	bhi.n	8008c7c <_strtol_l.constprop.0+0x10>
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d106      	bne.n	8008c8a <_strtol_l.constprop.0+0x1e>
 8008c7c:	f001 faa8 	bl	800a1d0 <__errno>
 8008c80:	2316      	movs	r3, #22
 8008c82:	6003      	str	r3, [r0, #0]
 8008c84:	2000      	movs	r0, #0
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8a:	4834      	ldr	r0, [pc, #208]	@ (8008d5c <_strtol_l.constprop.0+0xf0>)
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	462a      	mov	r2, r5
 8008c90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c94:	5d06      	ldrb	r6, [r0, r4]
 8008c96:	f016 0608 	ands.w	r6, r6, #8
 8008c9a:	d1f8      	bne.n	8008c8e <_strtol_l.constprop.0+0x22>
 8008c9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c9e:	d12d      	bne.n	8008cfc <_strtol_l.constprop.0+0x90>
 8008ca0:	782c      	ldrb	r4, [r5, #0]
 8008ca2:	2601      	movs	r6, #1
 8008ca4:	1c95      	adds	r5, r2, #2
 8008ca6:	f033 0210 	bics.w	r2, r3, #16
 8008caa:	d109      	bne.n	8008cc0 <_strtol_l.constprop.0+0x54>
 8008cac:	2c30      	cmp	r4, #48	@ 0x30
 8008cae:	d12a      	bne.n	8008d06 <_strtol_l.constprop.0+0x9a>
 8008cb0:	782a      	ldrb	r2, [r5, #0]
 8008cb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cb6:	2a58      	cmp	r2, #88	@ 0x58
 8008cb8:	d125      	bne.n	8008d06 <_strtol_l.constprop.0+0x9a>
 8008cba:	786c      	ldrb	r4, [r5, #1]
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	3502      	adds	r5, #2
 8008cc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008cc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008cc8:	2200      	movs	r2, #0
 8008cca:	fbbc f9f3 	udiv	r9, ip, r3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008cd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008cd8:	2f09      	cmp	r7, #9
 8008cda:	d81b      	bhi.n	8008d14 <_strtol_l.constprop.0+0xa8>
 8008cdc:	463c      	mov	r4, r7
 8008cde:	42a3      	cmp	r3, r4
 8008ce0:	dd27      	ble.n	8008d32 <_strtol_l.constprop.0+0xc6>
 8008ce2:	1c57      	adds	r7, r2, #1
 8008ce4:	d007      	beq.n	8008cf6 <_strtol_l.constprop.0+0x8a>
 8008ce6:	4581      	cmp	r9, r0
 8008ce8:	d320      	bcc.n	8008d2c <_strtol_l.constprop.0+0xc0>
 8008cea:	d101      	bne.n	8008cf0 <_strtol_l.constprop.0+0x84>
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	db1d      	blt.n	8008d2c <_strtol_l.constprop.0+0xc0>
 8008cf0:	fb00 4003 	mla	r0, r0, r3, r4
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cfa:	e7eb      	b.n	8008cd4 <_strtol_l.constprop.0+0x68>
 8008cfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8008cfe:	bf04      	itt	eq
 8008d00:	782c      	ldrbeq	r4, [r5, #0]
 8008d02:	1c95      	addeq	r5, r2, #2
 8008d04:	e7cf      	b.n	8008ca6 <_strtol_l.constprop.0+0x3a>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1da      	bne.n	8008cc0 <_strtol_l.constprop.0+0x54>
 8008d0a:	2c30      	cmp	r4, #48	@ 0x30
 8008d0c:	bf0c      	ite	eq
 8008d0e:	2308      	moveq	r3, #8
 8008d10:	230a      	movne	r3, #10
 8008d12:	e7d5      	b.n	8008cc0 <_strtol_l.constprop.0+0x54>
 8008d14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d18:	2f19      	cmp	r7, #25
 8008d1a:	d801      	bhi.n	8008d20 <_strtol_l.constprop.0+0xb4>
 8008d1c:	3c37      	subs	r4, #55	@ 0x37
 8008d1e:	e7de      	b.n	8008cde <_strtol_l.constprop.0+0x72>
 8008d20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d24:	2f19      	cmp	r7, #25
 8008d26:	d804      	bhi.n	8008d32 <_strtol_l.constprop.0+0xc6>
 8008d28:	3c57      	subs	r4, #87	@ 0x57
 8008d2a:	e7d8      	b.n	8008cde <_strtol_l.constprop.0+0x72>
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	e7e1      	b.n	8008cf6 <_strtol_l.constprop.0+0x8a>
 8008d32:	1c53      	adds	r3, r2, #1
 8008d34:	d108      	bne.n	8008d48 <_strtol_l.constprop.0+0xdc>
 8008d36:	2322      	movs	r3, #34	@ 0x22
 8008d38:	f8ce 3000 	str.w	r3, [lr]
 8008d3c:	4660      	mov	r0, ip
 8008d3e:	f1b8 0f00 	cmp.w	r8, #0
 8008d42:	d0a0      	beq.n	8008c86 <_strtol_l.constprop.0+0x1a>
 8008d44:	1e69      	subs	r1, r5, #1
 8008d46:	e006      	b.n	8008d56 <_strtol_l.constprop.0+0xea>
 8008d48:	b106      	cbz	r6, 8008d4c <_strtol_l.constprop.0+0xe0>
 8008d4a:	4240      	negs	r0, r0
 8008d4c:	f1b8 0f00 	cmp.w	r8, #0
 8008d50:	d099      	beq.n	8008c86 <_strtol_l.constprop.0+0x1a>
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	d1f6      	bne.n	8008d44 <_strtol_l.constprop.0+0xd8>
 8008d56:	f8c8 1000 	str.w	r1, [r8]
 8008d5a:	e794      	b.n	8008c86 <_strtol_l.constprop.0+0x1a>
 8008d5c:	0800dcd1 	.word	0x0800dcd1

08008d60 <_strtol_r>:
 8008d60:	f7ff bf84 	b.w	8008c6c <_strtol_l.constprop.0>

08008d64 <strtol>:
 8008d64:	4613      	mov	r3, r2
 8008d66:	460a      	mov	r2, r1
 8008d68:	4601      	mov	r1, r0
 8008d6a:	4802      	ldr	r0, [pc, #8]	@ (8008d74 <strtol+0x10>)
 8008d6c:	6800      	ldr	r0, [r0, #0]
 8008d6e:	f7ff bf7d 	b.w	8008c6c <_strtol_l.constprop.0>
 8008d72:	bf00      	nop
 8008d74:	20000038 	.word	0x20000038

08008d78 <__cvt>:
 8008d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7c:	ec57 6b10 	vmov	r6, r7, d0
 8008d80:	2f00      	cmp	r7, #0
 8008d82:	460c      	mov	r4, r1
 8008d84:	4619      	mov	r1, r3
 8008d86:	463b      	mov	r3, r7
 8008d88:	bfbb      	ittet	lt
 8008d8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008d8e:	461f      	movlt	r7, r3
 8008d90:	2300      	movge	r3, #0
 8008d92:	232d      	movlt	r3, #45	@ 0x2d
 8008d94:	700b      	strb	r3, [r1, #0]
 8008d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008d9c:	4691      	mov	r9, r2
 8008d9e:	f023 0820 	bic.w	r8, r3, #32
 8008da2:	bfbc      	itt	lt
 8008da4:	4632      	movlt	r2, r6
 8008da6:	4616      	movlt	r6, r2
 8008da8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008dac:	d005      	beq.n	8008dba <__cvt+0x42>
 8008dae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008db2:	d100      	bne.n	8008db6 <__cvt+0x3e>
 8008db4:	3401      	adds	r4, #1
 8008db6:	2102      	movs	r1, #2
 8008db8:	e000      	b.n	8008dbc <__cvt+0x44>
 8008dba:	2103      	movs	r1, #3
 8008dbc:	ab03      	add	r3, sp, #12
 8008dbe:	9301      	str	r3, [sp, #4]
 8008dc0:	ab02      	add	r3, sp, #8
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	ec47 6b10 	vmov	d0, r6, r7
 8008dc8:	4653      	mov	r3, sl
 8008dca:	4622      	mov	r2, r4
 8008dcc:	f001 fadc 	bl	800a388 <_dtoa_r>
 8008dd0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	d119      	bne.n	8008e0c <__cvt+0x94>
 8008dd8:	f019 0f01 	tst.w	r9, #1
 8008ddc:	d00e      	beq.n	8008dfc <__cvt+0x84>
 8008dde:	eb00 0904 	add.w	r9, r0, r4
 8008de2:	2200      	movs	r2, #0
 8008de4:	2300      	movs	r3, #0
 8008de6:	4630      	mov	r0, r6
 8008de8:	4639      	mov	r1, r7
 8008dea:	f7f7 fe8d 	bl	8000b08 <__aeabi_dcmpeq>
 8008dee:	b108      	cbz	r0, 8008df4 <__cvt+0x7c>
 8008df0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008df4:	2230      	movs	r2, #48	@ 0x30
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	454b      	cmp	r3, r9
 8008dfa:	d31e      	bcc.n	8008e3a <__cvt+0xc2>
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e00:	1b5b      	subs	r3, r3, r5
 8008e02:	4628      	mov	r0, r5
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	b004      	add	sp, #16
 8008e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e10:	eb00 0904 	add.w	r9, r0, r4
 8008e14:	d1e5      	bne.n	8008de2 <__cvt+0x6a>
 8008e16:	7803      	ldrb	r3, [r0, #0]
 8008e18:	2b30      	cmp	r3, #48	@ 0x30
 8008e1a:	d10a      	bne.n	8008e32 <__cvt+0xba>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2300      	movs	r3, #0
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 fe70 	bl	8000b08 <__aeabi_dcmpeq>
 8008e28:	b918      	cbnz	r0, 8008e32 <__cvt+0xba>
 8008e2a:	f1c4 0401 	rsb	r4, r4, #1
 8008e2e:	f8ca 4000 	str.w	r4, [sl]
 8008e32:	f8da 3000 	ldr.w	r3, [sl]
 8008e36:	4499      	add	r9, r3
 8008e38:	e7d3      	b.n	8008de2 <__cvt+0x6a>
 8008e3a:	1c59      	adds	r1, r3, #1
 8008e3c:	9103      	str	r1, [sp, #12]
 8008e3e:	701a      	strb	r2, [r3, #0]
 8008e40:	e7d9      	b.n	8008df6 <__cvt+0x7e>

08008e42 <__exponent>:
 8008e42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e44:	2900      	cmp	r1, #0
 8008e46:	bfba      	itte	lt
 8008e48:	4249      	neglt	r1, r1
 8008e4a:	232d      	movlt	r3, #45	@ 0x2d
 8008e4c:	232b      	movge	r3, #43	@ 0x2b
 8008e4e:	2909      	cmp	r1, #9
 8008e50:	7002      	strb	r2, [r0, #0]
 8008e52:	7043      	strb	r3, [r0, #1]
 8008e54:	dd29      	ble.n	8008eaa <__exponent+0x68>
 8008e56:	f10d 0307 	add.w	r3, sp, #7
 8008e5a:	461d      	mov	r5, r3
 8008e5c:	270a      	movs	r7, #10
 8008e5e:	461a      	mov	r2, r3
 8008e60:	fbb1 f6f7 	udiv	r6, r1, r7
 8008e64:	fb07 1416 	mls	r4, r7, r6, r1
 8008e68:	3430      	adds	r4, #48	@ 0x30
 8008e6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008e6e:	460c      	mov	r4, r1
 8008e70:	2c63      	cmp	r4, #99	@ 0x63
 8008e72:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e76:	4631      	mov	r1, r6
 8008e78:	dcf1      	bgt.n	8008e5e <__exponent+0x1c>
 8008e7a:	3130      	adds	r1, #48	@ 0x30
 8008e7c:	1e94      	subs	r4, r2, #2
 8008e7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e82:	1c41      	adds	r1, r0, #1
 8008e84:	4623      	mov	r3, r4
 8008e86:	42ab      	cmp	r3, r5
 8008e88:	d30a      	bcc.n	8008ea0 <__exponent+0x5e>
 8008e8a:	f10d 0309 	add.w	r3, sp, #9
 8008e8e:	1a9b      	subs	r3, r3, r2
 8008e90:	42ac      	cmp	r4, r5
 8008e92:	bf88      	it	hi
 8008e94:	2300      	movhi	r3, #0
 8008e96:	3302      	adds	r3, #2
 8008e98:	4403      	add	r3, r0
 8008e9a:	1a18      	subs	r0, r3, r0
 8008e9c:	b003      	add	sp, #12
 8008e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ea4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ea8:	e7ed      	b.n	8008e86 <__exponent+0x44>
 8008eaa:	2330      	movs	r3, #48	@ 0x30
 8008eac:	3130      	adds	r1, #48	@ 0x30
 8008eae:	7083      	strb	r3, [r0, #2]
 8008eb0:	70c1      	strb	r1, [r0, #3]
 8008eb2:	1d03      	adds	r3, r0, #4
 8008eb4:	e7f1      	b.n	8008e9a <__exponent+0x58>
	...

08008eb8 <_printf_float>:
 8008eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ebc:	b08d      	sub	sp, #52	@ 0x34
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ec4:	4616      	mov	r6, r2
 8008ec6:	461f      	mov	r7, r3
 8008ec8:	4605      	mov	r5, r0
 8008eca:	f001 f937 	bl	800a13c <_localeconv_r>
 8008ece:	6803      	ldr	r3, [r0, #0]
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f7 f9ec 	bl	80002b0 <strlen>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	930a      	str	r3, [sp, #40]	@ 0x28
 8008edc:	f8d8 3000 	ldr.w	r3, [r8]
 8008ee0:	9005      	str	r0, [sp, #20]
 8008ee2:	3307      	adds	r3, #7
 8008ee4:	f023 0307 	bic.w	r3, r3, #7
 8008ee8:	f103 0208 	add.w	r2, r3, #8
 8008eec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ef0:	f8d4 b000 	ldr.w	fp, [r4]
 8008ef4:	f8c8 2000 	str.w	r2, [r8]
 8008ef8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008efc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f00:	9307      	str	r3, [sp, #28]
 8008f02:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f0e:	4b9c      	ldr	r3, [pc, #624]	@ (8009180 <_printf_float+0x2c8>)
 8008f10:	f04f 32ff 	mov.w	r2, #4294967295
 8008f14:	f7f7 fe2a 	bl	8000b6c <__aeabi_dcmpun>
 8008f18:	bb70      	cbnz	r0, 8008f78 <_printf_float+0xc0>
 8008f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f1e:	4b98      	ldr	r3, [pc, #608]	@ (8009180 <_printf_float+0x2c8>)
 8008f20:	f04f 32ff 	mov.w	r2, #4294967295
 8008f24:	f7f7 fe04 	bl	8000b30 <__aeabi_dcmple>
 8008f28:	bb30      	cbnz	r0, 8008f78 <_printf_float+0xc0>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4640      	mov	r0, r8
 8008f30:	4649      	mov	r1, r9
 8008f32:	f7f7 fdf3 	bl	8000b1c <__aeabi_dcmplt>
 8008f36:	b110      	cbz	r0, 8008f3e <_printf_float+0x86>
 8008f38:	232d      	movs	r3, #45	@ 0x2d
 8008f3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f3e:	4a91      	ldr	r2, [pc, #580]	@ (8009184 <_printf_float+0x2cc>)
 8008f40:	4b91      	ldr	r3, [pc, #580]	@ (8009188 <_printf_float+0x2d0>)
 8008f42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f46:	bf94      	ite	ls
 8008f48:	4690      	movls	r8, r2
 8008f4a:	4698      	movhi	r8, r3
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	f02b 0304 	bic.w	r3, fp, #4
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	f04f 0900 	mov.w	r9, #0
 8008f5a:	9700      	str	r7, [sp, #0]
 8008f5c:	4633      	mov	r3, r6
 8008f5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008f60:	4621      	mov	r1, r4
 8008f62:	4628      	mov	r0, r5
 8008f64:	f000 f9d2 	bl	800930c <_printf_common>
 8008f68:	3001      	adds	r0, #1
 8008f6a:	f040 808d 	bne.w	8009088 <_printf_float+0x1d0>
 8008f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f72:	b00d      	add	sp, #52	@ 0x34
 8008f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f78:	4642      	mov	r2, r8
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	4649      	mov	r1, r9
 8008f80:	f7f7 fdf4 	bl	8000b6c <__aeabi_dcmpun>
 8008f84:	b140      	cbz	r0, 8008f98 <_printf_float+0xe0>
 8008f86:	464b      	mov	r3, r9
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bfbc      	itt	lt
 8008f8c:	232d      	movlt	r3, #45	@ 0x2d
 8008f8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008f92:	4a7e      	ldr	r2, [pc, #504]	@ (800918c <_printf_float+0x2d4>)
 8008f94:	4b7e      	ldr	r3, [pc, #504]	@ (8009190 <_printf_float+0x2d8>)
 8008f96:	e7d4      	b.n	8008f42 <_printf_float+0x8a>
 8008f98:	6863      	ldr	r3, [r4, #4]
 8008f9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008f9e:	9206      	str	r2, [sp, #24]
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	d13b      	bne.n	800901c <_printf_float+0x164>
 8008fa4:	2306      	movs	r3, #6
 8008fa6:	6063      	str	r3, [r4, #4]
 8008fa8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008fac:	2300      	movs	r3, #0
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	9303      	str	r3, [sp, #12]
 8008fb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008fb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008fb8:	ab09      	add	r3, sp, #36	@ 0x24
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	6861      	ldr	r1, [r4, #4]
 8008fbe:	ec49 8b10 	vmov	d0, r8, r9
 8008fc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f7ff fed6 	bl	8008d78 <__cvt>
 8008fcc:	9b06      	ldr	r3, [sp, #24]
 8008fce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fd0:	2b47      	cmp	r3, #71	@ 0x47
 8008fd2:	4680      	mov	r8, r0
 8008fd4:	d129      	bne.n	800902a <_printf_float+0x172>
 8008fd6:	1cc8      	adds	r0, r1, #3
 8008fd8:	db02      	blt.n	8008fe0 <_printf_float+0x128>
 8008fda:	6863      	ldr	r3, [r4, #4]
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	dd41      	ble.n	8009064 <_printf_float+0x1ac>
 8008fe0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008fe4:	fa5f fa8a 	uxtb.w	sl, sl
 8008fe8:	3901      	subs	r1, #1
 8008fea:	4652      	mov	r2, sl
 8008fec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ff0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ff2:	f7ff ff26 	bl	8008e42 <__exponent>
 8008ff6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ff8:	1813      	adds	r3, r2, r0
 8008ffa:	2a01      	cmp	r2, #1
 8008ffc:	4681      	mov	r9, r0
 8008ffe:	6123      	str	r3, [r4, #16]
 8009000:	dc02      	bgt.n	8009008 <_printf_float+0x150>
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	07d2      	lsls	r2, r2, #31
 8009006:	d501      	bpl.n	800900c <_printf_float+0x154>
 8009008:	3301      	adds	r3, #1
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009010:	2b00      	cmp	r3, #0
 8009012:	d0a2      	beq.n	8008f5a <_printf_float+0xa2>
 8009014:	232d      	movs	r3, #45	@ 0x2d
 8009016:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800901a:	e79e      	b.n	8008f5a <_printf_float+0xa2>
 800901c:	9a06      	ldr	r2, [sp, #24]
 800901e:	2a47      	cmp	r2, #71	@ 0x47
 8009020:	d1c2      	bne.n	8008fa8 <_printf_float+0xf0>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1c0      	bne.n	8008fa8 <_printf_float+0xf0>
 8009026:	2301      	movs	r3, #1
 8009028:	e7bd      	b.n	8008fa6 <_printf_float+0xee>
 800902a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800902e:	d9db      	bls.n	8008fe8 <_printf_float+0x130>
 8009030:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009034:	d118      	bne.n	8009068 <_printf_float+0x1b0>
 8009036:	2900      	cmp	r1, #0
 8009038:	6863      	ldr	r3, [r4, #4]
 800903a:	dd0b      	ble.n	8009054 <_printf_float+0x19c>
 800903c:	6121      	str	r1, [r4, #16]
 800903e:	b913      	cbnz	r3, 8009046 <_printf_float+0x18e>
 8009040:	6822      	ldr	r2, [r4, #0]
 8009042:	07d0      	lsls	r0, r2, #31
 8009044:	d502      	bpl.n	800904c <_printf_float+0x194>
 8009046:	3301      	adds	r3, #1
 8009048:	440b      	add	r3, r1
 800904a:	6123      	str	r3, [r4, #16]
 800904c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800904e:	f04f 0900 	mov.w	r9, #0
 8009052:	e7db      	b.n	800900c <_printf_float+0x154>
 8009054:	b913      	cbnz	r3, 800905c <_printf_float+0x1a4>
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	07d2      	lsls	r2, r2, #31
 800905a:	d501      	bpl.n	8009060 <_printf_float+0x1a8>
 800905c:	3302      	adds	r3, #2
 800905e:	e7f4      	b.n	800904a <_printf_float+0x192>
 8009060:	2301      	movs	r3, #1
 8009062:	e7f2      	b.n	800904a <_printf_float+0x192>
 8009064:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800906a:	4299      	cmp	r1, r3
 800906c:	db05      	blt.n	800907a <_printf_float+0x1c2>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	6121      	str	r1, [r4, #16]
 8009072:	07d8      	lsls	r0, r3, #31
 8009074:	d5ea      	bpl.n	800904c <_printf_float+0x194>
 8009076:	1c4b      	adds	r3, r1, #1
 8009078:	e7e7      	b.n	800904a <_printf_float+0x192>
 800907a:	2900      	cmp	r1, #0
 800907c:	bfd4      	ite	le
 800907e:	f1c1 0202 	rsble	r2, r1, #2
 8009082:	2201      	movgt	r2, #1
 8009084:	4413      	add	r3, r2
 8009086:	e7e0      	b.n	800904a <_printf_float+0x192>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	055a      	lsls	r2, r3, #21
 800908c:	d407      	bmi.n	800909e <_printf_float+0x1e6>
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	4642      	mov	r2, r8
 8009092:	4631      	mov	r1, r6
 8009094:	4628      	mov	r0, r5
 8009096:	47b8      	blx	r7
 8009098:	3001      	adds	r0, #1
 800909a:	d12b      	bne.n	80090f4 <_printf_float+0x23c>
 800909c:	e767      	b.n	8008f6e <_printf_float+0xb6>
 800909e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80090a2:	f240 80dd 	bls.w	8009260 <_printf_float+0x3a8>
 80090a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090aa:	2200      	movs	r2, #0
 80090ac:	2300      	movs	r3, #0
 80090ae:	f7f7 fd2b 	bl	8000b08 <__aeabi_dcmpeq>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d033      	beq.n	800911e <_printf_float+0x266>
 80090b6:	4a37      	ldr	r2, [pc, #220]	@ (8009194 <_printf_float+0x2dc>)
 80090b8:	2301      	movs	r3, #1
 80090ba:	4631      	mov	r1, r6
 80090bc:	4628      	mov	r0, r5
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	f43f af54 	beq.w	8008f6e <_printf_float+0xb6>
 80090c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80090ca:	4543      	cmp	r3, r8
 80090cc:	db02      	blt.n	80090d4 <_printf_float+0x21c>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	07d8      	lsls	r0, r3, #31
 80090d2:	d50f      	bpl.n	80090f4 <_printf_float+0x23c>
 80090d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090d8:	4631      	mov	r1, r6
 80090da:	4628      	mov	r0, r5
 80090dc:	47b8      	blx	r7
 80090de:	3001      	adds	r0, #1
 80090e0:	f43f af45 	beq.w	8008f6e <_printf_float+0xb6>
 80090e4:	f04f 0900 	mov.w	r9, #0
 80090e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80090ec:	f104 0a1a 	add.w	sl, r4, #26
 80090f0:	45c8      	cmp	r8, r9
 80090f2:	dc09      	bgt.n	8009108 <_printf_float+0x250>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	079b      	lsls	r3, r3, #30
 80090f8:	f100 8103 	bmi.w	8009302 <_printf_float+0x44a>
 80090fc:	68e0      	ldr	r0, [r4, #12]
 80090fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009100:	4298      	cmp	r0, r3
 8009102:	bfb8      	it	lt
 8009104:	4618      	movlt	r0, r3
 8009106:	e734      	b.n	8008f72 <_printf_float+0xba>
 8009108:	2301      	movs	r3, #1
 800910a:	4652      	mov	r2, sl
 800910c:	4631      	mov	r1, r6
 800910e:	4628      	mov	r0, r5
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	f43f af2b 	beq.w	8008f6e <_printf_float+0xb6>
 8009118:	f109 0901 	add.w	r9, r9, #1
 800911c:	e7e8      	b.n	80090f0 <_printf_float+0x238>
 800911e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009120:	2b00      	cmp	r3, #0
 8009122:	dc39      	bgt.n	8009198 <_printf_float+0x2e0>
 8009124:	4a1b      	ldr	r2, [pc, #108]	@ (8009194 <_printf_float+0x2dc>)
 8009126:	2301      	movs	r3, #1
 8009128:	4631      	mov	r1, r6
 800912a:	4628      	mov	r0, r5
 800912c:	47b8      	blx	r7
 800912e:	3001      	adds	r0, #1
 8009130:	f43f af1d 	beq.w	8008f6e <_printf_float+0xb6>
 8009134:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009138:	ea59 0303 	orrs.w	r3, r9, r3
 800913c:	d102      	bne.n	8009144 <_printf_float+0x28c>
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	07d9      	lsls	r1, r3, #31
 8009142:	d5d7      	bpl.n	80090f4 <_printf_float+0x23c>
 8009144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009148:	4631      	mov	r1, r6
 800914a:	4628      	mov	r0, r5
 800914c:	47b8      	blx	r7
 800914e:	3001      	adds	r0, #1
 8009150:	f43f af0d 	beq.w	8008f6e <_printf_float+0xb6>
 8009154:	f04f 0a00 	mov.w	sl, #0
 8009158:	f104 0b1a 	add.w	fp, r4, #26
 800915c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915e:	425b      	negs	r3, r3
 8009160:	4553      	cmp	r3, sl
 8009162:	dc01      	bgt.n	8009168 <_printf_float+0x2b0>
 8009164:	464b      	mov	r3, r9
 8009166:	e793      	b.n	8009090 <_printf_float+0x1d8>
 8009168:	2301      	movs	r3, #1
 800916a:	465a      	mov	r2, fp
 800916c:	4631      	mov	r1, r6
 800916e:	4628      	mov	r0, r5
 8009170:	47b8      	blx	r7
 8009172:	3001      	adds	r0, #1
 8009174:	f43f aefb 	beq.w	8008f6e <_printf_float+0xb6>
 8009178:	f10a 0a01 	add.w	sl, sl, #1
 800917c:	e7ee      	b.n	800915c <_printf_float+0x2a4>
 800917e:	bf00      	nop
 8009180:	7fefffff 	.word	0x7fefffff
 8009184:	0800ddd1 	.word	0x0800ddd1
 8009188:	0800ddd5 	.word	0x0800ddd5
 800918c:	0800ddd9 	.word	0x0800ddd9
 8009190:	0800dddd 	.word	0x0800dddd
 8009194:	0800dde1 	.word	0x0800dde1
 8009198:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800919a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800919e:	4553      	cmp	r3, sl
 80091a0:	bfa8      	it	ge
 80091a2:	4653      	movge	r3, sl
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	4699      	mov	r9, r3
 80091a8:	dc36      	bgt.n	8009218 <_printf_float+0x360>
 80091aa:	f04f 0b00 	mov.w	fp, #0
 80091ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091b2:	f104 021a 	add.w	r2, r4, #26
 80091b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091b8:	9306      	str	r3, [sp, #24]
 80091ba:	eba3 0309 	sub.w	r3, r3, r9
 80091be:	455b      	cmp	r3, fp
 80091c0:	dc31      	bgt.n	8009226 <_printf_float+0x36e>
 80091c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c4:	459a      	cmp	sl, r3
 80091c6:	dc3a      	bgt.n	800923e <_printf_float+0x386>
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	07da      	lsls	r2, r3, #31
 80091cc:	d437      	bmi.n	800923e <_printf_float+0x386>
 80091ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d0:	ebaa 0903 	sub.w	r9, sl, r3
 80091d4:	9b06      	ldr	r3, [sp, #24]
 80091d6:	ebaa 0303 	sub.w	r3, sl, r3
 80091da:	4599      	cmp	r9, r3
 80091dc:	bfa8      	it	ge
 80091de:	4699      	movge	r9, r3
 80091e0:	f1b9 0f00 	cmp.w	r9, #0
 80091e4:	dc33      	bgt.n	800924e <_printf_float+0x396>
 80091e6:	f04f 0800 	mov.w	r8, #0
 80091ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ee:	f104 0b1a 	add.w	fp, r4, #26
 80091f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f4:	ebaa 0303 	sub.w	r3, sl, r3
 80091f8:	eba3 0309 	sub.w	r3, r3, r9
 80091fc:	4543      	cmp	r3, r8
 80091fe:	f77f af79 	ble.w	80090f4 <_printf_float+0x23c>
 8009202:	2301      	movs	r3, #1
 8009204:	465a      	mov	r2, fp
 8009206:	4631      	mov	r1, r6
 8009208:	4628      	mov	r0, r5
 800920a:	47b8      	blx	r7
 800920c:	3001      	adds	r0, #1
 800920e:	f43f aeae 	beq.w	8008f6e <_printf_float+0xb6>
 8009212:	f108 0801 	add.w	r8, r8, #1
 8009216:	e7ec      	b.n	80091f2 <_printf_float+0x33a>
 8009218:	4642      	mov	r2, r8
 800921a:	4631      	mov	r1, r6
 800921c:	4628      	mov	r0, r5
 800921e:	47b8      	blx	r7
 8009220:	3001      	adds	r0, #1
 8009222:	d1c2      	bne.n	80091aa <_printf_float+0x2f2>
 8009224:	e6a3      	b.n	8008f6e <_printf_float+0xb6>
 8009226:	2301      	movs	r3, #1
 8009228:	4631      	mov	r1, r6
 800922a:	4628      	mov	r0, r5
 800922c:	9206      	str	r2, [sp, #24]
 800922e:	47b8      	blx	r7
 8009230:	3001      	adds	r0, #1
 8009232:	f43f ae9c 	beq.w	8008f6e <_printf_float+0xb6>
 8009236:	9a06      	ldr	r2, [sp, #24]
 8009238:	f10b 0b01 	add.w	fp, fp, #1
 800923c:	e7bb      	b.n	80091b6 <_printf_float+0x2fe>
 800923e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009242:	4631      	mov	r1, r6
 8009244:	4628      	mov	r0, r5
 8009246:	47b8      	blx	r7
 8009248:	3001      	adds	r0, #1
 800924a:	d1c0      	bne.n	80091ce <_printf_float+0x316>
 800924c:	e68f      	b.n	8008f6e <_printf_float+0xb6>
 800924e:	9a06      	ldr	r2, [sp, #24]
 8009250:	464b      	mov	r3, r9
 8009252:	4442      	add	r2, r8
 8009254:	4631      	mov	r1, r6
 8009256:	4628      	mov	r0, r5
 8009258:	47b8      	blx	r7
 800925a:	3001      	adds	r0, #1
 800925c:	d1c3      	bne.n	80091e6 <_printf_float+0x32e>
 800925e:	e686      	b.n	8008f6e <_printf_float+0xb6>
 8009260:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009264:	f1ba 0f01 	cmp.w	sl, #1
 8009268:	dc01      	bgt.n	800926e <_printf_float+0x3b6>
 800926a:	07db      	lsls	r3, r3, #31
 800926c:	d536      	bpl.n	80092dc <_printf_float+0x424>
 800926e:	2301      	movs	r3, #1
 8009270:	4642      	mov	r2, r8
 8009272:	4631      	mov	r1, r6
 8009274:	4628      	mov	r0, r5
 8009276:	47b8      	blx	r7
 8009278:	3001      	adds	r0, #1
 800927a:	f43f ae78 	beq.w	8008f6e <_printf_float+0xb6>
 800927e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	f43f ae70 	beq.w	8008f6e <_printf_float+0xb6>
 800928e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009292:	2200      	movs	r2, #0
 8009294:	2300      	movs	r3, #0
 8009296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800929a:	f7f7 fc35 	bl	8000b08 <__aeabi_dcmpeq>
 800929e:	b9c0      	cbnz	r0, 80092d2 <_printf_float+0x41a>
 80092a0:	4653      	mov	r3, sl
 80092a2:	f108 0201 	add.w	r2, r8, #1
 80092a6:	4631      	mov	r1, r6
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b8      	blx	r7
 80092ac:	3001      	adds	r0, #1
 80092ae:	d10c      	bne.n	80092ca <_printf_float+0x412>
 80092b0:	e65d      	b.n	8008f6e <_printf_float+0xb6>
 80092b2:	2301      	movs	r3, #1
 80092b4:	465a      	mov	r2, fp
 80092b6:	4631      	mov	r1, r6
 80092b8:	4628      	mov	r0, r5
 80092ba:	47b8      	blx	r7
 80092bc:	3001      	adds	r0, #1
 80092be:	f43f ae56 	beq.w	8008f6e <_printf_float+0xb6>
 80092c2:	f108 0801 	add.w	r8, r8, #1
 80092c6:	45d0      	cmp	r8, sl
 80092c8:	dbf3      	blt.n	80092b2 <_printf_float+0x3fa>
 80092ca:	464b      	mov	r3, r9
 80092cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80092d0:	e6df      	b.n	8009092 <_printf_float+0x1da>
 80092d2:	f04f 0800 	mov.w	r8, #0
 80092d6:	f104 0b1a 	add.w	fp, r4, #26
 80092da:	e7f4      	b.n	80092c6 <_printf_float+0x40e>
 80092dc:	2301      	movs	r3, #1
 80092de:	4642      	mov	r2, r8
 80092e0:	e7e1      	b.n	80092a6 <_printf_float+0x3ee>
 80092e2:	2301      	movs	r3, #1
 80092e4:	464a      	mov	r2, r9
 80092e6:	4631      	mov	r1, r6
 80092e8:	4628      	mov	r0, r5
 80092ea:	47b8      	blx	r7
 80092ec:	3001      	adds	r0, #1
 80092ee:	f43f ae3e 	beq.w	8008f6e <_printf_float+0xb6>
 80092f2:	f108 0801 	add.w	r8, r8, #1
 80092f6:	68e3      	ldr	r3, [r4, #12]
 80092f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092fa:	1a5b      	subs	r3, r3, r1
 80092fc:	4543      	cmp	r3, r8
 80092fe:	dcf0      	bgt.n	80092e2 <_printf_float+0x42a>
 8009300:	e6fc      	b.n	80090fc <_printf_float+0x244>
 8009302:	f04f 0800 	mov.w	r8, #0
 8009306:	f104 0919 	add.w	r9, r4, #25
 800930a:	e7f4      	b.n	80092f6 <_printf_float+0x43e>

0800930c <_printf_common>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	4616      	mov	r6, r2
 8009312:	4698      	mov	r8, r3
 8009314:	688a      	ldr	r2, [r1, #8]
 8009316:	690b      	ldr	r3, [r1, #16]
 8009318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800931c:	4293      	cmp	r3, r2
 800931e:	bfb8      	it	lt
 8009320:	4613      	movlt	r3, r2
 8009322:	6033      	str	r3, [r6, #0]
 8009324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009328:	4607      	mov	r7, r0
 800932a:	460c      	mov	r4, r1
 800932c:	b10a      	cbz	r2, 8009332 <_printf_common+0x26>
 800932e:	3301      	adds	r3, #1
 8009330:	6033      	str	r3, [r6, #0]
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	0699      	lsls	r1, r3, #26
 8009336:	bf42      	ittt	mi
 8009338:	6833      	ldrmi	r3, [r6, #0]
 800933a:	3302      	addmi	r3, #2
 800933c:	6033      	strmi	r3, [r6, #0]
 800933e:	6825      	ldr	r5, [r4, #0]
 8009340:	f015 0506 	ands.w	r5, r5, #6
 8009344:	d106      	bne.n	8009354 <_printf_common+0x48>
 8009346:	f104 0a19 	add.w	sl, r4, #25
 800934a:	68e3      	ldr	r3, [r4, #12]
 800934c:	6832      	ldr	r2, [r6, #0]
 800934e:	1a9b      	subs	r3, r3, r2
 8009350:	42ab      	cmp	r3, r5
 8009352:	dc26      	bgt.n	80093a2 <_printf_common+0x96>
 8009354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009358:	6822      	ldr	r2, [r4, #0]
 800935a:	3b00      	subs	r3, #0
 800935c:	bf18      	it	ne
 800935e:	2301      	movne	r3, #1
 8009360:	0692      	lsls	r2, r2, #26
 8009362:	d42b      	bmi.n	80093bc <_printf_common+0xb0>
 8009364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009368:	4641      	mov	r1, r8
 800936a:	4638      	mov	r0, r7
 800936c:	47c8      	blx	r9
 800936e:	3001      	adds	r0, #1
 8009370:	d01e      	beq.n	80093b0 <_printf_common+0xa4>
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	6922      	ldr	r2, [r4, #16]
 8009376:	f003 0306 	and.w	r3, r3, #6
 800937a:	2b04      	cmp	r3, #4
 800937c:	bf02      	ittt	eq
 800937e:	68e5      	ldreq	r5, [r4, #12]
 8009380:	6833      	ldreq	r3, [r6, #0]
 8009382:	1aed      	subeq	r5, r5, r3
 8009384:	68a3      	ldr	r3, [r4, #8]
 8009386:	bf0c      	ite	eq
 8009388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800938c:	2500      	movne	r5, #0
 800938e:	4293      	cmp	r3, r2
 8009390:	bfc4      	itt	gt
 8009392:	1a9b      	subgt	r3, r3, r2
 8009394:	18ed      	addgt	r5, r5, r3
 8009396:	2600      	movs	r6, #0
 8009398:	341a      	adds	r4, #26
 800939a:	42b5      	cmp	r5, r6
 800939c:	d11a      	bne.n	80093d4 <_printf_common+0xc8>
 800939e:	2000      	movs	r0, #0
 80093a0:	e008      	b.n	80093b4 <_printf_common+0xa8>
 80093a2:	2301      	movs	r3, #1
 80093a4:	4652      	mov	r2, sl
 80093a6:	4641      	mov	r1, r8
 80093a8:	4638      	mov	r0, r7
 80093aa:	47c8      	blx	r9
 80093ac:	3001      	adds	r0, #1
 80093ae:	d103      	bne.n	80093b8 <_printf_common+0xac>
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295
 80093b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b8:	3501      	adds	r5, #1
 80093ba:	e7c6      	b.n	800934a <_printf_common+0x3e>
 80093bc:	18e1      	adds	r1, r4, r3
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	2030      	movs	r0, #48	@ 0x30
 80093c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093c6:	4422      	add	r2, r4
 80093c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093d0:	3302      	adds	r3, #2
 80093d2:	e7c7      	b.n	8009364 <_printf_common+0x58>
 80093d4:	2301      	movs	r3, #1
 80093d6:	4622      	mov	r2, r4
 80093d8:	4641      	mov	r1, r8
 80093da:	4638      	mov	r0, r7
 80093dc:	47c8      	blx	r9
 80093de:	3001      	adds	r0, #1
 80093e0:	d0e6      	beq.n	80093b0 <_printf_common+0xa4>
 80093e2:	3601      	adds	r6, #1
 80093e4:	e7d9      	b.n	800939a <_printf_common+0x8e>
	...

080093e8 <_printf_i>:
 80093e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093ec:	7e0f      	ldrb	r7, [r1, #24]
 80093ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093f0:	2f78      	cmp	r7, #120	@ 0x78
 80093f2:	4691      	mov	r9, r2
 80093f4:	4680      	mov	r8, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	469a      	mov	sl, r3
 80093fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093fe:	d807      	bhi.n	8009410 <_printf_i+0x28>
 8009400:	2f62      	cmp	r7, #98	@ 0x62
 8009402:	d80a      	bhi.n	800941a <_printf_i+0x32>
 8009404:	2f00      	cmp	r7, #0
 8009406:	f000 80d2 	beq.w	80095ae <_printf_i+0x1c6>
 800940a:	2f58      	cmp	r7, #88	@ 0x58
 800940c:	f000 80b9 	beq.w	8009582 <_printf_i+0x19a>
 8009410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009418:	e03a      	b.n	8009490 <_printf_i+0xa8>
 800941a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800941e:	2b15      	cmp	r3, #21
 8009420:	d8f6      	bhi.n	8009410 <_printf_i+0x28>
 8009422:	a101      	add	r1, pc, #4	@ (adr r1, 8009428 <_printf_i+0x40>)
 8009424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009428:	08009481 	.word	0x08009481
 800942c:	08009495 	.word	0x08009495
 8009430:	08009411 	.word	0x08009411
 8009434:	08009411 	.word	0x08009411
 8009438:	08009411 	.word	0x08009411
 800943c:	08009411 	.word	0x08009411
 8009440:	08009495 	.word	0x08009495
 8009444:	08009411 	.word	0x08009411
 8009448:	08009411 	.word	0x08009411
 800944c:	08009411 	.word	0x08009411
 8009450:	08009411 	.word	0x08009411
 8009454:	08009595 	.word	0x08009595
 8009458:	080094bf 	.word	0x080094bf
 800945c:	0800954f 	.word	0x0800954f
 8009460:	08009411 	.word	0x08009411
 8009464:	08009411 	.word	0x08009411
 8009468:	080095b7 	.word	0x080095b7
 800946c:	08009411 	.word	0x08009411
 8009470:	080094bf 	.word	0x080094bf
 8009474:	08009411 	.word	0x08009411
 8009478:	08009411 	.word	0x08009411
 800947c:	08009557 	.word	0x08009557
 8009480:	6833      	ldr	r3, [r6, #0]
 8009482:	1d1a      	adds	r2, r3, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6032      	str	r2, [r6, #0]
 8009488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800948c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009490:	2301      	movs	r3, #1
 8009492:	e09d      	b.n	80095d0 <_printf_i+0x1e8>
 8009494:	6833      	ldr	r3, [r6, #0]
 8009496:	6820      	ldr	r0, [r4, #0]
 8009498:	1d19      	adds	r1, r3, #4
 800949a:	6031      	str	r1, [r6, #0]
 800949c:	0606      	lsls	r6, r0, #24
 800949e:	d501      	bpl.n	80094a4 <_printf_i+0xbc>
 80094a0:	681d      	ldr	r5, [r3, #0]
 80094a2:	e003      	b.n	80094ac <_printf_i+0xc4>
 80094a4:	0645      	lsls	r5, r0, #25
 80094a6:	d5fb      	bpl.n	80094a0 <_printf_i+0xb8>
 80094a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	da03      	bge.n	80094b8 <_printf_i+0xd0>
 80094b0:	232d      	movs	r3, #45	@ 0x2d
 80094b2:	426d      	negs	r5, r5
 80094b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094b8:	4859      	ldr	r0, [pc, #356]	@ (8009620 <_printf_i+0x238>)
 80094ba:	230a      	movs	r3, #10
 80094bc:	e011      	b.n	80094e2 <_printf_i+0xfa>
 80094be:	6821      	ldr	r1, [r4, #0]
 80094c0:	6833      	ldr	r3, [r6, #0]
 80094c2:	0608      	lsls	r0, r1, #24
 80094c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80094c8:	d402      	bmi.n	80094d0 <_printf_i+0xe8>
 80094ca:	0649      	lsls	r1, r1, #25
 80094cc:	bf48      	it	mi
 80094ce:	b2ad      	uxthmi	r5, r5
 80094d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80094d2:	4853      	ldr	r0, [pc, #332]	@ (8009620 <_printf_i+0x238>)
 80094d4:	6033      	str	r3, [r6, #0]
 80094d6:	bf14      	ite	ne
 80094d8:	230a      	movne	r3, #10
 80094da:	2308      	moveq	r3, #8
 80094dc:	2100      	movs	r1, #0
 80094de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094e2:	6866      	ldr	r6, [r4, #4]
 80094e4:	60a6      	str	r6, [r4, #8]
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	bfa2      	ittt	ge
 80094ea:	6821      	ldrge	r1, [r4, #0]
 80094ec:	f021 0104 	bicge.w	r1, r1, #4
 80094f0:	6021      	strge	r1, [r4, #0]
 80094f2:	b90d      	cbnz	r5, 80094f8 <_printf_i+0x110>
 80094f4:	2e00      	cmp	r6, #0
 80094f6:	d04b      	beq.n	8009590 <_printf_i+0x1a8>
 80094f8:	4616      	mov	r6, r2
 80094fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80094fe:	fb03 5711 	mls	r7, r3, r1, r5
 8009502:	5dc7      	ldrb	r7, [r0, r7]
 8009504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009508:	462f      	mov	r7, r5
 800950a:	42bb      	cmp	r3, r7
 800950c:	460d      	mov	r5, r1
 800950e:	d9f4      	bls.n	80094fa <_printf_i+0x112>
 8009510:	2b08      	cmp	r3, #8
 8009512:	d10b      	bne.n	800952c <_printf_i+0x144>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	07df      	lsls	r7, r3, #31
 8009518:	d508      	bpl.n	800952c <_printf_i+0x144>
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	6861      	ldr	r1, [r4, #4]
 800951e:	4299      	cmp	r1, r3
 8009520:	bfde      	ittt	le
 8009522:	2330      	movle	r3, #48	@ 0x30
 8009524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800952c:	1b92      	subs	r2, r2, r6
 800952e:	6122      	str	r2, [r4, #16]
 8009530:	f8cd a000 	str.w	sl, [sp]
 8009534:	464b      	mov	r3, r9
 8009536:	aa03      	add	r2, sp, #12
 8009538:	4621      	mov	r1, r4
 800953a:	4640      	mov	r0, r8
 800953c:	f7ff fee6 	bl	800930c <_printf_common>
 8009540:	3001      	adds	r0, #1
 8009542:	d14a      	bne.n	80095da <_printf_i+0x1f2>
 8009544:	f04f 30ff 	mov.w	r0, #4294967295
 8009548:	b004      	add	sp, #16
 800954a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	f043 0320 	orr.w	r3, r3, #32
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	4833      	ldr	r0, [pc, #204]	@ (8009624 <_printf_i+0x23c>)
 8009558:	2778      	movs	r7, #120	@ 0x78
 800955a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	6831      	ldr	r1, [r6, #0]
 8009562:	061f      	lsls	r7, r3, #24
 8009564:	f851 5b04 	ldr.w	r5, [r1], #4
 8009568:	d402      	bmi.n	8009570 <_printf_i+0x188>
 800956a:	065f      	lsls	r7, r3, #25
 800956c:	bf48      	it	mi
 800956e:	b2ad      	uxthmi	r5, r5
 8009570:	6031      	str	r1, [r6, #0]
 8009572:	07d9      	lsls	r1, r3, #31
 8009574:	bf44      	itt	mi
 8009576:	f043 0320 	orrmi.w	r3, r3, #32
 800957a:	6023      	strmi	r3, [r4, #0]
 800957c:	b11d      	cbz	r5, 8009586 <_printf_i+0x19e>
 800957e:	2310      	movs	r3, #16
 8009580:	e7ac      	b.n	80094dc <_printf_i+0xf4>
 8009582:	4827      	ldr	r0, [pc, #156]	@ (8009620 <_printf_i+0x238>)
 8009584:	e7e9      	b.n	800955a <_printf_i+0x172>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	f023 0320 	bic.w	r3, r3, #32
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	e7f6      	b.n	800957e <_printf_i+0x196>
 8009590:	4616      	mov	r6, r2
 8009592:	e7bd      	b.n	8009510 <_printf_i+0x128>
 8009594:	6833      	ldr	r3, [r6, #0]
 8009596:	6825      	ldr	r5, [r4, #0]
 8009598:	6961      	ldr	r1, [r4, #20]
 800959a:	1d18      	adds	r0, r3, #4
 800959c:	6030      	str	r0, [r6, #0]
 800959e:	062e      	lsls	r6, r5, #24
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	d501      	bpl.n	80095a8 <_printf_i+0x1c0>
 80095a4:	6019      	str	r1, [r3, #0]
 80095a6:	e002      	b.n	80095ae <_printf_i+0x1c6>
 80095a8:	0668      	lsls	r0, r5, #25
 80095aa:	d5fb      	bpl.n	80095a4 <_printf_i+0x1bc>
 80095ac:	8019      	strh	r1, [r3, #0]
 80095ae:	2300      	movs	r3, #0
 80095b0:	6123      	str	r3, [r4, #16]
 80095b2:	4616      	mov	r6, r2
 80095b4:	e7bc      	b.n	8009530 <_printf_i+0x148>
 80095b6:	6833      	ldr	r3, [r6, #0]
 80095b8:	1d1a      	adds	r2, r3, #4
 80095ba:	6032      	str	r2, [r6, #0]
 80095bc:	681e      	ldr	r6, [r3, #0]
 80095be:	6862      	ldr	r2, [r4, #4]
 80095c0:	2100      	movs	r1, #0
 80095c2:	4630      	mov	r0, r6
 80095c4:	f7f6 fe24 	bl	8000210 <memchr>
 80095c8:	b108      	cbz	r0, 80095ce <_printf_i+0x1e6>
 80095ca:	1b80      	subs	r0, r0, r6
 80095cc:	6060      	str	r0, [r4, #4]
 80095ce:	6863      	ldr	r3, [r4, #4]
 80095d0:	6123      	str	r3, [r4, #16]
 80095d2:	2300      	movs	r3, #0
 80095d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095d8:	e7aa      	b.n	8009530 <_printf_i+0x148>
 80095da:	6923      	ldr	r3, [r4, #16]
 80095dc:	4632      	mov	r2, r6
 80095de:	4649      	mov	r1, r9
 80095e0:	4640      	mov	r0, r8
 80095e2:	47d0      	blx	sl
 80095e4:	3001      	adds	r0, #1
 80095e6:	d0ad      	beq.n	8009544 <_printf_i+0x15c>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	079b      	lsls	r3, r3, #30
 80095ec:	d413      	bmi.n	8009616 <_printf_i+0x22e>
 80095ee:	68e0      	ldr	r0, [r4, #12]
 80095f0:	9b03      	ldr	r3, [sp, #12]
 80095f2:	4298      	cmp	r0, r3
 80095f4:	bfb8      	it	lt
 80095f6:	4618      	movlt	r0, r3
 80095f8:	e7a6      	b.n	8009548 <_printf_i+0x160>
 80095fa:	2301      	movs	r3, #1
 80095fc:	4632      	mov	r2, r6
 80095fe:	4649      	mov	r1, r9
 8009600:	4640      	mov	r0, r8
 8009602:	47d0      	blx	sl
 8009604:	3001      	adds	r0, #1
 8009606:	d09d      	beq.n	8009544 <_printf_i+0x15c>
 8009608:	3501      	adds	r5, #1
 800960a:	68e3      	ldr	r3, [r4, #12]
 800960c:	9903      	ldr	r1, [sp, #12]
 800960e:	1a5b      	subs	r3, r3, r1
 8009610:	42ab      	cmp	r3, r5
 8009612:	dcf2      	bgt.n	80095fa <_printf_i+0x212>
 8009614:	e7eb      	b.n	80095ee <_printf_i+0x206>
 8009616:	2500      	movs	r5, #0
 8009618:	f104 0619 	add.w	r6, r4, #25
 800961c:	e7f5      	b.n	800960a <_printf_i+0x222>
 800961e:	bf00      	nop
 8009620:	0800dde3 	.word	0x0800dde3
 8009624:	0800ddf4 	.word	0x0800ddf4

08009628 <_scanf_float>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	b087      	sub	sp, #28
 800962e:	4617      	mov	r7, r2
 8009630:	9303      	str	r3, [sp, #12]
 8009632:	688b      	ldr	r3, [r1, #8]
 8009634:	1e5a      	subs	r2, r3, #1
 8009636:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800963a:	bf81      	itttt	hi
 800963c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009640:	eb03 0b05 	addhi.w	fp, r3, r5
 8009644:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009648:	608b      	strhi	r3, [r1, #8]
 800964a:	680b      	ldr	r3, [r1, #0]
 800964c:	460a      	mov	r2, r1
 800964e:	f04f 0500 	mov.w	r5, #0
 8009652:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009656:	f842 3b1c 	str.w	r3, [r2], #28
 800965a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800965e:	4680      	mov	r8, r0
 8009660:	460c      	mov	r4, r1
 8009662:	bf98      	it	ls
 8009664:	f04f 0b00 	movls.w	fp, #0
 8009668:	9201      	str	r2, [sp, #4]
 800966a:	4616      	mov	r6, r2
 800966c:	46aa      	mov	sl, r5
 800966e:	46a9      	mov	r9, r5
 8009670:	9502      	str	r5, [sp, #8]
 8009672:	68a2      	ldr	r2, [r4, #8]
 8009674:	b152      	cbz	r2, 800968c <_scanf_float+0x64>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b4e      	cmp	r3, #78	@ 0x4e
 800967c:	d864      	bhi.n	8009748 <_scanf_float+0x120>
 800967e:	2b40      	cmp	r3, #64	@ 0x40
 8009680:	d83c      	bhi.n	80096fc <_scanf_float+0xd4>
 8009682:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009686:	b2c8      	uxtb	r0, r1
 8009688:	280e      	cmp	r0, #14
 800968a:	d93a      	bls.n	8009702 <_scanf_float+0xda>
 800968c:	f1b9 0f00 	cmp.w	r9, #0
 8009690:	d003      	beq.n	800969a <_scanf_float+0x72>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800969e:	f1ba 0f01 	cmp.w	sl, #1
 80096a2:	f200 8117 	bhi.w	80098d4 <_scanf_float+0x2ac>
 80096a6:	9b01      	ldr	r3, [sp, #4]
 80096a8:	429e      	cmp	r6, r3
 80096aa:	f200 8108 	bhi.w	80098be <_scanf_float+0x296>
 80096ae:	2001      	movs	r0, #1
 80096b0:	b007      	add	sp, #28
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80096ba:	2a0d      	cmp	r2, #13
 80096bc:	d8e6      	bhi.n	800968c <_scanf_float+0x64>
 80096be:	a101      	add	r1, pc, #4	@ (adr r1, 80096c4 <_scanf_float+0x9c>)
 80096c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096c4:	0800980b 	.word	0x0800980b
 80096c8:	0800968d 	.word	0x0800968d
 80096cc:	0800968d 	.word	0x0800968d
 80096d0:	0800968d 	.word	0x0800968d
 80096d4:	0800986b 	.word	0x0800986b
 80096d8:	08009843 	.word	0x08009843
 80096dc:	0800968d 	.word	0x0800968d
 80096e0:	0800968d 	.word	0x0800968d
 80096e4:	08009819 	.word	0x08009819
 80096e8:	0800968d 	.word	0x0800968d
 80096ec:	0800968d 	.word	0x0800968d
 80096f0:	0800968d 	.word	0x0800968d
 80096f4:	0800968d 	.word	0x0800968d
 80096f8:	080097d1 	.word	0x080097d1
 80096fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009700:	e7db      	b.n	80096ba <_scanf_float+0x92>
 8009702:	290e      	cmp	r1, #14
 8009704:	d8c2      	bhi.n	800968c <_scanf_float+0x64>
 8009706:	a001      	add	r0, pc, #4	@ (adr r0, 800970c <_scanf_float+0xe4>)
 8009708:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800970c:	080097c1 	.word	0x080097c1
 8009710:	0800968d 	.word	0x0800968d
 8009714:	080097c1 	.word	0x080097c1
 8009718:	08009857 	.word	0x08009857
 800971c:	0800968d 	.word	0x0800968d
 8009720:	08009769 	.word	0x08009769
 8009724:	080097a7 	.word	0x080097a7
 8009728:	080097a7 	.word	0x080097a7
 800972c:	080097a7 	.word	0x080097a7
 8009730:	080097a7 	.word	0x080097a7
 8009734:	080097a7 	.word	0x080097a7
 8009738:	080097a7 	.word	0x080097a7
 800973c:	080097a7 	.word	0x080097a7
 8009740:	080097a7 	.word	0x080097a7
 8009744:	080097a7 	.word	0x080097a7
 8009748:	2b6e      	cmp	r3, #110	@ 0x6e
 800974a:	d809      	bhi.n	8009760 <_scanf_float+0x138>
 800974c:	2b60      	cmp	r3, #96	@ 0x60
 800974e:	d8b2      	bhi.n	80096b6 <_scanf_float+0x8e>
 8009750:	2b54      	cmp	r3, #84	@ 0x54
 8009752:	d07b      	beq.n	800984c <_scanf_float+0x224>
 8009754:	2b59      	cmp	r3, #89	@ 0x59
 8009756:	d199      	bne.n	800968c <_scanf_float+0x64>
 8009758:	2d07      	cmp	r5, #7
 800975a:	d197      	bne.n	800968c <_scanf_float+0x64>
 800975c:	2508      	movs	r5, #8
 800975e:	e02c      	b.n	80097ba <_scanf_float+0x192>
 8009760:	2b74      	cmp	r3, #116	@ 0x74
 8009762:	d073      	beq.n	800984c <_scanf_float+0x224>
 8009764:	2b79      	cmp	r3, #121	@ 0x79
 8009766:	e7f6      	b.n	8009756 <_scanf_float+0x12e>
 8009768:	6821      	ldr	r1, [r4, #0]
 800976a:	05c8      	lsls	r0, r1, #23
 800976c:	d51b      	bpl.n	80097a6 <_scanf_float+0x17e>
 800976e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009772:	6021      	str	r1, [r4, #0]
 8009774:	f109 0901 	add.w	r9, r9, #1
 8009778:	f1bb 0f00 	cmp.w	fp, #0
 800977c:	d003      	beq.n	8009786 <_scanf_float+0x15e>
 800977e:	3201      	adds	r2, #1
 8009780:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009784:	60a2      	str	r2, [r4, #8]
 8009786:	68a3      	ldr	r3, [r4, #8]
 8009788:	3b01      	subs	r3, #1
 800978a:	60a3      	str	r3, [r4, #8]
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	3301      	adds	r3, #1
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3b01      	subs	r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	607b      	str	r3, [r7, #4]
 800979a:	f340 8087 	ble.w	80098ac <_scanf_float+0x284>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	e765      	b.n	8009672 <_scanf_float+0x4a>
 80097a6:	eb1a 0105 	adds.w	r1, sl, r5
 80097aa:	f47f af6f 	bne.w	800968c <_scanf_float+0x64>
 80097ae:	6822      	ldr	r2, [r4, #0]
 80097b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80097b4:	6022      	str	r2, [r4, #0]
 80097b6:	460d      	mov	r5, r1
 80097b8:	468a      	mov	sl, r1
 80097ba:	f806 3b01 	strb.w	r3, [r6], #1
 80097be:	e7e2      	b.n	8009786 <_scanf_float+0x15e>
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	0610      	lsls	r0, r2, #24
 80097c4:	f57f af62 	bpl.w	800968c <_scanf_float+0x64>
 80097c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	e7f4      	b.n	80097ba <_scanf_float+0x192>
 80097d0:	f1ba 0f00 	cmp.w	sl, #0
 80097d4:	d10e      	bne.n	80097f4 <_scanf_float+0x1cc>
 80097d6:	f1b9 0f00 	cmp.w	r9, #0
 80097da:	d10e      	bne.n	80097fa <_scanf_float+0x1d2>
 80097dc:	6822      	ldr	r2, [r4, #0]
 80097de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80097e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80097e6:	d108      	bne.n	80097fa <_scanf_float+0x1d2>
 80097e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80097ec:	6022      	str	r2, [r4, #0]
 80097ee:	f04f 0a01 	mov.w	sl, #1
 80097f2:	e7e2      	b.n	80097ba <_scanf_float+0x192>
 80097f4:	f1ba 0f02 	cmp.w	sl, #2
 80097f8:	d055      	beq.n	80098a6 <_scanf_float+0x27e>
 80097fa:	2d01      	cmp	r5, #1
 80097fc:	d002      	beq.n	8009804 <_scanf_float+0x1dc>
 80097fe:	2d04      	cmp	r5, #4
 8009800:	f47f af44 	bne.w	800968c <_scanf_float+0x64>
 8009804:	3501      	adds	r5, #1
 8009806:	b2ed      	uxtb	r5, r5
 8009808:	e7d7      	b.n	80097ba <_scanf_float+0x192>
 800980a:	f1ba 0f01 	cmp.w	sl, #1
 800980e:	f47f af3d 	bne.w	800968c <_scanf_float+0x64>
 8009812:	f04f 0a02 	mov.w	sl, #2
 8009816:	e7d0      	b.n	80097ba <_scanf_float+0x192>
 8009818:	b97d      	cbnz	r5, 800983a <_scanf_float+0x212>
 800981a:	f1b9 0f00 	cmp.w	r9, #0
 800981e:	f47f af38 	bne.w	8009692 <_scanf_float+0x6a>
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009828:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800982c:	f040 8108 	bne.w	8009a40 <_scanf_float+0x418>
 8009830:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009834:	6022      	str	r2, [r4, #0]
 8009836:	2501      	movs	r5, #1
 8009838:	e7bf      	b.n	80097ba <_scanf_float+0x192>
 800983a:	2d03      	cmp	r5, #3
 800983c:	d0e2      	beq.n	8009804 <_scanf_float+0x1dc>
 800983e:	2d05      	cmp	r5, #5
 8009840:	e7de      	b.n	8009800 <_scanf_float+0x1d8>
 8009842:	2d02      	cmp	r5, #2
 8009844:	f47f af22 	bne.w	800968c <_scanf_float+0x64>
 8009848:	2503      	movs	r5, #3
 800984a:	e7b6      	b.n	80097ba <_scanf_float+0x192>
 800984c:	2d06      	cmp	r5, #6
 800984e:	f47f af1d 	bne.w	800968c <_scanf_float+0x64>
 8009852:	2507      	movs	r5, #7
 8009854:	e7b1      	b.n	80097ba <_scanf_float+0x192>
 8009856:	6822      	ldr	r2, [r4, #0]
 8009858:	0591      	lsls	r1, r2, #22
 800985a:	f57f af17 	bpl.w	800968c <_scanf_float+0x64>
 800985e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009862:	6022      	str	r2, [r4, #0]
 8009864:	f8cd 9008 	str.w	r9, [sp, #8]
 8009868:	e7a7      	b.n	80097ba <_scanf_float+0x192>
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009870:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009874:	d006      	beq.n	8009884 <_scanf_float+0x25c>
 8009876:	0550      	lsls	r0, r2, #21
 8009878:	f57f af08 	bpl.w	800968c <_scanf_float+0x64>
 800987c:	f1b9 0f00 	cmp.w	r9, #0
 8009880:	f000 80de 	beq.w	8009a40 <_scanf_float+0x418>
 8009884:	0591      	lsls	r1, r2, #22
 8009886:	bf58      	it	pl
 8009888:	9902      	ldrpl	r1, [sp, #8]
 800988a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800988e:	bf58      	it	pl
 8009890:	eba9 0101 	subpl.w	r1, r9, r1
 8009894:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009898:	bf58      	it	pl
 800989a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800989e:	6022      	str	r2, [r4, #0]
 80098a0:	f04f 0900 	mov.w	r9, #0
 80098a4:	e789      	b.n	80097ba <_scanf_float+0x192>
 80098a6:	f04f 0a03 	mov.w	sl, #3
 80098aa:	e786      	b.n	80097ba <_scanf_float+0x192>
 80098ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80098b0:	4639      	mov	r1, r7
 80098b2:	4640      	mov	r0, r8
 80098b4:	4798      	blx	r3
 80098b6:	2800      	cmp	r0, #0
 80098b8:	f43f aedb 	beq.w	8009672 <_scanf_float+0x4a>
 80098bc:	e6e6      	b.n	800968c <_scanf_float+0x64>
 80098be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098c6:	463a      	mov	r2, r7
 80098c8:	4640      	mov	r0, r8
 80098ca:	4798      	blx	r3
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	e6e8      	b.n	80096a6 <_scanf_float+0x7e>
 80098d4:	1e6b      	subs	r3, r5, #1
 80098d6:	2b06      	cmp	r3, #6
 80098d8:	d824      	bhi.n	8009924 <_scanf_float+0x2fc>
 80098da:	2d02      	cmp	r5, #2
 80098dc:	d836      	bhi.n	800994c <_scanf_float+0x324>
 80098de:	9b01      	ldr	r3, [sp, #4]
 80098e0:	429e      	cmp	r6, r3
 80098e2:	f67f aee4 	bls.w	80096ae <_scanf_float+0x86>
 80098e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098ee:	463a      	mov	r2, r7
 80098f0:	4640      	mov	r0, r8
 80098f2:	4798      	blx	r3
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	6123      	str	r3, [r4, #16]
 80098fa:	e7f0      	b.n	80098de <_scanf_float+0x2b6>
 80098fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009900:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009904:	463a      	mov	r2, r7
 8009906:	4640      	mov	r0, r8
 8009908:	4798      	blx	r3
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	3b01      	subs	r3, #1
 800990e:	6123      	str	r3, [r4, #16]
 8009910:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009914:	fa5f fa8a 	uxtb.w	sl, sl
 8009918:	f1ba 0f02 	cmp.w	sl, #2
 800991c:	d1ee      	bne.n	80098fc <_scanf_float+0x2d4>
 800991e:	3d03      	subs	r5, #3
 8009920:	b2ed      	uxtb	r5, r5
 8009922:	1b76      	subs	r6, r6, r5
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	05da      	lsls	r2, r3, #23
 8009928:	d530      	bpl.n	800998c <_scanf_float+0x364>
 800992a:	055b      	lsls	r3, r3, #21
 800992c:	d511      	bpl.n	8009952 <_scanf_float+0x32a>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	429e      	cmp	r6, r3
 8009932:	f67f aebc 	bls.w	80096ae <_scanf_float+0x86>
 8009936:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800993a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800993e:	463a      	mov	r2, r7
 8009940:	4640      	mov	r0, r8
 8009942:	4798      	blx	r3
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	3b01      	subs	r3, #1
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	e7f0      	b.n	800992e <_scanf_float+0x306>
 800994c:	46aa      	mov	sl, r5
 800994e:	46b3      	mov	fp, r6
 8009950:	e7de      	b.n	8009910 <_scanf_float+0x2e8>
 8009952:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	2965      	cmp	r1, #101	@ 0x65
 800995a:	f103 33ff 	add.w	r3, r3, #4294967295
 800995e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	d00c      	beq.n	8009980 <_scanf_float+0x358>
 8009966:	2945      	cmp	r1, #69	@ 0x45
 8009968:	d00a      	beq.n	8009980 <_scanf_float+0x358>
 800996a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800996e:	463a      	mov	r2, r7
 8009970:	4640      	mov	r0, r8
 8009972:	4798      	blx	r3
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800997a:	3b01      	subs	r3, #1
 800997c:	1eb5      	subs	r5, r6, #2
 800997e:	6123      	str	r3, [r4, #16]
 8009980:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009984:	463a      	mov	r2, r7
 8009986:	4640      	mov	r0, r8
 8009988:	4798      	blx	r3
 800998a:	462e      	mov	r6, r5
 800998c:	6822      	ldr	r2, [r4, #0]
 800998e:	f012 0210 	ands.w	r2, r2, #16
 8009992:	d001      	beq.n	8009998 <_scanf_float+0x370>
 8009994:	2000      	movs	r0, #0
 8009996:	e68b      	b.n	80096b0 <_scanf_float+0x88>
 8009998:	7032      	strb	r2, [r6, #0]
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80099a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099a4:	d11c      	bne.n	80099e0 <_scanf_float+0x3b8>
 80099a6:	9b02      	ldr	r3, [sp, #8]
 80099a8:	454b      	cmp	r3, r9
 80099aa:	eba3 0209 	sub.w	r2, r3, r9
 80099ae:	d123      	bne.n	80099f8 <_scanf_float+0x3d0>
 80099b0:	9901      	ldr	r1, [sp, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	4640      	mov	r0, r8
 80099b6:	f002 fe5f 	bl	800c678 <_strtod_r>
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	6821      	ldr	r1, [r4, #0]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f011 0f02 	tst.w	r1, #2
 80099c4:	ec57 6b10 	vmov	r6, r7, d0
 80099c8:	f103 0204 	add.w	r2, r3, #4
 80099cc:	d01f      	beq.n	8009a0e <_scanf_float+0x3e6>
 80099ce:	9903      	ldr	r1, [sp, #12]
 80099d0:	600a      	str	r2, [r1, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	e9c3 6700 	strd	r6, r7, [r3]
 80099d8:	68e3      	ldr	r3, [r4, #12]
 80099da:	3301      	adds	r3, #1
 80099dc:	60e3      	str	r3, [r4, #12]
 80099de:	e7d9      	b.n	8009994 <_scanf_float+0x36c>
 80099e0:	9b04      	ldr	r3, [sp, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0e4      	beq.n	80099b0 <_scanf_float+0x388>
 80099e6:	9905      	ldr	r1, [sp, #20]
 80099e8:	230a      	movs	r3, #10
 80099ea:	3101      	adds	r1, #1
 80099ec:	4640      	mov	r0, r8
 80099ee:	f7ff f9b7 	bl	8008d60 <_strtol_r>
 80099f2:	9b04      	ldr	r3, [sp, #16]
 80099f4:	9e05      	ldr	r6, [sp, #20]
 80099f6:	1ac2      	subs	r2, r0, r3
 80099f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80099fc:	429e      	cmp	r6, r3
 80099fe:	bf28      	it	cs
 8009a00:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009a04:	4910      	ldr	r1, [pc, #64]	@ (8009a48 <_scanf_float+0x420>)
 8009a06:	4630      	mov	r0, r6
 8009a08:	f000 fa3c 	bl	8009e84 <siprintf>
 8009a0c:	e7d0      	b.n	80099b0 <_scanf_float+0x388>
 8009a0e:	f011 0f04 	tst.w	r1, #4
 8009a12:	9903      	ldr	r1, [sp, #12]
 8009a14:	600a      	str	r2, [r1, #0]
 8009a16:	d1dc      	bne.n	80099d2 <_scanf_float+0x3aa>
 8009a18:	681d      	ldr	r5, [r3, #0]
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	463b      	mov	r3, r7
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	f7f7 f8a3 	bl	8000b6c <__aeabi_dcmpun>
 8009a26:	b128      	cbz	r0, 8009a34 <_scanf_float+0x40c>
 8009a28:	4808      	ldr	r0, [pc, #32]	@ (8009a4c <_scanf_float+0x424>)
 8009a2a:	f000 fbff 	bl	800a22c <nanf>
 8009a2e:	ed85 0a00 	vstr	s0, [r5]
 8009a32:	e7d1      	b.n	80099d8 <_scanf_float+0x3b0>
 8009a34:	4630      	mov	r0, r6
 8009a36:	4639      	mov	r1, r7
 8009a38:	f7f7 f8f6 	bl	8000c28 <__aeabi_d2f>
 8009a3c:	6028      	str	r0, [r5, #0]
 8009a3e:	e7cb      	b.n	80099d8 <_scanf_float+0x3b0>
 8009a40:	f04f 0900 	mov.w	r9, #0
 8009a44:	e629      	b.n	800969a <_scanf_float+0x72>
 8009a46:	bf00      	nop
 8009a48:	0800de05 	.word	0x0800de05
 8009a4c:	0800deb6 	.word	0x0800deb6

08009a50 <std>:
 8009a50:	2300      	movs	r3, #0
 8009a52:	b510      	push	{r4, lr}
 8009a54:	4604      	mov	r4, r0
 8009a56:	e9c0 3300 	strd	r3, r3, [r0]
 8009a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a5e:	6083      	str	r3, [r0, #8]
 8009a60:	8181      	strh	r1, [r0, #12]
 8009a62:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a64:	81c2      	strh	r2, [r0, #14]
 8009a66:	6183      	str	r3, [r0, #24]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	2208      	movs	r2, #8
 8009a6c:	305c      	adds	r0, #92	@ 0x5c
 8009a6e:	f000 fb01 	bl	800a074 <memset>
 8009a72:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa8 <std+0x58>)
 8009a74:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a76:	4b0d      	ldr	r3, [pc, #52]	@ (8009aac <std+0x5c>)
 8009a78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab0 <std+0x60>)
 8009a7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab4 <std+0x64>)
 8009a80:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a82:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab8 <std+0x68>)
 8009a84:	6224      	str	r4, [r4, #32]
 8009a86:	429c      	cmp	r4, r3
 8009a88:	d006      	beq.n	8009a98 <std+0x48>
 8009a8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a8e:	4294      	cmp	r4, r2
 8009a90:	d002      	beq.n	8009a98 <std+0x48>
 8009a92:	33d0      	adds	r3, #208	@ 0xd0
 8009a94:	429c      	cmp	r4, r3
 8009a96:	d105      	bne.n	8009aa4 <std+0x54>
 8009a98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa0:	f000 bbc0 	b.w	800a224 <__retarget_lock_init_recursive>
 8009aa4:	bd10      	pop	{r4, pc}
 8009aa6:	bf00      	nop
 8009aa8:	08009ec5 	.word	0x08009ec5
 8009aac:	08009ee7 	.word	0x08009ee7
 8009ab0:	08009f1f 	.word	0x08009f1f
 8009ab4:	08009f43 	.word	0x08009f43
 8009ab8:	20000e4c 	.word	0x20000e4c

08009abc <stdio_exit_handler>:
 8009abc:	4a02      	ldr	r2, [pc, #8]	@ (8009ac8 <stdio_exit_handler+0xc>)
 8009abe:	4903      	ldr	r1, [pc, #12]	@ (8009acc <stdio_exit_handler+0x10>)
 8009ac0:	4803      	ldr	r0, [pc, #12]	@ (8009ad0 <stdio_exit_handler+0x14>)
 8009ac2:	f000 b869 	b.w	8009b98 <_fwalk_sglue>
 8009ac6:	bf00      	nop
 8009ac8:	2000002c 	.word	0x2000002c
 8009acc:	0800ccc1 	.word	0x0800ccc1
 8009ad0:	2000003c 	.word	0x2000003c

08009ad4 <cleanup_stdio>:
 8009ad4:	6841      	ldr	r1, [r0, #4]
 8009ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8009b08 <cleanup_stdio+0x34>)
 8009ad8:	4299      	cmp	r1, r3
 8009ada:	b510      	push	{r4, lr}
 8009adc:	4604      	mov	r4, r0
 8009ade:	d001      	beq.n	8009ae4 <cleanup_stdio+0x10>
 8009ae0:	f003 f8ee 	bl	800ccc0 <_fflush_r>
 8009ae4:	68a1      	ldr	r1, [r4, #8]
 8009ae6:	4b09      	ldr	r3, [pc, #36]	@ (8009b0c <cleanup_stdio+0x38>)
 8009ae8:	4299      	cmp	r1, r3
 8009aea:	d002      	beq.n	8009af2 <cleanup_stdio+0x1e>
 8009aec:	4620      	mov	r0, r4
 8009aee:	f003 f8e7 	bl	800ccc0 <_fflush_r>
 8009af2:	68e1      	ldr	r1, [r4, #12]
 8009af4:	4b06      	ldr	r3, [pc, #24]	@ (8009b10 <cleanup_stdio+0x3c>)
 8009af6:	4299      	cmp	r1, r3
 8009af8:	d004      	beq.n	8009b04 <cleanup_stdio+0x30>
 8009afa:	4620      	mov	r0, r4
 8009afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b00:	f003 b8de 	b.w	800ccc0 <_fflush_r>
 8009b04:	bd10      	pop	{r4, pc}
 8009b06:	bf00      	nop
 8009b08:	20000e4c 	.word	0x20000e4c
 8009b0c:	20000eb4 	.word	0x20000eb4
 8009b10:	20000f1c 	.word	0x20000f1c

08009b14 <global_stdio_init.part.0>:
 8009b14:	b510      	push	{r4, lr}
 8009b16:	4b0b      	ldr	r3, [pc, #44]	@ (8009b44 <global_stdio_init.part.0+0x30>)
 8009b18:	4c0b      	ldr	r4, [pc, #44]	@ (8009b48 <global_stdio_init.part.0+0x34>)
 8009b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8009b4c <global_stdio_init.part.0+0x38>)
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	2200      	movs	r2, #0
 8009b22:	2104      	movs	r1, #4
 8009b24:	f7ff ff94 	bl	8009a50 <std>
 8009b28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	2109      	movs	r1, #9
 8009b30:	f7ff ff8e 	bl	8009a50 <std>
 8009b34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b38:	2202      	movs	r2, #2
 8009b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3e:	2112      	movs	r1, #18
 8009b40:	f7ff bf86 	b.w	8009a50 <std>
 8009b44:	20000f84 	.word	0x20000f84
 8009b48:	20000e4c 	.word	0x20000e4c
 8009b4c:	08009abd 	.word	0x08009abd

08009b50 <__sfp_lock_acquire>:
 8009b50:	4801      	ldr	r0, [pc, #4]	@ (8009b58 <__sfp_lock_acquire+0x8>)
 8009b52:	f000 bb68 	b.w	800a226 <__retarget_lock_acquire_recursive>
 8009b56:	bf00      	nop
 8009b58:	20000f8d 	.word	0x20000f8d

08009b5c <__sfp_lock_release>:
 8009b5c:	4801      	ldr	r0, [pc, #4]	@ (8009b64 <__sfp_lock_release+0x8>)
 8009b5e:	f000 bb63 	b.w	800a228 <__retarget_lock_release_recursive>
 8009b62:	bf00      	nop
 8009b64:	20000f8d 	.word	0x20000f8d

08009b68 <__sinit>:
 8009b68:	b510      	push	{r4, lr}
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	f7ff fff0 	bl	8009b50 <__sfp_lock_acquire>
 8009b70:	6a23      	ldr	r3, [r4, #32]
 8009b72:	b11b      	cbz	r3, 8009b7c <__sinit+0x14>
 8009b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b78:	f7ff bff0 	b.w	8009b5c <__sfp_lock_release>
 8009b7c:	4b04      	ldr	r3, [pc, #16]	@ (8009b90 <__sinit+0x28>)
 8009b7e:	6223      	str	r3, [r4, #32]
 8009b80:	4b04      	ldr	r3, [pc, #16]	@ (8009b94 <__sinit+0x2c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1f5      	bne.n	8009b74 <__sinit+0xc>
 8009b88:	f7ff ffc4 	bl	8009b14 <global_stdio_init.part.0>
 8009b8c:	e7f2      	b.n	8009b74 <__sinit+0xc>
 8009b8e:	bf00      	nop
 8009b90:	08009ad5 	.word	0x08009ad5
 8009b94:	20000f84 	.word	0x20000f84

08009b98 <_fwalk_sglue>:
 8009b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	4688      	mov	r8, r1
 8009ba0:	4614      	mov	r4, r2
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8009bac:	d505      	bpl.n	8009bba <_fwalk_sglue+0x22>
 8009bae:	6824      	ldr	r4, [r4, #0]
 8009bb0:	2c00      	cmp	r4, #0
 8009bb2:	d1f7      	bne.n	8009ba4 <_fwalk_sglue+0xc>
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d907      	bls.n	8009bd0 <_fwalk_sglue+0x38>
 8009bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	d003      	beq.n	8009bd0 <_fwalk_sglue+0x38>
 8009bc8:	4629      	mov	r1, r5
 8009bca:	4638      	mov	r0, r7
 8009bcc:	47c0      	blx	r8
 8009bce:	4306      	orrs	r6, r0
 8009bd0:	3568      	adds	r5, #104	@ 0x68
 8009bd2:	e7e9      	b.n	8009ba8 <_fwalk_sglue+0x10>

08009bd4 <iprintf>:
 8009bd4:	b40f      	push	{r0, r1, r2, r3}
 8009bd6:	b507      	push	{r0, r1, r2, lr}
 8009bd8:	4906      	ldr	r1, [pc, #24]	@ (8009bf4 <iprintf+0x20>)
 8009bda:	ab04      	add	r3, sp, #16
 8009bdc:	6808      	ldr	r0, [r1, #0]
 8009bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be2:	6881      	ldr	r1, [r0, #8]
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	f002 fecf 	bl	800c988 <_vfiprintf_r>
 8009bea:	b003      	add	sp, #12
 8009bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bf0:	b004      	add	sp, #16
 8009bf2:	4770      	bx	lr
 8009bf4:	20000038 	.word	0x20000038

08009bf8 <_puts_r>:
 8009bf8:	6a03      	ldr	r3, [r0, #32]
 8009bfa:	b570      	push	{r4, r5, r6, lr}
 8009bfc:	6884      	ldr	r4, [r0, #8]
 8009bfe:	4605      	mov	r5, r0
 8009c00:	460e      	mov	r6, r1
 8009c02:	b90b      	cbnz	r3, 8009c08 <_puts_r+0x10>
 8009c04:	f7ff ffb0 	bl	8009b68 <__sinit>
 8009c08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c0a:	07db      	lsls	r3, r3, #31
 8009c0c:	d405      	bmi.n	8009c1a <_puts_r+0x22>
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	0598      	lsls	r0, r3, #22
 8009c12:	d402      	bmi.n	8009c1a <_puts_r+0x22>
 8009c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c16:	f000 fb06 	bl	800a226 <__retarget_lock_acquire_recursive>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	0719      	lsls	r1, r3, #28
 8009c1e:	d502      	bpl.n	8009c26 <_puts_r+0x2e>
 8009c20:	6923      	ldr	r3, [r4, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d135      	bne.n	8009c92 <_puts_r+0x9a>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f000 f9cd 	bl	8009fc8 <__swsetup_r>
 8009c2e:	b380      	cbz	r0, 8009c92 <_puts_r+0x9a>
 8009c30:	f04f 35ff 	mov.w	r5, #4294967295
 8009c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c36:	07da      	lsls	r2, r3, #31
 8009c38:	d405      	bmi.n	8009c46 <_puts_r+0x4e>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	059b      	lsls	r3, r3, #22
 8009c3e:	d402      	bmi.n	8009c46 <_puts_r+0x4e>
 8009c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c42:	f000 faf1 	bl	800a228 <__retarget_lock_release_recursive>
 8009c46:	4628      	mov	r0, r5
 8009c48:	bd70      	pop	{r4, r5, r6, pc}
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	da04      	bge.n	8009c58 <_puts_r+0x60>
 8009c4e:	69a2      	ldr	r2, [r4, #24]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	dc17      	bgt.n	8009c84 <_puts_r+0x8c>
 8009c54:	290a      	cmp	r1, #10
 8009c56:	d015      	beq.n	8009c84 <_puts_r+0x8c>
 8009c58:	6823      	ldr	r3, [r4, #0]
 8009c5a:	1c5a      	adds	r2, r3, #1
 8009c5c:	6022      	str	r2, [r4, #0]
 8009c5e:	7019      	strb	r1, [r3, #0]
 8009c60:	68a3      	ldr	r3, [r4, #8]
 8009c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c66:	3b01      	subs	r3, #1
 8009c68:	60a3      	str	r3, [r4, #8]
 8009c6a:	2900      	cmp	r1, #0
 8009c6c:	d1ed      	bne.n	8009c4a <_puts_r+0x52>
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	da11      	bge.n	8009c96 <_puts_r+0x9e>
 8009c72:	4622      	mov	r2, r4
 8009c74:	210a      	movs	r1, #10
 8009c76:	4628      	mov	r0, r5
 8009c78:	f000 f967 	bl	8009f4a <__swbuf_r>
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d0d7      	beq.n	8009c30 <_puts_r+0x38>
 8009c80:	250a      	movs	r5, #10
 8009c82:	e7d7      	b.n	8009c34 <_puts_r+0x3c>
 8009c84:	4622      	mov	r2, r4
 8009c86:	4628      	mov	r0, r5
 8009c88:	f000 f95f 	bl	8009f4a <__swbuf_r>
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	d1e7      	bne.n	8009c60 <_puts_r+0x68>
 8009c90:	e7ce      	b.n	8009c30 <_puts_r+0x38>
 8009c92:	3e01      	subs	r6, #1
 8009c94:	e7e4      	b.n	8009c60 <_puts_r+0x68>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	6022      	str	r2, [r4, #0]
 8009c9c:	220a      	movs	r2, #10
 8009c9e:	701a      	strb	r2, [r3, #0]
 8009ca0:	e7ee      	b.n	8009c80 <_puts_r+0x88>
	...

08009ca4 <puts>:
 8009ca4:	4b02      	ldr	r3, [pc, #8]	@ (8009cb0 <puts+0xc>)
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	f7ff bfa5 	b.w	8009bf8 <_puts_r>
 8009cae:	bf00      	nop
 8009cb0:	20000038 	.word	0x20000038

08009cb4 <setvbuf>:
 8009cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cb8:	461d      	mov	r5, r3
 8009cba:	4b57      	ldr	r3, [pc, #348]	@ (8009e18 <setvbuf+0x164>)
 8009cbc:	681f      	ldr	r7, [r3, #0]
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	460e      	mov	r6, r1
 8009cc2:	4690      	mov	r8, r2
 8009cc4:	b127      	cbz	r7, 8009cd0 <setvbuf+0x1c>
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	b913      	cbnz	r3, 8009cd0 <setvbuf+0x1c>
 8009cca:	4638      	mov	r0, r7
 8009ccc:	f7ff ff4c 	bl	8009b68 <__sinit>
 8009cd0:	f1b8 0f02 	cmp.w	r8, #2
 8009cd4:	d006      	beq.n	8009ce4 <setvbuf+0x30>
 8009cd6:	f1b8 0f01 	cmp.w	r8, #1
 8009cda:	f200 809a 	bhi.w	8009e12 <setvbuf+0x15e>
 8009cde:	2d00      	cmp	r5, #0
 8009ce0:	f2c0 8097 	blt.w	8009e12 <setvbuf+0x15e>
 8009ce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ce6:	07d9      	lsls	r1, r3, #31
 8009ce8:	d405      	bmi.n	8009cf6 <setvbuf+0x42>
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	059a      	lsls	r2, r3, #22
 8009cee:	d402      	bmi.n	8009cf6 <setvbuf+0x42>
 8009cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cf2:	f000 fa98 	bl	800a226 <__retarget_lock_acquire_recursive>
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	f002 ffe1 	bl	800ccc0 <_fflush_r>
 8009cfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d00:	b141      	cbz	r1, 8009d14 <setvbuf+0x60>
 8009d02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d06:	4299      	cmp	r1, r3
 8009d08:	d002      	beq.n	8009d10 <setvbuf+0x5c>
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	f001 f900 	bl	800af10 <_free_r>
 8009d10:	2300      	movs	r3, #0
 8009d12:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d14:	2300      	movs	r3, #0
 8009d16:	61a3      	str	r3, [r4, #24]
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	061b      	lsls	r3, r3, #24
 8009d1e:	d503      	bpl.n	8009d28 <setvbuf+0x74>
 8009d20:	6921      	ldr	r1, [r4, #16]
 8009d22:	4638      	mov	r0, r7
 8009d24:	f001 f8f4 	bl	800af10 <_free_r>
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8009d2e:	f023 0303 	bic.w	r3, r3, #3
 8009d32:	f1b8 0f02 	cmp.w	r8, #2
 8009d36:	81a3      	strh	r3, [r4, #12]
 8009d38:	d061      	beq.n	8009dfe <setvbuf+0x14a>
 8009d3a:	ab01      	add	r3, sp, #4
 8009d3c:	466a      	mov	r2, sp
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4638      	mov	r0, r7
 8009d42:	f002 fff7 	bl	800cd34 <__swhatbuf_r>
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	4318      	orrs	r0, r3
 8009d4a:	81a0      	strh	r0, [r4, #12]
 8009d4c:	bb2d      	cbnz	r5, 8009d9a <setvbuf+0xe6>
 8009d4e:	9d00      	ldr	r5, [sp, #0]
 8009d50:	4628      	mov	r0, r5
 8009d52:	f001 f927 	bl	800afa4 <malloc>
 8009d56:	4606      	mov	r6, r0
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d152      	bne.n	8009e02 <setvbuf+0x14e>
 8009d5c:	f8dd 9000 	ldr.w	r9, [sp]
 8009d60:	45a9      	cmp	r9, r5
 8009d62:	d140      	bne.n	8009de6 <setvbuf+0x132>
 8009d64:	f04f 35ff 	mov.w	r5, #4294967295
 8009d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d6c:	f043 0202 	orr.w	r2, r3, #2
 8009d70:	81a2      	strh	r2, [r4, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	60a2      	str	r2, [r4, #8]
 8009d76:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009d7a:	6022      	str	r2, [r4, #0]
 8009d7c:	6122      	str	r2, [r4, #16]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	6162      	str	r2, [r4, #20]
 8009d82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d84:	07d6      	lsls	r6, r2, #31
 8009d86:	d404      	bmi.n	8009d92 <setvbuf+0xde>
 8009d88:	0598      	lsls	r0, r3, #22
 8009d8a:	d402      	bmi.n	8009d92 <setvbuf+0xde>
 8009d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d8e:	f000 fa4b 	bl	800a228 <__retarget_lock_release_recursive>
 8009d92:	4628      	mov	r0, r5
 8009d94:	b003      	add	sp, #12
 8009d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d9a:	2e00      	cmp	r6, #0
 8009d9c:	d0d8      	beq.n	8009d50 <setvbuf+0x9c>
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	b913      	cbnz	r3, 8009da8 <setvbuf+0xf4>
 8009da2:	4638      	mov	r0, r7
 8009da4:	f7ff fee0 	bl	8009b68 <__sinit>
 8009da8:	f1b8 0f01 	cmp.w	r8, #1
 8009dac:	bf08      	it	eq
 8009dae:	89a3      	ldrheq	r3, [r4, #12]
 8009db0:	6026      	str	r6, [r4, #0]
 8009db2:	bf04      	itt	eq
 8009db4:	f043 0301 	orreq.w	r3, r3, #1
 8009db8:	81a3      	strheq	r3, [r4, #12]
 8009dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dbe:	f013 0208 	ands.w	r2, r3, #8
 8009dc2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009dc6:	d01e      	beq.n	8009e06 <setvbuf+0x152>
 8009dc8:	07d9      	lsls	r1, r3, #31
 8009dca:	bf41      	itttt	mi
 8009dcc:	2200      	movmi	r2, #0
 8009dce:	426d      	negmi	r5, r5
 8009dd0:	60a2      	strmi	r2, [r4, #8]
 8009dd2:	61a5      	strmi	r5, [r4, #24]
 8009dd4:	bf58      	it	pl
 8009dd6:	60a5      	strpl	r5, [r4, #8]
 8009dd8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009dda:	07d2      	lsls	r2, r2, #31
 8009ddc:	d401      	bmi.n	8009de2 <setvbuf+0x12e>
 8009dde:	059b      	lsls	r3, r3, #22
 8009de0:	d513      	bpl.n	8009e0a <setvbuf+0x156>
 8009de2:	2500      	movs	r5, #0
 8009de4:	e7d5      	b.n	8009d92 <setvbuf+0xde>
 8009de6:	4648      	mov	r0, r9
 8009de8:	f001 f8dc 	bl	800afa4 <malloc>
 8009dec:	4606      	mov	r6, r0
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d0b8      	beq.n	8009d64 <setvbuf+0xb0>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	464d      	mov	r5, r9
 8009dfc:	e7cf      	b.n	8009d9e <setvbuf+0xea>
 8009dfe:	2500      	movs	r5, #0
 8009e00:	e7b2      	b.n	8009d68 <setvbuf+0xb4>
 8009e02:	46a9      	mov	r9, r5
 8009e04:	e7f5      	b.n	8009df2 <setvbuf+0x13e>
 8009e06:	60a2      	str	r2, [r4, #8]
 8009e08:	e7e6      	b.n	8009dd8 <setvbuf+0x124>
 8009e0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e0c:	f000 fa0c 	bl	800a228 <__retarget_lock_release_recursive>
 8009e10:	e7e7      	b.n	8009de2 <setvbuf+0x12e>
 8009e12:	f04f 35ff 	mov.w	r5, #4294967295
 8009e16:	e7bc      	b.n	8009d92 <setvbuf+0xde>
 8009e18:	20000038 	.word	0x20000038

08009e1c <sniprintf>:
 8009e1c:	b40c      	push	{r2, r3}
 8009e1e:	b530      	push	{r4, r5, lr}
 8009e20:	4b17      	ldr	r3, [pc, #92]	@ (8009e80 <sniprintf+0x64>)
 8009e22:	1e0c      	subs	r4, r1, #0
 8009e24:	681d      	ldr	r5, [r3, #0]
 8009e26:	b09d      	sub	sp, #116	@ 0x74
 8009e28:	da08      	bge.n	8009e3c <sniprintf+0x20>
 8009e2a:	238b      	movs	r3, #139	@ 0x8b
 8009e2c:	602b      	str	r3, [r5, #0]
 8009e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e32:	b01d      	add	sp, #116	@ 0x74
 8009e34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e38:	b002      	add	sp, #8
 8009e3a:	4770      	bx	lr
 8009e3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009e40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e44:	bf14      	ite	ne
 8009e46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e4a:	4623      	moveq	r3, r4
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	9307      	str	r3, [sp, #28]
 8009e50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e54:	9002      	str	r0, [sp, #8]
 8009e56:	9006      	str	r0, [sp, #24]
 8009e58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009e5e:	ab21      	add	r3, sp, #132	@ 0x84
 8009e60:	a902      	add	r1, sp, #8
 8009e62:	4628      	mov	r0, r5
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	f002 fc69 	bl	800c73c <_svfiprintf_r>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	bfbc      	itt	lt
 8009e6e:	238b      	movlt	r3, #139	@ 0x8b
 8009e70:	602b      	strlt	r3, [r5, #0]
 8009e72:	2c00      	cmp	r4, #0
 8009e74:	d0dd      	beq.n	8009e32 <sniprintf+0x16>
 8009e76:	9b02      	ldr	r3, [sp, #8]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	701a      	strb	r2, [r3, #0]
 8009e7c:	e7d9      	b.n	8009e32 <sniprintf+0x16>
 8009e7e:	bf00      	nop
 8009e80:	20000038 	.word	0x20000038

08009e84 <siprintf>:
 8009e84:	b40e      	push	{r1, r2, r3}
 8009e86:	b500      	push	{lr}
 8009e88:	b09c      	sub	sp, #112	@ 0x70
 8009e8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e8c:	9002      	str	r0, [sp, #8]
 8009e8e:	9006      	str	r0, [sp, #24]
 8009e90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e94:	4809      	ldr	r0, [pc, #36]	@ (8009ebc <siprintf+0x38>)
 8009e96:	9107      	str	r1, [sp, #28]
 8009e98:	9104      	str	r1, [sp, #16]
 8009e9a:	4909      	ldr	r1, [pc, #36]	@ (8009ec0 <siprintf+0x3c>)
 8009e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea0:	9105      	str	r1, [sp, #20]
 8009ea2:	6800      	ldr	r0, [r0, #0]
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	a902      	add	r1, sp, #8
 8009ea8:	f002 fc48 	bl	800c73c <_svfiprintf_r>
 8009eac:	9b02      	ldr	r3, [sp, #8]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	701a      	strb	r2, [r3, #0]
 8009eb2:	b01c      	add	sp, #112	@ 0x70
 8009eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb8:	b003      	add	sp, #12
 8009eba:	4770      	bx	lr
 8009ebc:	20000038 	.word	0x20000038
 8009ec0:	ffff0208 	.word	0xffff0208

08009ec4 <__sread>:
 8009ec4:	b510      	push	{r4, lr}
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ecc:	f000 f95c 	bl	800a188 <_read_r>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	bfab      	itete	ge
 8009ed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ed8:	181b      	addge	r3, r3, r0
 8009eda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ede:	bfac      	ite	ge
 8009ee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ee2:	81a3      	strhlt	r3, [r4, #12]
 8009ee4:	bd10      	pop	{r4, pc}

08009ee6 <__swrite>:
 8009ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eea:	461f      	mov	r7, r3
 8009eec:	898b      	ldrh	r3, [r1, #12]
 8009eee:	05db      	lsls	r3, r3, #23
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	4616      	mov	r6, r2
 8009ef6:	d505      	bpl.n	8009f04 <__swrite+0x1e>
 8009ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efc:	2302      	movs	r3, #2
 8009efe:	2200      	movs	r2, #0
 8009f00:	f000 f930 	bl	800a164 <_lseek_r>
 8009f04:	89a3      	ldrh	r3, [r4, #12]
 8009f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f0e:	81a3      	strh	r3, [r4, #12]
 8009f10:	4632      	mov	r2, r6
 8009f12:	463b      	mov	r3, r7
 8009f14:	4628      	mov	r0, r5
 8009f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1a:	f000 b947 	b.w	800a1ac <_write_r>

08009f1e <__sseek>:
 8009f1e:	b510      	push	{r4, lr}
 8009f20:	460c      	mov	r4, r1
 8009f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f26:	f000 f91d 	bl	800a164 <_lseek_r>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	bf15      	itete	ne
 8009f30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f3a:	81a3      	strheq	r3, [r4, #12]
 8009f3c:	bf18      	it	ne
 8009f3e:	81a3      	strhne	r3, [r4, #12]
 8009f40:	bd10      	pop	{r4, pc}

08009f42 <__sclose>:
 8009f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f46:	f000 b8fd 	b.w	800a144 <_close_r>

08009f4a <__swbuf_r>:
 8009f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4c:	460e      	mov	r6, r1
 8009f4e:	4614      	mov	r4, r2
 8009f50:	4605      	mov	r5, r0
 8009f52:	b118      	cbz	r0, 8009f5c <__swbuf_r+0x12>
 8009f54:	6a03      	ldr	r3, [r0, #32]
 8009f56:	b90b      	cbnz	r3, 8009f5c <__swbuf_r+0x12>
 8009f58:	f7ff fe06 	bl	8009b68 <__sinit>
 8009f5c:	69a3      	ldr	r3, [r4, #24]
 8009f5e:	60a3      	str	r3, [r4, #8]
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	071a      	lsls	r2, r3, #28
 8009f64:	d501      	bpl.n	8009f6a <__swbuf_r+0x20>
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	b943      	cbnz	r3, 8009f7c <__swbuf_r+0x32>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f000 f82b 	bl	8009fc8 <__swsetup_r>
 8009f72:	b118      	cbz	r0, 8009f7c <__swbuf_r+0x32>
 8009f74:	f04f 37ff 	mov.w	r7, #4294967295
 8009f78:	4638      	mov	r0, r7
 8009f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	6922      	ldr	r2, [r4, #16]
 8009f80:	1a98      	subs	r0, r3, r2
 8009f82:	6963      	ldr	r3, [r4, #20]
 8009f84:	b2f6      	uxtb	r6, r6
 8009f86:	4283      	cmp	r3, r0
 8009f88:	4637      	mov	r7, r6
 8009f8a:	dc05      	bgt.n	8009f98 <__swbuf_r+0x4e>
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f002 fe96 	bl	800ccc0 <_fflush_r>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d1ed      	bne.n	8009f74 <__swbuf_r+0x2a>
 8009f98:	68a3      	ldr	r3, [r4, #8]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	60a3      	str	r3, [r4, #8]
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	6022      	str	r2, [r4, #0]
 8009fa4:	701e      	strb	r6, [r3, #0]
 8009fa6:	6962      	ldr	r2, [r4, #20]
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d004      	beq.n	8009fb8 <__swbuf_r+0x6e>
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	07db      	lsls	r3, r3, #31
 8009fb2:	d5e1      	bpl.n	8009f78 <__swbuf_r+0x2e>
 8009fb4:	2e0a      	cmp	r6, #10
 8009fb6:	d1df      	bne.n	8009f78 <__swbuf_r+0x2e>
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f002 fe80 	bl	800ccc0 <_fflush_r>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d0d9      	beq.n	8009f78 <__swbuf_r+0x2e>
 8009fc4:	e7d6      	b.n	8009f74 <__swbuf_r+0x2a>
	...

08009fc8 <__swsetup_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4b29      	ldr	r3, [pc, #164]	@ (800a070 <__swsetup_r+0xa8>)
 8009fcc:	4605      	mov	r5, r0
 8009fce:	6818      	ldr	r0, [r3, #0]
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	b118      	cbz	r0, 8009fdc <__swsetup_r+0x14>
 8009fd4:	6a03      	ldr	r3, [r0, #32]
 8009fd6:	b90b      	cbnz	r3, 8009fdc <__swsetup_r+0x14>
 8009fd8:	f7ff fdc6 	bl	8009b68 <__sinit>
 8009fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe0:	0719      	lsls	r1, r3, #28
 8009fe2:	d422      	bmi.n	800a02a <__swsetup_r+0x62>
 8009fe4:	06da      	lsls	r2, r3, #27
 8009fe6:	d407      	bmi.n	8009ff8 <__swsetup_r+0x30>
 8009fe8:	2209      	movs	r2, #9
 8009fea:	602a      	str	r2, [r5, #0]
 8009fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ff0:	81a3      	strh	r3, [r4, #12]
 8009ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff6:	e033      	b.n	800a060 <__swsetup_r+0x98>
 8009ff8:	0758      	lsls	r0, r3, #29
 8009ffa:	d512      	bpl.n	800a022 <__swsetup_r+0x5a>
 8009ffc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ffe:	b141      	cbz	r1, 800a012 <__swsetup_r+0x4a>
 800a000:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a004:	4299      	cmp	r1, r3
 800a006:	d002      	beq.n	800a00e <__swsetup_r+0x46>
 800a008:	4628      	mov	r0, r5
 800a00a:	f000 ff81 	bl	800af10 <_free_r>
 800a00e:	2300      	movs	r3, #0
 800a010:	6363      	str	r3, [r4, #52]	@ 0x34
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a018:	81a3      	strh	r3, [r4, #12]
 800a01a:	2300      	movs	r3, #0
 800a01c:	6063      	str	r3, [r4, #4]
 800a01e:	6923      	ldr	r3, [r4, #16]
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	89a3      	ldrh	r3, [r4, #12]
 800a024:	f043 0308 	orr.w	r3, r3, #8
 800a028:	81a3      	strh	r3, [r4, #12]
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	b94b      	cbnz	r3, 800a042 <__swsetup_r+0x7a>
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a038:	d003      	beq.n	800a042 <__swsetup_r+0x7a>
 800a03a:	4621      	mov	r1, r4
 800a03c:	4628      	mov	r0, r5
 800a03e:	f002 fe9f 	bl	800cd80 <__smakebuf_r>
 800a042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a046:	f013 0201 	ands.w	r2, r3, #1
 800a04a:	d00a      	beq.n	800a062 <__swsetup_r+0x9a>
 800a04c:	2200      	movs	r2, #0
 800a04e:	60a2      	str	r2, [r4, #8]
 800a050:	6962      	ldr	r2, [r4, #20]
 800a052:	4252      	negs	r2, r2
 800a054:	61a2      	str	r2, [r4, #24]
 800a056:	6922      	ldr	r2, [r4, #16]
 800a058:	b942      	cbnz	r2, 800a06c <__swsetup_r+0xa4>
 800a05a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a05e:	d1c5      	bne.n	8009fec <__swsetup_r+0x24>
 800a060:	bd38      	pop	{r3, r4, r5, pc}
 800a062:	0799      	lsls	r1, r3, #30
 800a064:	bf58      	it	pl
 800a066:	6962      	ldrpl	r2, [r4, #20]
 800a068:	60a2      	str	r2, [r4, #8]
 800a06a:	e7f4      	b.n	800a056 <__swsetup_r+0x8e>
 800a06c:	2000      	movs	r0, #0
 800a06e:	e7f7      	b.n	800a060 <__swsetup_r+0x98>
 800a070:	20000038 	.word	0x20000038

0800a074 <memset>:
 800a074:	4402      	add	r2, r0
 800a076:	4603      	mov	r3, r0
 800a078:	4293      	cmp	r3, r2
 800a07a:	d100      	bne.n	800a07e <memset+0xa>
 800a07c:	4770      	bx	lr
 800a07e:	f803 1b01 	strb.w	r1, [r3], #1
 800a082:	e7f9      	b.n	800a078 <memset+0x4>

0800a084 <strtok>:
 800a084:	4b16      	ldr	r3, [pc, #88]	@ (800a0e0 <strtok+0x5c>)
 800a086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a08a:	681f      	ldr	r7, [r3, #0]
 800a08c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a08e:	4605      	mov	r5, r0
 800a090:	460e      	mov	r6, r1
 800a092:	b9ec      	cbnz	r4, 800a0d0 <strtok+0x4c>
 800a094:	2050      	movs	r0, #80	@ 0x50
 800a096:	f000 ff85 	bl	800afa4 <malloc>
 800a09a:	4602      	mov	r2, r0
 800a09c:	6478      	str	r0, [r7, #68]	@ 0x44
 800a09e:	b920      	cbnz	r0, 800a0aa <strtok+0x26>
 800a0a0:	4b10      	ldr	r3, [pc, #64]	@ (800a0e4 <strtok+0x60>)
 800a0a2:	4811      	ldr	r0, [pc, #68]	@ (800a0e8 <strtok+0x64>)
 800a0a4:	215b      	movs	r1, #91	@ 0x5b
 800a0a6:	f000 f8c7 	bl	800a238 <__assert_func>
 800a0aa:	e9c0 4400 	strd	r4, r4, [r0]
 800a0ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a0b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a0b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a0ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a0be:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a0c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a0c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a0ca:	6184      	str	r4, [r0, #24]
 800a0cc:	7704      	strb	r4, [r0, #28]
 800a0ce:	6244      	str	r4, [r0, #36]	@ 0x24
 800a0d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0d2:	4631      	mov	r1, r6
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0dc:	f000 b806 	b.w	800a0ec <__strtok_r>
 800a0e0:	20000038 	.word	0x20000038
 800a0e4:	0800de0a 	.word	0x0800de0a
 800a0e8:	0800de21 	.word	0x0800de21

0800a0ec <__strtok_r>:
 800a0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	b908      	cbnz	r0, 800a0f6 <__strtok_r+0xa>
 800a0f2:	6814      	ldr	r4, [r2, #0]
 800a0f4:	b144      	cbz	r4, 800a108 <__strtok_r+0x1c>
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a0fc:	460f      	mov	r7, r1
 800a0fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a102:	b91e      	cbnz	r6, 800a10c <__strtok_r+0x20>
 800a104:	b965      	cbnz	r5, 800a120 <__strtok_r+0x34>
 800a106:	6015      	str	r5, [r2, #0]
 800a108:	2000      	movs	r0, #0
 800a10a:	e005      	b.n	800a118 <__strtok_r+0x2c>
 800a10c:	42b5      	cmp	r5, r6
 800a10e:	d1f6      	bne.n	800a0fe <__strtok_r+0x12>
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1f0      	bne.n	800a0f6 <__strtok_r+0xa>
 800a114:	6014      	str	r4, [r2, #0]
 800a116:	7003      	strb	r3, [r0, #0]
 800a118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a11a:	461c      	mov	r4, r3
 800a11c:	e00c      	b.n	800a138 <__strtok_r+0x4c>
 800a11e:	b915      	cbnz	r5, 800a126 <__strtok_r+0x3a>
 800a120:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a124:	460e      	mov	r6, r1
 800a126:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a12a:	42ab      	cmp	r3, r5
 800a12c:	d1f7      	bne.n	800a11e <__strtok_r+0x32>
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0f3      	beq.n	800a11a <__strtok_r+0x2e>
 800a132:	2300      	movs	r3, #0
 800a134:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a138:	6014      	str	r4, [r2, #0]
 800a13a:	e7ed      	b.n	800a118 <__strtok_r+0x2c>

0800a13c <_localeconv_r>:
 800a13c:	4800      	ldr	r0, [pc, #0]	@ (800a140 <_localeconv_r+0x4>)
 800a13e:	4770      	bx	lr
 800a140:	20000178 	.word	0x20000178

0800a144 <_close_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4d06      	ldr	r5, [pc, #24]	@ (800a160 <_close_r+0x1c>)
 800a148:	2300      	movs	r3, #0
 800a14a:	4604      	mov	r4, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	f7f8 fbd7 	bl	8002902 <_close>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_close_r+0x1a>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_close_r+0x1a>
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	20000f88 	.word	0x20000f88

0800a164 <_lseek_r>:
 800a164:	b538      	push	{r3, r4, r5, lr}
 800a166:	4d07      	ldr	r5, [pc, #28]	@ (800a184 <_lseek_r+0x20>)
 800a168:	4604      	mov	r4, r0
 800a16a:	4608      	mov	r0, r1
 800a16c:	4611      	mov	r1, r2
 800a16e:	2200      	movs	r2, #0
 800a170:	602a      	str	r2, [r5, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	f7f8 fbec 	bl	8002950 <_lseek>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_lseek_r+0x1e>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_lseek_r+0x1e>
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	20000f88 	.word	0x20000f88

0800a188 <_read_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4d07      	ldr	r5, [pc, #28]	@ (800a1a8 <_read_r+0x20>)
 800a18c:	4604      	mov	r4, r0
 800a18e:	4608      	mov	r0, r1
 800a190:	4611      	mov	r1, r2
 800a192:	2200      	movs	r2, #0
 800a194:	602a      	str	r2, [r5, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	f7f8 fb96 	bl	80028c8 <_read>
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d102      	bne.n	800a1a6 <_read_r+0x1e>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	b103      	cbz	r3, 800a1a6 <_read_r+0x1e>
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	20000f88 	.word	0x20000f88

0800a1ac <_write_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4d07      	ldr	r5, [pc, #28]	@ (800a1cc <_write_r+0x20>)
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	4608      	mov	r0, r1
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	602a      	str	r2, [r5, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f7f7 ff34 	bl	8002028 <_write>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d102      	bne.n	800a1ca <_write_r+0x1e>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	b103      	cbz	r3, 800a1ca <_write_r+0x1e>
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	20000f88 	.word	0x20000f88

0800a1d0 <__errno>:
 800a1d0:	4b01      	ldr	r3, [pc, #4]	@ (800a1d8 <__errno+0x8>)
 800a1d2:	6818      	ldr	r0, [r3, #0]
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	20000038 	.word	0x20000038

0800a1dc <__libc_init_array>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	4d0d      	ldr	r5, [pc, #52]	@ (800a214 <__libc_init_array+0x38>)
 800a1e0:	4c0d      	ldr	r4, [pc, #52]	@ (800a218 <__libc_init_array+0x3c>)
 800a1e2:	1b64      	subs	r4, r4, r5
 800a1e4:	10a4      	asrs	r4, r4, #2
 800a1e6:	2600      	movs	r6, #0
 800a1e8:	42a6      	cmp	r6, r4
 800a1ea:	d109      	bne.n	800a200 <__libc_init_array+0x24>
 800a1ec:	4d0b      	ldr	r5, [pc, #44]	@ (800a21c <__libc_init_array+0x40>)
 800a1ee:	4c0c      	ldr	r4, [pc, #48]	@ (800a220 <__libc_init_array+0x44>)
 800a1f0:	f003 fa62 	bl	800d6b8 <_init>
 800a1f4:	1b64      	subs	r4, r4, r5
 800a1f6:	10a4      	asrs	r4, r4, #2
 800a1f8:	2600      	movs	r6, #0
 800a1fa:	42a6      	cmp	r6, r4
 800a1fc:	d105      	bne.n	800a20a <__libc_init_array+0x2e>
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	f855 3b04 	ldr.w	r3, [r5], #4
 800a204:	4798      	blx	r3
 800a206:	3601      	adds	r6, #1
 800a208:	e7ee      	b.n	800a1e8 <__libc_init_array+0xc>
 800a20a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a20e:	4798      	blx	r3
 800a210:	3601      	adds	r6, #1
 800a212:	e7f2      	b.n	800a1fa <__libc_init_array+0x1e>
 800a214:	0800e164 	.word	0x0800e164
 800a218:	0800e164 	.word	0x0800e164
 800a21c:	0800e164 	.word	0x0800e164
 800a220:	0800e168 	.word	0x0800e168

0800a224 <__retarget_lock_init_recursive>:
 800a224:	4770      	bx	lr

0800a226 <__retarget_lock_acquire_recursive>:
 800a226:	4770      	bx	lr

0800a228 <__retarget_lock_release_recursive>:
 800a228:	4770      	bx	lr
	...

0800a22c <nanf>:
 800a22c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a234 <nanf+0x8>
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	7fc00000 	.word	0x7fc00000

0800a238 <__assert_func>:
 800a238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a23a:	4614      	mov	r4, r2
 800a23c:	461a      	mov	r2, r3
 800a23e:	4b09      	ldr	r3, [pc, #36]	@ (800a264 <__assert_func+0x2c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4605      	mov	r5, r0
 800a244:	68d8      	ldr	r0, [r3, #12]
 800a246:	b954      	cbnz	r4, 800a25e <__assert_func+0x26>
 800a248:	4b07      	ldr	r3, [pc, #28]	@ (800a268 <__assert_func+0x30>)
 800a24a:	461c      	mov	r4, r3
 800a24c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a250:	9100      	str	r1, [sp, #0]
 800a252:	462b      	mov	r3, r5
 800a254:	4905      	ldr	r1, [pc, #20]	@ (800a26c <__assert_func+0x34>)
 800a256:	f002 fd5b 	bl	800cd10 <fiprintf>
 800a25a:	f002 fe41 	bl	800cee0 <abort>
 800a25e:	4b04      	ldr	r3, [pc, #16]	@ (800a270 <__assert_func+0x38>)
 800a260:	e7f4      	b.n	800a24c <__assert_func+0x14>
 800a262:	bf00      	nop
 800a264:	20000038 	.word	0x20000038
 800a268:	0800deb6 	.word	0x0800deb6
 800a26c:	0800de88 	.word	0x0800de88
 800a270:	0800de7b 	.word	0x0800de7b

0800a274 <quorem>:
 800a274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	6903      	ldr	r3, [r0, #16]
 800a27a:	690c      	ldr	r4, [r1, #16]
 800a27c:	42a3      	cmp	r3, r4
 800a27e:	4607      	mov	r7, r0
 800a280:	db7e      	blt.n	800a380 <quorem+0x10c>
 800a282:	3c01      	subs	r4, #1
 800a284:	f101 0814 	add.w	r8, r1, #20
 800a288:	00a3      	lsls	r3, r4, #2
 800a28a:	f100 0514 	add.w	r5, r0, #20
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a29a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2aa:	d32e      	bcc.n	800a30a <quorem+0x96>
 800a2ac:	f04f 0a00 	mov.w	sl, #0
 800a2b0:	46c4      	mov	ip, r8
 800a2b2:	46ae      	mov	lr, r5
 800a2b4:	46d3      	mov	fp, sl
 800a2b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2ba:	b298      	uxth	r0, r3
 800a2bc:	fb06 a000 	mla	r0, r6, r0, sl
 800a2c0:	0c02      	lsrs	r2, r0, #16
 800a2c2:	0c1b      	lsrs	r3, r3, #16
 800a2c4:	fb06 2303 	mla	r3, r6, r3, r2
 800a2c8:	f8de 2000 	ldr.w	r2, [lr]
 800a2cc:	b280      	uxth	r0, r0
 800a2ce:	b292      	uxth	r2, r2
 800a2d0:	1a12      	subs	r2, r2, r0
 800a2d2:	445a      	add	r2, fp
 800a2d4:	f8de 0000 	ldr.w	r0, [lr]
 800a2d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a2e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a2e6:	b292      	uxth	r2, r2
 800a2e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a2ec:	45e1      	cmp	r9, ip
 800a2ee:	f84e 2b04 	str.w	r2, [lr], #4
 800a2f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a2f6:	d2de      	bcs.n	800a2b6 <quorem+0x42>
 800a2f8:	9b00      	ldr	r3, [sp, #0]
 800a2fa:	58eb      	ldr	r3, [r5, r3]
 800a2fc:	b92b      	cbnz	r3, 800a30a <quorem+0x96>
 800a2fe:	9b01      	ldr	r3, [sp, #4]
 800a300:	3b04      	subs	r3, #4
 800a302:	429d      	cmp	r5, r3
 800a304:	461a      	mov	r2, r3
 800a306:	d32f      	bcc.n	800a368 <quorem+0xf4>
 800a308:	613c      	str	r4, [r7, #16]
 800a30a:	4638      	mov	r0, r7
 800a30c:	f001 f9c4 	bl	800b698 <__mcmp>
 800a310:	2800      	cmp	r0, #0
 800a312:	db25      	blt.n	800a360 <quorem+0xec>
 800a314:	4629      	mov	r1, r5
 800a316:	2000      	movs	r0, #0
 800a318:	f858 2b04 	ldr.w	r2, [r8], #4
 800a31c:	f8d1 c000 	ldr.w	ip, [r1]
 800a320:	fa1f fe82 	uxth.w	lr, r2
 800a324:	fa1f f38c 	uxth.w	r3, ip
 800a328:	eba3 030e 	sub.w	r3, r3, lr
 800a32c:	4403      	add	r3, r0
 800a32e:	0c12      	lsrs	r2, r2, #16
 800a330:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a334:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a338:	b29b      	uxth	r3, r3
 800a33a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a33e:	45c1      	cmp	r9, r8
 800a340:	f841 3b04 	str.w	r3, [r1], #4
 800a344:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a348:	d2e6      	bcs.n	800a318 <quorem+0xa4>
 800a34a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a34e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a352:	b922      	cbnz	r2, 800a35e <quorem+0xea>
 800a354:	3b04      	subs	r3, #4
 800a356:	429d      	cmp	r5, r3
 800a358:	461a      	mov	r2, r3
 800a35a:	d30b      	bcc.n	800a374 <quorem+0x100>
 800a35c:	613c      	str	r4, [r7, #16]
 800a35e:	3601      	adds	r6, #1
 800a360:	4630      	mov	r0, r6
 800a362:	b003      	add	sp, #12
 800a364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a368:	6812      	ldr	r2, [r2, #0]
 800a36a:	3b04      	subs	r3, #4
 800a36c:	2a00      	cmp	r2, #0
 800a36e:	d1cb      	bne.n	800a308 <quorem+0x94>
 800a370:	3c01      	subs	r4, #1
 800a372:	e7c6      	b.n	800a302 <quorem+0x8e>
 800a374:	6812      	ldr	r2, [r2, #0]
 800a376:	3b04      	subs	r3, #4
 800a378:	2a00      	cmp	r2, #0
 800a37a:	d1ef      	bne.n	800a35c <quorem+0xe8>
 800a37c:	3c01      	subs	r4, #1
 800a37e:	e7ea      	b.n	800a356 <quorem+0xe2>
 800a380:	2000      	movs	r0, #0
 800a382:	e7ee      	b.n	800a362 <quorem+0xee>
 800a384:	0000      	movs	r0, r0
	...

0800a388 <_dtoa_r>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	69c7      	ldr	r7, [r0, #28]
 800a38e:	b099      	sub	sp, #100	@ 0x64
 800a390:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a394:	ec55 4b10 	vmov	r4, r5, d0
 800a398:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a39a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a39c:	4683      	mov	fp, r0
 800a39e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3a2:	b97f      	cbnz	r7, 800a3c4 <_dtoa_r+0x3c>
 800a3a4:	2010      	movs	r0, #16
 800a3a6:	f000 fdfd 	bl	800afa4 <malloc>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800a3b0:	b920      	cbnz	r0, 800a3bc <_dtoa_r+0x34>
 800a3b2:	4ba7      	ldr	r3, [pc, #668]	@ (800a650 <_dtoa_r+0x2c8>)
 800a3b4:	21ef      	movs	r1, #239	@ 0xef
 800a3b6:	48a7      	ldr	r0, [pc, #668]	@ (800a654 <_dtoa_r+0x2cc>)
 800a3b8:	f7ff ff3e 	bl	800a238 <__assert_func>
 800a3bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a3c0:	6007      	str	r7, [r0, #0]
 800a3c2:	60c7      	str	r7, [r0, #12]
 800a3c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3c8:	6819      	ldr	r1, [r3, #0]
 800a3ca:	b159      	cbz	r1, 800a3e4 <_dtoa_r+0x5c>
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	604a      	str	r2, [r1, #4]
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	4093      	lsls	r3, r2
 800a3d4:	608b      	str	r3, [r1, #8]
 800a3d6:	4658      	mov	r0, fp
 800a3d8:	f000 feda 	bl	800b190 <_Bfree>
 800a3dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	1e2b      	subs	r3, r5, #0
 800a3e6:	bfb9      	ittee	lt
 800a3e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a3ec:	9303      	strlt	r3, [sp, #12]
 800a3ee:	2300      	movge	r3, #0
 800a3f0:	6033      	strge	r3, [r6, #0]
 800a3f2:	9f03      	ldr	r7, [sp, #12]
 800a3f4:	4b98      	ldr	r3, [pc, #608]	@ (800a658 <_dtoa_r+0x2d0>)
 800a3f6:	bfbc      	itt	lt
 800a3f8:	2201      	movlt	r2, #1
 800a3fa:	6032      	strlt	r2, [r6, #0]
 800a3fc:	43bb      	bics	r3, r7
 800a3fe:	d112      	bne.n	800a426 <_dtoa_r+0x9e>
 800a400:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a402:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a40c:	4323      	orrs	r3, r4
 800a40e:	f000 854d 	beq.w	800aeac <_dtoa_r+0xb24>
 800a412:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a414:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a66c <_dtoa_r+0x2e4>
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 854f 	beq.w	800aebc <_dtoa_r+0xb34>
 800a41e:	f10a 0303 	add.w	r3, sl, #3
 800a422:	f000 bd49 	b.w	800aeb8 <_dtoa_r+0xb30>
 800a426:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a42a:	2200      	movs	r2, #0
 800a42c:	ec51 0b17 	vmov	r0, r1, d7
 800a430:	2300      	movs	r3, #0
 800a432:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a436:	f7f6 fb67 	bl	8000b08 <__aeabi_dcmpeq>
 800a43a:	4680      	mov	r8, r0
 800a43c:	b158      	cbz	r0, 800a456 <_dtoa_r+0xce>
 800a43e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a440:	2301      	movs	r3, #1
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a446:	b113      	cbz	r3, 800a44e <_dtoa_r+0xc6>
 800a448:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a44a:	4b84      	ldr	r3, [pc, #528]	@ (800a65c <_dtoa_r+0x2d4>)
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a670 <_dtoa_r+0x2e8>
 800a452:	f000 bd33 	b.w	800aebc <_dtoa_r+0xb34>
 800a456:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a45a:	aa16      	add	r2, sp, #88	@ 0x58
 800a45c:	a917      	add	r1, sp, #92	@ 0x5c
 800a45e:	4658      	mov	r0, fp
 800a460:	f001 fa3a 	bl	800b8d8 <__d2b>
 800a464:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a468:	4681      	mov	r9, r0
 800a46a:	2e00      	cmp	r6, #0
 800a46c:	d077      	beq.n	800a55e <_dtoa_r+0x1d6>
 800a46e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a470:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a47c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a480:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a484:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a488:	4619      	mov	r1, r3
 800a48a:	2200      	movs	r2, #0
 800a48c:	4b74      	ldr	r3, [pc, #464]	@ (800a660 <_dtoa_r+0x2d8>)
 800a48e:	f7f5 ff1b 	bl	80002c8 <__aeabi_dsub>
 800a492:	a369      	add	r3, pc, #420	@ (adr r3, 800a638 <_dtoa_r+0x2b0>)
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f7f6 f8ce 	bl	8000638 <__aeabi_dmul>
 800a49c:	a368      	add	r3, pc, #416	@ (adr r3, 800a640 <_dtoa_r+0x2b8>)
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	f7f5 ff13 	bl	80002cc <__adddf3>
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	460d      	mov	r5, r1
 800a4ac:	f7f6 f85a 	bl	8000564 <__aeabi_i2d>
 800a4b0:	a365      	add	r3, pc, #404	@ (adr r3, 800a648 <_dtoa_r+0x2c0>)
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	f7f6 f8bf 	bl	8000638 <__aeabi_dmul>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4620      	mov	r0, r4
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	f7f5 ff03 	bl	80002cc <__adddf3>
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	f7f6 fb65 	bl	8000b98 <__aeabi_d2iz>
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	f7f6 fb20 	bl	8000b1c <__aeabi_dcmplt>
 800a4dc:	b140      	cbz	r0, 800a4f0 <_dtoa_r+0x168>
 800a4de:	4638      	mov	r0, r7
 800a4e0:	f7f6 f840 	bl	8000564 <__aeabi_i2d>
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	462b      	mov	r3, r5
 800a4e8:	f7f6 fb0e 	bl	8000b08 <__aeabi_dcmpeq>
 800a4ec:	b900      	cbnz	r0, 800a4f0 <_dtoa_r+0x168>
 800a4ee:	3f01      	subs	r7, #1
 800a4f0:	2f16      	cmp	r7, #22
 800a4f2:	d851      	bhi.n	800a598 <_dtoa_r+0x210>
 800a4f4:	4b5b      	ldr	r3, [pc, #364]	@ (800a664 <_dtoa_r+0x2dc>)
 800a4f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a502:	f7f6 fb0b 	bl	8000b1c <__aeabi_dcmplt>
 800a506:	2800      	cmp	r0, #0
 800a508:	d048      	beq.n	800a59c <_dtoa_r+0x214>
 800a50a:	3f01      	subs	r7, #1
 800a50c:	2300      	movs	r3, #0
 800a50e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a510:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a512:	1b9b      	subs	r3, r3, r6
 800a514:	1e5a      	subs	r2, r3, #1
 800a516:	bf44      	itt	mi
 800a518:	f1c3 0801 	rsbmi	r8, r3, #1
 800a51c:	2300      	movmi	r3, #0
 800a51e:	9208      	str	r2, [sp, #32]
 800a520:	bf54      	ite	pl
 800a522:	f04f 0800 	movpl.w	r8, #0
 800a526:	9308      	strmi	r3, [sp, #32]
 800a528:	2f00      	cmp	r7, #0
 800a52a:	db39      	blt.n	800a5a0 <_dtoa_r+0x218>
 800a52c:	9b08      	ldr	r3, [sp, #32]
 800a52e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a530:	443b      	add	r3, r7
 800a532:	9308      	str	r3, [sp, #32]
 800a534:	2300      	movs	r3, #0
 800a536:	930a      	str	r3, [sp, #40]	@ 0x28
 800a538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a53a:	2b09      	cmp	r3, #9
 800a53c:	d864      	bhi.n	800a608 <_dtoa_r+0x280>
 800a53e:	2b05      	cmp	r3, #5
 800a540:	bfc4      	itt	gt
 800a542:	3b04      	subgt	r3, #4
 800a544:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a548:	f1a3 0302 	sub.w	r3, r3, #2
 800a54c:	bfcc      	ite	gt
 800a54e:	2400      	movgt	r4, #0
 800a550:	2401      	movle	r4, #1
 800a552:	2b03      	cmp	r3, #3
 800a554:	d863      	bhi.n	800a61e <_dtoa_r+0x296>
 800a556:	e8df f003 	tbb	[pc, r3]
 800a55a:	372a      	.short	0x372a
 800a55c:	5535      	.short	0x5535
 800a55e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a562:	441e      	add	r6, r3
 800a564:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a568:	2b20      	cmp	r3, #32
 800a56a:	bfc1      	itttt	gt
 800a56c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a570:	409f      	lslgt	r7, r3
 800a572:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a576:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a57a:	bfd6      	itet	le
 800a57c:	f1c3 0320 	rsble	r3, r3, #32
 800a580:	ea47 0003 	orrgt.w	r0, r7, r3
 800a584:	fa04 f003 	lslle.w	r0, r4, r3
 800a588:	f7f5 ffdc 	bl	8000544 <__aeabi_ui2d>
 800a58c:	2201      	movs	r2, #1
 800a58e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a592:	3e01      	subs	r6, #1
 800a594:	9214      	str	r2, [sp, #80]	@ 0x50
 800a596:	e777      	b.n	800a488 <_dtoa_r+0x100>
 800a598:	2301      	movs	r3, #1
 800a59a:	e7b8      	b.n	800a50e <_dtoa_r+0x186>
 800a59c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a59e:	e7b7      	b.n	800a510 <_dtoa_r+0x188>
 800a5a0:	427b      	negs	r3, r7
 800a5a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	eba8 0807 	sub.w	r8, r8, r7
 800a5aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5ac:	e7c4      	b.n	800a538 <_dtoa_r+0x1b0>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dc35      	bgt.n	800a624 <_dtoa_r+0x29c>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	9307      	str	r3, [sp, #28]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5c2:	e00b      	b.n	800a5dc <_dtoa_r+0x254>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e7f3      	b.n	800a5b0 <_dtoa_r+0x228>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5ce:	18fb      	adds	r3, r7, r3
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	9307      	str	r3, [sp, #28]
 800a5d8:	bfb8      	it	lt
 800a5da:	2301      	movlt	r3, #1
 800a5dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	2204      	movs	r2, #4
 800a5e4:	f102 0514 	add.w	r5, r2, #20
 800a5e8:	429d      	cmp	r5, r3
 800a5ea:	d91f      	bls.n	800a62c <_dtoa_r+0x2a4>
 800a5ec:	6041      	str	r1, [r0, #4]
 800a5ee:	4658      	mov	r0, fp
 800a5f0:	f000 fd8e 	bl	800b110 <_Balloc>
 800a5f4:	4682      	mov	sl, r0
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d13c      	bne.n	800a674 <_dtoa_r+0x2ec>
 800a5fa:	4b1b      	ldr	r3, [pc, #108]	@ (800a668 <_dtoa_r+0x2e0>)
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800a602:	e6d8      	b.n	800a3b6 <_dtoa_r+0x2e>
 800a604:	2301      	movs	r3, #1
 800a606:	e7e0      	b.n	800a5ca <_dtoa_r+0x242>
 800a608:	2401      	movs	r4, #1
 800a60a:	2300      	movs	r3, #0
 800a60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a60e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a610:	f04f 33ff 	mov.w	r3, #4294967295
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	9307      	str	r3, [sp, #28]
 800a618:	2200      	movs	r2, #0
 800a61a:	2312      	movs	r3, #18
 800a61c:	e7d0      	b.n	800a5c0 <_dtoa_r+0x238>
 800a61e:	2301      	movs	r3, #1
 800a620:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a622:	e7f5      	b.n	800a610 <_dtoa_r+0x288>
 800a624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a626:	9300      	str	r3, [sp, #0]
 800a628:	9307      	str	r3, [sp, #28]
 800a62a:	e7d7      	b.n	800a5dc <_dtoa_r+0x254>
 800a62c:	3101      	adds	r1, #1
 800a62e:	0052      	lsls	r2, r2, #1
 800a630:	e7d8      	b.n	800a5e4 <_dtoa_r+0x25c>
 800a632:	bf00      	nop
 800a634:	f3af 8000 	nop.w
 800a638:	636f4361 	.word	0x636f4361
 800a63c:	3fd287a7 	.word	0x3fd287a7
 800a640:	8b60c8b3 	.word	0x8b60c8b3
 800a644:	3fc68a28 	.word	0x3fc68a28
 800a648:	509f79fb 	.word	0x509f79fb
 800a64c:	3fd34413 	.word	0x3fd34413
 800a650:	0800de0a 	.word	0x0800de0a
 800a654:	0800dec4 	.word	0x0800dec4
 800a658:	7ff00000 	.word	0x7ff00000
 800a65c:	0800dde2 	.word	0x0800dde2
 800a660:	3ff80000 	.word	0x3ff80000
 800a664:	0800dfc0 	.word	0x0800dfc0
 800a668:	0800df1c 	.word	0x0800df1c
 800a66c:	0800dec0 	.word	0x0800dec0
 800a670:	0800dde1 	.word	0x0800dde1
 800a674:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a678:	6018      	str	r0, [r3, #0]
 800a67a:	9b07      	ldr	r3, [sp, #28]
 800a67c:	2b0e      	cmp	r3, #14
 800a67e:	f200 80a4 	bhi.w	800a7ca <_dtoa_r+0x442>
 800a682:	2c00      	cmp	r4, #0
 800a684:	f000 80a1 	beq.w	800a7ca <_dtoa_r+0x442>
 800a688:	2f00      	cmp	r7, #0
 800a68a:	dd33      	ble.n	800a6f4 <_dtoa_r+0x36c>
 800a68c:	4bad      	ldr	r3, [pc, #692]	@ (800a944 <_dtoa_r+0x5bc>)
 800a68e:	f007 020f 	and.w	r2, r7, #15
 800a692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a696:	ed93 7b00 	vldr	d7, [r3]
 800a69a:	05f8      	lsls	r0, r7, #23
 800a69c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a6a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a6a4:	d516      	bpl.n	800a6d4 <_dtoa_r+0x34c>
 800a6a6:	4ba8      	ldr	r3, [pc, #672]	@ (800a948 <_dtoa_r+0x5c0>)
 800a6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6b0:	f7f6 f8ec 	bl	800088c <__aeabi_ddiv>
 800a6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b8:	f004 040f 	and.w	r4, r4, #15
 800a6bc:	2603      	movs	r6, #3
 800a6be:	4da2      	ldr	r5, [pc, #648]	@ (800a948 <_dtoa_r+0x5c0>)
 800a6c0:	b954      	cbnz	r4, 800a6d8 <_dtoa_r+0x350>
 800a6c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6ca:	f7f6 f8df 	bl	800088c <__aeabi_ddiv>
 800a6ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6d2:	e028      	b.n	800a726 <_dtoa_r+0x39e>
 800a6d4:	2602      	movs	r6, #2
 800a6d6:	e7f2      	b.n	800a6be <_dtoa_r+0x336>
 800a6d8:	07e1      	lsls	r1, r4, #31
 800a6da:	d508      	bpl.n	800a6ee <_dtoa_r+0x366>
 800a6dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6e4:	f7f5 ffa8 	bl	8000638 <__aeabi_dmul>
 800a6e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6ec:	3601      	adds	r6, #1
 800a6ee:	1064      	asrs	r4, r4, #1
 800a6f0:	3508      	adds	r5, #8
 800a6f2:	e7e5      	b.n	800a6c0 <_dtoa_r+0x338>
 800a6f4:	f000 80d2 	beq.w	800a89c <_dtoa_r+0x514>
 800a6f8:	427c      	negs	r4, r7
 800a6fa:	4b92      	ldr	r3, [pc, #584]	@ (800a944 <_dtoa_r+0x5bc>)
 800a6fc:	4d92      	ldr	r5, [pc, #584]	@ (800a948 <_dtoa_r+0x5c0>)
 800a6fe:	f004 020f 	and.w	r2, r4, #15
 800a702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a70e:	f7f5 ff93 	bl	8000638 <__aeabi_dmul>
 800a712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a716:	1124      	asrs	r4, r4, #4
 800a718:	2300      	movs	r3, #0
 800a71a:	2602      	movs	r6, #2
 800a71c:	2c00      	cmp	r4, #0
 800a71e:	f040 80b2 	bne.w	800a886 <_dtoa_r+0x4fe>
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1d3      	bne.n	800a6ce <_dtoa_r+0x346>
 800a726:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a728:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 80b7 	beq.w	800a8a0 <_dtoa_r+0x518>
 800a732:	4b86      	ldr	r3, [pc, #536]	@ (800a94c <_dtoa_r+0x5c4>)
 800a734:	2200      	movs	r2, #0
 800a736:	4620      	mov	r0, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	f7f6 f9ef 	bl	8000b1c <__aeabi_dcmplt>
 800a73e:	2800      	cmp	r0, #0
 800a740:	f000 80ae 	beq.w	800a8a0 <_dtoa_r+0x518>
 800a744:	9b07      	ldr	r3, [sp, #28]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 80aa 	beq.w	800a8a0 <_dtoa_r+0x518>
 800a74c:	9b00      	ldr	r3, [sp, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	dd37      	ble.n	800a7c2 <_dtoa_r+0x43a>
 800a752:	1e7b      	subs	r3, r7, #1
 800a754:	9304      	str	r3, [sp, #16]
 800a756:	4620      	mov	r0, r4
 800a758:	4b7d      	ldr	r3, [pc, #500]	@ (800a950 <_dtoa_r+0x5c8>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	4629      	mov	r1, r5
 800a75e:	f7f5 ff6b 	bl	8000638 <__aeabi_dmul>
 800a762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a766:	9c00      	ldr	r4, [sp, #0]
 800a768:	3601      	adds	r6, #1
 800a76a:	4630      	mov	r0, r6
 800a76c:	f7f5 fefa 	bl	8000564 <__aeabi_i2d>
 800a770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a774:	f7f5 ff60 	bl	8000638 <__aeabi_dmul>
 800a778:	4b76      	ldr	r3, [pc, #472]	@ (800a954 <_dtoa_r+0x5cc>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	f7f5 fda6 	bl	80002cc <__adddf3>
 800a780:	4605      	mov	r5, r0
 800a782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a786:	2c00      	cmp	r4, #0
 800a788:	f040 808d 	bne.w	800a8a6 <_dtoa_r+0x51e>
 800a78c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a790:	4b71      	ldr	r3, [pc, #452]	@ (800a958 <_dtoa_r+0x5d0>)
 800a792:	2200      	movs	r2, #0
 800a794:	f7f5 fd98 	bl	80002c8 <__aeabi_dsub>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7a0:	462a      	mov	r2, r5
 800a7a2:	4633      	mov	r3, r6
 800a7a4:	f7f6 f9d8 	bl	8000b58 <__aeabi_dcmpgt>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	f040 828b 	bne.w	800acc4 <_dtoa_r+0x93c>
 800a7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b2:	462a      	mov	r2, r5
 800a7b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a7b8:	f7f6 f9b0 	bl	8000b1c <__aeabi_dcmplt>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f040 8128 	bne.w	800aa12 <_dtoa_r+0x68a>
 800a7c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a7c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a7ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f2c0 815a 	blt.w	800aa86 <_dtoa_r+0x6fe>
 800a7d2:	2f0e      	cmp	r7, #14
 800a7d4:	f300 8157 	bgt.w	800aa86 <_dtoa_r+0x6fe>
 800a7d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a944 <_dtoa_r+0x5bc>)
 800a7da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7de:	ed93 7b00 	vldr	d7, [r3]
 800a7e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	ed8d 7b00 	vstr	d7, [sp]
 800a7ea:	da03      	bge.n	800a7f4 <_dtoa_r+0x46c>
 800a7ec:	9b07      	ldr	r3, [sp, #28]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f340 8101 	ble.w	800a9f6 <_dtoa_r+0x66e>
 800a7f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a7f8:	4656      	mov	r6, sl
 800a7fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7fe:	4620      	mov	r0, r4
 800a800:	4629      	mov	r1, r5
 800a802:	f7f6 f843 	bl	800088c <__aeabi_ddiv>
 800a806:	f7f6 f9c7 	bl	8000b98 <__aeabi_d2iz>
 800a80a:	4680      	mov	r8, r0
 800a80c:	f7f5 feaa 	bl	8000564 <__aeabi_i2d>
 800a810:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a814:	f7f5 ff10 	bl	8000638 <__aeabi_dmul>
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4620      	mov	r0, r4
 800a81e:	4629      	mov	r1, r5
 800a820:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a824:	f7f5 fd50 	bl	80002c8 <__aeabi_dsub>
 800a828:	f806 4b01 	strb.w	r4, [r6], #1
 800a82c:	9d07      	ldr	r5, [sp, #28]
 800a82e:	eba6 040a 	sub.w	r4, r6, sl
 800a832:	42a5      	cmp	r5, r4
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	f040 8117 	bne.w	800aa6a <_dtoa_r+0x6e2>
 800a83c:	f7f5 fd46 	bl	80002cc <__adddf3>
 800a840:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a844:	4604      	mov	r4, r0
 800a846:	460d      	mov	r5, r1
 800a848:	f7f6 f986 	bl	8000b58 <__aeabi_dcmpgt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f040 80f9 	bne.w	800aa44 <_dtoa_r+0x6bc>
 800a852:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f6 f955 	bl	8000b08 <__aeabi_dcmpeq>
 800a85e:	b118      	cbz	r0, 800a868 <_dtoa_r+0x4e0>
 800a860:	f018 0f01 	tst.w	r8, #1
 800a864:	f040 80ee 	bne.w	800aa44 <_dtoa_r+0x6bc>
 800a868:	4649      	mov	r1, r9
 800a86a:	4658      	mov	r0, fp
 800a86c:	f000 fc90 	bl	800b190 <_Bfree>
 800a870:	2300      	movs	r3, #0
 800a872:	7033      	strb	r3, [r6, #0]
 800a874:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a876:	3701      	adds	r7, #1
 800a878:	601f      	str	r7, [r3, #0]
 800a87a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 831d 	beq.w	800aebc <_dtoa_r+0xb34>
 800a882:	601e      	str	r6, [r3, #0]
 800a884:	e31a      	b.n	800aebc <_dtoa_r+0xb34>
 800a886:	07e2      	lsls	r2, r4, #31
 800a888:	d505      	bpl.n	800a896 <_dtoa_r+0x50e>
 800a88a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a88e:	f7f5 fed3 	bl	8000638 <__aeabi_dmul>
 800a892:	3601      	adds	r6, #1
 800a894:	2301      	movs	r3, #1
 800a896:	1064      	asrs	r4, r4, #1
 800a898:	3508      	adds	r5, #8
 800a89a:	e73f      	b.n	800a71c <_dtoa_r+0x394>
 800a89c:	2602      	movs	r6, #2
 800a89e:	e742      	b.n	800a726 <_dtoa_r+0x39e>
 800a8a0:	9c07      	ldr	r4, [sp, #28]
 800a8a2:	9704      	str	r7, [sp, #16]
 800a8a4:	e761      	b.n	800a76a <_dtoa_r+0x3e2>
 800a8a6:	4b27      	ldr	r3, [pc, #156]	@ (800a944 <_dtoa_r+0x5bc>)
 800a8a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8b2:	4454      	add	r4, sl
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	d053      	beq.n	800a960 <_dtoa_r+0x5d8>
 800a8b8:	4928      	ldr	r1, [pc, #160]	@ (800a95c <_dtoa_r+0x5d4>)
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	f7f5 ffe6 	bl	800088c <__aeabi_ddiv>
 800a8c0:	4633      	mov	r3, r6
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	f7f5 fd00 	bl	80002c8 <__aeabi_dsub>
 800a8c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a8cc:	4656      	mov	r6, sl
 800a8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8d2:	f7f6 f961 	bl	8000b98 <__aeabi_d2iz>
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	f7f5 fe44 	bl	8000564 <__aeabi_i2d>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8e4:	f7f5 fcf0 	bl	80002c8 <__aeabi_dsub>
 800a8e8:	3530      	adds	r5, #48	@ 0x30
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8f2:	f806 5b01 	strb.w	r5, [r6], #1
 800a8f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a8fa:	f7f6 f90f 	bl	8000b1c <__aeabi_dcmplt>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d171      	bne.n	800a9e6 <_dtoa_r+0x65e>
 800a902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a906:	4911      	ldr	r1, [pc, #68]	@ (800a94c <_dtoa_r+0x5c4>)
 800a908:	2000      	movs	r0, #0
 800a90a:	f7f5 fcdd 	bl	80002c8 <__aeabi_dsub>
 800a90e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a912:	f7f6 f903 	bl	8000b1c <__aeabi_dcmplt>
 800a916:	2800      	cmp	r0, #0
 800a918:	f040 8095 	bne.w	800aa46 <_dtoa_r+0x6be>
 800a91c:	42a6      	cmp	r6, r4
 800a91e:	f43f af50 	beq.w	800a7c2 <_dtoa_r+0x43a>
 800a922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a926:	4b0a      	ldr	r3, [pc, #40]	@ (800a950 <_dtoa_r+0x5c8>)
 800a928:	2200      	movs	r2, #0
 800a92a:	f7f5 fe85 	bl	8000638 <__aeabi_dmul>
 800a92e:	4b08      	ldr	r3, [pc, #32]	@ (800a950 <_dtoa_r+0x5c8>)
 800a930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a934:	2200      	movs	r2, #0
 800a936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a93a:	f7f5 fe7d 	bl	8000638 <__aeabi_dmul>
 800a93e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a942:	e7c4      	b.n	800a8ce <_dtoa_r+0x546>
 800a944:	0800dfc0 	.word	0x0800dfc0
 800a948:	0800df98 	.word	0x0800df98
 800a94c:	3ff00000 	.word	0x3ff00000
 800a950:	40240000 	.word	0x40240000
 800a954:	401c0000 	.word	0x401c0000
 800a958:	40140000 	.word	0x40140000
 800a95c:	3fe00000 	.word	0x3fe00000
 800a960:	4631      	mov	r1, r6
 800a962:	4628      	mov	r0, r5
 800a964:	f7f5 fe68 	bl	8000638 <__aeabi_dmul>
 800a968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a96c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a96e:	4656      	mov	r6, sl
 800a970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a974:	f7f6 f910 	bl	8000b98 <__aeabi_d2iz>
 800a978:	4605      	mov	r5, r0
 800a97a:	f7f5 fdf3 	bl	8000564 <__aeabi_i2d>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a986:	f7f5 fc9f 	bl	80002c8 <__aeabi_dsub>
 800a98a:	3530      	adds	r5, #48	@ 0x30
 800a98c:	f806 5b01 	strb.w	r5, [r6], #1
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	42a6      	cmp	r6, r4
 800a996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a99a:	f04f 0200 	mov.w	r2, #0
 800a99e:	d124      	bne.n	800a9ea <_dtoa_r+0x662>
 800a9a0:	4bac      	ldr	r3, [pc, #688]	@ (800ac54 <_dtoa_r+0x8cc>)
 800a9a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a9a6:	f7f5 fc91 	bl	80002cc <__adddf3>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9b2:	f7f6 f8d1 	bl	8000b58 <__aeabi_dcmpgt>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d145      	bne.n	800aa46 <_dtoa_r+0x6be>
 800a9ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9be:	49a5      	ldr	r1, [pc, #660]	@ (800ac54 <_dtoa_r+0x8cc>)
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	f7f5 fc81 	bl	80002c8 <__aeabi_dsub>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ce:	f7f6 f8a5 	bl	8000b1c <__aeabi_dcmplt>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	f43f aef5 	beq.w	800a7c2 <_dtoa_r+0x43a>
 800a9d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a9da:	1e73      	subs	r3, r6, #1
 800a9dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800a9de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a9e2:	2b30      	cmp	r3, #48	@ 0x30
 800a9e4:	d0f8      	beq.n	800a9d8 <_dtoa_r+0x650>
 800a9e6:	9f04      	ldr	r7, [sp, #16]
 800a9e8:	e73e      	b.n	800a868 <_dtoa_r+0x4e0>
 800a9ea:	4b9b      	ldr	r3, [pc, #620]	@ (800ac58 <_dtoa_r+0x8d0>)
 800a9ec:	f7f5 fe24 	bl	8000638 <__aeabi_dmul>
 800a9f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9f4:	e7bc      	b.n	800a970 <_dtoa_r+0x5e8>
 800a9f6:	d10c      	bne.n	800aa12 <_dtoa_r+0x68a>
 800a9f8:	4b98      	ldr	r3, [pc, #608]	@ (800ac5c <_dtoa_r+0x8d4>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa00:	f7f5 fe1a 	bl	8000638 <__aeabi_dmul>
 800aa04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa08:	f7f6 f89c 	bl	8000b44 <__aeabi_dcmpge>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	f000 8157 	beq.w	800acc0 <_dtoa_r+0x938>
 800aa12:	2400      	movs	r4, #0
 800aa14:	4625      	mov	r5, r4
 800aa16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa18:	43db      	mvns	r3, r3
 800aa1a:	9304      	str	r3, [sp, #16]
 800aa1c:	4656      	mov	r6, sl
 800aa1e:	2700      	movs	r7, #0
 800aa20:	4621      	mov	r1, r4
 800aa22:	4658      	mov	r0, fp
 800aa24:	f000 fbb4 	bl	800b190 <_Bfree>
 800aa28:	2d00      	cmp	r5, #0
 800aa2a:	d0dc      	beq.n	800a9e6 <_dtoa_r+0x65e>
 800aa2c:	b12f      	cbz	r7, 800aa3a <_dtoa_r+0x6b2>
 800aa2e:	42af      	cmp	r7, r5
 800aa30:	d003      	beq.n	800aa3a <_dtoa_r+0x6b2>
 800aa32:	4639      	mov	r1, r7
 800aa34:	4658      	mov	r0, fp
 800aa36:	f000 fbab 	bl	800b190 <_Bfree>
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	4658      	mov	r0, fp
 800aa3e:	f000 fba7 	bl	800b190 <_Bfree>
 800aa42:	e7d0      	b.n	800a9e6 <_dtoa_r+0x65e>
 800aa44:	9704      	str	r7, [sp, #16]
 800aa46:	4633      	mov	r3, r6
 800aa48:	461e      	mov	r6, r3
 800aa4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa4e:	2a39      	cmp	r2, #57	@ 0x39
 800aa50:	d107      	bne.n	800aa62 <_dtoa_r+0x6da>
 800aa52:	459a      	cmp	sl, r3
 800aa54:	d1f8      	bne.n	800aa48 <_dtoa_r+0x6c0>
 800aa56:	9a04      	ldr	r2, [sp, #16]
 800aa58:	3201      	adds	r2, #1
 800aa5a:	9204      	str	r2, [sp, #16]
 800aa5c:	2230      	movs	r2, #48	@ 0x30
 800aa5e:	f88a 2000 	strb.w	r2, [sl]
 800aa62:	781a      	ldrb	r2, [r3, #0]
 800aa64:	3201      	adds	r2, #1
 800aa66:	701a      	strb	r2, [r3, #0]
 800aa68:	e7bd      	b.n	800a9e6 <_dtoa_r+0x65e>
 800aa6a:	4b7b      	ldr	r3, [pc, #492]	@ (800ac58 <_dtoa_r+0x8d0>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f7f5 fde3 	bl	8000638 <__aeabi_dmul>
 800aa72:	2200      	movs	r2, #0
 800aa74:	2300      	movs	r3, #0
 800aa76:	4604      	mov	r4, r0
 800aa78:	460d      	mov	r5, r1
 800aa7a:	f7f6 f845 	bl	8000b08 <__aeabi_dcmpeq>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f43f aebb 	beq.w	800a7fa <_dtoa_r+0x472>
 800aa84:	e6f0      	b.n	800a868 <_dtoa_r+0x4e0>
 800aa86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa88:	2a00      	cmp	r2, #0
 800aa8a:	f000 80db 	beq.w	800ac44 <_dtoa_r+0x8bc>
 800aa8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa90:	2a01      	cmp	r2, #1
 800aa92:	f300 80bf 	bgt.w	800ac14 <_dtoa_r+0x88c>
 800aa96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	f000 80b7 	beq.w	800ac0c <_dtoa_r+0x884>
 800aa9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aaa2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aaa4:	4646      	mov	r6, r8
 800aaa6:	9a08      	ldr	r2, [sp, #32]
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	441a      	add	r2, r3
 800aaac:	4658      	mov	r0, fp
 800aaae:	4498      	add	r8, r3
 800aab0:	9208      	str	r2, [sp, #32]
 800aab2:	f000 fc6b 	bl	800b38c <__i2b>
 800aab6:	4605      	mov	r5, r0
 800aab8:	b15e      	cbz	r6, 800aad2 <_dtoa_r+0x74a>
 800aaba:	9b08      	ldr	r3, [sp, #32]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dd08      	ble.n	800aad2 <_dtoa_r+0x74a>
 800aac0:	42b3      	cmp	r3, r6
 800aac2:	9a08      	ldr	r2, [sp, #32]
 800aac4:	bfa8      	it	ge
 800aac6:	4633      	movge	r3, r6
 800aac8:	eba8 0803 	sub.w	r8, r8, r3
 800aacc:	1af6      	subs	r6, r6, r3
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	9308      	str	r3, [sp, #32]
 800aad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aad4:	b1f3      	cbz	r3, 800ab14 <_dtoa_r+0x78c>
 800aad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 80b7 	beq.w	800ac4c <_dtoa_r+0x8c4>
 800aade:	b18c      	cbz	r4, 800ab04 <_dtoa_r+0x77c>
 800aae0:	4629      	mov	r1, r5
 800aae2:	4622      	mov	r2, r4
 800aae4:	4658      	mov	r0, fp
 800aae6:	f000 fd11 	bl	800b50c <__pow5mult>
 800aaea:	464a      	mov	r2, r9
 800aaec:	4601      	mov	r1, r0
 800aaee:	4605      	mov	r5, r0
 800aaf0:	4658      	mov	r0, fp
 800aaf2:	f000 fc61 	bl	800b3b8 <__multiply>
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	9004      	str	r0, [sp, #16]
 800aafa:	4658      	mov	r0, fp
 800aafc:	f000 fb48 	bl	800b190 <_Bfree>
 800ab00:	9b04      	ldr	r3, [sp, #16]
 800ab02:	4699      	mov	r9, r3
 800ab04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab06:	1b1a      	subs	r2, r3, r4
 800ab08:	d004      	beq.n	800ab14 <_dtoa_r+0x78c>
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	4658      	mov	r0, fp
 800ab0e:	f000 fcfd 	bl	800b50c <__pow5mult>
 800ab12:	4681      	mov	r9, r0
 800ab14:	2101      	movs	r1, #1
 800ab16:	4658      	mov	r0, fp
 800ab18:	f000 fc38 	bl	800b38c <__i2b>
 800ab1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab1e:	4604      	mov	r4, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 81cf 	beq.w	800aec4 <_dtoa_r+0xb3c>
 800ab26:	461a      	mov	r2, r3
 800ab28:	4601      	mov	r1, r0
 800ab2a:	4658      	mov	r0, fp
 800ab2c:	f000 fcee 	bl	800b50c <__pow5mult>
 800ab30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	4604      	mov	r4, r0
 800ab36:	f300 8095 	bgt.w	800ac64 <_dtoa_r+0x8dc>
 800ab3a:	9b02      	ldr	r3, [sp, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f040 8087 	bne.w	800ac50 <_dtoa_r+0x8c8>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f040 8089 	bne.w	800ac60 <_dtoa_r+0x8d8>
 800ab4e:	9b03      	ldr	r3, [sp, #12]
 800ab50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab54:	0d1b      	lsrs	r3, r3, #20
 800ab56:	051b      	lsls	r3, r3, #20
 800ab58:	b12b      	cbz	r3, 800ab66 <_dtoa_r+0x7de>
 800ab5a:	9b08      	ldr	r3, [sp, #32]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	9308      	str	r3, [sp, #32]
 800ab60:	f108 0801 	add.w	r8, r8, #1
 800ab64:	2301      	movs	r3, #1
 800ab66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 81b0 	beq.w	800aed0 <_dtoa_r+0xb48>
 800ab70:	6923      	ldr	r3, [r4, #16]
 800ab72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab76:	6918      	ldr	r0, [r3, #16]
 800ab78:	f000 fbbc 	bl	800b2f4 <__hi0bits>
 800ab7c:	f1c0 0020 	rsb	r0, r0, #32
 800ab80:	9b08      	ldr	r3, [sp, #32]
 800ab82:	4418      	add	r0, r3
 800ab84:	f010 001f 	ands.w	r0, r0, #31
 800ab88:	d077      	beq.n	800ac7a <_dtoa_r+0x8f2>
 800ab8a:	f1c0 0320 	rsb	r3, r0, #32
 800ab8e:	2b04      	cmp	r3, #4
 800ab90:	dd6b      	ble.n	800ac6a <_dtoa_r+0x8e2>
 800ab92:	9b08      	ldr	r3, [sp, #32]
 800ab94:	f1c0 001c 	rsb	r0, r0, #28
 800ab98:	4403      	add	r3, r0
 800ab9a:	4480      	add	r8, r0
 800ab9c:	4406      	add	r6, r0
 800ab9e:	9308      	str	r3, [sp, #32]
 800aba0:	f1b8 0f00 	cmp.w	r8, #0
 800aba4:	dd05      	ble.n	800abb2 <_dtoa_r+0x82a>
 800aba6:	4649      	mov	r1, r9
 800aba8:	4642      	mov	r2, r8
 800abaa:	4658      	mov	r0, fp
 800abac:	f000 fd08 	bl	800b5c0 <__lshift>
 800abb0:	4681      	mov	r9, r0
 800abb2:	9b08      	ldr	r3, [sp, #32]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	dd05      	ble.n	800abc4 <_dtoa_r+0x83c>
 800abb8:	4621      	mov	r1, r4
 800abba:	461a      	mov	r2, r3
 800abbc:	4658      	mov	r0, fp
 800abbe:	f000 fcff 	bl	800b5c0 <__lshift>
 800abc2:	4604      	mov	r4, r0
 800abc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d059      	beq.n	800ac7e <_dtoa_r+0x8f6>
 800abca:	4621      	mov	r1, r4
 800abcc:	4648      	mov	r0, r9
 800abce:	f000 fd63 	bl	800b698 <__mcmp>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	da53      	bge.n	800ac7e <_dtoa_r+0x8f6>
 800abd6:	1e7b      	subs	r3, r7, #1
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	4649      	mov	r1, r9
 800abdc:	2300      	movs	r3, #0
 800abde:	220a      	movs	r2, #10
 800abe0:	4658      	mov	r0, fp
 800abe2:	f000 faf7 	bl	800b1d4 <__multadd>
 800abe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abe8:	4681      	mov	r9, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 8172 	beq.w	800aed4 <_dtoa_r+0xb4c>
 800abf0:	2300      	movs	r3, #0
 800abf2:	4629      	mov	r1, r5
 800abf4:	220a      	movs	r2, #10
 800abf6:	4658      	mov	r0, fp
 800abf8:	f000 faec 	bl	800b1d4 <__multadd>
 800abfc:	9b00      	ldr	r3, [sp, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	4605      	mov	r5, r0
 800ac02:	dc67      	bgt.n	800acd4 <_dtoa_r+0x94c>
 800ac04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	dc41      	bgt.n	800ac8e <_dtoa_r+0x906>
 800ac0a:	e063      	b.n	800acd4 <_dtoa_r+0x94c>
 800ac0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ac12:	e746      	b.n	800aaa2 <_dtoa_r+0x71a>
 800ac14:	9b07      	ldr	r3, [sp, #28]
 800ac16:	1e5c      	subs	r4, r3, #1
 800ac18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	bfbf      	itttt	lt
 800ac1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ac20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ac22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ac24:	1ae3      	sublt	r3, r4, r3
 800ac26:	bfb4      	ite	lt
 800ac28:	18d2      	addlt	r2, r2, r3
 800ac2a:	1b1c      	subge	r4, r3, r4
 800ac2c:	9b07      	ldr	r3, [sp, #28]
 800ac2e:	bfbc      	itt	lt
 800ac30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ac32:	2400      	movlt	r4, #0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfb5      	itete	lt
 800ac38:	eba8 0603 	sublt.w	r6, r8, r3
 800ac3c:	9b07      	ldrge	r3, [sp, #28]
 800ac3e:	2300      	movlt	r3, #0
 800ac40:	4646      	movge	r6, r8
 800ac42:	e730      	b.n	800aaa6 <_dtoa_r+0x71e>
 800ac44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ac46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ac48:	4646      	mov	r6, r8
 800ac4a:	e735      	b.n	800aab8 <_dtoa_r+0x730>
 800ac4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac4e:	e75c      	b.n	800ab0a <_dtoa_r+0x782>
 800ac50:	2300      	movs	r3, #0
 800ac52:	e788      	b.n	800ab66 <_dtoa_r+0x7de>
 800ac54:	3fe00000 	.word	0x3fe00000
 800ac58:	40240000 	.word	0x40240000
 800ac5c:	40140000 	.word	0x40140000
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	e780      	b.n	800ab66 <_dtoa_r+0x7de>
 800ac64:	2300      	movs	r3, #0
 800ac66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac68:	e782      	b.n	800ab70 <_dtoa_r+0x7e8>
 800ac6a:	d099      	beq.n	800aba0 <_dtoa_r+0x818>
 800ac6c:	9a08      	ldr	r2, [sp, #32]
 800ac6e:	331c      	adds	r3, #28
 800ac70:	441a      	add	r2, r3
 800ac72:	4498      	add	r8, r3
 800ac74:	441e      	add	r6, r3
 800ac76:	9208      	str	r2, [sp, #32]
 800ac78:	e792      	b.n	800aba0 <_dtoa_r+0x818>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	e7f6      	b.n	800ac6c <_dtoa_r+0x8e4>
 800ac7e:	9b07      	ldr	r3, [sp, #28]
 800ac80:	9704      	str	r7, [sp, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	dc20      	bgt.n	800acc8 <_dtoa_r+0x940>
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	dd1e      	ble.n	800accc <_dtoa_r+0x944>
 800ac8e:	9b00      	ldr	r3, [sp, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f47f aec0 	bne.w	800aa16 <_dtoa_r+0x68e>
 800ac96:	4621      	mov	r1, r4
 800ac98:	2205      	movs	r2, #5
 800ac9a:	4658      	mov	r0, fp
 800ac9c:	f000 fa9a 	bl	800b1d4 <__multadd>
 800aca0:	4601      	mov	r1, r0
 800aca2:	4604      	mov	r4, r0
 800aca4:	4648      	mov	r0, r9
 800aca6:	f000 fcf7 	bl	800b698 <__mcmp>
 800acaa:	2800      	cmp	r0, #0
 800acac:	f77f aeb3 	ble.w	800aa16 <_dtoa_r+0x68e>
 800acb0:	4656      	mov	r6, sl
 800acb2:	2331      	movs	r3, #49	@ 0x31
 800acb4:	f806 3b01 	strb.w	r3, [r6], #1
 800acb8:	9b04      	ldr	r3, [sp, #16]
 800acba:	3301      	adds	r3, #1
 800acbc:	9304      	str	r3, [sp, #16]
 800acbe:	e6ae      	b.n	800aa1e <_dtoa_r+0x696>
 800acc0:	9c07      	ldr	r4, [sp, #28]
 800acc2:	9704      	str	r7, [sp, #16]
 800acc4:	4625      	mov	r5, r4
 800acc6:	e7f3      	b.n	800acb0 <_dtoa_r+0x928>
 800acc8:	9b07      	ldr	r3, [sp, #28]
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 8104 	beq.w	800aedc <_dtoa_r+0xb54>
 800acd4:	2e00      	cmp	r6, #0
 800acd6:	dd05      	ble.n	800ace4 <_dtoa_r+0x95c>
 800acd8:	4629      	mov	r1, r5
 800acda:	4632      	mov	r2, r6
 800acdc:	4658      	mov	r0, fp
 800acde:	f000 fc6f 	bl	800b5c0 <__lshift>
 800ace2:	4605      	mov	r5, r0
 800ace4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d05a      	beq.n	800ada0 <_dtoa_r+0xa18>
 800acea:	6869      	ldr	r1, [r5, #4]
 800acec:	4658      	mov	r0, fp
 800acee:	f000 fa0f 	bl	800b110 <_Balloc>
 800acf2:	4606      	mov	r6, r0
 800acf4:	b928      	cbnz	r0, 800ad02 <_dtoa_r+0x97a>
 800acf6:	4b84      	ldr	r3, [pc, #528]	@ (800af08 <_dtoa_r+0xb80>)
 800acf8:	4602      	mov	r2, r0
 800acfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800acfe:	f7ff bb5a 	b.w	800a3b6 <_dtoa_r+0x2e>
 800ad02:	692a      	ldr	r2, [r5, #16]
 800ad04:	3202      	adds	r2, #2
 800ad06:	0092      	lsls	r2, r2, #2
 800ad08:	f105 010c 	add.w	r1, r5, #12
 800ad0c:	300c      	adds	r0, #12
 800ad0e:	f002 f8d1 	bl	800ceb4 <memcpy>
 800ad12:	2201      	movs	r2, #1
 800ad14:	4631      	mov	r1, r6
 800ad16:	4658      	mov	r0, fp
 800ad18:	f000 fc52 	bl	800b5c0 <__lshift>
 800ad1c:	f10a 0301 	add.w	r3, sl, #1
 800ad20:	9307      	str	r3, [sp, #28]
 800ad22:	9b00      	ldr	r3, [sp, #0]
 800ad24:	4453      	add	r3, sl
 800ad26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	462f      	mov	r7, r5
 800ad30:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad32:	4605      	mov	r5, r0
 800ad34:	9b07      	ldr	r3, [sp, #28]
 800ad36:	4621      	mov	r1, r4
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	4648      	mov	r0, r9
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	f7ff fa99 	bl	800a274 <quorem>
 800ad42:	4639      	mov	r1, r7
 800ad44:	9002      	str	r0, [sp, #8]
 800ad46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad4a:	4648      	mov	r0, r9
 800ad4c:	f000 fca4 	bl	800b698 <__mcmp>
 800ad50:	462a      	mov	r2, r5
 800ad52:	9008      	str	r0, [sp, #32]
 800ad54:	4621      	mov	r1, r4
 800ad56:	4658      	mov	r0, fp
 800ad58:	f000 fcba 	bl	800b6d0 <__mdiff>
 800ad5c:	68c2      	ldr	r2, [r0, #12]
 800ad5e:	4606      	mov	r6, r0
 800ad60:	bb02      	cbnz	r2, 800ada4 <_dtoa_r+0xa1c>
 800ad62:	4601      	mov	r1, r0
 800ad64:	4648      	mov	r0, r9
 800ad66:	f000 fc97 	bl	800b698 <__mcmp>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	4658      	mov	r0, fp
 800ad70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad72:	f000 fa0d 	bl	800b190 <_Bfree>
 800ad76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad7a:	9e07      	ldr	r6, [sp, #28]
 800ad7c:	ea43 0102 	orr.w	r1, r3, r2
 800ad80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad82:	4319      	orrs	r1, r3
 800ad84:	d110      	bne.n	800ada8 <_dtoa_r+0xa20>
 800ad86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad8a:	d029      	beq.n	800ade0 <_dtoa_r+0xa58>
 800ad8c:	9b08      	ldr	r3, [sp, #32]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dd02      	ble.n	800ad98 <_dtoa_r+0xa10>
 800ad92:	9b02      	ldr	r3, [sp, #8]
 800ad94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ad98:	9b00      	ldr	r3, [sp, #0]
 800ad9a:	f883 8000 	strb.w	r8, [r3]
 800ad9e:	e63f      	b.n	800aa20 <_dtoa_r+0x698>
 800ada0:	4628      	mov	r0, r5
 800ada2:	e7bb      	b.n	800ad1c <_dtoa_r+0x994>
 800ada4:	2201      	movs	r2, #1
 800ada6:	e7e1      	b.n	800ad6c <_dtoa_r+0x9e4>
 800ada8:	9b08      	ldr	r3, [sp, #32]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	db04      	blt.n	800adb8 <_dtoa_r+0xa30>
 800adae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adb0:	430b      	orrs	r3, r1
 800adb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adb4:	430b      	orrs	r3, r1
 800adb6:	d120      	bne.n	800adfa <_dtoa_r+0xa72>
 800adb8:	2a00      	cmp	r2, #0
 800adba:	dded      	ble.n	800ad98 <_dtoa_r+0xa10>
 800adbc:	4649      	mov	r1, r9
 800adbe:	2201      	movs	r2, #1
 800adc0:	4658      	mov	r0, fp
 800adc2:	f000 fbfd 	bl	800b5c0 <__lshift>
 800adc6:	4621      	mov	r1, r4
 800adc8:	4681      	mov	r9, r0
 800adca:	f000 fc65 	bl	800b698 <__mcmp>
 800adce:	2800      	cmp	r0, #0
 800add0:	dc03      	bgt.n	800adda <_dtoa_r+0xa52>
 800add2:	d1e1      	bne.n	800ad98 <_dtoa_r+0xa10>
 800add4:	f018 0f01 	tst.w	r8, #1
 800add8:	d0de      	beq.n	800ad98 <_dtoa_r+0xa10>
 800adda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800adde:	d1d8      	bne.n	800ad92 <_dtoa_r+0xa0a>
 800ade0:	9a00      	ldr	r2, [sp, #0]
 800ade2:	2339      	movs	r3, #57	@ 0x39
 800ade4:	7013      	strb	r3, [r2, #0]
 800ade6:	4633      	mov	r3, r6
 800ade8:	461e      	mov	r6, r3
 800adea:	3b01      	subs	r3, #1
 800adec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800adf0:	2a39      	cmp	r2, #57	@ 0x39
 800adf2:	d052      	beq.n	800ae9a <_dtoa_r+0xb12>
 800adf4:	3201      	adds	r2, #1
 800adf6:	701a      	strb	r2, [r3, #0]
 800adf8:	e612      	b.n	800aa20 <_dtoa_r+0x698>
 800adfa:	2a00      	cmp	r2, #0
 800adfc:	dd07      	ble.n	800ae0e <_dtoa_r+0xa86>
 800adfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae02:	d0ed      	beq.n	800ade0 <_dtoa_r+0xa58>
 800ae04:	9a00      	ldr	r2, [sp, #0]
 800ae06:	f108 0301 	add.w	r3, r8, #1
 800ae0a:	7013      	strb	r3, [r2, #0]
 800ae0c:	e608      	b.n	800aa20 <_dtoa_r+0x698>
 800ae0e:	9b07      	ldr	r3, [sp, #28]
 800ae10:	9a07      	ldr	r2, [sp, #28]
 800ae12:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ae16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d028      	beq.n	800ae6e <_dtoa_r+0xae6>
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	2300      	movs	r3, #0
 800ae20:	220a      	movs	r2, #10
 800ae22:	4658      	mov	r0, fp
 800ae24:	f000 f9d6 	bl	800b1d4 <__multadd>
 800ae28:	42af      	cmp	r7, r5
 800ae2a:	4681      	mov	r9, r0
 800ae2c:	f04f 0300 	mov.w	r3, #0
 800ae30:	f04f 020a 	mov.w	r2, #10
 800ae34:	4639      	mov	r1, r7
 800ae36:	4658      	mov	r0, fp
 800ae38:	d107      	bne.n	800ae4a <_dtoa_r+0xac2>
 800ae3a:	f000 f9cb 	bl	800b1d4 <__multadd>
 800ae3e:	4607      	mov	r7, r0
 800ae40:	4605      	mov	r5, r0
 800ae42:	9b07      	ldr	r3, [sp, #28]
 800ae44:	3301      	adds	r3, #1
 800ae46:	9307      	str	r3, [sp, #28]
 800ae48:	e774      	b.n	800ad34 <_dtoa_r+0x9ac>
 800ae4a:	f000 f9c3 	bl	800b1d4 <__multadd>
 800ae4e:	4629      	mov	r1, r5
 800ae50:	4607      	mov	r7, r0
 800ae52:	2300      	movs	r3, #0
 800ae54:	220a      	movs	r2, #10
 800ae56:	4658      	mov	r0, fp
 800ae58:	f000 f9bc 	bl	800b1d4 <__multadd>
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	e7f0      	b.n	800ae42 <_dtoa_r+0xaba>
 800ae60:	9b00      	ldr	r3, [sp, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	bfcc      	ite	gt
 800ae66:	461e      	movgt	r6, r3
 800ae68:	2601      	movle	r6, #1
 800ae6a:	4456      	add	r6, sl
 800ae6c:	2700      	movs	r7, #0
 800ae6e:	4649      	mov	r1, r9
 800ae70:	2201      	movs	r2, #1
 800ae72:	4658      	mov	r0, fp
 800ae74:	f000 fba4 	bl	800b5c0 <__lshift>
 800ae78:	4621      	mov	r1, r4
 800ae7a:	4681      	mov	r9, r0
 800ae7c:	f000 fc0c 	bl	800b698 <__mcmp>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	dcb0      	bgt.n	800ade6 <_dtoa_r+0xa5e>
 800ae84:	d102      	bne.n	800ae8c <_dtoa_r+0xb04>
 800ae86:	f018 0f01 	tst.w	r8, #1
 800ae8a:	d1ac      	bne.n	800ade6 <_dtoa_r+0xa5e>
 800ae8c:	4633      	mov	r3, r6
 800ae8e:	461e      	mov	r6, r3
 800ae90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae94:	2a30      	cmp	r2, #48	@ 0x30
 800ae96:	d0fa      	beq.n	800ae8e <_dtoa_r+0xb06>
 800ae98:	e5c2      	b.n	800aa20 <_dtoa_r+0x698>
 800ae9a:	459a      	cmp	sl, r3
 800ae9c:	d1a4      	bne.n	800ade8 <_dtoa_r+0xa60>
 800ae9e:	9b04      	ldr	r3, [sp, #16]
 800aea0:	3301      	adds	r3, #1
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	2331      	movs	r3, #49	@ 0x31
 800aea6:	f88a 3000 	strb.w	r3, [sl]
 800aeaa:	e5b9      	b.n	800aa20 <_dtoa_r+0x698>
 800aeac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aeae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800af0c <_dtoa_r+0xb84>
 800aeb2:	b11b      	cbz	r3, 800aebc <_dtoa_r+0xb34>
 800aeb4:	f10a 0308 	add.w	r3, sl, #8
 800aeb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	4650      	mov	r0, sl
 800aebe:	b019      	add	sp, #100	@ 0x64
 800aec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	f77f ae37 	ble.w	800ab3a <_dtoa_r+0x7b2>
 800aecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aece:	930a      	str	r3, [sp, #40]	@ 0x28
 800aed0:	2001      	movs	r0, #1
 800aed2:	e655      	b.n	800ab80 <_dtoa_r+0x7f8>
 800aed4:	9b00      	ldr	r3, [sp, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f77f aed6 	ble.w	800ac88 <_dtoa_r+0x900>
 800aedc:	4656      	mov	r6, sl
 800aede:	4621      	mov	r1, r4
 800aee0:	4648      	mov	r0, r9
 800aee2:	f7ff f9c7 	bl	800a274 <quorem>
 800aee6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aeea:	f806 8b01 	strb.w	r8, [r6], #1
 800aeee:	9b00      	ldr	r3, [sp, #0]
 800aef0:	eba6 020a 	sub.w	r2, r6, sl
 800aef4:	4293      	cmp	r3, r2
 800aef6:	ddb3      	ble.n	800ae60 <_dtoa_r+0xad8>
 800aef8:	4649      	mov	r1, r9
 800aefa:	2300      	movs	r3, #0
 800aefc:	220a      	movs	r2, #10
 800aefe:	4658      	mov	r0, fp
 800af00:	f000 f968 	bl	800b1d4 <__multadd>
 800af04:	4681      	mov	r9, r0
 800af06:	e7ea      	b.n	800aede <_dtoa_r+0xb56>
 800af08:	0800df1c 	.word	0x0800df1c
 800af0c:	0800deb7 	.word	0x0800deb7

0800af10 <_free_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4605      	mov	r5, r0
 800af14:	2900      	cmp	r1, #0
 800af16:	d041      	beq.n	800af9c <_free_r+0x8c>
 800af18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af1c:	1f0c      	subs	r4, r1, #4
 800af1e:	2b00      	cmp	r3, #0
 800af20:	bfb8      	it	lt
 800af22:	18e4      	addlt	r4, r4, r3
 800af24:	f000 f8e8 	bl	800b0f8 <__malloc_lock>
 800af28:	4a1d      	ldr	r2, [pc, #116]	@ (800afa0 <_free_r+0x90>)
 800af2a:	6813      	ldr	r3, [r2, #0]
 800af2c:	b933      	cbnz	r3, 800af3c <_free_r+0x2c>
 800af2e:	6063      	str	r3, [r4, #4]
 800af30:	6014      	str	r4, [r2, #0]
 800af32:	4628      	mov	r0, r5
 800af34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af38:	f000 b8e4 	b.w	800b104 <__malloc_unlock>
 800af3c:	42a3      	cmp	r3, r4
 800af3e:	d908      	bls.n	800af52 <_free_r+0x42>
 800af40:	6820      	ldr	r0, [r4, #0]
 800af42:	1821      	adds	r1, r4, r0
 800af44:	428b      	cmp	r3, r1
 800af46:	bf01      	itttt	eq
 800af48:	6819      	ldreq	r1, [r3, #0]
 800af4a:	685b      	ldreq	r3, [r3, #4]
 800af4c:	1809      	addeq	r1, r1, r0
 800af4e:	6021      	streq	r1, [r4, #0]
 800af50:	e7ed      	b.n	800af2e <_free_r+0x1e>
 800af52:	461a      	mov	r2, r3
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	b10b      	cbz	r3, 800af5c <_free_r+0x4c>
 800af58:	42a3      	cmp	r3, r4
 800af5a:	d9fa      	bls.n	800af52 <_free_r+0x42>
 800af5c:	6811      	ldr	r1, [r2, #0]
 800af5e:	1850      	adds	r0, r2, r1
 800af60:	42a0      	cmp	r0, r4
 800af62:	d10b      	bne.n	800af7c <_free_r+0x6c>
 800af64:	6820      	ldr	r0, [r4, #0]
 800af66:	4401      	add	r1, r0
 800af68:	1850      	adds	r0, r2, r1
 800af6a:	4283      	cmp	r3, r0
 800af6c:	6011      	str	r1, [r2, #0]
 800af6e:	d1e0      	bne.n	800af32 <_free_r+0x22>
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	6053      	str	r3, [r2, #4]
 800af76:	4408      	add	r0, r1
 800af78:	6010      	str	r0, [r2, #0]
 800af7a:	e7da      	b.n	800af32 <_free_r+0x22>
 800af7c:	d902      	bls.n	800af84 <_free_r+0x74>
 800af7e:	230c      	movs	r3, #12
 800af80:	602b      	str	r3, [r5, #0]
 800af82:	e7d6      	b.n	800af32 <_free_r+0x22>
 800af84:	6820      	ldr	r0, [r4, #0]
 800af86:	1821      	adds	r1, r4, r0
 800af88:	428b      	cmp	r3, r1
 800af8a:	bf04      	itt	eq
 800af8c:	6819      	ldreq	r1, [r3, #0]
 800af8e:	685b      	ldreq	r3, [r3, #4]
 800af90:	6063      	str	r3, [r4, #4]
 800af92:	bf04      	itt	eq
 800af94:	1809      	addeq	r1, r1, r0
 800af96:	6021      	streq	r1, [r4, #0]
 800af98:	6054      	str	r4, [r2, #4]
 800af9a:	e7ca      	b.n	800af32 <_free_r+0x22>
 800af9c:	bd38      	pop	{r3, r4, r5, pc}
 800af9e:	bf00      	nop
 800afa0:	20000f94 	.word	0x20000f94

0800afa4 <malloc>:
 800afa4:	4b02      	ldr	r3, [pc, #8]	@ (800afb0 <malloc+0xc>)
 800afa6:	4601      	mov	r1, r0
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	f000 b825 	b.w	800aff8 <_malloc_r>
 800afae:	bf00      	nop
 800afb0:	20000038 	.word	0x20000038

0800afb4 <sbrk_aligned>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	4e0f      	ldr	r6, [pc, #60]	@ (800aff4 <sbrk_aligned+0x40>)
 800afb8:	460c      	mov	r4, r1
 800afba:	6831      	ldr	r1, [r6, #0]
 800afbc:	4605      	mov	r5, r0
 800afbe:	b911      	cbnz	r1, 800afc6 <sbrk_aligned+0x12>
 800afc0:	f001 ff68 	bl	800ce94 <_sbrk_r>
 800afc4:	6030      	str	r0, [r6, #0]
 800afc6:	4621      	mov	r1, r4
 800afc8:	4628      	mov	r0, r5
 800afca:	f001 ff63 	bl	800ce94 <_sbrk_r>
 800afce:	1c43      	adds	r3, r0, #1
 800afd0:	d103      	bne.n	800afda <sbrk_aligned+0x26>
 800afd2:	f04f 34ff 	mov.w	r4, #4294967295
 800afd6:	4620      	mov	r0, r4
 800afd8:	bd70      	pop	{r4, r5, r6, pc}
 800afda:	1cc4      	adds	r4, r0, #3
 800afdc:	f024 0403 	bic.w	r4, r4, #3
 800afe0:	42a0      	cmp	r0, r4
 800afe2:	d0f8      	beq.n	800afd6 <sbrk_aligned+0x22>
 800afe4:	1a21      	subs	r1, r4, r0
 800afe6:	4628      	mov	r0, r5
 800afe8:	f001 ff54 	bl	800ce94 <_sbrk_r>
 800afec:	3001      	adds	r0, #1
 800afee:	d1f2      	bne.n	800afd6 <sbrk_aligned+0x22>
 800aff0:	e7ef      	b.n	800afd2 <sbrk_aligned+0x1e>
 800aff2:	bf00      	nop
 800aff4:	20000f90 	.word	0x20000f90

0800aff8 <_malloc_r>:
 800aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800affc:	1ccd      	adds	r5, r1, #3
 800affe:	f025 0503 	bic.w	r5, r5, #3
 800b002:	3508      	adds	r5, #8
 800b004:	2d0c      	cmp	r5, #12
 800b006:	bf38      	it	cc
 800b008:	250c      	movcc	r5, #12
 800b00a:	2d00      	cmp	r5, #0
 800b00c:	4606      	mov	r6, r0
 800b00e:	db01      	blt.n	800b014 <_malloc_r+0x1c>
 800b010:	42a9      	cmp	r1, r5
 800b012:	d904      	bls.n	800b01e <_malloc_r+0x26>
 800b014:	230c      	movs	r3, #12
 800b016:	6033      	str	r3, [r6, #0]
 800b018:	2000      	movs	r0, #0
 800b01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0f4 <_malloc_r+0xfc>
 800b022:	f000 f869 	bl	800b0f8 <__malloc_lock>
 800b026:	f8d8 3000 	ldr.w	r3, [r8]
 800b02a:	461c      	mov	r4, r3
 800b02c:	bb44      	cbnz	r4, 800b080 <_malloc_r+0x88>
 800b02e:	4629      	mov	r1, r5
 800b030:	4630      	mov	r0, r6
 800b032:	f7ff ffbf 	bl	800afb4 <sbrk_aligned>
 800b036:	1c43      	adds	r3, r0, #1
 800b038:	4604      	mov	r4, r0
 800b03a:	d158      	bne.n	800b0ee <_malloc_r+0xf6>
 800b03c:	f8d8 4000 	ldr.w	r4, [r8]
 800b040:	4627      	mov	r7, r4
 800b042:	2f00      	cmp	r7, #0
 800b044:	d143      	bne.n	800b0ce <_malloc_r+0xd6>
 800b046:	2c00      	cmp	r4, #0
 800b048:	d04b      	beq.n	800b0e2 <_malloc_r+0xea>
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	4639      	mov	r1, r7
 800b04e:	4630      	mov	r0, r6
 800b050:	eb04 0903 	add.w	r9, r4, r3
 800b054:	f001 ff1e 	bl	800ce94 <_sbrk_r>
 800b058:	4581      	cmp	r9, r0
 800b05a:	d142      	bne.n	800b0e2 <_malloc_r+0xea>
 800b05c:	6821      	ldr	r1, [r4, #0]
 800b05e:	1a6d      	subs	r5, r5, r1
 800b060:	4629      	mov	r1, r5
 800b062:	4630      	mov	r0, r6
 800b064:	f7ff ffa6 	bl	800afb4 <sbrk_aligned>
 800b068:	3001      	adds	r0, #1
 800b06a:	d03a      	beq.n	800b0e2 <_malloc_r+0xea>
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	442b      	add	r3, r5
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	f8d8 3000 	ldr.w	r3, [r8]
 800b076:	685a      	ldr	r2, [r3, #4]
 800b078:	bb62      	cbnz	r2, 800b0d4 <_malloc_r+0xdc>
 800b07a:	f8c8 7000 	str.w	r7, [r8]
 800b07e:	e00f      	b.n	800b0a0 <_malloc_r+0xa8>
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	1b52      	subs	r2, r2, r5
 800b084:	d420      	bmi.n	800b0c8 <_malloc_r+0xd0>
 800b086:	2a0b      	cmp	r2, #11
 800b088:	d917      	bls.n	800b0ba <_malloc_r+0xc2>
 800b08a:	1961      	adds	r1, r4, r5
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	6025      	str	r5, [r4, #0]
 800b090:	bf18      	it	ne
 800b092:	6059      	strne	r1, [r3, #4]
 800b094:	6863      	ldr	r3, [r4, #4]
 800b096:	bf08      	it	eq
 800b098:	f8c8 1000 	streq.w	r1, [r8]
 800b09c:	5162      	str	r2, [r4, r5]
 800b09e:	604b      	str	r3, [r1, #4]
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f000 f82f 	bl	800b104 <__malloc_unlock>
 800b0a6:	f104 000b 	add.w	r0, r4, #11
 800b0aa:	1d23      	adds	r3, r4, #4
 800b0ac:	f020 0007 	bic.w	r0, r0, #7
 800b0b0:	1ac2      	subs	r2, r0, r3
 800b0b2:	bf1c      	itt	ne
 800b0b4:	1a1b      	subne	r3, r3, r0
 800b0b6:	50a3      	strne	r3, [r4, r2]
 800b0b8:	e7af      	b.n	800b01a <_malloc_r+0x22>
 800b0ba:	6862      	ldr	r2, [r4, #4]
 800b0bc:	42a3      	cmp	r3, r4
 800b0be:	bf0c      	ite	eq
 800b0c0:	f8c8 2000 	streq.w	r2, [r8]
 800b0c4:	605a      	strne	r2, [r3, #4]
 800b0c6:	e7eb      	b.n	800b0a0 <_malloc_r+0xa8>
 800b0c8:	4623      	mov	r3, r4
 800b0ca:	6864      	ldr	r4, [r4, #4]
 800b0cc:	e7ae      	b.n	800b02c <_malloc_r+0x34>
 800b0ce:	463c      	mov	r4, r7
 800b0d0:	687f      	ldr	r7, [r7, #4]
 800b0d2:	e7b6      	b.n	800b042 <_malloc_r+0x4a>
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	42a3      	cmp	r3, r4
 800b0da:	d1fb      	bne.n	800b0d4 <_malloc_r+0xdc>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	6053      	str	r3, [r2, #4]
 800b0e0:	e7de      	b.n	800b0a0 <_malloc_r+0xa8>
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	6033      	str	r3, [r6, #0]
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f000 f80c 	bl	800b104 <__malloc_unlock>
 800b0ec:	e794      	b.n	800b018 <_malloc_r+0x20>
 800b0ee:	6005      	str	r5, [r0, #0]
 800b0f0:	e7d6      	b.n	800b0a0 <_malloc_r+0xa8>
 800b0f2:	bf00      	nop
 800b0f4:	20000f94 	.word	0x20000f94

0800b0f8 <__malloc_lock>:
 800b0f8:	4801      	ldr	r0, [pc, #4]	@ (800b100 <__malloc_lock+0x8>)
 800b0fa:	f7ff b894 	b.w	800a226 <__retarget_lock_acquire_recursive>
 800b0fe:	bf00      	nop
 800b100:	20000f8c 	.word	0x20000f8c

0800b104 <__malloc_unlock>:
 800b104:	4801      	ldr	r0, [pc, #4]	@ (800b10c <__malloc_unlock+0x8>)
 800b106:	f7ff b88f 	b.w	800a228 <__retarget_lock_release_recursive>
 800b10a:	bf00      	nop
 800b10c:	20000f8c 	.word	0x20000f8c

0800b110 <_Balloc>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	69c6      	ldr	r6, [r0, #28]
 800b114:	4604      	mov	r4, r0
 800b116:	460d      	mov	r5, r1
 800b118:	b976      	cbnz	r6, 800b138 <_Balloc+0x28>
 800b11a:	2010      	movs	r0, #16
 800b11c:	f7ff ff42 	bl	800afa4 <malloc>
 800b120:	4602      	mov	r2, r0
 800b122:	61e0      	str	r0, [r4, #28]
 800b124:	b920      	cbnz	r0, 800b130 <_Balloc+0x20>
 800b126:	4b18      	ldr	r3, [pc, #96]	@ (800b188 <_Balloc+0x78>)
 800b128:	4818      	ldr	r0, [pc, #96]	@ (800b18c <_Balloc+0x7c>)
 800b12a:	216b      	movs	r1, #107	@ 0x6b
 800b12c:	f7ff f884 	bl	800a238 <__assert_func>
 800b130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b134:	6006      	str	r6, [r0, #0]
 800b136:	60c6      	str	r6, [r0, #12]
 800b138:	69e6      	ldr	r6, [r4, #28]
 800b13a:	68f3      	ldr	r3, [r6, #12]
 800b13c:	b183      	cbz	r3, 800b160 <_Balloc+0x50>
 800b13e:	69e3      	ldr	r3, [r4, #28]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b146:	b9b8      	cbnz	r0, 800b178 <_Balloc+0x68>
 800b148:	2101      	movs	r1, #1
 800b14a:	fa01 f605 	lsl.w	r6, r1, r5
 800b14e:	1d72      	adds	r2, r6, #5
 800b150:	0092      	lsls	r2, r2, #2
 800b152:	4620      	mov	r0, r4
 800b154:	f001 fecb 	bl	800ceee <_calloc_r>
 800b158:	b160      	cbz	r0, 800b174 <_Balloc+0x64>
 800b15a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b15e:	e00e      	b.n	800b17e <_Balloc+0x6e>
 800b160:	2221      	movs	r2, #33	@ 0x21
 800b162:	2104      	movs	r1, #4
 800b164:	4620      	mov	r0, r4
 800b166:	f001 fec2 	bl	800ceee <_calloc_r>
 800b16a:	69e3      	ldr	r3, [r4, #28]
 800b16c:	60f0      	str	r0, [r6, #12]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1e4      	bne.n	800b13e <_Balloc+0x2e>
 800b174:	2000      	movs	r0, #0
 800b176:	bd70      	pop	{r4, r5, r6, pc}
 800b178:	6802      	ldr	r2, [r0, #0]
 800b17a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b17e:	2300      	movs	r3, #0
 800b180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b184:	e7f7      	b.n	800b176 <_Balloc+0x66>
 800b186:	bf00      	nop
 800b188:	0800de0a 	.word	0x0800de0a
 800b18c:	0800df2d 	.word	0x0800df2d

0800b190 <_Bfree>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	69c6      	ldr	r6, [r0, #28]
 800b194:	4605      	mov	r5, r0
 800b196:	460c      	mov	r4, r1
 800b198:	b976      	cbnz	r6, 800b1b8 <_Bfree+0x28>
 800b19a:	2010      	movs	r0, #16
 800b19c:	f7ff ff02 	bl	800afa4 <malloc>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	61e8      	str	r0, [r5, #28]
 800b1a4:	b920      	cbnz	r0, 800b1b0 <_Bfree+0x20>
 800b1a6:	4b09      	ldr	r3, [pc, #36]	@ (800b1cc <_Bfree+0x3c>)
 800b1a8:	4809      	ldr	r0, [pc, #36]	@ (800b1d0 <_Bfree+0x40>)
 800b1aa:	218f      	movs	r1, #143	@ 0x8f
 800b1ac:	f7ff f844 	bl	800a238 <__assert_func>
 800b1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1b4:	6006      	str	r6, [r0, #0]
 800b1b6:	60c6      	str	r6, [r0, #12]
 800b1b8:	b13c      	cbz	r4, 800b1ca <_Bfree+0x3a>
 800b1ba:	69eb      	ldr	r3, [r5, #28]
 800b1bc:	6862      	ldr	r2, [r4, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1c4:	6021      	str	r1, [r4, #0]
 800b1c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	0800de0a 	.word	0x0800de0a
 800b1d0:	0800df2d 	.word	0x0800df2d

0800b1d4 <__multadd>:
 800b1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d8:	690d      	ldr	r5, [r1, #16]
 800b1da:	4607      	mov	r7, r0
 800b1dc:	460c      	mov	r4, r1
 800b1de:	461e      	mov	r6, r3
 800b1e0:	f101 0c14 	add.w	ip, r1, #20
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b1ea:	b299      	uxth	r1, r3
 800b1ec:	fb02 6101 	mla	r1, r2, r1, r6
 800b1f0:	0c1e      	lsrs	r6, r3, #16
 800b1f2:	0c0b      	lsrs	r3, r1, #16
 800b1f4:	fb02 3306 	mla	r3, r2, r6, r3
 800b1f8:	b289      	uxth	r1, r1
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b200:	4285      	cmp	r5, r0
 800b202:	f84c 1b04 	str.w	r1, [ip], #4
 800b206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b20a:	dcec      	bgt.n	800b1e6 <__multadd+0x12>
 800b20c:	b30e      	cbz	r6, 800b252 <__multadd+0x7e>
 800b20e:	68a3      	ldr	r3, [r4, #8]
 800b210:	42ab      	cmp	r3, r5
 800b212:	dc19      	bgt.n	800b248 <__multadd+0x74>
 800b214:	6861      	ldr	r1, [r4, #4]
 800b216:	4638      	mov	r0, r7
 800b218:	3101      	adds	r1, #1
 800b21a:	f7ff ff79 	bl	800b110 <_Balloc>
 800b21e:	4680      	mov	r8, r0
 800b220:	b928      	cbnz	r0, 800b22e <__multadd+0x5a>
 800b222:	4602      	mov	r2, r0
 800b224:	4b0c      	ldr	r3, [pc, #48]	@ (800b258 <__multadd+0x84>)
 800b226:	480d      	ldr	r0, [pc, #52]	@ (800b25c <__multadd+0x88>)
 800b228:	21ba      	movs	r1, #186	@ 0xba
 800b22a:	f7ff f805 	bl	800a238 <__assert_func>
 800b22e:	6922      	ldr	r2, [r4, #16]
 800b230:	3202      	adds	r2, #2
 800b232:	f104 010c 	add.w	r1, r4, #12
 800b236:	0092      	lsls	r2, r2, #2
 800b238:	300c      	adds	r0, #12
 800b23a:	f001 fe3b 	bl	800ceb4 <memcpy>
 800b23e:	4621      	mov	r1, r4
 800b240:	4638      	mov	r0, r7
 800b242:	f7ff ffa5 	bl	800b190 <_Bfree>
 800b246:	4644      	mov	r4, r8
 800b248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b24c:	3501      	adds	r5, #1
 800b24e:	615e      	str	r6, [r3, #20]
 800b250:	6125      	str	r5, [r4, #16]
 800b252:	4620      	mov	r0, r4
 800b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b258:	0800df1c 	.word	0x0800df1c
 800b25c:	0800df2d 	.word	0x0800df2d

0800b260 <__s2b>:
 800b260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b264:	460c      	mov	r4, r1
 800b266:	4615      	mov	r5, r2
 800b268:	461f      	mov	r7, r3
 800b26a:	2209      	movs	r2, #9
 800b26c:	3308      	adds	r3, #8
 800b26e:	4606      	mov	r6, r0
 800b270:	fb93 f3f2 	sdiv	r3, r3, r2
 800b274:	2100      	movs	r1, #0
 800b276:	2201      	movs	r2, #1
 800b278:	429a      	cmp	r2, r3
 800b27a:	db09      	blt.n	800b290 <__s2b+0x30>
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff ff47 	bl	800b110 <_Balloc>
 800b282:	b940      	cbnz	r0, 800b296 <__s2b+0x36>
 800b284:	4602      	mov	r2, r0
 800b286:	4b19      	ldr	r3, [pc, #100]	@ (800b2ec <__s2b+0x8c>)
 800b288:	4819      	ldr	r0, [pc, #100]	@ (800b2f0 <__s2b+0x90>)
 800b28a:	21d3      	movs	r1, #211	@ 0xd3
 800b28c:	f7fe ffd4 	bl	800a238 <__assert_func>
 800b290:	0052      	lsls	r2, r2, #1
 800b292:	3101      	adds	r1, #1
 800b294:	e7f0      	b.n	800b278 <__s2b+0x18>
 800b296:	9b08      	ldr	r3, [sp, #32]
 800b298:	6143      	str	r3, [r0, #20]
 800b29a:	2d09      	cmp	r5, #9
 800b29c:	f04f 0301 	mov.w	r3, #1
 800b2a0:	6103      	str	r3, [r0, #16]
 800b2a2:	dd16      	ble.n	800b2d2 <__s2b+0x72>
 800b2a4:	f104 0909 	add.w	r9, r4, #9
 800b2a8:	46c8      	mov	r8, r9
 800b2aa:	442c      	add	r4, r5
 800b2ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2b0:	4601      	mov	r1, r0
 800b2b2:	3b30      	subs	r3, #48	@ 0x30
 800b2b4:	220a      	movs	r2, #10
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f7ff ff8c 	bl	800b1d4 <__multadd>
 800b2bc:	45a0      	cmp	r8, r4
 800b2be:	d1f5      	bne.n	800b2ac <__s2b+0x4c>
 800b2c0:	f1a5 0408 	sub.w	r4, r5, #8
 800b2c4:	444c      	add	r4, r9
 800b2c6:	1b2d      	subs	r5, r5, r4
 800b2c8:	1963      	adds	r3, r4, r5
 800b2ca:	42bb      	cmp	r3, r7
 800b2cc:	db04      	blt.n	800b2d8 <__s2b+0x78>
 800b2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d2:	340a      	adds	r4, #10
 800b2d4:	2509      	movs	r5, #9
 800b2d6:	e7f6      	b.n	800b2c6 <__s2b+0x66>
 800b2d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2dc:	4601      	mov	r1, r0
 800b2de:	3b30      	subs	r3, #48	@ 0x30
 800b2e0:	220a      	movs	r2, #10
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ff76 	bl	800b1d4 <__multadd>
 800b2e8:	e7ee      	b.n	800b2c8 <__s2b+0x68>
 800b2ea:	bf00      	nop
 800b2ec:	0800df1c 	.word	0x0800df1c
 800b2f0:	0800df2d 	.word	0x0800df2d

0800b2f4 <__hi0bits>:
 800b2f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	bf36      	itet	cc
 800b2fc:	0403      	lslcc	r3, r0, #16
 800b2fe:	2000      	movcs	r0, #0
 800b300:	2010      	movcc	r0, #16
 800b302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b306:	bf3c      	itt	cc
 800b308:	021b      	lslcc	r3, r3, #8
 800b30a:	3008      	addcc	r0, #8
 800b30c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b310:	bf3c      	itt	cc
 800b312:	011b      	lslcc	r3, r3, #4
 800b314:	3004      	addcc	r0, #4
 800b316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b31a:	bf3c      	itt	cc
 800b31c:	009b      	lslcc	r3, r3, #2
 800b31e:	3002      	addcc	r0, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	db05      	blt.n	800b330 <__hi0bits+0x3c>
 800b324:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b328:	f100 0001 	add.w	r0, r0, #1
 800b32c:	bf08      	it	eq
 800b32e:	2020      	moveq	r0, #32
 800b330:	4770      	bx	lr

0800b332 <__lo0bits>:
 800b332:	6803      	ldr	r3, [r0, #0]
 800b334:	4602      	mov	r2, r0
 800b336:	f013 0007 	ands.w	r0, r3, #7
 800b33a:	d00b      	beq.n	800b354 <__lo0bits+0x22>
 800b33c:	07d9      	lsls	r1, r3, #31
 800b33e:	d421      	bmi.n	800b384 <__lo0bits+0x52>
 800b340:	0798      	lsls	r0, r3, #30
 800b342:	bf49      	itett	mi
 800b344:	085b      	lsrmi	r3, r3, #1
 800b346:	089b      	lsrpl	r3, r3, #2
 800b348:	2001      	movmi	r0, #1
 800b34a:	6013      	strmi	r3, [r2, #0]
 800b34c:	bf5c      	itt	pl
 800b34e:	6013      	strpl	r3, [r2, #0]
 800b350:	2002      	movpl	r0, #2
 800b352:	4770      	bx	lr
 800b354:	b299      	uxth	r1, r3
 800b356:	b909      	cbnz	r1, 800b35c <__lo0bits+0x2a>
 800b358:	0c1b      	lsrs	r3, r3, #16
 800b35a:	2010      	movs	r0, #16
 800b35c:	b2d9      	uxtb	r1, r3
 800b35e:	b909      	cbnz	r1, 800b364 <__lo0bits+0x32>
 800b360:	3008      	adds	r0, #8
 800b362:	0a1b      	lsrs	r3, r3, #8
 800b364:	0719      	lsls	r1, r3, #28
 800b366:	bf04      	itt	eq
 800b368:	091b      	lsreq	r3, r3, #4
 800b36a:	3004      	addeq	r0, #4
 800b36c:	0799      	lsls	r1, r3, #30
 800b36e:	bf04      	itt	eq
 800b370:	089b      	lsreq	r3, r3, #2
 800b372:	3002      	addeq	r0, #2
 800b374:	07d9      	lsls	r1, r3, #31
 800b376:	d403      	bmi.n	800b380 <__lo0bits+0x4e>
 800b378:	085b      	lsrs	r3, r3, #1
 800b37a:	f100 0001 	add.w	r0, r0, #1
 800b37e:	d003      	beq.n	800b388 <__lo0bits+0x56>
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	4770      	bx	lr
 800b384:	2000      	movs	r0, #0
 800b386:	4770      	bx	lr
 800b388:	2020      	movs	r0, #32
 800b38a:	4770      	bx	lr

0800b38c <__i2b>:
 800b38c:	b510      	push	{r4, lr}
 800b38e:	460c      	mov	r4, r1
 800b390:	2101      	movs	r1, #1
 800b392:	f7ff febd 	bl	800b110 <_Balloc>
 800b396:	4602      	mov	r2, r0
 800b398:	b928      	cbnz	r0, 800b3a6 <__i2b+0x1a>
 800b39a:	4b05      	ldr	r3, [pc, #20]	@ (800b3b0 <__i2b+0x24>)
 800b39c:	4805      	ldr	r0, [pc, #20]	@ (800b3b4 <__i2b+0x28>)
 800b39e:	f240 1145 	movw	r1, #325	@ 0x145
 800b3a2:	f7fe ff49 	bl	800a238 <__assert_func>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	6144      	str	r4, [r0, #20]
 800b3aa:	6103      	str	r3, [r0, #16]
 800b3ac:	bd10      	pop	{r4, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0800df1c 	.word	0x0800df1c
 800b3b4:	0800df2d 	.word	0x0800df2d

0800b3b8 <__multiply>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	4614      	mov	r4, r2
 800b3be:	690a      	ldr	r2, [r1, #16]
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	bfa8      	it	ge
 800b3c6:	4623      	movge	r3, r4
 800b3c8:	460f      	mov	r7, r1
 800b3ca:	bfa4      	itt	ge
 800b3cc:	460c      	movge	r4, r1
 800b3ce:	461f      	movge	r7, r3
 800b3d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b3d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b3d8:	68a3      	ldr	r3, [r4, #8]
 800b3da:	6861      	ldr	r1, [r4, #4]
 800b3dc:	eb0a 0609 	add.w	r6, sl, r9
 800b3e0:	42b3      	cmp	r3, r6
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	bfb8      	it	lt
 800b3e6:	3101      	addlt	r1, #1
 800b3e8:	f7ff fe92 	bl	800b110 <_Balloc>
 800b3ec:	b930      	cbnz	r0, 800b3fc <__multiply+0x44>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4b44      	ldr	r3, [pc, #272]	@ (800b504 <__multiply+0x14c>)
 800b3f2:	4845      	ldr	r0, [pc, #276]	@ (800b508 <__multiply+0x150>)
 800b3f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b3f8:	f7fe ff1e 	bl	800a238 <__assert_func>
 800b3fc:	f100 0514 	add.w	r5, r0, #20
 800b400:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b404:	462b      	mov	r3, r5
 800b406:	2200      	movs	r2, #0
 800b408:	4543      	cmp	r3, r8
 800b40a:	d321      	bcc.n	800b450 <__multiply+0x98>
 800b40c:	f107 0114 	add.w	r1, r7, #20
 800b410:	f104 0214 	add.w	r2, r4, #20
 800b414:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b418:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b41c:	9302      	str	r3, [sp, #8]
 800b41e:	1b13      	subs	r3, r2, r4
 800b420:	3b15      	subs	r3, #21
 800b422:	f023 0303 	bic.w	r3, r3, #3
 800b426:	3304      	adds	r3, #4
 800b428:	f104 0715 	add.w	r7, r4, #21
 800b42c:	42ba      	cmp	r2, r7
 800b42e:	bf38      	it	cc
 800b430:	2304      	movcc	r3, #4
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	9b02      	ldr	r3, [sp, #8]
 800b436:	9103      	str	r1, [sp, #12]
 800b438:	428b      	cmp	r3, r1
 800b43a:	d80c      	bhi.n	800b456 <__multiply+0x9e>
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	dd03      	ble.n	800b448 <__multiply+0x90>
 800b440:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b444:	2b00      	cmp	r3, #0
 800b446:	d05b      	beq.n	800b500 <__multiply+0x148>
 800b448:	6106      	str	r6, [r0, #16]
 800b44a:	b005      	add	sp, #20
 800b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b450:	f843 2b04 	str.w	r2, [r3], #4
 800b454:	e7d8      	b.n	800b408 <__multiply+0x50>
 800b456:	f8b1 a000 	ldrh.w	sl, [r1]
 800b45a:	f1ba 0f00 	cmp.w	sl, #0
 800b45e:	d024      	beq.n	800b4aa <__multiply+0xf2>
 800b460:	f104 0e14 	add.w	lr, r4, #20
 800b464:	46a9      	mov	r9, r5
 800b466:	f04f 0c00 	mov.w	ip, #0
 800b46a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b46e:	f8d9 3000 	ldr.w	r3, [r9]
 800b472:	fa1f fb87 	uxth.w	fp, r7
 800b476:	b29b      	uxth	r3, r3
 800b478:	fb0a 330b 	mla	r3, sl, fp, r3
 800b47c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b480:	f8d9 7000 	ldr.w	r7, [r9]
 800b484:	4463      	add	r3, ip
 800b486:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b48a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b48e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b492:	b29b      	uxth	r3, r3
 800b494:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b498:	4572      	cmp	r2, lr
 800b49a:	f849 3b04 	str.w	r3, [r9], #4
 800b49e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b4a2:	d8e2      	bhi.n	800b46a <__multiply+0xb2>
 800b4a4:	9b01      	ldr	r3, [sp, #4]
 800b4a6:	f845 c003 	str.w	ip, [r5, r3]
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b4b0:	3104      	adds	r1, #4
 800b4b2:	f1b9 0f00 	cmp.w	r9, #0
 800b4b6:	d021      	beq.n	800b4fc <__multiply+0x144>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	f104 0c14 	add.w	ip, r4, #20
 800b4be:	46ae      	mov	lr, r5
 800b4c0:	f04f 0a00 	mov.w	sl, #0
 800b4c4:	f8bc b000 	ldrh.w	fp, [ip]
 800b4c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b4cc:	fb09 770b 	mla	r7, r9, fp, r7
 800b4d0:	4457      	add	r7, sl
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b4d8:	f84e 3b04 	str.w	r3, [lr], #4
 800b4dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b4e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4e4:	f8be 3000 	ldrh.w	r3, [lr]
 800b4e8:	fb09 330a 	mla	r3, r9, sl, r3
 800b4ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b4f0:	4562      	cmp	r2, ip
 800b4f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4f6:	d8e5      	bhi.n	800b4c4 <__multiply+0x10c>
 800b4f8:	9f01      	ldr	r7, [sp, #4]
 800b4fa:	51eb      	str	r3, [r5, r7]
 800b4fc:	3504      	adds	r5, #4
 800b4fe:	e799      	b.n	800b434 <__multiply+0x7c>
 800b500:	3e01      	subs	r6, #1
 800b502:	e79b      	b.n	800b43c <__multiply+0x84>
 800b504:	0800df1c 	.word	0x0800df1c
 800b508:	0800df2d 	.word	0x0800df2d

0800b50c <__pow5mult>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	4615      	mov	r5, r2
 800b512:	f012 0203 	ands.w	r2, r2, #3
 800b516:	4607      	mov	r7, r0
 800b518:	460e      	mov	r6, r1
 800b51a:	d007      	beq.n	800b52c <__pow5mult+0x20>
 800b51c:	4c25      	ldr	r4, [pc, #148]	@ (800b5b4 <__pow5mult+0xa8>)
 800b51e:	3a01      	subs	r2, #1
 800b520:	2300      	movs	r3, #0
 800b522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b526:	f7ff fe55 	bl	800b1d4 <__multadd>
 800b52a:	4606      	mov	r6, r0
 800b52c:	10ad      	asrs	r5, r5, #2
 800b52e:	d03d      	beq.n	800b5ac <__pow5mult+0xa0>
 800b530:	69fc      	ldr	r4, [r7, #28]
 800b532:	b97c      	cbnz	r4, 800b554 <__pow5mult+0x48>
 800b534:	2010      	movs	r0, #16
 800b536:	f7ff fd35 	bl	800afa4 <malloc>
 800b53a:	4602      	mov	r2, r0
 800b53c:	61f8      	str	r0, [r7, #28]
 800b53e:	b928      	cbnz	r0, 800b54c <__pow5mult+0x40>
 800b540:	4b1d      	ldr	r3, [pc, #116]	@ (800b5b8 <__pow5mult+0xac>)
 800b542:	481e      	ldr	r0, [pc, #120]	@ (800b5bc <__pow5mult+0xb0>)
 800b544:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b548:	f7fe fe76 	bl	800a238 <__assert_func>
 800b54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b550:	6004      	str	r4, [r0, #0]
 800b552:	60c4      	str	r4, [r0, #12]
 800b554:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b55c:	b94c      	cbnz	r4, 800b572 <__pow5mult+0x66>
 800b55e:	f240 2171 	movw	r1, #625	@ 0x271
 800b562:	4638      	mov	r0, r7
 800b564:	f7ff ff12 	bl	800b38c <__i2b>
 800b568:	2300      	movs	r3, #0
 800b56a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b56e:	4604      	mov	r4, r0
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	07eb      	lsls	r3, r5, #31
 800b578:	d50a      	bpl.n	800b590 <__pow5mult+0x84>
 800b57a:	4631      	mov	r1, r6
 800b57c:	4622      	mov	r2, r4
 800b57e:	4638      	mov	r0, r7
 800b580:	f7ff ff1a 	bl	800b3b8 <__multiply>
 800b584:	4631      	mov	r1, r6
 800b586:	4680      	mov	r8, r0
 800b588:	4638      	mov	r0, r7
 800b58a:	f7ff fe01 	bl	800b190 <_Bfree>
 800b58e:	4646      	mov	r6, r8
 800b590:	106d      	asrs	r5, r5, #1
 800b592:	d00b      	beq.n	800b5ac <__pow5mult+0xa0>
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	b938      	cbnz	r0, 800b5a8 <__pow5mult+0x9c>
 800b598:	4622      	mov	r2, r4
 800b59a:	4621      	mov	r1, r4
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff ff0b 	bl	800b3b8 <__multiply>
 800b5a2:	6020      	str	r0, [r4, #0]
 800b5a4:	f8c0 9000 	str.w	r9, [r0]
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	e7e4      	b.n	800b576 <__pow5mult+0x6a>
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5b2:	bf00      	nop
 800b5b4:	0800df88 	.word	0x0800df88
 800b5b8:	0800de0a 	.word	0x0800de0a
 800b5bc:	0800df2d 	.word	0x0800df2d

0800b5c0 <__lshift>:
 800b5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	6849      	ldr	r1, [r1, #4]
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ce:	68a3      	ldr	r3, [r4, #8]
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	4691      	mov	r9, r2
 800b5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5d8:	f108 0601 	add.w	r6, r8, #1
 800b5dc:	42b3      	cmp	r3, r6
 800b5de:	db0b      	blt.n	800b5f8 <__lshift+0x38>
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	f7ff fd95 	bl	800b110 <_Balloc>
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	b948      	cbnz	r0, 800b5fe <__lshift+0x3e>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b28      	ldr	r3, [pc, #160]	@ (800b690 <__lshift+0xd0>)
 800b5ee:	4829      	ldr	r0, [pc, #164]	@ (800b694 <__lshift+0xd4>)
 800b5f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b5f4:	f7fe fe20 	bl	800a238 <__assert_func>
 800b5f8:	3101      	adds	r1, #1
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	e7ee      	b.n	800b5dc <__lshift+0x1c>
 800b5fe:	2300      	movs	r3, #0
 800b600:	f100 0114 	add.w	r1, r0, #20
 800b604:	f100 0210 	add.w	r2, r0, #16
 800b608:	4618      	mov	r0, r3
 800b60a:	4553      	cmp	r3, sl
 800b60c:	db33      	blt.n	800b676 <__lshift+0xb6>
 800b60e:	6920      	ldr	r0, [r4, #16]
 800b610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b614:	f104 0314 	add.w	r3, r4, #20
 800b618:	f019 091f 	ands.w	r9, r9, #31
 800b61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b624:	d02b      	beq.n	800b67e <__lshift+0xbe>
 800b626:	f1c9 0e20 	rsb	lr, r9, #32
 800b62a:	468a      	mov	sl, r1
 800b62c:	2200      	movs	r2, #0
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	fa00 f009 	lsl.w	r0, r0, r9
 800b634:	4310      	orrs	r0, r2
 800b636:	f84a 0b04 	str.w	r0, [sl], #4
 800b63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b63e:	459c      	cmp	ip, r3
 800b640:	fa22 f20e 	lsr.w	r2, r2, lr
 800b644:	d8f3      	bhi.n	800b62e <__lshift+0x6e>
 800b646:	ebac 0304 	sub.w	r3, ip, r4
 800b64a:	3b15      	subs	r3, #21
 800b64c:	f023 0303 	bic.w	r3, r3, #3
 800b650:	3304      	adds	r3, #4
 800b652:	f104 0015 	add.w	r0, r4, #21
 800b656:	4584      	cmp	ip, r0
 800b658:	bf38      	it	cc
 800b65a:	2304      	movcc	r3, #4
 800b65c:	50ca      	str	r2, [r1, r3]
 800b65e:	b10a      	cbz	r2, 800b664 <__lshift+0xa4>
 800b660:	f108 0602 	add.w	r6, r8, #2
 800b664:	3e01      	subs	r6, #1
 800b666:	4638      	mov	r0, r7
 800b668:	612e      	str	r6, [r5, #16]
 800b66a:	4621      	mov	r1, r4
 800b66c:	f7ff fd90 	bl	800b190 <_Bfree>
 800b670:	4628      	mov	r0, r5
 800b672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b676:	f842 0f04 	str.w	r0, [r2, #4]!
 800b67a:	3301      	adds	r3, #1
 800b67c:	e7c5      	b.n	800b60a <__lshift+0x4a>
 800b67e:	3904      	subs	r1, #4
 800b680:	f853 2b04 	ldr.w	r2, [r3], #4
 800b684:	f841 2f04 	str.w	r2, [r1, #4]!
 800b688:	459c      	cmp	ip, r3
 800b68a:	d8f9      	bhi.n	800b680 <__lshift+0xc0>
 800b68c:	e7ea      	b.n	800b664 <__lshift+0xa4>
 800b68e:	bf00      	nop
 800b690:	0800df1c 	.word	0x0800df1c
 800b694:	0800df2d 	.word	0x0800df2d

0800b698 <__mcmp>:
 800b698:	690a      	ldr	r2, [r1, #16]
 800b69a:	4603      	mov	r3, r0
 800b69c:	6900      	ldr	r0, [r0, #16]
 800b69e:	1a80      	subs	r0, r0, r2
 800b6a0:	b530      	push	{r4, r5, lr}
 800b6a2:	d10e      	bne.n	800b6c2 <__mcmp+0x2a>
 800b6a4:	3314      	adds	r3, #20
 800b6a6:	3114      	adds	r1, #20
 800b6a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b6ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b6b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6b8:	4295      	cmp	r5, r2
 800b6ba:	d003      	beq.n	800b6c4 <__mcmp+0x2c>
 800b6bc:	d205      	bcs.n	800b6ca <__mcmp+0x32>
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c2:	bd30      	pop	{r4, r5, pc}
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d3f3      	bcc.n	800b6b0 <__mcmp+0x18>
 800b6c8:	e7fb      	b.n	800b6c2 <__mcmp+0x2a>
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	e7f9      	b.n	800b6c2 <__mcmp+0x2a>
	...

0800b6d0 <__mdiff>:
 800b6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	4689      	mov	r9, r1
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	4611      	mov	r1, r2
 800b6da:	4648      	mov	r0, r9
 800b6dc:	4614      	mov	r4, r2
 800b6de:	f7ff ffdb 	bl	800b698 <__mcmp>
 800b6e2:	1e05      	subs	r5, r0, #0
 800b6e4:	d112      	bne.n	800b70c <__mdiff+0x3c>
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7ff fd11 	bl	800b110 <_Balloc>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	b928      	cbnz	r0, 800b6fe <__mdiff+0x2e>
 800b6f2:	4b3f      	ldr	r3, [pc, #252]	@ (800b7f0 <__mdiff+0x120>)
 800b6f4:	f240 2137 	movw	r1, #567	@ 0x237
 800b6f8:	483e      	ldr	r0, [pc, #248]	@ (800b7f4 <__mdiff+0x124>)
 800b6fa:	f7fe fd9d 	bl	800a238 <__assert_func>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b704:	4610      	mov	r0, r2
 800b706:	b003      	add	sp, #12
 800b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70c:	bfbc      	itt	lt
 800b70e:	464b      	movlt	r3, r9
 800b710:	46a1      	movlt	r9, r4
 800b712:	4630      	mov	r0, r6
 800b714:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b718:	bfba      	itte	lt
 800b71a:	461c      	movlt	r4, r3
 800b71c:	2501      	movlt	r5, #1
 800b71e:	2500      	movge	r5, #0
 800b720:	f7ff fcf6 	bl	800b110 <_Balloc>
 800b724:	4602      	mov	r2, r0
 800b726:	b918      	cbnz	r0, 800b730 <__mdiff+0x60>
 800b728:	4b31      	ldr	r3, [pc, #196]	@ (800b7f0 <__mdiff+0x120>)
 800b72a:	f240 2145 	movw	r1, #581	@ 0x245
 800b72e:	e7e3      	b.n	800b6f8 <__mdiff+0x28>
 800b730:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b734:	6926      	ldr	r6, [r4, #16]
 800b736:	60c5      	str	r5, [r0, #12]
 800b738:	f109 0310 	add.w	r3, r9, #16
 800b73c:	f109 0514 	add.w	r5, r9, #20
 800b740:	f104 0e14 	add.w	lr, r4, #20
 800b744:	f100 0b14 	add.w	fp, r0, #20
 800b748:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b74c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	46d9      	mov	r9, fp
 800b754:	f04f 0c00 	mov.w	ip, #0
 800b758:	9b01      	ldr	r3, [sp, #4]
 800b75a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b75e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b762:	9301      	str	r3, [sp, #4]
 800b764:	fa1f f38a 	uxth.w	r3, sl
 800b768:	4619      	mov	r1, r3
 800b76a:	b283      	uxth	r3, r0
 800b76c:	1acb      	subs	r3, r1, r3
 800b76e:	0c00      	lsrs	r0, r0, #16
 800b770:	4463      	add	r3, ip
 800b772:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b776:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b780:	4576      	cmp	r6, lr
 800b782:	f849 3b04 	str.w	r3, [r9], #4
 800b786:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b78a:	d8e5      	bhi.n	800b758 <__mdiff+0x88>
 800b78c:	1b33      	subs	r3, r6, r4
 800b78e:	3b15      	subs	r3, #21
 800b790:	f023 0303 	bic.w	r3, r3, #3
 800b794:	3415      	adds	r4, #21
 800b796:	3304      	adds	r3, #4
 800b798:	42a6      	cmp	r6, r4
 800b79a:	bf38      	it	cc
 800b79c:	2304      	movcc	r3, #4
 800b79e:	441d      	add	r5, r3
 800b7a0:	445b      	add	r3, fp
 800b7a2:	461e      	mov	r6, r3
 800b7a4:	462c      	mov	r4, r5
 800b7a6:	4544      	cmp	r4, r8
 800b7a8:	d30e      	bcc.n	800b7c8 <__mdiff+0xf8>
 800b7aa:	f108 0103 	add.w	r1, r8, #3
 800b7ae:	1b49      	subs	r1, r1, r5
 800b7b0:	f021 0103 	bic.w	r1, r1, #3
 800b7b4:	3d03      	subs	r5, #3
 800b7b6:	45a8      	cmp	r8, r5
 800b7b8:	bf38      	it	cc
 800b7ba:	2100      	movcc	r1, #0
 800b7bc:	440b      	add	r3, r1
 800b7be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7c2:	b191      	cbz	r1, 800b7ea <__mdiff+0x11a>
 800b7c4:	6117      	str	r7, [r2, #16]
 800b7c6:	e79d      	b.n	800b704 <__mdiff+0x34>
 800b7c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7cc:	46e6      	mov	lr, ip
 800b7ce:	0c08      	lsrs	r0, r1, #16
 800b7d0:	fa1c fc81 	uxtah	ip, ip, r1
 800b7d4:	4471      	add	r1, lr
 800b7d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7da:	b289      	uxth	r1, r1
 800b7dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7e0:	f846 1b04 	str.w	r1, [r6], #4
 800b7e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7e8:	e7dd      	b.n	800b7a6 <__mdiff+0xd6>
 800b7ea:	3f01      	subs	r7, #1
 800b7ec:	e7e7      	b.n	800b7be <__mdiff+0xee>
 800b7ee:	bf00      	nop
 800b7f0:	0800df1c 	.word	0x0800df1c
 800b7f4:	0800df2d 	.word	0x0800df2d

0800b7f8 <__ulp>:
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	ed8d 0b00 	vstr	d0, [sp]
 800b7fe:	9a01      	ldr	r2, [sp, #4]
 800b800:	4b0f      	ldr	r3, [pc, #60]	@ (800b840 <__ulp+0x48>)
 800b802:	4013      	ands	r3, r2
 800b804:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	dc08      	bgt.n	800b81e <__ulp+0x26>
 800b80c:	425b      	negs	r3, r3
 800b80e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b812:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b816:	da04      	bge.n	800b822 <__ulp+0x2a>
 800b818:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b81c:	4113      	asrs	r3, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	e008      	b.n	800b834 <__ulp+0x3c>
 800b822:	f1a2 0314 	sub.w	r3, r2, #20
 800b826:	2b1e      	cmp	r3, #30
 800b828:	bfda      	itte	le
 800b82a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b82e:	40da      	lsrle	r2, r3
 800b830:	2201      	movgt	r2, #1
 800b832:	2300      	movs	r3, #0
 800b834:	4619      	mov	r1, r3
 800b836:	4610      	mov	r0, r2
 800b838:	ec41 0b10 	vmov	d0, r0, r1
 800b83c:	b002      	add	sp, #8
 800b83e:	4770      	bx	lr
 800b840:	7ff00000 	.word	0x7ff00000

0800b844 <__b2d>:
 800b844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b848:	6906      	ldr	r6, [r0, #16]
 800b84a:	f100 0814 	add.w	r8, r0, #20
 800b84e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b852:	1f37      	subs	r7, r6, #4
 800b854:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b858:	4610      	mov	r0, r2
 800b85a:	f7ff fd4b 	bl	800b2f4 <__hi0bits>
 800b85e:	f1c0 0320 	rsb	r3, r0, #32
 800b862:	280a      	cmp	r0, #10
 800b864:	600b      	str	r3, [r1, #0]
 800b866:	491b      	ldr	r1, [pc, #108]	@ (800b8d4 <__b2d+0x90>)
 800b868:	dc15      	bgt.n	800b896 <__b2d+0x52>
 800b86a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b86e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b872:	45b8      	cmp	r8, r7
 800b874:	ea43 0501 	orr.w	r5, r3, r1
 800b878:	bf34      	ite	cc
 800b87a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b87e:	2300      	movcs	r3, #0
 800b880:	3015      	adds	r0, #21
 800b882:	fa02 f000 	lsl.w	r0, r2, r0
 800b886:	fa23 f30c 	lsr.w	r3, r3, ip
 800b88a:	4303      	orrs	r3, r0
 800b88c:	461c      	mov	r4, r3
 800b88e:	ec45 4b10 	vmov	d0, r4, r5
 800b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b896:	45b8      	cmp	r8, r7
 800b898:	bf3a      	itte	cc
 800b89a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b89e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b8a2:	2300      	movcs	r3, #0
 800b8a4:	380b      	subs	r0, #11
 800b8a6:	d012      	beq.n	800b8ce <__b2d+0x8a>
 800b8a8:	f1c0 0120 	rsb	r1, r0, #32
 800b8ac:	fa23 f401 	lsr.w	r4, r3, r1
 800b8b0:	4082      	lsls	r2, r0
 800b8b2:	4322      	orrs	r2, r4
 800b8b4:	4547      	cmp	r7, r8
 800b8b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b8ba:	bf8c      	ite	hi
 800b8bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b8c0:	2200      	movls	r2, #0
 800b8c2:	4083      	lsls	r3, r0
 800b8c4:	40ca      	lsrs	r2, r1
 800b8c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	e7de      	b.n	800b88c <__b2d+0x48>
 800b8ce:	ea42 0501 	orr.w	r5, r2, r1
 800b8d2:	e7db      	b.n	800b88c <__b2d+0x48>
 800b8d4:	3ff00000 	.word	0x3ff00000

0800b8d8 <__d2b>:
 800b8d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	460f      	mov	r7, r1
 800b8de:	2101      	movs	r1, #1
 800b8e0:	ec59 8b10 	vmov	r8, r9, d0
 800b8e4:	4616      	mov	r6, r2
 800b8e6:	f7ff fc13 	bl	800b110 <_Balloc>
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	b930      	cbnz	r0, 800b8fc <__d2b+0x24>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	4b23      	ldr	r3, [pc, #140]	@ (800b980 <__d2b+0xa8>)
 800b8f2:	4824      	ldr	r0, [pc, #144]	@ (800b984 <__d2b+0xac>)
 800b8f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8f8:	f7fe fc9e 	bl	800a238 <__assert_func>
 800b8fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b904:	b10d      	cbz	r5, 800b90a <__d2b+0x32>
 800b906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b90a:	9301      	str	r3, [sp, #4]
 800b90c:	f1b8 0300 	subs.w	r3, r8, #0
 800b910:	d023      	beq.n	800b95a <__d2b+0x82>
 800b912:	4668      	mov	r0, sp
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	f7ff fd0c 	bl	800b332 <__lo0bits>
 800b91a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b91e:	b1d0      	cbz	r0, 800b956 <__d2b+0x7e>
 800b920:	f1c0 0320 	rsb	r3, r0, #32
 800b924:	fa02 f303 	lsl.w	r3, r2, r3
 800b928:	430b      	orrs	r3, r1
 800b92a:	40c2      	lsrs	r2, r0
 800b92c:	6163      	str	r3, [r4, #20]
 800b92e:	9201      	str	r2, [sp, #4]
 800b930:	9b01      	ldr	r3, [sp, #4]
 800b932:	61a3      	str	r3, [r4, #24]
 800b934:	2b00      	cmp	r3, #0
 800b936:	bf0c      	ite	eq
 800b938:	2201      	moveq	r2, #1
 800b93a:	2202      	movne	r2, #2
 800b93c:	6122      	str	r2, [r4, #16]
 800b93e:	b1a5      	cbz	r5, 800b96a <__d2b+0x92>
 800b940:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b944:	4405      	add	r5, r0
 800b946:	603d      	str	r5, [r7, #0]
 800b948:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b94c:	6030      	str	r0, [r6, #0]
 800b94e:	4620      	mov	r0, r4
 800b950:	b003      	add	sp, #12
 800b952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b956:	6161      	str	r1, [r4, #20]
 800b958:	e7ea      	b.n	800b930 <__d2b+0x58>
 800b95a:	a801      	add	r0, sp, #4
 800b95c:	f7ff fce9 	bl	800b332 <__lo0bits>
 800b960:	9b01      	ldr	r3, [sp, #4]
 800b962:	6163      	str	r3, [r4, #20]
 800b964:	3020      	adds	r0, #32
 800b966:	2201      	movs	r2, #1
 800b968:	e7e8      	b.n	800b93c <__d2b+0x64>
 800b96a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b96e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b972:	6038      	str	r0, [r7, #0]
 800b974:	6918      	ldr	r0, [r3, #16]
 800b976:	f7ff fcbd 	bl	800b2f4 <__hi0bits>
 800b97a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b97e:	e7e5      	b.n	800b94c <__d2b+0x74>
 800b980:	0800df1c 	.word	0x0800df1c
 800b984:	0800df2d 	.word	0x0800df2d

0800b988 <__ratio>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	b085      	sub	sp, #20
 800b98e:	e9cd 1000 	strd	r1, r0, [sp]
 800b992:	a902      	add	r1, sp, #8
 800b994:	f7ff ff56 	bl	800b844 <__b2d>
 800b998:	9800      	ldr	r0, [sp, #0]
 800b99a:	a903      	add	r1, sp, #12
 800b99c:	ec55 4b10 	vmov	r4, r5, d0
 800b9a0:	f7ff ff50 	bl	800b844 <__b2d>
 800b9a4:	9b01      	ldr	r3, [sp, #4]
 800b9a6:	6919      	ldr	r1, [r3, #16]
 800b9a8:	9b00      	ldr	r3, [sp, #0]
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	1ac9      	subs	r1, r1, r3
 800b9ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b9b2:	1a9b      	subs	r3, r3, r2
 800b9b4:	ec5b ab10 	vmov	sl, fp, d0
 800b9b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	bfce      	itee	gt
 800b9c0:	462a      	movgt	r2, r5
 800b9c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9c6:	465a      	movle	r2, fp
 800b9c8:	462f      	mov	r7, r5
 800b9ca:	46d9      	mov	r9, fp
 800b9cc:	bfcc      	ite	gt
 800b9ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b9d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	4652      	mov	r2, sl
 800b9da:	4620      	mov	r0, r4
 800b9dc:	4639      	mov	r1, r7
 800b9de:	f7f4 ff55 	bl	800088c <__aeabi_ddiv>
 800b9e2:	ec41 0b10 	vmov	d0, r0, r1
 800b9e6:	b005      	add	sp, #20
 800b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9ec <__copybits>:
 800b9ec:	3901      	subs	r1, #1
 800b9ee:	b570      	push	{r4, r5, r6, lr}
 800b9f0:	1149      	asrs	r1, r1, #5
 800b9f2:	6914      	ldr	r4, [r2, #16]
 800b9f4:	3101      	adds	r1, #1
 800b9f6:	f102 0314 	add.w	r3, r2, #20
 800b9fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b9fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba02:	1f05      	subs	r5, r0, #4
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	d30c      	bcc.n	800ba22 <__copybits+0x36>
 800ba08:	1aa3      	subs	r3, r4, r2
 800ba0a:	3b11      	subs	r3, #17
 800ba0c:	f023 0303 	bic.w	r3, r3, #3
 800ba10:	3211      	adds	r2, #17
 800ba12:	42a2      	cmp	r2, r4
 800ba14:	bf88      	it	hi
 800ba16:	2300      	movhi	r3, #0
 800ba18:	4418      	add	r0, r3
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	4288      	cmp	r0, r1
 800ba1e:	d305      	bcc.n	800ba2c <__copybits+0x40>
 800ba20:	bd70      	pop	{r4, r5, r6, pc}
 800ba22:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba26:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba2a:	e7eb      	b.n	800ba04 <__copybits+0x18>
 800ba2c:	f840 3b04 	str.w	r3, [r0], #4
 800ba30:	e7f4      	b.n	800ba1c <__copybits+0x30>

0800ba32 <__any_on>:
 800ba32:	f100 0214 	add.w	r2, r0, #20
 800ba36:	6900      	ldr	r0, [r0, #16]
 800ba38:	114b      	asrs	r3, r1, #5
 800ba3a:	4298      	cmp	r0, r3
 800ba3c:	b510      	push	{r4, lr}
 800ba3e:	db11      	blt.n	800ba64 <__any_on+0x32>
 800ba40:	dd0a      	ble.n	800ba58 <__any_on+0x26>
 800ba42:	f011 011f 	ands.w	r1, r1, #31
 800ba46:	d007      	beq.n	800ba58 <__any_on+0x26>
 800ba48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba4c:	fa24 f001 	lsr.w	r0, r4, r1
 800ba50:	fa00 f101 	lsl.w	r1, r0, r1
 800ba54:	428c      	cmp	r4, r1
 800ba56:	d10b      	bne.n	800ba70 <__any_on+0x3e>
 800ba58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d803      	bhi.n	800ba68 <__any_on+0x36>
 800ba60:	2000      	movs	r0, #0
 800ba62:	bd10      	pop	{r4, pc}
 800ba64:	4603      	mov	r3, r0
 800ba66:	e7f7      	b.n	800ba58 <__any_on+0x26>
 800ba68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba6c:	2900      	cmp	r1, #0
 800ba6e:	d0f5      	beq.n	800ba5c <__any_on+0x2a>
 800ba70:	2001      	movs	r0, #1
 800ba72:	e7f6      	b.n	800ba62 <__any_on+0x30>

0800ba74 <sulp>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	4604      	mov	r4, r0
 800ba78:	460d      	mov	r5, r1
 800ba7a:	ec45 4b10 	vmov	d0, r4, r5
 800ba7e:	4616      	mov	r6, r2
 800ba80:	f7ff feba 	bl	800b7f8 <__ulp>
 800ba84:	ec51 0b10 	vmov	r0, r1, d0
 800ba88:	b17e      	cbz	r6, 800baaa <sulp+0x36>
 800ba8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dd09      	ble.n	800baaa <sulp+0x36>
 800ba96:	051b      	lsls	r3, r3, #20
 800ba98:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ba9c:	2400      	movs	r4, #0
 800ba9e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800baa2:	4622      	mov	r2, r4
 800baa4:	462b      	mov	r3, r5
 800baa6:	f7f4 fdc7 	bl	8000638 <__aeabi_dmul>
 800baaa:	ec41 0b10 	vmov	d0, r0, r1
 800baae:	bd70      	pop	{r4, r5, r6, pc}

0800bab0 <_strtod_l>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	b09f      	sub	sp, #124	@ 0x7c
 800bab6:	460c      	mov	r4, r1
 800bab8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800baba:	2200      	movs	r2, #0
 800babc:	921a      	str	r2, [sp, #104]	@ 0x68
 800babe:	9005      	str	r0, [sp, #20]
 800bac0:	f04f 0a00 	mov.w	sl, #0
 800bac4:	f04f 0b00 	mov.w	fp, #0
 800bac8:	460a      	mov	r2, r1
 800baca:	9219      	str	r2, [sp, #100]	@ 0x64
 800bacc:	7811      	ldrb	r1, [r2, #0]
 800bace:	292b      	cmp	r1, #43	@ 0x2b
 800bad0:	d04a      	beq.n	800bb68 <_strtod_l+0xb8>
 800bad2:	d838      	bhi.n	800bb46 <_strtod_l+0x96>
 800bad4:	290d      	cmp	r1, #13
 800bad6:	d832      	bhi.n	800bb3e <_strtod_l+0x8e>
 800bad8:	2908      	cmp	r1, #8
 800bada:	d832      	bhi.n	800bb42 <_strtod_l+0x92>
 800badc:	2900      	cmp	r1, #0
 800bade:	d03b      	beq.n	800bb58 <_strtod_l+0xa8>
 800bae0:	2200      	movs	r2, #0
 800bae2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bae4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bae6:	782a      	ldrb	r2, [r5, #0]
 800bae8:	2a30      	cmp	r2, #48	@ 0x30
 800baea:	f040 80b3 	bne.w	800bc54 <_strtod_l+0x1a4>
 800baee:	786a      	ldrb	r2, [r5, #1]
 800baf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800baf4:	2a58      	cmp	r2, #88	@ 0x58
 800baf6:	d16e      	bne.n	800bbd6 <_strtod_l+0x126>
 800baf8:	9302      	str	r3, [sp, #8]
 800bafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	ab1a      	add	r3, sp, #104	@ 0x68
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	4a8e      	ldr	r2, [pc, #568]	@ (800bd3c <_strtod_l+0x28c>)
 800bb04:	9805      	ldr	r0, [sp, #20]
 800bb06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bb08:	a919      	add	r1, sp, #100	@ 0x64
 800bb0a:	f001 fa6b 	bl	800cfe4 <__gethex>
 800bb0e:	f010 060f 	ands.w	r6, r0, #15
 800bb12:	4604      	mov	r4, r0
 800bb14:	d005      	beq.n	800bb22 <_strtod_l+0x72>
 800bb16:	2e06      	cmp	r6, #6
 800bb18:	d128      	bne.n	800bb6c <_strtod_l+0xbc>
 800bb1a:	3501      	adds	r5, #1
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800bb20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f040 858e 	bne.w	800c646 <_strtod_l+0xb96>
 800bb2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb2c:	b1cb      	cbz	r3, 800bb62 <_strtod_l+0xb2>
 800bb2e:	4652      	mov	r2, sl
 800bb30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bb34:	ec43 2b10 	vmov	d0, r2, r3
 800bb38:	b01f      	add	sp, #124	@ 0x7c
 800bb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3e:	2920      	cmp	r1, #32
 800bb40:	d1ce      	bne.n	800bae0 <_strtod_l+0x30>
 800bb42:	3201      	adds	r2, #1
 800bb44:	e7c1      	b.n	800baca <_strtod_l+0x1a>
 800bb46:	292d      	cmp	r1, #45	@ 0x2d
 800bb48:	d1ca      	bne.n	800bae0 <_strtod_l+0x30>
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bb4e:	1c51      	adds	r1, r2, #1
 800bb50:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb52:	7852      	ldrb	r2, [r2, #1]
 800bb54:	2a00      	cmp	r2, #0
 800bb56:	d1c5      	bne.n	800bae4 <_strtod_l+0x34>
 800bb58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f040 8570 	bne.w	800c642 <_strtod_l+0xb92>
 800bb62:	4652      	mov	r2, sl
 800bb64:	465b      	mov	r3, fp
 800bb66:	e7e5      	b.n	800bb34 <_strtod_l+0x84>
 800bb68:	2100      	movs	r1, #0
 800bb6a:	e7ef      	b.n	800bb4c <_strtod_l+0x9c>
 800bb6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb6e:	b13a      	cbz	r2, 800bb80 <_strtod_l+0xd0>
 800bb70:	2135      	movs	r1, #53	@ 0x35
 800bb72:	a81c      	add	r0, sp, #112	@ 0x70
 800bb74:	f7ff ff3a 	bl	800b9ec <__copybits>
 800bb78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb7a:	9805      	ldr	r0, [sp, #20]
 800bb7c:	f7ff fb08 	bl	800b190 <_Bfree>
 800bb80:	3e01      	subs	r6, #1
 800bb82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bb84:	2e04      	cmp	r6, #4
 800bb86:	d806      	bhi.n	800bb96 <_strtod_l+0xe6>
 800bb88:	e8df f006 	tbb	[pc, r6]
 800bb8c:	201d0314 	.word	0x201d0314
 800bb90:	14          	.byte	0x14
 800bb91:	00          	.byte	0x00
 800bb92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bb96:	05e1      	lsls	r1, r4, #23
 800bb98:	bf48      	it	mi
 800bb9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bb9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bba2:	0d1b      	lsrs	r3, r3, #20
 800bba4:	051b      	lsls	r3, r3, #20
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1bb      	bne.n	800bb22 <_strtod_l+0x72>
 800bbaa:	f7fe fb11 	bl	800a1d0 <__errno>
 800bbae:	2322      	movs	r3, #34	@ 0x22
 800bbb0:	6003      	str	r3, [r0, #0]
 800bbb2:	e7b6      	b.n	800bb22 <_strtod_l+0x72>
 800bbb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bbb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bbbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bbc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bbc4:	e7e7      	b.n	800bb96 <_strtod_l+0xe6>
 800bbc6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bd44 <_strtod_l+0x294>
 800bbca:	e7e4      	b.n	800bb96 <_strtod_l+0xe6>
 800bbcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bbd0:	f04f 3aff 	mov.w	sl, #4294967295
 800bbd4:	e7df      	b.n	800bb96 <_strtod_l+0xe6>
 800bbd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	9219      	str	r2, [sp, #100]	@ 0x64
 800bbdc:	785b      	ldrb	r3, [r3, #1]
 800bbde:	2b30      	cmp	r3, #48	@ 0x30
 800bbe0:	d0f9      	beq.n	800bbd6 <_strtod_l+0x126>
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d09d      	beq.n	800bb22 <_strtod_l+0x72>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbec:	930c      	str	r3, [sp, #48]	@ 0x30
 800bbee:	2300      	movs	r3, #0
 800bbf0:	9308      	str	r3, [sp, #32]
 800bbf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbf4:	461f      	mov	r7, r3
 800bbf6:	220a      	movs	r2, #10
 800bbf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bbfa:	7805      	ldrb	r5, [r0, #0]
 800bbfc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bc00:	b2d9      	uxtb	r1, r3
 800bc02:	2909      	cmp	r1, #9
 800bc04:	d928      	bls.n	800bc58 <_strtod_l+0x1a8>
 800bc06:	494e      	ldr	r1, [pc, #312]	@ (800bd40 <_strtod_l+0x290>)
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f001 f90f 	bl	800ce2c <strncmp>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d032      	beq.n	800bc78 <_strtod_l+0x1c8>
 800bc12:	2000      	movs	r0, #0
 800bc14:	462a      	mov	r2, r5
 800bc16:	4681      	mov	r9, r0
 800bc18:	463d      	mov	r5, r7
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2a65      	cmp	r2, #101	@ 0x65
 800bc1e:	d001      	beq.n	800bc24 <_strtod_l+0x174>
 800bc20:	2a45      	cmp	r2, #69	@ 0x45
 800bc22:	d114      	bne.n	800bc4e <_strtod_l+0x19e>
 800bc24:	b91d      	cbnz	r5, 800bc2e <_strtod_l+0x17e>
 800bc26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc28:	4302      	orrs	r2, r0
 800bc2a:	d095      	beq.n	800bb58 <_strtod_l+0xa8>
 800bc2c:	2500      	movs	r5, #0
 800bc2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bc30:	1c62      	adds	r2, r4, #1
 800bc32:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc34:	7862      	ldrb	r2, [r4, #1]
 800bc36:	2a2b      	cmp	r2, #43	@ 0x2b
 800bc38:	d077      	beq.n	800bd2a <_strtod_l+0x27a>
 800bc3a:	2a2d      	cmp	r2, #45	@ 0x2d
 800bc3c:	d07b      	beq.n	800bd36 <_strtod_l+0x286>
 800bc3e:	f04f 0c00 	mov.w	ip, #0
 800bc42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bc46:	2909      	cmp	r1, #9
 800bc48:	f240 8082 	bls.w	800bd50 <_strtod_l+0x2a0>
 800bc4c:	9419      	str	r4, [sp, #100]	@ 0x64
 800bc4e:	f04f 0800 	mov.w	r8, #0
 800bc52:	e0a2      	b.n	800bd9a <_strtod_l+0x2ea>
 800bc54:	2300      	movs	r3, #0
 800bc56:	e7c7      	b.n	800bbe8 <_strtod_l+0x138>
 800bc58:	2f08      	cmp	r7, #8
 800bc5a:	bfd5      	itete	le
 800bc5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bc5e:	9908      	ldrgt	r1, [sp, #32]
 800bc60:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc64:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bc68:	f100 0001 	add.w	r0, r0, #1
 800bc6c:	bfd4      	ite	le
 800bc6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bc70:	9308      	strgt	r3, [sp, #32]
 800bc72:	3701      	adds	r7, #1
 800bc74:	9019      	str	r0, [sp, #100]	@ 0x64
 800bc76:	e7bf      	b.n	800bbf8 <_strtod_l+0x148>
 800bc78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc7a:	1c5a      	adds	r2, r3, #1
 800bc7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc7e:	785a      	ldrb	r2, [r3, #1]
 800bc80:	b37f      	cbz	r7, 800bce2 <_strtod_l+0x232>
 800bc82:	4681      	mov	r9, r0
 800bc84:	463d      	mov	r5, r7
 800bc86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bc8a:	2b09      	cmp	r3, #9
 800bc8c:	d912      	bls.n	800bcb4 <_strtod_l+0x204>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e7c4      	b.n	800bc1c <_strtod_l+0x16c>
 800bc92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc94:	1c5a      	adds	r2, r3, #1
 800bc96:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc98:	785a      	ldrb	r2, [r3, #1]
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	2a30      	cmp	r2, #48	@ 0x30
 800bc9e:	d0f8      	beq.n	800bc92 <_strtod_l+0x1e2>
 800bca0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bca4:	2b08      	cmp	r3, #8
 800bca6:	f200 84d3 	bhi.w	800c650 <_strtod_l+0xba0>
 800bcaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcac:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcae:	4681      	mov	r9, r0
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	3a30      	subs	r2, #48	@ 0x30
 800bcb6:	f100 0301 	add.w	r3, r0, #1
 800bcba:	d02a      	beq.n	800bd12 <_strtod_l+0x262>
 800bcbc:	4499      	add	r9, r3
 800bcbe:	eb00 0c05 	add.w	ip, r0, r5
 800bcc2:	462b      	mov	r3, r5
 800bcc4:	210a      	movs	r1, #10
 800bcc6:	4563      	cmp	r3, ip
 800bcc8:	d10d      	bne.n	800bce6 <_strtod_l+0x236>
 800bcca:	1c69      	adds	r1, r5, #1
 800bccc:	4401      	add	r1, r0
 800bcce:	4428      	add	r0, r5
 800bcd0:	2808      	cmp	r0, #8
 800bcd2:	dc16      	bgt.n	800bd02 <_strtod_l+0x252>
 800bcd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bcd6:	230a      	movs	r3, #10
 800bcd8:	fb03 2300 	mla	r3, r3, r0, r2
 800bcdc:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcde:	2300      	movs	r3, #0
 800bce0:	e018      	b.n	800bd14 <_strtod_l+0x264>
 800bce2:	4638      	mov	r0, r7
 800bce4:	e7da      	b.n	800bc9c <_strtod_l+0x1ec>
 800bce6:	2b08      	cmp	r3, #8
 800bce8:	f103 0301 	add.w	r3, r3, #1
 800bcec:	dc03      	bgt.n	800bcf6 <_strtod_l+0x246>
 800bcee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bcf0:	434e      	muls	r6, r1
 800bcf2:	960a      	str	r6, [sp, #40]	@ 0x28
 800bcf4:	e7e7      	b.n	800bcc6 <_strtod_l+0x216>
 800bcf6:	2b10      	cmp	r3, #16
 800bcf8:	bfde      	ittt	le
 800bcfa:	9e08      	ldrle	r6, [sp, #32]
 800bcfc:	434e      	mulle	r6, r1
 800bcfe:	9608      	strle	r6, [sp, #32]
 800bd00:	e7e1      	b.n	800bcc6 <_strtod_l+0x216>
 800bd02:	280f      	cmp	r0, #15
 800bd04:	dceb      	bgt.n	800bcde <_strtod_l+0x22e>
 800bd06:	9808      	ldr	r0, [sp, #32]
 800bd08:	230a      	movs	r3, #10
 800bd0a:	fb03 2300 	mla	r3, r3, r0, r2
 800bd0e:	9308      	str	r3, [sp, #32]
 800bd10:	e7e5      	b.n	800bcde <_strtod_l+0x22e>
 800bd12:	4629      	mov	r1, r5
 800bd14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd16:	1c50      	adds	r0, r2, #1
 800bd18:	9019      	str	r0, [sp, #100]	@ 0x64
 800bd1a:	7852      	ldrb	r2, [r2, #1]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	460d      	mov	r5, r1
 800bd20:	e7b1      	b.n	800bc86 <_strtod_l+0x1d6>
 800bd22:	f04f 0900 	mov.w	r9, #0
 800bd26:	2301      	movs	r3, #1
 800bd28:	e77d      	b.n	800bc26 <_strtod_l+0x176>
 800bd2a:	f04f 0c00 	mov.w	ip, #0
 800bd2e:	1ca2      	adds	r2, r4, #2
 800bd30:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd32:	78a2      	ldrb	r2, [r4, #2]
 800bd34:	e785      	b.n	800bc42 <_strtod_l+0x192>
 800bd36:	f04f 0c01 	mov.w	ip, #1
 800bd3a:	e7f8      	b.n	800bd2e <_strtod_l+0x27e>
 800bd3c:	0800e0a0 	.word	0x0800e0a0
 800bd40:	0800e088 	.word	0x0800e088
 800bd44:	7ff00000 	.word	0x7ff00000
 800bd48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd4a:	1c51      	adds	r1, r2, #1
 800bd4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bd4e:	7852      	ldrb	r2, [r2, #1]
 800bd50:	2a30      	cmp	r2, #48	@ 0x30
 800bd52:	d0f9      	beq.n	800bd48 <_strtod_l+0x298>
 800bd54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bd58:	2908      	cmp	r1, #8
 800bd5a:	f63f af78 	bhi.w	800bc4e <_strtod_l+0x19e>
 800bd5e:	3a30      	subs	r2, #48	@ 0x30
 800bd60:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd64:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bd66:	f04f 080a 	mov.w	r8, #10
 800bd6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd6c:	1c56      	adds	r6, r2, #1
 800bd6e:	9619      	str	r6, [sp, #100]	@ 0x64
 800bd70:	7852      	ldrb	r2, [r2, #1]
 800bd72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bd76:	f1be 0f09 	cmp.w	lr, #9
 800bd7a:	d939      	bls.n	800bdf0 <_strtod_l+0x340>
 800bd7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bd7e:	1a76      	subs	r6, r6, r1
 800bd80:	2e08      	cmp	r6, #8
 800bd82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bd86:	dc03      	bgt.n	800bd90 <_strtod_l+0x2e0>
 800bd88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bd8a:	4588      	cmp	r8, r1
 800bd8c:	bfa8      	it	ge
 800bd8e:	4688      	movge	r8, r1
 800bd90:	f1bc 0f00 	cmp.w	ip, #0
 800bd94:	d001      	beq.n	800bd9a <_strtod_l+0x2ea>
 800bd96:	f1c8 0800 	rsb	r8, r8, #0
 800bd9a:	2d00      	cmp	r5, #0
 800bd9c:	d14e      	bne.n	800be3c <_strtod_l+0x38c>
 800bd9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bda0:	4308      	orrs	r0, r1
 800bda2:	f47f aebe 	bne.w	800bb22 <_strtod_l+0x72>
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f47f aed6 	bne.w	800bb58 <_strtod_l+0xa8>
 800bdac:	2a69      	cmp	r2, #105	@ 0x69
 800bdae:	d028      	beq.n	800be02 <_strtod_l+0x352>
 800bdb0:	dc25      	bgt.n	800bdfe <_strtod_l+0x34e>
 800bdb2:	2a49      	cmp	r2, #73	@ 0x49
 800bdb4:	d025      	beq.n	800be02 <_strtod_l+0x352>
 800bdb6:	2a4e      	cmp	r2, #78	@ 0x4e
 800bdb8:	f47f aece 	bne.w	800bb58 <_strtod_l+0xa8>
 800bdbc:	499b      	ldr	r1, [pc, #620]	@ (800c02c <_strtod_l+0x57c>)
 800bdbe:	a819      	add	r0, sp, #100	@ 0x64
 800bdc0:	f001 fb32 	bl	800d428 <__match>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	f43f aec7 	beq.w	800bb58 <_strtod_l+0xa8>
 800bdca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b28      	cmp	r3, #40	@ 0x28
 800bdd0:	d12e      	bne.n	800be30 <_strtod_l+0x380>
 800bdd2:	4997      	ldr	r1, [pc, #604]	@ (800c030 <_strtod_l+0x580>)
 800bdd4:	aa1c      	add	r2, sp, #112	@ 0x70
 800bdd6:	a819      	add	r0, sp, #100	@ 0x64
 800bdd8:	f001 fb3a 	bl	800d450 <__hexnan>
 800bddc:	2805      	cmp	r0, #5
 800bdde:	d127      	bne.n	800be30 <_strtod_l+0x380>
 800bde0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bde2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bde6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bdea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bdee:	e698      	b.n	800bb22 <_strtod_l+0x72>
 800bdf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bdf2:	fb08 2101 	mla	r1, r8, r1, r2
 800bdf6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bdfa:	920e      	str	r2, [sp, #56]	@ 0x38
 800bdfc:	e7b5      	b.n	800bd6a <_strtod_l+0x2ba>
 800bdfe:	2a6e      	cmp	r2, #110	@ 0x6e
 800be00:	e7da      	b.n	800bdb8 <_strtod_l+0x308>
 800be02:	498c      	ldr	r1, [pc, #560]	@ (800c034 <_strtod_l+0x584>)
 800be04:	a819      	add	r0, sp, #100	@ 0x64
 800be06:	f001 fb0f 	bl	800d428 <__match>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	f43f aea4 	beq.w	800bb58 <_strtod_l+0xa8>
 800be10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be12:	4989      	ldr	r1, [pc, #548]	@ (800c038 <_strtod_l+0x588>)
 800be14:	3b01      	subs	r3, #1
 800be16:	a819      	add	r0, sp, #100	@ 0x64
 800be18:	9319      	str	r3, [sp, #100]	@ 0x64
 800be1a:	f001 fb05 	bl	800d428 <__match>
 800be1e:	b910      	cbnz	r0, 800be26 <_strtod_l+0x376>
 800be20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be22:	3301      	adds	r3, #1
 800be24:	9319      	str	r3, [sp, #100]	@ 0x64
 800be26:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c048 <_strtod_l+0x598>
 800be2a:	f04f 0a00 	mov.w	sl, #0
 800be2e:	e678      	b.n	800bb22 <_strtod_l+0x72>
 800be30:	4882      	ldr	r0, [pc, #520]	@ (800c03c <_strtod_l+0x58c>)
 800be32:	f001 f84d 	bl	800ced0 <nan>
 800be36:	ec5b ab10 	vmov	sl, fp, d0
 800be3a:	e672      	b.n	800bb22 <_strtod_l+0x72>
 800be3c:	eba8 0309 	sub.w	r3, r8, r9
 800be40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be42:	9309      	str	r3, [sp, #36]	@ 0x24
 800be44:	2f00      	cmp	r7, #0
 800be46:	bf08      	it	eq
 800be48:	462f      	moveq	r7, r5
 800be4a:	2d10      	cmp	r5, #16
 800be4c:	462c      	mov	r4, r5
 800be4e:	bfa8      	it	ge
 800be50:	2410      	movge	r4, #16
 800be52:	f7f4 fb77 	bl	8000544 <__aeabi_ui2d>
 800be56:	2d09      	cmp	r5, #9
 800be58:	4682      	mov	sl, r0
 800be5a:	468b      	mov	fp, r1
 800be5c:	dc13      	bgt.n	800be86 <_strtod_l+0x3d6>
 800be5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be60:	2b00      	cmp	r3, #0
 800be62:	f43f ae5e 	beq.w	800bb22 <_strtod_l+0x72>
 800be66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be68:	dd78      	ble.n	800bf5c <_strtod_l+0x4ac>
 800be6a:	2b16      	cmp	r3, #22
 800be6c:	dc5f      	bgt.n	800bf2e <_strtod_l+0x47e>
 800be6e:	4974      	ldr	r1, [pc, #464]	@ (800c040 <_strtod_l+0x590>)
 800be70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be78:	4652      	mov	r2, sl
 800be7a:	465b      	mov	r3, fp
 800be7c:	f7f4 fbdc 	bl	8000638 <__aeabi_dmul>
 800be80:	4682      	mov	sl, r0
 800be82:	468b      	mov	fp, r1
 800be84:	e64d      	b.n	800bb22 <_strtod_l+0x72>
 800be86:	4b6e      	ldr	r3, [pc, #440]	@ (800c040 <_strtod_l+0x590>)
 800be88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800be90:	f7f4 fbd2 	bl	8000638 <__aeabi_dmul>
 800be94:	4682      	mov	sl, r0
 800be96:	9808      	ldr	r0, [sp, #32]
 800be98:	468b      	mov	fp, r1
 800be9a:	f7f4 fb53 	bl	8000544 <__aeabi_ui2d>
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	4650      	mov	r0, sl
 800bea4:	4659      	mov	r1, fp
 800bea6:	f7f4 fa11 	bl	80002cc <__adddf3>
 800beaa:	2d0f      	cmp	r5, #15
 800beac:	4682      	mov	sl, r0
 800beae:	468b      	mov	fp, r1
 800beb0:	ddd5      	ble.n	800be5e <_strtod_l+0x3ae>
 800beb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beb4:	1b2c      	subs	r4, r5, r4
 800beb6:	441c      	add	r4, r3
 800beb8:	2c00      	cmp	r4, #0
 800beba:	f340 8096 	ble.w	800bfea <_strtod_l+0x53a>
 800bebe:	f014 030f 	ands.w	r3, r4, #15
 800bec2:	d00a      	beq.n	800beda <_strtod_l+0x42a>
 800bec4:	495e      	ldr	r1, [pc, #376]	@ (800c040 <_strtod_l+0x590>)
 800bec6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800beca:	4652      	mov	r2, sl
 800becc:	465b      	mov	r3, fp
 800bece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bed2:	f7f4 fbb1 	bl	8000638 <__aeabi_dmul>
 800bed6:	4682      	mov	sl, r0
 800bed8:	468b      	mov	fp, r1
 800beda:	f034 040f 	bics.w	r4, r4, #15
 800bede:	d073      	beq.n	800bfc8 <_strtod_l+0x518>
 800bee0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bee4:	dd48      	ble.n	800bf78 <_strtod_l+0x4c8>
 800bee6:	2400      	movs	r4, #0
 800bee8:	46a0      	mov	r8, r4
 800beea:	940a      	str	r4, [sp, #40]	@ 0x28
 800beec:	46a1      	mov	r9, r4
 800beee:	9a05      	ldr	r2, [sp, #20]
 800bef0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c048 <_strtod_l+0x598>
 800bef4:	2322      	movs	r3, #34	@ 0x22
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	f04f 0a00 	mov.w	sl, #0
 800befc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f43f ae0f 	beq.w	800bb22 <_strtod_l+0x72>
 800bf04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf06:	9805      	ldr	r0, [sp, #20]
 800bf08:	f7ff f942 	bl	800b190 <_Bfree>
 800bf0c:	9805      	ldr	r0, [sp, #20]
 800bf0e:	4649      	mov	r1, r9
 800bf10:	f7ff f93e 	bl	800b190 <_Bfree>
 800bf14:	9805      	ldr	r0, [sp, #20]
 800bf16:	4641      	mov	r1, r8
 800bf18:	f7ff f93a 	bl	800b190 <_Bfree>
 800bf1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf1e:	9805      	ldr	r0, [sp, #20]
 800bf20:	f7ff f936 	bl	800b190 <_Bfree>
 800bf24:	9805      	ldr	r0, [sp, #20]
 800bf26:	4621      	mov	r1, r4
 800bf28:	f7ff f932 	bl	800b190 <_Bfree>
 800bf2c:	e5f9      	b.n	800bb22 <_strtod_l+0x72>
 800bf2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bf34:	4293      	cmp	r3, r2
 800bf36:	dbbc      	blt.n	800beb2 <_strtod_l+0x402>
 800bf38:	4c41      	ldr	r4, [pc, #260]	@ (800c040 <_strtod_l+0x590>)
 800bf3a:	f1c5 050f 	rsb	r5, r5, #15
 800bf3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bf42:	4652      	mov	r2, sl
 800bf44:	465b      	mov	r3, fp
 800bf46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf4a:	f7f4 fb75 	bl	8000638 <__aeabi_dmul>
 800bf4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf50:	1b5d      	subs	r5, r3, r5
 800bf52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bf56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bf5a:	e78f      	b.n	800be7c <_strtod_l+0x3cc>
 800bf5c:	3316      	adds	r3, #22
 800bf5e:	dba8      	blt.n	800beb2 <_strtod_l+0x402>
 800bf60:	4b37      	ldr	r3, [pc, #220]	@ (800c040 <_strtod_l+0x590>)
 800bf62:	eba9 0808 	sub.w	r8, r9, r8
 800bf66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bf6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bf6e:	4650      	mov	r0, sl
 800bf70:	4659      	mov	r1, fp
 800bf72:	f7f4 fc8b 	bl	800088c <__aeabi_ddiv>
 800bf76:	e783      	b.n	800be80 <_strtod_l+0x3d0>
 800bf78:	4b32      	ldr	r3, [pc, #200]	@ (800c044 <_strtod_l+0x594>)
 800bf7a:	9308      	str	r3, [sp, #32]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	1124      	asrs	r4, r4, #4
 800bf80:	4650      	mov	r0, sl
 800bf82:	4659      	mov	r1, fp
 800bf84:	461e      	mov	r6, r3
 800bf86:	2c01      	cmp	r4, #1
 800bf88:	dc21      	bgt.n	800bfce <_strtod_l+0x51e>
 800bf8a:	b10b      	cbz	r3, 800bf90 <_strtod_l+0x4e0>
 800bf8c:	4682      	mov	sl, r0
 800bf8e:	468b      	mov	fp, r1
 800bf90:	492c      	ldr	r1, [pc, #176]	@ (800c044 <_strtod_l+0x594>)
 800bf92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bf96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bf9a:	4652      	mov	r2, sl
 800bf9c:	465b      	mov	r3, fp
 800bf9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfa2:	f7f4 fb49 	bl	8000638 <__aeabi_dmul>
 800bfa6:	4b28      	ldr	r3, [pc, #160]	@ (800c048 <_strtod_l+0x598>)
 800bfa8:	460a      	mov	r2, r1
 800bfaa:	400b      	ands	r3, r1
 800bfac:	4927      	ldr	r1, [pc, #156]	@ (800c04c <_strtod_l+0x59c>)
 800bfae:	428b      	cmp	r3, r1
 800bfb0:	4682      	mov	sl, r0
 800bfb2:	d898      	bhi.n	800bee6 <_strtod_l+0x436>
 800bfb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bfb8:	428b      	cmp	r3, r1
 800bfba:	bf86      	itte	hi
 800bfbc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c050 <_strtod_l+0x5a0>
 800bfc0:	f04f 3aff 	movhi.w	sl, #4294967295
 800bfc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bfc8:	2300      	movs	r3, #0
 800bfca:	9308      	str	r3, [sp, #32]
 800bfcc:	e07a      	b.n	800c0c4 <_strtod_l+0x614>
 800bfce:	07e2      	lsls	r2, r4, #31
 800bfd0:	d505      	bpl.n	800bfde <_strtod_l+0x52e>
 800bfd2:	9b08      	ldr	r3, [sp, #32]
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 fb2e 	bl	8000638 <__aeabi_dmul>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	9a08      	ldr	r2, [sp, #32]
 800bfe0:	3208      	adds	r2, #8
 800bfe2:	3601      	adds	r6, #1
 800bfe4:	1064      	asrs	r4, r4, #1
 800bfe6:	9208      	str	r2, [sp, #32]
 800bfe8:	e7cd      	b.n	800bf86 <_strtod_l+0x4d6>
 800bfea:	d0ed      	beq.n	800bfc8 <_strtod_l+0x518>
 800bfec:	4264      	negs	r4, r4
 800bfee:	f014 020f 	ands.w	r2, r4, #15
 800bff2:	d00a      	beq.n	800c00a <_strtod_l+0x55a>
 800bff4:	4b12      	ldr	r3, [pc, #72]	@ (800c040 <_strtod_l+0x590>)
 800bff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bffa:	4650      	mov	r0, sl
 800bffc:	4659      	mov	r1, fp
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	f7f4 fc43 	bl	800088c <__aeabi_ddiv>
 800c006:	4682      	mov	sl, r0
 800c008:	468b      	mov	fp, r1
 800c00a:	1124      	asrs	r4, r4, #4
 800c00c:	d0dc      	beq.n	800bfc8 <_strtod_l+0x518>
 800c00e:	2c1f      	cmp	r4, #31
 800c010:	dd20      	ble.n	800c054 <_strtod_l+0x5a4>
 800c012:	2400      	movs	r4, #0
 800c014:	46a0      	mov	r8, r4
 800c016:	940a      	str	r4, [sp, #40]	@ 0x28
 800c018:	46a1      	mov	r9, r4
 800c01a:	9a05      	ldr	r2, [sp, #20]
 800c01c:	2322      	movs	r3, #34	@ 0x22
 800c01e:	f04f 0a00 	mov.w	sl, #0
 800c022:	f04f 0b00 	mov.w	fp, #0
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	e768      	b.n	800befc <_strtod_l+0x44c>
 800c02a:	bf00      	nop
 800c02c:	0800ddde 	.word	0x0800ddde
 800c030:	0800e08c 	.word	0x0800e08c
 800c034:	0800ddd6 	.word	0x0800ddd6
 800c038:	0800deba 	.word	0x0800deba
 800c03c:	0800deb6 	.word	0x0800deb6
 800c040:	0800dfc0 	.word	0x0800dfc0
 800c044:	0800df98 	.word	0x0800df98
 800c048:	7ff00000 	.word	0x7ff00000
 800c04c:	7ca00000 	.word	0x7ca00000
 800c050:	7fefffff 	.word	0x7fefffff
 800c054:	f014 0310 	ands.w	r3, r4, #16
 800c058:	bf18      	it	ne
 800c05a:	236a      	movne	r3, #106	@ 0x6a
 800c05c:	4ea9      	ldr	r6, [pc, #676]	@ (800c304 <_strtod_l+0x854>)
 800c05e:	9308      	str	r3, [sp, #32]
 800c060:	4650      	mov	r0, sl
 800c062:	4659      	mov	r1, fp
 800c064:	2300      	movs	r3, #0
 800c066:	07e2      	lsls	r2, r4, #31
 800c068:	d504      	bpl.n	800c074 <_strtod_l+0x5c4>
 800c06a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c06e:	f7f4 fae3 	bl	8000638 <__aeabi_dmul>
 800c072:	2301      	movs	r3, #1
 800c074:	1064      	asrs	r4, r4, #1
 800c076:	f106 0608 	add.w	r6, r6, #8
 800c07a:	d1f4      	bne.n	800c066 <_strtod_l+0x5b6>
 800c07c:	b10b      	cbz	r3, 800c082 <_strtod_l+0x5d2>
 800c07e:	4682      	mov	sl, r0
 800c080:	468b      	mov	fp, r1
 800c082:	9b08      	ldr	r3, [sp, #32]
 800c084:	b1b3      	cbz	r3, 800c0b4 <_strtod_l+0x604>
 800c086:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c08a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c08e:	2b00      	cmp	r3, #0
 800c090:	4659      	mov	r1, fp
 800c092:	dd0f      	ble.n	800c0b4 <_strtod_l+0x604>
 800c094:	2b1f      	cmp	r3, #31
 800c096:	dd55      	ble.n	800c144 <_strtod_l+0x694>
 800c098:	2b34      	cmp	r3, #52	@ 0x34
 800c09a:	bfde      	ittt	le
 800c09c:	f04f 33ff 	movle.w	r3, #4294967295
 800c0a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c0a4:	4093      	lslle	r3, r2
 800c0a6:	f04f 0a00 	mov.w	sl, #0
 800c0aa:	bfcc      	ite	gt
 800c0ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c0b0:	ea03 0b01 	andle.w	fp, r3, r1
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	4650      	mov	r0, sl
 800c0ba:	4659      	mov	r1, fp
 800c0bc:	f7f4 fd24 	bl	8000b08 <__aeabi_dcmpeq>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d1a6      	bne.n	800c012 <_strtod_l+0x562>
 800c0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c0ca:	9805      	ldr	r0, [sp, #20]
 800c0cc:	462b      	mov	r3, r5
 800c0ce:	463a      	mov	r2, r7
 800c0d0:	f7ff f8c6 	bl	800b260 <__s2b>
 800c0d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f43f af05 	beq.w	800bee6 <_strtod_l+0x436>
 800c0dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0de:	2a00      	cmp	r2, #0
 800c0e0:	eba9 0308 	sub.w	r3, r9, r8
 800c0e4:	bfa8      	it	ge
 800c0e6:	2300      	movge	r3, #0
 800c0e8:	9312      	str	r3, [sp, #72]	@ 0x48
 800c0ea:	2400      	movs	r4, #0
 800c0ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c0f0:	9316      	str	r3, [sp, #88]	@ 0x58
 800c0f2:	46a0      	mov	r8, r4
 800c0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0f6:	9805      	ldr	r0, [sp, #20]
 800c0f8:	6859      	ldr	r1, [r3, #4]
 800c0fa:	f7ff f809 	bl	800b110 <_Balloc>
 800c0fe:	4681      	mov	r9, r0
 800c100:	2800      	cmp	r0, #0
 800c102:	f43f aef4 	beq.w	800beee <_strtod_l+0x43e>
 800c106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c108:	691a      	ldr	r2, [r3, #16]
 800c10a:	3202      	adds	r2, #2
 800c10c:	f103 010c 	add.w	r1, r3, #12
 800c110:	0092      	lsls	r2, r2, #2
 800c112:	300c      	adds	r0, #12
 800c114:	f000 fece 	bl	800ceb4 <memcpy>
 800c118:	ec4b ab10 	vmov	d0, sl, fp
 800c11c:	9805      	ldr	r0, [sp, #20]
 800c11e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c120:	a91b      	add	r1, sp, #108	@ 0x6c
 800c122:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c126:	f7ff fbd7 	bl	800b8d8 <__d2b>
 800c12a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c12c:	2800      	cmp	r0, #0
 800c12e:	f43f aede 	beq.w	800beee <_strtod_l+0x43e>
 800c132:	9805      	ldr	r0, [sp, #20]
 800c134:	2101      	movs	r1, #1
 800c136:	f7ff f929 	bl	800b38c <__i2b>
 800c13a:	4680      	mov	r8, r0
 800c13c:	b948      	cbnz	r0, 800c152 <_strtod_l+0x6a2>
 800c13e:	f04f 0800 	mov.w	r8, #0
 800c142:	e6d4      	b.n	800beee <_strtod_l+0x43e>
 800c144:	f04f 32ff 	mov.w	r2, #4294967295
 800c148:	fa02 f303 	lsl.w	r3, r2, r3
 800c14c:	ea03 0a0a 	and.w	sl, r3, sl
 800c150:	e7b0      	b.n	800c0b4 <_strtod_l+0x604>
 800c152:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c154:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c156:	2d00      	cmp	r5, #0
 800c158:	bfab      	itete	ge
 800c15a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c15c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c15e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c160:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c162:	bfac      	ite	ge
 800c164:	18ef      	addge	r7, r5, r3
 800c166:	1b5e      	sublt	r6, r3, r5
 800c168:	9b08      	ldr	r3, [sp, #32]
 800c16a:	1aed      	subs	r5, r5, r3
 800c16c:	4415      	add	r5, r2
 800c16e:	4b66      	ldr	r3, [pc, #408]	@ (800c308 <_strtod_l+0x858>)
 800c170:	3d01      	subs	r5, #1
 800c172:	429d      	cmp	r5, r3
 800c174:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c178:	da50      	bge.n	800c21c <_strtod_l+0x76c>
 800c17a:	1b5b      	subs	r3, r3, r5
 800c17c:	2b1f      	cmp	r3, #31
 800c17e:	eba2 0203 	sub.w	r2, r2, r3
 800c182:	f04f 0101 	mov.w	r1, #1
 800c186:	dc3d      	bgt.n	800c204 <_strtod_l+0x754>
 800c188:	fa01 f303 	lsl.w	r3, r1, r3
 800c18c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c18e:	2300      	movs	r3, #0
 800c190:	9310      	str	r3, [sp, #64]	@ 0x40
 800c192:	18bd      	adds	r5, r7, r2
 800c194:	9b08      	ldr	r3, [sp, #32]
 800c196:	42af      	cmp	r7, r5
 800c198:	4416      	add	r6, r2
 800c19a:	441e      	add	r6, r3
 800c19c:	463b      	mov	r3, r7
 800c19e:	bfa8      	it	ge
 800c1a0:	462b      	movge	r3, r5
 800c1a2:	42b3      	cmp	r3, r6
 800c1a4:	bfa8      	it	ge
 800c1a6:	4633      	movge	r3, r6
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	bfc2      	ittt	gt
 800c1ac:	1aed      	subgt	r5, r5, r3
 800c1ae:	1af6      	subgt	r6, r6, r3
 800c1b0:	1aff      	subgt	r7, r7, r3
 800c1b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dd16      	ble.n	800c1e6 <_strtod_l+0x736>
 800c1b8:	4641      	mov	r1, r8
 800c1ba:	9805      	ldr	r0, [sp, #20]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	f7ff f9a5 	bl	800b50c <__pow5mult>
 800c1c2:	4680      	mov	r8, r0
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d0ba      	beq.n	800c13e <_strtod_l+0x68e>
 800c1c8:	4601      	mov	r1, r0
 800c1ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c1cc:	9805      	ldr	r0, [sp, #20]
 800c1ce:	f7ff f8f3 	bl	800b3b8 <__multiply>
 800c1d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	f43f ae8a 	beq.w	800beee <_strtod_l+0x43e>
 800c1da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1dc:	9805      	ldr	r0, [sp, #20]
 800c1de:	f7fe ffd7 	bl	800b190 <_Bfree>
 800c1e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1e6:	2d00      	cmp	r5, #0
 800c1e8:	dc1d      	bgt.n	800c226 <_strtod_l+0x776>
 800c1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	dd23      	ble.n	800c238 <_strtod_l+0x788>
 800c1f0:	4649      	mov	r1, r9
 800c1f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c1f4:	9805      	ldr	r0, [sp, #20]
 800c1f6:	f7ff f989 	bl	800b50c <__pow5mult>
 800c1fa:	4681      	mov	r9, r0
 800c1fc:	b9e0      	cbnz	r0, 800c238 <_strtod_l+0x788>
 800c1fe:	f04f 0900 	mov.w	r9, #0
 800c202:	e674      	b.n	800beee <_strtod_l+0x43e>
 800c204:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c208:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c20c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c210:	35e2      	adds	r5, #226	@ 0xe2
 800c212:	fa01 f305 	lsl.w	r3, r1, r5
 800c216:	9310      	str	r3, [sp, #64]	@ 0x40
 800c218:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c21a:	e7ba      	b.n	800c192 <_strtod_l+0x6e2>
 800c21c:	2300      	movs	r3, #0
 800c21e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c220:	2301      	movs	r3, #1
 800c222:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c224:	e7b5      	b.n	800c192 <_strtod_l+0x6e2>
 800c226:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c228:	9805      	ldr	r0, [sp, #20]
 800c22a:	462a      	mov	r2, r5
 800c22c:	f7ff f9c8 	bl	800b5c0 <__lshift>
 800c230:	901a      	str	r0, [sp, #104]	@ 0x68
 800c232:	2800      	cmp	r0, #0
 800c234:	d1d9      	bne.n	800c1ea <_strtod_l+0x73a>
 800c236:	e65a      	b.n	800beee <_strtod_l+0x43e>
 800c238:	2e00      	cmp	r6, #0
 800c23a:	dd07      	ble.n	800c24c <_strtod_l+0x79c>
 800c23c:	4649      	mov	r1, r9
 800c23e:	9805      	ldr	r0, [sp, #20]
 800c240:	4632      	mov	r2, r6
 800c242:	f7ff f9bd 	bl	800b5c0 <__lshift>
 800c246:	4681      	mov	r9, r0
 800c248:	2800      	cmp	r0, #0
 800c24a:	d0d8      	beq.n	800c1fe <_strtod_l+0x74e>
 800c24c:	2f00      	cmp	r7, #0
 800c24e:	dd08      	ble.n	800c262 <_strtod_l+0x7b2>
 800c250:	4641      	mov	r1, r8
 800c252:	9805      	ldr	r0, [sp, #20]
 800c254:	463a      	mov	r2, r7
 800c256:	f7ff f9b3 	bl	800b5c0 <__lshift>
 800c25a:	4680      	mov	r8, r0
 800c25c:	2800      	cmp	r0, #0
 800c25e:	f43f ae46 	beq.w	800beee <_strtod_l+0x43e>
 800c262:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c264:	9805      	ldr	r0, [sp, #20]
 800c266:	464a      	mov	r2, r9
 800c268:	f7ff fa32 	bl	800b6d0 <__mdiff>
 800c26c:	4604      	mov	r4, r0
 800c26e:	2800      	cmp	r0, #0
 800c270:	f43f ae3d 	beq.w	800beee <_strtod_l+0x43e>
 800c274:	68c3      	ldr	r3, [r0, #12]
 800c276:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c278:	2300      	movs	r3, #0
 800c27a:	60c3      	str	r3, [r0, #12]
 800c27c:	4641      	mov	r1, r8
 800c27e:	f7ff fa0b 	bl	800b698 <__mcmp>
 800c282:	2800      	cmp	r0, #0
 800c284:	da46      	bge.n	800c314 <_strtod_l+0x864>
 800c286:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c288:	ea53 030a 	orrs.w	r3, r3, sl
 800c28c:	d16c      	bne.n	800c368 <_strtod_l+0x8b8>
 800c28e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c292:	2b00      	cmp	r3, #0
 800c294:	d168      	bne.n	800c368 <_strtod_l+0x8b8>
 800c296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c29a:	0d1b      	lsrs	r3, r3, #20
 800c29c:	051b      	lsls	r3, r3, #20
 800c29e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c2a2:	d961      	bls.n	800c368 <_strtod_l+0x8b8>
 800c2a4:	6963      	ldr	r3, [r4, #20]
 800c2a6:	b913      	cbnz	r3, 800c2ae <_strtod_l+0x7fe>
 800c2a8:	6923      	ldr	r3, [r4, #16]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	dd5c      	ble.n	800c368 <_strtod_l+0x8b8>
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	9805      	ldr	r0, [sp, #20]
 800c2b4:	f7ff f984 	bl	800b5c0 <__lshift>
 800c2b8:	4641      	mov	r1, r8
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	f7ff f9ec 	bl	800b698 <__mcmp>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	dd51      	ble.n	800c368 <_strtod_l+0x8b8>
 800c2c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c2c8:	9a08      	ldr	r2, [sp, #32]
 800c2ca:	0d1b      	lsrs	r3, r3, #20
 800c2cc:	051b      	lsls	r3, r3, #20
 800c2ce:	2a00      	cmp	r2, #0
 800c2d0:	d06b      	beq.n	800c3aa <_strtod_l+0x8fa>
 800c2d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c2d6:	d868      	bhi.n	800c3aa <_strtod_l+0x8fa>
 800c2d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c2dc:	f67f ae9d 	bls.w	800c01a <_strtod_l+0x56a>
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c30c <_strtod_l+0x85c>)
 800c2e2:	4650      	mov	r0, sl
 800c2e4:	4659      	mov	r1, fp
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f7f4 f9a6 	bl	8000638 <__aeabi_dmul>
 800c2ec:	4b08      	ldr	r3, [pc, #32]	@ (800c310 <_strtod_l+0x860>)
 800c2ee:	400b      	ands	r3, r1
 800c2f0:	4682      	mov	sl, r0
 800c2f2:	468b      	mov	fp, r1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f47f ae05 	bne.w	800bf04 <_strtod_l+0x454>
 800c2fa:	9a05      	ldr	r2, [sp, #20]
 800c2fc:	2322      	movs	r3, #34	@ 0x22
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	e600      	b.n	800bf04 <_strtod_l+0x454>
 800c302:	bf00      	nop
 800c304:	0800e0b8 	.word	0x0800e0b8
 800c308:	fffffc02 	.word	0xfffffc02
 800c30c:	39500000 	.word	0x39500000
 800c310:	7ff00000 	.word	0x7ff00000
 800c314:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c318:	d165      	bne.n	800c3e6 <_strtod_l+0x936>
 800c31a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c31c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c320:	b35a      	cbz	r2, 800c37a <_strtod_l+0x8ca>
 800c322:	4a9f      	ldr	r2, [pc, #636]	@ (800c5a0 <_strtod_l+0xaf0>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d12b      	bne.n	800c380 <_strtod_l+0x8d0>
 800c328:	9b08      	ldr	r3, [sp, #32]
 800c32a:	4651      	mov	r1, sl
 800c32c:	b303      	cbz	r3, 800c370 <_strtod_l+0x8c0>
 800c32e:	4b9d      	ldr	r3, [pc, #628]	@ (800c5a4 <_strtod_l+0xaf4>)
 800c330:	465a      	mov	r2, fp
 800c332:	4013      	ands	r3, r2
 800c334:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c338:	f04f 32ff 	mov.w	r2, #4294967295
 800c33c:	d81b      	bhi.n	800c376 <_strtod_l+0x8c6>
 800c33e:	0d1b      	lsrs	r3, r3, #20
 800c340:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c344:	fa02 f303 	lsl.w	r3, r2, r3
 800c348:	4299      	cmp	r1, r3
 800c34a:	d119      	bne.n	800c380 <_strtod_l+0x8d0>
 800c34c:	4b96      	ldr	r3, [pc, #600]	@ (800c5a8 <_strtod_l+0xaf8>)
 800c34e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c350:	429a      	cmp	r2, r3
 800c352:	d102      	bne.n	800c35a <_strtod_l+0x8aa>
 800c354:	3101      	adds	r1, #1
 800c356:	f43f adca 	beq.w	800beee <_strtod_l+0x43e>
 800c35a:	4b92      	ldr	r3, [pc, #584]	@ (800c5a4 <_strtod_l+0xaf4>)
 800c35c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c35e:	401a      	ands	r2, r3
 800c360:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c364:	f04f 0a00 	mov.w	sl, #0
 800c368:	9b08      	ldr	r3, [sp, #32]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1b8      	bne.n	800c2e0 <_strtod_l+0x830>
 800c36e:	e5c9      	b.n	800bf04 <_strtod_l+0x454>
 800c370:	f04f 33ff 	mov.w	r3, #4294967295
 800c374:	e7e8      	b.n	800c348 <_strtod_l+0x898>
 800c376:	4613      	mov	r3, r2
 800c378:	e7e6      	b.n	800c348 <_strtod_l+0x898>
 800c37a:	ea53 030a 	orrs.w	r3, r3, sl
 800c37e:	d0a1      	beq.n	800c2c4 <_strtod_l+0x814>
 800c380:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c382:	b1db      	cbz	r3, 800c3bc <_strtod_l+0x90c>
 800c384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c386:	4213      	tst	r3, r2
 800c388:	d0ee      	beq.n	800c368 <_strtod_l+0x8b8>
 800c38a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c38c:	9a08      	ldr	r2, [sp, #32]
 800c38e:	4650      	mov	r0, sl
 800c390:	4659      	mov	r1, fp
 800c392:	b1bb      	cbz	r3, 800c3c4 <_strtod_l+0x914>
 800c394:	f7ff fb6e 	bl	800ba74 <sulp>
 800c398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c39c:	ec53 2b10 	vmov	r2, r3, d0
 800c3a0:	f7f3 ff94 	bl	80002cc <__adddf3>
 800c3a4:	4682      	mov	sl, r0
 800c3a6:	468b      	mov	fp, r1
 800c3a8:	e7de      	b.n	800c368 <_strtod_l+0x8b8>
 800c3aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c3ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c3b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c3b6:	f04f 3aff 	mov.w	sl, #4294967295
 800c3ba:	e7d5      	b.n	800c368 <_strtod_l+0x8b8>
 800c3bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c3be:	ea13 0f0a 	tst.w	r3, sl
 800c3c2:	e7e1      	b.n	800c388 <_strtod_l+0x8d8>
 800c3c4:	f7ff fb56 	bl	800ba74 <sulp>
 800c3c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3cc:	ec53 2b10 	vmov	r2, r3, d0
 800c3d0:	f7f3 ff7a 	bl	80002c8 <__aeabi_dsub>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	4682      	mov	sl, r0
 800c3da:	468b      	mov	fp, r1
 800c3dc:	f7f4 fb94 	bl	8000b08 <__aeabi_dcmpeq>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d0c1      	beq.n	800c368 <_strtod_l+0x8b8>
 800c3e4:	e619      	b.n	800c01a <_strtod_l+0x56a>
 800c3e6:	4641      	mov	r1, r8
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f7ff facd 	bl	800b988 <__ratio>
 800c3ee:	ec57 6b10 	vmov	r6, r7, d0
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	f7f4 fb98 	bl	8000b30 <__aeabi_dcmple>
 800c400:	2800      	cmp	r0, #0
 800c402:	d06f      	beq.n	800c4e4 <_strtod_l+0xa34>
 800c404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c406:	2b00      	cmp	r3, #0
 800c408:	d17a      	bne.n	800c500 <_strtod_l+0xa50>
 800c40a:	f1ba 0f00 	cmp.w	sl, #0
 800c40e:	d158      	bne.n	800c4c2 <_strtod_l+0xa12>
 800c410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c416:	2b00      	cmp	r3, #0
 800c418:	d15a      	bne.n	800c4d0 <_strtod_l+0xa20>
 800c41a:	4b64      	ldr	r3, [pc, #400]	@ (800c5ac <_strtod_l+0xafc>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	4630      	mov	r0, r6
 800c420:	4639      	mov	r1, r7
 800c422:	f7f4 fb7b 	bl	8000b1c <__aeabi_dcmplt>
 800c426:	2800      	cmp	r0, #0
 800c428:	d159      	bne.n	800c4de <_strtod_l+0xa2e>
 800c42a:	4630      	mov	r0, r6
 800c42c:	4639      	mov	r1, r7
 800c42e:	4b60      	ldr	r3, [pc, #384]	@ (800c5b0 <_strtod_l+0xb00>)
 800c430:	2200      	movs	r2, #0
 800c432:	f7f4 f901 	bl	8000638 <__aeabi_dmul>
 800c436:	4606      	mov	r6, r0
 800c438:	460f      	mov	r7, r1
 800c43a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c43e:	9606      	str	r6, [sp, #24]
 800c440:	9307      	str	r3, [sp, #28]
 800c442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c446:	4d57      	ldr	r5, [pc, #348]	@ (800c5a4 <_strtod_l+0xaf4>)
 800c448:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c44e:	401d      	ands	r5, r3
 800c450:	4b58      	ldr	r3, [pc, #352]	@ (800c5b4 <_strtod_l+0xb04>)
 800c452:	429d      	cmp	r5, r3
 800c454:	f040 80b2 	bne.w	800c5bc <_strtod_l+0xb0c>
 800c458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c45a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c45e:	ec4b ab10 	vmov	d0, sl, fp
 800c462:	f7ff f9c9 	bl	800b7f8 <__ulp>
 800c466:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c46a:	ec51 0b10 	vmov	r0, r1, d0
 800c46e:	f7f4 f8e3 	bl	8000638 <__aeabi_dmul>
 800c472:	4652      	mov	r2, sl
 800c474:	465b      	mov	r3, fp
 800c476:	f7f3 ff29 	bl	80002cc <__adddf3>
 800c47a:	460b      	mov	r3, r1
 800c47c:	4949      	ldr	r1, [pc, #292]	@ (800c5a4 <_strtod_l+0xaf4>)
 800c47e:	4a4e      	ldr	r2, [pc, #312]	@ (800c5b8 <_strtod_l+0xb08>)
 800c480:	4019      	ands	r1, r3
 800c482:	4291      	cmp	r1, r2
 800c484:	4682      	mov	sl, r0
 800c486:	d942      	bls.n	800c50e <_strtod_l+0xa5e>
 800c488:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c48a:	4b47      	ldr	r3, [pc, #284]	@ (800c5a8 <_strtod_l+0xaf8>)
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d103      	bne.n	800c498 <_strtod_l+0x9e8>
 800c490:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c492:	3301      	adds	r3, #1
 800c494:	f43f ad2b 	beq.w	800beee <_strtod_l+0x43e>
 800c498:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c5a8 <_strtod_l+0xaf8>
 800c49c:	f04f 3aff 	mov.w	sl, #4294967295
 800c4a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4a2:	9805      	ldr	r0, [sp, #20]
 800c4a4:	f7fe fe74 	bl	800b190 <_Bfree>
 800c4a8:	9805      	ldr	r0, [sp, #20]
 800c4aa:	4649      	mov	r1, r9
 800c4ac:	f7fe fe70 	bl	800b190 <_Bfree>
 800c4b0:	9805      	ldr	r0, [sp, #20]
 800c4b2:	4641      	mov	r1, r8
 800c4b4:	f7fe fe6c 	bl	800b190 <_Bfree>
 800c4b8:	9805      	ldr	r0, [sp, #20]
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	f7fe fe68 	bl	800b190 <_Bfree>
 800c4c0:	e618      	b.n	800c0f4 <_strtod_l+0x644>
 800c4c2:	f1ba 0f01 	cmp.w	sl, #1
 800c4c6:	d103      	bne.n	800c4d0 <_strtod_l+0xa20>
 800c4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f43f ada5 	beq.w	800c01a <_strtod_l+0x56a>
 800c4d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c580 <_strtod_l+0xad0>
 800c4d4:	4f35      	ldr	r7, [pc, #212]	@ (800c5ac <_strtod_l+0xafc>)
 800c4d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c4da:	2600      	movs	r6, #0
 800c4dc:	e7b1      	b.n	800c442 <_strtod_l+0x992>
 800c4de:	4f34      	ldr	r7, [pc, #208]	@ (800c5b0 <_strtod_l+0xb00>)
 800c4e0:	2600      	movs	r6, #0
 800c4e2:	e7aa      	b.n	800c43a <_strtod_l+0x98a>
 800c4e4:	4b32      	ldr	r3, [pc, #200]	@ (800c5b0 <_strtod_l+0xb00>)
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f7f4 f8a4 	bl	8000638 <__aeabi_dmul>
 800c4f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	460f      	mov	r7, r1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d09f      	beq.n	800c43a <_strtod_l+0x98a>
 800c4fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c4fe:	e7a0      	b.n	800c442 <_strtod_l+0x992>
 800c500:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c588 <_strtod_l+0xad8>
 800c504:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c508:	ec57 6b17 	vmov	r6, r7, d7
 800c50c:	e799      	b.n	800c442 <_strtod_l+0x992>
 800c50e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c512:	9b08      	ldr	r3, [sp, #32]
 800c514:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1c1      	bne.n	800c4a0 <_strtod_l+0x9f0>
 800c51c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c520:	0d1b      	lsrs	r3, r3, #20
 800c522:	051b      	lsls	r3, r3, #20
 800c524:	429d      	cmp	r5, r3
 800c526:	d1bb      	bne.n	800c4a0 <_strtod_l+0x9f0>
 800c528:	4630      	mov	r0, r6
 800c52a:	4639      	mov	r1, r7
 800c52c:	f7f4 fc34 	bl	8000d98 <__aeabi_d2lz>
 800c530:	f7f4 f854 	bl	80005dc <__aeabi_l2d>
 800c534:	4602      	mov	r2, r0
 800c536:	460b      	mov	r3, r1
 800c538:	4630      	mov	r0, r6
 800c53a:	4639      	mov	r1, r7
 800c53c:	f7f3 fec4 	bl	80002c8 <__aeabi_dsub>
 800c540:	460b      	mov	r3, r1
 800c542:	4602      	mov	r2, r0
 800c544:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c548:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c54e:	ea46 060a 	orr.w	r6, r6, sl
 800c552:	431e      	orrs	r6, r3
 800c554:	d06f      	beq.n	800c636 <_strtod_l+0xb86>
 800c556:	a30e      	add	r3, pc, #56	@ (adr r3, 800c590 <_strtod_l+0xae0>)
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f7f4 fade 	bl	8000b1c <__aeabi_dcmplt>
 800c560:	2800      	cmp	r0, #0
 800c562:	f47f accf 	bne.w	800bf04 <_strtod_l+0x454>
 800c566:	a30c      	add	r3, pc, #48	@ (adr r3, 800c598 <_strtod_l+0xae8>)
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c570:	f7f4 faf2 	bl	8000b58 <__aeabi_dcmpgt>
 800c574:	2800      	cmp	r0, #0
 800c576:	d093      	beq.n	800c4a0 <_strtod_l+0x9f0>
 800c578:	e4c4      	b.n	800bf04 <_strtod_l+0x454>
 800c57a:	bf00      	nop
 800c57c:	f3af 8000 	nop.w
 800c580:	00000000 	.word	0x00000000
 800c584:	bff00000 	.word	0xbff00000
 800c588:	00000000 	.word	0x00000000
 800c58c:	3ff00000 	.word	0x3ff00000
 800c590:	94a03595 	.word	0x94a03595
 800c594:	3fdfffff 	.word	0x3fdfffff
 800c598:	35afe535 	.word	0x35afe535
 800c59c:	3fe00000 	.word	0x3fe00000
 800c5a0:	000fffff 	.word	0x000fffff
 800c5a4:	7ff00000 	.word	0x7ff00000
 800c5a8:	7fefffff 	.word	0x7fefffff
 800c5ac:	3ff00000 	.word	0x3ff00000
 800c5b0:	3fe00000 	.word	0x3fe00000
 800c5b4:	7fe00000 	.word	0x7fe00000
 800c5b8:	7c9fffff 	.word	0x7c9fffff
 800c5bc:	9b08      	ldr	r3, [sp, #32]
 800c5be:	b323      	cbz	r3, 800c60a <_strtod_l+0xb5a>
 800c5c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c5c4:	d821      	bhi.n	800c60a <_strtod_l+0xb5a>
 800c5c6:	a328      	add	r3, pc, #160	@ (adr r3, 800c668 <_strtod_l+0xbb8>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	f7f4 faae 	bl	8000b30 <__aeabi_dcmple>
 800c5d4:	b1a0      	cbz	r0, 800c600 <_strtod_l+0xb50>
 800c5d6:	4639      	mov	r1, r7
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f7f4 fb05 	bl	8000be8 <__aeabi_d2uiz>
 800c5de:	2801      	cmp	r0, #1
 800c5e0:	bf38      	it	cc
 800c5e2:	2001      	movcc	r0, #1
 800c5e4:	f7f3 ffae 	bl	8000544 <__aeabi_ui2d>
 800c5e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	460f      	mov	r7, r1
 800c5ee:	b9fb      	cbnz	r3, 800c630 <_strtod_l+0xb80>
 800c5f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800c5f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c5f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c5fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c600:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c602:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c606:	1b5b      	subs	r3, r3, r5
 800c608:	9311      	str	r3, [sp, #68]	@ 0x44
 800c60a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c60e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c612:	f7ff f8f1 	bl	800b7f8 <__ulp>
 800c616:	4650      	mov	r0, sl
 800c618:	ec53 2b10 	vmov	r2, r3, d0
 800c61c:	4659      	mov	r1, fp
 800c61e:	f7f4 f80b 	bl	8000638 <__aeabi_dmul>
 800c622:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c626:	f7f3 fe51 	bl	80002cc <__adddf3>
 800c62a:	4682      	mov	sl, r0
 800c62c:	468b      	mov	fp, r1
 800c62e:	e770      	b.n	800c512 <_strtod_l+0xa62>
 800c630:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c634:	e7e0      	b.n	800c5f8 <_strtod_l+0xb48>
 800c636:	a30e      	add	r3, pc, #56	@ (adr r3, 800c670 <_strtod_l+0xbc0>)
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	f7f4 fa6e 	bl	8000b1c <__aeabi_dcmplt>
 800c640:	e798      	b.n	800c574 <_strtod_l+0xac4>
 800c642:	2300      	movs	r3, #0
 800c644:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c646:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c648:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	f7ff ba6d 	b.w	800bb2a <_strtod_l+0x7a>
 800c650:	2a65      	cmp	r2, #101	@ 0x65
 800c652:	f43f ab66 	beq.w	800bd22 <_strtod_l+0x272>
 800c656:	2a45      	cmp	r2, #69	@ 0x45
 800c658:	f43f ab63 	beq.w	800bd22 <_strtod_l+0x272>
 800c65c:	2301      	movs	r3, #1
 800c65e:	f7ff bb9e 	b.w	800bd9e <_strtod_l+0x2ee>
 800c662:	bf00      	nop
 800c664:	f3af 8000 	nop.w
 800c668:	ffc00000 	.word	0xffc00000
 800c66c:	41dfffff 	.word	0x41dfffff
 800c670:	94a03595 	.word	0x94a03595
 800c674:	3fcfffff 	.word	0x3fcfffff

0800c678 <_strtod_r>:
 800c678:	4b01      	ldr	r3, [pc, #4]	@ (800c680 <_strtod_r+0x8>)
 800c67a:	f7ff ba19 	b.w	800bab0 <_strtod_l>
 800c67e:	bf00      	nop
 800c680:	20000088 	.word	0x20000088

0800c684 <__ssputs_r>:
 800c684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c688:	688e      	ldr	r6, [r1, #8]
 800c68a:	461f      	mov	r7, r3
 800c68c:	42be      	cmp	r6, r7
 800c68e:	680b      	ldr	r3, [r1, #0]
 800c690:	4682      	mov	sl, r0
 800c692:	460c      	mov	r4, r1
 800c694:	4690      	mov	r8, r2
 800c696:	d82d      	bhi.n	800c6f4 <__ssputs_r+0x70>
 800c698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c69c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c6a0:	d026      	beq.n	800c6f0 <__ssputs_r+0x6c>
 800c6a2:	6965      	ldr	r5, [r4, #20]
 800c6a4:	6909      	ldr	r1, [r1, #16]
 800c6a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6aa:	eba3 0901 	sub.w	r9, r3, r1
 800c6ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6b2:	1c7b      	adds	r3, r7, #1
 800c6b4:	444b      	add	r3, r9
 800c6b6:	106d      	asrs	r5, r5, #1
 800c6b8:	429d      	cmp	r5, r3
 800c6ba:	bf38      	it	cc
 800c6bc:	461d      	movcc	r5, r3
 800c6be:	0553      	lsls	r3, r2, #21
 800c6c0:	d527      	bpl.n	800c712 <__ssputs_r+0x8e>
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	f7fe fc98 	bl	800aff8 <_malloc_r>
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	b360      	cbz	r0, 800c726 <__ssputs_r+0xa2>
 800c6cc:	6921      	ldr	r1, [r4, #16]
 800c6ce:	464a      	mov	r2, r9
 800c6d0:	f000 fbf0 	bl	800ceb4 <memcpy>
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6de:	81a3      	strh	r3, [r4, #12]
 800c6e0:	6126      	str	r6, [r4, #16]
 800c6e2:	6165      	str	r5, [r4, #20]
 800c6e4:	444e      	add	r6, r9
 800c6e6:	eba5 0509 	sub.w	r5, r5, r9
 800c6ea:	6026      	str	r6, [r4, #0]
 800c6ec:	60a5      	str	r5, [r4, #8]
 800c6ee:	463e      	mov	r6, r7
 800c6f0:	42be      	cmp	r6, r7
 800c6f2:	d900      	bls.n	800c6f6 <__ssputs_r+0x72>
 800c6f4:	463e      	mov	r6, r7
 800c6f6:	6820      	ldr	r0, [r4, #0]
 800c6f8:	4632      	mov	r2, r6
 800c6fa:	4641      	mov	r1, r8
 800c6fc:	f000 fb7c 	bl	800cdf8 <memmove>
 800c700:	68a3      	ldr	r3, [r4, #8]
 800c702:	1b9b      	subs	r3, r3, r6
 800c704:	60a3      	str	r3, [r4, #8]
 800c706:	6823      	ldr	r3, [r4, #0]
 800c708:	4433      	add	r3, r6
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	2000      	movs	r0, #0
 800c70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c712:	462a      	mov	r2, r5
 800c714:	f000 ff49 	bl	800d5aa <_realloc_r>
 800c718:	4606      	mov	r6, r0
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d1e0      	bne.n	800c6e0 <__ssputs_r+0x5c>
 800c71e:	6921      	ldr	r1, [r4, #16]
 800c720:	4650      	mov	r0, sl
 800c722:	f7fe fbf5 	bl	800af10 <_free_r>
 800c726:	230c      	movs	r3, #12
 800c728:	f8ca 3000 	str.w	r3, [sl]
 800c72c:	89a3      	ldrh	r3, [r4, #12]
 800c72e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c732:	81a3      	strh	r3, [r4, #12]
 800c734:	f04f 30ff 	mov.w	r0, #4294967295
 800c738:	e7e9      	b.n	800c70e <__ssputs_r+0x8a>
	...

0800c73c <_svfiprintf_r>:
 800c73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c740:	4698      	mov	r8, r3
 800c742:	898b      	ldrh	r3, [r1, #12]
 800c744:	061b      	lsls	r3, r3, #24
 800c746:	b09d      	sub	sp, #116	@ 0x74
 800c748:	4607      	mov	r7, r0
 800c74a:	460d      	mov	r5, r1
 800c74c:	4614      	mov	r4, r2
 800c74e:	d510      	bpl.n	800c772 <_svfiprintf_r+0x36>
 800c750:	690b      	ldr	r3, [r1, #16]
 800c752:	b973      	cbnz	r3, 800c772 <_svfiprintf_r+0x36>
 800c754:	2140      	movs	r1, #64	@ 0x40
 800c756:	f7fe fc4f 	bl	800aff8 <_malloc_r>
 800c75a:	6028      	str	r0, [r5, #0]
 800c75c:	6128      	str	r0, [r5, #16]
 800c75e:	b930      	cbnz	r0, 800c76e <_svfiprintf_r+0x32>
 800c760:	230c      	movs	r3, #12
 800c762:	603b      	str	r3, [r7, #0]
 800c764:	f04f 30ff 	mov.w	r0, #4294967295
 800c768:	b01d      	add	sp, #116	@ 0x74
 800c76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c76e:	2340      	movs	r3, #64	@ 0x40
 800c770:	616b      	str	r3, [r5, #20]
 800c772:	2300      	movs	r3, #0
 800c774:	9309      	str	r3, [sp, #36]	@ 0x24
 800c776:	2320      	movs	r3, #32
 800c778:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c77c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c780:	2330      	movs	r3, #48	@ 0x30
 800c782:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c920 <_svfiprintf_r+0x1e4>
 800c786:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c78a:	f04f 0901 	mov.w	r9, #1
 800c78e:	4623      	mov	r3, r4
 800c790:	469a      	mov	sl, r3
 800c792:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c796:	b10a      	cbz	r2, 800c79c <_svfiprintf_r+0x60>
 800c798:	2a25      	cmp	r2, #37	@ 0x25
 800c79a:	d1f9      	bne.n	800c790 <_svfiprintf_r+0x54>
 800c79c:	ebba 0b04 	subs.w	fp, sl, r4
 800c7a0:	d00b      	beq.n	800c7ba <_svfiprintf_r+0x7e>
 800c7a2:	465b      	mov	r3, fp
 800c7a4:	4622      	mov	r2, r4
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	4638      	mov	r0, r7
 800c7aa:	f7ff ff6b 	bl	800c684 <__ssputs_r>
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	f000 80a7 	beq.w	800c902 <_svfiprintf_r+0x1c6>
 800c7b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7b6:	445a      	add	r2, fp
 800c7b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f000 809f 	beq.w	800c902 <_svfiprintf_r+0x1c6>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7ce:	f10a 0a01 	add.w	sl, sl, #1
 800c7d2:	9304      	str	r3, [sp, #16]
 800c7d4:	9307      	str	r3, [sp, #28]
 800c7d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7da:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7dc:	4654      	mov	r4, sl
 800c7de:	2205      	movs	r2, #5
 800c7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e4:	484e      	ldr	r0, [pc, #312]	@ (800c920 <_svfiprintf_r+0x1e4>)
 800c7e6:	f7f3 fd13 	bl	8000210 <memchr>
 800c7ea:	9a04      	ldr	r2, [sp, #16]
 800c7ec:	b9d8      	cbnz	r0, 800c826 <_svfiprintf_r+0xea>
 800c7ee:	06d0      	lsls	r0, r2, #27
 800c7f0:	bf44      	itt	mi
 800c7f2:	2320      	movmi	r3, #32
 800c7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7f8:	0711      	lsls	r1, r2, #28
 800c7fa:	bf44      	itt	mi
 800c7fc:	232b      	movmi	r3, #43	@ 0x2b
 800c7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c802:	f89a 3000 	ldrb.w	r3, [sl]
 800c806:	2b2a      	cmp	r3, #42	@ 0x2a
 800c808:	d015      	beq.n	800c836 <_svfiprintf_r+0xfa>
 800c80a:	9a07      	ldr	r2, [sp, #28]
 800c80c:	4654      	mov	r4, sl
 800c80e:	2000      	movs	r0, #0
 800c810:	f04f 0c0a 	mov.w	ip, #10
 800c814:	4621      	mov	r1, r4
 800c816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c81a:	3b30      	subs	r3, #48	@ 0x30
 800c81c:	2b09      	cmp	r3, #9
 800c81e:	d94b      	bls.n	800c8b8 <_svfiprintf_r+0x17c>
 800c820:	b1b0      	cbz	r0, 800c850 <_svfiprintf_r+0x114>
 800c822:	9207      	str	r2, [sp, #28]
 800c824:	e014      	b.n	800c850 <_svfiprintf_r+0x114>
 800c826:	eba0 0308 	sub.w	r3, r0, r8
 800c82a:	fa09 f303 	lsl.w	r3, r9, r3
 800c82e:	4313      	orrs	r3, r2
 800c830:	9304      	str	r3, [sp, #16]
 800c832:	46a2      	mov	sl, r4
 800c834:	e7d2      	b.n	800c7dc <_svfiprintf_r+0xa0>
 800c836:	9b03      	ldr	r3, [sp, #12]
 800c838:	1d19      	adds	r1, r3, #4
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	9103      	str	r1, [sp, #12]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	bfbb      	ittet	lt
 800c842:	425b      	neglt	r3, r3
 800c844:	f042 0202 	orrlt.w	r2, r2, #2
 800c848:	9307      	strge	r3, [sp, #28]
 800c84a:	9307      	strlt	r3, [sp, #28]
 800c84c:	bfb8      	it	lt
 800c84e:	9204      	strlt	r2, [sp, #16]
 800c850:	7823      	ldrb	r3, [r4, #0]
 800c852:	2b2e      	cmp	r3, #46	@ 0x2e
 800c854:	d10a      	bne.n	800c86c <_svfiprintf_r+0x130>
 800c856:	7863      	ldrb	r3, [r4, #1]
 800c858:	2b2a      	cmp	r3, #42	@ 0x2a
 800c85a:	d132      	bne.n	800c8c2 <_svfiprintf_r+0x186>
 800c85c:	9b03      	ldr	r3, [sp, #12]
 800c85e:	1d1a      	adds	r2, r3, #4
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	9203      	str	r2, [sp, #12]
 800c864:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c868:	3402      	adds	r4, #2
 800c86a:	9305      	str	r3, [sp, #20]
 800c86c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c930 <_svfiprintf_r+0x1f4>
 800c870:	7821      	ldrb	r1, [r4, #0]
 800c872:	2203      	movs	r2, #3
 800c874:	4650      	mov	r0, sl
 800c876:	f7f3 fccb 	bl	8000210 <memchr>
 800c87a:	b138      	cbz	r0, 800c88c <_svfiprintf_r+0x150>
 800c87c:	9b04      	ldr	r3, [sp, #16]
 800c87e:	eba0 000a 	sub.w	r0, r0, sl
 800c882:	2240      	movs	r2, #64	@ 0x40
 800c884:	4082      	lsls	r2, r0
 800c886:	4313      	orrs	r3, r2
 800c888:	3401      	adds	r4, #1
 800c88a:	9304      	str	r3, [sp, #16]
 800c88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c890:	4824      	ldr	r0, [pc, #144]	@ (800c924 <_svfiprintf_r+0x1e8>)
 800c892:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c896:	2206      	movs	r2, #6
 800c898:	f7f3 fcba 	bl	8000210 <memchr>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d036      	beq.n	800c90e <_svfiprintf_r+0x1d2>
 800c8a0:	4b21      	ldr	r3, [pc, #132]	@ (800c928 <_svfiprintf_r+0x1ec>)
 800c8a2:	bb1b      	cbnz	r3, 800c8ec <_svfiprintf_r+0x1b0>
 800c8a4:	9b03      	ldr	r3, [sp, #12]
 800c8a6:	3307      	adds	r3, #7
 800c8a8:	f023 0307 	bic.w	r3, r3, #7
 800c8ac:	3308      	adds	r3, #8
 800c8ae:	9303      	str	r3, [sp, #12]
 800c8b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b2:	4433      	add	r3, r6
 800c8b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8b6:	e76a      	b.n	800c78e <_svfiprintf_r+0x52>
 800c8b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8bc:	460c      	mov	r4, r1
 800c8be:	2001      	movs	r0, #1
 800c8c0:	e7a8      	b.n	800c814 <_svfiprintf_r+0xd8>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	3401      	adds	r4, #1
 800c8c6:	9305      	str	r3, [sp, #20]
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	f04f 0c0a 	mov.w	ip, #10
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8d4:	3a30      	subs	r2, #48	@ 0x30
 800c8d6:	2a09      	cmp	r2, #9
 800c8d8:	d903      	bls.n	800c8e2 <_svfiprintf_r+0x1a6>
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d0c6      	beq.n	800c86c <_svfiprintf_r+0x130>
 800c8de:	9105      	str	r1, [sp, #20]
 800c8e0:	e7c4      	b.n	800c86c <_svfiprintf_r+0x130>
 800c8e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e7f0      	b.n	800c8ce <_svfiprintf_r+0x192>
 800c8ec:	ab03      	add	r3, sp, #12
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	462a      	mov	r2, r5
 800c8f2:	4b0e      	ldr	r3, [pc, #56]	@ (800c92c <_svfiprintf_r+0x1f0>)
 800c8f4:	a904      	add	r1, sp, #16
 800c8f6:	4638      	mov	r0, r7
 800c8f8:	f7fc fade 	bl	8008eb8 <_printf_float>
 800c8fc:	1c42      	adds	r2, r0, #1
 800c8fe:	4606      	mov	r6, r0
 800c900:	d1d6      	bne.n	800c8b0 <_svfiprintf_r+0x174>
 800c902:	89ab      	ldrh	r3, [r5, #12]
 800c904:	065b      	lsls	r3, r3, #25
 800c906:	f53f af2d 	bmi.w	800c764 <_svfiprintf_r+0x28>
 800c90a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c90c:	e72c      	b.n	800c768 <_svfiprintf_r+0x2c>
 800c90e:	ab03      	add	r3, sp, #12
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	462a      	mov	r2, r5
 800c914:	4b05      	ldr	r3, [pc, #20]	@ (800c92c <_svfiprintf_r+0x1f0>)
 800c916:	a904      	add	r1, sp, #16
 800c918:	4638      	mov	r0, r7
 800c91a:	f7fc fd65 	bl	80093e8 <_printf_i>
 800c91e:	e7ed      	b.n	800c8fc <_svfiprintf_r+0x1c0>
 800c920:	0800e0e0 	.word	0x0800e0e0
 800c924:	0800e0ea 	.word	0x0800e0ea
 800c928:	08008eb9 	.word	0x08008eb9
 800c92c:	0800c685 	.word	0x0800c685
 800c930:	0800e0e6 	.word	0x0800e0e6

0800c934 <__sfputc_r>:
 800c934:	6893      	ldr	r3, [r2, #8]
 800c936:	3b01      	subs	r3, #1
 800c938:	2b00      	cmp	r3, #0
 800c93a:	b410      	push	{r4}
 800c93c:	6093      	str	r3, [r2, #8]
 800c93e:	da08      	bge.n	800c952 <__sfputc_r+0x1e>
 800c940:	6994      	ldr	r4, [r2, #24]
 800c942:	42a3      	cmp	r3, r4
 800c944:	db01      	blt.n	800c94a <__sfputc_r+0x16>
 800c946:	290a      	cmp	r1, #10
 800c948:	d103      	bne.n	800c952 <__sfputc_r+0x1e>
 800c94a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c94e:	f7fd bafc 	b.w	8009f4a <__swbuf_r>
 800c952:	6813      	ldr	r3, [r2, #0]
 800c954:	1c58      	adds	r0, r3, #1
 800c956:	6010      	str	r0, [r2, #0]
 800c958:	7019      	strb	r1, [r3, #0]
 800c95a:	4608      	mov	r0, r1
 800c95c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <__sfputs_r>:
 800c962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c964:	4606      	mov	r6, r0
 800c966:	460f      	mov	r7, r1
 800c968:	4614      	mov	r4, r2
 800c96a:	18d5      	adds	r5, r2, r3
 800c96c:	42ac      	cmp	r4, r5
 800c96e:	d101      	bne.n	800c974 <__sfputs_r+0x12>
 800c970:	2000      	movs	r0, #0
 800c972:	e007      	b.n	800c984 <__sfputs_r+0x22>
 800c974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c978:	463a      	mov	r2, r7
 800c97a:	4630      	mov	r0, r6
 800c97c:	f7ff ffda 	bl	800c934 <__sfputc_r>
 800c980:	1c43      	adds	r3, r0, #1
 800c982:	d1f3      	bne.n	800c96c <__sfputs_r+0xa>
 800c984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c988 <_vfiprintf_r>:
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	460d      	mov	r5, r1
 800c98e:	b09d      	sub	sp, #116	@ 0x74
 800c990:	4614      	mov	r4, r2
 800c992:	4698      	mov	r8, r3
 800c994:	4606      	mov	r6, r0
 800c996:	b118      	cbz	r0, 800c9a0 <_vfiprintf_r+0x18>
 800c998:	6a03      	ldr	r3, [r0, #32]
 800c99a:	b90b      	cbnz	r3, 800c9a0 <_vfiprintf_r+0x18>
 800c99c:	f7fd f8e4 	bl	8009b68 <__sinit>
 800c9a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9a2:	07d9      	lsls	r1, r3, #31
 800c9a4:	d405      	bmi.n	800c9b2 <_vfiprintf_r+0x2a>
 800c9a6:	89ab      	ldrh	r3, [r5, #12]
 800c9a8:	059a      	lsls	r2, r3, #22
 800c9aa:	d402      	bmi.n	800c9b2 <_vfiprintf_r+0x2a>
 800c9ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9ae:	f7fd fc3a 	bl	800a226 <__retarget_lock_acquire_recursive>
 800c9b2:	89ab      	ldrh	r3, [r5, #12]
 800c9b4:	071b      	lsls	r3, r3, #28
 800c9b6:	d501      	bpl.n	800c9bc <_vfiprintf_r+0x34>
 800c9b8:	692b      	ldr	r3, [r5, #16]
 800c9ba:	b99b      	cbnz	r3, 800c9e4 <_vfiprintf_r+0x5c>
 800c9bc:	4629      	mov	r1, r5
 800c9be:	4630      	mov	r0, r6
 800c9c0:	f7fd fb02 	bl	8009fc8 <__swsetup_r>
 800c9c4:	b170      	cbz	r0, 800c9e4 <_vfiprintf_r+0x5c>
 800c9c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9c8:	07dc      	lsls	r4, r3, #31
 800c9ca:	d504      	bpl.n	800c9d6 <_vfiprintf_r+0x4e>
 800c9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d0:	b01d      	add	sp, #116	@ 0x74
 800c9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d6:	89ab      	ldrh	r3, [r5, #12]
 800c9d8:	0598      	lsls	r0, r3, #22
 800c9da:	d4f7      	bmi.n	800c9cc <_vfiprintf_r+0x44>
 800c9dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9de:	f7fd fc23 	bl	800a228 <__retarget_lock_release_recursive>
 800c9e2:	e7f3      	b.n	800c9cc <_vfiprintf_r+0x44>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9e8:	2320      	movs	r3, #32
 800c9ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9f2:	2330      	movs	r3, #48	@ 0x30
 800c9f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cba4 <_vfiprintf_r+0x21c>
 800c9f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9fc:	f04f 0901 	mov.w	r9, #1
 800ca00:	4623      	mov	r3, r4
 800ca02:	469a      	mov	sl, r3
 800ca04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca08:	b10a      	cbz	r2, 800ca0e <_vfiprintf_r+0x86>
 800ca0a:	2a25      	cmp	r2, #37	@ 0x25
 800ca0c:	d1f9      	bne.n	800ca02 <_vfiprintf_r+0x7a>
 800ca0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca12:	d00b      	beq.n	800ca2c <_vfiprintf_r+0xa4>
 800ca14:	465b      	mov	r3, fp
 800ca16:	4622      	mov	r2, r4
 800ca18:	4629      	mov	r1, r5
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f7ff ffa1 	bl	800c962 <__sfputs_r>
 800ca20:	3001      	adds	r0, #1
 800ca22:	f000 80a7 	beq.w	800cb74 <_vfiprintf_r+0x1ec>
 800ca26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca28:	445a      	add	r2, fp
 800ca2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f000 809f 	beq.w	800cb74 <_vfiprintf_r+0x1ec>
 800ca36:	2300      	movs	r3, #0
 800ca38:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca40:	f10a 0a01 	add.w	sl, sl, #1
 800ca44:	9304      	str	r3, [sp, #16]
 800ca46:	9307      	str	r3, [sp, #28]
 800ca48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca4e:	4654      	mov	r4, sl
 800ca50:	2205      	movs	r2, #5
 800ca52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca56:	4853      	ldr	r0, [pc, #332]	@ (800cba4 <_vfiprintf_r+0x21c>)
 800ca58:	f7f3 fbda 	bl	8000210 <memchr>
 800ca5c:	9a04      	ldr	r2, [sp, #16]
 800ca5e:	b9d8      	cbnz	r0, 800ca98 <_vfiprintf_r+0x110>
 800ca60:	06d1      	lsls	r1, r2, #27
 800ca62:	bf44      	itt	mi
 800ca64:	2320      	movmi	r3, #32
 800ca66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca6a:	0713      	lsls	r3, r2, #28
 800ca6c:	bf44      	itt	mi
 800ca6e:	232b      	movmi	r3, #43	@ 0x2b
 800ca70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca74:	f89a 3000 	ldrb.w	r3, [sl]
 800ca78:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca7a:	d015      	beq.n	800caa8 <_vfiprintf_r+0x120>
 800ca7c:	9a07      	ldr	r2, [sp, #28]
 800ca7e:	4654      	mov	r4, sl
 800ca80:	2000      	movs	r0, #0
 800ca82:	f04f 0c0a 	mov.w	ip, #10
 800ca86:	4621      	mov	r1, r4
 800ca88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca8c:	3b30      	subs	r3, #48	@ 0x30
 800ca8e:	2b09      	cmp	r3, #9
 800ca90:	d94b      	bls.n	800cb2a <_vfiprintf_r+0x1a2>
 800ca92:	b1b0      	cbz	r0, 800cac2 <_vfiprintf_r+0x13a>
 800ca94:	9207      	str	r2, [sp, #28]
 800ca96:	e014      	b.n	800cac2 <_vfiprintf_r+0x13a>
 800ca98:	eba0 0308 	sub.w	r3, r0, r8
 800ca9c:	fa09 f303 	lsl.w	r3, r9, r3
 800caa0:	4313      	orrs	r3, r2
 800caa2:	9304      	str	r3, [sp, #16]
 800caa4:	46a2      	mov	sl, r4
 800caa6:	e7d2      	b.n	800ca4e <_vfiprintf_r+0xc6>
 800caa8:	9b03      	ldr	r3, [sp, #12]
 800caaa:	1d19      	adds	r1, r3, #4
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	9103      	str	r1, [sp, #12]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	bfbb      	ittet	lt
 800cab4:	425b      	neglt	r3, r3
 800cab6:	f042 0202 	orrlt.w	r2, r2, #2
 800caba:	9307      	strge	r3, [sp, #28]
 800cabc:	9307      	strlt	r3, [sp, #28]
 800cabe:	bfb8      	it	lt
 800cac0:	9204      	strlt	r2, [sp, #16]
 800cac2:	7823      	ldrb	r3, [r4, #0]
 800cac4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cac6:	d10a      	bne.n	800cade <_vfiprintf_r+0x156>
 800cac8:	7863      	ldrb	r3, [r4, #1]
 800caca:	2b2a      	cmp	r3, #42	@ 0x2a
 800cacc:	d132      	bne.n	800cb34 <_vfiprintf_r+0x1ac>
 800cace:	9b03      	ldr	r3, [sp, #12]
 800cad0:	1d1a      	adds	r2, r3, #4
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	9203      	str	r2, [sp, #12]
 800cad6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cada:	3402      	adds	r4, #2
 800cadc:	9305      	str	r3, [sp, #20]
 800cade:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbb4 <_vfiprintf_r+0x22c>
 800cae2:	7821      	ldrb	r1, [r4, #0]
 800cae4:	2203      	movs	r2, #3
 800cae6:	4650      	mov	r0, sl
 800cae8:	f7f3 fb92 	bl	8000210 <memchr>
 800caec:	b138      	cbz	r0, 800cafe <_vfiprintf_r+0x176>
 800caee:	9b04      	ldr	r3, [sp, #16]
 800caf0:	eba0 000a 	sub.w	r0, r0, sl
 800caf4:	2240      	movs	r2, #64	@ 0x40
 800caf6:	4082      	lsls	r2, r0
 800caf8:	4313      	orrs	r3, r2
 800cafa:	3401      	adds	r4, #1
 800cafc:	9304      	str	r3, [sp, #16]
 800cafe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb02:	4829      	ldr	r0, [pc, #164]	@ (800cba8 <_vfiprintf_r+0x220>)
 800cb04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb08:	2206      	movs	r2, #6
 800cb0a:	f7f3 fb81 	bl	8000210 <memchr>
 800cb0e:	2800      	cmp	r0, #0
 800cb10:	d03f      	beq.n	800cb92 <_vfiprintf_r+0x20a>
 800cb12:	4b26      	ldr	r3, [pc, #152]	@ (800cbac <_vfiprintf_r+0x224>)
 800cb14:	bb1b      	cbnz	r3, 800cb5e <_vfiprintf_r+0x1d6>
 800cb16:	9b03      	ldr	r3, [sp, #12]
 800cb18:	3307      	adds	r3, #7
 800cb1a:	f023 0307 	bic.w	r3, r3, #7
 800cb1e:	3308      	adds	r3, #8
 800cb20:	9303      	str	r3, [sp, #12]
 800cb22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb24:	443b      	add	r3, r7
 800cb26:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb28:	e76a      	b.n	800ca00 <_vfiprintf_r+0x78>
 800cb2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb2e:	460c      	mov	r4, r1
 800cb30:	2001      	movs	r0, #1
 800cb32:	e7a8      	b.n	800ca86 <_vfiprintf_r+0xfe>
 800cb34:	2300      	movs	r3, #0
 800cb36:	3401      	adds	r4, #1
 800cb38:	9305      	str	r3, [sp, #20]
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	f04f 0c0a 	mov.w	ip, #10
 800cb40:	4620      	mov	r0, r4
 800cb42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb46:	3a30      	subs	r2, #48	@ 0x30
 800cb48:	2a09      	cmp	r2, #9
 800cb4a:	d903      	bls.n	800cb54 <_vfiprintf_r+0x1cc>
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d0c6      	beq.n	800cade <_vfiprintf_r+0x156>
 800cb50:	9105      	str	r1, [sp, #20]
 800cb52:	e7c4      	b.n	800cade <_vfiprintf_r+0x156>
 800cb54:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb58:	4604      	mov	r4, r0
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e7f0      	b.n	800cb40 <_vfiprintf_r+0x1b8>
 800cb5e:	ab03      	add	r3, sp, #12
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	462a      	mov	r2, r5
 800cb64:	4b12      	ldr	r3, [pc, #72]	@ (800cbb0 <_vfiprintf_r+0x228>)
 800cb66:	a904      	add	r1, sp, #16
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f7fc f9a5 	bl	8008eb8 <_printf_float>
 800cb6e:	4607      	mov	r7, r0
 800cb70:	1c78      	adds	r0, r7, #1
 800cb72:	d1d6      	bne.n	800cb22 <_vfiprintf_r+0x19a>
 800cb74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb76:	07d9      	lsls	r1, r3, #31
 800cb78:	d405      	bmi.n	800cb86 <_vfiprintf_r+0x1fe>
 800cb7a:	89ab      	ldrh	r3, [r5, #12]
 800cb7c:	059a      	lsls	r2, r3, #22
 800cb7e:	d402      	bmi.n	800cb86 <_vfiprintf_r+0x1fe>
 800cb80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb82:	f7fd fb51 	bl	800a228 <__retarget_lock_release_recursive>
 800cb86:	89ab      	ldrh	r3, [r5, #12]
 800cb88:	065b      	lsls	r3, r3, #25
 800cb8a:	f53f af1f 	bmi.w	800c9cc <_vfiprintf_r+0x44>
 800cb8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb90:	e71e      	b.n	800c9d0 <_vfiprintf_r+0x48>
 800cb92:	ab03      	add	r3, sp, #12
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	462a      	mov	r2, r5
 800cb98:	4b05      	ldr	r3, [pc, #20]	@ (800cbb0 <_vfiprintf_r+0x228>)
 800cb9a:	a904      	add	r1, sp, #16
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7fc fc23 	bl	80093e8 <_printf_i>
 800cba2:	e7e4      	b.n	800cb6e <_vfiprintf_r+0x1e6>
 800cba4:	0800e0e0 	.word	0x0800e0e0
 800cba8:	0800e0ea 	.word	0x0800e0ea
 800cbac:	08008eb9 	.word	0x08008eb9
 800cbb0:	0800c963 	.word	0x0800c963
 800cbb4:	0800e0e6 	.word	0x0800e0e6

0800cbb8 <__sflush_r>:
 800cbb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc0:	0716      	lsls	r6, r2, #28
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	d454      	bmi.n	800cc72 <__sflush_r+0xba>
 800cbc8:	684b      	ldr	r3, [r1, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	dc02      	bgt.n	800cbd4 <__sflush_r+0x1c>
 800cbce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	dd48      	ble.n	800cc66 <__sflush_r+0xae>
 800cbd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d045      	beq.n	800cc66 <__sflush_r+0xae>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cbe0:	682f      	ldr	r7, [r5, #0]
 800cbe2:	6a21      	ldr	r1, [r4, #32]
 800cbe4:	602b      	str	r3, [r5, #0]
 800cbe6:	d030      	beq.n	800cc4a <__sflush_r+0x92>
 800cbe8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	0759      	lsls	r1, r3, #29
 800cbee:	d505      	bpl.n	800cbfc <__sflush_r+0x44>
 800cbf0:	6863      	ldr	r3, [r4, #4]
 800cbf2:	1ad2      	subs	r2, r2, r3
 800cbf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbf6:	b10b      	cbz	r3, 800cbfc <__sflush_r+0x44>
 800cbf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbfa:	1ad2      	subs	r2, r2, r3
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc00:	6a21      	ldr	r1, [r4, #32]
 800cc02:	4628      	mov	r0, r5
 800cc04:	47b0      	blx	r6
 800cc06:	1c43      	adds	r3, r0, #1
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	d106      	bne.n	800cc1a <__sflush_r+0x62>
 800cc0c:	6829      	ldr	r1, [r5, #0]
 800cc0e:	291d      	cmp	r1, #29
 800cc10:	d82b      	bhi.n	800cc6a <__sflush_r+0xb2>
 800cc12:	4a2a      	ldr	r2, [pc, #168]	@ (800ccbc <__sflush_r+0x104>)
 800cc14:	410a      	asrs	r2, r1
 800cc16:	07d6      	lsls	r6, r2, #31
 800cc18:	d427      	bmi.n	800cc6a <__sflush_r+0xb2>
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	6062      	str	r2, [r4, #4]
 800cc1e:	04d9      	lsls	r1, r3, #19
 800cc20:	6922      	ldr	r2, [r4, #16]
 800cc22:	6022      	str	r2, [r4, #0]
 800cc24:	d504      	bpl.n	800cc30 <__sflush_r+0x78>
 800cc26:	1c42      	adds	r2, r0, #1
 800cc28:	d101      	bne.n	800cc2e <__sflush_r+0x76>
 800cc2a:	682b      	ldr	r3, [r5, #0]
 800cc2c:	b903      	cbnz	r3, 800cc30 <__sflush_r+0x78>
 800cc2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc32:	602f      	str	r7, [r5, #0]
 800cc34:	b1b9      	cbz	r1, 800cc66 <__sflush_r+0xae>
 800cc36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc3a:	4299      	cmp	r1, r3
 800cc3c:	d002      	beq.n	800cc44 <__sflush_r+0x8c>
 800cc3e:	4628      	mov	r0, r5
 800cc40:	f7fe f966 	bl	800af10 <_free_r>
 800cc44:	2300      	movs	r3, #0
 800cc46:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc48:	e00d      	b.n	800cc66 <__sflush_r+0xae>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	47b0      	blx	r6
 800cc50:	4602      	mov	r2, r0
 800cc52:	1c50      	adds	r0, r2, #1
 800cc54:	d1c9      	bne.n	800cbea <__sflush_r+0x32>
 800cc56:	682b      	ldr	r3, [r5, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d0c6      	beq.n	800cbea <__sflush_r+0x32>
 800cc5c:	2b1d      	cmp	r3, #29
 800cc5e:	d001      	beq.n	800cc64 <__sflush_r+0xac>
 800cc60:	2b16      	cmp	r3, #22
 800cc62:	d11e      	bne.n	800cca2 <__sflush_r+0xea>
 800cc64:	602f      	str	r7, [r5, #0]
 800cc66:	2000      	movs	r0, #0
 800cc68:	e022      	b.n	800ccb0 <__sflush_r+0xf8>
 800cc6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc6e:	b21b      	sxth	r3, r3
 800cc70:	e01b      	b.n	800ccaa <__sflush_r+0xf2>
 800cc72:	690f      	ldr	r7, [r1, #16]
 800cc74:	2f00      	cmp	r7, #0
 800cc76:	d0f6      	beq.n	800cc66 <__sflush_r+0xae>
 800cc78:	0793      	lsls	r3, r2, #30
 800cc7a:	680e      	ldr	r6, [r1, #0]
 800cc7c:	bf08      	it	eq
 800cc7e:	694b      	ldreq	r3, [r1, #20]
 800cc80:	600f      	str	r7, [r1, #0]
 800cc82:	bf18      	it	ne
 800cc84:	2300      	movne	r3, #0
 800cc86:	eba6 0807 	sub.w	r8, r6, r7
 800cc8a:	608b      	str	r3, [r1, #8]
 800cc8c:	f1b8 0f00 	cmp.w	r8, #0
 800cc90:	dde9      	ble.n	800cc66 <__sflush_r+0xae>
 800cc92:	6a21      	ldr	r1, [r4, #32]
 800cc94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc96:	4643      	mov	r3, r8
 800cc98:	463a      	mov	r2, r7
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	47b0      	blx	r6
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	dc08      	bgt.n	800ccb4 <__sflush_r+0xfc>
 800cca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccaa:	81a3      	strh	r3, [r4, #12]
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb4:	4407      	add	r7, r0
 800ccb6:	eba8 0800 	sub.w	r8, r8, r0
 800ccba:	e7e7      	b.n	800cc8c <__sflush_r+0xd4>
 800ccbc:	dfbffffe 	.word	0xdfbffffe

0800ccc0 <_fflush_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	690b      	ldr	r3, [r1, #16]
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	b913      	cbnz	r3, 800ccd0 <_fflush_r+0x10>
 800ccca:	2500      	movs	r5, #0
 800cccc:	4628      	mov	r0, r5
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	b118      	cbz	r0, 800ccda <_fflush_r+0x1a>
 800ccd2:	6a03      	ldr	r3, [r0, #32]
 800ccd4:	b90b      	cbnz	r3, 800ccda <_fflush_r+0x1a>
 800ccd6:	f7fc ff47 	bl	8009b68 <__sinit>
 800ccda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d0f3      	beq.n	800ccca <_fflush_r+0xa>
 800cce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cce4:	07d0      	lsls	r0, r2, #31
 800cce6:	d404      	bmi.n	800ccf2 <_fflush_r+0x32>
 800cce8:	0599      	lsls	r1, r3, #22
 800ccea:	d402      	bmi.n	800ccf2 <_fflush_r+0x32>
 800ccec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccee:	f7fd fa9a 	bl	800a226 <__retarget_lock_acquire_recursive>
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	f7ff ff5f 	bl	800cbb8 <__sflush_r>
 800ccfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccfc:	07da      	lsls	r2, r3, #31
 800ccfe:	4605      	mov	r5, r0
 800cd00:	d4e4      	bmi.n	800cccc <_fflush_r+0xc>
 800cd02:	89a3      	ldrh	r3, [r4, #12]
 800cd04:	059b      	lsls	r3, r3, #22
 800cd06:	d4e1      	bmi.n	800cccc <_fflush_r+0xc>
 800cd08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd0a:	f7fd fa8d 	bl	800a228 <__retarget_lock_release_recursive>
 800cd0e:	e7dd      	b.n	800cccc <_fflush_r+0xc>

0800cd10 <fiprintf>:
 800cd10:	b40e      	push	{r1, r2, r3}
 800cd12:	b503      	push	{r0, r1, lr}
 800cd14:	4601      	mov	r1, r0
 800cd16:	ab03      	add	r3, sp, #12
 800cd18:	4805      	ldr	r0, [pc, #20]	@ (800cd30 <fiprintf+0x20>)
 800cd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd1e:	6800      	ldr	r0, [r0, #0]
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	f7ff fe31 	bl	800c988 <_vfiprintf_r>
 800cd26:	b002      	add	sp, #8
 800cd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd2c:	b003      	add	sp, #12
 800cd2e:	4770      	bx	lr
 800cd30:	20000038 	.word	0x20000038

0800cd34 <__swhatbuf_r>:
 800cd34:	b570      	push	{r4, r5, r6, lr}
 800cd36:	460c      	mov	r4, r1
 800cd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd3c:	2900      	cmp	r1, #0
 800cd3e:	b096      	sub	sp, #88	@ 0x58
 800cd40:	4615      	mov	r5, r2
 800cd42:	461e      	mov	r6, r3
 800cd44:	da0d      	bge.n	800cd62 <__swhatbuf_r+0x2e>
 800cd46:	89a3      	ldrh	r3, [r4, #12]
 800cd48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd4c:	f04f 0100 	mov.w	r1, #0
 800cd50:	bf14      	ite	ne
 800cd52:	2340      	movne	r3, #64	@ 0x40
 800cd54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd58:	2000      	movs	r0, #0
 800cd5a:	6031      	str	r1, [r6, #0]
 800cd5c:	602b      	str	r3, [r5, #0]
 800cd5e:	b016      	add	sp, #88	@ 0x58
 800cd60:	bd70      	pop	{r4, r5, r6, pc}
 800cd62:	466a      	mov	r2, sp
 800cd64:	f000 f874 	bl	800ce50 <_fstat_r>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	dbec      	blt.n	800cd46 <__swhatbuf_r+0x12>
 800cd6c:	9901      	ldr	r1, [sp, #4]
 800cd6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd76:	4259      	negs	r1, r3
 800cd78:	4159      	adcs	r1, r3
 800cd7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd7e:	e7eb      	b.n	800cd58 <__swhatbuf_r+0x24>

0800cd80 <__smakebuf_r>:
 800cd80:	898b      	ldrh	r3, [r1, #12]
 800cd82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd84:	079d      	lsls	r5, r3, #30
 800cd86:	4606      	mov	r6, r0
 800cd88:	460c      	mov	r4, r1
 800cd8a:	d507      	bpl.n	800cd9c <__smakebuf_r+0x1c>
 800cd8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	6123      	str	r3, [r4, #16]
 800cd94:	2301      	movs	r3, #1
 800cd96:	6163      	str	r3, [r4, #20]
 800cd98:	b003      	add	sp, #12
 800cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd9c:	ab01      	add	r3, sp, #4
 800cd9e:	466a      	mov	r2, sp
 800cda0:	f7ff ffc8 	bl	800cd34 <__swhatbuf_r>
 800cda4:	9f00      	ldr	r7, [sp, #0]
 800cda6:	4605      	mov	r5, r0
 800cda8:	4639      	mov	r1, r7
 800cdaa:	4630      	mov	r0, r6
 800cdac:	f7fe f924 	bl	800aff8 <_malloc_r>
 800cdb0:	b948      	cbnz	r0, 800cdc6 <__smakebuf_r+0x46>
 800cdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb6:	059a      	lsls	r2, r3, #22
 800cdb8:	d4ee      	bmi.n	800cd98 <__smakebuf_r+0x18>
 800cdba:	f023 0303 	bic.w	r3, r3, #3
 800cdbe:	f043 0302 	orr.w	r3, r3, #2
 800cdc2:	81a3      	strh	r3, [r4, #12]
 800cdc4:	e7e2      	b.n	800cd8c <__smakebuf_r+0xc>
 800cdc6:	89a3      	ldrh	r3, [r4, #12]
 800cdc8:	6020      	str	r0, [r4, #0]
 800cdca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	9b01      	ldr	r3, [sp, #4]
 800cdd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cdd6:	b15b      	cbz	r3, 800cdf0 <__smakebuf_r+0x70>
 800cdd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cddc:	4630      	mov	r0, r6
 800cdde:	f000 f849 	bl	800ce74 <_isatty_r>
 800cde2:	b128      	cbz	r0, 800cdf0 <__smakebuf_r+0x70>
 800cde4:	89a3      	ldrh	r3, [r4, #12]
 800cde6:	f023 0303 	bic.w	r3, r3, #3
 800cdea:	f043 0301 	orr.w	r3, r3, #1
 800cdee:	81a3      	strh	r3, [r4, #12]
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	431d      	orrs	r5, r3
 800cdf4:	81a5      	strh	r5, [r4, #12]
 800cdf6:	e7cf      	b.n	800cd98 <__smakebuf_r+0x18>

0800cdf8 <memmove>:
 800cdf8:	4288      	cmp	r0, r1
 800cdfa:	b510      	push	{r4, lr}
 800cdfc:	eb01 0402 	add.w	r4, r1, r2
 800ce00:	d902      	bls.n	800ce08 <memmove+0x10>
 800ce02:	4284      	cmp	r4, r0
 800ce04:	4623      	mov	r3, r4
 800ce06:	d807      	bhi.n	800ce18 <memmove+0x20>
 800ce08:	1e43      	subs	r3, r0, #1
 800ce0a:	42a1      	cmp	r1, r4
 800ce0c:	d008      	beq.n	800ce20 <memmove+0x28>
 800ce0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce16:	e7f8      	b.n	800ce0a <memmove+0x12>
 800ce18:	4402      	add	r2, r0
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	428a      	cmp	r2, r1
 800ce1e:	d100      	bne.n	800ce22 <memmove+0x2a>
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce2a:	e7f7      	b.n	800ce1c <memmove+0x24>

0800ce2c <strncmp>:
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	b16a      	cbz	r2, 800ce4c <strncmp+0x20>
 800ce30:	3901      	subs	r1, #1
 800ce32:	1884      	adds	r4, r0, r2
 800ce34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d103      	bne.n	800ce48 <strncmp+0x1c>
 800ce40:	42a0      	cmp	r0, r4
 800ce42:	d001      	beq.n	800ce48 <strncmp+0x1c>
 800ce44:	2a00      	cmp	r2, #0
 800ce46:	d1f5      	bne.n	800ce34 <strncmp+0x8>
 800ce48:	1ad0      	subs	r0, r2, r3
 800ce4a:	bd10      	pop	{r4, pc}
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	e7fc      	b.n	800ce4a <strncmp+0x1e>

0800ce50 <_fstat_r>:
 800ce50:	b538      	push	{r3, r4, r5, lr}
 800ce52:	4d07      	ldr	r5, [pc, #28]	@ (800ce70 <_fstat_r+0x20>)
 800ce54:	2300      	movs	r3, #0
 800ce56:	4604      	mov	r4, r0
 800ce58:	4608      	mov	r0, r1
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	602b      	str	r3, [r5, #0]
 800ce5e:	f7f5 fd5c 	bl	800291a <_fstat>
 800ce62:	1c43      	adds	r3, r0, #1
 800ce64:	d102      	bne.n	800ce6c <_fstat_r+0x1c>
 800ce66:	682b      	ldr	r3, [r5, #0]
 800ce68:	b103      	cbz	r3, 800ce6c <_fstat_r+0x1c>
 800ce6a:	6023      	str	r3, [r4, #0]
 800ce6c:	bd38      	pop	{r3, r4, r5, pc}
 800ce6e:	bf00      	nop
 800ce70:	20000f88 	.word	0x20000f88

0800ce74 <_isatty_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d06      	ldr	r5, [pc, #24]	@ (800ce90 <_isatty_r+0x1c>)
 800ce78:	2300      	movs	r3, #0
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	4608      	mov	r0, r1
 800ce7e:	602b      	str	r3, [r5, #0]
 800ce80:	f7f5 fd5b 	bl	800293a <_isatty>
 800ce84:	1c43      	adds	r3, r0, #1
 800ce86:	d102      	bne.n	800ce8e <_isatty_r+0x1a>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	b103      	cbz	r3, 800ce8e <_isatty_r+0x1a>
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	bd38      	pop	{r3, r4, r5, pc}
 800ce90:	20000f88 	.word	0x20000f88

0800ce94 <_sbrk_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4d06      	ldr	r5, [pc, #24]	@ (800ceb0 <_sbrk_r+0x1c>)
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	602b      	str	r3, [r5, #0]
 800cea0:	f7f5 fd64 	bl	800296c <_sbrk>
 800cea4:	1c43      	adds	r3, r0, #1
 800cea6:	d102      	bne.n	800ceae <_sbrk_r+0x1a>
 800cea8:	682b      	ldr	r3, [r5, #0]
 800ceaa:	b103      	cbz	r3, 800ceae <_sbrk_r+0x1a>
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	bd38      	pop	{r3, r4, r5, pc}
 800ceb0:	20000f88 	.word	0x20000f88

0800ceb4 <memcpy>:
 800ceb4:	440a      	add	r2, r1
 800ceb6:	4291      	cmp	r1, r2
 800ceb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cebc:	d100      	bne.n	800cec0 <memcpy+0xc>
 800cebe:	4770      	bx	lr
 800cec0:	b510      	push	{r4, lr}
 800cec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ceca:	4291      	cmp	r1, r2
 800cecc:	d1f9      	bne.n	800cec2 <memcpy+0xe>
 800cece:	bd10      	pop	{r4, pc}

0800ced0 <nan>:
 800ced0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ced8 <nan+0x8>
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	00000000 	.word	0x00000000
 800cedc:	7ff80000 	.word	0x7ff80000

0800cee0 <abort>:
 800cee0:	b508      	push	{r3, lr}
 800cee2:	2006      	movs	r0, #6
 800cee4:	f000 fbc4 	bl	800d670 <raise>
 800cee8:	2001      	movs	r0, #1
 800ceea:	f7f5 fce2 	bl	80028b2 <_exit>

0800ceee <_calloc_r>:
 800ceee:	b570      	push	{r4, r5, r6, lr}
 800cef0:	fba1 5402 	umull	r5, r4, r1, r2
 800cef4:	b93c      	cbnz	r4, 800cf06 <_calloc_r+0x18>
 800cef6:	4629      	mov	r1, r5
 800cef8:	f7fe f87e 	bl	800aff8 <_malloc_r>
 800cefc:	4606      	mov	r6, r0
 800cefe:	b928      	cbnz	r0, 800cf0c <_calloc_r+0x1e>
 800cf00:	2600      	movs	r6, #0
 800cf02:	4630      	mov	r0, r6
 800cf04:	bd70      	pop	{r4, r5, r6, pc}
 800cf06:	220c      	movs	r2, #12
 800cf08:	6002      	str	r2, [r0, #0]
 800cf0a:	e7f9      	b.n	800cf00 <_calloc_r+0x12>
 800cf0c:	462a      	mov	r2, r5
 800cf0e:	4621      	mov	r1, r4
 800cf10:	f7fd f8b0 	bl	800a074 <memset>
 800cf14:	e7f5      	b.n	800cf02 <_calloc_r+0x14>

0800cf16 <rshift>:
 800cf16:	6903      	ldr	r3, [r0, #16]
 800cf18:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf20:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf24:	f100 0414 	add.w	r4, r0, #20
 800cf28:	dd45      	ble.n	800cfb6 <rshift+0xa0>
 800cf2a:	f011 011f 	ands.w	r1, r1, #31
 800cf2e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf32:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf36:	d10c      	bne.n	800cf52 <rshift+0x3c>
 800cf38:	f100 0710 	add.w	r7, r0, #16
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	42b1      	cmp	r1, r6
 800cf40:	d334      	bcc.n	800cfac <rshift+0x96>
 800cf42:	1a9b      	subs	r3, r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	1eea      	subs	r2, r5, #3
 800cf48:	4296      	cmp	r6, r2
 800cf4a:	bf38      	it	cc
 800cf4c:	2300      	movcc	r3, #0
 800cf4e:	4423      	add	r3, r4
 800cf50:	e015      	b.n	800cf7e <rshift+0x68>
 800cf52:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf56:	f1c1 0820 	rsb	r8, r1, #32
 800cf5a:	40cf      	lsrs	r7, r1
 800cf5c:	f105 0e04 	add.w	lr, r5, #4
 800cf60:	46a1      	mov	r9, r4
 800cf62:	4576      	cmp	r6, lr
 800cf64:	46f4      	mov	ip, lr
 800cf66:	d815      	bhi.n	800cf94 <rshift+0x7e>
 800cf68:	1a9a      	subs	r2, r3, r2
 800cf6a:	0092      	lsls	r2, r2, #2
 800cf6c:	3a04      	subs	r2, #4
 800cf6e:	3501      	adds	r5, #1
 800cf70:	42ae      	cmp	r6, r5
 800cf72:	bf38      	it	cc
 800cf74:	2200      	movcc	r2, #0
 800cf76:	18a3      	adds	r3, r4, r2
 800cf78:	50a7      	str	r7, [r4, r2]
 800cf7a:	b107      	cbz	r7, 800cf7e <rshift+0x68>
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	1b1a      	subs	r2, r3, r4
 800cf80:	42a3      	cmp	r3, r4
 800cf82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf86:	bf08      	it	eq
 800cf88:	2300      	moveq	r3, #0
 800cf8a:	6102      	str	r2, [r0, #16]
 800cf8c:	bf08      	it	eq
 800cf8e:	6143      	streq	r3, [r0, #20]
 800cf90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf94:	f8dc c000 	ldr.w	ip, [ip]
 800cf98:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf9c:	ea4c 0707 	orr.w	r7, ip, r7
 800cfa0:	f849 7b04 	str.w	r7, [r9], #4
 800cfa4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfa8:	40cf      	lsrs	r7, r1
 800cfaa:	e7da      	b.n	800cf62 <rshift+0x4c>
 800cfac:	f851 cb04 	ldr.w	ip, [r1], #4
 800cfb0:	f847 cf04 	str.w	ip, [r7, #4]!
 800cfb4:	e7c3      	b.n	800cf3e <rshift+0x28>
 800cfb6:	4623      	mov	r3, r4
 800cfb8:	e7e1      	b.n	800cf7e <rshift+0x68>

0800cfba <__hexdig_fun>:
 800cfba:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cfbe:	2b09      	cmp	r3, #9
 800cfc0:	d802      	bhi.n	800cfc8 <__hexdig_fun+0xe>
 800cfc2:	3820      	subs	r0, #32
 800cfc4:	b2c0      	uxtb	r0, r0
 800cfc6:	4770      	bx	lr
 800cfc8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cfcc:	2b05      	cmp	r3, #5
 800cfce:	d801      	bhi.n	800cfd4 <__hexdig_fun+0x1a>
 800cfd0:	3847      	subs	r0, #71	@ 0x47
 800cfd2:	e7f7      	b.n	800cfc4 <__hexdig_fun+0xa>
 800cfd4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cfd8:	2b05      	cmp	r3, #5
 800cfda:	d801      	bhi.n	800cfe0 <__hexdig_fun+0x26>
 800cfdc:	3827      	subs	r0, #39	@ 0x27
 800cfde:	e7f1      	b.n	800cfc4 <__hexdig_fun+0xa>
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	4770      	bx	lr

0800cfe4 <__gethex>:
 800cfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe8:	b085      	sub	sp, #20
 800cfea:	468a      	mov	sl, r1
 800cfec:	9302      	str	r3, [sp, #8]
 800cfee:	680b      	ldr	r3, [r1, #0]
 800cff0:	9001      	str	r0, [sp, #4]
 800cff2:	4690      	mov	r8, r2
 800cff4:	1c9c      	adds	r4, r3, #2
 800cff6:	46a1      	mov	r9, r4
 800cff8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cffc:	2830      	cmp	r0, #48	@ 0x30
 800cffe:	d0fa      	beq.n	800cff6 <__gethex+0x12>
 800d000:	eba9 0303 	sub.w	r3, r9, r3
 800d004:	f1a3 0b02 	sub.w	fp, r3, #2
 800d008:	f7ff ffd7 	bl	800cfba <__hexdig_fun>
 800d00c:	4605      	mov	r5, r0
 800d00e:	2800      	cmp	r0, #0
 800d010:	d168      	bne.n	800d0e4 <__gethex+0x100>
 800d012:	49a0      	ldr	r1, [pc, #640]	@ (800d294 <__gethex+0x2b0>)
 800d014:	2201      	movs	r2, #1
 800d016:	4648      	mov	r0, r9
 800d018:	f7ff ff08 	bl	800ce2c <strncmp>
 800d01c:	4607      	mov	r7, r0
 800d01e:	2800      	cmp	r0, #0
 800d020:	d167      	bne.n	800d0f2 <__gethex+0x10e>
 800d022:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d026:	4626      	mov	r6, r4
 800d028:	f7ff ffc7 	bl	800cfba <__hexdig_fun>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d062      	beq.n	800d0f6 <__gethex+0x112>
 800d030:	4623      	mov	r3, r4
 800d032:	7818      	ldrb	r0, [r3, #0]
 800d034:	2830      	cmp	r0, #48	@ 0x30
 800d036:	4699      	mov	r9, r3
 800d038:	f103 0301 	add.w	r3, r3, #1
 800d03c:	d0f9      	beq.n	800d032 <__gethex+0x4e>
 800d03e:	f7ff ffbc 	bl	800cfba <__hexdig_fun>
 800d042:	fab0 f580 	clz	r5, r0
 800d046:	096d      	lsrs	r5, r5, #5
 800d048:	f04f 0b01 	mov.w	fp, #1
 800d04c:	464a      	mov	r2, r9
 800d04e:	4616      	mov	r6, r2
 800d050:	3201      	adds	r2, #1
 800d052:	7830      	ldrb	r0, [r6, #0]
 800d054:	f7ff ffb1 	bl	800cfba <__hexdig_fun>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d1f8      	bne.n	800d04e <__gethex+0x6a>
 800d05c:	498d      	ldr	r1, [pc, #564]	@ (800d294 <__gethex+0x2b0>)
 800d05e:	2201      	movs	r2, #1
 800d060:	4630      	mov	r0, r6
 800d062:	f7ff fee3 	bl	800ce2c <strncmp>
 800d066:	2800      	cmp	r0, #0
 800d068:	d13f      	bne.n	800d0ea <__gethex+0x106>
 800d06a:	b944      	cbnz	r4, 800d07e <__gethex+0x9a>
 800d06c:	1c74      	adds	r4, r6, #1
 800d06e:	4622      	mov	r2, r4
 800d070:	4616      	mov	r6, r2
 800d072:	3201      	adds	r2, #1
 800d074:	7830      	ldrb	r0, [r6, #0]
 800d076:	f7ff ffa0 	bl	800cfba <__hexdig_fun>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d1f8      	bne.n	800d070 <__gethex+0x8c>
 800d07e:	1ba4      	subs	r4, r4, r6
 800d080:	00a7      	lsls	r7, r4, #2
 800d082:	7833      	ldrb	r3, [r6, #0]
 800d084:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d088:	2b50      	cmp	r3, #80	@ 0x50
 800d08a:	d13e      	bne.n	800d10a <__gethex+0x126>
 800d08c:	7873      	ldrb	r3, [r6, #1]
 800d08e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d090:	d033      	beq.n	800d0fa <__gethex+0x116>
 800d092:	2b2d      	cmp	r3, #45	@ 0x2d
 800d094:	d034      	beq.n	800d100 <__gethex+0x11c>
 800d096:	1c71      	adds	r1, r6, #1
 800d098:	2400      	movs	r4, #0
 800d09a:	7808      	ldrb	r0, [r1, #0]
 800d09c:	f7ff ff8d 	bl	800cfba <__hexdig_fun>
 800d0a0:	1e43      	subs	r3, r0, #1
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b18      	cmp	r3, #24
 800d0a6:	d830      	bhi.n	800d10a <__gethex+0x126>
 800d0a8:	f1a0 0210 	sub.w	r2, r0, #16
 800d0ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d0b0:	f7ff ff83 	bl	800cfba <__hexdig_fun>
 800d0b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800d0b8:	fa5f fc8c 	uxtb.w	ip, ip
 800d0bc:	f1bc 0f18 	cmp.w	ip, #24
 800d0c0:	f04f 030a 	mov.w	r3, #10
 800d0c4:	d91e      	bls.n	800d104 <__gethex+0x120>
 800d0c6:	b104      	cbz	r4, 800d0ca <__gethex+0xe6>
 800d0c8:	4252      	negs	r2, r2
 800d0ca:	4417      	add	r7, r2
 800d0cc:	f8ca 1000 	str.w	r1, [sl]
 800d0d0:	b1ed      	cbz	r5, 800d10e <__gethex+0x12a>
 800d0d2:	f1bb 0f00 	cmp.w	fp, #0
 800d0d6:	bf0c      	ite	eq
 800d0d8:	2506      	moveq	r5, #6
 800d0da:	2500      	movne	r5, #0
 800d0dc:	4628      	mov	r0, r5
 800d0de:	b005      	add	sp, #20
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e4:	2500      	movs	r5, #0
 800d0e6:	462c      	mov	r4, r5
 800d0e8:	e7b0      	b.n	800d04c <__gethex+0x68>
 800d0ea:	2c00      	cmp	r4, #0
 800d0ec:	d1c7      	bne.n	800d07e <__gethex+0x9a>
 800d0ee:	4627      	mov	r7, r4
 800d0f0:	e7c7      	b.n	800d082 <__gethex+0x9e>
 800d0f2:	464e      	mov	r6, r9
 800d0f4:	462f      	mov	r7, r5
 800d0f6:	2501      	movs	r5, #1
 800d0f8:	e7c3      	b.n	800d082 <__gethex+0x9e>
 800d0fa:	2400      	movs	r4, #0
 800d0fc:	1cb1      	adds	r1, r6, #2
 800d0fe:	e7cc      	b.n	800d09a <__gethex+0xb6>
 800d100:	2401      	movs	r4, #1
 800d102:	e7fb      	b.n	800d0fc <__gethex+0x118>
 800d104:	fb03 0002 	mla	r0, r3, r2, r0
 800d108:	e7ce      	b.n	800d0a8 <__gethex+0xc4>
 800d10a:	4631      	mov	r1, r6
 800d10c:	e7de      	b.n	800d0cc <__gethex+0xe8>
 800d10e:	eba6 0309 	sub.w	r3, r6, r9
 800d112:	3b01      	subs	r3, #1
 800d114:	4629      	mov	r1, r5
 800d116:	2b07      	cmp	r3, #7
 800d118:	dc0a      	bgt.n	800d130 <__gethex+0x14c>
 800d11a:	9801      	ldr	r0, [sp, #4]
 800d11c:	f7fd fff8 	bl	800b110 <_Balloc>
 800d120:	4604      	mov	r4, r0
 800d122:	b940      	cbnz	r0, 800d136 <__gethex+0x152>
 800d124:	4b5c      	ldr	r3, [pc, #368]	@ (800d298 <__gethex+0x2b4>)
 800d126:	4602      	mov	r2, r0
 800d128:	21e4      	movs	r1, #228	@ 0xe4
 800d12a:	485c      	ldr	r0, [pc, #368]	@ (800d29c <__gethex+0x2b8>)
 800d12c:	f7fd f884 	bl	800a238 <__assert_func>
 800d130:	3101      	adds	r1, #1
 800d132:	105b      	asrs	r3, r3, #1
 800d134:	e7ef      	b.n	800d116 <__gethex+0x132>
 800d136:	f100 0a14 	add.w	sl, r0, #20
 800d13a:	2300      	movs	r3, #0
 800d13c:	4655      	mov	r5, sl
 800d13e:	469b      	mov	fp, r3
 800d140:	45b1      	cmp	r9, r6
 800d142:	d337      	bcc.n	800d1b4 <__gethex+0x1d0>
 800d144:	f845 bb04 	str.w	fp, [r5], #4
 800d148:	eba5 050a 	sub.w	r5, r5, sl
 800d14c:	10ad      	asrs	r5, r5, #2
 800d14e:	6125      	str	r5, [r4, #16]
 800d150:	4658      	mov	r0, fp
 800d152:	f7fe f8cf 	bl	800b2f4 <__hi0bits>
 800d156:	016d      	lsls	r5, r5, #5
 800d158:	f8d8 6000 	ldr.w	r6, [r8]
 800d15c:	1a2d      	subs	r5, r5, r0
 800d15e:	42b5      	cmp	r5, r6
 800d160:	dd54      	ble.n	800d20c <__gethex+0x228>
 800d162:	1bad      	subs	r5, r5, r6
 800d164:	4629      	mov	r1, r5
 800d166:	4620      	mov	r0, r4
 800d168:	f7fe fc63 	bl	800ba32 <__any_on>
 800d16c:	4681      	mov	r9, r0
 800d16e:	b178      	cbz	r0, 800d190 <__gethex+0x1ac>
 800d170:	1e6b      	subs	r3, r5, #1
 800d172:	1159      	asrs	r1, r3, #5
 800d174:	f003 021f 	and.w	r2, r3, #31
 800d178:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d17c:	f04f 0901 	mov.w	r9, #1
 800d180:	fa09 f202 	lsl.w	r2, r9, r2
 800d184:	420a      	tst	r2, r1
 800d186:	d003      	beq.n	800d190 <__gethex+0x1ac>
 800d188:	454b      	cmp	r3, r9
 800d18a:	dc36      	bgt.n	800d1fa <__gethex+0x216>
 800d18c:	f04f 0902 	mov.w	r9, #2
 800d190:	4629      	mov	r1, r5
 800d192:	4620      	mov	r0, r4
 800d194:	f7ff febf 	bl	800cf16 <rshift>
 800d198:	442f      	add	r7, r5
 800d19a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d19e:	42bb      	cmp	r3, r7
 800d1a0:	da42      	bge.n	800d228 <__gethex+0x244>
 800d1a2:	9801      	ldr	r0, [sp, #4]
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	f7fd fff3 	bl	800b190 <_Bfree>
 800d1aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	25a3      	movs	r5, #163	@ 0xa3
 800d1b2:	e793      	b.n	800d0dc <__gethex+0xf8>
 800d1b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d1b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800d1ba:	d012      	beq.n	800d1e2 <__gethex+0x1fe>
 800d1bc:	2b20      	cmp	r3, #32
 800d1be:	d104      	bne.n	800d1ca <__gethex+0x1e6>
 800d1c0:	f845 bb04 	str.w	fp, [r5], #4
 800d1c4:	f04f 0b00 	mov.w	fp, #0
 800d1c8:	465b      	mov	r3, fp
 800d1ca:	7830      	ldrb	r0, [r6, #0]
 800d1cc:	9303      	str	r3, [sp, #12]
 800d1ce:	f7ff fef4 	bl	800cfba <__hexdig_fun>
 800d1d2:	9b03      	ldr	r3, [sp, #12]
 800d1d4:	f000 000f 	and.w	r0, r0, #15
 800d1d8:	4098      	lsls	r0, r3
 800d1da:	ea4b 0b00 	orr.w	fp, fp, r0
 800d1de:	3304      	adds	r3, #4
 800d1e0:	e7ae      	b.n	800d140 <__gethex+0x15c>
 800d1e2:	45b1      	cmp	r9, r6
 800d1e4:	d8ea      	bhi.n	800d1bc <__gethex+0x1d8>
 800d1e6:	492b      	ldr	r1, [pc, #172]	@ (800d294 <__gethex+0x2b0>)
 800d1e8:	9303      	str	r3, [sp, #12]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f7ff fe1d 	bl	800ce2c <strncmp>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d1e1      	bne.n	800d1bc <__gethex+0x1d8>
 800d1f8:	e7a2      	b.n	800d140 <__gethex+0x15c>
 800d1fa:	1ea9      	subs	r1, r5, #2
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f7fe fc18 	bl	800ba32 <__any_on>
 800d202:	2800      	cmp	r0, #0
 800d204:	d0c2      	beq.n	800d18c <__gethex+0x1a8>
 800d206:	f04f 0903 	mov.w	r9, #3
 800d20a:	e7c1      	b.n	800d190 <__gethex+0x1ac>
 800d20c:	da09      	bge.n	800d222 <__gethex+0x23e>
 800d20e:	1b75      	subs	r5, r6, r5
 800d210:	4621      	mov	r1, r4
 800d212:	9801      	ldr	r0, [sp, #4]
 800d214:	462a      	mov	r2, r5
 800d216:	f7fe f9d3 	bl	800b5c0 <__lshift>
 800d21a:	1b7f      	subs	r7, r7, r5
 800d21c:	4604      	mov	r4, r0
 800d21e:	f100 0a14 	add.w	sl, r0, #20
 800d222:	f04f 0900 	mov.w	r9, #0
 800d226:	e7b8      	b.n	800d19a <__gethex+0x1b6>
 800d228:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d22c:	42bd      	cmp	r5, r7
 800d22e:	dd6f      	ble.n	800d310 <__gethex+0x32c>
 800d230:	1bed      	subs	r5, r5, r7
 800d232:	42ae      	cmp	r6, r5
 800d234:	dc34      	bgt.n	800d2a0 <__gethex+0x2bc>
 800d236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d022      	beq.n	800d284 <__gethex+0x2a0>
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d024      	beq.n	800d28c <__gethex+0x2a8>
 800d242:	2b01      	cmp	r3, #1
 800d244:	d115      	bne.n	800d272 <__gethex+0x28e>
 800d246:	42ae      	cmp	r6, r5
 800d248:	d113      	bne.n	800d272 <__gethex+0x28e>
 800d24a:	2e01      	cmp	r6, #1
 800d24c:	d10b      	bne.n	800d266 <__gethex+0x282>
 800d24e:	9a02      	ldr	r2, [sp, #8]
 800d250:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d254:	6013      	str	r3, [r2, #0]
 800d256:	2301      	movs	r3, #1
 800d258:	6123      	str	r3, [r4, #16]
 800d25a:	f8ca 3000 	str.w	r3, [sl]
 800d25e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d260:	2562      	movs	r5, #98	@ 0x62
 800d262:	601c      	str	r4, [r3, #0]
 800d264:	e73a      	b.n	800d0dc <__gethex+0xf8>
 800d266:	1e71      	subs	r1, r6, #1
 800d268:	4620      	mov	r0, r4
 800d26a:	f7fe fbe2 	bl	800ba32 <__any_on>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d1ed      	bne.n	800d24e <__gethex+0x26a>
 800d272:	9801      	ldr	r0, [sp, #4]
 800d274:	4621      	mov	r1, r4
 800d276:	f7fd ff8b 	bl	800b190 <_Bfree>
 800d27a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d27c:	2300      	movs	r3, #0
 800d27e:	6013      	str	r3, [r2, #0]
 800d280:	2550      	movs	r5, #80	@ 0x50
 800d282:	e72b      	b.n	800d0dc <__gethex+0xf8>
 800d284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1f3      	bne.n	800d272 <__gethex+0x28e>
 800d28a:	e7e0      	b.n	800d24e <__gethex+0x26a>
 800d28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1dd      	bne.n	800d24e <__gethex+0x26a>
 800d292:	e7ee      	b.n	800d272 <__gethex+0x28e>
 800d294:	0800e088 	.word	0x0800e088
 800d298:	0800df1c 	.word	0x0800df1c
 800d29c:	0800e0f9 	.word	0x0800e0f9
 800d2a0:	1e6f      	subs	r7, r5, #1
 800d2a2:	f1b9 0f00 	cmp.w	r9, #0
 800d2a6:	d130      	bne.n	800d30a <__gethex+0x326>
 800d2a8:	b127      	cbz	r7, 800d2b4 <__gethex+0x2d0>
 800d2aa:	4639      	mov	r1, r7
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	f7fe fbc0 	bl	800ba32 <__any_on>
 800d2b2:	4681      	mov	r9, r0
 800d2b4:	117a      	asrs	r2, r7, #5
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d2bc:	f007 071f 	and.w	r7, r7, #31
 800d2c0:	40bb      	lsls	r3, r7
 800d2c2:	4213      	tst	r3, r2
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	bf18      	it	ne
 800d2ca:	f049 0902 	orrne.w	r9, r9, #2
 800d2ce:	f7ff fe22 	bl	800cf16 <rshift>
 800d2d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d2d6:	1b76      	subs	r6, r6, r5
 800d2d8:	2502      	movs	r5, #2
 800d2da:	f1b9 0f00 	cmp.w	r9, #0
 800d2de:	d047      	beq.n	800d370 <__gethex+0x38c>
 800d2e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d015      	beq.n	800d314 <__gethex+0x330>
 800d2e8:	2b03      	cmp	r3, #3
 800d2ea:	d017      	beq.n	800d31c <__gethex+0x338>
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d109      	bne.n	800d304 <__gethex+0x320>
 800d2f0:	f019 0f02 	tst.w	r9, #2
 800d2f4:	d006      	beq.n	800d304 <__gethex+0x320>
 800d2f6:	f8da 3000 	ldr.w	r3, [sl]
 800d2fa:	ea49 0903 	orr.w	r9, r9, r3
 800d2fe:	f019 0f01 	tst.w	r9, #1
 800d302:	d10e      	bne.n	800d322 <__gethex+0x33e>
 800d304:	f045 0510 	orr.w	r5, r5, #16
 800d308:	e032      	b.n	800d370 <__gethex+0x38c>
 800d30a:	f04f 0901 	mov.w	r9, #1
 800d30e:	e7d1      	b.n	800d2b4 <__gethex+0x2d0>
 800d310:	2501      	movs	r5, #1
 800d312:	e7e2      	b.n	800d2da <__gethex+0x2f6>
 800d314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d316:	f1c3 0301 	rsb	r3, r3, #1
 800d31a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d0f0      	beq.n	800d304 <__gethex+0x320>
 800d322:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d326:	f104 0314 	add.w	r3, r4, #20
 800d32a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d32e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d332:	f04f 0c00 	mov.w	ip, #0
 800d336:	4618      	mov	r0, r3
 800d338:	f853 2b04 	ldr.w	r2, [r3], #4
 800d33c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d340:	d01b      	beq.n	800d37a <__gethex+0x396>
 800d342:	3201      	adds	r2, #1
 800d344:	6002      	str	r2, [r0, #0]
 800d346:	2d02      	cmp	r5, #2
 800d348:	f104 0314 	add.w	r3, r4, #20
 800d34c:	d13c      	bne.n	800d3c8 <__gethex+0x3e4>
 800d34e:	f8d8 2000 	ldr.w	r2, [r8]
 800d352:	3a01      	subs	r2, #1
 800d354:	42b2      	cmp	r2, r6
 800d356:	d109      	bne.n	800d36c <__gethex+0x388>
 800d358:	1171      	asrs	r1, r6, #5
 800d35a:	2201      	movs	r2, #1
 800d35c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d360:	f006 061f 	and.w	r6, r6, #31
 800d364:	fa02 f606 	lsl.w	r6, r2, r6
 800d368:	421e      	tst	r6, r3
 800d36a:	d13a      	bne.n	800d3e2 <__gethex+0x3fe>
 800d36c:	f045 0520 	orr.w	r5, r5, #32
 800d370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d372:	601c      	str	r4, [r3, #0]
 800d374:	9b02      	ldr	r3, [sp, #8]
 800d376:	601f      	str	r7, [r3, #0]
 800d378:	e6b0      	b.n	800d0dc <__gethex+0xf8>
 800d37a:	4299      	cmp	r1, r3
 800d37c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d380:	d8d9      	bhi.n	800d336 <__gethex+0x352>
 800d382:	68a3      	ldr	r3, [r4, #8]
 800d384:	459b      	cmp	fp, r3
 800d386:	db17      	blt.n	800d3b8 <__gethex+0x3d4>
 800d388:	6861      	ldr	r1, [r4, #4]
 800d38a:	9801      	ldr	r0, [sp, #4]
 800d38c:	3101      	adds	r1, #1
 800d38e:	f7fd febf 	bl	800b110 <_Balloc>
 800d392:	4681      	mov	r9, r0
 800d394:	b918      	cbnz	r0, 800d39e <__gethex+0x3ba>
 800d396:	4b1a      	ldr	r3, [pc, #104]	@ (800d400 <__gethex+0x41c>)
 800d398:	4602      	mov	r2, r0
 800d39a:	2184      	movs	r1, #132	@ 0x84
 800d39c:	e6c5      	b.n	800d12a <__gethex+0x146>
 800d39e:	6922      	ldr	r2, [r4, #16]
 800d3a0:	3202      	adds	r2, #2
 800d3a2:	f104 010c 	add.w	r1, r4, #12
 800d3a6:	0092      	lsls	r2, r2, #2
 800d3a8:	300c      	adds	r0, #12
 800d3aa:	f7ff fd83 	bl	800ceb4 <memcpy>
 800d3ae:	4621      	mov	r1, r4
 800d3b0:	9801      	ldr	r0, [sp, #4]
 800d3b2:	f7fd feed 	bl	800b190 <_Bfree>
 800d3b6:	464c      	mov	r4, r9
 800d3b8:	6923      	ldr	r3, [r4, #16]
 800d3ba:	1c5a      	adds	r2, r3, #1
 800d3bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d3c0:	6122      	str	r2, [r4, #16]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	615a      	str	r2, [r3, #20]
 800d3c6:	e7be      	b.n	800d346 <__gethex+0x362>
 800d3c8:	6922      	ldr	r2, [r4, #16]
 800d3ca:	455a      	cmp	r2, fp
 800d3cc:	dd0b      	ble.n	800d3e6 <__gethex+0x402>
 800d3ce:	2101      	movs	r1, #1
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f7ff fda0 	bl	800cf16 <rshift>
 800d3d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3da:	3701      	adds	r7, #1
 800d3dc:	42bb      	cmp	r3, r7
 800d3de:	f6ff aee0 	blt.w	800d1a2 <__gethex+0x1be>
 800d3e2:	2501      	movs	r5, #1
 800d3e4:	e7c2      	b.n	800d36c <__gethex+0x388>
 800d3e6:	f016 061f 	ands.w	r6, r6, #31
 800d3ea:	d0fa      	beq.n	800d3e2 <__gethex+0x3fe>
 800d3ec:	4453      	add	r3, sl
 800d3ee:	f1c6 0620 	rsb	r6, r6, #32
 800d3f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3f6:	f7fd ff7d 	bl	800b2f4 <__hi0bits>
 800d3fa:	42b0      	cmp	r0, r6
 800d3fc:	dbe7      	blt.n	800d3ce <__gethex+0x3ea>
 800d3fe:	e7f0      	b.n	800d3e2 <__gethex+0x3fe>
 800d400:	0800df1c 	.word	0x0800df1c

0800d404 <L_shift>:
 800d404:	f1c2 0208 	rsb	r2, r2, #8
 800d408:	0092      	lsls	r2, r2, #2
 800d40a:	b570      	push	{r4, r5, r6, lr}
 800d40c:	f1c2 0620 	rsb	r6, r2, #32
 800d410:	6843      	ldr	r3, [r0, #4]
 800d412:	6804      	ldr	r4, [r0, #0]
 800d414:	fa03 f506 	lsl.w	r5, r3, r6
 800d418:	432c      	orrs	r4, r5
 800d41a:	40d3      	lsrs	r3, r2
 800d41c:	6004      	str	r4, [r0, #0]
 800d41e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d422:	4288      	cmp	r0, r1
 800d424:	d3f4      	bcc.n	800d410 <L_shift+0xc>
 800d426:	bd70      	pop	{r4, r5, r6, pc}

0800d428 <__match>:
 800d428:	b530      	push	{r4, r5, lr}
 800d42a:	6803      	ldr	r3, [r0, #0]
 800d42c:	3301      	adds	r3, #1
 800d42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d432:	b914      	cbnz	r4, 800d43a <__match+0x12>
 800d434:	6003      	str	r3, [r0, #0]
 800d436:	2001      	movs	r0, #1
 800d438:	bd30      	pop	{r4, r5, pc}
 800d43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d43e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d442:	2d19      	cmp	r5, #25
 800d444:	bf98      	it	ls
 800d446:	3220      	addls	r2, #32
 800d448:	42a2      	cmp	r2, r4
 800d44a:	d0f0      	beq.n	800d42e <__match+0x6>
 800d44c:	2000      	movs	r0, #0
 800d44e:	e7f3      	b.n	800d438 <__match+0x10>

0800d450 <__hexnan>:
 800d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	680b      	ldr	r3, [r1, #0]
 800d456:	6801      	ldr	r1, [r0, #0]
 800d458:	115e      	asrs	r6, r3, #5
 800d45a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d45e:	f013 031f 	ands.w	r3, r3, #31
 800d462:	b087      	sub	sp, #28
 800d464:	bf18      	it	ne
 800d466:	3604      	addne	r6, #4
 800d468:	2500      	movs	r5, #0
 800d46a:	1f37      	subs	r7, r6, #4
 800d46c:	4682      	mov	sl, r0
 800d46e:	4690      	mov	r8, r2
 800d470:	9301      	str	r3, [sp, #4]
 800d472:	f846 5c04 	str.w	r5, [r6, #-4]
 800d476:	46b9      	mov	r9, r7
 800d478:	463c      	mov	r4, r7
 800d47a:	9502      	str	r5, [sp, #8]
 800d47c:	46ab      	mov	fp, r5
 800d47e:	784a      	ldrb	r2, [r1, #1]
 800d480:	1c4b      	adds	r3, r1, #1
 800d482:	9303      	str	r3, [sp, #12]
 800d484:	b342      	cbz	r2, 800d4d8 <__hexnan+0x88>
 800d486:	4610      	mov	r0, r2
 800d488:	9105      	str	r1, [sp, #20]
 800d48a:	9204      	str	r2, [sp, #16]
 800d48c:	f7ff fd95 	bl	800cfba <__hexdig_fun>
 800d490:	2800      	cmp	r0, #0
 800d492:	d151      	bne.n	800d538 <__hexnan+0xe8>
 800d494:	9a04      	ldr	r2, [sp, #16]
 800d496:	9905      	ldr	r1, [sp, #20]
 800d498:	2a20      	cmp	r2, #32
 800d49a:	d818      	bhi.n	800d4ce <__hexnan+0x7e>
 800d49c:	9b02      	ldr	r3, [sp, #8]
 800d49e:	459b      	cmp	fp, r3
 800d4a0:	dd13      	ble.n	800d4ca <__hexnan+0x7a>
 800d4a2:	454c      	cmp	r4, r9
 800d4a4:	d206      	bcs.n	800d4b4 <__hexnan+0x64>
 800d4a6:	2d07      	cmp	r5, #7
 800d4a8:	dc04      	bgt.n	800d4b4 <__hexnan+0x64>
 800d4aa:	462a      	mov	r2, r5
 800d4ac:	4649      	mov	r1, r9
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f7ff ffa8 	bl	800d404 <L_shift>
 800d4b4:	4544      	cmp	r4, r8
 800d4b6:	d952      	bls.n	800d55e <__hexnan+0x10e>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f1a4 0904 	sub.w	r9, r4, #4
 800d4be:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4c2:	f8cd b008 	str.w	fp, [sp, #8]
 800d4c6:	464c      	mov	r4, r9
 800d4c8:	461d      	mov	r5, r3
 800d4ca:	9903      	ldr	r1, [sp, #12]
 800d4cc:	e7d7      	b.n	800d47e <__hexnan+0x2e>
 800d4ce:	2a29      	cmp	r2, #41	@ 0x29
 800d4d0:	d157      	bne.n	800d582 <__hexnan+0x132>
 800d4d2:	3102      	adds	r1, #2
 800d4d4:	f8ca 1000 	str.w	r1, [sl]
 800d4d8:	f1bb 0f00 	cmp.w	fp, #0
 800d4dc:	d051      	beq.n	800d582 <__hexnan+0x132>
 800d4de:	454c      	cmp	r4, r9
 800d4e0:	d206      	bcs.n	800d4f0 <__hexnan+0xa0>
 800d4e2:	2d07      	cmp	r5, #7
 800d4e4:	dc04      	bgt.n	800d4f0 <__hexnan+0xa0>
 800d4e6:	462a      	mov	r2, r5
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f7ff ff8a 	bl	800d404 <L_shift>
 800d4f0:	4544      	cmp	r4, r8
 800d4f2:	d936      	bls.n	800d562 <__hexnan+0x112>
 800d4f4:	f1a8 0204 	sub.w	r2, r8, #4
 800d4f8:	4623      	mov	r3, r4
 800d4fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800d502:	429f      	cmp	r7, r3
 800d504:	d2f9      	bcs.n	800d4fa <__hexnan+0xaa>
 800d506:	1b3b      	subs	r3, r7, r4
 800d508:	f023 0303 	bic.w	r3, r3, #3
 800d50c:	3304      	adds	r3, #4
 800d50e:	3401      	adds	r4, #1
 800d510:	3e03      	subs	r6, #3
 800d512:	42b4      	cmp	r4, r6
 800d514:	bf88      	it	hi
 800d516:	2304      	movhi	r3, #4
 800d518:	4443      	add	r3, r8
 800d51a:	2200      	movs	r2, #0
 800d51c:	f843 2b04 	str.w	r2, [r3], #4
 800d520:	429f      	cmp	r7, r3
 800d522:	d2fb      	bcs.n	800d51c <__hexnan+0xcc>
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	b91b      	cbnz	r3, 800d530 <__hexnan+0xe0>
 800d528:	4547      	cmp	r7, r8
 800d52a:	d128      	bne.n	800d57e <__hexnan+0x12e>
 800d52c:	2301      	movs	r3, #1
 800d52e:	603b      	str	r3, [r7, #0]
 800d530:	2005      	movs	r0, #5
 800d532:	b007      	add	sp, #28
 800d534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d538:	3501      	adds	r5, #1
 800d53a:	2d08      	cmp	r5, #8
 800d53c:	f10b 0b01 	add.w	fp, fp, #1
 800d540:	dd06      	ble.n	800d550 <__hexnan+0x100>
 800d542:	4544      	cmp	r4, r8
 800d544:	d9c1      	bls.n	800d4ca <__hexnan+0x7a>
 800d546:	2300      	movs	r3, #0
 800d548:	f844 3c04 	str.w	r3, [r4, #-4]
 800d54c:	2501      	movs	r5, #1
 800d54e:	3c04      	subs	r4, #4
 800d550:	6822      	ldr	r2, [r4, #0]
 800d552:	f000 000f 	and.w	r0, r0, #15
 800d556:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d55a:	6020      	str	r0, [r4, #0]
 800d55c:	e7b5      	b.n	800d4ca <__hexnan+0x7a>
 800d55e:	2508      	movs	r5, #8
 800d560:	e7b3      	b.n	800d4ca <__hexnan+0x7a>
 800d562:	9b01      	ldr	r3, [sp, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d0dd      	beq.n	800d524 <__hexnan+0xd4>
 800d568:	f1c3 0320 	rsb	r3, r3, #32
 800d56c:	f04f 32ff 	mov.w	r2, #4294967295
 800d570:	40da      	lsrs	r2, r3
 800d572:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d576:	4013      	ands	r3, r2
 800d578:	f846 3c04 	str.w	r3, [r6, #-4]
 800d57c:	e7d2      	b.n	800d524 <__hexnan+0xd4>
 800d57e:	3f04      	subs	r7, #4
 800d580:	e7d0      	b.n	800d524 <__hexnan+0xd4>
 800d582:	2004      	movs	r0, #4
 800d584:	e7d5      	b.n	800d532 <__hexnan+0xe2>

0800d586 <__ascii_mbtowc>:
 800d586:	b082      	sub	sp, #8
 800d588:	b901      	cbnz	r1, 800d58c <__ascii_mbtowc+0x6>
 800d58a:	a901      	add	r1, sp, #4
 800d58c:	b142      	cbz	r2, 800d5a0 <__ascii_mbtowc+0x1a>
 800d58e:	b14b      	cbz	r3, 800d5a4 <__ascii_mbtowc+0x1e>
 800d590:	7813      	ldrb	r3, [r2, #0]
 800d592:	600b      	str	r3, [r1, #0]
 800d594:	7812      	ldrb	r2, [r2, #0]
 800d596:	1e10      	subs	r0, r2, #0
 800d598:	bf18      	it	ne
 800d59a:	2001      	movne	r0, #1
 800d59c:	b002      	add	sp, #8
 800d59e:	4770      	bx	lr
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	e7fb      	b.n	800d59c <__ascii_mbtowc+0x16>
 800d5a4:	f06f 0001 	mvn.w	r0, #1
 800d5a8:	e7f8      	b.n	800d59c <__ascii_mbtowc+0x16>

0800d5aa <_realloc_r>:
 800d5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ae:	4680      	mov	r8, r0
 800d5b0:	4615      	mov	r5, r2
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	b921      	cbnz	r1, 800d5c0 <_realloc_r+0x16>
 800d5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	f7fd bd1c 	b.w	800aff8 <_malloc_r>
 800d5c0:	b92a      	cbnz	r2, 800d5ce <_realloc_r+0x24>
 800d5c2:	f7fd fca5 	bl	800af10 <_free_r>
 800d5c6:	2400      	movs	r4, #0
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ce:	f000 f86b 	bl	800d6a8 <_malloc_usable_size_r>
 800d5d2:	4285      	cmp	r5, r0
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	d802      	bhi.n	800d5de <_realloc_r+0x34>
 800d5d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d5dc:	d8f4      	bhi.n	800d5c8 <_realloc_r+0x1e>
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4640      	mov	r0, r8
 800d5e2:	f7fd fd09 	bl	800aff8 <_malloc_r>
 800d5e6:	4607      	mov	r7, r0
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d0ec      	beq.n	800d5c6 <_realloc_r+0x1c>
 800d5ec:	42b5      	cmp	r5, r6
 800d5ee:	462a      	mov	r2, r5
 800d5f0:	4621      	mov	r1, r4
 800d5f2:	bf28      	it	cs
 800d5f4:	4632      	movcs	r2, r6
 800d5f6:	f7ff fc5d 	bl	800ceb4 <memcpy>
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	4640      	mov	r0, r8
 800d5fe:	f7fd fc87 	bl	800af10 <_free_r>
 800d602:	463c      	mov	r4, r7
 800d604:	e7e0      	b.n	800d5c8 <_realloc_r+0x1e>

0800d606 <__ascii_wctomb>:
 800d606:	4603      	mov	r3, r0
 800d608:	4608      	mov	r0, r1
 800d60a:	b141      	cbz	r1, 800d61e <__ascii_wctomb+0x18>
 800d60c:	2aff      	cmp	r2, #255	@ 0xff
 800d60e:	d904      	bls.n	800d61a <__ascii_wctomb+0x14>
 800d610:	228a      	movs	r2, #138	@ 0x8a
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	f04f 30ff 	mov.w	r0, #4294967295
 800d618:	4770      	bx	lr
 800d61a:	700a      	strb	r2, [r1, #0]
 800d61c:	2001      	movs	r0, #1
 800d61e:	4770      	bx	lr

0800d620 <_raise_r>:
 800d620:	291f      	cmp	r1, #31
 800d622:	b538      	push	{r3, r4, r5, lr}
 800d624:	4605      	mov	r5, r0
 800d626:	460c      	mov	r4, r1
 800d628:	d904      	bls.n	800d634 <_raise_r+0x14>
 800d62a:	2316      	movs	r3, #22
 800d62c:	6003      	str	r3, [r0, #0]
 800d62e:	f04f 30ff 	mov.w	r0, #4294967295
 800d632:	bd38      	pop	{r3, r4, r5, pc}
 800d634:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d636:	b112      	cbz	r2, 800d63e <_raise_r+0x1e>
 800d638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d63c:	b94b      	cbnz	r3, 800d652 <_raise_r+0x32>
 800d63e:	4628      	mov	r0, r5
 800d640:	f000 f830 	bl	800d6a4 <_getpid_r>
 800d644:	4622      	mov	r2, r4
 800d646:	4601      	mov	r1, r0
 800d648:	4628      	mov	r0, r5
 800d64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d64e:	f000 b817 	b.w	800d680 <_kill_r>
 800d652:	2b01      	cmp	r3, #1
 800d654:	d00a      	beq.n	800d66c <_raise_r+0x4c>
 800d656:	1c59      	adds	r1, r3, #1
 800d658:	d103      	bne.n	800d662 <_raise_r+0x42>
 800d65a:	2316      	movs	r3, #22
 800d65c:	6003      	str	r3, [r0, #0]
 800d65e:	2001      	movs	r0, #1
 800d660:	e7e7      	b.n	800d632 <_raise_r+0x12>
 800d662:	2100      	movs	r1, #0
 800d664:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d668:	4620      	mov	r0, r4
 800d66a:	4798      	blx	r3
 800d66c:	2000      	movs	r0, #0
 800d66e:	e7e0      	b.n	800d632 <_raise_r+0x12>

0800d670 <raise>:
 800d670:	4b02      	ldr	r3, [pc, #8]	@ (800d67c <raise+0xc>)
 800d672:	4601      	mov	r1, r0
 800d674:	6818      	ldr	r0, [r3, #0]
 800d676:	f7ff bfd3 	b.w	800d620 <_raise_r>
 800d67a:	bf00      	nop
 800d67c:	20000038 	.word	0x20000038

0800d680 <_kill_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4d07      	ldr	r5, [pc, #28]	@ (800d6a0 <_kill_r+0x20>)
 800d684:	2300      	movs	r3, #0
 800d686:	4604      	mov	r4, r0
 800d688:	4608      	mov	r0, r1
 800d68a:	4611      	mov	r1, r2
 800d68c:	602b      	str	r3, [r5, #0]
 800d68e:	f7f5 f900 	bl	8002892 <_kill>
 800d692:	1c43      	adds	r3, r0, #1
 800d694:	d102      	bne.n	800d69c <_kill_r+0x1c>
 800d696:	682b      	ldr	r3, [r5, #0]
 800d698:	b103      	cbz	r3, 800d69c <_kill_r+0x1c>
 800d69a:	6023      	str	r3, [r4, #0]
 800d69c:	bd38      	pop	{r3, r4, r5, pc}
 800d69e:	bf00      	nop
 800d6a0:	20000f88 	.word	0x20000f88

0800d6a4 <_getpid_r>:
 800d6a4:	f7f5 b8ed 	b.w	8002882 <_getpid>

0800d6a8 <_malloc_usable_size_r>:
 800d6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ac:	1f18      	subs	r0, r3, #4
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	bfbc      	itt	lt
 800d6b2:	580b      	ldrlt	r3, [r1, r0]
 800d6b4:	18c0      	addlt	r0, r0, r3
 800d6b6:	4770      	bx	lr

0800d6b8 <_init>:
 800d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ba:	bf00      	nop
 800d6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6be:	bc08      	pop	{r3}
 800d6c0:	469e      	mov	lr, r3
 800d6c2:	4770      	bx	lr

0800d6c4 <_fini>:
 800d6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c6:	bf00      	nop
 800d6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ca:	bc08      	pop	{r3}
 800d6cc:	469e      	mov	lr, r3
 800d6ce:	4770      	bx	lr
