
test_case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bfc  0800f290  0800f290  00010290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e8c  08010e8c  000121f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010e8c  08010e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e94  08010e94  000121f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e94  08010e94  00011e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010e98  08010e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08010e9c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f0c  200001f8  08011094  000121f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001104  08011094  00013104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d22  00000000  00000000  00012228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047fb  00000000  00000000  0002bf4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00030748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001108  00000000  00000000  00031d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027faf  00000000  00000000  00032e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000222a9  00000000  00000000  0005ae2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8027  00000000  00000000  0007d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001550ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f84  00000000  00000000  00155144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0015c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f278 	.word	0x0800f278

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800f278 	.word	0x0800f278

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b08d      	sub	sp, #52	@ 0x34
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	4611      	mov	r1, r2
 80010ce:	461a      	mov	r2, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	460b      	mov	r3, r1
 80010d6:	81bb      	strh	r3, [r7, #12]
 80010d8:	4613      	mov	r3, r2
 80010da:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b1e      	cmp	r3, #30
 80010e0:	d964      	bls.n	80011ac <ILI9341_DrawChar+0xe8>
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db60      	blt.n	80011ac <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3301      	adds	r3, #1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	3302      	adds	r3, #2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3303      	adds	r3, #3
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	3b20      	subs	r3, #32
 800110c:	7ffa      	ldrb	r2, [r7, #31]
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	3304      	adds	r3, #4
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	4413      	add	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800111a:	7fbb      	ldrb	r3, [r7, #30]
 800111c:	b29a      	uxth	r2, r3
 800111e:	7f7b      	ldrb	r3, [r7, #29]
 8001120:	b29c      	uxth	r4, r3
 8001122:	88f9      	ldrh	r1, [r7, #6]
 8001124:	89b8      	ldrh	r0, [r7, #12]
 8001126:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	4623      	mov	r3, r4
 800112c:	f000 fc20 	bl	8001970 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
 8001134:	e035      	b.n	80011a2 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
 800113a:	e02b      	b.n	8001194 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800113c:	7f3b      	ldrb	r3, [r7, #28]
 800113e:	6a3a      	ldr	r2, [r7, #32]
 8001140:	fb03 f202 	mul.w	r2, r3, r2
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	10db      	asrs	r3, r3, #3
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	4413      	add	r3, r2
 800114e:	3301      	adds	r3, #1
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	2201      	movs	r2, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001166:	7dfa      	ldrb	r2, [r7, #23]
 8001168:	7dbb      	ldrb	r3, [r7, #22]
 800116a:	4013      	ands	r3, r2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00d      	beq.n	800118e <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	b29a      	uxth	r2, r3
 8001176:	89bb      	ldrh	r3, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	b298      	uxth	r0, r3
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	b29a      	uxth	r2, r3
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4413      	add	r3, r2
 8001184:	b29b      	uxth	r3, r3
 8001186:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001188:	4619      	mov	r1, r3
 800118a:	f000 fb8b 	bl	80018a4 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	3301      	adds	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	7fbb      	ldrb	r3, [r7, #30]
 8001196:	6a3a      	ldr	r2, [r7, #32]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbcf      	blt.n	800113c <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	3301      	adds	r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a2:	7f7b      	ldrb	r3, [r7, #29]
 80011a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbc5      	blt.n	8001136 <ILI9341_DrawChar+0x72>
 80011aa:	e000      	b.n	80011ae <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80011ac:	bf00      	nop
			}
		}
	}
}
 80011ae:	372c      	adds	r7, #44	@ 0x2c
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}

080011b4 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	460b      	mov	r3, r1
 80011c4:	80fb      	strh	r3, [r7, #6]
 80011c6:	4613      	mov	r3, r2
 80011c8:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80011d8:	e02d      	b.n	8001236 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	7818      	ldrb	r0, [r3, #0]
 80011de:	88b9      	ldrh	r1, [r7, #4]
 80011e0:	88fa      	ldrh	r2, [r7, #6]
 80011e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	460b      	mov	r3, r1
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	f7ff ff69 	bl	80010c4 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	3b20      	subs	r3, #32
 80011f8:	7ffa      	ldrb	r2, [r7, #31]
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	3304      	adds	r3, #4
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	1c9a      	adds	r2, r3, #2
 8001210:	7fbb      	ldrb	r3, [r7, #30]
 8001212:	429a      	cmp	r2, r3
 8001214:	da07      	bge.n	8001226 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	b29a      	uxth	r2, r3
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	4413      	add	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	3302      	adds	r3, #2
 8001222:	80fb      	strh	r3, [r7, #6]
 8001224:	e004      	b.n	8001230 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001226:	7fbb      	ldrb	r3, [r7, #30]
 8001228:	b29a      	uxth	r2, r3
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	4413      	add	r3, r2
 800122e:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1cd      	bne.n	80011da <ILI9341_DrawText+0x26>
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a06      	ldr	r2, [pc, #24]	@ (800126c <HAL_SPI_TxCpltCallback+0x24>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d105      	bne.n	8001264 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <HAL_SPI_TxCpltCallback+0x28>)
 8001260:	f003 fb12 	bl	8004888 <HAL_GPIO_WritePin>
  }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000d38 	.word	0x20000d38
 8001270:	40020400 	.word	0x40020400

08001274 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800127e:	bf00      	nop
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <ILI9341_SPI_Tx+0x30>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b02      	cmp	r3, #2
 800128c:	d1f8      	bne.n	8001280 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	2201      	movs	r2, #1
 8001292:	4619      	mov	r1, r3
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <ILI9341_SPI_Tx+0x30>)
 8001296:	f004 fc01 	bl	8005a9c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000d38 	.word	0x20000d38

080012a8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80012b4:	bf00      	nop
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <ILI9341_SPI_TxBuffer+0x30>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d1f8      	bne.n	80012b6 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	461a      	mov	r2, r3
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <ILI9341_SPI_TxBuffer+0x30>)
 80012cc:	f004 fbe6 	bl	8005a9c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000d38 	.word	0x20000d38

080012dc <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80012e6:	2200      	movs	r2, #0
 80012e8:	2120      	movs	r1, #32
 80012ea:	4808      	ldr	r0, [pc, #32]	@ (800130c <ILI9341_WriteCommand+0x30>)
 80012ec:	f003 facc 	bl	8004888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <ILI9341_WriteCommand+0x30>)
 80012f8:	f003 fac6 	bl	8004888 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffb8 	bl	8001274 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020400 	.word	0x40020400

08001310 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800131a:	2201      	movs	r2, #1
 800131c:	2120      	movs	r1, #32
 800131e:	4808      	ldr	r0, [pc, #32]	@ (8001340 <ILI9341_WriteData+0x30>)
 8001320:	f003 fab2 	bl	8004888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <ILI9341_WriteData+0x30>)
 800132c:	f003 faac 	bl	8004888 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff9e 	bl	8001274 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40020400 	.word	0x40020400

08001344 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001350:	2201      	movs	r2, #1
 8001352:	2120      	movs	r1, #32
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <ILI9341_WriteBuffer+0x34>)
 8001356:	f003 fa97 	bl	8004888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <ILI9341_WriteBuffer+0x34>)
 8001362:	f003 fa91 	bl	8004888 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff9c 	bl	80012a8 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020400 	.word	0x40020400

0800137c <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	80fb      	strh	r3, [r7, #6]
 800138e:	4603      	mov	r3, r0
 8001390:	80bb      	strh	r3, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	807b      	strh	r3, [r7, #2]
 8001396:	4613      	mov	r3, r2
 8001398:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80013ba:	202a      	movs	r0, #42	@ 0x2a
 80013bc:	f7ff ff8e 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2104      	movs	r1, #4
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ffbc 	bl	8001344 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80013cc:	88bb      	ldrh	r3, [r7, #4]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80013d6:	88bb      	ldrh	r3, [r7, #4]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80013dc:	883b      	ldrh	r3, [r7, #0]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80013e6:	883b      	ldrh	r3, [r7, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80013ec:	202b      	movs	r0, #43	@ 0x2b
 80013ee:	f7ff ff75 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2104      	movs	r1, #4
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ffa3 	bl	8001344 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80013fe:	202c      	movs	r0, #44	@ 0x2c
 8001400:	f7ff ff6c 	bl	80012dc <ILI9341_WriteCommand>
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bd90      	pop	{r4, r7, pc}

0800140c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001416:	480e      	ldr	r0, [pc, #56]	@ (8001450 <ILI9341_Reset+0x44>)
 8001418:	f003 fa36 	bl	8004888 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800141c:	200a      	movs	r0, #10
 800141e:	f002 fbe1 	bl	8003be4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001428:	4809      	ldr	r0, [pc, #36]	@ (8001450 <ILI9341_Reset+0x44>)
 800142a:	f003 fa2d 	bl	8004888 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800142e:	200a      	movs	r0, #10
 8001430:	f002 fbd8 	bl	8003be4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <ILI9341_Reset+0x44>)
 800143c:	f003 fa24 	bl	8004888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001446:	4802      	ldr	r0, [pc, #8]	@ (8001450 <ILI9341_Reset+0x44>)
 8001448:	f003 fa1e 	bl	8004888 <HAL_GPIO_WritePin>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020400 	.word	0x40020400

08001454 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800145e:	4802      	ldr	r0, [pc, #8]	@ (8001468 <ILI9341_Enable+0x14>)
 8001460:	f003 fa12 	bl	8004888 <HAL_GPIO_WritePin>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020400 	.word	0x40020400

0800146c <ILI9341_Init>:

void ILI9341_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001470:	f7ff fff0 	bl	8001454 <ILI9341_Enable>
	ILI9341_Reset();
 8001474:	f7ff ffca 	bl	800140c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff ff2f 	bl	80012dc <ILI9341_WriteCommand>
	HAL_Delay(10);
 800147e:	200a      	movs	r0, #10
 8001480:	f002 fbb0 	bl	8003be4 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001484:	20cb      	movs	r0, #203	@ 0xcb
 8001486:	f7ff ff29 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800148a:	2039      	movs	r0, #57	@ 0x39
 800148c:	f7ff ff40 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001490:	202c      	movs	r0, #44	@ 0x2c
 8001492:	f7ff ff3d 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff ff3a 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 800149c:	2034      	movs	r0, #52	@ 0x34
 800149e:	f7ff ff37 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80014a2:	2002      	movs	r0, #2
 80014a4:	f7ff ff34 	bl	8001310 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80014a8:	20cf      	movs	r0, #207	@ 0xcf
 80014aa:	f7ff ff17 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ff2e 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80014b4:	20c1      	movs	r0, #193	@ 0xc1
 80014b6:	f7ff ff2b 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80014ba:	2030      	movs	r0, #48	@ 0x30
 80014bc:	f7ff ff28 	bl	8001310 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80014c0:	20e8      	movs	r0, #232	@ 0xe8
 80014c2:	f7ff ff0b 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80014c6:	2085      	movs	r0, #133	@ 0x85
 80014c8:	f7ff ff22 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ff1f 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80014d2:	2078      	movs	r0, #120	@ 0x78
 80014d4:	f7ff ff1c 	bl	8001310 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80014d8:	20ea      	movs	r0, #234	@ 0xea
 80014da:	f7ff feff 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff ff16 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff ff13 	bl	8001310 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80014ea:	20ed      	movs	r0, #237	@ 0xed
 80014ec:	f7ff fef6 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80014f0:	2064      	movs	r0, #100	@ 0x64
 80014f2:	f7ff ff0d 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f7ff ff0a 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80014fc:	2012      	movs	r0, #18
 80014fe:	f7ff ff07 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001502:	2081      	movs	r0, #129	@ 0x81
 8001504:	f7ff ff04 	bl	8001310 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001508:	20f7      	movs	r0, #247	@ 0xf7
 800150a:	f7ff fee7 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800150e:	2020      	movs	r0, #32
 8001510:	f7ff fefe 	bl	8001310 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001514:	20c0      	movs	r0, #192	@ 0xc0
 8001516:	f7ff fee1 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800151a:	2023      	movs	r0, #35	@ 0x23
 800151c:	f7ff fef8 	bl	8001310 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001520:	20c1      	movs	r0, #193	@ 0xc1
 8001522:	f7ff fedb 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001526:	2010      	movs	r0, #16
 8001528:	f7ff fef2 	bl	8001310 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 800152c:	20c5      	movs	r0, #197	@ 0xc5
 800152e:	f7ff fed5 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001532:	203e      	movs	r0, #62	@ 0x3e
 8001534:	f7ff feec 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001538:	2028      	movs	r0, #40	@ 0x28
 800153a:	f7ff fee9 	bl	8001310 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800153e:	20c7      	movs	r0, #199	@ 0xc7
 8001540:	f7ff fecc 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001544:	2086      	movs	r0, #134	@ 0x86
 8001546:	f7ff fee3 	bl	8001310 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800154a:	2036      	movs	r0, #54	@ 0x36
 800154c:	f7ff fec6 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001550:	2048      	movs	r0, #72	@ 0x48
 8001552:	f7ff fedd 	bl	8001310 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001556:	203a      	movs	r0, #58	@ 0x3a
 8001558:	f7ff fec0 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 800155c:	2055      	movs	r0, #85	@ 0x55
 800155e:	f7ff fed7 	bl	8001310 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001562:	20b1      	movs	r0, #177	@ 0xb1
 8001564:	f7ff feba 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff fed1 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800156e:	2018      	movs	r0, #24
 8001570:	f7ff fece 	bl	8001310 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001574:	20b6      	movs	r0, #182	@ 0xb6
 8001576:	f7ff feb1 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800157a:	2008      	movs	r0, #8
 800157c:	f7ff fec8 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001580:	2082      	movs	r0, #130	@ 0x82
 8001582:	f7ff fec5 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001586:	2027      	movs	r0, #39	@ 0x27
 8001588:	f7ff fec2 	bl	8001310 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 800158c:	20f2      	movs	r0, #242	@ 0xf2
 800158e:	f7ff fea5 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff febc 	bl	8001310 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001598:	2026      	movs	r0, #38	@ 0x26
 800159a:	f7ff fe9f 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff feb6 	bl	8001310 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80015a4:	20e0      	movs	r0, #224	@ 0xe0
 80015a6:	f7ff fe99 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80015aa:	200f      	movs	r0, #15
 80015ac:	f7ff feb0 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80015b0:	2031      	movs	r0, #49	@ 0x31
 80015b2:	f7ff fead 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80015b6:	202b      	movs	r0, #43	@ 0x2b
 80015b8:	f7ff feaa 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80015bc:	200c      	movs	r0, #12
 80015be:	f7ff fea7 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80015c2:	200e      	movs	r0, #14
 80015c4:	f7ff fea4 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80015c8:	2008      	movs	r0, #8
 80015ca:	f7ff fea1 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80015ce:	204e      	movs	r0, #78	@ 0x4e
 80015d0:	f7ff fe9e 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80015d4:	20f1      	movs	r0, #241	@ 0xf1
 80015d6:	f7ff fe9b 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80015da:	2037      	movs	r0, #55	@ 0x37
 80015dc:	f7ff fe98 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80015e0:	2007      	movs	r0, #7
 80015e2:	f7ff fe95 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80015e6:	2010      	movs	r0, #16
 80015e8:	f7ff fe92 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f7ff fe8f 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80015f2:	200e      	movs	r0, #14
 80015f4:	f7ff fe8c 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80015f8:	2009      	movs	r0, #9
 80015fa:	f7ff fe89 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fe86 	bl	8001310 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001604:	20e1      	movs	r0, #225	@ 0xe1
 8001606:	f7ff fe69 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fe80 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001610:	200e      	movs	r0, #14
 8001612:	f7ff fe7d 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001616:	2014      	movs	r0, #20
 8001618:	f7ff fe7a 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800161c:	2003      	movs	r0, #3
 800161e:	f7ff fe77 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001622:	2011      	movs	r0, #17
 8001624:	f7ff fe74 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001628:	2007      	movs	r0, #7
 800162a:	f7ff fe71 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800162e:	2031      	movs	r0, #49	@ 0x31
 8001630:	f7ff fe6e 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001634:	20c1      	movs	r0, #193	@ 0xc1
 8001636:	f7ff fe6b 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800163a:	2048      	movs	r0, #72	@ 0x48
 800163c:	f7ff fe68 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001640:	2008      	movs	r0, #8
 8001642:	f7ff fe65 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001646:	200f      	movs	r0, #15
 8001648:	f7ff fe62 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800164c:	200c      	movs	r0, #12
 800164e:	f7ff fe5f 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001652:	2031      	movs	r0, #49	@ 0x31
 8001654:	f7ff fe5c 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001658:	2036      	movs	r0, #54	@ 0x36
 800165a:	f7ff fe59 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800165e:	200f      	movs	r0, #15
 8001660:	f7ff fe56 	bl	8001310 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001664:	2011      	movs	r0, #17
 8001666:	f7ff fe39 	bl	80012dc <ILI9341_WriteCommand>
	HAL_Delay(100);
 800166a:	2064      	movs	r0, #100	@ 0x64
 800166c:	f002 faba 	bl	8003be4 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001670:	2029      	movs	r0, #41	@ 0x29
 8001672:	f7ff fe33 	bl	80012dc <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f802 	bl	8001680 <ILI9341_SetRotation>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800168a:	2036      	movs	r0, #54	@ 0x36
 800168c:	f7ff fe26 	bl	80012dc <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001690:	2001      	movs	r0, #1
 8001692:	f002 faa7 	bl	8003be4 <HAL_Delay>

	switch(rotation)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d837      	bhi.n	800170c <ILI9341_SetRotation+0x8c>
 800169c:	a201      	add	r2, pc, #4	@ (adr r2, 80016a4 <ILI9341_SetRotation+0x24>)
 800169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a2:	bf00      	nop
 80016a4:	080016b5 	.word	0x080016b5
 80016a8:	080016cb 	.word	0x080016cb
 80016ac:	080016e1 	.word	0x080016e1
 80016b0:	080016f7 	.word	0x080016f7
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80016b4:	2048      	movs	r0, #72	@ 0x48
 80016b6:	f7ff fe2b 	bl	8001310 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <ILI9341_SetRotation+0x98>)
 80016bc:	22f0      	movs	r2, #240	@ 0xf0
 80016be:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80016c0:	4b16      	ldr	r3, [pc, #88]	@ (800171c <ILI9341_SetRotation+0x9c>)
 80016c2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016c6:	801a      	strh	r2, [r3, #0]
		break;
 80016c8:	e021      	b.n	800170e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80016ca:	2028      	movs	r0, #40	@ 0x28
 80016cc:	f7ff fe20 	bl	8001310 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <ILI9341_SetRotation+0x98>)
 80016d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016d6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <ILI9341_SetRotation+0x9c>)
 80016da:	22f0      	movs	r2, #240	@ 0xf0
 80016dc:	801a      	strh	r2, [r3, #0]
		break;
 80016de:	e016      	b.n	800170e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80016e0:	2088      	movs	r0, #136	@ 0x88
 80016e2:	f7ff fe15 	bl	8001310 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <ILI9341_SetRotation+0x98>)
 80016e8:	22f0      	movs	r2, #240	@ 0xf0
 80016ea:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <ILI9341_SetRotation+0x9c>)
 80016ee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016f2:	801a      	strh	r2, [r3, #0]
		break;
 80016f4:	e00b      	b.n	800170e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80016f6:	20e8      	movs	r0, #232	@ 0xe8
 80016f8:	f7ff fe0a 	bl	8001310 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <ILI9341_SetRotation+0x98>)
 80016fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001702:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <ILI9341_SetRotation+0x9c>)
 8001706:	22f0      	movs	r2, #240	@ 0xf0
 8001708:	801a      	strh	r2, [r3, #0]
		break;
 800170a:	e000      	b.n	800170e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800170c:	bf00      	nop
	}
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000002 	.word	0x20000002
 800171c:	20000000 	.word	0x20000000

08001720 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001724:	b08d      	sub	sp, #52	@ 0x34
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	6039      	str	r1, [r7, #0]
 800172c:	80fb      	strh	r3, [r7, #6]
 800172e:	466b      	mov	r3, sp
 8001730:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800173e:	d202      	bcs.n	8001746 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001744:	e002      	b.n	800174c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001746:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	2120      	movs	r1, #32
 8001750:	483f      	ldr	r0, [pc, #252]	@ (8001850 <ILI9341_DrawColorBurst+0x130>)
 8001752:	f003 f899 	bl	8004888 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800175c:	483c      	ldr	r0, [pc, #240]	@ (8001850 <ILI9341_DrawColorBurst+0x130>)
 800175e:	f003 f893 	bl	8004888 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 800176c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800176e:	460b      	mov	r3, r1
 8001770:	3b01      	subs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	2300      	movs	r3, #0
 8001776:	4688      	mov	r8, r1
 8001778:	4699      	mov	r9, r3
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800178a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800178e:	2300      	movs	r3, #0
 8001790:	460c      	mov	r4, r1
 8001792:	461d      	mov	r5, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	00eb      	lsls	r3, r5, #3
 800179e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a2:	00e2      	lsls	r2, r4, #3
 80017a4:	1dcb      	adds	r3, r1, #7
 80017a6:	08db      	lsrs	r3, r3, #3
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	ebad 0d03 	sub.w	sp, sp, r3
 80017ae:	466b      	mov	r3, sp
 80017b0:	3300      	adds	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b8:	e00e      	b.n	80017d8 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017be:	4413      	add	r3, r2
 80017c0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017c4:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80017c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c8:	3301      	adds	r3, #1
 80017ca:	88fa      	ldrh	r2, [r7, #6]
 80017cc:	b2d1      	uxtb	r1, r2
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80017d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d4:	3302      	adds	r3, #2
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3ec      	bcc.n	80017ba <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80017f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017fa:	fb01 f202 	mul.w	r2, r1, r2
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d010      	beq.n	800182a <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
 800180c:	e009      	b.n	8001822 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800180e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001810:	b29a      	uxth	r2, r3
 8001812:	230a      	movs	r3, #10
 8001814:	69b9      	ldr	r1, [r7, #24]
 8001816:	480f      	ldr	r0, [pc, #60]	@ (8001854 <ILI9341_DrawColorBurst+0x134>)
 8001818:	f003 fe53 	bl	80054c2 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	3301      	adds	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
 8001822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	429a      	cmp	r2, r3
 8001828:	d3f1      	bcc.n	800180e <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b29a      	uxth	r2, r3
 800182e:	230a      	movs	r3, #10
 8001830:	69b9      	ldr	r1, [r7, #24]
 8001832:	4808      	ldr	r0, [pc, #32]	@ (8001854 <ILI9341_DrawColorBurst+0x134>)
 8001834:	f003 fe45 	bl	80054c2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800183e:	4804      	ldr	r0, [pc, #16]	@ (8001850 <ILI9341_DrawColorBurst+0x130>)
 8001840:	f003 f822 	bl	8004888 <HAL_GPIO_WritePin>
 8001844:	46b5      	mov	sp, r6
}
 8001846:	bf00      	nop
 8001848:	3734      	adds	r7, #52	@ 0x34
 800184a:	46bd      	mov	sp, r7
 800184c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001850:	40020400 	.word	0x40020400
 8001854:	20000d38 	.word	0x20000d38

08001858 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <ILI9341_FillScreen+0x44>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <ILI9341_FillScreen+0x48>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	2100      	movs	r1, #0
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fd83 	bl	800137c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <ILI9341_FillScreen+0x44>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <ILI9341_FillScreen+0x48>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	461a      	mov	r2, r3
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff46 	bl	8001720 <ILI9341_DrawColorBurst>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000002 	.word	0x20000002
 80018a0:	20000000 	.word	0x20000000

080018a4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	460b      	mov	r3, r1
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <ILI9341_DrawPixel+0xc4>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d24d      	bcs.n	800195e <ILI9341_DrawPixel+0xba>
 80018c2:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <ILI9341_DrawPixel+0xc8>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	88ba      	ldrh	r2, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d247      	bcs.n	800195e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	753b      	strb	r3, [r7, #20]
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	757b      	strb	r3, [r7, #21]
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	3301      	adds	r3, #1
 80018e2:	121b      	asrs	r3, r3, #8
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	75bb      	strb	r3, [r7, #22]
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80018f2:	88bb      	ldrh	r3, [r7, #4]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	743b      	strb	r3, [r7, #16]
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	747b      	strb	r3, [r7, #17]
 8001902:	88bb      	ldrh	r3, [r7, #4]
 8001904:	3301      	adds	r3, #1
 8001906:	121b      	asrs	r3, r3, #8
 8001908:	b2db      	uxtb	r3, r3
 800190a:	74bb      	strb	r3, [r7, #18]
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	b29b      	uxth	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	733b      	strb	r3, [r7, #12]
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001926:	202a      	movs	r0, #42	@ 0x2a
 8001928:	f7ff fcd8 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2104      	movs	r1, #4
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fd06 	bl	8001344 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001938:	202b      	movs	r0, #43	@ 0x2b
 800193a:	f7ff fccf 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	2104      	movs	r1, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fcfd 	bl	8001344 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800194a:	202c      	movs	r0, #44	@ 0x2c
 800194c:	f7ff fcc6 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2102      	movs	r1, #2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fcf4 	bl	8001344 <ILI9341_WriteBuffer>
 800195c:	e000      	b.n	8001960 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800195e:	bf00      	nop
}
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000002 	.word	0x20000002
 800196c:	20000000 	.word	0x20000000

08001970 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4604      	mov	r4, r0
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	80fb      	strh	r3, [r7, #6]
 8001982:	4603      	mov	r3, r0
 8001984:	80bb      	strh	r3, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]
 800198a:	4613      	mov	r3, r2
 800198c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800198e:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <ILI9341_DrawRectangle+0xb0>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	d23d      	bcs.n	8001a16 <ILI9341_DrawRectangle+0xa6>
 800199a:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <ILI9341_DrawRectangle+0xb4>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	88ba      	ldrh	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d237      	bcs.n	8001a16 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <ILI9341_DrawRectangle+0xb0>)
 80019ae:	8812      	ldrh	r2, [r2, #0]
 80019b0:	b292      	uxth	r2, r2
 80019b2:	4293      	cmp	r3, r2
 80019b4:	dd05      	ble.n	80019c2 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <ILI9341_DrawRectangle+0xb0>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80019c2:	88ba      	ldrh	r2, [r7, #4]
 80019c4:	883b      	ldrh	r3, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a16      	ldr	r2, [pc, #88]	@ (8001a24 <ILI9341_DrawRectangle+0xb4>)
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	b292      	uxth	r2, r2
 80019ce:	4293      	cmp	r3, r2
 80019d0:	dd05      	ble.n	80019de <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <ILI9341_DrawRectangle+0xb4>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	88bb      	ldrh	r3, [r7, #4]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80019de:	88fa      	ldrh	r2, [r7, #6]
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	4413      	add	r3, r2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29c      	uxth	r4, r3
 80019ea:	88ba      	ldrh	r2, [r7, #4]
 80019ec:	883b      	ldrh	r3, [r7, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	88b9      	ldrh	r1, [r7, #4]
 80019f8:	88f8      	ldrh	r0, [r7, #6]
 80019fa:	4622      	mov	r2, r4
 80019fc:	f7ff fcbe 	bl	800137c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001a00:	883b      	ldrh	r3, [r7, #0]
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	8b3b      	ldrh	r3, [r7, #24]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fe86 	bl	8001720 <ILI9341_DrawColorBurst>
 8001a14:	e000      	b.n	8001a18 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a16:	bf00      	nop
}
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000002 	.word	0x20000002
 8001a24:	20000000 	.word	0x20000000

08001a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <MX_DMA_Init+0x3c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a0b      	ldr	r2, [pc, #44]	@ (8001a64 <MX_DMA_Init+0x3c>)
 8001a38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <MX_DMA_Init+0x3c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	200f      	movs	r0, #15
 8001a50:	f002 f9c7 	bl	8003de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a54:	200f      	movs	r0, #15
 8001a56:	f002 f9e0 	bl	8003e1a <HAL_NVIC_EnableIRQ>

}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <buttonPress>:





void buttonPress(){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
	while(1){
		uint8_t button = HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 8001a6e:	2104      	movs	r1, #4
 8001a70:	4806      	ldr	r0, [pc, #24]	@ (8001a8c <buttonPress+0x24>)
 8001a72:	f002 fef1 	bl	8004858 <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
		if(button){
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d100      	bne.n	8001a82 <buttonPress+0x1a>
	while(1){
 8001a80:	e7f5      	b.n	8001a6e <buttonPress+0x6>
			break;
 8001a82:	bf00      	nop
		}

	}
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40020400 	.word	0x40020400

08001a90 <getTare>:


uint32_t getTare(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
	printf("Remove all weight from the drawer(5 seconds)\n\r");
 8001a96:	4815      	ldr	r0, [pc, #84]	@ (8001aec <getTare+0x5c>)
 8001a98:	f009 fedc 	bl	800b854 <iprintf>
	HAL_Delay(5000);
 8001a9c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001aa0:	f002 f8a0 	bl	8003be4 <HAL_Delay>
	printf("Gathering initial Tare of Load Cell...\n\r");
 8001aa4:	4812      	ldr	r0, [pc, #72]	@ (8001af0 <getTare+0x60>)
 8001aa6:	f009 fed5 	bl	800b854 <iprintf>
	int weight_temp = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 1; i <= 4; i++){
 8001aae:	2301      	movs	r3, #1
 8001ab0:	807b      	strh	r3, [r7, #2]
 8001ab2:	e00e      	b.n	8001ad2 <getTare+0x42>
			weight_temp = (int)weighRaw();
 8001ab4:	f001 fac1 	bl	800303a <weighRaw>
 8001ab8:	6078      	str	r0, [r7, #4]
			printf("Tare attempt %d: %d\n\r", i, weight_temp);
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <getTare+0x64>)
 8001ac2:	f009 fec7 	bl	800b854 <iprintf>
			HAL_Delay(10);
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f002 f88c 	bl	8003be4 <HAL_Delay>
	for(uint16_t i = 1; i <= 4; i++){
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	807b      	strh	r3, [r7, #2]
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d9ed      	bls.n	8001ab4 <getTare+0x24>
		}
	printf("Tare Set: %d\n\r", weight_temp);
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4807      	ldr	r0, [pc, #28]	@ (8001af8 <getTare+0x68>)
 8001adc:	f009 feba 	bl	800b854 <iprintf>
	return weight_temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800f290 	.word	0x0800f290
 8001af0:	0800f2c0 	.word	0x0800f2c0
 8001af4:	0800f2ec 	.word	0x0800f2ec
 8001af8:	0800f304 	.word	0x0800f304

08001afc <Calibrate>:

void Calibrate(){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b092      	sub	sp, #72	@ 0x48
 8001b00:	af00      	add	r7, sp, #0
	printf("Beginning with Row: 1 Drawer: 1\n\r");
 8001b02:	489b      	ldr	r0, [pc, #620]	@ (8001d70 <Calibrate+0x274>)
 8001b04:	f009 fea6 	bl	800b854 <iprintf>

	uint32_t tare = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
	int knownHX711 = 1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t thresh = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28

	FRESULT res = f_unlink("drwConf.txt"); //deletes the original file
 8001b14:	4897      	ldr	r0, [pc, #604]	@ (8001d74 <Calibrate+0x278>)
 8001b16:	f008 fcaa 	bl	800a46e <f_unlink>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(res == FR_OK){
 8001b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <Calibrate+0x32>
		printf("Removed old 'drwConf.txt'\n\r");
 8001b28:	4893      	ldr	r0, [pc, #588]	@ (8001d78 <Calibrate+0x27c>)
 8001b2a:	f009 fe93 	bl	800b854 <iprintf>
	}
	f_unlink("temp_drawerConfig.txt"); //deletes the original file
 8001b2e:	4893      	ldr	r0, [pc, #588]	@ (8001d7c <Calibrate+0x280>)
 8001b30:	f008 fc9d 	bl	800a46e <f_unlink>


	for(int i = 1; i <= 1; i++){
 8001b34:	2301      	movs	r3, #1
 8001b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b38:	e110      	b.n	8001d5c <Calibrate+0x260>

		uint16_t A_mast = MuxCombos[i-1].A;
 8001b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	4990      	ldr	r1, [pc, #576]	@ (8001d80 <Calibrate+0x284>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	3302      	adds	r3, #2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t B_mast = MuxCombos[i-1].B;
 8001b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	498b      	ldr	r1, [pc, #556]	@ (8001d80 <Calibrate+0x284>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint16_t C_mast = MuxCombos[i-1].C;
 8001b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	4986      	ldr	r1, [pc, #536]	@ (8001d80 <Calibrate+0x284>)
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	843b      	strh	r3, [r7, #32]

		muxSET(A_mast, B_mast, C_mast, 1);
 8001b74:	8c3a      	ldrh	r2, [r7, #32]
 8001b76:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8001b78:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f001 f8ce 	bl	8002d1c <muxSET>

		setRelay(i);
 8001b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 f911 	bl	8002dac <setRelay>

		if(i == 1){
 8001b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d171      	bne.n	8001c74 <Calibrate+0x178>
			for(int j = 1; j <= 4; j++){
 8001b90:	2301      	movs	r3, #1
 8001b92:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b94:	e06a      	b.n	8001c6c <Calibrate+0x170>

				uint16_t A_slave = MuxCombos[j-1].A;
 8001b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	4979      	ldr	r1, [pc, #484]	@ (8001d80 <Calibrate+0x284>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	81fb      	strh	r3, [r7, #14]
				uint16_t B_slave = MuxCombos[j-1].B;
 8001baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	4974      	ldr	r1, [pc, #464]	@ (8001d80 <Calibrate+0x284>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3301      	adds	r3, #1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	81bb      	strh	r3, [r7, #12]
				uint16_t C_slave = MuxCombos[j-1].C;
 8001bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	496f      	ldr	r1, [pc, #444]	@ (8001d80 <Calibrate+0x284>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	817b      	strh	r3, [r7, #10]

				muxSET(A_slave, B_slave, C_slave, 0);
 8001bd0:	897a      	ldrh	r2, [r7, #10]
 8001bd2:	89b9      	ldrh	r1, [r7, #12]
 8001bd4:	89f8      	ldrh	r0, [r7, #14]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f001 f8a0 	bl	8002d1c <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, j);
 8001bdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001be0:	4868      	ldr	r0, [pc, #416]	@ (8001d84 <Calibrate+0x288>)
 8001be2:	f009 fe37 	bl	800b854 <iprintf>
				tare = getTare();
 8001be6:	f7ff ff53 	bl	8001a90 <getTare>
 8001bea:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the CONFIRMATION button when ready to calibrate\n\r");
 8001bec:	4866      	ldr	r0, [pc, #408]	@ (8001d88 <Calibrate+0x28c>)
 8001bee:	f009 fe31 	bl	800b854 <iprintf>

				//double press confirmation here
				//button_output(num);
				buttonPress();
 8001bf2:	f7ff ff39 	bl	8001a68 <buttonPress>


				knownHX711 = weighRawTare(tare);
 8001bf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001bf8:	f001 fa59 	bl	80030ae <weighRawTare>
 8001bfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8001bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c00:	4862      	ldr	r0, [pc, #392]	@ (8001d8c <Calibrate+0x290>)
 8001c02:	f009 fe27 	bl	800b854 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 fa91 	bl	8003130 <getCalFactor>
 8001c0e:	ed87 0a01 	vstr	s0, [r7, #4]

				for(int p = 0; p < 4; p++){
 8001c12:	2300      	movs	r3, #0
 8001c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c16:	e010      	b.n	8001c3a <Calibrate+0x13e>
					int weight = weigh(tare, calFactor);
 8001c18:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c1e:	f001 f9bd 	bl	8002f9c <weigh>
 8001c22:	6038      	str	r0, [r7, #0]
					printf("Weight: %d\n\r", weight);
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	485a      	ldr	r0, [pc, #360]	@ (8001d90 <Calibrate+0x294>)
 8001c28:	f009 fe14 	bl	800b854 <iprintf>
					HAL_Delay(400);
 8001c2c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c30:	f001 ffd8 	bl	8003be4 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c36:	3301      	adds	r3, #1
 8001c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	ddeb      	ble.n	8001c18 <Calibrate+0x11c>
				}

				thresh = refillDrawer(tare, calFactor);
 8001c40:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c46:	f000 f905 	bl	8001e54 <refillDrawer>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 8001c4e:	f000 fc5f 	bl	8002510 <SD_init>

				saveDrawerConfig(i, j, calFactor, tare, thresh);
 8001c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c54:	b298      	uxth	r0, r3
 8001c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c58:	b299      	uxth	r1, r3
 8001c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c62:	f000 fc91 	bl	8002588 <saveDrawerConfig>
			for(int j = 1; j <= 4; j++){
 8001c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c68:	3301      	adds	r3, #1
 8001c6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	dd91      	ble.n	8001b96 <Calibrate+0x9a>
 8001c72:	e070      	b.n	8001d56 <Calibrate+0x25a>
			}
		}
		else{
			for(int k = 1; k <= 7; k++){
 8001c74:	2301      	movs	r3, #1
 8001c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c78:	e06a      	b.n	8001d50 <Calibrate+0x254>

				uint16_t A_slave = MuxCombos[k-1].A;
 8001c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	4940      	ldr	r1, [pc, #256]	@ (8001d80 <Calibrate+0x284>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	3302      	adds	r3, #2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	83fb      	strh	r3, [r7, #30]
				uint16_t B_slave = MuxCombos[k-1].B;
 8001c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c90:	1e5a      	subs	r2, r3, #1
 8001c92:	493b      	ldr	r1, [pc, #236]	@ (8001d80 <Calibrate+0x284>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	83bb      	strh	r3, [r7, #28]
				uint16_t C_slave = MuxCombos[k-1].C;
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	4936      	ldr	r1, [pc, #216]	@ (8001d80 <Calibrate+0x284>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	837b      	strh	r3, [r7, #26]

				muxSET(A_slave, B_slave, C_slave, 0);
 8001cb4:	8b7a      	ldrh	r2, [r7, #26]
 8001cb6:	8bb9      	ldrh	r1, [r7, #28]
 8001cb8:	8bf8      	ldrh	r0, [r7, #30]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f001 f82e 	bl	8002d1c <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, k);
 8001cc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cc2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001cc4:	482f      	ldr	r0, [pc, #188]	@ (8001d84 <Calibrate+0x288>)
 8001cc6:	f009 fdc5 	bl	800b854 <iprintf>
				tare = getTare();
 8001cca:	f7ff fee1 	bl	8001a90 <getTare>
 8001cce:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the CONFIRMATION button when ready to calibrate\n\r");
 8001cd0:	482d      	ldr	r0, [pc, #180]	@ (8001d88 <Calibrate+0x28c>)
 8001cd2:	f009 fdbf 	bl	800b854 <iprintf>

				//double press confirmation here
				//button_output(num);
				buttonPress();
 8001cd6:	f7ff fec7 	bl	8001a68 <buttonPress>



				knownHX711 = weighRawTare(tare);
 8001cda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cdc:	f001 f9e7 	bl	80030ae <weighRawTare>
 8001ce0:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8001ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ce4:	4829      	ldr	r0, [pc, #164]	@ (8001d8c <Calibrate+0x290>)
 8001ce6:	f009 fdb5 	bl	800b854 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fa1f 	bl	8003130 <getCalFactor>
 8001cf2:	ed87 0a05 	vstr	s0, [r7, #20]

				for(int p = 0; p < 4; p++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cfa:	e010      	b.n	8001d1e <Calibrate+0x222>
					int weight = weigh(tare, calFactor);
 8001cfc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d02:	f001 f94b 	bl	8002f9c <weigh>
 8001d06:	6138      	str	r0, [r7, #16]
					printf("Weight: %d\n\r", weight);
 8001d08:	6939      	ldr	r1, [r7, #16]
 8001d0a:	4821      	ldr	r0, [pc, #132]	@ (8001d90 <Calibrate+0x294>)
 8001d0c:	f009 fda2 	bl	800b854 <iprintf>
					HAL_Delay(400);
 8001d10:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001d14:	f001 ff66 	bl	8003be4 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	ddeb      	ble.n	8001cfc <Calibrate+0x200>
				}

				thresh = refillDrawer(tare, calFactor);
 8001d24:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d2a:	f000 f893 	bl	8001e54 <refillDrawer>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 8001d32:	f000 fbed 	bl	8002510 <SD_init>

				saveDrawerConfig(i, k, calFactor, tare, thresh);
 8001d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d38:	b298      	uxth	r0, r3
 8001d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d42:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d46:	f000 fc1f 	bl	8002588 <saveDrawerConfig>
			for(int k = 1; k <= 7; k++){
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	dd91      	ble.n	8001c7a <Calibrate+0x17e>
	for(int i = 1; i <= 1; i++){
 8001d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d58:	3301      	adds	r3, #1
 8001d5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	f77f aeeb 	ble.w	8001b3a <Calibrate+0x3e>

			}
		}
	}
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3748      	adds	r7, #72	@ 0x48
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	0800f314 	.word	0x0800f314
 8001d74:	0800f338 	.word	0x0800f338
 8001d78:	0800f344 	.word	0x0800f344
 8001d7c:	0800f360 	.word	0x0800f360
 8001d80:	0801094c 	.word	0x0801094c
 8001d84:	0800f378 	.word	0x0800f378
 8001d88:	0800f390 	.word	0x0800f390
 8001d8c:	0800f3f4 	.word	0x0800f3f4
 8001d90:	0800f408 	.word	0x0800f408

08001d94 <buttonPress2>:
uint32_t press_time = 0;  // Timestamp of the first press
uint8_t press_count = 0;  // A Flag that's used for indicating a second press

int num2 = 1;

void buttonPress2(){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	while(1){
		uint8_t button = HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <buttonPress2+0x24>)
 8001d9e:	f002 fd5b 	bl	8004858 <HAL_GPIO_ReadPin>
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
		if(button){
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d100      	bne.n	8001dae <buttonPress2+0x1a>
	while(1){
 8001dac:	e7f5      	b.n	8001d9a <buttonPress2+0x6>
			break;
 8001dae:	bf00      	nop
		}

	}
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <getThresh>:

uint32_t getThresh(uint32_t tare, float calFactor){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	ed87 0a00 	vstr	s0, [r7]
	uint32_t sum = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
	float avg = 0;
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < 4; i++){
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	827b      	strh	r3, [r7, #18]
 8001dda:	e00d      	b.n	8001df8 <getThresh+0x38>
		uint16_t weight = weigh(tare, calFactor);
 8001ddc:	ed97 0a00 	vldr	s0, [r7]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f001 f8db 	bl	8002f9c <weigh>
 8001de6:	4603      	mov	r3, r0
 8001de8:	817b      	strh	r3, [r7, #10]
		sum += weight;
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4413      	add	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < 4; i++){
 8001df2:	8a7b      	ldrh	r3, [r7, #18]
 8001df4:	3301      	adds	r3, #1
 8001df6:	827b      	strh	r3, [r7, #18]
 8001df8:	8a7b      	ldrh	r3, [r7, #18]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d9ee      	bls.n	8001ddc <getThresh+0x1c>
	}

	avg = sum / 4.0;
 8001dfe:	6978      	ldr	r0, [r7, #20]
 8001e00:	f7fe fba0 	bl	8000544 <__aeabi_ui2d>
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <getThresh+0x90>)
 8001e0a:	f7fe fd3f 	bl	800088c <__aeabi_ddiv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe ff07 	bl	8000c28 <__aeabi_d2f>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	60fb      	str	r3, [r7, #12]

	return (avg * 0.1); //returns 10% of the normalized weight as the threshold
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7fe fbb2 	bl	8000588 <__aeabi_f2d>
 8001e24:	a308      	add	r3, pc, #32	@ (adr r3, 8001e48 <getThresh+0x88>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fc05 	bl	8000638 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fed7 	bl	8000be8 <__aeabi_d2uiz>
 8001e3a:	4603      	mov	r3, r0

}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	f3af 8000 	nop.w
 8001e48:	9999999a 	.word	0x9999999a
 8001e4c:	3fb99999 	.word	0x3fb99999
 8001e50:	40100000 	.word	0x40100000

08001e54 <refillDrawer>:



int refillDrawer(uint32_t tare, float calFactor){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	ed87 0a00 	vstr	s0, [r7]
	printf("Please refill the current drawer\n\rPress and Hold the button when ready\n\r");
 8001e60:	4809      	ldr	r0, [pc, #36]	@ (8001e88 <refillDrawer+0x34>)
 8001e62:	f009 fcf7 	bl	800b854 <iprintf>

	//function to wait for a double press then a confirmation press
	//button_output(num2);

	buttonPress2();
 8001e66:	f7ff ff95 	bl	8001d94 <buttonPress2>

	//doublePress(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);

	uint32_t thresh = getThresh(tare, calFactor);
 8001e6a:	ed97 0a00 	vldr	s0, [r7]
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa6 	bl	8001dc0 <getThresh>
 8001e74:	60f8      	str	r0, [r7, #12]
	printf("Threshold set to %ld\n\r", thresh);
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	4804      	ldr	r0, [pc, #16]	@ (8001e8c <refillDrawer+0x38>)
 8001e7a:	f009 fceb 	bl	800b854 <iprintf>
	return thresh;
 8001e7e:	68fb      	ldr	r3, [r7, #12]


}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	0800f418 	.word	0x0800f418
 8001e8c:	0800f464 	.word	0x0800f464

08001e90 <main_function>:
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"



void main_function(){
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b099      	sub	sp, #100	@ 0x64
 8001e94:	af00      	add	r7, sp, #0


	struct drawerInfo drawerInst;
	uint32_t tare = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	64bb      	str	r3, [r7, #72]	@ 0x48
	float calFactor = 1;
 8001e9a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e9e:	647b      	str	r3, [r7, #68]	@ 0x44
	int thresh;

	uint32_t sum;
	uint16_t normalizedWeight;

	for(uint16_t i = 1; i <= 4; i++){
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8001ea6:	e145      	b.n	8002134 <main_function+0x2a4>
			printf("Row %d", i);
 8001ea8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001eac:	4619      	mov	r1, r3
 8001eae:	48a6      	ldr	r0, [pc, #664]	@ (8002148 <main_function+0x2b8>)
 8001eb0:	f009 fcd0 	bl	800b854 <iprintf>

			uint16_t A_mast = MuxCombos[i-1].A;
 8001eb4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	49a4      	ldr	r1, [pc, #656]	@ (800214c <main_function+0x2bc>)
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			uint16_t B_mast = MuxCombos[i-1].B;
 8001ecc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	499e      	ldr	r1, [pc, #632]	@ (800214c <main_function+0x2bc>)
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	3301      	adds	r3, #1
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t C_mast = MuxCombos[i-1].C;
 8001ee4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	4998      	ldr	r1, [pc, #608]	@ (800214c <main_function+0x2bc>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

			muxSET(A_mast, B_mast, C_mast, 1);
 8001ef8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001efa:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8001efe:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 8001f02:	2301      	movs	r3, #1
 8001f04:	f000 ff0a 	bl	8002d1c <muxSET>

			setRelay(i);
 8001f08:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 ff4c 	bl	8002dac <setRelay>

			if(i == 1){
 8001f14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	f040 8082 	bne.w	8002022 <main_function+0x192>
				for(uint16_t j = 1; j <= 4; j++){
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8001f24:	e078      	b.n	8002018 <main_function+0x188>

					sum = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[j-1].A;
 8001f2e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001f32:	1e5a      	subs	r2, r3, #1
 8001f34:	4985      	ldr	r1, [pc, #532]	@ (800214c <main_function+0x2bc>)
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3302      	adds	r3, #2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	857b      	strh	r3, [r7, #42]	@ 0x2a
					uint16_t B_slave = MuxCombos[j-1].B;
 8001f44:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	4980      	ldr	r1, [pc, #512]	@ (800214c <main_function+0x2bc>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	3301      	adds	r3, #1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	853b      	strh	r3, [r7, #40]	@ 0x28
					uint16_t C_slave = MuxCombos[j-1].C;
 8001f5a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001f5e:	1e5a      	subs	r2, r3, #1
 8001f60:	497a      	ldr	r1, [pc, #488]	@ (800214c <main_function+0x2bc>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	84fb      	strh	r3, [r7, #38]	@ 0x26

					muxSET(A_slave, B_slave, C_slave, 0);
 8001f6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001f70:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001f72:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8001f74:	2300      	movs	r3, #0
 8001f76:	f000 fed1 	bl	8002d1c <muxSET>

					printf("Drawer %d\n", j);
 8001f7a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4873      	ldr	r0, [pc, #460]	@ (8002150 <main_function+0x2c0>)
 8001f82:	f009 fc67 	bl	800b854 <iprintf>

					drawerInst = getFileInfo(i, j);
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8001f8e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fcde 	bl	8002954 <getFileInfo>

					tare = drawerInst.Tare;
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 8001fa0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa8:	ee17 3a90 	vmov	r3, s15
 8001fac:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 8001fae:	2300      	movs	r3, #0
 8001fb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fb2:	e010      	b.n	8001fd6 <main_function+0x146>

						int weight = weigh(tare, calFactor);
 8001fb4:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001fb8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001fba:	f000 ffef 	bl	8002f9c <weigh>
 8001fbe:	6238      	str	r0, [r7, #32]
						sum += weight;
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001fc4:	4413      	add	r3, r2
 8001fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8001fc8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001fcc:	f001 fe0a 	bl	8003be4 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	ddeb      	ble.n	8001fb4 <main_function+0x124>
					}

					normalizedWeight = sum / 4;
 8001fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe4:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8001fe8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fea:	429a      	cmp	r2, r3
 8001fec:	db0f      	blt.n	800200e <main_function+0x17e>

						thresh = refillDrawer(tare, calFactor);
 8001fee:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001ff2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001ff4:	f7ff ff2e 	bl	8001e54 <refillDrawer>
 8001ff8:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, j, calFactor, tare, thresh);
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffc:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8002000:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8002004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002006:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800200a:	f000 fbcf 	bl	80027ac <updateDrawerConfig>
				for(uint16_t j = 1; j <= 4; j++){
 800200e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002012:	3301      	adds	r3, #1
 8002014:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002018:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800201c:	2b04      	cmp	r3, #4
 800201e:	d982      	bls.n	8001f26 <main_function+0x96>
 8002020:	e083      	b.n	800212a <main_function+0x29a>


				}
			}
			else{
				for(int k = 1; k <= 7; k++){
 8002022:	2301      	movs	r3, #1
 8002024:	653b      	str	r3, [r7, #80]	@ 0x50
 8002026:	e07c      	b.n	8002122 <main_function+0x292>

					sum = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[k-1].A;
 8002030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002032:	1e5a      	subs	r2, r3, #1
 8002034:	4945      	ldr	r1, [pc, #276]	@ (800214c <main_function+0x2bc>)
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	440b      	add	r3, r1
 800203e:	3302      	adds	r3, #2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	877b      	strh	r3, [r7, #58]	@ 0x3a
					uint16_t B_slave = MuxCombos[k-1].B;
 8002044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	4940      	ldr	r1, [pc, #256]	@ (800214c <main_function+0x2bc>)
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	440b      	add	r3, r1
 8002052:	3301      	adds	r3, #1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	873b      	strh	r3, [r7, #56]	@ 0x38
					uint16_t C_slave = MuxCombos[k-1].C;
 8002058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	493b      	ldr	r1, [pc, #236]	@ (800214c <main_function+0x2bc>)
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	440b      	add	r3, r1
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	86fb      	strh	r3, [r7, #54]	@ 0x36

					muxSET(A_slave, B_slave, C_slave, 0);
 800206a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800206c:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800206e:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002070:	2300      	movs	r3, #0
 8002072:	f000 fe53 	bl	8002d1c <muxSET>

					printf("Drawer %d", k);
 8002076:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002078:	4836      	ldr	r0, [pc, #216]	@ (8002154 <main_function+0x2c4>)
 800207a:	f009 fbeb 	bl	800b854 <iprintf>

					drawerInst = getFileInfo(i, k);
 800207e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002080:	b29a      	uxth	r2, r3
 8002082:	463b      	mov	r3, r7
 8002084:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fc63 	bl	8002954 <getFileInfo>
 800208e:	f107 0410 	add.w	r4, r7, #16
 8002092:	463b      	mov	r3, r7
 8002094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

					tare = drawerInst.Tare;
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 80020a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80020a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020aa:	ee17 3a90 	vmov	r3, s15
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 80020b0:	2300      	movs	r3, #0
 80020b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020b4:	e010      	b.n	80020d8 <main_function+0x248>

						int weight = weigh(tare, calFactor);
 80020b6:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80020ba:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80020bc:	f000 ff6e 	bl	8002f9c <weigh>
 80020c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
						sum += weight;
 80020c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80020c6:	4413      	add	r3, r2
 80020c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 80020ca:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80020ce:	f001 fd89 	bl	8003be4 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 80020d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020d4:	3301      	adds	r3, #1
 80020d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020da:	2b03      	cmp	r3, #3
 80020dc:	ddeb      	ble.n	80020b6 <main_function+0x226>
					}

					normalizedWeight = sum / 4;
 80020de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 80020e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e6:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 80020ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80020ec:	429a      	cmp	r2, r3
 80020ee:	db15      	blt.n	800211c <main_function+0x28c>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 80020f0:	4819      	ldr	r0, [pc, #100]	@ (8002158 <main_function+0x2c8>)
 80020f2:	f009 fbaf 	bl	800b854 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 80020f6:	4819      	ldr	r0, [pc, #100]	@ (800215c <main_function+0x2cc>)
 80020f8:	f009 fbac 	bl	800b854 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 80020fc:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002100:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002102:	f7ff fea7 	bl	8001e54 <refillDrawer>
 8002106:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, k, calFactor, tare, thresh);
 8002108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800210a:	b299      	uxth	r1, r3
 800210c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210e:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8002112:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002114:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002118:	f000 fb48 	bl	80027ac <updateDrawerConfig>
				for(int k = 1; k <= 7; k++){
 800211c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800211e:	3301      	adds	r3, #1
 8002120:	653b      	str	r3, [r7, #80]	@ 0x50
 8002122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002124:	2b07      	cmp	r3, #7
 8002126:	f77f af7f 	ble.w	8002028 <main_function+0x198>
	for(uint16_t i = 1; i <= 4; i++){
 800212a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800212e:	3301      	adds	r3, #1
 8002130:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8002134:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002138:	2b04      	cmp	r3, #4
 800213a:	f67f aeb5 	bls.w	8001ea8 <main_function+0x18>

				}
			}
	}

}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3764      	adds	r7, #100	@ 0x64
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	0800f47c 	.word	0x0800f47c
 800214c:	0801094c 	.word	0x0801094c
 8002150:	0800f484 	.word	0x0800f484
 8002154:	0800f490 	.word	0x0800f490
 8002158:	0800f49c 	.word	0x0800f49c
 800215c:	0800f4d8 	.word	0x0800f4d8

08002160 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b6a      	ldr	r3, [pc, #424]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	4a69      	ldr	r2, [pc, #420]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 8002180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002184:	6313      	str	r3, [r2, #48]	@ 0x30
 8002186:	4b67      	ldr	r3, [pc, #412]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b63      	ldr	r3, [pc, #396]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a62      	ldr	r2, [pc, #392]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b60      	ldr	r3, [pc, #384]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b59      	ldr	r3, [pc, #356]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	4b55      	ldr	r3, [pc, #340]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a54      	ldr	r2, [pc, #336]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b52      	ldr	r3, [pc, #328]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002324 <MX_GPIO_Init+0x1c4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SLAVE_C_Pin|SLAVE_B_Pin|REL_2_Pin|REL_1_Pin, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	2163      	movs	r1, #99	@ 0x63
 8002206:	4848      	ldr	r0, [pc, #288]	@ (8002328 <MX_GPIO_Init+0x1c8>)
 8002208:	f002 fb3e 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAST_A_Pin|MAST_B_Pin|MAST_C_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	2113      	movs	r1, #19
 8002210:	4846      	ldr	r0, [pc, #280]	@ (800232c <MX_GPIO_Init+0x1cc>)
 8002212:	f002 fb39 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 8002216:	2200      	movs	r2, #0
 8002218:	f24c 7121 	movw	r1, #50977	@ 0xc721
 800221c:	4844      	ldr	r0, [pc, #272]	@ (8002330 <MX_GPIO_Init+0x1d0>)
 800221e:	f002 fb33 	bl	8004888 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|REL_4_Pin|REL_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002228:	4840      	ldr	r0, [pc, #256]	@ (800232c <MX_GPIO_Init+0x1cc>)
 800222a:	f002 fb2d 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	2104      	movs	r1, #4
 8002232:	4840      	ldr	r0, [pc, #256]	@ (8002334 <MX_GPIO_Init+0x1d4>)
 8002234:	f002 fb28 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLAVE_C_Pin SLAVE_B_Pin REL_2_Pin REL_1_Pin */
  GPIO_InitStruct.Pin = SLAVE_C_Pin|SLAVE_B_Pin|REL_2_Pin|REL_1_Pin;
 8002238:	2363      	movs	r3, #99	@ 0x63
 800223a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	4836      	ldr	r0, [pc, #216]	@ (8002328 <MX_GPIO_Init+0x1c8>)
 8002250:	f002 f96e 	bl	8004530 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAST_A_Pin MAST_B_Pin MAST_C_Pin */
  GPIO_InitStruct.Pin = MAST_A_Pin|MAST_B_Pin|MAST_C_Pin;
 8002254:	2313      	movs	r3, #19
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4830      	ldr	r0, [pc, #192]	@ (800232c <MX_GPIO_Init+0x1cc>)
 800226c:	f002 f960 	bl	8004530 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLAVE_A_Pin SCK_DRW_Pin PB14 PB15
                           PB5 REL_4_Pin REL_3_Pin */
  GPIO_InitStruct.Pin = SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 8002270:	f24c 7321 	movw	r3, #50977	@ 0xc721
 8002274:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|REL_4_Pin|REL_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4829      	ldr	r0, [pc, #164]	@ (8002330 <MX_GPIO_Init+0x1d0>)
 800228a:	f002 f951 	bl	8004530 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BTN_Pin CONFIRM_BTN_Pin */
  GPIO_InitStruct.Pin = RESET_BTN_Pin|CONFIRM_BTN_Pin;
 800228e:	2306      	movs	r3, #6
 8002290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002292:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	4823      	ldr	r0, [pc, #140]	@ (8002330 <MX_GPIO_Init+0x1d0>)
 80022a4:	f002 f944 	bl	8004530 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAT_IN_Pin */
  GPIO_InitStruct.Pin = DAT_IN_Pin;
 80022a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAT_IN_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	481b      	ldr	r0, [pc, #108]	@ (800232c <MX_GPIO_Init+0x1cc>)
 80022be:	f002 f937 	bl	8004530 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80022c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c8:	2301      	movs	r3, #1
 80022ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022cc:	2301      	movs	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	4814      	ldr	r0, [pc, #80]	@ (800232c <MX_GPIO_Init+0x1cc>)
 80022dc:	f002 f928 	bl	8004530 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_CS_Pin */
  GPIO_InitStruct.Pin = EEPROM_CS_Pin;
 80022e0:	2304      	movs	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	480f      	ldr	r0, [pc, #60]	@ (8002334 <MX_GPIO_Init+0x1d4>)
 80022f8:	f002 f91a 	bl	8004530 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2007      	movs	r0, #7
 8002302:	f001 fd6e 	bl	8003de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002306:	2007      	movs	r0, #7
 8002308:	f001 fd87 	bl	8003e1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	2008      	movs	r0, #8
 8002312:	f001 fd66 	bl	8003de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002316:	2008      	movs	r0, #8
 8002318:	f001 fd7f 	bl	8003e1a <HAL_NVIC_EnableIRQ>

}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	@ 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	40020800 	.word	0x40020800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020c00 	.word	0x40020c00

08002338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	//disables internal buffering for input stream for scanf
	setvbuf(stdin, NULL, _IONBF, 0);
 800233e:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <main+0xdc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6858      	ldr	r0, [r3, #4]
 8002344:	2300      	movs	r3, #0
 8002346:	2202      	movs	r2, #2
 8002348:	2100      	movs	r1, #0
 800234a:	f009 fa95 	bl	800b878 <setvbuf>

	/* Configure the system clock */
	SystemClock_Config();
 800234e:	f000 f86d 	bl	800242c <SystemClock_Config>

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002352:	f001 fbd5 	bl	8003b00 <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002356:	f7ff ff03 	bl	8002160 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800235a:	f001 fb35 	bl	80039c8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800235e:	f001 f9f1 	bl	8003744 <MX_TIM2_Init>
	MX_FATFS_Init();
 8002362:	f004 ff6d 	bl	8007240 <MX_FATFS_Init>
	MX_SPI1_Init();
 8002366:	f000 ff07 	bl	8003178 <MX_SPI1_Init>

	printf("Hello from STM32 UART!\n\r");
 800236a:	482b      	ldr	r0, [pc, #172]	@ (8002418 <main+0xe0>)
 800236c:	f009 fa72 	bl	800b854 <iprintf>

	HAL_TIM_Base_Start(&htim2);
 8002370:	482a      	ldr	r0, [pc, #168]	@ (800241c <main+0xe4>)
 8002372:	f003 fe07 	bl	8005f84 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 8002376:	2201      	movs	r2, #1
 8002378:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800237c:	4828      	ldr	r0, [pc, #160]	@ (8002420 <main+0xe8>)
 800237e:	f002 fa83 	bl	8004888 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002382:	200a      	movs	r0, #10
 8002384:	f001 fc2e 	bl	8003be4 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800238e:	4824      	ldr	r0, [pc, #144]	@ (8002420 <main+0xe8>)
 8002390:	f002 fa7a 	bl	8004888 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002394:	200a      	movs	r0, #10
 8002396:	f001 fc25 	bl	8003be4 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800239a:	f001 fbb1 	bl	8003b00 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800239e:	f000 f845 	bl	800242c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a2:	f7ff fedd 	bl	8002160 <MX_GPIO_Init>
  MX_DMA_Init();
 80023a6:	f7ff fb3f 	bl	8001a28 <MX_DMA_Init>
  MX_TIM2_Init();
 80023aa:	f001 f9cb 	bl	8003744 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80023ae:	f001 fb0b 	bl	80039c8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80023b2:	f004 ff45 	bl	8007240 <MX_FATFS_Init>
  MX_SPI1_Init();
 80023b6:	f000 fedf 	bl	8003178 <MX_SPI1_Init>
  MX_SPI2_Init();
 80023ba:	f000 ff13 	bl	80031e4 <MX_SPI2_Init>
  MX_TIM3_Init();
 80023be:	f001 fa0d 	bl	80037dc <MX_TIM3_Init>
  MX_TIM4_Init();
 80023c2:	f001 fa59 	bl	8003878 <MX_TIM4_Init>
  MX_SPI3_Init();
 80023c6:	f000 ff43 	bl	8003250 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 80023ca:	f7ff f84f 	bl	800146c <ILI9341_Init>

  int rectXStart = 80;
 80023ce:	2350      	movs	r3, #80	@ 0x50
 80023d0:	607b      	str	r3, [r7, #4]
  int rectYStart = 80;
 80023d2:	2350      	movs	r3, #80	@ 0x50
 80023d4:	603b      	str	r3, [r7, #0]

  // Simple Text writing (Text, Font, X, Y, Color, BackColor)
  // Available Fonts are FONT1, FONT2, FONT3 and FONT4
  ILI9341_FillScreen(BLACK);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff fa3e 	bl	8001858 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 80023dc:	2003      	movs	r0, #3
 80023de:	f7ff f94f 	bl	8001680 <ILI9341_SetRotation>
  ILI9341_DrawText("Hello from STM32 UART!", FONT4, 55, 110, WHITE, BLACK);
 80023e2:	2300      	movs	r3, #0
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	236e      	movs	r3, #110	@ 0x6e
 80023ee:	2237      	movs	r2, #55	@ 0x37
 80023f0:	490c      	ldr	r1, [pc, #48]	@ (8002424 <main+0xec>)
 80023f2:	480d      	ldr	r0, [pc, #52]	@ (8002428 <main+0xf0>)
 80023f4:	f7fe fede 	bl	80011b4 <ILI9341_DrawText>
  HAL_Delay(3000);
 80023f8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80023fc:	f001 fbf2 	bl	8003be4 <HAL_Delay>
//
//		HAL_Delay(1000);
//
//  }

  Calibrate();
 8002400:	f7ff fb7c 	bl	8001afc <Calibrate>
  main_function();
 8002404:	f7ff fd44 	bl	8001e90 <main_function>
 8002408:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000003c 	.word	0x2000003c
 8002418:	0800f508 	.word	0x0800f508
 800241c:	20000e4c 	.word	0x20000e4c
 8002420:	40020400 	.word	0x40020400
 8002424:	0800f808 	.word	0x0800f808
 8002428:	0800f524 	.word	0x0800f524

0800242c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b094      	sub	sp, #80	@ 0x50
 8002430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	2234      	movs	r2, #52	@ 0x34
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f009 fb67 	bl	800bb0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002450:	2300      	movs	r3, #0
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	4b29      	ldr	r3, [pc, #164]	@ (80024fc <SystemClock_Config+0xd0>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	4a28      	ldr	r2, [pc, #160]	@ (80024fc <SystemClock_Config+0xd0>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002460:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <SystemClock_Config+0xd0>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800246c:	2300      	movs	r3, #0
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <SystemClock_Config+0xd4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002478:	4a21      	ldr	r2, [pc, #132]	@ (8002500 <SystemClock_Config+0xd4>)
 800247a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <SystemClock_Config+0xd4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800248c:	2302      	movs	r3, #2
 800248e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002490:	2301      	movs	r3, #1
 8002492:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002494:	2310      	movs	r3, #16
 8002496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002498:	2302      	movs	r3, #2
 800249a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800249c:	2300      	movs	r3, #0
 800249e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024a0:	2308      	movs	r3, #8
 80024a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80024a4:	2340      	movs	r3, #64	@ 0x40
 80024a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a8:	2302      	movs	r3, #2
 80024aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024b0:	2302      	movs	r3, #2
 80024b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fcdb 	bl	8004e74 <HAL_RCC_OscConfig>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80024c4:	f000 f81e 	bl	8002504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c8:	230f      	movs	r3, #15
 80024ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024cc:	2302      	movs	r3, #2
 80024ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	2102      	movs	r1, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 fa01 	bl	80048ec <HAL_RCC_ClockConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80024f0:	f000 f808 	bl	8002504 <Error_Handler>
  }
}
 80024f4:	bf00      	nop
 80024f6:	3750      	adds	r7, #80	@ 0x50
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000

08002504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i
}
 800250a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <Error_Handler+0x8>

08002510 <SD_init>:

static char buffer[MAX_FILELINE];
BYTE previousLine[MAX_FILELINE];


void  SD_init(){
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8002516:	2201      	movs	r2, #1
 8002518:	4916      	ldr	r1, [pc, #88]	@ (8002574 <SD_init+0x64>)
 800251a:	4817      	ldr	r0, [pc, #92]	@ (8002578 <SD_init+0x68>)
 800251c:	f007 f996 	bl	800984c <f_mount>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	4b15      	ldr	r3, [pc, #84]	@ (800257c <SD_init+0x6c>)
 8002526:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <SD_init+0x6c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <SD_init+0x30>
		printf("f_mount error (%i)\r\n", fres);
 8002530:	4b12      	ldr	r3, [pc, #72]	@ (800257c <SD_init+0x6c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	4812      	ldr	r0, [pc, #72]	@ (8002580 <SD_init+0x70>)
 8002538:	f009 f98c 	bl	800b854 <iprintf>
		while(1);
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <SD_init+0x2c>
	//Let's get some statistics from the SD card
	DWORD free_clusters;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8002540:	463a      	mov	r2, r7
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	4619      	mov	r1, r3
 8002546:	480b      	ldr	r0, [pc, #44]	@ (8002574 <SD_init+0x64>)
 8002548:	f007 fedc 	bl	800a304 <f_getfree>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <SD_init+0x6c>)
 8002552:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002554:	4b09      	ldr	r3, [pc, #36]	@ (800257c <SD_init+0x6c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <SD_init+0x5c>
		printf("f_getfree error (%i)\r\n", fres);
 800255c:	4b07      	ldr	r3, [pc, #28]	@ (800257c <SD_init+0x6c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	4808      	ldr	r0, [pc, #32]	@ (8002584 <SD_init+0x74>)
 8002564:	f009 f976 	bl	800b854 <iprintf>
		while(1);
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <SD_init+0x58>
	}

}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	0800f554 	.word	0x0800f554
 8002578:	20000214 	.word	0x20000214
 800257c:	200008a4 	.word	0x200008a4
 8002580:	0800f558 	.word	0x0800f558
 8002584:	0800f570 	.word	0x0800f570

08002588 <saveDrawerConfig>:

void saveDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b08c      	sub	sp, #48	@ 0x30
 800258c:	af06      	add	r7, sp, #24
 800258e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4603      	mov	r3, r0
 8002598:	81fb      	strh	r3, [r7, #14]
 800259a:	460b      	mov	r3, r1
 800259c:	81bb      	strh	r3, [r7, #12]

	UINT bytesWrote;

	//f_unlink((TCHAR*)filename); //deletes the original file

	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND | FA_CREATE_NEW);
 800259e:	4b33      	ldr	r3, [pc, #204]	@ (800266c <saveDrawerConfig+0xe4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2236      	movs	r2, #54	@ 0x36
 80025a4:	4619      	mov	r1, r3
 80025a6:	4832      	ldr	r0, [pc, #200]	@ (8002670 <saveDrawerConfig+0xe8>)
 80025a8:	f007 f996 	bl	80098d8 <f_open>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b30      	ldr	r3, [pc, #192]	@ (8002674 <saveDrawerConfig+0xec>)
 80025b2:	701a      	strb	r2, [r3, #0]

	if(fres == FR_EXIST){
 80025b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <saveDrawerConfig+0xec>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d116      	bne.n	80025ea <saveDrawerConfig+0x62>
				fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND);
 80025bc:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <saveDrawerConfig+0xe4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2232      	movs	r2, #50	@ 0x32
 80025c2:	4619      	mov	r1, r3
 80025c4:	482a      	ldr	r0, [pc, #168]	@ (8002670 <saveDrawerConfig+0xe8>)
 80025c6:	f007 f987 	bl	80098d8 <f_open>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b29      	ldr	r3, [pc, #164]	@ (8002674 <saveDrawerConfig+0xec>)
 80025d0:	701a      	strb	r2, [r3, #0]
				if(fres != FR_OK){
 80025d2:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <saveDrawerConfig+0xec>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d017      	beq.n	800260a <saveDrawerConfig+0x82>
					printf("f_write error (%i) IN saveDrawerConfig\r\n", fres);
 80025da:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <saveDrawerConfig+0xec>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	4825      	ldr	r0, [pc, #148]	@ (8002678 <saveDrawerConfig+0xf0>)
 80025e2:	f009 f937 	bl	800b854 <iprintf>
					while(1);
 80025e6:	bf00      	nop
 80025e8:	e7fd      	b.n	80025e6 <saveDrawerConfig+0x5e>
				}
	}
	else if(fres == FR_OK){
 80025ea:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <saveDrawerConfig+0xec>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <saveDrawerConfig+0x72>
		printf("Created new file");
 80025f2:	4822      	ldr	r0, [pc, #136]	@ (800267c <saveDrawerConfig+0xf4>)
 80025f4:	f009 f92e 	bl	800b854 <iprintf>
 80025f8:	e007      	b.n	800260a <saveDrawerConfig+0x82>
	}
	else {
		printf("f_open error (%i) IN saveDrawerConfig\r\n", fres);
 80025fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <saveDrawerConfig+0xec>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	481f      	ldr	r0, [pc, #124]	@ (8002680 <saveDrawerConfig+0xf8>)
 8002602:	f009 f927 	bl	800b854 <iprintf>
		while(1);
 8002606:	bf00      	nop
 8002608:	e7fd      	b.n	8002606 <saveDrawerConfig+0x7e>
	}

	snprintf((char*)buffer, sizeof(buffer),"Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld\n", row, drawer, calFactor, Tare, thresh);
 800260a:	89fd      	ldrh	r5, [r7, #14]
 800260c:	89bc      	ldrh	r4, [r7, #12]
 800260e:	68b8      	ldr	r0, [r7, #8]
 8002610:	f7fd ffba 	bl	8000588 <__aeabi_f2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	9105      	str	r1, [sp, #20]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	9104      	str	r1, [sp, #16]
 8002620:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002624:	9400      	str	r4, [sp, #0]
 8002626:	462b      	mov	r3, r5
 8002628:	4a16      	ldr	r2, [pc, #88]	@ (8002684 <saveDrawerConfig+0xfc>)
 800262a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800262e:	4816      	ldr	r0, [pc, #88]	@ (8002688 <saveDrawerConfig+0x100>)
 8002630:	f009 f9d6 	bl	800b9e0 <sniprintf>
	fres = f_write(&fil, buffer, strlen(buffer), &bytesWrote);
 8002634:	4814      	ldr	r0, [pc, #80]	@ (8002688 <saveDrawerConfig+0x100>)
 8002636:	f7fd fe3b 	bl	80002b0 <strlen>
 800263a:	4602      	mov	r2, r0
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4911      	ldr	r1, [pc, #68]	@ (8002688 <saveDrawerConfig+0x100>)
 8002642:	480b      	ldr	r0, [pc, #44]	@ (8002670 <saveDrawerConfig+0xe8>)
 8002644:	f007 fc41 	bl	8009eca <f_write>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <saveDrawerConfig+0xec>)
 800264e:	701a      	strb	r2, [r3, #0]
	printf("Wrote %i bytes to %s\r\n", bytesWrote,filename);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4a06      	ldr	r2, [pc, #24]	@ (800266c <saveDrawerConfig+0xe4>)
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	480c      	ldr	r0, [pc, #48]	@ (800268c <saveDrawerConfig+0x104>)
 800265a:	f009 f8fb 	bl	800b854 <iprintf>


	f_close(&fil);
 800265e:	4804      	ldr	r0, [pc, #16]	@ (8002670 <saveDrawerConfig+0xe8>)
 8002660:	f007 fe26 	bl	800a2b0 <f_close>

}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bdb0      	pop	{r4, r5, r7, pc}
 800266c:	20000004 	.word	0x20000004
 8002670:	20000444 	.word	0x20000444
 8002674:	200008a4 	.word	0x200008a4
 8002678:	0800f588 	.word	0x0800f588
 800267c:	0800f5b4 	.word	0x0800f5b4
 8002680:	0800f5c8 	.word	0x0800f5c8
 8002684:	0800f5f0 	.word	0x0800f5f0
 8002688:	200008a8 	.word	0x200008a8
 800268c:	0800f624 	.word	0x0800f624

08002690 <getData>:

uint32_t getData(char* token){
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i <= 1; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	81fb      	strh	r3, [r7, #14]
 800269c:	e011      	b.n	80026c2 <getData+0x32>
		char* temp_token = strtok(token, ":");
 800269e:	490d      	ldr	r1, [pc, #52]	@ (80026d4 <getData+0x44>)
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f009 fa3d 	bl	800bb20 <strtok>
 80026a6:	60b8      	str	r0, [r7, #8]
		if(i == 1){
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d106      	bne.n	80026bc <getData+0x2c>

			return strtol(temp_token, NULL, 10);
 80026ae:	220a      	movs	r2, #10
 80026b0:	2100      	movs	r1, #0
 80026b2:	68b8      	ldr	r0, [r7, #8]
 80026b4:	f008 f996 	bl	800a9e4 <strtol>
 80026b8:	4603      	mov	r3, r0
 80026ba:	e006      	b.n	80026ca <getData+0x3a>
	for(uint16_t i = 0; i <= 1; i++){
 80026bc:	89fb      	ldrh	r3, [r7, #14]
 80026be:	3301      	adds	r3, #1
 80026c0:	81fb      	strh	r3, [r7, #14]
 80026c2:	89fb      	ldrh	r3, [r7, #14]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d9ea      	bls.n	800269e <getData+0xe>
		}
	}
	return 0;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	0800f63c 	.word	0x0800f63c

080026d8 <getLineMarker>:

uint16_t getLineMarker(uint16_t row, uint16_t drawer){
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	460a      	mov	r2, r1
 80026e2:	80fb      	strh	r3, [r7, #6]
 80026e4:	4613      	mov	r3, r2
 80026e6:	80bb      	strh	r3, [r7, #4]

	fres = f_open(&fil, filename, FA_READ);
 80026e8:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <getLineMarker+0xb8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4619      	mov	r1, r3
 80026f0:	4828      	ldr	r0, [pc, #160]	@ (8002794 <getLineMarker+0xbc>)
 80026f2:	f007 f8f1 	bl	80098d8 <f_open>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <getLineMarker+0xc0>)
 80026fc:	701a      	strb	r2, [r3, #0]
	uint16_t fileIndex = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (fres != FR_OK){
 8002702:	4b25      	ldr	r3, [pc, #148]	@ (8002798 <getLineMarker+0xc0>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <getLineMarker+0x42>
		printf("f_open error (%i) IN getLineMarker\r\n", fres);
 800270a:	4b23      	ldr	r3, [pc, #140]	@ (8002798 <getLineMarker+0xc0>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	4822      	ldr	r0, [pc, #136]	@ (800279c <getLineMarker+0xc4>)
 8002712:	f009 f89f 	bl	800b854 <iprintf>
		while(1);
 8002716:	bf00      	nop
 8002718:	e7fd      	b.n	8002716 <getLineMarker+0x3e>
	}
	else{
		TCHAR* rres = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
		do{
			rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 800271e:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <getLineMarker+0xbc>)
 8002720:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002724:	481e      	ldr	r0, [pc, #120]	@ (80027a0 <getLineMarker+0xc8>)
 8002726:	f008 f846 	bl	800a7b6 <f_gets>
 800272a:	6138      	str	r0, [r7, #16]

			//char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
			char* token = strtok(rres, ";");
 800272c:	491d      	ldr	r1, [pc, #116]	@ (80027a4 <getLineMarker+0xcc>)
 800272e:	6938      	ldr	r0, [r7, #16]
 8002730:	f009 f9f6 	bl	800bb20 <strtok>
 8002734:	60f8      	str	r0, [r7, #12]

				for(uint16_t i = 0; i <= 1 ; i++){
 8002736:	2300      	movs	r3, #0
 8002738:	82bb      	strh	r3, [r7, #20]
 800273a:	e00a      	b.n	8002752 <getLineMarker+0x7a>
					array[i] = getData(token);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff ffa7 	bl	8002690 <getData>
 8002742:	4602      	mov	r2, r0
 8002744:	8abb      	ldrh	r3, [r7, #20]
 8002746:	b2d1      	uxtb	r1, r2
 8002748:	4a17      	ldr	r2, [pc, #92]	@ (80027a8 <getLineMarker+0xd0>)
 800274a:	54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i <= 1 ; i++){
 800274c:	8abb      	ldrh	r3, [r7, #20]
 800274e:	3301      	adds	r3, #1
 8002750:	82bb      	strh	r3, [r7, #20]
 8002752:	8abb      	ldrh	r3, [r7, #20]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d9f1      	bls.n	800273c <getLineMarker+0x64>
				}

			if(row == array[0] && drawer == array[1]){
 8002758:	4b13      	ldr	r3, [pc, #76]	@ (80027a8 <getLineMarker+0xd0>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	4293      	cmp	r3, r2
 8002762:	d107      	bne.n	8002774 <getLineMarker+0x9c>
 8002764:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <getLineMarker+0xd0>)
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	461a      	mov	r2, r3
 800276a:	88bb      	ldrh	r3, [r7, #4]
 800276c:	4293      	cmp	r3, r2
 800276e:	d101      	bne.n	8002774 <getLineMarker+0x9c>
					return fileIndex;
 8002770:	8afb      	ldrh	r3, [r7, #22]
 8002772:	e009      	b.n	8002788 <getLineMarker+0xb0>
			}
			else{
				fileIndex++;
 8002774:	8afb      	ldrh	r3, [r7, #22]
 8002776:	3301      	adds	r3, #1
 8002778:	82fb      	strh	r3, [r7, #22]

			}
		}while(rres != 0);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ce      	bne.n	800271e <getLineMarker+0x46>
	}
	f_close(&fil);
 8002780:	4804      	ldr	r0, [pc, #16]	@ (8002794 <getLineMarker+0xbc>)
 8002782:	f007 fd95 	bl	800a2b0 <f_close>
	return 0;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000004 	.word	0x20000004
 8002794:	20000444 	.word	0x20000444
 8002798:	200008a4 	.word	0x200008a4
 800279c:	0800f640 	.word	0x0800f640
 80027a0:	200008a8 	.word	0x200008a8
 80027a4:	0800f668 	.word	0x0800f668
 80027a8:	20000ca8 	.word	0x20000ca8

080027ac <updateDrawerConfig>:

void updateDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){ //will need to add ID marker and compare if they are the same, if not then change both locations
 80027ac:	b5b0      	push	{r4, r5, r7, lr}
 80027ae:	b08e      	sub	sp, #56	@ 0x38
 80027b0:	af06      	add	r7, sp, #24
 80027b2:	ed87 0a02 	vstr	s0, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	4603      	mov	r3, r0
 80027bc:	81fb      	strh	r3, [r7, #14]
 80027be:	460b      	mov	r3, r1
 80027c0:	81bb      	strh	r3, [r7, #12]

	fres = f_open(&fil, filename, FA_READ);
 80027c2:	4b58      	ldr	r3, [pc, #352]	@ (8002924 <updateDrawerConfig+0x178>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2201      	movs	r2, #1
 80027c8:	4619      	mov	r1, r3
 80027ca:	4857      	ldr	r0, [pc, #348]	@ (8002928 <updateDrawerConfig+0x17c>)
 80027cc:	f007 f884 	bl	80098d8 <f_open>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b55      	ldr	r3, [pc, #340]	@ (800292c <updateDrawerConfig+0x180>)
 80027d6:	701a      	strb	r2, [r3, #0]
	fres_temp = f_open(&fil_temp, temp_filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80027d8:	4b55      	ldr	r3, [pc, #340]	@ (8002930 <updateDrawerConfig+0x184>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	221a      	movs	r2, #26
 80027de:	4619      	mov	r1, r3
 80027e0:	4854      	ldr	r0, [pc, #336]	@ (8002934 <updateDrawerConfig+0x188>)
 80027e2:	f007 f879 	bl	80098d8 <f_open>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b53      	ldr	r3, [pc, #332]	@ (8002938 <updateDrawerConfig+0x18c>)
 80027ec:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 80027ee:	4b4f      	ldr	r3, [pc, #316]	@ (800292c <updateDrawerConfig+0x180>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <updateDrawerConfig+0x5a>
		printf("f_open error (%i) IN updateDrawerConfig FOR filename\r\n", fres);
 80027f6:	4b4d      	ldr	r3, [pc, #308]	@ (800292c <updateDrawerConfig+0x180>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	484f      	ldr	r0, [pc, #316]	@ (800293c <updateDrawerConfig+0x190>)
 80027fe:	f009 f829 	bl	800b854 <iprintf>
		while(1);
 8002802:	bf00      	nop
 8002804:	e7fd      	b.n	8002802 <updateDrawerConfig+0x56>
	}
	if (fres_temp != FR_OK){
 8002806:	4b4c      	ldr	r3, [pc, #304]	@ (8002938 <updateDrawerConfig+0x18c>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <updateDrawerConfig+0x72>
		printf("f_open error (%i) IN updateDrawerConfig FOR temp_filename\r\n", fres_temp);
 800280e:	4b4a      	ldr	r3, [pc, #296]	@ (8002938 <updateDrawerConfig+0x18c>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	484a      	ldr	r0, [pc, #296]	@ (8002940 <updateDrawerConfig+0x194>)
 8002816:	f009 f81d 	bl	800b854 <iprintf>
		while(1);
 800281a:	bf00      	nop
 800281c:	e7fd      	b.n	800281a <updateDrawerConfig+0x6e>
	}

	UINT bytesWrote;

	bool keep_reading = true;
 800281e:	2301      	movs	r3, #1
 8002820:	77fb      	strb	r3, [r7, #31]
	uint16_t lineMarker = getLineMarker(row, drawer);
 8002822:	89ba      	ldrh	r2, [r7, #12]
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff55 	bl	80026d8 <getLineMarker>
 800282e:	4603      	mov	r3, r0
 8002830:	837b      	strh	r3, [r7, #26]
	uint16_t currentLine = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	83bb      	strh	r3, [r7, #28]
	do{

		TCHAR* rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8002836:	4a3c      	ldr	r2, [pc, #240]	@ (8002928 <updateDrawerConfig+0x17c>)
 8002838:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800283c:	4841      	ldr	r0, [pc, #260]	@ (8002944 <updateDrawerConfig+0x198>)
 800283e:	f007 ffba 	bl	800a7b6 <f_gets>
 8002842:	6178      	str	r0, [r7, #20]

		if(rres == 0) keep_reading = false;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <updateDrawerConfig+0xa4>
 800284a:	2300      	movs	r3, #0
 800284c:	77fb      	strb	r3, [r7, #31]
 800284e:	e04c      	b.n	80028ea <updateDrawerConfig+0x13e>
		else if(currentLine == lineMarker){ //ID matching would go here, check if IDs match, if not then save previous line, update line, then search for original location of ID and replace that line
 8002850:	8bba      	ldrh	r2, [r7, #28]
 8002852:	8b7b      	ldrh	r3, [r7, #26]
 8002854:	429a      	cmp	r2, r3
 8002856:	d12e      	bne.n	80028b6 <updateDrawerConfig+0x10a>
			snprintf((char*)buffer, MAX_FILELINE, "Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld", row, drawer, calFactor, Tare, thresh);
 8002858:	89fd      	ldrh	r5, [r7, #14]
 800285a:	89bc      	ldrh	r4, [r7, #12]
 800285c:	68b8      	ldr	r0, [r7, #8]
 800285e:	f7fd fe93 	bl	8000588 <__aeabi_f2d>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	9105      	str	r1, [sp, #20]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	9104      	str	r1, [sp, #16]
 800286e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002872:	9400      	str	r4, [sp, #0]
 8002874:	462b      	mov	r3, r5
 8002876:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <updateDrawerConfig+0x19c>)
 8002878:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800287c:	4831      	ldr	r0, [pc, #196]	@ (8002944 <updateDrawerConfig+0x198>)
 800287e:	f009 f8af 	bl	800b9e0 <sniprintf>
			//fputs(buffer, temp);

			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8002882:	4830      	ldr	r0, [pc, #192]	@ (8002944 <updateDrawerConfig+0x198>)
 8002884:	f7fd fd14 	bl	80002b0 <strlen>
 8002888:	4602      	mov	r2, r0
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	492d      	ldr	r1, [pc, #180]	@ (8002944 <updateDrawerConfig+0x198>)
 8002890:	4828      	ldr	r0, [pc, #160]	@ (8002934 <updateDrawerConfig+0x188>)
 8002892:	f007 fb1a 	bl	8009eca <f_write>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	4b24      	ldr	r3, [pc, #144]	@ (800292c <updateDrawerConfig+0x180>)
 800289c:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 800289e:	4b23      	ldr	r3, [pc, #140]	@ (800292c <updateDrawerConfig+0x180>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d021      	beq.n	80028ea <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(1)\r\n", fres);
 80028a6:	4b21      	ldr	r3, [pc, #132]	@ (800292c <updateDrawerConfig+0x180>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	4619      	mov	r1, r3
 80028ac:	4827      	ldr	r0, [pc, #156]	@ (800294c <updateDrawerConfig+0x1a0>)
 80028ae:	f008 ffd1 	bl	800b854 <iprintf>
				while(1);
 80028b2:	bf00      	nop
 80028b4:	e7fd      	b.n	80028b2 <updateDrawerConfig+0x106>
			}

		}
		else {
			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 80028b6:	4823      	ldr	r0, [pc, #140]	@ (8002944 <updateDrawerConfig+0x198>)
 80028b8:	f7fd fcfa 	bl	80002b0 <strlen>
 80028bc:	4602      	mov	r2, r0
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	4920      	ldr	r1, [pc, #128]	@ (8002944 <updateDrawerConfig+0x198>)
 80028c4:	481b      	ldr	r0, [pc, #108]	@ (8002934 <updateDrawerConfig+0x188>)
 80028c6:	f007 fb00 	bl	8009eca <f_write>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b17      	ldr	r3, [pc, #92]	@ (800292c <updateDrawerConfig+0x180>)
 80028d0:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 80028d2:	4b16      	ldr	r3, [pc, #88]	@ (800292c <updateDrawerConfig+0x180>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(2)\r\n", fres);
 80028da:	4b14      	ldr	r3, [pc, #80]	@ (800292c <updateDrawerConfig+0x180>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	481b      	ldr	r0, [pc, #108]	@ (8002950 <updateDrawerConfig+0x1a4>)
 80028e2:	f008 ffb7 	bl	800b854 <iprintf>
				while(1);
 80028e6:	bf00      	nop
 80028e8:	e7fd      	b.n	80028e6 <updateDrawerConfig+0x13a>
			}
		}


		currentLine++;
 80028ea:	8bbb      	ldrh	r3, [r7, #28]
 80028ec:	3301      	adds	r3, #1
 80028ee:	83bb      	strh	r3, [r7, #28]

	}while(keep_reading);
 80028f0:	7ffb      	ldrb	r3, [r7, #31]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d19f      	bne.n	8002836 <updateDrawerConfig+0x8a>

	f_close(&fil);
 80028f6:	480c      	ldr	r0, [pc, #48]	@ (8002928 <updateDrawerConfig+0x17c>)
 80028f8:	f007 fcda 	bl	800a2b0 <f_close>
	f_close(&fil_temp);
 80028fc:	480d      	ldr	r0, [pc, #52]	@ (8002934 <updateDrawerConfig+0x188>)
 80028fe:	f007 fcd7 	bl	800a2b0 <f_close>

	f_unlink((TCHAR*)filename); //deletes the original file
 8002902:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <updateDrawerConfig+0x178>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f007 fdb1 	bl	800a46e <f_unlink>
	f_rename((TCHAR*)temp_filename, (TCHAR*)filename); //rename the temp file to be the new "orginal" file
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <updateDrawerConfig+0x184>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <updateDrawerConfig+0x178>)
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f007 fe54 	bl	800a5c4 <f_rename>


}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bdb0      	pop	{r4, r5, r7, pc}
 8002924:	20000004 	.word	0x20000004
 8002928:	20000444 	.word	0x20000444
 800292c:	200008a4 	.word	0x200008a4
 8002930:	20000008 	.word	0x20000008
 8002934:	20000674 	.word	0x20000674
 8002938:	200008a5 	.word	0x200008a5
 800293c:	0800f66c 	.word	0x0800f66c
 8002940:	0800f6a4 	.word	0x0800f6a4
 8002944:	200008a8 	.word	0x200008a8
 8002948:	0800f6e0 	.word	0x0800f6e0
 800294c:	0800f714 	.word	0x0800f714
 8002950:	0800f744 	.word	0x0800f744

08002954 <getFileInfo>:


struct drawerInfo getFileInfo(uint16_t row, uint16_t drawer){ //add ID parameter here later
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b08d      	sub	sp, #52	@ 0x34
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	803b      	strh	r3, [r7, #0]

	struct drawerInfo drawerInst = { 0 };
 8002964:	f107 030c 	add.w	r3, r7, #12
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
	static unsigned int array[5];

	uint16_t lineMarker = getLineMarker(row, drawer);
 8002972:	883a      	ldrh	r2, [r7, #0]
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fead 	bl	80026d8 <getLineMarker>
 800297e:	4603      	mov	r3, r0
 8002980:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t fileIndex = 1;
 8002982:	2301      	movs	r3, #1
 8002984:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	fres = f_open(&fil, filename, FA_READ);
 8002986:	4b3e      	ldr	r3, [pc, #248]	@ (8002a80 <getFileInfo+0x12c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	4619      	mov	r1, r3
 800298e:	483d      	ldr	r0, [pc, #244]	@ (8002a84 <getFileInfo+0x130>)
 8002990:	f006 ffa2 	bl	80098d8 <f_open>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <getFileInfo+0x134>)
 800299a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 800299c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a88 <getFileInfo+0x134>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <getFileInfo+0x60>
			printf("f_open error (%i) IN getFileInfo\r\n", fres);
 80029a4:	4b38      	ldr	r3, [pc, #224]	@ (8002a88 <getFileInfo+0x134>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4838      	ldr	r0, [pc, #224]	@ (8002a8c <getFileInfo+0x138>)
 80029ac:	f008 ff52 	bl	800b854 <iprintf>
			while(1);
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <getFileInfo+0x5c>
		}
	else {
		TCHAR* rres = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
		do {

				rres = f_gets((TCHAR*) buffer, MAX_FILELINE, &fil);
 80029b8:	4a32      	ldr	r2, [pc, #200]	@ (8002a84 <getFileInfo+0x130>)
 80029ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029be:	4834      	ldr	r0, [pc, #208]	@ (8002a90 <getFileInfo+0x13c>)
 80029c0:	f007 fef9 	bl	800a7b6 <f_gets>
 80029c4:	61f8      	str	r0, [r7, #28]

				if (fileIndex == lineMarker) {
 80029c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80029c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d140      	bne.n	8002a50 <getFileInfo+0xfc>
						char* token = strtok(buffer, ";");
 80029ce:	4931      	ldr	r1, [pc, #196]	@ (8002a94 <getFileInfo+0x140>)
 80029d0:	482f      	ldr	r0, [pc, #188]	@ (8002a90 <getFileInfo+0x13c>)
 80029d2:	f009 f8a5 	bl	800bb20 <strtok>
 80029d6:	62b8      	str	r0, [r7, #40]	@ 0x28
						unsigned int index = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24

						while (token != NULL) {
 80029dc:	e00f      	b.n	80029fe <getFileInfo+0xaa>
								array[index] = getData(token);
 80029de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029e0:	f7ff fe56 	bl	8002690 <getData>
 80029e4:	4602      	mov	r2, r0
 80029e6:	492c      	ldr	r1, [pc, #176]	@ (8002a98 <getFileInfo+0x144>)
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								token = strtok(NULL, ";");
 80029ee:	4929      	ldr	r1, [pc, #164]	@ (8002a94 <getFileInfo+0x140>)
 80029f0:	2000      	movs	r0, #0
 80029f2:	f009 f895 	bl	800bb20 <strtok>
 80029f6:	62b8      	str	r0, [r7, #40]	@ 0x28
								index++;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	3301      	adds	r3, #1
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
						while (token != NULL) {
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ec      	bne.n	80029de <getFileInfo+0x8a>
						}
						f_close(&fil);
 8002a04:	481f      	ldr	r0, [pc, #124]	@ (8002a84 <getFileInfo+0x130>)
 8002a06:	f007 fc53 	bl	800a2b0 <f_close>

						drawerInst.row = array[0];
 8002a0a:	4b23      	ldr	r3, [pc, #140]	@ (8002a98 <getFileInfo+0x144>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	81bb      	strh	r3, [r7, #12]
						drawerInst.drawer = array[1];
 8002a12:	4b21      	ldr	r3, [pc, #132]	@ (8002a98 <getFileInfo+0x144>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	81fb      	strh	r3, [r7, #14]
						drawerInst.calFactor = array[2];
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a98 <getFileInfo+0x144>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	edc7 7a04 	vstr	s15, [r7, #16]
						drawerInst.Tare = array[3];
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <getFileInfo+0x144>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	617b      	str	r3, [r7, #20]
						drawerInst.thresh = array[4];
 8002a30:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <getFileInfo+0x144>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3c:	edc7 7a06 	vstr	s15, [r7, #24]

						return drawerInst;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	461c      	mov	r4, r3
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a4e:	e012      	b.n	8002a76 <getFileInfo+0x122>
				}
				fileIndex++;
 8002a50:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002a52:	3301      	adds	r3, #1
 8002a54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		}while(rres != 0);
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ad      	bne.n	80029b8 <getFileInfo+0x64>
	}

	f_close(&fil);
 8002a5c:	4809      	ldr	r0, [pc, #36]	@ (8002a84 <getFileInfo+0x130>)
 8002a5e:	f007 fc27 	bl	800a2b0 <f_close>
	printf("An error occurred during info extraction.");
 8002a62:	480e      	ldr	r0, [pc, #56]	@ (8002a9c <getFileInfo+0x148>)
 8002a64:	f008 fef6 	bl	800b854 <iprintf>
	return drawerInst;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	461c      	mov	r4, r3
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	3734      	adds	r7, #52	@ 0x34
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000004 	.word	0x20000004
 8002a84:	20000444 	.word	0x20000444
 8002a88:	200008a4 	.word	0x200008a4
 8002a8c:	0800f774 	.word	0x0800f774
 8002a90:	200008a8 	.word	0x200008a8
 8002a94:	0800f668 	.word	0x0800f668
 8002a98:	20000cac 	.word	0x20000cac
 8002a9c:	0800f798 	.word	0x0800f798

08002aa0 <_write>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

// Code to enable printf statements
int _write(int file, char *data, int len) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	4804      	ldr	r0, [pc, #16]	@ (8002ac8 <_write+0x28>)
 8002ab8:	f003 ff70 	bl	800699c <HAL_UART_Transmit>
    return len;
 8002abc:	687b      	ldr	r3, [r7, #4]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000f24 	.word	0x20000f24

08002acc <__io_getchar>:

//Code to enable scanf statements
GETCHAR_PROTOTYPE
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <__io_getchar+0x48>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <__io_getchar+0x48>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002aec:	1df9      	adds	r1, r7, #7
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	2201      	movs	r2, #1
 8002af4:	4807      	ldr	r0, [pc, #28]	@ (8002b14 <__io_getchar+0x48>)
 8002af6:	f003 ffdc 	bl	8006ab2 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002afa:	1df9      	adds	r1, r7, #7
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	2201      	movs	r2, #1
 8002b02:	4804      	ldr	r0, [pc, #16]	@ (8002b14 <__io_getchar+0x48>)
 8002b04:	f003 ff4a 	bl	800699c <HAL_UART_Transmit>
  return ch;
 8002b08:	79fb      	ldrb	r3, [r7, #7]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000f24 	.word	0x20000f24

08002b18 <HAL_GPIO_EXTI_Callback>:
unsigned int released_time; // Timestamp of the button released

int num_button = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	80fb      	strh	r3, [r7, #6]
	// D7
	if (GPIO_Pin == RESET_BTN_Pin) {
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d137      	bne.n	8002b98 <HAL_GPIO_EXTI_Callback+0x80>
		// printf("Reset button Pressed");
		num_button = 1;
 8002b28:	4b3f      	ldr	r3, [pc, #252]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x110>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
		if 	(timer_active == 0){
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <HAL_GPIO_EXTI_Callback+0x114>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d174      	bne.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
			if(HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin) == GPIO_PIN_SET && i == 0){
 8002b36:	2102      	movs	r1, #2
 8002b38:	483d      	ldr	r0, [pc, #244]	@ (8002c30 <HAL_GPIO_EXTI_Callback+0x118>)
 8002b3a:	f001 fe8d 	bl	8004858 <HAL_GPIO_ReadPin>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10c      	bne.n	8002b5e <HAL_GPIO_EXTI_Callback+0x46>
 8002b44:	4b3b      	ldr	r3, [pc, #236]	@ (8002c34 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d108      	bne.n	8002b5e <HAL_GPIO_EXTI_Callback+0x46>
					i = 1; // states the button already been pressed to ignore interrupts
 8002b4c:	4b39      	ldr	r3, [pc, #228]	@ (8002c34 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
					// printf("%d i\n\r", i);
					time_start = HAL_GetTick(); // reads when button is pressed
 8002b52:	f001 f83b 	bl	8003bcc <HAL_GetTick>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a37      	ldr	r2, [pc, #220]	@ (8002c38 <HAL_GPIO_EXTI_Callback+0x120>)
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	e060      	b.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
				}

				else if (HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin) == GPIO_PIN_RESET && j == 0){
 8002b5e:	2102      	movs	r1, #2
 8002b60:	4833      	ldr	r0, [pc, #204]	@ (8002c30 <HAL_GPIO_EXTI_Callback+0x118>)
 8002b62:	f001 fe79 	bl	8004858 <HAL_GPIO_ReadPin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d159      	bne.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
 8002b6c:	4b33      	ldr	r3, [pc, #204]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0x124>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d155      	bne.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
					j = 1;
 8002b74:	4b31      	ldr	r3, [pc, #196]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0x124>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
					count = 1;
 8002b7a:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0x128>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
					/*printf("%d j\n\r", j);*/
					released_time = HAL_GetTick();// reads when button is released
 8002b80:	f001 f824 	bl	8003bcc <HAL_GetTick>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4a2f      	ldr	r2, [pc, #188]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002b88:	6013      	str	r3, [r2, #0]
					HAL_TIM_Base_Start_IT(&htim3);
 8002b8a:	482f      	ldr	r0, [pc, #188]	@ (8002c48 <HAL_GPIO_EXTI_Callback+0x130>)
 8002b8c:	f003 fa62 	bl	8006054 <HAL_TIM_Base_Start_IT>
					timer_active = 1; // timer has active so button sequence is paused
 8002b90:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <HAL_GPIO_EXTI_Callback+0x114>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
						num_button = 2;
					}
				}
			}

}
 8002b96:	e043      	b.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
		else if (GPIO_Pin == CONFIRM_BTN_Pin){
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d140      	bne.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
			num_button = 2;
 8002b9e:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x110>)
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	601a      	str	r2, [r3, #0]
			if(count != 2){
 8002ba4:	4b26      	ldr	r3, [pc, #152]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0x128>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d039      	beq.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
				if ( count == 0){
 8002bac:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0x128>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <HAL_GPIO_EXTI_Callback+0xa2>
				HAL_TIM_Base_Start_IT(&htim3);
 8002bb4:	4824      	ldr	r0, [pc, #144]	@ (8002c48 <HAL_GPIO_EXTI_Callback+0x130>)
 8002bb6:	f003 fa4d 	bl	8006054 <HAL_TIM_Base_Start_IT>
					if(HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin) == GPIO_PIN_SET && i == 0){
 8002bba:	2104      	movs	r1, #4
 8002bbc:	481c      	ldr	r0, [pc, #112]	@ (8002c30 <HAL_GPIO_EXTI_Callback+0x118>)
 8002bbe:	f001 fe4b 	bl	8004858 <HAL_GPIO_ReadPin>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d10c      	bne.n	8002be2 <HAL_GPIO_EXTI_Callback+0xca>
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d108      	bne.n	8002be2 <HAL_GPIO_EXTI_Callback+0xca>
						i = 1;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
						time_start = HAL_GetTick(); // reads when button is pressed
 8002bd6:	f000 fff9 	bl	8003bcc <HAL_GetTick>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4a16      	ldr	r2, [pc, #88]	@ (8002c38 <HAL_GPIO_EXTI_Callback+0x120>)
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e01e      	b.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
					else if(HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin) == GPIO_PIN_RESET && j == 0) {
 8002be2:	2104      	movs	r1, #4
 8002be4:	4812      	ldr	r0, [pc, #72]	@ (8002c30 <HAL_GPIO_EXTI_Callback+0x118>)
 8002be6:	f001 fe37 	bl	8004858 <HAL_GPIO_ReadPin>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d117      	bne.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
 8002bf0:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0x124>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d113      	bne.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
						j = 1;
 8002bf8:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <HAL_GPIO_EXTI_Callback+0x124>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
						count++;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0x128>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3301      	adds	r3, #1
 8002c04:	4a0e      	ldr	r2, [pc, #56]	@ (8002c40 <HAL_GPIO_EXTI_Callback+0x128>)
 8002c06:	6013      	str	r3, [r2, #0]
						released_time = HAL_GetTick();// reads when button is released
 8002c08:	f000 ffe0 	bl	8003bcc <HAL_GetTick>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002c10:	6013      	str	r3, [r2, #0]
						HAL_TIM_Base_Start_IT(&htim4);// timer used to reset i and j values & handle debounce
 8002c12:	480e      	ldr	r0, [pc, #56]	@ (8002c4c <HAL_GPIO_EXTI_Callback+0x134>)
 8002c14:	f003 fa1e 	bl	8006054 <HAL_TIM_Base_Start_IT>
						num_button = 2;
 8002c18:	4b03      	ldr	r3, [pc, #12]	@ (8002c28 <HAL_GPIO_EXTI_Callback+0x110>)
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	e7ff      	b.n	8002c20 <HAL_GPIO_EXTI_Callback+0x108>
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000cdc 	.word	0x20000cdc
 8002c2c:	20000cd0 	.word	0x20000cd0
 8002c30:	40020400 	.word	0x40020400
 8002c34:	20000cc4 	.word	0x20000cc4
 8002c38:	20000cd4 	.word	0x20000cd4
 8002c3c:	20000cc8 	.word	0x20000cc8
 8002c40:	20000ccc 	.word	0x20000ccc
 8002c44:	20000cd8 	.word	0x20000cd8
 8002c48:	20000e94 	.word	0x20000e94
 8002c4c:	20000edc 	.word	0x20000edc

08002c50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	// executes once the time runs out
	if(htim -> Instance == TIM3){
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a24      	ldr	r2, [pc, #144]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d133      	bne.n	8002cca <HAL_TIM_PeriodElapsedCallback+0x7a>
		if ( count == 1){
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d118      	bne.n	8002c9c <HAL_TIM_PeriodElapsedCallback+0x4c>
			// short press
			if (released_time - time_start <= 900){
 8002c6a:	4b23      	ldr	r3, [pc, #140]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b23      	ldr	r3, [pc, #140]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8002c78:	d803      	bhi.n	8002c82 <HAL_TIM_PeriodElapsedCallback+0x32>
				button_press = press_short;
 8002c7a:	4b21      	ldr	r3, [pc, #132]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e013      	b.n	8002caa <HAL_TIM_PeriodElapsedCallback+0x5a>
			}
			// long press
			else if (released_time - time_start >= 1100){
 8002c82:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f240 424b 	movw	r2, #1099	@ 0x44b
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d90a      	bls.n	8002caa <HAL_TIM_PeriodElapsedCallback+0x5a>
				button_press = press_long;
 8002c94:	4b1a      	ldr	r3, [pc, #104]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002c96:	2203      	movs	r2, #3
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e006      	b.n	8002caa <HAL_TIM_PeriodElapsedCallback+0x5a>
			}
		}
		// double press
		else if ( count == 2){
 8002c9c:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d102      	bne.n	8002caa <HAL_TIM_PeriodElapsedCallback+0x5a>
			button_press = press_double;
 8002ca4:	4b16      	ldr	r3, [pc, #88]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
		}

		HAL_TIM_Base_Stop_IT(&htim3); // stops timer interrupt
 8002caa:	4816      	ldr	r0, [pc, #88]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002cac:	f003 fa42 	bl	8006134 <HAL_TIM_Base_Stop_IT>
		//resets flags & press count
		i = 0;
 8002cb0:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
		timer_active = 0;
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
		j = 0;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
		count = 0;
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
			// resets flags
			i = 0;
			j = 0;
		}

}
 8002cc8:	e00d      	b.n	8002ce6 <HAL_TIM_PeriodElapsedCallback+0x96>
		else if (htim -> Instance == TIM4){
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a11      	ldr	r2, [pc, #68]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <HAL_TIM_PeriodElapsedCallback+0x96>
			HAL_TIM_Base_Stop_IT(&htim4); // stops timer interrupt
 8002cd4:	4810      	ldr	r0, [pc, #64]	@ (8002d18 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002cd6:	f003 fa2d 	bl	8006134 <HAL_TIM_Base_Stop_IT>
			i = 0;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
			j = 0;
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	20000ccc 	.word	0x20000ccc
 8002cf8:	20000cd8 	.word	0x20000cd8
 8002cfc:	20000cd4 	.word	0x20000cd4
 8002d00:	20000cc0 	.word	0x20000cc0
 8002d04:	20000e94 	.word	0x20000e94
 8002d08:	20000cc4 	.word	0x20000cc4
 8002d0c:	20000cd0 	.word	0x20000cd0
 8002d10:	20000cc8 	.word	0x20000cc8
 8002d14:	40000800 	.word	0x40000800
 8002d18:	20000edc 	.word	0x20000edc

08002d1c <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4604      	mov	r4, r0
 8002d24:	4608      	mov	r0, r1
 8002d26:	4611      	mov	r1, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	80fb      	strh	r3, [r7, #6]
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80bb      	strh	r3, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	807b      	strh	r3, [r7, #2]
 8002d36:	4613      	mov	r3, r2
 8002d38:	707b      	strb	r3, [r7, #1]
  if(control){
 8002d3a:	787b      	ldrb	r3, [r7, #1]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d015      	beq.n	8002d6c <muxSET+0x50>
    HAL_GPIO_WritePin(MAST_A_GPIO_Port, MAST_A_Pin, A);
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	2101      	movs	r1, #1
 8002d48:	4815      	ldr	r0, [pc, #84]	@ (8002da0 <muxSET+0x84>)
 8002d4a:	f001 fd9d 	bl	8004888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_B_GPIO_Port, MAST_B_Pin, B);
 8002d4e:	88bb      	ldrh	r3, [r7, #4]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	2102      	movs	r1, #2
 8002d56:	4812      	ldr	r0, [pc, #72]	@ (8002da0 <muxSET+0x84>)
 8002d58:	f001 fd96 	bl	8004888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_C_GPIO_Port, MAST_C_Pin, C);
 8002d5c:	887b      	ldrh	r3, [r7, #2]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	2110      	movs	r1, #16
 8002d64:	480e      	ldr	r0, [pc, #56]	@ (8002da0 <muxSET+0x84>)
 8002d66:	f001 fd8f 	bl	8004888 <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
  }
}
 8002d6a:	e014      	b.n	8002d96 <muxSET+0x7a>
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	2101      	movs	r1, #1
 8002d74:	480b      	ldr	r0, [pc, #44]	@ (8002da4 <muxSET+0x88>)
 8002d76:	f001 fd87 	bl	8004888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
 8002d7a:	88bb      	ldrh	r3, [r7, #4]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2102      	movs	r1, #2
 8002d82:	4809      	ldr	r0, [pc, #36]	@ (8002da8 <muxSET+0x8c>)
 8002d84:	f001 fd80 	bl	8004888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4805      	ldr	r0, [pc, #20]	@ (8002da8 <muxSET+0x8c>)
 8002d92:	f001 fd79 	bl	8004888 <HAL_GPIO_WritePin>
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40020400 	.word	0x40020400
 8002da8:	40020800 	.word	0x40020800

08002dac <setRelay>:
#include <manager_io.h>
#include <manager_mux.h>
#include <manager_weight.h>


void setRelay(uint8_t rowNum){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]

	switch (rowNum){
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d866      	bhi.n	8002e8c <setRelay+0xe0>
 8002dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc4 <setRelay+0x18>)
 8002dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc4:	08002dd5 	.word	0x08002dd5
 8002dc8:	08002e03 	.word	0x08002e03
 8002dcc:	08002e31 	.word	0x08002e31
 8002dd0:	08002e5f 	.word	0x08002e5f
		case 1:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 1);
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	2140      	movs	r1, #64	@ 0x40
 8002dd8:	482e      	ldr	r0, [pc, #184]	@ (8002e94 <setRelay+0xe8>)
 8002dda:	f001 fd55 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2120      	movs	r1, #32
 8002de2:	482c      	ldr	r0, [pc, #176]	@ (8002e94 <setRelay+0xe8>)
 8002de4:	f001 fd50 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8002de8:	2200      	movs	r2, #0
 8002dea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dee:	482a      	ldr	r0, [pc, #168]	@ (8002e98 <setRelay+0xec>)
 8002df0:	f001 fd4a 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dfa:	4827      	ldr	r0, [pc, #156]	@ (8002e98 <setRelay+0xec>)
 8002dfc:	f001 fd44 	bl	8004888 <HAL_GPIO_WritePin>
			break;
 8002e00:	e045      	b.n	8002e8e <setRelay+0xe2>

		case 2:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2140      	movs	r1, #64	@ 0x40
 8002e06:	4823      	ldr	r0, [pc, #140]	@ (8002e94 <setRelay+0xe8>)
 8002e08:	f001 fd3e 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 1);
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2120      	movs	r1, #32
 8002e10:	4820      	ldr	r0, [pc, #128]	@ (8002e94 <setRelay+0xe8>)
 8002e12:	f001 fd39 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e1c:	481e      	ldr	r0, [pc, #120]	@ (8002e98 <setRelay+0xec>)
 8002e1e:	f001 fd33 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e28:	481b      	ldr	r0, [pc, #108]	@ (8002e98 <setRelay+0xec>)
 8002e2a:	f001 fd2d 	bl	8004888 <HAL_GPIO_WritePin>
			break;
 8002e2e:	e02e      	b.n	8002e8e <setRelay+0xe2>

		case 3:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2140      	movs	r1, #64	@ 0x40
 8002e34:	4817      	ldr	r0, [pc, #92]	@ (8002e94 <setRelay+0xe8>)
 8002e36:	f001 fd27 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	4815      	ldr	r0, [pc, #84]	@ (8002e94 <setRelay+0xe8>)
 8002e40:	f001 fd22 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 1);
 8002e44:	2201      	movs	r2, #1
 8002e46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e4a:	4813      	ldr	r0, [pc, #76]	@ (8002e98 <setRelay+0xec>)
 8002e4c:	f001 fd1c 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e56:	4810      	ldr	r0, [pc, #64]	@ (8002e98 <setRelay+0xec>)
 8002e58:	f001 fd16 	bl	8004888 <HAL_GPIO_WritePin>
			break;
 8002e5c:	e017      	b.n	8002e8e <setRelay+0xe2>

		case 4:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2140      	movs	r1, #64	@ 0x40
 8002e62:	480c      	ldr	r0, [pc, #48]	@ (8002e94 <setRelay+0xe8>)
 8002e64:	f001 fd10 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	4809      	ldr	r0, [pc, #36]	@ (8002e94 <setRelay+0xe8>)
 8002e6e:	f001 fd0b 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e78:	4807      	ldr	r0, [pc, #28]	@ (8002e98 <setRelay+0xec>)
 8002e7a:	f001 fd05 	bl	8004888 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 1);
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e84:	4804      	ldr	r0, [pc, #16]	@ (8002e98 <setRelay+0xec>)
 8002e86:	f001 fcff 	bl	8004888 <HAL_GPIO_WritePin>
			break;
 8002e8a:	e000      	b.n	8002e8e <setRelay+0xe2>

		default:
			return;
 8002e8c:	bf00      	nop
	}
}
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40020800 	.word	0x40020800
 8002e98:	40020400 	.word	0x40020400

08002e9c <microDelay>:
#include "gpio.h"
#include "tim.h"


void microDelay(uint16_t delay)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <microDelay+0x30>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8002eae:	bf00      	nop
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <microDelay+0x30>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d3f9      	bcc.n	8002eb0 <microDelay+0x14>
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000e4c 	.word	0x20000e4c

08002ed0 <getHX711>:

int32_t getHX711(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 8002eda:	f000 fe77 	bl	8003bcc <HAL_GetTick>
 8002ede:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8002ee0:	e008      	b.n	8002ef4 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8002ee2:	f000 fe73 	bl	8003bcc <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2bc8      	cmp	r3, #200	@ 0xc8
 8002eee:	d901      	bls.n	8002ef4 <getHX711+0x24>
      return 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e04b      	b.n	8002f8c <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8002ef4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ef8:	4826      	ldr	r0, [pc, #152]	@ (8002f94 <getHX711+0xc4>)
 8002efa:	f001 fcad 	bl	8004858 <HAL_GPIO_ReadPin>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d0ee      	beq.n	8002ee2 <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	72fb      	strb	r3, [r7, #11]
 8002f08:	e025      	b.n	8002f56 <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f10:	4821      	ldr	r0, [pc, #132]	@ (8002f98 <getHX711+0xc8>)
 8002f12:	f001 fcb9 	bl	8004888 <HAL_GPIO_WritePin>
    microDelay(1);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f7ff ffc0 	bl	8002e9c <microDelay>
    data = data << 1;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f28:	481b      	ldr	r0, [pc, #108]	@ (8002f98 <getHX711+0xc8>)
 8002f2a:	f001 fcad 	bl	8004888 <HAL_GPIO_WritePin>
    microDelay(1);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f7ff ffb4 	bl	8002e9c <microDelay>
    if(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8002f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f38:	4816      	ldr	r0, [pc, #88]	@ (8002f94 <getHX711+0xc4>)
 8002f3a:	f001 fc8d 	bl	8004858 <HAL_GPIO_ReadPin>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d102      	bne.n	8002f4a <getHX711+0x7a>
      data ++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 8002f4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	72fb      	strb	r3, [r7, #11]
 8002f56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002f5a:	2b17      	cmp	r3, #23
 8002f5c:	ddd5      	ble.n	8002f0a <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8002f64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 8002f66:	2201      	movs	r2, #1
 8002f68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f6c:	480a      	ldr	r0, [pc, #40]	@ (8002f98 <getHX711+0xc8>)
 8002f6e:	f001 fc8b 	bl	8004888 <HAL_GPIO_WritePin>
  microDelay(1);
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7ff ff92 	bl	8002e9c <microDelay>
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f7e:	4806      	ldr	r0, [pc, #24]	@ (8002f98 <getHX711+0xc8>)
 8002f80:	f001 fc82 	bl	8004888 <HAL_GPIO_WritePin>
  microDelay(1);
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7ff ff89 	bl	8002e9c <microDelay>
  return data;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40020400 	.word	0x40020400

08002f9c <weigh>:

int weigh(uint32_t tare, float calFactor)
{
 8002f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa0:	b088      	sub	sp, #32
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	ed87 0a00 	vstr	s0, [r7]
  int64_t  total = 0;
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 8002fb6:	2332      	movs	r3, #50	@ 0x32
 8002fb8:	613b      	str	r3, [r7, #16]

  int milligram = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
  int32_t average = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	82fb      	strh	r3, [r7, #22]
 8002fc6:	e010      	b.n	8002fea <weigh+0x4e>
  {
      total += getHX711();
 8002fc8:	f7ff ff82 	bl	8002ed0 <getHX711>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	17da      	asrs	r2, r3, #31
 8002fd0:	461c      	mov	r4, r3
 8002fd2:	4615      	mov	r5, r2
 8002fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd8:	eb12 0804 	adds.w	r8, r2, r4
 8002fdc:	eb43 0905 	adc.w	r9, r3, r5
 8002fe0:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8002fe4:	8afb      	ldrh	r3, [r7, #22]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	82fb      	strh	r3, [r7, #22]
 8002fea:	8afb      	ldrh	r3, [r7, #22]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	dcea      	bgt.n	8002fc8 <weigh+0x2c>
  }
  average = (int32_t)(total / samples);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	17da      	asrs	r2, r3, #31
 8002ff6:	469a      	mov	sl, r3
 8002ff8:	4693      	mov	fp, r2
 8002ffa:	4652      	mov	r2, sl
 8002ffc:	465b      	mov	r3, fp
 8002ffe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003002:	f7fd fe61 	bl	8000cc8 <__aeabi_ldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4613      	mov	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]
  milligram = (int)(average - tare)*calFactor;
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800301c:	edd7 7a00 	vldr	s15, [r7]
 8003020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003028:	ee17 3a90 	vmov	r3, s15
 800302c:	60fb      	str	r3, [r7, #12]
  return milligram;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800303a <weighRaw>:

int32_t weighRaw()
{
 800303a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
  int64_t  	total = 0;
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  	samples = 50;
 800304e:	2332      	movs	r3, #50	@ 0x32
 8003050:	60bb      	str	r3, [r7, #8]
  int32_t 	average = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]

  for(uint16_t i=0 ; i<samples ; i++)
 8003056:	2300      	movs	r3, #0
 8003058:	81fb      	strh	r3, [r7, #14]
 800305a:	e010      	b.n	800307e <weighRaw+0x44>
  {
      total += getHX711();
 800305c:	f7ff ff38 	bl	8002ed0 <getHX711>
 8003060:	4603      	mov	r3, r0
 8003062:	17da      	asrs	r2, r3, #31
 8003064:	461c      	mov	r4, r3
 8003066:	4615      	mov	r5, r2
 8003068:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800306c:	eb12 0804 	adds.w	r8, r2, r4
 8003070:	eb43 0905 	adc.w	r9, r3, r5
 8003074:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 8003078:	89fb      	ldrh	r3, [r7, #14]
 800307a:	3301      	adds	r3, #1
 800307c:	81fb      	strh	r3, [r7, #14]
 800307e:	89fb      	ldrh	r3, [r7, #14]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	dcea      	bgt.n	800305c <weighRaw+0x22>
  }
  average = (int32_t)(total / samples);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	17da      	asrs	r2, r3, #31
 800308a:	469a      	mov	sl, r3
 800308c:	4693      	mov	fp, r2
 800308e:	4652      	mov	r2, sl
 8003090:	465b      	mov	r3, fp
 8003092:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003096:	f7fd fe17 	bl	8000cc8 <__aeabi_ldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4613      	mov	r3, r2
 80030a0:	607b      	str	r3, [r7, #4]
  return average;
 80030a2:	687b      	ldr	r3, [r7, #4]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080030ae <weighRawTare>:

int32_t weighRawTare(uint32_t tare)
{
 80030ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  int64_t  	total = 0;
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  	samples = 50;
 80030c4:	2332      	movs	r3, #50	@ 0x32
 80030c6:	613b      	str	r3, [r7, #16]
  int32_t 	average = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  int32_t 	avgTare = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	82fb      	strh	r3, [r7, #22]
 80030d4:	e010      	b.n	80030f8 <weighRawTare+0x4a>
  {
      total += getHX711();
 80030d6:	f7ff fefb 	bl	8002ed0 <getHX711>
 80030da:	4603      	mov	r3, r0
 80030dc:	17da      	asrs	r2, r3, #31
 80030de:	461c      	mov	r4, r3
 80030e0:	4615      	mov	r5, r2
 80030e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e6:	eb12 0804 	adds.w	r8, r2, r4
 80030ea:	eb43 0905 	adc.w	r9, r3, r5
 80030ee:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 80030f2:	8afb      	ldrh	r3, [r7, #22]
 80030f4:	3301      	adds	r3, #1
 80030f6:	82fb      	strh	r3, [r7, #22]
 80030f8:	8afb      	ldrh	r3, [r7, #22]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	dcea      	bgt.n	80030d6 <weighRawTare+0x28>
  }
  average = (int32_t)(total / samples);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	17da      	asrs	r2, r3, #31
 8003104:	469a      	mov	sl, r3
 8003106:	4693      	mov	fp, r2
 8003108:	4652      	mov	r2, sl
 800310a:	465b      	mov	r3, fp
 800310c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003110:	f7fd fdda 	bl	8000cc8 <__aeabi_ldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4613      	mov	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  avgTare = average - tare;
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	60bb      	str	r3, [r7, #8]
  return avgTare;
 8003124:	68bb      	ldr	r3, [r7, #8]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003130 <getCalFactor>:

float getCalFactor(uint32_t knownHX711){
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	float cal = 20000.0 / knownHX711;
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fd fa03 	bl	8000544 <__aeabi_ui2d>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	a10b      	add	r1, pc, #44	@ (adr r1, 8003170 <getCalFactor+0x40>)
 8003144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003148:	f7fd fba0 	bl	800088c <__aeabi_ddiv>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7fd fd68 	bl	8000c28 <__aeabi_d2f>
 8003158:	4603      	mov	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]
	return cal;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	ee07 3a90 	vmov	s15, r3
}
 8003162:	eeb0 0a67 	vmov.f32	s0, s15
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	f3af 8000 	nop.w
 8003170:	00000000 	.word	0x00000000
 8003174:	40d38800 	.word	0x40d38800

08003178 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800317c:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <MX_SPI1_Init+0x64>)
 800317e:	4a18      	ldr	r2, [pc, #96]	@ (80031e0 <MX_SPI1_Init+0x68>)
 8003180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003182:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <MX_SPI1_Init+0x64>)
 8003184:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800318a:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <MX_SPI1_Init+0x64>)
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003190:	4b12      	ldr	r3, [pc, #72]	@ (80031dc <MX_SPI1_Init+0x64>)
 8003192:	2200      	movs	r2, #0
 8003194:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003196:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <MX_SPI1_Init+0x64>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800319c:	4b0f      	ldr	r3, [pc, #60]	@ (80031dc <MX_SPI1_Init+0x64>)
 800319e:	2200      	movs	r2, #0
 80031a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031a2:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <MX_SPI1_Init+0x64>)
 80031a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031aa:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <MX_SPI1_Init+0x64>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031b0:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <MX_SPI1_Init+0x64>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031b6:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <MX_SPI1_Init+0x64>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031bc:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <MX_SPI1_Init+0x64>)
 80031be:	2200      	movs	r2, #0
 80031c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <MX_SPI1_Init+0x64>)
 80031c4:	220a      	movs	r2, #10
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031c8:	4804      	ldr	r0, [pc, #16]	@ (80031dc <MX_SPI1_Init+0x64>)
 80031ca:	f002 f8f1 	bl	80053b0 <HAL_SPI_Init>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031d4:	f7ff f996 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000ce0 	.word	0x20000ce0
 80031e0:	40013000 	.word	0x40013000

080031e4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80031e8:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <MX_SPI2_Init+0x64>)
 80031ea:	4a18      	ldr	r2, [pc, #96]	@ (800324c <MX_SPI2_Init+0x68>)
 80031ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <MX_SPI2_Init+0x64>)
 80031f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031f6:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <MX_SPI2_Init+0x64>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031fc:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <MX_SPI2_Init+0x64>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003202:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003208:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <MX_SPI2_Init+0x64>)
 800320a:	2200      	movs	r2, #0
 800320c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800320e:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003214:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003218:	2200      	movs	r2, #0
 800321a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <MX_SPI2_Init+0x64>)
 800321e:	2200      	movs	r2, #0
 8003220:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003224:	2200      	movs	r2, #0
 8003226:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003228:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <MX_SPI2_Init+0x64>)
 800322a:	2200      	movs	r2, #0
 800322c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003230:	220a      	movs	r2, #10
 8003232:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	@ (8003248 <MX_SPI2_Init+0x64>)
 8003236:	f002 f8bb 	bl	80053b0 <HAL_SPI_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003240:	f7ff f960 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000d38 	.word	0x20000d38
 800324c:	40003800 	.word	0x40003800

08003250 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003254:	4b17      	ldr	r3, [pc, #92]	@ (80032b4 <MX_SPI3_Init+0x64>)
 8003256:	4a18      	ldr	r2, [pc, #96]	@ (80032b8 <MX_SPI3_Init+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800325a:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <MX_SPI3_Init+0x64>)
 800325c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003260:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003262:	4b14      	ldr	r3, [pc, #80]	@ (80032b4 <MX_SPI3_Init+0x64>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003268:	4b12      	ldr	r3, [pc, #72]	@ (80032b4 <MX_SPI3_Init+0x64>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800326e:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <MX_SPI3_Init+0x64>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003274:	4b0f      	ldr	r3, [pc, #60]	@ (80032b4 <MX_SPI3_Init+0x64>)
 8003276:	2200      	movs	r2, #0
 8003278:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800327a:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <MX_SPI3_Init+0x64>)
 800327c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003280:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003282:	4b0c      	ldr	r3, [pc, #48]	@ (80032b4 <MX_SPI3_Init+0x64>)
 8003284:	2200      	movs	r2, #0
 8003286:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003288:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <MX_SPI3_Init+0x64>)
 800328a:	2200      	movs	r2, #0
 800328c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800328e:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <MX_SPI3_Init+0x64>)
 8003290:	2200      	movs	r2, #0
 8003292:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003294:	4b07      	ldr	r3, [pc, #28]	@ (80032b4 <MX_SPI3_Init+0x64>)
 8003296:	2200      	movs	r2, #0
 8003298:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <MX_SPI3_Init+0x64>)
 800329c:	220a      	movs	r2, #10
 800329e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80032a0:	4804      	ldr	r0, [pc, #16]	@ (80032b4 <MX_SPI3_Init+0x64>)
 80032a2:	f002 f885 	bl	80053b0 <HAL_SPI_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80032ac:	f7ff f92a 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000d90 	.word	0x20000d90
 80032b8:	40003c00 	.word	0x40003c00

080032bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08e      	sub	sp, #56	@ 0x38
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a71      	ldr	r2, [pc, #452]	@ (80034a0 <HAL_SPI_MspInit+0x1e4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d12c      	bne.n	8003338 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	4b70      	ldr	r3, [pc, #448]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	4a6f      	ldr	r2, [pc, #444]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 80032e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ee:	4b6d      	ldr	r3, [pc, #436]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032f6:	623b      	str	r3, [r7, #32]
 80032f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	4b69      	ldr	r3, [pc, #420]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	4a68      	ldr	r2, [pc, #416]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6313      	str	r3, [r2, #48]	@ 0x30
 800330a:	4b66      	ldr	r3, [pc, #408]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003316:	23e0      	movs	r3, #224	@ 0xe0
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331a:	2302      	movs	r3, #2
 800331c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003326:	2305      	movs	r3, #5
 8003328:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800332e:	4619      	mov	r1, r3
 8003330:	485d      	ldr	r0, [pc, #372]	@ (80034a8 <HAL_SPI_MspInit+0x1ec>)
 8003332:	f001 f8fd 	bl	8004530 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003336:	e0af      	b.n	8003498 <HAL_SPI_MspInit+0x1dc>
  else if(spiHandle->Instance==SPI2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a5b      	ldr	r2, [pc, #364]	@ (80034ac <HAL_SPI_MspInit+0x1f0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d178      	bne.n	8003434 <HAL_SPI_MspInit+0x178>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	4b57      	ldr	r3, [pc, #348]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	4a56      	ldr	r2, [pc, #344]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003350:	6413      	str	r3, [r2, #64]	@ 0x40
 8003352:	4b54      	ldr	r3, [pc, #336]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	4b50      	ldr	r3, [pc, #320]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a4f      	ldr	r2, [pc, #316]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b4d      	ldr	r3, [pc, #308]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	4b49      	ldr	r3, [pc, #292]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a48      	ldr	r2, [pc, #288]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b46      	ldr	r3, [pc, #280]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003396:	2308      	movs	r3, #8
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a2:	2303      	movs	r3, #3
 80033a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033a6:	2305      	movs	r3, #5
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ae:	4619      	mov	r1, r3
 80033b0:	483f      	ldr	r0, [pc, #252]	@ (80034b0 <HAL_SPI_MspInit+0x1f4>)
 80033b2:	f001 f8bd 	bl	8004530 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80033b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c4:	2303      	movs	r3, #3
 80033c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033c8:	2305      	movs	r3, #5
 80033ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d0:	4619      	mov	r1, r3
 80033d2:	4838      	ldr	r0, [pc, #224]	@ (80034b4 <HAL_SPI_MspInit+0x1f8>)
 80033d4:	f001 f8ac 	bl	8004530 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80033d8:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 80033da:	4a38      	ldr	r2, [pc, #224]	@ (80034bc <HAL_SPI_MspInit+0x200>)
 80033dc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80033de:	4b36      	ldr	r3, [pc, #216]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033e4:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 80033e6:	2240      	movs	r2, #64	@ 0x40
 80033e8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ea:	4b33      	ldr	r3, [pc, #204]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033f0:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 80033f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033f6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033f8:	4b2f      	ldr	r3, [pc, #188]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033fe:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003404:	4b2c      	ldr	r3, [pc, #176]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800340a:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 800340c:	2200      	movs	r2, #0
 800340e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003410:	4b29      	ldr	r3, [pc, #164]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 8003412:	2200      	movs	r2, #0
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003416:	4828      	ldr	r0, [pc, #160]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 8003418:	f000 fd1a 	bl	8003e50 <HAL_DMA_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 8003422:	f7ff f86f 	bl	8002504 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a23      	ldr	r2, [pc, #140]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 800342a:	649a      	str	r2, [r3, #72]	@ 0x48
 800342c:	4a22      	ldr	r2, [pc, #136]	@ (80034b8 <HAL_SPI_MspInit+0x1fc>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003432:	e031      	b.n	8003498 <HAL_SPI_MspInit+0x1dc>
  else if(spiHandle->Instance==SPI3)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a21      	ldr	r2, [pc, #132]	@ (80034c0 <HAL_SPI_MspInit+0x204>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d12c      	bne.n	8003498 <HAL_SPI_MspInit+0x1dc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	4b18      	ldr	r3, [pc, #96]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800344c:	6413      	str	r3, [r2, #64]	@ 0x40
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	4a10      	ldr	r2, [pc, #64]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	6313      	str	r3, [r2, #48]	@ 0x30
 800346a:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <HAL_SPI_MspInit+0x1e8>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003476:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003484:	2303      	movs	r3, #3
 8003486:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003488:	2306      	movs	r3, #6
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800348c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003490:	4619      	mov	r1, r3
 8003492:	4807      	ldr	r0, [pc, #28]	@ (80034b0 <HAL_SPI_MspInit+0x1f4>)
 8003494:	f001 f84c 	bl	8004530 <HAL_GPIO_Init>
}
 8003498:	bf00      	nop
 800349a:	3738      	adds	r7, #56	@ 0x38
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40013000 	.word	0x40013000
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020000 	.word	0x40020000
 80034ac:	40003800 	.word	0x40003800
 80034b0:	40020800 	.word	0x40020800
 80034b4:	40020400 	.word	0x40020400
 80034b8:	20000de8 	.word	0x20000de8
 80034bc:	40026070 	.word	0x40026070
 80034c0:	40003c00 	.word	0x40003c00

080034c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <HAL_MspInit+0x4c>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003510 <HAL_MspInit+0x4c>)
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034da:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_MspInit+0x4c>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4b09      	ldr	r3, [pc, #36]	@ (8003510 <HAL_MspInit+0x4c>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	4a08      	ldr	r2, [pc, #32]	@ (8003510 <HAL_MspInit+0x4c>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <HAL_MspInit+0x4c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800

08003514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <NMI_Handler+0x4>

0800351c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003520:	bf00      	nop
 8003522:	e7fd      	b.n	8003520 <HardFault_Handler+0x4>

08003524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003528:	bf00      	nop
 800352a:	e7fd      	b.n	8003528 <MemManage_Handler+0x4>

0800352c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <BusFault_Handler+0x4>

08003534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <UsageFault_Handler+0x4>

0800353c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800356a:	f000 fb1b 	bl	8003ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}

08003572 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_BTN_Pin);
 8003576:	2002      	movs	r0, #2
 8003578:	f001 f9a0 	bl	80048bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}

08003580 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CONFIRM_BTN_Pin);
 8003584:	2004      	movs	r0, #4
 8003586:	f001 f999 	bl	80048bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003594:	4802      	ldr	r0, [pc, #8]	@ (80035a0 <DMA1_Stream4_IRQHandler+0x10>)
 8003596:	f000 fd61 	bl	800405c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000de8 	.word	0x20000de8

080035a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035a8:	4802      	ldr	r0, [pc, #8]	@ (80035b4 <TIM3_IRQHandler+0x10>)
 80035aa:	f002 fdf2 	bl	8006192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000e94 	.word	0x20000e94

080035b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035bc:	4802      	ldr	r0, [pc, #8]	@ (80035c8 <TIM4_IRQHandler+0x10>)
 80035be:	f002 fde8 	bl	8006192 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000edc 	.word	0x20000edc

080035cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return 1;
 80035d0:	2301      	movs	r3, #1
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <_kill>:

int _kill(int pid, int sig)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035e6:	f008 fb41 	bl	800bc6c <__errno>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2216      	movs	r2, #22
 80035ee:	601a      	str	r2, [r3, #0]
  return -1;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_exit>:

void _exit (int status)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003604:	f04f 31ff 	mov.w	r1, #4294967295
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff ffe7 	bl	80035dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800360e:	bf00      	nop
 8003610:	e7fd      	b.n	800360e <_exit+0x12>

08003612 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e00a      	b.n	800363a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003624:	f7ff fa52 	bl	8002acc <__io_getchar>
 8003628:	4601      	mov	r1, r0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	60ba      	str	r2, [r7, #8]
 8003630:	b2ca      	uxtb	r2, r1
 8003632:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3301      	adds	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	dbf0      	blt.n	8003624 <_read+0x12>
  }

  return len;
 8003642:	687b      	ldr	r3, [r7, #4]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <_close>:
  }
  return len;
}

int _close(int file)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003674:	605a      	str	r2, [r3, #4]
  return 0;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_isatty>:

int _isatty(int file)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800368c:	2301      	movs	r3, #1
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036bc:	4a14      	ldr	r2, [pc, #80]	@ (8003710 <_sbrk+0x5c>)
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <_sbrk+0x60>)
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036c8:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <_sbrk+0x64>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d0:	4b11      	ldr	r3, [pc, #68]	@ (8003718 <_sbrk+0x64>)
 80036d2:	4a12      	ldr	r2, [pc, #72]	@ (800371c <_sbrk+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036d6:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <_sbrk+0x64>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d207      	bcs.n	80036f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e4:	f008 fac2 	bl	800bc6c <__errno>
 80036e8:	4603      	mov	r3, r0
 80036ea:	220c      	movs	r2, #12
 80036ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	e009      	b.n	8003708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f4:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <_sbrk+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036fa:	4b07      	ldr	r3, [pc, #28]	@ (8003718 <_sbrk+0x64>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <_sbrk+0x64>)
 8003704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20020000 	.word	0x20020000
 8003714:	00000400 	.word	0x00000400
 8003718:	20000e48 	.word	0x20000e48
 800371c:	20001108 	.word	0x20001108

08003720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003724:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <SystemInit+0x20>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	4a05      	ldr	r2, [pc, #20]	@ (8003740 <SystemInit+0x20>)
 800372c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003758:	463b      	mov	r3, r7
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003760:	4b1d      	ldr	r3, [pc, #116]	@ (80037d8 <MX_TIM2_Init+0x94>)
 8003762:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8003768:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <MX_TIM2_Init+0x94>)
 800376a:	2207      	movs	r2, #7
 800376c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800376e:	4b1a      	ldr	r3, [pc, #104]	@ (80037d8 <MX_TIM2_Init+0x94>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003774:	4b18      	ldr	r3, [pc, #96]	@ (80037d8 <MX_TIM2_Init+0x94>)
 8003776:	f04f 32ff 	mov.w	r2, #4294967295
 800377a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800377c:	4b16      	ldr	r3, [pc, #88]	@ (80037d8 <MX_TIM2_Init+0x94>)
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <MX_TIM2_Init+0x94>)
 8003784:	2200      	movs	r2, #0
 8003786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003788:	4813      	ldr	r0, [pc, #76]	@ (80037d8 <MX_TIM2_Init+0x94>)
 800378a:	f002 fbab 	bl	8005ee4 <HAL_TIM_Base_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003794:	f7fe feb6 	bl	8002504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800379c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800379e:	f107 0308 	add.w	r3, r7, #8
 80037a2:	4619      	mov	r1, r3
 80037a4:	480c      	ldr	r0, [pc, #48]	@ (80037d8 <MX_TIM2_Init+0x94>)
 80037a6:	f002 fde4 	bl	8006372 <HAL_TIM_ConfigClockSource>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80037b0:	f7fe fea8 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b4:	2300      	movs	r3, #0
 80037b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037bc:	463b      	mov	r3, r7
 80037be:	4619      	mov	r1, r3
 80037c0:	4805      	ldr	r0, [pc, #20]	@ (80037d8 <MX_TIM2_Init+0x94>)
 80037c2:	f003 f80b 	bl	80067dc <HAL_TIMEx_MasterConfigSynchronization>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80037cc:	f7fe fe9a 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037d0:	bf00      	nop
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000e4c 	.word	0x20000e4c

080037dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037e2:	f107 0308 	add.w	r3, r7, #8
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	609a      	str	r2, [r3, #8]
 80037ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f0:	463b      	mov	r3, r7
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003870 <MX_TIM3_Init+0x94>)
 80037fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003874 <MX_TIM3_Init+0x98>)
 80037fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 80037fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003870 <MX_TIM3_Init+0x94>)
 8003800:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8003804:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003806:	4b1a      	ldr	r3, [pc, #104]	@ (8003870 <MX_TIM3_Init+0x94>)
 8003808:	2200      	movs	r2, #0
 800380a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19000 - 1;
 800380c:	4b18      	ldr	r3, [pc, #96]	@ (8003870 <MX_TIM3_Init+0x94>)
 800380e:	f644 2237 	movw	r2, #18999	@ 0x4a37
 8003812:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003814:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <MX_TIM3_Init+0x94>)
 8003816:	2200      	movs	r2, #0
 8003818:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800381a:	4b15      	ldr	r3, [pc, #84]	@ (8003870 <MX_TIM3_Init+0x94>)
 800381c:	2200      	movs	r2, #0
 800381e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003820:	4813      	ldr	r0, [pc, #76]	@ (8003870 <MX_TIM3_Init+0x94>)
 8003822:	f002 fb5f 	bl	8005ee4 <HAL_TIM_Base_Init>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800382c:	f7fe fe6a 	bl	8002504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	4619      	mov	r1, r3
 800383c:	480c      	ldr	r0, [pc, #48]	@ (8003870 <MX_TIM3_Init+0x94>)
 800383e:	f002 fd98 	bl	8006372 <HAL_TIM_ConfigClockSource>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003848:	f7fe fe5c 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800384c:	2300      	movs	r3, #0
 800384e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003850:	2300      	movs	r3, #0
 8003852:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003854:	463b      	mov	r3, r7
 8003856:	4619      	mov	r1, r3
 8003858:	4805      	ldr	r0, [pc, #20]	@ (8003870 <MX_TIM3_Init+0x94>)
 800385a:	f002 ffbf 	bl	80067dc <HAL_TIMEx_MasterConfigSynchronization>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003864:	f7fe fe4e 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003868:	bf00      	nop
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000e94 	.word	0x20000e94
 8003874:	40000400 	.word	0x40000400

08003878 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800388c:	463b      	mov	r3, r7
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003894:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <MX_TIM4_Init+0x94>)
 8003896:	4a1e      	ldr	r2, [pc, #120]	@ (8003910 <MX_TIM4_Init+0x98>)
 8003898:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6400 - 1;
 800389a:	4b1c      	ldr	r3, [pc, #112]	@ (800390c <MX_TIM4_Init+0x94>)
 800389c:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80038a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <MX_TIM4_Init+0x94>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1135 - 1;
 80038a8:	4b18      	ldr	r3, [pc, #96]	@ (800390c <MX_TIM4_Init+0x94>)
 80038aa:	f240 426e 	movw	r2, #1134	@ 0x46e
 80038ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b0:	4b16      	ldr	r3, [pc, #88]	@ (800390c <MX_TIM4_Init+0x94>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b6:	4b15      	ldr	r3, [pc, #84]	@ (800390c <MX_TIM4_Init+0x94>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80038bc:	4813      	ldr	r0, [pc, #76]	@ (800390c <MX_TIM4_Init+0x94>)
 80038be:	f002 fb11 	bl	8005ee4 <HAL_TIM_Base_Init>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80038c8:	f7fe fe1c 	bl	8002504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80038d2:	f107 0308 	add.w	r3, r7, #8
 80038d6:	4619      	mov	r1, r3
 80038d8:	480c      	ldr	r0, [pc, #48]	@ (800390c <MX_TIM4_Init+0x94>)
 80038da:	f002 fd4a 	bl	8006372 <HAL_TIM_ConfigClockSource>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80038e4:	f7fe fe0e 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e8:	2300      	movs	r3, #0
 80038ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038f0:	463b      	mov	r3, r7
 80038f2:	4619      	mov	r1, r3
 80038f4:	4805      	ldr	r0, [pc, #20]	@ (800390c <MX_TIM4_Init+0x94>)
 80038f6:	f002 ff71 	bl	80067dc <HAL_TIMEx_MasterConfigSynchronization>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003900:	f7fe fe00 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003904:	bf00      	nop
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000edc 	.word	0x20000edc
 8003910:	40000800 	.word	0x40000800

08003914 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	4b24      	ldr	r3, [pc, #144]	@ (80039bc <HAL_TIM_Base_MspInit+0xa8>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	4a23      	ldr	r2, [pc, #140]	@ (80039bc <HAL_TIM_Base_MspInit+0xa8>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6413      	str	r3, [r2, #64]	@ 0x40
 8003936:	4b21      	ldr	r3, [pc, #132]	@ (80039bc <HAL_TIM_Base_MspInit+0xa8>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003942:	e036      	b.n	80039b2 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1d      	ldr	r2, [pc, #116]	@ (80039c0 <HAL_TIM_Base_MspInit+0xac>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d116      	bne.n	800397c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <HAL_TIM_Base_MspInit+0xa8>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	4a19      	ldr	r2, [pc, #100]	@ (80039bc <HAL_TIM_Base_MspInit+0xa8>)
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	6413      	str	r3, [r2, #64]	@ 0x40
 800395e:	4b17      	ldr	r3, [pc, #92]	@ (80039bc <HAL_TIM_Base_MspInit+0xa8>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2100      	movs	r1, #0
 800396e:	201d      	movs	r0, #29
 8003970:	f000 fa37 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003974:	201d      	movs	r0, #29
 8003976:	f000 fa50 	bl	8003e1a <HAL_NVIC_EnableIRQ>
}
 800397a:	e01a      	b.n	80039b2 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a10      	ldr	r2, [pc, #64]	@ (80039c4 <HAL_TIM_Base_MspInit+0xb0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d115      	bne.n	80039b2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <HAL_TIM_Base_MspInit+0xa8>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	4a0b      	ldr	r2, [pc, #44]	@ (80039bc <HAL_TIM_Base_MspInit+0xa8>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	6413      	str	r3, [r2, #64]	@ 0x40
 8003996:	4b09      	ldr	r3, [pc, #36]	@ (80039bc <HAL_TIM_Base_MspInit+0xa8>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	201e      	movs	r0, #30
 80039a8:	f000 fa1b 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039ac:	201e      	movs	r0, #30
 80039ae:	f000 fa34 	bl	8003e1a <HAL_NVIC_EnableIRQ>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800

080039c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <MX_USART2_UART_Init+0x4c>)
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <MX_USART2_UART_Init+0x50>)
 80039d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039d2:	4b10      	ldr	r3, [pc, #64]	@ (8003a14 <MX_USART2_UART_Init+0x4c>)
 80039d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039da:	4b0e      	ldr	r3, [pc, #56]	@ (8003a14 <MX_USART2_UART_Init+0x4c>)
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <MX_USART2_UART_Init+0x4c>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <MX_USART2_UART_Init+0x4c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039ec:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <MX_USART2_UART_Init+0x4c>)
 80039ee:	220c      	movs	r2, #12
 80039f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <MX_USART2_UART_Init+0x4c>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f8:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <MX_USART2_UART_Init+0x4c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039fe:	4805      	ldr	r0, [pc, #20]	@ (8003a14 <MX_USART2_UART_Init+0x4c>)
 8003a00:	f002 ff7c 	bl	80068fc <HAL_UART_Init>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a0a:	f7fe fd7b 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000f24 	.word	0x20000f24
 8003a18:	40004400 	.word	0x40004400

08003a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a19      	ldr	r2, [pc, #100]	@ (8003aa0 <HAL_UART_MspInit+0x84>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d12b      	bne.n	8003a96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <HAL_UART_MspInit+0x88>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <HAL_UART_MspInit+0x88>)
 8003a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <HAL_UART_MspInit+0x88>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <HAL_UART_MspInit+0x88>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	4a10      	ldr	r2, [pc, #64]	@ (8003aa4 <HAL_UART_MspInit+0x88>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa4 <HAL_UART_MspInit+0x88>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a76:	230c      	movs	r3, #12
 8003a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a86:	2307      	movs	r3, #7
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4805      	ldr	r0, [pc, #20]	@ (8003aa8 <HAL_UART_MspInit+0x8c>)
 8003a92:	f000 fd4d 	bl	8004530 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a96:	bf00      	nop
 8003a98:	3728      	adds	r7, #40	@ 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40004400 	.word	0x40004400
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40020000 	.word	0x40020000

08003aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ae4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ab0:	f7ff fe36 	bl	8003720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ab4:	480c      	ldr	r0, [pc, #48]	@ (8003ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ab6:	490d      	ldr	r1, [pc, #52]	@ (8003aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003abc:	e002      	b.n	8003ac4 <LoopCopyDataInit>

08003abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac2:	3304      	adds	r3, #4

08003ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac8:	d3f9      	bcc.n	8003abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aca:	4a0a      	ldr	r2, [pc, #40]	@ (8003af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003acc:	4c0a      	ldr	r4, [pc, #40]	@ (8003af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad0:	e001      	b.n	8003ad6 <LoopFillZerobss>

08003ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad4:	3204      	adds	r2, #4

08003ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad8:	d3fb      	bcc.n	8003ad2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003ada:	f008 f8cd 	bl	800bc78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ade:	f7fe fc2b 	bl	8002338 <main>
  bx  lr    
 8003ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aec:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003af0:	08010e9c 	.word	0x08010e9c
  ldr r2, =_sbss
 8003af4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003af8:	20001104 	.word	0x20001104

08003afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003afc:	e7fe      	b.n	8003afc <ADC_IRQHandler>
	...

08003b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b04:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <HAL_Init+0x40>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <HAL_Init+0x40>)
 8003b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b10:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <HAL_Init+0x40>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a0a      	ldr	r2, [pc, #40]	@ (8003b40 <HAL_Init+0x40>)
 8003b16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <HAL_Init+0x40>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a07      	ldr	r2, [pc, #28]	@ (8003b40 <HAL_Init+0x40>)
 8003b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b28:	2003      	movs	r0, #3
 8003b2a:	f000 f94f 	bl	8003dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b2e:	200f      	movs	r0, #15
 8003b30:	f000 f808 	bl	8003b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b34:	f7ff fcc6 	bl	80034c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023c00 	.word	0x40023c00

08003b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b4c:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_InitTick+0x54>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_InitTick+0x58>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	4619      	mov	r1, r3
 8003b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f967 	bl	8003e36 <HAL_SYSTICK_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e00e      	b.n	8003b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b0f      	cmp	r3, #15
 8003b76:	d80a      	bhi.n	8003b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b80:	f000 f92f 	bl	8003de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b84:	4a06      	ldr	r2, [pc, #24]	@ (8003ba0 <HAL_InitTick+0x5c>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	2000000c 	.word	0x2000000c
 8003b9c:	20000014 	.word	0x20000014
 8003ba0:	20000010 	.word	0x20000010

08003ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <HAL_IncTick+0x20>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_IncTick+0x24>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	4a04      	ldr	r2, [pc, #16]	@ (8003bc8 <HAL_IncTick+0x24>)
 8003bb6:	6013      	str	r3, [r2, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000014 	.word	0x20000014
 8003bc8:	20000f6c 	.word	0x20000f6c

08003bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <HAL_GetTick+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000f6c 	.word	0x20000f6c

08003be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bec:	f7ff ffee 	bl	8003bcc <HAL_GetTick>
 8003bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d005      	beq.n	8003c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <HAL_Delay+0x44>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c0a:	bf00      	nop
 8003c0c:	f7ff ffde 	bl	8003bcc <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d8f7      	bhi.n	8003c0c <HAL_Delay+0x28>
  {
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000014 	.word	0x20000014

08003c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5e:	4a04      	ldr	r2, [pc, #16]	@ (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	60d3      	str	r3, [r2, #12]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c78:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <__NVIC_GetPriorityGrouping+0x18>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 0307 	and.w	r3, r3, #7
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	db0b      	blt.n	8003cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	4907      	ldr	r1, [pc, #28]	@ (8003cc8 <__NVIC_EnableIRQ+0x38>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000e100 	.word	0xe000e100

08003ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	db0a      	blt.n	8003cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	490c      	ldr	r1, [pc, #48]	@ (8003d18 <__NVIC_SetPriority+0x4c>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	0112      	lsls	r2, r2, #4
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	440b      	add	r3, r1
 8003cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf4:	e00a      	b.n	8003d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4908      	ldr	r1, [pc, #32]	@ (8003d1c <__NVIC_SetPriority+0x50>)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	3b04      	subs	r3, #4
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	440b      	add	r3, r1
 8003d0a:	761a      	strb	r2, [r3, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000e100 	.word	0xe000e100
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b089      	sub	sp, #36	@ 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f1c3 0307 	rsb	r3, r3, #7
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	bf28      	it	cs
 8003d3e:	2304      	movcs	r3, #4
 8003d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3304      	adds	r3, #4
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d902      	bls.n	8003d50 <NVIC_EncodePriority+0x30>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3b03      	subs	r3, #3
 8003d4e:	e000      	b.n	8003d52 <NVIC_EncodePriority+0x32>
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	401a      	ands	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d68:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	43d9      	mvns	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	4313      	orrs	r3, r2
         );
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3724      	adds	r7, #36	@ 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d98:	d301      	bcc.n	8003d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e00f      	b.n	8003dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc8 <SysTick_Config+0x40>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da6:	210f      	movs	r1, #15
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	f7ff ff8e 	bl	8003ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db0:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <SysTick_Config+0x40>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db6:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <SysTick_Config+0x40>)
 8003db8:	2207      	movs	r2, #7
 8003dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	e000e010 	.word	0xe000e010

08003dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff29 	bl	8003c2c <__NVIC_SetPriorityGrouping>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df4:	f7ff ff3e 	bl	8003c74 <__NVIC_GetPriorityGrouping>
 8003df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff ff8e 	bl	8003d20 <NVIC_EncodePriority>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff5d 	bl	8003ccc <__NVIC_SetPriority>
}
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff31 	bl	8003c90 <__NVIC_EnableIRQ>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ffa2 	bl	8003d88 <SysTick_Config>
 8003e44:	4603      	mov	r3, r0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e5c:	f7ff feb6 	bl	8003bcc <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e099      	b.n	8003fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8c:	e00f      	b.n	8003eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e8e:	f7ff fe9d 	bl	8003bcc <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d908      	bls.n	8003eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e078      	b.n	8003fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e8      	bne.n	8003e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4b38      	ldr	r3, [pc, #224]	@ (8003fa8 <HAL_DMA_Init+0x158>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d107      	bne.n	8003f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	4313      	orrs	r3, r2
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d117      	bne.n	8003f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fa6f 	bl	8004438 <DMA_CheckFifoParam>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2240      	movs	r2, #64	@ 0x40
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e016      	b.n	8003fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa26 	bl	80043cc <DMA_CalcBaseAndBitshift>
 8003f80:	4603      	mov	r3, r0
 8003f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	223f      	movs	r2, #63	@ 0x3f
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	f010803f 	.word	0xf010803f

08003fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_DMA_Start_IT+0x26>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e040      	b.n	8004054 <HAL_DMA_Start_IT+0xa8>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d12f      	bne.n	8004046 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f9b8 	bl	8004370 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	223f      	movs	r2, #63	@ 0x3f
 8004006:	409a      	lsls	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0216 	orr.w	r2, r2, #22
 800401a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0208 	orr.w	r2, r2, #8
 8004032:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e005      	b.n	8004052 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800404e:	2302      	movs	r3, #2
 8004050:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004052:	7dfb      	ldrb	r3, [r7, #23]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004068:	4b8e      	ldr	r3, [pc, #568]	@ (80042a4 <HAL_DMA_IRQHandler+0x248>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a8e      	ldr	r2, [pc, #568]	@ (80042a8 <HAL_DMA_IRQHandler+0x24c>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0a9b      	lsrs	r3, r3, #10
 8004074:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004086:	2208      	movs	r2, #8
 8004088:	409a      	lsls	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01a      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0204 	bic.w	r2, r2, #4
 80040ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b4:	2208      	movs	r2, #8
 80040b6:	409a      	lsls	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	2201      	movs	r2, #1
 80040ce:	409a      	lsls	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d012      	beq.n	80040fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ea:	2201      	movs	r2, #1
 80040ec:	409a      	lsls	r2, r3
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f6:	f043 0202 	orr.w	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004102:	2204      	movs	r2, #4
 8004104:	409a      	lsls	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d012      	beq.n	8004134 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00b      	beq.n	8004134 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004120:	2204      	movs	r2, #4
 8004122:	409a      	lsls	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412c:	f043 0204 	orr.w	r2, r3, #4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004138:	2210      	movs	r2, #16
 800413a:	409a      	lsls	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d043      	beq.n	80041cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d03c      	beq.n	80041cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004156:	2210      	movs	r2, #16
 8004158:	409a      	lsls	r2, r3
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d018      	beq.n	800419e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d108      	bne.n	800418c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d024      	beq.n	80041cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4798      	blx	r3
 800418a:	e01f      	b.n	80041cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
 800419c:	e016      	b.n	80041cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d107      	bne.n	80041bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0208 	bic.w	r2, r2, #8
 80041ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d0:	2220      	movs	r2, #32
 80041d2:	409a      	lsls	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 808f 	beq.w	80042fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8087 	beq.w	80042fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f2:	2220      	movs	r2, #32
 80041f4:	409a      	lsls	r2, r3
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b05      	cmp	r3, #5
 8004204:	d136      	bne.n	8004274 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0216 	bic.w	r2, r2, #22
 8004214:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004224:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <HAL_DMA_IRQHandler+0x1da>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0208 	bic.w	r2, r2, #8
 8004244:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424a:	223f      	movs	r2, #63	@ 0x3f
 800424c:	409a      	lsls	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004266:	2b00      	cmp	r3, #0
 8004268:	d07e      	beq.n	8004368 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
        }
        return;
 8004272:	e079      	b.n	8004368 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01d      	beq.n	80042be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10d      	bne.n	80042ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004294:	2b00      	cmp	r3, #0
 8004296:	d031      	beq.n	80042fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
 80042a0:	e02c      	b.n	80042fc <HAL_DMA_IRQHandler+0x2a0>
 80042a2:	bf00      	nop
 80042a4:	2000000c 	.word	0x2000000c
 80042a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d023      	beq.n	80042fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4798      	blx	r3
 80042bc:	e01e      	b.n	80042fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10f      	bne.n	80042ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0210 	bic.w	r2, r2, #16
 80042da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004300:	2b00      	cmp	r3, #0
 8004302:	d032      	beq.n	800436a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d022      	beq.n	8004356 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2205      	movs	r2, #5
 8004314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	3301      	adds	r3, #1
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	d307      	bcc.n	8004344 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f2      	bne.n	8004328 <HAL_DMA_IRQHandler+0x2cc>
 8004342:	e000      	b.n	8004346 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004344:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
 8004366:	e000      	b.n	800436a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004368:	bf00      	nop
    }
  }
}
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800438c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b40      	cmp	r3, #64	@ 0x40
 800439c:	d108      	bne.n	80043b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043ae:	e007      	b.n	80043c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	3b10      	subs	r3, #16
 80043dc:	4a14      	ldr	r2, [pc, #80]	@ (8004430 <DMA_CalcBaseAndBitshift+0x64>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	091b      	lsrs	r3, r3, #4
 80043e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043e6:	4a13      	ldr	r2, [pc, #76]	@ (8004434 <DMA_CalcBaseAndBitshift+0x68>)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d909      	bls.n	800440e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004402:	f023 0303 	bic.w	r3, r3, #3
 8004406:	1d1a      	adds	r2, r3, #4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	659a      	str	r2, [r3, #88]	@ 0x58
 800440c:	e007      	b.n	800441e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004416:	f023 0303 	bic.w	r3, r3, #3
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	aaaaaaab 	.word	0xaaaaaaab
 8004434:	0801097c 	.word	0x0801097c

08004438 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d11f      	bne.n	8004492 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d856      	bhi.n	8004506 <DMA_CheckFifoParam+0xce>
 8004458:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <DMA_CheckFifoParam+0x28>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004471 	.word	0x08004471
 8004464:	08004483 	.word	0x08004483
 8004468:	08004471 	.word	0x08004471
 800446c:	08004507 	.word	0x08004507
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d046      	beq.n	800450a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004480:	e043      	b.n	800450a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800448a:	d140      	bne.n	800450e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004490:	e03d      	b.n	800450e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800449a:	d121      	bne.n	80044e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d837      	bhi.n	8004512 <DMA_CheckFifoParam+0xda>
 80044a2:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <DMA_CheckFifoParam+0x70>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044bf 	.word	0x080044bf
 80044b0:	080044b9 	.word	0x080044b9
 80044b4:	080044d1 	.word	0x080044d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      break;
 80044bc:	e030      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d025      	beq.n	8004516 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ce:	e022      	b.n	8004516 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044d8:	d11f      	bne.n	800451a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044de:	e01c      	b.n	800451a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d903      	bls.n	80044ee <DMA_CheckFifoParam+0xb6>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d003      	beq.n	80044f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044ec:	e018      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
      break;
 80044f2:	e015      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00e      	beq.n	800451e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
      break;
 8004504:	e00b      	b.n	800451e <DMA_CheckFifoParam+0xe6>
      break;
 8004506:	bf00      	nop
 8004508:	e00a      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
      break;
 800450a:	bf00      	nop
 800450c:	e008      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
      break;
 800450e:	bf00      	nop
 8004510:	e006      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
      break;
 8004512:	bf00      	nop
 8004514:	e004      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
      break;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
      break;   
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
      break;
 800451e:	bf00      	nop
    }
  } 
  
  return status; 
 8004520:	7bfb      	ldrb	r3, [r7, #15]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop

08004530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004530:	b480      	push	{r7}
 8004532:	b089      	sub	sp, #36	@ 0x24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e165      	b.n	8004818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800454c:	2201      	movs	r2, #1
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	429a      	cmp	r2, r3
 8004566:	f040 8154 	bne.w	8004812 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d005      	beq.n	8004582 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800457e:	2b02      	cmp	r3, #2
 8004580:	d130      	bne.n	80045e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	2203      	movs	r2, #3
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045b8:	2201      	movs	r2, #1
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 0201 	and.w	r2, r3, #1
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d017      	beq.n	8004620 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	2203      	movs	r2, #3
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4313      	orrs	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d123      	bne.n	8004674 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	08da      	lsrs	r2, r3, #3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3208      	adds	r2, #8
 8004634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004638:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	220f      	movs	r2, #15
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	43db      	mvns	r3, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4013      	ands	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	08da      	lsrs	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3208      	adds	r2, #8
 800466e:	69b9      	ldr	r1, [r7, #24]
 8004670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	2203      	movs	r2, #3
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	43db      	mvns	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 0203 	and.w	r2, r3, #3
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4313      	orrs	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80ae 	beq.w	8004812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004830 <HAL_GPIO_Init+0x300>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046be:	4a5c      	ldr	r2, [pc, #368]	@ (8004830 <HAL_GPIO_Init+0x300>)
 80046c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004830 <HAL_GPIO_Init+0x300>)
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046d2:	4a58      	ldr	r2, [pc, #352]	@ (8004834 <HAL_GPIO_Init+0x304>)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	3302      	adds	r3, #2
 80046da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	220f      	movs	r2, #15
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4f      	ldr	r2, [pc, #316]	@ (8004838 <HAL_GPIO_Init+0x308>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d025      	beq.n	800474a <HAL_GPIO_Init+0x21a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4e      	ldr	r2, [pc, #312]	@ (800483c <HAL_GPIO_Init+0x30c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d01f      	beq.n	8004746 <HAL_GPIO_Init+0x216>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4d      	ldr	r2, [pc, #308]	@ (8004840 <HAL_GPIO_Init+0x310>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d019      	beq.n	8004742 <HAL_GPIO_Init+0x212>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4c      	ldr	r2, [pc, #304]	@ (8004844 <HAL_GPIO_Init+0x314>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <HAL_GPIO_Init+0x20e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a4b      	ldr	r2, [pc, #300]	@ (8004848 <HAL_GPIO_Init+0x318>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00d      	beq.n	800473a <HAL_GPIO_Init+0x20a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4a      	ldr	r2, [pc, #296]	@ (800484c <HAL_GPIO_Init+0x31c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <HAL_GPIO_Init+0x206>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a49      	ldr	r2, [pc, #292]	@ (8004850 <HAL_GPIO_Init+0x320>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d101      	bne.n	8004732 <HAL_GPIO_Init+0x202>
 800472e:	2306      	movs	r3, #6
 8004730:	e00c      	b.n	800474c <HAL_GPIO_Init+0x21c>
 8004732:	2307      	movs	r3, #7
 8004734:	e00a      	b.n	800474c <HAL_GPIO_Init+0x21c>
 8004736:	2305      	movs	r3, #5
 8004738:	e008      	b.n	800474c <HAL_GPIO_Init+0x21c>
 800473a:	2304      	movs	r3, #4
 800473c:	e006      	b.n	800474c <HAL_GPIO_Init+0x21c>
 800473e:	2303      	movs	r3, #3
 8004740:	e004      	b.n	800474c <HAL_GPIO_Init+0x21c>
 8004742:	2302      	movs	r3, #2
 8004744:	e002      	b.n	800474c <HAL_GPIO_Init+0x21c>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_GPIO_Init+0x21c>
 800474a:	2300      	movs	r3, #0
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	f002 0203 	and.w	r2, r2, #3
 8004752:	0092      	lsls	r2, r2, #2
 8004754:	4093      	lsls	r3, r2
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800475c:	4935      	ldr	r1, [pc, #212]	@ (8004834 <HAL_GPIO_Init+0x304>)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	089b      	lsrs	r3, r3, #2
 8004762:	3302      	adds	r3, #2
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800476a:	4b3a      	ldr	r3, [pc, #232]	@ (8004854 <HAL_GPIO_Init+0x324>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800478e:	4a31      	ldr	r2, [pc, #196]	@ (8004854 <HAL_GPIO_Init+0x324>)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004794:	4b2f      	ldr	r3, [pc, #188]	@ (8004854 <HAL_GPIO_Init+0x324>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047b8:	4a26      	ldr	r2, [pc, #152]	@ (8004854 <HAL_GPIO_Init+0x324>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047be:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <HAL_GPIO_Init+0x324>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004854 <HAL_GPIO_Init+0x324>)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004854 <HAL_GPIO_Init+0x324>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800480c:	4a11      	ldr	r2, [pc, #68]	@ (8004854 <HAL_GPIO_Init+0x324>)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3301      	adds	r3, #1
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	f67f ae96 	bls.w	800454c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	3724      	adds	r7, #36	@ 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	40013800 	.word	0x40013800
 8004838:	40020000 	.word	0x40020000
 800483c:	40020400 	.word	0x40020400
 8004840:	40020800 	.word	0x40020800
 8004844:	40020c00 	.word	0x40020c00
 8004848:	40021000 	.word	0x40021000
 800484c:	40021400 	.word	0x40021400
 8004850:	40021800 	.word	0x40021800
 8004854:	40013c00 	.word	0x40013c00

08004858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	887b      	ldrh	r3, [r7, #2]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
 8004874:	e001      	b.n	800487a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	807b      	strh	r3, [r7, #2]
 8004894:	4613      	mov	r3, r2
 8004896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004898:	787b      	ldrb	r3, [r7, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048a4:	e003      	b.n	80048ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	041a      	lsls	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	619a      	str	r2, [r3, #24]
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048c6:	4b08      	ldr	r3, [pc, #32]	@ (80048e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d006      	beq.n	80048e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048d2:	4a05      	ldr	r2, [pc, #20]	@ (80048e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe f91c 	bl	8002b18 <HAL_GPIO_EXTI_Callback>
  }
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40013c00 	.word	0x40013c00

080048ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0cc      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004900:	4b68      	ldr	r3, [pc, #416]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d90c      	bls.n	8004928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b65      	ldr	r3, [pc, #404]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b63      	ldr	r3, [pc, #396]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0b8      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d020      	beq.n	8004976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004940:	4b59      	ldr	r3, [pc, #356]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	4a58      	ldr	r2, [pc, #352]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800494a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004958:	4b53      	ldr	r3, [pc, #332]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a52      	ldr	r2, [pc, #328]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4b50      	ldr	r3, [pc, #320]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	494d      	ldr	r1, [pc, #308]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d044      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	4b47      	ldr	r3, [pc, #284]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d119      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e07f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049aa:	4b3f      	ldr	r3, [pc, #252]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e06f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ba:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e067      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ca:	4b37      	ldr	r3, [pc, #220]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4934      	ldr	r1, [pc, #208]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049dc:	f7ff f8f6 	bl	8003bcc <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e4:	f7ff f8f2 	bl	8003bcc <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e04f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 020c 	and.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1eb      	bne.n	80049e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a0c:	4b25      	ldr	r3, [pc, #148]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d20c      	bcs.n	8004a34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1a:	4b22      	ldr	r3, [pc, #136]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b20      	ldr	r3, [pc, #128]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e032      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a40:	4b19      	ldr	r3, [pc, #100]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4916      	ldr	r1, [pc, #88]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5e:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	490e      	ldr	r1, [pc, #56]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a72:	f000 f855 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	490a      	ldr	r1, [pc, #40]	@ (8004aac <HAL_RCC_ClockConfig+0x1c0>)
 8004a84:	5ccb      	ldrb	r3, [r1, r3]
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	4a09      	ldr	r2, [pc, #36]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a8e:	4b09      	ldr	r3, [pc, #36]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff f856 	bl	8003b44 <HAL_InitTick>

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023c00 	.word	0x40023c00
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	08010964 	.word	0x08010964
 8004ab0:	2000000c 	.word	0x2000000c
 8004ab4:	20000010 	.word	0x20000010

08004ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004abc:	4b03      	ldr	r3, [pc, #12]	@ (8004acc <HAL_RCC_GetHCLKFreq+0x14>)
 8004abe:	681b      	ldr	r3, [r3, #0]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	2000000c 	.word	0x2000000c

08004ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ad4:	f7ff fff0 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4903      	ldr	r1, [pc, #12]	@ (8004af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	08010974 	.word	0x08010974

08004af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004afc:	f7ff ffdc 	bl	8004ab8 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	0b5b      	lsrs	r3, r3, #13
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4903      	ldr	r1, [pc, #12]	@ (8004b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	08010974 	.word	0x08010974

08004b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b24:	b0a6      	sub	sp, #152	@ 0x98
 8004b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b46:	4bc8      	ldr	r3, [pc, #800]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	f200 817e 	bhi.w	8004e50 <HAL_RCC_GetSysClockFreq+0x330>
 8004b54:	a201      	add	r2, pc, #4	@ (adr r2, 8004b5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b91 	.word	0x08004b91
 8004b60:	08004e51 	.word	0x08004e51
 8004b64:	08004e51 	.word	0x08004e51
 8004b68:	08004e51 	.word	0x08004e51
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004e51 	.word	0x08004e51
 8004b74:	08004e51 	.word	0x08004e51
 8004b78:	08004e51 	.word	0x08004e51
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004e51 	.word	0x08004e51
 8004b84:	08004e51 	.word	0x08004e51
 8004b88:	08004e51 	.word	0x08004e51
 8004b8c:	08004d0b 	.word	0x08004d0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4bb6      	ldr	r3, [pc, #728]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004b92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004b96:	e15f      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b98:	4bb5      	ldr	r3, [pc, #724]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004b9e:	e15b      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba0:	4bb1      	ldr	r3, [pc, #708]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bac:	4bae      	ldr	r3, [pc, #696]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d031      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb8:	4bab      	ldr	r3, [pc, #684]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bca:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bcc:	2300      	movs	r3, #0
 8004bce:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bd0:	4ba7      	ldr	r3, [pc, #668]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8004bd2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	fb03 f202 	mul.w	r2, r3, r2
 8004bdc:	2300      	movs	r3, #0
 8004bde:	4621      	mov	r1, r4
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	4aa2      	ldr	r2, [pc, #648]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8004be8:	4621      	mov	r1, r4
 8004bea:	fba1 1202 	umull	r1, r2, r1, r2
 8004bee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bf0:	460a      	mov	r2, r1
 8004bf2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004bf4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004bf6:	4413      	add	r3, r2
 8004bf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bfe:	2200      	movs	r2, #0
 8004c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004c04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004c0c:	f7fc f8ac 	bl	8000d68 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4613      	mov	r3, r2
 8004c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c1a:	e064      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1c:	4b92      	ldr	r3, [pc, #584]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	099b      	lsrs	r3, r3, #6
 8004c22:	2200      	movs	r2, #0
 8004c24:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c26:	657a      	str	r2, [r7, #84]	@ 0x54
 8004c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c30:	2300      	movs	r3, #0
 8004c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004c38:	4622      	mov	r2, r4
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	f04f 0000 	mov.w	r0, #0
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	0159      	lsls	r1, r3, #5
 8004c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c4a:	0150      	lsls	r0, r2, #5
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4621      	mov	r1, r4
 8004c52:	1a51      	subs	r1, r2, r1
 8004c54:	6139      	str	r1, [r7, #16]
 8004c56:	4629      	mov	r1, r5
 8004c58:	eb63 0301 	sbc.w	r3, r3, r1
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c6a:	4659      	mov	r1, fp
 8004c6c:	018b      	lsls	r3, r1, #6
 8004c6e:	4651      	mov	r1, sl
 8004c70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c74:	4651      	mov	r1, sl
 8004c76:	018a      	lsls	r2, r1, #6
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ebb2 0801 	subs.w	r8, r2, r1
 8004c7e:	4659      	mov	r1, fp
 8004c80:	eb63 0901 	sbc.w	r9, r3, r1
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c98:	4690      	mov	r8, r2
 8004c9a:	4699      	mov	r9, r3
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	eb18 0303 	adds.w	r3, r8, r3
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	eb49 0303 	adc.w	r3, r9, r3
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cb8:	4629      	mov	r1, r5
 8004cba:	028b      	lsls	r3, r1, #10
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	028a      	lsls	r2, r1, #10
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cce:	2200      	movs	r2, #0
 8004cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cd8:	f7fc f846 	bl	8000d68 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ce6:	4b60      	ldr	r3, [pc, #384]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004cf8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d08:	e0a6      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d0a:	4b57      	ldr	r3, [pc, #348]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d16:	4b54      	ldr	r3, [pc, #336]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d02a      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d22:	4b51      	ldr	r3, [pc, #324]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	2200      	movs	r2, #0
 8004d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d34:	2100      	movs	r1, #0
 8004d36:	4b4e      	ldr	r3, [pc, #312]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d38:	fb03 f201 	mul.w	r2, r3, r1
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	fb00 f303 	mul.w	r3, r0, r3
 8004d42:	4413      	add	r3, r2
 8004d44:	4a4a      	ldr	r2, [pc, #296]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d46:	fba0 1202 	umull	r1, r2, r0, r2
 8004d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	673a      	str	r2, [r7, #112]	@ 0x70
 8004d50:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d52:	4413      	add	r3, r2
 8004d54:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004d64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004d68:	f7fb fffe 	bl	8000d68 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4613      	mov	r3, r2
 8004d72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d76:	e05b      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d78:	4b3b      	ldr	r3, [pc, #236]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	099b      	lsrs	r3, r3, #6
 8004d7e:	2200      	movs	r2, #0
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d94:	4642      	mov	r2, r8
 8004d96:	464b      	mov	r3, r9
 8004d98:	f04f 0000 	mov.w	r0, #0
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	0159      	lsls	r1, r3, #5
 8004da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da6:	0150      	lsls	r0, r2, #5
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4641      	mov	r1, r8
 8004dae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004db2:	4649      	mov	r1, r9
 8004db4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dcc:	ebb2 040a 	subs.w	r4, r2, sl
 8004dd0:	eb63 050b 	sbc.w	r5, r3, fp
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	00eb      	lsls	r3, r5, #3
 8004dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de2:	00e2      	lsls	r2, r4, #3
 8004de4:	4614      	mov	r4, r2
 8004de6:	461d      	mov	r5, r3
 8004de8:	4643      	mov	r3, r8
 8004dea:	18e3      	adds	r3, r4, r3
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	464b      	mov	r3, r9
 8004df0:	eb45 0303 	adc.w	r3, r5, r3
 8004df4:	607b      	str	r3, [r7, #4]
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e02:	4629      	mov	r1, r5
 8004e04:	028b      	lsls	r3, r1, #10
 8004e06:	4621      	mov	r1, r4
 8004e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	028a      	lsls	r2, r1, #10
 8004e10:	4610      	mov	r0, r2
 8004e12:	4619      	mov	r1, r3
 8004e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e18:	2200      	movs	r2, #0
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	61fa      	str	r2, [r7, #28]
 8004e1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e22:	f7fb ffa1 	bl	8000d68 <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e30:	4b0d      	ldr	r3, [pc, #52]	@ (8004e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	0f1b      	lsrs	r3, r3, #28
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e4e:	e003      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e50:	4b06      	ldr	r3, [pc, #24]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3798      	adds	r7, #152	@ 0x98
 8004e60:	46bd      	mov	sp, r7
 8004e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	017d7840 	.word	0x017d7840

08004e74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e28d      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8083 	beq.w	8004f9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e94:	4b94      	ldr	r3, [pc, #592]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d019      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ea0:	4b91      	ldr	r3, [pc, #580]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
        || \
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d106      	bne.n	8004eba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004eac:	4b8e      	ldr	r3, [pc, #568]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b8b      	ldr	r3, [pc, #556]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec6:	4b88      	ldr	r3, [pc, #544]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4b84      	ldr	r3, [pc, #528]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05b      	beq.n	8004f98 <HAL_RCC_OscConfig+0x124>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d157      	bne.n	8004f98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e25a      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x90>
 8004ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a7b      	ldr	r2, [pc, #492]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e01d      	b.n	8004f40 <HAL_RCC_OscConfig+0xcc>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0xb4>
 8004f0e:	4b76      	ldr	r3, [pc, #472]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a75      	ldr	r2, [pc, #468]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b73      	ldr	r3, [pc, #460]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a72      	ldr	r2, [pc, #456]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0xcc>
 8004f28:	4b6f      	ldr	r3, [pc, #444]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b6c      	ldr	r3, [pc, #432]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a6b      	ldr	r2, [pc, #428]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fe fe40 	bl	8003bcc <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fe fe3c 	bl	8003bcc <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	@ 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e21f      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0xdc>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fe fe2c 	bl	8003bcc <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fe fe28 	bl	8003bcc <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	@ 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e20b      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b57      	ldr	r3, [pc, #348]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x104>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d06f      	beq.n	8005086 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004fa6:	4b50      	ldr	r3, [pc, #320]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d017      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fb2:	4b4d      	ldr	r3, [pc, #308]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d105      	bne.n	8004fca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b47      	ldr	r3, [pc, #284]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fd2:	2b0c      	cmp	r3, #12
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b41      	ldr	r3, [pc, #260]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x186>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1d3      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4937      	ldr	r1, [pc, #220]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e03a      	b.n	8005086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b34      	ldr	r3, [pc, #208]	@ (80050ec <HAL_RCC_OscConfig+0x278>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fe fdd5 	bl	8003bcc <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005026:	f7fe fdd1 	bl	8003bcc <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1b4      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b28      	ldr	r3, [pc, #160]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4925      	ldr	r1, [pc, #148]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <HAL_RCC_OscConfig+0x278>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fe fdb4 	bl	8003bcc <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005068:	f7fe fdb0 	bl	8003bcc <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e193      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d036      	beq.n	8005100 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b15      	ldr	r3, [pc, #84]	@ (80050f0 <HAL_RCC_OscConfig+0x27c>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fe fd94 	bl	8003bcc <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fe fd90 	bl	8003bcc <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e173      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <HAL_RCC_OscConfig+0x274>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x234>
 80050c6:	e01b      	b.n	8005100 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c8:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <HAL_RCC_OscConfig+0x27c>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ce:	f7fe fd7d 	bl	8003bcc <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	e00e      	b.n	80050f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d6:	f7fe fd79 	bl	8003bcc <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d907      	bls.n	80050f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e15c      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
 80050e8:	40023800 	.word	0x40023800
 80050ec:	42470000 	.word	0x42470000
 80050f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f4:	4b8a      	ldr	r3, [pc, #552]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ea      	bne.n	80050d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8097 	beq.w	800523c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005112:	4b83      	ldr	r3, [pc, #524]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10f      	bne.n	800513e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	4b7f      	ldr	r3, [pc, #508]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	4a7e      	ldr	r2, [pc, #504]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800512c:	6413      	str	r3, [r2, #64]	@ 0x40
 800512e:	4b7c      	ldr	r3, [pc, #496]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513e:	4b79      	ldr	r3, [pc, #484]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d118      	bne.n	800517c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800514a:	4b76      	ldr	r3, [pc, #472]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a75      	ldr	r2, [pc, #468]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 8005150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005156:	f7fe fd39 	bl	8003bcc <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515e:	f7fe fd35 	bl	8003bcc <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e118      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	4b6c      	ldr	r3, [pc, #432]	@ (8005324 <HAL_RCC_OscConfig+0x4b0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d106      	bne.n	8005192 <HAL_RCC_OscConfig+0x31e>
 8005184:	4b66      	ldr	r3, [pc, #408]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005188:	4a65      	ldr	r2, [pc, #404]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005190:	e01c      	b.n	80051cc <HAL_RCC_OscConfig+0x358>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b05      	cmp	r3, #5
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x340>
 800519a:	4b61      	ldr	r3, [pc, #388]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519e:	4a60      	ldr	r2, [pc, #384]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a6:	4b5e      	ldr	r3, [pc, #376]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0x358>
 80051b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b8:	4a59      	ldr	r2, [pc, #356]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c0:	4b57      	ldr	r3, [pc, #348]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c4:	4a56      	ldr	r2, [pc, #344]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051c6:	f023 0304 	bic.w	r3, r3, #4
 80051ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fe fcfa 	bl	8003bcc <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fe fcf6 	bl	8003bcc <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0d7      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ee      	beq.n	80051dc <HAL_RCC_OscConfig+0x368>
 80051fe:	e014      	b.n	800522a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fe fce4 	bl	8003bcc <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fe fce0 	bl	8003bcc <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e0c1      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521e:	4b40      	ldr	r3, [pc, #256]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ee      	bne.n	8005208 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005230:	4b3b      	ldr	r3, [pc, #236]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005234:	4a3a      	ldr	r2, [pc, #232]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800523a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80ad 	beq.w	80053a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005246:	4b36      	ldr	r3, [pc, #216]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	d060      	beq.n	8005314 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d145      	bne.n	80052e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b33      	ldr	r3, [pc, #204]	@ (8005328 <HAL_RCC_OscConfig+0x4b4>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fe fcb4 	bl	8003bcc <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005268:	f7fe fcb0 	bl	8003bcc <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e093      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527a:	4b29      	ldr	r3, [pc, #164]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	3b01      	subs	r3, #1
 80052a0:	041b      	lsls	r3, r3, #16
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b0:	071b      	lsls	r3, r3, #28
 80052b2:	491b      	ldr	r1, [pc, #108]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <HAL_RCC_OscConfig+0x4b4>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fe fc85 	bl	8003bcc <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c6:	f7fe fc81 	bl	8003bcc <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e064      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d8:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x452>
 80052e4:	e05c      	b.n	80053a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b10      	ldr	r3, [pc, #64]	@ (8005328 <HAL_RCC_OscConfig+0x4b4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fe fc6e 	bl	8003bcc <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fe fc6a 	bl	8003bcc <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e04d      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <HAL_RCC_OscConfig+0x4ac>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x480>
 8005312:	e045      	b.n	80053a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d107      	bne.n	800532c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e040      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
 8005320:	40023800 	.word	0x40023800
 8005324:	40007000 	.word	0x40007000
 8005328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800532c:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <HAL_RCC_OscConfig+0x538>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d030      	beq.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d129      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d122      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005364:	4293      	cmp	r3, r2
 8005366:	d119      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	3b01      	subs	r3, #1
 8005376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005378:	429a      	cmp	r2, r3
 800537a:	d10f      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005388:	429a      	cmp	r2, r3
 800538a:	d107      	bne.n	800539c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40023800 	.word	0x40023800

080053b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e07b      	b.n	80054ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d108      	bne.n	80053dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053d2:	d009      	beq.n	80053e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	61da      	str	r2, [r3, #28]
 80053da:	e005      	b.n	80053e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fd ff5a 	bl	80032bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800541e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	ea42 0103 	orr.w	r1, r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	f003 0104 	and.w	r1, r3, #4
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	f003 0210 	and.w	r2, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b088      	sub	sp, #32
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054d2:	f7fe fb7b 	bl	8003bcc <HAL_GetTick>
 80054d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d001      	beq.n	80054ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
 80054ea:	e12a      	b.n	8005742 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_SPI_Transmit+0x36>
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e122      	b.n	8005742 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_SPI_Transmit+0x48>
 8005506:	2302      	movs	r3, #2
 8005508:	e11b      	b.n	8005742 <HAL_SPI_Transmit+0x280>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2203      	movs	r2, #3
 8005516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005558:	d10f      	bne.n	800557a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005578:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005584:	2b40      	cmp	r3, #64	@ 0x40
 8005586:	d007      	beq.n	8005598 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a0:	d152      	bne.n	8005648 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_SPI_Transmit+0xee>
 80055aa:	8b7b      	ldrh	r3, [r7, #26]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d145      	bne.n	800563c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b4:	881a      	ldrh	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c0:	1c9a      	adds	r2, r3, #2
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055d4:	e032      	b.n	800563c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d112      	bne.n	800560a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e8:	881a      	ldrh	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f4:	1c9a      	adds	r2, r3, #2
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005608:	e018      	b.n	800563c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800560a:	f7fe fadf 	bl	8003bcc <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d803      	bhi.n	8005622 <HAL_SPI_Transmit+0x160>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d102      	bne.n	8005628 <HAL_SPI_Transmit+0x166>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e082      	b.n	8005742 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1c7      	bne.n	80055d6 <HAL_SPI_Transmit+0x114>
 8005646:	e053      	b.n	80056f0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_SPI_Transmit+0x194>
 8005650:	8b7b      	ldrh	r3, [r7, #26]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d147      	bne.n	80056e6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	7812      	ldrb	r2, [r2, #0]
 8005662:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800567c:	e033      	b.n	80056e6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b02      	cmp	r3, #2
 800568a:	d113      	bne.n	80056b4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056b2:	e018      	b.n	80056e6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b4:	f7fe fa8a 	bl	8003bcc <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d803      	bhi.n	80056cc <HAL_SPI_Transmit+0x20a>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d102      	bne.n	80056d2 <HAL_SPI_Transmit+0x210>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d109      	bne.n	80056e6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e02d      	b.n	8005742 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1c6      	bne.n	800567e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fba1 	bl	8005e3c <SPI_EndRxTxTransaction>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005740:	2300      	movs	r3, #0
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b08a      	sub	sp, #40	@ 0x28
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
 8005756:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005758:	2301      	movs	r3, #1
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800575c:	f7fe fa36 	bl	8003bcc <HAL_GetTick>
 8005760:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005768:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005770:	887b      	ldrh	r3, [r7, #2]
 8005772:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005774:	7ffb      	ldrb	r3, [r7, #31]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d00c      	beq.n	8005794 <HAL_SPI_TransmitReceive+0x4a>
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005780:	d106      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d102      	bne.n	8005790 <HAL_SPI_TransmitReceive+0x46>
 800578a:	7ffb      	ldrb	r3, [r7, #31]
 800578c:	2b04      	cmp	r3, #4
 800578e:	d001      	beq.n	8005794 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
 8005792:	e17f      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x5c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x5c>
 80057a0:	887b      	ldrh	r3, [r7, #2]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e174      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x6e>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e16d      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x34a>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d003      	beq.n	80057d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2205      	movs	r2, #5
 80057d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	887a      	ldrh	r2, [r7, #2]
 80057e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	887a      	ldrh	r2, [r7, #2]
 80057ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	887a      	ldrh	r2, [r7, #2]
 80057f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005814:	2b40      	cmp	r3, #64	@ 0x40
 8005816:	d007      	beq.n	8005828 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005826:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005830:	d17e      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_SPI_TransmitReceive+0xf6>
 800583a:	8afb      	ldrh	r3, [r7, #22]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d16c      	bne.n	800591a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	881a      	ldrh	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005850:	1c9a      	adds	r2, r3, #2
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005864:	e059      	b.n	800591a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b02      	cmp	r3, #2
 8005872:	d11b      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x162>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d016      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x162>
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	2b01      	cmp	r3, #1
 8005882:	d113      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005888:	881a      	ldrh	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005894:	1c9a      	adds	r2, r3, #2
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d119      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x1a4>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d014      	beq.n	80058ee <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ce:	b292      	uxth	r2, r2
 80058d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d6:	1c9a      	adds	r2, r3, #2
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058ea:	2301      	movs	r3, #1
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058ee:	f7fe f96d 	bl	8003bcc <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d80d      	bhi.n	800591a <HAL_SPI_TransmitReceive+0x1d0>
 80058fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d009      	beq.n	800591a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e0bc      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1a0      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x11c>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d19b      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x11c>
 800592e:	e082      	b.n	8005a36 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_SPI_TransmitReceive+0x1f4>
 8005938:	8afb      	ldrh	r3, [r7, #22]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d171      	bne.n	8005a22 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	7812      	ldrb	r2, [r2, #0]
 800594a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005964:	e05d      	b.n	8005a22 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b02      	cmp	r3, #2
 8005972:	d11c      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x264>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d017      	beq.n	80059ae <HAL_SPI_TransmitReceive+0x264>
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	2b01      	cmp	r3, #1
 8005982:	d114      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d119      	bne.n	80059f0 <HAL_SPI_TransmitReceive+0x2a6>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d014      	beq.n	80059f0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059ec:	2301      	movs	r3, #1
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059f0:	f7fe f8ec 	bl	8003bcc <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d803      	bhi.n	8005a08 <HAL_SPI_TransmitReceive+0x2be>
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	d102      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x2c4>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e038      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d19c      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x21c>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d197      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a36:	6a3a      	ldr	r2, [r7, #32]
 8005a38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f9fe 	bl	8005e3c <SPI_EndRxTxTransaction>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e01d      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a60:	2300      	movs	r3, #0
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
  }
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3728      	adds	r7, #40	@ 0x28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d001      	beq.n	8005aba <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e097      	b.n	8005bea <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_Transmit_DMA+0x2a>
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e08f      	b.n	8005bea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_SPI_Transmit_DMA+0x3c>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e088      	b.n	8005bea <HAL_SPI_Transmit_DMA+0x14e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	88fa      	ldrh	r2, [r7, #6]
 8005afe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b26:	d10f      	bne.n	8005b48 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4c:	4a29      	ldr	r2, [pc, #164]	@ (8005bf4 <HAL_SPI_Transmit_DMA+0x158>)
 8005b4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b54:	4a28      	ldr	r2, [pc, #160]	@ (8005bf8 <HAL_SPI_Transmit_DMA+0x15c>)
 8005b56:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5c:	4a27      	ldr	r2, [pc, #156]	@ (8005bfc <HAL_SPI_Transmit_DMA+0x160>)
 8005b5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b64:	2200      	movs	r2, #0
 8005b66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b70:	4619      	mov	r1, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b80:	f7fe fa14 	bl	8003fac <HAL_DMA_Start_IT>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8e:	f043 0210 	orr.w	r2, r3, #16
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e023      	b.n	8005bea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bac:	2b40      	cmp	r3, #64	@ 0x40
 8005bae:	d007      	beq.n	8005bc0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bbe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0220 	orr.w	r2, r2, #32
 8005bd6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0202 	orr.w	r2, r2, #2
 8005be6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	08005cd1 	.word	0x08005cd1
 8005bf8:	08005c29 	.word	0x08005c29
 8005bfc:	08005ced 	.word	0x08005ced

08005c00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c36:	f7fd ffc9 	bl	8003bcc <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c4a:	d03b      	beq.n	8005cc4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0220 	bic.w	r2, r2, #32
 8005c5a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0202 	bic.w	r2, r2, #2
 8005c6a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	2164      	movs	r1, #100	@ 0x64
 8005c70:	6978      	ldr	r0, [r7, #20]
 8005c72:	f000 f8e3 	bl	8005e3c <SPI_EndRxTxTransaction>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c80:	f043 0220 	orr.w	r2, r3, #32
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005cbc:	6978      	ldr	r0, [r7, #20]
 8005cbe:	f7ff ffa9 	bl	8005c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005cc2:	e002      	b.n	8005cca <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005cc4:	6978      	ldr	r0, [r7, #20]
 8005cc6:	f7fb fabf 	bl	8001248 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff ff8e 	bl	8005c00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0203 	bic.w	r2, r2, #3
 8005d08:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0e:	f043 0210 	orr.w	r2, r3, #16
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff ff78 	bl	8005c14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d3c:	f7fd ff46 	bl	8003bcc <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	4413      	add	r3, r2
 8005d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d4c:	f7fd ff3e 	bl	8003bcc <HAL_GetTick>
 8005d50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d52:	4b39      	ldr	r3, [pc, #228]	@ (8005e38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	015b      	lsls	r3, r3, #5
 8005d58:	0d1b      	lsrs	r3, r3, #20
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	fb02 f303 	mul.w	r3, r2, r3
 8005d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d62:	e054      	b.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d050      	beq.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d6c:	f7fd ff2e 	bl	8003bcc <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d902      	bls.n	8005d82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d13d      	bne.n	8005dfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d9a:	d111      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005da4:	d004      	beq.n	8005db0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dae:	d107      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc8:	d10f      	bne.n	8005dea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e017      	b.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d19b      	bne.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	2000000c 	.word	0x2000000c

08005e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	2102      	movs	r1, #2
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff ff6a 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e62:	f043 0220 	orr.w	r2, r3, #32
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e032      	b.n	8005ed4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8005edc <SPI_EndRxTxTransaction+0xa0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee0 <SPI_EndRxTxTransaction+0xa4>)
 8005e74:	fba2 2303 	umull	r2, r3, r2, r3
 8005e78:	0d5b      	lsrs	r3, r3, #21
 8005e7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e8c:	d112      	bne.n	8005eb4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2200      	movs	r2, #0
 8005e96:	2180      	movs	r1, #128	@ 0x80
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff ff47 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d016      	beq.n	8005ed2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea8:	f043 0220 	orr.w	r2, r3, #32
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e00f      	b.n	8005ed4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eca:	2b80      	cmp	r3, #128	@ 0x80
 8005ecc:	d0f2      	beq.n	8005eb4 <SPI_EndRxTxTransaction+0x78>
 8005ece:	e000      	b.n	8005ed2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005ed0:	bf00      	nop
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	2000000c 	.word	0x2000000c
 8005ee0:	165e9f81 	.word	0x165e9f81

08005ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e041      	b.n	8005f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fd fd02 	bl	8003914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f000 fb14 	bl	8006550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d001      	beq.n	8005f9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e046      	b.n	800602a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a23      	ldr	r2, [pc, #140]	@ (8006038 <HAL_TIM_Base_Start+0xb4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d022      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb6:	d01d      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800603c <HAL_TIM_Base_Start+0xb8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d018      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8006040 <HAL_TIM_Base_Start+0xbc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006044 <HAL_TIM_Base_Start+0xc0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1b      	ldr	r2, [pc, #108]	@ (8006048 <HAL_TIM_Base_Start+0xc4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	@ (800604c <HAL_TIM_Base_Start+0xc8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a18      	ldr	r2, [pc, #96]	@ (8006050 <HAL_TIM_Base_Start+0xcc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d111      	bne.n	8006018 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b06      	cmp	r3, #6
 8006004:	d010      	beq.n	8006028 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0201 	orr.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006016:	e007      	b.n	8006028 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40010400 	.word	0x40010400
 800604c:	40014000 	.word	0x40014000
 8006050:	40001800 	.word	0x40001800

08006054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d001      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e04e      	b.n	800610a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a23      	ldr	r2, [pc, #140]	@ (8006118 <HAL_TIM_Base_Start_IT+0xc4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006096:	d01d      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	@ (800611c <HAL_TIM_Base_Start_IT+0xc8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006120 <HAL_TIM_Base_Start_IT+0xcc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <HAL_TIM_Base_Start_IT+0xd0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006128 <HAL_TIM_Base_Start_IT+0xd4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a19      	ldr	r2, [pc, #100]	@ (800612c <HAL_TIM_Base_Start_IT+0xd8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a18      	ldr	r2, [pc, #96]	@ (8006130 <HAL_TIM_Base_Start_IT+0xdc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d111      	bne.n	80060f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d010      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f6:	e007      	b.n	8006108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40010000 	.word	0x40010000
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	40010400 	.word	0x40010400
 800612c:	40014000 	.word	0x40014000
 8006130:	40001800 	.word	0x40001800

08006134 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0201 	bic.w	r2, r2, #1
 800614a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <HAL_TIM_Base_Stop_IT+0x48>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a1a      	ldr	r2, [r3, #32]
 8006162:	f240 4344 	movw	r3, #1092	@ 0x444
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d107      	bne.n	800617c <HAL_TIM_Base_Stop_IT+0x48>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d020      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01b      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f06f 0202 	mvn.w	r2, #2
 80061c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f999 	bl	8006514 <HAL_TIM_IC_CaptureCallback>
 80061e2:	e005      	b.n	80061f0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f98b 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f99c 	bl	8006528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01b      	beq.n	8006242 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f06f 0204 	mvn.w	r2, #4
 8006212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f973 	bl	8006514 <HAL_TIM_IC_CaptureCallback>
 800622e:	e005      	b.n	800623c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f965 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f976 	bl	8006528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d020      	beq.n	800628e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01b      	beq.n	800628e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f06f 0208 	mvn.w	r2, #8
 800625e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2204      	movs	r2, #4
 8006264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f94d 	bl	8006514 <HAL_TIM_IC_CaptureCallback>
 800627a:	e005      	b.n	8006288 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f93f 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f950 	bl	8006528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	d020      	beq.n	80062da <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01b      	beq.n	80062da <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f06f 0210 	mvn.w	r2, #16
 80062aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2208      	movs	r2, #8
 80062b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f927 	bl	8006514 <HAL_TIM_IC_CaptureCallback>
 80062c6:	e005      	b.n	80062d4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f919 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f92a 	bl	8006528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f06f 0201 	mvn.w	r2, #1
 80062f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7fc fca9 	bl	8002c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00c      	beq.n	8006322 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800631a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fae3 	bl	80068e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00c      	beq.n	8006346 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d007      	beq.n	8006346 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800633e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8fb 	bl	800653c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00c      	beq.n	800636a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f06f 0220 	mvn.w	r2, #32
 8006362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fab5 	bl	80068d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_TIM_ConfigClockSource+0x1c>
 800638a:	2302      	movs	r3, #2
 800638c:	e0b4      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x186>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2202      	movs	r2, #2
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c6:	d03e      	beq.n	8006446 <HAL_TIM_ConfigClockSource+0xd4>
 80063c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063cc:	f200 8087 	bhi.w	80064de <HAL_TIM_ConfigClockSource+0x16c>
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d4:	f000 8086 	beq.w	80064e4 <HAL_TIM_ConfigClockSource+0x172>
 80063d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063dc:	d87f      	bhi.n	80064de <HAL_TIM_ConfigClockSource+0x16c>
 80063de:	2b70      	cmp	r3, #112	@ 0x70
 80063e0:	d01a      	beq.n	8006418 <HAL_TIM_ConfigClockSource+0xa6>
 80063e2:	2b70      	cmp	r3, #112	@ 0x70
 80063e4:	d87b      	bhi.n	80064de <HAL_TIM_ConfigClockSource+0x16c>
 80063e6:	2b60      	cmp	r3, #96	@ 0x60
 80063e8:	d050      	beq.n	800648c <HAL_TIM_ConfigClockSource+0x11a>
 80063ea:	2b60      	cmp	r3, #96	@ 0x60
 80063ec:	d877      	bhi.n	80064de <HAL_TIM_ConfigClockSource+0x16c>
 80063ee:	2b50      	cmp	r3, #80	@ 0x50
 80063f0:	d03c      	beq.n	800646c <HAL_TIM_ConfigClockSource+0xfa>
 80063f2:	2b50      	cmp	r3, #80	@ 0x50
 80063f4:	d873      	bhi.n	80064de <HAL_TIM_ConfigClockSource+0x16c>
 80063f6:	2b40      	cmp	r3, #64	@ 0x40
 80063f8:	d058      	beq.n	80064ac <HAL_TIM_ConfigClockSource+0x13a>
 80063fa:	2b40      	cmp	r3, #64	@ 0x40
 80063fc:	d86f      	bhi.n	80064de <HAL_TIM_ConfigClockSource+0x16c>
 80063fe:	2b30      	cmp	r3, #48	@ 0x30
 8006400:	d064      	beq.n	80064cc <HAL_TIM_ConfigClockSource+0x15a>
 8006402:	2b30      	cmp	r3, #48	@ 0x30
 8006404:	d86b      	bhi.n	80064de <HAL_TIM_ConfigClockSource+0x16c>
 8006406:	2b20      	cmp	r3, #32
 8006408:	d060      	beq.n	80064cc <HAL_TIM_ConfigClockSource+0x15a>
 800640a:	2b20      	cmp	r3, #32
 800640c:	d867      	bhi.n	80064de <HAL_TIM_ConfigClockSource+0x16c>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d05c      	beq.n	80064cc <HAL_TIM_ConfigClockSource+0x15a>
 8006412:	2b10      	cmp	r3, #16
 8006414:	d05a      	beq.n	80064cc <HAL_TIM_ConfigClockSource+0x15a>
 8006416:	e062      	b.n	80064de <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006428:	f000 f9b8 	bl	800679c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800643a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	609a      	str	r2, [r3, #8]
      break;
 8006444:	e04f      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006456:	f000 f9a1 	bl	800679c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006468:	609a      	str	r2, [r3, #8]
      break;
 800646a:	e03c      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006478:	461a      	mov	r2, r3
 800647a:	f000 f915 	bl	80066a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2150      	movs	r1, #80	@ 0x50
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f96e 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 800648a:	e02c      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006498:	461a      	mov	r2, r3
 800649a:	f000 f934 	bl	8006706 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2160      	movs	r1, #96	@ 0x60
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 f95e 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 80064aa:	e01c      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b8:	461a      	mov	r2, r3
 80064ba:	f000 f8f5 	bl	80066a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2140      	movs	r1, #64	@ 0x40
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 f94e 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 80064ca:	e00c      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f000 f945 	bl	8006766 <TIM_ITRx_SetConfig>
      break;
 80064dc:	e003      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	73fb      	strb	r3, [r7, #15]
      break;
 80064e2:	e000      	b.n	80064e6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a46      	ldr	r2, [pc, #280]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a43      	ldr	r2, [pc, #268]	@ (8006680 <TIM_Base_SetConfig+0x130>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a42      	ldr	r2, [pc, #264]	@ (8006684 <TIM_Base_SetConfig+0x134>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a41      	ldr	r2, [pc, #260]	@ (8006688 <TIM_Base_SetConfig+0x138>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0x40>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a40      	ldr	r2, [pc, #256]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d108      	bne.n	80065a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a35      	ldr	r2, [pc, #212]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d02b      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b0:	d027      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a32      	ldr	r2, [pc, #200]	@ (8006680 <TIM_Base_SetConfig+0x130>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d023      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a31      	ldr	r2, [pc, #196]	@ (8006684 <TIM_Base_SetConfig+0x134>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01f      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a30      	ldr	r2, [pc, #192]	@ (8006688 <TIM_Base_SetConfig+0x138>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01b      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2f      	ldr	r2, [pc, #188]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d017      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006690 <TIM_Base_SetConfig+0x140>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006694 <TIM_Base_SetConfig+0x144>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00f      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006698 <TIM_Base_SetConfig+0x148>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00b      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2b      	ldr	r2, [pc, #172]	@ (800669c <TIM_Base_SetConfig+0x14c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d007      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2a      	ldr	r2, [pc, #168]	@ (80066a0 <TIM_Base_SetConfig+0x150>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a29      	ldr	r2, [pc, #164]	@ (80066a4 <TIM_Base_SetConfig+0x154>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d108      	bne.n	8006614 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a10      	ldr	r2, [pc, #64]	@ (800667c <TIM_Base_SetConfig+0x12c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_Base_SetConfig+0xf8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a12      	ldr	r2, [pc, #72]	@ (800668c <TIM_Base_SetConfig+0x13c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d103      	bne.n	8006650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b01      	cmp	r3, #1
 8006660:	d105      	bne.n	800666e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f023 0201 	bic.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	611a      	str	r2, [r3, #16]
  }
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40010400 	.word	0x40010400
 8006690:	40014000 	.word	0x40014000
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800
 800669c:	40001800 	.word	0x40001800
 80066a0:	40001c00 	.word	0x40001c00
 80066a4:	40002000 	.word	0x40002000

080066a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 030a 	bic.w	r3, r3, #10
 80066e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006706:	b480      	push	{r7}
 8006708:	b087      	sub	sp, #28
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f023 0210 	bic.w	r2, r3, #16
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	031b      	lsls	r3, r3, #12
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006742:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	621a      	str	r2, [r3, #32]
}
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006766:	b480      	push	{r7}
 8006768:	b085      	sub	sp, #20
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	f043 0307 	orr.w	r3, r3, #7
 8006788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	021a      	lsls	r2, r3, #8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	431a      	orrs	r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	609a      	str	r2, [r3, #8]
}
 80067d0:	bf00      	nop
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e05a      	b.n	80068aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a21      	ldr	r2, [pc, #132]	@ (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006840:	d01d      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1d      	ldr	r2, [pc, #116]	@ (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1b      	ldr	r2, [pc, #108]	@ (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1a      	ldr	r2, [pc, #104]	@ (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a18      	ldr	r2, [pc, #96]	@ (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a15      	ldr	r2, [pc, #84]	@ (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d10c      	bne.n	8006898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	4313      	orrs	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00
 80068c8:	40010400 	.word	0x40010400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40001800 	.word	0x40001800

080068d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e042      	b.n	8006994 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fd f87a 	bl	8003a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2224      	movs	r2, #36	@ 0x24
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800693e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fa09 	bl	8006d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695a      	ldr	r2, [r3, #20]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	@ 0x28
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d175      	bne.n	8006aa8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_UART_Transmit+0x2c>
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e06e      	b.n	8006aaa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2221      	movs	r2, #33	@ 0x21
 80069d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069da:	f7fd f8f7 	bl	8003bcc <HAL_GetTick>
 80069de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	88fa      	ldrh	r2, [r7, #6]
 80069e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f4:	d108      	bne.n	8006a08 <HAL_UART_Transmit+0x6c>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d104      	bne.n	8006a08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	e003      	b.n	8006a10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a10:	e02e      	b.n	8006a70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2180      	movs	r1, #128	@ 0x80
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 f8df 	bl	8006be0 <UART_WaitOnFlagUntilTimeout>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e03a      	b.n	8006aaa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	e007      	b.n	8006a62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	781a      	ldrb	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1cb      	bne.n	8006a12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2200      	movs	r2, #0
 8006a82:	2140      	movs	r1, #64	@ 0x40
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f8ab 	bl	8006be0 <UART_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e006      	b.n	8006aaa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e000      	b.n	8006aaa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006aa8:	2302      	movs	r3, #2
  }
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b08a      	sub	sp, #40	@ 0x28
 8006ab6:	af02      	add	r7, sp, #8
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	603b      	str	r3, [r7, #0]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	f040 8081 	bne.w	8006bd6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_UART_Receive+0x2e>
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e079      	b.n	8006bd8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2222      	movs	r2, #34	@ 0x22
 8006aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af8:	f7fd f868 	bl	8003bcc <HAL_GetTick>
 8006afc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	88fa      	ldrh	r2, [r7, #6]
 8006b02:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	88fa      	ldrh	r2, [r7, #6]
 8006b08:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b12:	d108      	bne.n	8006b26 <HAL_UART_Receive+0x74>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	e003      	b.n	8006b2e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b2e:	e047      	b.n	8006bc0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2120      	movs	r1, #32
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f850 	bl	8006be0 <UART_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e042      	b.n	8006bd8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10c      	bne.n	8006b72 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	e01f      	b.n	8006bb2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b7a:	d007      	beq.n	8006b8c <HAL_UART_Receive+0xda>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <HAL_UART_Receive+0xe8>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d106      	bne.n	8006b9a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e008      	b.n	8006bac <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1b2      	bne.n	8006b30 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e000      	b.n	8006bd8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006bd6:	2302      	movs	r3, #2
  }
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	4613      	mov	r3, r2
 8006bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf0:	e03b      	b.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf8:	d037      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bfa:	f7fc ffe7 	bl	8003bcc <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	6a3a      	ldr	r2, [r7, #32]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d302      	bcc.n	8006c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e03a      	b.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d023      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b80      	cmp	r3, #128	@ 0x80
 8006c26:	d020      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b40      	cmp	r3, #64	@ 0x40
 8006c2c:	d01d      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d116      	bne.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f81d 	bl	8006c92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e00f      	b.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	4013      	ands	r3, r2
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	bf0c      	ite	eq
 8006c7a:	2301      	moveq	r3, #1
 8006c7c:	2300      	movne	r3, #0
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d0b4      	beq.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b095      	sub	sp, #84	@ 0x54
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	330c      	adds	r3, #12
 8006ca0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cba:	643a      	str	r2, [r7, #64]	@ 0x40
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e5      	bne.n	8006c9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3314      	adds	r3, #20
 8006cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	f023 0301 	bic.w	r3, r3, #1
 8006ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3314      	adds	r3, #20
 8006cec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e5      	bne.n	8006cce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d119      	bne.n	8006d3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f023 0310 	bic.w	r3, r3, #16
 8006d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d2a:	61ba      	str	r2, [r7, #24]
 8006d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6979      	ldr	r1, [r7, #20]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	613b      	str	r3, [r7, #16]
   return(result);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d4c:	bf00      	nop
 8006d4e:	3754      	adds	r7, #84	@ 0x54
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d5c:	b0c0      	sub	sp, #256	@ 0x100
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d74:	68d9      	ldr	r1, [r3, #12]
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	ea40 0301 	orr.w	r3, r0, r1
 8006d80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006db0:	f021 010c 	bic.w	r1, r1, #12
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd2:	6999      	ldr	r1, [r3, #24]
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	ea40 0301 	orr.w	r3, r0, r1
 8006dde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4b8f      	ldr	r3, [pc, #572]	@ (8007024 <UART_SetConfig+0x2cc>)
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d005      	beq.n	8006df8 <UART_SetConfig+0xa0>
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4b8d      	ldr	r3, [pc, #564]	@ (8007028 <UART_SetConfig+0x2d0>)
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d104      	bne.n	8006e02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006df8:	f7fd fe7e 	bl	8004af8 <HAL_RCC_GetPCLK2Freq>
 8006dfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e00:	e003      	b.n	8006e0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e02:	f7fd fe65 	bl	8004ad0 <HAL_RCC_GetPCLK1Freq>
 8006e06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e14:	f040 810c 	bne.w	8007030 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	1891      	adds	r1, r2, r2
 8006e30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e32:	415b      	adcs	r3, r3
 8006e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	eb12 0801 	adds.w	r8, r2, r1
 8006e40:	4629      	mov	r1, r5
 8006e42:	eb43 0901 	adc.w	r9, r3, r1
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e5a:	4690      	mov	r8, r2
 8006e5c:	4699      	mov	r9, r3
 8006e5e:	4623      	mov	r3, r4
 8006e60:	eb18 0303 	adds.w	r3, r8, r3
 8006e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e68:	462b      	mov	r3, r5
 8006e6a:	eb49 0303 	adc.w	r3, r9, r3
 8006e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e86:	460b      	mov	r3, r1
 8006e88:	18db      	adds	r3, r3, r3
 8006e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	eb42 0303 	adc.w	r3, r2, r3
 8006e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e9c:	f7f9 ff64 	bl	8000d68 <__aeabi_uldivmod>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4b61      	ldr	r3, [pc, #388]	@ (800702c <UART_SetConfig+0x2d4>)
 8006ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	011c      	lsls	r4, r3, #4
 8006eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006eb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ebc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	1891      	adds	r1, r2, r2
 8006ec6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ec8:	415b      	adcs	r3, r3
 8006eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ecc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	eb43 0b01 	adc.w	fp, r3, r1
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ee8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ef0:	4692      	mov	sl, r2
 8006ef2:	469b      	mov	fp, r3
 8006ef4:	4643      	mov	r3, r8
 8006ef6:	eb1a 0303 	adds.w	r3, sl, r3
 8006efa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006efe:	464b      	mov	r3, r9
 8006f00:	eb4b 0303 	adc.w	r3, fp, r3
 8006f04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	18db      	adds	r3, r3, r3
 8006f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f22:	4613      	mov	r3, r2
 8006f24:	eb42 0303 	adc.w	r3, r2, r3
 8006f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f32:	f7f9 ff19 	bl	8000d68 <__aeabi_uldivmod>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800702c <UART_SetConfig+0x2d4>)
 8006f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	2264      	movs	r2, #100	@ 0x64
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
 8006f4a:	1acb      	subs	r3, r1, r3
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f52:	4b36      	ldr	r3, [pc, #216]	@ (800702c <UART_SetConfig+0x2d4>)
 8006f54:	fba3 2302 	umull	r2, r3, r3, r2
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f60:	441c      	add	r4, r3
 8006f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f74:	4642      	mov	r2, r8
 8006f76:	464b      	mov	r3, r9
 8006f78:	1891      	adds	r1, r2, r2
 8006f7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f7c:	415b      	adcs	r3, r3
 8006f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f84:	4641      	mov	r1, r8
 8006f86:	1851      	adds	r1, r2, r1
 8006f88:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	414b      	adcs	r3, r1
 8006f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f9c:	4659      	mov	r1, fp
 8006f9e:	00cb      	lsls	r3, r1, #3
 8006fa0:	4651      	mov	r1, sl
 8006fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fa6:	4651      	mov	r1, sl
 8006fa8:	00ca      	lsls	r2, r1, #3
 8006faa:	4610      	mov	r0, r2
 8006fac:	4619      	mov	r1, r3
 8006fae:	4603      	mov	r3, r0
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	189b      	adds	r3, r3, r2
 8006fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fb8:	464b      	mov	r3, r9
 8006fba:	460a      	mov	r2, r1
 8006fbc:	eb42 0303 	adc.w	r3, r2, r3
 8006fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006fd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fd8:	460b      	mov	r3, r1
 8006fda:	18db      	adds	r3, r3, r3
 8006fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fde:	4613      	mov	r3, r2
 8006fe0:	eb42 0303 	adc.w	r3, r2, r3
 8006fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006fee:	f7f9 febb 	bl	8000d68 <__aeabi_uldivmod>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800702c <UART_SetConfig+0x2d4>)
 8006ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	2164      	movs	r1, #100	@ 0x64
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	3332      	adds	r3, #50	@ 0x32
 800700a:	4a08      	ldr	r2, [pc, #32]	@ (800702c <UART_SetConfig+0x2d4>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f003 0207 	and.w	r2, r3, #7
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4422      	add	r2, r4
 800701e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007020:	e106      	b.n	8007230 <UART_SetConfig+0x4d8>
 8007022:	bf00      	nop
 8007024:	40011000 	.word	0x40011000
 8007028:	40011400 	.word	0x40011400
 800702c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007034:	2200      	movs	r2, #0
 8007036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800703a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800703e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007042:	4642      	mov	r2, r8
 8007044:	464b      	mov	r3, r9
 8007046:	1891      	adds	r1, r2, r2
 8007048:	6239      	str	r1, [r7, #32]
 800704a:	415b      	adcs	r3, r3
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24
 800704e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007052:	4641      	mov	r1, r8
 8007054:	1854      	adds	r4, r2, r1
 8007056:	4649      	mov	r1, r9
 8007058:	eb43 0501 	adc.w	r5, r3, r1
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	00eb      	lsls	r3, r5, #3
 8007066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800706a:	00e2      	lsls	r2, r4, #3
 800706c:	4614      	mov	r4, r2
 800706e:	461d      	mov	r5, r3
 8007070:	4643      	mov	r3, r8
 8007072:	18e3      	adds	r3, r4, r3
 8007074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007078:	464b      	mov	r3, r9
 800707a:	eb45 0303 	adc.w	r3, r5, r3
 800707e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800708e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800709e:	4629      	mov	r1, r5
 80070a0:	008b      	lsls	r3, r1, #2
 80070a2:	4621      	mov	r1, r4
 80070a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a8:	4621      	mov	r1, r4
 80070aa:	008a      	lsls	r2, r1, #2
 80070ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070b0:	f7f9 fe5a 	bl	8000d68 <__aeabi_uldivmod>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4b60      	ldr	r3, [pc, #384]	@ (800723c <UART_SetConfig+0x4e4>)
 80070ba:	fba3 2302 	umull	r2, r3, r3, r2
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	011c      	lsls	r4, r3, #4
 80070c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070d4:	4642      	mov	r2, r8
 80070d6:	464b      	mov	r3, r9
 80070d8:	1891      	adds	r1, r2, r2
 80070da:	61b9      	str	r1, [r7, #24]
 80070dc:	415b      	adcs	r3, r3
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070e4:	4641      	mov	r1, r8
 80070e6:	1851      	adds	r1, r2, r1
 80070e8:	6139      	str	r1, [r7, #16]
 80070ea:	4649      	mov	r1, r9
 80070ec:	414b      	adcs	r3, r1
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070fc:	4659      	mov	r1, fp
 80070fe:	00cb      	lsls	r3, r1, #3
 8007100:	4651      	mov	r1, sl
 8007102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007106:	4651      	mov	r1, sl
 8007108:	00ca      	lsls	r2, r1, #3
 800710a:	4610      	mov	r0, r2
 800710c:	4619      	mov	r1, r3
 800710e:	4603      	mov	r3, r0
 8007110:	4642      	mov	r2, r8
 8007112:	189b      	adds	r3, r3, r2
 8007114:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007118:	464b      	mov	r3, r9
 800711a:	460a      	mov	r2, r1
 800711c:	eb42 0303 	adc.w	r3, r2, r3
 8007120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800712e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800713c:	4649      	mov	r1, r9
 800713e:	008b      	lsls	r3, r1, #2
 8007140:	4641      	mov	r1, r8
 8007142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007146:	4641      	mov	r1, r8
 8007148:	008a      	lsls	r2, r1, #2
 800714a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800714e:	f7f9 fe0b 	bl	8000d68 <__aeabi_uldivmod>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4611      	mov	r1, r2
 8007158:	4b38      	ldr	r3, [pc, #224]	@ (800723c <UART_SetConfig+0x4e4>)
 800715a:	fba3 2301 	umull	r2, r3, r3, r1
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	2264      	movs	r2, #100	@ 0x64
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	1acb      	subs	r3, r1, r3
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	3332      	adds	r3, #50	@ 0x32
 800716c:	4a33      	ldr	r2, [pc, #204]	@ (800723c <UART_SetConfig+0x4e4>)
 800716e:	fba2 2303 	umull	r2, r3, r2, r3
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007178:	441c      	add	r4, r3
 800717a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800717e:	2200      	movs	r2, #0
 8007180:	673b      	str	r3, [r7, #112]	@ 0x70
 8007182:	677a      	str	r2, [r7, #116]	@ 0x74
 8007184:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	1891      	adds	r1, r2, r2
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	415b      	adcs	r3, r3
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007198:	4641      	mov	r1, r8
 800719a:	1851      	adds	r1, r2, r1
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	4649      	mov	r1, r9
 80071a0:	414b      	adcs	r3, r1
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071b0:	4659      	mov	r1, fp
 80071b2:	00cb      	lsls	r3, r1, #3
 80071b4:	4651      	mov	r1, sl
 80071b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ba:	4651      	mov	r1, sl
 80071bc:	00ca      	lsls	r2, r1, #3
 80071be:	4610      	mov	r0, r2
 80071c0:	4619      	mov	r1, r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	4642      	mov	r2, r8
 80071c6:	189b      	adds	r3, r3, r2
 80071c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071ca:	464b      	mov	r3, r9
 80071cc:	460a      	mov	r2, r1
 80071ce:	eb42 0303 	adc.w	r3, r2, r3
 80071d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80071de:	667a      	str	r2, [r7, #100]	@ 0x64
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071ec:	4649      	mov	r1, r9
 80071ee:	008b      	lsls	r3, r1, #2
 80071f0:	4641      	mov	r1, r8
 80071f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071f6:	4641      	mov	r1, r8
 80071f8:	008a      	lsls	r2, r1, #2
 80071fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80071fe:	f7f9 fdb3 	bl	8000d68 <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4b0d      	ldr	r3, [pc, #52]	@ (800723c <UART_SetConfig+0x4e4>)
 8007208:	fba3 1302 	umull	r1, r3, r3, r2
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	2164      	movs	r1, #100	@ 0x64
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	3332      	adds	r3, #50	@ 0x32
 800721a:	4a08      	ldr	r2, [pc, #32]	@ (800723c <UART_SetConfig+0x4e4>)
 800721c:	fba2 2303 	umull	r2, r3, r2, r3
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	f003 020f 	and.w	r2, r3, #15
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4422      	add	r2, r4
 800722e:	609a      	str	r2, [r3, #8]
}
 8007230:	bf00      	nop
 8007232:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007236:	46bd      	mov	sp, r7
 8007238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800723c:	51eb851f 	.word	0x51eb851f

08007240 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007244:	4904      	ldr	r1, [pc, #16]	@ (8007258 <MX_FATFS_Init+0x18>)
 8007246:	4805      	ldr	r0, [pc, #20]	@ (800725c <MX_FATFS_Init+0x1c>)
 8007248:	f003 fb40 	bl	800a8cc <FATFS_LinkDriver>
 800724c:	4603      	mov	r3, r0
 800724e:	461a      	mov	r2, r3
 8007250:	4b03      	ldr	r3, [pc, #12]	@ (8007260 <MX_FATFS_Init+0x20>)
 8007252:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007254:	bf00      	nop
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20000f74 	.word	0x20000f74
 800725c:	20000018 	.word	0x20000018
 8007260:	20000f70 	.word	0x20000f70

08007264 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007264:	b480      	push	{r7}
 8007266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007268:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800726a:	4618      	mov	r0, r3
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f9d7 	bl	8007634 <USER_SPI_initialize>
 8007286:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	4603      	mov	r3, r0
 8007298:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	4618      	mov	r0, r3
 800729e:	f000 fab5 	bl	800780c <USER_SPI_status>
 80072a2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80072bc:	7bf8      	ldrb	r0, [r7, #15]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	f000 fab8 	bl	8007838 <USER_SPI_read>
 80072c8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	4603      	mov	r3, r0
 80072e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80072e2:	7bf8      	ldrb	r0, [r7, #15]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	f000 fb0b 	bl	8007904 <USER_SPI_write>
 80072ee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	603a      	str	r2, [r7, #0]
 8007302:	71fb      	strb	r3, [r7, #7]
 8007304:	460b      	mov	r3, r1
 8007306:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8007308:	79b9      	ldrb	r1, [r7, #6]
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fb74 	bl	80079fc <USER_SPI_ioctl>
 8007314:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007328:	f7fc fc50 	bl	8003bcc <HAL_GetTick>
 800732c:	4603      	mov	r3, r0
 800732e:	4a04      	ldr	r2, [pc, #16]	@ (8007340 <SPI_Timer_On+0x20>)
 8007330:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007332:	4a04      	ldr	r2, [pc, #16]	@ (8007344 <SPI_Timer_On+0x24>)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6013      	str	r3, [r2, #0]
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000f7c 	.word	0x20000f7c
 8007344:	20000f80 	.word	0x20000f80

08007348 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800734c:	f7fc fc3e 	bl	8003bcc <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	4b06      	ldr	r3, [pc, #24]	@ (800736c <SPI_Timer_Status+0x24>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	1ad2      	subs	r2, r2, r3
 8007358:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <SPI_Timer_Status+0x28>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	bf34      	ite	cc
 8007360:	2301      	movcc	r3, #1
 8007362:	2300      	movcs	r3, #0
 8007364:	b2db      	uxtb	r3, r3
}
 8007366:	4618      	mov	r0, r3
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000f7c 	.word	0x20000f7c
 8007370:	20000f80 	.word	0x20000f80

08007374 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af02      	add	r7, sp, #8
 800737a:	4603      	mov	r3, r0
 800737c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800737e:	f107 020f 	add.w	r2, r7, #15
 8007382:	1df9      	adds	r1, r7, #7
 8007384:	2332      	movs	r3, #50	@ 0x32
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	2301      	movs	r3, #1
 800738a:	4804      	ldr	r0, [pc, #16]	@ (800739c <xchg_spi+0x28>)
 800738c:	f7fe f9dd 	bl	800574a <HAL_SPI_TransmitReceive>
    return rxDat;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000ce0 	.word	0x20000ce0

080073a0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80073a0:	b590      	push	{r4, r7, lr}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	e00a      	b.n	80073c6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	18d4      	adds	r4, r2, r3
 80073b6:	20ff      	movs	r0, #255	@ 0xff
 80073b8:	f7ff ffdc 	bl	8007374 <xchg_spi>
 80073bc:	4603      	mov	r3, r0
 80073be:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d3f0      	bcc.n	80073b0 <rcvr_spi_multi+0x10>
	}
}
 80073ce:	bf00      	nop
 80073d0:	bf00      	nop
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd90      	pop	{r4, r7, pc}

080073d8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	4803      	ldr	r0, [pc, #12]	@ (80073fc <xmit_spi_multi+0x24>)
 80073ee:	f7fe f868 	bl	80054c2 <HAL_SPI_Transmit>
}
 80073f2:	bf00      	nop
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000ce0 	.word	0x20000ce0

08007400 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007408:	f7fc fbe0 	bl	8003bcc <HAL_GetTick>
 800740c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007412:	20ff      	movs	r0, #255	@ 0xff
 8007414:	f7ff ffae 	bl	8007374 <xchg_spi>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	2bff      	cmp	r3, #255	@ 0xff
 8007420:	d007      	beq.n	8007432 <wait_ready+0x32>
 8007422:	f7fc fbd3 	bl	8003bcc <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d8ef      	bhi.n	8007412 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	2bff      	cmp	r3, #255	@ 0xff
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800744c:	2201      	movs	r2, #1
 800744e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007452:	4804      	ldr	r0, [pc, #16]	@ (8007464 <despiselect+0x1c>)
 8007454:	f7fd fa18 	bl	8004888 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007458:	20ff      	movs	r0, #255	@ 0xff
 800745a:	f7ff ff8b 	bl	8007374 <xchg_spi>

}
 800745e:	bf00      	nop
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40020000 	.word	0x40020000

08007468 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800746c:	2200      	movs	r2, #0
 800746e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007472:	480a      	ldr	r0, [pc, #40]	@ (800749c <spiselect+0x34>)
 8007474:	f7fd fa08 	bl	8004888 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007478:	20ff      	movs	r0, #255	@ 0xff
 800747a:	f7ff ff7b 	bl	8007374 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800747e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007482:	f7ff ffbd 	bl	8007400 <wait_ready>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <spiselect+0x28>
 800748c:	2301      	movs	r3, #1
 800748e:	e002      	b.n	8007496 <spiselect+0x2e>

	despiselect();
 8007490:	f7ff ffda 	bl	8007448 <despiselect>
	return 0;	/* Timeout */
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	40020000 	.word	0x40020000

080074a0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80074aa:	20c8      	movs	r0, #200	@ 0xc8
 80074ac:	f7ff ff38 	bl	8007320 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80074b0:	20ff      	movs	r0, #255	@ 0xff
 80074b2:	f7ff ff5f 	bl	8007374 <xchg_spi>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2bff      	cmp	r3, #255	@ 0xff
 80074be:	d104      	bne.n	80074ca <rcvr_datablock+0x2a>
 80074c0:	f7ff ff42 	bl	8007348 <SPI_Timer_Status>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f2      	bne.n	80074b0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80074ce:	d001      	beq.n	80074d4 <rcvr_datablock+0x34>
 80074d0:	2300      	movs	r3, #0
 80074d2:	e00a      	b.n	80074ea <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff ff62 	bl	80073a0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80074dc:	20ff      	movs	r0, #255	@ 0xff
 80074de:	f7ff ff49 	bl	8007374 <xchg_spi>
 80074e2:	20ff      	movs	r0, #255	@ 0xff
 80074e4:	f7ff ff46 	bl	8007374 <xchg_spi>

	return 1;						/* Function succeeded */
 80074e8:	2301      	movs	r3, #1
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80074fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007502:	f7ff ff7d 	bl	8007400 <wait_ready>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <xmit_datablock+0x1e>
 800750c:	2300      	movs	r3, #0
 800750e:	e01e      	b.n	800754e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff ff2e 	bl	8007374 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	2bfd      	cmp	r3, #253	@ 0xfd
 800751c:	d016      	beq.n	800754c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800751e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff ff58 	bl	80073d8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007528:	20ff      	movs	r0, #255	@ 0xff
 800752a:	f7ff ff23 	bl	8007374 <xchg_spi>
 800752e:	20ff      	movs	r0, #255	@ 0xff
 8007530:	f7ff ff20 	bl	8007374 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007534:	20ff      	movs	r0, #255	@ 0xff
 8007536:	f7ff ff1d 	bl	8007374 <xchg_spi>
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2b05      	cmp	r3, #5
 8007546:	d001      	beq.n	800754c <xmit_datablock+0x5a>
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <xmit_datablock+0x5c>
	}
	return 1;
 800754c:	2301      	movs	r3, #1
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	4603      	mov	r3, r0
 800755e:	6039      	str	r1, [r7, #0]
 8007560:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007566:	2b00      	cmp	r3, #0
 8007568:	da0e      	bge.n	8007588 <send_cmd+0x32>
		cmd &= 0x7F;
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007570:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007572:	2100      	movs	r1, #0
 8007574:	2037      	movs	r0, #55	@ 0x37
 8007576:	f7ff ffee 	bl	8007556 <send_cmd>
 800757a:	4603      	mov	r3, r0
 800757c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d901      	bls.n	8007588 <send_cmd+0x32>
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	e051      	b.n	800762c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	2b0c      	cmp	r3, #12
 800758c:	d008      	beq.n	80075a0 <send_cmd+0x4a>
		despiselect();
 800758e:	f7ff ff5b 	bl	8007448 <despiselect>
		if (!spiselect()) return 0xFF;
 8007592:	f7ff ff69 	bl	8007468 <spiselect>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <send_cmd+0x4a>
 800759c:	23ff      	movs	r3, #255	@ 0xff
 800759e:	e045      	b.n	800762c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fee3 	bl	8007374 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	0e1b      	lsrs	r3, r3, #24
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff fedd 	bl	8007374 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	0c1b      	lsrs	r3, r3, #16
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fed7 	bl	8007374 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	0a1b      	lsrs	r3, r3, #8
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff fed1 	bl	8007374 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fecc 	bl	8007374 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <send_cmd+0x94>
 80075e6:	2395      	movs	r3, #149	@ 0x95
 80075e8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80075ea:	79fb      	ldrb	r3, [r7, #7]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d101      	bne.n	80075f4 <send_cmd+0x9e>
 80075f0:	2387      	movs	r3, #135	@ 0x87
 80075f2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff febc 	bl	8007374 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	2b0c      	cmp	r3, #12
 8007600:	d102      	bne.n	8007608 <send_cmd+0xb2>
 8007602:	20ff      	movs	r0, #255	@ 0xff
 8007604:	f7ff feb6 	bl	8007374 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007608:	230a      	movs	r3, #10
 800760a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800760c:	20ff      	movs	r0, #255	@ 0xff
 800760e:	f7ff feb1 	bl	8007374 <xchg_spi>
 8007612:	4603      	mov	r3, r0
 8007614:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007616:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800761a:	2b00      	cmp	r3, #0
 800761c:	da05      	bge.n	800762a <send_cmd+0xd4>
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	3b01      	subs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1f0      	bne.n	800760c <send_cmd+0xb6>

	return res;							/* Return received response */
 800762a:	7bbb      	ldrb	r3, [r7, #14]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <USER_SPI_initialize+0x14>
 8007644:	2301      	movs	r3, #1
 8007646:	e0d6      	b.n	80077f6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007648:	4b6d      	ldr	r3, [pc, #436]	@ (8007800 <USER_SPI_initialize+0x1cc>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <USER_SPI_initialize+0x2a>
 8007656:	4b6a      	ldr	r3, [pc, #424]	@ (8007800 <USER_SPI_initialize+0x1cc>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	e0cb      	b.n	80077f6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800765e:	4b69      	ldr	r3, [pc, #420]	@ (8007804 <USER_SPI_initialize+0x1d0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007668:	4b66      	ldr	r3, [pc, #408]	@ (8007804 <USER_SPI_initialize+0x1d0>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007670:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007672:	230a      	movs	r3, #10
 8007674:	73fb      	strb	r3, [r7, #15]
 8007676:	e005      	b.n	8007684 <USER_SPI_initialize+0x50>
 8007678:	20ff      	movs	r0, #255	@ 0xff
 800767a:	f7ff fe7b 	bl	8007374 <xchg_spi>
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	3b01      	subs	r3, #1
 8007682:	73fb      	strb	r3, [r7, #15]
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f6      	bne.n	8007678 <USER_SPI_initialize+0x44>

	ty = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800768e:	2100      	movs	r1, #0
 8007690:	2000      	movs	r0, #0
 8007692:	f7ff ff60 	bl	8007556 <send_cmd>
 8007696:	4603      	mov	r3, r0
 8007698:	2b01      	cmp	r3, #1
 800769a:	f040 808b 	bne.w	80077b4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800769e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80076a2:	f7ff fe3d 	bl	8007320 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80076a6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80076aa:	2008      	movs	r0, #8
 80076ac:	f7ff ff53 	bl	8007556 <send_cmd>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d151      	bne.n	800775a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
 80076ba:	e00d      	b.n	80076d8 <USER_SPI_initialize+0xa4>
 80076bc:	7bfc      	ldrb	r4, [r7, #15]
 80076be:	20ff      	movs	r0, #255	@ 0xff
 80076c0:	f7ff fe58 	bl	8007374 <xchg_spi>
 80076c4:	4603      	mov	r3, r0
 80076c6:	461a      	mov	r2, r3
 80076c8:	f104 0310 	add.w	r3, r4, #16
 80076cc:	443b      	add	r3, r7
 80076ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	3301      	adds	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d9ee      	bls.n	80076bc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80076de:	7abb      	ldrb	r3, [r7, #10]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d167      	bne.n	80077b4 <USER_SPI_initialize+0x180>
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	2baa      	cmp	r3, #170	@ 0xaa
 80076e8:	d164      	bne.n	80077b4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80076ea:	bf00      	nop
 80076ec:	f7ff fe2c 	bl	8007348 <SPI_Timer_Status>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <USER_SPI_initialize+0xd2>
 80076f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80076fa:	20a9      	movs	r0, #169	@ 0xa9
 80076fc:	f7ff ff2b 	bl	8007556 <send_cmd>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1f2      	bne.n	80076ec <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007706:	f7ff fe1f 	bl	8007348 <SPI_Timer_Status>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d051      	beq.n	80077b4 <USER_SPI_initialize+0x180>
 8007710:	2100      	movs	r1, #0
 8007712:	203a      	movs	r0, #58	@ 0x3a
 8007714:	f7ff ff1f 	bl	8007556 <send_cmd>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d14a      	bne.n	80077b4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
 8007722:	e00d      	b.n	8007740 <USER_SPI_initialize+0x10c>
 8007724:	7bfc      	ldrb	r4, [r7, #15]
 8007726:	20ff      	movs	r0, #255	@ 0xff
 8007728:	f7ff fe24 	bl	8007374 <xchg_spi>
 800772c:	4603      	mov	r3, r0
 800772e:	461a      	mov	r2, r3
 8007730:	f104 0310 	add.w	r3, r4, #16
 8007734:	443b      	add	r3, r7
 8007736:	f803 2c08 	strb.w	r2, [r3, #-8]
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	3301      	adds	r3, #1
 800773e:	73fb      	strb	r3, [r7, #15]
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b03      	cmp	r3, #3
 8007744:	d9ee      	bls.n	8007724 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007746:	7a3b      	ldrb	r3, [r7, #8]
 8007748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <USER_SPI_initialize+0x120>
 8007750:	230c      	movs	r3, #12
 8007752:	e000      	b.n	8007756 <USER_SPI_initialize+0x122>
 8007754:	2304      	movs	r3, #4
 8007756:	737b      	strb	r3, [r7, #13]
 8007758:	e02c      	b.n	80077b4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800775a:	2100      	movs	r1, #0
 800775c:	20a9      	movs	r0, #169	@ 0xa9
 800775e:	f7ff fefa 	bl	8007556 <send_cmd>
 8007762:	4603      	mov	r3, r0
 8007764:	2b01      	cmp	r3, #1
 8007766:	d804      	bhi.n	8007772 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007768:	2302      	movs	r3, #2
 800776a:	737b      	strb	r3, [r7, #13]
 800776c:	23a9      	movs	r3, #169	@ 0xa9
 800776e:	73bb      	strb	r3, [r7, #14]
 8007770:	e003      	b.n	800777a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007772:	2301      	movs	r3, #1
 8007774:	737b      	strb	r3, [r7, #13]
 8007776:	2301      	movs	r3, #1
 8007778:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800777a:	bf00      	nop
 800777c:	f7ff fde4 	bl	8007348 <SPI_Timer_Status>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d007      	beq.n	8007796 <USER_SPI_initialize+0x162>
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fee3 	bl	8007556 <send_cmd>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1f2      	bne.n	800777c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007796:	f7ff fdd7 	bl	8007348 <SPI_Timer_Status>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <USER_SPI_initialize+0x17c>
 80077a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80077a4:	2010      	movs	r0, #16
 80077a6:	f7ff fed6 	bl	8007556 <send_cmd>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <USER_SPI_initialize+0x180>
				ty = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80077b4:	4a14      	ldr	r2, [pc, #80]	@ (8007808 <USER_SPI_initialize+0x1d4>)
 80077b6:	7b7b      	ldrb	r3, [r7, #13]
 80077b8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80077ba:	f7ff fe45 	bl	8007448 <despiselect>

	if (ty) {			/* OK */
 80077be:	7b7b      	ldrb	r3, [r7, #13]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d012      	beq.n	80077ea <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80077c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007804 <USER_SPI_initialize+0x1d0>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80077ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007804 <USER_SPI_initialize+0x1d0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0210 	orr.w	r2, r2, #16
 80077d6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80077d8:	4b09      	ldr	r3, [pc, #36]	@ (8007800 <USER_SPI_initialize+0x1cc>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	f023 0301 	bic.w	r3, r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	4b06      	ldr	r3, [pc, #24]	@ (8007800 <USER_SPI_initialize+0x1cc>)
 80077e6:	701a      	strb	r2, [r3, #0]
 80077e8:	e002      	b.n	80077f0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80077ea:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <USER_SPI_initialize+0x1cc>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80077f0:	4b03      	ldr	r3, [pc, #12]	@ (8007800 <USER_SPI_initialize+0x1cc>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	b2db      	uxtb	r3, r3
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd90      	pop	{r4, r7, pc}
 80077fe:	bf00      	nop
 8007800:	2000002c 	.word	0x2000002c
 8007804:	20000ce0 	.word	0x20000ce0
 8007808:	20000f78 	.word	0x20000f78

0800780c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007816:	79fb      	ldrb	r3, [r7, #7]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <USER_SPI_status+0x14>
 800781c:	2301      	movs	r3, #1
 800781e:	e002      	b.n	8007826 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007820:	4b04      	ldr	r3, [pc, #16]	@ (8007834 <USER_SPI_status+0x28>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b2db      	uxtb	r3, r3
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	2000002c 	.word	0x2000002c

08007838 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	607a      	str	r2, [r7, #4]
 8007842:	603b      	str	r3, [r7, #0]
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d102      	bne.n	8007854 <USER_SPI_read+0x1c>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <USER_SPI_read+0x20>
 8007854:	2304      	movs	r3, #4
 8007856:	e04d      	b.n	80078f4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007858:	4b28      	ldr	r3, [pc, #160]	@ (80078fc <USER_SPI_read+0xc4>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <USER_SPI_read+0x32>
 8007866:	2303      	movs	r3, #3
 8007868:	e044      	b.n	80078f4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800786a:	4b25      	ldr	r3, [pc, #148]	@ (8007900 <USER_SPI_read+0xc8>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <USER_SPI_read+0x44>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	025b      	lsls	r3, r3, #9
 800787a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d111      	bne.n	80078a6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	2011      	movs	r0, #17
 8007886:	f7ff fe66 	bl	8007556 <send_cmd>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d129      	bne.n	80078e4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007894:	68b8      	ldr	r0, [r7, #8]
 8007896:	f7ff fe03 	bl	80074a0 <rcvr_datablock>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d021      	beq.n	80078e4 <USER_SPI_read+0xac>
			count = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	e01e      	b.n	80078e4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	2012      	movs	r0, #18
 80078aa:	f7ff fe54 	bl	8007556 <send_cmd>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d117      	bne.n	80078e4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80078b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078b8:	68b8      	ldr	r0, [r7, #8]
 80078ba:	f7ff fdf1 	bl	80074a0 <rcvr_datablock>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00a      	beq.n	80078da <USER_SPI_read+0xa2>
				buff += 512;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80078ca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	603b      	str	r3, [r7, #0]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1ed      	bne.n	80078b4 <USER_SPI_read+0x7c>
 80078d8:	e000      	b.n	80078dc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80078da:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80078dc:	2100      	movs	r1, #0
 80078de:	200c      	movs	r0, #12
 80078e0:	f7ff fe39 	bl	8007556 <send_cmd>
		}
	}
	despiselect();
 80078e4:	f7ff fdb0 	bl	8007448 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bf14      	ite	ne
 80078ee:	2301      	movne	r3, #1
 80078f0:	2300      	moveq	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	2000002c 	.word	0x2000002c
 8007900:	20000f78 	.word	0x20000f78

08007904 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d102      	bne.n	8007920 <USER_SPI_write+0x1c>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <USER_SPI_write+0x20>
 8007920:	2304      	movs	r3, #4
 8007922:	e063      	b.n	80079ec <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007924:	4b33      	ldr	r3, [pc, #204]	@ (80079f4 <USER_SPI_write+0xf0>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <USER_SPI_write+0x32>
 8007932:	2303      	movs	r3, #3
 8007934:	e05a      	b.n	80079ec <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007936:	4b2f      	ldr	r3, [pc, #188]	@ (80079f4 <USER_SPI_write+0xf0>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <USER_SPI_write+0x44>
 8007944:	2302      	movs	r3, #2
 8007946:	e051      	b.n	80079ec <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007948:	4b2b      	ldr	r3, [pc, #172]	@ (80079f8 <USER_SPI_write+0xf4>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <USER_SPI_write+0x56>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	025b      	lsls	r3, r3, #9
 8007958:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d110      	bne.n	8007982 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	2018      	movs	r0, #24
 8007964:	f7ff fdf7 	bl	8007556 <send_cmd>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d136      	bne.n	80079dc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800796e:	21fe      	movs	r1, #254	@ 0xfe
 8007970:	68b8      	ldr	r0, [r7, #8]
 8007972:	f7ff fdbe 	bl	80074f2 <xmit_datablock>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d02f      	beq.n	80079dc <USER_SPI_write+0xd8>
			count = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	e02c      	b.n	80079dc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007982:	4b1d      	ldr	r3, [pc, #116]	@ (80079f8 <USER_SPI_write+0xf4>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	f003 0306 	and.w	r3, r3, #6
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <USER_SPI_write+0x92>
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	2097      	movs	r0, #151	@ 0x97
 8007992:	f7ff fde0 	bl	8007556 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	2019      	movs	r0, #25
 800799a:	f7ff fddc 	bl	8007556 <send_cmd>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d11b      	bne.n	80079dc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80079a4:	21fc      	movs	r1, #252	@ 0xfc
 80079a6:	68b8      	ldr	r0, [r7, #8]
 80079a8:	f7ff fda3 	bl	80074f2 <xmit_datablock>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <USER_SPI_write+0xc4>
				buff += 512;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80079b8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	3b01      	subs	r3, #1
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1ee      	bne.n	80079a4 <USER_SPI_write+0xa0>
 80079c6:	e000      	b.n	80079ca <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80079c8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80079ca:	21fd      	movs	r1, #253	@ 0xfd
 80079cc:	2000      	movs	r0, #0
 80079ce:	f7ff fd90 	bl	80074f2 <xmit_datablock>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <USER_SPI_write+0xd8>
 80079d8:	2301      	movs	r3, #1
 80079da:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80079dc:	f7ff fd34 	bl	8007448 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf14      	ite	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	2300      	moveq	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	2000002c 	.word	0x2000002c
 80079f8:	20000f78 	.word	0x20000f78

080079fc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08c      	sub	sp, #48	@ 0x30
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	603a      	str	r2, [r7, #0]
 8007a06:	71fb      	strb	r3, [r7, #7]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <USER_SPI_ioctl+0x1a>
 8007a12:	2304      	movs	r3, #4
 8007a14:	e15a      	b.n	8007ccc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007a16:	4baf      	ldr	r3, [pc, #700]	@ (8007cd4 <USER_SPI_ioctl+0x2d8>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <USER_SPI_ioctl+0x2c>
 8007a24:	2303      	movs	r3, #3
 8007a26:	e151      	b.n	8007ccc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8007a2e:	79bb      	ldrb	r3, [r7, #6]
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	f200 8136 	bhi.w	8007ca2 <USER_SPI_ioctl+0x2a6>
 8007a36:	a201      	add	r2, pc, #4	@ (adr r2, 8007a3c <USER_SPI_ioctl+0x40>)
 8007a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3c:	08007a51 	.word	0x08007a51
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007ca3 	.word	0x08007ca3
 8007a48:	08007b11 	.word	0x08007b11
 8007a4c:	08007c07 	.word	0x08007c07
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007a50:	f7ff fd0a 	bl	8007468 <spiselect>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 8127 	beq.w	8007caa <USER_SPI_ioctl+0x2ae>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007a62:	e122      	b.n	8007caa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007a64:	2100      	movs	r1, #0
 8007a66:	2009      	movs	r0, #9
 8007a68:	f7ff fd75 	bl	8007556 <send_cmd>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f040 811d 	bne.w	8007cae <USER_SPI_ioctl+0x2b2>
 8007a74:	f107 030c 	add.w	r3, r7, #12
 8007a78:	2110      	movs	r1, #16
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fd10 	bl	80074a0 <rcvr_datablock>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8113 	beq.w	8007cae <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007a88:	7b3b      	ldrb	r3, [r7, #12]
 8007a8a:	099b      	lsrs	r3, r3, #6
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d111      	bne.n	8007ab6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007a92:	7d7b      	ldrb	r3, [r7, #21]
 8007a94:	461a      	mov	r2, r3
 8007a96:	7d3b      	ldrb	r3, [r7, #20]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	4413      	add	r3, r2
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	7cfb      	ldrb	r3, [r7, #19]
 8007aa0:	041b      	lsls	r3, r3, #16
 8007aa2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007aa6:	4413      	add	r3, r2
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	029a      	lsls	r2, r3, #10
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e028      	b.n	8007b08 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007ab6:	7c7b      	ldrb	r3, [r7, #17]
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	7dbb      	ldrb	r3, [r7, #22]
 8007ac0:	09db      	lsrs	r3, r3, #7
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	7d7b      	ldrb	r3, [r7, #21]
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 0306 	and.w	r3, r3, #6
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	4413      	add	r3, r2
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	3302      	adds	r3, #2
 8007ada:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007ade:	7d3b      	ldrb	r3, [r7, #20]
 8007ae0:	099b      	lsrs	r3, r3, #6
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	7cfb      	ldrb	r3, [r7, #19]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	441a      	add	r2, r3
 8007aec:	7cbb      	ldrb	r3, [r7, #18]
 8007aee:	029b      	lsls	r3, r3, #10
 8007af0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007af4:	4413      	add	r3, r2
 8007af6:	3301      	adds	r3, #1
 8007af8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007afa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007afe:	3b09      	subs	r3, #9
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	409a      	lsls	r2, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007b0e:	e0ce      	b.n	8007cae <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007b10:	4b71      	ldr	r3, [pc, #452]	@ (8007cd8 <USER_SPI_ioctl+0x2dc>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d031      	beq.n	8007b80 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	208d      	movs	r0, #141	@ 0x8d
 8007b20:	f7ff fd19 	bl	8007556 <send_cmd>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f040 80c3 	bne.w	8007cb2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007b2c:	20ff      	movs	r0, #255	@ 0xff
 8007b2e:	f7ff fc21 	bl	8007374 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007b32:	f107 030c 	add.w	r3, r7, #12
 8007b36:	2110      	movs	r1, #16
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fcb1 	bl	80074a0 <rcvr_datablock>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 80b6 	beq.w	8007cb2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007b46:	2330      	movs	r3, #48	@ 0x30
 8007b48:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007b4c:	e007      	b.n	8007b5e <USER_SPI_ioctl+0x162>
 8007b4e:	20ff      	movs	r0, #255	@ 0xff
 8007b50:	f7ff fc10 	bl	8007374 <xchg_spi>
 8007b54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007b5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1f3      	bne.n	8007b4e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007b66:	7dbb      	ldrb	r3, [r7, #22]
 8007b68:	091b      	lsrs	r3, r3, #4
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	2310      	movs	r3, #16
 8007b70:	fa03 f202 	lsl.w	r2, r3, r2
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007b7e:	e098      	b.n	8007cb2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007b80:	2100      	movs	r1, #0
 8007b82:	2009      	movs	r0, #9
 8007b84:	f7ff fce7 	bl	8007556 <send_cmd>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 8091 	bne.w	8007cb2 <USER_SPI_ioctl+0x2b6>
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	2110      	movs	r1, #16
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff fc82 	bl	80074a0 <rcvr_datablock>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 8087 	beq.w	8007cb2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8007cd8 <USER_SPI_ioctl+0x2dc>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d012      	beq.n	8007bd6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007bb0:	7dbb      	ldrb	r3, [r7, #22]
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007bb8:	7dfa      	ldrb	r2, [r7, #23]
 8007bba:	09d2      	lsrs	r2, r2, #7
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	7e7b      	ldrb	r3, [r7, #25]
 8007bc4:	099b      	lsrs	r3, r3, #6
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e013      	b.n	8007bfe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007bd6:	7dbb      	ldrb	r3, [r7, #22]
 8007bd8:	109b      	asrs	r3, r3, #2
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f003 031f 	and.w	r3, r3, #31
 8007be0:	3301      	adds	r3, #1
 8007be2:	7dfa      	ldrb	r2, [r7, #23]
 8007be4:	00d2      	lsls	r2, r2, #3
 8007be6:	f002 0218 	and.w	r2, r2, #24
 8007bea:	7df9      	ldrb	r1, [r7, #23]
 8007bec:	0949      	lsrs	r1, r1, #5
 8007bee:	b2c9      	uxtb	r1, r1
 8007bf0:	440a      	add	r2, r1
 8007bf2:	3201      	adds	r2, #1
 8007bf4:	fb02 f303 	mul.w	r3, r2, r3
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007c04:	e055      	b.n	8007cb2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007c06:	4b34      	ldr	r3, [pc, #208]	@ (8007cd8 <USER_SPI_ioctl+0x2dc>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	f003 0306 	and.w	r3, r3, #6
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d051      	beq.n	8007cb6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007c12:	f107 020c 	add.w	r2, r7, #12
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	210b      	movs	r1, #11
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff feee 	bl	80079fc <USER_SPI_ioctl>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d149      	bne.n	8007cba <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007c26:	7b3b      	ldrb	r3, [r7, #12]
 8007c28:	099b      	lsrs	r3, r3, #6
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <USER_SPI_ioctl+0x23e>
 8007c30:	7dbb      	ldrb	r3, [r7, #22]
 8007c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d041      	beq.n	8007cbe <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	623b      	str	r3, [r7, #32]
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007c4a:	4b23      	ldr	r3, [pc, #140]	@ (8007cd8 <USER_SPI_ioctl+0x2dc>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d105      	bne.n	8007c62 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	025b      	lsls	r3, r3, #9
 8007c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	025b      	lsls	r3, r3, #9
 8007c60:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c64:	2020      	movs	r0, #32
 8007c66:	f7ff fc76 	bl	8007556 <send_cmd>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d128      	bne.n	8007cc2 <USER_SPI_ioctl+0x2c6>
 8007c70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c72:	2021      	movs	r0, #33	@ 0x21
 8007c74:	f7ff fc6f 	bl	8007556 <send_cmd>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d121      	bne.n	8007cc2 <USER_SPI_ioctl+0x2c6>
 8007c7e:	2100      	movs	r1, #0
 8007c80:	2026      	movs	r0, #38	@ 0x26
 8007c82:	f7ff fc68 	bl	8007556 <send_cmd>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11a      	bne.n	8007cc2 <USER_SPI_ioctl+0x2c6>
 8007c8c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007c90:	f7ff fbb6 	bl	8007400 <wait_ready>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d013      	beq.n	8007cc2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007ca0:	e00f      	b.n	8007cc2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007ca2:	2304      	movs	r3, #4
 8007ca4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007ca8:	e00c      	b.n	8007cc4 <USER_SPI_ioctl+0x2c8>
		break;
 8007caa:	bf00      	nop
 8007cac:	e00a      	b.n	8007cc4 <USER_SPI_ioctl+0x2c8>
		break;
 8007cae:	bf00      	nop
 8007cb0:	e008      	b.n	8007cc4 <USER_SPI_ioctl+0x2c8>
		break;
 8007cb2:	bf00      	nop
 8007cb4:	e006      	b.n	8007cc4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007cb6:	bf00      	nop
 8007cb8:	e004      	b.n	8007cc4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007cba:	bf00      	nop
 8007cbc:	e002      	b.n	8007cc4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007cbe:	bf00      	nop
 8007cc0:	e000      	b.n	8007cc4 <USER_SPI_ioctl+0x2c8>
		break;
 8007cc2:	bf00      	nop
	}

	despiselect();
 8007cc4:	f7ff fbc0 	bl	8007448 <despiselect>

	return res;
 8007cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3730      	adds	r7, #48	@ 0x30
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	2000002c 	.word	0x2000002c
 8007cd8:	20000f78 	.word	0x20000f78

08007cdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	4a08      	ldr	r2, [pc, #32]	@ (8007d0c <disk_status+0x30>)
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	79fa      	ldrb	r2, [r7, #7]
 8007cf4:	4905      	ldr	r1, [pc, #20]	@ (8007d0c <disk_status+0x30>)
 8007cf6:	440a      	add	r2, r1
 8007cf8:	7a12      	ldrb	r2, [r2, #8]
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4798      	blx	r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20000fac 	.word	0x20000fac

08007d10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	4a0e      	ldr	r2, [pc, #56]	@ (8007d5c <disk_initialize+0x4c>)
 8007d22:	5cd3      	ldrb	r3, [r2, r3]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d114      	bne.n	8007d52 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d5c <disk_initialize+0x4c>)
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	79fa      	ldrb	r2, [r7, #7]
 8007d36:	4909      	ldr	r1, [pc, #36]	@ (8007d5c <disk_initialize+0x4c>)
 8007d38:	440a      	add	r2, r1
 8007d3a:	7a12      	ldrb	r2, [r2, #8]
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d103      	bne.n	8007d52 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	4a03      	ldr	r2, [pc, #12]	@ (8007d5c <disk_initialize+0x4c>)
 8007d4e:	2101      	movs	r1, #1
 8007d50:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000fac 	.word	0x20000fac

08007d60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	4a0a      	ldr	r2, [pc, #40]	@ (8007d9c <disk_read+0x3c>)
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	689c      	ldr	r4, [r3, #8]
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	4a07      	ldr	r2, [pc, #28]	@ (8007d9c <disk_read+0x3c>)
 8007d80:	4413      	add	r3, r2
 8007d82:	7a18      	ldrb	r0, [r3, #8]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	47a0      	blx	r4
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd90      	pop	{r4, r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000fac 	.word	0x20000fac

08007da0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007da0:	b590      	push	{r4, r7, lr}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	607a      	str	r2, [r7, #4]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	4a0a      	ldr	r2, [pc, #40]	@ (8007ddc <disk_write+0x3c>)
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68dc      	ldr	r4, [r3, #12]
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	4a07      	ldr	r2, [pc, #28]	@ (8007ddc <disk_write+0x3c>)
 8007dc0:	4413      	add	r3, r2
 8007dc2:	7a18      	ldrb	r0, [r3, #8]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	68b9      	ldr	r1, [r7, #8]
 8007dca:	47a0      	blx	r4
 8007dcc:	4603      	mov	r3, r0
 8007dce:	75fb      	strb	r3, [r7, #23]
  return res;
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd90      	pop	{r4, r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000fac 	.word	0x20000fac

08007de0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	603a      	str	r2, [r7, #0]
 8007dea:	71fb      	strb	r3, [r7, #7]
 8007dec:	460b      	mov	r3, r1
 8007dee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	4a09      	ldr	r2, [pc, #36]	@ (8007e18 <disk_ioctl+0x38>)
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	79fa      	ldrb	r2, [r7, #7]
 8007dfe:	4906      	ldr	r1, [pc, #24]	@ (8007e18 <disk_ioctl+0x38>)
 8007e00:	440a      	add	r2, r1
 8007e02:	7a10      	ldrb	r0, [r2, #8]
 8007e04:	79b9      	ldrb	r1, [r7, #6]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	4798      	blx	r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	20000fac 	.word	0x20000fac

08007e1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3301      	adds	r3, #1
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e2c:	89fb      	ldrh	r3, [r7, #14]
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	b21a      	sxth	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	b21b      	sxth	r3, r3
 8007e3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007e3e:	89fb      	ldrh	r3, [r7, #14]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3303      	adds	r3, #3
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	3202      	adds	r2, #2
 8007e64:	7812      	ldrb	r2, [r2, #0]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	3201      	adds	r2, #1
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	7812      	ldrb	r2, [r2, #0]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
	return rv;
 8007e84:	68fb      	ldr	r3, [r7, #12]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	887a      	ldrh	r2, [r7, #2]
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	887b      	ldrh	r3, [r7, #2]
 8007eac:	0a1b      	lsrs	r3, r3, #8
 8007eae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	887a      	ldrh	r2, [r7, #2]
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	701a      	strb	r2, [r3, #0]
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	0a1b      	lsrs	r3, r3, #8
 8007ee2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	607a      	str	r2, [r7, #4]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	701a      	strb	r2, [r3, #0]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	0a1b      	lsrs	r3, r3, #8
 8007ef4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	0a1b      	lsrs	r3, r3, #8
 8007f06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00d      	beq.n	8007f56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	1c53      	adds	r3, r2, #1
 8007f3e:	613b      	str	r3, [r7, #16]
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	1c59      	adds	r1, r3, #1
 8007f44:	6179      	str	r1, [r7, #20]
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	607b      	str	r3, [r7, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1f1      	bne.n	8007f3a <mem_cpy+0x1a>
	}
}
 8007f56:	bf00      	nop
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007f62:	b480      	push	{r7}
 8007f64:	b087      	sub	sp, #28
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	617a      	str	r2, [r7, #20]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	607b      	str	r3, [r7, #4]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1f3      	bne.n	8007f72 <mem_set+0x10>
}
 8007f8a:	bf00      	nop
 8007f8c:	bf00      	nop
 8007f8e:	371c      	adds	r7, #28
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007f98:	b480      	push	{r7}
 8007f9a:	b089      	sub	sp, #36	@ 0x24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	61fb      	str	r3, [r7, #28]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	61fa      	str	r2, [r7, #28]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	61ba      	str	r2, [r7, #24]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	1acb      	subs	r3, r1, r3
 8007fc4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	607b      	str	r3, [r7, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <mem_cmp+0x40>
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0eb      	beq.n	8007fb0 <mem_cmp+0x18>

	return r;
 8007fd8:	697b      	ldr	r3, [r7, #20]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3724      	adds	r7, #36	@ 0x24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ff0:	e002      	b.n	8007ff8 <chk_chr+0x12>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	607b      	str	r3, [r7, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <chk_chr+0x26>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	461a      	mov	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	4293      	cmp	r3, r2
 800800a:	d1f2      	bne.n	8007ff2 <chk_chr+0xc>
	return *str;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	781b      	ldrb	r3, [r3, #0]
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008026:	2300      	movs	r3, #0
 8008028:	60bb      	str	r3, [r7, #8]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	e029      	b.n	8008084 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008030:	4a27      	ldr	r2, [pc, #156]	@ (80080d0 <chk_lock+0xb4>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	4413      	add	r3, r2
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01d      	beq.n	800807a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800803e:	4a24      	ldr	r2, [pc, #144]	@ (80080d0 <chk_lock+0xb4>)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	4413      	add	r3, r2
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d116      	bne.n	800807e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008050:	4a1f      	ldr	r2, [pc, #124]	@ (80080d0 <chk_lock+0xb4>)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	011b      	lsls	r3, r3, #4
 8008056:	4413      	add	r3, r2
 8008058:	3304      	adds	r3, #4
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008060:	429a      	cmp	r2, r3
 8008062:	d10c      	bne.n	800807e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008064:	4a1a      	ldr	r2, [pc, #104]	@ (80080d0 <chk_lock+0xb4>)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	4413      	add	r3, r2
 800806c:	3308      	adds	r3, #8
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008074:	429a      	cmp	r2, r3
 8008076:	d102      	bne.n	800807e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008078:	e007      	b.n	800808a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800807a:	2301      	movs	r3, #1
 800807c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d9d2      	bls.n	8008030 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d109      	bne.n	80080a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <chk_lock+0x80>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d101      	bne.n	80080a0 <chk_lock+0x84>
 800809c:	2300      	movs	r3, #0
 800809e:	e010      	b.n	80080c2 <chk_lock+0xa6>
 80080a0:	2312      	movs	r3, #18
 80080a2:	e00e      	b.n	80080c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d108      	bne.n	80080bc <chk_lock+0xa0>
 80080aa:	4a09      	ldr	r2, [pc, #36]	@ (80080d0 <chk_lock+0xb4>)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	4413      	add	r3, r2
 80080b2:	330c      	adds	r3, #12
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ba:	d101      	bne.n	80080c0 <chk_lock+0xa4>
 80080bc:	2310      	movs	r3, #16
 80080be:	e000      	b.n	80080c2 <chk_lock+0xa6>
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20000f8c 	.word	0x20000f8c

080080d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080da:	2300      	movs	r3, #0
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	e002      	b.n	80080e6 <enq_lock+0x12>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3301      	adds	r3, #1
 80080e4:	607b      	str	r3, [r7, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d806      	bhi.n	80080fa <enq_lock+0x26>
 80080ec:	4a09      	ldr	r2, [pc, #36]	@ (8008114 <enq_lock+0x40>)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	4413      	add	r3, r2
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1f2      	bne.n	80080e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	bf14      	ite	ne
 8008100:	2301      	movne	r3, #1
 8008102:	2300      	moveq	r3, #0
 8008104:	b2db      	uxtb	r3, r3
}
 8008106:	4618      	mov	r0, r3
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20000f8c 	.word	0x20000f8c

08008118 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	e01f      	b.n	8008168 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008128:	4a41      	ldr	r2, [pc, #260]	@ (8008230 <inc_lock+0x118>)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	4413      	add	r3, r2
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d113      	bne.n	8008162 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800813a:	4a3d      	ldr	r2, [pc, #244]	@ (8008230 <inc_lock+0x118>)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	011b      	lsls	r3, r3, #4
 8008140:	4413      	add	r3, r2
 8008142:	3304      	adds	r3, #4
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800814a:	429a      	cmp	r2, r3
 800814c:	d109      	bne.n	8008162 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800814e:	4a38      	ldr	r2, [pc, #224]	@ (8008230 <inc_lock+0x118>)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	4413      	add	r3, r2
 8008156:	3308      	adds	r3, #8
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800815e:	429a      	cmp	r2, r3
 8008160:	d006      	beq.n	8008170 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d9dc      	bls.n	8008128 <inc_lock+0x10>
 800816e:	e000      	b.n	8008172 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008170:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d132      	bne.n	80081de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e002      	b.n	8008184 <inc_lock+0x6c>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d806      	bhi.n	8008198 <inc_lock+0x80>
 800818a:	4a29      	ldr	r2, [pc, #164]	@ (8008230 <inc_lock+0x118>)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	4413      	add	r3, r2
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1f2      	bne.n	800817e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b02      	cmp	r3, #2
 800819c:	d101      	bne.n	80081a2 <inc_lock+0x8a>
 800819e:	2300      	movs	r3, #0
 80081a0:	e040      	b.n	8008224 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	4922      	ldr	r1, [pc, #136]	@ (8008230 <inc_lock+0x118>)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	440b      	add	r3, r1
 80081ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	491e      	ldr	r1, [pc, #120]	@ (8008230 <inc_lock+0x118>)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	440b      	add	r3, r1
 80081bc:	3304      	adds	r3, #4
 80081be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	695a      	ldr	r2, [r3, #20]
 80081c4:	491a      	ldr	r1, [pc, #104]	@ (8008230 <inc_lock+0x118>)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	440b      	add	r3, r1
 80081cc:	3308      	adds	r3, #8
 80081ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80081d0:	4a17      	ldr	r2, [pc, #92]	@ (8008230 <inc_lock+0x118>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	4413      	add	r3, r2
 80081d8:	330c      	adds	r3, #12
 80081da:	2200      	movs	r2, #0
 80081dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <inc_lock+0xe0>
 80081e4:	4a12      	ldr	r2, [pc, #72]	@ (8008230 <inc_lock+0x118>)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	011b      	lsls	r3, r3, #4
 80081ea:	4413      	add	r3, r2
 80081ec:	330c      	adds	r3, #12
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <inc_lock+0xe0>
 80081f4:	2300      	movs	r3, #0
 80081f6:	e015      	b.n	8008224 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d108      	bne.n	8008210 <inc_lock+0xf8>
 80081fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008230 <inc_lock+0x118>)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	4413      	add	r3, r2
 8008206:	330c      	adds	r3, #12
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	3301      	adds	r3, #1
 800820c:	b29a      	uxth	r2, r3
 800820e:	e001      	b.n	8008214 <inc_lock+0xfc>
 8008210:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008214:	4906      	ldr	r1, [pc, #24]	@ (8008230 <inc_lock+0x118>)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	011b      	lsls	r3, r3, #4
 800821a:	440b      	add	r3, r1
 800821c:	330c      	adds	r3, #12
 800821e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3301      	adds	r3, #1
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	20000f8c 	.word	0x20000f8c

08008234 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3b01      	subs	r3, #1
 8008240:	607b      	str	r3, [r7, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d825      	bhi.n	8008294 <dec_lock+0x60>
		n = Files[i].ctr;
 8008248:	4a17      	ldr	r2, [pc, #92]	@ (80082a8 <dec_lock+0x74>)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	4413      	add	r3, r2
 8008250:	330c      	adds	r3, #12
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008256:	89fb      	ldrh	r3, [r7, #14]
 8008258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800825c:	d101      	bne.n	8008262 <dec_lock+0x2e>
 800825e:	2300      	movs	r3, #0
 8008260:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008262:	89fb      	ldrh	r3, [r7, #14]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <dec_lock+0x3a>
 8008268:	89fb      	ldrh	r3, [r7, #14]
 800826a:	3b01      	subs	r3, #1
 800826c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800826e:	4a0e      	ldr	r2, [pc, #56]	@ (80082a8 <dec_lock+0x74>)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	4413      	add	r3, r2
 8008276:	330c      	adds	r3, #12
 8008278:	89fa      	ldrh	r2, [r7, #14]
 800827a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d105      	bne.n	800828e <dec_lock+0x5a>
 8008282:	4a09      	ldr	r2, [pc, #36]	@ (80082a8 <dec_lock+0x74>)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	011b      	lsls	r3, r3, #4
 8008288:	4413      	add	r3, r2
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	737b      	strb	r3, [r7, #13]
 8008292:	e001      	b.n	8008298 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008294:	2302      	movs	r3, #2
 8008296:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008298:	7b7b      	ldrb	r3, [r7, #13]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	20000f8c 	.word	0x20000f8c

080082ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	e010      	b.n	80082dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80082ba:	4a0d      	ldr	r2, [pc, #52]	@ (80082f0 <clear_lock+0x44>)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	4413      	add	r3, r2
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d105      	bne.n	80082d6 <clear_lock+0x2a>
 80082ca:	4a09      	ldr	r2, [pc, #36]	@ (80082f0 <clear_lock+0x44>)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	4413      	add	r3, r2
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d9eb      	bls.n	80082ba <clear_lock+0xe>
	}
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	20000f8c 	.word	0x20000f8c

080082f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	78db      	ldrb	r3, [r3, #3]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d034      	beq.n	8008372 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	7858      	ldrb	r0, [r3, #1]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008318:	2301      	movs	r3, #1
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	f7ff fd40 	bl	8007da0 <disk_write>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008326:	2301      	movs	r3, #1
 8008328:	73fb      	strb	r3, [r7, #15]
 800832a:	e022      	b.n	8008372 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	1ad2      	subs	r2, r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	429a      	cmp	r2, r3
 8008340:	d217      	bcs.n	8008372 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	789b      	ldrb	r3, [r3, #2]
 8008346:	613b      	str	r3, [r7, #16]
 8008348:	e010      	b.n	800836c <sync_window+0x78>
					wsect += fs->fsize;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4413      	add	r3, r2
 8008352:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7858      	ldrb	r0, [r3, #1]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800835e:	2301      	movs	r3, #1
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	f7ff fd1d 	bl	8007da0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	3b01      	subs	r3, #1
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d8eb      	bhi.n	800834a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d01b      	beq.n	80083cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff ffad 	bl	80082f4 <sync_window>
 800839a:	4603      	mov	r3, r0
 800839c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d113      	bne.n	80083cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	7858      	ldrb	r0, [r3, #1]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083ae:	2301      	movs	r3, #1
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	f7ff fcd5 	bl	8007d60 <disk_read>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295
 80083c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7ff ff87 	bl	80082f4 <sync_window>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d158      	bne.n	80084a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d148      	bne.n	800848a <sync_fs+0xb2>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	791b      	ldrb	r3, [r3, #4]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d144      	bne.n	800848a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3330      	adds	r3, #48	@ 0x30
 8008404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008408:	2100      	movs	r1, #0
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff fda9 	bl	8007f62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3330      	adds	r3, #48	@ 0x30
 8008414:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008418:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fd38 	bl	8007e92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3330      	adds	r3, #48	@ 0x30
 8008426:	4921      	ldr	r1, [pc, #132]	@ (80084ac <sync_fs+0xd4>)
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff fd4d 	bl	8007ec8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3330      	adds	r3, #48	@ 0x30
 8008432:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008436:	491e      	ldr	r1, [pc, #120]	@ (80084b0 <sync_fs+0xd8>)
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff fd45 	bl	8007ec8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3330      	adds	r3, #48	@ 0x30
 8008442:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7ff fd3b 	bl	8007ec8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3330      	adds	r3, #48	@ 0x30
 8008456:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f7ff fd31 	bl	8007ec8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	7858      	ldrb	r0, [r3, #1]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847e:	2301      	movs	r3, #1
 8008480:	f7ff fc8e 	bl	8007da0 <disk_write>
			fs->fsi_flag = 0;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	785b      	ldrb	r3, [r3, #1]
 800848e:	2200      	movs	r2, #0
 8008490:	2100      	movs	r1, #0
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff fca4 	bl	8007de0 <disk_ioctl>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <sync_fs+0xca>
 800849e:	2301      	movs	r3, #1
 80084a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	41615252 	.word	0x41615252
 80084b0:	61417272 	.word	0x61417272

080084b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	3b02      	subs	r3, #2
 80084c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	3b02      	subs	r3, #2
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d301      	bcc.n	80084d4 <clust2sect+0x20>
 80084d0:	2300      	movs	r3, #0
 80084d2:	e008      	b.n	80084e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	895b      	ldrh	r3, [r3, #10]
 80084d8:	461a      	mov	r2, r3
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	fb03 f202 	mul.w	r2, r3, r2
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e4:	4413      	add	r3, r2
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b086      	sub	sp, #24
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d904      	bls.n	8008512 <get_fat+0x20>
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d302      	bcc.n	8008518 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008512:	2301      	movs	r3, #1
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	e08e      	b.n	8008636 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008518:	f04f 33ff 	mov.w	r3, #4294967295
 800851c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b03      	cmp	r3, #3
 8008524:	d061      	beq.n	80085ea <get_fat+0xf8>
 8008526:	2b03      	cmp	r3, #3
 8008528:	dc7b      	bgt.n	8008622 <get_fat+0x130>
 800852a:	2b01      	cmp	r3, #1
 800852c:	d002      	beq.n	8008534 <get_fat+0x42>
 800852e:	2b02      	cmp	r3, #2
 8008530:	d041      	beq.n	80085b6 <get_fat+0xc4>
 8008532:	e076      	b.n	8008622 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	085b      	lsrs	r3, r3, #1
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	4413      	add	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	6a1a      	ldr	r2, [r3, #32]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	0a5b      	lsrs	r3, r3, #9
 800854a:	4413      	add	r3, r2
 800854c:	4619      	mov	r1, r3
 800854e:	6938      	ldr	r0, [r7, #16]
 8008550:	f7ff ff14 	bl	800837c <move_window>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d166      	bne.n	8008628 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	60fa      	str	r2, [r7, #12]
 8008560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	4413      	add	r3, r2
 8008568:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800856c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	6a1a      	ldr	r2, [r3, #32]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	0a5b      	lsrs	r3, r3, #9
 8008576:	4413      	add	r3, r2
 8008578:	4619      	mov	r1, r3
 800857a:	6938      	ldr	r0, [r7, #16]
 800857c:	f7ff fefe 	bl	800837c <move_window>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d152      	bne.n	800862c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4413      	add	r3, r2
 8008590:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4313      	orrs	r3, r2
 800859a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <get_fat+0xba>
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	091b      	lsrs	r3, r3, #4
 80085aa:	e002      	b.n	80085b2 <get_fat+0xc0>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085b2:	617b      	str	r3, [r7, #20]
			break;
 80085b4:	e03f      	b.n	8008636 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	6a1a      	ldr	r2, [r3, #32]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	0a1b      	lsrs	r3, r3, #8
 80085be:	4413      	add	r3, r2
 80085c0:	4619      	mov	r1, r3
 80085c2:	6938      	ldr	r0, [r7, #16]
 80085c4:	f7ff feda 	bl	800837c <move_window>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d130      	bne.n	8008630 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80085dc:	4413      	add	r3, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fc1c 	bl	8007e1c <ld_word>
 80085e4:	4603      	mov	r3, r0
 80085e6:	617b      	str	r3, [r7, #20]
			break;
 80085e8:	e025      	b.n	8008636 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	6a1a      	ldr	r2, [r3, #32]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	09db      	lsrs	r3, r3, #7
 80085f2:	4413      	add	r3, r2
 80085f4:	4619      	mov	r1, r3
 80085f6:	6938      	ldr	r0, [r7, #16]
 80085f8:	f7ff fec0 	bl	800837c <move_window>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d118      	bne.n	8008634 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008610:	4413      	add	r3, r2
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff fc1a 	bl	8007e4c <ld_dword>
 8008618:	4603      	mov	r3, r0
 800861a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800861e:	617b      	str	r3, [r7, #20]
			break;
 8008620:	e009      	b.n	8008636 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008622:	2301      	movs	r3, #1
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	e006      	b.n	8008636 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008628:	bf00      	nop
 800862a:	e004      	b.n	8008636 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800862c:	bf00      	nop
 800862e:	e002      	b.n	8008636 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008630:	bf00      	nop
 8008632:	e000      	b.n	8008636 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008634:	bf00      	nop
		}
	}

	return val;
 8008636:	697b      	ldr	r3, [r7, #20]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008640:	b590      	push	{r4, r7, lr}
 8008642:	b089      	sub	sp, #36	@ 0x24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800864c:	2302      	movs	r3, #2
 800864e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2b01      	cmp	r3, #1
 8008654:	f240 80d9 	bls.w	800880a <put_fat+0x1ca>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	429a      	cmp	r2, r3
 8008660:	f080 80d3 	bcs.w	800880a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b03      	cmp	r3, #3
 800866a:	f000 8096 	beq.w	800879a <put_fat+0x15a>
 800866e:	2b03      	cmp	r3, #3
 8008670:	f300 80cb 	bgt.w	800880a <put_fat+0x1ca>
 8008674:	2b01      	cmp	r3, #1
 8008676:	d002      	beq.n	800867e <put_fat+0x3e>
 8008678:	2b02      	cmp	r3, #2
 800867a:	d06e      	beq.n	800875a <put_fat+0x11a>
 800867c:	e0c5      	b.n	800880a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	085b      	lsrs	r3, r3, #1
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	4413      	add	r3, r2
 800868a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a1a      	ldr	r2, [r3, #32]
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	0a5b      	lsrs	r3, r3, #9
 8008694:	4413      	add	r3, r2
 8008696:	4619      	mov	r1, r3
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff fe6f 	bl	800837c <move_window>
 800869e:	4603      	mov	r3, r0
 80086a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086a2:	7ffb      	ldrb	r3, [r7, #31]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f040 80a9 	bne.w	80087fc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	1c59      	adds	r1, r3, #1
 80086b4:	61b9      	str	r1, [r7, #24]
 80086b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ba:	4413      	add	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00d      	beq.n	80086e4 <put_fat+0xa4>
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	b25b      	sxtb	r3, r3
 80086ce:	f003 030f 	and.w	r3, r3, #15
 80086d2:	b25a      	sxtb	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	b25b      	sxtb	r3, r3
 80086dc:	4313      	orrs	r3, r2
 80086de:	b25b      	sxtb	r3, r3
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	e001      	b.n	80086e8 <put_fat+0xa8>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a1a      	ldr	r2, [r3, #32]
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	0a5b      	lsrs	r3, r3, #9
 80086fa:	4413      	add	r3, r2
 80086fc:	4619      	mov	r1, r3
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7ff fe3c 	bl	800837c <move_window>
 8008704:	4603      	mov	r3, r0
 8008706:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008708:	7ffb      	ldrb	r3, [r7, #31]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d178      	bne.n	8008800 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871a:	4413      	add	r3, r2
 800871c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <put_fat+0xf0>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	091b      	lsrs	r3, r3, #4
 800872c:	b2db      	uxtb	r3, r3
 800872e:	e00e      	b.n	800874e <put_fat+0x10e>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	b25b      	sxtb	r3, r3
 8008736:	f023 030f 	bic.w	r3, r3, #15
 800873a:	b25a      	sxtb	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	0a1b      	lsrs	r3, r3, #8
 8008740:	b25b      	sxtb	r3, r3
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	b25b      	sxtb	r3, r3
 8008748:	4313      	orrs	r3, r2
 800874a:	b25b      	sxtb	r3, r3
 800874c:	b2db      	uxtb	r3, r3
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2201      	movs	r2, #1
 8008756:	70da      	strb	r2, [r3, #3]
			break;
 8008758:	e057      	b.n	800880a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1a      	ldr	r2, [r3, #32]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	0a1b      	lsrs	r3, r3, #8
 8008762:	4413      	add	r3, r2
 8008764:	4619      	mov	r1, r3
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f7ff fe08 	bl	800837c <move_window>
 800876c:	4603      	mov	r3, r0
 800876e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008770:	7ffb      	ldrb	r3, [r7, #31]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d146      	bne.n	8008804 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008784:	4413      	add	r3, r2
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	b292      	uxth	r2, r2
 800878a:	4611      	mov	r1, r2
 800878c:	4618      	mov	r0, r3
 800878e:	f7ff fb80 	bl	8007e92 <st_word>
			fs->wflag = 1;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2201      	movs	r2, #1
 8008796:	70da      	strb	r2, [r3, #3]
			break;
 8008798:	e037      	b.n	800880a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	09db      	lsrs	r3, r3, #7
 80087a2:	4413      	add	r3, r2
 80087a4:	4619      	mov	r1, r3
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7ff fde8 	bl	800837c <move_window>
 80087ac:	4603      	mov	r3, r0
 80087ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087b0:	7ffb      	ldrb	r3, [r7, #31]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d128      	bne.n	8008808 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80087ca:	4413      	add	r3, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fb3d 	bl	8007e4c <ld_dword>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80087d8:	4323      	orrs	r3, r4
 80087da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80087ea:	4413      	add	r3, r2
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff fb6a 	bl	8007ec8 <st_dword>
			fs->wflag = 1;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	70da      	strb	r2, [r3, #3]
			break;
 80087fa:	e006      	b.n	800880a <put_fat+0x1ca>
			if (res != FR_OK) break;
 80087fc:	bf00      	nop
 80087fe:	e004      	b.n	800880a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008800:	bf00      	nop
 8008802:	e002      	b.n	800880a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008804:	bf00      	nop
 8008806:	e000      	b.n	800880a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008808:	bf00      	nop
		}
	}
	return res;
 800880a:	7ffb      	ldrb	r3, [r7, #31]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3724      	adds	r7, #36	@ 0x24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd90      	pop	{r4, r7, pc}

08008814 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d904      	bls.n	800883a <remove_chain+0x26>
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	429a      	cmp	r2, r3
 8008838:	d301      	bcc.n	800883e <remove_chain+0x2a>
 800883a:	2302      	movs	r3, #2
 800883c:	e04b      	b.n	80088d6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00c      	beq.n	800885e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008844:	f04f 32ff 	mov.w	r2, #4294967295
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	69b8      	ldr	r0, [r7, #24]
 800884c:	f7ff fef8 	bl	8008640 <put_fat>
 8008850:	4603      	mov	r3, r0
 8008852:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008854:	7ffb      	ldrb	r3, [r7, #31]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <remove_chain+0x4a>
 800885a:	7ffb      	ldrb	r3, [r7, #31]
 800885c:	e03b      	b.n	80088d6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800885e:	68b9      	ldr	r1, [r7, #8]
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f7ff fe46 	bl	80084f2 <get_fat>
 8008866:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d031      	beq.n	80088d2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <remove_chain+0x64>
 8008874:	2302      	movs	r3, #2
 8008876:	e02e      	b.n	80088d6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d101      	bne.n	8008884 <remove_chain+0x70>
 8008880:	2301      	movs	r3, #1
 8008882:	e028      	b.n	80088d6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008884:	2200      	movs	r2, #0
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	69b8      	ldr	r0, [r7, #24]
 800888a:	f7ff fed9 	bl	8008640 <put_fat>
 800888e:	4603      	mov	r3, r0
 8008890:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008892:	7ffb      	ldrb	r3, [r7, #31]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <remove_chain+0x88>
 8008898:	7ffb      	ldrb	r3, [r7, #31]
 800889a:	e01c      	b.n	80088d6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	691a      	ldr	r2, [r3, #16]
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	3b02      	subs	r3, #2
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d20b      	bcs.n	80088c2 <remove_chain+0xae>
			fs->free_clst++;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	791b      	ldrb	r3, [r3, #4]
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d3c6      	bcc.n	800885e <remove_chain+0x4a>
 80088d0:	e000      	b.n	80088d4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80088d2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3720      	adds	r7, #32
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b088      	sub	sp, #32
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10d      	bne.n	8008910 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d004      	beq.n	800890a <create_chain+0x2c>
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	429a      	cmp	r2, r3
 8008908:	d31b      	bcc.n	8008942 <create_chain+0x64>
 800890a:	2301      	movs	r3, #1
 800890c:	61bb      	str	r3, [r7, #24]
 800890e:	e018      	b.n	8008942 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7ff fded 	bl	80084f2 <get_fat>
 8008918:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d801      	bhi.n	8008924 <create_chain+0x46>
 8008920:	2301      	movs	r3, #1
 8008922:	e070      	b.n	8008a06 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d101      	bne.n	8008930 <create_chain+0x52>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	e06a      	b.n	8008a06 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	429a      	cmp	r2, r3
 8008938:	d201      	bcs.n	800893e <create_chain+0x60>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	e063      	b.n	8008a06 <create_chain+0x128>
		scl = clst;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	3301      	adds	r3, #1
 800894a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	429a      	cmp	r2, r3
 8008954:	d307      	bcc.n	8008966 <create_chain+0x88>
				ncl = 2;
 8008956:	2302      	movs	r3, #2
 8008958:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800895a:	69fa      	ldr	r2, [r7, #28]
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	429a      	cmp	r2, r3
 8008960:	d901      	bls.n	8008966 <create_chain+0x88>
 8008962:	2300      	movs	r3, #0
 8008964:	e04f      	b.n	8008a06 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008966:	69f9      	ldr	r1, [r7, #28]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fdc2 	bl	80084f2 <get_fat>
 800896e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00e      	beq.n	8008994 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d003      	beq.n	8008984 <create_chain+0xa6>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d101      	bne.n	8008988 <create_chain+0xaa>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	e03e      	b.n	8008a06 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	429a      	cmp	r2, r3
 800898e:	d1da      	bne.n	8008946 <create_chain+0x68>
 8008990:	2300      	movs	r3, #0
 8008992:	e038      	b.n	8008a06 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008994:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008996:	f04f 32ff 	mov.w	r2, #4294967295
 800899a:	69f9      	ldr	r1, [r7, #28]
 800899c:	6938      	ldr	r0, [r7, #16]
 800899e:	f7ff fe4f 	bl	8008640 <put_fat>
 80089a2:	4603      	mov	r3, r0
 80089a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d109      	bne.n	80089c0 <create_chain+0xe2>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d006      	beq.n	80089c0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80089b2:	69fa      	ldr	r2, [r7, #28]
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6938      	ldr	r0, [r7, #16]
 80089b8:	f7ff fe42 	bl	8008640 <put_fat>
 80089bc:	4603      	mov	r3, r0
 80089be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d116      	bne.n	80089f4 <create_chain+0x116>
		fs->last_clst = ncl;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	691a      	ldr	r2, [r3, #16]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	3b02      	subs	r3, #2
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d804      	bhi.n	80089e4 <create_chain+0x106>
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	1e5a      	subs	r2, r3, #1
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	791b      	ldrb	r3, [r3, #4]
 80089e8:	f043 0301 	orr.w	r3, r3, #1
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	711a      	strb	r2, [r3, #4]
 80089f2:	e007      	b.n	8008a04 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d102      	bne.n	8008a00 <create_chain+0x122>
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295
 80089fe:	e000      	b.n	8008a02 <create_chain+0x124>
 8008a00:	2301      	movs	r3, #1
 8008a02:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008a04:	69fb      	ldr	r3, [r7, #28]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3720      	adds	r7, #32
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b087      	sub	sp, #28
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a22:	3304      	adds	r3, #4
 8008a24:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	0a5b      	lsrs	r3, r3, #9
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	8952      	ldrh	r2, [r2, #10]
 8008a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a32:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	1d1a      	adds	r2, r3, #4
 8008a38:	613a      	str	r2, [r7, #16]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <clmt_clust+0x3a>
 8008a44:	2300      	movs	r3, #0
 8008a46:	e010      	b.n	8008a6a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d307      	bcc.n	8008a60 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a5e:	e7e9      	b.n	8008a34 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008a60:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	4413      	add	r3, r2
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b086      	sub	sp, #24
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a8c:	d204      	bcs.n	8008a98 <dir_sdi+0x22>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	f003 031f 	and.w	r3, r3, #31
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <dir_sdi+0x26>
		return FR_INT_ERR;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e063      	b.n	8008b64 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d106      	bne.n	8008abc <dir_sdi+0x46>
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d902      	bls.n	8008abc <dir_sdi+0x46>
		clst = fs->dirbase;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aba:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10c      	bne.n	8008adc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	095b      	lsrs	r3, r3, #5
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	8912      	ldrh	r2, [r2, #8]
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d301      	bcc.n	8008ad2 <dir_sdi+0x5c>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e048      	b.n	8008b64 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	61da      	str	r2, [r3, #28]
 8008ada:	e029      	b.n	8008b30 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	895b      	ldrh	r3, [r3, #10]
 8008ae0:	025b      	lsls	r3, r3, #9
 8008ae2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ae4:	e019      	b.n	8008b1a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6979      	ldr	r1, [r7, #20]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff fd01 	bl	80084f2 <get_fat>
 8008af0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af8:	d101      	bne.n	8008afe <dir_sdi+0x88>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e032      	b.n	8008b64 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d904      	bls.n	8008b0e <dir_sdi+0x98>
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d301      	bcc.n	8008b12 <dir_sdi+0x9c>
 8008b0e:	2302      	movs	r3, #2
 8008b10:	e028      	b.n	8008b64 <dir_sdi+0xee>
			ofs -= csz;
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d2e1      	bcs.n	8008ae6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008b22:	6979      	ldr	r1, [r7, #20]
 8008b24:	6938      	ldr	r0, [r7, #16]
 8008b26:	f7ff fcc5 	bl	80084b4 <clust2sect>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <dir_sdi+0xcc>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e010      	b.n	8008b64 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	69da      	ldr	r2, [r3, #28]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	0a5b      	lsrs	r3, r3, #9
 8008b4a:	441a      	add	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5c:	441a      	add	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	3320      	adds	r3, #32
 8008b82:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <dir_next+0x28>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b92:	d301      	bcc.n	8008b98 <dir_next+0x2c>
 8008b94:	2304      	movs	r3, #4
 8008b96:	e0aa      	b.n	8008cee <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f040 8098 	bne.w	8008cd4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10b      	bne.n	8008bce <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	095b      	lsrs	r3, r3, #5
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	8912      	ldrh	r2, [r2, #8]
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	f0c0 8088 	bcc.w	8008cd4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	61da      	str	r2, [r3, #28]
 8008bca:	2304      	movs	r3, #4
 8008bcc:	e08f      	b.n	8008cee <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	0a5b      	lsrs	r3, r3, #9
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	8952      	ldrh	r2, [r2, #10]
 8008bd6:	3a01      	subs	r2, #1
 8008bd8:	4013      	ands	r3, r2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d17a      	bne.n	8008cd4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f7ff fc83 	bl	80084f2 <get_fat>
 8008bec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d801      	bhi.n	8008bf8 <dir_next+0x8c>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e07a      	b.n	8008cee <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfe:	d101      	bne.n	8008c04 <dir_next+0x98>
 8008c00:	2301      	movs	r3, #1
 8008c02:	e074      	b.n	8008cee <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d358      	bcc.n	8008cc0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d104      	bne.n	8008c1e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	61da      	str	r2, [r3, #28]
 8008c1a:	2304      	movs	r3, #4
 8008c1c:	e067      	b.n	8008cee <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f7ff fe59 	bl	80088de <create_chain>
 8008c2c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <dir_next+0xcc>
 8008c34:	2307      	movs	r3, #7
 8008c36:	e05a      	b.n	8008cee <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d101      	bne.n	8008c42 <dir_next+0xd6>
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e055      	b.n	8008cee <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d101      	bne.n	8008c4e <dir_next+0xe2>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e04f      	b.n	8008cee <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f7ff fb50 	bl	80082f4 <sync_window>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <dir_next+0xf2>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e047      	b.n	8008cee <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3330      	adds	r3, #48	@ 0x30
 8008c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c66:	2100      	movs	r1, #0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff f97a 	bl	8007f62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c6e:	2300      	movs	r3, #0
 8008c70:	613b      	str	r3, [r7, #16]
 8008c72:	6979      	ldr	r1, [r7, #20]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7ff fc1d 	bl	80084b4 <clust2sect>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008c80:	e012      	b.n	8008ca8 <dir_next+0x13c>
						fs->wflag = 1;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f7ff fb33 	bl	80082f4 <sync_window>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <dir_next+0x12c>
 8008c94:	2301      	movs	r3, #1
 8008c96:	e02a      	b.n	8008cee <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	613b      	str	r3, [r7, #16]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	895b      	ldrh	r3, [r3, #10]
 8008cac:	461a      	mov	r2, r3
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d3e6      	bcc.n	8008c82 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	1ad2      	subs	r2, r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008cc6:	6979      	ldr	r1, [r7, #20]
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f7ff fbf3 	bl	80084b4 <clust2sect>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce6:	441a      	add	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b086      	sub	sp, #24
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008d06:	2100      	movs	r1, #0
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff feb4 	bl	8008a76 <dir_sdi>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d12b      	bne.n	8008d70 <dir_alloc+0x7a>
		n = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	4619      	mov	r1, r3
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff fb2a 	bl	800837c <move_window>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d11d      	bne.n	8008d6e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2be5      	cmp	r3, #229	@ 0xe5
 8008d3a:	d004      	beq.n	8008d46 <dir_alloc+0x50>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d107      	bne.n	8008d56 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	613b      	str	r3, [r7, #16]
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d102      	bne.n	8008d5a <dir_alloc+0x64>
 8008d54:	e00c      	b.n	8008d70 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008d56:	2300      	movs	r3, #0
 8008d58:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff ff05 	bl	8008b6c <dir_next>
 8008d62:	4603      	mov	r3, r0
 8008d64:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0d7      	beq.n	8008d1c <dir_alloc+0x26>
 8008d6c:	e000      	b.n	8008d70 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008d6e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d101      	bne.n	8008d7a <dir_alloc+0x84>
 8008d76:	2307      	movs	r3, #7
 8008d78:	75fb      	strb	r3, [r7, #23]
	return res;
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	331a      	adds	r3, #26
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7ff f842 	bl	8007e1c <ld_word>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d109      	bne.n	8008db8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	3314      	adds	r3, #20
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff f837 	bl	8007e1c <ld_word>
 8008dae:	4603      	mov	r3, r0
 8008db0:	041b      	lsls	r3, r3, #16
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008db8:	68fb      	ldr	r3, [r7, #12]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	60b9      	str	r1, [r7, #8]
 8008dcc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	331a      	adds	r3, #26
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	b292      	uxth	r2, r2
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff f85a 	bl	8007e92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d109      	bne.n	8008dfa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f103 0214 	add.w	r2, r3, #20
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	0c1b      	lsrs	r3, r3, #16
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	4619      	mov	r1, r3
 8008df4:	4610      	mov	r0, r2
 8008df6:	f7ff f84c 	bl	8007e92 <st_word>
	}
}
 8008dfa:	bf00      	nop
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b086      	sub	sp, #24
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8008e16:	e03c      	b.n	8008e92 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6938      	ldr	r0, [r7, #16]
 8008e20:	f7ff faac 	bl	800837c <move_window>
 8008e24:	4603      	mov	r3, r0
 8008e26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d136      	bne.n	8008e9c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008e3c:	2304      	movs	r3, #4
 8008e3e:	75fb      	strb	r3, [r7, #23]
 8008e40:	e031      	b.n	8008ea6 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	330b      	adds	r3, #11
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e4e:	73bb      	strb	r3, [r7, #14]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7bba      	ldrb	r2, [r7, #14]
 8008e54:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	2be5      	cmp	r3, #229	@ 0xe5
 8008e5a:	d011      	beq.n	8008e80 <dir_read+0x7e>
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e60:	d00e      	beq.n	8008e80 <dir_read+0x7e>
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	2b0f      	cmp	r3, #15
 8008e66:	d00b      	beq.n	8008e80 <dir_read+0x7e>
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	f023 0320 	bic.w	r3, r3, #32
 8008e6e:	2b08      	cmp	r3, #8
 8008e70:	bf0c      	ite	eq
 8008e72:	2301      	moveq	r3, #1
 8008e74:	2300      	movne	r3, #0
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	461a      	mov	r2, r3
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00f      	beq.n	8008ea0 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008e80:	2100      	movs	r1, #0
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff fe72 	bl	8008b6c <dir_next>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d108      	bne.n	8008ea4 <dir_read+0xa2>
	while (dp->sect) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1be      	bne.n	8008e18 <dir_read+0x16>
 8008e9a:	e004      	b.n	8008ea6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008e9c:	bf00      	nop
 8008e9e:	e002      	b.n	8008ea6 <dir_read+0xa4>
				break;
 8008ea0:	bf00      	nop
 8008ea2:	e000      	b.n	8008ea6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008ea4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <dir_read+0xb0>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	61da      	str	r2, [r3, #28]
	return res;
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008eca:	2100      	movs	r1, #0
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fdd2 	bl	8008a76 <dir_sdi>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <dir_find+0x24>
 8008edc:	7dfb      	ldrb	r3, [r7, #23]
 8008ede:	e03e      	b.n	8008f5e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6938      	ldr	r0, [r7, #16]
 8008ee8:	f7ff fa48 	bl	800837c <move_window>
 8008eec:	4603      	mov	r3, r0
 8008eee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d12f      	bne.n	8008f56 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d102      	bne.n	8008f0a <dir_find+0x4e>
 8008f04:	2304      	movs	r3, #4
 8008f06:	75fb      	strb	r3, [r7, #23]
 8008f08:	e028      	b.n	8008f5c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	330b      	adds	r3, #11
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	330b      	adds	r3, #11
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <dir_find+0x86>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a18      	ldr	r0, [r3, #32]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3324      	adds	r3, #36	@ 0x24
 8008f34:	220b      	movs	r2, #11
 8008f36:	4619      	mov	r1, r3
 8008f38:	f7ff f82e 	bl	8007f98 <mem_cmp>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00b      	beq.n	8008f5a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008f42:	2100      	movs	r1, #0
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fe11 	bl	8008b6c <dir_next>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d0c5      	beq.n	8008ee0 <dir_find+0x24>
 8008f54:	e002      	b.n	8008f5c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008f56:	bf00      	nop
 8008f58:	e000      	b.n	8008f5c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008f5a:	bf00      	nop

	return res;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008f74:	2101      	movs	r1, #1
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff febd 	bl	8008cf6 <dir_alloc>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d11c      	bne.n	8008fc0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	68b8      	ldr	r0, [r7, #8]
 8008f8e:	f7ff f9f5 	bl	800837c <move_window>
 8008f92:	4603      	mov	r3, r0
 8008f94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d111      	bne.n	8008fc0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe ffdc 	bl	8007f62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a18      	ldr	r0, [r3, #32]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3324      	adds	r3, #36	@ 0x24
 8008fb2:	220b      	movs	r2, #11
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f7fe ffb3 	bl	8007f20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff f9cc 	bl	800837c <move_window>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	22e5      	movs	r2, #229	@ 0xe5
 8008ff4:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3324      	adds	r3, #36	@ 0x24
 800901c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800901e:	220b      	movs	r2, #11
 8009020:	2120      	movs	r1, #32
 8009022:	68b8      	ldr	r0, [r7, #8]
 8009024:	f7fe ff9d 	bl	8007f62 <mem_set>
	si = i = 0; ni = 8;
 8009028:	2300      	movs	r3, #0
 800902a:	613b      	str	r3, [r7, #16]
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	61fb      	str	r3, [r7, #28]
 8009030:	2308      	movs	r3, #8
 8009032:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	61fa      	str	r2, [r7, #28]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009042:	7efb      	ldrb	r3, [r7, #27]
 8009044:	2b20      	cmp	r3, #32
 8009046:	d94e      	bls.n	80090e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009048:	7efb      	ldrb	r3, [r7, #27]
 800904a:	2b2f      	cmp	r3, #47	@ 0x2f
 800904c:	d006      	beq.n	800905c <create_name+0x54>
 800904e:	7efb      	ldrb	r3, [r7, #27]
 8009050:	2b5c      	cmp	r3, #92	@ 0x5c
 8009052:	d110      	bne.n	8009076 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009054:	e002      	b.n	800905c <create_name+0x54>
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	3301      	adds	r3, #1
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b2f      	cmp	r3, #47	@ 0x2f
 8009066:	d0f6      	beq.n	8009056 <create_name+0x4e>
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b5c      	cmp	r3, #92	@ 0x5c
 8009072:	d0f0      	beq.n	8009056 <create_name+0x4e>
			break;
 8009074:	e038      	b.n	80090e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009076:	7efb      	ldrb	r3, [r7, #27]
 8009078:	2b2e      	cmp	r3, #46	@ 0x2e
 800907a:	d003      	beq.n	8009084 <create_name+0x7c>
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	429a      	cmp	r2, r3
 8009082:	d30c      	bcc.n	800909e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2b0b      	cmp	r3, #11
 8009088:	d002      	beq.n	8009090 <create_name+0x88>
 800908a:	7efb      	ldrb	r3, [r7, #27]
 800908c:	2b2e      	cmp	r3, #46	@ 0x2e
 800908e:	d001      	beq.n	8009094 <create_name+0x8c>
 8009090:	2306      	movs	r3, #6
 8009092:	e044      	b.n	800911e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009094:	2308      	movs	r3, #8
 8009096:	613b      	str	r3, [r7, #16]
 8009098:	230b      	movs	r3, #11
 800909a:	617b      	str	r3, [r7, #20]
			continue;
 800909c:	e022      	b.n	80090e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800909e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	da04      	bge.n	80090b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80090a6:	7efb      	ldrb	r3, [r7, #27]
 80090a8:	3b80      	subs	r3, #128	@ 0x80
 80090aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009128 <create_name+0x120>)
 80090ac:	5cd3      	ldrb	r3, [r2, r3]
 80090ae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80090b0:	7efb      	ldrb	r3, [r7, #27]
 80090b2:	4619      	mov	r1, r3
 80090b4:	481d      	ldr	r0, [pc, #116]	@ (800912c <create_name+0x124>)
 80090b6:	f7fe ff96 	bl	8007fe6 <chk_chr>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <create_name+0xbc>
 80090c0:	2306      	movs	r3, #6
 80090c2:	e02c      	b.n	800911e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80090c4:	7efb      	ldrb	r3, [r7, #27]
 80090c6:	2b60      	cmp	r3, #96	@ 0x60
 80090c8:	d905      	bls.n	80090d6 <create_name+0xce>
 80090ca:	7efb      	ldrb	r3, [r7, #27]
 80090cc:	2b7a      	cmp	r3, #122	@ 0x7a
 80090ce:	d802      	bhi.n	80090d6 <create_name+0xce>
 80090d0:	7efb      	ldrb	r3, [r7, #27]
 80090d2:	3b20      	subs	r3, #32
 80090d4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	613a      	str	r2, [r7, #16]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	4413      	add	r3, r2
 80090e0:	7efa      	ldrb	r2, [r7, #27]
 80090e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80090e4:	e7a6      	b.n	8009034 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80090e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	441a      	add	r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <create_name+0xf4>
 80090f8:	2306      	movs	r3, #6
 80090fa:	e010      	b.n	800911e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2be5      	cmp	r3, #229	@ 0xe5
 8009102:	d102      	bne.n	800910a <create_name+0x102>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2205      	movs	r2, #5
 8009108:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800910a:	7efb      	ldrb	r3, [r7, #27]
 800910c:	2b20      	cmp	r3, #32
 800910e:	d801      	bhi.n	8009114 <create_name+0x10c>
 8009110:	2204      	movs	r2, #4
 8009112:	e000      	b.n	8009116 <create_name+0x10e>
 8009114:	2200      	movs	r2, #0
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	330b      	adds	r3, #11
 800911a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800911c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800911e:	4618      	mov	r0, r3
 8009120:	3720      	adds	r7, #32
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	08010984 	.word	0x08010984
 800912c:	0800f7c4 	.word	0x0800f7c4

08009130 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009144:	e002      	b.n	800914c <follow_path+0x1c>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	3301      	adds	r3, #1
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b2f      	cmp	r3, #47	@ 0x2f
 8009152:	d0f8      	beq.n	8009146 <follow_path+0x16>
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b5c      	cmp	r3, #92	@ 0x5c
 800915a:	d0f4      	beq.n	8009146 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	2200      	movs	r2, #0
 8009160:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b1f      	cmp	r3, #31
 8009168:	d80a      	bhi.n	8009180 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2280      	movs	r2, #128	@ 0x80
 800916e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009172:	2100      	movs	r1, #0
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff fc7e 	bl	8008a76 <dir_sdi>
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]
 800917e:	e043      	b.n	8009208 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009180:	463b      	mov	r3, r7
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7ff ff3f 	bl	8009008 <create_name>
 800918a:	4603      	mov	r3, r0
 800918c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d134      	bne.n	80091fe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff fe91 	bl	8008ebc <dir_find>
 800919a:	4603      	mov	r3, r0
 800919c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80091a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00a      	beq.n	80091c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d127      	bne.n	8009202 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80091b2:	7afb      	ldrb	r3, [r7, #11]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d122      	bne.n	8009202 <follow_path+0xd2>
 80091bc:	2305      	movs	r3, #5
 80091be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80091c0:	e01f      	b.n	8009202 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091c2:	7afb      	ldrb	r3, [r7, #11]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d11c      	bne.n	8009206 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	799b      	ldrb	r3, [r3, #6]
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d102      	bne.n	80091de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80091d8:	2305      	movs	r3, #5
 80091da:	75fb      	strb	r3, [r7, #23]
 80091dc:	e014      	b.n	8009208 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ec:	4413      	add	r3, r2
 80091ee:	4619      	mov	r1, r3
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7ff fdc7 	bl	8008d84 <ld_clust>
 80091f6:	4602      	mov	r2, r0
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80091fc:	e7c0      	b.n	8009180 <follow_path+0x50>
			if (res != FR_OK) break;
 80091fe:	bf00      	nop
 8009200:	e002      	b.n	8009208 <follow_path+0xd8>
				break;
 8009202:	bf00      	nop
 8009204:	e000      	b.n	8009208 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009206:	bf00      	nop
			}
		}
	}

	return res;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009212:	b480      	push	{r7}
 8009214:	b087      	sub	sp, #28
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800921a:	f04f 33ff 	mov.w	r3, #4294967295
 800921e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d031      	beq.n	800928c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	617b      	str	r3, [r7, #20]
 800922e:	e002      	b.n	8009236 <get_ldnumber+0x24>
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	3301      	adds	r3, #1
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b20      	cmp	r3, #32
 800923c:	d903      	bls.n	8009246 <get_ldnumber+0x34>
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b3a      	cmp	r3, #58	@ 0x3a
 8009244:	d1f4      	bne.n	8009230 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b3a      	cmp	r3, #58	@ 0x3a
 800924c:	d11c      	bne.n	8009288 <get_ldnumber+0x76>
			tp = *path;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	60fa      	str	r2, [r7, #12]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	3b30      	subs	r3, #48	@ 0x30
 800925e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	2b09      	cmp	r3, #9
 8009264:	d80e      	bhi.n	8009284 <get_ldnumber+0x72>
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	429a      	cmp	r2, r3
 800926c:	d10a      	bne.n	8009284 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d107      	bne.n	8009284 <get_ldnumber+0x72>
					vol = (int)i;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	3301      	adds	r3, #1
 800927c:	617b      	str	r3, [r7, #20]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	697a      	ldr	r2, [r7, #20]
 8009282:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	e002      	b.n	800928e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009288:	2300      	movs	r3, #0
 800928a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800928c:	693b      	ldr	r3, [r7, #16]
}
 800928e:	4618      	mov	r0, r3
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
	...

0800929c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	70da      	strb	r2, [r3, #3]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f04f 32ff 	mov.w	r2, #4294967295
 80092b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff f860 	bl	800837c <move_window>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <check_fs+0x2a>
 80092c2:	2304      	movs	r3, #4
 80092c4:	e038      	b.n	8009338 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3330      	adds	r3, #48	@ 0x30
 80092ca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fe fda4 	bl	8007e1c <ld_word>
 80092d4:	4603      	mov	r3, r0
 80092d6:	461a      	mov	r2, r3
 80092d8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80092dc:	429a      	cmp	r2, r3
 80092de:	d001      	beq.n	80092e4 <check_fs+0x48>
 80092e0:	2303      	movs	r3, #3
 80092e2:	e029      	b.n	8009338 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092ea:	2be9      	cmp	r3, #233	@ 0xe9
 80092ec:	d009      	beq.n	8009302 <check_fs+0x66>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092f4:	2beb      	cmp	r3, #235	@ 0xeb
 80092f6:	d11e      	bne.n	8009336 <check_fs+0x9a>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80092fe:	2b90      	cmp	r3, #144	@ 0x90
 8009300:	d119      	bne.n	8009336 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3330      	adds	r3, #48	@ 0x30
 8009306:	3336      	adds	r3, #54	@ 0x36
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fd9f 	bl	8007e4c <ld_dword>
 800930e:	4603      	mov	r3, r0
 8009310:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009314:	4a0a      	ldr	r2, [pc, #40]	@ (8009340 <check_fs+0xa4>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d101      	bne.n	800931e <check_fs+0x82>
 800931a:	2300      	movs	r3, #0
 800931c:	e00c      	b.n	8009338 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3330      	adds	r3, #48	@ 0x30
 8009322:	3352      	adds	r3, #82	@ 0x52
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe fd91 	bl	8007e4c <ld_dword>
 800932a:	4603      	mov	r3, r0
 800932c:	4a05      	ldr	r2, [pc, #20]	@ (8009344 <check_fs+0xa8>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d101      	bne.n	8009336 <check_fs+0x9a>
 8009332:	2300      	movs	r3, #0
 8009334:	e000      	b.n	8009338 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009336:	2302      	movs	r3, #2
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	00544146 	.word	0x00544146
 8009344:	33544146 	.word	0x33544146

08009348 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b096      	sub	sp, #88	@ 0x58
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	4613      	mov	r3, r2
 8009354:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff ff58 	bl	8009212 <get_ldnumber>
 8009362:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009366:	2b00      	cmp	r3, #0
 8009368:	da01      	bge.n	800936e <find_volume+0x26>
 800936a:	230b      	movs	r3, #11
 800936c:	e22d      	b.n	80097ca <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800936e:	4aa1      	ldr	r2, [pc, #644]	@ (80095f4 <find_volume+0x2ac>)
 8009370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009376:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <find_volume+0x3a>
 800937e:	230c      	movs	r3, #12
 8009380:	e223      	b.n	80097ca <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009386:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d01a      	beq.n	80093ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fc9d 	bl	8007cdc <disk_status>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80093a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10c      	bne.n	80093ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d007      	beq.n	80093ca <find_volume+0x82>
 80093ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093be:	f003 0304 	and.w	r3, r3, #4
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80093c6:	230a      	movs	r3, #10
 80093c8:	e1ff      	b.n	80097ca <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80093ca:	2300      	movs	r3, #0
 80093cc:	e1fd      	b.n	80097ca <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80093ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d0:	2200      	movs	r2, #0
 80093d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80093d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	785b      	ldrb	r3, [r3, #1]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe fc95 	bl	8007d10 <disk_initialize>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80093ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80093f8:	2303      	movs	r3, #3
 80093fa:	e1e6      	b.n	80097ca <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <find_volume+0xca>
 8009402:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009406:	f003 0304 	and.w	r3, r3, #4
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800940e:	230a      	movs	r3, #10
 8009410:	e1db      	b.n	80097ca <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009416:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009418:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800941a:	f7ff ff3f 	bl	800929c <check_fs>
 800941e:	4603      	mov	r3, r0
 8009420:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009424:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009428:	2b02      	cmp	r3, #2
 800942a:	d149      	bne.n	80094c0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800942c:	2300      	movs	r3, #0
 800942e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009430:	e01e      	b.n	8009470 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009434:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009440:	4413      	add	r3, r2
 8009442:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	3304      	adds	r3, #4
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d006      	beq.n	800945c <find_volume+0x114>
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	3308      	adds	r3, #8
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fcfa 	bl	8007e4c <ld_dword>
 8009458:	4602      	mov	r2, r0
 800945a:	e000      	b.n	800945e <find_volume+0x116>
 800945c:	2200      	movs	r2, #0
 800945e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	3358      	adds	r3, #88	@ 0x58
 8009464:	443b      	add	r3, r7
 8009466:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800946a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800946c:	3301      	adds	r3, #1
 800946e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009472:	2b03      	cmp	r3, #3
 8009474:	d9dd      	bls.n	8009432 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009476:	2300      	movs	r3, #0
 8009478:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800947a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800947c:	2b00      	cmp	r3, #0
 800947e:	d002      	beq.n	8009486 <find_volume+0x13e>
 8009480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009482:	3b01      	subs	r3, #1
 8009484:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	3358      	adds	r3, #88	@ 0x58
 800948c:	443b      	add	r3, r7
 800948e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009492:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009496:	2b00      	cmp	r3, #0
 8009498:	d005      	beq.n	80094a6 <find_volume+0x15e>
 800949a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800949c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800949e:	f7ff fefd 	bl	800929c <check_fs>
 80094a2:	4603      	mov	r3, r0
 80094a4:	e000      	b.n	80094a8 <find_volume+0x160>
 80094a6:	2303      	movs	r3, #3
 80094a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80094ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d905      	bls.n	80094c0 <find_volume+0x178>
 80094b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094b6:	3301      	adds	r3, #1
 80094b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80094ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d9e2      	bls.n	8009486 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80094c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	d101      	bne.n	80094cc <find_volume+0x184>
 80094c8:	2301      	movs	r3, #1
 80094ca:	e17e      	b.n	80097ca <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80094cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d901      	bls.n	80094d8 <find_volume+0x190>
 80094d4:	230d      	movs	r3, #13
 80094d6:	e178      	b.n	80097ca <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80094d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094da:	3330      	adds	r3, #48	@ 0x30
 80094dc:	330b      	adds	r3, #11
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fc9c 	bl	8007e1c <ld_word>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ea:	d001      	beq.n	80094f0 <find_volume+0x1a8>
 80094ec:	230d      	movs	r3, #13
 80094ee:	e16c      	b.n	80097ca <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	3330      	adds	r3, #48	@ 0x30
 80094f4:	3316      	adds	r3, #22
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fc90 	bl	8007e1c <ld_word>
 80094fc:	4603      	mov	r3, r0
 80094fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <find_volume+0x1cc>
 8009506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009508:	3330      	adds	r3, #48	@ 0x30
 800950a:	3324      	adds	r3, #36	@ 0x24
 800950c:	4618      	mov	r0, r3
 800950e:	f7fe fc9d 	bl	8007e4c <ld_dword>
 8009512:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009516:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009518:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800951a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009522:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009526:	789b      	ldrb	r3, [r3, #2]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d005      	beq.n	8009538 <find_volume+0x1f0>
 800952c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952e:	789b      	ldrb	r3, [r3, #2]
 8009530:	2b02      	cmp	r3, #2
 8009532:	d001      	beq.n	8009538 <find_volume+0x1f0>
 8009534:	230d      	movs	r3, #13
 8009536:	e148      	b.n	80097ca <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953a:	789b      	ldrb	r3, [r3, #2]
 800953c:	461a      	mov	r2, r3
 800953e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009540:	fb02 f303 	mul.w	r3, r2, r3
 8009544:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800954c:	461a      	mov	r2, r3
 800954e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009550:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009554:	895b      	ldrh	r3, [r3, #10]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d008      	beq.n	800956c <find_volume+0x224>
 800955a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955c:	895b      	ldrh	r3, [r3, #10]
 800955e:	461a      	mov	r2, r3
 8009560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009562:	895b      	ldrh	r3, [r3, #10]
 8009564:	3b01      	subs	r3, #1
 8009566:	4013      	ands	r3, r2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <find_volume+0x228>
 800956c:	230d      	movs	r3, #13
 800956e:	e12c      	b.n	80097ca <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	3330      	adds	r3, #48	@ 0x30
 8009574:	3311      	adds	r3, #17
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fc50 	bl	8007e1c <ld_word>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009582:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009586:	891b      	ldrh	r3, [r3, #8]
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	b29b      	uxth	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <find_volume+0x24e>
 8009592:	230d      	movs	r3, #13
 8009594:	e119      	b.n	80097ca <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009598:	3330      	adds	r3, #48	@ 0x30
 800959a:	3313      	adds	r3, #19
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe fc3d 	bl	8007e1c <ld_word>
 80095a2:	4603      	mov	r3, r0
 80095a4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80095a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d106      	bne.n	80095ba <find_volume+0x272>
 80095ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ae:	3330      	adds	r3, #48	@ 0x30
 80095b0:	3320      	adds	r3, #32
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fc4a 	bl	8007e4c <ld_dword>
 80095b8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80095ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095bc:	3330      	adds	r3, #48	@ 0x30
 80095be:	330e      	adds	r3, #14
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe fc2b 	bl	8007e1c <ld_word>
 80095c6:	4603      	mov	r3, r0
 80095c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80095ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <find_volume+0x28c>
 80095d0:	230d      	movs	r3, #13
 80095d2:	e0fa      	b.n	80097ca <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80095d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80095d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d8:	4413      	add	r3, r2
 80095da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095dc:	8912      	ldrh	r2, [r2, #8]
 80095de:	0912      	lsrs	r2, r2, #4
 80095e0:	b292      	uxth	r2, r2
 80095e2:	4413      	add	r3, r2
 80095e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80095e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d204      	bcs.n	80095f8 <find_volume+0x2b0>
 80095ee:	230d      	movs	r3, #13
 80095f0:	e0eb      	b.n	80097ca <find_volume+0x482>
 80095f2:	bf00      	nop
 80095f4:	20000f84 	.word	0x20000f84
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80095f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009600:	8952      	ldrh	r2, [r2, #10]
 8009602:	fbb3 f3f2 	udiv	r3, r3, r2
 8009606:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <find_volume+0x2ca>
 800960e:	230d      	movs	r3, #13
 8009610:	e0db      	b.n	80097ca <find_volume+0x482>
		fmt = FS_FAT32;
 8009612:	2303      	movs	r3, #3
 8009614:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800961e:	4293      	cmp	r3, r2
 8009620:	d802      	bhi.n	8009628 <find_volume+0x2e0>
 8009622:	2302      	movs	r3, #2
 8009624:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800962e:	4293      	cmp	r3, r2
 8009630:	d802      	bhi.n	8009638 <find_volume+0x2f0>
 8009632:	2301      	movs	r3, #1
 8009634:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963a:	1c9a      	adds	r2, r3, #2
 800963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009644:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009646:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800964a:	441a      	add	r2, r3
 800964c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009650:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009654:	441a      	add	r2, r3
 8009656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009658:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800965a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800965e:	2b03      	cmp	r3, #3
 8009660:	d11e      	bne.n	80096a0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009664:	3330      	adds	r3, #48	@ 0x30
 8009666:	332a      	adds	r3, #42	@ 0x2a
 8009668:	4618      	mov	r0, r3
 800966a:	f7fe fbd7 	bl	8007e1c <ld_word>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <find_volume+0x330>
 8009674:	230d      	movs	r3, #13
 8009676:	e0a8      	b.n	80097ca <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967a:	891b      	ldrh	r3, [r3, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <find_volume+0x33c>
 8009680:	230d      	movs	r3, #13
 8009682:	e0a2      	b.n	80097ca <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	3330      	adds	r3, #48	@ 0x30
 8009688:	332c      	adds	r3, #44	@ 0x2c
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fbde 	bl	8007e4c <ld_dword>
 8009690:	4602      	mov	r2, r0
 8009692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009694:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	647b      	str	r3, [r7, #68]	@ 0x44
 800969e:	e01f      	b.n	80096e0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	891b      	ldrh	r3, [r3, #8]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <find_volume+0x364>
 80096a8:	230d      	movs	r3, #13
 80096aa:	e08e      	b.n	80097ca <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	6a1a      	ldr	r2, [r3, #32]
 80096b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b2:	441a      	add	r2, r3
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80096b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d103      	bne.n	80096c8 <find_volume+0x380>
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	e00a      	b.n	80096de <find_volume+0x396>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	695a      	ldr	r2, [r3, #20]
 80096cc:	4613      	mov	r3, r2
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	4413      	add	r3, r2
 80096d2:	085a      	lsrs	r2, r3, #1
 80096d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80096de:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80096e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e2:	699a      	ldr	r2, [r3, #24]
 80096e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096e6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80096ea:	0a5b      	lsrs	r3, r3, #9
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d201      	bcs.n	80096f4 <find_volume+0x3ac>
 80096f0:	230d      	movs	r3, #13
 80096f2:	e06a      	b.n	80097ca <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80096f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f6:	f04f 32ff 	mov.w	r2, #4294967295
 80096fa:	611a      	str	r2, [r3, #16]
 80096fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009706:	2280      	movs	r2, #128	@ 0x80
 8009708:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800970a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800970e:	2b03      	cmp	r3, #3
 8009710:	d149      	bne.n	80097a6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009714:	3330      	adds	r3, #48	@ 0x30
 8009716:	3330      	adds	r3, #48	@ 0x30
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fb7f 	bl	8007e1c <ld_word>
 800971e:	4603      	mov	r3, r0
 8009720:	2b01      	cmp	r3, #1
 8009722:	d140      	bne.n	80097a6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009726:	3301      	adds	r3, #1
 8009728:	4619      	mov	r1, r3
 800972a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800972c:	f7fe fe26 	bl	800837c <move_window>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d137      	bne.n	80097a6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	2200      	movs	r2, #0
 800973a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800973c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973e:	3330      	adds	r3, #48	@ 0x30
 8009740:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe fb69 	bl	8007e1c <ld_word>
 800974a:	4603      	mov	r3, r0
 800974c:	461a      	mov	r2, r3
 800974e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009752:	429a      	cmp	r2, r3
 8009754:	d127      	bne.n	80097a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009758:	3330      	adds	r3, #48	@ 0x30
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fb76 	bl	8007e4c <ld_dword>
 8009760:	4603      	mov	r3, r0
 8009762:	4a1c      	ldr	r2, [pc, #112]	@ (80097d4 <find_volume+0x48c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d11e      	bne.n	80097a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976a:	3330      	adds	r3, #48	@ 0x30
 800976c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009770:	4618      	mov	r0, r3
 8009772:	f7fe fb6b 	bl	8007e4c <ld_dword>
 8009776:	4603      	mov	r3, r0
 8009778:	4a17      	ldr	r2, [pc, #92]	@ (80097d8 <find_volume+0x490>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d113      	bne.n	80097a6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800977e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009780:	3330      	adds	r3, #48	@ 0x30
 8009782:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fb60 	bl	8007e4c <ld_dword>
 800978c:	4602      	mov	r2, r0
 800978e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009790:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009794:	3330      	adds	r3, #48	@ 0x30
 8009796:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe fb56 	bl	8007e4c <ld_dword>
 80097a0:	4602      	mov	r2, r0
 80097a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80097a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80097ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80097ae:	4b0b      	ldr	r3, [pc, #44]	@ (80097dc <find_volume+0x494>)
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	3301      	adds	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	4b09      	ldr	r3, [pc, #36]	@ (80097dc <find_volume+0x494>)
 80097b8:	801a      	strh	r2, [r3, #0]
 80097ba:	4b08      	ldr	r3, [pc, #32]	@ (80097dc <find_volume+0x494>)
 80097bc:	881a      	ldrh	r2, [r3, #0]
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80097c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80097c4:	f7fe fd72 	bl	80082ac <clear_lock>
#endif
	return FR_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3758      	adds	r7, #88	@ 0x58
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	41615252 	.word	0x41615252
 80097d8:	61417272 	.word	0x61417272
 80097dc:	20000f88 	.word	0x20000f88

080097e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80097ea:	2309      	movs	r3, #9
 80097ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d01c      	beq.n	800982e <validate+0x4e>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d018      	beq.n	800982e <validate+0x4e>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d013      	beq.n	800982e <validate+0x4e>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	889a      	ldrh	r2, [r3, #4]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	88db      	ldrh	r3, [r3, #6]
 8009810:	429a      	cmp	r2, r3
 8009812:	d10c      	bne.n	800982e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	785b      	ldrb	r3, [r3, #1]
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fa5e 	bl	8007cdc <disk_status>
 8009820:	4603      	mov	r3, r0
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <validate+0x4e>
			res = FR_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800982e:	7bfb      	ldrb	r3, [r7, #15]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d102      	bne.n	800983a <validate+0x5a>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	e000      	b.n	800983c <validate+0x5c>
 800983a:	2300      	movs	r3, #0
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	6013      	str	r3, [r2, #0]
	return res;
 8009840:	7bfb      	ldrb	r3, [r7, #15]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800985e:	f107 0310 	add.w	r3, r7, #16
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff fcd5 	bl	8009212 <get_ldnumber>
 8009868:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	2b00      	cmp	r3, #0
 800986e:	da01      	bge.n	8009874 <f_mount+0x28>
 8009870:	230b      	movs	r3, #11
 8009872:	e02b      	b.n	80098cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009874:	4a17      	ldr	r2, [pc, #92]	@ (80098d4 <f_mount+0x88>)
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800987c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d005      	beq.n	8009890 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009884:	69b8      	ldr	r0, [r7, #24]
 8009886:	f7fe fd11 	bl	80082ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d002      	beq.n	800989c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	490d      	ldr	r1, [pc, #52]	@ (80098d4 <f_mount+0x88>)
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <f_mount+0x66>
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d001      	beq.n	80098b6 <f_mount+0x6a>
 80098b2:	2300      	movs	r3, #0
 80098b4:	e00a      	b.n	80098cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80098b6:	f107 010c 	add.w	r1, r7, #12
 80098ba:	f107 0308 	add.w	r3, r7, #8
 80098be:	2200      	movs	r2, #0
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff fd41 	bl	8009348 <find_volume>
 80098c6:	4603      	mov	r3, r0
 80098c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3720      	adds	r7, #32
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20000f84 	.word	0x20000f84

080098d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b098      	sub	sp, #96	@ 0x60
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	4613      	mov	r3, r2
 80098e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <f_open+0x18>
 80098ec:	2309      	movs	r3, #9
 80098ee:	e1a9      	b.n	8009c44 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80098f0:	79fb      	ldrb	r3, [r7, #7]
 80098f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80098f8:	79fa      	ldrb	r2, [r7, #7]
 80098fa:	f107 0110 	add.w	r1, r7, #16
 80098fe:	f107 0308 	add.w	r3, r7, #8
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff fd20 	bl	8009348 <find_volume>
 8009908:	4603      	mov	r3, r0
 800990a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800990e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009912:	2b00      	cmp	r3, #0
 8009914:	f040 818d 	bne.w	8009c32 <f_open+0x35a>
		dj.obj.fs = fs;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	f107 0314 	add.w	r3, r7, #20
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff fc03 	bl	8009130 <follow_path>
 800992a:	4603      	mov	r3, r0
 800992c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009930:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009934:	2b00      	cmp	r3, #0
 8009936:	d118      	bne.n	800996a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009938:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800993c:	b25b      	sxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	da03      	bge.n	800994a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009942:	2306      	movs	r3, #6
 8009944:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009948:	e00f      	b.n	800996a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	2b01      	cmp	r3, #1
 800994e:	bf8c      	ite	hi
 8009950:	2301      	movhi	r3, #1
 8009952:	2300      	movls	r3, #0
 8009954:	b2db      	uxtb	r3, r3
 8009956:	461a      	mov	r2, r3
 8009958:	f107 0314 	add.w	r3, r7, #20
 800995c:	4611      	mov	r1, r2
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe fb5c 	bl	800801c <chk_lock>
 8009964:	4603      	mov	r3, r0
 8009966:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	f003 031c 	and.w	r3, r3, #28
 8009970:	2b00      	cmp	r3, #0
 8009972:	d07f      	beq.n	8009a74 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009974:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009978:	2b00      	cmp	r3, #0
 800997a:	d017      	beq.n	80099ac <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800997c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009980:	2b04      	cmp	r3, #4
 8009982:	d10e      	bne.n	80099a2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009984:	f7fe fba6 	bl	80080d4 <enq_lock>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d006      	beq.n	800999c <f_open+0xc4>
 800998e:	f107 0314 	add.w	r3, r7, #20
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff fae7 	bl	8008f66 <dir_register>
 8009998:	4603      	mov	r3, r0
 800999a:	e000      	b.n	800999e <f_open+0xc6>
 800999c:	2312      	movs	r3, #18
 800999e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	f043 0308 	orr.w	r3, r3, #8
 80099a8:	71fb      	strb	r3, [r7, #7]
 80099aa:	e010      	b.n	80099ce <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80099ac:	7ebb      	ldrb	r3, [r7, #26]
 80099ae:	f003 0311 	and.w	r3, r3, #17
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <f_open+0xe6>
					res = FR_DENIED;
 80099b6:	2307      	movs	r3, #7
 80099b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80099bc:	e007      	b.n	80099ce <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80099be:	79fb      	ldrb	r3, [r7, #7]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <f_open+0xf6>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80099ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d168      	bne.n	8009aa8 <f_open+0x1d0>
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d063      	beq.n	8009aa8 <f_open+0x1d0>
				dw = GET_FATTIME();
 80099e0:	f7fd fc40 	bl	8007264 <get_fattime>
 80099e4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80099e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e8:	330e      	adds	r3, #14
 80099ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fe fa6b 	bl	8007ec8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80099f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f4:	3316      	adds	r3, #22
 80099f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fe fa65 	bl	8007ec8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80099fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a00:	330b      	adds	r3, #11
 8009a02:	2220      	movs	r2, #32
 8009a04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7ff f9b9 	bl	8008d84 <ld_clust>
 8009a12:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff f9d1 	bl	8008dc2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a22:	331c      	adds	r3, #28
 8009a24:	2100      	movs	r1, #0
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fe fa4e 	bl	8007ec8 <st_dword>
					fs->wflag = 1;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d037      	beq.n	8009aa8 <f_open+0x1d0>
						dw = fs->winsect;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009a3e:	f107 0314 	add.w	r3, r7, #20
 8009a42:	2200      	movs	r2, #0
 8009a44:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe fee4 	bl	8008814 <remove_chain>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009a52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d126      	bne.n	8009aa8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fe fc8c 	bl	800837c <move_window>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a6e:	3a01      	subs	r2, #1
 8009a70:	60da      	str	r2, [r3, #12]
 8009a72:	e019      	b.n	8009aa8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009a74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d115      	bne.n	8009aa8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009a7c:	7ebb      	ldrb	r3, [r7, #26]
 8009a7e:	f003 0310 	and.w	r3, r3, #16
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <f_open+0x1b6>
					res = FR_NO_FILE;
 8009a86:	2304      	movs	r3, #4
 8009a88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009a8c:	e00c      	b.n	8009aa8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d007      	beq.n	8009aa8 <f_open+0x1d0>
 8009a98:	7ebb      	ldrb	r3, [r7, #26]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <f_open+0x1d0>
						res = FR_DENIED;
 8009aa2:	2307      	movs	r3, #7
 8009aa4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009aa8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d126      	bne.n	8009afe <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	f003 0308 	and.w	r3, r3, #8
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ac0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009aca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	bf8c      	ite	hi
 8009ad6:	2301      	movhi	r3, #1
 8009ad8:	2300      	movls	r3, #0
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	461a      	mov	r2, r3
 8009ade:	f107 0314 	add.w	r3, r7, #20
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fe fb17 	bl	8008118 <inc_lock>
 8009aea:	4602      	mov	r2, r0
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <f_open+0x226>
 8009af8:	2302      	movs	r3, #2
 8009afa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009afe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 8095 	bne.w	8009c32 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7ff f938 	bl	8008d84 <ld_clust>
 8009b14:	4602      	mov	r2, r0
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1c:	331c      	adds	r3, #28
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe f994 	bl	8007e4c <ld_dword>
 8009b24:	4602      	mov	r2, r0
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	88da      	ldrh	r2, [r3, #6]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	79fa      	ldrb	r2, [r7, #7]
 8009b42:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3330      	adds	r3, #48	@ 0x30
 8009b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b5e:	2100      	movs	r1, #0
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fe f9fe 	bl	8007f62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	f003 0320 	and.w	r3, r3, #32
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d060      	beq.n	8009c32 <f_open+0x35a>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d05c      	beq.n	8009c32 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	68da      	ldr	r2, [r3, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	895b      	ldrh	r3, [r3, #10]
 8009b84:	025b      	lsls	r3, r3, #9
 8009b86:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b94:	e016      	b.n	8009bc4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fca9 	bl	80084f2 <get_fat>
 8009ba0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d802      	bhi.n	8009bae <f_open+0x2d6>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009bae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb4:	d102      	bne.n	8009bbc <f_open+0x2e4>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009bbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d103      	bne.n	8009bd4 <f_open+0x2fc>
 8009bcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d8e0      	bhi.n	8009b96 <f_open+0x2be>
				}
				fp->clust = clst;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bd8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009bda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d127      	bne.n	8009c32 <f_open+0x35a>
 8009be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d022      	beq.n	8009c32 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fe fc5f 	bl	80084b4 <clust2sect>
 8009bf6:	6478      	str	r0, [r7, #68]	@ 0x44
 8009bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d103      	bne.n	8009c06 <f_open+0x32e>
						res = FR_INT_ERR;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009c04:	e015      	b.n	8009c32 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c08:	0a5a      	lsrs	r2, r3, #9
 8009c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c0c:	441a      	add	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	7858      	ldrb	r0, [r3, #1]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6a1a      	ldr	r2, [r3, #32]
 8009c20:	2301      	movs	r3, #1
 8009c22:	f7fe f89d 	bl	8007d60 <disk_read>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <f_open+0x35a>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009c32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <f_open+0x368>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009c40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3760      	adds	r7, #96	@ 0x60
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08e      	sub	sp, #56	@ 0x38
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2200      	movs	r2, #0
 8009c62:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f107 0214 	add.w	r2, r7, #20
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7ff fdb7 	bl	80097e0 <validate>
 8009c72:	4603      	mov	r3, r0
 8009c74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009c78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d107      	bne.n	8009c90 <f_read+0x44>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	7d5b      	ldrb	r3, [r3, #21]
 8009c84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009c88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <f_read+0x4a>
 8009c90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c94:	e115      	b.n	8009ec2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	7d1b      	ldrb	r3, [r3, #20]
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <f_read+0x5a>
 8009ca2:	2307      	movs	r3, #7
 8009ca4:	e10d      	b.n	8009ec2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	f240 80fe 	bls.w	8009eb8 <f_read+0x26c>
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009cc0:	e0fa      	b.n	8009eb8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f040 80c6 	bne.w	8009e5c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	0a5b      	lsrs	r3, r3, #9
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	8952      	ldrh	r2, [r2, #10]
 8009cda:	3a01      	subs	r2, #1
 8009cdc:	4013      	ands	r3, r2
 8009cde:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d12f      	bne.n	8009d46 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d103      	bne.n	8009cf6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cf4:	e013      	b.n	8009d1e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d007      	beq.n	8009d0e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	4619      	mov	r1, r3
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f7fe fe82 	bl	8008a0e <clmt_clust>
 8009d0a:	6338      	str	r0, [r7, #48]	@ 0x30
 8009d0c:	e007      	b.n	8009d1e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	69db      	ldr	r3, [r3, #28]
 8009d14:	4619      	mov	r1, r3
 8009d16:	4610      	mov	r0, r2
 8009d18:	f7fe fbeb 	bl	80084f2 <get_fat>
 8009d1c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d804      	bhi.n	8009d2e <f_read+0xe2>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2202      	movs	r2, #2
 8009d28:	755a      	strb	r2, [r3, #21]
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e0c9      	b.n	8009ec2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d34:	d104      	bne.n	8009d40 <f_read+0xf4>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	755a      	strb	r2, [r3, #21]
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e0c0      	b.n	8009ec2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d44:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4610      	mov	r0, r2
 8009d50:	f7fe fbb0 	bl	80084b4 <clust2sect>
 8009d54:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d104      	bne.n	8009d66 <f_read+0x11a>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	755a      	strb	r2, [r3, #21]
 8009d62:	2302      	movs	r3, #2
 8009d64:	e0ad      	b.n	8009ec2 <f_read+0x276>
			sect += csect;
 8009d66:	69ba      	ldr	r2, [r7, #24]
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	0a5b      	lsrs	r3, r3, #9
 8009d72:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d039      	beq.n	8009dee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7e:	4413      	add	r3, r2
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	8952      	ldrh	r2, [r2, #10]
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d905      	bls.n	8009d94 <f_read+0x148>
					cc = fs->csize - csect;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	895b      	ldrh	r3, [r3, #10]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	7858      	ldrb	r0, [r3, #1]
 8009d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d9e:	f7fd ffdf 	bl	8007d60 <disk_read>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d004      	beq.n	8009db2 <f_read+0x166>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2201      	movs	r2, #1
 8009dac:	755a      	strb	r2, [r3, #21]
 8009dae:	2301      	movs	r3, #1
 8009db0:	e087      	b.n	8009ec2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	7d1b      	ldrb	r3, [r3, #20]
 8009db6:	b25b      	sxtb	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	da14      	bge.n	8009de6 <f_read+0x19a>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6a1a      	ldr	r2, [r3, #32]
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d90d      	bls.n	8009de6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a1a      	ldr	r2, [r3, #32]
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	025b      	lsls	r3, r3, #9
 8009dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dd6:	18d0      	adds	r0, r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3330      	adds	r3, #48	@ 0x30
 8009ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009de0:	4619      	mov	r1, r3
 8009de2:	f7fe f89d 	bl	8007f20 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	025b      	lsls	r3, r3, #9
 8009dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009dec:	e050      	b.n	8009e90 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d02e      	beq.n	8009e56 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	7d1b      	ldrb	r3, [r3, #20]
 8009dfc:	b25b      	sxtb	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da18      	bge.n	8009e34 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	7858      	ldrb	r0, [r3, #1]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6a1a      	ldr	r2, [r3, #32]
 8009e10:	2301      	movs	r3, #1
 8009e12:	f7fd ffc5 	bl	8007da0 <disk_write>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d004      	beq.n	8009e26 <f_read+0x1da>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	755a      	strb	r2, [r3, #21]
 8009e22:	2301      	movs	r3, #1
 8009e24:	e04d      	b.n	8009ec2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	7d1b      	ldrb	r3, [r3, #20]
 8009e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	7858      	ldrb	r0, [r3, #1]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e3e:	2301      	movs	r3, #1
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	f7fd ff8d 	bl	8007d60 <disk_read>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <f_read+0x20a>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	755a      	strb	r2, [r3, #21]
 8009e52:	2301      	movs	r3, #1
 8009e54:	e035      	b.n	8009ec2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e64:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d901      	bls.n	8009e76 <f_read+0x22a>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e84:	4413      	add	r3, r2
 8009e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e8c:	f7fe f848 	bl	8007f20 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e94:	4413      	add	r3, r2
 8009e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	699a      	ldr	r2, [r3, #24]
 8009e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9e:	441a      	add	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	619a      	str	r2, [r3, #24]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eaa:	441a      	add	r2, r3
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f47f af01 	bne.w	8009cc2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3738      	adds	r7, #56	@ 0x38
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b08c      	sub	sp, #48	@ 0x30
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
 8009ed6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f107 0210 	add.w	r2, r7, #16
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff fc78 	bl	80097e0 <validate>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d107      	bne.n	8009f0e <f_write+0x44>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	7d5b      	ldrb	r3, [r3, #21]
 8009f02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009f06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <f_write+0x4a>
 8009f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f12:	e14b      	b.n	800a1ac <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	7d1b      	ldrb	r3, [r3, #20]
 8009f18:	f003 0302 	and.w	r3, r3, #2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <f_write+0x5a>
 8009f20:	2307      	movs	r3, #7
 8009f22:	e143      	b.n	800a1ac <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	699a      	ldr	r2, [r3, #24]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	441a      	add	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	f080 812d 	bcs.w	800a190 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	43db      	mvns	r3, r3
 8009f3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009f3e:	e127      	b.n	800a190 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f040 80e3 	bne.w	800a114 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	0a5b      	lsrs	r3, r3, #9
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	8952      	ldrh	r2, [r2, #10]
 8009f58:	3a01      	subs	r2, #1
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d143      	bne.n	8009fec <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10c      	bne.n	8009f86 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d11a      	bne.n	8009fae <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe fcae 	bl	80088de <create_chain>
 8009f82:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009f84:	e013      	b.n	8009fae <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d007      	beq.n	8009f9e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	4619      	mov	r1, r3
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7fe fd3a 	bl	8008a0e <clmt_clust>
 8009f9a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009f9c:	e007      	b.n	8009fae <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7fe fc99 	bl	80088de <create_chain>
 8009fac:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 80f2 	beq.w	800a19a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d104      	bne.n	8009fc6 <f_write+0xfc>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	755a      	strb	r2, [r3, #21]
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	e0f2      	b.n	800a1ac <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fcc:	d104      	bne.n	8009fd8 <f_write+0x10e>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	755a      	strb	r2, [r3, #21]
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e0e9      	b.n	800a1ac <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fdc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d102      	bne.n	8009fec <f_write+0x122>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	7d1b      	ldrb	r3, [r3, #20]
 8009ff0:	b25b      	sxtb	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	da18      	bge.n	800a028 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	7858      	ldrb	r0, [r3, #1]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a1a      	ldr	r2, [r3, #32]
 800a004:	2301      	movs	r3, #1
 800a006:	f7fd fecb 	bl	8007da0 <disk_write>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d004      	beq.n	800a01a <f_write+0x150>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2201      	movs	r2, #1
 800a014:	755a      	strb	r2, [r3, #21]
 800a016:	2301      	movs	r3, #1
 800a018:	e0c8      	b.n	800a1ac <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	7d1b      	ldrb	r3, [r3, #20]
 800a01e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a022:	b2da      	uxtb	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	4619      	mov	r1, r3
 800a030:	4610      	mov	r0, r2
 800a032:	f7fe fa3f 	bl	80084b4 <clust2sect>
 800a036:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d104      	bne.n	800a048 <f_write+0x17e>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2202      	movs	r2, #2
 800a042:	755a      	strb	r2, [r3, #21]
 800a044:	2302      	movs	r3, #2
 800a046:	e0b1      	b.n	800a1ac <f_write+0x2e2>
			sect += csect;
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	4413      	add	r3, r2
 800a04e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	0a5b      	lsrs	r3, r3, #9
 800a054:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d03c      	beq.n	800a0d6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	4413      	add	r3, r2
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	8952      	ldrh	r2, [r2, #10]
 800a066:	4293      	cmp	r3, r2
 800a068:	d905      	bls.n	800a076 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	895b      	ldrh	r3, [r3, #10]
 800a06e:	461a      	mov	r2, r3
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	7858      	ldrb	r0, [r3, #1]
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	69f9      	ldr	r1, [r7, #28]
 800a080:	f7fd fe8e 	bl	8007da0 <disk_write>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d004      	beq.n	800a094 <f_write+0x1ca>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2201      	movs	r2, #1
 800a08e:	755a      	strb	r2, [r3, #21]
 800a090:	2301      	movs	r3, #1
 800a092:	e08b      	b.n	800a1ac <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6a1a      	ldr	r2, [r3, #32]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	6a3a      	ldr	r2, [r7, #32]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d915      	bls.n	800a0ce <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a1a      	ldr	r2, [r3, #32]
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	025b      	lsls	r3, r3, #9
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	f7fd ff30 	bl	8007f20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	7d1b      	ldrb	r3, [r3, #20]
 800a0c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	025b      	lsls	r3, r3, #9
 800a0d2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a0d4:	e03f      	b.n	800a156 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d016      	beq.n	800a10e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	699a      	ldr	r2, [r3, #24]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d210      	bcs.n	800a10e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	7858      	ldrb	r0, [r3, #1]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	f7fd fe31 	bl	8007d60 <disk_read>
 800a0fe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a100:	2b00      	cmp	r3, #0
 800a102:	d004      	beq.n	800a10e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2201      	movs	r2, #1
 800a108:	755a      	strb	r2, [r3, #21]
 800a10a:	2301      	movs	r3, #1
 800a10c:	e04e      	b.n	800a1ac <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a120:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	429a      	cmp	r2, r3
 800a128:	d901      	bls.n	800a12e <f_write+0x264>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13c:	4413      	add	r3, r2
 800a13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a140:	69f9      	ldr	r1, [r7, #28]
 800a142:	4618      	mov	r0, r3
 800a144:	f7fd feec 	bl	8007f20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	7d1b      	ldrb	r3, [r3, #20]
 800a14c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a150:	b2da      	uxtb	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a156:	69fa      	ldr	r2, [r7, #28]
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15a:	4413      	add	r3, r2
 800a15c:	61fb      	str	r3, [r7, #28]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	441a      	add	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	619a      	str	r2, [r3, #24]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	429a      	cmp	r2, r3
 800a174:	bf38      	it	cc
 800a176:	461a      	movcc	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	60da      	str	r2, [r3, #12]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a182:	441a      	add	r2, r3
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f47f aed4 	bne.w	8009f40 <f_write+0x76>
 800a198:	e000      	b.n	800a19c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a19a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3730      	adds	r7, #48	@ 0x30
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f107 0208 	add.w	r2, r7, #8
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff fb0b 	bl	80097e0 <validate>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d168      	bne.n	800a2a6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	7d1b      	ldrb	r3, [r3, #20]
 800a1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d062      	beq.n	800a2a6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7d1b      	ldrb	r3, [r3, #20]
 800a1e4:	b25b      	sxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	da15      	bge.n	800a216 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	7858      	ldrb	r0, [r3, #1]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1a      	ldr	r2, [r3, #32]
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f7fd fdd1 	bl	8007da0 <disk_write>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <f_sync+0x54>
 800a204:	2301      	movs	r3, #1
 800a206:	e04f      	b.n	800a2a8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7d1b      	ldrb	r3, [r3, #20]
 800a20c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a210:	b2da      	uxtb	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a216:	f7fd f825 	bl	8007264 <get_fattime>
 800a21a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f7fe f8a9 	bl	800837c <move_window>
 800a22a:	4603      	mov	r3, r0
 800a22c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d138      	bne.n	800a2a6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a238:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	330b      	adds	r3, #11
 800a23e:	781a      	ldrb	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	330b      	adds	r3, #11
 800a244:	f042 0220 	orr.w	r2, r2, #32
 800a248:	b2d2      	uxtb	r2, r2
 800a24a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6818      	ldr	r0, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	461a      	mov	r2, r3
 800a256:	68f9      	ldr	r1, [r7, #12]
 800a258:	f7fe fdb3 	bl	8008dc2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f103 021c 	add.w	r2, r3, #28
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	4619      	mov	r1, r3
 800a268:	4610      	mov	r0, r2
 800a26a:	f7fd fe2d 	bl	8007ec8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3316      	adds	r3, #22
 800a272:	6939      	ldr	r1, [r7, #16]
 800a274:	4618      	mov	r0, r3
 800a276:	f7fd fe27 	bl	8007ec8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3312      	adds	r3, #18
 800a27e:	2100      	movs	r1, #0
 800a280:	4618      	mov	r0, r3
 800a282:	f7fd fe06 	bl	8007e92 <st_word>
					fs->wflag = 1;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2201      	movs	r2, #1
 800a28a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe f8a2 	bl	80083d8 <sync_fs>
 800a294:	4603      	mov	r3, r0
 800a296:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	7d1b      	ldrb	r3, [r3, #20]
 800a29c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff ff7b 	bl	800a1b4 <f_sync>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d118      	bne.n	800a2fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f107 0208 	add.w	r2, r7, #8
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7ff fa85 	bl	80097e0 <validate>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10c      	bne.n	800a2fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fd ffa5 	bl	8008234 <dec_lock>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d102      	bne.n	800a2fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b092      	sub	sp, #72	@ 0x48
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a310:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a314:	f107 030c 	add.w	r3, r7, #12
 800a318:	2200      	movs	r2, #0
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7ff f814 	bl	8009348 <find_volume>
 800a320:	4603      	mov	r3, r0
 800a322:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800a326:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f040 8099 	bne.w	800a462 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a338:	691a      	ldr	r2, [r3, #16]
 800a33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	3b02      	subs	r3, #2
 800a340:	429a      	cmp	r2, r3
 800a342:	d804      	bhi.n	800a34e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a346:	691a      	ldr	r2, [r3, #16]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	e089      	b.n	800a462 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a34e:	2300      	movs	r3, #0
 800a350:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d128      	bne.n	800a3ac <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a35a:	2302      	movs	r3, #2
 800a35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a362:	f107 0314 	add.w	r3, r7, #20
 800a366:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fe f8c2 	bl	80084f2 <get_fat>
 800a36e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a376:	d103      	bne.n	800a380 <f_getfree+0x7c>
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a37e:	e063      	b.n	800a448 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a382:	2b01      	cmp	r3, #1
 800a384:	d103      	bne.n	800a38e <f_getfree+0x8a>
 800a386:	2302      	movs	r3, #2
 800a388:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a38c:	e05c      	b.n	800a448 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <f_getfree+0x96>
 800a394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a396:	3301      	adds	r3, #1
 800a398:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800a39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a39c:	3301      	adds	r3, #1
 800a39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d3db      	bcc.n	800a362 <f_getfree+0x5e>
 800a3aa:	e04d      	b.n	800a448 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3bc:	2300      	movs	r3, #0
 800a3be:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d113      	bne.n	800a3ee <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a3c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	1c5a      	adds	r2, r3, #1
 800a3cc:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	f7fd ffd4 	bl	800837c <move_window>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800a3da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d131      	bne.n	800a446 <f_getfree+0x142>
							p = fs->win;
 800a3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e4:	3330      	adds	r3, #48	@ 0x30
 800a3e6:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800a3e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3ec:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d10f      	bne.n	800a416 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a3f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3f8:	f7fd fd10 	bl	8007e1c <ld_word>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d102      	bne.n	800a408 <f_getfree+0x104>
 800a402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a404:	3301      	adds	r3, #1
 800a406:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800a408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40a:	3302      	adds	r3, #2
 800a40c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a410:	3b02      	subs	r3, #2
 800a412:	637b      	str	r3, [r7, #52]	@ 0x34
 800a414:	e010      	b.n	800a438 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a418:	f7fd fd18 	bl	8007e4c <ld_dword>
 800a41c:	4603      	mov	r3, r0
 800a41e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d102      	bne.n	800a42c <f_getfree+0x128>
 800a426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a428:	3301      	adds	r3, #1
 800a42a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800a42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42e:	3304      	adds	r3, #4
 800a430:	633b      	str	r3, [r7, #48]	@ 0x30
 800a432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a434:	3b04      	subs	r3, #4
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800a438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a43a:	3b01      	subs	r3, #1
 800a43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a43e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1bd      	bne.n	800a3c0 <f_getfree+0xbc>
 800a444:	e000      	b.n	800a448 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a446:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a44c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a450:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a452:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	791a      	ldrb	r2, [r3, #4]
 800a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45a:	f042 0201 	orr.w	r2, r2, #1
 800a45e:	b2d2      	uxtb	r2, r2
 800a460:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a462:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a466:	4618      	mov	r0, r3
 800a468:	3748      	adds	r7, #72	@ 0x48
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b09e      	sub	sp, #120	@ 0x78
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a47a:	f107 010c 	add.w	r1, r7, #12
 800a47e:	1d3b      	adds	r3, r7, #4
 800a480:	2202      	movs	r2, #2
 800a482:	4618      	mov	r0, r3
 800a484:	f7fe ff60 	bl	8009348 <find_volume>
 800a488:	4603      	mov	r3, r0
 800a48a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800a492:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a496:	2b00      	cmp	r3, #0
 800a498:	f040 808e 	bne.w	800a5b8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fe43 	bl	8009130 <follow_path>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a4b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d108      	bne.n	800a4ca <f_unlink+0x5c>
 800a4b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a4bc:	2102      	movs	r1, #2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fd fdac 	bl	800801c <chk_lock>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a4ca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d172      	bne.n	800a5b8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a4d2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a4d6:	b25b      	sxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	da03      	bge.n	800a4e4 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a4dc:	2306      	movs	r3, #6
 800a4de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a4e2:	e008      	b.n	800a4f6 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a4e4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a4f0:	2307      	movs	r3, #7
 800a4f2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800a4f6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d134      	bne.n	800a568 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a502:	4611      	mov	r1, r2
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe fc3d 	bl	8008d84 <ld_clust>
 800a50a:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a50c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a510:	f003 0310 	and.w	r3, r3, #16
 800a514:	2b00      	cmp	r3, #0
 800a516:	d027      	beq.n	800a568 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800a51c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a51e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a520:	f107 0310 	add.w	r3, r7, #16
 800a524:	2100      	movs	r1, #0
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe faa5 	bl	8008a76 <dir_sdi>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800a532:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a536:	2b00      	cmp	r3, #0
 800a538:	d116      	bne.n	800a568 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a53a:	f107 0310 	add.w	r3, r7, #16
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe fc5e 	bl	8008e02 <dir_read>
 800a546:	4603      	mov	r3, r0
 800a548:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a54c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a550:	2b00      	cmp	r3, #0
 800a552:	d102      	bne.n	800a55a <f_unlink+0xec>
 800a554:	2307      	movs	r3, #7
 800a556:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a55a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d102      	bne.n	800a568 <f_unlink+0xfa>
 800a562:	2300      	movs	r3, #0
 800a564:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800a568:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d123      	bne.n	800a5b8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a570:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe fd28 	bl	8008fca <dir_remove>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a580:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10c      	bne.n	800a5a2 <f_unlink+0x134>
 800a588:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d009      	beq.n	800a5a2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a58e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a592:	2200      	movs	r2, #0
 800a594:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe f93c 	bl	8008814 <remove_chain>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a5a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <f_unlink+0x14a>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fd ff13 	bl	80083d8 <sync_fs>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a5b8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3778      	adds	r7, #120	@ 0x78
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800a5c4:	b590      	push	{r4, r7, lr}
 800a5c6:	b0a5      	sub	sp, #148	@ 0x94
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fe fe1e 	bl	8009212 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800a5d6:	f107 0120 	add.w	r1, r7, #32
 800a5da:	1d3b      	adds	r3, r7, #4
 800a5dc:	2202      	movs	r2, #2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe feb2 	bl	8009348 <find_volume>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800a5ea:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f040 80db 	bne.w	800a7aa <f_rename+0x1e6>
		djo.obj.fs = fs;
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a5fe:	4611      	mov	r1, r2
 800a600:	4618      	mov	r0, r3
 800a602:	f7fe fd95 	bl	8009130 <follow_path>
 800a606:	4603      	mov	r3, r0
 800a608:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800a60c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a610:	2b00      	cmp	r3, #0
 800a612:	d108      	bne.n	800a626 <f_rename+0x62>
 800a614:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a618:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <f_rename+0x62>
 800a620:	2306      	movs	r3, #6
 800a622:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800a626:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d108      	bne.n	800a640 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800a62e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a632:	2102      	movs	r1, #2
 800a634:	4618      	mov	r0, r3
 800a636:	f7fd fcf1 	bl	800801c <chk_lock>
 800a63a:	4603      	mov	r3, r0
 800a63c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800a640:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a644:	2b00      	cmp	r3, #0
 800a646:	f040 80b0 	bne.w	800a7aa <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800a64a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a64c:	f103 010b 	add.w	r1, r3, #11
 800a650:	f107 0308 	add.w	r3, r7, #8
 800a654:	2215      	movs	r2, #21
 800a656:	4618      	mov	r0, r3
 800a658:	f7fd fc62 	bl	8007f20 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800a65c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800a660:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a664:	2230      	movs	r2, #48	@ 0x30
 800a666:	4618      	mov	r0, r3
 800a668:	f7fd fc5a 	bl	8007f20 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a672:	4611      	mov	r1, r2
 800a674:	4618      	mov	r0, r3
 800a676:	f7fe fd5b 	bl	8009130 <follow_path>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800a680:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10c      	bne.n	800a6a2 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800a688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a68a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d105      	bne.n	800a69c <f_rename+0xd8>
 800a690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a692:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a694:	429a      	cmp	r2, r3
 800a696:	d101      	bne.n	800a69c <f_rename+0xd8>
 800a698:	2304      	movs	r3, #4
 800a69a:	e000      	b.n	800a69e <f_rename+0xda>
 800a69c:	2308      	movs	r3, #8
 800a69e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800a6a2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d168      	bne.n	800a77c <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800a6aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe fc59 	bl	8008f66 <dir_register>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800a6ba:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d15c      	bne.n	800a77c <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800a6c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800a6c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6cc:	f103 000d 	add.w	r0, r3, #13
 800a6d0:	f107 0308 	add.w	r3, r7, #8
 800a6d4:	3302      	adds	r3, #2
 800a6d6:	2213      	movs	r2, #19
 800a6d8:	4619      	mov	r1, r3
 800a6da:	f7fd fc21 	bl	8007f20 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800a6de:	7a3a      	ldrb	r2, [r7, #8]
 800a6e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6e4:	330b      	adds	r3, #11
 800a6e6:	f042 0220 	orr.w	r2, r2, #32
 800a6ea:	b2d2      	uxtb	r2, r2
 800a6ec:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800a6f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6f8:	330b      	adds	r3, #11
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	f003 0310 	and.w	r3, r3, #16
 800a700:	2b00      	cmp	r3, #0
 800a702:	d03b      	beq.n	800a77c <f_rename+0x1b8>
 800a704:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a708:	429a      	cmp	r2, r3
 800a70a:	d037      	beq.n	800a77c <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800a70c:	6a3c      	ldr	r4, [r7, #32]
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800a714:	4618      	mov	r0, r3
 800a716:	f7fe fb35 	bl	8008d84 <ld_clust>
 800a71a:	4603      	mov	r3, r0
 800a71c:	4619      	mov	r1, r3
 800a71e:	4620      	mov	r0, r4
 800a720:	f7fd fec8 	bl	80084b4 <clust2sect>
 800a724:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800a728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d103      	bne.n	800a738 <f_rename+0x174>
								res = FR_INT_ERR;
 800a730:	2302      	movs	r3, #2
 800a732:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a736:	e021      	b.n	800a77c <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fd fe1c 	bl	800837c <move_window>
 800a744:	4603      	mov	r3, r0
 800a746:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	3330      	adds	r3, #48	@ 0x30
 800a74e:	3320      	adds	r3, #32
 800a750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800a754:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10f      	bne.n	800a77c <f_rename+0x1b8>
 800a75c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a760:	3301      	adds	r3, #1
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b2e      	cmp	r3, #46	@ 0x2e
 800a766:	d109      	bne.n	800a77c <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a76c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800a770:	4618      	mov	r0, r3
 800a772:	f7fe fb26 	bl	8008dc2 <st_clust>
									fs->wflag = 1;
 800a776:	6a3b      	ldr	r3, [r7, #32]
 800a778:	2201      	movs	r2, #1
 800a77a:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800a77c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a780:	2b00      	cmp	r3, #0
 800a782:	d112      	bne.n	800a7aa <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800a784:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fc1e 	bl	8008fca <dir_remove>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800a794:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <f_rename+0x1e6>
					res = sync_fs(fs);
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fd fe1a 	bl	80083d8 <sync_fs>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a7aa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3794      	adds	r7, #148	@ 0x94
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd90      	pop	{r4, r7, pc}

0800a7b6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b088      	sub	sp, #32
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a7ca:	e01c      	b.n	800a806 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a7cc:	f107 0310 	add.w	r3, r7, #16
 800a7d0:	f107 0114 	add.w	r1, r7, #20
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff fa38 	bl	8009c4c <f_read>
		if (rc != 1) break;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d117      	bne.n	800a812 <f_gets+0x5c>
		c = s[0];
 800a7e2:	7d3b      	ldrb	r3, [r7, #20]
 800a7e4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
 800a7e8:	2b0d      	cmp	r3, #13
 800a7ea:	d00b      	beq.n	800a804 <f_gets+0x4e>
		*p++ = c;
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	61ba      	str	r2, [r7, #24]
 800a7f2:	7dfa      	ldrb	r2, [r7, #23]
 800a7f4:	701a      	strb	r2, [r3, #0]
		n++;
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	2b0a      	cmp	r3, #10
 800a800:	d009      	beq.n	800a816 <f_gets+0x60>
 800a802:	e000      	b.n	800a806 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a804:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	3b01      	subs	r3, #1
 800a80a:	69fa      	ldr	r2, [r7, #28]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	dbdd      	blt.n	800a7cc <f_gets+0x16>
 800a810:	e002      	b.n	800a818 <f_gets+0x62>
		if (rc != 1) break;
 800a812:	bf00      	nop
 800a814:	e000      	b.n	800a818 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800a816:	bf00      	nop
	}
	*p = 0;
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	2200      	movs	r2, #0
 800a81c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <f_gets+0x72>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	e000      	b.n	800a82a <f_gets+0x74>
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3720      	adds	r7, #32
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	4613      	mov	r3, r2
 800a840:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a842:	2301      	movs	r3, #1
 800a844:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a84a:	4b1f      	ldr	r3, [pc, #124]	@ (800a8c8 <FATFS_LinkDriverEx+0x94>)
 800a84c:	7a5b      	ldrb	r3, [r3, #9]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d131      	bne.n	800a8b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a854:	4b1c      	ldr	r3, [pc, #112]	@ (800a8c8 <FATFS_LinkDriverEx+0x94>)
 800a856:	7a5b      	ldrb	r3, [r3, #9]
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	461a      	mov	r2, r3
 800a85c:	4b1a      	ldr	r3, [pc, #104]	@ (800a8c8 <FATFS_LinkDriverEx+0x94>)
 800a85e:	2100      	movs	r1, #0
 800a860:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a862:	4b19      	ldr	r3, [pc, #100]	@ (800a8c8 <FATFS_LinkDriverEx+0x94>)
 800a864:	7a5b      	ldrb	r3, [r3, #9]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	4a17      	ldr	r2, [pc, #92]	@ (800a8c8 <FATFS_LinkDriverEx+0x94>)
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a872:	4b15      	ldr	r3, [pc, #84]	@ (800a8c8 <FATFS_LinkDriverEx+0x94>)
 800a874:	7a5b      	ldrb	r3, [r3, #9]
 800a876:	b2db      	uxtb	r3, r3
 800a878:	461a      	mov	r2, r3
 800a87a:	4b13      	ldr	r3, [pc, #76]	@ (800a8c8 <FATFS_LinkDriverEx+0x94>)
 800a87c:	4413      	add	r3, r2
 800a87e:	79fa      	ldrb	r2, [r7, #7]
 800a880:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a882:	4b11      	ldr	r3, [pc, #68]	@ (800a8c8 <FATFS_LinkDriverEx+0x94>)
 800a884:	7a5b      	ldrb	r3, [r3, #9]
 800a886:	b2db      	uxtb	r3, r3
 800a888:	1c5a      	adds	r2, r3, #1
 800a88a:	b2d1      	uxtb	r1, r2
 800a88c:	4a0e      	ldr	r2, [pc, #56]	@ (800a8c8 <FATFS_LinkDriverEx+0x94>)
 800a88e:	7251      	strb	r1, [r2, #9]
 800a890:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a892:	7dbb      	ldrb	r3, [r7, #22]
 800a894:	3330      	adds	r3, #48	@ 0x30
 800a896:	b2da      	uxtb	r2, r3
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	223a      	movs	r2, #58	@ 0x3a
 800a8a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	3302      	adds	r3, #2
 800a8a8:	222f      	movs	r2, #47	@ 0x2f
 800a8aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	3303      	adds	r3, #3
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	20000fac 	.word	0x20000fac

0800a8cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7ff ffaa 	bl	800a834 <FATFS_LinkDriverEx>
 800a8e0:	4603      	mov	r3, r0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <_strtol_l.constprop.0>:
 800a8ec:	2b24      	cmp	r3, #36	@ 0x24
 800a8ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f2:	4686      	mov	lr, r0
 800a8f4:	4690      	mov	r8, r2
 800a8f6:	d801      	bhi.n	800a8fc <_strtol_l.constprop.0+0x10>
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d106      	bne.n	800a90a <_strtol_l.constprop.0+0x1e>
 800a8fc:	f001 f9b6 	bl	800bc6c <__errno>
 800a900:	2316      	movs	r3, #22
 800a902:	6003      	str	r3, [r0, #0]
 800a904:	2000      	movs	r0, #0
 800a906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90a:	4834      	ldr	r0, [pc, #208]	@ (800a9dc <_strtol_l.constprop.0+0xf0>)
 800a90c:	460d      	mov	r5, r1
 800a90e:	462a      	mov	r2, r5
 800a910:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a914:	5d06      	ldrb	r6, [r0, r4]
 800a916:	f016 0608 	ands.w	r6, r6, #8
 800a91a:	d1f8      	bne.n	800a90e <_strtol_l.constprop.0+0x22>
 800a91c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a91e:	d12d      	bne.n	800a97c <_strtol_l.constprop.0+0x90>
 800a920:	782c      	ldrb	r4, [r5, #0]
 800a922:	2601      	movs	r6, #1
 800a924:	1c95      	adds	r5, r2, #2
 800a926:	f033 0210 	bics.w	r2, r3, #16
 800a92a:	d109      	bne.n	800a940 <_strtol_l.constprop.0+0x54>
 800a92c:	2c30      	cmp	r4, #48	@ 0x30
 800a92e:	d12a      	bne.n	800a986 <_strtol_l.constprop.0+0x9a>
 800a930:	782a      	ldrb	r2, [r5, #0]
 800a932:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a936:	2a58      	cmp	r2, #88	@ 0x58
 800a938:	d125      	bne.n	800a986 <_strtol_l.constprop.0+0x9a>
 800a93a:	786c      	ldrb	r4, [r5, #1]
 800a93c:	2310      	movs	r3, #16
 800a93e:	3502      	adds	r5, #2
 800a940:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a944:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a948:	2200      	movs	r2, #0
 800a94a:	fbbc f9f3 	udiv	r9, ip, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	fb03 ca19 	mls	sl, r3, r9, ip
 800a954:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a958:	2f09      	cmp	r7, #9
 800a95a:	d81b      	bhi.n	800a994 <_strtol_l.constprop.0+0xa8>
 800a95c:	463c      	mov	r4, r7
 800a95e:	42a3      	cmp	r3, r4
 800a960:	dd27      	ble.n	800a9b2 <_strtol_l.constprop.0+0xc6>
 800a962:	1c57      	adds	r7, r2, #1
 800a964:	d007      	beq.n	800a976 <_strtol_l.constprop.0+0x8a>
 800a966:	4581      	cmp	r9, r0
 800a968:	d320      	bcc.n	800a9ac <_strtol_l.constprop.0+0xc0>
 800a96a:	d101      	bne.n	800a970 <_strtol_l.constprop.0+0x84>
 800a96c:	45a2      	cmp	sl, r4
 800a96e:	db1d      	blt.n	800a9ac <_strtol_l.constprop.0+0xc0>
 800a970:	fb00 4003 	mla	r0, r0, r3, r4
 800a974:	2201      	movs	r2, #1
 800a976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a97a:	e7eb      	b.n	800a954 <_strtol_l.constprop.0+0x68>
 800a97c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a97e:	bf04      	itt	eq
 800a980:	782c      	ldrbeq	r4, [r5, #0]
 800a982:	1c95      	addeq	r5, r2, #2
 800a984:	e7cf      	b.n	800a926 <_strtol_l.constprop.0+0x3a>
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1da      	bne.n	800a940 <_strtol_l.constprop.0+0x54>
 800a98a:	2c30      	cmp	r4, #48	@ 0x30
 800a98c:	bf0c      	ite	eq
 800a98e:	2308      	moveq	r3, #8
 800a990:	230a      	movne	r3, #10
 800a992:	e7d5      	b.n	800a940 <_strtol_l.constprop.0+0x54>
 800a994:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a998:	2f19      	cmp	r7, #25
 800a99a:	d801      	bhi.n	800a9a0 <_strtol_l.constprop.0+0xb4>
 800a99c:	3c37      	subs	r4, #55	@ 0x37
 800a99e:	e7de      	b.n	800a95e <_strtol_l.constprop.0+0x72>
 800a9a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a9a4:	2f19      	cmp	r7, #25
 800a9a6:	d804      	bhi.n	800a9b2 <_strtol_l.constprop.0+0xc6>
 800a9a8:	3c57      	subs	r4, #87	@ 0x57
 800a9aa:	e7d8      	b.n	800a95e <_strtol_l.constprop.0+0x72>
 800a9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b0:	e7e1      	b.n	800a976 <_strtol_l.constprop.0+0x8a>
 800a9b2:	1c53      	adds	r3, r2, #1
 800a9b4:	d108      	bne.n	800a9c8 <_strtol_l.constprop.0+0xdc>
 800a9b6:	2322      	movs	r3, #34	@ 0x22
 800a9b8:	f8ce 3000 	str.w	r3, [lr]
 800a9bc:	4660      	mov	r0, ip
 800a9be:	f1b8 0f00 	cmp.w	r8, #0
 800a9c2:	d0a0      	beq.n	800a906 <_strtol_l.constprop.0+0x1a>
 800a9c4:	1e69      	subs	r1, r5, #1
 800a9c6:	e006      	b.n	800a9d6 <_strtol_l.constprop.0+0xea>
 800a9c8:	b106      	cbz	r6, 800a9cc <_strtol_l.constprop.0+0xe0>
 800a9ca:	4240      	negs	r0, r0
 800a9cc:	f1b8 0f00 	cmp.w	r8, #0
 800a9d0:	d099      	beq.n	800a906 <_strtol_l.constprop.0+0x1a>
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	d1f6      	bne.n	800a9c4 <_strtol_l.constprop.0+0xd8>
 800a9d6:	f8c8 1000 	str.w	r1, [r8]
 800a9da:	e794      	b.n	800a906 <_strtol_l.constprop.0+0x1a>
 800a9dc:	08010a05 	.word	0x08010a05

0800a9e0 <_strtol_r>:
 800a9e0:	f7ff bf84 	b.w	800a8ec <_strtol_l.constprop.0>

0800a9e4 <strtol>:
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	460a      	mov	r2, r1
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	4802      	ldr	r0, [pc, #8]	@ (800a9f4 <strtol+0x10>)
 800a9ec:	6800      	ldr	r0, [r0, #0]
 800a9ee:	f7ff bf7d 	b.w	800a8ec <_strtol_l.constprop.0>
 800a9f2:	bf00      	nop
 800a9f4:	2000003c 	.word	0x2000003c

0800a9f8 <__cvt>:
 800a9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9fc:	ec57 6b10 	vmov	r6, r7, d0
 800aa00:	2f00      	cmp	r7, #0
 800aa02:	460c      	mov	r4, r1
 800aa04:	4619      	mov	r1, r3
 800aa06:	463b      	mov	r3, r7
 800aa08:	bfbb      	ittet	lt
 800aa0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aa0e:	461f      	movlt	r7, r3
 800aa10:	2300      	movge	r3, #0
 800aa12:	232d      	movlt	r3, #45	@ 0x2d
 800aa14:	700b      	strb	r3, [r1, #0]
 800aa16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aa1c:	4691      	mov	r9, r2
 800aa1e:	f023 0820 	bic.w	r8, r3, #32
 800aa22:	bfbc      	itt	lt
 800aa24:	4632      	movlt	r2, r6
 800aa26:	4616      	movlt	r6, r2
 800aa28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa2c:	d005      	beq.n	800aa3a <__cvt+0x42>
 800aa2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aa32:	d100      	bne.n	800aa36 <__cvt+0x3e>
 800aa34:	3401      	adds	r4, #1
 800aa36:	2102      	movs	r1, #2
 800aa38:	e000      	b.n	800aa3c <__cvt+0x44>
 800aa3a:	2103      	movs	r1, #3
 800aa3c:	ab03      	add	r3, sp, #12
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	ab02      	add	r3, sp, #8
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	ec47 6b10 	vmov	d0, r6, r7
 800aa48:	4653      	mov	r3, sl
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	f001 f9e8 	bl	800be20 <_dtoa_r>
 800aa50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa54:	4605      	mov	r5, r0
 800aa56:	d119      	bne.n	800aa8c <__cvt+0x94>
 800aa58:	f019 0f01 	tst.w	r9, #1
 800aa5c:	d00e      	beq.n	800aa7c <__cvt+0x84>
 800aa5e:	eb00 0904 	add.w	r9, r0, r4
 800aa62:	2200      	movs	r2, #0
 800aa64:	2300      	movs	r3, #0
 800aa66:	4630      	mov	r0, r6
 800aa68:	4639      	mov	r1, r7
 800aa6a:	f7f6 f84d 	bl	8000b08 <__aeabi_dcmpeq>
 800aa6e:	b108      	cbz	r0, 800aa74 <__cvt+0x7c>
 800aa70:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa74:	2230      	movs	r2, #48	@ 0x30
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	454b      	cmp	r3, r9
 800aa7a:	d31e      	bcc.n	800aaba <__cvt+0xc2>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa80:	1b5b      	subs	r3, r3, r5
 800aa82:	4628      	mov	r0, r5
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	b004      	add	sp, #16
 800aa88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa90:	eb00 0904 	add.w	r9, r0, r4
 800aa94:	d1e5      	bne.n	800aa62 <__cvt+0x6a>
 800aa96:	7803      	ldrb	r3, [r0, #0]
 800aa98:	2b30      	cmp	r3, #48	@ 0x30
 800aa9a:	d10a      	bne.n	800aab2 <__cvt+0xba>
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	f7f6 f830 	bl	8000b08 <__aeabi_dcmpeq>
 800aaa8:	b918      	cbnz	r0, 800aab2 <__cvt+0xba>
 800aaaa:	f1c4 0401 	rsb	r4, r4, #1
 800aaae:	f8ca 4000 	str.w	r4, [sl]
 800aab2:	f8da 3000 	ldr.w	r3, [sl]
 800aab6:	4499      	add	r9, r3
 800aab8:	e7d3      	b.n	800aa62 <__cvt+0x6a>
 800aaba:	1c59      	adds	r1, r3, #1
 800aabc:	9103      	str	r1, [sp, #12]
 800aabe:	701a      	strb	r2, [r3, #0]
 800aac0:	e7d9      	b.n	800aa76 <__cvt+0x7e>

0800aac2 <__exponent>:
 800aac2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aac4:	2900      	cmp	r1, #0
 800aac6:	bfba      	itte	lt
 800aac8:	4249      	neglt	r1, r1
 800aaca:	232d      	movlt	r3, #45	@ 0x2d
 800aacc:	232b      	movge	r3, #43	@ 0x2b
 800aace:	2909      	cmp	r1, #9
 800aad0:	7002      	strb	r2, [r0, #0]
 800aad2:	7043      	strb	r3, [r0, #1]
 800aad4:	dd29      	ble.n	800ab2a <__exponent+0x68>
 800aad6:	f10d 0307 	add.w	r3, sp, #7
 800aada:	461d      	mov	r5, r3
 800aadc:	270a      	movs	r7, #10
 800aade:	461a      	mov	r2, r3
 800aae0:	fbb1 f6f7 	udiv	r6, r1, r7
 800aae4:	fb07 1416 	mls	r4, r7, r6, r1
 800aae8:	3430      	adds	r4, #48	@ 0x30
 800aaea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aaee:	460c      	mov	r4, r1
 800aaf0:	2c63      	cmp	r4, #99	@ 0x63
 800aaf2:	f103 33ff 	add.w	r3, r3, #4294967295
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	dcf1      	bgt.n	800aade <__exponent+0x1c>
 800aafa:	3130      	adds	r1, #48	@ 0x30
 800aafc:	1e94      	subs	r4, r2, #2
 800aafe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab02:	1c41      	adds	r1, r0, #1
 800ab04:	4623      	mov	r3, r4
 800ab06:	42ab      	cmp	r3, r5
 800ab08:	d30a      	bcc.n	800ab20 <__exponent+0x5e>
 800ab0a:	f10d 0309 	add.w	r3, sp, #9
 800ab0e:	1a9b      	subs	r3, r3, r2
 800ab10:	42ac      	cmp	r4, r5
 800ab12:	bf88      	it	hi
 800ab14:	2300      	movhi	r3, #0
 800ab16:	3302      	adds	r3, #2
 800ab18:	4403      	add	r3, r0
 800ab1a:	1a18      	subs	r0, r3, r0
 800ab1c:	b003      	add	sp, #12
 800ab1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab20:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab24:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab28:	e7ed      	b.n	800ab06 <__exponent+0x44>
 800ab2a:	2330      	movs	r3, #48	@ 0x30
 800ab2c:	3130      	adds	r1, #48	@ 0x30
 800ab2e:	7083      	strb	r3, [r0, #2]
 800ab30:	70c1      	strb	r1, [r0, #3]
 800ab32:	1d03      	adds	r3, r0, #4
 800ab34:	e7f1      	b.n	800ab1a <__exponent+0x58>
	...

0800ab38 <_printf_float>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	b08d      	sub	sp, #52	@ 0x34
 800ab3e:	460c      	mov	r4, r1
 800ab40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab44:	4616      	mov	r6, r2
 800ab46:	461f      	mov	r7, r3
 800ab48:	4605      	mov	r5, r0
 800ab4a:	f001 f845 	bl	800bbd8 <_localeconv_r>
 800ab4e:	6803      	ldr	r3, [r0, #0]
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7f5 fbac 	bl	80002b0 <strlen>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab60:	9005      	str	r0, [sp, #20]
 800ab62:	3307      	adds	r3, #7
 800ab64:	f023 0307 	bic.w	r3, r3, #7
 800ab68:	f103 0208 	add.w	r2, r3, #8
 800ab6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab70:	f8d4 b000 	ldr.w	fp, [r4]
 800ab74:	f8c8 2000 	str.w	r2, [r8]
 800ab78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ab80:	9307      	str	r3, [sp, #28]
 800ab82:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ab8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab8e:	4b9c      	ldr	r3, [pc, #624]	@ (800ae00 <_printf_float+0x2c8>)
 800ab90:	f04f 32ff 	mov.w	r2, #4294967295
 800ab94:	f7f5 ffea 	bl	8000b6c <__aeabi_dcmpun>
 800ab98:	bb70      	cbnz	r0, 800abf8 <_printf_float+0xc0>
 800ab9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab9e:	4b98      	ldr	r3, [pc, #608]	@ (800ae00 <_printf_float+0x2c8>)
 800aba0:	f04f 32ff 	mov.w	r2, #4294967295
 800aba4:	f7f5 ffc4 	bl	8000b30 <__aeabi_dcmple>
 800aba8:	bb30      	cbnz	r0, 800abf8 <_printf_float+0xc0>
 800abaa:	2200      	movs	r2, #0
 800abac:	2300      	movs	r3, #0
 800abae:	4640      	mov	r0, r8
 800abb0:	4649      	mov	r1, r9
 800abb2:	f7f5 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 800abb6:	b110      	cbz	r0, 800abbe <_printf_float+0x86>
 800abb8:	232d      	movs	r3, #45	@ 0x2d
 800abba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abbe:	4a91      	ldr	r2, [pc, #580]	@ (800ae04 <_printf_float+0x2cc>)
 800abc0:	4b91      	ldr	r3, [pc, #580]	@ (800ae08 <_printf_float+0x2d0>)
 800abc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800abc6:	bf94      	ite	ls
 800abc8:	4690      	movls	r8, r2
 800abca:	4698      	movhi	r8, r3
 800abcc:	2303      	movs	r3, #3
 800abce:	6123      	str	r3, [r4, #16]
 800abd0:	f02b 0304 	bic.w	r3, fp, #4
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	f04f 0900 	mov.w	r9, #0
 800abda:	9700      	str	r7, [sp, #0]
 800abdc:	4633      	mov	r3, r6
 800abde:	aa0b      	add	r2, sp, #44	@ 0x2c
 800abe0:	4621      	mov	r1, r4
 800abe2:	4628      	mov	r0, r5
 800abe4:	f000 f9d2 	bl	800af8c <_printf_common>
 800abe8:	3001      	adds	r0, #1
 800abea:	f040 808d 	bne.w	800ad08 <_printf_float+0x1d0>
 800abee:	f04f 30ff 	mov.w	r0, #4294967295
 800abf2:	b00d      	add	sp, #52	@ 0x34
 800abf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf8:	4642      	mov	r2, r8
 800abfa:	464b      	mov	r3, r9
 800abfc:	4640      	mov	r0, r8
 800abfe:	4649      	mov	r1, r9
 800ac00:	f7f5 ffb4 	bl	8000b6c <__aeabi_dcmpun>
 800ac04:	b140      	cbz	r0, 800ac18 <_printf_float+0xe0>
 800ac06:	464b      	mov	r3, r9
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bfbc      	itt	lt
 800ac0c:	232d      	movlt	r3, #45	@ 0x2d
 800ac0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ac12:	4a7e      	ldr	r2, [pc, #504]	@ (800ae0c <_printf_float+0x2d4>)
 800ac14:	4b7e      	ldr	r3, [pc, #504]	@ (800ae10 <_printf_float+0x2d8>)
 800ac16:	e7d4      	b.n	800abc2 <_printf_float+0x8a>
 800ac18:	6863      	ldr	r3, [r4, #4]
 800ac1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ac1e:	9206      	str	r2, [sp, #24]
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	d13b      	bne.n	800ac9c <_printf_float+0x164>
 800ac24:	2306      	movs	r3, #6
 800ac26:	6063      	str	r3, [r4, #4]
 800ac28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	6022      	str	r2, [r4, #0]
 800ac30:	9303      	str	r3, [sp, #12]
 800ac32:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac34:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ac38:	ab09      	add	r3, sp, #36	@ 0x24
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	6861      	ldr	r1, [r4, #4]
 800ac3e:	ec49 8b10 	vmov	d0, r8, r9
 800ac42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac46:	4628      	mov	r0, r5
 800ac48:	f7ff fed6 	bl	800a9f8 <__cvt>
 800ac4c:	9b06      	ldr	r3, [sp, #24]
 800ac4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac50:	2b47      	cmp	r3, #71	@ 0x47
 800ac52:	4680      	mov	r8, r0
 800ac54:	d129      	bne.n	800acaa <_printf_float+0x172>
 800ac56:	1cc8      	adds	r0, r1, #3
 800ac58:	db02      	blt.n	800ac60 <_printf_float+0x128>
 800ac5a:	6863      	ldr	r3, [r4, #4]
 800ac5c:	4299      	cmp	r1, r3
 800ac5e:	dd41      	ble.n	800ace4 <_printf_float+0x1ac>
 800ac60:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac64:	fa5f fa8a 	uxtb.w	sl, sl
 800ac68:	3901      	subs	r1, #1
 800ac6a:	4652      	mov	r2, sl
 800ac6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac70:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac72:	f7ff ff26 	bl	800aac2 <__exponent>
 800ac76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac78:	1813      	adds	r3, r2, r0
 800ac7a:	2a01      	cmp	r2, #1
 800ac7c:	4681      	mov	r9, r0
 800ac7e:	6123      	str	r3, [r4, #16]
 800ac80:	dc02      	bgt.n	800ac88 <_printf_float+0x150>
 800ac82:	6822      	ldr	r2, [r4, #0]
 800ac84:	07d2      	lsls	r2, r2, #31
 800ac86:	d501      	bpl.n	800ac8c <_printf_float+0x154>
 800ac88:	3301      	adds	r3, #1
 800ac8a:	6123      	str	r3, [r4, #16]
 800ac8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d0a2      	beq.n	800abda <_printf_float+0xa2>
 800ac94:	232d      	movs	r3, #45	@ 0x2d
 800ac96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac9a:	e79e      	b.n	800abda <_printf_float+0xa2>
 800ac9c:	9a06      	ldr	r2, [sp, #24]
 800ac9e:	2a47      	cmp	r2, #71	@ 0x47
 800aca0:	d1c2      	bne.n	800ac28 <_printf_float+0xf0>
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1c0      	bne.n	800ac28 <_printf_float+0xf0>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e7bd      	b.n	800ac26 <_printf_float+0xee>
 800acaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800acae:	d9db      	bls.n	800ac68 <_printf_float+0x130>
 800acb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800acb4:	d118      	bne.n	800ace8 <_printf_float+0x1b0>
 800acb6:	2900      	cmp	r1, #0
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	dd0b      	ble.n	800acd4 <_printf_float+0x19c>
 800acbc:	6121      	str	r1, [r4, #16]
 800acbe:	b913      	cbnz	r3, 800acc6 <_printf_float+0x18e>
 800acc0:	6822      	ldr	r2, [r4, #0]
 800acc2:	07d0      	lsls	r0, r2, #31
 800acc4:	d502      	bpl.n	800accc <_printf_float+0x194>
 800acc6:	3301      	adds	r3, #1
 800acc8:	440b      	add	r3, r1
 800acca:	6123      	str	r3, [r4, #16]
 800accc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800acce:	f04f 0900 	mov.w	r9, #0
 800acd2:	e7db      	b.n	800ac8c <_printf_float+0x154>
 800acd4:	b913      	cbnz	r3, 800acdc <_printf_float+0x1a4>
 800acd6:	6822      	ldr	r2, [r4, #0]
 800acd8:	07d2      	lsls	r2, r2, #31
 800acda:	d501      	bpl.n	800ace0 <_printf_float+0x1a8>
 800acdc:	3302      	adds	r3, #2
 800acde:	e7f4      	b.n	800acca <_printf_float+0x192>
 800ace0:	2301      	movs	r3, #1
 800ace2:	e7f2      	b.n	800acca <_printf_float+0x192>
 800ace4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ace8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acea:	4299      	cmp	r1, r3
 800acec:	db05      	blt.n	800acfa <_printf_float+0x1c2>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	6121      	str	r1, [r4, #16]
 800acf2:	07d8      	lsls	r0, r3, #31
 800acf4:	d5ea      	bpl.n	800accc <_printf_float+0x194>
 800acf6:	1c4b      	adds	r3, r1, #1
 800acf8:	e7e7      	b.n	800acca <_printf_float+0x192>
 800acfa:	2900      	cmp	r1, #0
 800acfc:	bfd4      	ite	le
 800acfe:	f1c1 0202 	rsble	r2, r1, #2
 800ad02:	2201      	movgt	r2, #1
 800ad04:	4413      	add	r3, r2
 800ad06:	e7e0      	b.n	800acca <_printf_float+0x192>
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	055a      	lsls	r2, r3, #21
 800ad0c:	d407      	bmi.n	800ad1e <_printf_float+0x1e6>
 800ad0e:	6923      	ldr	r3, [r4, #16]
 800ad10:	4642      	mov	r2, r8
 800ad12:	4631      	mov	r1, r6
 800ad14:	4628      	mov	r0, r5
 800ad16:	47b8      	blx	r7
 800ad18:	3001      	adds	r0, #1
 800ad1a:	d12b      	bne.n	800ad74 <_printf_float+0x23c>
 800ad1c:	e767      	b.n	800abee <_printf_float+0xb6>
 800ad1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad22:	f240 80dd 	bls.w	800aee0 <_printf_float+0x3a8>
 800ad26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f7f5 feeb 	bl	8000b08 <__aeabi_dcmpeq>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d033      	beq.n	800ad9e <_printf_float+0x266>
 800ad36:	4a37      	ldr	r2, [pc, #220]	@ (800ae14 <_printf_float+0x2dc>)
 800ad38:	2301      	movs	r3, #1
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	47b8      	blx	r7
 800ad40:	3001      	adds	r0, #1
 800ad42:	f43f af54 	beq.w	800abee <_printf_float+0xb6>
 800ad46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad4a:	4543      	cmp	r3, r8
 800ad4c:	db02      	blt.n	800ad54 <_printf_float+0x21c>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	07d8      	lsls	r0, r3, #31
 800ad52:	d50f      	bpl.n	800ad74 <_printf_float+0x23c>
 800ad54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	47b8      	blx	r7
 800ad5e:	3001      	adds	r0, #1
 800ad60:	f43f af45 	beq.w	800abee <_printf_float+0xb6>
 800ad64:	f04f 0900 	mov.w	r9, #0
 800ad68:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad6c:	f104 0a1a 	add.w	sl, r4, #26
 800ad70:	45c8      	cmp	r8, r9
 800ad72:	dc09      	bgt.n	800ad88 <_printf_float+0x250>
 800ad74:	6823      	ldr	r3, [r4, #0]
 800ad76:	079b      	lsls	r3, r3, #30
 800ad78:	f100 8103 	bmi.w	800af82 <_printf_float+0x44a>
 800ad7c:	68e0      	ldr	r0, [r4, #12]
 800ad7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad80:	4298      	cmp	r0, r3
 800ad82:	bfb8      	it	lt
 800ad84:	4618      	movlt	r0, r3
 800ad86:	e734      	b.n	800abf2 <_printf_float+0xba>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b8      	blx	r7
 800ad92:	3001      	adds	r0, #1
 800ad94:	f43f af2b 	beq.w	800abee <_printf_float+0xb6>
 800ad98:	f109 0901 	add.w	r9, r9, #1
 800ad9c:	e7e8      	b.n	800ad70 <_printf_float+0x238>
 800ad9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dc39      	bgt.n	800ae18 <_printf_float+0x2e0>
 800ada4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae14 <_printf_float+0x2dc>)
 800ada6:	2301      	movs	r3, #1
 800ada8:	4631      	mov	r1, r6
 800adaa:	4628      	mov	r0, r5
 800adac:	47b8      	blx	r7
 800adae:	3001      	adds	r0, #1
 800adb0:	f43f af1d 	beq.w	800abee <_printf_float+0xb6>
 800adb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800adb8:	ea59 0303 	orrs.w	r3, r9, r3
 800adbc:	d102      	bne.n	800adc4 <_printf_float+0x28c>
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	07d9      	lsls	r1, r3, #31
 800adc2:	d5d7      	bpl.n	800ad74 <_printf_float+0x23c>
 800adc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adc8:	4631      	mov	r1, r6
 800adca:	4628      	mov	r0, r5
 800adcc:	47b8      	blx	r7
 800adce:	3001      	adds	r0, #1
 800add0:	f43f af0d 	beq.w	800abee <_printf_float+0xb6>
 800add4:	f04f 0a00 	mov.w	sl, #0
 800add8:	f104 0b1a 	add.w	fp, r4, #26
 800addc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adde:	425b      	negs	r3, r3
 800ade0:	4553      	cmp	r3, sl
 800ade2:	dc01      	bgt.n	800ade8 <_printf_float+0x2b0>
 800ade4:	464b      	mov	r3, r9
 800ade6:	e793      	b.n	800ad10 <_printf_float+0x1d8>
 800ade8:	2301      	movs	r3, #1
 800adea:	465a      	mov	r2, fp
 800adec:	4631      	mov	r1, r6
 800adee:	4628      	mov	r0, r5
 800adf0:	47b8      	blx	r7
 800adf2:	3001      	adds	r0, #1
 800adf4:	f43f aefb 	beq.w	800abee <_printf_float+0xb6>
 800adf8:	f10a 0a01 	add.w	sl, sl, #1
 800adfc:	e7ee      	b.n	800addc <_printf_float+0x2a4>
 800adfe:	bf00      	nop
 800ae00:	7fefffff 	.word	0x7fefffff
 800ae04:	08010b05 	.word	0x08010b05
 800ae08:	08010b09 	.word	0x08010b09
 800ae0c:	08010b0d 	.word	0x08010b0d
 800ae10:	08010b11 	.word	0x08010b11
 800ae14:	08010b15 	.word	0x08010b15
 800ae18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae1e:	4553      	cmp	r3, sl
 800ae20:	bfa8      	it	ge
 800ae22:	4653      	movge	r3, sl
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	4699      	mov	r9, r3
 800ae28:	dc36      	bgt.n	800ae98 <_printf_float+0x360>
 800ae2a:	f04f 0b00 	mov.w	fp, #0
 800ae2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae32:	f104 021a 	add.w	r2, r4, #26
 800ae36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae38:	9306      	str	r3, [sp, #24]
 800ae3a:	eba3 0309 	sub.w	r3, r3, r9
 800ae3e:	455b      	cmp	r3, fp
 800ae40:	dc31      	bgt.n	800aea6 <_printf_float+0x36e>
 800ae42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae44:	459a      	cmp	sl, r3
 800ae46:	dc3a      	bgt.n	800aebe <_printf_float+0x386>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	07da      	lsls	r2, r3, #31
 800ae4c:	d437      	bmi.n	800aebe <_printf_float+0x386>
 800ae4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae50:	ebaa 0903 	sub.w	r9, sl, r3
 800ae54:	9b06      	ldr	r3, [sp, #24]
 800ae56:	ebaa 0303 	sub.w	r3, sl, r3
 800ae5a:	4599      	cmp	r9, r3
 800ae5c:	bfa8      	it	ge
 800ae5e:	4699      	movge	r9, r3
 800ae60:	f1b9 0f00 	cmp.w	r9, #0
 800ae64:	dc33      	bgt.n	800aece <_printf_float+0x396>
 800ae66:	f04f 0800 	mov.w	r8, #0
 800ae6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae6e:	f104 0b1a 	add.w	fp, r4, #26
 800ae72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae74:	ebaa 0303 	sub.w	r3, sl, r3
 800ae78:	eba3 0309 	sub.w	r3, r3, r9
 800ae7c:	4543      	cmp	r3, r8
 800ae7e:	f77f af79 	ble.w	800ad74 <_printf_float+0x23c>
 800ae82:	2301      	movs	r3, #1
 800ae84:	465a      	mov	r2, fp
 800ae86:	4631      	mov	r1, r6
 800ae88:	4628      	mov	r0, r5
 800ae8a:	47b8      	blx	r7
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	f43f aeae 	beq.w	800abee <_printf_float+0xb6>
 800ae92:	f108 0801 	add.w	r8, r8, #1
 800ae96:	e7ec      	b.n	800ae72 <_printf_float+0x33a>
 800ae98:	4642      	mov	r2, r8
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	47b8      	blx	r7
 800aea0:	3001      	adds	r0, #1
 800aea2:	d1c2      	bne.n	800ae2a <_printf_float+0x2f2>
 800aea4:	e6a3      	b.n	800abee <_printf_float+0xb6>
 800aea6:	2301      	movs	r3, #1
 800aea8:	4631      	mov	r1, r6
 800aeaa:	4628      	mov	r0, r5
 800aeac:	9206      	str	r2, [sp, #24]
 800aeae:	47b8      	blx	r7
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	f43f ae9c 	beq.w	800abee <_printf_float+0xb6>
 800aeb6:	9a06      	ldr	r2, [sp, #24]
 800aeb8:	f10b 0b01 	add.w	fp, fp, #1
 800aebc:	e7bb      	b.n	800ae36 <_printf_float+0x2fe>
 800aebe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aec2:	4631      	mov	r1, r6
 800aec4:	4628      	mov	r0, r5
 800aec6:	47b8      	blx	r7
 800aec8:	3001      	adds	r0, #1
 800aeca:	d1c0      	bne.n	800ae4e <_printf_float+0x316>
 800aecc:	e68f      	b.n	800abee <_printf_float+0xb6>
 800aece:	9a06      	ldr	r2, [sp, #24]
 800aed0:	464b      	mov	r3, r9
 800aed2:	4442      	add	r2, r8
 800aed4:	4631      	mov	r1, r6
 800aed6:	4628      	mov	r0, r5
 800aed8:	47b8      	blx	r7
 800aeda:	3001      	adds	r0, #1
 800aedc:	d1c3      	bne.n	800ae66 <_printf_float+0x32e>
 800aede:	e686      	b.n	800abee <_printf_float+0xb6>
 800aee0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aee4:	f1ba 0f01 	cmp.w	sl, #1
 800aee8:	dc01      	bgt.n	800aeee <_printf_float+0x3b6>
 800aeea:	07db      	lsls	r3, r3, #31
 800aeec:	d536      	bpl.n	800af5c <_printf_float+0x424>
 800aeee:	2301      	movs	r3, #1
 800aef0:	4642      	mov	r2, r8
 800aef2:	4631      	mov	r1, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b8      	blx	r7
 800aef8:	3001      	adds	r0, #1
 800aefa:	f43f ae78 	beq.w	800abee <_printf_float+0xb6>
 800aefe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af02:	4631      	mov	r1, r6
 800af04:	4628      	mov	r0, r5
 800af06:	47b8      	blx	r7
 800af08:	3001      	adds	r0, #1
 800af0a:	f43f ae70 	beq.w	800abee <_printf_float+0xb6>
 800af0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af12:	2200      	movs	r2, #0
 800af14:	2300      	movs	r3, #0
 800af16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af1a:	f7f5 fdf5 	bl	8000b08 <__aeabi_dcmpeq>
 800af1e:	b9c0      	cbnz	r0, 800af52 <_printf_float+0x41a>
 800af20:	4653      	mov	r3, sl
 800af22:	f108 0201 	add.w	r2, r8, #1
 800af26:	4631      	mov	r1, r6
 800af28:	4628      	mov	r0, r5
 800af2a:	47b8      	blx	r7
 800af2c:	3001      	adds	r0, #1
 800af2e:	d10c      	bne.n	800af4a <_printf_float+0x412>
 800af30:	e65d      	b.n	800abee <_printf_float+0xb6>
 800af32:	2301      	movs	r3, #1
 800af34:	465a      	mov	r2, fp
 800af36:	4631      	mov	r1, r6
 800af38:	4628      	mov	r0, r5
 800af3a:	47b8      	blx	r7
 800af3c:	3001      	adds	r0, #1
 800af3e:	f43f ae56 	beq.w	800abee <_printf_float+0xb6>
 800af42:	f108 0801 	add.w	r8, r8, #1
 800af46:	45d0      	cmp	r8, sl
 800af48:	dbf3      	blt.n	800af32 <_printf_float+0x3fa>
 800af4a:	464b      	mov	r3, r9
 800af4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af50:	e6df      	b.n	800ad12 <_printf_float+0x1da>
 800af52:	f04f 0800 	mov.w	r8, #0
 800af56:	f104 0b1a 	add.w	fp, r4, #26
 800af5a:	e7f4      	b.n	800af46 <_printf_float+0x40e>
 800af5c:	2301      	movs	r3, #1
 800af5e:	4642      	mov	r2, r8
 800af60:	e7e1      	b.n	800af26 <_printf_float+0x3ee>
 800af62:	2301      	movs	r3, #1
 800af64:	464a      	mov	r2, r9
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	47b8      	blx	r7
 800af6c:	3001      	adds	r0, #1
 800af6e:	f43f ae3e 	beq.w	800abee <_printf_float+0xb6>
 800af72:	f108 0801 	add.w	r8, r8, #1
 800af76:	68e3      	ldr	r3, [r4, #12]
 800af78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af7a:	1a5b      	subs	r3, r3, r1
 800af7c:	4543      	cmp	r3, r8
 800af7e:	dcf0      	bgt.n	800af62 <_printf_float+0x42a>
 800af80:	e6fc      	b.n	800ad7c <_printf_float+0x244>
 800af82:	f04f 0800 	mov.w	r8, #0
 800af86:	f104 0919 	add.w	r9, r4, #25
 800af8a:	e7f4      	b.n	800af76 <_printf_float+0x43e>

0800af8c <_printf_common>:
 800af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af90:	4616      	mov	r6, r2
 800af92:	4698      	mov	r8, r3
 800af94:	688a      	ldr	r2, [r1, #8]
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	bfb8      	it	lt
 800afa0:	4613      	movlt	r3, r2
 800afa2:	6033      	str	r3, [r6, #0]
 800afa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afa8:	4607      	mov	r7, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b10a      	cbz	r2, 800afb2 <_printf_common+0x26>
 800afae:	3301      	adds	r3, #1
 800afb0:	6033      	str	r3, [r6, #0]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	0699      	lsls	r1, r3, #26
 800afb6:	bf42      	ittt	mi
 800afb8:	6833      	ldrmi	r3, [r6, #0]
 800afba:	3302      	addmi	r3, #2
 800afbc:	6033      	strmi	r3, [r6, #0]
 800afbe:	6825      	ldr	r5, [r4, #0]
 800afc0:	f015 0506 	ands.w	r5, r5, #6
 800afc4:	d106      	bne.n	800afd4 <_printf_common+0x48>
 800afc6:	f104 0a19 	add.w	sl, r4, #25
 800afca:	68e3      	ldr	r3, [r4, #12]
 800afcc:	6832      	ldr	r2, [r6, #0]
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	42ab      	cmp	r3, r5
 800afd2:	dc26      	bgt.n	800b022 <_printf_common+0x96>
 800afd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afd8:	6822      	ldr	r2, [r4, #0]
 800afda:	3b00      	subs	r3, #0
 800afdc:	bf18      	it	ne
 800afde:	2301      	movne	r3, #1
 800afe0:	0692      	lsls	r2, r2, #26
 800afe2:	d42b      	bmi.n	800b03c <_printf_common+0xb0>
 800afe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afe8:	4641      	mov	r1, r8
 800afea:	4638      	mov	r0, r7
 800afec:	47c8      	blx	r9
 800afee:	3001      	adds	r0, #1
 800aff0:	d01e      	beq.n	800b030 <_printf_common+0xa4>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	6922      	ldr	r2, [r4, #16]
 800aff6:	f003 0306 	and.w	r3, r3, #6
 800affa:	2b04      	cmp	r3, #4
 800affc:	bf02      	ittt	eq
 800affe:	68e5      	ldreq	r5, [r4, #12]
 800b000:	6833      	ldreq	r3, [r6, #0]
 800b002:	1aed      	subeq	r5, r5, r3
 800b004:	68a3      	ldr	r3, [r4, #8]
 800b006:	bf0c      	ite	eq
 800b008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b00c:	2500      	movne	r5, #0
 800b00e:	4293      	cmp	r3, r2
 800b010:	bfc4      	itt	gt
 800b012:	1a9b      	subgt	r3, r3, r2
 800b014:	18ed      	addgt	r5, r5, r3
 800b016:	2600      	movs	r6, #0
 800b018:	341a      	adds	r4, #26
 800b01a:	42b5      	cmp	r5, r6
 800b01c:	d11a      	bne.n	800b054 <_printf_common+0xc8>
 800b01e:	2000      	movs	r0, #0
 800b020:	e008      	b.n	800b034 <_printf_common+0xa8>
 800b022:	2301      	movs	r3, #1
 800b024:	4652      	mov	r2, sl
 800b026:	4641      	mov	r1, r8
 800b028:	4638      	mov	r0, r7
 800b02a:	47c8      	blx	r9
 800b02c:	3001      	adds	r0, #1
 800b02e:	d103      	bne.n	800b038 <_printf_common+0xac>
 800b030:	f04f 30ff 	mov.w	r0, #4294967295
 800b034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b038:	3501      	adds	r5, #1
 800b03a:	e7c6      	b.n	800afca <_printf_common+0x3e>
 800b03c:	18e1      	adds	r1, r4, r3
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	2030      	movs	r0, #48	@ 0x30
 800b042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b046:	4422      	add	r2, r4
 800b048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b04c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b050:	3302      	adds	r3, #2
 800b052:	e7c7      	b.n	800afe4 <_printf_common+0x58>
 800b054:	2301      	movs	r3, #1
 800b056:	4622      	mov	r2, r4
 800b058:	4641      	mov	r1, r8
 800b05a:	4638      	mov	r0, r7
 800b05c:	47c8      	blx	r9
 800b05e:	3001      	adds	r0, #1
 800b060:	d0e6      	beq.n	800b030 <_printf_common+0xa4>
 800b062:	3601      	adds	r6, #1
 800b064:	e7d9      	b.n	800b01a <_printf_common+0x8e>
	...

0800b068 <_printf_i>:
 800b068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b06c:	7e0f      	ldrb	r7, [r1, #24]
 800b06e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b070:	2f78      	cmp	r7, #120	@ 0x78
 800b072:	4691      	mov	r9, r2
 800b074:	4680      	mov	r8, r0
 800b076:	460c      	mov	r4, r1
 800b078:	469a      	mov	sl, r3
 800b07a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b07e:	d807      	bhi.n	800b090 <_printf_i+0x28>
 800b080:	2f62      	cmp	r7, #98	@ 0x62
 800b082:	d80a      	bhi.n	800b09a <_printf_i+0x32>
 800b084:	2f00      	cmp	r7, #0
 800b086:	f000 80d2 	beq.w	800b22e <_printf_i+0x1c6>
 800b08a:	2f58      	cmp	r7, #88	@ 0x58
 800b08c:	f000 80b9 	beq.w	800b202 <_printf_i+0x19a>
 800b090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b098:	e03a      	b.n	800b110 <_printf_i+0xa8>
 800b09a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b09e:	2b15      	cmp	r3, #21
 800b0a0:	d8f6      	bhi.n	800b090 <_printf_i+0x28>
 800b0a2:	a101      	add	r1, pc, #4	@ (adr r1, 800b0a8 <_printf_i+0x40>)
 800b0a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a8:	0800b101 	.word	0x0800b101
 800b0ac:	0800b115 	.word	0x0800b115
 800b0b0:	0800b091 	.word	0x0800b091
 800b0b4:	0800b091 	.word	0x0800b091
 800b0b8:	0800b091 	.word	0x0800b091
 800b0bc:	0800b091 	.word	0x0800b091
 800b0c0:	0800b115 	.word	0x0800b115
 800b0c4:	0800b091 	.word	0x0800b091
 800b0c8:	0800b091 	.word	0x0800b091
 800b0cc:	0800b091 	.word	0x0800b091
 800b0d0:	0800b091 	.word	0x0800b091
 800b0d4:	0800b215 	.word	0x0800b215
 800b0d8:	0800b13f 	.word	0x0800b13f
 800b0dc:	0800b1cf 	.word	0x0800b1cf
 800b0e0:	0800b091 	.word	0x0800b091
 800b0e4:	0800b091 	.word	0x0800b091
 800b0e8:	0800b237 	.word	0x0800b237
 800b0ec:	0800b091 	.word	0x0800b091
 800b0f0:	0800b13f 	.word	0x0800b13f
 800b0f4:	0800b091 	.word	0x0800b091
 800b0f8:	0800b091 	.word	0x0800b091
 800b0fc:	0800b1d7 	.word	0x0800b1d7
 800b100:	6833      	ldr	r3, [r6, #0]
 800b102:	1d1a      	adds	r2, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6032      	str	r2, [r6, #0]
 800b108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b10c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b110:	2301      	movs	r3, #1
 800b112:	e09d      	b.n	800b250 <_printf_i+0x1e8>
 800b114:	6833      	ldr	r3, [r6, #0]
 800b116:	6820      	ldr	r0, [r4, #0]
 800b118:	1d19      	adds	r1, r3, #4
 800b11a:	6031      	str	r1, [r6, #0]
 800b11c:	0606      	lsls	r6, r0, #24
 800b11e:	d501      	bpl.n	800b124 <_printf_i+0xbc>
 800b120:	681d      	ldr	r5, [r3, #0]
 800b122:	e003      	b.n	800b12c <_printf_i+0xc4>
 800b124:	0645      	lsls	r5, r0, #25
 800b126:	d5fb      	bpl.n	800b120 <_printf_i+0xb8>
 800b128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b12c:	2d00      	cmp	r5, #0
 800b12e:	da03      	bge.n	800b138 <_printf_i+0xd0>
 800b130:	232d      	movs	r3, #45	@ 0x2d
 800b132:	426d      	negs	r5, r5
 800b134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b138:	4859      	ldr	r0, [pc, #356]	@ (800b2a0 <_printf_i+0x238>)
 800b13a:	230a      	movs	r3, #10
 800b13c:	e011      	b.n	800b162 <_printf_i+0xfa>
 800b13e:	6821      	ldr	r1, [r4, #0]
 800b140:	6833      	ldr	r3, [r6, #0]
 800b142:	0608      	lsls	r0, r1, #24
 800b144:	f853 5b04 	ldr.w	r5, [r3], #4
 800b148:	d402      	bmi.n	800b150 <_printf_i+0xe8>
 800b14a:	0649      	lsls	r1, r1, #25
 800b14c:	bf48      	it	mi
 800b14e:	b2ad      	uxthmi	r5, r5
 800b150:	2f6f      	cmp	r7, #111	@ 0x6f
 800b152:	4853      	ldr	r0, [pc, #332]	@ (800b2a0 <_printf_i+0x238>)
 800b154:	6033      	str	r3, [r6, #0]
 800b156:	bf14      	ite	ne
 800b158:	230a      	movne	r3, #10
 800b15a:	2308      	moveq	r3, #8
 800b15c:	2100      	movs	r1, #0
 800b15e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b162:	6866      	ldr	r6, [r4, #4]
 800b164:	60a6      	str	r6, [r4, #8]
 800b166:	2e00      	cmp	r6, #0
 800b168:	bfa2      	ittt	ge
 800b16a:	6821      	ldrge	r1, [r4, #0]
 800b16c:	f021 0104 	bicge.w	r1, r1, #4
 800b170:	6021      	strge	r1, [r4, #0]
 800b172:	b90d      	cbnz	r5, 800b178 <_printf_i+0x110>
 800b174:	2e00      	cmp	r6, #0
 800b176:	d04b      	beq.n	800b210 <_printf_i+0x1a8>
 800b178:	4616      	mov	r6, r2
 800b17a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b17e:	fb03 5711 	mls	r7, r3, r1, r5
 800b182:	5dc7      	ldrb	r7, [r0, r7]
 800b184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b188:	462f      	mov	r7, r5
 800b18a:	42bb      	cmp	r3, r7
 800b18c:	460d      	mov	r5, r1
 800b18e:	d9f4      	bls.n	800b17a <_printf_i+0x112>
 800b190:	2b08      	cmp	r3, #8
 800b192:	d10b      	bne.n	800b1ac <_printf_i+0x144>
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	07df      	lsls	r7, r3, #31
 800b198:	d508      	bpl.n	800b1ac <_printf_i+0x144>
 800b19a:	6923      	ldr	r3, [r4, #16]
 800b19c:	6861      	ldr	r1, [r4, #4]
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	bfde      	ittt	le
 800b1a2:	2330      	movle	r3, #48	@ 0x30
 800b1a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1ac:	1b92      	subs	r2, r2, r6
 800b1ae:	6122      	str	r2, [r4, #16]
 800b1b0:	f8cd a000 	str.w	sl, [sp]
 800b1b4:	464b      	mov	r3, r9
 800b1b6:	aa03      	add	r2, sp, #12
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	f7ff fee6 	bl	800af8c <_printf_common>
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d14a      	bne.n	800b25a <_printf_i+0x1f2>
 800b1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c8:	b004      	add	sp, #16
 800b1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	f043 0320 	orr.w	r3, r3, #32
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	4833      	ldr	r0, [pc, #204]	@ (800b2a4 <_printf_i+0x23c>)
 800b1d8:	2778      	movs	r7, #120	@ 0x78
 800b1da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	6831      	ldr	r1, [r6, #0]
 800b1e2:	061f      	lsls	r7, r3, #24
 800b1e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1e8:	d402      	bmi.n	800b1f0 <_printf_i+0x188>
 800b1ea:	065f      	lsls	r7, r3, #25
 800b1ec:	bf48      	it	mi
 800b1ee:	b2ad      	uxthmi	r5, r5
 800b1f0:	6031      	str	r1, [r6, #0]
 800b1f2:	07d9      	lsls	r1, r3, #31
 800b1f4:	bf44      	itt	mi
 800b1f6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1fa:	6023      	strmi	r3, [r4, #0]
 800b1fc:	b11d      	cbz	r5, 800b206 <_printf_i+0x19e>
 800b1fe:	2310      	movs	r3, #16
 800b200:	e7ac      	b.n	800b15c <_printf_i+0xf4>
 800b202:	4827      	ldr	r0, [pc, #156]	@ (800b2a0 <_printf_i+0x238>)
 800b204:	e7e9      	b.n	800b1da <_printf_i+0x172>
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	f023 0320 	bic.w	r3, r3, #32
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	e7f6      	b.n	800b1fe <_printf_i+0x196>
 800b210:	4616      	mov	r6, r2
 800b212:	e7bd      	b.n	800b190 <_printf_i+0x128>
 800b214:	6833      	ldr	r3, [r6, #0]
 800b216:	6825      	ldr	r5, [r4, #0]
 800b218:	6961      	ldr	r1, [r4, #20]
 800b21a:	1d18      	adds	r0, r3, #4
 800b21c:	6030      	str	r0, [r6, #0]
 800b21e:	062e      	lsls	r6, r5, #24
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	d501      	bpl.n	800b228 <_printf_i+0x1c0>
 800b224:	6019      	str	r1, [r3, #0]
 800b226:	e002      	b.n	800b22e <_printf_i+0x1c6>
 800b228:	0668      	lsls	r0, r5, #25
 800b22a:	d5fb      	bpl.n	800b224 <_printf_i+0x1bc>
 800b22c:	8019      	strh	r1, [r3, #0]
 800b22e:	2300      	movs	r3, #0
 800b230:	6123      	str	r3, [r4, #16]
 800b232:	4616      	mov	r6, r2
 800b234:	e7bc      	b.n	800b1b0 <_printf_i+0x148>
 800b236:	6833      	ldr	r3, [r6, #0]
 800b238:	1d1a      	adds	r2, r3, #4
 800b23a:	6032      	str	r2, [r6, #0]
 800b23c:	681e      	ldr	r6, [r3, #0]
 800b23e:	6862      	ldr	r2, [r4, #4]
 800b240:	2100      	movs	r1, #0
 800b242:	4630      	mov	r0, r6
 800b244:	f7f4 ffe4 	bl	8000210 <memchr>
 800b248:	b108      	cbz	r0, 800b24e <_printf_i+0x1e6>
 800b24a:	1b80      	subs	r0, r0, r6
 800b24c:	6060      	str	r0, [r4, #4]
 800b24e:	6863      	ldr	r3, [r4, #4]
 800b250:	6123      	str	r3, [r4, #16]
 800b252:	2300      	movs	r3, #0
 800b254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b258:	e7aa      	b.n	800b1b0 <_printf_i+0x148>
 800b25a:	6923      	ldr	r3, [r4, #16]
 800b25c:	4632      	mov	r2, r6
 800b25e:	4649      	mov	r1, r9
 800b260:	4640      	mov	r0, r8
 800b262:	47d0      	blx	sl
 800b264:	3001      	adds	r0, #1
 800b266:	d0ad      	beq.n	800b1c4 <_printf_i+0x15c>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	079b      	lsls	r3, r3, #30
 800b26c:	d413      	bmi.n	800b296 <_printf_i+0x22e>
 800b26e:	68e0      	ldr	r0, [r4, #12]
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	4298      	cmp	r0, r3
 800b274:	bfb8      	it	lt
 800b276:	4618      	movlt	r0, r3
 800b278:	e7a6      	b.n	800b1c8 <_printf_i+0x160>
 800b27a:	2301      	movs	r3, #1
 800b27c:	4632      	mov	r2, r6
 800b27e:	4649      	mov	r1, r9
 800b280:	4640      	mov	r0, r8
 800b282:	47d0      	blx	sl
 800b284:	3001      	adds	r0, #1
 800b286:	d09d      	beq.n	800b1c4 <_printf_i+0x15c>
 800b288:	3501      	adds	r5, #1
 800b28a:	68e3      	ldr	r3, [r4, #12]
 800b28c:	9903      	ldr	r1, [sp, #12]
 800b28e:	1a5b      	subs	r3, r3, r1
 800b290:	42ab      	cmp	r3, r5
 800b292:	dcf2      	bgt.n	800b27a <_printf_i+0x212>
 800b294:	e7eb      	b.n	800b26e <_printf_i+0x206>
 800b296:	2500      	movs	r5, #0
 800b298:	f104 0619 	add.w	r6, r4, #25
 800b29c:	e7f5      	b.n	800b28a <_printf_i+0x222>
 800b29e:	bf00      	nop
 800b2a0:	08010b17 	.word	0x08010b17
 800b2a4:	08010b28 	.word	0x08010b28

0800b2a8 <_scanf_float>:
 800b2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ac:	b087      	sub	sp, #28
 800b2ae:	4617      	mov	r7, r2
 800b2b0:	9303      	str	r3, [sp, #12]
 800b2b2:	688b      	ldr	r3, [r1, #8]
 800b2b4:	1e5a      	subs	r2, r3, #1
 800b2b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b2ba:	bf81      	itttt	hi
 800b2bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b2c0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b2c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b2c8:	608b      	strhi	r3, [r1, #8]
 800b2ca:	680b      	ldr	r3, [r1, #0]
 800b2cc:	460a      	mov	r2, r1
 800b2ce:	f04f 0500 	mov.w	r5, #0
 800b2d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b2d6:	f842 3b1c 	str.w	r3, [r2], #28
 800b2da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b2de:	4680      	mov	r8, r0
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	bf98      	it	ls
 800b2e4:	f04f 0b00 	movls.w	fp, #0
 800b2e8:	9201      	str	r2, [sp, #4]
 800b2ea:	4616      	mov	r6, r2
 800b2ec:	46aa      	mov	sl, r5
 800b2ee:	46a9      	mov	r9, r5
 800b2f0:	9502      	str	r5, [sp, #8]
 800b2f2:	68a2      	ldr	r2, [r4, #8]
 800b2f4:	b152      	cbz	r2, 800b30c <_scanf_float+0x64>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b4e      	cmp	r3, #78	@ 0x4e
 800b2fc:	d864      	bhi.n	800b3c8 <_scanf_float+0x120>
 800b2fe:	2b40      	cmp	r3, #64	@ 0x40
 800b300:	d83c      	bhi.n	800b37c <_scanf_float+0xd4>
 800b302:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b306:	b2c8      	uxtb	r0, r1
 800b308:	280e      	cmp	r0, #14
 800b30a:	d93a      	bls.n	800b382 <_scanf_float+0xda>
 800b30c:	f1b9 0f00 	cmp.w	r9, #0
 800b310:	d003      	beq.n	800b31a <_scanf_float+0x72>
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b31e:	f1ba 0f01 	cmp.w	sl, #1
 800b322:	f200 8117 	bhi.w	800b554 <_scanf_float+0x2ac>
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	429e      	cmp	r6, r3
 800b32a:	f200 8108 	bhi.w	800b53e <_scanf_float+0x296>
 800b32e:	2001      	movs	r0, #1
 800b330:	b007      	add	sp, #28
 800b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b336:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b33a:	2a0d      	cmp	r2, #13
 800b33c:	d8e6      	bhi.n	800b30c <_scanf_float+0x64>
 800b33e:	a101      	add	r1, pc, #4	@ (adr r1, 800b344 <_scanf_float+0x9c>)
 800b340:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b344:	0800b48b 	.word	0x0800b48b
 800b348:	0800b30d 	.word	0x0800b30d
 800b34c:	0800b30d 	.word	0x0800b30d
 800b350:	0800b30d 	.word	0x0800b30d
 800b354:	0800b4eb 	.word	0x0800b4eb
 800b358:	0800b4c3 	.word	0x0800b4c3
 800b35c:	0800b30d 	.word	0x0800b30d
 800b360:	0800b30d 	.word	0x0800b30d
 800b364:	0800b499 	.word	0x0800b499
 800b368:	0800b30d 	.word	0x0800b30d
 800b36c:	0800b30d 	.word	0x0800b30d
 800b370:	0800b30d 	.word	0x0800b30d
 800b374:	0800b30d 	.word	0x0800b30d
 800b378:	0800b451 	.word	0x0800b451
 800b37c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b380:	e7db      	b.n	800b33a <_scanf_float+0x92>
 800b382:	290e      	cmp	r1, #14
 800b384:	d8c2      	bhi.n	800b30c <_scanf_float+0x64>
 800b386:	a001      	add	r0, pc, #4	@ (adr r0, 800b38c <_scanf_float+0xe4>)
 800b388:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b38c:	0800b441 	.word	0x0800b441
 800b390:	0800b30d 	.word	0x0800b30d
 800b394:	0800b441 	.word	0x0800b441
 800b398:	0800b4d7 	.word	0x0800b4d7
 800b39c:	0800b30d 	.word	0x0800b30d
 800b3a0:	0800b3e9 	.word	0x0800b3e9
 800b3a4:	0800b427 	.word	0x0800b427
 800b3a8:	0800b427 	.word	0x0800b427
 800b3ac:	0800b427 	.word	0x0800b427
 800b3b0:	0800b427 	.word	0x0800b427
 800b3b4:	0800b427 	.word	0x0800b427
 800b3b8:	0800b427 	.word	0x0800b427
 800b3bc:	0800b427 	.word	0x0800b427
 800b3c0:	0800b427 	.word	0x0800b427
 800b3c4:	0800b427 	.word	0x0800b427
 800b3c8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b3ca:	d809      	bhi.n	800b3e0 <_scanf_float+0x138>
 800b3cc:	2b60      	cmp	r3, #96	@ 0x60
 800b3ce:	d8b2      	bhi.n	800b336 <_scanf_float+0x8e>
 800b3d0:	2b54      	cmp	r3, #84	@ 0x54
 800b3d2:	d07b      	beq.n	800b4cc <_scanf_float+0x224>
 800b3d4:	2b59      	cmp	r3, #89	@ 0x59
 800b3d6:	d199      	bne.n	800b30c <_scanf_float+0x64>
 800b3d8:	2d07      	cmp	r5, #7
 800b3da:	d197      	bne.n	800b30c <_scanf_float+0x64>
 800b3dc:	2508      	movs	r5, #8
 800b3de:	e02c      	b.n	800b43a <_scanf_float+0x192>
 800b3e0:	2b74      	cmp	r3, #116	@ 0x74
 800b3e2:	d073      	beq.n	800b4cc <_scanf_float+0x224>
 800b3e4:	2b79      	cmp	r3, #121	@ 0x79
 800b3e6:	e7f6      	b.n	800b3d6 <_scanf_float+0x12e>
 800b3e8:	6821      	ldr	r1, [r4, #0]
 800b3ea:	05c8      	lsls	r0, r1, #23
 800b3ec:	d51b      	bpl.n	800b426 <_scanf_float+0x17e>
 800b3ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b3f2:	6021      	str	r1, [r4, #0]
 800b3f4:	f109 0901 	add.w	r9, r9, #1
 800b3f8:	f1bb 0f00 	cmp.w	fp, #0
 800b3fc:	d003      	beq.n	800b406 <_scanf_float+0x15e>
 800b3fe:	3201      	adds	r2, #1
 800b400:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b404:	60a2      	str	r2, [r4, #8]
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	3b01      	subs	r3, #1
 800b40a:	60a3      	str	r3, [r4, #8]
 800b40c:	6923      	ldr	r3, [r4, #16]
 800b40e:	3301      	adds	r3, #1
 800b410:	6123      	str	r3, [r4, #16]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3b01      	subs	r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	607b      	str	r3, [r7, #4]
 800b41a:	f340 8087 	ble.w	800b52c <_scanf_float+0x284>
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	3301      	adds	r3, #1
 800b422:	603b      	str	r3, [r7, #0]
 800b424:	e765      	b.n	800b2f2 <_scanf_float+0x4a>
 800b426:	eb1a 0105 	adds.w	r1, sl, r5
 800b42a:	f47f af6f 	bne.w	800b30c <_scanf_float+0x64>
 800b42e:	6822      	ldr	r2, [r4, #0]
 800b430:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b434:	6022      	str	r2, [r4, #0]
 800b436:	460d      	mov	r5, r1
 800b438:	468a      	mov	sl, r1
 800b43a:	f806 3b01 	strb.w	r3, [r6], #1
 800b43e:	e7e2      	b.n	800b406 <_scanf_float+0x15e>
 800b440:	6822      	ldr	r2, [r4, #0]
 800b442:	0610      	lsls	r0, r2, #24
 800b444:	f57f af62 	bpl.w	800b30c <_scanf_float+0x64>
 800b448:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b44c:	6022      	str	r2, [r4, #0]
 800b44e:	e7f4      	b.n	800b43a <_scanf_float+0x192>
 800b450:	f1ba 0f00 	cmp.w	sl, #0
 800b454:	d10e      	bne.n	800b474 <_scanf_float+0x1cc>
 800b456:	f1b9 0f00 	cmp.w	r9, #0
 800b45a:	d10e      	bne.n	800b47a <_scanf_float+0x1d2>
 800b45c:	6822      	ldr	r2, [r4, #0]
 800b45e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b462:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b466:	d108      	bne.n	800b47a <_scanf_float+0x1d2>
 800b468:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b46c:	6022      	str	r2, [r4, #0]
 800b46e:	f04f 0a01 	mov.w	sl, #1
 800b472:	e7e2      	b.n	800b43a <_scanf_float+0x192>
 800b474:	f1ba 0f02 	cmp.w	sl, #2
 800b478:	d055      	beq.n	800b526 <_scanf_float+0x27e>
 800b47a:	2d01      	cmp	r5, #1
 800b47c:	d002      	beq.n	800b484 <_scanf_float+0x1dc>
 800b47e:	2d04      	cmp	r5, #4
 800b480:	f47f af44 	bne.w	800b30c <_scanf_float+0x64>
 800b484:	3501      	adds	r5, #1
 800b486:	b2ed      	uxtb	r5, r5
 800b488:	e7d7      	b.n	800b43a <_scanf_float+0x192>
 800b48a:	f1ba 0f01 	cmp.w	sl, #1
 800b48e:	f47f af3d 	bne.w	800b30c <_scanf_float+0x64>
 800b492:	f04f 0a02 	mov.w	sl, #2
 800b496:	e7d0      	b.n	800b43a <_scanf_float+0x192>
 800b498:	b97d      	cbnz	r5, 800b4ba <_scanf_float+0x212>
 800b49a:	f1b9 0f00 	cmp.w	r9, #0
 800b49e:	f47f af38 	bne.w	800b312 <_scanf_float+0x6a>
 800b4a2:	6822      	ldr	r2, [r4, #0]
 800b4a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b4a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b4ac:	f040 8108 	bne.w	800b6c0 <_scanf_float+0x418>
 800b4b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b4b4:	6022      	str	r2, [r4, #0]
 800b4b6:	2501      	movs	r5, #1
 800b4b8:	e7bf      	b.n	800b43a <_scanf_float+0x192>
 800b4ba:	2d03      	cmp	r5, #3
 800b4bc:	d0e2      	beq.n	800b484 <_scanf_float+0x1dc>
 800b4be:	2d05      	cmp	r5, #5
 800b4c0:	e7de      	b.n	800b480 <_scanf_float+0x1d8>
 800b4c2:	2d02      	cmp	r5, #2
 800b4c4:	f47f af22 	bne.w	800b30c <_scanf_float+0x64>
 800b4c8:	2503      	movs	r5, #3
 800b4ca:	e7b6      	b.n	800b43a <_scanf_float+0x192>
 800b4cc:	2d06      	cmp	r5, #6
 800b4ce:	f47f af1d 	bne.w	800b30c <_scanf_float+0x64>
 800b4d2:	2507      	movs	r5, #7
 800b4d4:	e7b1      	b.n	800b43a <_scanf_float+0x192>
 800b4d6:	6822      	ldr	r2, [r4, #0]
 800b4d8:	0591      	lsls	r1, r2, #22
 800b4da:	f57f af17 	bpl.w	800b30c <_scanf_float+0x64>
 800b4de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b4e2:	6022      	str	r2, [r4, #0]
 800b4e4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4e8:	e7a7      	b.n	800b43a <_scanf_float+0x192>
 800b4ea:	6822      	ldr	r2, [r4, #0]
 800b4ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b4f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b4f4:	d006      	beq.n	800b504 <_scanf_float+0x25c>
 800b4f6:	0550      	lsls	r0, r2, #21
 800b4f8:	f57f af08 	bpl.w	800b30c <_scanf_float+0x64>
 800b4fc:	f1b9 0f00 	cmp.w	r9, #0
 800b500:	f000 80de 	beq.w	800b6c0 <_scanf_float+0x418>
 800b504:	0591      	lsls	r1, r2, #22
 800b506:	bf58      	it	pl
 800b508:	9902      	ldrpl	r1, [sp, #8]
 800b50a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b50e:	bf58      	it	pl
 800b510:	eba9 0101 	subpl.w	r1, r9, r1
 800b514:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b518:	bf58      	it	pl
 800b51a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	f04f 0900 	mov.w	r9, #0
 800b524:	e789      	b.n	800b43a <_scanf_float+0x192>
 800b526:	f04f 0a03 	mov.w	sl, #3
 800b52a:	e786      	b.n	800b43a <_scanf_float+0x192>
 800b52c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b530:	4639      	mov	r1, r7
 800b532:	4640      	mov	r0, r8
 800b534:	4798      	blx	r3
 800b536:	2800      	cmp	r0, #0
 800b538:	f43f aedb 	beq.w	800b2f2 <_scanf_float+0x4a>
 800b53c:	e6e6      	b.n	800b30c <_scanf_float+0x64>
 800b53e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b542:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b546:	463a      	mov	r2, r7
 800b548:	4640      	mov	r0, r8
 800b54a:	4798      	blx	r3
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	3b01      	subs	r3, #1
 800b550:	6123      	str	r3, [r4, #16]
 800b552:	e6e8      	b.n	800b326 <_scanf_float+0x7e>
 800b554:	1e6b      	subs	r3, r5, #1
 800b556:	2b06      	cmp	r3, #6
 800b558:	d824      	bhi.n	800b5a4 <_scanf_float+0x2fc>
 800b55a:	2d02      	cmp	r5, #2
 800b55c:	d836      	bhi.n	800b5cc <_scanf_float+0x324>
 800b55e:	9b01      	ldr	r3, [sp, #4]
 800b560:	429e      	cmp	r6, r3
 800b562:	f67f aee4 	bls.w	800b32e <_scanf_float+0x86>
 800b566:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b56a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b56e:	463a      	mov	r2, r7
 800b570:	4640      	mov	r0, r8
 800b572:	4798      	blx	r3
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	3b01      	subs	r3, #1
 800b578:	6123      	str	r3, [r4, #16]
 800b57a:	e7f0      	b.n	800b55e <_scanf_float+0x2b6>
 800b57c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b580:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b584:	463a      	mov	r2, r7
 800b586:	4640      	mov	r0, r8
 800b588:	4798      	blx	r3
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b594:	fa5f fa8a 	uxtb.w	sl, sl
 800b598:	f1ba 0f02 	cmp.w	sl, #2
 800b59c:	d1ee      	bne.n	800b57c <_scanf_float+0x2d4>
 800b59e:	3d03      	subs	r5, #3
 800b5a0:	b2ed      	uxtb	r5, r5
 800b5a2:	1b76      	subs	r6, r6, r5
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	05da      	lsls	r2, r3, #23
 800b5a8:	d530      	bpl.n	800b60c <_scanf_float+0x364>
 800b5aa:	055b      	lsls	r3, r3, #21
 800b5ac:	d511      	bpl.n	800b5d2 <_scanf_float+0x32a>
 800b5ae:	9b01      	ldr	r3, [sp, #4]
 800b5b0:	429e      	cmp	r6, r3
 800b5b2:	f67f aebc 	bls.w	800b32e <_scanf_float+0x86>
 800b5b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b5be:	463a      	mov	r2, r7
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	4798      	blx	r3
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	6123      	str	r3, [r4, #16]
 800b5ca:	e7f0      	b.n	800b5ae <_scanf_float+0x306>
 800b5cc:	46aa      	mov	sl, r5
 800b5ce:	46b3      	mov	fp, r6
 800b5d0:	e7de      	b.n	800b590 <_scanf_float+0x2e8>
 800b5d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b5d6:	6923      	ldr	r3, [r4, #16]
 800b5d8:	2965      	cmp	r1, #101	@ 0x65
 800b5da:	f103 33ff 	add.w	r3, r3, #4294967295
 800b5de:	f106 35ff 	add.w	r5, r6, #4294967295
 800b5e2:	6123      	str	r3, [r4, #16]
 800b5e4:	d00c      	beq.n	800b600 <_scanf_float+0x358>
 800b5e6:	2945      	cmp	r1, #69	@ 0x45
 800b5e8:	d00a      	beq.n	800b600 <_scanf_float+0x358>
 800b5ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5ee:	463a      	mov	r2, r7
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	4798      	blx	r3
 800b5f4:	6923      	ldr	r3, [r4, #16]
 800b5f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	1eb5      	subs	r5, r6, #2
 800b5fe:	6123      	str	r3, [r4, #16]
 800b600:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b604:	463a      	mov	r2, r7
 800b606:	4640      	mov	r0, r8
 800b608:	4798      	blx	r3
 800b60a:	462e      	mov	r6, r5
 800b60c:	6822      	ldr	r2, [r4, #0]
 800b60e:	f012 0210 	ands.w	r2, r2, #16
 800b612:	d001      	beq.n	800b618 <_scanf_float+0x370>
 800b614:	2000      	movs	r0, #0
 800b616:	e68b      	b.n	800b330 <_scanf_float+0x88>
 800b618:	7032      	strb	r2, [r6, #0]
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b624:	d11c      	bne.n	800b660 <_scanf_float+0x3b8>
 800b626:	9b02      	ldr	r3, [sp, #8]
 800b628:	454b      	cmp	r3, r9
 800b62a:	eba3 0209 	sub.w	r2, r3, r9
 800b62e:	d123      	bne.n	800b678 <_scanf_float+0x3d0>
 800b630:	9901      	ldr	r1, [sp, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	4640      	mov	r0, r8
 800b636:	f002 fd6b 	bl	800e110 <_strtod_r>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	6821      	ldr	r1, [r4, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f011 0f02 	tst.w	r1, #2
 800b644:	ec57 6b10 	vmov	r6, r7, d0
 800b648:	f103 0204 	add.w	r2, r3, #4
 800b64c:	d01f      	beq.n	800b68e <_scanf_float+0x3e6>
 800b64e:	9903      	ldr	r1, [sp, #12]
 800b650:	600a      	str	r2, [r1, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	e9c3 6700 	strd	r6, r7, [r3]
 800b658:	68e3      	ldr	r3, [r4, #12]
 800b65a:	3301      	adds	r3, #1
 800b65c:	60e3      	str	r3, [r4, #12]
 800b65e:	e7d9      	b.n	800b614 <_scanf_float+0x36c>
 800b660:	9b04      	ldr	r3, [sp, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0e4      	beq.n	800b630 <_scanf_float+0x388>
 800b666:	9905      	ldr	r1, [sp, #20]
 800b668:	230a      	movs	r3, #10
 800b66a:	3101      	adds	r1, #1
 800b66c:	4640      	mov	r0, r8
 800b66e:	f7ff f9b7 	bl	800a9e0 <_strtol_r>
 800b672:	9b04      	ldr	r3, [sp, #16]
 800b674:	9e05      	ldr	r6, [sp, #20]
 800b676:	1ac2      	subs	r2, r0, r3
 800b678:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b67c:	429e      	cmp	r6, r3
 800b67e:	bf28      	it	cs
 800b680:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b684:	4910      	ldr	r1, [pc, #64]	@ (800b6c8 <_scanf_float+0x420>)
 800b686:	4630      	mov	r0, r6
 800b688:	f000 f9de 	bl	800ba48 <siprintf>
 800b68c:	e7d0      	b.n	800b630 <_scanf_float+0x388>
 800b68e:	f011 0f04 	tst.w	r1, #4
 800b692:	9903      	ldr	r1, [sp, #12]
 800b694:	600a      	str	r2, [r1, #0]
 800b696:	d1dc      	bne.n	800b652 <_scanf_float+0x3aa>
 800b698:	681d      	ldr	r5, [r3, #0]
 800b69a:	4632      	mov	r2, r6
 800b69c:	463b      	mov	r3, r7
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	f7f5 fa63 	bl	8000b6c <__aeabi_dcmpun>
 800b6a6:	b128      	cbz	r0, 800b6b4 <_scanf_float+0x40c>
 800b6a8:	4808      	ldr	r0, [pc, #32]	@ (800b6cc <_scanf_float+0x424>)
 800b6aa:	f000 fb0d 	bl	800bcc8 <nanf>
 800b6ae:	ed85 0a00 	vstr	s0, [r5]
 800b6b2:	e7d1      	b.n	800b658 <_scanf_float+0x3b0>
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	f7f5 fab6 	bl	8000c28 <__aeabi_d2f>
 800b6bc:	6028      	str	r0, [r5, #0]
 800b6be:	e7cb      	b.n	800b658 <_scanf_float+0x3b0>
 800b6c0:	f04f 0900 	mov.w	r9, #0
 800b6c4:	e629      	b.n	800b31a <_scanf_float+0x72>
 800b6c6:	bf00      	nop
 800b6c8:	08010b39 	.word	0x08010b39
 800b6cc:	08010bea 	.word	0x08010bea

0800b6d0 <std>:
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	b510      	push	{r4, lr}
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b6da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6de:	6083      	str	r3, [r0, #8]
 800b6e0:	8181      	strh	r1, [r0, #12]
 800b6e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b6e4:	81c2      	strh	r2, [r0, #14]
 800b6e6:	6183      	str	r3, [r0, #24]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	2208      	movs	r2, #8
 800b6ec:	305c      	adds	r0, #92	@ 0x5c
 800b6ee:	f000 fa0e 	bl	800bb0e <memset>
 800b6f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b728 <std+0x58>)
 800b6f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b72c <std+0x5c>)
 800b6f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b730 <std+0x60>)
 800b6fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b734 <std+0x64>)
 800b700:	6323      	str	r3, [r4, #48]	@ 0x30
 800b702:	4b0d      	ldr	r3, [pc, #52]	@ (800b738 <std+0x68>)
 800b704:	6224      	str	r4, [r4, #32]
 800b706:	429c      	cmp	r4, r3
 800b708:	d006      	beq.n	800b718 <std+0x48>
 800b70a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b70e:	4294      	cmp	r4, r2
 800b710:	d002      	beq.n	800b718 <std+0x48>
 800b712:	33d0      	adds	r3, #208	@ 0xd0
 800b714:	429c      	cmp	r4, r3
 800b716:	d105      	bne.n	800b724 <std+0x54>
 800b718:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b720:	f000 bace 	b.w	800bcc0 <__retarget_lock_init_recursive>
 800b724:	bd10      	pop	{r4, pc}
 800b726:	bf00      	nop
 800b728:	0800ba89 	.word	0x0800ba89
 800b72c:	0800baab 	.word	0x0800baab
 800b730:	0800bae3 	.word	0x0800bae3
 800b734:	0800bb07 	.word	0x0800bb07
 800b738:	20000fb8 	.word	0x20000fb8

0800b73c <stdio_exit_handler>:
 800b73c:	4a02      	ldr	r2, [pc, #8]	@ (800b748 <stdio_exit_handler+0xc>)
 800b73e:	4903      	ldr	r1, [pc, #12]	@ (800b74c <stdio_exit_handler+0x10>)
 800b740:	4803      	ldr	r0, [pc, #12]	@ (800b750 <stdio_exit_handler+0x14>)
 800b742:	f000 b869 	b.w	800b818 <_fwalk_sglue>
 800b746:	bf00      	nop
 800b748:	20000030 	.word	0x20000030
 800b74c:	0800e759 	.word	0x0800e759
 800b750:	20000040 	.word	0x20000040

0800b754 <cleanup_stdio>:
 800b754:	6841      	ldr	r1, [r0, #4]
 800b756:	4b0c      	ldr	r3, [pc, #48]	@ (800b788 <cleanup_stdio+0x34>)
 800b758:	4299      	cmp	r1, r3
 800b75a:	b510      	push	{r4, lr}
 800b75c:	4604      	mov	r4, r0
 800b75e:	d001      	beq.n	800b764 <cleanup_stdio+0x10>
 800b760:	f002 fffa 	bl	800e758 <_fflush_r>
 800b764:	68a1      	ldr	r1, [r4, #8]
 800b766:	4b09      	ldr	r3, [pc, #36]	@ (800b78c <cleanup_stdio+0x38>)
 800b768:	4299      	cmp	r1, r3
 800b76a:	d002      	beq.n	800b772 <cleanup_stdio+0x1e>
 800b76c:	4620      	mov	r0, r4
 800b76e:	f002 fff3 	bl	800e758 <_fflush_r>
 800b772:	68e1      	ldr	r1, [r4, #12]
 800b774:	4b06      	ldr	r3, [pc, #24]	@ (800b790 <cleanup_stdio+0x3c>)
 800b776:	4299      	cmp	r1, r3
 800b778:	d004      	beq.n	800b784 <cleanup_stdio+0x30>
 800b77a:	4620      	mov	r0, r4
 800b77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b780:	f002 bfea 	b.w	800e758 <_fflush_r>
 800b784:	bd10      	pop	{r4, pc}
 800b786:	bf00      	nop
 800b788:	20000fb8 	.word	0x20000fb8
 800b78c:	20001020 	.word	0x20001020
 800b790:	20001088 	.word	0x20001088

0800b794 <global_stdio_init.part.0>:
 800b794:	b510      	push	{r4, lr}
 800b796:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c4 <global_stdio_init.part.0+0x30>)
 800b798:	4c0b      	ldr	r4, [pc, #44]	@ (800b7c8 <global_stdio_init.part.0+0x34>)
 800b79a:	4a0c      	ldr	r2, [pc, #48]	@ (800b7cc <global_stdio_init.part.0+0x38>)
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	4620      	mov	r0, r4
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	2104      	movs	r1, #4
 800b7a4:	f7ff ff94 	bl	800b6d0 <std>
 800b7a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	2109      	movs	r1, #9
 800b7b0:	f7ff ff8e 	bl	800b6d0 <std>
 800b7b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7be:	2112      	movs	r1, #18
 800b7c0:	f7ff bf86 	b.w	800b6d0 <std>
 800b7c4:	200010f0 	.word	0x200010f0
 800b7c8:	20000fb8 	.word	0x20000fb8
 800b7cc:	0800b73d 	.word	0x0800b73d

0800b7d0 <__sfp_lock_acquire>:
 800b7d0:	4801      	ldr	r0, [pc, #4]	@ (800b7d8 <__sfp_lock_acquire+0x8>)
 800b7d2:	f000 ba76 	b.w	800bcc2 <__retarget_lock_acquire_recursive>
 800b7d6:	bf00      	nop
 800b7d8:	200010f9 	.word	0x200010f9

0800b7dc <__sfp_lock_release>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	@ (800b7e4 <__sfp_lock_release+0x8>)
 800b7de:	f000 ba71 	b.w	800bcc4 <__retarget_lock_release_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	200010f9 	.word	0x200010f9

0800b7e8 <__sinit>:
 800b7e8:	b510      	push	{r4, lr}
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	f7ff fff0 	bl	800b7d0 <__sfp_lock_acquire>
 800b7f0:	6a23      	ldr	r3, [r4, #32]
 800b7f2:	b11b      	cbz	r3, 800b7fc <__sinit+0x14>
 800b7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f8:	f7ff bff0 	b.w	800b7dc <__sfp_lock_release>
 800b7fc:	4b04      	ldr	r3, [pc, #16]	@ (800b810 <__sinit+0x28>)
 800b7fe:	6223      	str	r3, [r4, #32]
 800b800:	4b04      	ldr	r3, [pc, #16]	@ (800b814 <__sinit+0x2c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1f5      	bne.n	800b7f4 <__sinit+0xc>
 800b808:	f7ff ffc4 	bl	800b794 <global_stdio_init.part.0>
 800b80c:	e7f2      	b.n	800b7f4 <__sinit+0xc>
 800b80e:	bf00      	nop
 800b810:	0800b755 	.word	0x0800b755
 800b814:	200010f0 	.word	0x200010f0

0800b818 <_fwalk_sglue>:
 800b818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b81c:	4607      	mov	r7, r0
 800b81e:	4688      	mov	r8, r1
 800b820:	4614      	mov	r4, r2
 800b822:	2600      	movs	r6, #0
 800b824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b828:	f1b9 0901 	subs.w	r9, r9, #1
 800b82c:	d505      	bpl.n	800b83a <_fwalk_sglue+0x22>
 800b82e:	6824      	ldr	r4, [r4, #0]
 800b830:	2c00      	cmp	r4, #0
 800b832:	d1f7      	bne.n	800b824 <_fwalk_sglue+0xc>
 800b834:	4630      	mov	r0, r6
 800b836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83a:	89ab      	ldrh	r3, [r5, #12]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d907      	bls.n	800b850 <_fwalk_sglue+0x38>
 800b840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b844:	3301      	adds	r3, #1
 800b846:	d003      	beq.n	800b850 <_fwalk_sglue+0x38>
 800b848:	4629      	mov	r1, r5
 800b84a:	4638      	mov	r0, r7
 800b84c:	47c0      	blx	r8
 800b84e:	4306      	orrs	r6, r0
 800b850:	3568      	adds	r5, #104	@ 0x68
 800b852:	e7e9      	b.n	800b828 <_fwalk_sglue+0x10>

0800b854 <iprintf>:
 800b854:	b40f      	push	{r0, r1, r2, r3}
 800b856:	b507      	push	{r0, r1, r2, lr}
 800b858:	4906      	ldr	r1, [pc, #24]	@ (800b874 <iprintf+0x20>)
 800b85a:	ab04      	add	r3, sp, #16
 800b85c:	6808      	ldr	r0, [r1, #0]
 800b85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b862:	6881      	ldr	r1, [r0, #8]
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	f002 fddb 	bl	800e420 <_vfiprintf_r>
 800b86a:	b003      	add	sp, #12
 800b86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b870:	b004      	add	sp, #16
 800b872:	4770      	bx	lr
 800b874:	2000003c 	.word	0x2000003c

0800b878 <setvbuf>:
 800b878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b87c:	461d      	mov	r5, r3
 800b87e:	4b57      	ldr	r3, [pc, #348]	@ (800b9dc <setvbuf+0x164>)
 800b880:	681f      	ldr	r7, [r3, #0]
 800b882:	4604      	mov	r4, r0
 800b884:	460e      	mov	r6, r1
 800b886:	4690      	mov	r8, r2
 800b888:	b127      	cbz	r7, 800b894 <setvbuf+0x1c>
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	b913      	cbnz	r3, 800b894 <setvbuf+0x1c>
 800b88e:	4638      	mov	r0, r7
 800b890:	f7ff ffaa 	bl	800b7e8 <__sinit>
 800b894:	f1b8 0f02 	cmp.w	r8, #2
 800b898:	d006      	beq.n	800b8a8 <setvbuf+0x30>
 800b89a:	f1b8 0f01 	cmp.w	r8, #1
 800b89e:	f200 809a 	bhi.w	800b9d6 <setvbuf+0x15e>
 800b8a2:	2d00      	cmp	r5, #0
 800b8a4:	f2c0 8097 	blt.w	800b9d6 <setvbuf+0x15e>
 800b8a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8aa:	07d9      	lsls	r1, r3, #31
 800b8ac:	d405      	bmi.n	800b8ba <setvbuf+0x42>
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	059a      	lsls	r2, r3, #22
 800b8b2:	d402      	bmi.n	800b8ba <setvbuf+0x42>
 800b8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8b6:	f000 fa04 	bl	800bcc2 <__retarget_lock_acquire_recursive>
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	4638      	mov	r0, r7
 800b8be:	f002 ff4b 	bl	800e758 <_fflush_r>
 800b8c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8c4:	b141      	cbz	r1, 800b8d8 <setvbuf+0x60>
 800b8c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8ca:	4299      	cmp	r1, r3
 800b8cc:	d002      	beq.n	800b8d4 <setvbuf+0x5c>
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	f001 f86a 	bl	800c9a8 <_free_r>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8d8:	2300      	movs	r3, #0
 800b8da:	61a3      	str	r3, [r4, #24]
 800b8dc:	6063      	str	r3, [r4, #4]
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	061b      	lsls	r3, r3, #24
 800b8e2:	d503      	bpl.n	800b8ec <setvbuf+0x74>
 800b8e4:	6921      	ldr	r1, [r4, #16]
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	f001 f85e 	bl	800c9a8 <_free_r>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b8f2:	f023 0303 	bic.w	r3, r3, #3
 800b8f6:	f1b8 0f02 	cmp.w	r8, #2
 800b8fa:	81a3      	strh	r3, [r4, #12]
 800b8fc:	d061      	beq.n	800b9c2 <setvbuf+0x14a>
 800b8fe:	ab01      	add	r3, sp, #4
 800b900:	466a      	mov	r2, sp
 800b902:	4621      	mov	r1, r4
 800b904:	4638      	mov	r0, r7
 800b906:	f002 ff61 	bl	800e7cc <__swhatbuf_r>
 800b90a:	89a3      	ldrh	r3, [r4, #12]
 800b90c:	4318      	orrs	r0, r3
 800b90e:	81a0      	strh	r0, [r4, #12]
 800b910:	bb2d      	cbnz	r5, 800b95e <setvbuf+0xe6>
 800b912:	9d00      	ldr	r5, [sp, #0]
 800b914:	4628      	mov	r0, r5
 800b916:	f001 f891 	bl	800ca3c <malloc>
 800b91a:	4606      	mov	r6, r0
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d152      	bne.n	800b9c6 <setvbuf+0x14e>
 800b920:	f8dd 9000 	ldr.w	r9, [sp]
 800b924:	45a9      	cmp	r9, r5
 800b926:	d140      	bne.n	800b9aa <setvbuf+0x132>
 800b928:	f04f 35ff 	mov.w	r5, #4294967295
 800b92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b930:	f043 0202 	orr.w	r2, r3, #2
 800b934:	81a2      	strh	r2, [r4, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	60a2      	str	r2, [r4, #8]
 800b93a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b93e:	6022      	str	r2, [r4, #0]
 800b940:	6122      	str	r2, [r4, #16]
 800b942:	2201      	movs	r2, #1
 800b944:	6162      	str	r2, [r4, #20]
 800b946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b948:	07d6      	lsls	r6, r2, #31
 800b94a:	d404      	bmi.n	800b956 <setvbuf+0xde>
 800b94c:	0598      	lsls	r0, r3, #22
 800b94e:	d402      	bmi.n	800b956 <setvbuf+0xde>
 800b950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b952:	f000 f9b7 	bl	800bcc4 <__retarget_lock_release_recursive>
 800b956:	4628      	mov	r0, r5
 800b958:	b003      	add	sp, #12
 800b95a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b95e:	2e00      	cmp	r6, #0
 800b960:	d0d8      	beq.n	800b914 <setvbuf+0x9c>
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	b913      	cbnz	r3, 800b96c <setvbuf+0xf4>
 800b966:	4638      	mov	r0, r7
 800b968:	f7ff ff3e 	bl	800b7e8 <__sinit>
 800b96c:	f1b8 0f01 	cmp.w	r8, #1
 800b970:	bf08      	it	eq
 800b972:	89a3      	ldrheq	r3, [r4, #12]
 800b974:	6026      	str	r6, [r4, #0]
 800b976:	bf04      	itt	eq
 800b978:	f043 0301 	orreq.w	r3, r3, #1
 800b97c:	81a3      	strheq	r3, [r4, #12]
 800b97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b982:	f013 0208 	ands.w	r2, r3, #8
 800b986:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b98a:	d01e      	beq.n	800b9ca <setvbuf+0x152>
 800b98c:	07d9      	lsls	r1, r3, #31
 800b98e:	bf41      	itttt	mi
 800b990:	2200      	movmi	r2, #0
 800b992:	426d      	negmi	r5, r5
 800b994:	60a2      	strmi	r2, [r4, #8]
 800b996:	61a5      	strmi	r5, [r4, #24]
 800b998:	bf58      	it	pl
 800b99a:	60a5      	strpl	r5, [r4, #8]
 800b99c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b99e:	07d2      	lsls	r2, r2, #31
 800b9a0:	d401      	bmi.n	800b9a6 <setvbuf+0x12e>
 800b9a2:	059b      	lsls	r3, r3, #22
 800b9a4:	d513      	bpl.n	800b9ce <setvbuf+0x156>
 800b9a6:	2500      	movs	r5, #0
 800b9a8:	e7d5      	b.n	800b956 <setvbuf+0xde>
 800b9aa:	4648      	mov	r0, r9
 800b9ac:	f001 f846 	bl	800ca3c <malloc>
 800b9b0:	4606      	mov	r6, r0
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d0b8      	beq.n	800b928 <setvbuf+0xb0>
 800b9b6:	89a3      	ldrh	r3, [r4, #12]
 800b9b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9bc:	81a3      	strh	r3, [r4, #12]
 800b9be:	464d      	mov	r5, r9
 800b9c0:	e7cf      	b.n	800b962 <setvbuf+0xea>
 800b9c2:	2500      	movs	r5, #0
 800b9c4:	e7b2      	b.n	800b92c <setvbuf+0xb4>
 800b9c6:	46a9      	mov	r9, r5
 800b9c8:	e7f5      	b.n	800b9b6 <setvbuf+0x13e>
 800b9ca:	60a2      	str	r2, [r4, #8]
 800b9cc:	e7e6      	b.n	800b99c <setvbuf+0x124>
 800b9ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9d0:	f000 f978 	bl	800bcc4 <__retarget_lock_release_recursive>
 800b9d4:	e7e7      	b.n	800b9a6 <setvbuf+0x12e>
 800b9d6:	f04f 35ff 	mov.w	r5, #4294967295
 800b9da:	e7bc      	b.n	800b956 <setvbuf+0xde>
 800b9dc:	2000003c 	.word	0x2000003c

0800b9e0 <sniprintf>:
 800b9e0:	b40c      	push	{r2, r3}
 800b9e2:	b530      	push	{r4, r5, lr}
 800b9e4:	4b17      	ldr	r3, [pc, #92]	@ (800ba44 <sniprintf+0x64>)
 800b9e6:	1e0c      	subs	r4, r1, #0
 800b9e8:	681d      	ldr	r5, [r3, #0]
 800b9ea:	b09d      	sub	sp, #116	@ 0x74
 800b9ec:	da08      	bge.n	800ba00 <sniprintf+0x20>
 800b9ee:	238b      	movs	r3, #139	@ 0x8b
 800b9f0:	602b      	str	r3, [r5, #0]
 800b9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f6:	b01d      	add	sp, #116	@ 0x74
 800b9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9fc:	b002      	add	sp, #8
 800b9fe:	4770      	bx	lr
 800ba00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ba04:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ba08:	bf14      	ite	ne
 800ba0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ba0e:	4623      	moveq	r3, r4
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	9307      	str	r3, [sp, #28]
 800ba14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba18:	9002      	str	r0, [sp, #8]
 800ba1a:	9006      	str	r0, [sp, #24]
 800ba1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ba20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ba22:	ab21      	add	r3, sp, #132	@ 0x84
 800ba24:	a902      	add	r1, sp, #8
 800ba26:	4628      	mov	r0, r5
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	f002 fbd3 	bl	800e1d4 <_svfiprintf_r>
 800ba2e:	1c43      	adds	r3, r0, #1
 800ba30:	bfbc      	itt	lt
 800ba32:	238b      	movlt	r3, #139	@ 0x8b
 800ba34:	602b      	strlt	r3, [r5, #0]
 800ba36:	2c00      	cmp	r4, #0
 800ba38:	d0dd      	beq.n	800b9f6 <sniprintf+0x16>
 800ba3a:	9b02      	ldr	r3, [sp, #8]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	701a      	strb	r2, [r3, #0]
 800ba40:	e7d9      	b.n	800b9f6 <sniprintf+0x16>
 800ba42:	bf00      	nop
 800ba44:	2000003c 	.word	0x2000003c

0800ba48 <siprintf>:
 800ba48:	b40e      	push	{r1, r2, r3}
 800ba4a:	b500      	push	{lr}
 800ba4c:	b09c      	sub	sp, #112	@ 0x70
 800ba4e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba50:	9002      	str	r0, [sp, #8]
 800ba52:	9006      	str	r0, [sp, #24]
 800ba54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba58:	4809      	ldr	r0, [pc, #36]	@ (800ba80 <siprintf+0x38>)
 800ba5a:	9107      	str	r1, [sp, #28]
 800ba5c:	9104      	str	r1, [sp, #16]
 800ba5e:	4909      	ldr	r1, [pc, #36]	@ (800ba84 <siprintf+0x3c>)
 800ba60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba64:	9105      	str	r1, [sp, #20]
 800ba66:	6800      	ldr	r0, [r0, #0]
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	a902      	add	r1, sp, #8
 800ba6c:	f002 fbb2 	bl	800e1d4 <_svfiprintf_r>
 800ba70:	9b02      	ldr	r3, [sp, #8]
 800ba72:	2200      	movs	r2, #0
 800ba74:	701a      	strb	r2, [r3, #0]
 800ba76:	b01c      	add	sp, #112	@ 0x70
 800ba78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba7c:	b003      	add	sp, #12
 800ba7e:	4770      	bx	lr
 800ba80:	2000003c 	.word	0x2000003c
 800ba84:	ffff0208 	.word	0xffff0208

0800ba88 <__sread>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba90:	f000 f8c8 	bl	800bc24 <_read_r>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	bfab      	itete	ge
 800ba98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ba9c:	181b      	addge	r3, r3, r0
 800ba9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800baa2:	bfac      	ite	ge
 800baa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800baa6:	81a3      	strhlt	r3, [r4, #12]
 800baa8:	bd10      	pop	{r4, pc}

0800baaa <__swrite>:
 800baaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baae:	461f      	mov	r7, r3
 800bab0:	898b      	ldrh	r3, [r1, #12]
 800bab2:	05db      	lsls	r3, r3, #23
 800bab4:	4605      	mov	r5, r0
 800bab6:	460c      	mov	r4, r1
 800bab8:	4616      	mov	r6, r2
 800baba:	d505      	bpl.n	800bac8 <__swrite+0x1e>
 800babc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac0:	2302      	movs	r3, #2
 800bac2:	2200      	movs	r2, #0
 800bac4:	f000 f89c 	bl	800bc00 <_lseek_r>
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bace:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bad2:	81a3      	strh	r3, [r4, #12]
 800bad4:	4632      	mov	r2, r6
 800bad6:	463b      	mov	r3, r7
 800bad8:	4628      	mov	r0, r5
 800bada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bade:	f000 b8b3 	b.w	800bc48 <_write_r>

0800bae2 <__sseek>:
 800bae2:	b510      	push	{r4, lr}
 800bae4:	460c      	mov	r4, r1
 800bae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baea:	f000 f889 	bl	800bc00 <_lseek_r>
 800baee:	1c43      	adds	r3, r0, #1
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	bf15      	itete	ne
 800baf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800baf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bafa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bafe:	81a3      	strheq	r3, [r4, #12]
 800bb00:	bf18      	it	ne
 800bb02:	81a3      	strhne	r3, [r4, #12]
 800bb04:	bd10      	pop	{r4, pc}

0800bb06 <__sclose>:
 800bb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb0a:	f000 b869 	b.w	800bbe0 <_close_r>

0800bb0e <memset>:
 800bb0e:	4402      	add	r2, r0
 800bb10:	4603      	mov	r3, r0
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d100      	bne.n	800bb18 <memset+0xa>
 800bb16:	4770      	bx	lr
 800bb18:	f803 1b01 	strb.w	r1, [r3], #1
 800bb1c:	e7f9      	b.n	800bb12 <memset+0x4>
	...

0800bb20 <strtok>:
 800bb20:	4b16      	ldr	r3, [pc, #88]	@ (800bb7c <strtok+0x5c>)
 800bb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb26:	681f      	ldr	r7, [r3, #0]
 800bb28:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	460e      	mov	r6, r1
 800bb2e:	b9ec      	cbnz	r4, 800bb6c <strtok+0x4c>
 800bb30:	2050      	movs	r0, #80	@ 0x50
 800bb32:	f000 ff83 	bl	800ca3c <malloc>
 800bb36:	4602      	mov	r2, r0
 800bb38:	6478      	str	r0, [r7, #68]	@ 0x44
 800bb3a:	b920      	cbnz	r0, 800bb46 <strtok+0x26>
 800bb3c:	4b10      	ldr	r3, [pc, #64]	@ (800bb80 <strtok+0x60>)
 800bb3e:	4811      	ldr	r0, [pc, #68]	@ (800bb84 <strtok+0x64>)
 800bb40:	215b      	movs	r1, #91	@ 0x5b
 800bb42:	f000 f8c7 	bl	800bcd4 <__assert_func>
 800bb46:	e9c0 4400 	strd	r4, r4, [r0]
 800bb4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bb4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bb52:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800bb56:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800bb5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800bb5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800bb62:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800bb66:	6184      	str	r4, [r0, #24]
 800bb68:	7704      	strb	r4, [r0, #28]
 800bb6a:	6244      	str	r4, [r0, #36]	@ 0x24
 800bb6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb6e:	4631      	mov	r1, r6
 800bb70:	4628      	mov	r0, r5
 800bb72:	2301      	movs	r3, #1
 800bb74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb78:	f000 b806 	b.w	800bb88 <__strtok_r>
 800bb7c:	2000003c 	.word	0x2000003c
 800bb80:	08010b3e 	.word	0x08010b3e
 800bb84:	08010b55 	.word	0x08010b55

0800bb88 <__strtok_r>:
 800bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	b908      	cbnz	r0, 800bb92 <__strtok_r+0xa>
 800bb8e:	6814      	ldr	r4, [r2, #0]
 800bb90:	b144      	cbz	r4, 800bba4 <__strtok_r+0x1c>
 800bb92:	4620      	mov	r0, r4
 800bb94:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bb98:	460f      	mov	r7, r1
 800bb9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb9e:	b91e      	cbnz	r6, 800bba8 <__strtok_r+0x20>
 800bba0:	b965      	cbnz	r5, 800bbbc <__strtok_r+0x34>
 800bba2:	6015      	str	r5, [r2, #0]
 800bba4:	2000      	movs	r0, #0
 800bba6:	e005      	b.n	800bbb4 <__strtok_r+0x2c>
 800bba8:	42b5      	cmp	r5, r6
 800bbaa:	d1f6      	bne.n	800bb9a <__strtok_r+0x12>
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1f0      	bne.n	800bb92 <__strtok_r+0xa>
 800bbb0:	6014      	str	r4, [r2, #0]
 800bbb2:	7003      	strb	r3, [r0, #0]
 800bbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb6:	461c      	mov	r4, r3
 800bbb8:	e00c      	b.n	800bbd4 <__strtok_r+0x4c>
 800bbba:	b915      	cbnz	r5, 800bbc2 <__strtok_r+0x3a>
 800bbbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbc0:	460e      	mov	r6, r1
 800bbc2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bbc6:	42ab      	cmp	r3, r5
 800bbc8:	d1f7      	bne.n	800bbba <__strtok_r+0x32>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d0f3      	beq.n	800bbb6 <__strtok_r+0x2e>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bbd4:	6014      	str	r4, [r2, #0]
 800bbd6:	e7ed      	b.n	800bbb4 <__strtok_r+0x2c>

0800bbd8 <_localeconv_r>:
 800bbd8:	4800      	ldr	r0, [pc, #0]	@ (800bbdc <_localeconv_r+0x4>)
 800bbda:	4770      	bx	lr
 800bbdc:	2000017c 	.word	0x2000017c

0800bbe0 <_close_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4d06      	ldr	r5, [pc, #24]	@ (800bbfc <_close_r+0x1c>)
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	4608      	mov	r0, r1
 800bbea:	602b      	str	r3, [r5, #0]
 800bbec:	f7f7 fd2e 	bl	800364c <_close>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d102      	bne.n	800bbfa <_close_r+0x1a>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	b103      	cbz	r3, 800bbfa <_close_r+0x1a>
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	bd38      	pop	{r3, r4, r5, pc}
 800bbfc:	200010f4 	.word	0x200010f4

0800bc00 <_lseek_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d07      	ldr	r5, [pc, #28]	@ (800bc20 <_lseek_r+0x20>)
 800bc04:	4604      	mov	r4, r0
 800bc06:	4608      	mov	r0, r1
 800bc08:	4611      	mov	r1, r2
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	602a      	str	r2, [r5, #0]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	f7f7 fd43 	bl	800369a <_lseek>
 800bc14:	1c43      	adds	r3, r0, #1
 800bc16:	d102      	bne.n	800bc1e <_lseek_r+0x1e>
 800bc18:	682b      	ldr	r3, [r5, #0]
 800bc1a:	b103      	cbz	r3, 800bc1e <_lseek_r+0x1e>
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	200010f4 	.word	0x200010f4

0800bc24 <_read_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d07      	ldr	r5, [pc, #28]	@ (800bc44 <_read_r+0x20>)
 800bc28:	4604      	mov	r4, r0
 800bc2a:	4608      	mov	r0, r1
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	2200      	movs	r2, #0
 800bc30:	602a      	str	r2, [r5, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	f7f7 fced 	bl	8003612 <_read>
 800bc38:	1c43      	adds	r3, r0, #1
 800bc3a:	d102      	bne.n	800bc42 <_read_r+0x1e>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	b103      	cbz	r3, 800bc42 <_read_r+0x1e>
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	200010f4 	.word	0x200010f4

0800bc48 <_write_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4d07      	ldr	r5, [pc, #28]	@ (800bc68 <_write_r+0x20>)
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	4608      	mov	r0, r1
 800bc50:	4611      	mov	r1, r2
 800bc52:	2200      	movs	r2, #0
 800bc54:	602a      	str	r2, [r5, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	f7f6 ff22 	bl	8002aa0 <_write>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d102      	bne.n	800bc66 <_write_r+0x1e>
 800bc60:	682b      	ldr	r3, [r5, #0]
 800bc62:	b103      	cbz	r3, 800bc66 <_write_r+0x1e>
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	bd38      	pop	{r3, r4, r5, pc}
 800bc68:	200010f4 	.word	0x200010f4

0800bc6c <__errno>:
 800bc6c:	4b01      	ldr	r3, [pc, #4]	@ (800bc74 <__errno+0x8>)
 800bc6e:	6818      	ldr	r0, [r3, #0]
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	2000003c 	.word	0x2000003c

0800bc78 <__libc_init_array>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	4d0d      	ldr	r5, [pc, #52]	@ (800bcb0 <__libc_init_array+0x38>)
 800bc7c:	4c0d      	ldr	r4, [pc, #52]	@ (800bcb4 <__libc_init_array+0x3c>)
 800bc7e:	1b64      	subs	r4, r4, r5
 800bc80:	10a4      	asrs	r4, r4, #2
 800bc82:	2600      	movs	r6, #0
 800bc84:	42a6      	cmp	r6, r4
 800bc86:	d109      	bne.n	800bc9c <__libc_init_array+0x24>
 800bc88:	4d0b      	ldr	r5, [pc, #44]	@ (800bcb8 <__libc_init_array+0x40>)
 800bc8a:	4c0c      	ldr	r4, [pc, #48]	@ (800bcbc <__libc_init_array+0x44>)
 800bc8c:	f003 faf4 	bl	800f278 <_init>
 800bc90:	1b64      	subs	r4, r4, r5
 800bc92:	10a4      	asrs	r4, r4, #2
 800bc94:	2600      	movs	r6, #0
 800bc96:	42a6      	cmp	r6, r4
 800bc98:	d105      	bne.n	800bca6 <__libc_init_array+0x2e>
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca0:	4798      	blx	r3
 800bca2:	3601      	adds	r6, #1
 800bca4:	e7ee      	b.n	800bc84 <__libc_init_array+0xc>
 800bca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcaa:	4798      	blx	r3
 800bcac:	3601      	adds	r6, #1
 800bcae:	e7f2      	b.n	800bc96 <__libc_init_array+0x1e>
 800bcb0:	08010e94 	.word	0x08010e94
 800bcb4:	08010e94 	.word	0x08010e94
 800bcb8:	08010e94 	.word	0x08010e94
 800bcbc:	08010e98 	.word	0x08010e98

0800bcc0 <__retarget_lock_init_recursive>:
 800bcc0:	4770      	bx	lr

0800bcc2 <__retarget_lock_acquire_recursive>:
 800bcc2:	4770      	bx	lr

0800bcc4 <__retarget_lock_release_recursive>:
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <nanf>:
 800bcc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bcd0 <nanf+0x8>
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	7fc00000 	.word	0x7fc00000

0800bcd4 <__assert_func>:
 800bcd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcd6:	4614      	mov	r4, r2
 800bcd8:	461a      	mov	r2, r3
 800bcda:	4b09      	ldr	r3, [pc, #36]	@ (800bd00 <__assert_func+0x2c>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4605      	mov	r5, r0
 800bce0:	68d8      	ldr	r0, [r3, #12]
 800bce2:	b954      	cbnz	r4, 800bcfa <__assert_func+0x26>
 800bce4:	4b07      	ldr	r3, [pc, #28]	@ (800bd04 <__assert_func+0x30>)
 800bce6:	461c      	mov	r4, r3
 800bce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcec:	9100      	str	r1, [sp, #0]
 800bcee:	462b      	mov	r3, r5
 800bcf0:	4905      	ldr	r1, [pc, #20]	@ (800bd08 <__assert_func+0x34>)
 800bcf2:	f002 fd59 	bl	800e7a8 <fiprintf>
 800bcf6:	f002 fed3 	bl	800eaa0 <abort>
 800bcfa:	4b04      	ldr	r3, [pc, #16]	@ (800bd0c <__assert_func+0x38>)
 800bcfc:	e7f4      	b.n	800bce8 <__assert_func+0x14>
 800bcfe:	bf00      	nop
 800bd00:	2000003c 	.word	0x2000003c
 800bd04:	08010bea 	.word	0x08010bea
 800bd08:	08010bbc 	.word	0x08010bbc
 800bd0c:	08010baf 	.word	0x08010baf

0800bd10 <quorem>:
 800bd10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	6903      	ldr	r3, [r0, #16]
 800bd16:	690c      	ldr	r4, [r1, #16]
 800bd18:	42a3      	cmp	r3, r4
 800bd1a:	4607      	mov	r7, r0
 800bd1c:	db7e      	blt.n	800be1c <quorem+0x10c>
 800bd1e:	3c01      	subs	r4, #1
 800bd20:	f101 0814 	add.w	r8, r1, #20
 800bd24:	00a3      	lsls	r3, r4, #2
 800bd26:	f100 0514 	add.w	r5, r0, #20
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd30:	9301      	str	r3, [sp, #4]
 800bd32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd42:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd46:	d32e      	bcc.n	800bda6 <quorem+0x96>
 800bd48:	f04f 0a00 	mov.w	sl, #0
 800bd4c:	46c4      	mov	ip, r8
 800bd4e:	46ae      	mov	lr, r5
 800bd50:	46d3      	mov	fp, sl
 800bd52:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd56:	b298      	uxth	r0, r3
 800bd58:	fb06 a000 	mla	r0, r6, r0, sl
 800bd5c:	0c02      	lsrs	r2, r0, #16
 800bd5e:	0c1b      	lsrs	r3, r3, #16
 800bd60:	fb06 2303 	mla	r3, r6, r3, r2
 800bd64:	f8de 2000 	ldr.w	r2, [lr]
 800bd68:	b280      	uxth	r0, r0
 800bd6a:	b292      	uxth	r2, r2
 800bd6c:	1a12      	subs	r2, r2, r0
 800bd6e:	445a      	add	r2, fp
 800bd70:	f8de 0000 	ldr.w	r0, [lr]
 800bd74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd82:	b292      	uxth	r2, r2
 800bd84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd88:	45e1      	cmp	r9, ip
 800bd8a:	f84e 2b04 	str.w	r2, [lr], #4
 800bd8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bd92:	d2de      	bcs.n	800bd52 <quorem+0x42>
 800bd94:	9b00      	ldr	r3, [sp, #0]
 800bd96:	58eb      	ldr	r3, [r5, r3]
 800bd98:	b92b      	cbnz	r3, 800bda6 <quorem+0x96>
 800bd9a:	9b01      	ldr	r3, [sp, #4]
 800bd9c:	3b04      	subs	r3, #4
 800bd9e:	429d      	cmp	r5, r3
 800bda0:	461a      	mov	r2, r3
 800bda2:	d32f      	bcc.n	800be04 <quorem+0xf4>
 800bda4:	613c      	str	r4, [r7, #16]
 800bda6:	4638      	mov	r0, r7
 800bda8:	f001 f9c2 	bl	800d130 <__mcmp>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	db25      	blt.n	800bdfc <quorem+0xec>
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdb8:	f8d1 c000 	ldr.w	ip, [r1]
 800bdbc:	fa1f fe82 	uxth.w	lr, r2
 800bdc0:	fa1f f38c 	uxth.w	r3, ip
 800bdc4:	eba3 030e 	sub.w	r3, r3, lr
 800bdc8:	4403      	add	r3, r0
 800bdca:	0c12      	lsrs	r2, r2, #16
 800bdcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bdd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdda:	45c1      	cmp	r9, r8
 800bddc:	f841 3b04 	str.w	r3, [r1], #4
 800bde0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bde4:	d2e6      	bcs.n	800bdb4 <quorem+0xa4>
 800bde6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdee:	b922      	cbnz	r2, 800bdfa <quorem+0xea>
 800bdf0:	3b04      	subs	r3, #4
 800bdf2:	429d      	cmp	r5, r3
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	d30b      	bcc.n	800be10 <quorem+0x100>
 800bdf8:	613c      	str	r4, [r7, #16]
 800bdfa:	3601      	adds	r6, #1
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	b003      	add	sp, #12
 800be00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be04:	6812      	ldr	r2, [r2, #0]
 800be06:	3b04      	subs	r3, #4
 800be08:	2a00      	cmp	r2, #0
 800be0a:	d1cb      	bne.n	800bda4 <quorem+0x94>
 800be0c:	3c01      	subs	r4, #1
 800be0e:	e7c6      	b.n	800bd9e <quorem+0x8e>
 800be10:	6812      	ldr	r2, [r2, #0]
 800be12:	3b04      	subs	r3, #4
 800be14:	2a00      	cmp	r2, #0
 800be16:	d1ef      	bne.n	800bdf8 <quorem+0xe8>
 800be18:	3c01      	subs	r4, #1
 800be1a:	e7ea      	b.n	800bdf2 <quorem+0xe2>
 800be1c:	2000      	movs	r0, #0
 800be1e:	e7ee      	b.n	800bdfe <quorem+0xee>

0800be20 <_dtoa_r>:
 800be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be24:	69c7      	ldr	r7, [r0, #28]
 800be26:	b099      	sub	sp, #100	@ 0x64
 800be28:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be2c:	ec55 4b10 	vmov	r4, r5, d0
 800be30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800be32:	9109      	str	r1, [sp, #36]	@ 0x24
 800be34:	4683      	mov	fp, r0
 800be36:	920e      	str	r2, [sp, #56]	@ 0x38
 800be38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be3a:	b97f      	cbnz	r7, 800be5c <_dtoa_r+0x3c>
 800be3c:	2010      	movs	r0, #16
 800be3e:	f000 fdfd 	bl	800ca3c <malloc>
 800be42:	4602      	mov	r2, r0
 800be44:	f8cb 001c 	str.w	r0, [fp, #28]
 800be48:	b920      	cbnz	r0, 800be54 <_dtoa_r+0x34>
 800be4a:	4ba7      	ldr	r3, [pc, #668]	@ (800c0e8 <_dtoa_r+0x2c8>)
 800be4c:	21ef      	movs	r1, #239	@ 0xef
 800be4e:	48a7      	ldr	r0, [pc, #668]	@ (800c0ec <_dtoa_r+0x2cc>)
 800be50:	f7ff ff40 	bl	800bcd4 <__assert_func>
 800be54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be58:	6007      	str	r7, [r0, #0]
 800be5a:	60c7      	str	r7, [r0, #12]
 800be5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be60:	6819      	ldr	r1, [r3, #0]
 800be62:	b159      	cbz	r1, 800be7c <_dtoa_r+0x5c>
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	604a      	str	r2, [r1, #4]
 800be68:	2301      	movs	r3, #1
 800be6a:	4093      	lsls	r3, r2
 800be6c:	608b      	str	r3, [r1, #8]
 800be6e:	4658      	mov	r0, fp
 800be70:	f000 feda 	bl	800cc28 <_Bfree>
 800be74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	1e2b      	subs	r3, r5, #0
 800be7e:	bfb9      	ittee	lt
 800be80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be84:	9303      	strlt	r3, [sp, #12]
 800be86:	2300      	movge	r3, #0
 800be88:	6033      	strge	r3, [r6, #0]
 800be8a:	9f03      	ldr	r7, [sp, #12]
 800be8c:	4b98      	ldr	r3, [pc, #608]	@ (800c0f0 <_dtoa_r+0x2d0>)
 800be8e:	bfbc      	itt	lt
 800be90:	2201      	movlt	r2, #1
 800be92:	6032      	strlt	r2, [r6, #0]
 800be94:	43bb      	bics	r3, r7
 800be96:	d112      	bne.n	800bebe <_dtoa_r+0x9e>
 800be98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800be9e:	6013      	str	r3, [r2, #0]
 800bea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bea4:	4323      	orrs	r3, r4
 800bea6:	f000 854d 	beq.w	800c944 <_dtoa_r+0xb24>
 800beaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800beac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c104 <_dtoa_r+0x2e4>
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 854f 	beq.w	800c954 <_dtoa_r+0xb34>
 800beb6:	f10a 0303 	add.w	r3, sl, #3
 800beba:	f000 bd49 	b.w	800c950 <_dtoa_r+0xb30>
 800bebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bec2:	2200      	movs	r2, #0
 800bec4:	ec51 0b17 	vmov	r0, r1, d7
 800bec8:	2300      	movs	r3, #0
 800beca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bece:	f7f4 fe1b 	bl	8000b08 <__aeabi_dcmpeq>
 800bed2:	4680      	mov	r8, r0
 800bed4:	b158      	cbz	r0, 800beee <_dtoa_r+0xce>
 800bed6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bed8:	2301      	movs	r3, #1
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bede:	b113      	cbz	r3, 800bee6 <_dtoa_r+0xc6>
 800bee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bee2:	4b84      	ldr	r3, [pc, #528]	@ (800c0f4 <_dtoa_r+0x2d4>)
 800bee4:	6013      	str	r3, [r2, #0]
 800bee6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c108 <_dtoa_r+0x2e8>
 800beea:	f000 bd33 	b.w	800c954 <_dtoa_r+0xb34>
 800beee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bef2:	aa16      	add	r2, sp, #88	@ 0x58
 800bef4:	a917      	add	r1, sp, #92	@ 0x5c
 800bef6:	4658      	mov	r0, fp
 800bef8:	f001 fa3a 	bl	800d370 <__d2b>
 800befc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf00:	4681      	mov	r9, r0
 800bf02:	2e00      	cmp	r6, #0
 800bf04:	d077      	beq.n	800bff6 <_dtoa_r+0x1d6>
 800bf06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bf0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf20:	4619      	mov	r1, r3
 800bf22:	2200      	movs	r2, #0
 800bf24:	4b74      	ldr	r3, [pc, #464]	@ (800c0f8 <_dtoa_r+0x2d8>)
 800bf26:	f7f4 f9cf 	bl	80002c8 <__aeabi_dsub>
 800bf2a:	a369      	add	r3, pc, #420	@ (adr r3, 800c0d0 <_dtoa_r+0x2b0>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f7f4 fb82 	bl	8000638 <__aeabi_dmul>
 800bf34:	a368      	add	r3, pc, #416	@ (adr r3, 800c0d8 <_dtoa_r+0x2b8>)
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	f7f4 f9c7 	bl	80002cc <__adddf3>
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4630      	mov	r0, r6
 800bf42:	460d      	mov	r5, r1
 800bf44:	f7f4 fb0e 	bl	8000564 <__aeabi_i2d>
 800bf48:	a365      	add	r3, pc, #404	@ (adr r3, 800c0e0 <_dtoa_r+0x2c0>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 fb73 	bl	8000638 <__aeabi_dmul>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4620      	mov	r0, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	f7f4 f9b7 	bl	80002cc <__adddf3>
 800bf5e:	4604      	mov	r4, r0
 800bf60:	460d      	mov	r5, r1
 800bf62:	f7f4 fe19 	bl	8000b98 <__aeabi_d2iz>
 800bf66:	2200      	movs	r2, #0
 800bf68:	4607      	mov	r7, r0
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	4629      	mov	r1, r5
 800bf70:	f7f4 fdd4 	bl	8000b1c <__aeabi_dcmplt>
 800bf74:	b140      	cbz	r0, 800bf88 <_dtoa_r+0x168>
 800bf76:	4638      	mov	r0, r7
 800bf78:	f7f4 faf4 	bl	8000564 <__aeabi_i2d>
 800bf7c:	4622      	mov	r2, r4
 800bf7e:	462b      	mov	r3, r5
 800bf80:	f7f4 fdc2 	bl	8000b08 <__aeabi_dcmpeq>
 800bf84:	b900      	cbnz	r0, 800bf88 <_dtoa_r+0x168>
 800bf86:	3f01      	subs	r7, #1
 800bf88:	2f16      	cmp	r7, #22
 800bf8a:	d851      	bhi.n	800c030 <_dtoa_r+0x210>
 800bf8c:	4b5b      	ldr	r3, [pc, #364]	@ (800c0fc <_dtoa_r+0x2dc>)
 800bf8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf9a:	f7f4 fdbf 	bl	8000b1c <__aeabi_dcmplt>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d048      	beq.n	800c034 <_dtoa_r+0x214>
 800bfa2:	3f01      	subs	r7, #1
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9312      	str	r3, [sp, #72]	@ 0x48
 800bfa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bfaa:	1b9b      	subs	r3, r3, r6
 800bfac:	1e5a      	subs	r2, r3, #1
 800bfae:	bf44      	itt	mi
 800bfb0:	f1c3 0801 	rsbmi	r8, r3, #1
 800bfb4:	2300      	movmi	r3, #0
 800bfb6:	9208      	str	r2, [sp, #32]
 800bfb8:	bf54      	ite	pl
 800bfba:	f04f 0800 	movpl.w	r8, #0
 800bfbe:	9308      	strmi	r3, [sp, #32]
 800bfc0:	2f00      	cmp	r7, #0
 800bfc2:	db39      	blt.n	800c038 <_dtoa_r+0x218>
 800bfc4:	9b08      	ldr	r3, [sp, #32]
 800bfc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bfc8:	443b      	add	r3, r7
 800bfca:	9308      	str	r3, [sp, #32]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd2:	2b09      	cmp	r3, #9
 800bfd4:	d864      	bhi.n	800c0a0 <_dtoa_r+0x280>
 800bfd6:	2b05      	cmp	r3, #5
 800bfd8:	bfc4      	itt	gt
 800bfda:	3b04      	subgt	r3, #4
 800bfdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe0:	f1a3 0302 	sub.w	r3, r3, #2
 800bfe4:	bfcc      	ite	gt
 800bfe6:	2400      	movgt	r4, #0
 800bfe8:	2401      	movle	r4, #1
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d863      	bhi.n	800c0b6 <_dtoa_r+0x296>
 800bfee:	e8df f003 	tbb	[pc, r3]
 800bff2:	372a      	.short	0x372a
 800bff4:	5535      	.short	0x5535
 800bff6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bffa:	441e      	add	r6, r3
 800bffc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c000:	2b20      	cmp	r3, #32
 800c002:	bfc1      	itttt	gt
 800c004:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c008:	409f      	lslgt	r7, r3
 800c00a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c00e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c012:	bfd6      	itet	le
 800c014:	f1c3 0320 	rsble	r3, r3, #32
 800c018:	ea47 0003 	orrgt.w	r0, r7, r3
 800c01c:	fa04 f003 	lslle.w	r0, r4, r3
 800c020:	f7f4 fa90 	bl	8000544 <__aeabi_ui2d>
 800c024:	2201      	movs	r2, #1
 800c026:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c02a:	3e01      	subs	r6, #1
 800c02c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c02e:	e777      	b.n	800bf20 <_dtoa_r+0x100>
 800c030:	2301      	movs	r3, #1
 800c032:	e7b8      	b.n	800bfa6 <_dtoa_r+0x186>
 800c034:	9012      	str	r0, [sp, #72]	@ 0x48
 800c036:	e7b7      	b.n	800bfa8 <_dtoa_r+0x188>
 800c038:	427b      	negs	r3, r7
 800c03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c03c:	2300      	movs	r3, #0
 800c03e:	eba8 0807 	sub.w	r8, r8, r7
 800c042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c044:	e7c4      	b.n	800bfd0 <_dtoa_r+0x1b0>
 800c046:	2300      	movs	r3, #0
 800c048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c04a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	dc35      	bgt.n	800c0bc <_dtoa_r+0x29c>
 800c050:	2301      	movs	r3, #1
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	9307      	str	r3, [sp, #28]
 800c056:	461a      	mov	r2, r3
 800c058:	920e      	str	r2, [sp, #56]	@ 0x38
 800c05a:	e00b      	b.n	800c074 <_dtoa_r+0x254>
 800c05c:	2301      	movs	r3, #1
 800c05e:	e7f3      	b.n	800c048 <_dtoa_r+0x228>
 800c060:	2300      	movs	r3, #0
 800c062:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c066:	18fb      	adds	r3, r7, r3
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	3301      	adds	r3, #1
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	9307      	str	r3, [sp, #28]
 800c070:	bfb8      	it	lt
 800c072:	2301      	movlt	r3, #1
 800c074:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c078:	2100      	movs	r1, #0
 800c07a:	2204      	movs	r2, #4
 800c07c:	f102 0514 	add.w	r5, r2, #20
 800c080:	429d      	cmp	r5, r3
 800c082:	d91f      	bls.n	800c0c4 <_dtoa_r+0x2a4>
 800c084:	6041      	str	r1, [r0, #4]
 800c086:	4658      	mov	r0, fp
 800c088:	f000 fd8e 	bl	800cba8 <_Balloc>
 800c08c:	4682      	mov	sl, r0
 800c08e:	2800      	cmp	r0, #0
 800c090:	d13c      	bne.n	800c10c <_dtoa_r+0x2ec>
 800c092:	4b1b      	ldr	r3, [pc, #108]	@ (800c100 <_dtoa_r+0x2e0>)
 800c094:	4602      	mov	r2, r0
 800c096:	f240 11af 	movw	r1, #431	@ 0x1af
 800c09a:	e6d8      	b.n	800be4e <_dtoa_r+0x2e>
 800c09c:	2301      	movs	r3, #1
 800c09e:	e7e0      	b.n	800c062 <_dtoa_r+0x242>
 800c0a0:	2401      	movs	r4, #1
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	9307      	str	r3, [sp, #28]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	2312      	movs	r3, #18
 800c0b4:	e7d0      	b.n	800c058 <_dtoa_r+0x238>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0ba:	e7f5      	b.n	800c0a8 <_dtoa_r+0x288>
 800c0bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	9307      	str	r3, [sp, #28]
 800c0c2:	e7d7      	b.n	800c074 <_dtoa_r+0x254>
 800c0c4:	3101      	adds	r1, #1
 800c0c6:	0052      	lsls	r2, r2, #1
 800c0c8:	e7d8      	b.n	800c07c <_dtoa_r+0x25c>
 800c0ca:	bf00      	nop
 800c0cc:	f3af 8000 	nop.w
 800c0d0:	636f4361 	.word	0x636f4361
 800c0d4:	3fd287a7 	.word	0x3fd287a7
 800c0d8:	8b60c8b3 	.word	0x8b60c8b3
 800c0dc:	3fc68a28 	.word	0x3fc68a28
 800c0e0:	509f79fb 	.word	0x509f79fb
 800c0e4:	3fd34413 	.word	0x3fd34413
 800c0e8:	08010b3e 	.word	0x08010b3e
 800c0ec:	08010bf8 	.word	0x08010bf8
 800c0f0:	7ff00000 	.word	0x7ff00000
 800c0f4:	08010b16 	.word	0x08010b16
 800c0f8:	3ff80000 	.word	0x3ff80000
 800c0fc:	08010cf0 	.word	0x08010cf0
 800c100:	08010c50 	.word	0x08010c50
 800c104:	08010bf4 	.word	0x08010bf4
 800c108:	08010b15 	.word	0x08010b15
 800c10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c110:	6018      	str	r0, [r3, #0]
 800c112:	9b07      	ldr	r3, [sp, #28]
 800c114:	2b0e      	cmp	r3, #14
 800c116:	f200 80a4 	bhi.w	800c262 <_dtoa_r+0x442>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	f000 80a1 	beq.w	800c262 <_dtoa_r+0x442>
 800c120:	2f00      	cmp	r7, #0
 800c122:	dd33      	ble.n	800c18c <_dtoa_r+0x36c>
 800c124:	4bad      	ldr	r3, [pc, #692]	@ (800c3dc <_dtoa_r+0x5bc>)
 800c126:	f007 020f 	and.w	r2, r7, #15
 800c12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c12e:	ed93 7b00 	vldr	d7, [r3]
 800c132:	05f8      	lsls	r0, r7, #23
 800c134:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c13c:	d516      	bpl.n	800c16c <_dtoa_r+0x34c>
 800c13e:	4ba8      	ldr	r3, [pc, #672]	@ (800c3e0 <_dtoa_r+0x5c0>)
 800c140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c148:	f7f4 fba0 	bl	800088c <__aeabi_ddiv>
 800c14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c150:	f004 040f 	and.w	r4, r4, #15
 800c154:	2603      	movs	r6, #3
 800c156:	4da2      	ldr	r5, [pc, #648]	@ (800c3e0 <_dtoa_r+0x5c0>)
 800c158:	b954      	cbnz	r4, 800c170 <_dtoa_r+0x350>
 800c15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c162:	f7f4 fb93 	bl	800088c <__aeabi_ddiv>
 800c166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c16a:	e028      	b.n	800c1be <_dtoa_r+0x39e>
 800c16c:	2602      	movs	r6, #2
 800c16e:	e7f2      	b.n	800c156 <_dtoa_r+0x336>
 800c170:	07e1      	lsls	r1, r4, #31
 800c172:	d508      	bpl.n	800c186 <_dtoa_r+0x366>
 800c174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c17c:	f7f4 fa5c 	bl	8000638 <__aeabi_dmul>
 800c180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c184:	3601      	adds	r6, #1
 800c186:	1064      	asrs	r4, r4, #1
 800c188:	3508      	adds	r5, #8
 800c18a:	e7e5      	b.n	800c158 <_dtoa_r+0x338>
 800c18c:	f000 80d2 	beq.w	800c334 <_dtoa_r+0x514>
 800c190:	427c      	negs	r4, r7
 800c192:	4b92      	ldr	r3, [pc, #584]	@ (800c3dc <_dtoa_r+0x5bc>)
 800c194:	4d92      	ldr	r5, [pc, #584]	@ (800c3e0 <_dtoa_r+0x5c0>)
 800c196:	f004 020f 	and.w	r2, r4, #15
 800c19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1a6:	f7f4 fa47 	bl	8000638 <__aeabi_dmul>
 800c1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ae:	1124      	asrs	r4, r4, #4
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	2602      	movs	r6, #2
 800c1b4:	2c00      	cmp	r4, #0
 800c1b6:	f040 80b2 	bne.w	800c31e <_dtoa_r+0x4fe>
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1d3      	bne.n	800c166 <_dtoa_r+0x346>
 800c1be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c1c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 80b7 	beq.w	800c338 <_dtoa_r+0x518>
 800c1ca:	4b86      	ldr	r3, [pc, #536]	@ (800c3e4 <_dtoa_r+0x5c4>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	f7f4 fca3 	bl	8000b1c <__aeabi_dcmplt>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	f000 80ae 	beq.w	800c338 <_dtoa_r+0x518>
 800c1dc:	9b07      	ldr	r3, [sp, #28]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 80aa 	beq.w	800c338 <_dtoa_r+0x518>
 800c1e4:	9b00      	ldr	r3, [sp, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	dd37      	ble.n	800c25a <_dtoa_r+0x43a>
 800c1ea:	1e7b      	subs	r3, r7, #1
 800c1ec:	9304      	str	r3, [sp, #16]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	4b7d      	ldr	r3, [pc, #500]	@ (800c3e8 <_dtoa_r+0x5c8>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	f7f4 fa1f 	bl	8000638 <__aeabi_dmul>
 800c1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1fe:	9c00      	ldr	r4, [sp, #0]
 800c200:	3601      	adds	r6, #1
 800c202:	4630      	mov	r0, r6
 800c204:	f7f4 f9ae 	bl	8000564 <__aeabi_i2d>
 800c208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c20c:	f7f4 fa14 	bl	8000638 <__aeabi_dmul>
 800c210:	4b76      	ldr	r3, [pc, #472]	@ (800c3ec <_dtoa_r+0x5cc>)
 800c212:	2200      	movs	r2, #0
 800c214:	f7f4 f85a 	bl	80002cc <__adddf3>
 800c218:	4605      	mov	r5, r0
 800c21a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c21e:	2c00      	cmp	r4, #0
 800c220:	f040 808d 	bne.w	800c33e <_dtoa_r+0x51e>
 800c224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c228:	4b71      	ldr	r3, [pc, #452]	@ (800c3f0 <_dtoa_r+0x5d0>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	f7f4 f84c 	bl	80002c8 <__aeabi_dsub>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c238:	462a      	mov	r2, r5
 800c23a:	4633      	mov	r3, r6
 800c23c:	f7f4 fc8c 	bl	8000b58 <__aeabi_dcmpgt>
 800c240:	2800      	cmp	r0, #0
 800c242:	f040 828b 	bne.w	800c75c <_dtoa_r+0x93c>
 800c246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c24a:	462a      	mov	r2, r5
 800c24c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c250:	f7f4 fc64 	bl	8000b1c <__aeabi_dcmplt>
 800c254:	2800      	cmp	r0, #0
 800c256:	f040 8128 	bne.w	800c4aa <_dtoa_r+0x68a>
 800c25a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c25e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c264:	2b00      	cmp	r3, #0
 800c266:	f2c0 815a 	blt.w	800c51e <_dtoa_r+0x6fe>
 800c26a:	2f0e      	cmp	r7, #14
 800c26c:	f300 8157 	bgt.w	800c51e <_dtoa_r+0x6fe>
 800c270:	4b5a      	ldr	r3, [pc, #360]	@ (800c3dc <_dtoa_r+0x5bc>)
 800c272:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c276:	ed93 7b00 	vldr	d7, [r3]
 800c27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	ed8d 7b00 	vstr	d7, [sp]
 800c282:	da03      	bge.n	800c28c <_dtoa_r+0x46c>
 800c284:	9b07      	ldr	r3, [sp, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f340 8101 	ble.w	800c48e <_dtoa_r+0x66e>
 800c28c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c290:	4656      	mov	r6, sl
 800c292:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c296:	4620      	mov	r0, r4
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f4 faf7 	bl	800088c <__aeabi_ddiv>
 800c29e:	f7f4 fc7b 	bl	8000b98 <__aeabi_d2iz>
 800c2a2:	4680      	mov	r8, r0
 800c2a4:	f7f4 f95e 	bl	8000564 <__aeabi_i2d>
 800c2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2ac:	f7f4 f9c4 	bl	8000638 <__aeabi_dmul>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c2bc:	f7f4 f804 	bl	80002c8 <__aeabi_dsub>
 800c2c0:	f806 4b01 	strb.w	r4, [r6], #1
 800c2c4:	9d07      	ldr	r5, [sp, #28]
 800c2c6:	eba6 040a 	sub.w	r4, r6, sl
 800c2ca:	42a5      	cmp	r5, r4
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	f040 8117 	bne.w	800c502 <_dtoa_r+0x6e2>
 800c2d4:	f7f3 fffa 	bl	80002cc <__adddf3>
 800c2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2dc:	4604      	mov	r4, r0
 800c2de:	460d      	mov	r5, r1
 800c2e0:	f7f4 fc3a 	bl	8000b58 <__aeabi_dcmpgt>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f040 80f9 	bne.w	800c4dc <_dtoa_r+0x6bc>
 800c2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f4 fc09 	bl	8000b08 <__aeabi_dcmpeq>
 800c2f6:	b118      	cbz	r0, 800c300 <_dtoa_r+0x4e0>
 800c2f8:	f018 0f01 	tst.w	r8, #1
 800c2fc:	f040 80ee 	bne.w	800c4dc <_dtoa_r+0x6bc>
 800c300:	4649      	mov	r1, r9
 800c302:	4658      	mov	r0, fp
 800c304:	f000 fc90 	bl	800cc28 <_Bfree>
 800c308:	2300      	movs	r3, #0
 800c30a:	7033      	strb	r3, [r6, #0]
 800c30c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c30e:	3701      	adds	r7, #1
 800c310:	601f      	str	r7, [r3, #0]
 800c312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c314:	2b00      	cmp	r3, #0
 800c316:	f000 831d 	beq.w	800c954 <_dtoa_r+0xb34>
 800c31a:	601e      	str	r6, [r3, #0]
 800c31c:	e31a      	b.n	800c954 <_dtoa_r+0xb34>
 800c31e:	07e2      	lsls	r2, r4, #31
 800c320:	d505      	bpl.n	800c32e <_dtoa_r+0x50e>
 800c322:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c326:	f7f4 f987 	bl	8000638 <__aeabi_dmul>
 800c32a:	3601      	adds	r6, #1
 800c32c:	2301      	movs	r3, #1
 800c32e:	1064      	asrs	r4, r4, #1
 800c330:	3508      	adds	r5, #8
 800c332:	e73f      	b.n	800c1b4 <_dtoa_r+0x394>
 800c334:	2602      	movs	r6, #2
 800c336:	e742      	b.n	800c1be <_dtoa_r+0x39e>
 800c338:	9c07      	ldr	r4, [sp, #28]
 800c33a:	9704      	str	r7, [sp, #16]
 800c33c:	e761      	b.n	800c202 <_dtoa_r+0x3e2>
 800c33e:	4b27      	ldr	r3, [pc, #156]	@ (800c3dc <_dtoa_r+0x5bc>)
 800c340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c34a:	4454      	add	r4, sl
 800c34c:	2900      	cmp	r1, #0
 800c34e:	d053      	beq.n	800c3f8 <_dtoa_r+0x5d8>
 800c350:	4928      	ldr	r1, [pc, #160]	@ (800c3f4 <_dtoa_r+0x5d4>)
 800c352:	2000      	movs	r0, #0
 800c354:	f7f4 fa9a 	bl	800088c <__aeabi_ddiv>
 800c358:	4633      	mov	r3, r6
 800c35a:	462a      	mov	r2, r5
 800c35c:	f7f3 ffb4 	bl	80002c8 <__aeabi_dsub>
 800c360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c364:	4656      	mov	r6, sl
 800c366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c36a:	f7f4 fc15 	bl	8000b98 <__aeabi_d2iz>
 800c36e:	4605      	mov	r5, r0
 800c370:	f7f4 f8f8 	bl	8000564 <__aeabi_i2d>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c37c:	f7f3 ffa4 	bl	80002c8 <__aeabi_dsub>
 800c380:	3530      	adds	r5, #48	@ 0x30
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c38a:	f806 5b01 	strb.w	r5, [r6], #1
 800c38e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c392:	f7f4 fbc3 	bl	8000b1c <__aeabi_dcmplt>
 800c396:	2800      	cmp	r0, #0
 800c398:	d171      	bne.n	800c47e <_dtoa_r+0x65e>
 800c39a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c39e:	4911      	ldr	r1, [pc, #68]	@ (800c3e4 <_dtoa_r+0x5c4>)
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	f7f3 ff91 	bl	80002c8 <__aeabi_dsub>
 800c3a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c3aa:	f7f4 fbb7 	bl	8000b1c <__aeabi_dcmplt>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	f040 8095 	bne.w	800c4de <_dtoa_r+0x6be>
 800c3b4:	42a6      	cmp	r6, r4
 800c3b6:	f43f af50 	beq.w	800c25a <_dtoa_r+0x43a>
 800c3ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c3be:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e8 <_dtoa_r+0x5c8>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f7f4 f939 	bl	8000638 <__aeabi_dmul>
 800c3c6:	4b08      	ldr	r3, [pc, #32]	@ (800c3e8 <_dtoa_r+0x5c8>)
 800c3c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d2:	f7f4 f931 	bl	8000638 <__aeabi_dmul>
 800c3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3da:	e7c4      	b.n	800c366 <_dtoa_r+0x546>
 800c3dc:	08010cf0 	.word	0x08010cf0
 800c3e0:	08010cc8 	.word	0x08010cc8
 800c3e4:	3ff00000 	.word	0x3ff00000
 800c3e8:	40240000 	.word	0x40240000
 800c3ec:	401c0000 	.word	0x401c0000
 800c3f0:	40140000 	.word	0x40140000
 800c3f4:	3fe00000 	.word	0x3fe00000
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	f7f4 f91c 	bl	8000638 <__aeabi_dmul>
 800c400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c404:	9415      	str	r4, [sp, #84]	@ 0x54
 800c406:	4656      	mov	r6, sl
 800c408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c40c:	f7f4 fbc4 	bl	8000b98 <__aeabi_d2iz>
 800c410:	4605      	mov	r5, r0
 800c412:	f7f4 f8a7 	bl	8000564 <__aeabi_i2d>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c41e:	f7f3 ff53 	bl	80002c8 <__aeabi_dsub>
 800c422:	3530      	adds	r5, #48	@ 0x30
 800c424:	f806 5b01 	strb.w	r5, [r6], #1
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	42a6      	cmp	r6, r4
 800c42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c432:	f04f 0200 	mov.w	r2, #0
 800c436:	d124      	bne.n	800c482 <_dtoa_r+0x662>
 800c438:	4bac      	ldr	r3, [pc, #688]	@ (800c6ec <_dtoa_r+0x8cc>)
 800c43a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c43e:	f7f3 ff45 	bl	80002cc <__adddf3>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c44a:	f7f4 fb85 	bl	8000b58 <__aeabi_dcmpgt>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d145      	bne.n	800c4de <_dtoa_r+0x6be>
 800c452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c456:	49a5      	ldr	r1, [pc, #660]	@ (800c6ec <_dtoa_r+0x8cc>)
 800c458:	2000      	movs	r0, #0
 800c45a:	f7f3 ff35 	bl	80002c8 <__aeabi_dsub>
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c466:	f7f4 fb59 	bl	8000b1c <__aeabi_dcmplt>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	f43f aef5 	beq.w	800c25a <_dtoa_r+0x43a>
 800c470:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c472:	1e73      	subs	r3, r6, #1
 800c474:	9315      	str	r3, [sp, #84]	@ 0x54
 800c476:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c47a:	2b30      	cmp	r3, #48	@ 0x30
 800c47c:	d0f8      	beq.n	800c470 <_dtoa_r+0x650>
 800c47e:	9f04      	ldr	r7, [sp, #16]
 800c480:	e73e      	b.n	800c300 <_dtoa_r+0x4e0>
 800c482:	4b9b      	ldr	r3, [pc, #620]	@ (800c6f0 <_dtoa_r+0x8d0>)
 800c484:	f7f4 f8d8 	bl	8000638 <__aeabi_dmul>
 800c488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c48c:	e7bc      	b.n	800c408 <_dtoa_r+0x5e8>
 800c48e:	d10c      	bne.n	800c4aa <_dtoa_r+0x68a>
 800c490:	4b98      	ldr	r3, [pc, #608]	@ (800c6f4 <_dtoa_r+0x8d4>)
 800c492:	2200      	movs	r2, #0
 800c494:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c498:	f7f4 f8ce 	bl	8000638 <__aeabi_dmul>
 800c49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4a0:	f7f4 fb50 	bl	8000b44 <__aeabi_dcmpge>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	f000 8157 	beq.w	800c758 <_dtoa_r+0x938>
 800c4aa:	2400      	movs	r4, #0
 800c4ac:	4625      	mov	r5, r4
 800c4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4b0:	43db      	mvns	r3, r3
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	4656      	mov	r6, sl
 800c4b6:	2700      	movs	r7, #0
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	4658      	mov	r0, fp
 800c4bc:	f000 fbb4 	bl	800cc28 <_Bfree>
 800c4c0:	2d00      	cmp	r5, #0
 800c4c2:	d0dc      	beq.n	800c47e <_dtoa_r+0x65e>
 800c4c4:	b12f      	cbz	r7, 800c4d2 <_dtoa_r+0x6b2>
 800c4c6:	42af      	cmp	r7, r5
 800c4c8:	d003      	beq.n	800c4d2 <_dtoa_r+0x6b2>
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	4658      	mov	r0, fp
 800c4ce:	f000 fbab 	bl	800cc28 <_Bfree>
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4658      	mov	r0, fp
 800c4d6:	f000 fba7 	bl	800cc28 <_Bfree>
 800c4da:	e7d0      	b.n	800c47e <_dtoa_r+0x65e>
 800c4dc:	9704      	str	r7, [sp, #16]
 800c4de:	4633      	mov	r3, r6
 800c4e0:	461e      	mov	r6, r3
 800c4e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4e6:	2a39      	cmp	r2, #57	@ 0x39
 800c4e8:	d107      	bne.n	800c4fa <_dtoa_r+0x6da>
 800c4ea:	459a      	cmp	sl, r3
 800c4ec:	d1f8      	bne.n	800c4e0 <_dtoa_r+0x6c0>
 800c4ee:	9a04      	ldr	r2, [sp, #16]
 800c4f0:	3201      	adds	r2, #1
 800c4f2:	9204      	str	r2, [sp, #16]
 800c4f4:	2230      	movs	r2, #48	@ 0x30
 800c4f6:	f88a 2000 	strb.w	r2, [sl]
 800c4fa:	781a      	ldrb	r2, [r3, #0]
 800c4fc:	3201      	adds	r2, #1
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	e7bd      	b.n	800c47e <_dtoa_r+0x65e>
 800c502:	4b7b      	ldr	r3, [pc, #492]	@ (800c6f0 <_dtoa_r+0x8d0>)
 800c504:	2200      	movs	r2, #0
 800c506:	f7f4 f897 	bl	8000638 <__aeabi_dmul>
 800c50a:	2200      	movs	r2, #0
 800c50c:	2300      	movs	r3, #0
 800c50e:	4604      	mov	r4, r0
 800c510:	460d      	mov	r5, r1
 800c512:	f7f4 faf9 	bl	8000b08 <__aeabi_dcmpeq>
 800c516:	2800      	cmp	r0, #0
 800c518:	f43f aebb 	beq.w	800c292 <_dtoa_r+0x472>
 800c51c:	e6f0      	b.n	800c300 <_dtoa_r+0x4e0>
 800c51e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c520:	2a00      	cmp	r2, #0
 800c522:	f000 80db 	beq.w	800c6dc <_dtoa_r+0x8bc>
 800c526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c528:	2a01      	cmp	r2, #1
 800c52a:	f300 80bf 	bgt.w	800c6ac <_dtoa_r+0x88c>
 800c52e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c530:	2a00      	cmp	r2, #0
 800c532:	f000 80b7 	beq.w	800c6a4 <_dtoa_r+0x884>
 800c536:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c53a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c53c:	4646      	mov	r6, r8
 800c53e:	9a08      	ldr	r2, [sp, #32]
 800c540:	2101      	movs	r1, #1
 800c542:	441a      	add	r2, r3
 800c544:	4658      	mov	r0, fp
 800c546:	4498      	add	r8, r3
 800c548:	9208      	str	r2, [sp, #32]
 800c54a:	f000 fc6b 	bl	800ce24 <__i2b>
 800c54e:	4605      	mov	r5, r0
 800c550:	b15e      	cbz	r6, 800c56a <_dtoa_r+0x74a>
 800c552:	9b08      	ldr	r3, [sp, #32]
 800c554:	2b00      	cmp	r3, #0
 800c556:	dd08      	ble.n	800c56a <_dtoa_r+0x74a>
 800c558:	42b3      	cmp	r3, r6
 800c55a:	9a08      	ldr	r2, [sp, #32]
 800c55c:	bfa8      	it	ge
 800c55e:	4633      	movge	r3, r6
 800c560:	eba8 0803 	sub.w	r8, r8, r3
 800c564:	1af6      	subs	r6, r6, r3
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	9308      	str	r3, [sp, #32]
 800c56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c56c:	b1f3      	cbz	r3, 800c5ac <_dtoa_r+0x78c>
 800c56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 80b7 	beq.w	800c6e4 <_dtoa_r+0x8c4>
 800c576:	b18c      	cbz	r4, 800c59c <_dtoa_r+0x77c>
 800c578:	4629      	mov	r1, r5
 800c57a:	4622      	mov	r2, r4
 800c57c:	4658      	mov	r0, fp
 800c57e:	f000 fd11 	bl	800cfa4 <__pow5mult>
 800c582:	464a      	mov	r2, r9
 800c584:	4601      	mov	r1, r0
 800c586:	4605      	mov	r5, r0
 800c588:	4658      	mov	r0, fp
 800c58a:	f000 fc61 	bl	800ce50 <__multiply>
 800c58e:	4649      	mov	r1, r9
 800c590:	9004      	str	r0, [sp, #16]
 800c592:	4658      	mov	r0, fp
 800c594:	f000 fb48 	bl	800cc28 <_Bfree>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	4699      	mov	r9, r3
 800c59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c59e:	1b1a      	subs	r2, r3, r4
 800c5a0:	d004      	beq.n	800c5ac <_dtoa_r+0x78c>
 800c5a2:	4649      	mov	r1, r9
 800c5a4:	4658      	mov	r0, fp
 800c5a6:	f000 fcfd 	bl	800cfa4 <__pow5mult>
 800c5aa:	4681      	mov	r9, r0
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	4658      	mov	r0, fp
 800c5b0:	f000 fc38 	bl	800ce24 <__i2b>
 800c5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 81cf 	beq.w	800c95c <_dtoa_r+0xb3c>
 800c5be:	461a      	mov	r2, r3
 800c5c0:	4601      	mov	r1, r0
 800c5c2:	4658      	mov	r0, fp
 800c5c4:	f000 fcee 	bl	800cfa4 <__pow5mult>
 800c5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	f300 8095 	bgt.w	800c6fc <_dtoa_r+0x8dc>
 800c5d2:	9b02      	ldr	r3, [sp, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f040 8087 	bne.w	800c6e8 <_dtoa_r+0x8c8>
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f040 8089 	bne.w	800c6f8 <_dtoa_r+0x8d8>
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5ec:	0d1b      	lsrs	r3, r3, #20
 800c5ee:	051b      	lsls	r3, r3, #20
 800c5f0:	b12b      	cbz	r3, 800c5fe <_dtoa_r+0x7de>
 800c5f2:	9b08      	ldr	r3, [sp, #32]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	9308      	str	r3, [sp, #32]
 800c5f8:	f108 0801 	add.w	r8, r8, #1
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 81b0 	beq.w	800c968 <_dtoa_r+0xb48>
 800c608:	6923      	ldr	r3, [r4, #16]
 800c60a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c60e:	6918      	ldr	r0, [r3, #16]
 800c610:	f000 fbbc 	bl	800cd8c <__hi0bits>
 800c614:	f1c0 0020 	rsb	r0, r0, #32
 800c618:	9b08      	ldr	r3, [sp, #32]
 800c61a:	4418      	add	r0, r3
 800c61c:	f010 001f 	ands.w	r0, r0, #31
 800c620:	d077      	beq.n	800c712 <_dtoa_r+0x8f2>
 800c622:	f1c0 0320 	rsb	r3, r0, #32
 800c626:	2b04      	cmp	r3, #4
 800c628:	dd6b      	ble.n	800c702 <_dtoa_r+0x8e2>
 800c62a:	9b08      	ldr	r3, [sp, #32]
 800c62c:	f1c0 001c 	rsb	r0, r0, #28
 800c630:	4403      	add	r3, r0
 800c632:	4480      	add	r8, r0
 800c634:	4406      	add	r6, r0
 800c636:	9308      	str	r3, [sp, #32]
 800c638:	f1b8 0f00 	cmp.w	r8, #0
 800c63c:	dd05      	ble.n	800c64a <_dtoa_r+0x82a>
 800c63e:	4649      	mov	r1, r9
 800c640:	4642      	mov	r2, r8
 800c642:	4658      	mov	r0, fp
 800c644:	f000 fd08 	bl	800d058 <__lshift>
 800c648:	4681      	mov	r9, r0
 800c64a:	9b08      	ldr	r3, [sp, #32]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	dd05      	ble.n	800c65c <_dtoa_r+0x83c>
 800c650:	4621      	mov	r1, r4
 800c652:	461a      	mov	r2, r3
 800c654:	4658      	mov	r0, fp
 800c656:	f000 fcff 	bl	800d058 <__lshift>
 800c65a:	4604      	mov	r4, r0
 800c65c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d059      	beq.n	800c716 <_dtoa_r+0x8f6>
 800c662:	4621      	mov	r1, r4
 800c664:	4648      	mov	r0, r9
 800c666:	f000 fd63 	bl	800d130 <__mcmp>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	da53      	bge.n	800c716 <_dtoa_r+0x8f6>
 800c66e:	1e7b      	subs	r3, r7, #1
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	4649      	mov	r1, r9
 800c674:	2300      	movs	r3, #0
 800c676:	220a      	movs	r2, #10
 800c678:	4658      	mov	r0, fp
 800c67a:	f000 faf7 	bl	800cc6c <__multadd>
 800c67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c680:	4681      	mov	r9, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	f000 8172 	beq.w	800c96c <_dtoa_r+0xb4c>
 800c688:	2300      	movs	r3, #0
 800c68a:	4629      	mov	r1, r5
 800c68c:	220a      	movs	r2, #10
 800c68e:	4658      	mov	r0, fp
 800c690:	f000 faec 	bl	800cc6c <__multadd>
 800c694:	9b00      	ldr	r3, [sp, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	4605      	mov	r5, r0
 800c69a:	dc67      	bgt.n	800c76c <_dtoa_r+0x94c>
 800c69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	dc41      	bgt.n	800c726 <_dtoa_r+0x906>
 800c6a2:	e063      	b.n	800c76c <_dtoa_r+0x94c>
 800c6a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c6a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c6aa:	e746      	b.n	800c53a <_dtoa_r+0x71a>
 800c6ac:	9b07      	ldr	r3, [sp, #28]
 800c6ae:	1e5c      	subs	r4, r3, #1
 800c6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6b2:	42a3      	cmp	r3, r4
 800c6b4:	bfbf      	itttt	lt
 800c6b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c6b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c6ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c6bc:	1ae3      	sublt	r3, r4, r3
 800c6be:	bfb4      	ite	lt
 800c6c0:	18d2      	addlt	r2, r2, r3
 800c6c2:	1b1c      	subge	r4, r3, r4
 800c6c4:	9b07      	ldr	r3, [sp, #28]
 800c6c6:	bfbc      	itt	lt
 800c6c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c6ca:	2400      	movlt	r4, #0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	bfb5      	itete	lt
 800c6d0:	eba8 0603 	sublt.w	r6, r8, r3
 800c6d4:	9b07      	ldrge	r3, [sp, #28]
 800c6d6:	2300      	movlt	r3, #0
 800c6d8:	4646      	movge	r6, r8
 800c6da:	e730      	b.n	800c53e <_dtoa_r+0x71e>
 800c6dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c6de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c6e0:	4646      	mov	r6, r8
 800c6e2:	e735      	b.n	800c550 <_dtoa_r+0x730>
 800c6e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6e6:	e75c      	b.n	800c5a2 <_dtoa_r+0x782>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	e788      	b.n	800c5fe <_dtoa_r+0x7de>
 800c6ec:	3fe00000 	.word	0x3fe00000
 800c6f0:	40240000 	.word	0x40240000
 800c6f4:	40140000 	.word	0x40140000
 800c6f8:	9b02      	ldr	r3, [sp, #8]
 800c6fa:	e780      	b.n	800c5fe <_dtoa_r+0x7de>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c700:	e782      	b.n	800c608 <_dtoa_r+0x7e8>
 800c702:	d099      	beq.n	800c638 <_dtoa_r+0x818>
 800c704:	9a08      	ldr	r2, [sp, #32]
 800c706:	331c      	adds	r3, #28
 800c708:	441a      	add	r2, r3
 800c70a:	4498      	add	r8, r3
 800c70c:	441e      	add	r6, r3
 800c70e:	9208      	str	r2, [sp, #32]
 800c710:	e792      	b.n	800c638 <_dtoa_r+0x818>
 800c712:	4603      	mov	r3, r0
 800c714:	e7f6      	b.n	800c704 <_dtoa_r+0x8e4>
 800c716:	9b07      	ldr	r3, [sp, #28]
 800c718:	9704      	str	r7, [sp, #16]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	dc20      	bgt.n	800c760 <_dtoa_r+0x940>
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c722:	2b02      	cmp	r3, #2
 800c724:	dd1e      	ble.n	800c764 <_dtoa_r+0x944>
 800c726:	9b00      	ldr	r3, [sp, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f47f aec0 	bne.w	800c4ae <_dtoa_r+0x68e>
 800c72e:	4621      	mov	r1, r4
 800c730:	2205      	movs	r2, #5
 800c732:	4658      	mov	r0, fp
 800c734:	f000 fa9a 	bl	800cc6c <__multadd>
 800c738:	4601      	mov	r1, r0
 800c73a:	4604      	mov	r4, r0
 800c73c:	4648      	mov	r0, r9
 800c73e:	f000 fcf7 	bl	800d130 <__mcmp>
 800c742:	2800      	cmp	r0, #0
 800c744:	f77f aeb3 	ble.w	800c4ae <_dtoa_r+0x68e>
 800c748:	4656      	mov	r6, sl
 800c74a:	2331      	movs	r3, #49	@ 0x31
 800c74c:	f806 3b01 	strb.w	r3, [r6], #1
 800c750:	9b04      	ldr	r3, [sp, #16]
 800c752:	3301      	adds	r3, #1
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	e6ae      	b.n	800c4b6 <_dtoa_r+0x696>
 800c758:	9c07      	ldr	r4, [sp, #28]
 800c75a:	9704      	str	r7, [sp, #16]
 800c75c:	4625      	mov	r5, r4
 800c75e:	e7f3      	b.n	800c748 <_dtoa_r+0x928>
 800c760:	9b07      	ldr	r3, [sp, #28]
 800c762:	9300      	str	r3, [sp, #0]
 800c764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 8104 	beq.w	800c974 <_dtoa_r+0xb54>
 800c76c:	2e00      	cmp	r6, #0
 800c76e:	dd05      	ble.n	800c77c <_dtoa_r+0x95c>
 800c770:	4629      	mov	r1, r5
 800c772:	4632      	mov	r2, r6
 800c774:	4658      	mov	r0, fp
 800c776:	f000 fc6f 	bl	800d058 <__lshift>
 800c77a:	4605      	mov	r5, r0
 800c77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d05a      	beq.n	800c838 <_dtoa_r+0xa18>
 800c782:	6869      	ldr	r1, [r5, #4]
 800c784:	4658      	mov	r0, fp
 800c786:	f000 fa0f 	bl	800cba8 <_Balloc>
 800c78a:	4606      	mov	r6, r0
 800c78c:	b928      	cbnz	r0, 800c79a <_dtoa_r+0x97a>
 800c78e:	4b84      	ldr	r3, [pc, #528]	@ (800c9a0 <_dtoa_r+0xb80>)
 800c790:	4602      	mov	r2, r0
 800c792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c796:	f7ff bb5a 	b.w	800be4e <_dtoa_r+0x2e>
 800c79a:	692a      	ldr	r2, [r5, #16]
 800c79c:	3202      	adds	r2, #2
 800c79e:	0092      	lsls	r2, r2, #2
 800c7a0:	f105 010c 	add.w	r1, r5, #12
 800c7a4:	300c      	adds	r0, #12
 800c7a6:	f002 f965 	bl	800ea74 <memcpy>
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	4658      	mov	r0, fp
 800c7b0:	f000 fc52 	bl	800d058 <__lshift>
 800c7b4:	f10a 0301 	add.w	r3, sl, #1
 800c7b8:	9307      	str	r3, [sp, #28]
 800c7ba:	9b00      	ldr	r3, [sp, #0]
 800c7bc:	4453      	add	r3, sl
 800c7be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7c0:	9b02      	ldr	r3, [sp, #8]
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	462f      	mov	r7, r5
 800c7c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7ca:	4605      	mov	r5, r0
 800c7cc:	9b07      	ldr	r3, [sp, #28]
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	4648      	mov	r0, r9
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	f7ff fa9b 	bl	800bd10 <quorem>
 800c7da:	4639      	mov	r1, r7
 800c7dc:	9002      	str	r0, [sp, #8]
 800c7de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c7e2:	4648      	mov	r0, r9
 800c7e4:	f000 fca4 	bl	800d130 <__mcmp>
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	9008      	str	r0, [sp, #32]
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	4658      	mov	r0, fp
 800c7f0:	f000 fcba 	bl	800d168 <__mdiff>
 800c7f4:	68c2      	ldr	r2, [r0, #12]
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	bb02      	cbnz	r2, 800c83c <_dtoa_r+0xa1c>
 800c7fa:	4601      	mov	r1, r0
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	f000 fc97 	bl	800d130 <__mcmp>
 800c802:	4602      	mov	r2, r0
 800c804:	4631      	mov	r1, r6
 800c806:	4658      	mov	r0, fp
 800c808:	920e      	str	r2, [sp, #56]	@ 0x38
 800c80a:	f000 fa0d 	bl	800cc28 <_Bfree>
 800c80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c812:	9e07      	ldr	r6, [sp, #28]
 800c814:	ea43 0102 	orr.w	r1, r3, r2
 800c818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c81a:	4319      	orrs	r1, r3
 800c81c:	d110      	bne.n	800c840 <_dtoa_r+0xa20>
 800c81e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c822:	d029      	beq.n	800c878 <_dtoa_r+0xa58>
 800c824:	9b08      	ldr	r3, [sp, #32]
 800c826:	2b00      	cmp	r3, #0
 800c828:	dd02      	ble.n	800c830 <_dtoa_r+0xa10>
 800c82a:	9b02      	ldr	r3, [sp, #8]
 800c82c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c830:	9b00      	ldr	r3, [sp, #0]
 800c832:	f883 8000 	strb.w	r8, [r3]
 800c836:	e63f      	b.n	800c4b8 <_dtoa_r+0x698>
 800c838:	4628      	mov	r0, r5
 800c83a:	e7bb      	b.n	800c7b4 <_dtoa_r+0x994>
 800c83c:	2201      	movs	r2, #1
 800c83e:	e7e1      	b.n	800c804 <_dtoa_r+0x9e4>
 800c840:	9b08      	ldr	r3, [sp, #32]
 800c842:	2b00      	cmp	r3, #0
 800c844:	db04      	blt.n	800c850 <_dtoa_r+0xa30>
 800c846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c848:	430b      	orrs	r3, r1
 800c84a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c84c:	430b      	orrs	r3, r1
 800c84e:	d120      	bne.n	800c892 <_dtoa_r+0xa72>
 800c850:	2a00      	cmp	r2, #0
 800c852:	dded      	ble.n	800c830 <_dtoa_r+0xa10>
 800c854:	4649      	mov	r1, r9
 800c856:	2201      	movs	r2, #1
 800c858:	4658      	mov	r0, fp
 800c85a:	f000 fbfd 	bl	800d058 <__lshift>
 800c85e:	4621      	mov	r1, r4
 800c860:	4681      	mov	r9, r0
 800c862:	f000 fc65 	bl	800d130 <__mcmp>
 800c866:	2800      	cmp	r0, #0
 800c868:	dc03      	bgt.n	800c872 <_dtoa_r+0xa52>
 800c86a:	d1e1      	bne.n	800c830 <_dtoa_r+0xa10>
 800c86c:	f018 0f01 	tst.w	r8, #1
 800c870:	d0de      	beq.n	800c830 <_dtoa_r+0xa10>
 800c872:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c876:	d1d8      	bne.n	800c82a <_dtoa_r+0xa0a>
 800c878:	9a00      	ldr	r2, [sp, #0]
 800c87a:	2339      	movs	r3, #57	@ 0x39
 800c87c:	7013      	strb	r3, [r2, #0]
 800c87e:	4633      	mov	r3, r6
 800c880:	461e      	mov	r6, r3
 800c882:	3b01      	subs	r3, #1
 800c884:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c888:	2a39      	cmp	r2, #57	@ 0x39
 800c88a:	d052      	beq.n	800c932 <_dtoa_r+0xb12>
 800c88c:	3201      	adds	r2, #1
 800c88e:	701a      	strb	r2, [r3, #0]
 800c890:	e612      	b.n	800c4b8 <_dtoa_r+0x698>
 800c892:	2a00      	cmp	r2, #0
 800c894:	dd07      	ble.n	800c8a6 <_dtoa_r+0xa86>
 800c896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c89a:	d0ed      	beq.n	800c878 <_dtoa_r+0xa58>
 800c89c:	9a00      	ldr	r2, [sp, #0]
 800c89e:	f108 0301 	add.w	r3, r8, #1
 800c8a2:	7013      	strb	r3, [r2, #0]
 800c8a4:	e608      	b.n	800c4b8 <_dtoa_r+0x698>
 800c8a6:	9b07      	ldr	r3, [sp, #28]
 800c8a8:	9a07      	ldr	r2, [sp, #28]
 800c8aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d028      	beq.n	800c906 <_dtoa_r+0xae6>
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	220a      	movs	r2, #10
 800c8ba:	4658      	mov	r0, fp
 800c8bc:	f000 f9d6 	bl	800cc6c <__multadd>
 800c8c0:	42af      	cmp	r7, r5
 800c8c2:	4681      	mov	r9, r0
 800c8c4:	f04f 0300 	mov.w	r3, #0
 800c8c8:	f04f 020a 	mov.w	r2, #10
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	4658      	mov	r0, fp
 800c8d0:	d107      	bne.n	800c8e2 <_dtoa_r+0xac2>
 800c8d2:	f000 f9cb 	bl	800cc6c <__multadd>
 800c8d6:	4607      	mov	r7, r0
 800c8d8:	4605      	mov	r5, r0
 800c8da:	9b07      	ldr	r3, [sp, #28]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	9307      	str	r3, [sp, #28]
 800c8e0:	e774      	b.n	800c7cc <_dtoa_r+0x9ac>
 800c8e2:	f000 f9c3 	bl	800cc6c <__multadd>
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	4607      	mov	r7, r0
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	220a      	movs	r2, #10
 800c8ee:	4658      	mov	r0, fp
 800c8f0:	f000 f9bc 	bl	800cc6c <__multadd>
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	e7f0      	b.n	800c8da <_dtoa_r+0xaba>
 800c8f8:	9b00      	ldr	r3, [sp, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	bfcc      	ite	gt
 800c8fe:	461e      	movgt	r6, r3
 800c900:	2601      	movle	r6, #1
 800c902:	4456      	add	r6, sl
 800c904:	2700      	movs	r7, #0
 800c906:	4649      	mov	r1, r9
 800c908:	2201      	movs	r2, #1
 800c90a:	4658      	mov	r0, fp
 800c90c:	f000 fba4 	bl	800d058 <__lshift>
 800c910:	4621      	mov	r1, r4
 800c912:	4681      	mov	r9, r0
 800c914:	f000 fc0c 	bl	800d130 <__mcmp>
 800c918:	2800      	cmp	r0, #0
 800c91a:	dcb0      	bgt.n	800c87e <_dtoa_r+0xa5e>
 800c91c:	d102      	bne.n	800c924 <_dtoa_r+0xb04>
 800c91e:	f018 0f01 	tst.w	r8, #1
 800c922:	d1ac      	bne.n	800c87e <_dtoa_r+0xa5e>
 800c924:	4633      	mov	r3, r6
 800c926:	461e      	mov	r6, r3
 800c928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c92c:	2a30      	cmp	r2, #48	@ 0x30
 800c92e:	d0fa      	beq.n	800c926 <_dtoa_r+0xb06>
 800c930:	e5c2      	b.n	800c4b8 <_dtoa_r+0x698>
 800c932:	459a      	cmp	sl, r3
 800c934:	d1a4      	bne.n	800c880 <_dtoa_r+0xa60>
 800c936:	9b04      	ldr	r3, [sp, #16]
 800c938:	3301      	adds	r3, #1
 800c93a:	9304      	str	r3, [sp, #16]
 800c93c:	2331      	movs	r3, #49	@ 0x31
 800c93e:	f88a 3000 	strb.w	r3, [sl]
 800c942:	e5b9      	b.n	800c4b8 <_dtoa_r+0x698>
 800c944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c946:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c9a4 <_dtoa_r+0xb84>
 800c94a:	b11b      	cbz	r3, 800c954 <_dtoa_r+0xb34>
 800c94c:	f10a 0308 	add.w	r3, sl, #8
 800c950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	4650      	mov	r0, sl
 800c956:	b019      	add	sp, #100	@ 0x64
 800c958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c95e:	2b01      	cmp	r3, #1
 800c960:	f77f ae37 	ble.w	800c5d2 <_dtoa_r+0x7b2>
 800c964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c966:	930a      	str	r3, [sp, #40]	@ 0x28
 800c968:	2001      	movs	r0, #1
 800c96a:	e655      	b.n	800c618 <_dtoa_r+0x7f8>
 800c96c:	9b00      	ldr	r3, [sp, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f77f aed6 	ble.w	800c720 <_dtoa_r+0x900>
 800c974:	4656      	mov	r6, sl
 800c976:	4621      	mov	r1, r4
 800c978:	4648      	mov	r0, r9
 800c97a:	f7ff f9c9 	bl	800bd10 <quorem>
 800c97e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c982:	f806 8b01 	strb.w	r8, [r6], #1
 800c986:	9b00      	ldr	r3, [sp, #0]
 800c988:	eba6 020a 	sub.w	r2, r6, sl
 800c98c:	4293      	cmp	r3, r2
 800c98e:	ddb3      	ble.n	800c8f8 <_dtoa_r+0xad8>
 800c990:	4649      	mov	r1, r9
 800c992:	2300      	movs	r3, #0
 800c994:	220a      	movs	r2, #10
 800c996:	4658      	mov	r0, fp
 800c998:	f000 f968 	bl	800cc6c <__multadd>
 800c99c:	4681      	mov	r9, r0
 800c99e:	e7ea      	b.n	800c976 <_dtoa_r+0xb56>
 800c9a0:	08010c50 	.word	0x08010c50
 800c9a4:	08010beb 	.word	0x08010beb

0800c9a8 <_free_r>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	2900      	cmp	r1, #0
 800c9ae:	d041      	beq.n	800ca34 <_free_r+0x8c>
 800c9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b4:	1f0c      	subs	r4, r1, #4
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	bfb8      	it	lt
 800c9ba:	18e4      	addlt	r4, r4, r3
 800c9bc:	f000 f8e8 	bl	800cb90 <__malloc_lock>
 800c9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800ca38 <_free_r+0x90>)
 800c9c2:	6813      	ldr	r3, [r2, #0]
 800c9c4:	b933      	cbnz	r3, 800c9d4 <_free_r+0x2c>
 800c9c6:	6063      	str	r3, [r4, #4]
 800c9c8:	6014      	str	r4, [r2, #0]
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9d0:	f000 b8e4 	b.w	800cb9c <__malloc_unlock>
 800c9d4:	42a3      	cmp	r3, r4
 800c9d6:	d908      	bls.n	800c9ea <_free_r+0x42>
 800c9d8:	6820      	ldr	r0, [r4, #0]
 800c9da:	1821      	adds	r1, r4, r0
 800c9dc:	428b      	cmp	r3, r1
 800c9de:	bf01      	itttt	eq
 800c9e0:	6819      	ldreq	r1, [r3, #0]
 800c9e2:	685b      	ldreq	r3, [r3, #4]
 800c9e4:	1809      	addeq	r1, r1, r0
 800c9e6:	6021      	streq	r1, [r4, #0]
 800c9e8:	e7ed      	b.n	800c9c6 <_free_r+0x1e>
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	b10b      	cbz	r3, 800c9f4 <_free_r+0x4c>
 800c9f0:	42a3      	cmp	r3, r4
 800c9f2:	d9fa      	bls.n	800c9ea <_free_r+0x42>
 800c9f4:	6811      	ldr	r1, [r2, #0]
 800c9f6:	1850      	adds	r0, r2, r1
 800c9f8:	42a0      	cmp	r0, r4
 800c9fa:	d10b      	bne.n	800ca14 <_free_r+0x6c>
 800c9fc:	6820      	ldr	r0, [r4, #0]
 800c9fe:	4401      	add	r1, r0
 800ca00:	1850      	adds	r0, r2, r1
 800ca02:	4283      	cmp	r3, r0
 800ca04:	6011      	str	r1, [r2, #0]
 800ca06:	d1e0      	bne.n	800c9ca <_free_r+0x22>
 800ca08:	6818      	ldr	r0, [r3, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	6053      	str	r3, [r2, #4]
 800ca0e:	4408      	add	r0, r1
 800ca10:	6010      	str	r0, [r2, #0]
 800ca12:	e7da      	b.n	800c9ca <_free_r+0x22>
 800ca14:	d902      	bls.n	800ca1c <_free_r+0x74>
 800ca16:	230c      	movs	r3, #12
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	e7d6      	b.n	800c9ca <_free_r+0x22>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	1821      	adds	r1, r4, r0
 800ca20:	428b      	cmp	r3, r1
 800ca22:	bf04      	itt	eq
 800ca24:	6819      	ldreq	r1, [r3, #0]
 800ca26:	685b      	ldreq	r3, [r3, #4]
 800ca28:	6063      	str	r3, [r4, #4]
 800ca2a:	bf04      	itt	eq
 800ca2c:	1809      	addeq	r1, r1, r0
 800ca2e:	6021      	streq	r1, [r4, #0]
 800ca30:	6054      	str	r4, [r2, #4]
 800ca32:	e7ca      	b.n	800c9ca <_free_r+0x22>
 800ca34:	bd38      	pop	{r3, r4, r5, pc}
 800ca36:	bf00      	nop
 800ca38:	20001100 	.word	0x20001100

0800ca3c <malloc>:
 800ca3c:	4b02      	ldr	r3, [pc, #8]	@ (800ca48 <malloc+0xc>)
 800ca3e:	4601      	mov	r1, r0
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	f000 b825 	b.w	800ca90 <_malloc_r>
 800ca46:	bf00      	nop
 800ca48:	2000003c 	.word	0x2000003c

0800ca4c <sbrk_aligned>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ca8c <sbrk_aligned+0x40>)
 800ca50:	460c      	mov	r4, r1
 800ca52:	6831      	ldr	r1, [r6, #0]
 800ca54:	4605      	mov	r5, r0
 800ca56:	b911      	cbnz	r1, 800ca5e <sbrk_aligned+0x12>
 800ca58:	f001 fffc 	bl	800ea54 <_sbrk_r>
 800ca5c:	6030      	str	r0, [r6, #0]
 800ca5e:	4621      	mov	r1, r4
 800ca60:	4628      	mov	r0, r5
 800ca62:	f001 fff7 	bl	800ea54 <_sbrk_r>
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	d103      	bne.n	800ca72 <sbrk_aligned+0x26>
 800ca6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ca6e:	4620      	mov	r0, r4
 800ca70:	bd70      	pop	{r4, r5, r6, pc}
 800ca72:	1cc4      	adds	r4, r0, #3
 800ca74:	f024 0403 	bic.w	r4, r4, #3
 800ca78:	42a0      	cmp	r0, r4
 800ca7a:	d0f8      	beq.n	800ca6e <sbrk_aligned+0x22>
 800ca7c:	1a21      	subs	r1, r4, r0
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f001 ffe8 	bl	800ea54 <_sbrk_r>
 800ca84:	3001      	adds	r0, #1
 800ca86:	d1f2      	bne.n	800ca6e <sbrk_aligned+0x22>
 800ca88:	e7ef      	b.n	800ca6a <sbrk_aligned+0x1e>
 800ca8a:	bf00      	nop
 800ca8c:	200010fc 	.word	0x200010fc

0800ca90 <_malloc_r>:
 800ca90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca94:	1ccd      	adds	r5, r1, #3
 800ca96:	f025 0503 	bic.w	r5, r5, #3
 800ca9a:	3508      	adds	r5, #8
 800ca9c:	2d0c      	cmp	r5, #12
 800ca9e:	bf38      	it	cc
 800caa0:	250c      	movcc	r5, #12
 800caa2:	2d00      	cmp	r5, #0
 800caa4:	4606      	mov	r6, r0
 800caa6:	db01      	blt.n	800caac <_malloc_r+0x1c>
 800caa8:	42a9      	cmp	r1, r5
 800caaa:	d904      	bls.n	800cab6 <_malloc_r+0x26>
 800caac:	230c      	movs	r3, #12
 800caae:	6033      	str	r3, [r6, #0]
 800cab0:	2000      	movs	r0, #0
 800cab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb8c <_malloc_r+0xfc>
 800caba:	f000 f869 	bl	800cb90 <__malloc_lock>
 800cabe:	f8d8 3000 	ldr.w	r3, [r8]
 800cac2:	461c      	mov	r4, r3
 800cac4:	bb44      	cbnz	r4, 800cb18 <_malloc_r+0x88>
 800cac6:	4629      	mov	r1, r5
 800cac8:	4630      	mov	r0, r6
 800caca:	f7ff ffbf 	bl	800ca4c <sbrk_aligned>
 800cace:	1c43      	adds	r3, r0, #1
 800cad0:	4604      	mov	r4, r0
 800cad2:	d158      	bne.n	800cb86 <_malloc_r+0xf6>
 800cad4:	f8d8 4000 	ldr.w	r4, [r8]
 800cad8:	4627      	mov	r7, r4
 800cada:	2f00      	cmp	r7, #0
 800cadc:	d143      	bne.n	800cb66 <_malloc_r+0xd6>
 800cade:	2c00      	cmp	r4, #0
 800cae0:	d04b      	beq.n	800cb7a <_malloc_r+0xea>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	4639      	mov	r1, r7
 800cae6:	4630      	mov	r0, r6
 800cae8:	eb04 0903 	add.w	r9, r4, r3
 800caec:	f001 ffb2 	bl	800ea54 <_sbrk_r>
 800caf0:	4581      	cmp	r9, r0
 800caf2:	d142      	bne.n	800cb7a <_malloc_r+0xea>
 800caf4:	6821      	ldr	r1, [r4, #0]
 800caf6:	1a6d      	subs	r5, r5, r1
 800caf8:	4629      	mov	r1, r5
 800cafa:	4630      	mov	r0, r6
 800cafc:	f7ff ffa6 	bl	800ca4c <sbrk_aligned>
 800cb00:	3001      	adds	r0, #1
 800cb02:	d03a      	beq.n	800cb7a <_malloc_r+0xea>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	442b      	add	r3, r5
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb0e:	685a      	ldr	r2, [r3, #4]
 800cb10:	bb62      	cbnz	r2, 800cb6c <_malloc_r+0xdc>
 800cb12:	f8c8 7000 	str.w	r7, [r8]
 800cb16:	e00f      	b.n	800cb38 <_malloc_r+0xa8>
 800cb18:	6822      	ldr	r2, [r4, #0]
 800cb1a:	1b52      	subs	r2, r2, r5
 800cb1c:	d420      	bmi.n	800cb60 <_malloc_r+0xd0>
 800cb1e:	2a0b      	cmp	r2, #11
 800cb20:	d917      	bls.n	800cb52 <_malloc_r+0xc2>
 800cb22:	1961      	adds	r1, r4, r5
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	6025      	str	r5, [r4, #0]
 800cb28:	bf18      	it	ne
 800cb2a:	6059      	strne	r1, [r3, #4]
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	bf08      	it	eq
 800cb30:	f8c8 1000 	streq.w	r1, [r8]
 800cb34:	5162      	str	r2, [r4, r5]
 800cb36:	604b      	str	r3, [r1, #4]
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f000 f82f 	bl	800cb9c <__malloc_unlock>
 800cb3e:	f104 000b 	add.w	r0, r4, #11
 800cb42:	1d23      	adds	r3, r4, #4
 800cb44:	f020 0007 	bic.w	r0, r0, #7
 800cb48:	1ac2      	subs	r2, r0, r3
 800cb4a:	bf1c      	itt	ne
 800cb4c:	1a1b      	subne	r3, r3, r0
 800cb4e:	50a3      	strne	r3, [r4, r2]
 800cb50:	e7af      	b.n	800cab2 <_malloc_r+0x22>
 800cb52:	6862      	ldr	r2, [r4, #4]
 800cb54:	42a3      	cmp	r3, r4
 800cb56:	bf0c      	ite	eq
 800cb58:	f8c8 2000 	streq.w	r2, [r8]
 800cb5c:	605a      	strne	r2, [r3, #4]
 800cb5e:	e7eb      	b.n	800cb38 <_malloc_r+0xa8>
 800cb60:	4623      	mov	r3, r4
 800cb62:	6864      	ldr	r4, [r4, #4]
 800cb64:	e7ae      	b.n	800cac4 <_malloc_r+0x34>
 800cb66:	463c      	mov	r4, r7
 800cb68:	687f      	ldr	r7, [r7, #4]
 800cb6a:	e7b6      	b.n	800cada <_malloc_r+0x4a>
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	42a3      	cmp	r3, r4
 800cb72:	d1fb      	bne.n	800cb6c <_malloc_r+0xdc>
 800cb74:	2300      	movs	r3, #0
 800cb76:	6053      	str	r3, [r2, #4]
 800cb78:	e7de      	b.n	800cb38 <_malloc_r+0xa8>
 800cb7a:	230c      	movs	r3, #12
 800cb7c:	6033      	str	r3, [r6, #0]
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f000 f80c 	bl	800cb9c <__malloc_unlock>
 800cb84:	e794      	b.n	800cab0 <_malloc_r+0x20>
 800cb86:	6005      	str	r5, [r0, #0]
 800cb88:	e7d6      	b.n	800cb38 <_malloc_r+0xa8>
 800cb8a:	bf00      	nop
 800cb8c:	20001100 	.word	0x20001100

0800cb90 <__malloc_lock>:
 800cb90:	4801      	ldr	r0, [pc, #4]	@ (800cb98 <__malloc_lock+0x8>)
 800cb92:	f7ff b896 	b.w	800bcc2 <__retarget_lock_acquire_recursive>
 800cb96:	bf00      	nop
 800cb98:	200010f8 	.word	0x200010f8

0800cb9c <__malloc_unlock>:
 800cb9c:	4801      	ldr	r0, [pc, #4]	@ (800cba4 <__malloc_unlock+0x8>)
 800cb9e:	f7ff b891 	b.w	800bcc4 <__retarget_lock_release_recursive>
 800cba2:	bf00      	nop
 800cba4:	200010f8 	.word	0x200010f8

0800cba8 <_Balloc>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	69c6      	ldr	r6, [r0, #28]
 800cbac:	4604      	mov	r4, r0
 800cbae:	460d      	mov	r5, r1
 800cbb0:	b976      	cbnz	r6, 800cbd0 <_Balloc+0x28>
 800cbb2:	2010      	movs	r0, #16
 800cbb4:	f7ff ff42 	bl	800ca3c <malloc>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	61e0      	str	r0, [r4, #28]
 800cbbc:	b920      	cbnz	r0, 800cbc8 <_Balloc+0x20>
 800cbbe:	4b18      	ldr	r3, [pc, #96]	@ (800cc20 <_Balloc+0x78>)
 800cbc0:	4818      	ldr	r0, [pc, #96]	@ (800cc24 <_Balloc+0x7c>)
 800cbc2:	216b      	movs	r1, #107	@ 0x6b
 800cbc4:	f7ff f886 	bl	800bcd4 <__assert_func>
 800cbc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbcc:	6006      	str	r6, [r0, #0]
 800cbce:	60c6      	str	r6, [r0, #12]
 800cbd0:	69e6      	ldr	r6, [r4, #28]
 800cbd2:	68f3      	ldr	r3, [r6, #12]
 800cbd4:	b183      	cbz	r3, 800cbf8 <_Balloc+0x50>
 800cbd6:	69e3      	ldr	r3, [r4, #28]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbde:	b9b8      	cbnz	r0, 800cc10 <_Balloc+0x68>
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	fa01 f605 	lsl.w	r6, r1, r5
 800cbe6:	1d72      	adds	r2, r6, #5
 800cbe8:	0092      	lsls	r2, r2, #2
 800cbea:	4620      	mov	r0, r4
 800cbec:	f001 ff5f 	bl	800eaae <_calloc_r>
 800cbf0:	b160      	cbz	r0, 800cc0c <_Balloc+0x64>
 800cbf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbf6:	e00e      	b.n	800cc16 <_Balloc+0x6e>
 800cbf8:	2221      	movs	r2, #33	@ 0x21
 800cbfa:	2104      	movs	r1, #4
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f001 ff56 	bl	800eaae <_calloc_r>
 800cc02:	69e3      	ldr	r3, [r4, #28]
 800cc04:	60f0      	str	r0, [r6, #12]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d1e4      	bne.n	800cbd6 <_Balloc+0x2e>
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}
 800cc10:	6802      	ldr	r2, [r0, #0]
 800cc12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc16:	2300      	movs	r3, #0
 800cc18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc1c:	e7f7      	b.n	800cc0e <_Balloc+0x66>
 800cc1e:	bf00      	nop
 800cc20:	08010b3e 	.word	0x08010b3e
 800cc24:	08010c61 	.word	0x08010c61

0800cc28 <_Bfree>:
 800cc28:	b570      	push	{r4, r5, r6, lr}
 800cc2a:	69c6      	ldr	r6, [r0, #28]
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	b976      	cbnz	r6, 800cc50 <_Bfree+0x28>
 800cc32:	2010      	movs	r0, #16
 800cc34:	f7ff ff02 	bl	800ca3c <malloc>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	61e8      	str	r0, [r5, #28]
 800cc3c:	b920      	cbnz	r0, 800cc48 <_Bfree+0x20>
 800cc3e:	4b09      	ldr	r3, [pc, #36]	@ (800cc64 <_Bfree+0x3c>)
 800cc40:	4809      	ldr	r0, [pc, #36]	@ (800cc68 <_Bfree+0x40>)
 800cc42:	218f      	movs	r1, #143	@ 0x8f
 800cc44:	f7ff f846 	bl	800bcd4 <__assert_func>
 800cc48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc4c:	6006      	str	r6, [r0, #0]
 800cc4e:	60c6      	str	r6, [r0, #12]
 800cc50:	b13c      	cbz	r4, 800cc62 <_Bfree+0x3a>
 800cc52:	69eb      	ldr	r3, [r5, #28]
 800cc54:	6862      	ldr	r2, [r4, #4]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc5c:	6021      	str	r1, [r4, #0]
 800cc5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc62:	bd70      	pop	{r4, r5, r6, pc}
 800cc64:	08010b3e 	.word	0x08010b3e
 800cc68:	08010c61 	.word	0x08010c61

0800cc6c <__multadd>:
 800cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc70:	690d      	ldr	r5, [r1, #16]
 800cc72:	4607      	mov	r7, r0
 800cc74:	460c      	mov	r4, r1
 800cc76:	461e      	mov	r6, r3
 800cc78:	f101 0c14 	add.w	ip, r1, #20
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	f8dc 3000 	ldr.w	r3, [ip]
 800cc82:	b299      	uxth	r1, r3
 800cc84:	fb02 6101 	mla	r1, r2, r1, r6
 800cc88:	0c1e      	lsrs	r6, r3, #16
 800cc8a:	0c0b      	lsrs	r3, r1, #16
 800cc8c:	fb02 3306 	mla	r3, r2, r6, r3
 800cc90:	b289      	uxth	r1, r1
 800cc92:	3001      	adds	r0, #1
 800cc94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc98:	4285      	cmp	r5, r0
 800cc9a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cca2:	dcec      	bgt.n	800cc7e <__multadd+0x12>
 800cca4:	b30e      	cbz	r6, 800ccea <__multadd+0x7e>
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	42ab      	cmp	r3, r5
 800ccaa:	dc19      	bgt.n	800cce0 <__multadd+0x74>
 800ccac:	6861      	ldr	r1, [r4, #4]
 800ccae:	4638      	mov	r0, r7
 800ccb0:	3101      	adds	r1, #1
 800ccb2:	f7ff ff79 	bl	800cba8 <_Balloc>
 800ccb6:	4680      	mov	r8, r0
 800ccb8:	b928      	cbnz	r0, 800ccc6 <__multadd+0x5a>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf0 <__multadd+0x84>)
 800ccbe:	480d      	ldr	r0, [pc, #52]	@ (800ccf4 <__multadd+0x88>)
 800ccc0:	21ba      	movs	r1, #186	@ 0xba
 800ccc2:	f7ff f807 	bl	800bcd4 <__assert_func>
 800ccc6:	6922      	ldr	r2, [r4, #16]
 800ccc8:	3202      	adds	r2, #2
 800ccca:	f104 010c 	add.w	r1, r4, #12
 800ccce:	0092      	lsls	r2, r2, #2
 800ccd0:	300c      	adds	r0, #12
 800ccd2:	f001 fecf 	bl	800ea74 <memcpy>
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4638      	mov	r0, r7
 800ccda:	f7ff ffa5 	bl	800cc28 <_Bfree>
 800ccde:	4644      	mov	r4, r8
 800cce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cce4:	3501      	adds	r5, #1
 800cce6:	615e      	str	r6, [r3, #20]
 800cce8:	6125      	str	r5, [r4, #16]
 800ccea:	4620      	mov	r0, r4
 800ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf0:	08010c50 	.word	0x08010c50
 800ccf4:	08010c61 	.word	0x08010c61

0800ccf8 <__s2b>:
 800ccf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	4615      	mov	r5, r2
 800cd00:	461f      	mov	r7, r3
 800cd02:	2209      	movs	r2, #9
 800cd04:	3308      	adds	r3, #8
 800cd06:	4606      	mov	r6, r0
 800cd08:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	2201      	movs	r2, #1
 800cd10:	429a      	cmp	r2, r3
 800cd12:	db09      	blt.n	800cd28 <__s2b+0x30>
 800cd14:	4630      	mov	r0, r6
 800cd16:	f7ff ff47 	bl	800cba8 <_Balloc>
 800cd1a:	b940      	cbnz	r0, 800cd2e <__s2b+0x36>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	4b19      	ldr	r3, [pc, #100]	@ (800cd84 <__s2b+0x8c>)
 800cd20:	4819      	ldr	r0, [pc, #100]	@ (800cd88 <__s2b+0x90>)
 800cd22:	21d3      	movs	r1, #211	@ 0xd3
 800cd24:	f7fe ffd6 	bl	800bcd4 <__assert_func>
 800cd28:	0052      	lsls	r2, r2, #1
 800cd2a:	3101      	adds	r1, #1
 800cd2c:	e7f0      	b.n	800cd10 <__s2b+0x18>
 800cd2e:	9b08      	ldr	r3, [sp, #32]
 800cd30:	6143      	str	r3, [r0, #20]
 800cd32:	2d09      	cmp	r5, #9
 800cd34:	f04f 0301 	mov.w	r3, #1
 800cd38:	6103      	str	r3, [r0, #16]
 800cd3a:	dd16      	ble.n	800cd6a <__s2b+0x72>
 800cd3c:	f104 0909 	add.w	r9, r4, #9
 800cd40:	46c8      	mov	r8, r9
 800cd42:	442c      	add	r4, r5
 800cd44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd48:	4601      	mov	r1, r0
 800cd4a:	3b30      	subs	r3, #48	@ 0x30
 800cd4c:	220a      	movs	r2, #10
 800cd4e:	4630      	mov	r0, r6
 800cd50:	f7ff ff8c 	bl	800cc6c <__multadd>
 800cd54:	45a0      	cmp	r8, r4
 800cd56:	d1f5      	bne.n	800cd44 <__s2b+0x4c>
 800cd58:	f1a5 0408 	sub.w	r4, r5, #8
 800cd5c:	444c      	add	r4, r9
 800cd5e:	1b2d      	subs	r5, r5, r4
 800cd60:	1963      	adds	r3, r4, r5
 800cd62:	42bb      	cmp	r3, r7
 800cd64:	db04      	blt.n	800cd70 <__s2b+0x78>
 800cd66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd6a:	340a      	adds	r4, #10
 800cd6c:	2509      	movs	r5, #9
 800cd6e:	e7f6      	b.n	800cd5e <__s2b+0x66>
 800cd70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd74:	4601      	mov	r1, r0
 800cd76:	3b30      	subs	r3, #48	@ 0x30
 800cd78:	220a      	movs	r2, #10
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f7ff ff76 	bl	800cc6c <__multadd>
 800cd80:	e7ee      	b.n	800cd60 <__s2b+0x68>
 800cd82:	bf00      	nop
 800cd84:	08010c50 	.word	0x08010c50
 800cd88:	08010c61 	.word	0x08010c61

0800cd8c <__hi0bits>:
 800cd8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd90:	4603      	mov	r3, r0
 800cd92:	bf36      	itet	cc
 800cd94:	0403      	lslcc	r3, r0, #16
 800cd96:	2000      	movcs	r0, #0
 800cd98:	2010      	movcc	r0, #16
 800cd9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd9e:	bf3c      	itt	cc
 800cda0:	021b      	lslcc	r3, r3, #8
 800cda2:	3008      	addcc	r0, #8
 800cda4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cda8:	bf3c      	itt	cc
 800cdaa:	011b      	lslcc	r3, r3, #4
 800cdac:	3004      	addcc	r0, #4
 800cdae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdb2:	bf3c      	itt	cc
 800cdb4:	009b      	lslcc	r3, r3, #2
 800cdb6:	3002      	addcc	r0, #2
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	db05      	blt.n	800cdc8 <__hi0bits+0x3c>
 800cdbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cdc0:	f100 0001 	add.w	r0, r0, #1
 800cdc4:	bf08      	it	eq
 800cdc6:	2020      	moveq	r0, #32
 800cdc8:	4770      	bx	lr

0800cdca <__lo0bits>:
 800cdca:	6803      	ldr	r3, [r0, #0]
 800cdcc:	4602      	mov	r2, r0
 800cdce:	f013 0007 	ands.w	r0, r3, #7
 800cdd2:	d00b      	beq.n	800cdec <__lo0bits+0x22>
 800cdd4:	07d9      	lsls	r1, r3, #31
 800cdd6:	d421      	bmi.n	800ce1c <__lo0bits+0x52>
 800cdd8:	0798      	lsls	r0, r3, #30
 800cdda:	bf49      	itett	mi
 800cddc:	085b      	lsrmi	r3, r3, #1
 800cdde:	089b      	lsrpl	r3, r3, #2
 800cde0:	2001      	movmi	r0, #1
 800cde2:	6013      	strmi	r3, [r2, #0]
 800cde4:	bf5c      	itt	pl
 800cde6:	6013      	strpl	r3, [r2, #0]
 800cde8:	2002      	movpl	r0, #2
 800cdea:	4770      	bx	lr
 800cdec:	b299      	uxth	r1, r3
 800cdee:	b909      	cbnz	r1, 800cdf4 <__lo0bits+0x2a>
 800cdf0:	0c1b      	lsrs	r3, r3, #16
 800cdf2:	2010      	movs	r0, #16
 800cdf4:	b2d9      	uxtb	r1, r3
 800cdf6:	b909      	cbnz	r1, 800cdfc <__lo0bits+0x32>
 800cdf8:	3008      	adds	r0, #8
 800cdfa:	0a1b      	lsrs	r3, r3, #8
 800cdfc:	0719      	lsls	r1, r3, #28
 800cdfe:	bf04      	itt	eq
 800ce00:	091b      	lsreq	r3, r3, #4
 800ce02:	3004      	addeq	r0, #4
 800ce04:	0799      	lsls	r1, r3, #30
 800ce06:	bf04      	itt	eq
 800ce08:	089b      	lsreq	r3, r3, #2
 800ce0a:	3002      	addeq	r0, #2
 800ce0c:	07d9      	lsls	r1, r3, #31
 800ce0e:	d403      	bmi.n	800ce18 <__lo0bits+0x4e>
 800ce10:	085b      	lsrs	r3, r3, #1
 800ce12:	f100 0001 	add.w	r0, r0, #1
 800ce16:	d003      	beq.n	800ce20 <__lo0bits+0x56>
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	4770      	bx	lr
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	4770      	bx	lr
 800ce20:	2020      	movs	r0, #32
 800ce22:	4770      	bx	lr

0800ce24 <__i2b>:
 800ce24:	b510      	push	{r4, lr}
 800ce26:	460c      	mov	r4, r1
 800ce28:	2101      	movs	r1, #1
 800ce2a:	f7ff febd 	bl	800cba8 <_Balloc>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	b928      	cbnz	r0, 800ce3e <__i2b+0x1a>
 800ce32:	4b05      	ldr	r3, [pc, #20]	@ (800ce48 <__i2b+0x24>)
 800ce34:	4805      	ldr	r0, [pc, #20]	@ (800ce4c <__i2b+0x28>)
 800ce36:	f240 1145 	movw	r1, #325	@ 0x145
 800ce3a:	f7fe ff4b 	bl	800bcd4 <__assert_func>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	6144      	str	r4, [r0, #20]
 800ce42:	6103      	str	r3, [r0, #16]
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	bf00      	nop
 800ce48:	08010c50 	.word	0x08010c50
 800ce4c:	08010c61 	.word	0x08010c61

0800ce50 <__multiply>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	4614      	mov	r4, r2
 800ce56:	690a      	ldr	r2, [r1, #16]
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	bfa8      	it	ge
 800ce5e:	4623      	movge	r3, r4
 800ce60:	460f      	mov	r7, r1
 800ce62:	bfa4      	itt	ge
 800ce64:	460c      	movge	r4, r1
 800ce66:	461f      	movge	r7, r3
 800ce68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce70:	68a3      	ldr	r3, [r4, #8]
 800ce72:	6861      	ldr	r1, [r4, #4]
 800ce74:	eb0a 0609 	add.w	r6, sl, r9
 800ce78:	42b3      	cmp	r3, r6
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	bfb8      	it	lt
 800ce7e:	3101      	addlt	r1, #1
 800ce80:	f7ff fe92 	bl	800cba8 <_Balloc>
 800ce84:	b930      	cbnz	r0, 800ce94 <__multiply+0x44>
 800ce86:	4602      	mov	r2, r0
 800ce88:	4b44      	ldr	r3, [pc, #272]	@ (800cf9c <__multiply+0x14c>)
 800ce8a:	4845      	ldr	r0, [pc, #276]	@ (800cfa0 <__multiply+0x150>)
 800ce8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce90:	f7fe ff20 	bl	800bcd4 <__assert_func>
 800ce94:	f100 0514 	add.w	r5, r0, #20
 800ce98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce9c:	462b      	mov	r3, r5
 800ce9e:	2200      	movs	r2, #0
 800cea0:	4543      	cmp	r3, r8
 800cea2:	d321      	bcc.n	800cee8 <__multiply+0x98>
 800cea4:	f107 0114 	add.w	r1, r7, #20
 800cea8:	f104 0214 	add.w	r2, r4, #20
 800ceac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ceb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ceb4:	9302      	str	r3, [sp, #8]
 800ceb6:	1b13      	subs	r3, r2, r4
 800ceb8:	3b15      	subs	r3, #21
 800ceba:	f023 0303 	bic.w	r3, r3, #3
 800cebe:	3304      	adds	r3, #4
 800cec0:	f104 0715 	add.w	r7, r4, #21
 800cec4:	42ba      	cmp	r2, r7
 800cec6:	bf38      	it	cc
 800cec8:	2304      	movcc	r3, #4
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	9b02      	ldr	r3, [sp, #8]
 800cece:	9103      	str	r1, [sp, #12]
 800ced0:	428b      	cmp	r3, r1
 800ced2:	d80c      	bhi.n	800ceee <__multiply+0x9e>
 800ced4:	2e00      	cmp	r6, #0
 800ced6:	dd03      	ble.n	800cee0 <__multiply+0x90>
 800ced8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d05b      	beq.n	800cf98 <__multiply+0x148>
 800cee0:	6106      	str	r6, [r0, #16]
 800cee2:	b005      	add	sp, #20
 800cee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee8:	f843 2b04 	str.w	r2, [r3], #4
 800ceec:	e7d8      	b.n	800cea0 <__multiply+0x50>
 800ceee:	f8b1 a000 	ldrh.w	sl, [r1]
 800cef2:	f1ba 0f00 	cmp.w	sl, #0
 800cef6:	d024      	beq.n	800cf42 <__multiply+0xf2>
 800cef8:	f104 0e14 	add.w	lr, r4, #20
 800cefc:	46a9      	mov	r9, r5
 800cefe:	f04f 0c00 	mov.w	ip, #0
 800cf02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf06:	f8d9 3000 	ldr.w	r3, [r9]
 800cf0a:	fa1f fb87 	uxth.w	fp, r7
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cf18:	f8d9 7000 	ldr.w	r7, [r9]
 800cf1c:	4463      	add	r3, ip
 800cf1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf22:	fb0a c70b 	mla	r7, sl, fp, ip
 800cf26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf30:	4572      	cmp	r2, lr
 800cf32:	f849 3b04 	str.w	r3, [r9], #4
 800cf36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf3a:	d8e2      	bhi.n	800cf02 <__multiply+0xb2>
 800cf3c:	9b01      	ldr	r3, [sp, #4]
 800cf3e:	f845 c003 	str.w	ip, [r5, r3]
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf48:	3104      	adds	r1, #4
 800cf4a:	f1b9 0f00 	cmp.w	r9, #0
 800cf4e:	d021      	beq.n	800cf94 <__multiply+0x144>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	f104 0c14 	add.w	ip, r4, #20
 800cf56:	46ae      	mov	lr, r5
 800cf58:	f04f 0a00 	mov.w	sl, #0
 800cf5c:	f8bc b000 	ldrh.w	fp, [ip]
 800cf60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf64:	fb09 770b 	mla	r7, r9, fp, r7
 800cf68:	4457      	add	r7, sl
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf70:	f84e 3b04 	str.w	r3, [lr], #4
 800cf74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf7c:	f8be 3000 	ldrh.w	r3, [lr]
 800cf80:	fb09 330a 	mla	r3, r9, sl, r3
 800cf84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf88:	4562      	cmp	r2, ip
 800cf8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf8e:	d8e5      	bhi.n	800cf5c <__multiply+0x10c>
 800cf90:	9f01      	ldr	r7, [sp, #4]
 800cf92:	51eb      	str	r3, [r5, r7]
 800cf94:	3504      	adds	r5, #4
 800cf96:	e799      	b.n	800cecc <__multiply+0x7c>
 800cf98:	3e01      	subs	r6, #1
 800cf9a:	e79b      	b.n	800ced4 <__multiply+0x84>
 800cf9c:	08010c50 	.word	0x08010c50
 800cfa0:	08010c61 	.word	0x08010c61

0800cfa4 <__pow5mult>:
 800cfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfa8:	4615      	mov	r5, r2
 800cfaa:	f012 0203 	ands.w	r2, r2, #3
 800cfae:	4607      	mov	r7, r0
 800cfb0:	460e      	mov	r6, r1
 800cfb2:	d007      	beq.n	800cfc4 <__pow5mult+0x20>
 800cfb4:	4c25      	ldr	r4, [pc, #148]	@ (800d04c <__pow5mult+0xa8>)
 800cfb6:	3a01      	subs	r2, #1
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfbe:	f7ff fe55 	bl	800cc6c <__multadd>
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	10ad      	asrs	r5, r5, #2
 800cfc6:	d03d      	beq.n	800d044 <__pow5mult+0xa0>
 800cfc8:	69fc      	ldr	r4, [r7, #28]
 800cfca:	b97c      	cbnz	r4, 800cfec <__pow5mult+0x48>
 800cfcc:	2010      	movs	r0, #16
 800cfce:	f7ff fd35 	bl	800ca3c <malloc>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	61f8      	str	r0, [r7, #28]
 800cfd6:	b928      	cbnz	r0, 800cfe4 <__pow5mult+0x40>
 800cfd8:	4b1d      	ldr	r3, [pc, #116]	@ (800d050 <__pow5mult+0xac>)
 800cfda:	481e      	ldr	r0, [pc, #120]	@ (800d054 <__pow5mult+0xb0>)
 800cfdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfe0:	f7fe fe78 	bl	800bcd4 <__assert_func>
 800cfe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfe8:	6004      	str	r4, [r0, #0]
 800cfea:	60c4      	str	r4, [r0, #12]
 800cfec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cff4:	b94c      	cbnz	r4, 800d00a <__pow5mult+0x66>
 800cff6:	f240 2171 	movw	r1, #625	@ 0x271
 800cffa:	4638      	mov	r0, r7
 800cffc:	f7ff ff12 	bl	800ce24 <__i2b>
 800d000:	2300      	movs	r3, #0
 800d002:	f8c8 0008 	str.w	r0, [r8, #8]
 800d006:	4604      	mov	r4, r0
 800d008:	6003      	str	r3, [r0, #0]
 800d00a:	f04f 0900 	mov.w	r9, #0
 800d00e:	07eb      	lsls	r3, r5, #31
 800d010:	d50a      	bpl.n	800d028 <__pow5mult+0x84>
 800d012:	4631      	mov	r1, r6
 800d014:	4622      	mov	r2, r4
 800d016:	4638      	mov	r0, r7
 800d018:	f7ff ff1a 	bl	800ce50 <__multiply>
 800d01c:	4631      	mov	r1, r6
 800d01e:	4680      	mov	r8, r0
 800d020:	4638      	mov	r0, r7
 800d022:	f7ff fe01 	bl	800cc28 <_Bfree>
 800d026:	4646      	mov	r6, r8
 800d028:	106d      	asrs	r5, r5, #1
 800d02a:	d00b      	beq.n	800d044 <__pow5mult+0xa0>
 800d02c:	6820      	ldr	r0, [r4, #0]
 800d02e:	b938      	cbnz	r0, 800d040 <__pow5mult+0x9c>
 800d030:	4622      	mov	r2, r4
 800d032:	4621      	mov	r1, r4
 800d034:	4638      	mov	r0, r7
 800d036:	f7ff ff0b 	bl	800ce50 <__multiply>
 800d03a:	6020      	str	r0, [r4, #0]
 800d03c:	f8c0 9000 	str.w	r9, [r0]
 800d040:	4604      	mov	r4, r0
 800d042:	e7e4      	b.n	800d00e <__pow5mult+0x6a>
 800d044:	4630      	mov	r0, r6
 800d046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04a:	bf00      	nop
 800d04c:	08010cbc 	.word	0x08010cbc
 800d050:	08010b3e 	.word	0x08010b3e
 800d054:	08010c61 	.word	0x08010c61

0800d058 <__lshift>:
 800d058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d05c:	460c      	mov	r4, r1
 800d05e:	6849      	ldr	r1, [r1, #4]
 800d060:	6923      	ldr	r3, [r4, #16]
 800d062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d066:	68a3      	ldr	r3, [r4, #8]
 800d068:	4607      	mov	r7, r0
 800d06a:	4691      	mov	r9, r2
 800d06c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d070:	f108 0601 	add.w	r6, r8, #1
 800d074:	42b3      	cmp	r3, r6
 800d076:	db0b      	blt.n	800d090 <__lshift+0x38>
 800d078:	4638      	mov	r0, r7
 800d07a:	f7ff fd95 	bl	800cba8 <_Balloc>
 800d07e:	4605      	mov	r5, r0
 800d080:	b948      	cbnz	r0, 800d096 <__lshift+0x3e>
 800d082:	4602      	mov	r2, r0
 800d084:	4b28      	ldr	r3, [pc, #160]	@ (800d128 <__lshift+0xd0>)
 800d086:	4829      	ldr	r0, [pc, #164]	@ (800d12c <__lshift+0xd4>)
 800d088:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d08c:	f7fe fe22 	bl	800bcd4 <__assert_func>
 800d090:	3101      	adds	r1, #1
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	e7ee      	b.n	800d074 <__lshift+0x1c>
 800d096:	2300      	movs	r3, #0
 800d098:	f100 0114 	add.w	r1, r0, #20
 800d09c:	f100 0210 	add.w	r2, r0, #16
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	4553      	cmp	r3, sl
 800d0a4:	db33      	blt.n	800d10e <__lshift+0xb6>
 800d0a6:	6920      	ldr	r0, [r4, #16]
 800d0a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0ac:	f104 0314 	add.w	r3, r4, #20
 800d0b0:	f019 091f 	ands.w	r9, r9, #31
 800d0b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0bc:	d02b      	beq.n	800d116 <__lshift+0xbe>
 800d0be:	f1c9 0e20 	rsb	lr, r9, #32
 800d0c2:	468a      	mov	sl, r1
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	6818      	ldr	r0, [r3, #0]
 800d0c8:	fa00 f009 	lsl.w	r0, r0, r9
 800d0cc:	4310      	orrs	r0, r2
 800d0ce:	f84a 0b04 	str.w	r0, [sl], #4
 800d0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0d6:	459c      	cmp	ip, r3
 800d0d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0dc:	d8f3      	bhi.n	800d0c6 <__lshift+0x6e>
 800d0de:	ebac 0304 	sub.w	r3, ip, r4
 800d0e2:	3b15      	subs	r3, #21
 800d0e4:	f023 0303 	bic.w	r3, r3, #3
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	f104 0015 	add.w	r0, r4, #21
 800d0ee:	4584      	cmp	ip, r0
 800d0f0:	bf38      	it	cc
 800d0f2:	2304      	movcc	r3, #4
 800d0f4:	50ca      	str	r2, [r1, r3]
 800d0f6:	b10a      	cbz	r2, 800d0fc <__lshift+0xa4>
 800d0f8:	f108 0602 	add.w	r6, r8, #2
 800d0fc:	3e01      	subs	r6, #1
 800d0fe:	4638      	mov	r0, r7
 800d100:	612e      	str	r6, [r5, #16]
 800d102:	4621      	mov	r1, r4
 800d104:	f7ff fd90 	bl	800cc28 <_Bfree>
 800d108:	4628      	mov	r0, r5
 800d10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d10e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d112:	3301      	adds	r3, #1
 800d114:	e7c5      	b.n	800d0a2 <__lshift+0x4a>
 800d116:	3904      	subs	r1, #4
 800d118:	f853 2b04 	ldr.w	r2, [r3], #4
 800d11c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d120:	459c      	cmp	ip, r3
 800d122:	d8f9      	bhi.n	800d118 <__lshift+0xc0>
 800d124:	e7ea      	b.n	800d0fc <__lshift+0xa4>
 800d126:	bf00      	nop
 800d128:	08010c50 	.word	0x08010c50
 800d12c:	08010c61 	.word	0x08010c61

0800d130 <__mcmp>:
 800d130:	690a      	ldr	r2, [r1, #16]
 800d132:	4603      	mov	r3, r0
 800d134:	6900      	ldr	r0, [r0, #16]
 800d136:	1a80      	subs	r0, r0, r2
 800d138:	b530      	push	{r4, r5, lr}
 800d13a:	d10e      	bne.n	800d15a <__mcmp+0x2a>
 800d13c:	3314      	adds	r3, #20
 800d13e:	3114      	adds	r1, #20
 800d140:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d144:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d14c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d150:	4295      	cmp	r5, r2
 800d152:	d003      	beq.n	800d15c <__mcmp+0x2c>
 800d154:	d205      	bcs.n	800d162 <__mcmp+0x32>
 800d156:	f04f 30ff 	mov.w	r0, #4294967295
 800d15a:	bd30      	pop	{r4, r5, pc}
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	d3f3      	bcc.n	800d148 <__mcmp+0x18>
 800d160:	e7fb      	b.n	800d15a <__mcmp+0x2a>
 800d162:	2001      	movs	r0, #1
 800d164:	e7f9      	b.n	800d15a <__mcmp+0x2a>
	...

0800d168 <__mdiff>:
 800d168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	4689      	mov	r9, r1
 800d16e:	4606      	mov	r6, r0
 800d170:	4611      	mov	r1, r2
 800d172:	4648      	mov	r0, r9
 800d174:	4614      	mov	r4, r2
 800d176:	f7ff ffdb 	bl	800d130 <__mcmp>
 800d17a:	1e05      	subs	r5, r0, #0
 800d17c:	d112      	bne.n	800d1a4 <__mdiff+0x3c>
 800d17e:	4629      	mov	r1, r5
 800d180:	4630      	mov	r0, r6
 800d182:	f7ff fd11 	bl	800cba8 <_Balloc>
 800d186:	4602      	mov	r2, r0
 800d188:	b928      	cbnz	r0, 800d196 <__mdiff+0x2e>
 800d18a:	4b3f      	ldr	r3, [pc, #252]	@ (800d288 <__mdiff+0x120>)
 800d18c:	f240 2137 	movw	r1, #567	@ 0x237
 800d190:	483e      	ldr	r0, [pc, #248]	@ (800d28c <__mdiff+0x124>)
 800d192:	f7fe fd9f 	bl	800bcd4 <__assert_func>
 800d196:	2301      	movs	r3, #1
 800d198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d19c:	4610      	mov	r0, r2
 800d19e:	b003      	add	sp, #12
 800d1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a4:	bfbc      	itt	lt
 800d1a6:	464b      	movlt	r3, r9
 800d1a8:	46a1      	movlt	r9, r4
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d1b0:	bfba      	itte	lt
 800d1b2:	461c      	movlt	r4, r3
 800d1b4:	2501      	movlt	r5, #1
 800d1b6:	2500      	movge	r5, #0
 800d1b8:	f7ff fcf6 	bl	800cba8 <_Balloc>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	b918      	cbnz	r0, 800d1c8 <__mdiff+0x60>
 800d1c0:	4b31      	ldr	r3, [pc, #196]	@ (800d288 <__mdiff+0x120>)
 800d1c2:	f240 2145 	movw	r1, #581	@ 0x245
 800d1c6:	e7e3      	b.n	800d190 <__mdiff+0x28>
 800d1c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1cc:	6926      	ldr	r6, [r4, #16]
 800d1ce:	60c5      	str	r5, [r0, #12]
 800d1d0:	f109 0310 	add.w	r3, r9, #16
 800d1d4:	f109 0514 	add.w	r5, r9, #20
 800d1d8:	f104 0e14 	add.w	lr, r4, #20
 800d1dc:	f100 0b14 	add.w	fp, r0, #20
 800d1e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1e8:	9301      	str	r3, [sp, #4]
 800d1ea:	46d9      	mov	r9, fp
 800d1ec:	f04f 0c00 	mov.w	ip, #0
 800d1f0:	9b01      	ldr	r3, [sp, #4]
 800d1f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	fa1f f38a 	uxth.w	r3, sl
 800d200:	4619      	mov	r1, r3
 800d202:	b283      	uxth	r3, r0
 800d204:	1acb      	subs	r3, r1, r3
 800d206:	0c00      	lsrs	r0, r0, #16
 800d208:	4463      	add	r3, ip
 800d20a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d20e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d212:	b29b      	uxth	r3, r3
 800d214:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d218:	4576      	cmp	r6, lr
 800d21a:	f849 3b04 	str.w	r3, [r9], #4
 800d21e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d222:	d8e5      	bhi.n	800d1f0 <__mdiff+0x88>
 800d224:	1b33      	subs	r3, r6, r4
 800d226:	3b15      	subs	r3, #21
 800d228:	f023 0303 	bic.w	r3, r3, #3
 800d22c:	3415      	adds	r4, #21
 800d22e:	3304      	adds	r3, #4
 800d230:	42a6      	cmp	r6, r4
 800d232:	bf38      	it	cc
 800d234:	2304      	movcc	r3, #4
 800d236:	441d      	add	r5, r3
 800d238:	445b      	add	r3, fp
 800d23a:	461e      	mov	r6, r3
 800d23c:	462c      	mov	r4, r5
 800d23e:	4544      	cmp	r4, r8
 800d240:	d30e      	bcc.n	800d260 <__mdiff+0xf8>
 800d242:	f108 0103 	add.w	r1, r8, #3
 800d246:	1b49      	subs	r1, r1, r5
 800d248:	f021 0103 	bic.w	r1, r1, #3
 800d24c:	3d03      	subs	r5, #3
 800d24e:	45a8      	cmp	r8, r5
 800d250:	bf38      	it	cc
 800d252:	2100      	movcc	r1, #0
 800d254:	440b      	add	r3, r1
 800d256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d25a:	b191      	cbz	r1, 800d282 <__mdiff+0x11a>
 800d25c:	6117      	str	r7, [r2, #16]
 800d25e:	e79d      	b.n	800d19c <__mdiff+0x34>
 800d260:	f854 1b04 	ldr.w	r1, [r4], #4
 800d264:	46e6      	mov	lr, ip
 800d266:	0c08      	lsrs	r0, r1, #16
 800d268:	fa1c fc81 	uxtah	ip, ip, r1
 800d26c:	4471      	add	r1, lr
 800d26e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d272:	b289      	uxth	r1, r1
 800d274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d278:	f846 1b04 	str.w	r1, [r6], #4
 800d27c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d280:	e7dd      	b.n	800d23e <__mdiff+0xd6>
 800d282:	3f01      	subs	r7, #1
 800d284:	e7e7      	b.n	800d256 <__mdiff+0xee>
 800d286:	bf00      	nop
 800d288:	08010c50 	.word	0x08010c50
 800d28c:	08010c61 	.word	0x08010c61

0800d290 <__ulp>:
 800d290:	b082      	sub	sp, #8
 800d292:	ed8d 0b00 	vstr	d0, [sp]
 800d296:	9a01      	ldr	r2, [sp, #4]
 800d298:	4b0f      	ldr	r3, [pc, #60]	@ (800d2d8 <__ulp+0x48>)
 800d29a:	4013      	ands	r3, r2
 800d29c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dc08      	bgt.n	800d2b6 <__ulp+0x26>
 800d2a4:	425b      	negs	r3, r3
 800d2a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d2aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2ae:	da04      	bge.n	800d2ba <__ulp+0x2a>
 800d2b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d2b4:	4113      	asrs	r3, r2
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	e008      	b.n	800d2cc <__ulp+0x3c>
 800d2ba:	f1a2 0314 	sub.w	r3, r2, #20
 800d2be:	2b1e      	cmp	r3, #30
 800d2c0:	bfda      	itte	le
 800d2c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d2c6:	40da      	lsrle	r2, r3
 800d2c8:	2201      	movgt	r2, #1
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	ec41 0b10 	vmov	d0, r0, r1
 800d2d4:	b002      	add	sp, #8
 800d2d6:	4770      	bx	lr
 800d2d8:	7ff00000 	.word	0x7ff00000

0800d2dc <__b2d>:
 800d2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e0:	6906      	ldr	r6, [r0, #16]
 800d2e2:	f100 0814 	add.w	r8, r0, #20
 800d2e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d2ea:	1f37      	subs	r7, r6, #4
 800d2ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	f7ff fd4b 	bl	800cd8c <__hi0bits>
 800d2f6:	f1c0 0320 	rsb	r3, r0, #32
 800d2fa:	280a      	cmp	r0, #10
 800d2fc:	600b      	str	r3, [r1, #0]
 800d2fe:	491b      	ldr	r1, [pc, #108]	@ (800d36c <__b2d+0x90>)
 800d300:	dc15      	bgt.n	800d32e <__b2d+0x52>
 800d302:	f1c0 0c0b 	rsb	ip, r0, #11
 800d306:	fa22 f30c 	lsr.w	r3, r2, ip
 800d30a:	45b8      	cmp	r8, r7
 800d30c:	ea43 0501 	orr.w	r5, r3, r1
 800d310:	bf34      	ite	cc
 800d312:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d316:	2300      	movcs	r3, #0
 800d318:	3015      	adds	r0, #21
 800d31a:	fa02 f000 	lsl.w	r0, r2, r0
 800d31e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d322:	4303      	orrs	r3, r0
 800d324:	461c      	mov	r4, r3
 800d326:	ec45 4b10 	vmov	d0, r4, r5
 800d32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d32e:	45b8      	cmp	r8, r7
 800d330:	bf3a      	itte	cc
 800d332:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d336:	f1a6 0708 	subcc.w	r7, r6, #8
 800d33a:	2300      	movcs	r3, #0
 800d33c:	380b      	subs	r0, #11
 800d33e:	d012      	beq.n	800d366 <__b2d+0x8a>
 800d340:	f1c0 0120 	rsb	r1, r0, #32
 800d344:	fa23 f401 	lsr.w	r4, r3, r1
 800d348:	4082      	lsls	r2, r0
 800d34a:	4322      	orrs	r2, r4
 800d34c:	4547      	cmp	r7, r8
 800d34e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d352:	bf8c      	ite	hi
 800d354:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d358:	2200      	movls	r2, #0
 800d35a:	4083      	lsls	r3, r0
 800d35c:	40ca      	lsrs	r2, r1
 800d35e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d362:	4313      	orrs	r3, r2
 800d364:	e7de      	b.n	800d324 <__b2d+0x48>
 800d366:	ea42 0501 	orr.w	r5, r2, r1
 800d36a:	e7db      	b.n	800d324 <__b2d+0x48>
 800d36c:	3ff00000 	.word	0x3ff00000

0800d370 <__d2b>:
 800d370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d374:	460f      	mov	r7, r1
 800d376:	2101      	movs	r1, #1
 800d378:	ec59 8b10 	vmov	r8, r9, d0
 800d37c:	4616      	mov	r6, r2
 800d37e:	f7ff fc13 	bl	800cba8 <_Balloc>
 800d382:	4604      	mov	r4, r0
 800d384:	b930      	cbnz	r0, 800d394 <__d2b+0x24>
 800d386:	4602      	mov	r2, r0
 800d388:	4b23      	ldr	r3, [pc, #140]	@ (800d418 <__d2b+0xa8>)
 800d38a:	4824      	ldr	r0, [pc, #144]	@ (800d41c <__d2b+0xac>)
 800d38c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d390:	f7fe fca0 	bl	800bcd4 <__assert_func>
 800d394:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d39c:	b10d      	cbz	r5, 800d3a2 <__d2b+0x32>
 800d39e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	f1b8 0300 	subs.w	r3, r8, #0
 800d3a8:	d023      	beq.n	800d3f2 <__d2b+0x82>
 800d3aa:	4668      	mov	r0, sp
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	f7ff fd0c 	bl	800cdca <__lo0bits>
 800d3b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d3b6:	b1d0      	cbz	r0, 800d3ee <__d2b+0x7e>
 800d3b8:	f1c0 0320 	rsb	r3, r0, #32
 800d3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c0:	430b      	orrs	r3, r1
 800d3c2:	40c2      	lsrs	r2, r0
 800d3c4:	6163      	str	r3, [r4, #20]
 800d3c6:	9201      	str	r2, [sp, #4]
 800d3c8:	9b01      	ldr	r3, [sp, #4]
 800d3ca:	61a3      	str	r3, [r4, #24]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	bf0c      	ite	eq
 800d3d0:	2201      	moveq	r2, #1
 800d3d2:	2202      	movne	r2, #2
 800d3d4:	6122      	str	r2, [r4, #16]
 800d3d6:	b1a5      	cbz	r5, 800d402 <__d2b+0x92>
 800d3d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d3dc:	4405      	add	r5, r0
 800d3de:	603d      	str	r5, [r7, #0]
 800d3e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d3e4:	6030      	str	r0, [r6, #0]
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	b003      	add	sp, #12
 800d3ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ee:	6161      	str	r1, [r4, #20]
 800d3f0:	e7ea      	b.n	800d3c8 <__d2b+0x58>
 800d3f2:	a801      	add	r0, sp, #4
 800d3f4:	f7ff fce9 	bl	800cdca <__lo0bits>
 800d3f8:	9b01      	ldr	r3, [sp, #4]
 800d3fa:	6163      	str	r3, [r4, #20]
 800d3fc:	3020      	adds	r0, #32
 800d3fe:	2201      	movs	r2, #1
 800d400:	e7e8      	b.n	800d3d4 <__d2b+0x64>
 800d402:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d406:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d40a:	6038      	str	r0, [r7, #0]
 800d40c:	6918      	ldr	r0, [r3, #16]
 800d40e:	f7ff fcbd 	bl	800cd8c <__hi0bits>
 800d412:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d416:	e7e5      	b.n	800d3e4 <__d2b+0x74>
 800d418:	08010c50 	.word	0x08010c50
 800d41c:	08010c61 	.word	0x08010c61

0800d420 <__ratio>:
 800d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	b085      	sub	sp, #20
 800d426:	e9cd 1000 	strd	r1, r0, [sp]
 800d42a:	a902      	add	r1, sp, #8
 800d42c:	f7ff ff56 	bl	800d2dc <__b2d>
 800d430:	9800      	ldr	r0, [sp, #0]
 800d432:	a903      	add	r1, sp, #12
 800d434:	ec55 4b10 	vmov	r4, r5, d0
 800d438:	f7ff ff50 	bl	800d2dc <__b2d>
 800d43c:	9b01      	ldr	r3, [sp, #4]
 800d43e:	6919      	ldr	r1, [r3, #16]
 800d440:	9b00      	ldr	r3, [sp, #0]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	1ac9      	subs	r1, r1, r3
 800d446:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d44a:	1a9b      	subs	r3, r3, r2
 800d44c:	ec5b ab10 	vmov	sl, fp, d0
 800d450:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfce      	itee	gt
 800d458:	462a      	movgt	r2, r5
 800d45a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d45e:	465a      	movle	r2, fp
 800d460:	462f      	mov	r7, r5
 800d462:	46d9      	mov	r9, fp
 800d464:	bfcc      	ite	gt
 800d466:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d46a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d46e:	464b      	mov	r3, r9
 800d470:	4652      	mov	r2, sl
 800d472:	4620      	mov	r0, r4
 800d474:	4639      	mov	r1, r7
 800d476:	f7f3 fa09 	bl	800088c <__aeabi_ddiv>
 800d47a:	ec41 0b10 	vmov	d0, r0, r1
 800d47e:	b005      	add	sp, #20
 800d480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d484 <__copybits>:
 800d484:	3901      	subs	r1, #1
 800d486:	b570      	push	{r4, r5, r6, lr}
 800d488:	1149      	asrs	r1, r1, #5
 800d48a:	6914      	ldr	r4, [r2, #16]
 800d48c:	3101      	adds	r1, #1
 800d48e:	f102 0314 	add.w	r3, r2, #20
 800d492:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d496:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d49a:	1f05      	subs	r5, r0, #4
 800d49c:	42a3      	cmp	r3, r4
 800d49e:	d30c      	bcc.n	800d4ba <__copybits+0x36>
 800d4a0:	1aa3      	subs	r3, r4, r2
 800d4a2:	3b11      	subs	r3, #17
 800d4a4:	f023 0303 	bic.w	r3, r3, #3
 800d4a8:	3211      	adds	r2, #17
 800d4aa:	42a2      	cmp	r2, r4
 800d4ac:	bf88      	it	hi
 800d4ae:	2300      	movhi	r3, #0
 800d4b0:	4418      	add	r0, r3
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	4288      	cmp	r0, r1
 800d4b6:	d305      	bcc.n	800d4c4 <__copybits+0x40>
 800d4b8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800d4be:	f845 6f04 	str.w	r6, [r5, #4]!
 800d4c2:	e7eb      	b.n	800d49c <__copybits+0x18>
 800d4c4:	f840 3b04 	str.w	r3, [r0], #4
 800d4c8:	e7f4      	b.n	800d4b4 <__copybits+0x30>

0800d4ca <__any_on>:
 800d4ca:	f100 0214 	add.w	r2, r0, #20
 800d4ce:	6900      	ldr	r0, [r0, #16]
 800d4d0:	114b      	asrs	r3, r1, #5
 800d4d2:	4298      	cmp	r0, r3
 800d4d4:	b510      	push	{r4, lr}
 800d4d6:	db11      	blt.n	800d4fc <__any_on+0x32>
 800d4d8:	dd0a      	ble.n	800d4f0 <__any_on+0x26>
 800d4da:	f011 011f 	ands.w	r1, r1, #31
 800d4de:	d007      	beq.n	800d4f0 <__any_on+0x26>
 800d4e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d4e4:	fa24 f001 	lsr.w	r0, r4, r1
 800d4e8:	fa00 f101 	lsl.w	r1, r0, r1
 800d4ec:	428c      	cmp	r4, r1
 800d4ee:	d10b      	bne.n	800d508 <__any_on+0x3e>
 800d4f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d803      	bhi.n	800d500 <__any_on+0x36>
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	bd10      	pop	{r4, pc}
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	e7f7      	b.n	800d4f0 <__any_on+0x26>
 800d500:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d504:	2900      	cmp	r1, #0
 800d506:	d0f5      	beq.n	800d4f4 <__any_on+0x2a>
 800d508:	2001      	movs	r0, #1
 800d50a:	e7f6      	b.n	800d4fa <__any_on+0x30>

0800d50c <sulp>:
 800d50c:	b570      	push	{r4, r5, r6, lr}
 800d50e:	4604      	mov	r4, r0
 800d510:	460d      	mov	r5, r1
 800d512:	ec45 4b10 	vmov	d0, r4, r5
 800d516:	4616      	mov	r6, r2
 800d518:	f7ff feba 	bl	800d290 <__ulp>
 800d51c:	ec51 0b10 	vmov	r0, r1, d0
 800d520:	b17e      	cbz	r6, 800d542 <sulp+0x36>
 800d522:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d526:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dd09      	ble.n	800d542 <sulp+0x36>
 800d52e:	051b      	lsls	r3, r3, #20
 800d530:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d534:	2400      	movs	r4, #0
 800d536:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d53a:	4622      	mov	r2, r4
 800d53c:	462b      	mov	r3, r5
 800d53e:	f7f3 f87b 	bl	8000638 <__aeabi_dmul>
 800d542:	ec41 0b10 	vmov	d0, r0, r1
 800d546:	bd70      	pop	{r4, r5, r6, pc}

0800d548 <_strtod_l>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	b09f      	sub	sp, #124	@ 0x7c
 800d54e:	460c      	mov	r4, r1
 800d550:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d552:	2200      	movs	r2, #0
 800d554:	921a      	str	r2, [sp, #104]	@ 0x68
 800d556:	9005      	str	r0, [sp, #20]
 800d558:	f04f 0a00 	mov.w	sl, #0
 800d55c:	f04f 0b00 	mov.w	fp, #0
 800d560:	460a      	mov	r2, r1
 800d562:	9219      	str	r2, [sp, #100]	@ 0x64
 800d564:	7811      	ldrb	r1, [r2, #0]
 800d566:	292b      	cmp	r1, #43	@ 0x2b
 800d568:	d04a      	beq.n	800d600 <_strtod_l+0xb8>
 800d56a:	d838      	bhi.n	800d5de <_strtod_l+0x96>
 800d56c:	290d      	cmp	r1, #13
 800d56e:	d832      	bhi.n	800d5d6 <_strtod_l+0x8e>
 800d570:	2908      	cmp	r1, #8
 800d572:	d832      	bhi.n	800d5da <_strtod_l+0x92>
 800d574:	2900      	cmp	r1, #0
 800d576:	d03b      	beq.n	800d5f0 <_strtod_l+0xa8>
 800d578:	2200      	movs	r2, #0
 800d57a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d57c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d57e:	782a      	ldrb	r2, [r5, #0]
 800d580:	2a30      	cmp	r2, #48	@ 0x30
 800d582:	f040 80b3 	bne.w	800d6ec <_strtod_l+0x1a4>
 800d586:	786a      	ldrb	r2, [r5, #1]
 800d588:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d58c:	2a58      	cmp	r2, #88	@ 0x58
 800d58e:	d16e      	bne.n	800d66e <_strtod_l+0x126>
 800d590:	9302      	str	r3, [sp, #8]
 800d592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	ab1a      	add	r3, sp, #104	@ 0x68
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	4a8e      	ldr	r2, [pc, #568]	@ (800d7d4 <_strtod_l+0x28c>)
 800d59c:	9805      	ldr	r0, [sp, #20]
 800d59e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d5a0:	a919      	add	r1, sp, #100	@ 0x64
 800d5a2:	f001 faff 	bl	800eba4 <__gethex>
 800d5a6:	f010 060f 	ands.w	r6, r0, #15
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	d005      	beq.n	800d5ba <_strtod_l+0x72>
 800d5ae:	2e06      	cmp	r6, #6
 800d5b0:	d128      	bne.n	800d604 <_strtod_l+0xbc>
 800d5b2:	3501      	adds	r5, #1
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d5b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f040 858e 	bne.w	800e0de <_strtod_l+0xb96>
 800d5c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5c4:	b1cb      	cbz	r3, 800d5fa <_strtod_l+0xb2>
 800d5c6:	4652      	mov	r2, sl
 800d5c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d5cc:	ec43 2b10 	vmov	d0, r2, r3
 800d5d0:	b01f      	add	sp, #124	@ 0x7c
 800d5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d6:	2920      	cmp	r1, #32
 800d5d8:	d1ce      	bne.n	800d578 <_strtod_l+0x30>
 800d5da:	3201      	adds	r2, #1
 800d5dc:	e7c1      	b.n	800d562 <_strtod_l+0x1a>
 800d5de:	292d      	cmp	r1, #45	@ 0x2d
 800d5e0:	d1ca      	bne.n	800d578 <_strtod_l+0x30>
 800d5e2:	2101      	movs	r1, #1
 800d5e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d5e6:	1c51      	adds	r1, r2, #1
 800d5e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d5ea:	7852      	ldrb	r2, [r2, #1]
 800d5ec:	2a00      	cmp	r2, #0
 800d5ee:	d1c5      	bne.n	800d57c <_strtod_l+0x34>
 800d5f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f040 8570 	bne.w	800e0da <_strtod_l+0xb92>
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	465b      	mov	r3, fp
 800d5fe:	e7e5      	b.n	800d5cc <_strtod_l+0x84>
 800d600:	2100      	movs	r1, #0
 800d602:	e7ef      	b.n	800d5e4 <_strtod_l+0x9c>
 800d604:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d606:	b13a      	cbz	r2, 800d618 <_strtod_l+0xd0>
 800d608:	2135      	movs	r1, #53	@ 0x35
 800d60a:	a81c      	add	r0, sp, #112	@ 0x70
 800d60c:	f7ff ff3a 	bl	800d484 <__copybits>
 800d610:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d612:	9805      	ldr	r0, [sp, #20]
 800d614:	f7ff fb08 	bl	800cc28 <_Bfree>
 800d618:	3e01      	subs	r6, #1
 800d61a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d61c:	2e04      	cmp	r6, #4
 800d61e:	d806      	bhi.n	800d62e <_strtod_l+0xe6>
 800d620:	e8df f006 	tbb	[pc, r6]
 800d624:	201d0314 	.word	0x201d0314
 800d628:	14          	.byte	0x14
 800d629:	00          	.byte	0x00
 800d62a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d62e:	05e1      	lsls	r1, r4, #23
 800d630:	bf48      	it	mi
 800d632:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d636:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d63a:	0d1b      	lsrs	r3, r3, #20
 800d63c:	051b      	lsls	r3, r3, #20
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1bb      	bne.n	800d5ba <_strtod_l+0x72>
 800d642:	f7fe fb13 	bl	800bc6c <__errno>
 800d646:	2322      	movs	r3, #34	@ 0x22
 800d648:	6003      	str	r3, [r0, #0]
 800d64a:	e7b6      	b.n	800d5ba <_strtod_l+0x72>
 800d64c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d650:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d654:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d658:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d65c:	e7e7      	b.n	800d62e <_strtod_l+0xe6>
 800d65e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d7dc <_strtod_l+0x294>
 800d662:	e7e4      	b.n	800d62e <_strtod_l+0xe6>
 800d664:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d668:	f04f 3aff 	mov.w	sl, #4294967295
 800d66c:	e7df      	b.n	800d62e <_strtod_l+0xe6>
 800d66e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d670:	1c5a      	adds	r2, r3, #1
 800d672:	9219      	str	r2, [sp, #100]	@ 0x64
 800d674:	785b      	ldrb	r3, [r3, #1]
 800d676:	2b30      	cmp	r3, #48	@ 0x30
 800d678:	d0f9      	beq.n	800d66e <_strtod_l+0x126>
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d09d      	beq.n	800d5ba <_strtod_l+0x72>
 800d67e:	2301      	movs	r3, #1
 800d680:	9309      	str	r3, [sp, #36]	@ 0x24
 800d682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d684:	930c      	str	r3, [sp, #48]	@ 0x30
 800d686:	2300      	movs	r3, #0
 800d688:	9308      	str	r3, [sp, #32]
 800d68a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d68c:	461f      	mov	r7, r3
 800d68e:	220a      	movs	r2, #10
 800d690:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d692:	7805      	ldrb	r5, [r0, #0]
 800d694:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d698:	b2d9      	uxtb	r1, r3
 800d69a:	2909      	cmp	r1, #9
 800d69c:	d928      	bls.n	800d6f0 <_strtod_l+0x1a8>
 800d69e:	494e      	ldr	r1, [pc, #312]	@ (800d7d8 <_strtod_l+0x290>)
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	f001 f9a3 	bl	800e9ec <strncmp>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d032      	beq.n	800d710 <_strtod_l+0x1c8>
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	462a      	mov	r2, r5
 800d6ae:	4681      	mov	r9, r0
 800d6b0:	463d      	mov	r5, r7
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2a65      	cmp	r2, #101	@ 0x65
 800d6b6:	d001      	beq.n	800d6bc <_strtod_l+0x174>
 800d6b8:	2a45      	cmp	r2, #69	@ 0x45
 800d6ba:	d114      	bne.n	800d6e6 <_strtod_l+0x19e>
 800d6bc:	b91d      	cbnz	r5, 800d6c6 <_strtod_l+0x17e>
 800d6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6c0:	4302      	orrs	r2, r0
 800d6c2:	d095      	beq.n	800d5f0 <_strtod_l+0xa8>
 800d6c4:	2500      	movs	r5, #0
 800d6c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d6c8:	1c62      	adds	r2, r4, #1
 800d6ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6cc:	7862      	ldrb	r2, [r4, #1]
 800d6ce:	2a2b      	cmp	r2, #43	@ 0x2b
 800d6d0:	d077      	beq.n	800d7c2 <_strtod_l+0x27a>
 800d6d2:	2a2d      	cmp	r2, #45	@ 0x2d
 800d6d4:	d07b      	beq.n	800d7ce <_strtod_l+0x286>
 800d6d6:	f04f 0c00 	mov.w	ip, #0
 800d6da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d6de:	2909      	cmp	r1, #9
 800d6e0:	f240 8082 	bls.w	800d7e8 <_strtod_l+0x2a0>
 800d6e4:	9419      	str	r4, [sp, #100]	@ 0x64
 800d6e6:	f04f 0800 	mov.w	r8, #0
 800d6ea:	e0a2      	b.n	800d832 <_strtod_l+0x2ea>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e7c7      	b.n	800d680 <_strtod_l+0x138>
 800d6f0:	2f08      	cmp	r7, #8
 800d6f2:	bfd5      	itete	le
 800d6f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d6f6:	9908      	ldrgt	r1, [sp, #32]
 800d6f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d6fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d700:	f100 0001 	add.w	r0, r0, #1
 800d704:	bfd4      	ite	le
 800d706:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d708:	9308      	strgt	r3, [sp, #32]
 800d70a:	3701      	adds	r7, #1
 800d70c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d70e:	e7bf      	b.n	800d690 <_strtod_l+0x148>
 800d710:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	9219      	str	r2, [sp, #100]	@ 0x64
 800d716:	785a      	ldrb	r2, [r3, #1]
 800d718:	b37f      	cbz	r7, 800d77a <_strtod_l+0x232>
 800d71a:	4681      	mov	r9, r0
 800d71c:	463d      	mov	r5, r7
 800d71e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d722:	2b09      	cmp	r3, #9
 800d724:	d912      	bls.n	800d74c <_strtod_l+0x204>
 800d726:	2301      	movs	r3, #1
 800d728:	e7c4      	b.n	800d6b4 <_strtod_l+0x16c>
 800d72a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d730:	785a      	ldrb	r2, [r3, #1]
 800d732:	3001      	adds	r0, #1
 800d734:	2a30      	cmp	r2, #48	@ 0x30
 800d736:	d0f8      	beq.n	800d72a <_strtod_l+0x1e2>
 800d738:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d73c:	2b08      	cmp	r3, #8
 800d73e:	f200 84d3 	bhi.w	800e0e8 <_strtod_l+0xba0>
 800d742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d744:	930c      	str	r3, [sp, #48]	@ 0x30
 800d746:	4681      	mov	r9, r0
 800d748:	2000      	movs	r0, #0
 800d74a:	4605      	mov	r5, r0
 800d74c:	3a30      	subs	r2, #48	@ 0x30
 800d74e:	f100 0301 	add.w	r3, r0, #1
 800d752:	d02a      	beq.n	800d7aa <_strtod_l+0x262>
 800d754:	4499      	add	r9, r3
 800d756:	eb00 0c05 	add.w	ip, r0, r5
 800d75a:	462b      	mov	r3, r5
 800d75c:	210a      	movs	r1, #10
 800d75e:	4563      	cmp	r3, ip
 800d760:	d10d      	bne.n	800d77e <_strtod_l+0x236>
 800d762:	1c69      	adds	r1, r5, #1
 800d764:	4401      	add	r1, r0
 800d766:	4428      	add	r0, r5
 800d768:	2808      	cmp	r0, #8
 800d76a:	dc16      	bgt.n	800d79a <_strtod_l+0x252>
 800d76c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d76e:	230a      	movs	r3, #10
 800d770:	fb03 2300 	mla	r3, r3, r0, r2
 800d774:	930a      	str	r3, [sp, #40]	@ 0x28
 800d776:	2300      	movs	r3, #0
 800d778:	e018      	b.n	800d7ac <_strtod_l+0x264>
 800d77a:	4638      	mov	r0, r7
 800d77c:	e7da      	b.n	800d734 <_strtod_l+0x1ec>
 800d77e:	2b08      	cmp	r3, #8
 800d780:	f103 0301 	add.w	r3, r3, #1
 800d784:	dc03      	bgt.n	800d78e <_strtod_l+0x246>
 800d786:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d788:	434e      	muls	r6, r1
 800d78a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d78c:	e7e7      	b.n	800d75e <_strtod_l+0x216>
 800d78e:	2b10      	cmp	r3, #16
 800d790:	bfde      	ittt	le
 800d792:	9e08      	ldrle	r6, [sp, #32]
 800d794:	434e      	mulle	r6, r1
 800d796:	9608      	strle	r6, [sp, #32]
 800d798:	e7e1      	b.n	800d75e <_strtod_l+0x216>
 800d79a:	280f      	cmp	r0, #15
 800d79c:	dceb      	bgt.n	800d776 <_strtod_l+0x22e>
 800d79e:	9808      	ldr	r0, [sp, #32]
 800d7a0:	230a      	movs	r3, #10
 800d7a2:	fb03 2300 	mla	r3, r3, r0, r2
 800d7a6:	9308      	str	r3, [sp, #32]
 800d7a8:	e7e5      	b.n	800d776 <_strtod_l+0x22e>
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7ae:	1c50      	adds	r0, r2, #1
 800d7b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800d7b2:	7852      	ldrb	r2, [r2, #1]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	460d      	mov	r5, r1
 800d7b8:	e7b1      	b.n	800d71e <_strtod_l+0x1d6>
 800d7ba:	f04f 0900 	mov.w	r9, #0
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e77d      	b.n	800d6be <_strtod_l+0x176>
 800d7c2:	f04f 0c00 	mov.w	ip, #0
 800d7c6:	1ca2      	adds	r2, r4, #2
 800d7c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7ca:	78a2      	ldrb	r2, [r4, #2]
 800d7cc:	e785      	b.n	800d6da <_strtod_l+0x192>
 800d7ce:	f04f 0c01 	mov.w	ip, #1
 800d7d2:	e7f8      	b.n	800d7c6 <_strtod_l+0x27e>
 800d7d4:	08010dd0 	.word	0x08010dd0
 800d7d8:	08010db8 	.word	0x08010db8
 800d7dc:	7ff00000 	.word	0x7ff00000
 800d7e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7e2:	1c51      	adds	r1, r2, #1
 800d7e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d7e6:	7852      	ldrb	r2, [r2, #1]
 800d7e8:	2a30      	cmp	r2, #48	@ 0x30
 800d7ea:	d0f9      	beq.n	800d7e0 <_strtod_l+0x298>
 800d7ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d7f0:	2908      	cmp	r1, #8
 800d7f2:	f63f af78 	bhi.w	800d6e6 <_strtod_l+0x19e>
 800d7f6:	3a30      	subs	r2, #48	@ 0x30
 800d7f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d7fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d7fe:	f04f 080a 	mov.w	r8, #10
 800d802:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d804:	1c56      	adds	r6, r2, #1
 800d806:	9619      	str	r6, [sp, #100]	@ 0x64
 800d808:	7852      	ldrb	r2, [r2, #1]
 800d80a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d80e:	f1be 0f09 	cmp.w	lr, #9
 800d812:	d939      	bls.n	800d888 <_strtod_l+0x340>
 800d814:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d816:	1a76      	subs	r6, r6, r1
 800d818:	2e08      	cmp	r6, #8
 800d81a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d81e:	dc03      	bgt.n	800d828 <_strtod_l+0x2e0>
 800d820:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d822:	4588      	cmp	r8, r1
 800d824:	bfa8      	it	ge
 800d826:	4688      	movge	r8, r1
 800d828:	f1bc 0f00 	cmp.w	ip, #0
 800d82c:	d001      	beq.n	800d832 <_strtod_l+0x2ea>
 800d82e:	f1c8 0800 	rsb	r8, r8, #0
 800d832:	2d00      	cmp	r5, #0
 800d834:	d14e      	bne.n	800d8d4 <_strtod_l+0x38c>
 800d836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d838:	4308      	orrs	r0, r1
 800d83a:	f47f aebe 	bne.w	800d5ba <_strtod_l+0x72>
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f47f aed6 	bne.w	800d5f0 <_strtod_l+0xa8>
 800d844:	2a69      	cmp	r2, #105	@ 0x69
 800d846:	d028      	beq.n	800d89a <_strtod_l+0x352>
 800d848:	dc25      	bgt.n	800d896 <_strtod_l+0x34e>
 800d84a:	2a49      	cmp	r2, #73	@ 0x49
 800d84c:	d025      	beq.n	800d89a <_strtod_l+0x352>
 800d84e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d850:	f47f aece 	bne.w	800d5f0 <_strtod_l+0xa8>
 800d854:	499b      	ldr	r1, [pc, #620]	@ (800dac4 <_strtod_l+0x57c>)
 800d856:	a819      	add	r0, sp, #100	@ 0x64
 800d858:	f001 fbc6 	bl	800efe8 <__match>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	f43f aec7 	beq.w	800d5f0 <_strtod_l+0xa8>
 800d862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b28      	cmp	r3, #40	@ 0x28
 800d868:	d12e      	bne.n	800d8c8 <_strtod_l+0x380>
 800d86a:	4997      	ldr	r1, [pc, #604]	@ (800dac8 <_strtod_l+0x580>)
 800d86c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d86e:	a819      	add	r0, sp, #100	@ 0x64
 800d870:	f001 fbce 	bl	800f010 <__hexnan>
 800d874:	2805      	cmp	r0, #5
 800d876:	d127      	bne.n	800d8c8 <_strtod_l+0x380>
 800d878:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d87a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d87e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d882:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d886:	e698      	b.n	800d5ba <_strtod_l+0x72>
 800d888:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d88a:	fb08 2101 	mla	r1, r8, r1, r2
 800d88e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d892:	920e      	str	r2, [sp, #56]	@ 0x38
 800d894:	e7b5      	b.n	800d802 <_strtod_l+0x2ba>
 800d896:	2a6e      	cmp	r2, #110	@ 0x6e
 800d898:	e7da      	b.n	800d850 <_strtod_l+0x308>
 800d89a:	498c      	ldr	r1, [pc, #560]	@ (800dacc <_strtod_l+0x584>)
 800d89c:	a819      	add	r0, sp, #100	@ 0x64
 800d89e:	f001 fba3 	bl	800efe8 <__match>
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	f43f aea4 	beq.w	800d5f0 <_strtod_l+0xa8>
 800d8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8aa:	4989      	ldr	r1, [pc, #548]	@ (800dad0 <_strtod_l+0x588>)
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	a819      	add	r0, sp, #100	@ 0x64
 800d8b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d8b2:	f001 fb99 	bl	800efe8 <__match>
 800d8b6:	b910      	cbnz	r0, 800d8be <_strtod_l+0x376>
 800d8b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d8be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dae0 <_strtod_l+0x598>
 800d8c2:	f04f 0a00 	mov.w	sl, #0
 800d8c6:	e678      	b.n	800d5ba <_strtod_l+0x72>
 800d8c8:	4882      	ldr	r0, [pc, #520]	@ (800dad4 <_strtod_l+0x58c>)
 800d8ca:	f001 f8e1 	bl	800ea90 <nan>
 800d8ce:	ec5b ab10 	vmov	sl, fp, d0
 800d8d2:	e672      	b.n	800d5ba <_strtod_l+0x72>
 800d8d4:	eba8 0309 	sub.w	r3, r8, r9
 800d8d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d8da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8dc:	2f00      	cmp	r7, #0
 800d8de:	bf08      	it	eq
 800d8e0:	462f      	moveq	r7, r5
 800d8e2:	2d10      	cmp	r5, #16
 800d8e4:	462c      	mov	r4, r5
 800d8e6:	bfa8      	it	ge
 800d8e8:	2410      	movge	r4, #16
 800d8ea:	f7f2 fe2b 	bl	8000544 <__aeabi_ui2d>
 800d8ee:	2d09      	cmp	r5, #9
 800d8f0:	4682      	mov	sl, r0
 800d8f2:	468b      	mov	fp, r1
 800d8f4:	dc13      	bgt.n	800d91e <_strtod_l+0x3d6>
 800d8f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f43f ae5e 	beq.w	800d5ba <_strtod_l+0x72>
 800d8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d900:	dd78      	ble.n	800d9f4 <_strtod_l+0x4ac>
 800d902:	2b16      	cmp	r3, #22
 800d904:	dc5f      	bgt.n	800d9c6 <_strtod_l+0x47e>
 800d906:	4974      	ldr	r1, [pc, #464]	@ (800dad8 <_strtod_l+0x590>)
 800d908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d90c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d910:	4652      	mov	r2, sl
 800d912:	465b      	mov	r3, fp
 800d914:	f7f2 fe90 	bl	8000638 <__aeabi_dmul>
 800d918:	4682      	mov	sl, r0
 800d91a:	468b      	mov	fp, r1
 800d91c:	e64d      	b.n	800d5ba <_strtod_l+0x72>
 800d91e:	4b6e      	ldr	r3, [pc, #440]	@ (800dad8 <_strtod_l+0x590>)
 800d920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d924:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d928:	f7f2 fe86 	bl	8000638 <__aeabi_dmul>
 800d92c:	4682      	mov	sl, r0
 800d92e:	9808      	ldr	r0, [sp, #32]
 800d930:	468b      	mov	fp, r1
 800d932:	f7f2 fe07 	bl	8000544 <__aeabi_ui2d>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	4650      	mov	r0, sl
 800d93c:	4659      	mov	r1, fp
 800d93e:	f7f2 fcc5 	bl	80002cc <__adddf3>
 800d942:	2d0f      	cmp	r5, #15
 800d944:	4682      	mov	sl, r0
 800d946:	468b      	mov	fp, r1
 800d948:	ddd5      	ble.n	800d8f6 <_strtod_l+0x3ae>
 800d94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d94c:	1b2c      	subs	r4, r5, r4
 800d94e:	441c      	add	r4, r3
 800d950:	2c00      	cmp	r4, #0
 800d952:	f340 8096 	ble.w	800da82 <_strtod_l+0x53a>
 800d956:	f014 030f 	ands.w	r3, r4, #15
 800d95a:	d00a      	beq.n	800d972 <_strtod_l+0x42a>
 800d95c:	495e      	ldr	r1, [pc, #376]	@ (800dad8 <_strtod_l+0x590>)
 800d95e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d962:	4652      	mov	r2, sl
 800d964:	465b      	mov	r3, fp
 800d966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d96a:	f7f2 fe65 	bl	8000638 <__aeabi_dmul>
 800d96e:	4682      	mov	sl, r0
 800d970:	468b      	mov	fp, r1
 800d972:	f034 040f 	bics.w	r4, r4, #15
 800d976:	d073      	beq.n	800da60 <_strtod_l+0x518>
 800d978:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d97c:	dd48      	ble.n	800da10 <_strtod_l+0x4c8>
 800d97e:	2400      	movs	r4, #0
 800d980:	46a0      	mov	r8, r4
 800d982:	940a      	str	r4, [sp, #40]	@ 0x28
 800d984:	46a1      	mov	r9, r4
 800d986:	9a05      	ldr	r2, [sp, #20]
 800d988:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dae0 <_strtod_l+0x598>
 800d98c:	2322      	movs	r3, #34	@ 0x22
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	f04f 0a00 	mov.w	sl, #0
 800d994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d996:	2b00      	cmp	r3, #0
 800d998:	f43f ae0f 	beq.w	800d5ba <_strtod_l+0x72>
 800d99c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d99e:	9805      	ldr	r0, [sp, #20]
 800d9a0:	f7ff f942 	bl	800cc28 <_Bfree>
 800d9a4:	9805      	ldr	r0, [sp, #20]
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	f7ff f93e 	bl	800cc28 <_Bfree>
 800d9ac:	9805      	ldr	r0, [sp, #20]
 800d9ae:	4641      	mov	r1, r8
 800d9b0:	f7ff f93a 	bl	800cc28 <_Bfree>
 800d9b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d9b6:	9805      	ldr	r0, [sp, #20]
 800d9b8:	f7ff f936 	bl	800cc28 <_Bfree>
 800d9bc:	9805      	ldr	r0, [sp, #20]
 800d9be:	4621      	mov	r1, r4
 800d9c0:	f7ff f932 	bl	800cc28 <_Bfree>
 800d9c4:	e5f9      	b.n	800d5ba <_strtod_l+0x72>
 800d9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	dbbc      	blt.n	800d94a <_strtod_l+0x402>
 800d9d0:	4c41      	ldr	r4, [pc, #260]	@ (800dad8 <_strtod_l+0x590>)
 800d9d2:	f1c5 050f 	rsb	r5, r5, #15
 800d9d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d9da:	4652      	mov	r2, sl
 800d9dc:	465b      	mov	r3, fp
 800d9de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9e2:	f7f2 fe29 	bl	8000638 <__aeabi_dmul>
 800d9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9e8:	1b5d      	subs	r5, r3, r5
 800d9ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d9ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d9f2:	e78f      	b.n	800d914 <_strtod_l+0x3cc>
 800d9f4:	3316      	adds	r3, #22
 800d9f6:	dba8      	blt.n	800d94a <_strtod_l+0x402>
 800d9f8:	4b37      	ldr	r3, [pc, #220]	@ (800dad8 <_strtod_l+0x590>)
 800d9fa:	eba9 0808 	sub.w	r8, r9, r8
 800d9fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800da02:	e9d8 2300 	ldrd	r2, r3, [r8]
 800da06:	4650      	mov	r0, sl
 800da08:	4659      	mov	r1, fp
 800da0a:	f7f2 ff3f 	bl	800088c <__aeabi_ddiv>
 800da0e:	e783      	b.n	800d918 <_strtod_l+0x3d0>
 800da10:	4b32      	ldr	r3, [pc, #200]	@ (800dadc <_strtod_l+0x594>)
 800da12:	9308      	str	r3, [sp, #32]
 800da14:	2300      	movs	r3, #0
 800da16:	1124      	asrs	r4, r4, #4
 800da18:	4650      	mov	r0, sl
 800da1a:	4659      	mov	r1, fp
 800da1c:	461e      	mov	r6, r3
 800da1e:	2c01      	cmp	r4, #1
 800da20:	dc21      	bgt.n	800da66 <_strtod_l+0x51e>
 800da22:	b10b      	cbz	r3, 800da28 <_strtod_l+0x4e0>
 800da24:	4682      	mov	sl, r0
 800da26:	468b      	mov	fp, r1
 800da28:	492c      	ldr	r1, [pc, #176]	@ (800dadc <_strtod_l+0x594>)
 800da2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800da2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800da32:	4652      	mov	r2, sl
 800da34:	465b      	mov	r3, fp
 800da36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da3a:	f7f2 fdfd 	bl	8000638 <__aeabi_dmul>
 800da3e:	4b28      	ldr	r3, [pc, #160]	@ (800dae0 <_strtod_l+0x598>)
 800da40:	460a      	mov	r2, r1
 800da42:	400b      	ands	r3, r1
 800da44:	4927      	ldr	r1, [pc, #156]	@ (800dae4 <_strtod_l+0x59c>)
 800da46:	428b      	cmp	r3, r1
 800da48:	4682      	mov	sl, r0
 800da4a:	d898      	bhi.n	800d97e <_strtod_l+0x436>
 800da4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800da50:	428b      	cmp	r3, r1
 800da52:	bf86      	itte	hi
 800da54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dae8 <_strtod_l+0x5a0>
 800da58:	f04f 3aff 	movhi.w	sl, #4294967295
 800da5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800da60:	2300      	movs	r3, #0
 800da62:	9308      	str	r3, [sp, #32]
 800da64:	e07a      	b.n	800db5c <_strtod_l+0x614>
 800da66:	07e2      	lsls	r2, r4, #31
 800da68:	d505      	bpl.n	800da76 <_strtod_l+0x52e>
 800da6a:	9b08      	ldr	r3, [sp, #32]
 800da6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da70:	f7f2 fde2 	bl	8000638 <__aeabi_dmul>
 800da74:	2301      	movs	r3, #1
 800da76:	9a08      	ldr	r2, [sp, #32]
 800da78:	3208      	adds	r2, #8
 800da7a:	3601      	adds	r6, #1
 800da7c:	1064      	asrs	r4, r4, #1
 800da7e:	9208      	str	r2, [sp, #32]
 800da80:	e7cd      	b.n	800da1e <_strtod_l+0x4d6>
 800da82:	d0ed      	beq.n	800da60 <_strtod_l+0x518>
 800da84:	4264      	negs	r4, r4
 800da86:	f014 020f 	ands.w	r2, r4, #15
 800da8a:	d00a      	beq.n	800daa2 <_strtod_l+0x55a>
 800da8c:	4b12      	ldr	r3, [pc, #72]	@ (800dad8 <_strtod_l+0x590>)
 800da8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da92:	4650      	mov	r0, sl
 800da94:	4659      	mov	r1, fp
 800da96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9a:	f7f2 fef7 	bl	800088c <__aeabi_ddiv>
 800da9e:	4682      	mov	sl, r0
 800daa0:	468b      	mov	fp, r1
 800daa2:	1124      	asrs	r4, r4, #4
 800daa4:	d0dc      	beq.n	800da60 <_strtod_l+0x518>
 800daa6:	2c1f      	cmp	r4, #31
 800daa8:	dd20      	ble.n	800daec <_strtod_l+0x5a4>
 800daaa:	2400      	movs	r4, #0
 800daac:	46a0      	mov	r8, r4
 800daae:	940a      	str	r4, [sp, #40]	@ 0x28
 800dab0:	46a1      	mov	r9, r4
 800dab2:	9a05      	ldr	r2, [sp, #20]
 800dab4:	2322      	movs	r3, #34	@ 0x22
 800dab6:	f04f 0a00 	mov.w	sl, #0
 800daba:	f04f 0b00 	mov.w	fp, #0
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	e768      	b.n	800d994 <_strtod_l+0x44c>
 800dac2:	bf00      	nop
 800dac4:	08010b12 	.word	0x08010b12
 800dac8:	08010dbc 	.word	0x08010dbc
 800dacc:	08010b0a 	.word	0x08010b0a
 800dad0:	08010bee 	.word	0x08010bee
 800dad4:	08010bea 	.word	0x08010bea
 800dad8:	08010cf0 	.word	0x08010cf0
 800dadc:	08010cc8 	.word	0x08010cc8
 800dae0:	7ff00000 	.word	0x7ff00000
 800dae4:	7ca00000 	.word	0x7ca00000
 800dae8:	7fefffff 	.word	0x7fefffff
 800daec:	f014 0310 	ands.w	r3, r4, #16
 800daf0:	bf18      	it	ne
 800daf2:	236a      	movne	r3, #106	@ 0x6a
 800daf4:	4ea9      	ldr	r6, [pc, #676]	@ (800dd9c <_strtod_l+0x854>)
 800daf6:	9308      	str	r3, [sp, #32]
 800daf8:	4650      	mov	r0, sl
 800dafa:	4659      	mov	r1, fp
 800dafc:	2300      	movs	r3, #0
 800dafe:	07e2      	lsls	r2, r4, #31
 800db00:	d504      	bpl.n	800db0c <_strtod_l+0x5c4>
 800db02:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db06:	f7f2 fd97 	bl	8000638 <__aeabi_dmul>
 800db0a:	2301      	movs	r3, #1
 800db0c:	1064      	asrs	r4, r4, #1
 800db0e:	f106 0608 	add.w	r6, r6, #8
 800db12:	d1f4      	bne.n	800dafe <_strtod_l+0x5b6>
 800db14:	b10b      	cbz	r3, 800db1a <_strtod_l+0x5d2>
 800db16:	4682      	mov	sl, r0
 800db18:	468b      	mov	fp, r1
 800db1a:	9b08      	ldr	r3, [sp, #32]
 800db1c:	b1b3      	cbz	r3, 800db4c <_strtod_l+0x604>
 800db1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800db22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800db26:	2b00      	cmp	r3, #0
 800db28:	4659      	mov	r1, fp
 800db2a:	dd0f      	ble.n	800db4c <_strtod_l+0x604>
 800db2c:	2b1f      	cmp	r3, #31
 800db2e:	dd55      	ble.n	800dbdc <_strtod_l+0x694>
 800db30:	2b34      	cmp	r3, #52	@ 0x34
 800db32:	bfde      	ittt	le
 800db34:	f04f 33ff 	movle.w	r3, #4294967295
 800db38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800db3c:	4093      	lslle	r3, r2
 800db3e:	f04f 0a00 	mov.w	sl, #0
 800db42:	bfcc      	ite	gt
 800db44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800db48:	ea03 0b01 	andle.w	fp, r3, r1
 800db4c:	2200      	movs	r2, #0
 800db4e:	2300      	movs	r3, #0
 800db50:	4650      	mov	r0, sl
 800db52:	4659      	mov	r1, fp
 800db54:	f7f2 ffd8 	bl	8000b08 <__aeabi_dcmpeq>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d1a6      	bne.n	800daaa <_strtod_l+0x562>
 800db5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800db62:	9805      	ldr	r0, [sp, #20]
 800db64:	462b      	mov	r3, r5
 800db66:	463a      	mov	r2, r7
 800db68:	f7ff f8c6 	bl	800ccf8 <__s2b>
 800db6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800db6e:	2800      	cmp	r0, #0
 800db70:	f43f af05 	beq.w	800d97e <_strtod_l+0x436>
 800db74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db76:	2a00      	cmp	r2, #0
 800db78:	eba9 0308 	sub.w	r3, r9, r8
 800db7c:	bfa8      	it	ge
 800db7e:	2300      	movge	r3, #0
 800db80:	9312      	str	r3, [sp, #72]	@ 0x48
 800db82:	2400      	movs	r4, #0
 800db84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800db88:	9316      	str	r3, [sp, #88]	@ 0x58
 800db8a:	46a0      	mov	r8, r4
 800db8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db8e:	9805      	ldr	r0, [sp, #20]
 800db90:	6859      	ldr	r1, [r3, #4]
 800db92:	f7ff f809 	bl	800cba8 <_Balloc>
 800db96:	4681      	mov	r9, r0
 800db98:	2800      	cmp	r0, #0
 800db9a:	f43f aef4 	beq.w	800d986 <_strtod_l+0x43e>
 800db9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dba0:	691a      	ldr	r2, [r3, #16]
 800dba2:	3202      	adds	r2, #2
 800dba4:	f103 010c 	add.w	r1, r3, #12
 800dba8:	0092      	lsls	r2, r2, #2
 800dbaa:	300c      	adds	r0, #12
 800dbac:	f000 ff62 	bl	800ea74 <memcpy>
 800dbb0:	ec4b ab10 	vmov	d0, sl, fp
 800dbb4:	9805      	ldr	r0, [sp, #20]
 800dbb6:	aa1c      	add	r2, sp, #112	@ 0x70
 800dbb8:	a91b      	add	r1, sp, #108	@ 0x6c
 800dbba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dbbe:	f7ff fbd7 	bl	800d370 <__d2b>
 800dbc2:	901a      	str	r0, [sp, #104]	@ 0x68
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	f43f aede 	beq.w	800d986 <_strtod_l+0x43e>
 800dbca:	9805      	ldr	r0, [sp, #20]
 800dbcc:	2101      	movs	r1, #1
 800dbce:	f7ff f929 	bl	800ce24 <__i2b>
 800dbd2:	4680      	mov	r8, r0
 800dbd4:	b948      	cbnz	r0, 800dbea <_strtod_l+0x6a2>
 800dbd6:	f04f 0800 	mov.w	r8, #0
 800dbda:	e6d4      	b.n	800d986 <_strtod_l+0x43e>
 800dbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe4:	ea03 0a0a 	and.w	sl, r3, sl
 800dbe8:	e7b0      	b.n	800db4c <_strtod_l+0x604>
 800dbea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dbec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dbee:	2d00      	cmp	r5, #0
 800dbf0:	bfab      	itete	ge
 800dbf2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dbf4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dbf6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dbf8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dbfa:	bfac      	ite	ge
 800dbfc:	18ef      	addge	r7, r5, r3
 800dbfe:	1b5e      	sublt	r6, r3, r5
 800dc00:	9b08      	ldr	r3, [sp, #32]
 800dc02:	1aed      	subs	r5, r5, r3
 800dc04:	4415      	add	r5, r2
 800dc06:	4b66      	ldr	r3, [pc, #408]	@ (800dda0 <_strtod_l+0x858>)
 800dc08:	3d01      	subs	r5, #1
 800dc0a:	429d      	cmp	r5, r3
 800dc0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dc10:	da50      	bge.n	800dcb4 <_strtod_l+0x76c>
 800dc12:	1b5b      	subs	r3, r3, r5
 800dc14:	2b1f      	cmp	r3, #31
 800dc16:	eba2 0203 	sub.w	r2, r2, r3
 800dc1a:	f04f 0101 	mov.w	r1, #1
 800dc1e:	dc3d      	bgt.n	800dc9c <_strtod_l+0x754>
 800dc20:	fa01 f303 	lsl.w	r3, r1, r3
 800dc24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc26:	2300      	movs	r3, #0
 800dc28:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc2a:	18bd      	adds	r5, r7, r2
 800dc2c:	9b08      	ldr	r3, [sp, #32]
 800dc2e:	42af      	cmp	r7, r5
 800dc30:	4416      	add	r6, r2
 800dc32:	441e      	add	r6, r3
 800dc34:	463b      	mov	r3, r7
 800dc36:	bfa8      	it	ge
 800dc38:	462b      	movge	r3, r5
 800dc3a:	42b3      	cmp	r3, r6
 800dc3c:	bfa8      	it	ge
 800dc3e:	4633      	movge	r3, r6
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	bfc2      	ittt	gt
 800dc44:	1aed      	subgt	r5, r5, r3
 800dc46:	1af6      	subgt	r6, r6, r3
 800dc48:	1aff      	subgt	r7, r7, r3
 800dc4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	dd16      	ble.n	800dc7e <_strtod_l+0x736>
 800dc50:	4641      	mov	r1, r8
 800dc52:	9805      	ldr	r0, [sp, #20]
 800dc54:	461a      	mov	r2, r3
 800dc56:	f7ff f9a5 	bl	800cfa4 <__pow5mult>
 800dc5a:	4680      	mov	r8, r0
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d0ba      	beq.n	800dbd6 <_strtod_l+0x68e>
 800dc60:	4601      	mov	r1, r0
 800dc62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dc64:	9805      	ldr	r0, [sp, #20]
 800dc66:	f7ff f8f3 	bl	800ce50 <__multiply>
 800dc6a:	900e      	str	r0, [sp, #56]	@ 0x38
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f43f ae8a 	beq.w	800d986 <_strtod_l+0x43e>
 800dc72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc74:	9805      	ldr	r0, [sp, #20]
 800dc76:	f7fe ffd7 	bl	800cc28 <_Bfree>
 800dc7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc7e:	2d00      	cmp	r5, #0
 800dc80:	dc1d      	bgt.n	800dcbe <_strtod_l+0x776>
 800dc82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	dd23      	ble.n	800dcd0 <_strtod_l+0x788>
 800dc88:	4649      	mov	r1, r9
 800dc8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dc8c:	9805      	ldr	r0, [sp, #20]
 800dc8e:	f7ff f989 	bl	800cfa4 <__pow5mult>
 800dc92:	4681      	mov	r9, r0
 800dc94:	b9e0      	cbnz	r0, 800dcd0 <_strtod_l+0x788>
 800dc96:	f04f 0900 	mov.w	r9, #0
 800dc9a:	e674      	b.n	800d986 <_strtod_l+0x43e>
 800dc9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dca0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dca4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dca8:	35e2      	adds	r5, #226	@ 0xe2
 800dcaa:	fa01 f305 	lsl.w	r3, r1, r5
 800dcae:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dcb2:	e7ba      	b.n	800dc2a <_strtod_l+0x6e2>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcb8:	2301      	movs	r3, #1
 800dcba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dcbc:	e7b5      	b.n	800dc2a <_strtod_l+0x6e2>
 800dcbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dcc0:	9805      	ldr	r0, [sp, #20]
 800dcc2:	462a      	mov	r2, r5
 800dcc4:	f7ff f9c8 	bl	800d058 <__lshift>
 800dcc8:	901a      	str	r0, [sp, #104]	@ 0x68
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d1d9      	bne.n	800dc82 <_strtod_l+0x73a>
 800dcce:	e65a      	b.n	800d986 <_strtod_l+0x43e>
 800dcd0:	2e00      	cmp	r6, #0
 800dcd2:	dd07      	ble.n	800dce4 <_strtod_l+0x79c>
 800dcd4:	4649      	mov	r1, r9
 800dcd6:	9805      	ldr	r0, [sp, #20]
 800dcd8:	4632      	mov	r2, r6
 800dcda:	f7ff f9bd 	bl	800d058 <__lshift>
 800dcde:	4681      	mov	r9, r0
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d0d8      	beq.n	800dc96 <_strtod_l+0x74e>
 800dce4:	2f00      	cmp	r7, #0
 800dce6:	dd08      	ble.n	800dcfa <_strtod_l+0x7b2>
 800dce8:	4641      	mov	r1, r8
 800dcea:	9805      	ldr	r0, [sp, #20]
 800dcec:	463a      	mov	r2, r7
 800dcee:	f7ff f9b3 	bl	800d058 <__lshift>
 800dcf2:	4680      	mov	r8, r0
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	f43f ae46 	beq.w	800d986 <_strtod_l+0x43e>
 800dcfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dcfc:	9805      	ldr	r0, [sp, #20]
 800dcfe:	464a      	mov	r2, r9
 800dd00:	f7ff fa32 	bl	800d168 <__mdiff>
 800dd04:	4604      	mov	r4, r0
 800dd06:	2800      	cmp	r0, #0
 800dd08:	f43f ae3d 	beq.w	800d986 <_strtod_l+0x43e>
 800dd0c:	68c3      	ldr	r3, [r0, #12]
 800dd0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd10:	2300      	movs	r3, #0
 800dd12:	60c3      	str	r3, [r0, #12]
 800dd14:	4641      	mov	r1, r8
 800dd16:	f7ff fa0b 	bl	800d130 <__mcmp>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	da46      	bge.n	800ddac <_strtod_l+0x864>
 800dd1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd20:	ea53 030a 	orrs.w	r3, r3, sl
 800dd24:	d16c      	bne.n	800de00 <_strtod_l+0x8b8>
 800dd26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d168      	bne.n	800de00 <_strtod_l+0x8b8>
 800dd2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd32:	0d1b      	lsrs	r3, r3, #20
 800dd34:	051b      	lsls	r3, r3, #20
 800dd36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dd3a:	d961      	bls.n	800de00 <_strtod_l+0x8b8>
 800dd3c:	6963      	ldr	r3, [r4, #20]
 800dd3e:	b913      	cbnz	r3, 800dd46 <_strtod_l+0x7fe>
 800dd40:	6923      	ldr	r3, [r4, #16]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	dd5c      	ble.n	800de00 <_strtod_l+0x8b8>
 800dd46:	4621      	mov	r1, r4
 800dd48:	2201      	movs	r2, #1
 800dd4a:	9805      	ldr	r0, [sp, #20]
 800dd4c:	f7ff f984 	bl	800d058 <__lshift>
 800dd50:	4641      	mov	r1, r8
 800dd52:	4604      	mov	r4, r0
 800dd54:	f7ff f9ec 	bl	800d130 <__mcmp>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	dd51      	ble.n	800de00 <_strtod_l+0x8b8>
 800dd5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd60:	9a08      	ldr	r2, [sp, #32]
 800dd62:	0d1b      	lsrs	r3, r3, #20
 800dd64:	051b      	lsls	r3, r3, #20
 800dd66:	2a00      	cmp	r2, #0
 800dd68:	d06b      	beq.n	800de42 <_strtod_l+0x8fa>
 800dd6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dd6e:	d868      	bhi.n	800de42 <_strtod_l+0x8fa>
 800dd70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dd74:	f67f ae9d 	bls.w	800dab2 <_strtod_l+0x56a>
 800dd78:	4b0a      	ldr	r3, [pc, #40]	@ (800dda4 <_strtod_l+0x85c>)
 800dd7a:	4650      	mov	r0, sl
 800dd7c:	4659      	mov	r1, fp
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f7f2 fc5a 	bl	8000638 <__aeabi_dmul>
 800dd84:	4b08      	ldr	r3, [pc, #32]	@ (800dda8 <_strtod_l+0x860>)
 800dd86:	400b      	ands	r3, r1
 800dd88:	4682      	mov	sl, r0
 800dd8a:	468b      	mov	fp, r1
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f47f ae05 	bne.w	800d99c <_strtod_l+0x454>
 800dd92:	9a05      	ldr	r2, [sp, #20]
 800dd94:	2322      	movs	r3, #34	@ 0x22
 800dd96:	6013      	str	r3, [r2, #0]
 800dd98:	e600      	b.n	800d99c <_strtod_l+0x454>
 800dd9a:	bf00      	nop
 800dd9c:	08010de8 	.word	0x08010de8
 800dda0:	fffffc02 	.word	0xfffffc02
 800dda4:	39500000 	.word	0x39500000
 800dda8:	7ff00000 	.word	0x7ff00000
 800ddac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ddb0:	d165      	bne.n	800de7e <_strtod_l+0x936>
 800ddb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ddb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddb8:	b35a      	cbz	r2, 800de12 <_strtod_l+0x8ca>
 800ddba:	4a9f      	ldr	r2, [pc, #636]	@ (800e038 <_strtod_l+0xaf0>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d12b      	bne.n	800de18 <_strtod_l+0x8d0>
 800ddc0:	9b08      	ldr	r3, [sp, #32]
 800ddc2:	4651      	mov	r1, sl
 800ddc4:	b303      	cbz	r3, 800de08 <_strtod_l+0x8c0>
 800ddc6:	4b9d      	ldr	r3, [pc, #628]	@ (800e03c <_strtod_l+0xaf4>)
 800ddc8:	465a      	mov	r2, fp
 800ddca:	4013      	ands	r3, r2
 800ddcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ddd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd4:	d81b      	bhi.n	800de0e <_strtod_l+0x8c6>
 800ddd6:	0d1b      	lsrs	r3, r3, #20
 800ddd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dddc:	fa02 f303 	lsl.w	r3, r2, r3
 800dde0:	4299      	cmp	r1, r3
 800dde2:	d119      	bne.n	800de18 <_strtod_l+0x8d0>
 800dde4:	4b96      	ldr	r3, [pc, #600]	@ (800e040 <_strtod_l+0xaf8>)
 800dde6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d102      	bne.n	800ddf2 <_strtod_l+0x8aa>
 800ddec:	3101      	adds	r1, #1
 800ddee:	f43f adca 	beq.w	800d986 <_strtod_l+0x43e>
 800ddf2:	4b92      	ldr	r3, [pc, #584]	@ (800e03c <_strtod_l+0xaf4>)
 800ddf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddf6:	401a      	ands	r2, r3
 800ddf8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ddfc:	f04f 0a00 	mov.w	sl, #0
 800de00:	9b08      	ldr	r3, [sp, #32]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1b8      	bne.n	800dd78 <_strtod_l+0x830>
 800de06:	e5c9      	b.n	800d99c <_strtod_l+0x454>
 800de08:	f04f 33ff 	mov.w	r3, #4294967295
 800de0c:	e7e8      	b.n	800dde0 <_strtod_l+0x898>
 800de0e:	4613      	mov	r3, r2
 800de10:	e7e6      	b.n	800dde0 <_strtod_l+0x898>
 800de12:	ea53 030a 	orrs.w	r3, r3, sl
 800de16:	d0a1      	beq.n	800dd5c <_strtod_l+0x814>
 800de18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de1a:	b1db      	cbz	r3, 800de54 <_strtod_l+0x90c>
 800de1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de1e:	4213      	tst	r3, r2
 800de20:	d0ee      	beq.n	800de00 <_strtod_l+0x8b8>
 800de22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de24:	9a08      	ldr	r2, [sp, #32]
 800de26:	4650      	mov	r0, sl
 800de28:	4659      	mov	r1, fp
 800de2a:	b1bb      	cbz	r3, 800de5c <_strtod_l+0x914>
 800de2c:	f7ff fb6e 	bl	800d50c <sulp>
 800de30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de34:	ec53 2b10 	vmov	r2, r3, d0
 800de38:	f7f2 fa48 	bl	80002cc <__adddf3>
 800de3c:	4682      	mov	sl, r0
 800de3e:	468b      	mov	fp, r1
 800de40:	e7de      	b.n	800de00 <_strtod_l+0x8b8>
 800de42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800de46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800de4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800de4e:	f04f 3aff 	mov.w	sl, #4294967295
 800de52:	e7d5      	b.n	800de00 <_strtod_l+0x8b8>
 800de54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de56:	ea13 0f0a 	tst.w	r3, sl
 800de5a:	e7e1      	b.n	800de20 <_strtod_l+0x8d8>
 800de5c:	f7ff fb56 	bl	800d50c <sulp>
 800de60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de64:	ec53 2b10 	vmov	r2, r3, d0
 800de68:	f7f2 fa2e 	bl	80002c8 <__aeabi_dsub>
 800de6c:	2200      	movs	r2, #0
 800de6e:	2300      	movs	r3, #0
 800de70:	4682      	mov	sl, r0
 800de72:	468b      	mov	fp, r1
 800de74:	f7f2 fe48 	bl	8000b08 <__aeabi_dcmpeq>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d0c1      	beq.n	800de00 <_strtod_l+0x8b8>
 800de7c:	e619      	b.n	800dab2 <_strtod_l+0x56a>
 800de7e:	4641      	mov	r1, r8
 800de80:	4620      	mov	r0, r4
 800de82:	f7ff facd 	bl	800d420 <__ratio>
 800de86:	ec57 6b10 	vmov	r6, r7, d0
 800de8a:	2200      	movs	r2, #0
 800de8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800de90:	4630      	mov	r0, r6
 800de92:	4639      	mov	r1, r7
 800de94:	f7f2 fe4c 	bl	8000b30 <__aeabi_dcmple>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d06f      	beq.n	800df7c <_strtod_l+0xa34>
 800de9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d17a      	bne.n	800df98 <_strtod_l+0xa50>
 800dea2:	f1ba 0f00 	cmp.w	sl, #0
 800dea6:	d158      	bne.n	800df5a <_strtod_l+0xa12>
 800dea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800deaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d15a      	bne.n	800df68 <_strtod_l+0xa20>
 800deb2:	4b64      	ldr	r3, [pc, #400]	@ (800e044 <_strtod_l+0xafc>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	4630      	mov	r0, r6
 800deb8:	4639      	mov	r1, r7
 800deba:	f7f2 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d159      	bne.n	800df76 <_strtod_l+0xa2e>
 800dec2:	4630      	mov	r0, r6
 800dec4:	4639      	mov	r1, r7
 800dec6:	4b60      	ldr	r3, [pc, #384]	@ (800e048 <_strtod_l+0xb00>)
 800dec8:	2200      	movs	r2, #0
 800deca:	f7f2 fbb5 	bl	8000638 <__aeabi_dmul>
 800dece:	4606      	mov	r6, r0
 800ded0:	460f      	mov	r7, r1
 800ded2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ded6:	9606      	str	r6, [sp, #24]
 800ded8:	9307      	str	r3, [sp, #28]
 800deda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dede:	4d57      	ldr	r5, [pc, #348]	@ (800e03c <_strtod_l+0xaf4>)
 800dee0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dee6:	401d      	ands	r5, r3
 800dee8:	4b58      	ldr	r3, [pc, #352]	@ (800e04c <_strtod_l+0xb04>)
 800deea:	429d      	cmp	r5, r3
 800deec:	f040 80b2 	bne.w	800e054 <_strtod_l+0xb0c>
 800def0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800def2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800def6:	ec4b ab10 	vmov	d0, sl, fp
 800defa:	f7ff f9c9 	bl	800d290 <__ulp>
 800defe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df02:	ec51 0b10 	vmov	r0, r1, d0
 800df06:	f7f2 fb97 	bl	8000638 <__aeabi_dmul>
 800df0a:	4652      	mov	r2, sl
 800df0c:	465b      	mov	r3, fp
 800df0e:	f7f2 f9dd 	bl	80002cc <__adddf3>
 800df12:	460b      	mov	r3, r1
 800df14:	4949      	ldr	r1, [pc, #292]	@ (800e03c <_strtod_l+0xaf4>)
 800df16:	4a4e      	ldr	r2, [pc, #312]	@ (800e050 <_strtod_l+0xb08>)
 800df18:	4019      	ands	r1, r3
 800df1a:	4291      	cmp	r1, r2
 800df1c:	4682      	mov	sl, r0
 800df1e:	d942      	bls.n	800dfa6 <_strtod_l+0xa5e>
 800df20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800df22:	4b47      	ldr	r3, [pc, #284]	@ (800e040 <_strtod_l+0xaf8>)
 800df24:	429a      	cmp	r2, r3
 800df26:	d103      	bne.n	800df30 <_strtod_l+0x9e8>
 800df28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df2a:	3301      	adds	r3, #1
 800df2c:	f43f ad2b 	beq.w	800d986 <_strtod_l+0x43e>
 800df30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e040 <_strtod_l+0xaf8>
 800df34:	f04f 3aff 	mov.w	sl, #4294967295
 800df38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df3a:	9805      	ldr	r0, [sp, #20]
 800df3c:	f7fe fe74 	bl	800cc28 <_Bfree>
 800df40:	9805      	ldr	r0, [sp, #20]
 800df42:	4649      	mov	r1, r9
 800df44:	f7fe fe70 	bl	800cc28 <_Bfree>
 800df48:	9805      	ldr	r0, [sp, #20]
 800df4a:	4641      	mov	r1, r8
 800df4c:	f7fe fe6c 	bl	800cc28 <_Bfree>
 800df50:	9805      	ldr	r0, [sp, #20]
 800df52:	4621      	mov	r1, r4
 800df54:	f7fe fe68 	bl	800cc28 <_Bfree>
 800df58:	e618      	b.n	800db8c <_strtod_l+0x644>
 800df5a:	f1ba 0f01 	cmp.w	sl, #1
 800df5e:	d103      	bne.n	800df68 <_strtod_l+0xa20>
 800df60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df62:	2b00      	cmp	r3, #0
 800df64:	f43f ada5 	beq.w	800dab2 <_strtod_l+0x56a>
 800df68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e018 <_strtod_l+0xad0>
 800df6c:	4f35      	ldr	r7, [pc, #212]	@ (800e044 <_strtod_l+0xafc>)
 800df6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800df72:	2600      	movs	r6, #0
 800df74:	e7b1      	b.n	800deda <_strtod_l+0x992>
 800df76:	4f34      	ldr	r7, [pc, #208]	@ (800e048 <_strtod_l+0xb00>)
 800df78:	2600      	movs	r6, #0
 800df7a:	e7aa      	b.n	800ded2 <_strtod_l+0x98a>
 800df7c:	4b32      	ldr	r3, [pc, #200]	@ (800e048 <_strtod_l+0xb00>)
 800df7e:	4630      	mov	r0, r6
 800df80:	4639      	mov	r1, r7
 800df82:	2200      	movs	r2, #0
 800df84:	f7f2 fb58 	bl	8000638 <__aeabi_dmul>
 800df88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df8a:	4606      	mov	r6, r0
 800df8c:	460f      	mov	r7, r1
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d09f      	beq.n	800ded2 <_strtod_l+0x98a>
 800df92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800df96:	e7a0      	b.n	800deda <_strtod_l+0x992>
 800df98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e020 <_strtod_l+0xad8>
 800df9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dfa0:	ec57 6b17 	vmov	r6, r7, d7
 800dfa4:	e799      	b.n	800deda <_strtod_l+0x992>
 800dfa6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dfaa:	9b08      	ldr	r3, [sp, #32]
 800dfac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1c1      	bne.n	800df38 <_strtod_l+0x9f0>
 800dfb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dfb8:	0d1b      	lsrs	r3, r3, #20
 800dfba:	051b      	lsls	r3, r3, #20
 800dfbc:	429d      	cmp	r5, r3
 800dfbe:	d1bb      	bne.n	800df38 <_strtod_l+0x9f0>
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	4639      	mov	r1, r7
 800dfc4:	f7f2 fee8 	bl	8000d98 <__aeabi_d2lz>
 800dfc8:	f7f2 fb08 	bl	80005dc <__aeabi_l2d>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	4639      	mov	r1, r7
 800dfd4:	f7f2 f978 	bl	80002c8 <__aeabi_dsub>
 800dfd8:	460b      	mov	r3, r1
 800dfda:	4602      	mov	r2, r0
 800dfdc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dfe0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfe6:	ea46 060a 	orr.w	r6, r6, sl
 800dfea:	431e      	orrs	r6, r3
 800dfec:	d06f      	beq.n	800e0ce <_strtod_l+0xb86>
 800dfee:	a30e      	add	r3, pc, #56	@ (adr r3, 800e028 <_strtod_l+0xae0>)
 800dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff4:	f7f2 fd92 	bl	8000b1c <__aeabi_dcmplt>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f47f accf 	bne.w	800d99c <_strtod_l+0x454>
 800dffe:	a30c      	add	r3, pc, #48	@ (adr r3, 800e030 <_strtod_l+0xae8>)
 800e000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e008:	f7f2 fda6 	bl	8000b58 <__aeabi_dcmpgt>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d093      	beq.n	800df38 <_strtod_l+0x9f0>
 800e010:	e4c4      	b.n	800d99c <_strtod_l+0x454>
 800e012:	bf00      	nop
 800e014:	f3af 8000 	nop.w
 800e018:	00000000 	.word	0x00000000
 800e01c:	bff00000 	.word	0xbff00000
 800e020:	00000000 	.word	0x00000000
 800e024:	3ff00000 	.word	0x3ff00000
 800e028:	94a03595 	.word	0x94a03595
 800e02c:	3fdfffff 	.word	0x3fdfffff
 800e030:	35afe535 	.word	0x35afe535
 800e034:	3fe00000 	.word	0x3fe00000
 800e038:	000fffff 	.word	0x000fffff
 800e03c:	7ff00000 	.word	0x7ff00000
 800e040:	7fefffff 	.word	0x7fefffff
 800e044:	3ff00000 	.word	0x3ff00000
 800e048:	3fe00000 	.word	0x3fe00000
 800e04c:	7fe00000 	.word	0x7fe00000
 800e050:	7c9fffff 	.word	0x7c9fffff
 800e054:	9b08      	ldr	r3, [sp, #32]
 800e056:	b323      	cbz	r3, 800e0a2 <_strtod_l+0xb5a>
 800e058:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e05c:	d821      	bhi.n	800e0a2 <_strtod_l+0xb5a>
 800e05e:	a328      	add	r3, pc, #160	@ (adr r3, 800e100 <_strtod_l+0xbb8>)
 800e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e064:	4630      	mov	r0, r6
 800e066:	4639      	mov	r1, r7
 800e068:	f7f2 fd62 	bl	8000b30 <__aeabi_dcmple>
 800e06c:	b1a0      	cbz	r0, 800e098 <_strtod_l+0xb50>
 800e06e:	4639      	mov	r1, r7
 800e070:	4630      	mov	r0, r6
 800e072:	f7f2 fdb9 	bl	8000be8 <__aeabi_d2uiz>
 800e076:	2801      	cmp	r0, #1
 800e078:	bf38      	it	cc
 800e07a:	2001      	movcc	r0, #1
 800e07c:	f7f2 fa62 	bl	8000544 <__aeabi_ui2d>
 800e080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e082:	4606      	mov	r6, r0
 800e084:	460f      	mov	r7, r1
 800e086:	b9fb      	cbnz	r3, 800e0c8 <_strtod_l+0xb80>
 800e088:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e08c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e08e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e090:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e094:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e098:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e09a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e09e:	1b5b      	subs	r3, r3, r5
 800e0a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e0a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e0a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e0aa:	f7ff f8f1 	bl	800d290 <__ulp>
 800e0ae:	4650      	mov	r0, sl
 800e0b0:	ec53 2b10 	vmov	r2, r3, d0
 800e0b4:	4659      	mov	r1, fp
 800e0b6:	f7f2 fabf 	bl	8000638 <__aeabi_dmul>
 800e0ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e0be:	f7f2 f905 	bl	80002cc <__adddf3>
 800e0c2:	4682      	mov	sl, r0
 800e0c4:	468b      	mov	fp, r1
 800e0c6:	e770      	b.n	800dfaa <_strtod_l+0xa62>
 800e0c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e0cc:	e7e0      	b.n	800e090 <_strtod_l+0xb48>
 800e0ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800e108 <_strtod_l+0xbc0>)
 800e0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d4:	f7f2 fd22 	bl	8000b1c <__aeabi_dcmplt>
 800e0d8:	e798      	b.n	800e00c <_strtod_l+0xac4>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e0e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0e2:	6013      	str	r3, [r2, #0]
 800e0e4:	f7ff ba6d 	b.w	800d5c2 <_strtod_l+0x7a>
 800e0e8:	2a65      	cmp	r2, #101	@ 0x65
 800e0ea:	f43f ab66 	beq.w	800d7ba <_strtod_l+0x272>
 800e0ee:	2a45      	cmp	r2, #69	@ 0x45
 800e0f0:	f43f ab63 	beq.w	800d7ba <_strtod_l+0x272>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	f7ff bb9e 	b.w	800d836 <_strtod_l+0x2ee>
 800e0fa:	bf00      	nop
 800e0fc:	f3af 8000 	nop.w
 800e100:	ffc00000 	.word	0xffc00000
 800e104:	41dfffff 	.word	0x41dfffff
 800e108:	94a03595 	.word	0x94a03595
 800e10c:	3fcfffff 	.word	0x3fcfffff

0800e110 <_strtod_r>:
 800e110:	4b01      	ldr	r3, [pc, #4]	@ (800e118 <_strtod_r+0x8>)
 800e112:	f7ff ba19 	b.w	800d548 <_strtod_l>
 800e116:	bf00      	nop
 800e118:	2000008c 	.word	0x2000008c

0800e11c <__ssputs_r>:
 800e11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e120:	688e      	ldr	r6, [r1, #8]
 800e122:	461f      	mov	r7, r3
 800e124:	42be      	cmp	r6, r7
 800e126:	680b      	ldr	r3, [r1, #0]
 800e128:	4682      	mov	sl, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	4690      	mov	r8, r2
 800e12e:	d82d      	bhi.n	800e18c <__ssputs_r+0x70>
 800e130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e138:	d026      	beq.n	800e188 <__ssputs_r+0x6c>
 800e13a:	6965      	ldr	r5, [r4, #20]
 800e13c:	6909      	ldr	r1, [r1, #16]
 800e13e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e142:	eba3 0901 	sub.w	r9, r3, r1
 800e146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e14a:	1c7b      	adds	r3, r7, #1
 800e14c:	444b      	add	r3, r9
 800e14e:	106d      	asrs	r5, r5, #1
 800e150:	429d      	cmp	r5, r3
 800e152:	bf38      	it	cc
 800e154:	461d      	movcc	r5, r3
 800e156:	0553      	lsls	r3, r2, #21
 800e158:	d527      	bpl.n	800e1aa <__ssputs_r+0x8e>
 800e15a:	4629      	mov	r1, r5
 800e15c:	f7fe fc98 	bl	800ca90 <_malloc_r>
 800e160:	4606      	mov	r6, r0
 800e162:	b360      	cbz	r0, 800e1be <__ssputs_r+0xa2>
 800e164:	6921      	ldr	r1, [r4, #16]
 800e166:	464a      	mov	r2, r9
 800e168:	f000 fc84 	bl	800ea74 <memcpy>
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e176:	81a3      	strh	r3, [r4, #12]
 800e178:	6126      	str	r6, [r4, #16]
 800e17a:	6165      	str	r5, [r4, #20]
 800e17c:	444e      	add	r6, r9
 800e17e:	eba5 0509 	sub.w	r5, r5, r9
 800e182:	6026      	str	r6, [r4, #0]
 800e184:	60a5      	str	r5, [r4, #8]
 800e186:	463e      	mov	r6, r7
 800e188:	42be      	cmp	r6, r7
 800e18a:	d900      	bls.n	800e18e <__ssputs_r+0x72>
 800e18c:	463e      	mov	r6, r7
 800e18e:	6820      	ldr	r0, [r4, #0]
 800e190:	4632      	mov	r2, r6
 800e192:	4641      	mov	r1, r8
 800e194:	f000 fc10 	bl	800e9b8 <memmove>
 800e198:	68a3      	ldr	r3, [r4, #8]
 800e19a:	1b9b      	subs	r3, r3, r6
 800e19c:	60a3      	str	r3, [r4, #8]
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	4433      	add	r3, r6
 800e1a2:	6023      	str	r3, [r4, #0]
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1aa:	462a      	mov	r2, r5
 800e1ac:	f000 ffdd 	bl	800f16a <_realloc_r>
 800e1b0:	4606      	mov	r6, r0
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d1e0      	bne.n	800e178 <__ssputs_r+0x5c>
 800e1b6:	6921      	ldr	r1, [r4, #16]
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	f7fe fbf5 	bl	800c9a8 <_free_r>
 800e1be:	230c      	movs	r3, #12
 800e1c0:	f8ca 3000 	str.w	r3, [sl]
 800e1c4:	89a3      	ldrh	r3, [r4, #12]
 800e1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ca:	81a3      	strh	r3, [r4, #12]
 800e1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d0:	e7e9      	b.n	800e1a6 <__ssputs_r+0x8a>
	...

0800e1d4 <_svfiprintf_r>:
 800e1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d8:	4698      	mov	r8, r3
 800e1da:	898b      	ldrh	r3, [r1, #12]
 800e1dc:	061b      	lsls	r3, r3, #24
 800e1de:	b09d      	sub	sp, #116	@ 0x74
 800e1e0:	4607      	mov	r7, r0
 800e1e2:	460d      	mov	r5, r1
 800e1e4:	4614      	mov	r4, r2
 800e1e6:	d510      	bpl.n	800e20a <_svfiprintf_r+0x36>
 800e1e8:	690b      	ldr	r3, [r1, #16]
 800e1ea:	b973      	cbnz	r3, 800e20a <_svfiprintf_r+0x36>
 800e1ec:	2140      	movs	r1, #64	@ 0x40
 800e1ee:	f7fe fc4f 	bl	800ca90 <_malloc_r>
 800e1f2:	6028      	str	r0, [r5, #0]
 800e1f4:	6128      	str	r0, [r5, #16]
 800e1f6:	b930      	cbnz	r0, 800e206 <_svfiprintf_r+0x32>
 800e1f8:	230c      	movs	r3, #12
 800e1fa:	603b      	str	r3, [r7, #0]
 800e1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e200:	b01d      	add	sp, #116	@ 0x74
 800e202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e206:	2340      	movs	r3, #64	@ 0x40
 800e208:	616b      	str	r3, [r5, #20]
 800e20a:	2300      	movs	r3, #0
 800e20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e20e:	2320      	movs	r3, #32
 800e210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e214:	f8cd 800c 	str.w	r8, [sp, #12]
 800e218:	2330      	movs	r3, #48	@ 0x30
 800e21a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e3b8 <_svfiprintf_r+0x1e4>
 800e21e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e222:	f04f 0901 	mov.w	r9, #1
 800e226:	4623      	mov	r3, r4
 800e228:	469a      	mov	sl, r3
 800e22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e22e:	b10a      	cbz	r2, 800e234 <_svfiprintf_r+0x60>
 800e230:	2a25      	cmp	r2, #37	@ 0x25
 800e232:	d1f9      	bne.n	800e228 <_svfiprintf_r+0x54>
 800e234:	ebba 0b04 	subs.w	fp, sl, r4
 800e238:	d00b      	beq.n	800e252 <_svfiprintf_r+0x7e>
 800e23a:	465b      	mov	r3, fp
 800e23c:	4622      	mov	r2, r4
 800e23e:	4629      	mov	r1, r5
 800e240:	4638      	mov	r0, r7
 800e242:	f7ff ff6b 	bl	800e11c <__ssputs_r>
 800e246:	3001      	adds	r0, #1
 800e248:	f000 80a7 	beq.w	800e39a <_svfiprintf_r+0x1c6>
 800e24c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e24e:	445a      	add	r2, fp
 800e250:	9209      	str	r2, [sp, #36]	@ 0x24
 800e252:	f89a 3000 	ldrb.w	r3, [sl]
 800e256:	2b00      	cmp	r3, #0
 800e258:	f000 809f 	beq.w	800e39a <_svfiprintf_r+0x1c6>
 800e25c:	2300      	movs	r3, #0
 800e25e:	f04f 32ff 	mov.w	r2, #4294967295
 800e262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e266:	f10a 0a01 	add.w	sl, sl, #1
 800e26a:	9304      	str	r3, [sp, #16]
 800e26c:	9307      	str	r3, [sp, #28]
 800e26e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e272:	931a      	str	r3, [sp, #104]	@ 0x68
 800e274:	4654      	mov	r4, sl
 800e276:	2205      	movs	r2, #5
 800e278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e27c:	484e      	ldr	r0, [pc, #312]	@ (800e3b8 <_svfiprintf_r+0x1e4>)
 800e27e:	f7f1 ffc7 	bl	8000210 <memchr>
 800e282:	9a04      	ldr	r2, [sp, #16]
 800e284:	b9d8      	cbnz	r0, 800e2be <_svfiprintf_r+0xea>
 800e286:	06d0      	lsls	r0, r2, #27
 800e288:	bf44      	itt	mi
 800e28a:	2320      	movmi	r3, #32
 800e28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e290:	0711      	lsls	r1, r2, #28
 800e292:	bf44      	itt	mi
 800e294:	232b      	movmi	r3, #43	@ 0x2b
 800e296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e29a:	f89a 3000 	ldrb.w	r3, [sl]
 800e29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2a0:	d015      	beq.n	800e2ce <_svfiprintf_r+0xfa>
 800e2a2:	9a07      	ldr	r2, [sp, #28]
 800e2a4:	4654      	mov	r4, sl
 800e2a6:	2000      	movs	r0, #0
 800e2a8:	f04f 0c0a 	mov.w	ip, #10
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2b2:	3b30      	subs	r3, #48	@ 0x30
 800e2b4:	2b09      	cmp	r3, #9
 800e2b6:	d94b      	bls.n	800e350 <_svfiprintf_r+0x17c>
 800e2b8:	b1b0      	cbz	r0, 800e2e8 <_svfiprintf_r+0x114>
 800e2ba:	9207      	str	r2, [sp, #28]
 800e2bc:	e014      	b.n	800e2e8 <_svfiprintf_r+0x114>
 800e2be:	eba0 0308 	sub.w	r3, r0, r8
 800e2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	9304      	str	r3, [sp, #16]
 800e2ca:	46a2      	mov	sl, r4
 800e2cc:	e7d2      	b.n	800e274 <_svfiprintf_r+0xa0>
 800e2ce:	9b03      	ldr	r3, [sp, #12]
 800e2d0:	1d19      	adds	r1, r3, #4
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	9103      	str	r1, [sp, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	bfbb      	ittet	lt
 800e2da:	425b      	neglt	r3, r3
 800e2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e2e0:	9307      	strge	r3, [sp, #28]
 800e2e2:	9307      	strlt	r3, [sp, #28]
 800e2e4:	bfb8      	it	lt
 800e2e6:	9204      	strlt	r2, [sp, #16]
 800e2e8:	7823      	ldrb	r3, [r4, #0]
 800e2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2ec:	d10a      	bne.n	800e304 <_svfiprintf_r+0x130>
 800e2ee:	7863      	ldrb	r3, [r4, #1]
 800e2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2f2:	d132      	bne.n	800e35a <_svfiprintf_r+0x186>
 800e2f4:	9b03      	ldr	r3, [sp, #12]
 800e2f6:	1d1a      	adds	r2, r3, #4
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	9203      	str	r2, [sp, #12]
 800e2fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e300:	3402      	adds	r4, #2
 800e302:	9305      	str	r3, [sp, #20]
 800e304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e3c8 <_svfiprintf_r+0x1f4>
 800e308:	7821      	ldrb	r1, [r4, #0]
 800e30a:	2203      	movs	r2, #3
 800e30c:	4650      	mov	r0, sl
 800e30e:	f7f1 ff7f 	bl	8000210 <memchr>
 800e312:	b138      	cbz	r0, 800e324 <_svfiprintf_r+0x150>
 800e314:	9b04      	ldr	r3, [sp, #16]
 800e316:	eba0 000a 	sub.w	r0, r0, sl
 800e31a:	2240      	movs	r2, #64	@ 0x40
 800e31c:	4082      	lsls	r2, r0
 800e31e:	4313      	orrs	r3, r2
 800e320:	3401      	adds	r4, #1
 800e322:	9304      	str	r3, [sp, #16]
 800e324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e328:	4824      	ldr	r0, [pc, #144]	@ (800e3bc <_svfiprintf_r+0x1e8>)
 800e32a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e32e:	2206      	movs	r2, #6
 800e330:	f7f1 ff6e 	bl	8000210 <memchr>
 800e334:	2800      	cmp	r0, #0
 800e336:	d036      	beq.n	800e3a6 <_svfiprintf_r+0x1d2>
 800e338:	4b21      	ldr	r3, [pc, #132]	@ (800e3c0 <_svfiprintf_r+0x1ec>)
 800e33a:	bb1b      	cbnz	r3, 800e384 <_svfiprintf_r+0x1b0>
 800e33c:	9b03      	ldr	r3, [sp, #12]
 800e33e:	3307      	adds	r3, #7
 800e340:	f023 0307 	bic.w	r3, r3, #7
 800e344:	3308      	adds	r3, #8
 800e346:	9303      	str	r3, [sp, #12]
 800e348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e34a:	4433      	add	r3, r6
 800e34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e34e:	e76a      	b.n	800e226 <_svfiprintf_r+0x52>
 800e350:	fb0c 3202 	mla	r2, ip, r2, r3
 800e354:	460c      	mov	r4, r1
 800e356:	2001      	movs	r0, #1
 800e358:	e7a8      	b.n	800e2ac <_svfiprintf_r+0xd8>
 800e35a:	2300      	movs	r3, #0
 800e35c:	3401      	adds	r4, #1
 800e35e:	9305      	str	r3, [sp, #20]
 800e360:	4619      	mov	r1, r3
 800e362:	f04f 0c0a 	mov.w	ip, #10
 800e366:	4620      	mov	r0, r4
 800e368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e36c:	3a30      	subs	r2, #48	@ 0x30
 800e36e:	2a09      	cmp	r2, #9
 800e370:	d903      	bls.n	800e37a <_svfiprintf_r+0x1a6>
 800e372:	2b00      	cmp	r3, #0
 800e374:	d0c6      	beq.n	800e304 <_svfiprintf_r+0x130>
 800e376:	9105      	str	r1, [sp, #20]
 800e378:	e7c4      	b.n	800e304 <_svfiprintf_r+0x130>
 800e37a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e37e:	4604      	mov	r4, r0
 800e380:	2301      	movs	r3, #1
 800e382:	e7f0      	b.n	800e366 <_svfiprintf_r+0x192>
 800e384:	ab03      	add	r3, sp, #12
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	462a      	mov	r2, r5
 800e38a:	4b0e      	ldr	r3, [pc, #56]	@ (800e3c4 <_svfiprintf_r+0x1f0>)
 800e38c:	a904      	add	r1, sp, #16
 800e38e:	4638      	mov	r0, r7
 800e390:	f7fc fbd2 	bl	800ab38 <_printf_float>
 800e394:	1c42      	adds	r2, r0, #1
 800e396:	4606      	mov	r6, r0
 800e398:	d1d6      	bne.n	800e348 <_svfiprintf_r+0x174>
 800e39a:	89ab      	ldrh	r3, [r5, #12]
 800e39c:	065b      	lsls	r3, r3, #25
 800e39e:	f53f af2d 	bmi.w	800e1fc <_svfiprintf_r+0x28>
 800e3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3a4:	e72c      	b.n	800e200 <_svfiprintf_r+0x2c>
 800e3a6:	ab03      	add	r3, sp, #12
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	462a      	mov	r2, r5
 800e3ac:	4b05      	ldr	r3, [pc, #20]	@ (800e3c4 <_svfiprintf_r+0x1f0>)
 800e3ae:	a904      	add	r1, sp, #16
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	f7fc fe59 	bl	800b068 <_printf_i>
 800e3b6:	e7ed      	b.n	800e394 <_svfiprintf_r+0x1c0>
 800e3b8:	08010e10 	.word	0x08010e10
 800e3bc:	08010e1a 	.word	0x08010e1a
 800e3c0:	0800ab39 	.word	0x0800ab39
 800e3c4:	0800e11d 	.word	0x0800e11d
 800e3c8:	08010e16 	.word	0x08010e16

0800e3cc <__sfputc_r>:
 800e3cc:	6893      	ldr	r3, [r2, #8]
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	b410      	push	{r4}
 800e3d4:	6093      	str	r3, [r2, #8]
 800e3d6:	da08      	bge.n	800e3ea <__sfputc_r+0x1e>
 800e3d8:	6994      	ldr	r4, [r2, #24]
 800e3da:	42a3      	cmp	r3, r4
 800e3dc:	db01      	blt.n	800e3e2 <__sfputc_r+0x16>
 800e3de:	290a      	cmp	r1, #10
 800e3e0:	d103      	bne.n	800e3ea <__sfputc_r+0x1e>
 800e3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3e6:	f000 ba53 	b.w	800e890 <__swbuf_r>
 800e3ea:	6813      	ldr	r3, [r2, #0]
 800e3ec:	1c58      	adds	r0, r3, #1
 800e3ee:	6010      	str	r0, [r2, #0]
 800e3f0:	7019      	strb	r1, [r3, #0]
 800e3f2:	4608      	mov	r0, r1
 800e3f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3f8:	4770      	bx	lr

0800e3fa <__sfputs_r>:
 800e3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	460f      	mov	r7, r1
 800e400:	4614      	mov	r4, r2
 800e402:	18d5      	adds	r5, r2, r3
 800e404:	42ac      	cmp	r4, r5
 800e406:	d101      	bne.n	800e40c <__sfputs_r+0x12>
 800e408:	2000      	movs	r0, #0
 800e40a:	e007      	b.n	800e41c <__sfputs_r+0x22>
 800e40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e410:	463a      	mov	r2, r7
 800e412:	4630      	mov	r0, r6
 800e414:	f7ff ffda 	bl	800e3cc <__sfputc_r>
 800e418:	1c43      	adds	r3, r0, #1
 800e41a:	d1f3      	bne.n	800e404 <__sfputs_r+0xa>
 800e41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e420 <_vfiprintf_r>:
 800e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	460d      	mov	r5, r1
 800e426:	b09d      	sub	sp, #116	@ 0x74
 800e428:	4614      	mov	r4, r2
 800e42a:	4698      	mov	r8, r3
 800e42c:	4606      	mov	r6, r0
 800e42e:	b118      	cbz	r0, 800e438 <_vfiprintf_r+0x18>
 800e430:	6a03      	ldr	r3, [r0, #32]
 800e432:	b90b      	cbnz	r3, 800e438 <_vfiprintf_r+0x18>
 800e434:	f7fd f9d8 	bl	800b7e8 <__sinit>
 800e438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e43a:	07d9      	lsls	r1, r3, #31
 800e43c:	d405      	bmi.n	800e44a <_vfiprintf_r+0x2a>
 800e43e:	89ab      	ldrh	r3, [r5, #12]
 800e440:	059a      	lsls	r2, r3, #22
 800e442:	d402      	bmi.n	800e44a <_vfiprintf_r+0x2a>
 800e444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e446:	f7fd fc3c 	bl	800bcc2 <__retarget_lock_acquire_recursive>
 800e44a:	89ab      	ldrh	r3, [r5, #12]
 800e44c:	071b      	lsls	r3, r3, #28
 800e44e:	d501      	bpl.n	800e454 <_vfiprintf_r+0x34>
 800e450:	692b      	ldr	r3, [r5, #16]
 800e452:	b99b      	cbnz	r3, 800e47c <_vfiprintf_r+0x5c>
 800e454:	4629      	mov	r1, r5
 800e456:	4630      	mov	r0, r6
 800e458:	f000 fa58 	bl	800e90c <__swsetup_r>
 800e45c:	b170      	cbz	r0, 800e47c <_vfiprintf_r+0x5c>
 800e45e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e460:	07dc      	lsls	r4, r3, #31
 800e462:	d504      	bpl.n	800e46e <_vfiprintf_r+0x4e>
 800e464:	f04f 30ff 	mov.w	r0, #4294967295
 800e468:	b01d      	add	sp, #116	@ 0x74
 800e46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e46e:	89ab      	ldrh	r3, [r5, #12]
 800e470:	0598      	lsls	r0, r3, #22
 800e472:	d4f7      	bmi.n	800e464 <_vfiprintf_r+0x44>
 800e474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e476:	f7fd fc25 	bl	800bcc4 <__retarget_lock_release_recursive>
 800e47a:	e7f3      	b.n	800e464 <_vfiprintf_r+0x44>
 800e47c:	2300      	movs	r3, #0
 800e47e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e480:	2320      	movs	r3, #32
 800e482:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e486:	f8cd 800c 	str.w	r8, [sp, #12]
 800e48a:	2330      	movs	r3, #48	@ 0x30
 800e48c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e63c <_vfiprintf_r+0x21c>
 800e490:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e494:	f04f 0901 	mov.w	r9, #1
 800e498:	4623      	mov	r3, r4
 800e49a:	469a      	mov	sl, r3
 800e49c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4a0:	b10a      	cbz	r2, 800e4a6 <_vfiprintf_r+0x86>
 800e4a2:	2a25      	cmp	r2, #37	@ 0x25
 800e4a4:	d1f9      	bne.n	800e49a <_vfiprintf_r+0x7a>
 800e4a6:	ebba 0b04 	subs.w	fp, sl, r4
 800e4aa:	d00b      	beq.n	800e4c4 <_vfiprintf_r+0xa4>
 800e4ac:	465b      	mov	r3, fp
 800e4ae:	4622      	mov	r2, r4
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f7ff ffa1 	bl	800e3fa <__sfputs_r>
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	f000 80a7 	beq.w	800e60c <_vfiprintf_r+0x1ec>
 800e4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4c0:	445a      	add	r2, fp
 800e4c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 809f 	beq.w	800e60c <_vfiprintf_r+0x1ec>
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4d8:	f10a 0a01 	add.w	sl, sl, #1
 800e4dc:	9304      	str	r3, [sp, #16]
 800e4de:	9307      	str	r3, [sp, #28]
 800e4e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4e6:	4654      	mov	r4, sl
 800e4e8:	2205      	movs	r2, #5
 800e4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ee:	4853      	ldr	r0, [pc, #332]	@ (800e63c <_vfiprintf_r+0x21c>)
 800e4f0:	f7f1 fe8e 	bl	8000210 <memchr>
 800e4f4:	9a04      	ldr	r2, [sp, #16]
 800e4f6:	b9d8      	cbnz	r0, 800e530 <_vfiprintf_r+0x110>
 800e4f8:	06d1      	lsls	r1, r2, #27
 800e4fa:	bf44      	itt	mi
 800e4fc:	2320      	movmi	r3, #32
 800e4fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e502:	0713      	lsls	r3, r2, #28
 800e504:	bf44      	itt	mi
 800e506:	232b      	movmi	r3, #43	@ 0x2b
 800e508:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e50c:	f89a 3000 	ldrb.w	r3, [sl]
 800e510:	2b2a      	cmp	r3, #42	@ 0x2a
 800e512:	d015      	beq.n	800e540 <_vfiprintf_r+0x120>
 800e514:	9a07      	ldr	r2, [sp, #28]
 800e516:	4654      	mov	r4, sl
 800e518:	2000      	movs	r0, #0
 800e51a:	f04f 0c0a 	mov.w	ip, #10
 800e51e:	4621      	mov	r1, r4
 800e520:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e524:	3b30      	subs	r3, #48	@ 0x30
 800e526:	2b09      	cmp	r3, #9
 800e528:	d94b      	bls.n	800e5c2 <_vfiprintf_r+0x1a2>
 800e52a:	b1b0      	cbz	r0, 800e55a <_vfiprintf_r+0x13a>
 800e52c:	9207      	str	r2, [sp, #28]
 800e52e:	e014      	b.n	800e55a <_vfiprintf_r+0x13a>
 800e530:	eba0 0308 	sub.w	r3, r0, r8
 800e534:	fa09 f303 	lsl.w	r3, r9, r3
 800e538:	4313      	orrs	r3, r2
 800e53a:	9304      	str	r3, [sp, #16]
 800e53c:	46a2      	mov	sl, r4
 800e53e:	e7d2      	b.n	800e4e6 <_vfiprintf_r+0xc6>
 800e540:	9b03      	ldr	r3, [sp, #12]
 800e542:	1d19      	adds	r1, r3, #4
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	9103      	str	r1, [sp, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	bfbb      	ittet	lt
 800e54c:	425b      	neglt	r3, r3
 800e54e:	f042 0202 	orrlt.w	r2, r2, #2
 800e552:	9307      	strge	r3, [sp, #28]
 800e554:	9307      	strlt	r3, [sp, #28]
 800e556:	bfb8      	it	lt
 800e558:	9204      	strlt	r2, [sp, #16]
 800e55a:	7823      	ldrb	r3, [r4, #0]
 800e55c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e55e:	d10a      	bne.n	800e576 <_vfiprintf_r+0x156>
 800e560:	7863      	ldrb	r3, [r4, #1]
 800e562:	2b2a      	cmp	r3, #42	@ 0x2a
 800e564:	d132      	bne.n	800e5cc <_vfiprintf_r+0x1ac>
 800e566:	9b03      	ldr	r3, [sp, #12]
 800e568:	1d1a      	adds	r2, r3, #4
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	9203      	str	r2, [sp, #12]
 800e56e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e572:	3402      	adds	r4, #2
 800e574:	9305      	str	r3, [sp, #20]
 800e576:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e64c <_vfiprintf_r+0x22c>
 800e57a:	7821      	ldrb	r1, [r4, #0]
 800e57c:	2203      	movs	r2, #3
 800e57e:	4650      	mov	r0, sl
 800e580:	f7f1 fe46 	bl	8000210 <memchr>
 800e584:	b138      	cbz	r0, 800e596 <_vfiprintf_r+0x176>
 800e586:	9b04      	ldr	r3, [sp, #16]
 800e588:	eba0 000a 	sub.w	r0, r0, sl
 800e58c:	2240      	movs	r2, #64	@ 0x40
 800e58e:	4082      	lsls	r2, r0
 800e590:	4313      	orrs	r3, r2
 800e592:	3401      	adds	r4, #1
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e59a:	4829      	ldr	r0, [pc, #164]	@ (800e640 <_vfiprintf_r+0x220>)
 800e59c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5a0:	2206      	movs	r2, #6
 800e5a2:	f7f1 fe35 	bl	8000210 <memchr>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d03f      	beq.n	800e62a <_vfiprintf_r+0x20a>
 800e5aa:	4b26      	ldr	r3, [pc, #152]	@ (800e644 <_vfiprintf_r+0x224>)
 800e5ac:	bb1b      	cbnz	r3, 800e5f6 <_vfiprintf_r+0x1d6>
 800e5ae:	9b03      	ldr	r3, [sp, #12]
 800e5b0:	3307      	adds	r3, #7
 800e5b2:	f023 0307 	bic.w	r3, r3, #7
 800e5b6:	3308      	adds	r3, #8
 800e5b8:	9303      	str	r3, [sp, #12]
 800e5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5bc:	443b      	add	r3, r7
 800e5be:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5c0:	e76a      	b.n	800e498 <_vfiprintf_r+0x78>
 800e5c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5c6:	460c      	mov	r4, r1
 800e5c8:	2001      	movs	r0, #1
 800e5ca:	e7a8      	b.n	800e51e <_vfiprintf_r+0xfe>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	3401      	adds	r4, #1
 800e5d0:	9305      	str	r3, [sp, #20]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	f04f 0c0a 	mov.w	ip, #10
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5de:	3a30      	subs	r2, #48	@ 0x30
 800e5e0:	2a09      	cmp	r2, #9
 800e5e2:	d903      	bls.n	800e5ec <_vfiprintf_r+0x1cc>
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d0c6      	beq.n	800e576 <_vfiprintf_r+0x156>
 800e5e8:	9105      	str	r1, [sp, #20]
 800e5ea:	e7c4      	b.n	800e576 <_vfiprintf_r+0x156>
 800e5ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e7f0      	b.n	800e5d8 <_vfiprintf_r+0x1b8>
 800e5f6:	ab03      	add	r3, sp, #12
 800e5f8:	9300      	str	r3, [sp, #0]
 800e5fa:	462a      	mov	r2, r5
 800e5fc:	4b12      	ldr	r3, [pc, #72]	@ (800e648 <_vfiprintf_r+0x228>)
 800e5fe:	a904      	add	r1, sp, #16
 800e600:	4630      	mov	r0, r6
 800e602:	f7fc fa99 	bl	800ab38 <_printf_float>
 800e606:	4607      	mov	r7, r0
 800e608:	1c78      	adds	r0, r7, #1
 800e60a:	d1d6      	bne.n	800e5ba <_vfiprintf_r+0x19a>
 800e60c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e60e:	07d9      	lsls	r1, r3, #31
 800e610:	d405      	bmi.n	800e61e <_vfiprintf_r+0x1fe>
 800e612:	89ab      	ldrh	r3, [r5, #12]
 800e614:	059a      	lsls	r2, r3, #22
 800e616:	d402      	bmi.n	800e61e <_vfiprintf_r+0x1fe>
 800e618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e61a:	f7fd fb53 	bl	800bcc4 <__retarget_lock_release_recursive>
 800e61e:	89ab      	ldrh	r3, [r5, #12]
 800e620:	065b      	lsls	r3, r3, #25
 800e622:	f53f af1f 	bmi.w	800e464 <_vfiprintf_r+0x44>
 800e626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e628:	e71e      	b.n	800e468 <_vfiprintf_r+0x48>
 800e62a:	ab03      	add	r3, sp, #12
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	462a      	mov	r2, r5
 800e630:	4b05      	ldr	r3, [pc, #20]	@ (800e648 <_vfiprintf_r+0x228>)
 800e632:	a904      	add	r1, sp, #16
 800e634:	4630      	mov	r0, r6
 800e636:	f7fc fd17 	bl	800b068 <_printf_i>
 800e63a:	e7e4      	b.n	800e606 <_vfiprintf_r+0x1e6>
 800e63c:	08010e10 	.word	0x08010e10
 800e640:	08010e1a 	.word	0x08010e1a
 800e644:	0800ab39 	.word	0x0800ab39
 800e648:	0800e3fb 	.word	0x0800e3fb
 800e64c:	08010e16 	.word	0x08010e16

0800e650 <__sflush_r>:
 800e650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e658:	0716      	lsls	r6, r2, #28
 800e65a:	4605      	mov	r5, r0
 800e65c:	460c      	mov	r4, r1
 800e65e:	d454      	bmi.n	800e70a <__sflush_r+0xba>
 800e660:	684b      	ldr	r3, [r1, #4]
 800e662:	2b00      	cmp	r3, #0
 800e664:	dc02      	bgt.n	800e66c <__sflush_r+0x1c>
 800e666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e668:	2b00      	cmp	r3, #0
 800e66a:	dd48      	ble.n	800e6fe <__sflush_r+0xae>
 800e66c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e66e:	2e00      	cmp	r6, #0
 800e670:	d045      	beq.n	800e6fe <__sflush_r+0xae>
 800e672:	2300      	movs	r3, #0
 800e674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e678:	682f      	ldr	r7, [r5, #0]
 800e67a:	6a21      	ldr	r1, [r4, #32]
 800e67c:	602b      	str	r3, [r5, #0]
 800e67e:	d030      	beq.n	800e6e2 <__sflush_r+0x92>
 800e680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	0759      	lsls	r1, r3, #29
 800e686:	d505      	bpl.n	800e694 <__sflush_r+0x44>
 800e688:	6863      	ldr	r3, [r4, #4]
 800e68a:	1ad2      	subs	r2, r2, r3
 800e68c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e68e:	b10b      	cbz	r3, 800e694 <__sflush_r+0x44>
 800e690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e692:	1ad2      	subs	r2, r2, r3
 800e694:	2300      	movs	r3, #0
 800e696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e698:	6a21      	ldr	r1, [r4, #32]
 800e69a:	4628      	mov	r0, r5
 800e69c:	47b0      	blx	r6
 800e69e:	1c43      	adds	r3, r0, #1
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	d106      	bne.n	800e6b2 <__sflush_r+0x62>
 800e6a4:	6829      	ldr	r1, [r5, #0]
 800e6a6:	291d      	cmp	r1, #29
 800e6a8:	d82b      	bhi.n	800e702 <__sflush_r+0xb2>
 800e6aa:	4a2a      	ldr	r2, [pc, #168]	@ (800e754 <__sflush_r+0x104>)
 800e6ac:	410a      	asrs	r2, r1
 800e6ae:	07d6      	lsls	r6, r2, #31
 800e6b0:	d427      	bmi.n	800e702 <__sflush_r+0xb2>
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	6062      	str	r2, [r4, #4]
 800e6b6:	04d9      	lsls	r1, r3, #19
 800e6b8:	6922      	ldr	r2, [r4, #16]
 800e6ba:	6022      	str	r2, [r4, #0]
 800e6bc:	d504      	bpl.n	800e6c8 <__sflush_r+0x78>
 800e6be:	1c42      	adds	r2, r0, #1
 800e6c0:	d101      	bne.n	800e6c6 <__sflush_r+0x76>
 800e6c2:	682b      	ldr	r3, [r5, #0]
 800e6c4:	b903      	cbnz	r3, 800e6c8 <__sflush_r+0x78>
 800e6c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e6c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6ca:	602f      	str	r7, [r5, #0]
 800e6cc:	b1b9      	cbz	r1, 800e6fe <__sflush_r+0xae>
 800e6ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6d2:	4299      	cmp	r1, r3
 800e6d4:	d002      	beq.n	800e6dc <__sflush_r+0x8c>
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	f7fe f966 	bl	800c9a8 <_free_r>
 800e6dc:	2300      	movs	r3, #0
 800e6de:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6e0:	e00d      	b.n	800e6fe <__sflush_r+0xae>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	47b0      	blx	r6
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	1c50      	adds	r0, r2, #1
 800e6ec:	d1c9      	bne.n	800e682 <__sflush_r+0x32>
 800e6ee:	682b      	ldr	r3, [r5, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d0c6      	beq.n	800e682 <__sflush_r+0x32>
 800e6f4:	2b1d      	cmp	r3, #29
 800e6f6:	d001      	beq.n	800e6fc <__sflush_r+0xac>
 800e6f8:	2b16      	cmp	r3, #22
 800e6fa:	d11e      	bne.n	800e73a <__sflush_r+0xea>
 800e6fc:	602f      	str	r7, [r5, #0]
 800e6fe:	2000      	movs	r0, #0
 800e700:	e022      	b.n	800e748 <__sflush_r+0xf8>
 800e702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e706:	b21b      	sxth	r3, r3
 800e708:	e01b      	b.n	800e742 <__sflush_r+0xf2>
 800e70a:	690f      	ldr	r7, [r1, #16]
 800e70c:	2f00      	cmp	r7, #0
 800e70e:	d0f6      	beq.n	800e6fe <__sflush_r+0xae>
 800e710:	0793      	lsls	r3, r2, #30
 800e712:	680e      	ldr	r6, [r1, #0]
 800e714:	bf08      	it	eq
 800e716:	694b      	ldreq	r3, [r1, #20]
 800e718:	600f      	str	r7, [r1, #0]
 800e71a:	bf18      	it	ne
 800e71c:	2300      	movne	r3, #0
 800e71e:	eba6 0807 	sub.w	r8, r6, r7
 800e722:	608b      	str	r3, [r1, #8]
 800e724:	f1b8 0f00 	cmp.w	r8, #0
 800e728:	dde9      	ble.n	800e6fe <__sflush_r+0xae>
 800e72a:	6a21      	ldr	r1, [r4, #32]
 800e72c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e72e:	4643      	mov	r3, r8
 800e730:	463a      	mov	r2, r7
 800e732:	4628      	mov	r0, r5
 800e734:	47b0      	blx	r6
 800e736:	2800      	cmp	r0, #0
 800e738:	dc08      	bgt.n	800e74c <__sflush_r+0xfc>
 800e73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e742:	81a3      	strh	r3, [r4, #12]
 800e744:	f04f 30ff 	mov.w	r0, #4294967295
 800e748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e74c:	4407      	add	r7, r0
 800e74e:	eba8 0800 	sub.w	r8, r8, r0
 800e752:	e7e7      	b.n	800e724 <__sflush_r+0xd4>
 800e754:	dfbffffe 	.word	0xdfbffffe

0800e758 <_fflush_r>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	690b      	ldr	r3, [r1, #16]
 800e75c:	4605      	mov	r5, r0
 800e75e:	460c      	mov	r4, r1
 800e760:	b913      	cbnz	r3, 800e768 <_fflush_r+0x10>
 800e762:	2500      	movs	r5, #0
 800e764:	4628      	mov	r0, r5
 800e766:	bd38      	pop	{r3, r4, r5, pc}
 800e768:	b118      	cbz	r0, 800e772 <_fflush_r+0x1a>
 800e76a:	6a03      	ldr	r3, [r0, #32]
 800e76c:	b90b      	cbnz	r3, 800e772 <_fflush_r+0x1a>
 800e76e:	f7fd f83b 	bl	800b7e8 <__sinit>
 800e772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d0f3      	beq.n	800e762 <_fflush_r+0xa>
 800e77a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e77c:	07d0      	lsls	r0, r2, #31
 800e77e:	d404      	bmi.n	800e78a <_fflush_r+0x32>
 800e780:	0599      	lsls	r1, r3, #22
 800e782:	d402      	bmi.n	800e78a <_fflush_r+0x32>
 800e784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e786:	f7fd fa9c 	bl	800bcc2 <__retarget_lock_acquire_recursive>
 800e78a:	4628      	mov	r0, r5
 800e78c:	4621      	mov	r1, r4
 800e78e:	f7ff ff5f 	bl	800e650 <__sflush_r>
 800e792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e794:	07da      	lsls	r2, r3, #31
 800e796:	4605      	mov	r5, r0
 800e798:	d4e4      	bmi.n	800e764 <_fflush_r+0xc>
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	059b      	lsls	r3, r3, #22
 800e79e:	d4e1      	bmi.n	800e764 <_fflush_r+0xc>
 800e7a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7a2:	f7fd fa8f 	bl	800bcc4 <__retarget_lock_release_recursive>
 800e7a6:	e7dd      	b.n	800e764 <_fflush_r+0xc>

0800e7a8 <fiprintf>:
 800e7a8:	b40e      	push	{r1, r2, r3}
 800e7aa:	b503      	push	{r0, r1, lr}
 800e7ac:	4601      	mov	r1, r0
 800e7ae:	ab03      	add	r3, sp, #12
 800e7b0:	4805      	ldr	r0, [pc, #20]	@ (800e7c8 <fiprintf+0x20>)
 800e7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7b6:	6800      	ldr	r0, [r0, #0]
 800e7b8:	9301      	str	r3, [sp, #4]
 800e7ba:	f7ff fe31 	bl	800e420 <_vfiprintf_r>
 800e7be:	b002      	add	sp, #8
 800e7c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7c4:	b003      	add	sp, #12
 800e7c6:	4770      	bx	lr
 800e7c8:	2000003c 	.word	0x2000003c

0800e7cc <__swhatbuf_r>:
 800e7cc:	b570      	push	{r4, r5, r6, lr}
 800e7ce:	460c      	mov	r4, r1
 800e7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d4:	2900      	cmp	r1, #0
 800e7d6:	b096      	sub	sp, #88	@ 0x58
 800e7d8:	4615      	mov	r5, r2
 800e7da:	461e      	mov	r6, r3
 800e7dc:	da0d      	bge.n	800e7fa <__swhatbuf_r+0x2e>
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7e4:	f04f 0100 	mov.w	r1, #0
 800e7e8:	bf14      	ite	ne
 800e7ea:	2340      	movne	r3, #64	@ 0x40
 800e7ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	6031      	str	r1, [r6, #0]
 800e7f4:	602b      	str	r3, [r5, #0]
 800e7f6:	b016      	add	sp, #88	@ 0x58
 800e7f8:	bd70      	pop	{r4, r5, r6, pc}
 800e7fa:	466a      	mov	r2, sp
 800e7fc:	f000 f908 	bl	800ea10 <_fstat_r>
 800e800:	2800      	cmp	r0, #0
 800e802:	dbec      	blt.n	800e7de <__swhatbuf_r+0x12>
 800e804:	9901      	ldr	r1, [sp, #4]
 800e806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e80a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e80e:	4259      	negs	r1, r3
 800e810:	4159      	adcs	r1, r3
 800e812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e816:	e7eb      	b.n	800e7f0 <__swhatbuf_r+0x24>

0800e818 <__smakebuf_r>:
 800e818:	898b      	ldrh	r3, [r1, #12]
 800e81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e81c:	079d      	lsls	r5, r3, #30
 800e81e:	4606      	mov	r6, r0
 800e820:	460c      	mov	r4, r1
 800e822:	d507      	bpl.n	800e834 <__smakebuf_r+0x1c>
 800e824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	6123      	str	r3, [r4, #16]
 800e82c:	2301      	movs	r3, #1
 800e82e:	6163      	str	r3, [r4, #20]
 800e830:	b003      	add	sp, #12
 800e832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e834:	ab01      	add	r3, sp, #4
 800e836:	466a      	mov	r2, sp
 800e838:	f7ff ffc8 	bl	800e7cc <__swhatbuf_r>
 800e83c:	9f00      	ldr	r7, [sp, #0]
 800e83e:	4605      	mov	r5, r0
 800e840:	4639      	mov	r1, r7
 800e842:	4630      	mov	r0, r6
 800e844:	f7fe f924 	bl	800ca90 <_malloc_r>
 800e848:	b948      	cbnz	r0, 800e85e <__smakebuf_r+0x46>
 800e84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e84e:	059a      	lsls	r2, r3, #22
 800e850:	d4ee      	bmi.n	800e830 <__smakebuf_r+0x18>
 800e852:	f023 0303 	bic.w	r3, r3, #3
 800e856:	f043 0302 	orr.w	r3, r3, #2
 800e85a:	81a3      	strh	r3, [r4, #12]
 800e85c:	e7e2      	b.n	800e824 <__smakebuf_r+0xc>
 800e85e:	89a3      	ldrh	r3, [r4, #12]
 800e860:	6020      	str	r0, [r4, #0]
 800e862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e866:	81a3      	strh	r3, [r4, #12]
 800e868:	9b01      	ldr	r3, [sp, #4]
 800e86a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e86e:	b15b      	cbz	r3, 800e888 <__smakebuf_r+0x70>
 800e870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e874:	4630      	mov	r0, r6
 800e876:	f000 f8dd 	bl	800ea34 <_isatty_r>
 800e87a:	b128      	cbz	r0, 800e888 <__smakebuf_r+0x70>
 800e87c:	89a3      	ldrh	r3, [r4, #12]
 800e87e:	f023 0303 	bic.w	r3, r3, #3
 800e882:	f043 0301 	orr.w	r3, r3, #1
 800e886:	81a3      	strh	r3, [r4, #12]
 800e888:	89a3      	ldrh	r3, [r4, #12]
 800e88a:	431d      	orrs	r5, r3
 800e88c:	81a5      	strh	r5, [r4, #12]
 800e88e:	e7cf      	b.n	800e830 <__smakebuf_r+0x18>

0800e890 <__swbuf_r>:
 800e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e892:	460e      	mov	r6, r1
 800e894:	4614      	mov	r4, r2
 800e896:	4605      	mov	r5, r0
 800e898:	b118      	cbz	r0, 800e8a2 <__swbuf_r+0x12>
 800e89a:	6a03      	ldr	r3, [r0, #32]
 800e89c:	b90b      	cbnz	r3, 800e8a2 <__swbuf_r+0x12>
 800e89e:	f7fc ffa3 	bl	800b7e8 <__sinit>
 800e8a2:	69a3      	ldr	r3, [r4, #24]
 800e8a4:	60a3      	str	r3, [r4, #8]
 800e8a6:	89a3      	ldrh	r3, [r4, #12]
 800e8a8:	071a      	lsls	r2, r3, #28
 800e8aa:	d501      	bpl.n	800e8b0 <__swbuf_r+0x20>
 800e8ac:	6923      	ldr	r3, [r4, #16]
 800e8ae:	b943      	cbnz	r3, 800e8c2 <__swbuf_r+0x32>
 800e8b0:	4621      	mov	r1, r4
 800e8b2:	4628      	mov	r0, r5
 800e8b4:	f000 f82a 	bl	800e90c <__swsetup_r>
 800e8b8:	b118      	cbz	r0, 800e8c2 <__swbuf_r+0x32>
 800e8ba:	f04f 37ff 	mov.w	r7, #4294967295
 800e8be:	4638      	mov	r0, r7
 800e8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	6922      	ldr	r2, [r4, #16]
 800e8c6:	1a98      	subs	r0, r3, r2
 800e8c8:	6963      	ldr	r3, [r4, #20]
 800e8ca:	b2f6      	uxtb	r6, r6
 800e8cc:	4283      	cmp	r3, r0
 800e8ce:	4637      	mov	r7, r6
 800e8d0:	dc05      	bgt.n	800e8de <__swbuf_r+0x4e>
 800e8d2:	4621      	mov	r1, r4
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	f7ff ff3f 	bl	800e758 <_fflush_r>
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d1ed      	bne.n	800e8ba <__swbuf_r+0x2a>
 800e8de:	68a3      	ldr	r3, [r4, #8]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	60a3      	str	r3, [r4, #8]
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	1c5a      	adds	r2, r3, #1
 800e8e8:	6022      	str	r2, [r4, #0]
 800e8ea:	701e      	strb	r6, [r3, #0]
 800e8ec:	6962      	ldr	r2, [r4, #20]
 800e8ee:	1c43      	adds	r3, r0, #1
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d004      	beq.n	800e8fe <__swbuf_r+0x6e>
 800e8f4:	89a3      	ldrh	r3, [r4, #12]
 800e8f6:	07db      	lsls	r3, r3, #31
 800e8f8:	d5e1      	bpl.n	800e8be <__swbuf_r+0x2e>
 800e8fa:	2e0a      	cmp	r6, #10
 800e8fc:	d1df      	bne.n	800e8be <__swbuf_r+0x2e>
 800e8fe:	4621      	mov	r1, r4
 800e900:	4628      	mov	r0, r5
 800e902:	f7ff ff29 	bl	800e758 <_fflush_r>
 800e906:	2800      	cmp	r0, #0
 800e908:	d0d9      	beq.n	800e8be <__swbuf_r+0x2e>
 800e90a:	e7d6      	b.n	800e8ba <__swbuf_r+0x2a>

0800e90c <__swsetup_r>:
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	4b29      	ldr	r3, [pc, #164]	@ (800e9b4 <__swsetup_r+0xa8>)
 800e910:	4605      	mov	r5, r0
 800e912:	6818      	ldr	r0, [r3, #0]
 800e914:	460c      	mov	r4, r1
 800e916:	b118      	cbz	r0, 800e920 <__swsetup_r+0x14>
 800e918:	6a03      	ldr	r3, [r0, #32]
 800e91a:	b90b      	cbnz	r3, 800e920 <__swsetup_r+0x14>
 800e91c:	f7fc ff64 	bl	800b7e8 <__sinit>
 800e920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e924:	0719      	lsls	r1, r3, #28
 800e926:	d422      	bmi.n	800e96e <__swsetup_r+0x62>
 800e928:	06da      	lsls	r2, r3, #27
 800e92a:	d407      	bmi.n	800e93c <__swsetup_r+0x30>
 800e92c:	2209      	movs	r2, #9
 800e92e:	602a      	str	r2, [r5, #0]
 800e930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e934:	81a3      	strh	r3, [r4, #12]
 800e936:	f04f 30ff 	mov.w	r0, #4294967295
 800e93a:	e033      	b.n	800e9a4 <__swsetup_r+0x98>
 800e93c:	0758      	lsls	r0, r3, #29
 800e93e:	d512      	bpl.n	800e966 <__swsetup_r+0x5a>
 800e940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e942:	b141      	cbz	r1, 800e956 <__swsetup_r+0x4a>
 800e944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e948:	4299      	cmp	r1, r3
 800e94a:	d002      	beq.n	800e952 <__swsetup_r+0x46>
 800e94c:	4628      	mov	r0, r5
 800e94e:	f7fe f82b 	bl	800c9a8 <_free_r>
 800e952:	2300      	movs	r3, #0
 800e954:	6363      	str	r3, [r4, #52]	@ 0x34
 800e956:	89a3      	ldrh	r3, [r4, #12]
 800e958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e95c:	81a3      	strh	r3, [r4, #12]
 800e95e:	2300      	movs	r3, #0
 800e960:	6063      	str	r3, [r4, #4]
 800e962:	6923      	ldr	r3, [r4, #16]
 800e964:	6023      	str	r3, [r4, #0]
 800e966:	89a3      	ldrh	r3, [r4, #12]
 800e968:	f043 0308 	orr.w	r3, r3, #8
 800e96c:	81a3      	strh	r3, [r4, #12]
 800e96e:	6923      	ldr	r3, [r4, #16]
 800e970:	b94b      	cbnz	r3, 800e986 <__swsetup_r+0x7a>
 800e972:	89a3      	ldrh	r3, [r4, #12]
 800e974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e97c:	d003      	beq.n	800e986 <__swsetup_r+0x7a>
 800e97e:	4621      	mov	r1, r4
 800e980:	4628      	mov	r0, r5
 800e982:	f7ff ff49 	bl	800e818 <__smakebuf_r>
 800e986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e98a:	f013 0201 	ands.w	r2, r3, #1
 800e98e:	d00a      	beq.n	800e9a6 <__swsetup_r+0x9a>
 800e990:	2200      	movs	r2, #0
 800e992:	60a2      	str	r2, [r4, #8]
 800e994:	6962      	ldr	r2, [r4, #20]
 800e996:	4252      	negs	r2, r2
 800e998:	61a2      	str	r2, [r4, #24]
 800e99a:	6922      	ldr	r2, [r4, #16]
 800e99c:	b942      	cbnz	r2, 800e9b0 <__swsetup_r+0xa4>
 800e99e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e9a2:	d1c5      	bne.n	800e930 <__swsetup_r+0x24>
 800e9a4:	bd38      	pop	{r3, r4, r5, pc}
 800e9a6:	0799      	lsls	r1, r3, #30
 800e9a8:	bf58      	it	pl
 800e9aa:	6962      	ldrpl	r2, [r4, #20]
 800e9ac:	60a2      	str	r2, [r4, #8]
 800e9ae:	e7f4      	b.n	800e99a <__swsetup_r+0x8e>
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	e7f7      	b.n	800e9a4 <__swsetup_r+0x98>
 800e9b4:	2000003c 	.word	0x2000003c

0800e9b8 <memmove>:
 800e9b8:	4288      	cmp	r0, r1
 800e9ba:	b510      	push	{r4, lr}
 800e9bc:	eb01 0402 	add.w	r4, r1, r2
 800e9c0:	d902      	bls.n	800e9c8 <memmove+0x10>
 800e9c2:	4284      	cmp	r4, r0
 800e9c4:	4623      	mov	r3, r4
 800e9c6:	d807      	bhi.n	800e9d8 <memmove+0x20>
 800e9c8:	1e43      	subs	r3, r0, #1
 800e9ca:	42a1      	cmp	r1, r4
 800e9cc:	d008      	beq.n	800e9e0 <memmove+0x28>
 800e9ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9d6:	e7f8      	b.n	800e9ca <memmove+0x12>
 800e9d8:	4402      	add	r2, r0
 800e9da:	4601      	mov	r1, r0
 800e9dc:	428a      	cmp	r2, r1
 800e9de:	d100      	bne.n	800e9e2 <memmove+0x2a>
 800e9e0:	bd10      	pop	{r4, pc}
 800e9e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9ea:	e7f7      	b.n	800e9dc <memmove+0x24>

0800e9ec <strncmp>:
 800e9ec:	b510      	push	{r4, lr}
 800e9ee:	b16a      	cbz	r2, 800ea0c <strncmp+0x20>
 800e9f0:	3901      	subs	r1, #1
 800e9f2:	1884      	adds	r4, r0, r2
 800e9f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d103      	bne.n	800ea08 <strncmp+0x1c>
 800ea00:	42a0      	cmp	r0, r4
 800ea02:	d001      	beq.n	800ea08 <strncmp+0x1c>
 800ea04:	2a00      	cmp	r2, #0
 800ea06:	d1f5      	bne.n	800e9f4 <strncmp+0x8>
 800ea08:	1ad0      	subs	r0, r2, r3
 800ea0a:	bd10      	pop	{r4, pc}
 800ea0c:	4610      	mov	r0, r2
 800ea0e:	e7fc      	b.n	800ea0a <strncmp+0x1e>

0800ea10 <_fstat_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4d07      	ldr	r5, [pc, #28]	@ (800ea30 <_fstat_r+0x20>)
 800ea14:	2300      	movs	r3, #0
 800ea16:	4604      	mov	r4, r0
 800ea18:	4608      	mov	r0, r1
 800ea1a:	4611      	mov	r1, r2
 800ea1c:	602b      	str	r3, [r5, #0]
 800ea1e:	f7f4 fe21 	bl	8003664 <_fstat>
 800ea22:	1c43      	adds	r3, r0, #1
 800ea24:	d102      	bne.n	800ea2c <_fstat_r+0x1c>
 800ea26:	682b      	ldr	r3, [r5, #0]
 800ea28:	b103      	cbz	r3, 800ea2c <_fstat_r+0x1c>
 800ea2a:	6023      	str	r3, [r4, #0]
 800ea2c:	bd38      	pop	{r3, r4, r5, pc}
 800ea2e:	bf00      	nop
 800ea30:	200010f4 	.word	0x200010f4

0800ea34 <_isatty_r>:
 800ea34:	b538      	push	{r3, r4, r5, lr}
 800ea36:	4d06      	ldr	r5, [pc, #24]	@ (800ea50 <_isatty_r+0x1c>)
 800ea38:	2300      	movs	r3, #0
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	4608      	mov	r0, r1
 800ea3e:	602b      	str	r3, [r5, #0]
 800ea40:	f7f4 fe20 	bl	8003684 <_isatty>
 800ea44:	1c43      	adds	r3, r0, #1
 800ea46:	d102      	bne.n	800ea4e <_isatty_r+0x1a>
 800ea48:	682b      	ldr	r3, [r5, #0]
 800ea4a:	b103      	cbz	r3, 800ea4e <_isatty_r+0x1a>
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	bd38      	pop	{r3, r4, r5, pc}
 800ea50:	200010f4 	.word	0x200010f4

0800ea54 <_sbrk_r>:
 800ea54:	b538      	push	{r3, r4, r5, lr}
 800ea56:	4d06      	ldr	r5, [pc, #24]	@ (800ea70 <_sbrk_r+0x1c>)
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	4608      	mov	r0, r1
 800ea5e:	602b      	str	r3, [r5, #0]
 800ea60:	f7f4 fe28 	bl	80036b4 <_sbrk>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d102      	bne.n	800ea6e <_sbrk_r+0x1a>
 800ea68:	682b      	ldr	r3, [r5, #0]
 800ea6a:	b103      	cbz	r3, 800ea6e <_sbrk_r+0x1a>
 800ea6c:	6023      	str	r3, [r4, #0]
 800ea6e:	bd38      	pop	{r3, r4, r5, pc}
 800ea70:	200010f4 	.word	0x200010f4

0800ea74 <memcpy>:
 800ea74:	440a      	add	r2, r1
 800ea76:	4291      	cmp	r1, r2
 800ea78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea7c:	d100      	bne.n	800ea80 <memcpy+0xc>
 800ea7e:	4770      	bx	lr
 800ea80:	b510      	push	{r4, lr}
 800ea82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea8a:	4291      	cmp	r1, r2
 800ea8c:	d1f9      	bne.n	800ea82 <memcpy+0xe>
 800ea8e:	bd10      	pop	{r4, pc}

0800ea90 <nan>:
 800ea90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ea98 <nan+0x8>
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	00000000 	.word	0x00000000
 800ea9c:	7ff80000 	.word	0x7ff80000

0800eaa0 <abort>:
 800eaa0:	b508      	push	{r3, lr}
 800eaa2:	2006      	movs	r0, #6
 800eaa4:	f000 fbc4 	bl	800f230 <raise>
 800eaa8:	2001      	movs	r0, #1
 800eaaa:	f7f4 fda7 	bl	80035fc <_exit>

0800eaae <_calloc_r>:
 800eaae:	b570      	push	{r4, r5, r6, lr}
 800eab0:	fba1 5402 	umull	r5, r4, r1, r2
 800eab4:	b93c      	cbnz	r4, 800eac6 <_calloc_r+0x18>
 800eab6:	4629      	mov	r1, r5
 800eab8:	f7fd ffea 	bl	800ca90 <_malloc_r>
 800eabc:	4606      	mov	r6, r0
 800eabe:	b928      	cbnz	r0, 800eacc <_calloc_r+0x1e>
 800eac0:	2600      	movs	r6, #0
 800eac2:	4630      	mov	r0, r6
 800eac4:	bd70      	pop	{r4, r5, r6, pc}
 800eac6:	220c      	movs	r2, #12
 800eac8:	6002      	str	r2, [r0, #0]
 800eaca:	e7f9      	b.n	800eac0 <_calloc_r+0x12>
 800eacc:	462a      	mov	r2, r5
 800eace:	4621      	mov	r1, r4
 800ead0:	f7fd f81d 	bl	800bb0e <memset>
 800ead4:	e7f5      	b.n	800eac2 <_calloc_r+0x14>

0800ead6 <rshift>:
 800ead6:	6903      	ldr	r3, [r0, #16]
 800ead8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eadc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eae0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eae4:	f100 0414 	add.w	r4, r0, #20
 800eae8:	dd45      	ble.n	800eb76 <rshift+0xa0>
 800eaea:	f011 011f 	ands.w	r1, r1, #31
 800eaee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eaf2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eaf6:	d10c      	bne.n	800eb12 <rshift+0x3c>
 800eaf8:	f100 0710 	add.w	r7, r0, #16
 800eafc:	4629      	mov	r1, r5
 800eafe:	42b1      	cmp	r1, r6
 800eb00:	d334      	bcc.n	800eb6c <rshift+0x96>
 800eb02:	1a9b      	subs	r3, r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	1eea      	subs	r2, r5, #3
 800eb08:	4296      	cmp	r6, r2
 800eb0a:	bf38      	it	cc
 800eb0c:	2300      	movcc	r3, #0
 800eb0e:	4423      	add	r3, r4
 800eb10:	e015      	b.n	800eb3e <rshift+0x68>
 800eb12:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eb16:	f1c1 0820 	rsb	r8, r1, #32
 800eb1a:	40cf      	lsrs	r7, r1
 800eb1c:	f105 0e04 	add.w	lr, r5, #4
 800eb20:	46a1      	mov	r9, r4
 800eb22:	4576      	cmp	r6, lr
 800eb24:	46f4      	mov	ip, lr
 800eb26:	d815      	bhi.n	800eb54 <rshift+0x7e>
 800eb28:	1a9a      	subs	r2, r3, r2
 800eb2a:	0092      	lsls	r2, r2, #2
 800eb2c:	3a04      	subs	r2, #4
 800eb2e:	3501      	adds	r5, #1
 800eb30:	42ae      	cmp	r6, r5
 800eb32:	bf38      	it	cc
 800eb34:	2200      	movcc	r2, #0
 800eb36:	18a3      	adds	r3, r4, r2
 800eb38:	50a7      	str	r7, [r4, r2]
 800eb3a:	b107      	cbz	r7, 800eb3e <rshift+0x68>
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	1b1a      	subs	r2, r3, r4
 800eb40:	42a3      	cmp	r3, r4
 800eb42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eb46:	bf08      	it	eq
 800eb48:	2300      	moveq	r3, #0
 800eb4a:	6102      	str	r2, [r0, #16]
 800eb4c:	bf08      	it	eq
 800eb4e:	6143      	streq	r3, [r0, #20]
 800eb50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb54:	f8dc c000 	ldr.w	ip, [ip]
 800eb58:	fa0c fc08 	lsl.w	ip, ip, r8
 800eb5c:	ea4c 0707 	orr.w	r7, ip, r7
 800eb60:	f849 7b04 	str.w	r7, [r9], #4
 800eb64:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb68:	40cf      	lsrs	r7, r1
 800eb6a:	e7da      	b.n	800eb22 <rshift+0x4c>
 800eb6c:	f851 cb04 	ldr.w	ip, [r1], #4
 800eb70:	f847 cf04 	str.w	ip, [r7, #4]!
 800eb74:	e7c3      	b.n	800eafe <rshift+0x28>
 800eb76:	4623      	mov	r3, r4
 800eb78:	e7e1      	b.n	800eb3e <rshift+0x68>

0800eb7a <__hexdig_fun>:
 800eb7a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eb7e:	2b09      	cmp	r3, #9
 800eb80:	d802      	bhi.n	800eb88 <__hexdig_fun+0xe>
 800eb82:	3820      	subs	r0, #32
 800eb84:	b2c0      	uxtb	r0, r0
 800eb86:	4770      	bx	lr
 800eb88:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eb8c:	2b05      	cmp	r3, #5
 800eb8e:	d801      	bhi.n	800eb94 <__hexdig_fun+0x1a>
 800eb90:	3847      	subs	r0, #71	@ 0x47
 800eb92:	e7f7      	b.n	800eb84 <__hexdig_fun+0xa>
 800eb94:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eb98:	2b05      	cmp	r3, #5
 800eb9a:	d801      	bhi.n	800eba0 <__hexdig_fun+0x26>
 800eb9c:	3827      	subs	r0, #39	@ 0x27
 800eb9e:	e7f1      	b.n	800eb84 <__hexdig_fun+0xa>
 800eba0:	2000      	movs	r0, #0
 800eba2:	4770      	bx	lr

0800eba4 <__gethex>:
 800eba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba8:	b085      	sub	sp, #20
 800ebaa:	468a      	mov	sl, r1
 800ebac:	9302      	str	r3, [sp, #8]
 800ebae:	680b      	ldr	r3, [r1, #0]
 800ebb0:	9001      	str	r0, [sp, #4]
 800ebb2:	4690      	mov	r8, r2
 800ebb4:	1c9c      	adds	r4, r3, #2
 800ebb6:	46a1      	mov	r9, r4
 800ebb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ebbc:	2830      	cmp	r0, #48	@ 0x30
 800ebbe:	d0fa      	beq.n	800ebb6 <__gethex+0x12>
 800ebc0:	eba9 0303 	sub.w	r3, r9, r3
 800ebc4:	f1a3 0b02 	sub.w	fp, r3, #2
 800ebc8:	f7ff ffd7 	bl	800eb7a <__hexdig_fun>
 800ebcc:	4605      	mov	r5, r0
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d168      	bne.n	800eca4 <__gethex+0x100>
 800ebd2:	49a0      	ldr	r1, [pc, #640]	@ (800ee54 <__gethex+0x2b0>)
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	4648      	mov	r0, r9
 800ebd8:	f7ff ff08 	bl	800e9ec <strncmp>
 800ebdc:	4607      	mov	r7, r0
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d167      	bne.n	800ecb2 <__gethex+0x10e>
 800ebe2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ebe6:	4626      	mov	r6, r4
 800ebe8:	f7ff ffc7 	bl	800eb7a <__hexdig_fun>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d062      	beq.n	800ecb6 <__gethex+0x112>
 800ebf0:	4623      	mov	r3, r4
 800ebf2:	7818      	ldrb	r0, [r3, #0]
 800ebf4:	2830      	cmp	r0, #48	@ 0x30
 800ebf6:	4699      	mov	r9, r3
 800ebf8:	f103 0301 	add.w	r3, r3, #1
 800ebfc:	d0f9      	beq.n	800ebf2 <__gethex+0x4e>
 800ebfe:	f7ff ffbc 	bl	800eb7a <__hexdig_fun>
 800ec02:	fab0 f580 	clz	r5, r0
 800ec06:	096d      	lsrs	r5, r5, #5
 800ec08:	f04f 0b01 	mov.w	fp, #1
 800ec0c:	464a      	mov	r2, r9
 800ec0e:	4616      	mov	r6, r2
 800ec10:	3201      	adds	r2, #1
 800ec12:	7830      	ldrb	r0, [r6, #0]
 800ec14:	f7ff ffb1 	bl	800eb7a <__hexdig_fun>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d1f8      	bne.n	800ec0e <__gethex+0x6a>
 800ec1c:	498d      	ldr	r1, [pc, #564]	@ (800ee54 <__gethex+0x2b0>)
 800ec1e:	2201      	movs	r2, #1
 800ec20:	4630      	mov	r0, r6
 800ec22:	f7ff fee3 	bl	800e9ec <strncmp>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d13f      	bne.n	800ecaa <__gethex+0x106>
 800ec2a:	b944      	cbnz	r4, 800ec3e <__gethex+0x9a>
 800ec2c:	1c74      	adds	r4, r6, #1
 800ec2e:	4622      	mov	r2, r4
 800ec30:	4616      	mov	r6, r2
 800ec32:	3201      	adds	r2, #1
 800ec34:	7830      	ldrb	r0, [r6, #0]
 800ec36:	f7ff ffa0 	bl	800eb7a <__hexdig_fun>
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	d1f8      	bne.n	800ec30 <__gethex+0x8c>
 800ec3e:	1ba4      	subs	r4, r4, r6
 800ec40:	00a7      	lsls	r7, r4, #2
 800ec42:	7833      	ldrb	r3, [r6, #0]
 800ec44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ec48:	2b50      	cmp	r3, #80	@ 0x50
 800ec4a:	d13e      	bne.n	800ecca <__gethex+0x126>
 800ec4c:	7873      	ldrb	r3, [r6, #1]
 800ec4e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ec50:	d033      	beq.n	800ecba <__gethex+0x116>
 800ec52:	2b2d      	cmp	r3, #45	@ 0x2d
 800ec54:	d034      	beq.n	800ecc0 <__gethex+0x11c>
 800ec56:	1c71      	adds	r1, r6, #1
 800ec58:	2400      	movs	r4, #0
 800ec5a:	7808      	ldrb	r0, [r1, #0]
 800ec5c:	f7ff ff8d 	bl	800eb7a <__hexdig_fun>
 800ec60:	1e43      	subs	r3, r0, #1
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	2b18      	cmp	r3, #24
 800ec66:	d830      	bhi.n	800ecca <__gethex+0x126>
 800ec68:	f1a0 0210 	sub.w	r2, r0, #16
 800ec6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec70:	f7ff ff83 	bl	800eb7a <__hexdig_fun>
 800ec74:	f100 3cff 	add.w	ip, r0, #4294967295
 800ec78:	fa5f fc8c 	uxtb.w	ip, ip
 800ec7c:	f1bc 0f18 	cmp.w	ip, #24
 800ec80:	f04f 030a 	mov.w	r3, #10
 800ec84:	d91e      	bls.n	800ecc4 <__gethex+0x120>
 800ec86:	b104      	cbz	r4, 800ec8a <__gethex+0xe6>
 800ec88:	4252      	negs	r2, r2
 800ec8a:	4417      	add	r7, r2
 800ec8c:	f8ca 1000 	str.w	r1, [sl]
 800ec90:	b1ed      	cbz	r5, 800ecce <__gethex+0x12a>
 800ec92:	f1bb 0f00 	cmp.w	fp, #0
 800ec96:	bf0c      	ite	eq
 800ec98:	2506      	moveq	r5, #6
 800ec9a:	2500      	movne	r5, #0
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	b005      	add	sp, #20
 800eca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca4:	2500      	movs	r5, #0
 800eca6:	462c      	mov	r4, r5
 800eca8:	e7b0      	b.n	800ec0c <__gethex+0x68>
 800ecaa:	2c00      	cmp	r4, #0
 800ecac:	d1c7      	bne.n	800ec3e <__gethex+0x9a>
 800ecae:	4627      	mov	r7, r4
 800ecb0:	e7c7      	b.n	800ec42 <__gethex+0x9e>
 800ecb2:	464e      	mov	r6, r9
 800ecb4:	462f      	mov	r7, r5
 800ecb6:	2501      	movs	r5, #1
 800ecb8:	e7c3      	b.n	800ec42 <__gethex+0x9e>
 800ecba:	2400      	movs	r4, #0
 800ecbc:	1cb1      	adds	r1, r6, #2
 800ecbe:	e7cc      	b.n	800ec5a <__gethex+0xb6>
 800ecc0:	2401      	movs	r4, #1
 800ecc2:	e7fb      	b.n	800ecbc <__gethex+0x118>
 800ecc4:	fb03 0002 	mla	r0, r3, r2, r0
 800ecc8:	e7ce      	b.n	800ec68 <__gethex+0xc4>
 800ecca:	4631      	mov	r1, r6
 800eccc:	e7de      	b.n	800ec8c <__gethex+0xe8>
 800ecce:	eba6 0309 	sub.w	r3, r6, r9
 800ecd2:	3b01      	subs	r3, #1
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	2b07      	cmp	r3, #7
 800ecd8:	dc0a      	bgt.n	800ecf0 <__gethex+0x14c>
 800ecda:	9801      	ldr	r0, [sp, #4]
 800ecdc:	f7fd ff64 	bl	800cba8 <_Balloc>
 800ece0:	4604      	mov	r4, r0
 800ece2:	b940      	cbnz	r0, 800ecf6 <__gethex+0x152>
 800ece4:	4b5c      	ldr	r3, [pc, #368]	@ (800ee58 <__gethex+0x2b4>)
 800ece6:	4602      	mov	r2, r0
 800ece8:	21e4      	movs	r1, #228	@ 0xe4
 800ecea:	485c      	ldr	r0, [pc, #368]	@ (800ee5c <__gethex+0x2b8>)
 800ecec:	f7fc fff2 	bl	800bcd4 <__assert_func>
 800ecf0:	3101      	adds	r1, #1
 800ecf2:	105b      	asrs	r3, r3, #1
 800ecf4:	e7ef      	b.n	800ecd6 <__gethex+0x132>
 800ecf6:	f100 0a14 	add.w	sl, r0, #20
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	4655      	mov	r5, sl
 800ecfe:	469b      	mov	fp, r3
 800ed00:	45b1      	cmp	r9, r6
 800ed02:	d337      	bcc.n	800ed74 <__gethex+0x1d0>
 800ed04:	f845 bb04 	str.w	fp, [r5], #4
 800ed08:	eba5 050a 	sub.w	r5, r5, sl
 800ed0c:	10ad      	asrs	r5, r5, #2
 800ed0e:	6125      	str	r5, [r4, #16]
 800ed10:	4658      	mov	r0, fp
 800ed12:	f7fe f83b 	bl	800cd8c <__hi0bits>
 800ed16:	016d      	lsls	r5, r5, #5
 800ed18:	f8d8 6000 	ldr.w	r6, [r8]
 800ed1c:	1a2d      	subs	r5, r5, r0
 800ed1e:	42b5      	cmp	r5, r6
 800ed20:	dd54      	ble.n	800edcc <__gethex+0x228>
 800ed22:	1bad      	subs	r5, r5, r6
 800ed24:	4629      	mov	r1, r5
 800ed26:	4620      	mov	r0, r4
 800ed28:	f7fe fbcf 	bl	800d4ca <__any_on>
 800ed2c:	4681      	mov	r9, r0
 800ed2e:	b178      	cbz	r0, 800ed50 <__gethex+0x1ac>
 800ed30:	1e6b      	subs	r3, r5, #1
 800ed32:	1159      	asrs	r1, r3, #5
 800ed34:	f003 021f 	and.w	r2, r3, #31
 800ed38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ed3c:	f04f 0901 	mov.w	r9, #1
 800ed40:	fa09 f202 	lsl.w	r2, r9, r2
 800ed44:	420a      	tst	r2, r1
 800ed46:	d003      	beq.n	800ed50 <__gethex+0x1ac>
 800ed48:	454b      	cmp	r3, r9
 800ed4a:	dc36      	bgt.n	800edba <__gethex+0x216>
 800ed4c:	f04f 0902 	mov.w	r9, #2
 800ed50:	4629      	mov	r1, r5
 800ed52:	4620      	mov	r0, r4
 800ed54:	f7ff febf 	bl	800ead6 <rshift>
 800ed58:	442f      	add	r7, r5
 800ed5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed5e:	42bb      	cmp	r3, r7
 800ed60:	da42      	bge.n	800ede8 <__gethex+0x244>
 800ed62:	9801      	ldr	r0, [sp, #4]
 800ed64:	4621      	mov	r1, r4
 800ed66:	f7fd ff5f 	bl	800cc28 <_Bfree>
 800ed6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	6013      	str	r3, [r2, #0]
 800ed70:	25a3      	movs	r5, #163	@ 0xa3
 800ed72:	e793      	b.n	800ec9c <__gethex+0xf8>
 800ed74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ed78:	2a2e      	cmp	r2, #46	@ 0x2e
 800ed7a:	d012      	beq.n	800eda2 <__gethex+0x1fe>
 800ed7c:	2b20      	cmp	r3, #32
 800ed7e:	d104      	bne.n	800ed8a <__gethex+0x1e6>
 800ed80:	f845 bb04 	str.w	fp, [r5], #4
 800ed84:	f04f 0b00 	mov.w	fp, #0
 800ed88:	465b      	mov	r3, fp
 800ed8a:	7830      	ldrb	r0, [r6, #0]
 800ed8c:	9303      	str	r3, [sp, #12]
 800ed8e:	f7ff fef4 	bl	800eb7a <__hexdig_fun>
 800ed92:	9b03      	ldr	r3, [sp, #12]
 800ed94:	f000 000f 	and.w	r0, r0, #15
 800ed98:	4098      	lsls	r0, r3
 800ed9a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ed9e:	3304      	adds	r3, #4
 800eda0:	e7ae      	b.n	800ed00 <__gethex+0x15c>
 800eda2:	45b1      	cmp	r9, r6
 800eda4:	d8ea      	bhi.n	800ed7c <__gethex+0x1d8>
 800eda6:	492b      	ldr	r1, [pc, #172]	@ (800ee54 <__gethex+0x2b0>)
 800eda8:	9303      	str	r3, [sp, #12]
 800edaa:	2201      	movs	r2, #1
 800edac:	4630      	mov	r0, r6
 800edae:	f7ff fe1d 	bl	800e9ec <strncmp>
 800edb2:	9b03      	ldr	r3, [sp, #12]
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d1e1      	bne.n	800ed7c <__gethex+0x1d8>
 800edb8:	e7a2      	b.n	800ed00 <__gethex+0x15c>
 800edba:	1ea9      	subs	r1, r5, #2
 800edbc:	4620      	mov	r0, r4
 800edbe:	f7fe fb84 	bl	800d4ca <__any_on>
 800edc2:	2800      	cmp	r0, #0
 800edc4:	d0c2      	beq.n	800ed4c <__gethex+0x1a8>
 800edc6:	f04f 0903 	mov.w	r9, #3
 800edca:	e7c1      	b.n	800ed50 <__gethex+0x1ac>
 800edcc:	da09      	bge.n	800ede2 <__gethex+0x23e>
 800edce:	1b75      	subs	r5, r6, r5
 800edd0:	4621      	mov	r1, r4
 800edd2:	9801      	ldr	r0, [sp, #4]
 800edd4:	462a      	mov	r2, r5
 800edd6:	f7fe f93f 	bl	800d058 <__lshift>
 800edda:	1b7f      	subs	r7, r7, r5
 800eddc:	4604      	mov	r4, r0
 800edde:	f100 0a14 	add.w	sl, r0, #20
 800ede2:	f04f 0900 	mov.w	r9, #0
 800ede6:	e7b8      	b.n	800ed5a <__gethex+0x1b6>
 800ede8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800edec:	42bd      	cmp	r5, r7
 800edee:	dd6f      	ble.n	800eed0 <__gethex+0x32c>
 800edf0:	1bed      	subs	r5, r5, r7
 800edf2:	42ae      	cmp	r6, r5
 800edf4:	dc34      	bgt.n	800ee60 <__gethex+0x2bc>
 800edf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edfa:	2b02      	cmp	r3, #2
 800edfc:	d022      	beq.n	800ee44 <__gethex+0x2a0>
 800edfe:	2b03      	cmp	r3, #3
 800ee00:	d024      	beq.n	800ee4c <__gethex+0x2a8>
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d115      	bne.n	800ee32 <__gethex+0x28e>
 800ee06:	42ae      	cmp	r6, r5
 800ee08:	d113      	bne.n	800ee32 <__gethex+0x28e>
 800ee0a:	2e01      	cmp	r6, #1
 800ee0c:	d10b      	bne.n	800ee26 <__gethex+0x282>
 800ee0e:	9a02      	ldr	r2, [sp, #8]
 800ee10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	2301      	movs	r3, #1
 800ee18:	6123      	str	r3, [r4, #16]
 800ee1a:	f8ca 3000 	str.w	r3, [sl]
 800ee1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee20:	2562      	movs	r5, #98	@ 0x62
 800ee22:	601c      	str	r4, [r3, #0]
 800ee24:	e73a      	b.n	800ec9c <__gethex+0xf8>
 800ee26:	1e71      	subs	r1, r6, #1
 800ee28:	4620      	mov	r0, r4
 800ee2a:	f7fe fb4e 	bl	800d4ca <__any_on>
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d1ed      	bne.n	800ee0e <__gethex+0x26a>
 800ee32:	9801      	ldr	r0, [sp, #4]
 800ee34:	4621      	mov	r1, r4
 800ee36:	f7fd fef7 	bl	800cc28 <_Bfree>
 800ee3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	2550      	movs	r5, #80	@ 0x50
 800ee42:	e72b      	b.n	800ec9c <__gethex+0xf8>
 800ee44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1f3      	bne.n	800ee32 <__gethex+0x28e>
 800ee4a:	e7e0      	b.n	800ee0e <__gethex+0x26a>
 800ee4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1dd      	bne.n	800ee0e <__gethex+0x26a>
 800ee52:	e7ee      	b.n	800ee32 <__gethex+0x28e>
 800ee54:	08010db8 	.word	0x08010db8
 800ee58:	08010c50 	.word	0x08010c50
 800ee5c:	08010e29 	.word	0x08010e29
 800ee60:	1e6f      	subs	r7, r5, #1
 800ee62:	f1b9 0f00 	cmp.w	r9, #0
 800ee66:	d130      	bne.n	800eeca <__gethex+0x326>
 800ee68:	b127      	cbz	r7, 800ee74 <__gethex+0x2d0>
 800ee6a:	4639      	mov	r1, r7
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	f7fe fb2c 	bl	800d4ca <__any_on>
 800ee72:	4681      	mov	r9, r0
 800ee74:	117a      	asrs	r2, r7, #5
 800ee76:	2301      	movs	r3, #1
 800ee78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ee7c:	f007 071f 	and.w	r7, r7, #31
 800ee80:	40bb      	lsls	r3, r7
 800ee82:	4213      	tst	r3, r2
 800ee84:	4629      	mov	r1, r5
 800ee86:	4620      	mov	r0, r4
 800ee88:	bf18      	it	ne
 800ee8a:	f049 0902 	orrne.w	r9, r9, #2
 800ee8e:	f7ff fe22 	bl	800ead6 <rshift>
 800ee92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ee96:	1b76      	subs	r6, r6, r5
 800ee98:	2502      	movs	r5, #2
 800ee9a:	f1b9 0f00 	cmp.w	r9, #0
 800ee9e:	d047      	beq.n	800ef30 <__gethex+0x38c>
 800eea0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eea4:	2b02      	cmp	r3, #2
 800eea6:	d015      	beq.n	800eed4 <__gethex+0x330>
 800eea8:	2b03      	cmp	r3, #3
 800eeaa:	d017      	beq.n	800eedc <__gethex+0x338>
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d109      	bne.n	800eec4 <__gethex+0x320>
 800eeb0:	f019 0f02 	tst.w	r9, #2
 800eeb4:	d006      	beq.n	800eec4 <__gethex+0x320>
 800eeb6:	f8da 3000 	ldr.w	r3, [sl]
 800eeba:	ea49 0903 	orr.w	r9, r9, r3
 800eebe:	f019 0f01 	tst.w	r9, #1
 800eec2:	d10e      	bne.n	800eee2 <__gethex+0x33e>
 800eec4:	f045 0510 	orr.w	r5, r5, #16
 800eec8:	e032      	b.n	800ef30 <__gethex+0x38c>
 800eeca:	f04f 0901 	mov.w	r9, #1
 800eece:	e7d1      	b.n	800ee74 <__gethex+0x2d0>
 800eed0:	2501      	movs	r5, #1
 800eed2:	e7e2      	b.n	800ee9a <__gethex+0x2f6>
 800eed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eed6:	f1c3 0301 	rsb	r3, r3, #1
 800eeda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eedc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d0f0      	beq.n	800eec4 <__gethex+0x320>
 800eee2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eee6:	f104 0314 	add.w	r3, r4, #20
 800eeea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eeee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eef2:	f04f 0c00 	mov.w	ip, #0
 800eef6:	4618      	mov	r0, r3
 800eef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eefc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef00:	d01b      	beq.n	800ef3a <__gethex+0x396>
 800ef02:	3201      	adds	r2, #1
 800ef04:	6002      	str	r2, [r0, #0]
 800ef06:	2d02      	cmp	r5, #2
 800ef08:	f104 0314 	add.w	r3, r4, #20
 800ef0c:	d13c      	bne.n	800ef88 <__gethex+0x3e4>
 800ef0e:	f8d8 2000 	ldr.w	r2, [r8]
 800ef12:	3a01      	subs	r2, #1
 800ef14:	42b2      	cmp	r2, r6
 800ef16:	d109      	bne.n	800ef2c <__gethex+0x388>
 800ef18:	1171      	asrs	r1, r6, #5
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef20:	f006 061f 	and.w	r6, r6, #31
 800ef24:	fa02 f606 	lsl.w	r6, r2, r6
 800ef28:	421e      	tst	r6, r3
 800ef2a:	d13a      	bne.n	800efa2 <__gethex+0x3fe>
 800ef2c:	f045 0520 	orr.w	r5, r5, #32
 800ef30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef32:	601c      	str	r4, [r3, #0]
 800ef34:	9b02      	ldr	r3, [sp, #8]
 800ef36:	601f      	str	r7, [r3, #0]
 800ef38:	e6b0      	b.n	800ec9c <__gethex+0xf8>
 800ef3a:	4299      	cmp	r1, r3
 800ef3c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ef40:	d8d9      	bhi.n	800eef6 <__gethex+0x352>
 800ef42:	68a3      	ldr	r3, [r4, #8]
 800ef44:	459b      	cmp	fp, r3
 800ef46:	db17      	blt.n	800ef78 <__gethex+0x3d4>
 800ef48:	6861      	ldr	r1, [r4, #4]
 800ef4a:	9801      	ldr	r0, [sp, #4]
 800ef4c:	3101      	adds	r1, #1
 800ef4e:	f7fd fe2b 	bl	800cba8 <_Balloc>
 800ef52:	4681      	mov	r9, r0
 800ef54:	b918      	cbnz	r0, 800ef5e <__gethex+0x3ba>
 800ef56:	4b1a      	ldr	r3, [pc, #104]	@ (800efc0 <__gethex+0x41c>)
 800ef58:	4602      	mov	r2, r0
 800ef5a:	2184      	movs	r1, #132	@ 0x84
 800ef5c:	e6c5      	b.n	800ecea <__gethex+0x146>
 800ef5e:	6922      	ldr	r2, [r4, #16]
 800ef60:	3202      	adds	r2, #2
 800ef62:	f104 010c 	add.w	r1, r4, #12
 800ef66:	0092      	lsls	r2, r2, #2
 800ef68:	300c      	adds	r0, #12
 800ef6a:	f7ff fd83 	bl	800ea74 <memcpy>
 800ef6e:	4621      	mov	r1, r4
 800ef70:	9801      	ldr	r0, [sp, #4]
 800ef72:	f7fd fe59 	bl	800cc28 <_Bfree>
 800ef76:	464c      	mov	r4, r9
 800ef78:	6923      	ldr	r3, [r4, #16]
 800ef7a:	1c5a      	adds	r2, r3, #1
 800ef7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef80:	6122      	str	r2, [r4, #16]
 800ef82:	2201      	movs	r2, #1
 800ef84:	615a      	str	r2, [r3, #20]
 800ef86:	e7be      	b.n	800ef06 <__gethex+0x362>
 800ef88:	6922      	ldr	r2, [r4, #16]
 800ef8a:	455a      	cmp	r2, fp
 800ef8c:	dd0b      	ble.n	800efa6 <__gethex+0x402>
 800ef8e:	2101      	movs	r1, #1
 800ef90:	4620      	mov	r0, r4
 800ef92:	f7ff fda0 	bl	800ead6 <rshift>
 800ef96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef9a:	3701      	adds	r7, #1
 800ef9c:	42bb      	cmp	r3, r7
 800ef9e:	f6ff aee0 	blt.w	800ed62 <__gethex+0x1be>
 800efa2:	2501      	movs	r5, #1
 800efa4:	e7c2      	b.n	800ef2c <__gethex+0x388>
 800efa6:	f016 061f 	ands.w	r6, r6, #31
 800efaa:	d0fa      	beq.n	800efa2 <__gethex+0x3fe>
 800efac:	4453      	add	r3, sl
 800efae:	f1c6 0620 	rsb	r6, r6, #32
 800efb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800efb6:	f7fd fee9 	bl	800cd8c <__hi0bits>
 800efba:	42b0      	cmp	r0, r6
 800efbc:	dbe7      	blt.n	800ef8e <__gethex+0x3ea>
 800efbe:	e7f0      	b.n	800efa2 <__gethex+0x3fe>
 800efc0:	08010c50 	.word	0x08010c50

0800efc4 <L_shift>:
 800efc4:	f1c2 0208 	rsb	r2, r2, #8
 800efc8:	0092      	lsls	r2, r2, #2
 800efca:	b570      	push	{r4, r5, r6, lr}
 800efcc:	f1c2 0620 	rsb	r6, r2, #32
 800efd0:	6843      	ldr	r3, [r0, #4]
 800efd2:	6804      	ldr	r4, [r0, #0]
 800efd4:	fa03 f506 	lsl.w	r5, r3, r6
 800efd8:	432c      	orrs	r4, r5
 800efda:	40d3      	lsrs	r3, r2
 800efdc:	6004      	str	r4, [r0, #0]
 800efde:	f840 3f04 	str.w	r3, [r0, #4]!
 800efe2:	4288      	cmp	r0, r1
 800efe4:	d3f4      	bcc.n	800efd0 <L_shift+0xc>
 800efe6:	bd70      	pop	{r4, r5, r6, pc}

0800efe8 <__match>:
 800efe8:	b530      	push	{r4, r5, lr}
 800efea:	6803      	ldr	r3, [r0, #0]
 800efec:	3301      	adds	r3, #1
 800efee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eff2:	b914      	cbnz	r4, 800effa <__match+0x12>
 800eff4:	6003      	str	r3, [r0, #0]
 800eff6:	2001      	movs	r0, #1
 800eff8:	bd30      	pop	{r4, r5, pc}
 800effa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800effe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f002:	2d19      	cmp	r5, #25
 800f004:	bf98      	it	ls
 800f006:	3220      	addls	r2, #32
 800f008:	42a2      	cmp	r2, r4
 800f00a:	d0f0      	beq.n	800efee <__match+0x6>
 800f00c:	2000      	movs	r0, #0
 800f00e:	e7f3      	b.n	800eff8 <__match+0x10>

0800f010 <__hexnan>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	680b      	ldr	r3, [r1, #0]
 800f016:	6801      	ldr	r1, [r0, #0]
 800f018:	115e      	asrs	r6, r3, #5
 800f01a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f01e:	f013 031f 	ands.w	r3, r3, #31
 800f022:	b087      	sub	sp, #28
 800f024:	bf18      	it	ne
 800f026:	3604      	addne	r6, #4
 800f028:	2500      	movs	r5, #0
 800f02a:	1f37      	subs	r7, r6, #4
 800f02c:	4682      	mov	sl, r0
 800f02e:	4690      	mov	r8, r2
 800f030:	9301      	str	r3, [sp, #4]
 800f032:	f846 5c04 	str.w	r5, [r6, #-4]
 800f036:	46b9      	mov	r9, r7
 800f038:	463c      	mov	r4, r7
 800f03a:	9502      	str	r5, [sp, #8]
 800f03c:	46ab      	mov	fp, r5
 800f03e:	784a      	ldrb	r2, [r1, #1]
 800f040:	1c4b      	adds	r3, r1, #1
 800f042:	9303      	str	r3, [sp, #12]
 800f044:	b342      	cbz	r2, 800f098 <__hexnan+0x88>
 800f046:	4610      	mov	r0, r2
 800f048:	9105      	str	r1, [sp, #20]
 800f04a:	9204      	str	r2, [sp, #16]
 800f04c:	f7ff fd95 	bl	800eb7a <__hexdig_fun>
 800f050:	2800      	cmp	r0, #0
 800f052:	d151      	bne.n	800f0f8 <__hexnan+0xe8>
 800f054:	9a04      	ldr	r2, [sp, #16]
 800f056:	9905      	ldr	r1, [sp, #20]
 800f058:	2a20      	cmp	r2, #32
 800f05a:	d818      	bhi.n	800f08e <__hexnan+0x7e>
 800f05c:	9b02      	ldr	r3, [sp, #8]
 800f05e:	459b      	cmp	fp, r3
 800f060:	dd13      	ble.n	800f08a <__hexnan+0x7a>
 800f062:	454c      	cmp	r4, r9
 800f064:	d206      	bcs.n	800f074 <__hexnan+0x64>
 800f066:	2d07      	cmp	r5, #7
 800f068:	dc04      	bgt.n	800f074 <__hexnan+0x64>
 800f06a:	462a      	mov	r2, r5
 800f06c:	4649      	mov	r1, r9
 800f06e:	4620      	mov	r0, r4
 800f070:	f7ff ffa8 	bl	800efc4 <L_shift>
 800f074:	4544      	cmp	r4, r8
 800f076:	d952      	bls.n	800f11e <__hexnan+0x10e>
 800f078:	2300      	movs	r3, #0
 800f07a:	f1a4 0904 	sub.w	r9, r4, #4
 800f07e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f082:	f8cd b008 	str.w	fp, [sp, #8]
 800f086:	464c      	mov	r4, r9
 800f088:	461d      	mov	r5, r3
 800f08a:	9903      	ldr	r1, [sp, #12]
 800f08c:	e7d7      	b.n	800f03e <__hexnan+0x2e>
 800f08e:	2a29      	cmp	r2, #41	@ 0x29
 800f090:	d157      	bne.n	800f142 <__hexnan+0x132>
 800f092:	3102      	adds	r1, #2
 800f094:	f8ca 1000 	str.w	r1, [sl]
 800f098:	f1bb 0f00 	cmp.w	fp, #0
 800f09c:	d051      	beq.n	800f142 <__hexnan+0x132>
 800f09e:	454c      	cmp	r4, r9
 800f0a0:	d206      	bcs.n	800f0b0 <__hexnan+0xa0>
 800f0a2:	2d07      	cmp	r5, #7
 800f0a4:	dc04      	bgt.n	800f0b0 <__hexnan+0xa0>
 800f0a6:	462a      	mov	r2, r5
 800f0a8:	4649      	mov	r1, r9
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f7ff ff8a 	bl	800efc4 <L_shift>
 800f0b0:	4544      	cmp	r4, r8
 800f0b2:	d936      	bls.n	800f122 <__hexnan+0x112>
 800f0b4:	f1a8 0204 	sub.w	r2, r8, #4
 800f0b8:	4623      	mov	r3, r4
 800f0ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800f0be:	f842 1f04 	str.w	r1, [r2, #4]!
 800f0c2:	429f      	cmp	r7, r3
 800f0c4:	d2f9      	bcs.n	800f0ba <__hexnan+0xaa>
 800f0c6:	1b3b      	subs	r3, r7, r4
 800f0c8:	f023 0303 	bic.w	r3, r3, #3
 800f0cc:	3304      	adds	r3, #4
 800f0ce:	3401      	adds	r4, #1
 800f0d0:	3e03      	subs	r6, #3
 800f0d2:	42b4      	cmp	r4, r6
 800f0d4:	bf88      	it	hi
 800f0d6:	2304      	movhi	r3, #4
 800f0d8:	4443      	add	r3, r8
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f843 2b04 	str.w	r2, [r3], #4
 800f0e0:	429f      	cmp	r7, r3
 800f0e2:	d2fb      	bcs.n	800f0dc <__hexnan+0xcc>
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	b91b      	cbnz	r3, 800f0f0 <__hexnan+0xe0>
 800f0e8:	4547      	cmp	r7, r8
 800f0ea:	d128      	bne.n	800f13e <__hexnan+0x12e>
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	603b      	str	r3, [r7, #0]
 800f0f0:	2005      	movs	r0, #5
 800f0f2:	b007      	add	sp, #28
 800f0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f8:	3501      	adds	r5, #1
 800f0fa:	2d08      	cmp	r5, #8
 800f0fc:	f10b 0b01 	add.w	fp, fp, #1
 800f100:	dd06      	ble.n	800f110 <__hexnan+0x100>
 800f102:	4544      	cmp	r4, r8
 800f104:	d9c1      	bls.n	800f08a <__hexnan+0x7a>
 800f106:	2300      	movs	r3, #0
 800f108:	f844 3c04 	str.w	r3, [r4, #-4]
 800f10c:	2501      	movs	r5, #1
 800f10e:	3c04      	subs	r4, #4
 800f110:	6822      	ldr	r2, [r4, #0]
 800f112:	f000 000f 	and.w	r0, r0, #15
 800f116:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f11a:	6020      	str	r0, [r4, #0]
 800f11c:	e7b5      	b.n	800f08a <__hexnan+0x7a>
 800f11e:	2508      	movs	r5, #8
 800f120:	e7b3      	b.n	800f08a <__hexnan+0x7a>
 800f122:	9b01      	ldr	r3, [sp, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d0dd      	beq.n	800f0e4 <__hexnan+0xd4>
 800f128:	f1c3 0320 	rsb	r3, r3, #32
 800f12c:	f04f 32ff 	mov.w	r2, #4294967295
 800f130:	40da      	lsrs	r2, r3
 800f132:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f136:	4013      	ands	r3, r2
 800f138:	f846 3c04 	str.w	r3, [r6, #-4]
 800f13c:	e7d2      	b.n	800f0e4 <__hexnan+0xd4>
 800f13e:	3f04      	subs	r7, #4
 800f140:	e7d0      	b.n	800f0e4 <__hexnan+0xd4>
 800f142:	2004      	movs	r0, #4
 800f144:	e7d5      	b.n	800f0f2 <__hexnan+0xe2>

0800f146 <__ascii_mbtowc>:
 800f146:	b082      	sub	sp, #8
 800f148:	b901      	cbnz	r1, 800f14c <__ascii_mbtowc+0x6>
 800f14a:	a901      	add	r1, sp, #4
 800f14c:	b142      	cbz	r2, 800f160 <__ascii_mbtowc+0x1a>
 800f14e:	b14b      	cbz	r3, 800f164 <__ascii_mbtowc+0x1e>
 800f150:	7813      	ldrb	r3, [r2, #0]
 800f152:	600b      	str	r3, [r1, #0]
 800f154:	7812      	ldrb	r2, [r2, #0]
 800f156:	1e10      	subs	r0, r2, #0
 800f158:	bf18      	it	ne
 800f15a:	2001      	movne	r0, #1
 800f15c:	b002      	add	sp, #8
 800f15e:	4770      	bx	lr
 800f160:	4610      	mov	r0, r2
 800f162:	e7fb      	b.n	800f15c <__ascii_mbtowc+0x16>
 800f164:	f06f 0001 	mvn.w	r0, #1
 800f168:	e7f8      	b.n	800f15c <__ascii_mbtowc+0x16>

0800f16a <_realloc_r>:
 800f16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16e:	4680      	mov	r8, r0
 800f170:	4615      	mov	r5, r2
 800f172:	460c      	mov	r4, r1
 800f174:	b921      	cbnz	r1, 800f180 <_realloc_r+0x16>
 800f176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f17a:	4611      	mov	r1, r2
 800f17c:	f7fd bc88 	b.w	800ca90 <_malloc_r>
 800f180:	b92a      	cbnz	r2, 800f18e <_realloc_r+0x24>
 800f182:	f7fd fc11 	bl	800c9a8 <_free_r>
 800f186:	2400      	movs	r4, #0
 800f188:	4620      	mov	r0, r4
 800f18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f18e:	f000 f86b 	bl	800f268 <_malloc_usable_size_r>
 800f192:	4285      	cmp	r5, r0
 800f194:	4606      	mov	r6, r0
 800f196:	d802      	bhi.n	800f19e <_realloc_r+0x34>
 800f198:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f19c:	d8f4      	bhi.n	800f188 <_realloc_r+0x1e>
 800f19e:	4629      	mov	r1, r5
 800f1a0:	4640      	mov	r0, r8
 800f1a2:	f7fd fc75 	bl	800ca90 <_malloc_r>
 800f1a6:	4607      	mov	r7, r0
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d0ec      	beq.n	800f186 <_realloc_r+0x1c>
 800f1ac:	42b5      	cmp	r5, r6
 800f1ae:	462a      	mov	r2, r5
 800f1b0:	4621      	mov	r1, r4
 800f1b2:	bf28      	it	cs
 800f1b4:	4632      	movcs	r2, r6
 800f1b6:	f7ff fc5d 	bl	800ea74 <memcpy>
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	4640      	mov	r0, r8
 800f1be:	f7fd fbf3 	bl	800c9a8 <_free_r>
 800f1c2:	463c      	mov	r4, r7
 800f1c4:	e7e0      	b.n	800f188 <_realloc_r+0x1e>

0800f1c6 <__ascii_wctomb>:
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	4608      	mov	r0, r1
 800f1ca:	b141      	cbz	r1, 800f1de <__ascii_wctomb+0x18>
 800f1cc:	2aff      	cmp	r2, #255	@ 0xff
 800f1ce:	d904      	bls.n	800f1da <__ascii_wctomb+0x14>
 800f1d0:	228a      	movs	r2, #138	@ 0x8a
 800f1d2:	601a      	str	r2, [r3, #0]
 800f1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d8:	4770      	bx	lr
 800f1da:	700a      	strb	r2, [r1, #0]
 800f1dc:	2001      	movs	r0, #1
 800f1de:	4770      	bx	lr

0800f1e0 <_raise_r>:
 800f1e0:	291f      	cmp	r1, #31
 800f1e2:	b538      	push	{r3, r4, r5, lr}
 800f1e4:	4605      	mov	r5, r0
 800f1e6:	460c      	mov	r4, r1
 800f1e8:	d904      	bls.n	800f1f4 <_raise_r+0x14>
 800f1ea:	2316      	movs	r3, #22
 800f1ec:	6003      	str	r3, [r0, #0]
 800f1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f2:	bd38      	pop	{r3, r4, r5, pc}
 800f1f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f1f6:	b112      	cbz	r2, 800f1fe <_raise_r+0x1e>
 800f1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1fc:	b94b      	cbnz	r3, 800f212 <_raise_r+0x32>
 800f1fe:	4628      	mov	r0, r5
 800f200:	f000 f830 	bl	800f264 <_getpid_r>
 800f204:	4622      	mov	r2, r4
 800f206:	4601      	mov	r1, r0
 800f208:	4628      	mov	r0, r5
 800f20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f20e:	f000 b817 	b.w	800f240 <_kill_r>
 800f212:	2b01      	cmp	r3, #1
 800f214:	d00a      	beq.n	800f22c <_raise_r+0x4c>
 800f216:	1c59      	adds	r1, r3, #1
 800f218:	d103      	bne.n	800f222 <_raise_r+0x42>
 800f21a:	2316      	movs	r3, #22
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	2001      	movs	r0, #1
 800f220:	e7e7      	b.n	800f1f2 <_raise_r+0x12>
 800f222:	2100      	movs	r1, #0
 800f224:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f228:	4620      	mov	r0, r4
 800f22a:	4798      	blx	r3
 800f22c:	2000      	movs	r0, #0
 800f22e:	e7e0      	b.n	800f1f2 <_raise_r+0x12>

0800f230 <raise>:
 800f230:	4b02      	ldr	r3, [pc, #8]	@ (800f23c <raise+0xc>)
 800f232:	4601      	mov	r1, r0
 800f234:	6818      	ldr	r0, [r3, #0]
 800f236:	f7ff bfd3 	b.w	800f1e0 <_raise_r>
 800f23a:	bf00      	nop
 800f23c:	2000003c 	.word	0x2000003c

0800f240 <_kill_r>:
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	4d07      	ldr	r5, [pc, #28]	@ (800f260 <_kill_r+0x20>)
 800f244:	2300      	movs	r3, #0
 800f246:	4604      	mov	r4, r0
 800f248:	4608      	mov	r0, r1
 800f24a:	4611      	mov	r1, r2
 800f24c:	602b      	str	r3, [r5, #0]
 800f24e:	f7f4 f9c5 	bl	80035dc <_kill>
 800f252:	1c43      	adds	r3, r0, #1
 800f254:	d102      	bne.n	800f25c <_kill_r+0x1c>
 800f256:	682b      	ldr	r3, [r5, #0]
 800f258:	b103      	cbz	r3, 800f25c <_kill_r+0x1c>
 800f25a:	6023      	str	r3, [r4, #0]
 800f25c:	bd38      	pop	{r3, r4, r5, pc}
 800f25e:	bf00      	nop
 800f260:	200010f4 	.word	0x200010f4

0800f264 <_getpid_r>:
 800f264:	f7f4 b9b2 	b.w	80035cc <_getpid>

0800f268 <_malloc_usable_size_r>:
 800f268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f26c:	1f18      	subs	r0, r3, #4
 800f26e:	2b00      	cmp	r3, #0
 800f270:	bfbc      	itt	lt
 800f272:	580b      	ldrlt	r3, [r1, r0]
 800f274:	18c0      	addlt	r0, r0, r3
 800f276:	4770      	bx	lr

0800f278 <_init>:
 800f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27a:	bf00      	nop
 800f27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27e:	bc08      	pop	{r3}
 800f280:	469e      	mov	lr, r3
 800f282:	4770      	bx	lr

0800f284 <_fini>:
 800f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f286:	bf00      	nop
 800f288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f28a:	bc08      	pop	{r3}
 800f28c:	469e      	mov	lr, r3
 800f28e:	4770      	bx	lr
