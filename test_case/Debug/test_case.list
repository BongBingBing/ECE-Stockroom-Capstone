
test_case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009990  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  08009b60  08009b60  0000ab60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6ec  0800a6ec  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6ec  0800a6ec  0000b6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6f4  0800a6f4  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6f4  0800a6f4  0000b6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6f8  0800a6f8  0000b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a6fc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  200001d4  0800a8d0  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  0800a8d0  0000c7f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001078d  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dec  00000000  00000000  0001c991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  0001f780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b10  00000000  00000000  000205f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b13  00000000  00000000  00021100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015737  00000000  00000000  00045c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d305b  00000000  00000000  0005b34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e3a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053dc  00000000  00000000  0012e3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001337c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009b48 	.word	0x08009b48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08009b48 	.word	0x08009b48

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <getTare>:
#define SELECT_PIN GPIO_PIN_2
#define RESET_PIN GPIO_PIN_1
#define BUTTON_PORT GPIOB


uint32_t getTare(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	printf("Remove all weight from the drawer(5 seconds)\n\r");
 80010ca:	4815      	ldr	r0, [pc, #84]	@ (8001120 <getTare+0x5c>)
 80010cc:	f004 fec4 	bl	8005e58 <iprintf>
	HAL_Delay(5000);
 80010d0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80010d4:	f001 fc50 	bl	8002978 <HAL_Delay>
	printf("Gathering initial Tare of Load Cell...\n\r");
 80010d8:	4812      	ldr	r0, [pc, #72]	@ (8001124 <getTare+0x60>)
 80010da:	f004 febd 	bl	8005e58 <iprintf>
	int weight_temp = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 1; i <= 4; i++){
 80010e2:	2301      	movs	r3, #1
 80010e4:	807b      	strh	r3, [r7, #2]
 80010e6:	e00e      	b.n	8001106 <getTare+0x42>
			weight_temp = (int)weighRaw();
 80010e8:	f001 f8f7 	bl	80022da <weighRaw>
 80010ec:	6078      	str	r0, [r7, #4]
			printf("Tare attempt %d: %d\n\r", i, weight_temp);
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4619      	mov	r1, r3
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <getTare+0x64>)
 80010f6:	f004 feaf 	bl	8005e58 <iprintf>
			HAL_Delay(10);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 fc3c 	bl	8002978 <HAL_Delay>
	for(uint16_t i = 1; i <= 4; i++){
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	3301      	adds	r3, #1
 8001104:	807b      	strh	r3, [r7, #2]
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d9ed      	bls.n	80010e8 <getTare+0x24>
		}
	printf("Tare Set: %d\n\r", weight_temp);
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4807      	ldr	r0, [pc, #28]	@ (800112c <getTare+0x68>)
 8001110:	f004 fea2 	bl	8005e58 <iprintf>
	return weight_temp;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	08009b60 	.word	0x08009b60
 8001124:	08009b90 	.word	0x08009b90
 8001128:	08009bbc 	.word	0x08009bbc
 800112c:	08009bd4 	.word	0x08009bd4

08001130 <Calibrate>:

void Calibrate(){
 8001130:	b580      	push	{r7, lr}
 8001132:	b092      	sub	sp, #72	@ 0x48
 8001134:	af00      	add	r7, sp, #0
	printf("Beginning with Row: 1 Drawer: 1\n\r");
 8001136:	48a9      	ldr	r0, [pc, #676]	@ (80013dc <Calibrate+0x2ac>)
 8001138:	f004 fe8e 	bl	8005e58 <iprintf>

	uint32_t tare = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
	float knownHX711 = 1;
 8001140:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001144:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int thresh = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	@ 0x28

	for(int i = 1; i <= 4; i++){
 800114a:	2301      	movs	r3, #1
 800114c:	647b      	str	r3, [r7, #68]	@ 0x44
 800114e:	e13b      	b.n	80013c8 <Calibrate+0x298>
		printf("Row %d", i);
 8001150:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001152:	48a3      	ldr	r0, [pc, #652]	@ (80013e0 <Calibrate+0x2b0>)
 8001154:	f004 fe80 	bl	8005e58 <iprintf>

		uint16_t A_mast = MuxCombos[i-1].A;
 8001158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800115a:	1e5a      	subs	r2, r3, #1
 800115c:	49a1      	ldr	r1, [pc, #644]	@ (80013e4 <Calibrate+0x2b4>)
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	440b      	add	r3, r1
 8001166:	3302      	adds	r3, #2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		uint16_t B_mast = MuxCombos[i-1].B;
 800116c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	499c      	ldr	r1, [pc, #624]	@ (80013e4 <Calibrate+0x2b4>)
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	440b      	add	r3, r1
 800117a:	3301      	adds	r3, #1
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t C_mast = MuxCombos[i-1].C;
 8001180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	4997      	ldr	r1, [pc, #604]	@ (80013e4 <Calibrate+0x2b4>)
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	440b      	add	r3, r1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	847b      	strh	r3, [r7, #34]	@ 0x22

		muxSET(A_mast, B_mast, C_mast, 1);
 8001192:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001194:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001196:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8001198:	2301      	movs	r3, #1
 800119a:	f000 ff0b 	bl	8001fb4 <muxSET>

		setRelay(i);
 800119e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 ff4e 	bl	8002044 <setRelay>

		if(i == 1){
 80011a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	f040 8085 	bne.w	80012ba <Calibrate+0x18a>
			for(int j = 1; j <= 4; j++){
 80011b0:	2301      	movs	r3, #1
 80011b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80011b4:	e07c      	b.n	80012b0 <Calibrate+0x180>

				uint16_t A_slave = MuxCombos[j-1].A;
 80011b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011b8:	1e5a      	subs	r2, r3, #1
 80011ba:	498a      	ldr	r1, [pc, #552]	@ (80013e4 <Calibrate+0x2b4>)
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	3302      	adds	r3, #2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	81fb      	strh	r3, [r7, #14]
				uint16_t B_slave = MuxCombos[j-1].B;
 80011ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	4985      	ldr	r1, [pc, #532]	@ (80013e4 <Calibrate+0x2b4>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	3301      	adds	r3, #1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	81bb      	strh	r3, [r7, #12]
				uint16_t C_slave = MuxCombos[j-1].C;
 80011de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	4980      	ldr	r1, [pc, #512]	@ (80013e4 <Calibrate+0x2b4>)
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	817b      	strh	r3, [r7, #10]

				muxSET(A_slave, B_slave, C_slave, 0);
 80011f0:	897a      	ldrh	r2, [r7, #10]
 80011f2:	89b9      	ldrh	r1, [r7, #12]
 80011f4:	89f8      	ldrh	r0, [r7, #14]
 80011f6:	2300      	movs	r3, #0
 80011f8:	f000 fedc 	bl	8001fb4 <muxSET>

				printf("Drawer %d", j);
 80011fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80011fe:	487a      	ldr	r0, [pc, #488]	@ (80013e8 <Calibrate+0x2b8>)
 8001200:	f004 fe2a 	bl	8005e58 <iprintf>
				tare = getTare();
 8001204:	f7ff ff5e 	bl	80010c4 <getTare>
 8001208:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button once when ready to calibrate\n\r");
 800120a:	4878      	ldr	r0, [pc, #480]	@ (80013ec <Calibrate+0x2bc>)
 800120c:	f004 fe24 	bl	8005e58 <iprintf>

				//single press confirmation here

				singlePress(BUTTON_PORT, SELECT_PIN);
 8001210:	2104      	movs	r1, #4
 8001212:	4877      	ldr	r0, [pc, #476]	@ (80013f0 <Calibrate+0x2c0>)
 8001214:	f000 feb4 	bl	8001f80 <singlePress>

				knownHX711 = weighRawTare(tare);
 8001218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800121a:	f001 f898 	bl	800234e <weighRawTare>
 800121e:	ee07 0a90 	vmov	s15, r0
 8001222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001226:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
				printf("Read weight: %f", knownHX711);
 800122a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800122c:	f7ff f9ac 	bl	8000588 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	486f      	ldr	r0, [pc, #444]	@ (80013f4 <Calibrate+0x2c4>)
 8001236:	f004 fe0f 	bl	8005e58 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 800123a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800123e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001242:	ee17 0a90 	vmov	r0, s15
 8001246:	f001 f8c3 	bl	80023d0 <getCalFactor>
 800124a:	ed87 0a01 	vstr	s0, [r7, #4]

				for(int p = 0; p < 4; p++){
 800124e:	2300      	movs	r3, #0
 8001250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001252:	e010      	b.n	8001276 <Calibrate+0x146>
					int weight = weigh(tare, calFactor);
 8001254:	ed97 0a01 	vldr	s0, [r7, #4]
 8001258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800125a:	f000 ffef 	bl	800223c <weigh>
 800125e:	6038      	str	r0, [r7, #0]
					printf("Weight: %d", weight);
 8001260:	6839      	ldr	r1, [r7, #0]
 8001262:	4865      	ldr	r0, [pc, #404]	@ (80013f8 <Calibrate+0x2c8>)
 8001264:	f004 fdf8 	bl	8005e58 <iprintf>
					HAL_Delay(400);
 8001268:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800126c:	f001 fb84 	bl	8002978 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001272:	3301      	adds	r3, #1
 8001274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001278:	2b03      	cmp	r3, #3
 800127a:	ddeb      	ble.n	8001254 <Calibrate+0x124>
				}

				thresh = refillDrawer(tare, calFactor);
 800127c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001280:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001282:	f000 f907 	bl	8001494 <refillDrawer>
 8001286:	62b8      	str	r0, [r7, #40]	@ 0x28

				saveDrawerConfig(i, j, calFactor, tare, thresh);
 8001288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800128a:	b29b      	uxth	r3, r3
 800128c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800128e:	b291      	uxth	r1, r2
 8001290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001292:	ee07 2a90 	vmov	s15, r2
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	eef0 0a67 	vmov.f32	s1, s15
 800129e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012a0:	ed97 0a01 	vldr	s0, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fbc9 	bl	8001a3c <saveDrawerConfig>
			for(int j = 1; j <= 4; j++){
 80012aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ac:	3301      	adds	r3, #1
 80012ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80012b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	f77f af7f 	ble.w	80011b6 <Calibrate+0x86>
 80012b8:	e083      	b.n	80013c2 <Calibrate+0x292>
			}
		}
		else{
			for(int k = 1; k <= 7; k++){
 80012ba:	2301      	movs	r3, #1
 80012bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012be:	e07c      	b.n	80013ba <Calibrate+0x28a>

				uint16_t A_slave = MuxCombos[k-1].A;
 80012c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c2:	1e5a      	subs	r2, r3, #1
 80012c4:	4947      	ldr	r1, [pc, #284]	@ (80013e4 <Calibrate+0x2b4>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	3302      	adds	r3, #2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	843b      	strh	r3, [r7, #32]
				uint16_t B_slave = MuxCombos[k-1].B;
 80012d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	4942      	ldr	r1, [pc, #264]	@ (80013e4 <Calibrate+0x2b4>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	3301      	adds	r3, #1
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	83fb      	strh	r3, [r7, #30]
				uint16_t C_slave = MuxCombos[k-1].C;
 80012e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ea:	1e5a      	subs	r2, r3, #1
 80012ec:	493d      	ldr	r1, [pc, #244]	@ (80013e4 <Calibrate+0x2b4>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	83bb      	strh	r3, [r7, #28]

				muxSET(A_slave, B_slave, C_slave, 0);
 80012fa:	8bba      	ldrh	r2, [r7, #28]
 80012fc:	8bf9      	ldrh	r1, [r7, #30]
 80012fe:	8c38      	ldrh	r0, [r7, #32]
 8001300:	2300      	movs	r3, #0
 8001302:	f000 fe57 	bl	8001fb4 <muxSET>

				printf("Drawer %d", k);
 8001306:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001308:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <Calibrate+0x2b8>)
 800130a:	f004 fda5 	bl	8005e58 <iprintf>
				tare = getTare();
 800130e:	f7ff fed9 	bl	80010c4 <getTare>
 8001312:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button once when ready to calibrate\n\r");
 8001314:	4835      	ldr	r0, [pc, #212]	@ (80013ec <Calibrate+0x2bc>)
 8001316:	f004 fd9f 	bl	8005e58 <iprintf>

				//single press confirmation here
				singlePress(BUTTON_PORT, SELECT_PIN);
 800131a:	2104      	movs	r1, #4
 800131c:	4834      	ldr	r0, [pc, #208]	@ (80013f0 <Calibrate+0x2c0>)
 800131e:	f000 fe2f 	bl	8001f80 <singlePress>

				knownHX711 = weighRawTare(tare);
 8001322:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001324:	f001 f813 	bl	800234e <weighRawTare>
 8001328:	ee07 0a90 	vmov	s15, r0
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
				printf("Read weight: %f", knownHX711);
 8001334:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001336:	f7ff f927 	bl	8000588 <__aeabi_f2d>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	482d      	ldr	r0, [pc, #180]	@ (80013f4 <Calibrate+0x2c4>)
 8001340:	f004 fd8a 	bl	8005e58 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001344:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134c:	ee17 0a90 	vmov	r0, s15
 8001350:	f001 f83e 	bl	80023d0 <getCalFactor>
 8001354:	ed87 0a06 	vstr	s0, [r7, #24]

				for(int p = 0; p < 4; p++){
 8001358:	2300      	movs	r3, #0
 800135a:	637b      	str	r3, [r7, #52]	@ 0x34
 800135c:	e010      	b.n	8001380 <Calibrate+0x250>
					int weight = weigh(tare, calFactor);
 800135e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001362:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001364:	f000 ff6a 	bl	800223c <weigh>
 8001368:	6138      	str	r0, [r7, #16]
					printf("Weight: %d", weight);
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	4822      	ldr	r0, [pc, #136]	@ (80013f8 <Calibrate+0x2c8>)
 800136e:	f004 fd73 	bl	8005e58 <iprintf>
					HAL_Delay(400);
 8001372:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001376:	f001 faff 	bl	8002978 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 800137a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800137c:	3301      	adds	r3, #1
 800137e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001382:	2b03      	cmp	r3, #3
 8001384:	ddeb      	ble.n	800135e <Calibrate+0x22e>
				}

				int thresh = refillDrawer(tare, calFactor);
 8001386:	ed97 0a06 	vldr	s0, [r7, #24]
 800138a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800138c:	f000 f882 	bl	8001494 <refillDrawer>
 8001390:	6178      	str	r0, [r7, #20]

				saveDrawerConfig(i, k, calFactor, tare, thresh);
 8001392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001394:	b29b      	uxth	r3, r3
 8001396:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001398:	b291      	uxth	r1, r2
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	ee07 2a90 	vmov	s15, r2
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	eef0 0a67 	vmov.f32	s1, s15
 80013a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013aa:	ed97 0a06 	vldr	s0, [r7, #24]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fb44 	bl	8001a3c <saveDrawerConfig>
			for(int k = 1; k <= 7; k++){
 80013b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013b6:	3301      	adds	r3, #1
 80013b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013bc:	2b07      	cmp	r3, #7
 80013be:	f77f af7f 	ble.w	80012c0 <Calibrate+0x190>
	for(int i = 1; i <= 4; i++){
 80013c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013c4:	3301      	adds	r3, #1
 80013c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80013c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	f77f aec0 	ble.w	8001150 <Calibrate+0x20>

			}
		}
	}
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3748      	adds	r7, #72	@ 0x48
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	08009be4 	.word	0x08009be4
 80013e0:	08009c08 	.word	0x08009c08
 80013e4:	0800a234 	.word	0x0800a234
 80013e8:	08009c10 	.word	0x08009c10
 80013ec:	08009c1c 	.word	0x08009c1c
 80013f0:	40020400 	.word	0x40020400
 80013f4:	08009c78 	.word	0x08009c78
 80013f8:	08009c88 	.word	0x08009c88
 80013fc:	00000000 	.word	0x00000000

08001400 <getThresh>:

uint32_t DP_Threshold = 2000; // 2 second threshold
uint32_t press_time = 0;  // Timestamp of the first press
uint8_t press_count = 0;  // A Flag that's used for indicating a second press

int getThresh(uint32_t tare, float calFactor){
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	ed87 0a00 	vstr	s0, [r7]
	uint32_t sum = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
	float avg = 0;
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < 4; i++){
 8001416:	2300      	movs	r3, #0
 8001418:	827b      	strh	r3, [r7, #18]
 800141a:	e00d      	b.n	8001438 <getThresh+0x38>
		uint16_t weight = weigh(tare, calFactor);
 800141c:	ed97 0a00 	vldr	s0, [r7]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 ff0b 	bl	800223c <weigh>
 8001426:	4603      	mov	r3, r0
 8001428:	817b      	strh	r3, [r7, #10]
		sum += weight;
 800142a:	897b      	ldrh	r3, [r7, #10]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	4413      	add	r3, r2
 8001430:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < 4; i++){
 8001432:	8a7b      	ldrh	r3, [r7, #18]
 8001434:	3301      	adds	r3, #1
 8001436:	827b      	strh	r3, [r7, #18]
 8001438:	8a7b      	ldrh	r3, [r7, #18]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d9ee      	bls.n	800141c <getThresh+0x1c>
	}

	avg = sum / 4.0;
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff f880 	bl	8000544 <__aeabi_ui2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <getThresh+0x90>)
 800144a:	f7ff fa1f 	bl	800088c <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fbe7 	bl	8000c28 <__aeabi_d2f>
 800145a:	4603      	mov	r3, r0
 800145c:	60fb      	str	r3, [r7, #12]

	return (avg * 0.1); //returns 10% of the normalized weight as the threshold
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7ff f892 	bl	8000588 <__aeabi_f2d>
 8001464:	a308      	add	r3, pc, #32	@ (adr r3, 8001488 <getThresh+0x88>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f8e5 	bl	8000638 <__aeabi_dmul>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fb8f 	bl	8000b98 <__aeabi_d2iz>
 800147a:	4603      	mov	r3, r0

}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	9999999a 	.word	0x9999999a
 800148c:	3fb99999 	.word	0x3fb99999
 8001490:	40100000 	.word	0x40100000

08001494 <refillDrawer>:



int refillDrawer(uint32_t tare, float calFactor){
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	ed87 0a00 	vstr	s0, [r7]
	printf("Please refill the current drawer\n\rPress the button twice when ready\n\r");
 80014a0:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <refillDrawer+0x3c>)
 80014a2:	f004 fcd9 	bl	8005e58 <iprintf>

	//function to wait for a double press then a confirmation press
	doublePress(GROUP, PIN);
 80014a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014aa:	480a      	ldr	r0, [pc, #40]	@ (80014d4 <refillDrawer+0x40>)
 80014ac:	f000 fd28 	bl	8001f00 <doublePress>

	int thresh = getThresh(tare, calFactor);
 80014b0:	ed97 0a00 	vldr	s0, [r7]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffa3 	bl	8001400 <getThresh>
 80014ba:	60f8      	str	r0, [r7, #12]
	printf("Threshold set to %d", thresh);
 80014bc:	68f9      	ldr	r1, [r7, #12]
 80014be:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <refillDrawer+0x44>)
 80014c0:	f004 fcca 	bl	8005e58 <iprintf>
	return thresh;
 80014c4:	68fb      	ldr	r3, [r7, #12]


}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08009c94 	.word	0x08009c94
 80014d4:	40020000 	.word	0x40020000
 80014d8:	08009cdc 	.word	0x08009cdc

080014dc <main_function>:
#define DT_PIN GPIO_PIN_8
#define DT_PORT GPIOA
#define SCK_PIN GPIO_PIN_5
#define SCK_PORT GPIOB

void main_function(){
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b099      	sub	sp, #100	@ 0x64
 80014e0:	af00      	add	r7, sp, #0


	struct drawerInfo drawerInst;
	uint32_t tare = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	64bb      	str	r3, [r7, #72]	@ 0x48
	float calFactor = 1;
 80014e6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80014ea:	647b      	str	r3, [r7, #68]	@ 0x44
	int thresh;

	uint32_t sum;
	uint16_t normalizedWeight;

	for(uint16_t i = 1; i <= 4; i++){
 80014ec:	2301      	movs	r3, #1
 80014ee:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80014f2:	e15a      	b.n	80017aa <main_function+0x2ce>
			printf("Row %d", i);
 80014f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80014f8:	4619      	mov	r1, r3
 80014fa:	48b1      	ldr	r0, [pc, #708]	@ (80017c0 <main_function+0x2e4>)
 80014fc:	f004 fcac 	bl	8005e58 <iprintf>

			uint16_t A_mast = MuxCombos[i-1].A;
 8001500:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	49af      	ldr	r1, [pc, #700]	@ (80017c4 <main_function+0x2e8>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	440b      	add	r3, r1
 8001510:	3302      	adds	r3, #2
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			uint16_t B_mast = MuxCombos[i-1].B;
 8001518:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	49a9      	ldr	r1, [pc, #676]	@ (80017c4 <main_function+0x2e8>)
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	440b      	add	r3, r1
 8001528:	3301      	adds	r3, #1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t C_mast = MuxCombos[i-1].C;
 8001530:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	49a3      	ldr	r1, [pc, #652]	@ (80017c4 <main_function+0x2e8>)
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	440b      	add	r3, r1
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	87fb      	strh	r3, [r7, #62]	@ 0x3e

			muxSET(A_mast, B_mast, C_mast, 1);
 8001544:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001546:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800154a:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 800154e:	2301      	movs	r3, #1
 8001550:	f000 fd30 	bl	8001fb4 <muxSET>

			setRelay(i);
 8001554:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fd72 	bl	8002044 <setRelay>

			if(i == 1){
 8001560:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001564:	2b01      	cmp	r3, #1
 8001566:	f040 8090 	bne.w	800168a <main_function+0x1ae>
				for(uint16_t j = 1; j <= 4; j++){
 800156a:	2301      	movs	r3, #1
 800156c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8001570:	e085      	b.n	800167e <main_function+0x1a2>

					sum = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[j-1].A;
 800157a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800157e:	1e5a      	subs	r2, r3, #1
 8001580:	4990      	ldr	r1, [pc, #576]	@ (80017c4 <main_function+0x2e8>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	440b      	add	r3, r1
 800158a:	3302      	adds	r3, #2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	857b      	strh	r3, [r7, #42]	@ 0x2a
					uint16_t B_slave = MuxCombos[j-1].B;
 8001590:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	498b      	ldr	r1, [pc, #556]	@ (80017c4 <main_function+0x2e8>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	440b      	add	r3, r1
 80015a0:	3301      	adds	r3, #1
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	853b      	strh	r3, [r7, #40]	@ 0x28
					uint16_t C_slave = MuxCombos[j-1].C;
 80015a6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80015aa:	1e5a      	subs	r2, r3, #1
 80015ac:	4985      	ldr	r1, [pc, #532]	@ (80017c4 <main_function+0x2e8>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

					muxSET(A_slave, B_slave, C_slave, 0);
 80015ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80015bc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80015be:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 80015c0:	2300      	movs	r3, #0
 80015c2:	f000 fcf7 	bl	8001fb4 <muxSET>

					printf("Drawer %d", j);
 80015c6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80015ca:	4619      	mov	r1, r3
 80015cc:	487e      	ldr	r0, [pc, #504]	@ (80017c8 <main_function+0x2ec>)
 80015ce:	f004 fc43 	bl	8005e58 <iprintf>

					drawerInst = getFileInfo(i, j);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80015da:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fba2 	bl	8001d28 <getFileInfo>

					tare = drawerInst.Tare;
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 80015ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f4:	ee17 3a90 	vmov	r3, s15
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 80015fa:	2300      	movs	r3, #0
 80015fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80015fe:	e010      	b.n	8001622 <main_function+0x146>

						int weight = weigh(tare, calFactor);
 8001600:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001604:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001606:	f000 fe19 	bl	800223c <weigh>
 800160a:	6238      	str	r0, [r7, #32]
						sum += weight;
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001610:	4413      	add	r3, r2
 8001612:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8001614:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001618:	f001 f9ae 	bl	8002978 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 800161c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800161e:	3301      	adds	r3, #1
 8001620:	657b      	str	r3, [r7, #84]	@ 0x54
 8001622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001624:	2b03      	cmp	r3, #3
 8001626:	ddeb      	ble.n	8001600 <main_function+0x124>
					}

					normalizedWeight = sum / 4;
 8001628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 800162e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001630:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8001634:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001636:	429a      	cmp	r2, r3
 8001638:	db1c      	blt.n	8001674 <main_function+0x198>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 800163a:	4864      	ldr	r0, [pc, #400]	@ (80017cc <main_function+0x2f0>)
 800163c:	f004 fc0c 	bl	8005e58 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 8001640:	4863      	ldr	r0, [pc, #396]	@ (80017d0 <main_function+0x2f4>)
 8001642:	f004 fc09 	bl	8005e58 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 8001646:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800164a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800164c:	f7ff ff22 	bl	8001494 <refillDrawer>
 8001650:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, j, calFactor, tare, thresh);
 8001652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165c:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8001660:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001664:	eef0 0a67 	vmov.f32	s1, s15
 8001668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800166a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fa38 	bl	8001ae4 <updateDrawerConfig>
				for(uint16_t j = 1; j <= 4; j++){
 8001674:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001678:	3301      	adds	r3, #1
 800167a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800167e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001682:	2b04      	cmp	r3, #4
 8001684:	f67f af75 	bls.w	8001572 <main_function+0x96>
 8001688:	e08a      	b.n	80017a0 <main_function+0x2c4>


				}
			}
			else{
				for(int k = 1; k <= 7; k++){
 800168a:	2301      	movs	r3, #1
 800168c:	653b      	str	r3, [r7, #80]	@ 0x50
 800168e:	e083      	b.n	8001798 <main_function+0x2bc>

					sum = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[k-1].A;
 8001698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800169a:	1e5a      	subs	r2, r3, #1
 800169c:	4949      	ldr	r1, [pc, #292]	@ (80017c4 <main_function+0x2e8>)
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	3302      	adds	r3, #2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
					uint16_t B_slave = MuxCombos[k-1].B;
 80016ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	4944      	ldr	r1, [pc, #272]	@ (80017c4 <main_function+0x2e8>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	3301      	adds	r3, #1
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	873b      	strh	r3, [r7, #56]	@ 0x38
					uint16_t C_slave = MuxCombos[k-1].C;
 80016c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016c2:	1e5a      	subs	r2, r3, #1
 80016c4:	493f      	ldr	r1, [pc, #252]	@ (80017c4 <main_function+0x2e8>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	86fb      	strh	r3, [r7, #54]	@ 0x36

					muxSET(A_slave, B_slave, C_slave, 0);
 80016d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80016d4:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80016d6:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 80016d8:	2300      	movs	r3, #0
 80016da:	f000 fc6b 	bl	8001fb4 <muxSET>

					printf("Drawer %d", k);
 80016de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80016e0:	4839      	ldr	r0, [pc, #228]	@ (80017c8 <main_function+0x2ec>)
 80016e2:	f004 fbb9 	bl	8005e58 <iprintf>

					drawerInst = getFileInfo(i, k);
 80016e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	463b      	mov	r3, r7
 80016ec:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fb19 	bl	8001d28 <getFileInfo>
 80016f6:	f107 0410 	add.w	r4, r7, #16
 80016fa:	463b      	mov	r3, r7
 80016fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

					tare = drawerInst.Tare;
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 800170a:	edd7 7a07 	vldr	s15, [r7, #28]
 800170e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001712:	ee17 3a90 	vmov	r3, s15
 8001716:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 8001718:	2300      	movs	r3, #0
 800171a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800171c:	e010      	b.n	8001740 <main_function+0x264>

						int weight = weigh(tare, calFactor);
 800171e:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001722:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001724:	f000 fd8a 	bl	800223c <weigh>
 8001728:	62f8      	str	r0, [r7, #44]	@ 0x2c
						sum += weight;
 800172a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800172c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800172e:	4413      	add	r3, r2
 8001730:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8001732:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001736:	f001 f91f 	bl	8002978 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 800173a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173c:	3301      	adds	r3, #1
 800173e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001742:	2b03      	cmp	r3, #3
 8001744:	ddeb      	ble.n	800171e <main_function+0x242>
					}

					normalizedWeight = sum / 4;
 8001746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 800174c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174e:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8001752:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001754:	429a      	cmp	r2, r3
 8001756:	db1c      	blt.n	8001792 <main_function+0x2b6>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 8001758:	481c      	ldr	r0, [pc, #112]	@ (80017cc <main_function+0x2f0>)
 800175a:	f004 fb7d 	bl	8005e58 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 800175e:	481c      	ldr	r0, [pc, #112]	@ (80017d0 <main_function+0x2f4>)
 8001760:	f004 fb7a 	bl	8005e58 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 8001764:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001768:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800176a:	f7ff fe93 	bl	8001494 <refillDrawer>
 800176e:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, k, calFactor, tare, thresh);
 8001770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001772:	b299      	uxth	r1, r3
 8001774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001782:	eef0 0a67 	vmov.f32	s1, s15
 8001786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001788:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f9a9 	bl	8001ae4 <updateDrawerConfig>
				for(int k = 1; k <= 7; k++){
 8001792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001794:	3301      	adds	r3, #1
 8001796:	653b      	str	r3, [r7, #80]	@ 0x50
 8001798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800179a:	2b07      	cmp	r3, #7
 800179c:	f77f af78 	ble.w	8001690 <main_function+0x1b4>
	for(uint16_t i = 1; i <= 4; i++){
 80017a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80017a4:	3301      	adds	r3, #1
 80017a6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80017aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	f67f aea0 	bls.w	80014f4 <main_function+0x18>

				}
			}
	}

}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3764      	adds	r7, #100	@ 0x64
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd90      	pop	{r4, r7, pc}
 80017be:	bf00      	nop
 80017c0:	08009cf0 	.word	0x08009cf0
 80017c4:	0800a234 	.word	0x0800a234
 80017c8:	08009cf8 	.word	0x08009cf8
 80017cc:	08009d04 	.word	0x08009d04
 80017d0:	08009d40 	.word	0x08009d40

080017d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b3a      	ldr	r3, [pc, #232]	@ (80018d8 <MX_GPIO_Init+0x104>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a39      	ldr	r2, [pc, #228]	@ (80018d8 <MX_GPIO_Init+0x104>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b37      	ldr	r3, [pc, #220]	@ (80018d8 <MX_GPIO_Init+0x104>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b33      	ldr	r3, [pc, #204]	@ (80018d8 <MX_GPIO_Init+0x104>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a32      	ldr	r2, [pc, #200]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a2b      	ldr	r2, [pc, #172]	@ (80018d8 <MX_GPIO_Init+0x104>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <MX_GPIO_Init+0x104>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8001844:	4825      	ldr	r0, [pc, #148]	@ (80018dc <MX_GPIO_Init+0x108>)
 8001846:	f001 fb4d 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2180      	movs	r1, #128	@ 0x80
 800184e:	4824      	ldr	r0, [pc, #144]	@ (80018e0 <MX_GPIO_Init+0x10c>)
 8001850:	f001 fb48 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2160      	movs	r1, #96	@ 0x60
 8001858:	4822      	ldr	r0, [pc, #136]	@ (80018e4 <MX_GPIO_Init+0x110>)
 800185a:	f001 fb43 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800185e:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	4819      	ldr	r0, [pc, #100]	@ (80018dc <MX_GPIO_Init+0x108>)
 8001878:	f001 f988 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	4813      	ldr	r0, [pc, #76]	@ (80018e0 <MX_GPIO_Init+0x10c>)
 8001894:	f001 f97a 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800189c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	480b      	ldr	r0, [pc, #44]	@ (80018dc <MX_GPIO_Init+0x108>)
 80018ae:	f001 f96d 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018b2:	2360      	movs	r3, #96	@ 0x60
 80018b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4619      	mov	r1, r3
 80018c8:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <MX_GPIO_Init+0x110>)
 80018ca:	f001 f95f 	bl	8002b8c <HAL_GPIO_Init>

}
 80018ce:	bf00      	nop
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40020400 	.word	0x40020400

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	//disables internal buffering for input stream for scanf
	setvbuf(stdin, NULL, _IONBF, 0);
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <main+0x78>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6858      	ldr	r0, [r3, #4]
 80018f2:	2300      	movs	r3, #0
 80018f4:	2202      	movs	r2, #2
 80018f6:	2100      	movs	r1, #0
 80018f8:	f004 fbba 	bl	8006070 <setvbuf>

	/* Configure the system clock */
	SystemClock_Config();
 80018fc:	f000 f838 	bl	8001970 <SystemClock_Config>

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001900:	f000 ffc8 	bl	8002894 <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001904:	f7ff ff66 	bl	80017d4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001908:	f000 ff28 	bl	800275c <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800190c:	f000 feba 	bl	8002684 <MX_TIM2_Init>

	printf("Hello from STM32 UART!\n\r");
 8001910:	4814      	ldr	r0, [pc, #80]	@ (8001964 <main+0x7c>)
 8001912:	f004 faa1 	bl	8005e58 <iprintf>

	HAL_TIM_Base_Start(&htim2);
 8001916:	4814      	ldr	r0, [pc, #80]	@ (8001968 <main+0x80>)
 8001918:	f002 f8b0 	bl	8003a7c <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	2120      	movs	r1, #32
 8001920:	4812      	ldr	r0, [pc, #72]	@ (800196c <main+0x84>)
 8001922:	f001 fadf 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001926:	200a      	movs	r0, #10
 8001928:	f001 f826 	bl	8002978 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2120      	movs	r1, #32
 8001930:	480e      	ldr	r0, [pc, #56]	@ (800196c <main+0x84>)
 8001932:	f001 fad7 	bl	8002ee4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001936:	200a      	movs	r0, #10
 8001938:	f001 f81e 	bl	8002978 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193c:	f000 ffaa 	bl	8002894 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001940:	f000 f816 	bl	8001970 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001944:	f7ff ff46 	bl	80017d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001948:	f000 fe9c 	bl	8002684 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800194c:	f000 ff06 	bl	800275c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Calibrate();
 8001950:	f7ff fbee 	bl	8001130 <Calibrate>
  main_function();
 8001954:	f7ff fdc2 	bl	80014dc <main_function>
 8001958:	2300      	movs	r3, #0

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000018 	.word	0x20000018
 8001964:	08009d70 	.word	0x08009d70
 8001968:	20000614 	.word	0x20000614
 800196c:	40020400 	.word	0x40020400

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b094      	sub	sp, #80	@ 0x50
 8001974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	2234      	movs	r2, #52	@ 0x34
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f004 fded 	bl	800655e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	4b23      	ldr	r3, [pc, #140]	@ (8001a28 <SystemClock_Config+0xb8>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	4a22      	ldr	r2, [pc, #136]	@ (8001a28 <SystemClock_Config+0xb8>)
 800199e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a4:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <SystemClock_Config+0xb8>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <SystemClock_Config+0xbc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019bc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a2c <SystemClock_Config+0xbc>)
 80019be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <SystemClock_Config+0xbc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d4:	2301      	movs	r3, #1
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d8:	2310      	movs	r3, #16
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 fd5b 	bl	80034a0 <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80019f0:	f000 f81e 	bl	8001a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fa82 	bl	8002f18 <HAL_RCC_ClockConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a1a:	f000 f809 	bl	8001a30 <Error_Handler>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3750      	adds	r7, #80	@ 0x50
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <Error_Handler+0x8>

08001a3c <saveDrawerConfig>:
const char temp_filename[FILENAME_SIZE] = "temp.txt";

char buffer[MAX_FILELINE];
char previousLine[MAX_FILELINE];

void saveDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, float thresh){
 8001a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a40:	b08c      	sub	sp, #48	@ 0x30
 8001a42:	af08      	add	r7, sp, #32
 8001a44:	4603      	mov	r3, r0
 8001a46:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	edc7 0a00 	vstr	s1, [r7]
 8001a50:	81fb      	strh	r3, [r7, #14]
 8001a52:	460b      	mov	r3, r1
 8001a54:	81bb      	strh	r3, [r7, #12]


	drawerConfig = fopen(filename, "w");
 8001a56:	491d      	ldr	r1, [pc, #116]	@ (8001acc <saveDrawerConfig+0x90>)
 8001a58:	481d      	ldr	r0, [pc, #116]	@ (8001ad0 <saveDrawerConfig+0x94>)
 8001a5a:	f004 f97d 	bl	8005d58 <fopen>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <saveDrawerConfig+0x98>)
 8001a62:	6013      	str	r3, [r2, #0]
	if (drawerConfig == NULL){
 8001a64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <saveDrawerConfig+0x98>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d103      	bne.n	8001a74 <saveDrawerConfig+0x38>
		printf("Could not open file\n\r");
 8001a6c:	481a      	ldr	r0, [pc, #104]	@ (8001ad8 <saveDrawerConfig+0x9c>)
 8001a6e:	f004 f9f3 	bl	8005e58 <iprintf>
 8001a72:	e020      	b.n	8001ab6 <saveDrawerConfig+0x7a>
	}
	else{
		snprintf(buffer, sizeof(buffer),"Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%f", row, drawer, calFactor, Tare, thresh);
 8001a74:	f8b7 800e 	ldrh.w	r8, [r7, #14]
 8001a78:	89be      	ldrh	r6, [r7, #12]
 8001a7a:	68b8      	ldr	r0, [r7, #8]
 8001a7c:	f7fe fd84 	bl	8000588 <__aeabi_f2d>
 8001a80:	4604      	mov	r4, r0
 8001a82:	460d      	mov	r5, r1
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f7fe fd7f 	bl	8000588 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	9304      	str	r3, [sp, #16]
 8001a96:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001a9a:	9600      	str	r6, [sp, #0]
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <saveDrawerConfig+0xa0>)
 8001aa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001aa4:	480e      	ldr	r0, [pc, #56]	@ (8001ae0 <saveDrawerConfig+0xa4>)
 8001aa6:	f004 fb97 	bl	80061d8 <sniprintf>
		fputs(buffer, drawerConfig);
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <saveDrawerConfig+0x98>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <saveDrawerConfig+0xa4>)
 8001ab2:	f004 f9a9 	bl	8005e08 <fputs>
	}

	fclose(drawerConfig);
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <saveDrawerConfig+0x98>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 feba 	bl	8005834 <fclose>

}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aca:	bf00      	nop
 8001acc:	08009d8c 	.word	0x08009d8c
 8001ad0:	08009e34 	.word	0x08009e34
 8001ad4:	200001f0 	.word	0x200001f0
 8001ad8:	08009d90 	.word	0x08009d90
 8001adc:	08009da8 	.word	0x08009da8
 8001ae0:	200001f8 	.word	0x200001f8

08001ae4 <updateDrawerConfig>:

void updateDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, float thresh){ //will need to add ID marker and compare if they are the same, if not then change both locations
 8001ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ae8:	b08e      	sub	sp, #56	@ 0x38
 8001aea:	af08      	add	r7, sp, #32
 8001aec:	4603      	mov	r3, r0
 8001aee:	ed87 0a02 	vstr	s0, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	edc7 0a00 	vstr	s1, [r7]
 8001af8:	81fb      	strh	r3, [r7, #14]
 8001afa:	460b      	mov	r3, r1
 8001afc:	81bb      	strh	r3, [r7, #12]

	drawerConfig = fopen(filename, "r");
 8001afe:	493a      	ldr	r1, [pc, #232]	@ (8001be8 <updateDrawerConfig+0x104>)
 8001b00:	483a      	ldr	r0, [pc, #232]	@ (8001bec <updateDrawerConfig+0x108>)
 8001b02:	f004 f929 	bl	8005d58 <fopen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a39      	ldr	r2, [pc, #228]	@ (8001bf0 <updateDrawerConfig+0x10c>)
 8001b0a:	6013      	str	r3, [r2, #0]
	temp = fopen(temp_filename, "w");
 8001b0c:	4939      	ldr	r1, [pc, #228]	@ (8001bf4 <updateDrawerConfig+0x110>)
 8001b0e:	483a      	ldr	r0, [pc, #232]	@ (8001bf8 <updateDrawerConfig+0x114>)
 8001b10:	f004 f922 	bl	8005d58 <fopen>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a39      	ldr	r2, [pc, #228]	@ (8001bfc <updateDrawerConfig+0x118>)
 8001b18:	6013      	str	r3, [r2, #0]

	bool keep_reading = true;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
	uint16_t lineMarker = getLineMarker(row, drawer);
 8001b1e:	89ba      	ldrh	r2, [r7, #12]
 8001b20:	89fb      	ldrh	r3, [r7, #14]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 f893 	bl	8001c50 <getLineMarker>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	827b      	strh	r3, [r7, #18]
	uint16_t currentLine = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	82bb      	strh	r3, [r7, #20]
	do{

		fgets(buffer, MAX_FILELINE, drawerConfig);
 8001b32:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <updateDrawerConfig+0x10c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b3c:	4830      	ldr	r0, [pc, #192]	@ (8001c00 <updateDrawerConfig+0x11c>)
 8001b3e:	f003 ffb7 	bl	8005ab0 <fgets>

		if(feof(drawerConfig)) keep_reading = false;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <updateDrawerConfig+0x10c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fe7c 	bl	8005844 <feof>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <updateDrawerConfig+0x74>
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]
 8001b56:	e02b      	b.n	8001bb0 <updateDrawerConfig+0xcc>
		else if(currentLine == lineMarker){ //ID matching would go here, check if IDs match, if not then save previous line, update line, then search for original location of ID and replace that line
 8001b58:	8aba      	ldrh	r2, [r7, #20]
 8001b5a:	8a7b      	ldrh	r3, [r7, #18]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d121      	bne.n	8001ba4 <updateDrawerConfig+0xc0>
			snprintf(buffer, sizeof(buffer), "Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%f", row, drawer, calFactor, Tare, thresh);
 8001b60:	f8b7 800e 	ldrh.w	r8, [r7, #14]
 8001b64:	89be      	ldrh	r6, [r7, #12]
 8001b66:	68b8      	ldr	r0, [r7, #8]
 8001b68:	f7fe fd0e 	bl	8000588 <__aeabi_f2d>
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	460d      	mov	r5, r1
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f7fe fd09 	bl	8000588 <__aeabi_f2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	9304      	str	r3, [sp, #16]
 8001b82:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001b86:	9600      	str	r6, [sp, #0]
 8001b88:	4643      	mov	r3, r8
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c04 <updateDrawerConfig+0x120>)
 8001b8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b90:	481b      	ldr	r0, [pc, #108]	@ (8001c00 <updateDrawerConfig+0x11c>)
 8001b92:	f004 fb21 	bl	80061d8 <sniprintf>
			fputs(buffer, temp);
 8001b96:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <updateDrawerConfig+0x118>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4818      	ldr	r0, [pc, #96]	@ (8001c00 <updateDrawerConfig+0x11c>)
 8001b9e:	f004 f933 	bl	8005e08 <fputs>
 8001ba2:	e005      	b.n	8001bb0 <updateDrawerConfig+0xcc>
		}
		else fputs(buffer, temp);
 8001ba4:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <updateDrawerConfig+0x118>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4815      	ldr	r0, [pc, #84]	@ (8001c00 <updateDrawerConfig+0x11c>)
 8001bac:	f004 f92c 	bl	8005e08 <fputs>

		currentLine++;
 8001bb0:	8abb      	ldrh	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	82bb      	strh	r3, [r7, #20]

	}while(keep_reading);
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ba      	bne.n	8001b32 <updateDrawerConfig+0x4e>

	fclose(drawerConfig);
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <updateDrawerConfig+0x10c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fe37 	bl	8005834 <fclose>
	fclose(temp);
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <updateDrawerConfig+0x118>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fe32 	bl	8005834 <fclose>

	remove(filename);
 8001bd0:	4806      	ldr	r0, [pc, #24]	@ (8001bec <updateDrawerConfig+0x108>)
 8001bd2:	f004 fa3d 	bl	8006050 <remove>
	rename(temp_filename, filename);
 8001bd6:	4905      	ldr	r1, [pc, #20]	@ (8001bec <updateDrawerConfig+0x108>)
 8001bd8:	4807      	ldr	r0, [pc, #28]	@ (8001bf8 <updateDrawerConfig+0x114>)
 8001bda:	f004 fa41 	bl	8006060 <rename>


}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001be8:	08009ddc 	.word	0x08009ddc
 8001bec:	08009e34 	.word	0x08009e34
 8001bf0:	200001f0 	.word	0x200001f0
 8001bf4:	08009d8c 	.word	0x08009d8c
 8001bf8:	0800a034 	.word	0x0800a034
 8001bfc:	200001f4 	.word	0x200001f4
 8001c00:	200001f8 	.word	0x200001f8
 8001c04:	08009da8 	.word	0x08009da8

08001c08 <getData>:

uint32_t getData(char* token){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i <= 1; i++){
 8001c10:	2300      	movs	r3, #0
 8001c12:	81fb      	strh	r3, [r7, #14]
 8001c14:	e011      	b.n	8001c3a <getData+0x32>
		char* temp_token = strtok(token, ":");
 8001c16:	490d      	ldr	r1, [pc, #52]	@ (8001c4c <getData+0x44>)
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f004 fca9 	bl	8006570 <strtok>
 8001c1e:	60b8      	str	r0, [r7, #8]
		if(i == 1){
 8001c20:	89fb      	ldrh	r3, [r7, #14]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d106      	bne.n	8001c34 <getData+0x2c>

			return strtol(temp_token, NULL, 10);
 8001c26:	220a      	movs	r2, #10
 8001c28:	2100      	movs	r1, #0
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f002 ff36 	bl	8004a9c <strtol>
 8001c30:	4603      	mov	r3, r0
 8001c32:	e006      	b.n	8001c42 <getData+0x3a>
	for(uint16_t i = 0; i <= 1; i++){
 8001c34:	89fb      	ldrh	r3, [r7, #14]
 8001c36:	3301      	adds	r3, #1
 8001c38:	81fb      	strh	r3, [r7, #14]
 8001c3a:	89fb      	ldrh	r3, [r7, #14]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d9ea      	bls.n	8001c16 <getData+0xe>
		}
	}
	return 0;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	08009de0 	.word	0x08009de0

08001c50 <getLineMarker>:

uint16_t getLineMarker(uint16_t row, uint16_t drawer){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	460a      	mov	r2, r1
 8001c5a:	80fb      	strh	r3, [r7, #6]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80bb      	strh	r3, [r7, #4]
	drawerConfig = fopen(filename, "r");
 8001c60:	492a      	ldr	r1, [pc, #168]	@ (8001d0c <getLineMarker+0xbc>)
 8001c62:	482b      	ldr	r0, [pc, #172]	@ (8001d10 <getLineMarker+0xc0>)
 8001c64:	f004 f878 	bl	8005d58 <fopen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8001d14 <getLineMarker+0xc4>)
 8001c6c:	6013      	str	r3, [r2, #0]
	uint16_t fileIndex = 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (drawerConfig == NULL){
 8001c72:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <getLineMarker+0xc4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d133      	bne.n	8001ce2 <getLineMarker+0x92>
		printf("Could not open file\n\r");
 8001c7a:	4827      	ldr	r0, [pc, #156]	@ (8001d18 <getLineMarker+0xc8>)
 8001c7c:	f004 f8ec 	bl	8005e58 <iprintf>
 8001c80:	e03a      	b.n	8001cf8 <getLineMarker+0xa8>
	}
	else{

		while(fgets(buffer, MAX_FILELINE, drawerConfig)){

			char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
 8001c82:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <getLineMarker+0xc4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c8c:	4823      	ldr	r0, [pc, #140]	@ (8001d1c <getLineMarker+0xcc>)
 8001c8e:	f003 ff0f 	bl	8005ab0 <fgets>
 8001c92:	6138      	str	r0, [r7, #16]
			char* token = strtok(fileLine, ";");
 8001c94:	4922      	ldr	r1, [pc, #136]	@ (8001d20 <getLineMarker+0xd0>)
 8001c96:	6938      	ldr	r0, [r7, #16]
 8001c98:	f004 fc6a 	bl	8006570 <strtok>
 8001c9c:	60f8      	str	r0, [r7, #12]

				for(uint16_t i = 0; i <= 1 ; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	82bb      	strh	r3, [r7, #20]
 8001ca2:	e00a      	b.n	8001cba <getLineMarker+0x6a>
					array[i] = getData(token);
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff ffaf 	bl	8001c08 <getData>
 8001caa:	4602      	mov	r2, r0
 8001cac:	8abb      	ldrh	r3, [r7, #20]
 8001cae:	b2d1      	uxtb	r1, r2
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d24 <getLineMarker+0xd4>)
 8001cb2:	54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i <= 1 ; i++){
 8001cb4:	8abb      	ldrh	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	82bb      	strh	r3, [r7, #20]
 8001cba:	8abb      	ldrh	r3, [r7, #20]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d9f1      	bls.n	8001ca4 <getLineMarker+0x54>
				}

			if(row == array[0] && drawer == array[1]){
 8001cc0:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <getLineMarker+0xd4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d107      	bne.n	8001cdc <getLineMarker+0x8c>
 8001ccc:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <getLineMarker+0xd4>)
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	88bb      	ldrh	r3, [r7, #4]
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <getLineMarker+0x8c>
					return fileIndex;
 8001cd8:	8afb      	ldrh	r3, [r7, #22]
 8001cda:	e013      	b.n	8001d04 <getLineMarker+0xb4>
			}
			else{
				fileIndex++;
 8001cdc:	8afb      	ldrh	r3, [r7, #22]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	82fb      	strh	r3, [r7, #22]
		while(fgets(buffer, MAX_FILELINE, drawerConfig)){
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <getLineMarker+0xc4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cec:	480b      	ldr	r0, [pc, #44]	@ (8001d1c <getLineMarker+0xcc>)
 8001cee:	f003 fedf 	bl	8005ab0 <fgets>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1c4      	bne.n	8001c82 <getLineMarker+0x32>

			}
		}
	}
	fclose(drawerConfig);
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <getLineMarker+0xc4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fd99 	bl	8005834 <fclose>
	return 0;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	08009ddc 	.word	0x08009ddc
 8001d10:	08009e34 	.word	0x08009e34
 8001d14:	200001f0 	.word	0x200001f0
 8001d18:	08009d90 	.word	0x08009d90
 8001d1c:	200001f8 	.word	0x200001f8
 8001d20:	08009de4 	.word	0x08009de4
 8001d24:	200005f8 	.word	0x200005f8

08001d28 <getFileInfo>:

struct drawerInfo getFileInfo(uint16_t row, uint16_t drawer){ //add ID parameter here later
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b08b      	sub	sp, #44	@ 0x2c
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	803b      	strh	r3, [r7, #0]

	struct drawerInfo drawerInst = { 0 };
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
	static unsigned int array[5];

	uint16_t lineMarker = getLineMarker(row, drawer);
 8001d46:	883a      	ldrh	r2, [r7, #0]
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff7f 	bl	8001c50 <getLineMarker>
 8001d52:	4603      	mov	r3, r0
 8001d54:	837b      	strh	r3, [r7, #26]
	uint16_t fileIndex = 1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	84fb      	strh	r3, [r7, #38]	@ 0x26

	drawerConfig = fopen(filename, "r");
 8001d5a:	4943      	ldr	r1, [pc, #268]	@ (8001e68 <getFileInfo+0x140>)
 8001d5c:	4843      	ldr	r0, [pc, #268]	@ (8001e6c <getFileInfo+0x144>)
 8001d5e:	f003 fffb 	bl	8005d58 <fopen>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4a42      	ldr	r2, [pc, #264]	@ (8001e70 <getFileInfo+0x148>)
 8001d66:	6013      	str	r3, [r2, #0]
	if (drawerConfig == NULL) {
 8001d68:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <getFileInfo+0x148>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d15c      	bne.n	8001e2a <getFileInfo+0x102>
	        printf("Could not open file\n\r");
 8001d70:	4840      	ldr	r0, [pc, #256]	@ (8001e74 <getFileInfo+0x14c>)
 8001d72:	f004 f871 	bl	8005e58 <iprintf>
	        return drawerInst; // Error case
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	461c      	mov	r4, r3
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d84:	e06b      	b.n	8001e5e <getFileInfo+0x136>
	}
	else {
		while (fgets(buffer, MAX_FILELINE, drawerConfig)) {
				fgets(buffer, MAX_FILELINE, drawerConfig);
 8001d86:	4b3a      	ldr	r3, [pc, #232]	@ (8001e70 <getFileInfo+0x148>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d90:	4839      	ldr	r0, [pc, #228]	@ (8001e78 <getFileInfo+0x150>)
 8001d92:	f003 fe8d 	bl	8005ab0 <fgets>

				if (fileIndex == lineMarker) {
 8001d96:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001d98:	8b7b      	ldrh	r3, [r7, #26]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d142      	bne.n	8001e24 <getFileInfo+0xfc>
						char* token = strtok(buffer, ";");
 8001d9e:	4937      	ldr	r1, [pc, #220]	@ (8001e7c <getFileInfo+0x154>)
 8001da0:	4835      	ldr	r0, [pc, #212]	@ (8001e78 <getFileInfo+0x150>)
 8001da2:	f004 fbe5 	bl	8006570 <strtok>
 8001da6:	6238      	str	r0, [r7, #32]
						unsigned int index = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]

						while (token != NULL) {
 8001dac:	e00f      	b.n	8001dce <getFileInfo+0xa6>
								array[index] = getData(token);
 8001dae:	6a38      	ldr	r0, [r7, #32]
 8001db0:	f7ff ff2a 	bl	8001c08 <getData>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4932      	ldr	r1, [pc, #200]	@ (8001e80 <getFileInfo+0x158>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								token = strtok(NULL, ";");
 8001dbe:	492f      	ldr	r1, [pc, #188]	@ (8001e7c <getFileInfo+0x154>)
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f004 fbd5 	bl	8006570 <strtok>
 8001dc6:	6238      	str	r0, [r7, #32]
								index++;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
						while (token != NULL) {
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ec      	bne.n	8001dae <getFileInfo+0x86>
						}
						fclose(drawerConfig);
 8001dd4:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <getFileInfo+0x148>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 fd2b 	bl	8005834 <fclose>

						drawerInst.row = array[0];
 8001dde:	4b28      	ldr	r3, [pc, #160]	@ (8001e80 <getFileInfo+0x158>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	813b      	strh	r3, [r7, #8]
						drawerInst.drawer = array[1];
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <getFileInfo+0x158>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	817b      	strh	r3, [r7, #10]
						drawerInst.calFactor = array[2];
 8001dee:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <getFileInfo+0x158>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dfa:	edc7 7a03 	vstr	s15, [r7, #12]
						drawerInst.Tare = array[3];
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <getFileInfo+0x158>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
						drawerInst.thresh = array[4];
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <getFileInfo+0x158>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e10:	edc7 7a05 	vstr	s15, [r7, #20]

						return drawerInst;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	461c      	mov	r4, r3
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e22:	e01c      	b.n	8001e5e <getFileInfo+0x136>
				}
				fileIndex++;
 8001e24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001e26:	3301      	adds	r3, #1
 8001e28:	84fb      	strh	r3, [r7, #38]	@ 0x26
		while (fgets(buffer, MAX_FILELINE, drawerConfig)) {
 8001e2a:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <getFileInfo+0x148>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e34:	4810      	ldr	r0, [pc, #64]	@ (8001e78 <getFileInfo+0x150>)
 8001e36:	f003 fe3b 	bl	8005ab0 <fgets>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1a2      	bne.n	8001d86 <getFileInfo+0x5e>
		}
	}

	fclose(drawerConfig);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <getFileInfo+0x148>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 fcf5 	bl	8005834 <fclose>
	printf("An error occurred during info extraction.");
 8001e4a:	480e      	ldr	r0, [pc, #56]	@ (8001e84 <getFileInfo+0x15c>)
 8001e4c:	f004 f804 	bl	8005e58 <iprintf>
	return drawerInst;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	461c      	mov	r4, r3
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	372c      	adds	r7, #44	@ 0x2c
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	08009ddc 	.word	0x08009ddc
 8001e6c:	08009e34 	.word	0x08009e34
 8001e70:	200001f0 	.word	0x200001f0
 8001e74:	08009d90 	.word	0x08009d90
 8001e78:	200001f8 	.word	0x200001f8
 8001e7c:	08009de4 	.word	0x08009de4
 8001e80:	200005fc 	.word	0x200005fc
 8001e84:	08009de8 	.word	0x08009de8

08001e88 <_write>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

//Code to enable printf statements
int _write(int file, char *data, int len) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <_write+0x28>)
 8001ea0:	f002 f92e 	bl	8004100 <HAL_UART_Transmit>
    return len;
 8001ea4:	687b      	ldr	r3, [r7, #4]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000065c 	.word	0x2000065c

08001eb4 <__io_getchar>:

//Code to enable scanf statements
GETCHAR_PROTOTYPE
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <__io_getchar+0x48>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <__io_getchar+0x48>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001ed4:	1df9      	adds	r1, r7, #7
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	2201      	movs	r2, #1
 8001edc:	4807      	ldr	r0, [pc, #28]	@ (8001efc <__io_getchar+0x48>)
 8001ede:	f002 f99a 	bl	8004216 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001ee2:	1df9      	adds	r1, r7, #7
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4804      	ldr	r0, [pc, #16]	@ (8001efc <__io_getchar+0x48>)
 8001eec:	f002 f908 	bl	8004100 <HAL_UART_Transmit>
  return ch;
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000065c 	.word	0x2000065c

08001f00 <doublePress>:

void doublePress(GPIO_TypeDef* port,uint16_t pin){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState last_state = GPIO_PIN_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	74fb      	strb	r3, [r7, #19]
  GPIO_PinState button_state;

  uint32_t DP_Threshold = 2000; // 2 second threshold
 8001f10:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001f14:	60fb      	str	r3, [r7, #12]
  uint32_t press_time = 0;         // Timestamp of the first press
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  uint8_t press_count = 0;  // A Flag that's used for indicating a second press
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	72fb      	strb	r3, [r7, #11]

	while(true){
		button_state = HAL_GPIO_ReadPin( port, pin);
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 ffc6 	bl	8002eb4 <HAL_GPIO_ReadPin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	72bb      	strb	r3, [r7, #10]

		if (button_state != last_state) { // Button state changed
 8001f2c:	7aba      	ldrb	r2, [r7, #10]
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d0f4      	beq.n	8001f1e <doublePress+0x1e>
			HAL_Delay(50); // Debounce delay
 8001f34:	2032      	movs	r0, #50	@ 0x32
 8001f36:	f000 fd1f 	bl	8002978 <HAL_Delay>

			if (button_state == GPIO_PIN_SET) { // Button pressed
 8001f3a:	7abb      	ldrb	r3, [r7, #10]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <doublePress+0x52>
				if (press_count == 0) {

				}
					// Reads First press
					printf("Button press\n");
 8001f40:	480d      	ldr	r0, [pc, #52]	@ (8001f78 <doublePress+0x78>)
 8001f42:	f003 fff1 	bl	8005f28 <puts>
					press_time = HAL_GetTick(); // saves the time of the first press
 8001f46:	f000 fd0b 	bl	8002960 <HAL_GetTick>
 8001f4a:	6178      	str	r0, [r7, #20]
					press_count = 1;    // proof of first button press
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	72fb      	strb	r3, [r7, #11]
 8001f50:	e7e5      	b.n	8001f1e <doublePress+0x1e>

				}
					else if ((HAL_GetTick() - press_time) <= DP_Threshold){	// if the press_count = 1 and the button is pressed again, it is a double press
 8001f52:	f000 fd05 	bl	8002960 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d3dd      	bcc.n	8001f1e <doublePress+0x1e>
						printf("Double press\n");
 8001f62:	4806      	ldr	r0, [pc, #24]	@ (8001f7c <doublePress+0x7c>)
 8001f64:	f003 ffe0 	bl	8005f28 <puts>
						press_count = 0; // Reset state
 8001f68:	2300      	movs	r3, #0
 8001f6a:	72fb      	strb	r3, [r7, #11]
						break;
 8001f6c:	bf00      	nop
				}
			}
	}
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	08009e14 	.word	0x08009e14
 8001f7c:	08009e24 	.word	0x08009e24

08001f80 <singlePress>:


void singlePress(GPIO_TypeDef* port,uint16_t pin){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState button_state;

	while(true){
		button_state = HAL_GPIO_ReadPin(port, pin);
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 ff8f 	bl	8002eb4 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	73fb      	strb	r3, [r7, #15]
		if (button_state == GPIO_PIN_SET) { // Button pressed
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d1f5      	bne.n	8001f8c <singlePress+0xc>

			printf("Button press\n");
 8001fa0:	4803      	ldr	r0, [pc, #12]	@ (8001fb0 <singlePress+0x30>)
 8001fa2:	f003 ffc1 	bl	8005f28 <puts>
			break;
 8001fa6:	bf00      	nop
		}
	}
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	08009e14 	.word	0x08009e14

08001fb4 <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4604      	mov	r4, r0
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	80fb      	strh	r3, [r7, #6]
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80bb      	strh	r3, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	807b      	strh	r3, [r7, #2]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	707b      	strb	r3, [r7, #1]
  if(control){
 8001fd2:	787b      	ldrb	r3, [r7, #1]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d016      	beq.n	8002006 <muxSET+0x52>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, A);
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fe2:	4815      	ldr	r0, [pc, #84]	@ (8002038 <muxSET+0x84>)
 8001fe4:	f000 ff7e 	bl	8002ee4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, B);
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	2140      	movs	r1, #64	@ 0x40
 8001ff0:	4812      	ldr	r0, [pc, #72]	@ (800203c <muxSET+0x88>)
 8001ff2:	f000 ff77 	bl	8002ee4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, C);
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2180      	movs	r1, #128	@ 0x80
 8001ffe:	4810      	ldr	r0, [pc, #64]	@ (8002040 <muxSET+0x8c>)
 8002000:	f000 ff70 	bl	8002ee4 <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, A);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, B);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, C);
  }
}
 8002004:	e014      	b.n	8002030 <muxSET+0x7c>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, A);
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	2180      	movs	r1, #128	@ 0x80
 800200e:	480a      	ldr	r0, [pc, #40]	@ (8002038 <muxSET+0x84>)
 8002010:	f000 ff68 	bl	8002ee4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, B);
 8002014:	88bb      	ldrh	r3, [r7, #4]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	2140      	movs	r1, #64	@ 0x40
 800201c:	4806      	ldr	r0, [pc, #24]	@ (8002038 <muxSET+0x84>)
 800201e:	f000 ff61 	bl	8002ee4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, C);
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	2120      	movs	r1, #32
 800202a:	4803      	ldr	r0, [pc, #12]	@ (8002038 <muxSET+0x84>)
 800202c:	f000 ff5a 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	40020000 	.word	0x40020000
 800203c:	40020400 	.word	0x40020400
 8002040:	40020800 	.word	0x40020800

08002044 <setRelay>:
#include <manager_io.h>
#include <manager_mux.h>
#include <manager_weight.h>


void setRelay(uint8_t rowNum){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]

	switch (rowNum){
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	3b01      	subs	r3, #1
 8002052:	2b03      	cmp	r3, #3
 8002054:	d86e      	bhi.n	8002134 <setRelay+0xf0>
 8002056:	a201      	add	r2, pc, #4	@ (adr r2, 800205c <setRelay+0x18>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	0800206d 	.word	0x0800206d
 8002060:	0800209f 	.word	0x0800209f
 8002064:	080020d1 	.word	0x080020d1
 8002068:	08002103 	.word	0x08002103
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002072:	4832      	ldr	r0, [pc, #200]	@ (800213c <setRelay+0xf8>)
 8002074:	f000 ff36 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800207e:	482f      	ldr	r0, [pc, #188]	@ (800213c <setRelay+0xf8>)
 8002080:	f000 ff30 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800208a:	482d      	ldr	r0, [pc, #180]	@ (8002140 <setRelay+0xfc>)
 800208c:	f000 ff2a 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002096:	482a      	ldr	r0, [pc, #168]	@ (8002140 <setRelay+0xfc>)
 8002098:	f000 ff24 	bl	8002ee4 <HAL_GPIO_WritePin>
			break;
 800209c:	e04b      	b.n	8002136 <setRelay+0xf2>

		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020a4:	4825      	ldr	r0, [pc, #148]	@ (800213c <setRelay+0xf8>)
 80020a6:	f000 ff1d 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020b0:	4822      	ldr	r0, [pc, #136]	@ (800213c <setRelay+0xf8>)
 80020b2:	f000 ff17 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020bc:	4820      	ldr	r0, [pc, #128]	@ (8002140 <setRelay+0xfc>)
 80020be:	f000 ff11 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020c8:	481d      	ldr	r0, [pc, #116]	@ (8002140 <setRelay+0xfc>)
 80020ca:	f000 ff0b 	bl	8002ee4 <HAL_GPIO_WritePin>
			break;
 80020ce:	e032      	b.n	8002136 <setRelay+0xf2>

		case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020d6:	4819      	ldr	r0, [pc, #100]	@ (800213c <setRelay+0xf8>)
 80020d8:	f000 ff04 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020e2:	4816      	ldr	r0, [pc, #88]	@ (800213c <setRelay+0xf8>)
 80020e4:	f000 fefe 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80020e8:	2201      	movs	r2, #1
 80020ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ee:	4814      	ldr	r0, [pc, #80]	@ (8002140 <setRelay+0xfc>)
 80020f0:	f000 fef8 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020fa:	4811      	ldr	r0, [pc, #68]	@ (8002140 <setRelay+0xfc>)
 80020fc:	f000 fef2 	bl	8002ee4 <HAL_GPIO_WritePin>
			break;
 8002100:	e019      	b.n	8002136 <setRelay+0xf2>

		case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <setRelay+0xf8>)
 800210a:	f000 feeb 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002114:	4809      	ldr	r0, [pc, #36]	@ (800213c <setRelay+0xf8>)
 8002116:	f000 fee5 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002120:	4807      	ldr	r0, [pc, #28]	@ (8002140 <setRelay+0xfc>)
 8002122:	f000 fedf 	bl	8002ee4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8002126:	2201      	movs	r2, #1
 8002128:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800212c:	4804      	ldr	r0, [pc, #16]	@ (8002140 <setRelay+0xfc>)
 800212e:	f000 fed9 	bl	8002ee4 <HAL_GPIO_WritePin>
			break;
 8002132:	e000      	b.n	8002136 <setRelay+0xf2>

		default:
			return;
 8002134:	bf00      	nop
	}
}
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400

08002144 <microDelay>:
#define DT_PORT GPIOA
#define SCK_PIN GPIO_PIN_5
#define SCK_PORT GPIOB

void microDelay(uint16_t delay)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <microDelay+0x30>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8002156:	bf00      	nop
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <microDelay+0x30>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	429a      	cmp	r2, r3
 8002162:	d3f9      	bcc.n	8002158 <microDelay+0x14>
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000614 	.word	0x20000614

08002178 <getHX711>:

int32_t getHX711(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 8002182:	f000 fbed 	bl	8002960 <HAL_GetTick>
 8002186:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8002188:	e008      	b.n	800219c <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 800218a:	f000 fbe9 	bl	8002960 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2bc8      	cmp	r3, #200	@ 0xc8
 8002196:	d901      	bls.n	800219c <getHX711+0x24>
      return 0;
 8002198:	2300      	movs	r3, #0
 800219a:	e047      	b.n	800222c <getHX711+0xb4>
  while(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 800219c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021a0:	4824      	ldr	r0, [pc, #144]	@ (8002234 <getHX711+0xbc>)
 80021a2:	f000 fe87 	bl	8002eb4 <HAL_GPIO_ReadPin>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d0ee      	beq.n	800218a <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 80021ac:	2300      	movs	r3, #0
 80021ae:	72fb      	strb	r3, [r7, #11]
 80021b0:	e023      	b.n	80021fa <getHX711+0x82>
  {
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	2120      	movs	r1, #32
 80021b6:	4820      	ldr	r0, [pc, #128]	@ (8002238 <getHX711+0xc0>)
 80021b8:	f000 fe94 	bl	8002ee4 <HAL_GPIO_WritePin>
    microDelay(1);
 80021bc:	2001      	movs	r0, #1
 80021be:	f7ff ffc1 	bl	8002144 <microDelay>
    data = data << 1;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2120      	movs	r1, #32
 80021cc:	481a      	ldr	r0, [pc, #104]	@ (8002238 <getHX711+0xc0>)
 80021ce:	f000 fe89 	bl	8002ee4 <HAL_GPIO_WritePin>
    microDelay(1);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f7ff ffb6 	bl	8002144 <microDelay>
    if(HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 80021d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021dc:	4815      	ldr	r0, [pc, #84]	@ (8002234 <getHX711+0xbc>)
 80021de:	f000 fe69 	bl	8002eb4 <HAL_GPIO_ReadPin>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d102      	bne.n	80021ee <getHX711+0x76>
      data ++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3301      	adds	r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80021ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	72fb      	strb	r3, [r7, #11]
 80021fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021fe:	2b17      	cmp	r3, #23
 8002200:	ddd7      	ble.n	80021b2 <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8002208:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	2120      	movs	r1, #32
 800220e:	480a      	ldr	r0, [pc, #40]	@ (8002238 <getHX711+0xc0>)
 8002210:	f000 fe68 	bl	8002ee4 <HAL_GPIO_WritePin>
  microDelay(1);
 8002214:	2001      	movs	r0, #1
 8002216:	f7ff ff95 	bl	8002144 <microDelay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	2120      	movs	r1, #32
 800221e:	4806      	ldr	r0, [pc, #24]	@ (8002238 <getHX711+0xc0>)
 8002220:	f000 fe60 	bl	8002ee4 <HAL_GPIO_WritePin>
  microDelay(1);
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff ff8d 	bl	8002144 <microDelay>
  return data;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40020000 	.word	0x40020000
 8002238:	40020400 	.word	0x40020400

0800223c <weigh>:

int weigh(uint32_t tare, float calFactor)
{
 800223c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002240:	b088      	sub	sp, #32
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	ed87 0a00 	vstr	s0, [r7]
  int64_t  total = 0;
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 8002256:	2332      	movs	r3, #50	@ 0x32
 8002258:	613b      	str	r3, [r7, #16]

  int milligram = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
  int32_t average = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	82fb      	strh	r3, [r7, #22]
 8002266:	e010      	b.n	800228a <weigh+0x4e>
  {
      total += getHX711();
 8002268:	f7ff ff86 	bl	8002178 <getHX711>
 800226c:	4603      	mov	r3, r0
 800226e:	17da      	asrs	r2, r3, #31
 8002270:	461c      	mov	r4, r3
 8002272:	4615      	mov	r5, r2
 8002274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002278:	eb12 0804 	adds.w	r8, r2, r4
 800227c:	eb43 0905 	adc.w	r9, r3, r5
 8002280:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8002284:	8afb      	ldrh	r3, [r7, #22]
 8002286:	3301      	adds	r3, #1
 8002288:	82fb      	strh	r3, [r7, #22]
 800228a:	8afb      	ldrh	r3, [r7, #22]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	429a      	cmp	r2, r3
 8002290:	dcea      	bgt.n	8002268 <weigh+0x2c>
  }
  average = (int32_t)(total / samples);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	17da      	asrs	r2, r3, #31
 8002296:	469a      	mov	sl, r3
 8002298:	4693      	mov	fp, r2
 800229a:	4652      	mov	r2, sl
 800229c:	465b      	mov	r3, fp
 800229e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022a2:	f7fe fd11 	bl	8000cc8 <__aeabi_ldivmod>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4613      	mov	r3, r2
 80022ac:	60bb      	str	r3, [r7, #8]
  milligram = (int)(average - tare)*calFactor;
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022bc:	edd7 7a00 	vldr	s15, [r7]
 80022c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c8:	ee17 3a90 	vmov	r3, s15
 80022cc:	60fb      	str	r3, [r7, #12]
  return milligram;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022da <weighRaw>:

int32_t weighRaw()
{
 80022da:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
  int64_t  total = 0;
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  samples = 50;
 80022ee:	2332      	movs	r3, #50	@ 0x32
 80022f0:	60bb      	str	r3, [r7, #8]
  int32_t average = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]

  for(uint16_t i=0 ; i<samples ; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	81fb      	strh	r3, [r7, #14]
 80022fa:	e010      	b.n	800231e <weighRaw+0x44>
  {
      total += getHX711();
 80022fc:	f7ff ff3c 	bl	8002178 <getHX711>
 8002300:	4603      	mov	r3, r0
 8002302:	17da      	asrs	r2, r3, #31
 8002304:	461c      	mov	r4, r3
 8002306:	4615      	mov	r5, r2
 8002308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800230c:	eb12 0804 	adds.w	r8, r2, r4
 8002310:	eb43 0905 	adc.w	r9, r3, r5
 8002314:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 8002318:	89fb      	ldrh	r3, [r7, #14]
 800231a:	3301      	adds	r3, #1
 800231c:	81fb      	strh	r3, [r7, #14]
 800231e:	89fb      	ldrh	r3, [r7, #14]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	429a      	cmp	r2, r3
 8002324:	dcea      	bgt.n	80022fc <weighRaw+0x22>
  }
  average = (int32_t)(total / samples);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	17da      	asrs	r2, r3, #31
 800232a:	469a      	mov	sl, r3
 800232c:	4693      	mov	fp, r2
 800232e:	4652      	mov	r2, sl
 8002330:	465b      	mov	r3, fp
 8002332:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002336:	f7fe fcc7 	bl	8000cc8 <__aeabi_ldivmod>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4613      	mov	r3, r2
 8002340:	607b      	str	r3, [r7, #4]
  return average;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800234e <weighRawTare>:

int32_t weighRawTare(uint32_t tare)
{
 800234e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  int64_t  total = 0;
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 8002364:	2332      	movs	r3, #50	@ 0x32
 8002366:	613b      	str	r3, [r7, #16]
  int32_t average = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  int32_t avgTare = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 8002370:	2300      	movs	r3, #0
 8002372:	82fb      	strh	r3, [r7, #22]
 8002374:	e010      	b.n	8002398 <weighRawTare+0x4a>
  {
      total += getHX711();
 8002376:	f7ff feff 	bl	8002178 <getHX711>
 800237a:	4603      	mov	r3, r0
 800237c:	17da      	asrs	r2, r3, #31
 800237e:	461c      	mov	r4, r3
 8002380:	4615      	mov	r5, r2
 8002382:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002386:	eb12 0804 	adds.w	r8, r2, r4
 800238a:	eb43 0905 	adc.w	r9, r3, r5
 800238e:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8002392:	8afb      	ldrh	r3, [r7, #22]
 8002394:	3301      	adds	r3, #1
 8002396:	82fb      	strh	r3, [r7, #22]
 8002398:	8afb      	ldrh	r3, [r7, #22]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	dcea      	bgt.n	8002376 <weighRawTare+0x28>
  }
  average = (int32_t)(total / samples);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	17da      	asrs	r2, r3, #31
 80023a4:	469a      	mov	sl, r3
 80023a6:	4693      	mov	fp, r2
 80023a8:	4652      	mov	r2, sl
 80023aa:	465b      	mov	r3, fp
 80023ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023b0:	f7fe fc8a 	bl	8000cc8 <__aeabi_ldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  avgTare = average - tare;
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	60bb      	str	r3, [r7, #8]
  return avgTare;
 80023c4:	68bb      	ldr	r3, [r7, #8]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080023d0 <getCalFactor>:

float getCalFactor(uint32_t knownHX711){
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	float cal = 20000 / knownHX711;
 80023d8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ea:	edc7 7a03 	vstr	s15, [r7, #12]
	return cal;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	ee07 3a90 	vmov	s15, r3
}
 80023f4:	eeb0 0a67 	vmov.f32	s0, s15
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <HAL_MspInit+0x4c>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	4a0f      	ldr	r2, [pc, #60]	@ (8002450 <HAL_MspInit+0x4c>)
 8002414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002418:	6453      	str	r3, [r2, #68]	@ 0x44
 800241a:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <HAL_MspInit+0x4c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_MspInit+0x4c>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	4a08      	ldr	r2, [pc, #32]	@ (8002450 <HAL_MspInit+0x4c>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	@ 0x40
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_MspInit+0x4c>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <NMI_Handler+0x4>

0800245c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <MemManage_Handler+0x4>

0800246c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <UsageFault_Handler+0x4>

0800247c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024aa:	f000 fa45 	bl	8002938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  return 1;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_kill>:

int _kill(int pid, int sig)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024cc:	f004 f92a 	bl	8006724 <__errno>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2216      	movs	r2, #22
 80024d4:	601a      	str	r2, [r3, #0]
  return -1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_exit>:

void _exit (int status)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024ea:	f04f 31ff 	mov.w	r1, #4294967295
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffe7 	bl	80024c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <_exit+0x12>

080024f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e00a      	b.n	8002520 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800250a:	f7ff fcd3 	bl	8001eb4 <__io_getchar>
 800250e:	4601      	mov	r1, r0
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	60ba      	str	r2, [r7, #8]
 8002516:	b2ca      	uxtb	r2, r1
 8002518:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	dbf0      	blt.n	800250a <_read+0x12>
  }

  return len;
 8002528:	687b      	ldr	r3, [r7, #4]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800255a:	605a      	str	r2, [r3, #4]
  return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_isatty>:

int _isatty(int file)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_open>:

int _open(char *path, int flags, ...)
{
 800259a:	b40e      	push	{r1, r2, r3}
 800259c:	b480      	push	{r7}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	b003      	add	sp, #12
 80025b4:	4770      	bx	lr

080025b6 <_unlink>:
  errno = ECHILD;
  return -1;
}

int _unlink(char *name)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
 80025be:	f004 f8b1 	bl	8006724 <__errno>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2202      	movs	r2, #2
 80025c6:	601a      	str	r2, [r3, #0]
  return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_link>:
  st->st_mode = S_IFCHR;
  return 0;
}

int _link(char *old, char *new)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
 80025de:	f004 f8a1 	bl	8006724 <__errno>
 80025e2:	4603      	mov	r3, r0
 80025e4:	221f      	movs	r2, #31
 80025e6:	601a      	str	r2, [r3, #0]
  return -1;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025fc:	4a14      	ldr	r2, [pc, #80]	@ (8002650 <_sbrk+0x5c>)
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <_sbrk+0x60>)
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002608:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <_sbrk+0x64>)
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <_sbrk+0x68>)
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002616:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	429a      	cmp	r2, r3
 8002622:	d207      	bcs.n	8002634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002624:	f004 f87e 	bl	8006724 <__errno>
 8002628:	4603      	mov	r3, r0
 800262a:	220c      	movs	r2, #12
 800262c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	e009      	b.n	8002648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002634:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <_sbrk+0x64>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <_sbrk+0x64>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	4a05      	ldr	r2, [pc, #20]	@ (8002658 <_sbrk+0x64>)
 8002644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20020000 	.word	0x20020000
 8002654:	00000400 	.word	0x00000400
 8002658:	20000610 	.word	0x20000610
 800265c:	200007f8 	.word	0x200007f8

08002660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <SystemInit+0x20>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <SystemInit+0x20>)
 800266c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002698:	463b      	mov	r3, r7
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026aa:	2207      	movs	r2, #7
 80026ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026b6:	f04f 32ff 	mov.w	r2, #4294967295
 80026ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026bc:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026c8:	4813      	ldr	r0, [pc, #76]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026ca:	f001 f987 	bl	80039dc <HAL_TIM_Base_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026d4:	f7ff f9ac 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	4619      	mov	r1, r3
 80026e4:	480c      	ldr	r0, [pc, #48]	@ (8002718 <MX_TIM2_Init+0x94>)
 80026e6:	f001 fa31 	bl	8003b4c <HAL_TIM_ConfigClockSource>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026f0:	f7ff f99e 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026fc:	463b      	mov	r3, r7
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	@ (8002718 <MX_TIM2_Init+0x94>)
 8002702:	f001 fc31 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800270c:	f7ff f990 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000614 	.word	0x20000614

0800271c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800272c:	d10d      	bne.n	800274a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_TIM_Base_MspInit+0x3c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	4a08      	ldr	r2, [pc, #32]	@ (8002758 <HAL_TIM_Base_MspInit+0x3c>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6413      	str	r3, [r2, #64]	@ 0x40
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_TIM_Base_MspInit+0x3c>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800

0800275c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002762:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <MX_USART2_UART_Init+0x50>)
 8002764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800276c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800276e:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800277a:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <MX_USART2_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002780:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002782:	220c      	movs	r2, #12
 8002784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <MX_USART2_UART_Init+0x4c>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	@ (80027a8 <MX_USART2_UART_Init+0x4c>)
 8002794:	f001 fc64 	bl	8004060 <HAL_UART_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800279e:	f7ff f947 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000065c 	.word	0x2000065c
 80027ac:	40004400 	.word	0x40004400

080027b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	@ 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a19      	ldr	r2, [pc, #100]	@ (8002834 <HAL_UART_MspInit+0x84>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d12b      	bne.n	800282a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	4b18      	ldr	r3, [pc, #96]	@ (8002838 <HAL_UART_MspInit+0x88>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_UART_MspInit+0x88>)
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <HAL_UART_MspInit+0x88>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_UART_MspInit+0x88>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	4a10      	ldr	r2, [pc, #64]	@ (8002838 <HAL_UART_MspInit+0x88>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <HAL_UART_MspInit+0x88>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800280a:	230c      	movs	r3, #12
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800281a:	2307      	movs	r3, #7
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4619      	mov	r1, r3
 8002824:	4805      	ldr	r0, [pc, #20]	@ (800283c <HAL_UART_MspInit+0x8c>)
 8002826:	f000 f9b1 	bl	8002b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800282a:	bf00      	nop
 800282c:	3728      	adds	r7, #40	@ 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40004400 	.word	0x40004400
 8002838:	40023800 	.word	0x40023800
 800283c:	40020000 	.word	0x40020000

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002878 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002844:	f7ff ff0c 	bl	8002660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	@ (800287c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	@ (8002880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	@ (800288c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800286e:	f003 ff5f 	bl	8006730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7ff f839 	bl	80018e8 <main>
  bx  lr    
 8002876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002884:	0800a6fc 	.word	0x0800a6fc
  ldr r2, =_sbss
 8002888:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800288c:	200007f4 	.word	0x200007f4

08002890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC_IRQHandler>
	...

08002894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <HAL_Init+0x40>)
 800289e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <HAL_Init+0x40>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b0:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a07      	ldr	r2, [pc, #28]	@ (80028d4 <HAL_Init+0x40>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028bc:	2003      	movs	r0, #3
 80028be:	f000 f931 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c2:	200f      	movs	r0, #15
 80028c4:	f000 f808 	bl	80028d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c8:	f7ff fd9c 	bl	8002404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023c00 	.word	0x40023c00

080028d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e0:	4b12      	ldr	r3, [pc, #72]	@ (800292c <HAL_InitTick+0x54>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <HAL_InitTick+0x58>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f93b 	bl	8002b72 <HAL_SYSTICK_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e00e      	b.n	8002924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d80a      	bhi.n	8002922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800290c:	2200      	movs	r2, #0
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f000 f911 	bl	8002b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002918:	4a06      	ldr	r2, [pc, #24]	@ (8002934 <HAL_InitTick+0x5c>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e000      	b.n	8002924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000000 	.word	0x20000000
 8002930:	20000008 	.word	0x20000008
 8002934:	20000004 	.word	0x20000004

08002938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800293c:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_IncTick+0x20>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_IncTick+0x24>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4413      	add	r3, r2
 8002948:	4a04      	ldr	r2, [pc, #16]	@ (800295c <HAL_IncTick+0x24>)
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000008 	.word	0x20000008
 800295c:	200006a4 	.word	0x200006a4

08002960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return uwTick;
 8002964:	4b03      	ldr	r3, [pc, #12]	@ (8002974 <HAL_GetTick+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	200006a4 	.word	0x200006a4

08002978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002980:	f7ff ffee 	bl	8002960 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d005      	beq.n	800299e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002992:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <HAL_Delay+0x44>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800299e:	bf00      	nop
 80029a0:	f7ff ffde 	bl	8002960 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d8f7      	bhi.n	80029a0 <HAL_Delay+0x28>
  {
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000008 	.word	0x20000008

080029c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029dc:	4013      	ands	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f2:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <__NVIC_SetPriorityGrouping+0x44>)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	60d3      	str	r3, [r2, #12]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <__NVIC_GetPriorityGrouping+0x18>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 0307 	and.w	r3, r3, #7
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db0a      	blt.n	8002a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	490c      	ldr	r1, [pc, #48]	@ (8002a70 <__NVIC_SetPriority+0x4c>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a4c:	e00a      	b.n	8002a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4908      	ldr	r1, [pc, #32]	@ (8002a74 <__NVIC_SetPriority+0x50>)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	440b      	add	r3, r1
 8002a62:	761a      	strb	r2, [r3, #24]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000e100 	.word	0xe000e100
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	bf28      	it	cs
 8002a96:	2304      	movcs	r3, #4
 8002a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d902      	bls.n	8002aa8 <NVIC_EncodePriority+0x30>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3b03      	subs	r3, #3
 8002aa6:	e000      	b.n	8002aaa <NVIC_EncodePriority+0x32>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	4313      	orrs	r3, r2
         );
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	@ 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af0:	d301      	bcc.n	8002af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <SysTick_Config+0x40>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afe:	210f      	movs	r1, #15
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295
 8002b04:	f7ff ff8e 	bl	8002a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b08:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <SysTick_Config+0x40>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0e:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <SysTick_Config+0x40>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	e000e010 	.word	0xe000e010

08002b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff47 	bl	80029c0 <__NVIC_SetPriorityGrouping>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4c:	f7ff ff5c 	bl	8002a08 <__NVIC_GetPriorityGrouping>
 8002b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff8e 	bl	8002a78 <NVIC_EncodePriority>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5d 	bl	8002a24 <__NVIC_SetPriority>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffb0 	bl	8002ae0 <SysTick_Config>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e165      	b.n	8002e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f040 8154 	bne.w	8002e6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d005      	beq.n	8002bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d130      	bne.n	8002c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 0201 	and.w	r2, r3, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d017      	beq.n	8002c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d123      	bne.n	8002cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	69b9      	ldr	r1, [r7, #24]
 8002ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0203 	and.w	r2, r3, #3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80ae 	beq.w	8002e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	4b5d      	ldr	r3, [pc, #372]	@ (8002e8c <HAL_GPIO_Init+0x300>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8002e8c <HAL_GPIO_Init+0x300>)
 8002d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d22:	4b5a      	ldr	r3, [pc, #360]	@ (8002e8c <HAL_GPIO_Init+0x300>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d2e:	4a58      	ldr	r2, [pc, #352]	@ (8002e90 <HAL_GPIO_Init+0x304>)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4f      	ldr	r2, [pc, #316]	@ (8002e94 <HAL_GPIO_Init+0x308>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d025      	beq.n	8002da6 <HAL_GPIO_Init+0x21a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002e98 <HAL_GPIO_Init+0x30c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <HAL_GPIO_Init+0x216>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4d      	ldr	r2, [pc, #308]	@ (8002e9c <HAL_GPIO_Init+0x310>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d019      	beq.n	8002d9e <HAL_GPIO_Init+0x212>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ea0 <HAL_GPIO_Init+0x314>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0x20e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4b      	ldr	r2, [pc, #300]	@ (8002ea4 <HAL_GPIO_Init+0x318>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00d      	beq.n	8002d96 <HAL_GPIO_Init+0x20a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea8 <HAL_GPIO_Init+0x31c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x206>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a49      	ldr	r2, [pc, #292]	@ (8002eac <HAL_GPIO_Init+0x320>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_GPIO_Init+0x202>
 8002d8a:	2306      	movs	r3, #6
 8002d8c:	e00c      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d8e:	2307      	movs	r3, #7
 8002d90:	e00a      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d92:	2305      	movs	r3, #5
 8002d94:	e008      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e004      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x21c>
 8002da6:	2300      	movs	r3, #0
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	4093      	lsls	r3, r2
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db8:	4935      	ldr	r1, [pc, #212]	@ (8002e90 <HAL_GPIO_Init+0x304>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dea:	4a31      	ldr	r2, [pc, #196]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df0:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e14:	4a26      	ldr	r2, [pc, #152]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e1a:	4b25      	ldr	r3, [pc, #148]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e44:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e68:	4a11      	ldr	r2, [pc, #68]	@ (8002eb0 <HAL_GPIO_Init+0x324>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	f67f ae96 	bls.w	8002ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3724      	adds	r7, #36	@ 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020400 	.word	0x40020400
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40020c00 	.word	0x40020c00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40021400 	.word	0x40021400
 8002eac:	40021800 	.word	0x40021800
 8002eb0:	40013c00 	.word	0x40013c00

08002eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e001      	b.n	8002ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef4:	787b      	ldrb	r3, [r7, #1]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f00:	e003      	b.n	8002f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f02:	887b      	ldrh	r3, [r7, #2]
 8002f04:	041a      	lsls	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	619a      	str	r2, [r3, #24]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0cc      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b68      	ldr	r3, [pc, #416]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d90c      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b65      	ldr	r3, [pc, #404]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a58      	ldr	r2, [pc, #352]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d044      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d119      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e067      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b37      	ldr	r3, [pc, #220]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4934      	ldr	r1, [pc, #208]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7ff fcaa 	bl	8002960 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7ff fca6 	bl	8002960 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e04f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2b      	ldr	r3, [pc, #172]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b25      	ldr	r3, [pc, #148]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d20c      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308a:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f855 	bl	800314c <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fc0a 	bl	80028d8 <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	0800a24c 	.word	0x0800a24c
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e8:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000000 	.word	0x20000000

080030fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003100:	f7ff fff0 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0a9b      	lsrs	r3, r3, #10
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	@ (8003120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	0800a25c 	.word	0x0800a25c

08003124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003128:	f7ff ffdc 	bl	80030e4 <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0b5b      	lsrs	r3, r3, #13
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4903      	ldr	r1, [pc, #12]	@ (8003148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	0800a25c 	.word	0x0800a25c

0800314c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003150:	b0a6      	sub	sp, #152	@ 0x98
 8003152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003172:	4bc8      	ldr	r3, [pc, #800]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b0c      	cmp	r3, #12
 800317c:	f200 817e 	bhi.w	800347c <HAL_RCC_GetSysClockFreq+0x330>
 8003180:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031bd 	.word	0x080031bd
 800318c:	0800347d 	.word	0x0800347d
 8003190:	0800347d 	.word	0x0800347d
 8003194:	0800347d 	.word	0x0800347d
 8003198:	080031c5 	.word	0x080031c5
 800319c:	0800347d 	.word	0x0800347d
 80031a0:	0800347d 	.word	0x0800347d
 80031a4:	0800347d 	.word	0x0800347d
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	0800347d 	.word	0x0800347d
 80031b0:	0800347d 	.word	0x0800347d
 80031b4:	0800347d 	.word	0x0800347d
 80031b8:	08003337 	.word	0x08003337
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4bb6      	ldr	r3, [pc, #728]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x34c>)
 80031be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80031c2:	e15f      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031c4:	4bb5      	ldr	r3, [pc, #724]	@ (800349c <HAL_RCC_GetSysClockFreq+0x350>)
 80031c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80031ca:	e15b      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031cc:	4bb1      	ldr	r3, [pc, #708]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031d8:	4bae      	ldr	r3, [pc, #696]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d031      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e4:	4bab      	ldr	r3, [pc, #684]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	2200      	movs	r2, #0
 80031ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80031f8:	2300      	movs	r3, #0
 80031fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80031fc:	4ba7      	ldr	r3, [pc, #668]	@ (800349c <HAL_RCC_GetSysClockFreq+0x350>)
 80031fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003202:	462a      	mov	r2, r5
 8003204:	fb03 f202 	mul.w	r2, r3, r2
 8003208:	2300      	movs	r3, #0
 800320a:	4621      	mov	r1, r4
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	4aa2      	ldr	r2, [pc, #648]	@ (800349c <HAL_RCC_GetSysClockFreq+0x350>)
 8003214:	4621      	mov	r1, r4
 8003216:	fba1 1202 	umull	r1, r2, r1, r2
 800321a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800321c:	460a      	mov	r2, r1
 800321e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003220:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003222:	4413      	add	r3, r2
 8003224:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800322a:	2200      	movs	r2, #0
 800322c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800322e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003230:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003234:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003238:	f7fd fd96 	bl	8000d68 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4613      	mov	r3, r2
 8003242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003246:	e064      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003248:	4b92      	ldr	r3, [pc, #584]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	2200      	movs	r2, #0
 8003250:	653b      	str	r3, [r7, #80]	@ 0x50
 8003252:	657a      	str	r2, [r7, #84]	@ 0x54
 8003254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800325c:	2300      	movs	r3, #0
 800325e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003260:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003264:	4622      	mov	r2, r4
 8003266:	462b      	mov	r3, r5
 8003268:	f04f 0000 	mov.w	r0, #0
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	0159      	lsls	r1, r3, #5
 8003272:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003276:	0150      	lsls	r0, r2, #5
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4621      	mov	r1, r4
 800327e:	1a51      	subs	r1, r2, r1
 8003280:	6139      	str	r1, [r7, #16]
 8003282:	4629      	mov	r1, r5
 8003284:	eb63 0301 	sbc.w	r3, r3, r1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003296:	4659      	mov	r1, fp
 8003298:	018b      	lsls	r3, r1, #6
 800329a:	4651      	mov	r1, sl
 800329c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032a0:	4651      	mov	r1, sl
 80032a2:	018a      	lsls	r2, r1, #6
 80032a4:	4651      	mov	r1, sl
 80032a6:	ebb2 0801 	subs.w	r8, r2, r1
 80032aa:	4659      	mov	r1, fp
 80032ac:	eb63 0901 	sbc.w	r9, r3, r1
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032c4:	4690      	mov	r8, r2
 80032c6:	4699      	mov	r9, r3
 80032c8:	4623      	mov	r3, r4
 80032ca:	eb18 0303 	adds.w	r3, r8, r3
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	462b      	mov	r3, r5
 80032d2:	eb49 0303 	adc.w	r3, r9, r3
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032e4:	4629      	mov	r1, r5
 80032e6:	028b      	lsls	r3, r1, #10
 80032e8:	4621      	mov	r1, r4
 80032ea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032ee:	4621      	mov	r1, r4
 80032f0:	028a      	lsls	r2, r1, #10
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032fa:	2200      	movs	r2, #0
 80032fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003300:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003304:	f7fd fd30 	bl	8000d68 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4613      	mov	r3, r2
 800330e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003312:	4b60      	ldr	r3, [pc, #384]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	3301      	adds	r3, #1
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003324:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003328:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003334:	e0a6      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003336:	4b57      	ldr	r3, [pc, #348]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800333e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003342:	4b54      	ldr	r3, [pc, #336]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d02a      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b51      	ldr	r3, [pc, #324]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	2200      	movs	r2, #0
 8003356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003358:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800335a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003360:	2100      	movs	r1, #0
 8003362:	4b4e      	ldr	r3, [pc, #312]	@ (800349c <HAL_RCC_GetSysClockFreq+0x350>)
 8003364:	fb03 f201 	mul.w	r2, r3, r1
 8003368:	2300      	movs	r3, #0
 800336a:	fb00 f303 	mul.w	r3, r0, r3
 800336e:	4413      	add	r3, r2
 8003370:	4a4a      	ldr	r2, [pc, #296]	@ (800349c <HAL_RCC_GetSysClockFreq+0x350>)
 8003372:	fba0 1202 	umull	r1, r2, r0, r2
 8003376:	677a      	str	r2, [r7, #116]	@ 0x74
 8003378:	460a      	mov	r2, r1
 800337a:	673a      	str	r2, [r7, #112]	@ 0x70
 800337c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800337e:	4413      	add	r3, r2
 8003380:	677b      	str	r3, [r7, #116]	@ 0x74
 8003382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003386:	2200      	movs	r2, #0
 8003388:	633b      	str	r3, [r7, #48]	@ 0x30
 800338a:	637a      	str	r2, [r7, #52]	@ 0x34
 800338c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003390:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003394:	f7fd fce8 	bl	8000d68 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033a2:	e05b      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	2200      	movs	r2, #0
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	2300      	movs	r3, #0
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80033bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033c0:	4642      	mov	r2, r8
 80033c2:	464b      	mov	r3, r9
 80033c4:	f04f 0000 	mov.w	r0, #0
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	0159      	lsls	r1, r3, #5
 80033ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d2:	0150      	lsls	r0, r2, #5
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4641      	mov	r1, r8
 80033da:	ebb2 0a01 	subs.w	sl, r2, r1
 80033de:	4649      	mov	r1, r9
 80033e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f8:	ebb2 040a 	subs.w	r4, r2, sl
 80033fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	00eb      	lsls	r3, r5, #3
 800340a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340e:	00e2      	lsls	r2, r4, #3
 8003410:	4614      	mov	r4, r2
 8003412:	461d      	mov	r5, r3
 8003414:	4643      	mov	r3, r8
 8003416:	18e3      	adds	r3, r4, r3
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	464b      	mov	r3, r9
 800341c:	eb45 0303 	adc.w	r3, r5, r3
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342e:	4629      	mov	r1, r5
 8003430:	028b      	lsls	r3, r1, #10
 8003432:	4621      	mov	r1, r4
 8003434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003438:	4621      	mov	r1, r4
 800343a:	028a      	lsls	r2, r1, #10
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003444:	2200      	movs	r2, #0
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	61fa      	str	r2, [r7, #28]
 800344a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800344e:	f7fd fc8b 	bl	8000d68 <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4613      	mov	r3, r2
 8003458:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800345c:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x348>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0f1b      	lsrs	r3, r3, #28
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800346a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800346e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800347a:	e003      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x34c>)
 800347e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003482:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003484:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003488:	4618      	mov	r0, r3
 800348a:	3798      	adds	r7, #152	@ 0x98
 800348c:	46bd      	mov	sp, r7
 800348e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	00f42400 	.word	0x00f42400
 800349c:	017d7840 	.word	0x017d7840

080034a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e28d      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8083 	beq.w	80035c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034c0:	4b94      	ldr	r3, [pc, #592]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d019      	beq.n	8003500 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034cc:	4b91      	ldr	r3, [pc, #580]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034e4:	d00c      	beq.n	8003500 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d112      	bne.n	8003518 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4b88      	ldr	r3, [pc, #544]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034fe:	d10b      	bne.n	8003518 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	4b84      	ldr	r3, [pc, #528]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05b      	beq.n	80035c4 <HAL_RCC_OscConfig+0x124>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d157      	bne.n	80035c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e25a      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003520:	d106      	bne.n	8003530 <HAL_RCC_OscConfig+0x90>
 8003522:	4b7c      	ldr	r3, [pc, #496]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7b      	ldr	r2, [pc, #492]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e01d      	b.n	800356c <HAL_RCC_OscConfig+0xcc>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0xb4>
 800353a:	4b76      	ldr	r3, [pc, #472]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a75      	ldr	r2, [pc, #468]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b73      	ldr	r3, [pc, #460]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a72      	ldr	r2, [pc, #456]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e00b      	b.n	800356c <HAL_RCC_OscConfig+0xcc>
 8003554:	4b6f      	ldr	r3, [pc, #444]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6e      	ldr	r2, [pc, #440]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 800355a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b6c      	ldr	r3, [pc, #432]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6b      	ldr	r2, [pc, #428]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d013      	beq.n	800359c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7ff f9f4 	bl	8002960 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800357c:	f7ff f9f0 	bl	8002960 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	@ 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e21f      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b61      	ldr	r3, [pc, #388]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0xdc>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7ff f9e0 	bl	8002960 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7ff f9dc 	bl	8002960 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	@ 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e20b      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	4b57      	ldr	r3, [pc, #348]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x104>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d06f      	beq.n	80036b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035d2:	4b50      	ldr	r3, [pc, #320]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d017      	beq.n	800360e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035de:	4b4d      	ldr	r3, [pc, #308]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d105      	bne.n	80035f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f6:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d11c      	bne.n	800363c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b44      	ldr	r3, [pc, #272]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d116      	bne.n	800363c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x186>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1d3      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003626:	4b3b      	ldr	r3, [pc, #236]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4937      	ldr	r1, [pc, #220]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363a:	e03a      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b34      	ldr	r3, [pc, #208]	@ (8003718 <HAL_RCC_OscConfig+0x278>)
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7ff f989 	bl	8002960 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003652:	f7ff f985 	bl	8002960 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e1b4      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003664:	4b2b      	ldr	r3, [pc, #172]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4925      	ldr	r1, [pc, #148]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003686:	4b24      	ldr	r3, [pc, #144]	@ (8003718 <HAL_RCC_OscConfig+0x278>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7ff f968 	bl	8002960 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003694:	f7ff f964 	bl	8002960 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e193      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d036      	beq.n	800372c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <HAL_RCC_OscConfig+0x27c>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036cc:	f7ff f948 	bl	8002960 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d4:	f7ff f944 	bl	8002960 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e173      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_RCC_OscConfig+0x274>)
 80036e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x234>
 80036f2:	e01b      	b.n	800372c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f4:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCC_OscConfig+0x27c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7ff f931 	bl	8002960 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	e00e      	b.n	8003720 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003702:	f7ff f92d 	bl	8002960 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d907      	bls.n	8003720 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e15c      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
 8003714:	40023800 	.word	0x40023800
 8003718:	42470000 	.word	0x42470000
 800371c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	4b8a      	ldr	r3, [pc, #552]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ea      	bne.n	8003702 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8097 	beq.w	8003868 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373e:	4b83      	ldr	r3, [pc, #524]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10f      	bne.n	800376a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	4b7f      	ldr	r3, [pc, #508]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	4a7e      	ldr	r2, [pc, #504]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	@ 0x40
 800375a:	4b7c      	ldr	r3, [pc, #496]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b79      	ldr	r3, [pc, #484]	@ (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003776:	4b76      	ldr	r3, [pc, #472]	@ (8003950 <HAL_RCC_OscConfig+0x4b0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a75      	ldr	r2, [pc, #468]	@ (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7ff f8ed 	bl	8002960 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7ff f8e9 	bl	8002960 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e118      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b6c      	ldr	r3, [pc, #432]	@ (8003950 <HAL_RCC_OscConfig+0x4b0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x31e>
 80037b0:	4b66      	ldr	r3, [pc, #408]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b4:	4a65      	ldr	r2, [pc, #404]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80037bc:	e01c      	b.n	80037f8 <HAL_RCC_OscConfig+0x358>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x340>
 80037c6:	4b61      	ldr	r3, [pc, #388]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ca:	4a60      	ldr	r2, [pc, #384]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d2:	4b5e      	ldr	r3, [pc, #376]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	4a5d      	ldr	r2, [pc, #372]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0x358>
 80037e0:	4b5a      	ldr	r3, [pc, #360]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	4a59      	ldr	r2, [pc, #356]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ec:	4b57      	ldr	r3, [pc, #348]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	4a56      	ldr	r2, [pc, #344]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7ff f8ae 	bl	8002960 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	e00a      	b.n	800381e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003808:	f7ff f8aa 	bl	8002960 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0d7      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	4b4b      	ldr	r3, [pc, #300]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ee      	beq.n	8003808 <HAL_RCC_OscConfig+0x368>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7ff f898 	bl	8002960 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003832:	e00a      	b.n	800384a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003834:	f7ff f894 	bl	8002960 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0c1      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	4b40      	ldr	r3, [pc, #256]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ee      	bne.n	8003834 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385c:	4b3b      	ldr	r3, [pc, #236]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	4a3a      	ldr	r2, [pc, #232]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003866:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80ad 	beq.w	80039cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003872:	4b36      	ldr	r3, [pc, #216]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b08      	cmp	r3, #8
 800387c:	d060      	beq.n	8003940 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d145      	bne.n	8003912 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b33      	ldr	r3, [pc, #204]	@ (8003954 <HAL_RCC_OscConfig+0x4b4>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7ff f868 	bl	8002960 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7ff f864 	bl	8002960 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e093      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b29      	ldr	r3, [pc, #164]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	071b      	lsls	r3, r3, #28
 80038de:	491b      	ldr	r1, [pc, #108]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <HAL_RCC_OscConfig+0x4b4>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7ff f839 	bl	8002960 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7ff f835 	bl	8002960 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e064      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	4b11      	ldr	r3, [pc, #68]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x452>
 8003910:	e05c      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_RCC_OscConfig+0x4b4>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7ff f822 	bl	8002960 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7ff f81e 	bl	8002960 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04d      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_RCC_OscConfig+0x4ac>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x480>
 800393e:	e045      	b.n	80039cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e040      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000
 8003954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003958:	4b1f      	ldr	r3, [pc, #124]	@ (80039d8 <HAL_RCC_OscConfig+0x538>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d030      	beq.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d129      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d122      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800398e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d119      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10f      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e041      	b.n	8003a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fe fe8a 	bl	800271c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 f95e 	bl	8003cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d001      	beq.n	8003a94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e046      	b.n	8003b22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	@ (8003b30 <HAL_TIM_Base_Start+0xb4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aae:	d01d      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b34 <HAL_TIM_Base_Start+0xb8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1e      	ldr	r2, [pc, #120]	@ (8003b38 <HAL_TIM_Base_Start+0xbc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b3c <HAL_TIM_Base_Start+0xc0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b40 <HAL_TIM_Base_Start+0xc4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a19      	ldr	r2, [pc, #100]	@ (8003b44 <HAL_TIM_Base_Start+0xc8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_TIM_Base_Start+0x70>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a18      	ldr	r2, [pc, #96]	@ (8003b48 <HAL_TIM_Base_Start+0xcc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d111      	bne.n	8003b10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d010      	beq.n	8003b20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0e:	e007      	b.n	8003b20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40010400 	.word	0x40010400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40001800 	.word	0x40001800

08003b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIM_ConfigClockSource+0x1c>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0b4      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x186>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba0:	d03e      	beq.n	8003c20 <HAL_TIM_ConfigClockSource+0xd4>
 8003ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba6:	f200 8087 	bhi.w	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bae:	f000 8086 	beq.w	8003cbe <HAL_TIM_ConfigClockSource+0x172>
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb6:	d87f      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b70      	cmp	r3, #112	@ 0x70
 8003bba:	d01a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8003bbc:	2b70      	cmp	r3, #112	@ 0x70
 8003bbe:	d87b      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b60      	cmp	r3, #96	@ 0x60
 8003bc2:	d050      	beq.n	8003c66 <HAL_TIM_ConfigClockSource+0x11a>
 8003bc4:	2b60      	cmp	r3, #96	@ 0x60
 8003bc6:	d877      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b50      	cmp	r3, #80	@ 0x50
 8003bca:	d03c      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0xfa>
 8003bcc:	2b50      	cmp	r3, #80	@ 0x50
 8003bce:	d873      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d058      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0x13a>
 8003bd4:	2b40      	cmp	r3, #64	@ 0x40
 8003bd6:	d86f      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b30      	cmp	r3, #48	@ 0x30
 8003bda:	d064      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bdc:	2b30      	cmp	r3, #48	@ 0x30
 8003bde:	d86b      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d060      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d867      	bhi.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d05c      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d05a      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	e062      	b.n	8003cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c02:	f000 f991 	bl	8003f28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	609a      	str	r2, [r3, #8]
      break;
 8003c1e:	e04f      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c30:	f000 f97a 	bl	8003f28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c42:	609a      	str	r2, [r3, #8]
      break;
 8003c44:	e03c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c52:	461a      	mov	r2, r3
 8003c54:	f000 f8ee 	bl	8003e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2150      	movs	r1, #80	@ 0x50
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f947 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003c64:	e02c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c72:	461a      	mov	r2, r3
 8003c74:	f000 f90d 	bl	8003e92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2160      	movs	r1, #96	@ 0x60
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f937 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003c84:	e01c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c92:	461a      	mov	r2, r3
 8003c94:	f000 f8ce 	bl	8003e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2140      	movs	r1, #64	@ 0x40
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f927 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003ca4:	e00c      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f000 f91e 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a46      	ldr	r2, [pc, #280]	@ (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfa:	d00f      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a43      	ldr	r2, [pc, #268]	@ (8003e0c <TIM_Base_SetConfig+0x130>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a42      	ldr	r2, [pc, #264]	@ (8003e10 <TIM_Base_SetConfig+0x134>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	@ (8003e14 <TIM_Base_SetConfig+0x138>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a40      	ldr	r2, [pc, #256]	@ (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d108      	bne.n	8003d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a35      	ldr	r2, [pc, #212]	@ (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3c:	d027      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a32      	ldr	r2, [pc, #200]	@ (8003e0c <TIM_Base_SetConfig+0x130>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d023      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a31      	ldr	r2, [pc, #196]	@ (8003e10 <TIM_Base_SetConfig+0x134>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01f      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a30      	ldr	r2, [pc, #192]	@ (8003e14 <TIM_Base_SetConfig+0x138>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2f      	ldr	r2, [pc, #188]	@ (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d017      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2e      	ldr	r2, [pc, #184]	@ (8003e1c <TIM_Base_SetConfig+0x140>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2d      	ldr	r2, [pc, #180]	@ (8003e20 <TIM_Base_SetConfig+0x144>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00f      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2c      	ldr	r2, [pc, #176]	@ (8003e24 <TIM_Base_SetConfig+0x148>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2b      	ldr	r2, [pc, #172]	@ (8003e28 <TIM_Base_SetConfig+0x14c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2a      	ldr	r2, [pc, #168]	@ (8003e2c <TIM_Base_SetConfig+0x150>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a29      	ldr	r2, [pc, #164]	@ (8003e30 <TIM_Base_SetConfig+0x154>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a10      	ldr	r2, [pc, #64]	@ (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_Base_SetConfig+0xf8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a12      	ldr	r2, [pc, #72]	@ (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d103      	bne.n	8003ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40010400 	.word	0x40010400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	40001800 	.word	0x40001800
 8003e2c:	40001c00 	.word	0x40001c00
 8003e30:	40002000 	.word	0x40002000

08003e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f023 030a 	bic.w	r3, r3, #10
 8003e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f023 0210 	bic.w	r2, r3, #16
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ece:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f043 0307 	orr.w	r3, r3, #7
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	021a      	lsls	r2, r3, #8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	609a      	str	r2, [r3, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e05a      	b.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a21      	ldr	r2, [pc, #132]	@ (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fcc:	d01d      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a15      	ldr	r2, [pc, #84]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d10c      	bne.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4313      	orrs	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	40000400 	.word	0x40000400
 800404c:	40000800 	.word	0x40000800
 8004050:	40000c00 	.word	0x40000c00
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40001800 	.word	0x40001800

08004060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e042      	b.n	80040f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe fb92 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	@ 0x24
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fa09 	bl	80044bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	@ 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b20      	cmp	r3, #32
 800411e:	d175      	bne.n	800420c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_Transmit+0x2c>
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e06e      	b.n	800420e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2221      	movs	r2, #33	@ 0x21
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413e:	f7fe fc0f 	bl	8002960 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d108      	bne.n	800416c <HAL_UART_Transmit+0x6c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	e003      	b.n	8004174 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004174:	e02e      	b.n	80041d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	@ 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f8df 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e03a      	b.n	800420e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	3302      	adds	r3, #2
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	e007      	b.n	80041c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	3301      	adds	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1cb      	bne.n	8004176 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2140      	movs	r1, #64	@ 0x40
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f8ab 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e006      	b.n	800420e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b08a      	sub	sp, #40	@ 0x28
 800421a:	af02      	add	r7, sp, #8
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b20      	cmp	r3, #32
 8004234:	f040 8081 	bne.w	800433a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Receive+0x2e>
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e079      	b.n	800433c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2222      	movs	r2, #34	@ 0x22
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800425c:	f7fe fb80 	bl	8002960 <HAL_GetTick>
 8004260:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004276:	d108      	bne.n	800428a <HAL_UART_Receive+0x74>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e003      	b.n	8004292 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004292:	e047      	b.n	8004324 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	2120      	movs	r1, #32
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f850 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e042      	b.n	800433c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10c      	bne.n	80042d6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	3302      	adds	r3, #2
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	e01f      	b.n	8004316 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042de:	d007      	beq.n	80042f0 <HAL_UART_Receive+0xda>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <HAL_UART_Receive+0xe8>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e008      	b.n	8004310 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430a:	b2da      	uxtb	r2, r3
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	3301      	adds	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1b2      	bne.n	8004294 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e000      	b.n	800433c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800433a:	2302      	movs	r3, #2
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004354:	e03b      	b.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d037      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435e:	f7fe faff 	bl	8002960 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	6a3a      	ldr	r2, [r7, #32]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <UART_WaitOnFlagUntilTimeout+0x30>
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e03a      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d023      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b80      	cmp	r3, #128	@ 0x80
 800438a:	d020      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	d01d      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b08      	cmp	r3, #8
 800439e:	d116      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f81d 	bl	80043f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2208      	movs	r2, #8
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00f      	b.n	80043ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4013      	ands	r3, r2
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d0b4      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b095      	sub	sp, #84	@ 0x54
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004414:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	330c      	adds	r3, #12
 800441c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800441e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e5      	bne.n	80043fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	61fb      	str	r3, [r7, #28]
   return(result);
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	64bb      	str	r3, [r7, #72]	@ 0x48
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	2b01      	cmp	r3, #1
 800446c:	d119      	bne.n	80044a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	60bb      	str	r3, [r7, #8]
   return(result);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0310 	bic.w	r3, r3, #16
 8004484:	647b      	str	r3, [r7, #68]	@ 0x44
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800448e:	61ba      	str	r2, [r7, #24]
 8004490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6979      	ldr	r1, [r7, #20]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	613b      	str	r3, [r7, #16]
   return(result);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044b0:	bf00      	nop
 80044b2:	3754      	adds	r7, #84	@ 0x54
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b0c0      	sub	sp, #256	@ 0x100
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d8:	68d9      	ldr	r1, [r3, #12]
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	ea40 0301 	orr.w	r3, r0, r1
 80044e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004514:	f021 010c 	bic.w	r1, r1, #12
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004522:	430b      	orrs	r3, r1
 8004524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004536:	6999      	ldr	r1, [r3, #24]
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	ea40 0301 	orr.w	r3, r0, r1
 8004542:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b8f      	ldr	r3, [pc, #572]	@ (8004788 <UART_SetConfig+0x2cc>)
 800454c:	429a      	cmp	r2, r3
 800454e:	d005      	beq.n	800455c <UART_SetConfig+0xa0>
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4b8d      	ldr	r3, [pc, #564]	@ (800478c <UART_SetConfig+0x2d0>)
 8004558:	429a      	cmp	r2, r3
 800455a:	d104      	bne.n	8004566 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800455c:	f7fe fde2 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8004560:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004564:	e003      	b.n	800456e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004566:	f7fe fdc9 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 800456a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004578:	f040 810c 	bne.w	8004794 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800457c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004586:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800458a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800458e:	4622      	mov	r2, r4
 8004590:	462b      	mov	r3, r5
 8004592:	1891      	adds	r1, r2, r2
 8004594:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004596:	415b      	adcs	r3, r3
 8004598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800459a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800459e:	4621      	mov	r1, r4
 80045a0:	eb12 0801 	adds.w	r8, r2, r1
 80045a4:	4629      	mov	r1, r5
 80045a6:	eb43 0901 	adc.w	r9, r3, r1
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045be:	4690      	mov	r8, r2
 80045c0:	4699      	mov	r9, r3
 80045c2:	4623      	mov	r3, r4
 80045c4:	eb18 0303 	adds.w	r3, r8, r3
 80045c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045cc:	462b      	mov	r3, r5
 80045ce:	eb49 0303 	adc.w	r3, r9, r3
 80045d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045ea:	460b      	mov	r3, r1
 80045ec:	18db      	adds	r3, r3, r3
 80045ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80045f0:	4613      	mov	r3, r2
 80045f2:	eb42 0303 	adc.w	r3, r2, r3
 80045f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80045f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004600:	f7fc fbb2 	bl	8000d68 <__aeabi_uldivmod>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4b61      	ldr	r3, [pc, #388]	@ (8004790 <UART_SetConfig+0x2d4>)
 800460a:	fba3 2302 	umull	r2, r3, r3, r2
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	011c      	lsls	r4, r3, #4
 8004612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800461c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004620:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	1891      	adds	r1, r2, r2
 800462a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800462c:	415b      	adcs	r3, r3
 800462e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004630:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004634:	4641      	mov	r1, r8
 8004636:	eb12 0a01 	adds.w	sl, r2, r1
 800463a:	4649      	mov	r1, r9
 800463c:	eb43 0b01 	adc.w	fp, r3, r1
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800464c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004654:	4692      	mov	sl, r2
 8004656:	469b      	mov	fp, r3
 8004658:	4643      	mov	r3, r8
 800465a:	eb1a 0303 	adds.w	r3, sl, r3
 800465e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004662:	464b      	mov	r3, r9
 8004664:	eb4b 0303 	adc.w	r3, fp, r3
 8004668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004678:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800467c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004680:	460b      	mov	r3, r1
 8004682:	18db      	adds	r3, r3, r3
 8004684:	643b      	str	r3, [r7, #64]	@ 0x40
 8004686:	4613      	mov	r3, r2
 8004688:	eb42 0303 	adc.w	r3, r2, r3
 800468c:	647b      	str	r3, [r7, #68]	@ 0x44
 800468e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004692:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004696:	f7fc fb67 	bl	8000d68 <__aeabi_uldivmod>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4611      	mov	r1, r2
 80046a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004790 <UART_SetConfig+0x2d4>)
 80046a2:	fba3 2301 	umull	r2, r3, r3, r1
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	2264      	movs	r2, #100	@ 0x64
 80046aa:	fb02 f303 	mul.w	r3, r2, r3
 80046ae:	1acb      	subs	r3, r1, r3
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046b6:	4b36      	ldr	r3, [pc, #216]	@ (8004790 <UART_SetConfig+0x2d4>)
 80046b8:	fba3 2302 	umull	r2, r3, r3, r2
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046c4:	441c      	add	r4, r3
 80046c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046d8:	4642      	mov	r2, r8
 80046da:	464b      	mov	r3, r9
 80046dc:	1891      	adds	r1, r2, r2
 80046de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046e0:	415b      	adcs	r3, r3
 80046e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046e8:	4641      	mov	r1, r8
 80046ea:	1851      	adds	r1, r2, r1
 80046ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80046ee:	4649      	mov	r1, r9
 80046f0:	414b      	adcs	r3, r1
 80046f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004700:	4659      	mov	r1, fp
 8004702:	00cb      	lsls	r3, r1, #3
 8004704:	4651      	mov	r1, sl
 8004706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800470a:	4651      	mov	r1, sl
 800470c:	00ca      	lsls	r2, r1, #3
 800470e:	4610      	mov	r0, r2
 8004710:	4619      	mov	r1, r3
 8004712:	4603      	mov	r3, r0
 8004714:	4642      	mov	r2, r8
 8004716:	189b      	adds	r3, r3, r2
 8004718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800471c:	464b      	mov	r3, r9
 800471e:	460a      	mov	r2, r1
 8004720:	eb42 0303 	adc.w	r3, r2, r3
 8004724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004734:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800473c:	460b      	mov	r3, r1
 800473e:	18db      	adds	r3, r3, r3
 8004740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004742:	4613      	mov	r3, r2
 8004744:	eb42 0303 	adc.w	r3, r2, r3
 8004748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800474a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800474e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004752:	f7fc fb09 	bl	8000d68 <__aeabi_uldivmod>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <UART_SetConfig+0x2d4>)
 800475c:	fba3 1302 	umull	r1, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	2164      	movs	r1, #100	@ 0x64
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	3332      	adds	r3, #50	@ 0x32
 800476e:	4a08      	ldr	r2, [pc, #32]	@ (8004790 <UART_SetConfig+0x2d4>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	f003 0207 	and.w	r2, r3, #7
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4422      	add	r2, r4
 8004782:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004784:	e106      	b.n	8004994 <UART_SetConfig+0x4d8>
 8004786:	bf00      	nop
 8004788:	40011000 	.word	0x40011000
 800478c:	40011400 	.word	0x40011400
 8004790:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004798:	2200      	movs	r2, #0
 800479a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800479e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047a6:	4642      	mov	r2, r8
 80047a8:	464b      	mov	r3, r9
 80047aa:	1891      	adds	r1, r2, r2
 80047ac:	6239      	str	r1, [r7, #32]
 80047ae:	415b      	adcs	r3, r3
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047b6:	4641      	mov	r1, r8
 80047b8:	1854      	adds	r4, r2, r1
 80047ba:	4649      	mov	r1, r9
 80047bc:	eb43 0501 	adc.w	r5, r3, r1
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	00eb      	lsls	r3, r5, #3
 80047ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ce:	00e2      	lsls	r2, r4, #3
 80047d0:	4614      	mov	r4, r2
 80047d2:	461d      	mov	r5, r3
 80047d4:	4643      	mov	r3, r8
 80047d6:	18e3      	adds	r3, r4, r3
 80047d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047dc:	464b      	mov	r3, r9
 80047de:	eb45 0303 	adc.w	r3, r5, r3
 80047e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004802:	4629      	mov	r1, r5
 8004804:	008b      	lsls	r3, r1, #2
 8004806:	4621      	mov	r1, r4
 8004808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800480c:	4621      	mov	r1, r4
 800480e:	008a      	lsls	r2, r1, #2
 8004810:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004814:	f7fc faa8 	bl	8000d68 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4b60      	ldr	r3, [pc, #384]	@ (80049a0 <UART_SetConfig+0x4e4>)
 800481e:	fba3 2302 	umull	r2, r3, r3, r2
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	011c      	lsls	r4, r3, #4
 8004826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800482a:	2200      	movs	r2, #0
 800482c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004830:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004834:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004838:	4642      	mov	r2, r8
 800483a:	464b      	mov	r3, r9
 800483c:	1891      	adds	r1, r2, r2
 800483e:	61b9      	str	r1, [r7, #24]
 8004840:	415b      	adcs	r3, r3
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004848:	4641      	mov	r1, r8
 800484a:	1851      	adds	r1, r2, r1
 800484c:	6139      	str	r1, [r7, #16]
 800484e:	4649      	mov	r1, r9
 8004850:	414b      	adcs	r3, r1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004860:	4659      	mov	r1, fp
 8004862:	00cb      	lsls	r3, r1, #3
 8004864:	4651      	mov	r1, sl
 8004866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486a:	4651      	mov	r1, sl
 800486c:	00ca      	lsls	r2, r1, #3
 800486e:	4610      	mov	r0, r2
 8004870:	4619      	mov	r1, r3
 8004872:	4603      	mov	r3, r0
 8004874:	4642      	mov	r2, r8
 8004876:	189b      	adds	r3, r3, r2
 8004878:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800487c:	464b      	mov	r3, r9
 800487e:	460a      	mov	r2, r1
 8004880:	eb42 0303 	adc.w	r3, r2, r3
 8004884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004892:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048a0:	4649      	mov	r1, r9
 80048a2:	008b      	lsls	r3, r1, #2
 80048a4:	4641      	mov	r1, r8
 80048a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048aa:	4641      	mov	r1, r8
 80048ac:	008a      	lsls	r2, r1, #2
 80048ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048b2:	f7fc fa59 	bl	8000d68 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	4b38      	ldr	r3, [pc, #224]	@ (80049a0 <UART_SetConfig+0x4e4>)
 80048be:	fba3 2301 	umull	r2, r3, r3, r1
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2264      	movs	r2, #100	@ 0x64
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	1acb      	subs	r3, r1, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	@ 0x32
 80048d0:	4a33      	ldr	r2, [pc, #204]	@ (80049a0 <UART_SetConfig+0x4e4>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048dc:	441c      	add	r4, r3
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80048e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80048e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048ec:	4642      	mov	r2, r8
 80048ee:	464b      	mov	r3, r9
 80048f0:	1891      	adds	r1, r2, r2
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	415b      	adcs	r3, r3
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048fc:	4641      	mov	r1, r8
 80048fe:	1851      	adds	r1, r2, r1
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	4649      	mov	r1, r9
 8004904:	414b      	adcs	r3, r1
 8004906:	607b      	str	r3, [r7, #4]
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004914:	4659      	mov	r1, fp
 8004916:	00cb      	lsls	r3, r1, #3
 8004918:	4651      	mov	r1, sl
 800491a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800491e:	4651      	mov	r1, sl
 8004920:	00ca      	lsls	r2, r1, #3
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	4603      	mov	r3, r0
 8004928:	4642      	mov	r2, r8
 800492a:	189b      	adds	r3, r3, r2
 800492c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800492e:	464b      	mov	r3, r9
 8004930:	460a      	mov	r2, r1
 8004932:	eb42 0303 	adc.w	r3, r2, r3
 8004936:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	663b      	str	r3, [r7, #96]	@ 0x60
 8004942:	667a      	str	r2, [r7, #100]	@ 0x64
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004950:	4649      	mov	r1, r9
 8004952:	008b      	lsls	r3, r1, #2
 8004954:	4641      	mov	r1, r8
 8004956:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800495a:	4641      	mov	r1, r8
 800495c:	008a      	lsls	r2, r1, #2
 800495e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004962:	f7fc fa01 	bl	8000d68 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4b0d      	ldr	r3, [pc, #52]	@ (80049a0 <UART_SetConfig+0x4e4>)
 800496c:	fba3 1302 	umull	r1, r3, r3, r2
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	2164      	movs	r1, #100	@ 0x64
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	3332      	adds	r3, #50	@ 0x32
 800497e:	4a08      	ldr	r2, [pc, #32]	@ (80049a0 <UART_SetConfig+0x4e4>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	f003 020f 	and.w	r2, r3, #15
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4422      	add	r2, r4
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	bf00      	nop
 8004996:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800499a:	46bd      	mov	sp, r7
 800499c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a0:	51eb851f 	.word	0x51eb851f

080049a4 <_strtol_l.constprop.0>:
 80049a4:	2b24      	cmp	r3, #36	@ 0x24
 80049a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049aa:	4686      	mov	lr, r0
 80049ac:	4690      	mov	r8, r2
 80049ae:	d801      	bhi.n	80049b4 <_strtol_l.constprop.0+0x10>
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d106      	bne.n	80049c2 <_strtol_l.constprop.0+0x1e>
 80049b4:	f001 feb6 	bl	8006724 <__errno>
 80049b8:	2316      	movs	r3, #22
 80049ba:	6003      	str	r3, [r0, #0]
 80049bc:	2000      	movs	r0, #0
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c2:	4834      	ldr	r0, [pc, #208]	@ (8004a94 <_strtol_l.constprop.0+0xf0>)
 80049c4:	460d      	mov	r5, r1
 80049c6:	462a      	mov	r2, r5
 80049c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049cc:	5d06      	ldrb	r6, [r0, r4]
 80049ce:	f016 0608 	ands.w	r6, r6, #8
 80049d2:	d1f8      	bne.n	80049c6 <_strtol_l.constprop.0+0x22>
 80049d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80049d6:	d12d      	bne.n	8004a34 <_strtol_l.constprop.0+0x90>
 80049d8:	782c      	ldrb	r4, [r5, #0]
 80049da:	2601      	movs	r6, #1
 80049dc:	1c95      	adds	r5, r2, #2
 80049de:	f033 0210 	bics.w	r2, r3, #16
 80049e2:	d109      	bne.n	80049f8 <_strtol_l.constprop.0+0x54>
 80049e4:	2c30      	cmp	r4, #48	@ 0x30
 80049e6:	d12a      	bne.n	8004a3e <_strtol_l.constprop.0+0x9a>
 80049e8:	782a      	ldrb	r2, [r5, #0]
 80049ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80049ee:	2a58      	cmp	r2, #88	@ 0x58
 80049f0:	d125      	bne.n	8004a3e <_strtol_l.constprop.0+0x9a>
 80049f2:	786c      	ldrb	r4, [r5, #1]
 80049f4:	2310      	movs	r3, #16
 80049f6:	3502      	adds	r5, #2
 80049f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80049fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a00:	2200      	movs	r2, #0
 8004a02:	fbbc f9f3 	udiv	r9, ip, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	fb03 ca19 	mls	sl, r3, r9, ip
 8004a0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004a10:	2f09      	cmp	r7, #9
 8004a12:	d81b      	bhi.n	8004a4c <_strtol_l.constprop.0+0xa8>
 8004a14:	463c      	mov	r4, r7
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	dd27      	ble.n	8004a6a <_strtol_l.constprop.0+0xc6>
 8004a1a:	1c57      	adds	r7, r2, #1
 8004a1c:	d007      	beq.n	8004a2e <_strtol_l.constprop.0+0x8a>
 8004a1e:	4581      	cmp	r9, r0
 8004a20:	d320      	bcc.n	8004a64 <_strtol_l.constprop.0+0xc0>
 8004a22:	d101      	bne.n	8004a28 <_strtol_l.constprop.0+0x84>
 8004a24:	45a2      	cmp	sl, r4
 8004a26:	db1d      	blt.n	8004a64 <_strtol_l.constprop.0+0xc0>
 8004a28:	fb00 4003 	mla	r0, r0, r3, r4
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a32:	e7eb      	b.n	8004a0c <_strtol_l.constprop.0+0x68>
 8004a34:	2c2b      	cmp	r4, #43	@ 0x2b
 8004a36:	bf04      	itt	eq
 8004a38:	782c      	ldrbeq	r4, [r5, #0]
 8004a3a:	1c95      	addeq	r5, r2, #2
 8004a3c:	e7cf      	b.n	80049de <_strtol_l.constprop.0+0x3a>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1da      	bne.n	80049f8 <_strtol_l.constprop.0+0x54>
 8004a42:	2c30      	cmp	r4, #48	@ 0x30
 8004a44:	bf0c      	ite	eq
 8004a46:	2308      	moveq	r3, #8
 8004a48:	230a      	movne	r3, #10
 8004a4a:	e7d5      	b.n	80049f8 <_strtol_l.constprop.0+0x54>
 8004a4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004a50:	2f19      	cmp	r7, #25
 8004a52:	d801      	bhi.n	8004a58 <_strtol_l.constprop.0+0xb4>
 8004a54:	3c37      	subs	r4, #55	@ 0x37
 8004a56:	e7de      	b.n	8004a16 <_strtol_l.constprop.0+0x72>
 8004a58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004a5c:	2f19      	cmp	r7, #25
 8004a5e:	d804      	bhi.n	8004a6a <_strtol_l.constprop.0+0xc6>
 8004a60:	3c57      	subs	r4, #87	@ 0x57
 8004a62:	e7d8      	b.n	8004a16 <_strtol_l.constprop.0+0x72>
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295
 8004a68:	e7e1      	b.n	8004a2e <_strtol_l.constprop.0+0x8a>
 8004a6a:	1c53      	adds	r3, r2, #1
 8004a6c:	d108      	bne.n	8004a80 <_strtol_l.constprop.0+0xdc>
 8004a6e:	2322      	movs	r3, #34	@ 0x22
 8004a70:	f8ce 3000 	str.w	r3, [lr]
 8004a74:	4660      	mov	r0, ip
 8004a76:	f1b8 0f00 	cmp.w	r8, #0
 8004a7a:	d0a0      	beq.n	80049be <_strtol_l.constprop.0+0x1a>
 8004a7c:	1e69      	subs	r1, r5, #1
 8004a7e:	e006      	b.n	8004a8e <_strtol_l.constprop.0+0xea>
 8004a80:	b106      	cbz	r6, 8004a84 <_strtol_l.constprop.0+0xe0>
 8004a82:	4240      	negs	r0, r0
 8004a84:	f1b8 0f00 	cmp.w	r8, #0
 8004a88:	d099      	beq.n	80049be <_strtol_l.constprop.0+0x1a>
 8004a8a:	2a00      	cmp	r2, #0
 8004a8c:	d1f6      	bne.n	8004a7c <_strtol_l.constprop.0+0xd8>
 8004a8e:	f8c8 1000 	str.w	r1, [r8]
 8004a92:	e794      	b.n	80049be <_strtol_l.constprop.0+0x1a>
 8004a94:	0800a265 	.word	0x0800a265

08004a98 <_strtol_r>:
 8004a98:	f7ff bf84 	b.w	80049a4 <_strtol_l.constprop.0>

08004a9c <strtol>:
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	4601      	mov	r1, r0
 8004aa2:	4802      	ldr	r0, [pc, #8]	@ (8004aac <strtol+0x10>)
 8004aa4:	6800      	ldr	r0, [r0, #0]
 8004aa6:	f7ff bf7d 	b.w	80049a4 <_strtol_l.constprop.0>
 8004aaa:	bf00      	nop
 8004aac:	20000018 	.word	0x20000018

08004ab0 <__cvt>:
 8004ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab4:	ec57 6b10 	vmov	r6, r7, d0
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	460c      	mov	r4, r1
 8004abc:	4619      	mov	r1, r3
 8004abe:	463b      	mov	r3, r7
 8004ac0:	bfbb      	ittet	lt
 8004ac2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ac6:	461f      	movlt	r7, r3
 8004ac8:	2300      	movge	r3, #0
 8004aca:	232d      	movlt	r3, #45	@ 0x2d
 8004acc:	700b      	strb	r3, [r1, #0]
 8004ace:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ad0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004ad4:	4691      	mov	r9, r2
 8004ad6:	f023 0820 	bic.w	r8, r3, #32
 8004ada:	bfbc      	itt	lt
 8004adc:	4632      	movlt	r2, r6
 8004ade:	4616      	movlt	r6, r2
 8004ae0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ae4:	d005      	beq.n	8004af2 <__cvt+0x42>
 8004ae6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004aea:	d100      	bne.n	8004aee <__cvt+0x3e>
 8004aec:	3401      	adds	r4, #1
 8004aee:	2102      	movs	r1, #2
 8004af0:	e000      	b.n	8004af4 <__cvt+0x44>
 8004af2:	2103      	movs	r1, #3
 8004af4:	ab03      	add	r3, sp, #12
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	ab02      	add	r3, sp, #8
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	ec47 6b10 	vmov	d0, r6, r7
 8004b00:	4653      	mov	r3, sl
 8004b02:	4622      	mov	r2, r4
 8004b04:	f001 fef8 	bl	80068f8 <_dtoa_r>
 8004b08:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	d119      	bne.n	8004b44 <__cvt+0x94>
 8004b10:	f019 0f01 	tst.w	r9, #1
 8004b14:	d00e      	beq.n	8004b34 <__cvt+0x84>
 8004b16:	eb00 0904 	add.w	r9, r0, r4
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4630      	mov	r0, r6
 8004b20:	4639      	mov	r1, r7
 8004b22:	f7fb fff1 	bl	8000b08 <__aeabi_dcmpeq>
 8004b26:	b108      	cbz	r0, 8004b2c <__cvt+0x7c>
 8004b28:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b2c:	2230      	movs	r2, #48	@ 0x30
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	454b      	cmp	r3, r9
 8004b32:	d31e      	bcc.n	8004b72 <__cvt+0xc2>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b38:	1b5b      	subs	r3, r3, r5
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	b004      	add	sp, #16
 8004b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b48:	eb00 0904 	add.w	r9, r0, r4
 8004b4c:	d1e5      	bne.n	8004b1a <__cvt+0x6a>
 8004b4e:	7803      	ldrb	r3, [r0, #0]
 8004b50:	2b30      	cmp	r3, #48	@ 0x30
 8004b52:	d10a      	bne.n	8004b6a <__cvt+0xba>
 8004b54:	2200      	movs	r2, #0
 8004b56:	2300      	movs	r3, #0
 8004b58:	4630      	mov	r0, r6
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	f7fb ffd4 	bl	8000b08 <__aeabi_dcmpeq>
 8004b60:	b918      	cbnz	r0, 8004b6a <__cvt+0xba>
 8004b62:	f1c4 0401 	rsb	r4, r4, #1
 8004b66:	f8ca 4000 	str.w	r4, [sl]
 8004b6a:	f8da 3000 	ldr.w	r3, [sl]
 8004b6e:	4499      	add	r9, r3
 8004b70:	e7d3      	b.n	8004b1a <__cvt+0x6a>
 8004b72:	1c59      	adds	r1, r3, #1
 8004b74:	9103      	str	r1, [sp, #12]
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e7d9      	b.n	8004b2e <__cvt+0x7e>

08004b7a <__exponent>:
 8004b7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b7c:	2900      	cmp	r1, #0
 8004b7e:	bfba      	itte	lt
 8004b80:	4249      	neglt	r1, r1
 8004b82:	232d      	movlt	r3, #45	@ 0x2d
 8004b84:	232b      	movge	r3, #43	@ 0x2b
 8004b86:	2909      	cmp	r1, #9
 8004b88:	7002      	strb	r2, [r0, #0]
 8004b8a:	7043      	strb	r3, [r0, #1]
 8004b8c:	dd29      	ble.n	8004be2 <__exponent+0x68>
 8004b8e:	f10d 0307 	add.w	r3, sp, #7
 8004b92:	461d      	mov	r5, r3
 8004b94:	270a      	movs	r7, #10
 8004b96:	461a      	mov	r2, r3
 8004b98:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b9c:	fb07 1416 	mls	r4, r7, r6, r1
 8004ba0:	3430      	adds	r4, #48	@ 0x30
 8004ba2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	2c63      	cmp	r4, #99	@ 0x63
 8004baa:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bae:	4631      	mov	r1, r6
 8004bb0:	dcf1      	bgt.n	8004b96 <__exponent+0x1c>
 8004bb2:	3130      	adds	r1, #48	@ 0x30
 8004bb4:	1e94      	subs	r4, r2, #2
 8004bb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bba:	1c41      	adds	r1, r0, #1
 8004bbc:	4623      	mov	r3, r4
 8004bbe:	42ab      	cmp	r3, r5
 8004bc0:	d30a      	bcc.n	8004bd8 <__exponent+0x5e>
 8004bc2:	f10d 0309 	add.w	r3, sp, #9
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	42ac      	cmp	r4, r5
 8004bca:	bf88      	it	hi
 8004bcc:	2300      	movhi	r3, #0
 8004bce:	3302      	adds	r3, #2
 8004bd0:	4403      	add	r3, r0
 8004bd2:	1a18      	subs	r0, r3, r0
 8004bd4:	b003      	add	sp, #12
 8004bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004bdc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004be0:	e7ed      	b.n	8004bbe <__exponent+0x44>
 8004be2:	2330      	movs	r3, #48	@ 0x30
 8004be4:	3130      	adds	r1, #48	@ 0x30
 8004be6:	7083      	strb	r3, [r0, #2]
 8004be8:	70c1      	strb	r1, [r0, #3]
 8004bea:	1d03      	adds	r3, r0, #4
 8004bec:	e7f1      	b.n	8004bd2 <__exponent+0x58>
	...

08004bf0 <_printf_float>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	b08d      	sub	sp, #52	@ 0x34
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	461f      	mov	r7, r3
 8004c00:	4605      	mov	r5, r0
 8004c02:	f001 fd11 	bl	8006628 <_localeconv_r>
 8004c06:	6803      	ldr	r3, [r0, #0]
 8004c08:	9304      	str	r3, [sp, #16]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fb fb50 	bl	80002b0 <strlen>
 8004c10:	2300      	movs	r3, #0
 8004c12:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c14:	f8d8 3000 	ldr.w	r3, [r8]
 8004c18:	9005      	str	r0, [sp, #20]
 8004c1a:	3307      	adds	r3, #7
 8004c1c:	f023 0307 	bic.w	r3, r3, #7
 8004c20:	f103 0208 	add.w	r2, r3, #8
 8004c24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c28:	f8d4 b000 	ldr.w	fp, [r4]
 8004c2c:	f8c8 2000 	str.w	r2, [r8]
 8004c30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c38:	9307      	str	r3, [sp, #28]
 8004c3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c46:	4b9c      	ldr	r3, [pc, #624]	@ (8004eb8 <_printf_float+0x2c8>)
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4c:	f7fb ff8e 	bl	8000b6c <__aeabi_dcmpun>
 8004c50:	bb70      	cbnz	r0, 8004cb0 <_printf_float+0xc0>
 8004c52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c56:	4b98      	ldr	r3, [pc, #608]	@ (8004eb8 <_printf_float+0x2c8>)
 8004c58:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5c:	f7fb ff68 	bl	8000b30 <__aeabi_dcmple>
 8004c60:	bb30      	cbnz	r0, 8004cb0 <_printf_float+0xc0>
 8004c62:	2200      	movs	r2, #0
 8004c64:	2300      	movs	r3, #0
 8004c66:	4640      	mov	r0, r8
 8004c68:	4649      	mov	r1, r9
 8004c6a:	f7fb ff57 	bl	8000b1c <__aeabi_dcmplt>
 8004c6e:	b110      	cbz	r0, 8004c76 <_printf_float+0x86>
 8004c70:	232d      	movs	r3, #45	@ 0x2d
 8004c72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c76:	4a91      	ldr	r2, [pc, #580]	@ (8004ebc <_printf_float+0x2cc>)
 8004c78:	4b91      	ldr	r3, [pc, #580]	@ (8004ec0 <_printf_float+0x2d0>)
 8004c7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c7e:	bf94      	ite	ls
 8004c80:	4690      	movls	r8, r2
 8004c82:	4698      	movhi	r8, r3
 8004c84:	2303      	movs	r3, #3
 8004c86:	6123      	str	r3, [r4, #16]
 8004c88:	f02b 0304 	bic.w	r3, fp, #4
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	f04f 0900 	mov.w	r9, #0
 8004c92:	9700      	str	r7, [sp, #0]
 8004c94:	4633      	mov	r3, r6
 8004c96:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 f9d2 	bl	8005044 <_printf_common>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f040 808d 	bne.w	8004dc0 <_printf_float+0x1d0>
 8004ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8004caa:	b00d      	add	sp, #52	@ 0x34
 8004cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	f7fb ff58 	bl	8000b6c <__aeabi_dcmpun>
 8004cbc:	b140      	cbz	r0, 8004cd0 <_printf_float+0xe0>
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bfbc      	itt	lt
 8004cc4:	232d      	movlt	r3, #45	@ 0x2d
 8004cc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004cca:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec4 <_printf_float+0x2d4>)
 8004ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8004ec8 <_printf_float+0x2d8>)
 8004cce:	e7d4      	b.n	8004c7a <_printf_float+0x8a>
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004cd6:	9206      	str	r2, [sp, #24]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	d13b      	bne.n	8004d54 <_printf_float+0x164>
 8004cdc:	2306      	movs	r3, #6
 8004cde:	6063      	str	r3, [r4, #4]
 8004ce0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6022      	str	r2, [r4, #0]
 8004ce8:	9303      	str	r3, [sp, #12]
 8004cea:	ab0a      	add	r3, sp, #40	@ 0x28
 8004cec:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004cf0:	ab09      	add	r3, sp, #36	@ 0x24
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	6861      	ldr	r1, [r4, #4]
 8004cf6:	ec49 8b10 	vmov	d0, r8, r9
 8004cfa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f7ff fed6 	bl	8004ab0 <__cvt>
 8004d04:	9b06      	ldr	r3, [sp, #24]
 8004d06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d08:	2b47      	cmp	r3, #71	@ 0x47
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	d129      	bne.n	8004d62 <_printf_float+0x172>
 8004d0e:	1cc8      	adds	r0, r1, #3
 8004d10:	db02      	blt.n	8004d18 <_printf_float+0x128>
 8004d12:	6863      	ldr	r3, [r4, #4]
 8004d14:	4299      	cmp	r1, r3
 8004d16:	dd41      	ble.n	8004d9c <_printf_float+0x1ac>
 8004d18:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d1c:	fa5f fa8a 	uxtb.w	sl, sl
 8004d20:	3901      	subs	r1, #1
 8004d22:	4652      	mov	r2, sl
 8004d24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d28:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d2a:	f7ff ff26 	bl	8004b7a <__exponent>
 8004d2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d30:	1813      	adds	r3, r2, r0
 8004d32:	2a01      	cmp	r2, #1
 8004d34:	4681      	mov	r9, r0
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	dc02      	bgt.n	8004d40 <_printf_float+0x150>
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	07d2      	lsls	r2, r2, #31
 8004d3e:	d501      	bpl.n	8004d44 <_printf_float+0x154>
 8004d40:	3301      	adds	r3, #1
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0a2      	beq.n	8004c92 <_printf_float+0xa2>
 8004d4c:	232d      	movs	r3, #45	@ 0x2d
 8004d4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d52:	e79e      	b.n	8004c92 <_printf_float+0xa2>
 8004d54:	9a06      	ldr	r2, [sp, #24]
 8004d56:	2a47      	cmp	r2, #71	@ 0x47
 8004d58:	d1c2      	bne.n	8004ce0 <_printf_float+0xf0>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1c0      	bne.n	8004ce0 <_printf_float+0xf0>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e7bd      	b.n	8004cde <_printf_float+0xee>
 8004d62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d66:	d9db      	bls.n	8004d20 <_printf_float+0x130>
 8004d68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d6c:	d118      	bne.n	8004da0 <_printf_float+0x1b0>
 8004d6e:	2900      	cmp	r1, #0
 8004d70:	6863      	ldr	r3, [r4, #4]
 8004d72:	dd0b      	ble.n	8004d8c <_printf_float+0x19c>
 8004d74:	6121      	str	r1, [r4, #16]
 8004d76:	b913      	cbnz	r3, 8004d7e <_printf_float+0x18e>
 8004d78:	6822      	ldr	r2, [r4, #0]
 8004d7a:	07d0      	lsls	r0, r2, #31
 8004d7c:	d502      	bpl.n	8004d84 <_printf_float+0x194>
 8004d7e:	3301      	adds	r3, #1
 8004d80:	440b      	add	r3, r1
 8004d82:	6123      	str	r3, [r4, #16]
 8004d84:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d86:	f04f 0900 	mov.w	r9, #0
 8004d8a:	e7db      	b.n	8004d44 <_printf_float+0x154>
 8004d8c:	b913      	cbnz	r3, 8004d94 <_printf_float+0x1a4>
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	07d2      	lsls	r2, r2, #31
 8004d92:	d501      	bpl.n	8004d98 <_printf_float+0x1a8>
 8004d94:	3302      	adds	r3, #2
 8004d96:	e7f4      	b.n	8004d82 <_printf_float+0x192>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e7f2      	b.n	8004d82 <_printf_float+0x192>
 8004d9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004da0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004da2:	4299      	cmp	r1, r3
 8004da4:	db05      	blt.n	8004db2 <_printf_float+0x1c2>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	6121      	str	r1, [r4, #16]
 8004daa:	07d8      	lsls	r0, r3, #31
 8004dac:	d5ea      	bpl.n	8004d84 <_printf_float+0x194>
 8004dae:	1c4b      	adds	r3, r1, #1
 8004db0:	e7e7      	b.n	8004d82 <_printf_float+0x192>
 8004db2:	2900      	cmp	r1, #0
 8004db4:	bfd4      	ite	le
 8004db6:	f1c1 0202 	rsble	r2, r1, #2
 8004dba:	2201      	movgt	r2, #1
 8004dbc:	4413      	add	r3, r2
 8004dbe:	e7e0      	b.n	8004d82 <_printf_float+0x192>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	055a      	lsls	r2, r3, #21
 8004dc4:	d407      	bmi.n	8004dd6 <_printf_float+0x1e6>
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	4642      	mov	r2, r8
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d12b      	bne.n	8004e2c <_printf_float+0x23c>
 8004dd4:	e767      	b.n	8004ca6 <_printf_float+0xb6>
 8004dd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004dda:	f240 80dd 	bls.w	8004f98 <_printf_float+0x3a8>
 8004dde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004de2:	2200      	movs	r2, #0
 8004de4:	2300      	movs	r3, #0
 8004de6:	f7fb fe8f 	bl	8000b08 <__aeabi_dcmpeq>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d033      	beq.n	8004e56 <_printf_float+0x266>
 8004dee:	4a37      	ldr	r2, [pc, #220]	@ (8004ecc <_printf_float+0x2dc>)
 8004df0:	2301      	movs	r3, #1
 8004df2:	4631      	mov	r1, r6
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b8      	blx	r7
 8004df8:	3001      	adds	r0, #1
 8004dfa:	f43f af54 	beq.w	8004ca6 <_printf_float+0xb6>
 8004dfe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004e02:	4543      	cmp	r3, r8
 8004e04:	db02      	blt.n	8004e0c <_printf_float+0x21c>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	07d8      	lsls	r0, r3, #31
 8004e0a:	d50f      	bpl.n	8004e2c <_printf_float+0x23c>
 8004e0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f af45 	beq.w	8004ca6 <_printf_float+0xb6>
 8004e1c:	f04f 0900 	mov.w	r9, #0
 8004e20:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e24:	f104 0a1a 	add.w	sl, r4, #26
 8004e28:	45c8      	cmp	r8, r9
 8004e2a:	dc09      	bgt.n	8004e40 <_printf_float+0x250>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	079b      	lsls	r3, r3, #30
 8004e30:	f100 8103 	bmi.w	800503a <_printf_float+0x44a>
 8004e34:	68e0      	ldr	r0, [r4, #12]
 8004e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e38:	4298      	cmp	r0, r3
 8004e3a:	bfb8      	it	lt
 8004e3c:	4618      	movlt	r0, r3
 8004e3e:	e734      	b.n	8004caa <_printf_float+0xba>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4652      	mov	r2, sl
 8004e44:	4631      	mov	r1, r6
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f af2b 	beq.w	8004ca6 <_printf_float+0xb6>
 8004e50:	f109 0901 	add.w	r9, r9, #1
 8004e54:	e7e8      	b.n	8004e28 <_printf_float+0x238>
 8004e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dc39      	bgt.n	8004ed0 <_printf_float+0x2e0>
 8004e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8004ecc <_printf_float+0x2dc>)
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4631      	mov	r1, r6
 8004e62:	4628      	mov	r0, r5
 8004e64:	47b8      	blx	r7
 8004e66:	3001      	adds	r0, #1
 8004e68:	f43f af1d 	beq.w	8004ca6 <_printf_float+0xb6>
 8004e6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e70:	ea59 0303 	orrs.w	r3, r9, r3
 8004e74:	d102      	bne.n	8004e7c <_printf_float+0x28c>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	07d9      	lsls	r1, r3, #31
 8004e7a:	d5d7      	bpl.n	8004e2c <_printf_float+0x23c>
 8004e7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e80:	4631      	mov	r1, r6
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b8      	blx	r7
 8004e86:	3001      	adds	r0, #1
 8004e88:	f43f af0d 	beq.w	8004ca6 <_printf_float+0xb6>
 8004e8c:	f04f 0a00 	mov.w	sl, #0
 8004e90:	f104 0b1a 	add.w	fp, r4, #26
 8004e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e96:	425b      	negs	r3, r3
 8004e98:	4553      	cmp	r3, sl
 8004e9a:	dc01      	bgt.n	8004ea0 <_printf_float+0x2b0>
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	e793      	b.n	8004dc8 <_printf_float+0x1d8>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	465a      	mov	r2, fp
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f43f aefb 	beq.w	8004ca6 <_printf_float+0xb6>
 8004eb0:	f10a 0a01 	add.w	sl, sl, #1
 8004eb4:	e7ee      	b.n	8004e94 <_printf_float+0x2a4>
 8004eb6:	bf00      	nop
 8004eb8:	7fefffff 	.word	0x7fefffff
 8004ebc:	0800a365 	.word	0x0800a365
 8004ec0:	0800a369 	.word	0x0800a369
 8004ec4:	0800a36d 	.word	0x0800a36d
 8004ec8:	0800a371 	.word	0x0800a371
 8004ecc:	0800a375 	.word	0x0800a375
 8004ed0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ed2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ed6:	4553      	cmp	r3, sl
 8004ed8:	bfa8      	it	ge
 8004eda:	4653      	movge	r3, sl
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	4699      	mov	r9, r3
 8004ee0:	dc36      	bgt.n	8004f50 <_printf_float+0x360>
 8004ee2:	f04f 0b00 	mov.w	fp, #0
 8004ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eea:	f104 021a 	add.w	r2, r4, #26
 8004eee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ef0:	9306      	str	r3, [sp, #24]
 8004ef2:	eba3 0309 	sub.w	r3, r3, r9
 8004ef6:	455b      	cmp	r3, fp
 8004ef8:	dc31      	bgt.n	8004f5e <_printf_float+0x36e>
 8004efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004efc:	459a      	cmp	sl, r3
 8004efe:	dc3a      	bgt.n	8004f76 <_printf_float+0x386>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	07da      	lsls	r2, r3, #31
 8004f04:	d437      	bmi.n	8004f76 <_printf_float+0x386>
 8004f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f08:	ebaa 0903 	sub.w	r9, sl, r3
 8004f0c:	9b06      	ldr	r3, [sp, #24]
 8004f0e:	ebaa 0303 	sub.w	r3, sl, r3
 8004f12:	4599      	cmp	r9, r3
 8004f14:	bfa8      	it	ge
 8004f16:	4699      	movge	r9, r3
 8004f18:	f1b9 0f00 	cmp.w	r9, #0
 8004f1c:	dc33      	bgt.n	8004f86 <_printf_float+0x396>
 8004f1e:	f04f 0800 	mov.w	r8, #0
 8004f22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f26:	f104 0b1a 	add.w	fp, r4, #26
 8004f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f2c:	ebaa 0303 	sub.w	r3, sl, r3
 8004f30:	eba3 0309 	sub.w	r3, r3, r9
 8004f34:	4543      	cmp	r3, r8
 8004f36:	f77f af79 	ble.w	8004e2c <_printf_float+0x23c>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	465a      	mov	r2, fp
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f aeae 	beq.w	8004ca6 <_printf_float+0xb6>
 8004f4a:	f108 0801 	add.w	r8, r8, #1
 8004f4e:	e7ec      	b.n	8004f2a <_printf_float+0x33a>
 8004f50:	4642      	mov	r2, r8
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d1c2      	bne.n	8004ee2 <_printf_float+0x2f2>
 8004f5c:	e6a3      	b.n	8004ca6 <_printf_float+0xb6>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	9206      	str	r2, [sp, #24]
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f43f ae9c 	beq.w	8004ca6 <_printf_float+0xb6>
 8004f6e:	9a06      	ldr	r2, [sp, #24]
 8004f70:	f10b 0b01 	add.w	fp, fp, #1
 8004f74:	e7bb      	b.n	8004eee <_printf_float+0x2fe>
 8004f76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	47b8      	blx	r7
 8004f80:	3001      	adds	r0, #1
 8004f82:	d1c0      	bne.n	8004f06 <_printf_float+0x316>
 8004f84:	e68f      	b.n	8004ca6 <_printf_float+0xb6>
 8004f86:	9a06      	ldr	r2, [sp, #24]
 8004f88:	464b      	mov	r3, r9
 8004f8a:	4442      	add	r2, r8
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	d1c3      	bne.n	8004f1e <_printf_float+0x32e>
 8004f96:	e686      	b.n	8004ca6 <_printf_float+0xb6>
 8004f98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f9c:	f1ba 0f01 	cmp.w	sl, #1
 8004fa0:	dc01      	bgt.n	8004fa6 <_printf_float+0x3b6>
 8004fa2:	07db      	lsls	r3, r3, #31
 8004fa4:	d536      	bpl.n	8005014 <_printf_float+0x424>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4642      	mov	r2, r8
 8004faa:	4631      	mov	r1, r6
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b8      	blx	r7
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	f43f ae78 	beq.w	8004ca6 <_printf_float+0xb6>
 8004fb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f43f ae70 	beq.w	8004ca6 <_printf_float+0xb6>
 8004fc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fd2:	f7fb fd99 	bl	8000b08 <__aeabi_dcmpeq>
 8004fd6:	b9c0      	cbnz	r0, 800500a <_printf_float+0x41a>
 8004fd8:	4653      	mov	r3, sl
 8004fda:	f108 0201 	add.w	r2, r8, #1
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	47b8      	blx	r7
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d10c      	bne.n	8005002 <_printf_float+0x412>
 8004fe8:	e65d      	b.n	8004ca6 <_printf_float+0xb6>
 8004fea:	2301      	movs	r3, #1
 8004fec:	465a      	mov	r2, fp
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f43f ae56 	beq.w	8004ca6 <_printf_float+0xb6>
 8004ffa:	f108 0801 	add.w	r8, r8, #1
 8004ffe:	45d0      	cmp	r8, sl
 8005000:	dbf3      	blt.n	8004fea <_printf_float+0x3fa>
 8005002:	464b      	mov	r3, r9
 8005004:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005008:	e6df      	b.n	8004dca <_printf_float+0x1da>
 800500a:	f04f 0800 	mov.w	r8, #0
 800500e:	f104 0b1a 	add.w	fp, r4, #26
 8005012:	e7f4      	b.n	8004ffe <_printf_float+0x40e>
 8005014:	2301      	movs	r3, #1
 8005016:	4642      	mov	r2, r8
 8005018:	e7e1      	b.n	8004fde <_printf_float+0x3ee>
 800501a:	2301      	movs	r3, #1
 800501c:	464a      	mov	r2, r9
 800501e:	4631      	mov	r1, r6
 8005020:	4628      	mov	r0, r5
 8005022:	47b8      	blx	r7
 8005024:	3001      	adds	r0, #1
 8005026:	f43f ae3e 	beq.w	8004ca6 <_printf_float+0xb6>
 800502a:	f108 0801 	add.w	r8, r8, #1
 800502e:	68e3      	ldr	r3, [r4, #12]
 8005030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005032:	1a5b      	subs	r3, r3, r1
 8005034:	4543      	cmp	r3, r8
 8005036:	dcf0      	bgt.n	800501a <_printf_float+0x42a>
 8005038:	e6fc      	b.n	8004e34 <_printf_float+0x244>
 800503a:	f04f 0800 	mov.w	r8, #0
 800503e:	f104 0919 	add.w	r9, r4, #25
 8005042:	e7f4      	b.n	800502e <_printf_float+0x43e>

08005044 <_printf_common>:
 8005044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005048:	4616      	mov	r6, r2
 800504a:	4698      	mov	r8, r3
 800504c:	688a      	ldr	r2, [r1, #8]
 800504e:	690b      	ldr	r3, [r1, #16]
 8005050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005054:	4293      	cmp	r3, r2
 8005056:	bfb8      	it	lt
 8005058:	4613      	movlt	r3, r2
 800505a:	6033      	str	r3, [r6, #0]
 800505c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005060:	4607      	mov	r7, r0
 8005062:	460c      	mov	r4, r1
 8005064:	b10a      	cbz	r2, 800506a <_printf_common+0x26>
 8005066:	3301      	adds	r3, #1
 8005068:	6033      	str	r3, [r6, #0]
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	0699      	lsls	r1, r3, #26
 800506e:	bf42      	ittt	mi
 8005070:	6833      	ldrmi	r3, [r6, #0]
 8005072:	3302      	addmi	r3, #2
 8005074:	6033      	strmi	r3, [r6, #0]
 8005076:	6825      	ldr	r5, [r4, #0]
 8005078:	f015 0506 	ands.w	r5, r5, #6
 800507c:	d106      	bne.n	800508c <_printf_common+0x48>
 800507e:	f104 0a19 	add.w	sl, r4, #25
 8005082:	68e3      	ldr	r3, [r4, #12]
 8005084:	6832      	ldr	r2, [r6, #0]
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	42ab      	cmp	r3, r5
 800508a:	dc26      	bgt.n	80050da <_printf_common+0x96>
 800508c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005090:	6822      	ldr	r2, [r4, #0]
 8005092:	3b00      	subs	r3, #0
 8005094:	bf18      	it	ne
 8005096:	2301      	movne	r3, #1
 8005098:	0692      	lsls	r2, r2, #26
 800509a:	d42b      	bmi.n	80050f4 <_printf_common+0xb0>
 800509c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050a0:	4641      	mov	r1, r8
 80050a2:	4638      	mov	r0, r7
 80050a4:	47c8      	blx	r9
 80050a6:	3001      	adds	r0, #1
 80050a8:	d01e      	beq.n	80050e8 <_printf_common+0xa4>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	6922      	ldr	r2, [r4, #16]
 80050ae:	f003 0306 	and.w	r3, r3, #6
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	bf02      	ittt	eq
 80050b6:	68e5      	ldreq	r5, [r4, #12]
 80050b8:	6833      	ldreq	r3, [r6, #0]
 80050ba:	1aed      	subeq	r5, r5, r3
 80050bc:	68a3      	ldr	r3, [r4, #8]
 80050be:	bf0c      	ite	eq
 80050c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c4:	2500      	movne	r5, #0
 80050c6:	4293      	cmp	r3, r2
 80050c8:	bfc4      	itt	gt
 80050ca:	1a9b      	subgt	r3, r3, r2
 80050cc:	18ed      	addgt	r5, r5, r3
 80050ce:	2600      	movs	r6, #0
 80050d0:	341a      	adds	r4, #26
 80050d2:	42b5      	cmp	r5, r6
 80050d4:	d11a      	bne.n	800510c <_printf_common+0xc8>
 80050d6:	2000      	movs	r0, #0
 80050d8:	e008      	b.n	80050ec <_printf_common+0xa8>
 80050da:	2301      	movs	r3, #1
 80050dc:	4652      	mov	r2, sl
 80050de:	4641      	mov	r1, r8
 80050e0:	4638      	mov	r0, r7
 80050e2:	47c8      	blx	r9
 80050e4:	3001      	adds	r0, #1
 80050e6:	d103      	bne.n	80050f0 <_printf_common+0xac>
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f0:	3501      	adds	r5, #1
 80050f2:	e7c6      	b.n	8005082 <_printf_common+0x3e>
 80050f4:	18e1      	adds	r1, r4, r3
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	2030      	movs	r0, #48	@ 0x30
 80050fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050fe:	4422      	add	r2, r4
 8005100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005108:	3302      	adds	r3, #2
 800510a:	e7c7      	b.n	800509c <_printf_common+0x58>
 800510c:	2301      	movs	r3, #1
 800510e:	4622      	mov	r2, r4
 8005110:	4641      	mov	r1, r8
 8005112:	4638      	mov	r0, r7
 8005114:	47c8      	blx	r9
 8005116:	3001      	adds	r0, #1
 8005118:	d0e6      	beq.n	80050e8 <_printf_common+0xa4>
 800511a:	3601      	adds	r6, #1
 800511c:	e7d9      	b.n	80050d2 <_printf_common+0x8e>
	...

08005120 <_printf_i>:
 8005120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005124:	7e0f      	ldrb	r7, [r1, #24]
 8005126:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005128:	2f78      	cmp	r7, #120	@ 0x78
 800512a:	4691      	mov	r9, r2
 800512c:	4680      	mov	r8, r0
 800512e:	460c      	mov	r4, r1
 8005130:	469a      	mov	sl, r3
 8005132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005136:	d807      	bhi.n	8005148 <_printf_i+0x28>
 8005138:	2f62      	cmp	r7, #98	@ 0x62
 800513a:	d80a      	bhi.n	8005152 <_printf_i+0x32>
 800513c:	2f00      	cmp	r7, #0
 800513e:	f000 80d2 	beq.w	80052e6 <_printf_i+0x1c6>
 8005142:	2f58      	cmp	r7, #88	@ 0x58
 8005144:	f000 80b9 	beq.w	80052ba <_printf_i+0x19a>
 8005148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800514c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005150:	e03a      	b.n	80051c8 <_printf_i+0xa8>
 8005152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005156:	2b15      	cmp	r3, #21
 8005158:	d8f6      	bhi.n	8005148 <_printf_i+0x28>
 800515a:	a101      	add	r1, pc, #4	@ (adr r1, 8005160 <_printf_i+0x40>)
 800515c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005160:	080051b9 	.word	0x080051b9
 8005164:	080051cd 	.word	0x080051cd
 8005168:	08005149 	.word	0x08005149
 800516c:	08005149 	.word	0x08005149
 8005170:	08005149 	.word	0x08005149
 8005174:	08005149 	.word	0x08005149
 8005178:	080051cd 	.word	0x080051cd
 800517c:	08005149 	.word	0x08005149
 8005180:	08005149 	.word	0x08005149
 8005184:	08005149 	.word	0x08005149
 8005188:	08005149 	.word	0x08005149
 800518c:	080052cd 	.word	0x080052cd
 8005190:	080051f7 	.word	0x080051f7
 8005194:	08005287 	.word	0x08005287
 8005198:	08005149 	.word	0x08005149
 800519c:	08005149 	.word	0x08005149
 80051a0:	080052ef 	.word	0x080052ef
 80051a4:	08005149 	.word	0x08005149
 80051a8:	080051f7 	.word	0x080051f7
 80051ac:	08005149 	.word	0x08005149
 80051b0:	08005149 	.word	0x08005149
 80051b4:	0800528f 	.word	0x0800528f
 80051b8:	6833      	ldr	r3, [r6, #0]
 80051ba:	1d1a      	adds	r2, r3, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6032      	str	r2, [r6, #0]
 80051c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051c8:	2301      	movs	r3, #1
 80051ca:	e09d      	b.n	8005308 <_printf_i+0x1e8>
 80051cc:	6833      	ldr	r3, [r6, #0]
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	1d19      	adds	r1, r3, #4
 80051d2:	6031      	str	r1, [r6, #0]
 80051d4:	0606      	lsls	r6, r0, #24
 80051d6:	d501      	bpl.n	80051dc <_printf_i+0xbc>
 80051d8:	681d      	ldr	r5, [r3, #0]
 80051da:	e003      	b.n	80051e4 <_printf_i+0xc4>
 80051dc:	0645      	lsls	r5, r0, #25
 80051de:	d5fb      	bpl.n	80051d8 <_printf_i+0xb8>
 80051e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051e4:	2d00      	cmp	r5, #0
 80051e6:	da03      	bge.n	80051f0 <_printf_i+0xd0>
 80051e8:	232d      	movs	r3, #45	@ 0x2d
 80051ea:	426d      	negs	r5, r5
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051f0:	4859      	ldr	r0, [pc, #356]	@ (8005358 <_printf_i+0x238>)
 80051f2:	230a      	movs	r3, #10
 80051f4:	e011      	b.n	800521a <_printf_i+0xfa>
 80051f6:	6821      	ldr	r1, [r4, #0]
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	0608      	lsls	r0, r1, #24
 80051fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005200:	d402      	bmi.n	8005208 <_printf_i+0xe8>
 8005202:	0649      	lsls	r1, r1, #25
 8005204:	bf48      	it	mi
 8005206:	b2ad      	uxthmi	r5, r5
 8005208:	2f6f      	cmp	r7, #111	@ 0x6f
 800520a:	4853      	ldr	r0, [pc, #332]	@ (8005358 <_printf_i+0x238>)
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	bf14      	ite	ne
 8005210:	230a      	movne	r3, #10
 8005212:	2308      	moveq	r3, #8
 8005214:	2100      	movs	r1, #0
 8005216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800521a:	6866      	ldr	r6, [r4, #4]
 800521c:	60a6      	str	r6, [r4, #8]
 800521e:	2e00      	cmp	r6, #0
 8005220:	bfa2      	ittt	ge
 8005222:	6821      	ldrge	r1, [r4, #0]
 8005224:	f021 0104 	bicge.w	r1, r1, #4
 8005228:	6021      	strge	r1, [r4, #0]
 800522a:	b90d      	cbnz	r5, 8005230 <_printf_i+0x110>
 800522c:	2e00      	cmp	r6, #0
 800522e:	d04b      	beq.n	80052c8 <_printf_i+0x1a8>
 8005230:	4616      	mov	r6, r2
 8005232:	fbb5 f1f3 	udiv	r1, r5, r3
 8005236:	fb03 5711 	mls	r7, r3, r1, r5
 800523a:	5dc7      	ldrb	r7, [r0, r7]
 800523c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005240:	462f      	mov	r7, r5
 8005242:	42bb      	cmp	r3, r7
 8005244:	460d      	mov	r5, r1
 8005246:	d9f4      	bls.n	8005232 <_printf_i+0x112>
 8005248:	2b08      	cmp	r3, #8
 800524a:	d10b      	bne.n	8005264 <_printf_i+0x144>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	07df      	lsls	r7, r3, #31
 8005250:	d508      	bpl.n	8005264 <_printf_i+0x144>
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	6861      	ldr	r1, [r4, #4]
 8005256:	4299      	cmp	r1, r3
 8005258:	bfde      	ittt	le
 800525a:	2330      	movle	r3, #48	@ 0x30
 800525c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005260:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005264:	1b92      	subs	r2, r2, r6
 8005266:	6122      	str	r2, [r4, #16]
 8005268:	f8cd a000 	str.w	sl, [sp]
 800526c:	464b      	mov	r3, r9
 800526e:	aa03      	add	r2, sp, #12
 8005270:	4621      	mov	r1, r4
 8005272:	4640      	mov	r0, r8
 8005274:	f7ff fee6 	bl	8005044 <_printf_common>
 8005278:	3001      	adds	r0, #1
 800527a:	d14a      	bne.n	8005312 <_printf_i+0x1f2>
 800527c:	f04f 30ff 	mov.w	r0, #4294967295
 8005280:	b004      	add	sp, #16
 8005282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	f043 0320 	orr.w	r3, r3, #32
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	4833      	ldr	r0, [pc, #204]	@ (800535c <_printf_i+0x23c>)
 8005290:	2778      	movs	r7, #120	@ 0x78
 8005292:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	6831      	ldr	r1, [r6, #0]
 800529a:	061f      	lsls	r7, r3, #24
 800529c:	f851 5b04 	ldr.w	r5, [r1], #4
 80052a0:	d402      	bmi.n	80052a8 <_printf_i+0x188>
 80052a2:	065f      	lsls	r7, r3, #25
 80052a4:	bf48      	it	mi
 80052a6:	b2ad      	uxthmi	r5, r5
 80052a8:	6031      	str	r1, [r6, #0]
 80052aa:	07d9      	lsls	r1, r3, #31
 80052ac:	bf44      	itt	mi
 80052ae:	f043 0320 	orrmi.w	r3, r3, #32
 80052b2:	6023      	strmi	r3, [r4, #0]
 80052b4:	b11d      	cbz	r5, 80052be <_printf_i+0x19e>
 80052b6:	2310      	movs	r3, #16
 80052b8:	e7ac      	b.n	8005214 <_printf_i+0xf4>
 80052ba:	4827      	ldr	r0, [pc, #156]	@ (8005358 <_printf_i+0x238>)
 80052bc:	e7e9      	b.n	8005292 <_printf_i+0x172>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f023 0320 	bic.w	r3, r3, #32
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	e7f6      	b.n	80052b6 <_printf_i+0x196>
 80052c8:	4616      	mov	r6, r2
 80052ca:	e7bd      	b.n	8005248 <_printf_i+0x128>
 80052cc:	6833      	ldr	r3, [r6, #0]
 80052ce:	6825      	ldr	r5, [r4, #0]
 80052d0:	6961      	ldr	r1, [r4, #20]
 80052d2:	1d18      	adds	r0, r3, #4
 80052d4:	6030      	str	r0, [r6, #0]
 80052d6:	062e      	lsls	r6, r5, #24
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	d501      	bpl.n	80052e0 <_printf_i+0x1c0>
 80052dc:	6019      	str	r1, [r3, #0]
 80052de:	e002      	b.n	80052e6 <_printf_i+0x1c6>
 80052e0:	0668      	lsls	r0, r5, #25
 80052e2:	d5fb      	bpl.n	80052dc <_printf_i+0x1bc>
 80052e4:	8019      	strh	r1, [r3, #0]
 80052e6:	2300      	movs	r3, #0
 80052e8:	6123      	str	r3, [r4, #16]
 80052ea:	4616      	mov	r6, r2
 80052ec:	e7bc      	b.n	8005268 <_printf_i+0x148>
 80052ee:	6833      	ldr	r3, [r6, #0]
 80052f0:	1d1a      	adds	r2, r3, #4
 80052f2:	6032      	str	r2, [r6, #0]
 80052f4:	681e      	ldr	r6, [r3, #0]
 80052f6:	6862      	ldr	r2, [r4, #4]
 80052f8:	2100      	movs	r1, #0
 80052fa:	4630      	mov	r0, r6
 80052fc:	f7fa ff88 	bl	8000210 <memchr>
 8005300:	b108      	cbz	r0, 8005306 <_printf_i+0x1e6>
 8005302:	1b80      	subs	r0, r0, r6
 8005304:	6060      	str	r0, [r4, #4]
 8005306:	6863      	ldr	r3, [r4, #4]
 8005308:	6123      	str	r3, [r4, #16]
 800530a:	2300      	movs	r3, #0
 800530c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005310:	e7aa      	b.n	8005268 <_printf_i+0x148>
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	4632      	mov	r2, r6
 8005316:	4649      	mov	r1, r9
 8005318:	4640      	mov	r0, r8
 800531a:	47d0      	blx	sl
 800531c:	3001      	adds	r0, #1
 800531e:	d0ad      	beq.n	800527c <_printf_i+0x15c>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	079b      	lsls	r3, r3, #30
 8005324:	d413      	bmi.n	800534e <_printf_i+0x22e>
 8005326:	68e0      	ldr	r0, [r4, #12]
 8005328:	9b03      	ldr	r3, [sp, #12]
 800532a:	4298      	cmp	r0, r3
 800532c:	bfb8      	it	lt
 800532e:	4618      	movlt	r0, r3
 8005330:	e7a6      	b.n	8005280 <_printf_i+0x160>
 8005332:	2301      	movs	r3, #1
 8005334:	4632      	mov	r2, r6
 8005336:	4649      	mov	r1, r9
 8005338:	4640      	mov	r0, r8
 800533a:	47d0      	blx	sl
 800533c:	3001      	adds	r0, #1
 800533e:	d09d      	beq.n	800527c <_printf_i+0x15c>
 8005340:	3501      	adds	r5, #1
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	9903      	ldr	r1, [sp, #12]
 8005346:	1a5b      	subs	r3, r3, r1
 8005348:	42ab      	cmp	r3, r5
 800534a:	dcf2      	bgt.n	8005332 <_printf_i+0x212>
 800534c:	e7eb      	b.n	8005326 <_printf_i+0x206>
 800534e:	2500      	movs	r5, #0
 8005350:	f104 0619 	add.w	r6, r4, #25
 8005354:	e7f5      	b.n	8005342 <_printf_i+0x222>
 8005356:	bf00      	nop
 8005358:	0800a377 	.word	0x0800a377
 800535c:	0800a388 	.word	0x0800a388

08005360 <_scanf_float>:
 8005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	b087      	sub	sp, #28
 8005366:	4617      	mov	r7, r2
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	688b      	ldr	r3, [r1, #8]
 800536c:	1e5a      	subs	r2, r3, #1
 800536e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005372:	bf81      	itttt	hi
 8005374:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005378:	eb03 0b05 	addhi.w	fp, r3, r5
 800537c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005380:	608b      	strhi	r3, [r1, #8]
 8005382:	680b      	ldr	r3, [r1, #0]
 8005384:	460a      	mov	r2, r1
 8005386:	f04f 0500 	mov.w	r5, #0
 800538a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800538e:	f842 3b1c 	str.w	r3, [r2], #28
 8005392:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005396:	4680      	mov	r8, r0
 8005398:	460c      	mov	r4, r1
 800539a:	bf98      	it	ls
 800539c:	f04f 0b00 	movls.w	fp, #0
 80053a0:	9201      	str	r2, [sp, #4]
 80053a2:	4616      	mov	r6, r2
 80053a4:	46aa      	mov	sl, r5
 80053a6:	46a9      	mov	r9, r5
 80053a8:	9502      	str	r5, [sp, #8]
 80053aa:	68a2      	ldr	r2, [r4, #8]
 80053ac:	b152      	cbz	r2, 80053c4 <_scanf_float+0x64>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80053b4:	d864      	bhi.n	8005480 <_scanf_float+0x120>
 80053b6:	2b40      	cmp	r3, #64	@ 0x40
 80053b8:	d83c      	bhi.n	8005434 <_scanf_float+0xd4>
 80053ba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80053be:	b2c8      	uxtb	r0, r1
 80053c0:	280e      	cmp	r0, #14
 80053c2:	d93a      	bls.n	800543a <_scanf_float+0xda>
 80053c4:	f1b9 0f00 	cmp.w	r9, #0
 80053c8:	d003      	beq.n	80053d2 <_scanf_float+0x72>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053d6:	f1ba 0f01 	cmp.w	sl, #1
 80053da:	f200 8117 	bhi.w	800560c <_scanf_float+0x2ac>
 80053de:	9b01      	ldr	r3, [sp, #4]
 80053e0:	429e      	cmp	r6, r3
 80053e2:	f200 8108 	bhi.w	80055f6 <_scanf_float+0x296>
 80053e6:	2001      	movs	r0, #1
 80053e8:	b007      	add	sp, #28
 80053ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80053f2:	2a0d      	cmp	r2, #13
 80053f4:	d8e6      	bhi.n	80053c4 <_scanf_float+0x64>
 80053f6:	a101      	add	r1, pc, #4	@ (adr r1, 80053fc <_scanf_float+0x9c>)
 80053f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80053fc:	08005543 	.word	0x08005543
 8005400:	080053c5 	.word	0x080053c5
 8005404:	080053c5 	.word	0x080053c5
 8005408:	080053c5 	.word	0x080053c5
 800540c:	080055a3 	.word	0x080055a3
 8005410:	0800557b 	.word	0x0800557b
 8005414:	080053c5 	.word	0x080053c5
 8005418:	080053c5 	.word	0x080053c5
 800541c:	08005551 	.word	0x08005551
 8005420:	080053c5 	.word	0x080053c5
 8005424:	080053c5 	.word	0x080053c5
 8005428:	080053c5 	.word	0x080053c5
 800542c:	080053c5 	.word	0x080053c5
 8005430:	08005509 	.word	0x08005509
 8005434:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005438:	e7db      	b.n	80053f2 <_scanf_float+0x92>
 800543a:	290e      	cmp	r1, #14
 800543c:	d8c2      	bhi.n	80053c4 <_scanf_float+0x64>
 800543e:	a001      	add	r0, pc, #4	@ (adr r0, 8005444 <_scanf_float+0xe4>)
 8005440:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005444:	080054f9 	.word	0x080054f9
 8005448:	080053c5 	.word	0x080053c5
 800544c:	080054f9 	.word	0x080054f9
 8005450:	0800558f 	.word	0x0800558f
 8005454:	080053c5 	.word	0x080053c5
 8005458:	080054a1 	.word	0x080054a1
 800545c:	080054df 	.word	0x080054df
 8005460:	080054df 	.word	0x080054df
 8005464:	080054df 	.word	0x080054df
 8005468:	080054df 	.word	0x080054df
 800546c:	080054df 	.word	0x080054df
 8005470:	080054df 	.word	0x080054df
 8005474:	080054df 	.word	0x080054df
 8005478:	080054df 	.word	0x080054df
 800547c:	080054df 	.word	0x080054df
 8005480:	2b6e      	cmp	r3, #110	@ 0x6e
 8005482:	d809      	bhi.n	8005498 <_scanf_float+0x138>
 8005484:	2b60      	cmp	r3, #96	@ 0x60
 8005486:	d8b2      	bhi.n	80053ee <_scanf_float+0x8e>
 8005488:	2b54      	cmp	r3, #84	@ 0x54
 800548a:	d07b      	beq.n	8005584 <_scanf_float+0x224>
 800548c:	2b59      	cmp	r3, #89	@ 0x59
 800548e:	d199      	bne.n	80053c4 <_scanf_float+0x64>
 8005490:	2d07      	cmp	r5, #7
 8005492:	d197      	bne.n	80053c4 <_scanf_float+0x64>
 8005494:	2508      	movs	r5, #8
 8005496:	e02c      	b.n	80054f2 <_scanf_float+0x192>
 8005498:	2b74      	cmp	r3, #116	@ 0x74
 800549a:	d073      	beq.n	8005584 <_scanf_float+0x224>
 800549c:	2b79      	cmp	r3, #121	@ 0x79
 800549e:	e7f6      	b.n	800548e <_scanf_float+0x12e>
 80054a0:	6821      	ldr	r1, [r4, #0]
 80054a2:	05c8      	lsls	r0, r1, #23
 80054a4:	d51b      	bpl.n	80054de <_scanf_float+0x17e>
 80054a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80054aa:	6021      	str	r1, [r4, #0]
 80054ac:	f109 0901 	add.w	r9, r9, #1
 80054b0:	f1bb 0f00 	cmp.w	fp, #0
 80054b4:	d003      	beq.n	80054be <_scanf_float+0x15e>
 80054b6:	3201      	adds	r2, #1
 80054b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054bc:	60a2      	str	r2, [r4, #8]
 80054be:	68a3      	ldr	r3, [r4, #8]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	60a3      	str	r3, [r4, #8]
 80054c4:	6923      	ldr	r3, [r4, #16]
 80054c6:	3301      	adds	r3, #1
 80054c8:	6123      	str	r3, [r4, #16]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	607b      	str	r3, [r7, #4]
 80054d2:	f340 8087 	ble.w	80055e4 <_scanf_float+0x284>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	3301      	adds	r3, #1
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	e765      	b.n	80053aa <_scanf_float+0x4a>
 80054de:	eb1a 0105 	adds.w	r1, sl, r5
 80054e2:	f47f af6f 	bne.w	80053c4 <_scanf_float+0x64>
 80054e6:	6822      	ldr	r2, [r4, #0]
 80054e8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80054ec:	6022      	str	r2, [r4, #0]
 80054ee:	460d      	mov	r5, r1
 80054f0:	468a      	mov	sl, r1
 80054f2:	f806 3b01 	strb.w	r3, [r6], #1
 80054f6:	e7e2      	b.n	80054be <_scanf_float+0x15e>
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	0610      	lsls	r0, r2, #24
 80054fc:	f57f af62 	bpl.w	80053c4 <_scanf_float+0x64>
 8005500:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005504:	6022      	str	r2, [r4, #0]
 8005506:	e7f4      	b.n	80054f2 <_scanf_float+0x192>
 8005508:	f1ba 0f00 	cmp.w	sl, #0
 800550c:	d10e      	bne.n	800552c <_scanf_float+0x1cc>
 800550e:	f1b9 0f00 	cmp.w	r9, #0
 8005512:	d10e      	bne.n	8005532 <_scanf_float+0x1d2>
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800551a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800551e:	d108      	bne.n	8005532 <_scanf_float+0x1d2>
 8005520:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005524:	6022      	str	r2, [r4, #0]
 8005526:	f04f 0a01 	mov.w	sl, #1
 800552a:	e7e2      	b.n	80054f2 <_scanf_float+0x192>
 800552c:	f1ba 0f02 	cmp.w	sl, #2
 8005530:	d055      	beq.n	80055de <_scanf_float+0x27e>
 8005532:	2d01      	cmp	r5, #1
 8005534:	d002      	beq.n	800553c <_scanf_float+0x1dc>
 8005536:	2d04      	cmp	r5, #4
 8005538:	f47f af44 	bne.w	80053c4 <_scanf_float+0x64>
 800553c:	3501      	adds	r5, #1
 800553e:	b2ed      	uxtb	r5, r5
 8005540:	e7d7      	b.n	80054f2 <_scanf_float+0x192>
 8005542:	f1ba 0f01 	cmp.w	sl, #1
 8005546:	f47f af3d 	bne.w	80053c4 <_scanf_float+0x64>
 800554a:	f04f 0a02 	mov.w	sl, #2
 800554e:	e7d0      	b.n	80054f2 <_scanf_float+0x192>
 8005550:	b97d      	cbnz	r5, 8005572 <_scanf_float+0x212>
 8005552:	f1b9 0f00 	cmp.w	r9, #0
 8005556:	f47f af38 	bne.w	80053ca <_scanf_float+0x6a>
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005560:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005564:	f040 8108 	bne.w	8005778 <_scanf_float+0x418>
 8005568:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800556c:	6022      	str	r2, [r4, #0]
 800556e:	2501      	movs	r5, #1
 8005570:	e7bf      	b.n	80054f2 <_scanf_float+0x192>
 8005572:	2d03      	cmp	r5, #3
 8005574:	d0e2      	beq.n	800553c <_scanf_float+0x1dc>
 8005576:	2d05      	cmp	r5, #5
 8005578:	e7de      	b.n	8005538 <_scanf_float+0x1d8>
 800557a:	2d02      	cmp	r5, #2
 800557c:	f47f af22 	bne.w	80053c4 <_scanf_float+0x64>
 8005580:	2503      	movs	r5, #3
 8005582:	e7b6      	b.n	80054f2 <_scanf_float+0x192>
 8005584:	2d06      	cmp	r5, #6
 8005586:	f47f af1d 	bne.w	80053c4 <_scanf_float+0x64>
 800558a:	2507      	movs	r5, #7
 800558c:	e7b1      	b.n	80054f2 <_scanf_float+0x192>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	0591      	lsls	r1, r2, #22
 8005592:	f57f af17 	bpl.w	80053c4 <_scanf_float+0x64>
 8005596:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800559a:	6022      	str	r2, [r4, #0]
 800559c:	f8cd 9008 	str.w	r9, [sp, #8]
 80055a0:	e7a7      	b.n	80054f2 <_scanf_float+0x192>
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80055a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80055ac:	d006      	beq.n	80055bc <_scanf_float+0x25c>
 80055ae:	0550      	lsls	r0, r2, #21
 80055b0:	f57f af08 	bpl.w	80053c4 <_scanf_float+0x64>
 80055b4:	f1b9 0f00 	cmp.w	r9, #0
 80055b8:	f000 80de 	beq.w	8005778 <_scanf_float+0x418>
 80055bc:	0591      	lsls	r1, r2, #22
 80055be:	bf58      	it	pl
 80055c0:	9902      	ldrpl	r1, [sp, #8]
 80055c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80055c6:	bf58      	it	pl
 80055c8:	eba9 0101 	subpl.w	r1, r9, r1
 80055cc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80055d0:	bf58      	it	pl
 80055d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80055d6:	6022      	str	r2, [r4, #0]
 80055d8:	f04f 0900 	mov.w	r9, #0
 80055dc:	e789      	b.n	80054f2 <_scanf_float+0x192>
 80055de:	f04f 0a03 	mov.w	sl, #3
 80055e2:	e786      	b.n	80054f2 <_scanf_float+0x192>
 80055e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80055e8:	4639      	mov	r1, r7
 80055ea:	4640      	mov	r0, r8
 80055ec:	4798      	blx	r3
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f43f aedb 	beq.w	80053aa <_scanf_float+0x4a>
 80055f4:	e6e6      	b.n	80053c4 <_scanf_float+0x64>
 80055f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055fe:	463a      	mov	r2, r7
 8005600:	4640      	mov	r0, r8
 8005602:	4798      	blx	r3
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	3b01      	subs	r3, #1
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	e6e8      	b.n	80053de <_scanf_float+0x7e>
 800560c:	1e6b      	subs	r3, r5, #1
 800560e:	2b06      	cmp	r3, #6
 8005610:	d824      	bhi.n	800565c <_scanf_float+0x2fc>
 8005612:	2d02      	cmp	r5, #2
 8005614:	d836      	bhi.n	8005684 <_scanf_float+0x324>
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	429e      	cmp	r6, r3
 800561a:	f67f aee4 	bls.w	80053e6 <_scanf_float+0x86>
 800561e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005622:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005626:	463a      	mov	r2, r7
 8005628:	4640      	mov	r0, r8
 800562a:	4798      	blx	r3
 800562c:	6923      	ldr	r3, [r4, #16]
 800562e:	3b01      	subs	r3, #1
 8005630:	6123      	str	r3, [r4, #16]
 8005632:	e7f0      	b.n	8005616 <_scanf_float+0x2b6>
 8005634:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005638:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800563c:	463a      	mov	r2, r7
 800563e:	4640      	mov	r0, r8
 8005640:	4798      	blx	r3
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	3b01      	subs	r3, #1
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	f10a 3aff 	add.w	sl, sl, #4294967295
 800564c:	fa5f fa8a 	uxtb.w	sl, sl
 8005650:	f1ba 0f02 	cmp.w	sl, #2
 8005654:	d1ee      	bne.n	8005634 <_scanf_float+0x2d4>
 8005656:	3d03      	subs	r5, #3
 8005658:	b2ed      	uxtb	r5, r5
 800565a:	1b76      	subs	r6, r6, r5
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	05da      	lsls	r2, r3, #23
 8005660:	d530      	bpl.n	80056c4 <_scanf_float+0x364>
 8005662:	055b      	lsls	r3, r3, #21
 8005664:	d511      	bpl.n	800568a <_scanf_float+0x32a>
 8005666:	9b01      	ldr	r3, [sp, #4]
 8005668:	429e      	cmp	r6, r3
 800566a:	f67f aebc 	bls.w	80053e6 <_scanf_float+0x86>
 800566e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005676:	463a      	mov	r2, r7
 8005678:	4640      	mov	r0, r8
 800567a:	4798      	blx	r3
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	3b01      	subs	r3, #1
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	e7f0      	b.n	8005666 <_scanf_float+0x306>
 8005684:	46aa      	mov	sl, r5
 8005686:	46b3      	mov	fp, r6
 8005688:	e7de      	b.n	8005648 <_scanf_float+0x2e8>
 800568a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	2965      	cmp	r1, #101	@ 0x65
 8005692:	f103 33ff 	add.w	r3, r3, #4294967295
 8005696:	f106 35ff 	add.w	r5, r6, #4294967295
 800569a:	6123      	str	r3, [r4, #16]
 800569c:	d00c      	beq.n	80056b8 <_scanf_float+0x358>
 800569e:	2945      	cmp	r1, #69	@ 0x45
 80056a0:	d00a      	beq.n	80056b8 <_scanf_float+0x358>
 80056a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056a6:	463a      	mov	r2, r7
 80056a8:	4640      	mov	r0, r8
 80056aa:	4798      	blx	r3
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	1eb5      	subs	r5, r6, #2
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056bc:	463a      	mov	r2, r7
 80056be:	4640      	mov	r0, r8
 80056c0:	4798      	blx	r3
 80056c2:	462e      	mov	r6, r5
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	f012 0210 	ands.w	r2, r2, #16
 80056ca:	d001      	beq.n	80056d0 <_scanf_float+0x370>
 80056cc:	2000      	movs	r0, #0
 80056ce:	e68b      	b.n	80053e8 <_scanf_float+0x88>
 80056d0:	7032      	strb	r2, [r6, #0]
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056dc:	d11c      	bne.n	8005718 <_scanf_float+0x3b8>
 80056de:	9b02      	ldr	r3, [sp, #8]
 80056e0:	454b      	cmp	r3, r9
 80056e2:	eba3 0209 	sub.w	r2, r3, r9
 80056e6:	d123      	bne.n	8005730 <_scanf_float+0x3d0>
 80056e8:	9901      	ldr	r1, [sp, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	4640      	mov	r0, r8
 80056ee:	f003 fa7b 	bl	8008be8 <_strtod_r>
 80056f2:	9b03      	ldr	r3, [sp, #12]
 80056f4:	6821      	ldr	r1, [r4, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f011 0f02 	tst.w	r1, #2
 80056fc:	ec57 6b10 	vmov	r6, r7, d0
 8005700:	f103 0204 	add.w	r2, r3, #4
 8005704:	d01f      	beq.n	8005746 <_scanf_float+0x3e6>
 8005706:	9903      	ldr	r1, [sp, #12]
 8005708:	600a      	str	r2, [r1, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	e9c3 6700 	strd	r6, r7, [r3]
 8005710:	68e3      	ldr	r3, [r4, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60e3      	str	r3, [r4, #12]
 8005716:	e7d9      	b.n	80056cc <_scanf_float+0x36c>
 8005718:	9b04      	ldr	r3, [sp, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0e4      	beq.n	80056e8 <_scanf_float+0x388>
 800571e:	9905      	ldr	r1, [sp, #20]
 8005720:	230a      	movs	r3, #10
 8005722:	3101      	adds	r1, #1
 8005724:	4640      	mov	r0, r8
 8005726:	f7ff f9b7 	bl	8004a98 <_strtol_r>
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	9e05      	ldr	r6, [sp, #20]
 800572e:	1ac2      	subs	r2, r0, r3
 8005730:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005734:	429e      	cmp	r6, r3
 8005736:	bf28      	it	cs
 8005738:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800573c:	4910      	ldr	r1, [pc, #64]	@ (8005780 <_scanf_float+0x420>)
 800573e:	4630      	mov	r0, r6
 8005740:	f000 fd7e 	bl	8006240 <siprintf>
 8005744:	e7d0      	b.n	80056e8 <_scanf_float+0x388>
 8005746:	f011 0f04 	tst.w	r1, #4
 800574a:	9903      	ldr	r1, [sp, #12]
 800574c:	600a      	str	r2, [r1, #0]
 800574e:	d1dc      	bne.n	800570a <_scanf_float+0x3aa>
 8005750:	681d      	ldr	r5, [r3, #0]
 8005752:	4632      	mov	r2, r6
 8005754:	463b      	mov	r3, r7
 8005756:	4630      	mov	r0, r6
 8005758:	4639      	mov	r1, r7
 800575a:	f7fb fa07 	bl	8000b6c <__aeabi_dcmpun>
 800575e:	b128      	cbz	r0, 800576c <_scanf_float+0x40c>
 8005760:	4808      	ldr	r0, [pc, #32]	@ (8005784 <_scanf_float+0x424>)
 8005762:	f001 f81b 	bl	800679c <nanf>
 8005766:	ed85 0a00 	vstr	s0, [r5]
 800576a:	e7d1      	b.n	8005710 <_scanf_float+0x3b0>
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	f7fb fa5a 	bl	8000c28 <__aeabi_d2f>
 8005774:	6028      	str	r0, [r5, #0]
 8005776:	e7cb      	b.n	8005710 <_scanf_float+0x3b0>
 8005778:	f04f 0900 	mov.w	r9, #0
 800577c:	e629      	b.n	80053d2 <_scanf_float+0x72>
 800577e:	bf00      	nop
 8005780:	0800a399 	.word	0x0800a399
 8005784:	0800a44a 	.word	0x0800a44a

08005788 <_fclose_r>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	4605      	mov	r5, r0
 800578c:	460c      	mov	r4, r1
 800578e:	b1b1      	cbz	r1, 80057be <_fclose_r+0x36>
 8005790:	b118      	cbz	r0, 800579a <_fclose_r+0x12>
 8005792:	6a03      	ldr	r3, [r0, #32]
 8005794:	b90b      	cbnz	r3, 800579a <_fclose_r+0x12>
 8005796:	f000 fa73 	bl	8005c80 <__sinit>
 800579a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800579c:	07de      	lsls	r6, r3, #31
 800579e:	d405      	bmi.n	80057ac <_fclose_r+0x24>
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	0598      	lsls	r0, r3, #22
 80057a4:	d402      	bmi.n	80057ac <_fclose_r+0x24>
 80057a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057a8:	f000 ffe8 	bl	800677c <__retarget_lock_acquire_recursive>
 80057ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b0:	b943      	cbnz	r3, 80057c4 <_fclose_r+0x3c>
 80057b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057b4:	07d9      	lsls	r1, r3, #31
 80057b6:	d402      	bmi.n	80057be <_fclose_r+0x36>
 80057b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057ba:	f000 ffe0 	bl	800677e <__retarget_lock_release_recursive>
 80057be:	2600      	movs	r6, #0
 80057c0:	4630      	mov	r0, r6
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 f860 	bl	800588c <__sflush_r>
 80057cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80057ce:	4606      	mov	r6, r0
 80057d0:	b133      	cbz	r3, 80057e0 <_fclose_r+0x58>
 80057d2:	6a21      	ldr	r1, [r4, #32]
 80057d4:	4628      	mov	r0, r5
 80057d6:	4798      	blx	r3
 80057d8:	2800      	cmp	r0, #0
 80057da:	bfb8      	it	lt
 80057dc:	f04f 36ff 	movlt.w	r6, #4294967295
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	061a      	lsls	r2, r3, #24
 80057e4:	d503      	bpl.n	80057ee <_fclose_r+0x66>
 80057e6:	6921      	ldr	r1, [r4, #16]
 80057e8:	4628      	mov	r0, r5
 80057ea:	f001 fe49 	bl	8007480 <_free_r>
 80057ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057f0:	b141      	cbz	r1, 8005804 <_fclose_r+0x7c>
 80057f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057f6:	4299      	cmp	r1, r3
 80057f8:	d002      	beq.n	8005800 <_fclose_r+0x78>
 80057fa:	4628      	mov	r0, r5
 80057fc:	f001 fe40 	bl	8007480 <_free_r>
 8005800:	2300      	movs	r3, #0
 8005802:	6363      	str	r3, [r4, #52]	@ 0x34
 8005804:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005806:	b121      	cbz	r1, 8005812 <_fclose_r+0x8a>
 8005808:	4628      	mov	r0, r5
 800580a:	f001 fe39 	bl	8007480 <_free_r>
 800580e:	2300      	movs	r3, #0
 8005810:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005812:	f000 f9d7 	bl	8005bc4 <__sfp_lock_acquire>
 8005816:	2300      	movs	r3, #0
 8005818:	81a3      	strh	r3, [r4, #12]
 800581a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800581c:	07db      	lsls	r3, r3, #31
 800581e:	d402      	bmi.n	8005826 <_fclose_r+0x9e>
 8005820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005822:	f000 ffac 	bl	800677e <__retarget_lock_release_recursive>
 8005826:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005828:	f000 ffa7 	bl	800677a <__retarget_lock_close_recursive>
 800582c:	f000 f9d0 	bl	8005bd0 <__sfp_lock_release>
 8005830:	e7c6      	b.n	80057c0 <_fclose_r+0x38>
	...

08005834 <fclose>:
 8005834:	4b02      	ldr	r3, [pc, #8]	@ (8005840 <fclose+0xc>)
 8005836:	4601      	mov	r1, r0
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	f7ff bfa5 	b.w	8005788 <_fclose_r>
 800583e:	bf00      	nop
 8005840:	20000018 	.word	0x20000018

08005844 <feof>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4b10      	ldr	r3, [pc, #64]	@ (8005888 <feof+0x44>)
 8005848:	4604      	mov	r4, r0
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	b118      	cbz	r0, 8005856 <feof+0x12>
 800584e:	6a03      	ldr	r3, [r0, #32]
 8005850:	b90b      	cbnz	r3, 8005856 <feof+0x12>
 8005852:	f000 fa15 	bl	8005c80 <__sinit>
 8005856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005858:	07d8      	lsls	r0, r3, #31
 800585a:	d405      	bmi.n	8005868 <feof+0x24>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	0599      	lsls	r1, r3, #22
 8005860:	d402      	bmi.n	8005868 <feof+0x24>
 8005862:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005864:	f000 ff8a 	bl	800677c <__retarget_lock_acquire_recursive>
 8005868:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800586a:	89a5      	ldrh	r5, [r4, #12]
 800586c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005870:	07d2      	lsls	r2, r2, #31
 8005872:	f3c5 1540 	ubfx	r5, r5, #5, #1
 8005876:	d404      	bmi.n	8005882 <feof+0x3e>
 8005878:	059b      	lsls	r3, r3, #22
 800587a:	d402      	bmi.n	8005882 <feof+0x3e>
 800587c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800587e:	f000 ff7e 	bl	800677e <__retarget_lock_release_recursive>
 8005882:	4628      	mov	r0, r5
 8005884:	bd38      	pop	{r3, r4, r5, pc}
 8005886:	bf00      	nop
 8005888:	20000018 	.word	0x20000018

0800588c <__sflush_r>:
 800588c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005894:	0716      	lsls	r6, r2, #28
 8005896:	4605      	mov	r5, r0
 8005898:	460c      	mov	r4, r1
 800589a:	d454      	bmi.n	8005946 <__sflush_r+0xba>
 800589c:	684b      	ldr	r3, [r1, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	dc02      	bgt.n	80058a8 <__sflush_r+0x1c>
 80058a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dd48      	ble.n	800593a <__sflush_r+0xae>
 80058a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058aa:	2e00      	cmp	r6, #0
 80058ac:	d045      	beq.n	800593a <__sflush_r+0xae>
 80058ae:	2300      	movs	r3, #0
 80058b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80058b4:	682f      	ldr	r7, [r5, #0]
 80058b6:	6a21      	ldr	r1, [r4, #32]
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	d030      	beq.n	800591e <__sflush_r+0x92>
 80058bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	0759      	lsls	r1, r3, #29
 80058c2:	d505      	bpl.n	80058d0 <__sflush_r+0x44>
 80058c4:	6863      	ldr	r3, [r4, #4]
 80058c6:	1ad2      	subs	r2, r2, r3
 80058c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058ca:	b10b      	cbz	r3, 80058d0 <__sflush_r+0x44>
 80058cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	2300      	movs	r3, #0
 80058d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058d4:	6a21      	ldr	r1, [r4, #32]
 80058d6:	4628      	mov	r0, r5
 80058d8:	47b0      	blx	r6
 80058da:	1c43      	adds	r3, r0, #1
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	d106      	bne.n	80058ee <__sflush_r+0x62>
 80058e0:	6829      	ldr	r1, [r5, #0]
 80058e2:	291d      	cmp	r1, #29
 80058e4:	d82b      	bhi.n	800593e <__sflush_r+0xb2>
 80058e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005990 <__sflush_r+0x104>)
 80058e8:	410a      	asrs	r2, r1
 80058ea:	07d6      	lsls	r6, r2, #31
 80058ec:	d427      	bmi.n	800593e <__sflush_r+0xb2>
 80058ee:	2200      	movs	r2, #0
 80058f0:	6062      	str	r2, [r4, #4]
 80058f2:	04d9      	lsls	r1, r3, #19
 80058f4:	6922      	ldr	r2, [r4, #16]
 80058f6:	6022      	str	r2, [r4, #0]
 80058f8:	d504      	bpl.n	8005904 <__sflush_r+0x78>
 80058fa:	1c42      	adds	r2, r0, #1
 80058fc:	d101      	bne.n	8005902 <__sflush_r+0x76>
 80058fe:	682b      	ldr	r3, [r5, #0]
 8005900:	b903      	cbnz	r3, 8005904 <__sflush_r+0x78>
 8005902:	6560      	str	r0, [r4, #84]	@ 0x54
 8005904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005906:	602f      	str	r7, [r5, #0]
 8005908:	b1b9      	cbz	r1, 800593a <__sflush_r+0xae>
 800590a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800590e:	4299      	cmp	r1, r3
 8005910:	d002      	beq.n	8005918 <__sflush_r+0x8c>
 8005912:	4628      	mov	r0, r5
 8005914:	f001 fdb4 	bl	8007480 <_free_r>
 8005918:	2300      	movs	r3, #0
 800591a:	6363      	str	r3, [r4, #52]	@ 0x34
 800591c:	e00d      	b.n	800593a <__sflush_r+0xae>
 800591e:	2301      	movs	r3, #1
 8005920:	4628      	mov	r0, r5
 8005922:	47b0      	blx	r6
 8005924:	4602      	mov	r2, r0
 8005926:	1c50      	adds	r0, r2, #1
 8005928:	d1c9      	bne.n	80058be <__sflush_r+0x32>
 800592a:	682b      	ldr	r3, [r5, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0c6      	beq.n	80058be <__sflush_r+0x32>
 8005930:	2b1d      	cmp	r3, #29
 8005932:	d001      	beq.n	8005938 <__sflush_r+0xac>
 8005934:	2b16      	cmp	r3, #22
 8005936:	d11e      	bne.n	8005976 <__sflush_r+0xea>
 8005938:	602f      	str	r7, [r5, #0]
 800593a:	2000      	movs	r0, #0
 800593c:	e022      	b.n	8005984 <__sflush_r+0xf8>
 800593e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005942:	b21b      	sxth	r3, r3
 8005944:	e01b      	b.n	800597e <__sflush_r+0xf2>
 8005946:	690f      	ldr	r7, [r1, #16]
 8005948:	2f00      	cmp	r7, #0
 800594a:	d0f6      	beq.n	800593a <__sflush_r+0xae>
 800594c:	0793      	lsls	r3, r2, #30
 800594e:	680e      	ldr	r6, [r1, #0]
 8005950:	bf08      	it	eq
 8005952:	694b      	ldreq	r3, [r1, #20]
 8005954:	600f      	str	r7, [r1, #0]
 8005956:	bf18      	it	ne
 8005958:	2300      	movne	r3, #0
 800595a:	eba6 0807 	sub.w	r8, r6, r7
 800595e:	608b      	str	r3, [r1, #8]
 8005960:	f1b8 0f00 	cmp.w	r8, #0
 8005964:	dde9      	ble.n	800593a <__sflush_r+0xae>
 8005966:	6a21      	ldr	r1, [r4, #32]
 8005968:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800596a:	4643      	mov	r3, r8
 800596c:	463a      	mov	r2, r7
 800596e:	4628      	mov	r0, r5
 8005970:	47b0      	blx	r6
 8005972:	2800      	cmp	r0, #0
 8005974:	dc08      	bgt.n	8005988 <__sflush_r+0xfc>
 8005976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800597a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800597e:	81a3      	strh	r3, [r4, #12]
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005988:	4407      	add	r7, r0
 800598a:	eba8 0800 	sub.w	r8, r8, r0
 800598e:	e7e7      	b.n	8005960 <__sflush_r+0xd4>
 8005990:	dfbffffe 	.word	0xdfbffffe

08005994 <_fflush_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	690b      	ldr	r3, [r1, #16]
 8005998:	4605      	mov	r5, r0
 800599a:	460c      	mov	r4, r1
 800599c:	b913      	cbnz	r3, 80059a4 <_fflush_r+0x10>
 800599e:	2500      	movs	r5, #0
 80059a0:	4628      	mov	r0, r5
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	b118      	cbz	r0, 80059ae <_fflush_r+0x1a>
 80059a6:	6a03      	ldr	r3, [r0, #32]
 80059a8:	b90b      	cbnz	r3, 80059ae <_fflush_r+0x1a>
 80059aa:	f000 f969 	bl	8005c80 <__sinit>
 80059ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f3      	beq.n	800599e <_fflush_r+0xa>
 80059b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059b8:	07d0      	lsls	r0, r2, #31
 80059ba:	d404      	bmi.n	80059c6 <_fflush_r+0x32>
 80059bc:	0599      	lsls	r1, r3, #22
 80059be:	d402      	bmi.n	80059c6 <_fflush_r+0x32>
 80059c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059c2:	f000 fedb 	bl	800677c <__retarget_lock_acquire_recursive>
 80059c6:	4628      	mov	r0, r5
 80059c8:	4621      	mov	r1, r4
 80059ca:	f7ff ff5f 	bl	800588c <__sflush_r>
 80059ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059d0:	07da      	lsls	r2, r3, #31
 80059d2:	4605      	mov	r5, r0
 80059d4:	d4e4      	bmi.n	80059a0 <_fflush_r+0xc>
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	059b      	lsls	r3, r3, #22
 80059da:	d4e1      	bmi.n	80059a0 <_fflush_r+0xc>
 80059dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059de:	f000 fece 	bl	800677e <__retarget_lock_release_recursive>
 80059e2:	e7dd      	b.n	80059a0 <_fflush_r+0xc>

080059e4 <_fgets_r>:
 80059e4:	2a01      	cmp	r2, #1
 80059e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ea:	4681      	mov	r9, r0
 80059ec:	460e      	mov	r6, r1
 80059ee:	4615      	mov	r5, r2
 80059f0:	461c      	mov	r4, r3
 80059f2:	dd21      	ble.n	8005a38 <_fgets_r+0x54>
 80059f4:	b118      	cbz	r0, 80059fe <_fgets_r+0x1a>
 80059f6:	6a03      	ldr	r3, [r0, #32]
 80059f8:	b90b      	cbnz	r3, 80059fe <_fgets_r+0x1a>
 80059fa:	f000 f941 	bl	8005c80 <__sinit>
 80059fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a00:	07db      	lsls	r3, r3, #31
 8005a02:	d405      	bmi.n	8005a10 <_fgets_r+0x2c>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	059f      	lsls	r7, r3, #22
 8005a08:	d402      	bmi.n	8005a10 <_fgets_r+0x2c>
 8005a0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a0c:	f000 feb6 	bl	800677c <__retarget_lock_acquire_recursive>
 8005a10:	3d01      	subs	r5, #1
 8005a12:	4637      	mov	r7, r6
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	b99b      	cbnz	r3, 8005a40 <_fgets_r+0x5c>
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4648      	mov	r0, r9
 8005a1c:	f000 fa9a 	bl	8005f54 <__srefill_r>
 8005a20:	b168      	cbz	r0, 8005a3e <_fgets_r+0x5a>
 8005a22:	42b7      	cmp	r7, r6
 8005a24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a26:	d139      	bne.n	8005a9c <_fgets_r+0xb8>
 8005a28:	07d8      	lsls	r0, r3, #31
 8005a2a:	d405      	bmi.n	8005a38 <_fgets_r+0x54>
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	0599      	lsls	r1, r3, #22
 8005a30:	d402      	bmi.n	8005a38 <_fgets_r+0x54>
 8005a32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a34:	f000 fea3 	bl	800677e <__retarget_lock_release_recursive>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	6863      	ldr	r3, [r4, #4]
 8005a40:	f8d4 a000 	ldr.w	sl, [r4]
 8005a44:	42ab      	cmp	r3, r5
 8005a46:	bf28      	it	cs
 8005a48:	462b      	movcs	r3, r5
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	210a      	movs	r1, #10
 8005a4e:	4650      	mov	r0, sl
 8005a50:	4698      	mov	r8, r3
 8005a52:	f7fa fbdd 	bl	8000210 <memchr>
 8005a56:	6863      	ldr	r3, [r4, #4]
 8005a58:	b188      	cbz	r0, 8005a7e <_fgets_r+0x9a>
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	eba0 050a 	sub.w	r5, r0, sl
 8005a60:	1b5b      	subs	r3, r3, r5
 8005a62:	e9c4 0300 	strd	r0, r3, [r4]
 8005a66:	462a      	mov	r2, r5
 8005a68:	4651      	mov	r1, sl
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	f000 fe88 	bl	8006780 <memcpy>
 8005a70:	2300      	movs	r3, #0
 8005a72:	557b      	strb	r3, [r7, r5]
 8005a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a76:	07da      	lsls	r2, r3, #31
 8005a78:	d513      	bpl.n	8005aa2 <_fgets_r+0xbe>
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	e7dd      	b.n	8005a3a <_fgets_r+0x56>
 8005a7e:	eba3 0308 	sub.w	r3, r3, r8
 8005a82:	6063      	str	r3, [r4, #4]
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	4443      	add	r3, r8
 8005a88:	4638      	mov	r0, r7
 8005a8a:	6023      	str	r3, [r4, #0]
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	4651      	mov	r1, sl
 8005a90:	f000 fe76 	bl	8006780 <memcpy>
 8005a94:	ebb5 0508 	subs.w	r5, r5, r8
 8005a98:	4447      	add	r7, r8
 8005a9a:	d1bb      	bne.n	8005a14 <_fgets_r+0x30>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	703b      	strb	r3, [r7, #0]
 8005aa0:	e7e8      	b.n	8005a74 <_fgets_r+0x90>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	059b      	lsls	r3, r3, #22
 8005aa6:	d4e8      	bmi.n	8005a7a <_fgets_r+0x96>
 8005aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aaa:	f000 fe68 	bl	800677e <__retarget_lock_release_recursive>
 8005aae:	e7e4      	b.n	8005a7a <_fgets_r+0x96>

08005ab0 <fgets>:
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	460a      	mov	r2, r1
 8005ab4:	4601      	mov	r1, r0
 8005ab6:	4802      	ldr	r0, [pc, #8]	@ (8005ac0 <fgets+0x10>)
 8005ab8:	6800      	ldr	r0, [r0, #0]
 8005aba:	f7ff bf93 	b.w	80059e4 <_fgets_r>
 8005abe:	bf00      	nop
 8005ac0:	20000018 	.word	0x20000018

08005ac4 <std>:
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	b510      	push	{r4, lr}
 8005ac8:	4604      	mov	r4, r0
 8005aca:	e9c0 3300 	strd	r3, r3, [r0]
 8005ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ad2:	6083      	str	r3, [r0, #8]
 8005ad4:	8181      	strh	r1, [r0, #12]
 8005ad6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ad8:	81c2      	strh	r2, [r0, #14]
 8005ada:	6183      	str	r3, [r0, #24]
 8005adc:	4619      	mov	r1, r3
 8005ade:	2208      	movs	r2, #8
 8005ae0:	305c      	adds	r0, #92	@ 0x5c
 8005ae2:	f000 fd3c 	bl	800655e <memset>
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <std+0x58>)
 8005ae8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005aea:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <std+0x5c>)
 8005aec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005aee:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <std+0x60>)
 8005af0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005af2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b28 <std+0x64>)
 8005af4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005af6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <std+0x68>)
 8005af8:	6224      	str	r4, [r4, #32]
 8005afa:	429c      	cmp	r4, r3
 8005afc:	d006      	beq.n	8005b0c <std+0x48>
 8005afe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b02:	4294      	cmp	r4, r2
 8005b04:	d002      	beq.n	8005b0c <std+0x48>
 8005b06:	33d0      	adds	r3, #208	@ 0xd0
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	d105      	bne.n	8005b18 <std+0x54>
 8005b0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b14:	f000 be30 	b.w	8006778 <__retarget_lock_init_recursive>
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	08006281 	.word	0x08006281
 8005b20:	080062a3 	.word	0x080062a3
 8005b24:	080062db 	.word	0x080062db
 8005b28:	080062ff 	.word	0x080062ff
 8005b2c:	200006a8 	.word	0x200006a8

08005b30 <stdio_exit_handler>:
 8005b30:	4a02      	ldr	r2, [pc, #8]	@ (8005b3c <stdio_exit_handler+0xc>)
 8005b32:	4903      	ldr	r1, [pc, #12]	@ (8005b40 <stdio_exit_handler+0x10>)
 8005b34:	4803      	ldr	r0, [pc, #12]	@ (8005b44 <stdio_exit_handler+0x14>)
 8005b36:	f000 b971 	b.w	8005e1c <_fwalk_sglue>
 8005b3a:	bf00      	nop
 8005b3c:	2000000c 	.word	0x2000000c
 8005b40:	08005995 	.word	0x08005995
 8005b44:	2000001c 	.word	0x2000001c

08005b48 <cleanup_stdio>:
 8005b48:	6841      	ldr	r1, [r0, #4]
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b7c <cleanup_stdio+0x34>)
 8005b4c:	4299      	cmp	r1, r3
 8005b4e:	b510      	push	{r4, lr}
 8005b50:	4604      	mov	r4, r0
 8005b52:	d001      	beq.n	8005b58 <cleanup_stdio+0x10>
 8005b54:	f7ff ff1e 	bl	8005994 <_fflush_r>
 8005b58:	68a1      	ldr	r1, [r4, #8]
 8005b5a:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <cleanup_stdio+0x38>)
 8005b5c:	4299      	cmp	r1, r3
 8005b5e:	d002      	beq.n	8005b66 <cleanup_stdio+0x1e>
 8005b60:	4620      	mov	r0, r4
 8005b62:	f7ff ff17 	bl	8005994 <_fflush_r>
 8005b66:	68e1      	ldr	r1, [r4, #12]
 8005b68:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <cleanup_stdio+0x3c>)
 8005b6a:	4299      	cmp	r1, r3
 8005b6c:	d004      	beq.n	8005b78 <cleanup_stdio+0x30>
 8005b6e:	4620      	mov	r0, r4
 8005b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b74:	f7ff bf0e 	b.w	8005994 <_fflush_r>
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200006a8 	.word	0x200006a8
 8005b80:	20000710 	.word	0x20000710
 8005b84:	20000778 	.word	0x20000778

08005b88 <global_stdio_init.part.0>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <global_stdio_init.part.0+0x30>)
 8005b8c:	4c0b      	ldr	r4, [pc, #44]	@ (8005bbc <global_stdio_init.part.0+0x34>)
 8005b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc0 <global_stdio_init.part.0+0x38>)
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	4620      	mov	r0, r4
 8005b94:	2200      	movs	r2, #0
 8005b96:	2104      	movs	r1, #4
 8005b98:	f7ff ff94 	bl	8005ac4 <std>
 8005b9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	2109      	movs	r1, #9
 8005ba4:	f7ff ff8e 	bl	8005ac4 <std>
 8005ba8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bac:	2202      	movs	r2, #2
 8005bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bb2:	2112      	movs	r1, #18
 8005bb4:	f7ff bf86 	b.w	8005ac4 <std>
 8005bb8:	200007e0 	.word	0x200007e0
 8005bbc:	200006a8 	.word	0x200006a8
 8005bc0:	08005b31 	.word	0x08005b31

08005bc4 <__sfp_lock_acquire>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	@ (8005bcc <__sfp_lock_acquire+0x8>)
 8005bc6:	f000 bdd9 	b.w	800677c <__retarget_lock_acquire_recursive>
 8005bca:	bf00      	nop
 8005bcc:	200007e9 	.word	0x200007e9

08005bd0 <__sfp_lock_release>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	@ (8005bd8 <__sfp_lock_release+0x8>)
 8005bd2:	f000 bdd4 	b.w	800677e <__retarget_lock_release_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	200007e9 	.word	0x200007e9

08005bdc <__sfp>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	4607      	mov	r7, r0
 8005be0:	f7ff fff0 	bl	8005bc4 <__sfp_lock_acquire>
 8005be4:	4b23      	ldr	r3, [pc, #140]	@ (8005c74 <__sfp+0x98>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	b90b      	cbnz	r3, 8005bee <__sfp+0x12>
 8005bea:	f7ff ffcd 	bl	8005b88 <global_stdio_init.part.0>
 8005bee:	4e22      	ldr	r6, [pc, #136]	@ (8005c78 <__sfp+0x9c>)
 8005bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	d50f      	bpl.n	8005c18 <__sfp+0x3c>
 8005bf8:	6835      	ldr	r5, [r6, #0]
 8005bfa:	2d00      	cmp	r5, #0
 8005bfc:	d137      	bne.n	8005c6e <__sfp+0x92>
 8005bfe:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8005c02:	4638      	mov	r0, r7
 8005c04:	f001 fcb0 	bl	8007568 <_malloc_r>
 8005c08:	4604      	mov	r4, r0
 8005c0a:	bb28      	cbnz	r0, 8005c58 <__sfp+0x7c>
 8005c0c:	6030      	str	r0, [r6, #0]
 8005c0e:	f7ff ffdf 	bl	8005bd0 <__sfp_lock_release>
 8005c12:	230c      	movs	r3, #12
 8005c14:	603b      	str	r3, [r7, #0]
 8005c16:	e01b      	b.n	8005c50 <__sfp+0x74>
 8005c18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c1c:	b9d5      	cbnz	r5, 8005c54 <__sfp+0x78>
 8005c1e:	4b17      	ldr	r3, [pc, #92]	@ (8005c7c <__sfp+0xa0>)
 8005c20:	60e3      	str	r3, [r4, #12]
 8005c22:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c26:	6665      	str	r5, [r4, #100]	@ 0x64
 8005c28:	f000 fda6 	bl	8006778 <__retarget_lock_init_recursive>
 8005c2c:	f7ff ffd0 	bl	8005bd0 <__sfp_lock_release>
 8005c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c38:	6025      	str	r5, [r4, #0]
 8005c3a:	61a5      	str	r5, [r4, #24]
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8005c44:	f000 fc8b 	bl	800655e <memset>
 8005c48:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8005c4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8005c50:	4620      	mov	r0, r4
 8005c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c54:	3468      	adds	r4, #104	@ 0x68
 8005c56:	e7cd      	b.n	8005bf4 <__sfp+0x18>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	6005      	str	r5, [r0, #0]
 8005c5c:	6043      	str	r3, [r0, #4]
 8005c5e:	300c      	adds	r0, #12
 8005c60:	60a0      	str	r0, [r4, #8]
 8005c62:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8005c66:	4629      	mov	r1, r5
 8005c68:	f000 fc79 	bl	800655e <memset>
 8005c6c:	6034      	str	r4, [r6, #0]
 8005c6e:	6836      	ldr	r6, [r6, #0]
 8005c70:	e7be      	b.n	8005bf0 <__sfp+0x14>
 8005c72:	bf00      	nop
 8005c74:	200007e0 	.word	0x200007e0
 8005c78:	2000000c 	.word	0x2000000c
 8005c7c:	ffff0001 	.word	0xffff0001

08005c80 <__sinit>:
 8005c80:	b510      	push	{r4, lr}
 8005c82:	4604      	mov	r4, r0
 8005c84:	f7ff ff9e 	bl	8005bc4 <__sfp_lock_acquire>
 8005c88:	6a23      	ldr	r3, [r4, #32]
 8005c8a:	b11b      	cbz	r3, 8005c94 <__sinit+0x14>
 8005c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c90:	f7ff bf9e 	b.w	8005bd0 <__sfp_lock_release>
 8005c94:	4b04      	ldr	r3, [pc, #16]	@ (8005ca8 <__sinit+0x28>)
 8005c96:	6223      	str	r3, [r4, #32]
 8005c98:	4b04      	ldr	r3, [pc, #16]	@ (8005cac <__sinit+0x2c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1f5      	bne.n	8005c8c <__sinit+0xc>
 8005ca0:	f7ff ff72 	bl	8005b88 <global_stdio_init.part.0>
 8005ca4:	e7f2      	b.n	8005c8c <__sinit+0xc>
 8005ca6:	bf00      	nop
 8005ca8:	08005b49 	.word	0x08005b49
 8005cac:	200007e0 	.word	0x200007e0

08005cb0 <_fopen_r>:
 8005cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cb2:	460f      	mov	r7, r1
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	aa01      	add	r2, sp, #4
 8005cb8:	4606      	mov	r6, r0
 8005cba:	f003 fa35 	bl	8009128 <__sflags>
 8005cbe:	4605      	mov	r5, r0
 8005cc0:	b1b0      	cbz	r0, 8005cf0 <_fopen_r+0x40>
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7ff ff8a 	bl	8005bdc <__sfp>
 8005cc8:	4604      	mov	r4, r0
 8005cca:	b188      	cbz	r0, 8005cf0 <_fopen_r+0x40>
 8005ccc:	4639      	mov	r1, r7
 8005cce:	9a01      	ldr	r2, [sp, #4]
 8005cd0:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f000 fccd 	bl	8006674 <_open_r>
 8005cda:	1e07      	subs	r7, r0, #0
 8005cdc:	da0c      	bge.n	8005cf8 <_fopen_r+0x48>
 8005cde:	f7ff ff71 	bl	8005bc4 <__sfp_lock_acquire>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	f000 fd47 	bl	800677a <__retarget_lock_close_recursive>
 8005cec:	f7ff ff70 	bl	8005bd0 <__sfp_lock_release>
 8005cf0:	2400      	movs	r4, #0
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	b003      	add	sp, #12
 8005cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cfa:	07db      	lsls	r3, r3, #31
 8005cfc:	d405      	bmi.n	8005d0a <_fopen_r+0x5a>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	0598      	lsls	r0, r3, #22
 8005d02:	d402      	bmi.n	8005d0a <_fopen_r+0x5a>
 8005d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d06:	f000 fd39 	bl	800677c <__retarget_lock_acquire_recursive>
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d48 <_fopen_r+0x98>)
 8005d0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d4c <_fopen_r+0x9c>)
 8005d10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d12:	b22d      	sxth	r5, r5
 8005d14:	4b0e      	ldr	r3, [pc, #56]	@ (8005d50 <_fopen_r+0xa0>)
 8005d16:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d18:	05e9      	lsls	r1, r5, #23
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <_fopen_r+0xa4>)
 8005d1c:	81e7      	strh	r7, [r4, #14]
 8005d1e:	81a5      	strh	r5, [r4, #12]
 8005d20:	6224      	str	r4, [r4, #32]
 8005d22:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d24:	d505      	bpl.n	8005d32 <_fopen_r+0x82>
 8005d26:	2302      	movs	r3, #2
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f000 f873 	bl	8005e18 <_fseek_r>
 8005d32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d34:	07da      	lsls	r2, r3, #31
 8005d36:	d4dc      	bmi.n	8005cf2 <_fopen_r+0x42>
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	059b      	lsls	r3, r3, #22
 8005d3c:	d4d9      	bmi.n	8005cf2 <_fopen_r+0x42>
 8005d3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d40:	f000 fd1d 	bl	800677e <__retarget_lock_release_recursive>
 8005d44:	e7d5      	b.n	8005cf2 <_fopen_r+0x42>
 8005d46:	bf00      	nop
 8005d48:	08006281 	.word	0x08006281
 8005d4c:	080062a3 	.word	0x080062a3
 8005d50:	080062db 	.word	0x080062db
 8005d54:	080062ff 	.word	0x080062ff

08005d58 <fopen>:
 8005d58:	4b02      	ldr	r3, [pc, #8]	@ (8005d64 <fopen+0xc>)
 8005d5a:	460a      	mov	r2, r1
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	f7ff bfa6 	b.w	8005cb0 <_fopen_r>
 8005d64:	20000018 	.word	0x20000018

08005d68 <_fputs_r>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	4606      	mov	r6, r0
 8005d70:	b118      	cbz	r0, 8005d7a <_fputs_r+0x12>
 8005d72:	6a03      	ldr	r3, [r0, #32]
 8005d74:	b90b      	cbnz	r3, 8005d7a <_fputs_r+0x12>
 8005d76:	f7ff ff83 	bl	8005c80 <__sinit>
 8005d7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d7c:	07d9      	lsls	r1, r3, #31
 8005d7e:	d405      	bmi.n	8005d8c <_fputs_r+0x24>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	059a      	lsls	r2, r3, #22
 8005d84:	d402      	bmi.n	8005d8c <_fputs_r+0x24>
 8005d86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d88:	f000 fcf8 	bl	800677c <__retarget_lock_acquire_recursive>
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	071b      	lsls	r3, r3, #28
 8005d90:	d501      	bpl.n	8005d96 <_fputs_r+0x2e>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	bb73      	cbnz	r3, 8005df4 <_fputs_r+0x8c>
 8005d96:	4621      	mov	r1, r4
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f000 faf3 	bl	8006384 <__swsetup_r>
 8005d9e:	b348      	cbz	r0, 8005df4 <_fputs_r+0x8c>
 8005da0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005da2:	07da      	lsls	r2, r3, #31
 8005da4:	d402      	bmi.n	8005dac <_fputs_r+0x44>
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	059b      	lsls	r3, r3, #22
 8005daa:	d529      	bpl.n	8005e00 <_fputs_r+0x98>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	e018      	b.n	8005de4 <_fputs_r+0x7c>
 8005db2:	68a3      	ldr	r3, [r4, #8]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	60a3      	str	r3, [r4, #8]
 8005dba:	da04      	bge.n	8005dc6 <_fputs_r+0x5e>
 8005dbc:	69a2      	ldr	r2, [r4, #24]
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	db11      	blt.n	8005de6 <_fputs_r+0x7e>
 8005dc2:	290a      	cmp	r1, #10
 8005dc4:	d00f      	beq.n	8005de6 <_fputs_r+0x7e>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	7019      	strb	r1, [r3, #0]
 8005dce:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	d1ed      	bne.n	8005db2 <_fputs_r+0x4a>
 8005dd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dd8:	07d8      	lsls	r0, r3, #31
 8005dda:	d402      	bmi.n	8005de2 <_fputs_r+0x7a>
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	0599      	lsls	r1, r3, #22
 8005de0:	d50a      	bpl.n	8005df8 <_fputs_r+0x90>
 8005de2:	2000      	movs	r0, #0
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
 8005de6:	4622      	mov	r2, r4
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 fa8c 	bl	8006306 <__swbuf_r>
 8005dee:	3001      	adds	r0, #1
 8005df0:	d1ed      	bne.n	8005dce <_fputs_r+0x66>
 8005df2:	e7d5      	b.n	8005da0 <_fputs_r+0x38>
 8005df4:	3d01      	subs	r5, #1
 8005df6:	e7ea      	b.n	8005dce <_fputs_r+0x66>
 8005df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dfa:	f000 fcc0 	bl	800677e <__retarget_lock_release_recursive>
 8005dfe:	e7f0      	b.n	8005de2 <_fputs_r+0x7a>
 8005e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e02:	f000 fcbc 	bl	800677e <__retarget_lock_release_recursive>
 8005e06:	e7d1      	b.n	8005dac <_fputs_r+0x44>

08005e08 <fputs>:
 8005e08:	4b02      	ldr	r3, [pc, #8]	@ (8005e14 <fputs+0xc>)
 8005e0a:	460a      	mov	r2, r1
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	f7ff bfaa 	b.w	8005d68 <_fputs_r>
 8005e14:	20000018 	.word	0x20000018

08005e18 <_fseek_r>:
 8005e18:	f000 bb0a 	b.w	8006430 <_fseeko_r>

08005e1c <_fwalk_sglue>:
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	4607      	mov	r7, r0
 8005e22:	4688      	mov	r8, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	2600      	movs	r6, #0
 8005e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e30:	d505      	bpl.n	8005e3e <_fwalk_sglue+0x22>
 8005e32:	6824      	ldr	r4, [r4, #0]
 8005e34:	2c00      	cmp	r4, #0
 8005e36:	d1f7      	bne.n	8005e28 <_fwalk_sglue+0xc>
 8005e38:	4630      	mov	r0, r6
 8005e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d907      	bls.n	8005e54 <_fwalk_sglue+0x38>
 8005e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	d003      	beq.n	8005e54 <_fwalk_sglue+0x38>
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	4638      	mov	r0, r7
 8005e50:	47c0      	blx	r8
 8005e52:	4306      	orrs	r6, r0
 8005e54:	3568      	adds	r5, #104	@ 0x68
 8005e56:	e7e9      	b.n	8005e2c <_fwalk_sglue+0x10>

08005e58 <iprintf>:
 8005e58:	b40f      	push	{r0, r1, r2, r3}
 8005e5a:	b507      	push	{r0, r1, r2, lr}
 8005e5c:	4906      	ldr	r1, [pc, #24]	@ (8005e78 <iprintf+0x20>)
 8005e5e:	ab04      	add	r3, sp, #16
 8005e60:	6808      	ldr	r0, [r1, #0]
 8005e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e66:	6881      	ldr	r1, [r0, #8]
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	f003 f845 	bl	8008ef8 <_vfiprintf_r>
 8005e6e:	b003      	add	sp, #12
 8005e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e74:	b004      	add	sp, #16
 8005e76:	4770      	bx	lr
 8005e78:	20000018 	.word	0x20000018

08005e7c <_puts_r>:
 8005e7c:	6a03      	ldr	r3, [r0, #32]
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	6884      	ldr	r4, [r0, #8]
 8005e82:	4605      	mov	r5, r0
 8005e84:	460e      	mov	r6, r1
 8005e86:	b90b      	cbnz	r3, 8005e8c <_puts_r+0x10>
 8005e88:	f7ff fefa 	bl	8005c80 <__sinit>
 8005e8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e8e:	07db      	lsls	r3, r3, #31
 8005e90:	d405      	bmi.n	8005e9e <_puts_r+0x22>
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	0598      	lsls	r0, r3, #22
 8005e96:	d402      	bmi.n	8005e9e <_puts_r+0x22>
 8005e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e9a:	f000 fc6f 	bl	800677c <__retarget_lock_acquire_recursive>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	0719      	lsls	r1, r3, #28
 8005ea2:	d502      	bpl.n	8005eaa <_puts_r+0x2e>
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d135      	bne.n	8005f16 <_puts_r+0x9a>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4628      	mov	r0, r5
 8005eae:	f000 fa69 	bl	8006384 <__swsetup_r>
 8005eb2:	b380      	cbz	r0, 8005f16 <_puts_r+0x9a>
 8005eb4:	f04f 35ff 	mov.w	r5, #4294967295
 8005eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eba:	07da      	lsls	r2, r3, #31
 8005ebc:	d405      	bmi.n	8005eca <_puts_r+0x4e>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	059b      	lsls	r3, r3, #22
 8005ec2:	d402      	bmi.n	8005eca <_puts_r+0x4e>
 8005ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ec6:	f000 fc5a 	bl	800677e <__retarget_lock_release_recursive>
 8005eca:	4628      	mov	r0, r5
 8005ecc:	bd70      	pop	{r4, r5, r6, pc}
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	da04      	bge.n	8005edc <_puts_r+0x60>
 8005ed2:	69a2      	ldr	r2, [r4, #24]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	dc17      	bgt.n	8005f08 <_puts_r+0x8c>
 8005ed8:	290a      	cmp	r1, #10
 8005eda:	d015      	beq.n	8005f08 <_puts_r+0x8c>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	6022      	str	r2, [r4, #0]
 8005ee2:	7019      	strb	r1, [r3, #0]
 8005ee4:	68a3      	ldr	r3, [r4, #8]
 8005ee6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eea:	3b01      	subs	r3, #1
 8005eec:	60a3      	str	r3, [r4, #8]
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	d1ed      	bne.n	8005ece <_puts_r+0x52>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da11      	bge.n	8005f1a <_puts_r+0x9e>
 8005ef6:	4622      	mov	r2, r4
 8005ef8:	210a      	movs	r1, #10
 8005efa:	4628      	mov	r0, r5
 8005efc:	f000 fa03 	bl	8006306 <__swbuf_r>
 8005f00:	3001      	adds	r0, #1
 8005f02:	d0d7      	beq.n	8005eb4 <_puts_r+0x38>
 8005f04:	250a      	movs	r5, #10
 8005f06:	e7d7      	b.n	8005eb8 <_puts_r+0x3c>
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f000 f9fb 	bl	8006306 <__swbuf_r>
 8005f10:	3001      	adds	r0, #1
 8005f12:	d1e7      	bne.n	8005ee4 <_puts_r+0x68>
 8005f14:	e7ce      	b.n	8005eb4 <_puts_r+0x38>
 8005f16:	3e01      	subs	r6, #1
 8005f18:	e7e4      	b.n	8005ee4 <_puts_r+0x68>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	6022      	str	r2, [r4, #0]
 8005f20:	220a      	movs	r2, #10
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	e7ee      	b.n	8005f04 <_puts_r+0x88>
	...

08005f28 <puts>:
 8005f28:	4b02      	ldr	r3, [pc, #8]	@ (8005f34 <puts+0xc>)
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	f7ff bfa5 	b.w	8005e7c <_puts_r>
 8005f32:	bf00      	nop
 8005f34:	20000018 	.word	0x20000018

08005f38 <lflush>:
 8005f38:	898b      	ldrh	r3, [r1, #12]
 8005f3a:	f003 0309 	and.w	r3, r3, #9
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	d103      	bne.n	8005f4a <lflush+0x12>
 8005f42:	4b03      	ldr	r3, [pc, #12]	@ (8005f50 <lflush+0x18>)
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	f7ff bd25 	b.w	8005994 <_fflush_r>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000018 	.word	0x20000018

08005f54 <__srefill_r>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	460c      	mov	r4, r1
 8005f58:	4605      	mov	r5, r0
 8005f5a:	b118      	cbz	r0, 8005f64 <__srefill_r+0x10>
 8005f5c:	6a03      	ldr	r3, [r0, #32]
 8005f5e:	b90b      	cbnz	r3, 8005f64 <__srefill_r+0x10>
 8005f60:	f7ff fe8e 	bl	8005c80 <__sinit>
 8005f64:	2300      	movs	r3, #0
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f6c:	069e      	lsls	r6, r3, #26
 8005f6e:	d408      	bmi.n	8005f82 <__srefill_r+0x2e>
 8005f70:	0758      	lsls	r0, r3, #29
 8005f72:	d445      	bmi.n	8006000 <__srefill_r+0xac>
 8005f74:	06d9      	lsls	r1, r3, #27
 8005f76:	d407      	bmi.n	8005f88 <__srefill_r+0x34>
 8005f78:	2209      	movs	r2, #9
 8005f7a:	602a      	str	r2, [r5, #0]
 8005f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
 8005f88:	071a      	lsls	r2, r3, #28
 8005f8a:	d50b      	bpl.n	8005fa4 <__srefill_r+0x50>
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f7ff fd00 	bl	8005994 <_fflush_r>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d1f4      	bne.n	8005f82 <__srefill_r+0x2e>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	60a0      	str	r0, [r4, #8]
 8005f9c:	f023 0308 	bic.w	r3, r3, #8
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	61a0      	str	r0, [r4, #24]
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f043 0304 	orr.w	r3, r3, #4
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	b91b      	cbnz	r3, 8005fb8 <__srefill_r+0x64>
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f003 f926 	bl	8009204 <__smakebuf_r>
 8005fb8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8005fbc:	07b3      	lsls	r3, r6, #30
 8005fbe:	d00f      	beq.n	8005fe0 <__srefill_r+0x8c>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006030 <__srefill_r+0xdc>)
 8005fc4:	491b      	ldr	r1, [pc, #108]	@ (8006034 <__srefill_r+0xe0>)
 8005fc6:	481c      	ldr	r0, [pc, #112]	@ (8006038 <__srefill_r+0xe4>)
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	f7ff ff27 	bl	8005e1c <_fwalk_sglue>
 8005fce:	81a6      	strh	r6, [r4, #12]
 8005fd0:	f006 0609 	and.w	r6, r6, #9
 8005fd4:	2e09      	cmp	r6, #9
 8005fd6:	d103      	bne.n	8005fe0 <__srefill_r+0x8c>
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f7ff fc56 	bl	800588c <__sflush_r>
 8005fe0:	6922      	ldr	r2, [r4, #16]
 8005fe2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005fe4:	6963      	ldr	r3, [r4, #20]
 8005fe6:	6a21      	ldr	r1, [r4, #32]
 8005fe8:	6022      	str	r2, [r4, #0]
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b0      	blx	r6
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	6060      	str	r0, [r4, #4]
 8005ff2:	dc17      	bgt.n	8006024 <__srefill_r+0xd0>
 8005ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff8:	d116      	bne.n	8006028 <__srefill_r+0xd4>
 8005ffa:	f043 0320 	orr.w	r3, r3, #32
 8005ffe:	e7bf      	b.n	8005f80 <__srefill_r+0x2c>
 8006000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006002:	2900      	cmp	r1, #0
 8006004:	d0d2      	beq.n	8005fac <__srefill_r+0x58>
 8006006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800600a:	4299      	cmp	r1, r3
 800600c:	d002      	beq.n	8006014 <__srefill_r+0xc0>
 800600e:	4628      	mov	r0, r5
 8006010:	f001 fa36 	bl	8007480 <_free_r>
 8006014:	2300      	movs	r3, #0
 8006016:	6363      	str	r3, [r4, #52]	@ 0x34
 8006018:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800601a:	6063      	str	r3, [r4, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0c5      	beq.n	8005fac <__srefill_r+0x58>
 8006020:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006022:	6023      	str	r3, [r4, #0]
 8006024:	2000      	movs	r0, #0
 8006026:	e7ae      	b.n	8005f86 <__srefill_r+0x32>
 8006028:	2200      	movs	r2, #0
 800602a:	6062      	str	r2, [r4, #4]
 800602c:	e7a6      	b.n	8005f7c <__srefill_r+0x28>
 800602e:	bf00      	nop
 8006030:	2000000c 	.word	0x2000000c
 8006034:	08005f39 	.word	0x08005f39
 8006038:	2000001c 	.word	0x2000001c

0800603c <_remove_r>:
 800603c:	b508      	push	{r3, lr}
 800603e:	f000 fb4f 	bl	80066e0 <_unlink_r>
 8006042:	3001      	adds	r0, #1
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	bf18      	it	ne
 800604a:	2000      	movne	r0, #0
 800604c:	bd08      	pop	{r3, pc}
	...

08006050 <remove>:
 8006050:	4b02      	ldr	r3, [pc, #8]	@ (800605c <remove+0xc>)
 8006052:	4601      	mov	r1, r0
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	f7ff bff1 	b.w	800603c <_remove_r>
 800605a:	bf00      	nop
 800605c:	20000018 	.word	0x20000018

08006060 <rename>:
 8006060:	4b02      	ldr	r3, [pc, #8]	@ (800606c <rename+0xc>)
 8006062:	460a      	mov	r2, r1
 8006064:	4601      	mov	r1, r0
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	f000 bb28 	b.w	80066bc <_rename_r>
 800606c:	20000018 	.word	0x20000018

08006070 <setvbuf>:
 8006070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006074:	461d      	mov	r5, r3
 8006076:	4b57      	ldr	r3, [pc, #348]	@ (80061d4 <setvbuf+0x164>)
 8006078:	681f      	ldr	r7, [r3, #0]
 800607a:	4604      	mov	r4, r0
 800607c:	460e      	mov	r6, r1
 800607e:	4690      	mov	r8, r2
 8006080:	b127      	cbz	r7, 800608c <setvbuf+0x1c>
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	b913      	cbnz	r3, 800608c <setvbuf+0x1c>
 8006086:	4638      	mov	r0, r7
 8006088:	f7ff fdfa 	bl	8005c80 <__sinit>
 800608c:	f1b8 0f02 	cmp.w	r8, #2
 8006090:	d006      	beq.n	80060a0 <setvbuf+0x30>
 8006092:	f1b8 0f01 	cmp.w	r8, #1
 8006096:	f200 809a 	bhi.w	80061ce <setvbuf+0x15e>
 800609a:	2d00      	cmp	r5, #0
 800609c:	f2c0 8097 	blt.w	80061ce <setvbuf+0x15e>
 80060a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060a2:	07d9      	lsls	r1, r3, #31
 80060a4:	d405      	bmi.n	80060b2 <setvbuf+0x42>
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	059a      	lsls	r2, r3, #22
 80060aa:	d402      	bmi.n	80060b2 <setvbuf+0x42>
 80060ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ae:	f000 fb65 	bl	800677c <__retarget_lock_acquire_recursive>
 80060b2:	4621      	mov	r1, r4
 80060b4:	4638      	mov	r0, r7
 80060b6:	f7ff fc6d 	bl	8005994 <_fflush_r>
 80060ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060bc:	b141      	cbz	r1, 80060d0 <setvbuf+0x60>
 80060be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060c2:	4299      	cmp	r1, r3
 80060c4:	d002      	beq.n	80060cc <setvbuf+0x5c>
 80060c6:	4638      	mov	r0, r7
 80060c8:	f001 f9da 	bl	8007480 <_free_r>
 80060cc:	2300      	movs	r3, #0
 80060ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80060d0:	2300      	movs	r3, #0
 80060d2:	61a3      	str	r3, [r4, #24]
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	061b      	lsls	r3, r3, #24
 80060da:	d503      	bpl.n	80060e4 <setvbuf+0x74>
 80060dc:	6921      	ldr	r1, [r4, #16]
 80060de:	4638      	mov	r0, r7
 80060e0:	f001 f9ce 	bl	8007480 <_free_r>
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	f1b8 0f02 	cmp.w	r8, #2
 80060f2:	81a3      	strh	r3, [r4, #12]
 80060f4:	d061      	beq.n	80061ba <setvbuf+0x14a>
 80060f6:	ab01      	add	r3, sp, #4
 80060f8:	466a      	mov	r2, sp
 80060fa:	4621      	mov	r1, r4
 80060fc:	4638      	mov	r0, r7
 80060fe:	f003 f85b 	bl	80091b8 <__swhatbuf_r>
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	4318      	orrs	r0, r3
 8006106:	81a0      	strh	r0, [r4, #12]
 8006108:	bb2d      	cbnz	r5, 8006156 <setvbuf+0xe6>
 800610a:	9d00      	ldr	r5, [sp, #0]
 800610c:	4628      	mov	r0, r5
 800610e:	f001 fa01 	bl	8007514 <malloc>
 8006112:	4606      	mov	r6, r0
 8006114:	2800      	cmp	r0, #0
 8006116:	d152      	bne.n	80061be <setvbuf+0x14e>
 8006118:	f8dd 9000 	ldr.w	r9, [sp]
 800611c:	45a9      	cmp	r9, r5
 800611e:	d140      	bne.n	80061a2 <setvbuf+0x132>
 8006120:	f04f 35ff 	mov.w	r5, #4294967295
 8006124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006128:	f043 0202 	orr.w	r2, r3, #2
 800612c:	81a2      	strh	r2, [r4, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	60a2      	str	r2, [r4, #8]
 8006132:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006136:	6022      	str	r2, [r4, #0]
 8006138:	6122      	str	r2, [r4, #16]
 800613a:	2201      	movs	r2, #1
 800613c:	6162      	str	r2, [r4, #20]
 800613e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006140:	07d6      	lsls	r6, r2, #31
 8006142:	d404      	bmi.n	800614e <setvbuf+0xde>
 8006144:	0598      	lsls	r0, r3, #22
 8006146:	d402      	bmi.n	800614e <setvbuf+0xde>
 8006148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800614a:	f000 fb18 	bl	800677e <__retarget_lock_release_recursive>
 800614e:	4628      	mov	r0, r5
 8006150:	b003      	add	sp, #12
 8006152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006156:	2e00      	cmp	r6, #0
 8006158:	d0d8      	beq.n	800610c <setvbuf+0x9c>
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	b913      	cbnz	r3, 8006164 <setvbuf+0xf4>
 800615e:	4638      	mov	r0, r7
 8006160:	f7ff fd8e 	bl	8005c80 <__sinit>
 8006164:	f1b8 0f01 	cmp.w	r8, #1
 8006168:	bf08      	it	eq
 800616a:	89a3      	ldrheq	r3, [r4, #12]
 800616c:	6026      	str	r6, [r4, #0]
 800616e:	bf04      	itt	eq
 8006170:	f043 0301 	orreq.w	r3, r3, #1
 8006174:	81a3      	strheq	r3, [r4, #12]
 8006176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800617a:	f013 0208 	ands.w	r2, r3, #8
 800617e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006182:	d01e      	beq.n	80061c2 <setvbuf+0x152>
 8006184:	07d9      	lsls	r1, r3, #31
 8006186:	bf41      	itttt	mi
 8006188:	2200      	movmi	r2, #0
 800618a:	426d      	negmi	r5, r5
 800618c:	60a2      	strmi	r2, [r4, #8]
 800618e:	61a5      	strmi	r5, [r4, #24]
 8006190:	bf58      	it	pl
 8006192:	60a5      	strpl	r5, [r4, #8]
 8006194:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006196:	07d2      	lsls	r2, r2, #31
 8006198:	d401      	bmi.n	800619e <setvbuf+0x12e>
 800619a:	059b      	lsls	r3, r3, #22
 800619c:	d513      	bpl.n	80061c6 <setvbuf+0x156>
 800619e:	2500      	movs	r5, #0
 80061a0:	e7d5      	b.n	800614e <setvbuf+0xde>
 80061a2:	4648      	mov	r0, r9
 80061a4:	f001 f9b6 	bl	8007514 <malloc>
 80061a8:	4606      	mov	r6, r0
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d0b8      	beq.n	8006120 <setvbuf+0xb0>
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b4:	81a3      	strh	r3, [r4, #12]
 80061b6:	464d      	mov	r5, r9
 80061b8:	e7cf      	b.n	800615a <setvbuf+0xea>
 80061ba:	2500      	movs	r5, #0
 80061bc:	e7b2      	b.n	8006124 <setvbuf+0xb4>
 80061be:	46a9      	mov	r9, r5
 80061c0:	e7f5      	b.n	80061ae <setvbuf+0x13e>
 80061c2:	60a2      	str	r2, [r4, #8]
 80061c4:	e7e6      	b.n	8006194 <setvbuf+0x124>
 80061c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061c8:	f000 fad9 	bl	800677e <__retarget_lock_release_recursive>
 80061cc:	e7e7      	b.n	800619e <setvbuf+0x12e>
 80061ce:	f04f 35ff 	mov.w	r5, #4294967295
 80061d2:	e7bc      	b.n	800614e <setvbuf+0xde>
 80061d4:	20000018 	.word	0x20000018

080061d8 <sniprintf>:
 80061d8:	b40c      	push	{r2, r3}
 80061da:	b530      	push	{r4, r5, lr}
 80061dc:	4b17      	ldr	r3, [pc, #92]	@ (800623c <sniprintf+0x64>)
 80061de:	1e0c      	subs	r4, r1, #0
 80061e0:	681d      	ldr	r5, [r3, #0]
 80061e2:	b09d      	sub	sp, #116	@ 0x74
 80061e4:	da08      	bge.n	80061f8 <sniprintf+0x20>
 80061e6:	238b      	movs	r3, #139	@ 0x8b
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295
 80061ee:	b01d      	add	sp, #116	@ 0x74
 80061f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061f4:	b002      	add	sp, #8
 80061f6:	4770      	bx	lr
 80061f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80061fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006200:	bf14      	ite	ne
 8006202:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006206:	4623      	moveq	r3, r4
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	9307      	str	r3, [sp, #28]
 800620c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006210:	9002      	str	r0, [sp, #8]
 8006212:	9006      	str	r0, [sp, #24]
 8006214:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006218:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800621a:	ab21      	add	r3, sp, #132	@ 0x84
 800621c:	a902      	add	r1, sp, #8
 800621e:	4628      	mov	r0, r5
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	f002 fd43 	bl	8008cac <_svfiprintf_r>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	bfbc      	itt	lt
 800622a:	238b      	movlt	r3, #139	@ 0x8b
 800622c:	602b      	strlt	r3, [r5, #0]
 800622e:	2c00      	cmp	r4, #0
 8006230:	d0dd      	beq.n	80061ee <sniprintf+0x16>
 8006232:	9b02      	ldr	r3, [sp, #8]
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	e7d9      	b.n	80061ee <sniprintf+0x16>
 800623a:	bf00      	nop
 800623c:	20000018 	.word	0x20000018

08006240 <siprintf>:
 8006240:	b40e      	push	{r1, r2, r3}
 8006242:	b500      	push	{lr}
 8006244:	b09c      	sub	sp, #112	@ 0x70
 8006246:	ab1d      	add	r3, sp, #116	@ 0x74
 8006248:	9002      	str	r0, [sp, #8]
 800624a:	9006      	str	r0, [sp, #24]
 800624c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006250:	4809      	ldr	r0, [pc, #36]	@ (8006278 <siprintf+0x38>)
 8006252:	9107      	str	r1, [sp, #28]
 8006254:	9104      	str	r1, [sp, #16]
 8006256:	4909      	ldr	r1, [pc, #36]	@ (800627c <siprintf+0x3c>)
 8006258:	f853 2b04 	ldr.w	r2, [r3], #4
 800625c:	9105      	str	r1, [sp, #20]
 800625e:	6800      	ldr	r0, [r0, #0]
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	a902      	add	r1, sp, #8
 8006264:	f002 fd22 	bl	8008cac <_svfiprintf_r>
 8006268:	9b02      	ldr	r3, [sp, #8]
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	b01c      	add	sp, #112	@ 0x70
 8006270:	f85d eb04 	ldr.w	lr, [sp], #4
 8006274:	b003      	add	sp, #12
 8006276:	4770      	bx	lr
 8006278:	20000018 	.word	0x20000018
 800627c:	ffff0208 	.word	0xffff0208

08006280 <__sread>:
 8006280:	b510      	push	{r4, lr}
 8006282:	460c      	mov	r4, r1
 8006284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006288:	f000 fa06 	bl	8006698 <_read_r>
 800628c:	2800      	cmp	r0, #0
 800628e:	bfab      	itete	ge
 8006290:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006292:	89a3      	ldrhlt	r3, [r4, #12]
 8006294:	181b      	addge	r3, r3, r0
 8006296:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800629a:	bfac      	ite	ge
 800629c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800629e:	81a3      	strhlt	r3, [r4, #12]
 80062a0:	bd10      	pop	{r4, pc}

080062a2 <__swrite>:
 80062a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a6:	461f      	mov	r7, r3
 80062a8:	898b      	ldrh	r3, [r1, #12]
 80062aa:	05db      	lsls	r3, r3, #23
 80062ac:	4605      	mov	r5, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	4616      	mov	r6, r2
 80062b2:	d505      	bpl.n	80062c0 <__swrite+0x1e>
 80062b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b8:	2302      	movs	r3, #2
 80062ba:	2200      	movs	r2, #0
 80062bc:	f000 f9c8 	bl	8006650 <_lseek_r>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	4632      	mov	r2, r6
 80062ce:	463b      	mov	r3, r7
 80062d0:	4628      	mov	r0, r5
 80062d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062d6:	f000 ba13 	b.w	8006700 <_write_r>

080062da <__sseek>:
 80062da:	b510      	push	{r4, lr}
 80062dc:	460c      	mov	r4, r1
 80062de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e2:	f000 f9b5 	bl	8006650 <_lseek_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	bf15      	itete	ne
 80062ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062f6:	81a3      	strheq	r3, [r4, #12]
 80062f8:	bf18      	it	ne
 80062fa:	81a3      	strhne	r3, [r4, #12]
 80062fc:	bd10      	pop	{r4, pc}

080062fe <__sclose>:
 80062fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006302:	f000 b995 	b.w	8006630 <_close_r>

08006306 <__swbuf_r>:
 8006306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006308:	460e      	mov	r6, r1
 800630a:	4614      	mov	r4, r2
 800630c:	4605      	mov	r5, r0
 800630e:	b118      	cbz	r0, 8006318 <__swbuf_r+0x12>
 8006310:	6a03      	ldr	r3, [r0, #32]
 8006312:	b90b      	cbnz	r3, 8006318 <__swbuf_r+0x12>
 8006314:	f7ff fcb4 	bl	8005c80 <__sinit>
 8006318:	69a3      	ldr	r3, [r4, #24]
 800631a:	60a3      	str	r3, [r4, #8]
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	071a      	lsls	r2, r3, #28
 8006320:	d501      	bpl.n	8006326 <__swbuf_r+0x20>
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	b943      	cbnz	r3, 8006338 <__swbuf_r+0x32>
 8006326:	4621      	mov	r1, r4
 8006328:	4628      	mov	r0, r5
 800632a:	f000 f82b 	bl	8006384 <__swsetup_r>
 800632e:	b118      	cbz	r0, 8006338 <__swbuf_r+0x32>
 8006330:	f04f 37ff 	mov.w	r7, #4294967295
 8006334:	4638      	mov	r0, r7
 8006336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	6922      	ldr	r2, [r4, #16]
 800633c:	1a98      	subs	r0, r3, r2
 800633e:	6963      	ldr	r3, [r4, #20]
 8006340:	b2f6      	uxtb	r6, r6
 8006342:	4283      	cmp	r3, r0
 8006344:	4637      	mov	r7, r6
 8006346:	dc05      	bgt.n	8006354 <__swbuf_r+0x4e>
 8006348:	4621      	mov	r1, r4
 800634a:	4628      	mov	r0, r5
 800634c:	f7ff fb22 	bl	8005994 <_fflush_r>
 8006350:	2800      	cmp	r0, #0
 8006352:	d1ed      	bne.n	8006330 <__swbuf_r+0x2a>
 8006354:	68a3      	ldr	r3, [r4, #8]
 8006356:	3b01      	subs	r3, #1
 8006358:	60a3      	str	r3, [r4, #8]
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	6022      	str	r2, [r4, #0]
 8006360:	701e      	strb	r6, [r3, #0]
 8006362:	6962      	ldr	r2, [r4, #20]
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	429a      	cmp	r2, r3
 8006368:	d004      	beq.n	8006374 <__swbuf_r+0x6e>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	07db      	lsls	r3, r3, #31
 800636e:	d5e1      	bpl.n	8006334 <__swbuf_r+0x2e>
 8006370:	2e0a      	cmp	r6, #10
 8006372:	d1df      	bne.n	8006334 <__swbuf_r+0x2e>
 8006374:	4621      	mov	r1, r4
 8006376:	4628      	mov	r0, r5
 8006378:	f7ff fb0c 	bl	8005994 <_fflush_r>
 800637c:	2800      	cmp	r0, #0
 800637e:	d0d9      	beq.n	8006334 <__swbuf_r+0x2e>
 8006380:	e7d6      	b.n	8006330 <__swbuf_r+0x2a>
	...

08006384 <__swsetup_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4b29      	ldr	r3, [pc, #164]	@ (800642c <__swsetup_r+0xa8>)
 8006388:	4605      	mov	r5, r0
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	460c      	mov	r4, r1
 800638e:	b118      	cbz	r0, 8006398 <__swsetup_r+0x14>
 8006390:	6a03      	ldr	r3, [r0, #32]
 8006392:	b90b      	cbnz	r3, 8006398 <__swsetup_r+0x14>
 8006394:	f7ff fc74 	bl	8005c80 <__sinit>
 8006398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639c:	0719      	lsls	r1, r3, #28
 800639e:	d422      	bmi.n	80063e6 <__swsetup_r+0x62>
 80063a0:	06da      	lsls	r2, r3, #27
 80063a2:	d407      	bmi.n	80063b4 <__swsetup_r+0x30>
 80063a4:	2209      	movs	r2, #9
 80063a6:	602a      	str	r2, [r5, #0]
 80063a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	f04f 30ff 	mov.w	r0, #4294967295
 80063b2:	e033      	b.n	800641c <__swsetup_r+0x98>
 80063b4:	0758      	lsls	r0, r3, #29
 80063b6:	d512      	bpl.n	80063de <__swsetup_r+0x5a>
 80063b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063ba:	b141      	cbz	r1, 80063ce <__swsetup_r+0x4a>
 80063bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063c0:	4299      	cmp	r1, r3
 80063c2:	d002      	beq.n	80063ca <__swsetup_r+0x46>
 80063c4:	4628      	mov	r0, r5
 80063c6:	f001 f85b 	bl	8007480 <_free_r>
 80063ca:	2300      	movs	r3, #0
 80063cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	2300      	movs	r3, #0
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f043 0308 	orr.w	r3, r3, #8
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	6923      	ldr	r3, [r4, #16]
 80063e8:	b94b      	cbnz	r3, 80063fe <__swsetup_r+0x7a>
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f4:	d003      	beq.n	80063fe <__swsetup_r+0x7a>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4628      	mov	r0, r5
 80063fa:	f002 ff03 	bl	8009204 <__smakebuf_r>
 80063fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006402:	f013 0201 	ands.w	r2, r3, #1
 8006406:	d00a      	beq.n	800641e <__swsetup_r+0x9a>
 8006408:	2200      	movs	r2, #0
 800640a:	60a2      	str	r2, [r4, #8]
 800640c:	6962      	ldr	r2, [r4, #20]
 800640e:	4252      	negs	r2, r2
 8006410:	61a2      	str	r2, [r4, #24]
 8006412:	6922      	ldr	r2, [r4, #16]
 8006414:	b942      	cbnz	r2, 8006428 <__swsetup_r+0xa4>
 8006416:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800641a:	d1c5      	bne.n	80063a8 <__swsetup_r+0x24>
 800641c:	bd38      	pop	{r3, r4, r5, pc}
 800641e:	0799      	lsls	r1, r3, #30
 8006420:	bf58      	it	pl
 8006422:	6962      	ldrpl	r2, [r4, #20]
 8006424:	60a2      	str	r2, [r4, #8]
 8006426:	e7f4      	b.n	8006412 <__swsetup_r+0x8e>
 8006428:	2000      	movs	r0, #0
 800642a:	e7f7      	b.n	800641c <__swsetup_r+0x98>
 800642c:	20000018 	.word	0x20000018

08006430 <_fseeko_r>:
 8006430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006434:	460c      	mov	r4, r1
 8006436:	4690      	mov	r8, r2
 8006438:	461e      	mov	r6, r3
 800643a:	4605      	mov	r5, r0
 800643c:	b118      	cbz	r0, 8006446 <_fseeko_r+0x16>
 800643e:	6a03      	ldr	r3, [r0, #32]
 8006440:	b90b      	cbnz	r3, 8006446 <_fseeko_r+0x16>
 8006442:	f7ff fc1d 	bl	8005c80 <__sinit>
 8006446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006448:	07d9      	lsls	r1, r3, #31
 800644a:	d405      	bmi.n	8006458 <_fseeko_r+0x28>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	059a      	lsls	r2, r3, #22
 8006450:	d402      	bmi.n	8006458 <_fseeko_r+0x28>
 8006452:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006454:	f000 f992 	bl	800677c <__retarget_lock_acquire_recursive>
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 800645e:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8006462:	d103      	bne.n	800646c <_fseeko_r+0x3c>
 8006464:	4621      	mov	r1, r4
 8006466:	4628      	mov	r0, r5
 8006468:	f7ff fa94 	bl	8005994 <_fflush_r>
 800646c:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 8006470:	f1b9 0f00 	cmp.w	r9, #0
 8006474:	d102      	bne.n	800647c <_fseeko_r+0x4c>
 8006476:	231d      	movs	r3, #29
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	e058      	b.n	800652e <_fseeko_r+0xfe>
 800647c:	2e01      	cmp	r6, #1
 800647e:	d03a      	beq.n	80064f6 <_fseeko_r+0xc6>
 8006480:	f036 0302 	bics.w	r3, r6, #2
 8006484:	d162      	bne.n	800654c <_fseeko_r+0x11c>
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	b91b      	cbnz	r3, 8006492 <_fseeko_r+0x62>
 800648a:	4621      	mov	r1, r4
 800648c:	4628      	mov	r0, r5
 800648e:	f002 feb9 	bl	8009204 <__smakebuf_r>
 8006492:	4621      	mov	r1, r4
 8006494:	4628      	mov	r0, r5
 8006496:	f7ff fa7d 	bl	8005994 <_fflush_r>
 800649a:	4607      	mov	r7, r0
 800649c:	2800      	cmp	r0, #0
 800649e:	d146      	bne.n	800652e <_fseeko_r+0xfe>
 80064a0:	6a21      	ldr	r1, [r4, #32]
 80064a2:	4633      	mov	r3, r6
 80064a4:	4642      	mov	r2, r8
 80064a6:	4628      	mov	r0, r5
 80064a8:	47c8      	blx	r9
 80064aa:	3001      	adds	r0, #1
 80064ac:	d03f      	beq.n	800652e <_fseeko_r+0xfe>
 80064ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064b0:	b141      	cbz	r1, 80064c4 <_fseeko_r+0x94>
 80064b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064b6:	4299      	cmp	r1, r3
 80064b8:	d002      	beq.n	80064c0 <_fseeko_r+0x90>
 80064ba:	4628      	mov	r0, r5
 80064bc:	f000 ffe0 	bl	8007480 <_free_r>
 80064c0:	2300      	movs	r3, #0
 80064c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80064c4:	6923      	ldr	r3, [r4, #16]
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	2100      	movs	r1, #0
 80064cc:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 80064d0:	81a3      	strh	r3, [r4, #12]
 80064d2:	2208      	movs	r2, #8
 80064d4:	6061      	str	r1, [r4, #4]
 80064d6:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80064da:	f000 f840 	bl	800655e <memset>
 80064de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064e0:	07da      	lsls	r2, r3, #31
 80064e2:	d405      	bmi.n	80064f0 <_fseeko_r+0xc0>
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	059b      	lsls	r3, r3, #22
 80064e8:	d402      	bmi.n	80064f0 <_fseeko_r+0xc0>
 80064ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ec:	f000 f947 	bl	800677e <__retarget_lock_release_recursive>
 80064f0:	4638      	mov	r0, r7
 80064f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7ff fa4b 	bl	8005994 <_fflush_r>
 80064fe:	89a2      	ldrh	r2, [r4, #12]
 8006500:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006504:	d00d      	beq.n	8006522 <_fseeko_r+0xf2>
 8006506:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650c:	075f      	lsls	r7, r3, #29
 800650e:	d514      	bpl.n	800653a <_fseeko_r+0x10a>
 8006510:	6863      	ldr	r3, [r4, #4]
 8006512:	1ac0      	subs	r0, r0, r3
 8006514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006516:	b10b      	cbz	r3, 800651c <_fseeko_r+0xec>
 8006518:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800651a:	1ac0      	subs	r0, r0, r3
 800651c:	4480      	add	r8, r0
 800651e:	2600      	movs	r6, #0
 8006520:	e7b1      	b.n	8006486 <_fseeko_r+0x56>
 8006522:	4633      	mov	r3, r6
 8006524:	6a21      	ldr	r1, [r4, #32]
 8006526:	4628      	mov	r0, r5
 8006528:	47c8      	blx	r9
 800652a:	1c43      	adds	r3, r0, #1
 800652c:	d1ec      	bne.n	8006508 <_fseeko_r+0xd8>
 800652e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006530:	07d8      	lsls	r0, r3, #31
 8006532:	d50d      	bpl.n	8006550 <_fseeko_r+0x120>
 8006534:	f04f 37ff 	mov.w	r7, #4294967295
 8006538:	e7da      	b.n	80064f0 <_fseeko_r+0xc0>
 800653a:	071e      	lsls	r6, r3, #28
 800653c:	d5ee      	bpl.n	800651c <_fseeko_r+0xec>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0eb      	beq.n	800651c <_fseeko_r+0xec>
 8006544:	6922      	ldr	r2, [r4, #16]
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	4418      	add	r0, r3
 800654a:	e7e7      	b.n	800651c <_fseeko_r+0xec>
 800654c:	2316      	movs	r3, #22
 800654e:	e793      	b.n	8006478 <_fseeko_r+0x48>
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	0599      	lsls	r1, r3, #22
 8006554:	d4ee      	bmi.n	8006534 <_fseeko_r+0x104>
 8006556:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006558:	f000 f911 	bl	800677e <__retarget_lock_release_recursive>
 800655c:	e7ea      	b.n	8006534 <_fseeko_r+0x104>

0800655e <memset>:
 800655e:	4402      	add	r2, r0
 8006560:	4603      	mov	r3, r0
 8006562:	4293      	cmp	r3, r2
 8006564:	d100      	bne.n	8006568 <memset+0xa>
 8006566:	4770      	bx	lr
 8006568:	f803 1b01 	strb.w	r1, [r3], #1
 800656c:	e7f9      	b.n	8006562 <memset+0x4>
	...

08006570 <strtok>:
 8006570:	4b16      	ldr	r3, [pc, #88]	@ (80065cc <strtok+0x5c>)
 8006572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006576:	681f      	ldr	r7, [r3, #0]
 8006578:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800657a:	4605      	mov	r5, r0
 800657c:	460e      	mov	r6, r1
 800657e:	b9ec      	cbnz	r4, 80065bc <strtok+0x4c>
 8006580:	2050      	movs	r0, #80	@ 0x50
 8006582:	f000 ffc7 	bl	8007514 <malloc>
 8006586:	4602      	mov	r2, r0
 8006588:	6478      	str	r0, [r7, #68]	@ 0x44
 800658a:	b920      	cbnz	r0, 8006596 <strtok+0x26>
 800658c:	4b10      	ldr	r3, [pc, #64]	@ (80065d0 <strtok+0x60>)
 800658e:	4811      	ldr	r0, [pc, #68]	@ (80065d4 <strtok+0x64>)
 8006590:	215b      	movs	r1, #91	@ 0x5b
 8006592:	f000 f909 	bl	80067a8 <__assert_func>
 8006596:	e9c0 4400 	strd	r4, r4, [r0]
 800659a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800659e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80065a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80065a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80065aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80065ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80065b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80065b6:	6184      	str	r4, [r0, #24]
 80065b8:	7704      	strb	r4, [r0, #28]
 80065ba:	6244      	str	r4, [r0, #36]	@ 0x24
 80065bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065be:	4631      	mov	r1, r6
 80065c0:	4628      	mov	r0, r5
 80065c2:	2301      	movs	r3, #1
 80065c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065c8:	f000 b806 	b.w	80065d8 <__strtok_r>
 80065cc:	20000018 	.word	0x20000018
 80065d0:	0800a39e 	.word	0x0800a39e
 80065d4:	0800a3b5 	.word	0x0800a3b5

080065d8 <__strtok_r>:
 80065d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065da:	4604      	mov	r4, r0
 80065dc:	b908      	cbnz	r0, 80065e2 <__strtok_r+0xa>
 80065de:	6814      	ldr	r4, [r2, #0]
 80065e0:	b144      	cbz	r4, 80065f4 <__strtok_r+0x1c>
 80065e2:	4620      	mov	r0, r4
 80065e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80065e8:	460f      	mov	r7, r1
 80065ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80065ee:	b91e      	cbnz	r6, 80065f8 <__strtok_r+0x20>
 80065f0:	b965      	cbnz	r5, 800660c <__strtok_r+0x34>
 80065f2:	6015      	str	r5, [r2, #0]
 80065f4:	2000      	movs	r0, #0
 80065f6:	e005      	b.n	8006604 <__strtok_r+0x2c>
 80065f8:	42b5      	cmp	r5, r6
 80065fa:	d1f6      	bne.n	80065ea <__strtok_r+0x12>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f0      	bne.n	80065e2 <__strtok_r+0xa>
 8006600:	6014      	str	r4, [r2, #0]
 8006602:	7003      	strb	r3, [r0, #0]
 8006604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006606:	461c      	mov	r4, r3
 8006608:	e00c      	b.n	8006624 <__strtok_r+0x4c>
 800660a:	b915      	cbnz	r5, 8006612 <__strtok_r+0x3a>
 800660c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006610:	460e      	mov	r6, r1
 8006612:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006616:	42ab      	cmp	r3, r5
 8006618:	d1f7      	bne.n	800660a <__strtok_r+0x32>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f3      	beq.n	8006606 <__strtok_r+0x2e>
 800661e:	2300      	movs	r3, #0
 8006620:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006624:	6014      	str	r4, [r2, #0]
 8006626:	e7ed      	b.n	8006604 <__strtok_r+0x2c>

08006628 <_localeconv_r>:
 8006628:	4800      	ldr	r0, [pc, #0]	@ (800662c <_localeconv_r+0x4>)
 800662a:	4770      	bx	lr
 800662c:	20000158 	.word	0x20000158

08006630 <_close_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d06      	ldr	r5, [pc, #24]	@ (800664c <_close_r+0x1c>)
 8006634:	2300      	movs	r3, #0
 8006636:	4604      	mov	r4, r0
 8006638:	4608      	mov	r0, r1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	f7fb ff79 	bl	8002532 <_close>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_close_r+0x1a>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	b103      	cbz	r3, 800664a <_close_r+0x1a>
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	200007e4 	.word	0x200007e4

08006650 <_lseek_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4d07      	ldr	r5, [pc, #28]	@ (8006670 <_lseek_r+0x20>)
 8006654:	4604      	mov	r4, r0
 8006656:	4608      	mov	r0, r1
 8006658:	4611      	mov	r1, r2
 800665a:	2200      	movs	r2, #0
 800665c:	602a      	str	r2, [r5, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	f7fb ff8e 	bl	8002580 <_lseek>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d102      	bne.n	800666e <_lseek_r+0x1e>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	b103      	cbz	r3, 800666e <_lseek_r+0x1e>
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	200007e4 	.word	0x200007e4

08006674 <_open_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d07      	ldr	r5, [pc, #28]	@ (8006694 <_open_r+0x20>)
 8006678:	4604      	mov	r4, r0
 800667a:	4608      	mov	r0, r1
 800667c:	4611      	mov	r1, r2
 800667e:	2200      	movs	r2, #0
 8006680:	602a      	str	r2, [r5, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	f7fb ff89 	bl	800259a <_open>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_open_r+0x1e>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_open_r+0x1e>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	200007e4 	.word	0x200007e4

08006698 <_read_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4d07      	ldr	r5, [pc, #28]	@ (80066b8 <_read_r+0x20>)
 800669c:	4604      	mov	r4, r0
 800669e:	4608      	mov	r0, r1
 80066a0:	4611      	mov	r1, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	602a      	str	r2, [r5, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f7fb ff26 	bl	80024f8 <_read>
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d102      	bne.n	80066b6 <_read_r+0x1e>
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	b103      	cbz	r3, 80066b6 <_read_r+0x1e>
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	bd38      	pop	{r3, r4, r5, pc}
 80066b8:	200007e4 	.word	0x200007e4

080066bc <_rename_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4604      	mov	r4, r0
 80066c0:	460d      	mov	r5, r1
 80066c2:	f002 fe29 	bl	8009318 <_link_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d008      	beq.n	80066dc <_rename_r+0x20>
 80066ca:	4629      	mov	r1, r5
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 f807 	bl	80066e0 <_unlink_r>
 80066d2:	3001      	adds	r0, #1
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295
 80066d8:	bf18      	it	ne
 80066da:	2000      	movne	r0, #0
 80066dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080066e0 <_unlink_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4d06      	ldr	r5, [pc, #24]	@ (80066fc <_unlink_r+0x1c>)
 80066e4:	2300      	movs	r3, #0
 80066e6:	4604      	mov	r4, r0
 80066e8:	4608      	mov	r0, r1
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	f7fb ff63 	bl	80025b6 <_unlink>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_unlink_r+0x1a>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_unlink_r+0x1a>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	200007e4 	.word	0x200007e4

08006700 <_write_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	4d07      	ldr	r5, [pc, #28]	@ (8006720 <_write_r+0x20>)
 8006704:	4604      	mov	r4, r0
 8006706:	4608      	mov	r0, r1
 8006708:	4611      	mov	r1, r2
 800670a:	2200      	movs	r2, #0
 800670c:	602a      	str	r2, [r5, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f7fb fbba 	bl	8001e88 <_write>
 8006714:	1c43      	adds	r3, r0, #1
 8006716:	d102      	bne.n	800671e <_write_r+0x1e>
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	b103      	cbz	r3, 800671e <_write_r+0x1e>
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	bd38      	pop	{r3, r4, r5, pc}
 8006720:	200007e4 	.word	0x200007e4

08006724 <__errno>:
 8006724:	4b01      	ldr	r3, [pc, #4]	@ (800672c <__errno+0x8>)
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000018 	.word	0x20000018

08006730 <__libc_init_array>:
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	4d0d      	ldr	r5, [pc, #52]	@ (8006768 <__libc_init_array+0x38>)
 8006734:	4c0d      	ldr	r4, [pc, #52]	@ (800676c <__libc_init_array+0x3c>)
 8006736:	1b64      	subs	r4, r4, r5
 8006738:	10a4      	asrs	r4, r4, #2
 800673a:	2600      	movs	r6, #0
 800673c:	42a6      	cmp	r6, r4
 800673e:	d109      	bne.n	8006754 <__libc_init_array+0x24>
 8006740:	4d0b      	ldr	r5, [pc, #44]	@ (8006770 <__libc_init_array+0x40>)
 8006742:	4c0c      	ldr	r4, [pc, #48]	@ (8006774 <__libc_init_array+0x44>)
 8006744:	f003 fa00 	bl	8009b48 <_init>
 8006748:	1b64      	subs	r4, r4, r5
 800674a:	10a4      	asrs	r4, r4, #2
 800674c:	2600      	movs	r6, #0
 800674e:	42a6      	cmp	r6, r4
 8006750:	d105      	bne.n	800675e <__libc_init_array+0x2e>
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	f855 3b04 	ldr.w	r3, [r5], #4
 8006758:	4798      	blx	r3
 800675a:	3601      	adds	r6, #1
 800675c:	e7ee      	b.n	800673c <__libc_init_array+0xc>
 800675e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006762:	4798      	blx	r3
 8006764:	3601      	adds	r6, #1
 8006766:	e7f2      	b.n	800674e <__libc_init_array+0x1e>
 8006768:	0800a6f4 	.word	0x0800a6f4
 800676c:	0800a6f4 	.word	0x0800a6f4
 8006770:	0800a6f4 	.word	0x0800a6f4
 8006774:	0800a6f8 	.word	0x0800a6f8

08006778 <__retarget_lock_init_recursive>:
 8006778:	4770      	bx	lr

0800677a <__retarget_lock_close_recursive>:
 800677a:	4770      	bx	lr

0800677c <__retarget_lock_acquire_recursive>:
 800677c:	4770      	bx	lr

0800677e <__retarget_lock_release_recursive>:
 800677e:	4770      	bx	lr

08006780 <memcpy>:
 8006780:	440a      	add	r2, r1
 8006782:	4291      	cmp	r1, r2
 8006784:	f100 33ff 	add.w	r3, r0, #4294967295
 8006788:	d100      	bne.n	800678c <memcpy+0xc>
 800678a:	4770      	bx	lr
 800678c:	b510      	push	{r4, lr}
 800678e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006792:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006796:	4291      	cmp	r1, r2
 8006798:	d1f9      	bne.n	800678e <memcpy+0xe>
 800679a:	bd10      	pop	{r4, pc}

0800679c <nanf>:
 800679c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80067a4 <nanf+0x8>
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	7fc00000 	.word	0x7fc00000

080067a8 <__assert_func>:
 80067a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067aa:	4614      	mov	r4, r2
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b09      	ldr	r3, [pc, #36]	@ (80067d4 <__assert_func+0x2c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4605      	mov	r5, r0
 80067b4:	68d8      	ldr	r0, [r3, #12]
 80067b6:	b954      	cbnz	r4, 80067ce <__assert_func+0x26>
 80067b8:	4b07      	ldr	r3, [pc, #28]	@ (80067d8 <__assert_func+0x30>)
 80067ba:	461c      	mov	r4, r3
 80067bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067c0:	9100      	str	r1, [sp, #0]
 80067c2:	462b      	mov	r3, r5
 80067c4:	4905      	ldr	r1, [pc, #20]	@ (80067dc <__assert_func+0x34>)
 80067c6:	f002 fce5 	bl	8009194 <fiprintf>
 80067ca:	f002 fdd1 	bl	8009370 <abort>
 80067ce:	4b04      	ldr	r3, [pc, #16]	@ (80067e0 <__assert_func+0x38>)
 80067d0:	e7f4      	b.n	80067bc <__assert_func+0x14>
 80067d2:	bf00      	nop
 80067d4:	20000018 	.word	0x20000018
 80067d8:	0800a44a 	.word	0x0800a44a
 80067dc:	0800a41c 	.word	0x0800a41c
 80067e0:	0800a40f 	.word	0x0800a40f

080067e4 <quorem>:
 80067e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	6903      	ldr	r3, [r0, #16]
 80067ea:	690c      	ldr	r4, [r1, #16]
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	4607      	mov	r7, r0
 80067f0:	db7e      	blt.n	80068f0 <quorem+0x10c>
 80067f2:	3c01      	subs	r4, #1
 80067f4:	f101 0814 	add.w	r8, r1, #20
 80067f8:	00a3      	lsls	r3, r4, #2
 80067fa:	f100 0514 	add.w	r5, r0, #20
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800680a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800680e:	3301      	adds	r3, #1
 8006810:	429a      	cmp	r2, r3
 8006812:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006816:	fbb2 f6f3 	udiv	r6, r2, r3
 800681a:	d32e      	bcc.n	800687a <quorem+0x96>
 800681c:	f04f 0a00 	mov.w	sl, #0
 8006820:	46c4      	mov	ip, r8
 8006822:	46ae      	mov	lr, r5
 8006824:	46d3      	mov	fp, sl
 8006826:	f85c 3b04 	ldr.w	r3, [ip], #4
 800682a:	b298      	uxth	r0, r3
 800682c:	fb06 a000 	mla	r0, r6, r0, sl
 8006830:	0c02      	lsrs	r2, r0, #16
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	fb06 2303 	mla	r3, r6, r3, r2
 8006838:	f8de 2000 	ldr.w	r2, [lr]
 800683c:	b280      	uxth	r0, r0
 800683e:	b292      	uxth	r2, r2
 8006840:	1a12      	subs	r2, r2, r0
 8006842:	445a      	add	r2, fp
 8006844:	f8de 0000 	ldr.w	r0, [lr]
 8006848:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800684c:	b29b      	uxth	r3, r3
 800684e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006852:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006856:	b292      	uxth	r2, r2
 8006858:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800685c:	45e1      	cmp	r9, ip
 800685e:	f84e 2b04 	str.w	r2, [lr], #4
 8006862:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006866:	d2de      	bcs.n	8006826 <quorem+0x42>
 8006868:	9b00      	ldr	r3, [sp, #0]
 800686a:	58eb      	ldr	r3, [r5, r3]
 800686c:	b92b      	cbnz	r3, 800687a <quorem+0x96>
 800686e:	9b01      	ldr	r3, [sp, #4]
 8006870:	3b04      	subs	r3, #4
 8006872:	429d      	cmp	r5, r3
 8006874:	461a      	mov	r2, r3
 8006876:	d32f      	bcc.n	80068d8 <quorem+0xf4>
 8006878:	613c      	str	r4, [r7, #16]
 800687a:	4638      	mov	r0, r7
 800687c:	f001 f9c4 	bl	8007c08 <__mcmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	db25      	blt.n	80068d0 <quorem+0xec>
 8006884:	4629      	mov	r1, r5
 8006886:	2000      	movs	r0, #0
 8006888:	f858 2b04 	ldr.w	r2, [r8], #4
 800688c:	f8d1 c000 	ldr.w	ip, [r1]
 8006890:	fa1f fe82 	uxth.w	lr, r2
 8006894:	fa1f f38c 	uxth.w	r3, ip
 8006898:	eba3 030e 	sub.w	r3, r3, lr
 800689c:	4403      	add	r3, r0
 800689e:	0c12      	lsrs	r2, r2, #16
 80068a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068ae:	45c1      	cmp	r9, r8
 80068b0:	f841 3b04 	str.w	r3, [r1], #4
 80068b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068b8:	d2e6      	bcs.n	8006888 <quorem+0xa4>
 80068ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068c2:	b922      	cbnz	r2, 80068ce <quorem+0xea>
 80068c4:	3b04      	subs	r3, #4
 80068c6:	429d      	cmp	r5, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	d30b      	bcc.n	80068e4 <quorem+0x100>
 80068cc:	613c      	str	r4, [r7, #16]
 80068ce:	3601      	adds	r6, #1
 80068d0:	4630      	mov	r0, r6
 80068d2:	b003      	add	sp, #12
 80068d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	3b04      	subs	r3, #4
 80068dc:	2a00      	cmp	r2, #0
 80068de:	d1cb      	bne.n	8006878 <quorem+0x94>
 80068e0:	3c01      	subs	r4, #1
 80068e2:	e7c6      	b.n	8006872 <quorem+0x8e>
 80068e4:	6812      	ldr	r2, [r2, #0]
 80068e6:	3b04      	subs	r3, #4
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	d1ef      	bne.n	80068cc <quorem+0xe8>
 80068ec:	3c01      	subs	r4, #1
 80068ee:	e7ea      	b.n	80068c6 <quorem+0xe2>
 80068f0:	2000      	movs	r0, #0
 80068f2:	e7ee      	b.n	80068d2 <quorem+0xee>
 80068f4:	0000      	movs	r0, r0
	...

080068f8 <_dtoa_r>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	69c7      	ldr	r7, [r0, #28]
 80068fe:	b099      	sub	sp, #100	@ 0x64
 8006900:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006904:	ec55 4b10 	vmov	r4, r5, d0
 8006908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800690a:	9109      	str	r1, [sp, #36]	@ 0x24
 800690c:	4683      	mov	fp, r0
 800690e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006912:	b97f      	cbnz	r7, 8006934 <_dtoa_r+0x3c>
 8006914:	2010      	movs	r0, #16
 8006916:	f000 fdfd 	bl	8007514 <malloc>
 800691a:	4602      	mov	r2, r0
 800691c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006920:	b920      	cbnz	r0, 800692c <_dtoa_r+0x34>
 8006922:	4ba7      	ldr	r3, [pc, #668]	@ (8006bc0 <_dtoa_r+0x2c8>)
 8006924:	21ef      	movs	r1, #239	@ 0xef
 8006926:	48a7      	ldr	r0, [pc, #668]	@ (8006bc4 <_dtoa_r+0x2cc>)
 8006928:	f7ff ff3e 	bl	80067a8 <__assert_func>
 800692c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006930:	6007      	str	r7, [r0, #0]
 8006932:	60c7      	str	r7, [r0, #12]
 8006934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006938:	6819      	ldr	r1, [r3, #0]
 800693a:	b159      	cbz	r1, 8006954 <_dtoa_r+0x5c>
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	604a      	str	r2, [r1, #4]
 8006940:	2301      	movs	r3, #1
 8006942:	4093      	lsls	r3, r2
 8006944:	608b      	str	r3, [r1, #8]
 8006946:	4658      	mov	r0, fp
 8006948:	f000 feda 	bl	8007700 <_Bfree>
 800694c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	1e2b      	subs	r3, r5, #0
 8006956:	bfb9      	ittee	lt
 8006958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800695c:	9303      	strlt	r3, [sp, #12]
 800695e:	2300      	movge	r3, #0
 8006960:	6033      	strge	r3, [r6, #0]
 8006962:	9f03      	ldr	r7, [sp, #12]
 8006964:	4b98      	ldr	r3, [pc, #608]	@ (8006bc8 <_dtoa_r+0x2d0>)
 8006966:	bfbc      	itt	lt
 8006968:	2201      	movlt	r2, #1
 800696a:	6032      	strlt	r2, [r6, #0]
 800696c:	43bb      	bics	r3, r7
 800696e:	d112      	bne.n	8006996 <_dtoa_r+0x9e>
 8006970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800697c:	4323      	orrs	r3, r4
 800697e:	f000 854d 	beq.w	800741c <_dtoa_r+0xb24>
 8006982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006bdc <_dtoa_r+0x2e4>
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 854f 	beq.w	800742c <_dtoa_r+0xb34>
 800698e:	f10a 0303 	add.w	r3, sl, #3
 8006992:	f000 bd49 	b.w	8007428 <_dtoa_r+0xb30>
 8006996:	ed9d 7b02 	vldr	d7, [sp, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	ec51 0b17 	vmov	r0, r1, d7
 80069a0:	2300      	movs	r3, #0
 80069a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80069a6:	f7fa f8af 	bl	8000b08 <__aeabi_dcmpeq>
 80069aa:	4680      	mov	r8, r0
 80069ac:	b158      	cbz	r0, 80069c6 <_dtoa_r+0xce>
 80069ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069b0:	2301      	movs	r3, #1
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069b6:	b113      	cbz	r3, 80069be <_dtoa_r+0xc6>
 80069b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069ba:	4b84      	ldr	r3, [pc, #528]	@ (8006bcc <_dtoa_r+0x2d4>)
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006be0 <_dtoa_r+0x2e8>
 80069c2:	f000 bd33 	b.w	800742c <_dtoa_r+0xb34>
 80069c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80069ca:	aa16      	add	r2, sp, #88	@ 0x58
 80069cc:	a917      	add	r1, sp, #92	@ 0x5c
 80069ce:	4658      	mov	r0, fp
 80069d0:	f001 fa3a 	bl	8007e48 <__d2b>
 80069d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80069d8:	4681      	mov	r9, r0
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d077      	beq.n	8006ace <_dtoa_r+0x1d6>
 80069de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80069e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069f8:	4619      	mov	r1, r3
 80069fa:	2200      	movs	r2, #0
 80069fc:	4b74      	ldr	r3, [pc, #464]	@ (8006bd0 <_dtoa_r+0x2d8>)
 80069fe:	f7f9 fc63 	bl	80002c8 <__aeabi_dsub>
 8006a02:	a369      	add	r3, pc, #420	@ (adr r3, 8006ba8 <_dtoa_r+0x2b0>)
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f7f9 fe16 	bl	8000638 <__aeabi_dmul>
 8006a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8006bb0 <_dtoa_r+0x2b8>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fc5b 	bl	80002cc <__adddf3>
 8006a16:	4604      	mov	r4, r0
 8006a18:	4630      	mov	r0, r6
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	f7f9 fda2 	bl	8000564 <__aeabi_i2d>
 8006a20:	a365      	add	r3, pc, #404	@ (adr r3, 8006bb8 <_dtoa_r+0x2c0>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 fe07 	bl	8000638 <__aeabi_dmul>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4620      	mov	r0, r4
 8006a30:	4629      	mov	r1, r5
 8006a32:	f7f9 fc4b 	bl	80002cc <__adddf3>
 8006a36:	4604      	mov	r4, r0
 8006a38:	460d      	mov	r5, r1
 8006a3a:	f7fa f8ad 	bl	8000b98 <__aeabi_d2iz>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4607      	mov	r7, r0
 8006a42:	2300      	movs	r3, #0
 8006a44:	4620      	mov	r0, r4
 8006a46:	4629      	mov	r1, r5
 8006a48:	f7fa f868 	bl	8000b1c <__aeabi_dcmplt>
 8006a4c:	b140      	cbz	r0, 8006a60 <_dtoa_r+0x168>
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f7f9 fd88 	bl	8000564 <__aeabi_i2d>
 8006a54:	4622      	mov	r2, r4
 8006a56:	462b      	mov	r3, r5
 8006a58:	f7fa f856 	bl	8000b08 <__aeabi_dcmpeq>
 8006a5c:	b900      	cbnz	r0, 8006a60 <_dtoa_r+0x168>
 8006a5e:	3f01      	subs	r7, #1
 8006a60:	2f16      	cmp	r7, #22
 8006a62:	d851      	bhi.n	8006b08 <_dtoa_r+0x210>
 8006a64:	4b5b      	ldr	r3, [pc, #364]	@ (8006bd4 <_dtoa_r+0x2dc>)
 8006a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a72:	f7fa f853 	bl	8000b1c <__aeabi_dcmplt>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d048      	beq.n	8006b0c <_dtoa_r+0x214>
 8006a7a:	3f01      	subs	r7, #1
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006a80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a82:	1b9b      	subs	r3, r3, r6
 8006a84:	1e5a      	subs	r2, r3, #1
 8006a86:	bf44      	itt	mi
 8006a88:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a8c:	2300      	movmi	r3, #0
 8006a8e:	9208      	str	r2, [sp, #32]
 8006a90:	bf54      	ite	pl
 8006a92:	f04f 0800 	movpl.w	r8, #0
 8006a96:	9308      	strmi	r3, [sp, #32]
 8006a98:	2f00      	cmp	r7, #0
 8006a9a:	db39      	blt.n	8006b10 <_dtoa_r+0x218>
 8006a9c:	9b08      	ldr	r3, [sp, #32]
 8006a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006aa0:	443b      	add	r3, r7
 8006aa2:	9308      	str	r3, [sp, #32]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aaa:	2b09      	cmp	r3, #9
 8006aac:	d864      	bhi.n	8006b78 <_dtoa_r+0x280>
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	bfc4      	itt	gt
 8006ab2:	3b04      	subgt	r3, #4
 8006ab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8006abc:	bfcc      	ite	gt
 8006abe:	2400      	movgt	r4, #0
 8006ac0:	2401      	movle	r4, #1
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d863      	bhi.n	8006b8e <_dtoa_r+0x296>
 8006ac6:	e8df f003 	tbb	[pc, r3]
 8006aca:	372a      	.short	0x372a
 8006acc:	5535      	.short	0x5535
 8006ace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006ad2:	441e      	add	r6, r3
 8006ad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	bfc1      	itttt	gt
 8006adc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ae0:	409f      	lslgt	r7, r3
 8006ae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006aea:	bfd6      	itet	le
 8006aec:	f1c3 0320 	rsble	r3, r3, #32
 8006af0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006af4:	fa04 f003 	lslle.w	r0, r4, r3
 8006af8:	f7f9 fd24 	bl	8000544 <__aeabi_ui2d>
 8006afc:	2201      	movs	r2, #1
 8006afe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b02:	3e01      	subs	r6, #1
 8006b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b06:	e777      	b.n	80069f8 <_dtoa_r+0x100>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e7b8      	b.n	8006a7e <_dtoa_r+0x186>
 8006b0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b0e:	e7b7      	b.n	8006a80 <_dtoa_r+0x188>
 8006b10:	427b      	negs	r3, r7
 8006b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b14:	2300      	movs	r3, #0
 8006b16:	eba8 0807 	sub.w	r8, r8, r7
 8006b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b1c:	e7c4      	b.n	8006aa8 <_dtoa_r+0x1b0>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dc35      	bgt.n	8006b94 <_dtoa_r+0x29c>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	9307      	str	r3, [sp, #28]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b32:	e00b      	b.n	8006b4c <_dtoa_r+0x254>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e7f3      	b.n	8006b20 <_dtoa_r+0x228>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	3301      	adds	r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	9307      	str	r3, [sp, #28]
 8006b48:	bfb8      	it	lt
 8006b4a:	2301      	movlt	r3, #1
 8006b4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b50:	2100      	movs	r1, #0
 8006b52:	2204      	movs	r2, #4
 8006b54:	f102 0514 	add.w	r5, r2, #20
 8006b58:	429d      	cmp	r5, r3
 8006b5a:	d91f      	bls.n	8006b9c <_dtoa_r+0x2a4>
 8006b5c:	6041      	str	r1, [r0, #4]
 8006b5e:	4658      	mov	r0, fp
 8006b60:	f000 fd8e 	bl	8007680 <_Balloc>
 8006b64:	4682      	mov	sl, r0
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d13c      	bne.n	8006be4 <_dtoa_r+0x2ec>
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd8 <_dtoa_r+0x2e0>)
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b72:	e6d8      	b.n	8006926 <_dtoa_r+0x2e>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e7e0      	b.n	8006b3a <_dtoa_r+0x242>
 8006b78:	2401      	movs	r4, #1
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2312      	movs	r3, #18
 8006b8c:	e7d0      	b.n	8006b30 <_dtoa_r+0x238>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b92:	e7f5      	b.n	8006b80 <_dtoa_r+0x288>
 8006b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	9307      	str	r3, [sp, #28]
 8006b9a:	e7d7      	b.n	8006b4c <_dtoa_r+0x254>
 8006b9c:	3101      	adds	r1, #1
 8006b9e:	0052      	lsls	r2, r2, #1
 8006ba0:	e7d8      	b.n	8006b54 <_dtoa_r+0x25c>
 8006ba2:	bf00      	nop
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	636f4361 	.word	0x636f4361
 8006bac:	3fd287a7 	.word	0x3fd287a7
 8006bb0:	8b60c8b3 	.word	0x8b60c8b3
 8006bb4:	3fc68a28 	.word	0x3fc68a28
 8006bb8:	509f79fb 	.word	0x509f79fb
 8006bbc:	3fd34413 	.word	0x3fd34413
 8006bc0:	0800a39e 	.word	0x0800a39e
 8006bc4:	0800a458 	.word	0x0800a458
 8006bc8:	7ff00000 	.word	0x7ff00000
 8006bcc:	0800a376 	.word	0x0800a376
 8006bd0:	3ff80000 	.word	0x3ff80000
 8006bd4:	0800a550 	.word	0x0800a550
 8006bd8:	0800a4b0 	.word	0x0800a4b0
 8006bdc:	0800a454 	.word	0x0800a454
 8006be0:	0800a375 	.word	0x0800a375
 8006be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006be8:	6018      	str	r0, [r3, #0]
 8006bea:	9b07      	ldr	r3, [sp, #28]
 8006bec:	2b0e      	cmp	r3, #14
 8006bee:	f200 80a4 	bhi.w	8006d3a <_dtoa_r+0x442>
 8006bf2:	2c00      	cmp	r4, #0
 8006bf4:	f000 80a1 	beq.w	8006d3a <_dtoa_r+0x442>
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	dd33      	ble.n	8006c64 <_dtoa_r+0x36c>
 8006bfc:	4bad      	ldr	r3, [pc, #692]	@ (8006eb4 <_dtoa_r+0x5bc>)
 8006bfe:	f007 020f 	and.w	r2, r7, #15
 8006c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c06:	ed93 7b00 	vldr	d7, [r3]
 8006c0a:	05f8      	lsls	r0, r7, #23
 8006c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c14:	d516      	bpl.n	8006c44 <_dtoa_r+0x34c>
 8006c16:	4ba8      	ldr	r3, [pc, #672]	@ (8006eb8 <_dtoa_r+0x5c0>)
 8006c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c20:	f7f9 fe34 	bl	800088c <__aeabi_ddiv>
 8006c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c28:	f004 040f 	and.w	r4, r4, #15
 8006c2c:	2603      	movs	r6, #3
 8006c2e:	4da2      	ldr	r5, [pc, #648]	@ (8006eb8 <_dtoa_r+0x5c0>)
 8006c30:	b954      	cbnz	r4, 8006c48 <_dtoa_r+0x350>
 8006c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c3a:	f7f9 fe27 	bl	800088c <__aeabi_ddiv>
 8006c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c42:	e028      	b.n	8006c96 <_dtoa_r+0x39e>
 8006c44:	2602      	movs	r6, #2
 8006c46:	e7f2      	b.n	8006c2e <_dtoa_r+0x336>
 8006c48:	07e1      	lsls	r1, r4, #31
 8006c4a:	d508      	bpl.n	8006c5e <_dtoa_r+0x366>
 8006c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c54:	f7f9 fcf0 	bl	8000638 <__aeabi_dmul>
 8006c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	1064      	asrs	r4, r4, #1
 8006c60:	3508      	adds	r5, #8
 8006c62:	e7e5      	b.n	8006c30 <_dtoa_r+0x338>
 8006c64:	f000 80d2 	beq.w	8006e0c <_dtoa_r+0x514>
 8006c68:	427c      	negs	r4, r7
 8006c6a:	4b92      	ldr	r3, [pc, #584]	@ (8006eb4 <_dtoa_r+0x5bc>)
 8006c6c:	4d92      	ldr	r5, [pc, #584]	@ (8006eb8 <_dtoa_r+0x5c0>)
 8006c6e:	f004 020f 	and.w	r2, r4, #15
 8006c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c7e:	f7f9 fcdb 	bl	8000638 <__aeabi_dmul>
 8006c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c86:	1124      	asrs	r4, r4, #4
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2602      	movs	r6, #2
 8006c8c:	2c00      	cmp	r4, #0
 8006c8e:	f040 80b2 	bne.w	8006df6 <_dtoa_r+0x4fe>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1d3      	bne.n	8006c3e <_dtoa_r+0x346>
 8006c96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80b7 	beq.w	8006e10 <_dtoa_r+0x518>
 8006ca2:	4b86      	ldr	r3, [pc, #536]	@ (8006ebc <_dtoa_r+0x5c4>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 ff37 	bl	8000b1c <__aeabi_dcmplt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f000 80ae 	beq.w	8006e10 <_dtoa_r+0x518>
 8006cb4:	9b07      	ldr	r3, [sp, #28]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 80aa 	beq.w	8006e10 <_dtoa_r+0x518>
 8006cbc:	9b00      	ldr	r3, [sp, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd37      	ble.n	8006d32 <_dtoa_r+0x43a>
 8006cc2:	1e7b      	subs	r3, r7, #1
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ec0 <_dtoa_r+0x5c8>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4629      	mov	r1, r5
 8006cce:	f7f9 fcb3 	bl	8000638 <__aeabi_dmul>
 8006cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd6:	9c00      	ldr	r4, [sp, #0]
 8006cd8:	3601      	adds	r6, #1
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7f9 fc42 	bl	8000564 <__aeabi_i2d>
 8006ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce4:	f7f9 fca8 	bl	8000638 <__aeabi_dmul>
 8006ce8:	4b76      	ldr	r3, [pc, #472]	@ (8006ec4 <_dtoa_r+0x5cc>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	f7f9 faee 	bl	80002cc <__adddf3>
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cf6:	2c00      	cmp	r4, #0
 8006cf8:	f040 808d 	bne.w	8006e16 <_dtoa_r+0x51e>
 8006cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d00:	4b71      	ldr	r3, [pc, #452]	@ (8006ec8 <_dtoa_r+0x5d0>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	f7f9 fae0 	bl	80002c8 <__aeabi_dsub>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d10:	462a      	mov	r2, r5
 8006d12:	4633      	mov	r3, r6
 8006d14:	f7f9 ff20 	bl	8000b58 <__aeabi_dcmpgt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	f040 828b 	bne.w	8007234 <_dtoa_r+0x93c>
 8006d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d22:	462a      	mov	r2, r5
 8006d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d28:	f7f9 fef8 	bl	8000b1c <__aeabi_dcmplt>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f040 8128 	bne.w	8006f82 <_dtoa_r+0x68a>
 8006d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f2c0 815a 	blt.w	8006ff6 <_dtoa_r+0x6fe>
 8006d42:	2f0e      	cmp	r7, #14
 8006d44:	f300 8157 	bgt.w	8006ff6 <_dtoa_r+0x6fe>
 8006d48:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb4 <_dtoa_r+0x5bc>)
 8006d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d4e:	ed93 7b00 	vldr	d7, [r3]
 8006d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	ed8d 7b00 	vstr	d7, [sp]
 8006d5a:	da03      	bge.n	8006d64 <_dtoa_r+0x46c>
 8006d5c:	9b07      	ldr	r3, [sp, #28]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f340 8101 	ble.w	8006f66 <_dtoa_r+0x66e>
 8006d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d68:	4656      	mov	r6, sl
 8006d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7f9 fd8b 	bl	800088c <__aeabi_ddiv>
 8006d76:	f7f9 ff0f 	bl	8000b98 <__aeabi_d2iz>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	f7f9 fbf2 	bl	8000564 <__aeabi_i2d>
 8006d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d84:	f7f9 fc58 	bl	8000638 <__aeabi_dmul>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d94:	f7f9 fa98 	bl	80002c8 <__aeabi_dsub>
 8006d98:	f806 4b01 	strb.w	r4, [r6], #1
 8006d9c:	9d07      	ldr	r5, [sp, #28]
 8006d9e:	eba6 040a 	sub.w	r4, r6, sl
 8006da2:	42a5      	cmp	r5, r4
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	f040 8117 	bne.w	8006fda <_dtoa_r+0x6e2>
 8006dac:	f7f9 fa8e 	bl	80002cc <__adddf3>
 8006db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	f7f9 fece 	bl	8000b58 <__aeabi_dcmpgt>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f040 80f9 	bne.w	8006fb4 <_dtoa_r+0x6bc>
 8006dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fe9d 	bl	8000b08 <__aeabi_dcmpeq>
 8006dce:	b118      	cbz	r0, 8006dd8 <_dtoa_r+0x4e0>
 8006dd0:	f018 0f01 	tst.w	r8, #1
 8006dd4:	f040 80ee 	bne.w	8006fb4 <_dtoa_r+0x6bc>
 8006dd8:	4649      	mov	r1, r9
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fc90 	bl	8007700 <_Bfree>
 8006de0:	2300      	movs	r3, #0
 8006de2:	7033      	strb	r3, [r6, #0]
 8006de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006de6:	3701      	adds	r7, #1
 8006de8:	601f      	str	r7, [r3, #0]
 8006dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 831d 	beq.w	800742c <_dtoa_r+0xb34>
 8006df2:	601e      	str	r6, [r3, #0]
 8006df4:	e31a      	b.n	800742c <_dtoa_r+0xb34>
 8006df6:	07e2      	lsls	r2, r4, #31
 8006df8:	d505      	bpl.n	8006e06 <_dtoa_r+0x50e>
 8006dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dfe:	f7f9 fc1b 	bl	8000638 <__aeabi_dmul>
 8006e02:	3601      	adds	r6, #1
 8006e04:	2301      	movs	r3, #1
 8006e06:	1064      	asrs	r4, r4, #1
 8006e08:	3508      	adds	r5, #8
 8006e0a:	e73f      	b.n	8006c8c <_dtoa_r+0x394>
 8006e0c:	2602      	movs	r6, #2
 8006e0e:	e742      	b.n	8006c96 <_dtoa_r+0x39e>
 8006e10:	9c07      	ldr	r4, [sp, #28]
 8006e12:	9704      	str	r7, [sp, #16]
 8006e14:	e761      	b.n	8006cda <_dtoa_r+0x3e2>
 8006e16:	4b27      	ldr	r3, [pc, #156]	@ (8006eb4 <_dtoa_r+0x5bc>)
 8006e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e22:	4454      	add	r4, sl
 8006e24:	2900      	cmp	r1, #0
 8006e26:	d053      	beq.n	8006ed0 <_dtoa_r+0x5d8>
 8006e28:	4928      	ldr	r1, [pc, #160]	@ (8006ecc <_dtoa_r+0x5d4>)
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	f7f9 fd2e 	bl	800088c <__aeabi_ddiv>
 8006e30:	4633      	mov	r3, r6
 8006e32:	462a      	mov	r2, r5
 8006e34:	f7f9 fa48 	bl	80002c8 <__aeabi_dsub>
 8006e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e3c:	4656      	mov	r6, sl
 8006e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e42:	f7f9 fea9 	bl	8000b98 <__aeabi_d2iz>
 8006e46:	4605      	mov	r5, r0
 8006e48:	f7f9 fb8c 	bl	8000564 <__aeabi_i2d>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e54:	f7f9 fa38 	bl	80002c8 <__aeabi_dsub>
 8006e58:	3530      	adds	r5, #48	@ 0x30
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e62:	f806 5b01 	strb.w	r5, [r6], #1
 8006e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e6a:	f7f9 fe57 	bl	8000b1c <__aeabi_dcmplt>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d171      	bne.n	8006f56 <_dtoa_r+0x65e>
 8006e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e76:	4911      	ldr	r1, [pc, #68]	@ (8006ebc <_dtoa_r+0x5c4>)
 8006e78:	2000      	movs	r0, #0
 8006e7a:	f7f9 fa25 	bl	80002c8 <__aeabi_dsub>
 8006e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e82:	f7f9 fe4b 	bl	8000b1c <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	f040 8095 	bne.w	8006fb6 <_dtoa_r+0x6be>
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	f43f af50 	beq.w	8006d32 <_dtoa_r+0x43a>
 8006e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec0 <_dtoa_r+0x5c8>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f7f9 fbcd 	bl	8000638 <__aeabi_dmul>
 8006e9e:	4b08      	ldr	r3, [pc, #32]	@ (8006ec0 <_dtoa_r+0x5c8>)
 8006ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eaa:	f7f9 fbc5 	bl	8000638 <__aeabi_dmul>
 8006eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb2:	e7c4      	b.n	8006e3e <_dtoa_r+0x546>
 8006eb4:	0800a550 	.word	0x0800a550
 8006eb8:	0800a528 	.word	0x0800a528
 8006ebc:	3ff00000 	.word	0x3ff00000
 8006ec0:	40240000 	.word	0x40240000
 8006ec4:	401c0000 	.word	0x401c0000
 8006ec8:	40140000 	.word	0x40140000
 8006ecc:	3fe00000 	.word	0x3fe00000
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7f9 fbb0 	bl	8000638 <__aeabi_dmul>
 8006ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006edc:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ede:	4656      	mov	r6, sl
 8006ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee4:	f7f9 fe58 	bl	8000b98 <__aeabi_d2iz>
 8006ee8:	4605      	mov	r5, r0
 8006eea:	f7f9 fb3b 	bl	8000564 <__aeabi_i2d>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef6:	f7f9 f9e7 	bl	80002c8 <__aeabi_dsub>
 8006efa:	3530      	adds	r5, #48	@ 0x30
 8006efc:	f806 5b01 	strb.w	r5, [r6], #1
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	42a6      	cmp	r6, r4
 8006f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	d124      	bne.n	8006f5a <_dtoa_r+0x662>
 8006f10:	4bac      	ldr	r3, [pc, #688]	@ (80071c4 <_dtoa_r+0x8cc>)
 8006f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f16:	f7f9 f9d9 	bl	80002cc <__adddf3>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f22:	f7f9 fe19 	bl	8000b58 <__aeabi_dcmpgt>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d145      	bne.n	8006fb6 <_dtoa_r+0x6be>
 8006f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f2e:	49a5      	ldr	r1, [pc, #660]	@ (80071c4 <_dtoa_r+0x8cc>)
 8006f30:	2000      	movs	r0, #0
 8006f32:	f7f9 f9c9 	bl	80002c8 <__aeabi_dsub>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f3e:	f7f9 fded 	bl	8000b1c <__aeabi_dcmplt>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f43f aef5 	beq.w	8006d32 <_dtoa_r+0x43a>
 8006f48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f4a:	1e73      	subs	r3, r6, #1
 8006f4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f52:	2b30      	cmp	r3, #48	@ 0x30
 8006f54:	d0f8      	beq.n	8006f48 <_dtoa_r+0x650>
 8006f56:	9f04      	ldr	r7, [sp, #16]
 8006f58:	e73e      	b.n	8006dd8 <_dtoa_r+0x4e0>
 8006f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80071c8 <_dtoa_r+0x8d0>)
 8006f5c:	f7f9 fb6c 	bl	8000638 <__aeabi_dmul>
 8006f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f64:	e7bc      	b.n	8006ee0 <_dtoa_r+0x5e8>
 8006f66:	d10c      	bne.n	8006f82 <_dtoa_r+0x68a>
 8006f68:	4b98      	ldr	r3, [pc, #608]	@ (80071cc <_dtoa_r+0x8d4>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f70:	f7f9 fb62 	bl	8000638 <__aeabi_dmul>
 8006f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f78:	f7f9 fde4 	bl	8000b44 <__aeabi_dcmpge>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f000 8157 	beq.w	8007230 <_dtoa_r+0x938>
 8006f82:	2400      	movs	r4, #0
 8006f84:	4625      	mov	r5, r4
 8006f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	4656      	mov	r6, sl
 8006f8e:	2700      	movs	r7, #0
 8006f90:	4621      	mov	r1, r4
 8006f92:	4658      	mov	r0, fp
 8006f94:	f000 fbb4 	bl	8007700 <_Bfree>
 8006f98:	2d00      	cmp	r5, #0
 8006f9a:	d0dc      	beq.n	8006f56 <_dtoa_r+0x65e>
 8006f9c:	b12f      	cbz	r7, 8006faa <_dtoa_r+0x6b2>
 8006f9e:	42af      	cmp	r7, r5
 8006fa0:	d003      	beq.n	8006faa <_dtoa_r+0x6b2>
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	4658      	mov	r0, fp
 8006fa6:	f000 fbab 	bl	8007700 <_Bfree>
 8006faa:	4629      	mov	r1, r5
 8006fac:	4658      	mov	r0, fp
 8006fae:	f000 fba7 	bl	8007700 <_Bfree>
 8006fb2:	e7d0      	b.n	8006f56 <_dtoa_r+0x65e>
 8006fb4:	9704      	str	r7, [sp, #16]
 8006fb6:	4633      	mov	r3, r6
 8006fb8:	461e      	mov	r6, r3
 8006fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fbe:	2a39      	cmp	r2, #57	@ 0x39
 8006fc0:	d107      	bne.n	8006fd2 <_dtoa_r+0x6da>
 8006fc2:	459a      	cmp	sl, r3
 8006fc4:	d1f8      	bne.n	8006fb8 <_dtoa_r+0x6c0>
 8006fc6:	9a04      	ldr	r2, [sp, #16]
 8006fc8:	3201      	adds	r2, #1
 8006fca:	9204      	str	r2, [sp, #16]
 8006fcc:	2230      	movs	r2, #48	@ 0x30
 8006fce:	f88a 2000 	strb.w	r2, [sl]
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	3201      	adds	r2, #1
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e7bd      	b.n	8006f56 <_dtoa_r+0x65e>
 8006fda:	4b7b      	ldr	r3, [pc, #492]	@ (80071c8 <_dtoa_r+0x8d0>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f7f9 fb2b 	bl	8000638 <__aeabi_dmul>
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	460d      	mov	r5, r1
 8006fea:	f7f9 fd8d 	bl	8000b08 <__aeabi_dcmpeq>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f aebb 	beq.w	8006d6a <_dtoa_r+0x472>
 8006ff4:	e6f0      	b.n	8006dd8 <_dtoa_r+0x4e0>
 8006ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ff8:	2a00      	cmp	r2, #0
 8006ffa:	f000 80db 	beq.w	80071b4 <_dtoa_r+0x8bc>
 8006ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007000:	2a01      	cmp	r2, #1
 8007002:	f300 80bf 	bgt.w	8007184 <_dtoa_r+0x88c>
 8007006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007008:	2a00      	cmp	r2, #0
 800700a:	f000 80b7 	beq.w	800717c <_dtoa_r+0x884>
 800700e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007014:	4646      	mov	r6, r8
 8007016:	9a08      	ldr	r2, [sp, #32]
 8007018:	2101      	movs	r1, #1
 800701a:	441a      	add	r2, r3
 800701c:	4658      	mov	r0, fp
 800701e:	4498      	add	r8, r3
 8007020:	9208      	str	r2, [sp, #32]
 8007022:	f000 fc6b 	bl	80078fc <__i2b>
 8007026:	4605      	mov	r5, r0
 8007028:	b15e      	cbz	r6, 8007042 <_dtoa_r+0x74a>
 800702a:	9b08      	ldr	r3, [sp, #32]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dd08      	ble.n	8007042 <_dtoa_r+0x74a>
 8007030:	42b3      	cmp	r3, r6
 8007032:	9a08      	ldr	r2, [sp, #32]
 8007034:	bfa8      	it	ge
 8007036:	4633      	movge	r3, r6
 8007038:	eba8 0803 	sub.w	r8, r8, r3
 800703c:	1af6      	subs	r6, r6, r3
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	9308      	str	r3, [sp, #32]
 8007042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007044:	b1f3      	cbz	r3, 8007084 <_dtoa_r+0x78c>
 8007046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80b7 	beq.w	80071bc <_dtoa_r+0x8c4>
 800704e:	b18c      	cbz	r4, 8007074 <_dtoa_r+0x77c>
 8007050:	4629      	mov	r1, r5
 8007052:	4622      	mov	r2, r4
 8007054:	4658      	mov	r0, fp
 8007056:	f000 fd11 	bl	8007a7c <__pow5mult>
 800705a:	464a      	mov	r2, r9
 800705c:	4601      	mov	r1, r0
 800705e:	4605      	mov	r5, r0
 8007060:	4658      	mov	r0, fp
 8007062:	f000 fc61 	bl	8007928 <__multiply>
 8007066:	4649      	mov	r1, r9
 8007068:	9004      	str	r0, [sp, #16]
 800706a:	4658      	mov	r0, fp
 800706c:	f000 fb48 	bl	8007700 <_Bfree>
 8007070:	9b04      	ldr	r3, [sp, #16]
 8007072:	4699      	mov	r9, r3
 8007074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007076:	1b1a      	subs	r2, r3, r4
 8007078:	d004      	beq.n	8007084 <_dtoa_r+0x78c>
 800707a:	4649      	mov	r1, r9
 800707c:	4658      	mov	r0, fp
 800707e:	f000 fcfd 	bl	8007a7c <__pow5mult>
 8007082:	4681      	mov	r9, r0
 8007084:	2101      	movs	r1, #1
 8007086:	4658      	mov	r0, fp
 8007088:	f000 fc38 	bl	80078fc <__i2b>
 800708c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800708e:	4604      	mov	r4, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 81cf 	beq.w	8007434 <_dtoa_r+0xb3c>
 8007096:	461a      	mov	r2, r3
 8007098:	4601      	mov	r1, r0
 800709a:	4658      	mov	r0, fp
 800709c:	f000 fcee 	bl	8007a7c <__pow5mult>
 80070a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	4604      	mov	r4, r0
 80070a6:	f300 8095 	bgt.w	80071d4 <_dtoa_r+0x8dc>
 80070aa:	9b02      	ldr	r3, [sp, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 8087 	bne.w	80071c0 <_dtoa_r+0x8c8>
 80070b2:	9b03      	ldr	r3, [sp, #12]
 80070b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f040 8089 	bne.w	80071d0 <_dtoa_r+0x8d8>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070c4:	0d1b      	lsrs	r3, r3, #20
 80070c6:	051b      	lsls	r3, r3, #20
 80070c8:	b12b      	cbz	r3, 80070d6 <_dtoa_r+0x7de>
 80070ca:	9b08      	ldr	r3, [sp, #32]
 80070cc:	3301      	adds	r3, #1
 80070ce:	9308      	str	r3, [sp, #32]
 80070d0:	f108 0801 	add.w	r8, r8, #1
 80070d4:	2301      	movs	r3, #1
 80070d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 81b0 	beq.w	8007440 <_dtoa_r+0xb48>
 80070e0:	6923      	ldr	r3, [r4, #16]
 80070e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070e6:	6918      	ldr	r0, [r3, #16]
 80070e8:	f000 fbbc 	bl	8007864 <__hi0bits>
 80070ec:	f1c0 0020 	rsb	r0, r0, #32
 80070f0:	9b08      	ldr	r3, [sp, #32]
 80070f2:	4418      	add	r0, r3
 80070f4:	f010 001f 	ands.w	r0, r0, #31
 80070f8:	d077      	beq.n	80071ea <_dtoa_r+0x8f2>
 80070fa:	f1c0 0320 	rsb	r3, r0, #32
 80070fe:	2b04      	cmp	r3, #4
 8007100:	dd6b      	ble.n	80071da <_dtoa_r+0x8e2>
 8007102:	9b08      	ldr	r3, [sp, #32]
 8007104:	f1c0 001c 	rsb	r0, r0, #28
 8007108:	4403      	add	r3, r0
 800710a:	4480      	add	r8, r0
 800710c:	4406      	add	r6, r0
 800710e:	9308      	str	r3, [sp, #32]
 8007110:	f1b8 0f00 	cmp.w	r8, #0
 8007114:	dd05      	ble.n	8007122 <_dtoa_r+0x82a>
 8007116:	4649      	mov	r1, r9
 8007118:	4642      	mov	r2, r8
 800711a:	4658      	mov	r0, fp
 800711c:	f000 fd08 	bl	8007b30 <__lshift>
 8007120:	4681      	mov	r9, r0
 8007122:	9b08      	ldr	r3, [sp, #32]
 8007124:	2b00      	cmp	r3, #0
 8007126:	dd05      	ble.n	8007134 <_dtoa_r+0x83c>
 8007128:	4621      	mov	r1, r4
 800712a:	461a      	mov	r2, r3
 800712c:	4658      	mov	r0, fp
 800712e:	f000 fcff 	bl	8007b30 <__lshift>
 8007132:	4604      	mov	r4, r0
 8007134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007136:	2b00      	cmp	r3, #0
 8007138:	d059      	beq.n	80071ee <_dtoa_r+0x8f6>
 800713a:	4621      	mov	r1, r4
 800713c:	4648      	mov	r0, r9
 800713e:	f000 fd63 	bl	8007c08 <__mcmp>
 8007142:	2800      	cmp	r0, #0
 8007144:	da53      	bge.n	80071ee <_dtoa_r+0x8f6>
 8007146:	1e7b      	subs	r3, r7, #1
 8007148:	9304      	str	r3, [sp, #16]
 800714a:	4649      	mov	r1, r9
 800714c:	2300      	movs	r3, #0
 800714e:	220a      	movs	r2, #10
 8007150:	4658      	mov	r0, fp
 8007152:	f000 faf7 	bl	8007744 <__multadd>
 8007156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007158:	4681      	mov	r9, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8172 	beq.w	8007444 <_dtoa_r+0xb4c>
 8007160:	2300      	movs	r3, #0
 8007162:	4629      	mov	r1, r5
 8007164:	220a      	movs	r2, #10
 8007166:	4658      	mov	r0, fp
 8007168:	f000 faec 	bl	8007744 <__multadd>
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	4605      	mov	r5, r0
 8007172:	dc67      	bgt.n	8007244 <_dtoa_r+0x94c>
 8007174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007176:	2b02      	cmp	r3, #2
 8007178:	dc41      	bgt.n	80071fe <_dtoa_r+0x906>
 800717a:	e063      	b.n	8007244 <_dtoa_r+0x94c>
 800717c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800717e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007182:	e746      	b.n	8007012 <_dtoa_r+0x71a>
 8007184:	9b07      	ldr	r3, [sp, #28]
 8007186:	1e5c      	subs	r4, r3, #1
 8007188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800718a:	42a3      	cmp	r3, r4
 800718c:	bfbf      	itttt	lt
 800718e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007194:	1ae3      	sublt	r3, r4, r3
 8007196:	bfb4      	ite	lt
 8007198:	18d2      	addlt	r2, r2, r3
 800719a:	1b1c      	subge	r4, r3, r4
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	bfbc      	itt	lt
 80071a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80071a2:	2400      	movlt	r4, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	bfb5      	itete	lt
 80071a8:	eba8 0603 	sublt.w	r6, r8, r3
 80071ac:	9b07      	ldrge	r3, [sp, #28]
 80071ae:	2300      	movlt	r3, #0
 80071b0:	4646      	movge	r6, r8
 80071b2:	e730      	b.n	8007016 <_dtoa_r+0x71e>
 80071b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071b8:	4646      	mov	r6, r8
 80071ba:	e735      	b.n	8007028 <_dtoa_r+0x730>
 80071bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071be:	e75c      	b.n	800707a <_dtoa_r+0x782>
 80071c0:	2300      	movs	r3, #0
 80071c2:	e788      	b.n	80070d6 <_dtoa_r+0x7de>
 80071c4:	3fe00000 	.word	0x3fe00000
 80071c8:	40240000 	.word	0x40240000
 80071cc:	40140000 	.word	0x40140000
 80071d0:	9b02      	ldr	r3, [sp, #8]
 80071d2:	e780      	b.n	80070d6 <_dtoa_r+0x7de>
 80071d4:	2300      	movs	r3, #0
 80071d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071d8:	e782      	b.n	80070e0 <_dtoa_r+0x7e8>
 80071da:	d099      	beq.n	8007110 <_dtoa_r+0x818>
 80071dc:	9a08      	ldr	r2, [sp, #32]
 80071de:	331c      	adds	r3, #28
 80071e0:	441a      	add	r2, r3
 80071e2:	4498      	add	r8, r3
 80071e4:	441e      	add	r6, r3
 80071e6:	9208      	str	r2, [sp, #32]
 80071e8:	e792      	b.n	8007110 <_dtoa_r+0x818>
 80071ea:	4603      	mov	r3, r0
 80071ec:	e7f6      	b.n	80071dc <_dtoa_r+0x8e4>
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	9704      	str	r7, [sp, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	dc20      	bgt.n	8007238 <_dtoa_r+0x940>
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	dd1e      	ble.n	800723c <_dtoa_r+0x944>
 80071fe:	9b00      	ldr	r3, [sp, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f47f aec0 	bne.w	8006f86 <_dtoa_r+0x68e>
 8007206:	4621      	mov	r1, r4
 8007208:	2205      	movs	r2, #5
 800720a:	4658      	mov	r0, fp
 800720c:	f000 fa9a 	bl	8007744 <__multadd>
 8007210:	4601      	mov	r1, r0
 8007212:	4604      	mov	r4, r0
 8007214:	4648      	mov	r0, r9
 8007216:	f000 fcf7 	bl	8007c08 <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	f77f aeb3 	ble.w	8006f86 <_dtoa_r+0x68e>
 8007220:	4656      	mov	r6, sl
 8007222:	2331      	movs	r3, #49	@ 0x31
 8007224:	f806 3b01 	strb.w	r3, [r6], #1
 8007228:	9b04      	ldr	r3, [sp, #16]
 800722a:	3301      	adds	r3, #1
 800722c:	9304      	str	r3, [sp, #16]
 800722e:	e6ae      	b.n	8006f8e <_dtoa_r+0x696>
 8007230:	9c07      	ldr	r4, [sp, #28]
 8007232:	9704      	str	r7, [sp, #16]
 8007234:	4625      	mov	r5, r4
 8007236:	e7f3      	b.n	8007220 <_dtoa_r+0x928>
 8007238:	9b07      	ldr	r3, [sp, #28]
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8104 	beq.w	800744c <_dtoa_r+0xb54>
 8007244:	2e00      	cmp	r6, #0
 8007246:	dd05      	ble.n	8007254 <_dtoa_r+0x95c>
 8007248:	4629      	mov	r1, r5
 800724a:	4632      	mov	r2, r6
 800724c:	4658      	mov	r0, fp
 800724e:	f000 fc6f 	bl	8007b30 <__lshift>
 8007252:	4605      	mov	r5, r0
 8007254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d05a      	beq.n	8007310 <_dtoa_r+0xa18>
 800725a:	6869      	ldr	r1, [r5, #4]
 800725c:	4658      	mov	r0, fp
 800725e:	f000 fa0f 	bl	8007680 <_Balloc>
 8007262:	4606      	mov	r6, r0
 8007264:	b928      	cbnz	r0, 8007272 <_dtoa_r+0x97a>
 8007266:	4b84      	ldr	r3, [pc, #528]	@ (8007478 <_dtoa_r+0xb80>)
 8007268:	4602      	mov	r2, r0
 800726a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800726e:	f7ff bb5a 	b.w	8006926 <_dtoa_r+0x2e>
 8007272:	692a      	ldr	r2, [r5, #16]
 8007274:	3202      	adds	r2, #2
 8007276:	0092      	lsls	r2, r2, #2
 8007278:	f105 010c 	add.w	r1, r5, #12
 800727c:	300c      	adds	r0, #12
 800727e:	f7ff fa7f 	bl	8006780 <memcpy>
 8007282:	2201      	movs	r2, #1
 8007284:	4631      	mov	r1, r6
 8007286:	4658      	mov	r0, fp
 8007288:	f000 fc52 	bl	8007b30 <__lshift>
 800728c:	f10a 0301 	add.w	r3, sl, #1
 8007290:	9307      	str	r3, [sp, #28]
 8007292:	9b00      	ldr	r3, [sp, #0]
 8007294:	4453      	add	r3, sl
 8007296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007298:	9b02      	ldr	r3, [sp, #8]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	462f      	mov	r7, r5
 80072a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072a2:	4605      	mov	r5, r0
 80072a4:	9b07      	ldr	r3, [sp, #28]
 80072a6:	4621      	mov	r1, r4
 80072a8:	3b01      	subs	r3, #1
 80072aa:	4648      	mov	r0, r9
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	f7ff fa99 	bl	80067e4 <quorem>
 80072b2:	4639      	mov	r1, r7
 80072b4:	9002      	str	r0, [sp, #8]
 80072b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072ba:	4648      	mov	r0, r9
 80072bc:	f000 fca4 	bl	8007c08 <__mcmp>
 80072c0:	462a      	mov	r2, r5
 80072c2:	9008      	str	r0, [sp, #32]
 80072c4:	4621      	mov	r1, r4
 80072c6:	4658      	mov	r0, fp
 80072c8:	f000 fcba 	bl	8007c40 <__mdiff>
 80072cc:	68c2      	ldr	r2, [r0, #12]
 80072ce:	4606      	mov	r6, r0
 80072d0:	bb02      	cbnz	r2, 8007314 <_dtoa_r+0xa1c>
 80072d2:	4601      	mov	r1, r0
 80072d4:	4648      	mov	r0, r9
 80072d6:	f000 fc97 	bl	8007c08 <__mcmp>
 80072da:	4602      	mov	r2, r0
 80072dc:	4631      	mov	r1, r6
 80072de:	4658      	mov	r0, fp
 80072e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80072e2:	f000 fa0d 	bl	8007700 <_Bfree>
 80072e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072ea:	9e07      	ldr	r6, [sp, #28]
 80072ec:	ea43 0102 	orr.w	r1, r3, r2
 80072f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072f2:	4319      	orrs	r1, r3
 80072f4:	d110      	bne.n	8007318 <_dtoa_r+0xa20>
 80072f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072fa:	d029      	beq.n	8007350 <_dtoa_r+0xa58>
 80072fc:	9b08      	ldr	r3, [sp, #32]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dd02      	ble.n	8007308 <_dtoa_r+0xa10>
 8007302:	9b02      	ldr	r3, [sp, #8]
 8007304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007308:	9b00      	ldr	r3, [sp, #0]
 800730a:	f883 8000 	strb.w	r8, [r3]
 800730e:	e63f      	b.n	8006f90 <_dtoa_r+0x698>
 8007310:	4628      	mov	r0, r5
 8007312:	e7bb      	b.n	800728c <_dtoa_r+0x994>
 8007314:	2201      	movs	r2, #1
 8007316:	e7e1      	b.n	80072dc <_dtoa_r+0x9e4>
 8007318:	9b08      	ldr	r3, [sp, #32]
 800731a:	2b00      	cmp	r3, #0
 800731c:	db04      	blt.n	8007328 <_dtoa_r+0xa30>
 800731e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007320:	430b      	orrs	r3, r1
 8007322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007324:	430b      	orrs	r3, r1
 8007326:	d120      	bne.n	800736a <_dtoa_r+0xa72>
 8007328:	2a00      	cmp	r2, #0
 800732a:	dded      	ble.n	8007308 <_dtoa_r+0xa10>
 800732c:	4649      	mov	r1, r9
 800732e:	2201      	movs	r2, #1
 8007330:	4658      	mov	r0, fp
 8007332:	f000 fbfd 	bl	8007b30 <__lshift>
 8007336:	4621      	mov	r1, r4
 8007338:	4681      	mov	r9, r0
 800733a:	f000 fc65 	bl	8007c08 <__mcmp>
 800733e:	2800      	cmp	r0, #0
 8007340:	dc03      	bgt.n	800734a <_dtoa_r+0xa52>
 8007342:	d1e1      	bne.n	8007308 <_dtoa_r+0xa10>
 8007344:	f018 0f01 	tst.w	r8, #1
 8007348:	d0de      	beq.n	8007308 <_dtoa_r+0xa10>
 800734a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800734e:	d1d8      	bne.n	8007302 <_dtoa_r+0xa0a>
 8007350:	9a00      	ldr	r2, [sp, #0]
 8007352:	2339      	movs	r3, #57	@ 0x39
 8007354:	7013      	strb	r3, [r2, #0]
 8007356:	4633      	mov	r3, r6
 8007358:	461e      	mov	r6, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007360:	2a39      	cmp	r2, #57	@ 0x39
 8007362:	d052      	beq.n	800740a <_dtoa_r+0xb12>
 8007364:	3201      	adds	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e612      	b.n	8006f90 <_dtoa_r+0x698>
 800736a:	2a00      	cmp	r2, #0
 800736c:	dd07      	ble.n	800737e <_dtoa_r+0xa86>
 800736e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007372:	d0ed      	beq.n	8007350 <_dtoa_r+0xa58>
 8007374:	9a00      	ldr	r2, [sp, #0]
 8007376:	f108 0301 	add.w	r3, r8, #1
 800737a:	7013      	strb	r3, [r2, #0]
 800737c:	e608      	b.n	8006f90 <_dtoa_r+0x698>
 800737e:	9b07      	ldr	r3, [sp, #28]
 8007380:	9a07      	ldr	r2, [sp, #28]
 8007382:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007388:	4293      	cmp	r3, r2
 800738a:	d028      	beq.n	80073de <_dtoa_r+0xae6>
 800738c:	4649      	mov	r1, r9
 800738e:	2300      	movs	r3, #0
 8007390:	220a      	movs	r2, #10
 8007392:	4658      	mov	r0, fp
 8007394:	f000 f9d6 	bl	8007744 <__multadd>
 8007398:	42af      	cmp	r7, r5
 800739a:	4681      	mov	r9, r0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	f04f 020a 	mov.w	r2, #10
 80073a4:	4639      	mov	r1, r7
 80073a6:	4658      	mov	r0, fp
 80073a8:	d107      	bne.n	80073ba <_dtoa_r+0xac2>
 80073aa:	f000 f9cb 	bl	8007744 <__multadd>
 80073ae:	4607      	mov	r7, r0
 80073b0:	4605      	mov	r5, r0
 80073b2:	9b07      	ldr	r3, [sp, #28]
 80073b4:	3301      	adds	r3, #1
 80073b6:	9307      	str	r3, [sp, #28]
 80073b8:	e774      	b.n	80072a4 <_dtoa_r+0x9ac>
 80073ba:	f000 f9c3 	bl	8007744 <__multadd>
 80073be:	4629      	mov	r1, r5
 80073c0:	4607      	mov	r7, r0
 80073c2:	2300      	movs	r3, #0
 80073c4:	220a      	movs	r2, #10
 80073c6:	4658      	mov	r0, fp
 80073c8:	f000 f9bc 	bl	8007744 <__multadd>
 80073cc:	4605      	mov	r5, r0
 80073ce:	e7f0      	b.n	80073b2 <_dtoa_r+0xaba>
 80073d0:	9b00      	ldr	r3, [sp, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	bfcc      	ite	gt
 80073d6:	461e      	movgt	r6, r3
 80073d8:	2601      	movle	r6, #1
 80073da:	4456      	add	r6, sl
 80073dc:	2700      	movs	r7, #0
 80073de:	4649      	mov	r1, r9
 80073e0:	2201      	movs	r2, #1
 80073e2:	4658      	mov	r0, fp
 80073e4:	f000 fba4 	bl	8007b30 <__lshift>
 80073e8:	4621      	mov	r1, r4
 80073ea:	4681      	mov	r9, r0
 80073ec:	f000 fc0c 	bl	8007c08 <__mcmp>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	dcb0      	bgt.n	8007356 <_dtoa_r+0xa5e>
 80073f4:	d102      	bne.n	80073fc <_dtoa_r+0xb04>
 80073f6:	f018 0f01 	tst.w	r8, #1
 80073fa:	d1ac      	bne.n	8007356 <_dtoa_r+0xa5e>
 80073fc:	4633      	mov	r3, r6
 80073fe:	461e      	mov	r6, r3
 8007400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007404:	2a30      	cmp	r2, #48	@ 0x30
 8007406:	d0fa      	beq.n	80073fe <_dtoa_r+0xb06>
 8007408:	e5c2      	b.n	8006f90 <_dtoa_r+0x698>
 800740a:	459a      	cmp	sl, r3
 800740c:	d1a4      	bne.n	8007358 <_dtoa_r+0xa60>
 800740e:	9b04      	ldr	r3, [sp, #16]
 8007410:	3301      	adds	r3, #1
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	2331      	movs	r3, #49	@ 0x31
 8007416:	f88a 3000 	strb.w	r3, [sl]
 800741a:	e5b9      	b.n	8006f90 <_dtoa_r+0x698>
 800741c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800741e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800747c <_dtoa_r+0xb84>
 8007422:	b11b      	cbz	r3, 800742c <_dtoa_r+0xb34>
 8007424:	f10a 0308 	add.w	r3, sl, #8
 8007428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	4650      	mov	r0, sl
 800742e:	b019      	add	sp, #100	@ 0x64
 8007430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007436:	2b01      	cmp	r3, #1
 8007438:	f77f ae37 	ble.w	80070aa <_dtoa_r+0x7b2>
 800743c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800743e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007440:	2001      	movs	r0, #1
 8007442:	e655      	b.n	80070f0 <_dtoa_r+0x7f8>
 8007444:	9b00      	ldr	r3, [sp, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f77f aed6 	ble.w	80071f8 <_dtoa_r+0x900>
 800744c:	4656      	mov	r6, sl
 800744e:	4621      	mov	r1, r4
 8007450:	4648      	mov	r0, r9
 8007452:	f7ff f9c7 	bl	80067e4 <quorem>
 8007456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800745a:	f806 8b01 	strb.w	r8, [r6], #1
 800745e:	9b00      	ldr	r3, [sp, #0]
 8007460:	eba6 020a 	sub.w	r2, r6, sl
 8007464:	4293      	cmp	r3, r2
 8007466:	ddb3      	ble.n	80073d0 <_dtoa_r+0xad8>
 8007468:	4649      	mov	r1, r9
 800746a:	2300      	movs	r3, #0
 800746c:	220a      	movs	r2, #10
 800746e:	4658      	mov	r0, fp
 8007470:	f000 f968 	bl	8007744 <__multadd>
 8007474:	4681      	mov	r9, r0
 8007476:	e7ea      	b.n	800744e <_dtoa_r+0xb56>
 8007478:	0800a4b0 	.word	0x0800a4b0
 800747c:	0800a44b 	.word	0x0800a44b

08007480 <_free_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4605      	mov	r5, r0
 8007484:	2900      	cmp	r1, #0
 8007486:	d041      	beq.n	800750c <_free_r+0x8c>
 8007488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800748c:	1f0c      	subs	r4, r1, #4
 800748e:	2b00      	cmp	r3, #0
 8007490:	bfb8      	it	lt
 8007492:	18e4      	addlt	r4, r4, r3
 8007494:	f000 f8e8 	bl	8007668 <__malloc_lock>
 8007498:	4a1d      	ldr	r2, [pc, #116]	@ (8007510 <_free_r+0x90>)
 800749a:	6813      	ldr	r3, [r2, #0]
 800749c:	b933      	cbnz	r3, 80074ac <_free_r+0x2c>
 800749e:	6063      	str	r3, [r4, #4]
 80074a0:	6014      	str	r4, [r2, #0]
 80074a2:	4628      	mov	r0, r5
 80074a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074a8:	f000 b8e4 	b.w	8007674 <__malloc_unlock>
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d908      	bls.n	80074c2 <_free_r+0x42>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	1821      	adds	r1, r4, r0
 80074b4:	428b      	cmp	r3, r1
 80074b6:	bf01      	itttt	eq
 80074b8:	6819      	ldreq	r1, [r3, #0]
 80074ba:	685b      	ldreq	r3, [r3, #4]
 80074bc:	1809      	addeq	r1, r1, r0
 80074be:	6021      	streq	r1, [r4, #0]
 80074c0:	e7ed      	b.n	800749e <_free_r+0x1e>
 80074c2:	461a      	mov	r2, r3
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	b10b      	cbz	r3, 80074cc <_free_r+0x4c>
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	d9fa      	bls.n	80074c2 <_free_r+0x42>
 80074cc:	6811      	ldr	r1, [r2, #0]
 80074ce:	1850      	adds	r0, r2, r1
 80074d0:	42a0      	cmp	r0, r4
 80074d2:	d10b      	bne.n	80074ec <_free_r+0x6c>
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	4401      	add	r1, r0
 80074d8:	1850      	adds	r0, r2, r1
 80074da:	4283      	cmp	r3, r0
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	d1e0      	bne.n	80074a2 <_free_r+0x22>
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	6053      	str	r3, [r2, #4]
 80074e6:	4408      	add	r0, r1
 80074e8:	6010      	str	r0, [r2, #0]
 80074ea:	e7da      	b.n	80074a2 <_free_r+0x22>
 80074ec:	d902      	bls.n	80074f4 <_free_r+0x74>
 80074ee:	230c      	movs	r3, #12
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	e7d6      	b.n	80074a2 <_free_r+0x22>
 80074f4:	6820      	ldr	r0, [r4, #0]
 80074f6:	1821      	adds	r1, r4, r0
 80074f8:	428b      	cmp	r3, r1
 80074fa:	bf04      	itt	eq
 80074fc:	6819      	ldreq	r1, [r3, #0]
 80074fe:	685b      	ldreq	r3, [r3, #4]
 8007500:	6063      	str	r3, [r4, #4]
 8007502:	bf04      	itt	eq
 8007504:	1809      	addeq	r1, r1, r0
 8007506:	6021      	streq	r1, [r4, #0]
 8007508:	6054      	str	r4, [r2, #4]
 800750a:	e7ca      	b.n	80074a2 <_free_r+0x22>
 800750c:	bd38      	pop	{r3, r4, r5, pc}
 800750e:	bf00      	nop
 8007510:	200007f0 	.word	0x200007f0

08007514 <malloc>:
 8007514:	4b02      	ldr	r3, [pc, #8]	@ (8007520 <malloc+0xc>)
 8007516:	4601      	mov	r1, r0
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	f000 b825 	b.w	8007568 <_malloc_r>
 800751e:	bf00      	nop
 8007520:	20000018 	.word	0x20000018

08007524 <sbrk_aligned>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	4e0f      	ldr	r6, [pc, #60]	@ (8007564 <sbrk_aligned+0x40>)
 8007528:	460c      	mov	r4, r1
 800752a:	6831      	ldr	r1, [r6, #0]
 800752c:	4605      	mov	r5, r0
 800752e:	b911      	cbnz	r1, 8007536 <sbrk_aligned+0x12>
 8007530:	f001 ff04 	bl	800933c <_sbrk_r>
 8007534:	6030      	str	r0, [r6, #0]
 8007536:	4621      	mov	r1, r4
 8007538:	4628      	mov	r0, r5
 800753a:	f001 feff 	bl	800933c <_sbrk_r>
 800753e:	1c43      	adds	r3, r0, #1
 8007540:	d103      	bne.n	800754a <sbrk_aligned+0x26>
 8007542:	f04f 34ff 	mov.w	r4, #4294967295
 8007546:	4620      	mov	r0, r4
 8007548:	bd70      	pop	{r4, r5, r6, pc}
 800754a:	1cc4      	adds	r4, r0, #3
 800754c:	f024 0403 	bic.w	r4, r4, #3
 8007550:	42a0      	cmp	r0, r4
 8007552:	d0f8      	beq.n	8007546 <sbrk_aligned+0x22>
 8007554:	1a21      	subs	r1, r4, r0
 8007556:	4628      	mov	r0, r5
 8007558:	f001 fef0 	bl	800933c <_sbrk_r>
 800755c:	3001      	adds	r0, #1
 800755e:	d1f2      	bne.n	8007546 <sbrk_aligned+0x22>
 8007560:	e7ef      	b.n	8007542 <sbrk_aligned+0x1e>
 8007562:	bf00      	nop
 8007564:	200007ec 	.word	0x200007ec

08007568 <_malloc_r>:
 8007568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800756c:	1ccd      	adds	r5, r1, #3
 800756e:	f025 0503 	bic.w	r5, r5, #3
 8007572:	3508      	adds	r5, #8
 8007574:	2d0c      	cmp	r5, #12
 8007576:	bf38      	it	cc
 8007578:	250c      	movcc	r5, #12
 800757a:	2d00      	cmp	r5, #0
 800757c:	4606      	mov	r6, r0
 800757e:	db01      	blt.n	8007584 <_malloc_r+0x1c>
 8007580:	42a9      	cmp	r1, r5
 8007582:	d904      	bls.n	800758e <_malloc_r+0x26>
 8007584:	230c      	movs	r3, #12
 8007586:	6033      	str	r3, [r6, #0]
 8007588:	2000      	movs	r0, #0
 800758a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800758e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007664 <_malloc_r+0xfc>
 8007592:	f000 f869 	bl	8007668 <__malloc_lock>
 8007596:	f8d8 3000 	ldr.w	r3, [r8]
 800759a:	461c      	mov	r4, r3
 800759c:	bb44      	cbnz	r4, 80075f0 <_malloc_r+0x88>
 800759e:	4629      	mov	r1, r5
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7ff ffbf 	bl	8007524 <sbrk_aligned>
 80075a6:	1c43      	adds	r3, r0, #1
 80075a8:	4604      	mov	r4, r0
 80075aa:	d158      	bne.n	800765e <_malloc_r+0xf6>
 80075ac:	f8d8 4000 	ldr.w	r4, [r8]
 80075b0:	4627      	mov	r7, r4
 80075b2:	2f00      	cmp	r7, #0
 80075b4:	d143      	bne.n	800763e <_malloc_r+0xd6>
 80075b6:	2c00      	cmp	r4, #0
 80075b8:	d04b      	beq.n	8007652 <_malloc_r+0xea>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	4639      	mov	r1, r7
 80075be:	4630      	mov	r0, r6
 80075c0:	eb04 0903 	add.w	r9, r4, r3
 80075c4:	f001 feba 	bl	800933c <_sbrk_r>
 80075c8:	4581      	cmp	r9, r0
 80075ca:	d142      	bne.n	8007652 <_malloc_r+0xea>
 80075cc:	6821      	ldr	r1, [r4, #0]
 80075ce:	1a6d      	subs	r5, r5, r1
 80075d0:	4629      	mov	r1, r5
 80075d2:	4630      	mov	r0, r6
 80075d4:	f7ff ffa6 	bl	8007524 <sbrk_aligned>
 80075d8:	3001      	adds	r0, #1
 80075da:	d03a      	beq.n	8007652 <_malloc_r+0xea>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	442b      	add	r3, r5
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	f8d8 3000 	ldr.w	r3, [r8]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	bb62      	cbnz	r2, 8007644 <_malloc_r+0xdc>
 80075ea:	f8c8 7000 	str.w	r7, [r8]
 80075ee:	e00f      	b.n	8007610 <_malloc_r+0xa8>
 80075f0:	6822      	ldr	r2, [r4, #0]
 80075f2:	1b52      	subs	r2, r2, r5
 80075f4:	d420      	bmi.n	8007638 <_malloc_r+0xd0>
 80075f6:	2a0b      	cmp	r2, #11
 80075f8:	d917      	bls.n	800762a <_malloc_r+0xc2>
 80075fa:	1961      	adds	r1, r4, r5
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	6025      	str	r5, [r4, #0]
 8007600:	bf18      	it	ne
 8007602:	6059      	strne	r1, [r3, #4]
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	bf08      	it	eq
 8007608:	f8c8 1000 	streq.w	r1, [r8]
 800760c:	5162      	str	r2, [r4, r5]
 800760e:	604b      	str	r3, [r1, #4]
 8007610:	4630      	mov	r0, r6
 8007612:	f000 f82f 	bl	8007674 <__malloc_unlock>
 8007616:	f104 000b 	add.w	r0, r4, #11
 800761a:	1d23      	adds	r3, r4, #4
 800761c:	f020 0007 	bic.w	r0, r0, #7
 8007620:	1ac2      	subs	r2, r0, r3
 8007622:	bf1c      	itt	ne
 8007624:	1a1b      	subne	r3, r3, r0
 8007626:	50a3      	strne	r3, [r4, r2]
 8007628:	e7af      	b.n	800758a <_malloc_r+0x22>
 800762a:	6862      	ldr	r2, [r4, #4]
 800762c:	42a3      	cmp	r3, r4
 800762e:	bf0c      	ite	eq
 8007630:	f8c8 2000 	streq.w	r2, [r8]
 8007634:	605a      	strne	r2, [r3, #4]
 8007636:	e7eb      	b.n	8007610 <_malloc_r+0xa8>
 8007638:	4623      	mov	r3, r4
 800763a:	6864      	ldr	r4, [r4, #4]
 800763c:	e7ae      	b.n	800759c <_malloc_r+0x34>
 800763e:	463c      	mov	r4, r7
 8007640:	687f      	ldr	r7, [r7, #4]
 8007642:	e7b6      	b.n	80075b2 <_malloc_r+0x4a>
 8007644:	461a      	mov	r2, r3
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	42a3      	cmp	r3, r4
 800764a:	d1fb      	bne.n	8007644 <_malloc_r+0xdc>
 800764c:	2300      	movs	r3, #0
 800764e:	6053      	str	r3, [r2, #4]
 8007650:	e7de      	b.n	8007610 <_malloc_r+0xa8>
 8007652:	230c      	movs	r3, #12
 8007654:	6033      	str	r3, [r6, #0]
 8007656:	4630      	mov	r0, r6
 8007658:	f000 f80c 	bl	8007674 <__malloc_unlock>
 800765c:	e794      	b.n	8007588 <_malloc_r+0x20>
 800765e:	6005      	str	r5, [r0, #0]
 8007660:	e7d6      	b.n	8007610 <_malloc_r+0xa8>
 8007662:	bf00      	nop
 8007664:	200007f0 	.word	0x200007f0

08007668 <__malloc_lock>:
 8007668:	4801      	ldr	r0, [pc, #4]	@ (8007670 <__malloc_lock+0x8>)
 800766a:	f7ff b887 	b.w	800677c <__retarget_lock_acquire_recursive>
 800766e:	bf00      	nop
 8007670:	200007e8 	.word	0x200007e8

08007674 <__malloc_unlock>:
 8007674:	4801      	ldr	r0, [pc, #4]	@ (800767c <__malloc_unlock+0x8>)
 8007676:	f7ff b882 	b.w	800677e <__retarget_lock_release_recursive>
 800767a:	bf00      	nop
 800767c:	200007e8 	.word	0x200007e8

08007680 <_Balloc>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	69c6      	ldr	r6, [r0, #28]
 8007684:	4604      	mov	r4, r0
 8007686:	460d      	mov	r5, r1
 8007688:	b976      	cbnz	r6, 80076a8 <_Balloc+0x28>
 800768a:	2010      	movs	r0, #16
 800768c:	f7ff ff42 	bl	8007514 <malloc>
 8007690:	4602      	mov	r2, r0
 8007692:	61e0      	str	r0, [r4, #28]
 8007694:	b920      	cbnz	r0, 80076a0 <_Balloc+0x20>
 8007696:	4b18      	ldr	r3, [pc, #96]	@ (80076f8 <_Balloc+0x78>)
 8007698:	4818      	ldr	r0, [pc, #96]	@ (80076fc <_Balloc+0x7c>)
 800769a:	216b      	movs	r1, #107	@ 0x6b
 800769c:	f7ff f884 	bl	80067a8 <__assert_func>
 80076a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076a4:	6006      	str	r6, [r0, #0]
 80076a6:	60c6      	str	r6, [r0, #12]
 80076a8:	69e6      	ldr	r6, [r4, #28]
 80076aa:	68f3      	ldr	r3, [r6, #12]
 80076ac:	b183      	cbz	r3, 80076d0 <_Balloc+0x50>
 80076ae:	69e3      	ldr	r3, [r4, #28]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076b6:	b9b8      	cbnz	r0, 80076e8 <_Balloc+0x68>
 80076b8:	2101      	movs	r1, #1
 80076ba:	fa01 f605 	lsl.w	r6, r1, r5
 80076be:	1d72      	adds	r2, r6, #5
 80076c0:	0092      	lsls	r2, r2, #2
 80076c2:	4620      	mov	r0, r4
 80076c4:	f001 fe5b 	bl	800937e <_calloc_r>
 80076c8:	b160      	cbz	r0, 80076e4 <_Balloc+0x64>
 80076ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076ce:	e00e      	b.n	80076ee <_Balloc+0x6e>
 80076d0:	2221      	movs	r2, #33	@ 0x21
 80076d2:	2104      	movs	r1, #4
 80076d4:	4620      	mov	r0, r4
 80076d6:	f001 fe52 	bl	800937e <_calloc_r>
 80076da:	69e3      	ldr	r3, [r4, #28]
 80076dc:	60f0      	str	r0, [r6, #12]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e4      	bne.n	80076ae <_Balloc+0x2e>
 80076e4:	2000      	movs	r0, #0
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	6802      	ldr	r2, [r0, #0]
 80076ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076ee:	2300      	movs	r3, #0
 80076f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076f4:	e7f7      	b.n	80076e6 <_Balloc+0x66>
 80076f6:	bf00      	nop
 80076f8:	0800a39e 	.word	0x0800a39e
 80076fc:	0800a4c1 	.word	0x0800a4c1

08007700 <_Bfree>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	69c6      	ldr	r6, [r0, #28]
 8007704:	4605      	mov	r5, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b976      	cbnz	r6, 8007728 <_Bfree+0x28>
 800770a:	2010      	movs	r0, #16
 800770c:	f7ff ff02 	bl	8007514 <malloc>
 8007710:	4602      	mov	r2, r0
 8007712:	61e8      	str	r0, [r5, #28]
 8007714:	b920      	cbnz	r0, 8007720 <_Bfree+0x20>
 8007716:	4b09      	ldr	r3, [pc, #36]	@ (800773c <_Bfree+0x3c>)
 8007718:	4809      	ldr	r0, [pc, #36]	@ (8007740 <_Bfree+0x40>)
 800771a:	218f      	movs	r1, #143	@ 0x8f
 800771c:	f7ff f844 	bl	80067a8 <__assert_func>
 8007720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007724:	6006      	str	r6, [r0, #0]
 8007726:	60c6      	str	r6, [r0, #12]
 8007728:	b13c      	cbz	r4, 800773a <_Bfree+0x3a>
 800772a:	69eb      	ldr	r3, [r5, #28]
 800772c:	6862      	ldr	r2, [r4, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007734:	6021      	str	r1, [r4, #0]
 8007736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	0800a39e 	.word	0x0800a39e
 8007740:	0800a4c1 	.word	0x0800a4c1

08007744 <__multadd>:
 8007744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007748:	690d      	ldr	r5, [r1, #16]
 800774a:	4607      	mov	r7, r0
 800774c:	460c      	mov	r4, r1
 800774e:	461e      	mov	r6, r3
 8007750:	f101 0c14 	add.w	ip, r1, #20
 8007754:	2000      	movs	r0, #0
 8007756:	f8dc 3000 	ldr.w	r3, [ip]
 800775a:	b299      	uxth	r1, r3
 800775c:	fb02 6101 	mla	r1, r2, r1, r6
 8007760:	0c1e      	lsrs	r6, r3, #16
 8007762:	0c0b      	lsrs	r3, r1, #16
 8007764:	fb02 3306 	mla	r3, r2, r6, r3
 8007768:	b289      	uxth	r1, r1
 800776a:	3001      	adds	r0, #1
 800776c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007770:	4285      	cmp	r5, r0
 8007772:	f84c 1b04 	str.w	r1, [ip], #4
 8007776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800777a:	dcec      	bgt.n	8007756 <__multadd+0x12>
 800777c:	b30e      	cbz	r6, 80077c2 <__multadd+0x7e>
 800777e:	68a3      	ldr	r3, [r4, #8]
 8007780:	42ab      	cmp	r3, r5
 8007782:	dc19      	bgt.n	80077b8 <__multadd+0x74>
 8007784:	6861      	ldr	r1, [r4, #4]
 8007786:	4638      	mov	r0, r7
 8007788:	3101      	adds	r1, #1
 800778a:	f7ff ff79 	bl	8007680 <_Balloc>
 800778e:	4680      	mov	r8, r0
 8007790:	b928      	cbnz	r0, 800779e <__multadd+0x5a>
 8007792:	4602      	mov	r2, r0
 8007794:	4b0c      	ldr	r3, [pc, #48]	@ (80077c8 <__multadd+0x84>)
 8007796:	480d      	ldr	r0, [pc, #52]	@ (80077cc <__multadd+0x88>)
 8007798:	21ba      	movs	r1, #186	@ 0xba
 800779a:	f7ff f805 	bl	80067a8 <__assert_func>
 800779e:	6922      	ldr	r2, [r4, #16]
 80077a0:	3202      	adds	r2, #2
 80077a2:	f104 010c 	add.w	r1, r4, #12
 80077a6:	0092      	lsls	r2, r2, #2
 80077a8:	300c      	adds	r0, #12
 80077aa:	f7fe ffe9 	bl	8006780 <memcpy>
 80077ae:	4621      	mov	r1, r4
 80077b0:	4638      	mov	r0, r7
 80077b2:	f7ff ffa5 	bl	8007700 <_Bfree>
 80077b6:	4644      	mov	r4, r8
 80077b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077bc:	3501      	adds	r5, #1
 80077be:	615e      	str	r6, [r3, #20]
 80077c0:	6125      	str	r5, [r4, #16]
 80077c2:	4620      	mov	r0, r4
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c8:	0800a4b0 	.word	0x0800a4b0
 80077cc:	0800a4c1 	.word	0x0800a4c1

080077d0 <__s2b>:
 80077d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d4:	460c      	mov	r4, r1
 80077d6:	4615      	mov	r5, r2
 80077d8:	461f      	mov	r7, r3
 80077da:	2209      	movs	r2, #9
 80077dc:	3308      	adds	r3, #8
 80077de:	4606      	mov	r6, r0
 80077e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077e4:	2100      	movs	r1, #0
 80077e6:	2201      	movs	r2, #1
 80077e8:	429a      	cmp	r2, r3
 80077ea:	db09      	blt.n	8007800 <__s2b+0x30>
 80077ec:	4630      	mov	r0, r6
 80077ee:	f7ff ff47 	bl	8007680 <_Balloc>
 80077f2:	b940      	cbnz	r0, 8007806 <__s2b+0x36>
 80077f4:	4602      	mov	r2, r0
 80077f6:	4b19      	ldr	r3, [pc, #100]	@ (800785c <__s2b+0x8c>)
 80077f8:	4819      	ldr	r0, [pc, #100]	@ (8007860 <__s2b+0x90>)
 80077fa:	21d3      	movs	r1, #211	@ 0xd3
 80077fc:	f7fe ffd4 	bl	80067a8 <__assert_func>
 8007800:	0052      	lsls	r2, r2, #1
 8007802:	3101      	adds	r1, #1
 8007804:	e7f0      	b.n	80077e8 <__s2b+0x18>
 8007806:	9b08      	ldr	r3, [sp, #32]
 8007808:	6143      	str	r3, [r0, #20]
 800780a:	2d09      	cmp	r5, #9
 800780c:	f04f 0301 	mov.w	r3, #1
 8007810:	6103      	str	r3, [r0, #16]
 8007812:	dd16      	ble.n	8007842 <__s2b+0x72>
 8007814:	f104 0909 	add.w	r9, r4, #9
 8007818:	46c8      	mov	r8, r9
 800781a:	442c      	add	r4, r5
 800781c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007820:	4601      	mov	r1, r0
 8007822:	3b30      	subs	r3, #48	@ 0x30
 8007824:	220a      	movs	r2, #10
 8007826:	4630      	mov	r0, r6
 8007828:	f7ff ff8c 	bl	8007744 <__multadd>
 800782c:	45a0      	cmp	r8, r4
 800782e:	d1f5      	bne.n	800781c <__s2b+0x4c>
 8007830:	f1a5 0408 	sub.w	r4, r5, #8
 8007834:	444c      	add	r4, r9
 8007836:	1b2d      	subs	r5, r5, r4
 8007838:	1963      	adds	r3, r4, r5
 800783a:	42bb      	cmp	r3, r7
 800783c:	db04      	blt.n	8007848 <__s2b+0x78>
 800783e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007842:	340a      	adds	r4, #10
 8007844:	2509      	movs	r5, #9
 8007846:	e7f6      	b.n	8007836 <__s2b+0x66>
 8007848:	f814 3b01 	ldrb.w	r3, [r4], #1
 800784c:	4601      	mov	r1, r0
 800784e:	3b30      	subs	r3, #48	@ 0x30
 8007850:	220a      	movs	r2, #10
 8007852:	4630      	mov	r0, r6
 8007854:	f7ff ff76 	bl	8007744 <__multadd>
 8007858:	e7ee      	b.n	8007838 <__s2b+0x68>
 800785a:	bf00      	nop
 800785c:	0800a4b0 	.word	0x0800a4b0
 8007860:	0800a4c1 	.word	0x0800a4c1

08007864 <__hi0bits>:
 8007864:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007868:	4603      	mov	r3, r0
 800786a:	bf36      	itet	cc
 800786c:	0403      	lslcc	r3, r0, #16
 800786e:	2000      	movcs	r0, #0
 8007870:	2010      	movcc	r0, #16
 8007872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007876:	bf3c      	itt	cc
 8007878:	021b      	lslcc	r3, r3, #8
 800787a:	3008      	addcc	r0, #8
 800787c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007880:	bf3c      	itt	cc
 8007882:	011b      	lslcc	r3, r3, #4
 8007884:	3004      	addcc	r0, #4
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788a:	bf3c      	itt	cc
 800788c:	009b      	lslcc	r3, r3, #2
 800788e:	3002      	addcc	r0, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	db05      	blt.n	80078a0 <__hi0bits+0x3c>
 8007894:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007898:	f100 0001 	add.w	r0, r0, #1
 800789c:	bf08      	it	eq
 800789e:	2020      	moveq	r0, #32
 80078a0:	4770      	bx	lr

080078a2 <__lo0bits>:
 80078a2:	6803      	ldr	r3, [r0, #0]
 80078a4:	4602      	mov	r2, r0
 80078a6:	f013 0007 	ands.w	r0, r3, #7
 80078aa:	d00b      	beq.n	80078c4 <__lo0bits+0x22>
 80078ac:	07d9      	lsls	r1, r3, #31
 80078ae:	d421      	bmi.n	80078f4 <__lo0bits+0x52>
 80078b0:	0798      	lsls	r0, r3, #30
 80078b2:	bf49      	itett	mi
 80078b4:	085b      	lsrmi	r3, r3, #1
 80078b6:	089b      	lsrpl	r3, r3, #2
 80078b8:	2001      	movmi	r0, #1
 80078ba:	6013      	strmi	r3, [r2, #0]
 80078bc:	bf5c      	itt	pl
 80078be:	6013      	strpl	r3, [r2, #0]
 80078c0:	2002      	movpl	r0, #2
 80078c2:	4770      	bx	lr
 80078c4:	b299      	uxth	r1, r3
 80078c6:	b909      	cbnz	r1, 80078cc <__lo0bits+0x2a>
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	2010      	movs	r0, #16
 80078cc:	b2d9      	uxtb	r1, r3
 80078ce:	b909      	cbnz	r1, 80078d4 <__lo0bits+0x32>
 80078d0:	3008      	adds	r0, #8
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	0719      	lsls	r1, r3, #28
 80078d6:	bf04      	itt	eq
 80078d8:	091b      	lsreq	r3, r3, #4
 80078da:	3004      	addeq	r0, #4
 80078dc:	0799      	lsls	r1, r3, #30
 80078de:	bf04      	itt	eq
 80078e0:	089b      	lsreq	r3, r3, #2
 80078e2:	3002      	addeq	r0, #2
 80078e4:	07d9      	lsls	r1, r3, #31
 80078e6:	d403      	bmi.n	80078f0 <__lo0bits+0x4e>
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	f100 0001 	add.w	r0, r0, #1
 80078ee:	d003      	beq.n	80078f8 <__lo0bits+0x56>
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	4770      	bx	lr
 80078f4:	2000      	movs	r0, #0
 80078f6:	4770      	bx	lr
 80078f8:	2020      	movs	r0, #32
 80078fa:	4770      	bx	lr

080078fc <__i2b>:
 80078fc:	b510      	push	{r4, lr}
 80078fe:	460c      	mov	r4, r1
 8007900:	2101      	movs	r1, #1
 8007902:	f7ff febd 	bl	8007680 <_Balloc>
 8007906:	4602      	mov	r2, r0
 8007908:	b928      	cbnz	r0, 8007916 <__i2b+0x1a>
 800790a:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <__i2b+0x24>)
 800790c:	4805      	ldr	r0, [pc, #20]	@ (8007924 <__i2b+0x28>)
 800790e:	f240 1145 	movw	r1, #325	@ 0x145
 8007912:	f7fe ff49 	bl	80067a8 <__assert_func>
 8007916:	2301      	movs	r3, #1
 8007918:	6144      	str	r4, [r0, #20]
 800791a:	6103      	str	r3, [r0, #16]
 800791c:	bd10      	pop	{r4, pc}
 800791e:	bf00      	nop
 8007920:	0800a4b0 	.word	0x0800a4b0
 8007924:	0800a4c1 	.word	0x0800a4c1

08007928 <__multiply>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	4614      	mov	r4, r2
 800792e:	690a      	ldr	r2, [r1, #16]
 8007930:	6923      	ldr	r3, [r4, #16]
 8007932:	429a      	cmp	r2, r3
 8007934:	bfa8      	it	ge
 8007936:	4623      	movge	r3, r4
 8007938:	460f      	mov	r7, r1
 800793a:	bfa4      	itt	ge
 800793c:	460c      	movge	r4, r1
 800793e:	461f      	movge	r7, r3
 8007940:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007944:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	6861      	ldr	r1, [r4, #4]
 800794c:	eb0a 0609 	add.w	r6, sl, r9
 8007950:	42b3      	cmp	r3, r6
 8007952:	b085      	sub	sp, #20
 8007954:	bfb8      	it	lt
 8007956:	3101      	addlt	r1, #1
 8007958:	f7ff fe92 	bl	8007680 <_Balloc>
 800795c:	b930      	cbnz	r0, 800796c <__multiply+0x44>
 800795e:	4602      	mov	r2, r0
 8007960:	4b44      	ldr	r3, [pc, #272]	@ (8007a74 <__multiply+0x14c>)
 8007962:	4845      	ldr	r0, [pc, #276]	@ (8007a78 <__multiply+0x150>)
 8007964:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007968:	f7fe ff1e 	bl	80067a8 <__assert_func>
 800796c:	f100 0514 	add.w	r5, r0, #20
 8007970:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007974:	462b      	mov	r3, r5
 8007976:	2200      	movs	r2, #0
 8007978:	4543      	cmp	r3, r8
 800797a:	d321      	bcc.n	80079c0 <__multiply+0x98>
 800797c:	f107 0114 	add.w	r1, r7, #20
 8007980:	f104 0214 	add.w	r2, r4, #20
 8007984:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007988:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800798c:	9302      	str	r3, [sp, #8]
 800798e:	1b13      	subs	r3, r2, r4
 8007990:	3b15      	subs	r3, #21
 8007992:	f023 0303 	bic.w	r3, r3, #3
 8007996:	3304      	adds	r3, #4
 8007998:	f104 0715 	add.w	r7, r4, #21
 800799c:	42ba      	cmp	r2, r7
 800799e:	bf38      	it	cc
 80079a0:	2304      	movcc	r3, #4
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	9b02      	ldr	r3, [sp, #8]
 80079a6:	9103      	str	r1, [sp, #12]
 80079a8:	428b      	cmp	r3, r1
 80079aa:	d80c      	bhi.n	80079c6 <__multiply+0x9e>
 80079ac:	2e00      	cmp	r6, #0
 80079ae:	dd03      	ble.n	80079b8 <__multiply+0x90>
 80079b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d05b      	beq.n	8007a70 <__multiply+0x148>
 80079b8:	6106      	str	r6, [r0, #16]
 80079ba:	b005      	add	sp, #20
 80079bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c0:	f843 2b04 	str.w	r2, [r3], #4
 80079c4:	e7d8      	b.n	8007978 <__multiply+0x50>
 80079c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80079ca:	f1ba 0f00 	cmp.w	sl, #0
 80079ce:	d024      	beq.n	8007a1a <__multiply+0xf2>
 80079d0:	f104 0e14 	add.w	lr, r4, #20
 80079d4:	46a9      	mov	r9, r5
 80079d6:	f04f 0c00 	mov.w	ip, #0
 80079da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079de:	f8d9 3000 	ldr.w	r3, [r9]
 80079e2:	fa1f fb87 	uxth.w	fp, r7
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80079ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80079f0:	f8d9 7000 	ldr.w	r7, [r9]
 80079f4:	4463      	add	r3, ip
 80079f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80079fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a08:	4572      	cmp	r2, lr
 8007a0a:	f849 3b04 	str.w	r3, [r9], #4
 8007a0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007a12:	d8e2      	bhi.n	80079da <__multiply+0xb2>
 8007a14:	9b01      	ldr	r3, [sp, #4]
 8007a16:	f845 c003 	str.w	ip, [r5, r3]
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007a20:	3104      	adds	r1, #4
 8007a22:	f1b9 0f00 	cmp.w	r9, #0
 8007a26:	d021      	beq.n	8007a6c <__multiply+0x144>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	f104 0c14 	add.w	ip, r4, #20
 8007a2e:	46ae      	mov	lr, r5
 8007a30:	f04f 0a00 	mov.w	sl, #0
 8007a34:	f8bc b000 	ldrh.w	fp, [ip]
 8007a38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007a3c:	fb09 770b 	mla	r7, r9, fp, r7
 8007a40:	4457      	add	r7, sl
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a48:	f84e 3b04 	str.w	r3, [lr], #4
 8007a4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a54:	f8be 3000 	ldrh.w	r3, [lr]
 8007a58:	fb09 330a 	mla	r3, r9, sl, r3
 8007a5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007a60:	4562      	cmp	r2, ip
 8007a62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a66:	d8e5      	bhi.n	8007a34 <__multiply+0x10c>
 8007a68:	9f01      	ldr	r7, [sp, #4]
 8007a6a:	51eb      	str	r3, [r5, r7]
 8007a6c:	3504      	adds	r5, #4
 8007a6e:	e799      	b.n	80079a4 <__multiply+0x7c>
 8007a70:	3e01      	subs	r6, #1
 8007a72:	e79b      	b.n	80079ac <__multiply+0x84>
 8007a74:	0800a4b0 	.word	0x0800a4b0
 8007a78:	0800a4c1 	.word	0x0800a4c1

08007a7c <__pow5mult>:
 8007a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a80:	4615      	mov	r5, r2
 8007a82:	f012 0203 	ands.w	r2, r2, #3
 8007a86:	4607      	mov	r7, r0
 8007a88:	460e      	mov	r6, r1
 8007a8a:	d007      	beq.n	8007a9c <__pow5mult+0x20>
 8007a8c:	4c25      	ldr	r4, [pc, #148]	@ (8007b24 <__pow5mult+0xa8>)
 8007a8e:	3a01      	subs	r2, #1
 8007a90:	2300      	movs	r3, #0
 8007a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a96:	f7ff fe55 	bl	8007744 <__multadd>
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	10ad      	asrs	r5, r5, #2
 8007a9e:	d03d      	beq.n	8007b1c <__pow5mult+0xa0>
 8007aa0:	69fc      	ldr	r4, [r7, #28]
 8007aa2:	b97c      	cbnz	r4, 8007ac4 <__pow5mult+0x48>
 8007aa4:	2010      	movs	r0, #16
 8007aa6:	f7ff fd35 	bl	8007514 <malloc>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	61f8      	str	r0, [r7, #28]
 8007aae:	b928      	cbnz	r0, 8007abc <__pow5mult+0x40>
 8007ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b28 <__pow5mult+0xac>)
 8007ab2:	481e      	ldr	r0, [pc, #120]	@ (8007b2c <__pow5mult+0xb0>)
 8007ab4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ab8:	f7fe fe76 	bl	80067a8 <__assert_func>
 8007abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ac0:	6004      	str	r4, [r0, #0]
 8007ac2:	60c4      	str	r4, [r0, #12]
 8007ac4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007acc:	b94c      	cbnz	r4, 8007ae2 <__pow5mult+0x66>
 8007ace:	f240 2171 	movw	r1, #625	@ 0x271
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f7ff ff12 	bl	80078fc <__i2b>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ade:	4604      	mov	r4, r0
 8007ae0:	6003      	str	r3, [r0, #0]
 8007ae2:	f04f 0900 	mov.w	r9, #0
 8007ae6:	07eb      	lsls	r3, r5, #31
 8007ae8:	d50a      	bpl.n	8007b00 <__pow5mult+0x84>
 8007aea:	4631      	mov	r1, r6
 8007aec:	4622      	mov	r2, r4
 8007aee:	4638      	mov	r0, r7
 8007af0:	f7ff ff1a 	bl	8007928 <__multiply>
 8007af4:	4631      	mov	r1, r6
 8007af6:	4680      	mov	r8, r0
 8007af8:	4638      	mov	r0, r7
 8007afa:	f7ff fe01 	bl	8007700 <_Bfree>
 8007afe:	4646      	mov	r6, r8
 8007b00:	106d      	asrs	r5, r5, #1
 8007b02:	d00b      	beq.n	8007b1c <__pow5mult+0xa0>
 8007b04:	6820      	ldr	r0, [r4, #0]
 8007b06:	b938      	cbnz	r0, 8007b18 <__pow5mult+0x9c>
 8007b08:	4622      	mov	r2, r4
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	f7ff ff0b 	bl	8007928 <__multiply>
 8007b12:	6020      	str	r0, [r4, #0]
 8007b14:	f8c0 9000 	str.w	r9, [r0]
 8007b18:	4604      	mov	r4, r0
 8007b1a:	e7e4      	b.n	8007ae6 <__pow5mult+0x6a>
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b22:	bf00      	nop
 8007b24:	0800a51c 	.word	0x0800a51c
 8007b28:	0800a39e 	.word	0x0800a39e
 8007b2c:	0800a4c1 	.word	0x0800a4c1

08007b30 <__lshift>:
 8007b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b34:	460c      	mov	r4, r1
 8007b36:	6849      	ldr	r1, [r1, #4]
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	4607      	mov	r7, r0
 8007b42:	4691      	mov	r9, r2
 8007b44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b48:	f108 0601 	add.w	r6, r8, #1
 8007b4c:	42b3      	cmp	r3, r6
 8007b4e:	db0b      	blt.n	8007b68 <__lshift+0x38>
 8007b50:	4638      	mov	r0, r7
 8007b52:	f7ff fd95 	bl	8007680 <_Balloc>
 8007b56:	4605      	mov	r5, r0
 8007b58:	b948      	cbnz	r0, 8007b6e <__lshift+0x3e>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4b28      	ldr	r3, [pc, #160]	@ (8007c00 <__lshift+0xd0>)
 8007b5e:	4829      	ldr	r0, [pc, #164]	@ (8007c04 <__lshift+0xd4>)
 8007b60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b64:	f7fe fe20 	bl	80067a8 <__assert_func>
 8007b68:	3101      	adds	r1, #1
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	e7ee      	b.n	8007b4c <__lshift+0x1c>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f100 0114 	add.w	r1, r0, #20
 8007b74:	f100 0210 	add.w	r2, r0, #16
 8007b78:	4618      	mov	r0, r3
 8007b7a:	4553      	cmp	r3, sl
 8007b7c:	db33      	blt.n	8007be6 <__lshift+0xb6>
 8007b7e:	6920      	ldr	r0, [r4, #16]
 8007b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b84:	f104 0314 	add.w	r3, r4, #20
 8007b88:	f019 091f 	ands.w	r9, r9, #31
 8007b8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b94:	d02b      	beq.n	8007bee <__lshift+0xbe>
 8007b96:	f1c9 0e20 	rsb	lr, r9, #32
 8007b9a:	468a      	mov	sl, r1
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	fa00 f009 	lsl.w	r0, r0, r9
 8007ba4:	4310      	orrs	r0, r2
 8007ba6:	f84a 0b04 	str.w	r0, [sl], #4
 8007baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bae:	459c      	cmp	ip, r3
 8007bb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bb4:	d8f3      	bhi.n	8007b9e <__lshift+0x6e>
 8007bb6:	ebac 0304 	sub.w	r3, ip, r4
 8007bba:	3b15      	subs	r3, #21
 8007bbc:	f023 0303 	bic.w	r3, r3, #3
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	f104 0015 	add.w	r0, r4, #21
 8007bc6:	4584      	cmp	ip, r0
 8007bc8:	bf38      	it	cc
 8007bca:	2304      	movcc	r3, #4
 8007bcc:	50ca      	str	r2, [r1, r3]
 8007bce:	b10a      	cbz	r2, 8007bd4 <__lshift+0xa4>
 8007bd0:	f108 0602 	add.w	r6, r8, #2
 8007bd4:	3e01      	subs	r6, #1
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	612e      	str	r6, [r5, #16]
 8007bda:	4621      	mov	r1, r4
 8007bdc:	f7ff fd90 	bl	8007700 <_Bfree>
 8007be0:	4628      	mov	r0, r5
 8007be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bea:	3301      	adds	r3, #1
 8007bec:	e7c5      	b.n	8007b7a <__lshift+0x4a>
 8007bee:	3904      	subs	r1, #4
 8007bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bf8:	459c      	cmp	ip, r3
 8007bfa:	d8f9      	bhi.n	8007bf0 <__lshift+0xc0>
 8007bfc:	e7ea      	b.n	8007bd4 <__lshift+0xa4>
 8007bfe:	bf00      	nop
 8007c00:	0800a4b0 	.word	0x0800a4b0
 8007c04:	0800a4c1 	.word	0x0800a4c1

08007c08 <__mcmp>:
 8007c08:	690a      	ldr	r2, [r1, #16]
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	6900      	ldr	r0, [r0, #16]
 8007c0e:	1a80      	subs	r0, r0, r2
 8007c10:	b530      	push	{r4, r5, lr}
 8007c12:	d10e      	bne.n	8007c32 <__mcmp+0x2a>
 8007c14:	3314      	adds	r3, #20
 8007c16:	3114      	adds	r1, #20
 8007c18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c28:	4295      	cmp	r5, r2
 8007c2a:	d003      	beq.n	8007c34 <__mcmp+0x2c>
 8007c2c:	d205      	bcs.n	8007c3a <__mcmp+0x32>
 8007c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c32:	bd30      	pop	{r4, r5, pc}
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	d3f3      	bcc.n	8007c20 <__mcmp+0x18>
 8007c38:	e7fb      	b.n	8007c32 <__mcmp+0x2a>
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	e7f9      	b.n	8007c32 <__mcmp+0x2a>
	...

08007c40 <__mdiff>:
 8007c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	4689      	mov	r9, r1
 8007c46:	4606      	mov	r6, r0
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	f7ff ffdb 	bl	8007c08 <__mcmp>
 8007c52:	1e05      	subs	r5, r0, #0
 8007c54:	d112      	bne.n	8007c7c <__mdiff+0x3c>
 8007c56:	4629      	mov	r1, r5
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f7ff fd11 	bl	8007680 <_Balloc>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	b928      	cbnz	r0, 8007c6e <__mdiff+0x2e>
 8007c62:	4b3f      	ldr	r3, [pc, #252]	@ (8007d60 <__mdiff+0x120>)
 8007c64:	f240 2137 	movw	r1, #567	@ 0x237
 8007c68:	483e      	ldr	r0, [pc, #248]	@ (8007d64 <__mdiff+0x124>)
 8007c6a:	f7fe fd9d 	bl	80067a8 <__assert_func>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c74:	4610      	mov	r0, r2
 8007c76:	b003      	add	sp, #12
 8007c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7c:	bfbc      	itt	lt
 8007c7e:	464b      	movlt	r3, r9
 8007c80:	46a1      	movlt	r9, r4
 8007c82:	4630      	mov	r0, r6
 8007c84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c88:	bfba      	itte	lt
 8007c8a:	461c      	movlt	r4, r3
 8007c8c:	2501      	movlt	r5, #1
 8007c8e:	2500      	movge	r5, #0
 8007c90:	f7ff fcf6 	bl	8007680 <_Balloc>
 8007c94:	4602      	mov	r2, r0
 8007c96:	b918      	cbnz	r0, 8007ca0 <__mdiff+0x60>
 8007c98:	4b31      	ldr	r3, [pc, #196]	@ (8007d60 <__mdiff+0x120>)
 8007c9a:	f240 2145 	movw	r1, #581	@ 0x245
 8007c9e:	e7e3      	b.n	8007c68 <__mdiff+0x28>
 8007ca0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ca4:	6926      	ldr	r6, [r4, #16]
 8007ca6:	60c5      	str	r5, [r0, #12]
 8007ca8:	f109 0310 	add.w	r3, r9, #16
 8007cac:	f109 0514 	add.w	r5, r9, #20
 8007cb0:	f104 0e14 	add.w	lr, r4, #20
 8007cb4:	f100 0b14 	add.w	fp, r0, #20
 8007cb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007cbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	46d9      	mov	r9, fp
 8007cc4:	f04f 0c00 	mov.w	ip, #0
 8007cc8:	9b01      	ldr	r3, [sp, #4]
 8007cca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007cce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	fa1f f38a 	uxth.w	r3, sl
 8007cd8:	4619      	mov	r1, r3
 8007cda:	b283      	uxth	r3, r0
 8007cdc:	1acb      	subs	r3, r1, r3
 8007cde:	0c00      	lsrs	r0, r0, #16
 8007ce0:	4463      	add	r3, ip
 8007ce2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ce6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cf0:	4576      	cmp	r6, lr
 8007cf2:	f849 3b04 	str.w	r3, [r9], #4
 8007cf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cfa:	d8e5      	bhi.n	8007cc8 <__mdiff+0x88>
 8007cfc:	1b33      	subs	r3, r6, r4
 8007cfe:	3b15      	subs	r3, #21
 8007d00:	f023 0303 	bic.w	r3, r3, #3
 8007d04:	3415      	adds	r4, #21
 8007d06:	3304      	adds	r3, #4
 8007d08:	42a6      	cmp	r6, r4
 8007d0a:	bf38      	it	cc
 8007d0c:	2304      	movcc	r3, #4
 8007d0e:	441d      	add	r5, r3
 8007d10:	445b      	add	r3, fp
 8007d12:	461e      	mov	r6, r3
 8007d14:	462c      	mov	r4, r5
 8007d16:	4544      	cmp	r4, r8
 8007d18:	d30e      	bcc.n	8007d38 <__mdiff+0xf8>
 8007d1a:	f108 0103 	add.w	r1, r8, #3
 8007d1e:	1b49      	subs	r1, r1, r5
 8007d20:	f021 0103 	bic.w	r1, r1, #3
 8007d24:	3d03      	subs	r5, #3
 8007d26:	45a8      	cmp	r8, r5
 8007d28:	bf38      	it	cc
 8007d2a:	2100      	movcc	r1, #0
 8007d2c:	440b      	add	r3, r1
 8007d2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d32:	b191      	cbz	r1, 8007d5a <__mdiff+0x11a>
 8007d34:	6117      	str	r7, [r2, #16]
 8007d36:	e79d      	b.n	8007c74 <__mdiff+0x34>
 8007d38:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d3c:	46e6      	mov	lr, ip
 8007d3e:	0c08      	lsrs	r0, r1, #16
 8007d40:	fa1c fc81 	uxtah	ip, ip, r1
 8007d44:	4471      	add	r1, lr
 8007d46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d4a:	b289      	uxth	r1, r1
 8007d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d50:	f846 1b04 	str.w	r1, [r6], #4
 8007d54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d58:	e7dd      	b.n	8007d16 <__mdiff+0xd6>
 8007d5a:	3f01      	subs	r7, #1
 8007d5c:	e7e7      	b.n	8007d2e <__mdiff+0xee>
 8007d5e:	bf00      	nop
 8007d60:	0800a4b0 	.word	0x0800a4b0
 8007d64:	0800a4c1 	.word	0x0800a4c1

08007d68 <__ulp>:
 8007d68:	b082      	sub	sp, #8
 8007d6a:	ed8d 0b00 	vstr	d0, [sp]
 8007d6e:	9a01      	ldr	r2, [sp, #4]
 8007d70:	4b0f      	ldr	r3, [pc, #60]	@ (8007db0 <__ulp+0x48>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	dc08      	bgt.n	8007d8e <__ulp+0x26>
 8007d7c:	425b      	negs	r3, r3
 8007d7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007d82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007d86:	da04      	bge.n	8007d92 <__ulp+0x2a>
 8007d88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007d8c:	4113      	asrs	r3, r2
 8007d8e:	2200      	movs	r2, #0
 8007d90:	e008      	b.n	8007da4 <__ulp+0x3c>
 8007d92:	f1a2 0314 	sub.w	r3, r2, #20
 8007d96:	2b1e      	cmp	r3, #30
 8007d98:	bfda      	itte	le
 8007d9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007d9e:	40da      	lsrle	r2, r3
 8007da0:	2201      	movgt	r2, #1
 8007da2:	2300      	movs	r3, #0
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	ec41 0b10 	vmov	d0, r0, r1
 8007dac:	b002      	add	sp, #8
 8007dae:	4770      	bx	lr
 8007db0:	7ff00000 	.word	0x7ff00000

08007db4 <__b2d>:
 8007db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db8:	6906      	ldr	r6, [r0, #16]
 8007dba:	f100 0814 	add.w	r8, r0, #20
 8007dbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007dc2:	1f37      	subs	r7, r6, #4
 8007dc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f7ff fd4b 	bl	8007864 <__hi0bits>
 8007dce:	f1c0 0320 	rsb	r3, r0, #32
 8007dd2:	280a      	cmp	r0, #10
 8007dd4:	600b      	str	r3, [r1, #0]
 8007dd6:	491b      	ldr	r1, [pc, #108]	@ (8007e44 <__b2d+0x90>)
 8007dd8:	dc15      	bgt.n	8007e06 <__b2d+0x52>
 8007dda:	f1c0 0c0b 	rsb	ip, r0, #11
 8007dde:	fa22 f30c 	lsr.w	r3, r2, ip
 8007de2:	45b8      	cmp	r8, r7
 8007de4:	ea43 0501 	orr.w	r5, r3, r1
 8007de8:	bf34      	ite	cc
 8007dea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007dee:	2300      	movcs	r3, #0
 8007df0:	3015      	adds	r0, #21
 8007df2:	fa02 f000 	lsl.w	r0, r2, r0
 8007df6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007dfa:	4303      	orrs	r3, r0
 8007dfc:	461c      	mov	r4, r3
 8007dfe:	ec45 4b10 	vmov	d0, r4, r5
 8007e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e06:	45b8      	cmp	r8, r7
 8007e08:	bf3a      	itte	cc
 8007e0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007e0e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007e12:	2300      	movcs	r3, #0
 8007e14:	380b      	subs	r0, #11
 8007e16:	d012      	beq.n	8007e3e <__b2d+0x8a>
 8007e18:	f1c0 0120 	rsb	r1, r0, #32
 8007e1c:	fa23 f401 	lsr.w	r4, r3, r1
 8007e20:	4082      	lsls	r2, r0
 8007e22:	4322      	orrs	r2, r4
 8007e24:	4547      	cmp	r7, r8
 8007e26:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007e2a:	bf8c      	ite	hi
 8007e2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007e30:	2200      	movls	r2, #0
 8007e32:	4083      	lsls	r3, r0
 8007e34:	40ca      	lsrs	r2, r1
 8007e36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	e7de      	b.n	8007dfc <__b2d+0x48>
 8007e3e:	ea42 0501 	orr.w	r5, r2, r1
 8007e42:	e7db      	b.n	8007dfc <__b2d+0x48>
 8007e44:	3ff00000 	.word	0x3ff00000

08007e48 <__d2b>:
 8007e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	2101      	movs	r1, #1
 8007e50:	ec59 8b10 	vmov	r8, r9, d0
 8007e54:	4616      	mov	r6, r2
 8007e56:	f7ff fc13 	bl	8007680 <_Balloc>
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	b930      	cbnz	r0, 8007e6c <__d2b+0x24>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	4b23      	ldr	r3, [pc, #140]	@ (8007ef0 <__d2b+0xa8>)
 8007e62:	4824      	ldr	r0, [pc, #144]	@ (8007ef4 <__d2b+0xac>)
 8007e64:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e68:	f7fe fc9e 	bl	80067a8 <__assert_func>
 8007e6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e74:	b10d      	cbz	r5, 8007e7a <__d2b+0x32>
 8007e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e7a:	9301      	str	r3, [sp, #4]
 8007e7c:	f1b8 0300 	subs.w	r3, r8, #0
 8007e80:	d023      	beq.n	8007eca <__d2b+0x82>
 8007e82:	4668      	mov	r0, sp
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	f7ff fd0c 	bl	80078a2 <__lo0bits>
 8007e8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e8e:	b1d0      	cbz	r0, 8007ec6 <__d2b+0x7e>
 8007e90:	f1c0 0320 	rsb	r3, r0, #32
 8007e94:	fa02 f303 	lsl.w	r3, r2, r3
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	40c2      	lsrs	r2, r0
 8007e9c:	6163      	str	r3, [r4, #20]
 8007e9e:	9201      	str	r2, [sp, #4]
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	61a3      	str	r3, [r4, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2201      	moveq	r2, #1
 8007eaa:	2202      	movne	r2, #2
 8007eac:	6122      	str	r2, [r4, #16]
 8007eae:	b1a5      	cbz	r5, 8007eda <__d2b+0x92>
 8007eb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007eb4:	4405      	add	r5, r0
 8007eb6:	603d      	str	r5, [r7, #0]
 8007eb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007ebc:	6030      	str	r0, [r6, #0]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	b003      	add	sp, #12
 8007ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ec6:	6161      	str	r1, [r4, #20]
 8007ec8:	e7ea      	b.n	8007ea0 <__d2b+0x58>
 8007eca:	a801      	add	r0, sp, #4
 8007ecc:	f7ff fce9 	bl	80078a2 <__lo0bits>
 8007ed0:	9b01      	ldr	r3, [sp, #4]
 8007ed2:	6163      	str	r3, [r4, #20]
 8007ed4:	3020      	adds	r0, #32
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	e7e8      	b.n	8007eac <__d2b+0x64>
 8007eda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ede:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ee2:	6038      	str	r0, [r7, #0]
 8007ee4:	6918      	ldr	r0, [r3, #16]
 8007ee6:	f7ff fcbd 	bl	8007864 <__hi0bits>
 8007eea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007eee:	e7e5      	b.n	8007ebc <__d2b+0x74>
 8007ef0:	0800a4b0 	.word	0x0800a4b0
 8007ef4:	0800a4c1 	.word	0x0800a4c1

08007ef8 <__ratio>:
 8007ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	b085      	sub	sp, #20
 8007efe:	e9cd 1000 	strd	r1, r0, [sp]
 8007f02:	a902      	add	r1, sp, #8
 8007f04:	f7ff ff56 	bl	8007db4 <__b2d>
 8007f08:	9800      	ldr	r0, [sp, #0]
 8007f0a:	a903      	add	r1, sp, #12
 8007f0c:	ec55 4b10 	vmov	r4, r5, d0
 8007f10:	f7ff ff50 	bl	8007db4 <__b2d>
 8007f14:	9b01      	ldr	r3, [sp, #4]
 8007f16:	6919      	ldr	r1, [r3, #16]
 8007f18:	9b00      	ldr	r3, [sp, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	1ac9      	subs	r1, r1, r3
 8007f1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007f22:	1a9b      	subs	r3, r3, r2
 8007f24:	ec5b ab10 	vmov	sl, fp, d0
 8007f28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bfce      	itee	gt
 8007f30:	462a      	movgt	r2, r5
 8007f32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f36:	465a      	movle	r2, fp
 8007f38:	462f      	mov	r7, r5
 8007f3a:	46d9      	mov	r9, fp
 8007f3c:	bfcc      	ite	gt
 8007f3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007f46:	464b      	mov	r3, r9
 8007f48:	4652      	mov	r2, sl
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 fc9d 	bl	800088c <__aeabi_ddiv>
 8007f52:	ec41 0b10 	vmov	d0, r0, r1
 8007f56:	b005      	add	sp, #20
 8007f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f5c <__copybits>:
 8007f5c:	3901      	subs	r1, #1
 8007f5e:	b570      	push	{r4, r5, r6, lr}
 8007f60:	1149      	asrs	r1, r1, #5
 8007f62:	6914      	ldr	r4, [r2, #16]
 8007f64:	3101      	adds	r1, #1
 8007f66:	f102 0314 	add.w	r3, r2, #20
 8007f6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007f6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f72:	1f05      	subs	r5, r0, #4
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	d30c      	bcc.n	8007f92 <__copybits+0x36>
 8007f78:	1aa3      	subs	r3, r4, r2
 8007f7a:	3b11      	subs	r3, #17
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	3211      	adds	r2, #17
 8007f82:	42a2      	cmp	r2, r4
 8007f84:	bf88      	it	hi
 8007f86:	2300      	movhi	r3, #0
 8007f88:	4418      	add	r0, r3
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4288      	cmp	r0, r1
 8007f8e:	d305      	bcc.n	8007f9c <__copybits+0x40>
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
 8007f92:	f853 6b04 	ldr.w	r6, [r3], #4
 8007f96:	f845 6f04 	str.w	r6, [r5, #4]!
 8007f9a:	e7eb      	b.n	8007f74 <__copybits+0x18>
 8007f9c:	f840 3b04 	str.w	r3, [r0], #4
 8007fa0:	e7f4      	b.n	8007f8c <__copybits+0x30>

08007fa2 <__any_on>:
 8007fa2:	f100 0214 	add.w	r2, r0, #20
 8007fa6:	6900      	ldr	r0, [r0, #16]
 8007fa8:	114b      	asrs	r3, r1, #5
 8007faa:	4298      	cmp	r0, r3
 8007fac:	b510      	push	{r4, lr}
 8007fae:	db11      	blt.n	8007fd4 <__any_on+0x32>
 8007fb0:	dd0a      	ble.n	8007fc8 <__any_on+0x26>
 8007fb2:	f011 011f 	ands.w	r1, r1, #31
 8007fb6:	d007      	beq.n	8007fc8 <__any_on+0x26>
 8007fb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007fbc:	fa24 f001 	lsr.w	r0, r4, r1
 8007fc0:	fa00 f101 	lsl.w	r1, r0, r1
 8007fc4:	428c      	cmp	r4, r1
 8007fc6:	d10b      	bne.n	8007fe0 <__any_on+0x3e>
 8007fc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d803      	bhi.n	8007fd8 <__any_on+0x36>
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	bd10      	pop	{r4, pc}
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	e7f7      	b.n	8007fc8 <__any_on+0x26>
 8007fd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fdc:	2900      	cmp	r1, #0
 8007fde:	d0f5      	beq.n	8007fcc <__any_on+0x2a>
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	e7f6      	b.n	8007fd2 <__any_on+0x30>

08007fe4 <sulp>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	460d      	mov	r5, r1
 8007fea:	ec45 4b10 	vmov	d0, r4, r5
 8007fee:	4616      	mov	r6, r2
 8007ff0:	f7ff feba 	bl	8007d68 <__ulp>
 8007ff4:	ec51 0b10 	vmov	r0, r1, d0
 8007ff8:	b17e      	cbz	r6, 800801a <sulp+0x36>
 8007ffa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ffe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008002:	2b00      	cmp	r3, #0
 8008004:	dd09      	ble.n	800801a <sulp+0x36>
 8008006:	051b      	lsls	r3, r3, #20
 8008008:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800800c:	2400      	movs	r4, #0
 800800e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008012:	4622      	mov	r2, r4
 8008014:	462b      	mov	r3, r5
 8008016:	f7f8 fb0f 	bl	8000638 <__aeabi_dmul>
 800801a:	ec41 0b10 	vmov	d0, r0, r1
 800801e:	bd70      	pop	{r4, r5, r6, pc}

08008020 <_strtod_l>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	b09f      	sub	sp, #124	@ 0x7c
 8008026:	460c      	mov	r4, r1
 8008028:	9217      	str	r2, [sp, #92]	@ 0x5c
 800802a:	2200      	movs	r2, #0
 800802c:	921a      	str	r2, [sp, #104]	@ 0x68
 800802e:	9005      	str	r0, [sp, #20]
 8008030:	f04f 0a00 	mov.w	sl, #0
 8008034:	f04f 0b00 	mov.w	fp, #0
 8008038:	460a      	mov	r2, r1
 800803a:	9219      	str	r2, [sp, #100]	@ 0x64
 800803c:	7811      	ldrb	r1, [r2, #0]
 800803e:	292b      	cmp	r1, #43	@ 0x2b
 8008040:	d04a      	beq.n	80080d8 <_strtod_l+0xb8>
 8008042:	d838      	bhi.n	80080b6 <_strtod_l+0x96>
 8008044:	290d      	cmp	r1, #13
 8008046:	d832      	bhi.n	80080ae <_strtod_l+0x8e>
 8008048:	2908      	cmp	r1, #8
 800804a:	d832      	bhi.n	80080b2 <_strtod_l+0x92>
 800804c:	2900      	cmp	r1, #0
 800804e:	d03b      	beq.n	80080c8 <_strtod_l+0xa8>
 8008050:	2200      	movs	r2, #0
 8008052:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008054:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008056:	782a      	ldrb	r2, [r5, #0]
 8008058:	2a30      	cmp	r2, #48	@ 0x30
 800805a:	f040 80b3 	bne.w	80081c4 <_strtod_l+0x1a4>
 800805e:	786a      	ldrb	r2, [r5, #1]
 8008060:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008064:	2a58      	cmp	r2, #88	@ 0x58
 8008066:	d16e      	bne.n	8008146 <_strtod_l+0x126>
 8008068:	9302      	str	r3, [sp, #8]
 800806a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4a8e      	ldr	r2, [pc, #568]	@ (80082ac <_strtod_l+0x28c>)
 8008074:	9805      	ldr	r0, [sp, #20]
 8008076:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008078:	a919      	add	r1, sp, #100	@ 0x64
 800807a:	f001 f9fb 	bl	8009474 <__gethex>
 800807e:	f010 060f 	ands.w	r6, r0, #15
 8008082:	4604      	mov	r4, r0
 8008084:	d005      	beq.n	8008092 <_strtod_l+0x72>
 8008086:	2e06      	cmp	r6, #6
 8008088:	d128      	bne.n	80080dc <_strtod_l+0xbc>
 800808a:	3501      	adds	r5, #1
 800808c:	2300      	movs	r3, #0
 800808e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008092:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008094:	2b00      	cmp	r3, #0
 8008096:	f040 858e 	bne.w	8008bb6 <_strtod_l+0xb96>
 800809a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800809c:	b1cb      	cbz	r3, 80080d2 <_strtod_l+0xb2>
 800809e:	4652      	mov	r2, sl
 80080a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80080a4:	ec43 2b10 	vmov	d0, r2, r3
 80080a8:	b01f      	add	sp, #124	@ 0x7c
 80080aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ae:	2920      	cmp	r1, #32
 80080b0:	d1ce      	bne.n	8008050 <_strtod_l+0x30>
 80080b2:	3201      	adds	r2, #1
 80080b4:	e7c1      	b.n	800803a <_strtod_l+0x1a>
 80080b6:	292d      	cmp	r1, #45	@ 0x2d
 80080b8:	d1ca      	bne.n	8008050 <_strtod_l+0x30>
 80080ba:	2101      	movs	r1, #1
 80080bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80080be:	1c51      	adds	r1, r2, #1
 80080c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80080c2:	7852      	ldrb	r2, [r2, #1]
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	d1c5      	bne.n	8008054 <_strtod_l+0x34>
 80080c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f040 8570 	bne.w	8008bb2 <_strtod_l+0xb92>
 80080d2:	4652      	mov	r2, sl
 80080d4:	465b      	mov	r3, fp
 80080d6:	e7e5      	b.n	80080a4 <_strtod_l+0x84>
 80080d8:	2100      	movs	r1, #0
 80080da:	e7ef      	b.n	80080bc <_strtod_l+0x9c>
 80080dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80080de:	b13a      	cbz	r2, 80080f0 <_strtod_l+0xd0>
 80080e0:	2135      	movs	r1, #53	@ 0x35
 80080e2:	a81c      	add	r0, sp, #112	@ 0x70
 80080e4:	f7ff ff3a 	bl	8007f5c <__copybits>
 80080e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080ea:	9805      	ldr	r0, [sp, #20]
 80080ec:	f7ff fb08 	bl	8007700 <_Bfree>
 80080f0:	3e01      	subs	r6, #1
 80080f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80080f4:	2e04      	cmp	r6, #4
 80080f6:	d806      	bhi.n	8008106 <_strtod_l+0xe6>
 80080f8:	e8df f006 	tbb	[pc, r6]
 80080fc:	201d0314 	.word	0x201d0314
 8008100:	14          	.byte	0x14
 8008101:	00          	.byte	0x00
 8008102:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008106:	05e1      	lsls	r1, r4, #23
 8008108:	bf48      	it	mi
 800810a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800810e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008112:	0d1b      	lsrs	r3, r3, #20
 8008114:	051b      	lsls	r3, r3, #20
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1bb      	bne.n	8008092 <_strtod_l+0x72>
 800811a:	f7fe fb03 	bl	8006724 <__errno>
 800811e:	2322      	movs	r3, #34	@ 0x22
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	e7b6      	b.n	8008092 <_strtod_l+0x72>
 8008124:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008128:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800812c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008130:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008134:	e7e7      	b.n	8008106 <_strtod_l+0xe6>
 8008136:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80082b4 <_strtod_l+0x294>
 800813a:	e7e4      	b.n	8008106 <_strtod_l+0xe6>
 800813c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008140:	f04f 3aff 	mov.w	sl, #4294967295
 8008144:	e7df      	b.n	8008106 <_strtod_l+0xe6>
 8008146:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	9219      	str	r2, [sp, #100]	@ 0x64
 800814c:	785b      	ldrb	r3, [r3, #1]
 800814e:	2b30      	cmp	r3, #48	@ 0x30
 8008150:	d0f9      	beq.n	8008146 <_strtod_l+0x126>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d09d      	beq.n	8008092 <_strtod_l+0x72>
 8008156:	2301      	movs	r3, #1
 8008158:	9309      	str	r3, [sp, #36]	@ 0x24
 800815a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800815c:	930c      	str	r3, [sp, #48]	@ 0x30
 800815e:	2300      	movs	r3, #0
 8008160:	9308      	str	r3, [sp, #32]
 8008162:	930a      	str	r3, [sp, #40]	@ 0x28
 8008164:	461f      	mov	r7, r3
 8008166:	220a      	movs	r2, #10
 8008168:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800816a:	7805      	ldrb	r5, [r0, #0]
 800816c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008170:	b2d9      	uxtb	r1, r3
 8008172:	2909      	cmp	r1, #9
 8008174:	d928      	bls.n	80081c8 <_strtod_l+0x1a8>
 8008176:	494e      	ldr	r1, [pc, #312]	@ (80082b0 <_strtod_l+0x290>)
 8008178:	2201      	movs	r2, #1
 800817a:	f001 f899 	bl	80092b0 <strncmp>
 800817e:	2800      	cmp	r0, #0
 8008180:	d032      	beq.n	80081e8 <_strtod_l+0x1c8>
 8008182:	2000      	movs	r0, #0
 8008184:	462a      	mov	r2, r5
 8008186:	4681      	mov	r9, r0
 8008188:	463d      	mov	r5, r7
 800818a:	4603      	mov	r3, r0
 800818c:	2a65      	cmp	r2, #101	@ 0x65
 800818e:	d001      	beq.n	8008194 <_strtod_l+0x174>
 8008190:	2a45      	cmp	r2, #69	@ 0x45
 8008192:	d114      	bne.n	80081be <_strtod_l+0x19e>
 8008194:	b91d      	cbnz	r5, 800819e <_strtod_l+0x17e>
 8008196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008198:	4302      	orrs	r2, r0
 800819a:	d095      	beq.n	80080c8 <_strtod_l+0xa8>
 800819c:	2500      	movs	r5, #0
 800819e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80081a0:	1c62      	adds	r2, r4, #1
 80081a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80081a4:	7862      	ldrb	r2, [r4, #1]
 80081a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80081a8:	d077      	beq.n	800829a <_strtod_l+0x27a>
 80081aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80081ac:	d07b      	beq.n	80082a6 <_strtod_l+0x286>
 80081ae:	f04f 0c00 	mov.w	ip, #0
 80081b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80081b6:	2909      	cmp	r1, #9
 80081b8:	f240 8082 	bls.w	80082c0 <_strtod_l+0x2a0>
 80081bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80081be:	f04f 0800 	mov.w	r8, #0
 80081c2:	e0a2      	b.n	800830a <_strtod_l+0x2ea>
 80081c4:	2300      	movs	r3, #0
 80081c6:	e7c7      	b.n	8008158 <_strtod_l+0x138>
 80081c8:	2f08      	cmp	r7, #8
 80081ca:	bfd5      	itete	le
 80081cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80081ce:	9908      	ldrgt	r1, [sp, #32]
 80081d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80081d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80081d8:	f100 0001 	add.w	r0, r0, #1
 80081dc:	bfd4      	ite	le
 80081de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80081e0:	9308      	strgt	r3, [sp, #32]
 80081e2:	3701      	adds	r7, #1
 80081e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80081e6:	e7bf      	b.n	8008168 <_strtod_l+0x148>
 80081e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80081ee:	785a      	ldrb	r2, [r3, #1]
 80081f0:	b37f      	cbz	r7, 8008252 <_strtod_l+0x232>
 80081f2:	4681      	mov	r9, r0
 80081f4:	463d      	mov	r5, r7
 80081f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80081fa:	2b09      	cmp	r3, #9
 80081fc:	d912      	bls.n	8008224 <_strtod_l+0x204>
 80081fe:	2301      	movs	r3, #1
 8008200:	e7c4      	b.n	800818c <_strtod_l+0x16c>
 8008202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	9219      	str	r2, [sp, #100]	@ 0x64
 8008208:	785a      	ldrb	r2, [r3, #1]
 800820a:	3001      	adds	r0, #1
 800820c:	2a30      	cmp	r2, #48	@ 0x30
 800820e:	d0f8      	beq.n	8008202 <_strtod_l+0x1e2>
 8008210:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008214:	2b08      	cmp	r3, #8
 8008216:	f200 84d3 	bhi.w	8008bc0 <_strtod_l+0xba0>
 800821a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800821c:	930c      	str	r3, [sp, #48]	@ 0x30
 800821e:	4681      	mov	r9, r0
 8008220:	2000      	movs	r0, #0
 8008222:	4605      	mov	r5, r0
 8008224:	3a30      	subs	r2, #48	@ 0x30
 8008226:	f100 0301 	add.w	r3, r0, #1
 800822a:	d02a      	beq.n	8008282 <_strtod_l+0x262>
 800822c:	4499      	add	r9, r3
 800822e:	eb00 0c05 	add.w	ip, r0, r5
 8008232:	462b      	mov	r3, r5
 8008234:	210a      	movs	r1, #10
 8008236:	4563      	cmp	r3, ip
 8008238:	d10d      	bne.n	8008256 <_strtod_l+0x236>
 800823a:	1c69      	adds	r1, r5, #1
 800823c:	4401      	add	r1, r0
 800823e:	4428      	add	r0, r5
 8008240:	2808      	cmp	r0, #8
 8008242:	dc16      	bgt.n	8008272 <_strtod_l+0x252>
 8008244:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008246:	230a      	movs	r3, #10
 8008248:	fb03 2300 	mla	r3, r3, r0, r2
 800824c:	930a      	str	r3, [sp, #40]	@ 0x28
 800824e:	2300      	movs	r3, #0
 8008250:	e018      	b.n	8008284 <_strtod_l+0x264>
 8008252:	4638      	mov	r0, r7
 8008254:	e7da      	b.n	800820c <_strtod_l+0x1ec>
 8008256:	2b08      	cmp	r3, #8
 8008258:	f103 0301 	add.w	r3, r3, #1
 800825c:	dc03      	bgt.n	8008266 <_strtod_l+0x246>
 800825e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008260:	434e      	muls	r6, r1
 8008262:	960a      	str	r6, [sp, #40]	@ 0x28
 8008264:	e7e7      	b.n	8008236 <_strtod_l+0x216>
 8008266:	2b10      	cmp	r3, #16
 8008268:	bfde      	ittt	le
 800826a:	9e08      	ldrle	r6, [sp, #32]
 800826c:	434e      	mulle	r6, r1
 800826e:	9608      	strle	r6, [sp, #32]
 8008270:	e7e1      	b.n	8008236 <_strtod_l+0x216>
 8008272:	280f      	cmp	r0, #15
 8008274:	dceb      	bgt.n	800824e <_strtod_l+0x22e>
 8008276:	9808      	ldr	r0, [sp, #32]
 8008278:	230a      	movs	r3, #10
 800827a:	fb03 2300 	mla	r3, r3, r0, r2
 800827e:	9308      	str	r3, [sp, #32]
 8008280:	e7e5      	b.n	800824e <_strtod_l+0x22e>
 8008282:	4629      	mov	r1, r5
 8008284:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008286:	1c50      	adds	r0, r2, #1
 8008288:	9019      	str	r0, [sp, #100]	@ 0x64
 800828a:	7852      	ldrb	r2, [r2, #1]
 800828c:	4618      	mov	r0, r3
 800828e:	460d      	mov	r5, r1
 8008290:	e7b1      	b.n	80081f6 <_strtod_l+0x1d6>
 8008292:	f04f 0900 	mov.w	r9, #0
 8008296:	2301      	movs	r3, #1
 8008298:	e77d      	b.n	8008196 <_strtod_l+0x176>
 800829a:	f04f 0c00 	mov.w	ip, #0
 800829e:	1ca2      	adds	r2, r4, #2
 80082a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80082a2:	78a2      	ldrb	r2, [r4, #2]
 80082a4:	e785      	b.n	80081b2 <_strtod_l+0x192>
 80082a6:	f04f 0c01 	mov.w	ip, #1
 80082aa:	e7f8      	b.n	800829e <_strtod_l+0x27e>
 80082ac:	0800a630 	.word	0x0800a630
 80082b0:	0800a618 	.word	0x0800a618
 80082b4:	7ff00000 	.word	0x7ff00000
 80082b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082ba:	1c51      	adds	r1, r2, #1
 80082bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80082be:	7852      	ldrb	r2, [r2, #1]
 80082c0:	2a30      	cmp	r2, #48	@ 0x30
 80082c2:	d0f9      	beq.n	80082b8 <_strtod_l+0x298>
 80082c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80082c8:	2908      	cmp	r1, #8
 80082ca:	f63f af78 	bhi.w	80081be <_strtod_l+0x19e>
 80082ce:	3a30      	subs	r2, #48	@ 0x30
 80082d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80082d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80082d6:	f04f 080a 	mov.w	r8, #10
 80082da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082dc:	1c56      	adds	r6, r2, #1
 80082de:	9619      	str	r6, [sp, #100]	@ 0x64
 80082e0:	7852      	ldrb	r2, [r2, #1]
 80082e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80082e6:	f1be 0f09 	cmp.w	lr, #9
 80082ea:	d939      	bls.n	8008360 <_strtod_l+0x340>
 80082ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80082ee:	1a76      	subs	r6, r6, r1
 80082f0:	2e08      	cmp	r6, #8
 80082f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80082f6:	dc03      	bgt.n	8008300 <_strtod_l+0x2e0>
 80082f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80082fa:	4588      	cmp	r8, r1
 80082fc:	bfa8      	it	ge
 80082fe:	4688      	movge	r8, r1
 8008300:	f1bc 0f00 	cmp.w	ip, #0
 8008304:	d001      	beq.n	800830a <_strtod_l+0x2ea>
 8008306:	f1c8 0800 	rsb	r8, r8, #0
 800830a:	2d00      	cmp	r5, #0
 800830c:	d14e      	bne.n	80083ac <_strtod_l+0x38c>
 800830e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008310:	4308      	orrs	r0, r1
 8008312:	f47f aebe 	bne.w	8008092 <_strtod_l+0x72>
 8008316:	2b00      	cmp	r3, #0
 8008318:	f47f aed6 	bne.w	80080c8 <_strtod_l+0xa8>
 800831c:	2a69      	cmp	r2, #105	@ 0x69
 800831e:	d028      	beq.n	8008372 <_strtod_l+0x352>
 8008320:	dc25      	bgt.n	800836e <_strtod_l+0x34e>
 8008322:	2a49      	cmp	r2, #73	@ 0x49
 8008324:	d025      	beq.n	8008372 <_strtod_l+0x352>
 8008326:	2a4e      	cmp	r2, #78	@ 0x4e
 8008328:	f47f aece 	bne.w	80080c8 <_strtod_l+0xa8>
 800832c:	499b      	ldr	r1, [pc, #620]	@ (800859c <_strtod_l+0x57c>)
 800832e:	a819      	add	r0, sp, #100	@ 0x64
 8008330:	f001 fac2 	bl	80098b8 <__match>
 8008334:	2800      	cmp	r0, #0
 8008336:	f43f aec7 	beq.w	80080c8 <_strtod_l+0xa8>
 800833a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b28      	cmp	r3, #40	@ 0x28
 8008340:	d12e      	bne.n	80083a0 <_strtod_l+0x380>
 8008342:	4997      	ldr	r1, [pc, #604]	@ (80085a0 <_strtod_l+0x580>)
 8008344:	aa1c      	add	r2, sp, #112	@ 0x70
 8008346:	a819      	add	r0, sp, #100	@ 0x64
 8008348:	f001 faca 	bl	80098e0 <__hexnan>
 800834c:	2805      	cmp	r0, #5
 800834e:	d127      	bne.n	80083a0 <_strtod_l+0x380>
 8008350:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008352:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008356:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800835a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800835e:	e698      	b.n	8008092 <_strtod_l+0x72>
 8008360:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008362:	fb08 2101 	mla	r1, r8, r1, r2
 8008366:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800836a:	920e      	str	r2, [sp, #56]	@ 0x38
 800836c:	e7b5      	b.n	80082da <_strtod_l+0x2ba>
 800836e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008370:	e7da      	b.n	8008328 <_strtod_l+0x308>
 8008372:	498c      	ldr	r1, [pc, #560]	@ (80085a4 <_strtod_l+0x584>)
 8008374:	a819      	add	r0, sp, #100	@ 0x64
 8008376:	f001 fa9f 	bl	80098b8 <__match>
 800837a:	2800      	cmp	r0, #0
 800837c:	f43f aea4 	beq.w	80080c8 <_strtod_l+0xa8>
 8008380:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008382:	4989      	ldr	r1, [pc, #548]	@ (80085a8 <_strtod_l+0x588>)
 8008384:	3b01      	subs	r3, #1
 8008386:	a819      	add	r0, sp, #100	@ 0x64
 8008388:	9319      	str	r3, [sp, #100]	@ 0x64
 800838a:	f001 fa95 	bl	80098b8 <__match>
 800838e:	b910      	cbnz	r0, 8008396 <_strtod_l+0x376>
 8008390:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008392:	3301      	adds	r3, #1
 8008394:	9319      	str	r3, [sp, #100]	@ 0x64
 8008396:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80085b8 <_strtod_l+0x598>
 800839a:	f04f 0a00 	mov.w	sl, #0
 800839e:	e678      	b.n	8008092 <_strtod_l+0x72>
 80083a0:	4882      	ldr	r0, [pc, #520]	@ (80085ac <_strtod_l+0x58c>)
 80083a2:	f000 ffdd 	bl	8009360 <nan>
 80083a6:	ec5b ab10 	vmov	sl, fp, d0
 80083aa:	e672      	b.n	8008092 <_strtod_l+0x72>
 80083ac:	eba8 0309 	sub.w	r3, r8, r9
 80083b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	bf08      	it	eq
 80083b8:	462f      	moveq	r7, r5
 80083ba:	2d10      	cmp	r5, #16
 80083bc:	462c      	mov	r4, r5
 80083be:	bfa8      	it	ge
 80083c0:	2410      	movge	r4, #16
 80083c2:	f7f8 f8bf 	bl	8000544 <__aeabi_ui2d>
 80083c6:	2d09      	cmp	r5, #9
 80083c8:	4682      	mov	sl, r0
 80083ca:	468b      	mov	fp, r1
 80083cc:	dc13      	bgt.n	80083f6 <_strtod_l+0x3d6>
 80083ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f43f ae5e 	beq.w	8008092 <_strtod_l+0x72>
 80083d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d8:	dd78      	ble.n	80084cc <_strtod_l+0x4ac>
 80083da:	2b16      	cmp	r3, #22
 80083dc:	dc5f      	bgt.n	800849e <_strtod_l+0x47e>
 80083de:	4974      	ldr	r1, [pc, #464]	@ (80085b0 <_strtod_l+0x590>)
 80083e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083e8:	4652      	mov	r2, sl
 80083ea:	465b      	mov	r3, fp
 80083ec:	f7f8 f924 	bl	8000638 <__aeabi_dmul>
 80083f0:	4682      	mov	sl, r0
 80083f2:	468b      	mov	fp, r1
 80083f4:	e64d      	b.n	8008092 <_strtod_l+0x72>
 80083f6:	4b6e      	ldr	r3, [pc, #440]	@ (80085b0 <_strtod_l+0x590>)
 80083f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008400:	f7f8 f91a 	bl	8000638 <__aeabi_dmul>
 8008404:	4682      	mov	sl, r0
 8008406:	9808      	ldr	r0, [sp, #32]
 8008408:	468b      	mov	fp, r1
 800840a:	f7f8 f89b 	bl	8000544 <__aeabi_ui2d>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4650      	mov	r0, sl
 8008414:	4659      	mov	r1, fp
 8008416:	f7f7 ff59 	bl	80002cc <__adddf3>
 800841a:	2d0f      	cmp	r5, #15
 800841c:	4682      	mov	sl, r0
 800841e:	468b      	mov	fp, r1
 8008420:	ddd5      	ble.n	80083ce <_strtod_l+0x3ae>
 8008422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008424:	1b2c      	subs	r4, r5, r4
 8008426:	441c      	add	r4, r3
 8008428:	2c00      	cmp	r4, #0
 800842a:	f340 8096 	ble.w	800855a <_strtod_l+0x53a>
 800842e:	f014 030f 	ands.w	r3, r4, #15
 8008432:	d00a      	beq.n	800844a <_strtod_l+0x42a>
 8008434:	495e      	ldr	r1, [pc, #376]	@ (80085b0 <_strtod_l+0x590>)
 8008436:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800843a:	4652      	mov	r2, sl
 800843c:	465b      	mov	r3, fp
 800843e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008442:	f7f8 f8f9 	bl	8000638 <__aeabi_dmul>
 8008446:	4682      	mov	sl, r0
 8008448:	468b      	mov	fp, r1
 800844a:	f034 040f 	bics.w	r4, r4, #15
 800844e:	d073      	beq.n	8008538 <_strtod_l+0x518>
 8008450:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008454:	dd48      	ble.n	80084e8 <_strtod_l+0x4c8>
 8008456:	2400      	movs	r4, #0
 8008458:	46a0      	mov	r8, r4
 800845a:	940a      	str	r4, [sp, #40]	@ 0x28
 800845c:	46a1      	mov	r9, r4
 800845e:	9a05      	ldr	r2, [sp, #20]
 8008460:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80085b8 <_strtod_l+0x598>
 8008464:	2322      	movs	r3, #34	@ 0x22
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	f04f 0a00 	mov.w	sl, #0
 800846c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800846e:	2b00      	cmp	r3, #0
 8008470:	f43f ae0f 	beq.w	8008092 <_strtod_l+0x72>
 8008474:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008476:	9805      	ldr	r0, [sp, #20]
 8008478:	f7ff f942 	bl	8007700 <_Bfree>
 800847c:	9805      	ldr	r0, [sp, #20]
 800847e:	4649      	mov	r1, r9
 8008480:	f7ff f93e 	bl	8007700 <_Bfree>
 8008484:	9805      	ldr	r0, [sp, #20]
 8008486:	4641      	mov	r1, r8
 8008488:	f7ff f93a 	bl	8007700 <_Bfree>
 800848c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800848e:	9805      	ldr	r0, [sp, #20]
 8008490:	f7ff f936 	bl	8007700 <_Bfree>
 8008494:	9805      	ldr	r0, [sp, #20]
 8008496:	4621      	mov	r1, r4
 8008498:	f7ff f932 	bl	8007700 <_Bfree>
 800849c:	e5f9      	b.n	8008092 <_strtod_l+0x72>
 800849e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80084a4:	4293      	cmp	r3, r2
 80084a6:	dbbc      	blt.n	8008422 <_strtod_l+0x402>
 80084a8:	4c41      	ldr	r4, [pc, #260]	@ (80085b0 <_strtod_l+0x590>)
 80084aa:	f1c5 050f 	rsb	r5, r5, #15
 80084ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80084b2:	4652      	mov	r2, sl
 80084b4:	465b      	mov	r3, fp
 80084b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ba:	f7f8 f8bd 	bl	8000638 <__aeabi_dmul>
 80084be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c0:	1b5d      	subs	r5, r3, r5
 80084c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80084c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80084ca:	e78f      	b.n	80083ec <_strtod_l+0x3cc>
 80084cc:	3316      	adds	r3, #22
 80084ce:	dba8      	blt.n	8008422 <_strtod_l+0x402>
 80084d0:	4b37      	ldr	r3, [pc, #220]	@ (80085b0 <_strtod_l+0x590>)
 80084d2:	eba9 0808 	sub.w	r8, r9, r8
 80084d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80084da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80084de:	4650      	mov	r0, sl
 80084e0:	4659      	mov	r1, fp
 80084e2:	f7f8 f9d3 	bl	800088c <__aeabi_ddiv>
 80084e6:	e783      	b.n	80083f0 <_strtod_l+0x3d0>
 80084e8:	4b32      	ldr	r3, [pc, #200]	@ (80085b4 <_strtod_l+0x594>)
 80084ea:	9308      	str	r3, [sp, #32]
 80084ec:	2300      	movs	r3, #0
 80084ee:	1124      	asrs	r4, r4, #4
 80084f0:	4650      	mov	r0, sl
 80084f2:	4659      	mov	r1, fp
 80084f4:	461e      	mov	r6, r3
 80084f6:	2c01      	cmp	r4, #1
 80084f8:	dc21      	bgt.n	800853e <_strtod_l+0x51e>
 80084fa:	b10b      	cbz	r3, 8008500 <_strtod_l+0x4e0>
 80084fc:	4682      	mov	sl, r0
 80084fe:	468b      	mov	fp, r1
 8008500:	492c      	ldr	r1, [pc, #176]	@ (80085b4 <_strtod_l+0x594>)
 8008502:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008506:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800850a:	4652      	mov	r2, sl
 800850c:	465b      	mov	r3, fp
 800850e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008512:	f7f8 f891 	bl	8000638 <__aeabi_dmul>
 8008516:	4b28      	ldr	r3, [pc, #160]	@ (80085b8 <_strtod_l+0x598>)
 8008518:	460a      	mov	r2, r1
 800851a:	400b      	ands	r3, r1
 800851c:	4927      	ldr	r1, [pc, #156]	@ (80085bc <_strtod_l+0x59c>)
 800851e:	428b      	cmp	r3, r1
 8008520:	4682      	mov	sl, r0
 8008522:	d898      	bhi.n	8008456 <_strtod_l+0x436>
 8008524:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008528:	428b      	cmp	r3, r1
 800852a:	bf86      	itte	hi
 800852c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80085c0 <_strtod_l+0x5a0>
 8008530:	f04f 3aff 	movhi.w	sl, #4294967295
 8008534:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008538:	2300      	movs	r3, #0
 800853a:	9308      	str	r3, [sp, #32]
 800853c:	e07a      	b.n	8008634 <_strtod_l+0x614>
 800853e:	07e2      	lsls	r2, r4, #31
 8008540:	d505      	bpl.n	800854e <_strtod_l+0x52e>
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f7f8 f876 	bl	8000638 <__aeabi_dmul>
 800854c:	2301      	movs	r3, #1
 800854e:	9a08      	ldr	r2, [sp, #32]
 8008550:	3208      	adds	r2, #8
 8008552:	3601      	adds	r6, #1
 8008554:	1064      	asrs	r4, r4, #1
 8008556:	9208      	str	r2, [sp, #32]
 8008558:	e7cd      	b.n	80084f6 <_strtod_l+0x4d6>
 800855a:	d0ed      	beq.n	8008538 <_strtod_l+0x518>
 800855c:	4264      	negs	r4, r4
 800855e:	f014 020f 	ands.w	r2, r4, #15
 8008562:	d00a      	beq.n	800857a <_strtod_l+0x55a>
 8008564:	4b12      	ldr	r3, [pc, #72]	@ (80085b0 <_strtod_l+0x590>)
 8008566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800856a:	4650      	mov	r0, sl
 800856c:	4659      	mov	r1, fp
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f8 f98b 	bl	800088c <__aeabi_ddiv>
 8008576:	4682      	mov	sl, r0
 8008578:	468b      	mov	fp, r1
 800857a:	1124      	asrs	r4, r4, #4
 800857c:	d0dc      	beq.n	8008538 <_strtod_l+0x518>
 800857e:	2c1f      	cmp	r4, #31
 8008580:	dd20      	ble.n	80085c4 <_strtod_l+0x5a4>
 8008582:	2400      	movs	r4, #0
 8008584:	46a0      	mov	r8, r4
 8008586:	940a      	str	r4, [sp, #40]	@ 0x28
 8008588:	46a1      	mov	r9, r4
 800858a:	9a05      	ldr	r2, [sp, #20]
 800858c:	2322      	movs	r3, #34	@ 0x22
 800858e:	f04f 0a00 	mov.w	sl, #0
 8008592:	f04f 0b00 	mov.w	fp, #0
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	e768      	b.n	800846c <_strtod_l+0x44c>
 800859a:	bf00      	nop
 800859c:	0800a372 	.word	0x0800a372
 80085a0:	0800a61c 	.word	0x0800a61c
 80085a4:	0800a36a 	.word	0x0800a36a
 80085a8:	0800a44e 	.word	0x0800a44e
 80085ac:	0800a44a 	.word	0x0800a44a
 80085b0:	0800a550 	.word	0x0800a550
 80085b4:	0800a528 	.word	0x0800a528
 80085b8:	7ff00000 	.word	0x7ff00000
 80085bc:	7ca00000 	.word	0x7ca00000
 80085c0:	7fefffff 	.word	0x7fefffff
 80085c4:	f014 0310 	ands.w	r3, r4, #16
 80085c8:	bf18      	it	ne
 80085ca:	236a      	movne	r3, #106	@ 0x6a
 80085cc:	4ea9      	ldr	r6, [pc, #676]	@ (8008874 <_strtod_l+0x854>)
 80085ce:	9308      	str	r3, [sp, #32]
 80085d0:	4650      	mov	r0, sl
 80085d2:	4659      	mov	r1, fp
 80085d4:	2300      	movs	r3, #0
 80085d6:	07e2      	lsls	r2, r4, #31
 80085d8:	d504      	bpl.n	80085e4 <_strtod_l+0x5c4>
 80085da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085de:	f7f8 f82b 	bl	8000638 <__aeabi_dmul>
 80085e2:	2301      	movs	r3, #1
 80085e4:	1064      	asrs	r4, r4, #1
 80085e6:	f106 0608 	add.w	r6, r6, #8
 80085ea:	d1f4      	bne.n	80085d6 <_strtod_l+0x5b6>
 80085ec:	b10b      	cbz	r3, 80085f2 <_strtod_l+0x5d2>
 80085ee:	4682      	mov	sl, r0
 80085f0:	468b      	mov	fp, r1
 80085f2:	9b08      	ldr	r3, [sp, #32]
 80085f4:	b1b3      	cbz	r3, 8008624 <_strtod_l+0x604>
 80085f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80085fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80085fe:	2b00      	cmp	r3, #0
 8008600:	4659      	mov	r1, fp
 8008602:	dd0f      	ble.n	8008624 <_strtod_l+0x604>
 8008604:	2b1f      	cmp	r3, #31
 8008606:	dd55      	ble.n	80086b4 <_strtod_l+0x694>
 8008608:	2b34      	cmp	r3, #52	@ 0x34
 800860a:	bfde      	ittt	le
 800860c:	f04f 33ff 	movle.w	r3, #4294967295
 8008610:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008614:	4093      	lslle	r3, r2
 8008616:	f04f 0a00 	mov.w	sl, #0
 800861a:	bfcc      	ite	gt
 800861c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008620:	ea03 0b01 	andle.w	fp, r3, r1
 8008624:	2200      	movs	r2, #0
 8008626:	2300      	movs	r3, #0
 8008628:	4650      	mov	r0, sl
 800862a:	4659      	mov	r1, fp
 800862c:	f7f8 fa6c 	bl	8000b08 <__aeabi_dcmpeq>
 8008630:	2800      	cmp	r0, #0
 8008632:	d1a6      	bne.n	8008582 <_strtod_l+0x562>
 8008634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800863a:	9805      	ldr	r0, [sp, #20]
 800863c:	462b      	mov	r3, r5
 800863e:	463a      	mov	r2, r7
 8008640:	f7ff f8c6 	bl	80077d0 <__s2b>
 8008644:	900a      	str	r0, [sp, #40]	@ 0x28
 8008646:	2800      	cmp	r0, #0
 8008648:	f43f af05 	beq.w	8008456 <_strtod_l+0x436>
 800864c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800864e:	2a00      	cmp	r2, #0
 8008650:	eba9 0308 	sub.w	r3, r9, r8
 8008654:	bfa8      	it	ge
 8008656:	2300      	movge	r3, #0
 8008658:	9312      	str	r3, [sp, #72]	@ 0x48
 800865a:	2400      	movs	r4, #0
 800865c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008660:	9316      	str	r3, [sp, #88]	@ 0x58
 8008662:	46a0      	mov	r8, r4
 8008664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008666:	9805      	ldr	r0, [sp, #20]
 8008668:	6859      	ldr	r1, [r3, #4]
 800866a:	f7ff f809 	bl	8007680 <_Balloc>
 800866e:	4681      	mov	r9, r0
 8008670:	2800      	cmp	r0, #0
 8008672:	f43f aef4 	beq.w	800845e <_strtod_l+0x43e>
 8008676:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	3202      	adds	r2, #2
 800867c:	f103 010c 	add.w	r1, r3, #12
 8008680:	0092      	lsls	r2, r2, #2
 8008682:	300c      	adds	r0, #12
 8008684:	f7fe f87c 	bl	8006780 <memcpy>
 8008688:	ec4b ab10 	vmov	d0, sl, fp
 800868c:	9805      	ldr	r0, [sp, #20]
 800868e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008690:	a91b      	add	r1, sp, #108	@ 0x6c
 8008692:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008696:	f7ff fbd7 	bl	8007e48 <__d2b>
 800869a:	901a      	str	r0, [sp, #104]	@ 0x68
 800869c:	2800      	cmp	r0, #0
 800869e:	f43f aede 	beq.w	800845e <_strtod_l+0x43e>
 80086a2:	9805      	ldr	r0, [sp, #20]
 80086a4:	2101      	movs	r1, #1
 80086a6:	f7ff f929 	bl	80078fc <__i2b>
 80086aa:	4680      	mov	r8, r0
 80086ac:	b948      	cbnz	r0, 80086c2 <_strtod_l+0x6a2>
 80086ae:	f04f 0800 	mov.w	r8, #0
 80086b2:	e6d4      	b.n	800845e <_strtod_l+0x43e>
 80086b4:	f04f 32ff 	mov.w	r2, #4294967295
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	ea03 0a0a 	and.w	sl, r3, sl
 80086c0:	e7b0      	b.n	8008624 <_strtod_l+0x604>
 80086c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80086c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	bfab      	itete	ge
 80086ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80086cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80086ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80086d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80086d2:	bfac      	ite	ge
 80086d4:	18ef      	addge	r7, r5, r3
 80086d6:	1b5e      	sublt	r6, r3, r5
 80086d8:	9b08      	ldr	r3, [sp, #32]
 80086da:	1aed      	subs	r5, r5, r3
 80086dc:	4415      	add	r5, r2
 80086de:	4b66      	ldr	r3, [pc, #408]	@ (8008878 <_strtod_l+0x858>)
 80086e0:	3d01      	subs	r5, #1
 80086e2:	429d      	cmp	r5, r3
 80086e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80086e8:	da50      	bge.n	800878c <_strtod_l+0x76c>
 80086ea:	1b5b      	subs	r3, r3, r5
 80086ec:	2b1f      	cmp	r3, #31
 80086ee:	eba2 0203 	sub.w	r2, r2, r3
 80086f2:	f04f 0101 	mov.w	r1, #1
 80086f6:	dc3d      	bgt.n	8008774 <_strtod_l+0x754>
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086fe:	2300      	movs	r3, #0
 8008700:	9310      	str	r3, [sp, #64]	@ 0x40
 8008702:	18bd      	adds	r5, r7, r2
 8008704:	9b08      	ldr	r3, [sp, #32]
 8008706:	42af      	cmp	r7, r5
 8008708:	4416      	add	r6, r2
 800870a:	441e      	add	r6, r3
 800870c:	463b      	mov	r3, r7
 800870e:	bfa8      	it	ge
 8008710:	462b      	movge	r3, r5
 8008712:	42b3      	cmp	r3, r6
 8008714:	bfa8      	it	ge
 8008716:	4633      	movge	r3, r6
 8008718:	2b00      	cmp	r3, #0
 800871a:	bfc2      	ittt	gt
 800871c:	1aed      	subgt	r5, r5, r3
 800871e:	1af6      	subgt	r6, r6, r3
 8008720:	1aff      	subgt	r7, r7, r3
 8008722:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd16      	ble.n	8008756 <_strtod_l+0x736>
 8008728:	4641      	mov	r1, r8
 800872a:	9805      	ldr	r0, [sp, #20]
 800872c:	461a      	mov	r2, r3
 800872e:	f7ff f9a5 	bl	8007a7c <__pow5mult>
 8008732:	4680      	mov	r8, r0
 8008734:	2800      	cmp	r0, #0
 8008736:	d0ba      	beq.n	80086ae <_strtod_l+0x68e>
 8008738:	4601      	mov	r1, r0
 800873a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800873c:	9805      	ldr	r0, [sp, #20]
 800873e:	f7ff f8f3 	bl	8007928 <__multiply>
 8008742:	900e      	str	r0, [sp, #56]	@ 0x38
 8008744:	2800      	cmp	r0, #0
 8008746:	f43f ae8a 	beq.w	800845e <_strtod_l+0x43e>
 800874a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800874c:	9805      	ldr	r0, [sp, #20]
 800874e:	f7fe ffd7 	bl	8007700 <_Bfree>
 8008752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008754:	931a      	str	r3, [sp, #104]	@ 0x68
 8008756:	2d00      	cmp	r5, #0
 8008758:	dc1d      	bgt.n	8008796 <_strtod_l+0x776>
 800875a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800875c:	2b00      	cmp	r3, #0
 800875e:	dd23      	ble.n	80087a8 <_strtod_l+0x788>
 8008760:	4649      	mov	r1, r9
 8008762:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008764:	9805      	ldr	r0, [sp, #20]
 8008766:	f7ff f989 	bl	8007a7c <__pow5mult>
 800876a:	4681      	mov	r9, r0
 800876c:	b9e0      	cbnz	r0, 80087a8 <_strtod_l+0x788>
 800876e:	f04f 0900 	mov.w	r9, #0
 8008772:	e674      	b.n	800845e <_strtod_l+0x43e>
 8008774:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008778:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800877c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008780:	35e2      	adds	r5, #226	@ 0xe2
 8008782:	fa01 f305 	lsl.w	r3, r1, r5
 8008786:	9310      	str	r3, [sp, #64]	@ 0x40
 8008788:	9113      	str	r1, [sp, #76]	@ 0x4c
 800878a:	e7ba      	b.n	8008702 <_strtod_l+0x6e2>
 800878c:	2300      	movs	r3, #0
 800878e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008790:	2301      	movs	r3, #1
 8008792:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008794:	e7b5      	b.n	8008702 <_strtod_l+0x6e2>
 8008796:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008798:	9805      	ldr	r0, [sp, #20]
 800879a:	462a      	mov	r2, r5
 800879c:	f7ff f9c8 	bl	8007b30 <__lshift>
 80087a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d1d9      	bne.n	800875a <_strtod_l+0x73a>
 80087a6:	e65a      	b.n	800845e <_strtod_l+0x43e>
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	dd07      	ble.n	80087bc <_strtod_l+0x79c>
 80087ac:	4649      	mov	r1, r9
 80087ae:	9805      	ldr	r0, [sp, #20]
 80087b0:	4632      	mov	r2, r6
 80087b2:	f7ff f9bd 	bl	8007b30 <__lshift>
 80087b6:	4681      	mov	r9, r0
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d0d8      	beq.n	800876e <_strtod_l+0x74e>
 80087bc:	2f00      	cmp	r7, #0
 80087be:	dd08      	ble.n	80087d2 <_strtod_l+0x7b2>
 80087c0:	4641      	mov	r1, r8
 80087c2:	9805      	ldr	r0, [sp, #20]
 80087c4:	463a      	mov	r2, r7
 80087c6:	f7ff f9b3 	bl	8007b30 <__lshift>
 80087ca:	4680      	mov	r8, r0
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f43f ae46 	beq.w	800845e <_strtod_l+0x43e>
 80087d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087d4:	9805      	ldr	r0, [sp, #20]
 80087d6:	464a      	mov	r2, r9
 80087d8:	f7ff fa32 	bl	8007c40 <__mdiff>
 80087dc:	4604      	mov	r4, r0
 80087de:	2800      	cmp	r0, #0
 80087e0:	f43f ae3d 	beq.w	800845e <_strtod_l+0x43e>
 80087e4:	68c3      	ldr	r3, [r0, #12]
 80087e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087e8:	2300      	movs	r3, #0
 80087ea:	60c3      	str	r3, [r0, #12]
 80087ec:	4641      	mov	r1, r8
 80087ee:	f7ff fa0b 	bl	8007c08 <__mcmp>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	da46      	bge.n	8008884 <_strtod_l+0x864>
 80087f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087f8:	ea53 030a 	orrs.w	r3, r3, sl
 80087fc:	d16c      	bne.n	80088d8 <_strtod_l+0x8b8>
 80087fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008802:	2b00      	cmp	r3, #0
 8008804:	d168      	bne.n	80088d8 <_strtod_l+0x8b8>
 8008806:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800880a:	0d1b      	lsrs	r3, r3, #20
 800880c:	051b      	lsls	r3, r3, #20
 800880e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008812:	d961      	bls.n	80088d8 <_strtod_l+0x8b8>
 8008814:	6963      	ldr	r3, [r4, #20]
 8008816:	b913      	cbnz	r3, 800881e <_strtod_l+0x7fe>
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	2b01      	cmp	r3, #1
 800881c:	dd5c      	ble.n	80088d8 <_strtod_l+0x8b8>
 800881e:	4621      	mov	r1, r4
 8008820:	2201      	movs	r2, #1
 8008822:	9805      	ldr	r0, [sp, #20]
 8008824:	f7ff f984 	bl	8007b30 <__lshift>
 8008828:	4641      	mov	r1, r8
 800882a:	4604      	mov	r4, r0
 800882c:	f7ff f9ec 	bl	8007c08 <__mcmp>
 8008830:	2800      	cmp	r0, #0
 8008832:	dd51      	ble.n	80088d8 <_strtod_l+0x8b8>
 8008834:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008838:	9a08      	ldr	r2, [sp, #32]
 800883a:	0d1b      	lsrs	r3, r3, #20
 800883c:	051b      	lsls	r3, r3, #20
 800883e:	2a00      	cmp	r2, #0
 8008840:	d06b      	beq.n	800891a <_strtod_l+0x8fa>
 8008842:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008846:	d868      	bhi.n	800891a <_strtod_l+0x8fa>
 8008848:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800884c:	f67f ae9d 	bls.w	800858a <_strtod_l+0x56a>
 8008850:	4b0a      	ldr	r3, [pc, #40]	@ (800887c <_strtod_l+0x85c>)
 8008852:	4650      	mov	r0, sl
 8008854:	4659      	mov	r1, fp
 8008856:	2200      	movs	r2, #0
 8008858:	f7f7 feee 	bl	8000638 <__aeabi_dmul>
 800885c:	4b08      	ldr	r3, [pc, #32]	@ (8008880 <_strtod_l+0x860>)
 800885e:	400b      	ands	r3, r1
 8008860:	4682      	mov	sl, r0
 8008862:	468b      	mov	fp, r1
 8008864:	2b00      	cmp	r3, #0
 8008866:	f47f ae05 	bne.w	8008474 <_strtod_l+0x454>
 800886a:	9a05      	ldr	r2, [sp, #20]
 800886c:	2322      	movs	r3, #34	@ 0x22
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	e600      	b.n	8008474 <_strtod_l+0x454>
 8008872:	bf00      	nop
 8008874:	0800a648 	.word	0x0800a648
 8008878:	fffffc02 	.word	0xfffffc02
 800887c:	39500000 	.word	0x39500000
 8008880:	7ff00000 	.word	0x7ff00000
 8008884:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008888:	d165      	bne.n	8008956 <_strtod_l+0x936>
 800888a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800888c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008890:	b35a      	cbz	r2, 80088ea <_strtod_l+0x8ca>
 8008892:	4a9f      	ldr	r2, [pc, #636]	@ (8008b10 <_strtod_l+0xaf0>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d12b      	bne.n	80088f0 <_strtod_l+0x8d0>
 8008898:	9b08      	ldr	r3, [sp, #32]
 800889a:	4651      	mov	r1, sl
 800889c:	b303      	cbz	r3, 80088e0 <_strtod_l+0x8c0>
 800889e:	4b9d      	ldr	r3, [pc, #628]	@ (8008b14 <_strtod_l+0xaf4>)
 80088a0:	465a      	mov	r2, fp
 80088a2:	4013      	ands	r3, r2
 80088a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80088a8:	f04f 32ff 	mov.w	r2, #4294967295
 80088ac:	d81b      	bhi.n	80088e6 <_strtod_l+0x8c6>
 80088ae:	0d1b      	lsrs	r3, r3, #20
 80088b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088b4:	fa02 f303 	lsl.w	r3, r2, r3
 80088b8:	4299      	cmp	r1, r3
 80088ba:	d119      	bne.n	80088f0 <_strtod_l+0x8d0>
 80088bc:	4b96      	ldr	r3, [pc, #600]	@ (8008b18 <_strtod_l+0xaf8>)
 80088be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d102      	bne.n	80088ca <_strtod_l+0x8aa>
 80088c4:	3101      	adds	r1, #1
 80088c6:	f43f adca 	beq.w	800845e <_strtod_l+0x43e>
 80088ca:	4b92      	ldr	r3, [pc, #584]	@ (8008b14 <_strtod_l+0xaf4>)
 80088cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088ce:	401a      	ands	r2, r3
 80088d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80088d4:	f04f 0a00 	mov.w	sl, #0
 80088d8:	9b08      	ldr	r3, [sp, #32]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1b8      	bne.n	8008850 <_strtod_l+0x830>
 80088de:	e5c9      	b.n	8008474 <_strtod_l+0x454>
 80088e0:	f04f 33ff 	mov.w	r3, #4294967295
 80088e4:	e7e8      	b.n	80088b8 <_strtod_l+0x898>
 80088e6:	4613      	mov	r3, r2
 80088e8:	e7e6      	b.n	80088b8 <_strtod_l+0x898>
 80088ea:	ea53 030a 	orrs.w	r3, r3, sl
 80088ee:	d0a1      	beq.n	8008834 <_strtod_l+0x814>
 80088f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088f2:	b1db      	cbz	r3, 800892c <_strtod_l+0x90c>
 80088f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088f6:	4213      	tst	r3, r2
 80088f8:	d0ee      	beq.n	80088d8 <_strtod_l+0x8b8>
 80088fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088fc:	9a08      	ldr	r2, [sp, #32]
 80088fe:	4650      	mov	r0, sl
 8008900:	4659      	mov	r1, fp
 8008902:	b1bb      	cbz	r3, 8008934 <_strtod_l+0x914>
 8008904:	f7ff fb6e 	bl	8007fe4 <sulp>
 8008908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800890c:	ec53 2b10 	vmov	r2, r3, d0
 8008910:	f7f7 fcdc 	bl	80002cc <__adddf3>
 8008914:	4682      	mov	sl, r0
 8008916:	468b      	mov	fp, r1
 8008918:	e7de      	b.n	80088d8 <_strtod_l+0x8b8>
 800891a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800891e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008922:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008926:	f04f 3aff 	mov.w	sl, #4294967295
 800892a:	e7d5      	b.n	80088d8 <_strtod_l+0x8b8>
 800892c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800892e:	ea13 0f0a 	tst.w	r3, sl
 8008932:	e7e1      	b.n	80088f8 <_strtod_l+0x8d8>
 8008934:	f7ff fb56 	bl	8007fe4 <sulp>
 8008938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800893c:	ec53 2b10 	vmov	r2, r3, d0
 8008940:	f7f7 fcc2 	bl	80002c8 <__aeabi_dsub>
 8008944:	2200      	movs	r2, #0
 8008946:	2300      	movs	r3, #0
 8008948:	4682      	mov	sl, r0
 800894a:	468b      	mov	fp, r1
 800894c:	f7f8 f8dc 	bl	8000b08 <__aeabi_dcmpeq>
 8008950:	2800      	cmp	r0, #0
 8008952:	d0c1      	beq.n	80088d8 <_strtod_l+0x8b8>
 8008954:	e619      	b.n	800858a <_strtod_l+0x56a>
 8008956:	4641      	mov	r1, r8
 8008958:	4620      	mov	r0, r4
 800895a:	f7ff facd 	bl	8007ef8 <__ratio>
 800895e:	ec57 6b10 	vmov	r6, r7, d0
 8008962:	2200      	movs	r2, #0
 8008964:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008968:	4630      	mov	r0, r6
 800896a:	4639      	mov	r1, r7
 800896c:	f7f8 f8e0 	bl	8000b30 <__aeabi_dcmple>
 8008970:	2800      	cmp	r0, #0
 8008972:	d06f      	beq.n	8008a54 <_strtod_l+0xa34>
 8008974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008976:	2b00      	cmp	r3, #0
 8008978:	d17a      	bne.n	8008a70 <_strtod_l+0xa50>
 800897a:	f1ba 0f00 	cmp.w	sl, #0
 800897e:	d158      	bne.n	8008a32 <_strtod_l+0xa12>
 8008980:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008986:	2b00      	cmp	r3, #0
 8008988:	d15a      	bne.n	8008a40 <_strtod_l+0xa20>
 800898a:	4b64      	ldr	r3, [pc, #400]	@ (8008b1c <_strtod_l+0xafc>)
 800898c:	2200      	movs	r2, #0
 800898e:	4630      	mov	r0, r6
 8008990:	4639      	mov	r1, r7
 8008992:	f7f8 f8c3 	bl	8000b1c <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	d159      	bne.n	8008a4e <_strtod_l+0xa2e>
 800899a:	4630      	mov	r0, r6
 800899c:	4639      	mov	r1, r7
 800899e:	4b60      	ldr	r3, [pc, #384]	@ (8008b20 <_strtod_l+0xb00>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	f7f7 fe49 	bl	8000638 <__aeabi_dmul>
 80089a6:	4606      	mov	r6, r0
 80089a8:	460f      	mov	r7, r1
 80089aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80089ae:	9606      	str	r6, [sp, #24]
 80089b0:	9307      	str	r3, [sp, #28]
 80089b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089b6:	4d57      	ldr	r5, [pc, #348]	@ (8008b14 <_strtod_l+0xaf4>)
 80089b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80089bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089be:	401d      	ands	r5, r3
 80089c0:	4b58      	ldr	r3, [pc, #352]	@ (8008b24 <_strtod_l+0xb04>)
 80089c2:	429d      	cmp	r5, r3
 80089c4:	f040 80b2 	bne.w	8008b2c <_strtod_l+0xb0c>
 80089c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80089ce:	ec4b ab10 	vmov	d0, sl, fp
 80089d2:	f7ff f9c9 	bl	8007d68 <__ulp>
 80089d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089da:	ec51 0b10 	vmov	r0, r1, d0
 80089de:	f7f7 fe2b 	bl	8000638 <__aeabi_dmul>
 80089e2:	4652      	mov	r2, sl
 80089e4:	465b      	mov	r3, fp
 80089e6:	f7f7 fc71 	bl	80002cc <__adddf3>
 80089ea:	460b      	mov	r3, r1
 80089ec:	4949      	ldr	r1, [pc, #292]	@ (8008b14 <_strtod_l+0xaf4>)
 80089ee:	4a4e      	ldr	r2, [pc, #312]	@ (8008b28 <_strtod_l+0xb08>)
 80089f0:	4019      	ands	r1, r3
 80089f2:	4291      	cmp	r1, r2
 80089f4:	4682      	mov	sl, r0
 80089f6:	d942      	bls.n	8008a7e <_strtod_l+0xa5e>
 80089f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089fa:	4b47      	ldr	r3, [pc, #284]	@ (8008b18 <_strtod_l+0xaf8>)
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d103      	bne.n	8008a08 <_strtod_l+0x9e8>
 8008a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a02:	3301      	adds	r3, #1
 8008a04:	f43f ad2b 	beq.w	800845e <_strtod_l+0x43e>
 8008a08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008b18 <_strtod_l+0xaf8>
 8008a0c:	f04f 3aff 	mov.w	sl, #4294967295
 8008a10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a12:	9805      	ldr	r0, [sp, #20]
 8008a14:	f7fe fe74 	bl	8007700 <_Bfree>
 8008a18:	9805      	ldr	r0, [sp, #20]
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	f7fe fe70 	bl	8007700 <_Bfree>
 8008a20:	9805      	ldr	r0, [sp, #20]
 8008a22:	4641      	mov	r1, r8
 8008a24:	f7fe fe6c 	bl	8007700 <_Bfree>
 8008a28:	9805      	ldr	r0, [sp, #20]
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	f7fe fe68 	bl	8007700 <_Bfree>
 8008a30:	e618      	b.n	8008664 <_strtod_l+0x644>
 8008a32:	f1ba 0f01 	cmp.w	sl, #1
 8008a36:	d103      	bne.n	8008a40 <_strtod_l+0xa20>
 8008a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f43f ada5 	beq.w	800858a <_strtod_l+0x56a>
 8008a40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008af0 <_strtod_l+0xad0>
 8008a44:	4f35      	ldr	r7, [pc, #212]	@ (8008b1c <_strtod_l+0xafc>)
 8008a46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	e7b1      	b.n	80089b2 <_strtod_l+0x992>
 8008a4e:	4f34      	ldr	r7, [pc, #208]	@ (8008b20 <_strtod_l+0xb00>)
 8008a50:	2600      	movs	r6, #0
 8008a52:	e7aa      	b.n	80089aa <_strtod_l+0x98a>
 8008a54:	4b32      	ldr	r3, [pc, #200]	@ (8008b20 <_strtod_l+0xb00>)
 8008a56:	4630      	mov	r0, r6
 8008a58:	4639      	mov	r1, r7
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f7f7 fdec 	bl	8000638 <__aeabi_dmul>
 8008a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a62:	4606      	mov	r6, r0
 8008a64:	460f      	mov	r7, r1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d09f      	beq.n	80089aa <_strtod_l+0x98a>
 8008a6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008a6e:	e7a0      	b.n	80089b2 <_strtod_l+0x992>
 8008a70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008af8 <_strtod_l+0xad8>
 8008a74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a78:	ec57 6b17 	vmov	r6, r7, d7
 8008a7c:	e799      	b.n	80089b2 <_strtod_l+0x992>
 8008a7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008a82:	9b08      	ldr	r3, [sp, #32]
 8008a84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1c1      	bne.n	8008a10 <_strtod_l+0x9f0>
 8008a8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a90:	0d1b      	lsrs	r3, r3, #20
 8008a92:	051b      	lsls	r3, r3, #20
 8008a94:	429d      	cmp	r5, r3
 8008a96:	d1bb      	bne.n	8008a10 <_strtod_l+0x9f0>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	f7f8 f97c 	bl	8000d98 <__aeabi_d2lz>
 8008aa0:	f7f7 fd9c 	bl	80005dc <__aeabi_l2d>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f7 fc0c 	bl	80002c8 <__aeabi_dsub>
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ab8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008abe:	ea46 060a 	orr.w	r6, r6, sl
 8008ac2:	431e      	orrs	r6, r3
 8008ac4:	d06f      	beq.n	8008ba6 <_strtod_l+0xb86>
 8008ac6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b00 <_strtod_l+0xae0>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f8 f826 	bl	8000b1c <__aeabi_dcmplt>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f47f accf 	bne.w	8008474 <_strtod_l+0x454>
 8008ad6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008b08 <_strtod_l+0xae8>)
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ae0:	f7f8 f83a 	bl	8000b58 <__aeabi_dcmpgt>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d093      	beq.n	8008a10 <_strtod_l+0x9f0>
 8008ae8:	e4c4      	b.n	8008474 <_strtod_l+0x454>
 8008aea:	bf00      	nop
 8008aec:	f3af 8000 	nop.w
 8008af0:	00000000 	.word	0x00000000
 8008af4:	bff00000 	.word	0xbff00000
 8008af8:	00000000 	.word	0x00000000
 8008afc:	3ff00000 	.word	0x3ff00000
 8008b00:	94a03595 	.word	0x94a03595
 8008b04:	3fdfffff 	.word	0x3fdfffff
 8008b08:	35afe535 	.word	0x35afe535
 8008b0c:	3fe00000 	.word	0x3fe00000
 8008b10:	000fffff 	.word	0x000fffff
 8008b14:	7ff00000 	.word	0x7ff00000
 8008b18:	7fefffff 	.word	0x7fefffff
 8008b1c:	3ff00000 	.word	0x3ff00000
 8008b20:	3fe00000 	.word	0x3fe00000
 8008b24:	7fe00000 	.word	0x7fe00000
 8008b28:	7c9fffff 	.word	0x7c9fffff
 8008b2c:	9b08      	ldr	r3, [sp, #32]
 8008b2e:	b323      	cbz	r3, 8008b7a <_strtod_l+0xb5a>
 8008b30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008b34:	d821      	bhi.n	8008b7a <_strtod_l+0xb5a>
 8008b36:	a328      	add	r3, pc, #160	@ (adr r3, 8008bd8 <_strtod_l+0xbb8>)
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 fff6 	bl	8000b30 <__aeabi_dcmple>
 8008b44:	b1a0      	cbz	r0, 8008b70 <_strtod_l+0xb50>
 8008b46:	4639      	mov	r1, r7
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7f8 f84d 	bl	8000be8 <__aeabi_d2uiz>
 8008b4e:	2801      	cmp	r0, #1
 8008b50:	bf38      	it	cc
 8008b52:	2001      	movcc	r0, #1
 8008b54:	f7f7 fcf6 	bl	8000544 <__aeabi_ui2d>
 8008b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	460f      	mov	r7, r1
 8008b5e:	b9fb      	cbnz	r3, 8008ba0 <_strtod_l+0xb80>
 8008b60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b64:	9014      	str	r0, [sp, #80]	@ 0x50
 8008b66:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008b6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008b76:	1b5b      	subs	r3, r3, r5
 8008b78:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008b82:	f7ff f8f1 	bl	8007d68 <__ulp>
 8008b86:	4650      	mov	r0, sl
 8008b88:	ec53 2b10 	vmov	r2, r3, d0
 8008b8c:	4659      	mov	r1, fp
 8008b8e:	f7f7 fd53 	bl	8000638 <__aeabi_dmul>
 8008b92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b96:	f7f7 fb99 	bl	80002cc <__adddf3>
 8008b9a:	4682      	mov	sl, r0
 8008b9c:	468b      	mov	fp, r1
 8008b9e:	e770      	b.n	8008a82 <_strtod_l+0xa62>
 8008ba0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008ba4:	e7e0      	b.n	8008b68 <_strtod_l+0xb48>
 8008ba6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008be0 <_strtod_l+0xbc0>)
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	f7f7 ffb6 	bl	8000b1c <__aeabi_dcmplt>
 8008bb0:	e798      	b.n	8008ae4 <_strtod_l+0xac4>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008bb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	f7ff ba6d 	b.w	800809a <_strtod_l+0x7a>
 8008bc0:	2a65      	cmp	r2, #101	@ 0x65
 8008bc2:	f43f ab66 	beq.w	8008292 <_strtod_l+0x272>
 8008bc6:	2a45      	cmp	r2, #69	@ 0x45
 8008bc8:	f43f ab63 	beq.w	8008292 <_strtod_l+0x272>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f7ff bb9e 	b.w	800830e <_strtod_l+0x2ee>
 8008bd2:	bf00      	nop
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	ffc00000 	.word	0xffc00000
 8008bdc:	41dfffff 	.word	0x41dfffff
 8008be0:	94a03595 	.word	0x94a03595
 8008be4:	3fcfffff 	.word	0x3fcfffff

08008be8 <_strtod_r>:
 8008be8:	4b01      	ldr	r3, [pc, #4]	@ (8008bf0 <_strtod_r+0x8>)
 8008bea:	f7ff ba19 	b.w	8008020 <_strtod_l>
 8008bee:	bf00      	nop
 8008bf0:	20000068 	.word	0x20000068

08008bf4 <__ssputs_r>:
 8008bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf8:	688e      	ldr	r6, [r1, #8]
 8008bfa:	461f      	mov	r7, r3
 8008bfc:	42be      	cmp	r6, r7
 8008bfe:	680b      	ldr	r3, [r1, #0]
 8008c00:	4682      	mov	sl, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	4690      	mov	r8, r2
 8008c06:	d82d      	bhi.n	8008c64 <__ssputs_r+0x70>
 8008c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c10:	d026      	beq.n	8008c60 <__ssputs_r+0x6c>
 8008c12:	6965      	ldr	r5, [r4, #20]
 8008c14:	6909      	ldr	r1, [r1, #16]
 8008c16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c1a:	eba3 0901 	sub.w	r9, r3, r1
 8008c1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c22:	1c7b      	adds	r3, r7, #1
 8008c24:	444b      	add	r3, r9
 8008c26:	106d      	asrs	r5, r5, #1
 8008c28:	429d      	cmp	r5, r3
 8008c2a:	bf38      	it	cc
 8008c2c:	461d      	movcc	r5, r3
 8008c2e:	0553      	lsls	r3, r2, #21
 8008c30:	d527      	bpl.n	8008c82 <__ssputs_r+0x8e>
 8008c32:	4629      	mov	r1, r5
 8008c34:	f7fe fc98 	bl	8007568 <_malloc_r>
 8008c38:	4606      	mov	r6, r0
 8008c3a:	b360      	cbz	r0, 8008c96 <__ssputs_r+0xa2>
 8008c3c:	6921      	ldr	r1, [r4, #16]
 8008c3e:	464a      	mov	r2, r9
 8008c40:	f7fd fd9e 	bl	8006780 <memcpy>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	6126      	str	r6, [r4, #16]
 8008c52:	6165      	str	r5, [r4, #20]
 8008c54:	444e      	add	r6, r9
 8008c56:	eba5 0509 	sub.w	r5, r5, r9
 8008c5a:	6026      	str	r6, [r4, #0]
 8008c5c:	60a5      	str	r5, [r4, #8]
 8008c5e:	463e      	mov	r6, r7
 8008c60:	42be      	cmp	r6, r7
 8008c62:	d900      	bls.n	8008c66 <__ssputs_r+0x72>
 8008c64:	463e      	mov	r6, r7
 8008c66:	6820      	ldr	r0, [r4, #0]
 8008c68:	4632      	mov	r2, r6
 8008c6a:	4641      	mov	r1, r8
 8008c6c:	f000 fb06 	bl	800927c <memmove>
 8008c70:	68a3      	ldr	r3, [r4, #8]
 8008c72:	1b9b      	subs	r3, r3, r6
 8008c74:	60a3      	str	r3, [r4, #8]
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	4433      	add	r3, r6
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c82:	462a      	mov	r2, r5
 8008c84:	f000 fed9 	bl	8009a3a <_realloc_r>
 8008c88:	4606      	mov	r6, r0
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d1e0      	bne.n	8008c50 <__ssputs_r+0x5c>
 8008c8e:	6921      	ldr	r1, [r4, #16]
 8008c90:	4650      	mov	r0, sl
 8008c92:	f7fe fbf5 	bl	8007480 <_free_r>
 8008c96:	230c      	movs	r3, #12
 8008c98:	f8ca 3000 	str.w	r3, [sl]
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ca2:	81a3      	strh	r3, [r4, #12]
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	e7e9      	b.n	8008c7e <__ssputs_r+0x8a>
	...

08008cac <_svfiprintf_r>:
 8008cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb0:	4698      	mov	r8, r3
 8008cb2:	898b      	ldrh	r3, [r1, #12]
 8008cb4:	061b      	lsls	r3, r3, #24
 8008cb6:	b09d      	sub	sp, #116	@ 0x74
 8008cb8:	4607      	mov	r7, r0
 8008cba:	460d      	mov	r5, r1
 8008cbc:	4614      	mov	r4, r2
 8008cbe:	d510      	bpl.n	8008ce2 <_svfiprintf_r+0x36>
 8008cc0:	690b      	ldr	r3, [r1, #16]
 8008cc2:	b973      	cbnz	r3, 8008ce2 <_svfiprintf_r+0x36>
 8008cc4:	2140      	movs	r1, #64	@ 0x40
 8008cc6:	f7fe fc4f 	bl	8007568 <_malloc_r>
 8008cca:	6028      	str	r0, [r5, #0]
 8008ccc:	6128      	str	r0, [r5, #16]
 8008cce:	b930      	cbnz	r0, 8008cde <_svfiprintf_r+0x32>
 8008cd0:	230c      	movs	r3, #12
 8008cd2:	603b      	str	r3, [r7, #0]
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	b01d      	add	sp, #116	@ 0x74
 8008cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cde:	2340      	movs	r3, #64	@ 0x40
 8008ce0:	616b      	str	r3, [r5, #20]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ce6:	2320      	movs	r3, #32
 8008ce8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf0:	2330      	movs	r3, #48	@ 0x30
 8008cf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e90 <_svfiprintf_r+0x1e4>
 8008cf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cfa:	f04f 0901 	mov.w	r9, #1
 8008cfe:	4623      	mov	r3, r4
 8008d00:	469a      	mov	sl, r3
 8008d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d06:	b10a      	cbz	r2, 8008d0c <_svfiprintf_r+0x60>
 8008d08:	2a25      	cmp	r2, #37	@ 0x25
 8008d0a:	d1f9      	bne.n	8008d00 <_svfiprintf_r+0x54>
 8008d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d10:	d00b      	beq.n	8008d2a <_svfiprintf_r+0x7e>
 8008d12:	465b      	mov	r3, fp
 8008d14:	4622      	mov	r2, r4
 8008d16:	4629      	mov	r1, r5
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f7ff ff6b 	bl	8008bf4 <__ssputs_r>
 8008d1e:	3001      	adds	r0, #1
 8008d20:	f000 80a7 	beq.w	8008e72 <_svfiprintf_r+0x1c6>
 8008d24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d26:	445a      	add	r2, fp
 8008d28:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 809f 	beq.w	8008e72 <_svfiprintf_r+0x1c6>
 8008d34:	2300      	movs	r3, #0
 8008d36:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d3e:	f10a 0a01 	add.w	sl, sl, #1
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	9307      	str	r3, [sp, #28]
 8008d46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d4c:	4654      	mov	r4, sl
 8008d4e:	2205      	movs	r2, #5
 8008d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d54:	484e      	ldr	r0, [pc, #312]	@ (8008e90 <_svfiprintf_r+0x1e4>)
 8008d56:	f7f7 fa5b 	bl	8000210 <memchr>
 8008d5a:	9a04      	ldr	r2, [sp, #16]
 8008d5c:	b9d8      	cbnz	r0, 8008d96 <_svfiprintf_r+0xea>
 8008d5e:	06d0      	lsls	r0, r2, #27
 8008d60:	bf44      	itt	mi
 8008d62:	2320      	movmi	r3, #32
 8008d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d68:	0711      	lsls	r1, r2, #28
 8008d6a:	bf44      	itt	mi
 8008d6c:	232b      	movmi	r3, #43	@ 0x2b
 8008d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d72:	f89a 3000 	ldrb.w	r3, [sl]
 8008d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d78:	d015      	beq.n	8008da6 <_svfiprintf_r+0xfa>
 8008d7a:	9a07      	ldr	r2, [sp, #28]
 8008d7c:	4654      	mov	r4, sl
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f04f 0c0a 	mov.w	ip, #10
 8008d84:	4621      	mov	r1, r4
 8008d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d8a:	3b30      	subs	r3, #48	@ 0x30
 8008d8c:	2b09      	cmp	r3, #9
 8008d8e:	d94b      	bls.n	8008e28 <_svfiprintf_r+0x17c>
 8008d90:	b1b0      	cbz	r0, 8008dc0 <_svfiprintf_r+0x114>
 8008d92:	9207      	str	r2, [sp, #28]
 8008d94:	e014      	b.n	8008dc0 <_svfiprintf_r+0x114>
 8008d96:	eba0 0308 	sub.w	r3, r0, r8
 8008d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	46a2      	mov	sl, r4
 8008da4:	e7d2      	b.n	8008d4c <_svfiprintf_r+0xa0>
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	1d19      	adds	r1, r3, #4
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	9103      	str	r1, [sp, #12]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	bfbb      	ittet	lt
 8008db2:	425b      	neglt	r3, r3
 8008db4:	f042 0202 	orrlt.w	r2, r2, #2
 8008db8:	9307      	strge	r3, [sp, #28]
 8008dba:	9307      	strlt	r3, [sp, #28]
 8008dbc:	bfb8      	it	lt
 8008dbe:	9204      	strlt	r2, [sp, #16]
 8008dc0:	7823      	ldrb	r3, [r4, #0]
 8008dc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dc4:	d10a      	bne.n	8008ddc <_svfiprintf_r+0x130>
 8008dc6:	7863      	ldrb	r3, [r4, #1]
 8008dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dca:	d132      	bne.n	8008e32 <_svfiprintf_r+0x186>
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	1d1a      	adds	r2, r3, #4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	9203      	str	r2, [sp, #12]
 8008dd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dd8:	3402      	adds	r4, #2
 8008dda:	9305      	str	r3, [sp, #20]
 8008ddc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ea0 <_svfiprintf_r+0x1f4>
 8008de0:	7821      	ldrb	r1, [r4, #0]
 8008de2:	2203      	movs	r2, #3
 8008de4:	4650      	mov	r0, sl
 8008de6:	f7f7 fa13 	bl	8000210 <memchr>
 8008dea:	b138      	cbz	r0, 8008dfc <_svfiprintf_r+0x150>
 8008dec:	9b04      	ldr	r3, [sp, #16]
 8008dee:	eba0 000a 	sub.w	r0, r0, sl
 8008df2:	2240      	movs	r2, #64	@ 0x40
 8008df4:	4082      	lsls	r2, r0
 8008df6:	4313      	orrs	r3, r2
 8008df8:	3401      	adds	r4, #1
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e00:	4824      	ldr	r0, [pc, #144]	@ (8008e94 <_svfiprintf_r+0x1e8>)
 8008e02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e06:	2206      	movs	r2, #6
 8008e08:	f7f7 fa02 	bl	8000210 <memchr>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d036      	beq.n	8008e7e <_svfiprintf_r+0x1d2>
 8008e10:	4b21      	ldr	r3, [pc, #132]	@ (8008e98 <_svfiprintf_r+0x1ec>)
 8008e12:	bb1b      	cbnz	r3, 8008e5c <_svfiprintf_r+0x1b0>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	3307      	adds	r3, #7
 8008e18:	f023 0307 	bic.w	r3, r3, #7
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	9303      	str	r3, [sp, #12]
 8008e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e22:	4433      	add	r3, r6
 8008e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e26:	e76a      	b.n	8008cfe <_svfiprintf_r+0x52>
 8008e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	2001      	movs	r0, #1
 8008e30:	e7a8      	b.n	8008d84 <_svfiprintf_r+0xd8>
 8008e32:	2300      	movs	r3, #0
 8008e34:	3401      	adds	r4, #1
 8008e36:	9305      	str	r3, [sp, #20]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f04f 0c0a 	mov.w	ip, #10
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e44:	3a30      	subs	r2, #48	@ 0x30
 8008e46:	2a09      	cmp	r2, #9
 8008e48:	d903      	bls.n	8008e52 <_svfiprintf_r+0x1a6>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0c6      	beq.n	8008ddc <_svfiprintf_r+0x130>
 8008e4e:	9105      	str	r1, [sp, #20]
 8008e50:	e7c4      	b.n	8008ddc <_svfiprintf_r+0x130>
 8008e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e56:	4604      	mov	r4, r0
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e7f0      	b.n	8008e3e <_svfiprintf_r+0x192>
 8008e5c:	ab03      	add	r3, sp, #12
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	462a      	mov	r2, r5
 8008e62:	4b0e      	ldr	r3, [pc, #56]	@ (8008e9c <_svfiprintf_r+0x1f0>)
 8008e64:	a904      	add	r1, sp, #16
 8008e66:	4638      	mov	r0, r7
 8008e68:	f7fb fec2 	bl	8004bf0 <_printf_float>
 8008e6c:	1c42      	adds	r2, r0, #1
 8008e6e:	4606      	mov	r6, r0
 8008e70:	d1d6      	bne.n	8008e20 <_svfiprintf_r+0x174>
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	065b      	lsls	r3, r3, #25
 8008e76:	f53f af2d 	bmi.w	8008cd4 <_svfiprintf_r+0x28>
 8008e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e7c:	e72c      	b.n	8008cd8 <_svfiprintf_r+0x2c>
 8008e7e:	ab03      	add	r3, sp, #12
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	462a      	mov	r2, r5
 8008e84:	4b05      	ldr	r3, [pc, #20]	@ (8008e9c <_svfiprintf_r+0x1f0>)
 8008e86:	a904      	add	r1, sp, #16
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7fc f949 	bl	8005120 <_printf_i>
 8008e8e:	e7ed      	b.n	8008e6c <_svfiprintf_r+0x1c0>
 8008e90:	0800a670 	.word	0x0800a670
 8008e94:	0800a67a 	.word	0x0800a67a
 8008e98:	08004bf1 	.word	0x08004bf1
 8008e9c:	08008bf5 	.word	0x08008bf5
 8008ea0:	0800a676 	.word	0x0800a676

08008ea4 <__sfputc_r>:
 8008ea4:	6893      	ldr	r3, [r2, #8]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	b410      	push	{r4}
 8008eac:	6093      	str	r3, [r2, #8]
 8008eae:	da08      	bge.n	8008ec2 <__sfputc_r+0x1e>
 8008eb0:	6994      	ldr	r4, [r2, #24]
 8008eb2:	42a3      	cmp	r3, r4
 8008eb4:	db01      	blt.n	8008eba <__sfputc_r+0x16>
 8008eb6:	290a      	cmp	r1, #10
 8008eb8:	d103      	bne.n	8008ec2 <__sfputc_r+0x1e>
 8008eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ebe:	f7fd ba22 	b.w	8006306 <__swbuf_r>
 8008ec2:	6813      	ldr	r3, [r2, #0]
 8008ec4:	1c58      	adds	r0, r3, #1
 8008ec6:	6010      	str	r0, [r2, #0]
 8008ec8:	7019      	strb	r1, [r3, #0]
 8008eca:	4608      	mov	r0, r1
 8008ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <__sfputs_r>:
 8008ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	460f      	mov	r7, r1
 8008ed8:	4614      	mov	r4, r2
 8008eda:	18d5      	adds	r5, r2, r3
 8008edc:	42ac      	cmp	r4, r5
 8008ede:	d101      	bne.n	8008ee4 <__sfputs_r+0x12>
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	e007      	b.n	8008ef4 <__sfputs_r+0x22>
 8008ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee8:	463a      	mov	r2, r7
 8008eea:	4630      	mov	r0, r6
 8008eec:	f7ff ffda 	bl	8008ea4 <__sfputc_r>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d1f3      	bne.n	8008edc <__sfputs_r+0xa>
 8008ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ef8 <_vfiprintf_r>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	460d      	mov	r5, r1
 8008efe:	b09d      	sub	sp, #116	@ 0x74
 8008f00:	4614      	mov	r4, r2
 8008f02:	4698      	mov	r8, r3
 8008f04:	4606      	mov	r6, r0
 8008f06:	b118      	cbz	r0, 8008f10 <_vfiprintf_r+0x18>
 8008f08:	6a03      	ldr	r3, [r0, #32]
 8008f0a:	b90b      	cbnz	r3, 8008f10 <_vfiprintf_r+0x18>
 8008f0c:	f7fc feb8 	bl	8005c80 <__sinit>
 8008f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f12:	07d9      	lsls	r1, r3, #31
 8008f14:	d405      	bmi.n	8008f22 <_vfiprintf_r+0x2a>
 8008f16:	89ab      	ldrh	r3, [r5, #12]
 8008f18:	059a      	lsls	r2, r3, #22
 8008f1a:	d402      	bmi.n	8008f22 <_vfiprintf_r+0x2a>
 8008f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f1e:	f7fd fc2d 	bl	800677c <__retarget_lock_acquire_recursive>
 8008f22:	89ab      	ldrh	r3, [r5, #12]
 8008f24:	071b      	lsls	r3, r3, #28
 8008f26:	d501      	bpl.n	8008f2c <_vfiprintf_r+0x34>
 8008f28:	692b      	ldr	r3, [r5, #16]
 8008f2a:	b99b      	cbnz	r3, 8008f54 <_vfiprintf_r+0x5c>
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f7fd fa28 	bl	8006384 <__swsetup_r>
 8008f34:	b170      	cbz	r0, 8008f54 <_vfiprintf_r+0x5c>
 8008f36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f38:	07dc      	lsls	r4, r3, #31
 8008f3a:	d504      	bpl.n	8008f46 <_vfiprintf_r+0x4e>
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	b01d      	add	sp, #116	@ 0x74
 8008f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f46:	89ab      	ldrh	r3, [r5, #12]
 8008f48:	0598      	lsls	r0, r3, #22
 8008f4a:	d4f7      	bmi.n	8008f3c <_vfiprintf_r+0x44>
 8008f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f4e:	f7fd fc16 	bl	800677e <__retarget_lock_release_recursive>
 8008f52:	e7f3      	b.n	8008f3c <_vfiprintf_r+0x44>
 8008f54:	2300      	movs	r3, #0
 8008f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f58:	2320      	movs	r3, #32
 8008f5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f62:	2330      	movs	r3, #48	@ 0x30
 8008f64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009114 <_vfiprintf_r+0x21c>
 8008f68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f6c:	f04f 0901 	mov.w	r9, #1
 8008f70:	4623      	mov	r3, r4
 8008f72:	469a      	mov	sl, r3
 8008f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f78:	b10a      	cbz	r2, 8008f7e <_vfiprintf_r+0x86>
 8008f7a:	2a25      	cmp	r2, #37	@ 0x25
 8008f7c:	d1f9      	bne.n	8008f72 <_vfiprintf_r+0x7a>
 8008f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f82:	d00b      	beq.n	8008f9c <_vfiprintf_r+0xa4>
 8008f84:	465b      	mov	r3, fp
 8008f86:	4622      	mov	r2, r4
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f7ff ffa1 	bl	8008ed2 <__sfputs_r>
 8008f90:	3001      	adds	r0, #1
 8008f92:	f000 80a7 	beq.w	80090e4 <_vfiprintf_r+0x1ec>
 8008f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f98:	445a      	add	r2, fp
 8008f9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 809f 	beq.w	80090e4 <_vfiprintf_r+0x1ec>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb0:	f10a 0a01 	add.w	sl, sl, #1
 8008fb4:	9304      	str	r3, [sp, #16]
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fbe:	4654      	mov	r4, sl
 8008fc0:	2205      	movs	r2, #5
 8008fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc6:	4853      	ldr	r0, [pc, #332]	@ (8009114 <_vfiprintf_r+0x21c>)
 8008fc8:	f7f7 f922 	bl	8000210 <memchr>
 8008fcc:	9a04      	ldr	r2, [sp, #16]
 8008fce:	b9d8      	cbnz	r0, 8009008 <_vfiprintf_r+0x110>
 8008fd0:	06d1      	lsls	r1, r2, #27
 8008fd2:	bf44      	itt	mi
 8008fd4:	2320      	movmi	r3, #32
 8008fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fda:	0713      	lsls	r3, r2, #28
 8008fdc:	bf44      	itt	mi
 8008fde:	232b      	movmi	r3, #43	@ 0x2b
 8008fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fea:	d015      	beq.n	8009018 <_vfiprintf_r+0x120>
 8008fec:	9a07      	ldr	r2, [sp, #28]
 8008fee:	4654      	mov	r4, sl
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f04f 0c0a 	mov.w	ip, #10
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ffc:	3b30      	subs	r3, #48	@ 0x30
 8008ffe:	2b09      	cmp	r3, #9
 8009000:	d94b      	bls.n	800909a <_vfiprintf_r+0x1a2>
 8009002:	b1b0      	cbz	r0, 8009032 <_vfiprintf_r+0x13a>
 8009004:	9207      	str	r2, [sp, #28]
 8009006:	e014      	b.n	8009032 <_vfiprintf_r+0x13a>
 8009008:	eba0 0308 	sub.w	r3, r0, r8
 800900c:	fa09 f303 	lsl.w	r3, r9, r3
 8009010:	4313      	orrs	r3, r2
 8009012:	9304      	str	r3, [sp, #16]
 8009014:	46a2      	mov	sl, r4
 8009016:	e7d2      	b.n	8008fbe <_vfiprintf_r+0xc6>
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	1d19      	adds	r1, r3, #4
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	9103      	str	r1, [sp, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	bfbb      	ittet	lt
 8009024:	425b      	neglt	r3, r3
 8009026:	f042 0202 	orrlt.w	r2, r2, #2
 800902a:	9307      	strge	r3, [sp, #28]
 800902c:	9307      	strlt	r3, [sp, #28]
 800902e:	bfb8      	it	lt
 8009030:	9204      	strlt	r2, [sp, #16]
 8009032:	7823      	ldrb	r3, [r4, #0]
 8009034:	2b2e      	cmp	r3, #46	@ 0x2e
 8009036:	d10a      	bne.n	800904e <_vfiprintf_r+0x156>
 8009038:	7863      	ldrb	r3, [r4, #1]
 800903a:	2b2a      	cmp	r3, #42	@ 0x2a
 800903c:	d132      	bne.n	80090a4 <_vfiprintf_r+0x1ac>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	1d1a      	adds	r2, r3, #4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	9203      	str	r2, [sp, #12]
 8009046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800904a:	3402      	adds	r4, #2
 800904c:	9305      	str	r3, [sp, #20]
 800904e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009124 <_vfiprintf_r+0x22c>
 8009052:	7821      	ldrb	r1, [r4, #0]
 8009054:	2203      	movs	r2, #3
 8009056:	4650      	mov	r0, sl
 8009058:	f7f7 f8da 	bl	8000210 <memchr>
 800905c:	b138      	cbz	r0, 800906e <_vfiprintf_r+0x176>
 800905e:	9b04      	ldr	r3, [sp, #16]
 8009060:	eba0 000a 	sub.w	r0, r0, sl
 8009064:	2240      	movs	r2, #64	@ 0x40
 8009066:	4082      	lsls	r2, r0
 8009068:	4313      	orrs	r3, r2
 800906a:	3401      	adds	r4, #1
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009072:	4829      	ldr	r0, [pc, #164]	@ (8009118 <_vfiprintf_r+0x220>)
 8009074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009078:	2206      	movs	r2, #6
 800907a:	f7f7 f8c9 	bl	8000210 <memchr>
 800907e:	2800      	cmp	r0, #0
 8009080:	d03f      	beq.n	8009102 <_vfiprintf_r+0x20a>
 8009082:	4b26      	ldr	r3, [pc, #152]	@ (800911c <_vfiprintf_r+0x224>)
 8009084:	bb1b      	cbnz	r3, 80090ce <_vfiprintf_r+0x1d6>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	3307      	adds	r3, #7
 800908a:	f023 0307 	bic.w	r3, r3, #7
 800908e:	3308      	adds	r3, #8
 8009090:	9303      	str	r3, [sp, #12]
 8009092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009094:	443b      	add	r3, r7
 8009096:	9309      	str	r3, [sp, #36]	@ 0x24
 8009098:	e76a      	b.n	8008f70 <_vfiprintf_r+0x78>
 800909a:	fb0c 3202 	mla	r2, ip, r2, r3
 800909e:	460c      	mov	r4, r1
 80090a0:	2001      	movs	r0, #1
 80090a2:	e7a8      	b.n	8008ff6 <_vfiprintf_r+0xfe>
 80090a4:	2300      	movs	r3, #0
 80090a6:	3401      	adds	r4, #1
 80090a8:	9305      	str	r3, [sp, #20]
 80090aa:	4619      	mov	r1, r3
 80090ac:	f04f 0c0a 	mov.w	ip, #10
 80090b0:	4620      	mov	r0, r4
 80090b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b6:	3a30      	subs	r2, #48	@ 0x30
 80090b8:	2a09      	cmp	r2, #9
 80090ba:	d903      	bls.n	80090c4 <_vfiprintf_r+0x1cc>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0c6      	beq.n	800904e <_vfiprintf_r+0x156>
 80090c0:	9105      	str	r1, [sp, #20]
 80090c2:	e7c4      	b.n	800904e <_vfiprintf_r+0x156>
 80090c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c8:	4604      	mov	r4, r0
 80090ca:	2301      	movs	r3, #1
 80090cc:	e7f0      	b.n	80090b0 <_vfiprintf_r+0x1b8>
 80090ce:	ab03      	add	r3, sp, #12
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	462a      	mov	r2, r5
 80090d4:	4b12      	ldr	r3, [pc, #72]	@ (8009120 <_vfiprintf_r+0x228>)
 80090d6:	a904      	add	r1, sp, #16
 80090d8:	4630      	mov	r0, r6
 80090da:	f7fb fd89 	bl	8004bf0 <_printf_float>
 80090de:	4607      	mov	r7, r0
 80090e0:	1c78      	adds	r0, r7, #1
 80090e2:	d1d6      	bne.n	8009092 <_vfiprintf_r+0x19a>
 80090e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090e6:	07d9      	lsls	r1, r3, #31
 80090e8:	d405      	bmi.n	80090f6 <_vfiprintf_r+0x1fe>
 80090ea:	89ab      	ldrh	r3, [r5, #12]
 80090ec:	059a      	lsls	r2, r3, #22
 80090ee:	d402      	bmi.n	80090f6 <_vfiprintf_r+0x1fe>
 80090f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090f2:	f7fd fb44 	bl	800677e <__retarget_lock_release_recursive>
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	065b      	lsls	r3, r3, #25
 80090fa:	f53f af1f 	bmi.w	8008f3c <_vfiprintf_r+0x44>
 80090fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009100:	e71e      	b.n	8008f40 <_vfiprintf_r+0x48>
 8009102:	ab03      	add	r3, sp, #12
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	462a      	mov	r2, r5
 8009108:	4b05      	ldr	r3, [pc, #20]	@ (8009120 <_vfiprintf_r+0x228>)
 800910a:	a904      	add	r1, sp, #16
 800910c:	4630      	mov	r0, r6
 800910e:	f7fc f807 	bl	8005120 <_printf_i>
 8009112:	e7e4      	b.n	80090de <_vfiprintf_r+0x1e6>
 8009114:	0800a670 	.word	0x0800a670
 8009118:	0800a67a 	.word	0x0800a67a
 800911c:	08004bf1 	.word	0x08004bf1
 8009120:	08008ed3 	.word	0x08008ed3
 8009124:	0800a676 	.word	0x0800a676

08009128 <__sflags>:
 8009128:	780b      	ldrb	r3, [r1, #0]
 800912a:	2b72      	cmp	r3, #114	@ 0x72
 800912c:	b530      	push	{r4, r5, lr}
 800912e:	d022      	beq.n	8009176 <__sflags+0x4e>
 8009130:	2b77      	cmp	r3, #119	@ 0x77
 8009132:	d024      	beq.n	800917e <__sflags+0x56>
 8009134:	2b61      	cmp	r3, #97	@ 0x61
 8009136:	d027      	beq.n	8009188 <__sflags+0x60>
 8009138:	2316      	movs	r3, #22
 800913a:	6003      	str	r3, [r0, #0]
 800913c:	2000      	movs	r0, #0
 800913e:	bd30      	pop	{r4, r5, pc}
 8009140:	2d62      	cmp	r5, #98	@ 0x62
 8009142:	d012      	beq.n	800916a <__sflags+0x42>
 8009144:	2d78      	cmp	r5, #120	@ 0x78
 8009146:	d013      	beq.n	8009170 <__sflags+0x48>
 8009148:	2d2b      	cmp	r5, #43	@ 0x2b
 800914a:	d107      	bne.n	800915c <__sflags+0x34>
 800914c:	f020 001c 	bic.w	r0, r0, #28
 8009150:	f023 0303 	bic.w	r3, r3, #3
 8009154:	f040 0010 	orr.w	r0, r0, #16
 8009158:	f043 0302 	orr.w	r3, r3, #2
 800915c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009160:	2d00      	cmp	r5, #0
 8009162:	d1ed      	bne.n	8009140 <__sflags+0x18>
 8009164:	4323      	orrs	r3, r4
 8009166:	6013      	str	r3, [r2, #0]
 8009168:	e7e9      	b.n	800913e <__sflags+0x16>
 800916a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800916e:	e7f5      	b.n	800915c <__sflags+0x34>
 8009170:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009174:	e7f2      	b.n	800915c <__sflags+0x34>
 8009176:	2400      	movs	r4, #0
 8009178:	4623      	mov	r3, r4
 800917a:	2004      	movs	r0, #4
 800917c:	e7ee      	b.n	800915c <__sflags+0x34>
 800917e:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 8009182:	2301      	movs	r3, #1
 8009184:	2008      	movs	r0, #8
 8009186:	e7e9      	b.n	800915c <__sflags+0x34>
 8009188:	f44f 7402 	mov.w	r4, #520	@ 0x208
 800918c:	2301      	movs	r3, #1
 800918e:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8009192:	e7e3      	b.n	800915c <__sflags+0x34>

08009194 <fiprintf>:
 8009194:	b40e      	push	{r1, r2, r3}
 8009196:	b503      	push	{r0, r1, lr}
 8009198:	4601      	mov	r1, r0
 800919a:	ab03      	add	r3, sp, #12
 800919c:	4805      	ldr	r0, [pc, #20]	@ (80091b4 <fiprintf+0x20>)
 800919e:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a2:	6800      	ldr	r0, [r0, #0]
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	f7ff fea7 	bl	8008ef8 <_vfiprintf_r>
 80091aa:	b002      	add	sp, #8
 80091ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b0:	b003      	add	sp, #12
 80091b2:	4770      	bx	lr
 80091b4:	20000018 	.word	0x20000018

080091b8 <__swhatbuf_r>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	460c      	mov	r4, r1
 80091bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c0:	2900      	cmp	r1, #0
 80091c2:	b096      	sub	sp, #88	@ 0x58
 80091c4:	4615      	mov	r5, r2
 80091c6:	461e      	mov	r6, r3
 80091c8:	da0d      	bge.n	80091e6 <__swhatbuf_r+0x2e>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091d0:	f04f 0100 	mov.w	r1, #0
 80091d4:	bf14      	ite	ne
 80091d6:	2340      	movne	r3, #64	@ 0x40
 80091d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091dc:	2000      	movs	r0, #0
 80091de:	6031      	str	r1, [r6, #0]
 80091e0:	602b      	str	r3, [r5, #0]
 80091e2:	b016      	add	sp, #88	@ 0x58
 80091e4:	bd70      	pop	{r4, r5, r6, pc}
 80091e6:	466a      	mov	r2, sp
 80091e8:	f000 f874 	bl	80092d4 <_fstat_r>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	dbec      	blt.n	80091ca <__swhatbuf_r+0x12>
 80091f0:	9901      	ldr	r1, [sp, #4]
 80091f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091fa:	4259      	negs	r1, r3
 80091fc:	4159      	adcs	r1, r3
 80091fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009202:	e7eb      	b.n	80091dc <__swhatbuf_r+0x24>

08009204 <__smakebuf_r>:
 8009204:	898b      	ldrh	r3, [r1, #12]
 8009206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009208:	079d      	lsls	r5, r3, #30
 800920a:	4606      	mov	r6, r0
 800920c:	460c      	mov	r4, r1
 800920e:	d507      	bpl.n	8009220 <__smakebuf_r+0x1c>
 8009210:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	6123      	str	r3, [r4, #16]
 8009218:	2301      	movs	r3, #1
 800921a:	6163      	str	r3, [r4, #20]
 800921c:	b003      	add	sp, #12
 800921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009220:	ab01      	add	r3, sp, #4
 8009222:	466a      	mov	r2, sp
 8009224:	f7ff ffc8 	bl	80091b8 <__swhatbuf_r>
 8009228:	9f00      	ldr	r7, [sp, #0]
 800922a:	4605      	mov	r5, r0
 800922c:	4639      	mov	r1, r7
 800922e:	4630      	mov	r0, r6
 8009230:	f7fe f99a 	bl	8007568 <_malloc_r>
 8009234:	b948      	cbnz	r0, 800924a <__smakebuf_r+0x46>
 8009236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923a:	059a      	lsls	r2, r3, #22
 800923c:	d4ee      	bmi.n	800921c <__smakebuf_r+0x18>
 800923e:	f023 0303 	bic.w	r3, r3, #3
 8009242:	f043 0302 	orr.w	r3, r3, #2
 8009246:	81a3      	strh	r3, [r4, #12]
 8009248:	e7e2      	b.n	8009210 <__smakebuf_r+0xc>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	6020      	str	r0, [r4, #0]
 800924e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	9b01      	ldr	r3, [sp, #4]
 8009256:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800925a:	b15b      	cbz	r3, 8009274 <__smakebuf_r+0x70>
 800925c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009260:	4630      	mov	r0, r6
 8009262:	f000 f849 	bl	80092f8 <_isatty_r>
 8009266:	b128      	cbz	r0, 8009274 <__smakebuf_r+0x70>
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	f023 0303 	bic.w	r3, r3, #3
 800926e:	f043 0301 	orr.w	r3, r3, #1
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	431d      	orrs	r5, r3
 8009278:	81a5      	strh	r5, [r4, #12]
 800927a:	e7cf      	b.n	800921c <__smakebuf_r+0x18>

0800927c <memmove>:
 800927c:	4288      	cmp	r0, r1
 800927e:	b510      	push	{r4, lr}
 8009280:	eb01 0402 	add.w	r4, r1, r2
 8009284:	d902      	bls.n	800928c <memmove+0x10>
 8009286:	4284      	cmp	r4, r0
 8009288:	4623      	mov	r3, r4
 800928a:	d807      	bhi.n	800929c <memmove+0x20>
 800928c:	1e43      	subs	r3, r0, #1
 800928e:	42a1      	cmp	r1, r4
 8009290:	d008      	beq.n	80092a4 <memmove+0x28>
 8009292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800929a:	e7f8      	b.n	800928e <memmove+0x12>
 800929c:	4402      	add	r2, r0
 800929e:	4601      	mov	r1, r0
 80092a0:	428a      	cmp	r2, r1
 80092a2:	d100      	bne.n	80092a6 <memmove+0x2a>
 80092a4:	bd10      	pop	{r4, pc}
 80092a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ae:	e7f7      	b.n	80092a0 <memmove+0x24>

080092b0 <strncmp>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	b16a      	cbz	r2, 80092d0 <strncmp+0x20>
 80092b4:	3901      	subs	r1, #1
 80092b6:	1884      	adds	r4, r0, r2
 80092b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d103      	bne.n	80092cc <strncmp+0x1c>
 80092c4:	42a0      	cmp	r0, r4
 80092c6:	d001      	beq.n	80092cc <strncmp+0x1c>
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	d1f5      	bne.n	80092b8 <strncmp+0x8>
 80092cc:	1ad0      	subs	r0, r2, r3
 80092ce:	bd10      	pop	{r4, pc}
 80092d0:	4610      	mov	r0, r2
 80092d2:	e7fc      	b.n	80092ce <strncmp+0x1e>

080092d4 <_fstat_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	@ (80092f4 <_fstat_r+0x20>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	f7f9 f932 	bl	800254a <_fstat>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d102      	bne.n	80092f0 <_fstat_r+0x1c>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	b103      	cbz	r3, 80092f0 <_fstat_r+0x1c>
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	bf00      	nop
 80092f4:	200007e4 	.word	0x200007e4

080092f8 <_isatty_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	@ (8009314 <_isatty_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f9 f931 	bl	800256a <_isatty>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_isatty_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_isatty_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	200007e4 	.word	0x200007e4

08009318 <_link_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d07      	ldr	r5, [pc, #28]	@ (8009338 <_link_r+0x20>)
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	4608      	mov	r0, r1
 8009322:	4611      	mov	r1, r2
 8009324:	602b      	str	r3, [r5, #0]
 8009326:	f7f9 f955 	bl	80025d4 <_link>
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	d102      	bne.n	8009334 <_link_r+0x1c>
 800932e:	682b      	ldr	r3, [r5, #0]
 8009330:	b103      	cbz	r3, 8009334 <_link_r+0x1c>
 8009332:	6023      	str	r3, [r4, #0]
 8009334:	bd38      	pop	{r3, r4, r5, pc}
 8009336:	bf00      	nop
 8009338:	200007e4 	.word	0x200007e4

0800933c <_sbrk_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d06      	ldr	r5, [pc, #24]	@ (8009358 <_sbrk_r+0x1c>)
 8009340:	2300      	movs	r3, #0
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	602b      	str	r3, [r5, #0]
 8009348:	f7f9 f954 	bl	80025f4 <_sbrk>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_sbrk_r+0x1a>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_sbrk_r+0x1a>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	200007e4 	.word	0x200007e4
 800935c:	00000000 	.word	0x00000000

08009360 <nan>:
 8009360:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009368 <nan+0x8>
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	00000000 	.word	0x00000000
 800936c:	7ff80000 	.word	0x7ff80000

08009370 <abort>:
 8009370:	b508      	push	{r3, lr}
 8009372:	2006      	movs	r0, #6
 8009374:	f000 fbc4 	bl	8009b00 <raise>
 8009378:	2001      	movs	r0, #1
 800937a:	f7f9 f8b2 	bl	80024e2 <_exit>

0800937e <_calloc_r>:
 800937e:	b570      	push	{r4, r5, r6, lr}
 8009380:	fba1 5402 	umull	r5, r4, r1, r2
 8009384:	b93c      	cbnz	r4, 8009396 <_calloc_r+0x18>
 8009386:	4629      	mov	r1, r5
 8009388:	f7fe f8ee 	bl	8007568 <_malloc_r>
 800938c:	4606      	mov	r6, r0
 800938e:	b928      	cbnz	r0, 800939c <_calloc_r+0x1e>
 8009390:	2600      	movs	r6, #0
 8009392:	4630      	mov	r0, r6
 8009394:	bd70      	pop	{r4, r5, r6, pc}
 8009396:	220c      	movs	r2, #12
 8009398:	6002      	str	r2, [r0, #0]
 800939a:	e7f9      	b.n	8009390 <_calloc_r+0x12>
 800939c:	462a      	mov	r2, r5
 800939e:	4621      	mov	r1, r4
 80093a0:	f7fd f8dd 	bl	800655e <memset>
 80093a4:	e7f5      	b.n	8009392 <_calloc_r+0x14>

080093a6 <rshift>:
 80093a6:	6903      	ldr	r3, [r0, #16]
 80093a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80093ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093b0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80093b4:	f100 0414 	add.w	r4, r0, #20
 80093b8:	dd45      	ble.n	8009446 <rshift+0xa0>
 80093ba:	f011 011f 	ands.w	r1, r1, #31
 80093be:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80093c2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80093c6:	d10c      	bne.n	80093e2 <rshift+0x3c>
 80093c8:	f100 0710 	add.w	r7, r0, #16
 80093cc:	4629      	mov	r1, r5
 80093ce:	42b1      	cmp	r1, r6
 80093d0:	d334      	bcc.n	800943c <rshift+0x96>
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	1eea      	subs	r2, r5, #3
 80093d8:	4296      	cmp	r6, r2
 80093da:	bf38      	it	cc
 80093dc:	2300      	movcc	r3, #0
 80093de:	4423      	add	r3, r4
 80093e0:	e015      	b.n	800940e <rshift+0x68>
 80093e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093e6:	f1c1 0820 	rsb	r8, r1, #32
 80093ea:	40cf      	lsrs	r7, r1
 80093ec:	f105 0e04 	add.w	lr, r5, #4
 80093f0:	46a1      	mov	r9, r4
 80093f2:	4576      	cmp	r6, lr
 80093f4:	46f4      	mov	ip, lr
 80093f6:	d815      	bhi.n	8009424 <rshift+0x7e>
 80093f8:	1a9a      	subs	r2, r3, r2
 80093fa:	0092      	lsls	r2, r2, #2
 80093fc:	3a04      	subs	r2, #4
 80093fe:	3501      	adds	r5, #1
 8009400:	42ae      	cmp	r6, r5
 8009402:	bf38      	it	cc
 8009404:	2200      	movcc	r2, #0
 8009406:	18a3      	adds	r3, r4, r2
 8009408:	50a7      	str	r7, [r4, r2]
 800940a:	b107      	cbz	r7, 800940e <rshift+0x68>
 800940c:	3304      	adds	r3, #4
 800940e:	1b1a      	subs	r2, r3, r4
 8009410:	42a3      	cmp	r3, r4
 8009412:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009416:	bf08      	it	eq
 8009418:	2300      	moveq	r3, #0
 800941a:	6102      	str	r2, [r0, #16]
 800941c:	bf08      	it	eq
 800941e:	6143      	streq	r3, [r0, #20]
 8009420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009424:	f8dc c000 	ldr.w	ip, [ip]
 8009428:	fa0c fc08 	lsl.w	ip, ip, r8
 800942c:	ea4c 0707 	orr.w	r7, ip, r7
 8009430:	f849 7b04 	str.w	r7, [r9], #4
 8009434:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009438:	40cf      	lsrs	r7, r1
 800943a:	e7da      	b.n	80093f2 <rshift+0x4c>
 800943c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009440:	f847 cf04 	str.w	ip, [r7, #4]!
 8009444:	e7c3      	b.n	80093ce <rshift+0x28>
 8009446:	4623      	mov	r3, r4
 8009448:	e7e1      	b.n	800940e <rshift+0x68>

0800944a <__hexdig_fun>:
 800944a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800944e:	2b09      	cmp	r3, #9
 8009450:	d802      	bhi.n	8009458 <__hexdig_fun+0xe>
 8009452:	3820      	subs	r0, #32
 8009454:	b2c0      	uxtb	r0, r0
 8009456:	4770      	bx	lr
 8009458:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800945c:	2b05      	cmp	r3, #5
 800945e:	d801      	bhi.n	8009464 <__hexdig_fun+0x1a>
 8009460:	3847      	subs	r0, #71	@ 0x47
 8009462:	e7f7      	b.n	8009454 <__hexdig_fun+0xa>
 8009464:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009468:	2b05      	cmp	r3, #5
 800946a:	d801      	bhi.n	8009470 <__hexdig_fun+0x26>
 800946c:	3827      	subs	r0, #39	@ 0x27
 800946e:	e7f1      	b.n	8009454 <__hexdig_fun+0xa>
 8009470:	2000      	movs	r0, #0
 8009472:	4770      	bx	lr

08009474 <__gethex>:
 8009474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009478:	b085      	sub	sp, #20
 800947a:	468a      	mov	sl, r1
 800947c:	9302      	str	r3, [sp, #8]
 800947e:	680b      	ldr	r3, [r1, #0]
 8009480:	9001      	str	r0, [sp, #4]
 8009482:	4690      	mov	r8, r2
 8009484:	1c9c      	adds	r4, r3, #2
 8009486:	46a1      	mov	r9, r4
 8009488:	f814 0b01 	ldrb.w	r0, [r4], #1
 800948c:	2830      	cmp	r0, #48	@ 0x30
 800948e:	d0fa      	beq.n	8009486 <__gethex+0x12>
 8009490:	eba9 0303 	sub.w	r3, r9, r3
 8009494:	f1a3 0b02 	sub.w	fp, r3, #2
 8009498:	f7ff ffd7 	bl	800944a <__hexdig_fun>
 800949c:	4605      	mov	r5, r0
 800949e:	2800      	cmp	r0, #0
 80094a0:	d168      	bne.n	8009574 <__gethex+0x100>
 80094a2:	49a0      	ldr	r1, [pc, #640]	@ (8009724 <__gethex+0x2b0>)
 80094a4:	2201      	movs	r2, #1
 80094a6:	4648      	mov	r0, r9
 80094a8:	f7ff ff02 	bl	80092b0 <strncmp>
 80094ac:	4607      	mov	r7, r0
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d167      	bne.n	8009582 <__gethex+0x10e>
 80094b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80094b6:	4626      	mov	r6, r4
 80094b8:	f7ff ffc7 	bl	800944a <__hexdig_fun>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d062      	beq.n	8009586 <__gethex+0x112>
 80094c0:	4623      	mov	r3, r4
 80094c2:	7818      	ldrb	r0, [r3, #0]
 80094c4:	2830      	cmp	r0, #48	@ 0x30
 80094c6:	4699      	mov	r9, r3
 80094c8:	f103 0301 	add.w	r3, r3, #1
 80094cc:	d0f9      	beq.n	80094c2 <__gethex+0x4e>
 80094ce:	f7ff ffbc 	bl	800944a <__hexdig_fun>
 80094d2:	fab0 f580 	clz	r5, r0
 80094d6:	096d      	lsrs	r5, r5, #5
 80094d8:	f04f 0b01 	mov.w	fp, #1
 80094dc:	464a      	mov	r2, r9
 80094de:	4616      	mov	r6, r2
 80094e0:	3201      	adds	r2, #1
 80094e2:	7830      	ldrb	r0, [r6, #0]
 80094e4:	f7ff ffb1 	bl	800944a <__hexdig_fun>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d1f8      	bne.n	80094de <__gethex+0x6a>
 80094ec:	498d      	ldr	r1, [pc, #564]	@ (8009724 <__gethex+0x2b0>)
 80094ee:	2201      	movs	r2, #1
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff fedd 	bl	80092b0 <strncmp>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d13f      	bne.n	800957a <__gethex+0x106>
 80094fa:	b944      	cbnz	r4, 800950e <__gethex+0x9a>
 80094fc:	1c74      	adds	r4, r6, #1
 80094fe:	4622      	mov	r2, r4
 8009500:	4616      	mov	r6, r2
 8009502:	3201      	adds	r2, #1
 8009504:	7830      	ldrb	r0, [r6, #0]
 8009506:	f7ff ffa0 	bl	800944a <__hexdig_fun>
 800950a:	2800      	cmp	r0, #0
 800950c:	d1f8      	bne.n	8009500 <__gethex+0x8c>
 800950e:	1ba4      	subs	r4, r4, r6
 8009510:	00a7      	lsls	r7, r4, #2
 8009512:	7833      	ldrb	r3, [r6, #0]
 8009514:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009518:	2b50      	cmp	r3, #80	@ 0x50
 800951a:	d13e      	bne.n	800959a <__gethex+0x126>
 800951c:	7873      	ldrb	r3, [r6, #1]
 800951e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009520:	d033      	beq.n	800958a <__gethex+0x116>
 8009522:	2b2d      	cmp	r3, #45	@ 0x2d
 8009524:	d034      	beq.n	8009590 <__gethex+0x11c>
 8009526:	1c71      	adds	r1, r6, #1
 8009528:	2400      	movs	r4, #0
 800952a:	7808      	ldrb	r0, [r1, #0]
 800952c:	f7ff ff8d 	bl	800944a <__hexdig_fun>
 8009530:	1e43      	subs	r3, r0, #1
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b18      	cmp	r3, #24
 8009536:	d830      	bhi.n	800959a <__gethex+0x126>
 8009538:	f1a0 0210 	sub.w	r2, r0, #16
 800953c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009540:	f7ff ff83 	bl	800944a <__hexdig_fun>
 8009544:	f100 3cff 	add.w	ip, r0, #4294967295
 8009548:	fa5f fc8c 	uxtb.w	ip, ip
 800954c:	f1bc 0f18 	cmp.w	ip, #24
 8009550:	f04f 030a 	mov.w	r3, #10
 8009554:	d91e      	bls.n	8009594 <__gethex+0x120>
 8009556:	b104      	cbz	r4, 800955a <__gethex+0xe6>
 8009558:	4252      	negs	r2, r2
 800955a:	4417      	add	r7, r2
 800955c:	f8ca 1000 	str.w	r1, [sl]
 8009560:	b1ed      	cbz	r5, 800959e <__gethex+0x12a>
 8009562:	f1bb 0f00 	cmp.w	fp, #0
 8009566:	bf0c      	ite	eq
 8009568:	2506      	moveq	r5, #6
 800956a:	2500      	movne	r5, #0
 800956c:	4628      	mov	r0, r5
 800956e:	b005      	add	sp, #20
 8009570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009574:	2500      	movs	r5, #0
 8009576:	462c      	mov	r4, r5
 8009578:	e7b0      	b.n	80094dc <__gethex+0x68>
 800957a:	2c00      	cmp	r4, #0
 800957c:	d1c7      	bne.n	800950e <__gethex+0x9a>
 800957e:	4627      	mov	r7, r4
 8009580:	e7c7      	b.n	8009512 <__gethex+0x9e>
 8009582:	464e      	mov	r6, r9
 8009584:	462f      	mov	r7, r5
 8009586:	2501      	movs	r5, #1
 8009588:	e7c3      	b.n	8009512 <__gethex+0x9e>
 800958a:	2400      	movs	r4, #0
 800958c:	1cb1      	adds	r1, r6, #2
 800958e:	e7cc      	b.n	800952a <__gethex+0xb6>
 8009590:	2401      	movs	r4, #1
 8009592:	e7fb      	b.n	800958c <__gethex+0x118>
 8009594:	fb03 0002 	mla	r0, r3, r2, r0
 8009598:	e7ce      	b.n	8009538 <__gethex+0xc4>
 800959a:	4631      	mov	r1, r6
 800959c:	e7de      	b.n	800955c <__gethex+0xe8>
 800959e:	eba6 0309 	sub.w	r3, r6, r9
 80095a2:	3b01      	subs	r3, #1
 80095a4:	4629      	mov	r1, r5
 80095a6:	2b07      	cmp	r3, #7
 80095a8:	dc0a      	bgt.n	80095c0 <__gethex+0x14c>
 80095aa:	9801      	ldr	r0, [sp, #4]
 80095ac:	f7fe f868 	bl	8007680 <_Balloc>
 80095b0:	4604      	mov	r4, r0
 80095b2:	b940      	cbnz	r0, 80095c6 <__gethex+0x152>
 80095b4:	4b5c      	ldr	r3, [pc, #368]	@ (8009728 <__gethex+0x2b4>)
 80095b6:	4602      	mov	r2, r0
 80095b8:	21e4      	movs	r1, #228	@ 0xe4
 80095ba:	485c      	ldr	r0, [pc, #368]	@ (800972c <__gethex+0x2b8>)
 80095bc:	f7fd f8f4 	bl	80067a8 <__assert_func>
 80095c0:	3101      	adds	r1, #1
 80095c2:	105b      	asrs	r3, r3, #1
 80095c4:	e7ef      	b.n	80095a6 <__gethex+0x132>
 80095c6:	f100 0a14 	add.w	sl, r0, #20
 80095ca:	2300      	movs	r3, #0
 80095cc:	4655      	mov	r5, sl
 80095ce:	469b      	mov	fp, r3
 80095d0:	45b1      	cmp	r9, r6
 80095d2:	d337      	bcc.n	8009644 <__gethex+0x1d0>
 80095d4:	f845 bb04 	str.w	fp, [r5], #4
 80095d8:	eba5 050a 	sub.w	r5, r5, sl
 80095dc:	10ad      	asrs	r5, r5, #2
 80095de:	6125      	str	r5, [r4, #16]
 80095e0:	4658      	mov	r0, fp
 80095e2:	f7fe f93f 	bl	8007864 <__hi0bits>
 80095e6:	016d      	lsls	r5, r5, #5
 80095e8:	f8d8 6000 	ldr.w	r6, [r8]
 80095ec:	1a2d      	subs	r5, r5, r0
 80095ee:	42b5      	cmp	r5, r6
 80095f0:	dd54      	ble.n	800969c <__gethex+0x228>
 80095f2:	1bad      	subs	r5, r5, r6
 80095f4:	4629      	mov	r1, r5
 80095f6:	4620      	mov	r0, r4
 80095f8:	f7fe fcd3 	bl	8007fa2 <__any_on>
 80095fc:	4681      	mov	r9, r0
 80095fe:	b178      	cbz	r0, 8009620 <__gethex+0x1ac>
 8009600:	1e6b      	subs	r3, r5, #1
 8009602:	1159      	asrs	r1, r3, #5
 8009604:	f003 021f 	and.w	r2, r3, #31
 8009608:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800960c:	f04f 0901 	mov.w	r9, #1
 8009610:	fa09 f202 	lsl.w	r2, r9, r2
 8009614:	420a      	tst	r2, r1
 8009616:	d003      	beq.n	8009620 <__gethex+0x1ac>
 8009618:	454b      	cmp	r3, r9
 800961a:	dc36      	bgt.n	800968a <__gethex+0x216>
 800961c:	f04f 0902 	mov.w	r9, #2
 8009620:	4629      	mov	r1, r5
 8009622:	4620      	mov	r0, r4
 8009624:	f7ff febf 	bl	80093a6 <rshift>
 8009628:	442f      	add	r7, r5
 800962a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800962e:	42bb      	cmp	r3, r7
 8009630:	da42      	bge.n	80096b8 <__gethex+0x244>
 8009632:	9801      	ldr	r0, [sp, #4]
 8009634:	4621      	mov	r1, r4
 8009636:	f7fe f863 	bl	8007700 <_Bfree>
 800963a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800963c:	2300      	movs	r3, #0
 800963e:	6013      	str	r3, [r2, #0]
 8009640:	25a3      	movs	r5, #163	@ 0xa3
 8009642:	e793      	b.n	800956c <__gethex+0xf8>
 8009644:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009648:	2a2e      	cmp	r2, #46	@ 0x2e
 800964a:	d012      	beq.n	8009672 <__gethex+0x1fe>
 800964c:	2b20      	cmp	r3, #32
 800964e:	d104      	bne.n	800965a <__gethex+0x1e6>
 8009650:	f845 bb04 	str.w	fp, [r5], #4
 8009654:	f04f 0b00 	mov.w	fp, #0
 8009658:	465b      	mov	r3, fp
 800965a:	7830      	ldrb	r0, [r6, #0]
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	f7ff fef4 	bl	800944a <__hexdig_fun>
 8009662:	9b03      	ldr	r3, [sp, #12]
 8009664:	f000 000f 	and.w	r0, r0, #15
 8009668:	4098      	lsls	r0, r3
 800966a:	ea4b 0b00 	orr.w	fp, fp, r0
 800966e:	3304      	adds	r3, #4
 8009670:	e7ae      	b.n	80095d0 <__gethex+0x15c>
 8009672:	45b1      	cmp	r9, r6
 8009674:	d8ea      	bhi.n	800964c <__gethex+0x1d8>
 8009676:	492b      	ldr	r1, [pc, #172]	@ (8009724 <__gethex+0x2b0>)
 8009678:	9303      	str	r3, [sp, #12]
 800967a:	2201      	movs	r2, #1
 800967c:	4630      	mov	r0, r6
 800967e:	f7ff fe17 	bl	80092b0 <strncmp>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	2800      	cmp	r0, #0
 8009686:	d1e1      	bne.n	800964c <__gethex+0x1d8>
 8009688:	e7a2      	b.n	80095d0 <__gethex+0x15c>
 800968a:	1ea9      	subs	r1, r5, #2
 800968c:	4620      	mov	r0, r4
 800968e:	f7fe fc88 	bl	8007fa2 <__any_on>
 8009692:	2800      	cmp	r0, #0
 8009694:	d0c2      	beq.n	800961c <__gethex+0x1a8>
 8009696:	f04f 0903 	mov.w	r9, #3
 800969a:	e7c1      	b.n	8009620 <__gethex+0x1ac>
 800969c:	da09      	bge.n	80096b2 <__gethex+0x23e>
 800969e:	1b75      	subs	r5, r6, r5
 80096a0:	4621      	mov	r1, r4
 80096a2:	9801      	ldr	r0, [sp, #4]
 80096a4:	462a      	mov	r2, r5
 80096a6:	f7fe fa43 	bl	8007b30 <__lshift>
 80096aa:	1b7f      	subs	r7, r7, r5
 80096ac:	4604      	mov	r4, r0
 80096ae:	f100 0a14 	add.w	sl, r0, #20
 80096b2:	f04f 0900 	mov.w	r9, #0
 80096b6:	e7b8      	b.n	800962a <__gethex+0x1b6>
 80096b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80096bc:	42bd      	cmp	r5, r7
 80096be:	dd6f      	ble.n	80097a0 <__gethex+0x32c>
 80096c0:	1bed      	subs	r5, r5, r7
 80096c2:	42ae      	cmp	r6, r5
 80096c4:	dc34      	bgt.n	8009730 <__gethex+0x2bc>
 80096c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d022      	beq.n	8009714 <__gethex+0x2a0>
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d024      	beq.n	800971c <__gethex+0x2a8>
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d115      	bne.n	8009702 <__gethex+0x28e>
 80096d6:	42ae      	cmp	r6, r5
 80096d8:	d113      	bne.n	8009702 <__gethex+0x28e>
 80096da:	2e01      	cmp	r6, #1
 80096dc:	d10b      	bne.n	80096f6 <__gethex+0x282>
 80096de:	9a02      	ldr	r2, [sp, #8]
 80096e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	2301      	movs	r3, #1
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	f8ca 3000 	str.w	r3, [sl]
 80096ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096f0:	2562      	movs	r5, #98	@ 0x62
 80096f2:	601c      	str	r4, [r3, #0]
 80096f4:	e73a      	b.n	800956c <__gethex+0xf8>
 80096f6:	1e71      	subs	r1, r6, #1
 80096f8:	4620      	mov	r0, r4
 80096fa:	f7fe fc52 	bl	8007fa2 <__any_on>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d1ed      	bne.n	80096de <__gethex+0x26a>
 8009702:	9801      	ldr	r0, [sp, #4]
 8009704:	4621      	mov	r1, r4
 8009706:	f7fd fffb 	bl	8007700 <_Bfree>
 800970a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800970c:	2300      	movs	r3, #0
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	2550      	movs	r5, #80	@ 0x50
 8009712:	e72b      	b.n	800956c <__gethex+0xf8>
 8009714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1f3      	bne.n	8009702 <__gethex+0x28e>
 800971a:	e7e0      	b.n	80096de <__gethex+0x26a>
 800971c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1dd      	bne.n	80096de <__gethex+0x26a>
 8009722:	e7ee      	b.n	8009702 <__gethex+0x28e>
 8009724:	0800a618 	.word	0x0800a618
 8009728:	0800a4b0 	.word	0x0800a4b0
 800972c:	0800a689 	.word	0x0800a689
 8009730:	1e6f      	subs	r7, r5, #1
 8009732:	f1b9 0f00 	cmp.w	r9, #0
 8009736:	d130      	bne.n	800979a <__gethex+0x326>
 8009738:	b127      	cbz	r7, 8009744 <__gethex+0x2d0>
 800973a:	4639      	mov	r1, r7
 800973c:	4620      	mov	r0, r4
 800973e:	f7fe fc30 	bl	8007fa2 <__any_on>
 8009742:	4681      	mov	r9, r0
 8009744:	117a      	asrs	r2, r7, #5
 8009746:	2301      	movs	r3, #1
 8009748:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800974c:	f007 071f 	and.w	r7, r7, #31
 8009750:	40bb      	lsls	r3, r7
 8009752:	4213      	tst	r3, r2
 8009754:	4629      	mov	r1, r5
 8009756:	4620      	mov	r0, r4
 8009758:	bf18      	it	ne
 800975a:	f049 0902 	orrne.w	r9, r9, #2
 800975e:	f7ff fe22 	bl	80093a6 <rshift>
 8009762:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009766:	1b76      	subs	r6, r6, r5
 8009768:	2502      	movs	r5, #2
 800976a:	f1b9 0f00 	cmp.w	r9, #0
 800976e:	d047      	beq.n	8009800 <__gethex+0x38c>
 8009770:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d015      	beq.n	80097a4 <__gethex+0x330>
 8009778:	2b03      	cmp	r3, #3
 800977a:	d017      	beq.n	80097ac <__gethex+0x338>
 800977c:	2b01      	cmp	r3, #1
 800977e:	d109      	bne.n	8009794 <__gethex+0x320>
 8009780:	f019 0f02 	tst.w	r9, #2
 8009784:	d006      	beq.n	8009794 <__gethex+0x320>
 8009786:	f8da 3000 	ldr.w	r3, [sl]
 800978a:	ea49 0903 	orr.w	r9, r9, r3
 800978e:	f019 0f01 	tst.w	r9, #1
 8009792:	d10e      	bne.n	80097b2 <__gethex+0x33e>
 8009794:	f045 0510 	orr.w	r5, r5, #16
 8009798:	e032      	b.n	8009800 <__gethex+0x38c>
 800979a:	f04f 0901 	mov.w	r9, #1
 800979e:	e7d1      	b.n	8009744 <__gethex+0x2d0>
 80097a0:	2501      	movs	r5, #1
 80097a2:	e7e2      	b.n	800976a <__gethex+0x2f6>
 80097a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097a6:	f1c3 0301 	rsb	r3, r3, #1
 80097aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0f0      	beq.n	8009794 <__gethex+0x320>
 80097b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097b6:	f104 0314 	add.w	r3, r4, #20
 80097ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80097be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80097c2:	f04f 0c00 	mov.w	ip, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80097d0:	d01b      	beq.n	800980a <__gethex+0x396>
 80097d2:	3201      	adds	r2, #1
 80097d4:	6002      	str	r2, [r0, #0]
 80097d6:	2d02      	cmp	r5, #2
 80097d8:	f104 0314 	add.w	r3, r4, #20
 80097dc:	d13c      	bne.n	8009858 <__gethex+0x3e4>
 80097de:	f8d8 2000 	ldr.w	r2, [r8]
 80097e2:	3a01      	subs	r2, #1
 80097e4:	42b2      	cmp	r2, r6
 80097e6:	d109      	bne.n	80097fc <__gethex+0x388>
 80097e8:	1171      	asrs	r1, r6, #5
 80097ea:	2201      	movs	r2, #1
 80097ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097f0:	f006 061f 	and.w	r6, r6, #31
 80097f4:	fa02 f606 	lsl.w	r6, r2, r6
 80097f8:	421e      	tst	r6, r3
 80097fa:	d13a      	bne.n	8009872 <__gethex+0x3fe>
 80097fc:	f045 0520 	orr.w	r5, r5, #32
 8009800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009802:	601c      	str	r4, [r3, #0]
 8009804:	9b02      	ldr	r3, [sp, #8]
 8009806:	601f      	str	r7, [r3, #0]
 8009808:	e6b0      	b.n	800956c <__gethex+0xf8>
 800980a:	4299      	cmp	r1, r3
 800980c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009810:	d8d9      	bhi.n	80097c6 <__gethex+0x352>
 8009812:	68a3      	ldr	r3, [r4, #8]
 8009814:	459b      	cmp	fp, r3
 8009816:	db17      	blt.n	8009848 <__gethex+0x3d4>
 8009818:	6861      	ldr	r1, [r4, #4]
 800981a:	9801      	ldr	r0, [sp, #4]
 800981c:	3101      	adds	r1, #1
 800981e:	f7fd ff2f 	bl	8007680 <_Balloc>
 8009822:	4681      	mov	r9, r0
 8009824:	b918      	cbnz	r0, 800982e <__gethex+0x3ba>
 8009826:	4b1a      	ldr	r3, [pc, #104]	@ (8009890 <__gethex+0x41c>)
 8009828:	4602      	mov	r2, r0
 800982a:	2184      	movs	r1, #132	@ 0x84
 800982c:	e6c5      	b.n	80095ba <__gethex+0x146>
 800982e:	6922      	ldr	r2, [r4, #16]
 8009830:	3202      	adds	r2, #2
 8009832:	f104 010c 	add.w	r1, r4, #12
 8009836:	0092      	lsls	r2, r2, #2
 8009838:	300c      	adds	r0, #12
 800983a:	f7fc ffa1 	bl	8006780 <memcpy>
 800983e:	4621      	mov	r1, r4
 8009840:	9801      	ldr	r0, [sp, #4]
 8009842:	f7fd ff5d 	bl	8007700 <_Bfree>
 8009846:	464c      	mov	r4, r9
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009850:	6122      	str	r2, [r4, #16]
 8009852:	2201      	movs	r2, #1
 8009854:	615a      	str	r2, [r3, #20]
 8009856:	e7be      	b.n	80097d6 <__gethex+0x362>
 8009858:	6922      	ldr	r2, [r4, #16]
 800985a:	455a      	cmp	r2, fp
 800985c:	dd0b      	ble.n	8009876 <__gethex+0x402>
 800985e:	2101      	movs	r1, #1
 8009860:	4620      	mov	r0, r4
 8009862:	f7ff fda0 	bl	80093a6 <rshift>
 8009866:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800986a:	3701      	adds	r7, #1
 800986c:	42bb      	cmp	r3, r7
 800986e:	f6ff aee0 	blt.w	8009632 <__gethex+0x1be>
 8009872:	2501      	movs	r5, #1
 8009874:	e7c2      	b.n	80097fc <__gethex+0x388>
 8009876:	f016 061f 	ands.w	r6, r6, #31
 800987a:	d0fa      	beq.n	8009872 <__gethex+0x3fe>
 800987c:	4453      	add	r3, sl
 800987e:	f1c6 0620 	rsb	r6, r6, #32
 8009882:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009886:	f7fd ffed 	bl	8007864 <__hi0bits>
 800988a:	42b0      	cmp	r0, r6
 800988c:	dbe7      	blt.n	800985e <__gethex+0x3ea>
 800988e:	e7f0      	b.n	8009872 <__gethex+0x3fe>
 8009890:	0800a4b0 	.word	0x0800a4b0

08009894 <L_shift>:
 8009894:	f1c2 0208 	rsb	r2, r2, #8
 8009898:	0092      	lsls	r2, r2, #2
 800989a:	b570      	push	{r4, r5, r6, lr}
 800989c:	f1c2 0620 	rsb	r6, r2, #32
 80098a0:	6843      	ldr	r3, [r0, #4]
 80098a2:	6804      	ldr	r4, [r0, #0]
 80098a4:	fa03 f506 	lsl.w	r5, r3, r6
 80098a8:	432c      	orrs	r4, r5
 80098aa:	40d3      	lsrs	r3, r2
 80098ac:	6004      	str	r4, [r0, #0]
 80098ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80098b2:	4288      	cmp	r0, r1
 80098b4:	d3f4      	bcc.n	80098a0 <L_shift+0xc>
 80098b6:	bd70      	pop	{r4, r5, r6, pc}

080098b8 <__match>:
 80098b8:	b530      	push	{r4, r5, lr}
 80098ba:	6803      	ldr	r3, [r0, #0]
 80098bc:	3301      	adds	r3, #1
 80098be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c2:	b914      	cbnz	r4, 80098ca <__match+0x12>
 80098c4:	6003      	str	r3, [r0, #0]
 80098c6:	2001      	movs	r0, #1
 80098c8:	bd30      	pop	{r4, r5, pc}
 80098ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80098d2:	2d19      	cmp	r5, #25
 80098d4:	bf98      	it	ls
 80098d6:	3220      	addls	r2, #32
 80098d8:	42a2      	cmp	r2, r4
 80098da:	d0f0      	beq.n	80098be <__match+0x6>
 80098dc:	2000      	movs	r0, #0
 80098de:	e7f3      	b.n	80098c8 <__match+0x10>

080098e0 <__hexnan>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	680b      	ldr	r3, [r1, #0]
 80098e6:	6801      	ldr	r1, [r0, #0]
 80098e8:	115e      	asrs	r6, r3, #5
 80098ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098ee:	f013 031f 	ands.w	r3, r3, #31
 80098f2:	b087      	sub	sp, #28
 80098f4:	bf18      	it	ne
 80098f6:	3604      	addne	r6, #4
 80098f8:	2500      	movs	r5, #0
 80098fa:	1f37      	subs	r7, r6, #4
 80098fc:	4682      	mov	sl, r0
 80098fe:	4690      	mov	r8, r2
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	f846 5c04 	str.w	r5, [r6, #-4]
 8009906:	46b9      	mov	r9, r7
 8009908:	463c      	mov	r4, r7
 800990a:	9502      	str	r5, [sp, #8]
 800990c:	46ab      	mov	fp, r5
 800990e:	784a      	ldrb	r2, [r1, #1]
 8009910:	1c4b      	adds	r3, r1, #1
 8009912:	9303      	str	r3, [sp, #12]
 8009914:	b342      	cbz	r2, 8009968 <__hexnan+0x88>
 8009916:	4610      	mov	r0, r2
 8009918:	9105      	str	r1, [sp, #20]
 800991a:	9204      	str	r2, [sp, #16]
 800991c:	f7ff fd95 	bl	800944a <__hexdig_fun>
 8009920:	2800      	cmp	r0, #0
 8009922:	d151      	bne.n	80099c8 <__hexnan+0xe8>
 8009924:	9a04      	ldr	r2, [sp, #16]
 8009926:	9905      	ldr	r1, [sp, #20]
 8009928:	2a20      	cmp	r2, #32
 800992a:	d818      	bhi.n	800995e <__hexnan+0x7e>
 800992c:	9b02      	ldr	r3, [sp, #8]
 800992e:	459b      	cmp	fp, r3
 8009930:	dd13      	ble.n	800995a <__hexnan+0x7a>
 8009932:	454c      	cmp	r4, r9
 8009934:	d206      	bcs.n	8009944 <__hexnan+0x64>
 8009936:	2d07      	cmp	r5, #7
 8009938:	dc04      	bgt.n	8009944 <__hexnan+0x64>
 800993a:	462a      	mov	r2, r5
 800993c:	4649      	mov	r1, r9
 800993e:	4620      	mov	r0, r4
 8009940:	f7ff ffa8 	bl	8009894 <L_shift>
 8009944:	4544      	cmp	r4, r8
 8009946:	d952      	bls.n	80099ee <__hexnan+0x10e>
 8009948:	2300      	movs	r3, #0
 800994a:	f1a4 0904 	sub.w	r9, r4, #4
 800994e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009952:	f8cd b008 	str.w	fp, [sp, #8]
 8009956:	464c      	mov	r4, r9
 8009958:	461d      	mov	r5, r3
 800995a:	9903      	ldr	r1, [sp, #12]
 800995c:	e7d7      	b.n	800990e <__hexnan+0x2e>
 800995e:	2a29      	cmp	r2, #41	@ 0x29
 8009960:	d157      	bne.n	8009a12 <__hexnan+0x132>
 8009962:	3102      	adds	r1, #2
 8009964:	f8ca 1000 	str.w	r1, [sl]
 8009968:	f1bb 0f00 	cmp.w	fp, #0
 800996c:	d051      	beq.n	8009a12 <__hexnan+0x132>
 800996e:	454c      	cmp	r4, r9
 8009970:	d206      	bcs.n	8009980 <__hexnan+0xa0>
 8009972:	2d07      	cmp	r5, #7
 8009974:	dc04      	bgt.n	8009980 <__hexnan+0xa0>
 8009976:	462a      	mov	r2, r5
 8009978:	4649      	mov	r1, r9
 800997a:	4620      	mov	r0, r4
 800997c:	f7ff ff8a 	bl	8009894 <L_shift>
 8009980:	4544      	cmp	r4, r8
 8009982:	d936      	bls.n	80099f2 <__hexnan+0x112>
 8009984:	f1a8 0204 	sub.w	r2, r8, #4
 8009988:	4623      	mov	r3, r4
 800998a:	f853 1b04 	ldr.w	r1, [r3], #4
 800998e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009992:	429f      	cmp	r7, r3
 8009994:	d2f9      	bcs.n	800998a <__hexnan+0xaa>
 8009996:	1b3b      	subs	r3, r7, r4
 8009998:	f023 0303 	bic.w	r3, r3, #3
 800999c:	3304      	adds	r3, #4
 800999e:	3401      	adds	r4, #1
 80099a0:	3e03      	subs	r6, #3
 80099a2:	42b4      	cmp	r4, r6
 80099a4:	bf88      	it	hi
 80099a6:	2304      	movhi	r3, #4
 80099a8:	4443      	add	r3, r8
 80099aa:	2200      	movs	r2, #0
 80099ac:	f843 2b04 	str.w	r2, [r3], #4
 80099b0:	429f      	cmp	r7, r3
 80099b2:	d2fb      	bcs.n	80099ac <__hexnan+0xcc>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	b91b      	cbnz	r3, 80099c0 <__hexnan+0xe0>
 80099b8:	4547      	cmp	r7, r8
 80099ba:	d128      	bne.n	8009a0e <__hexnan+0x12e>
 80099bc:	2301      	movs	r3, #1
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	2005      	movs	r0, #5
 80099c2:	b007      	add	sp, #28
 80099c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c8:	3501      	adds	r5, #1
 80099ca:	2d08      	cmp	r5, #8
 80099cc:	f10b 0b01 	add.w	fp, fp, #1
 80099d0:	dd06      	ble.n	80099e0 <__hexnan+0x100>
 80099d2:	4544      	cmp	r4, r8
 80099d4:	d9c1      	bls.n	800995a <__hexnan+0x7a>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80099dc:	2501      	movs	r5, #1
 80099de:	3c04      	subs	r4, #4
 80099e0:	6822      	ldr	r2, [r4, #0]
 80099e2:	f000 000f 	and.w	r0, r0, #15
 80099e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80099ea:	6020      	str	r0, [r4, #0]
 80099ec:	e7b5      	b.n	800995a <__hexnan+0x7a>
 80099ee:	2508      	movs	r5, #8
 80099f0:	e7b3      	b.n	800995a <__hexnan+0x7a>
 80099f2:	9b01      	ldr	r3, [sp, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0dd      	beq.n	80099b4 <__hexnan+0xd4>
 80099f8:	f1c3 0320 	rsb	r3, r3, #32
 80099fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009a00:	40da      	lsrs	r2, r3
 8009a02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a06:	4013      	ands	r3, r2
 8009a08:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a0c:	e7d2      	b.n	80099b4 <__hexnan+0xd4>
 8009a0e:	3f04      	subs	r7, #4
 8009a10:	e7d0      	b.n	80099b4 <__hexnan+0xd4>
 8009a12:	2004      	movs	r0, #4
 8009a14:	e7d5      	b.n	80099c2 <__hexnan+0xe2>

08009a16 <__ascii_mbtowc>:
 8009a16:	b082      	sub	sp, #8
 8009a18:	b901      	cbnz	r1, 8009a1c <__ascii_mbtowc+0x6>
 8009a1a:	a901      	add	r1, sp, #4
 8009a1c:	b142      	cbz	r2, 8009a30 <__ascii_mbtowc+0x1a>
 8009a1e:	b14b      	cbz	r3, 8009a34 <__ascii_mbtowc+0x1e>
 8009a20:	7813      	ldrb	r3, [r2, #0]
 8009a22:	600b      	str	r3, [r1, #0]
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	1e10      	subs	r0, r2, #0
 8009a28:	bf18      	it	ne
 8009a2a:	2001      	movne	r0, #1
 8009a2c:	b002      	add	sp, #8
 8009a2e:	4770      	bx	lr
 8009a30:	4610      	mov	r0, r2
 8009a32:	e7fb      	b.n	8009a2c <__ascii_mbtowc+0x16>
 8009a34:	f06f 0001 	mvn.w	r0, #1
 8009a38:	e7f8      	b.n	8009a2c <__ascii_mbtowc+0x16>

08009a3a <_realloc_r>:
 8009a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3e:	4680      	mov	r8, r0
 8009a40:	4615      	mov	r5, r2
 8009a42:	460c      	mov	r4, r1
 8009a44:	b921      	cbnz	r1, 8009a50 <_realloc_r+0x16>
 8009a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	f7fd bd8c 	b.w	8007568 <_malloc_r>
 8009a50:	b92a      	cbnz	r2, 8009a5e <_realloc_r+0x24>
 8009a52:	f7fd fd15 	bl	8007480 <_free_r>
 8009a56:	2400      	movs	r4, #0
 8009a58:	4620      	mov	r0, r4
 8009a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a5e:	f000 f86b 	bl	8009b38 <_malloc_usable_size_r>
 8009a62:	4285      	cmp	r5, r0
 8009a64:	4606      	mov	r6, r0
 8009a66:	d802      	bhi.n	8009a6e <_realloc_r+0x34>
 8009a68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009a6c:	d8f4      	bhi.n	8009a58 <_realloc_r+0x1e>
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4640      	mov	r0, r8
 8009a72:	f7fd fd79 	bl	8007568 <_malloc_r>
 8009a76:	4607      	mov	r7, r0
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d0ec      	beq.n	8009a56 <_realloc_r+0x1c>
 8009a7c:	42b5      	cmp	r5, r6
 8009a7e:	462a      	mov	r2, r5
 8009a80:	4621      	mov	r1, r4
 8009a82:	bf28      	it	cs
 8009a84:	4632      	movcs	r2, r6
 8009a86:	f7fc fe7b 	bl	8006780 <memcpy>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	f7fd fcf7 	bl	8007480 <_free_r>
 8009a92:	463c      	mov	r4, r7
 8009a94:	e7e0      	b.n	8009a58 <_realloc_r+0x1e>

08009a96 <__ascii_wctomb>:
 8009a96:	4603      	mov	r3, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	b141      	cbz	r1, 8009aae <__ascii_wctomb+0x18>
 8009a9c:	2aff      	cmp	r2, #255	@ 0xff
 8009a9e:	d904      	bls.n	8009aaa <__ascii_wctomb+0x14>
 8009aa0:	228a      	movs	r2, #138	@ 0x8a
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	4770      	bx	lr
 8009aaa:	700a      	strb	r2, [r1, #0]
 8009aac:	2001      	movs	r0, #1
 8009aae:	4770      	bx	lr

08009ab0 <_raise_r>:
 8009ab0:	291f      	cmp	r1, #31
 8009ab2:	b538      	push	{r3, r4, r5, lr}
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	d904      	bls.n	8009ac4 <_raise_r+0x14>
 8009aba:	2316      	movs	r3, #22
 8009abc:	6003      	str	r3, [r0, #0]
 8009abe:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ac6:	b112      	cbz	r2, 8009ace <_raise_r+0x1e>
 8009ac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009acc:	b94b      	cbnz	r3, 8009ae2 <_raise_r+0x32>
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f000 f830 	bl	8009b34 <_getpid_r>
 8009ad4:	4622      	mov	r2, r4
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	4628      	mov	r0, r5
 8009ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ade:	f000 b817 	b.w	8009b10 <_kill_r>
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d00a      	beq.n	8009afc <_raise_r+0x4c>
 8009ae6:	1c59      	adds	r1, r3, #1
 8009ae8:	d103      	bne.n	8009af2 <_raise_r+0x42>
 8009aea:	2316      	movs	r3, #22
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	2001      	movs	r0, #1
 8009af0:	e7e7      	b.n	8009ac2 <_raise_r+0x12>
 8009af2:	2100      	movs	r1, #0
 8009af4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009af8:	4620      	mov	r0, r4
 8009afa:	4798      	blx	r3
 8009afc:	2000      	movs	r0, #0
 8009afe:	e7e0      	b.n	8009ac2 <_raise_r+0x12>

08009b00 <raise>:
 8009b00:	4b02      	ldr	r3, [pc, #8]	@ (8009b0c <raise+0xc>)
 8009b02:	4601      	mov	r1, r0
 8009b04:	6818      	ldr	r0, [r3, #0]
 8009b06:	f7ff bfd3 	b.w	8009ab0 <_raise_r>
 8009b0a:	bf00      	nop
 8009b0c:	20000018 	.word	0x20000018

08009b10 <_kill_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4d07      	ldr	r5, [pc, #28]	@ (8009b30 <_kill_r+0x20>)
 8009b14:	2300      	movs	r3, #0
 8009b16:	4604      	mov	r4, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	f7f8 fcd0 	bl	80024c2 <_kill>
 8009b22:	1c43      	adds	r3, r0, #1
 8009b24:	d102      	bne.n	8009b2c <_kill_r+0x1c>
 8009b26:	682b      	ldr	r3, [r5, #0]
 8009b28:	b103      	cbz	r3, 8009b2c <_kill_r+0x1c>
 8009b2a:	6023      	str	r3, [r4, #0]
 8009b2c:	bd38      	pop	{r3, r4, r5, pc}
 8009b2e:	bf00      	nop
 8009b30:	200007e4 	.word	0x200007e4

08009b34 <_getpid_r>:
 8009b34:	f7f8 bcbd 	b.w	80024b2 <_getpid>

08009b38 <_malloc_usable_size_r>:
 8009b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b3c:	1f18      	subs	r0, r3, #4
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfbc      	itt	lt
 8009b42:	580b      	ldrlt	r3, [r1, r0]
 8009b44:	18c0      	addlt	r0, r0, r3
 8009b46:	4770      	bx	lr

08009b48 <_init>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr

08009b54 <_fini>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr
