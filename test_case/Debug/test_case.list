
test_case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010230  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002208  08010400  08010400  00011400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012608  08012608  00014200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012608  08012608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012610  08012610  00014200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012610  08012610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012614  08012614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08012618  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  20000200  08012818  00014200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011e4  08012818  000151e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6bb  00000000  00000000  00014230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ea  00000000  00000000  0002e8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  000332d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000110b  00000000  00000000  00034930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281d9  00000000  00000000  00035a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022cb9  00000000  00000000  0005dc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d82b6  00000000  00000000  000808cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158b83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007020  00000000  00000000  00158bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080103e8 	.word	0x080103e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	080103e8 	.word	0x080103e8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 ba09 	b.w	800111c <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9be 	b.w	800111c <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	468e      	mov	lr, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	4688      	mov	r8, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d14a      	bne.n	8000eca <__udivmoddi4+0xa6>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4617      	mov	r7, r2
 8000e38:	d962      	bls.n	8000f00 <__udivmoddi4+0xdc>
 8000e3a:	fab2 f682 	clz	r6, r2
 8000e3e:	b14e      	cbz	r6, 8000e54 <__udivmoddi4+0x30>
 8000e40:	f1c6 0320 	rsb	r3, r6, #32
 8000e44:	fa01 f806 	lsl.w	r8, r1, r6
 8000e48:	fa20 f303 	lsr.w	r3, r0, r3
 8000e4c:	40b7      	lsls	r7, r6
 8000e4e:	ea43 0808 	orr.w	r8, r3, r8
 8000e52:	40b4      	lsls	r4, r6
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	fa1f fc87 	uxth.w	ip, r7
 8000e5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e60:	0c23      	lsrs	r3, r4, #16
 8000e62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x62>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e78:	f080 80ea 	bcs.w	8001050 <__udivmoddi4+0x22c>
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f240 80e7 	bls.w	8001050 <__udivmoddi4+0x22c>
 8000e82:	3902      	subs	r1, #2
 8000e84:	443b      	add	r3, r7
 8000e86:	1a9a      	subs	r2, r3, r2
 8000e88:	b2a3      	uxth	r3, r4
 8000e8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e9a:	459c      	cmp	ip, r3
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x8e>
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea4:	f080 80d6 	bcs.w	8001054 <__udivmoddi4+0x230>
 8000ea8:	459c      	cmp	ip, r3
 8000eaa:	f240 80d3 	bls.w	8001054 <__udivmoddi4+0x230>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eb6:	eba3 030c 	sub.w	r3, r3, ip
 8000eba:	2100      	movs	r1, #0
 8000ebc:	b11d      	cbz	r5, 8000ec6 <__udivmoddi4+0xa2>
 8000ebe:	40f3      	lsrs	r3, r6
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d905      	bls.n	8000eda <__udivmoddi4+0xb6>
 8000ece:	b10d      	cbz	r5, 8000ed4 <__udivmoddi4+0xb0>
 8000ed0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e7f5      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8000eda:	fab3 f183 	clz	r1, r3
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d146      	bne.n	8000f70 <__udivmoddi4+0x14c>
 8000ee2:	4573      	cmp	r3, lr
 8000ee4:	d302      	bcc.n	8000eec <__udivmoddi4+0xc8>
 8000ee6:	4282      	cmp	r2, r0
 8000ee8:	f200 8105 	bhi.w	80010f6 <__udivmoddi4+0x2d2>
 8000eec:	1a84      	subs	r4, r0, r2
 8000eee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d0e5      	beq.n	8000ec6 <__udivmoddi4+0xa2>
 8000efa:	e9c5 4800 	strd	r4, r8, [r5]
 8000efe:	e7e2      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	f000 8090 	beq.w	8001026 <__udivmoddi4+0x202>
 8000f06:	fab2 f682 	clz	r6, r2
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	f040 80a4 	bne.w	8001058 <__udivmoddi4+0x234>
 8000f10:	1a8a      	subs	r2, r1, r2
 8000f12:	0c03      	lsrs	r3, r0, #16
 8000f14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f18:	b280      	uxth	r0, r0
 8000f1a:	b2bc      	uxth	r4, r7
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0x11e>
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x11c>
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	f200 80e0 	bhi.w	8001100 <__udivmoddi4+0x2dc>
 8000f40:	46c4      	mov	ip, r8
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f50:	fb02 f404 	mul.w	r4, r2, r4
 8000f54:	429c      	cmp	r4, r3
 8000f56:	d907      	bls.n	8000f68 <__udivmoddi4+0x144>
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f5e:	d202      	bcs.n	8000f66 <__udivmoddi4+0x142>
 8000f60:	429c      	cmp	r4, r3
 8000f62:	f200 80ca 	bhi.w	80010fa <__udivmoddi4+0x2d6>
 8000f66:	4602      	mov	r2, r0
 8000f68:	1b1b      	subs	r3, r3, r4
 8000f6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f6e:	e7a5      	b.n	8000ebc <__udivmoddi4+0x98>
 8000f70:	f1c1 0620 	rsb	r6, r1, #32
 8000f74:	408b      	lsls	r3, r1
 8000f76:	fa22 f706 	lsr.w	r7, r2, r6
 8000f7a:	431f      	orrs	r7, r3
 8000f7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f80:	fa20 f306 	lsr.w	r3, r0, r6
 8000f84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f8c:	4323      	orrs	r3, r4
 8000f8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f92:	fa1f fc87 	uxth.w	ip, r7
 8000f96:	fbbe f0f9 	udiv	r0, lr, r9
 8000f9a:	0c1c      	lsrs	r4, r3, #16
 8000f9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000fa0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000fa4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000fa8:	45a6      	cmp	lr, r4
 8000faa:	fa02 f201 	lsl.w	r2, r2, r1
 8000fae:	d909      	bls.n	8000fc4 <__udivmoddi4+0x1a0>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fb6:	f080 809c 	bcs.w	80010f2 <__udivmoddi4+0x2ce>
 8000fba:	45a6      	cmp	lr, r4
 8000fbc:	f240 8099 	bls.w	80010f2 <__udivmoddi4+0x2ce>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	443c      	add	r4, r7
 8000fc4:	eba4 040e 	sub.w	r4, r4, lr
 8000fc8:	fa1f fe83 	uxth.w	lr, r3
 8000fcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fdc:	45a4      	cmp	ip, r4
 8000fde:	d908      	bls.n	8000ff2 <__udivmoddi4+0x1ce>
 8000fe0:	193c      	adds	r4, r7, r4
 8000fe2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fe6:	f080 8082 	bcs.w	80010ee <__udivmoddi4+0x2ca>
 8000fea:	45a4      	cmp	ip, r4
 8000fec:	d97f      	bls.n	80010ee <__udivmoddi4+0x2ca>
 8000fee:	3b02      	subs	r3, #2
 8000ff0:	443c      	add	r4, r7
 8000ff2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ffe:	4564      	cmp	r4, ip
 8001000:	4673      	mov	r3, lr
 8001002:	46e1      	mov	r9, ip
 8001004:	d362      	bcc.n	80010cc <__udivmoddi4+0x2a8>
 8001006:	d05f      	beq.n	80010c8 <__udivmoddi4+0x2a4>
 8001008:	b15d      	cbz	r5, 8001022 <__udivmoddi4+0x1fe>
 800100a:	ebb8 0203 	subs.w	r2, r8, r3
 800100e:	eb64 0409 	sbc.w	r4, r4, r9
 8001012:	fa04 f606 	lsl.w	r6, r4, r6
 8001016:	fa22 f301 	lsr.w	r3, r2, r1
 800101a:	431e      	orrs	r6, r3
 800101c:	40cc      	lsrs	r4, r1
 800101e:	e9c5 6400 	strd	r6, r4, [r5]
 8001022:	2100      	movs	r1, #0
 8001024:	e74f      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8001026:	fbb1 fcf2 	udiv	ip, r1, r2
 800102a:	0c01      	lsrs	r1, r0, #16
 800102c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001030:	b280      	uxth	r0, r0
 8001032:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001036:	463b      	mov	r3, r7
 8001038:	4638      	mov	r0, r7
 800103a:	463c      	mov	r4, r7
 800103c:	46b8      	mov	r8, r7
 800103e:	46be      	mov	lr, r7
 8001040:	2620      	movs	r6, #32
 8001042:	fbb1 f1f7 	udiv	r1, r1, r7
 8001046:	eba2 0208 	sub.w	r2, r2, r8
 800104a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800104e:	e766      	b.n	8000f1e <__udivmoddi4+0xfa>
 8001050:	4601      	mov	r1, r0
 8001052:	e718      	b.n	8000e86 <__udivmoddi4+0x62>
 8001054:	4610      	mov	r0, r2
 8001056:	e72c      	b.n	8000eb2 <__udivmoddi4+0x8e>
 8001058:	f1c6 0220 	rsb	r2, r6, #32
 800105c:	fa2e f302 	lsr.w	r3, lr, r2
 8001060:	40b7      	lsls	r7, r6
 8001062:	40b1      	lsls	r1, r6
 8001064:	fa20 f202 	lsr.w	r2, r0, r2
 8001068:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800106c:	430a      	orrs	r2, r1
 800106e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001072:	b2bc      	uxth	r4, r7
 8001074:	fb0e 3318 	mls	r3, lr, r8, r3
 8001078:	0c11      	lsrs	r1, r2, #16
 800107a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800107e:	fb08 f904 	mul.w	r9, r8, r4
 8001082:	40b0      	lsls	r0, r6
 8001084:	4589      	cmp	r9, r1
 8001086:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800108a:	b280      	uxth	r0, r0
 800108c:	d93e      	bls.n	800110c <__udivmoddi4+0x2e8>
 800108e:	1879      	adds	r1, r7, r1
 8001090:	f108 3cff 	add.w	ip, r8, #4294967295
 8001094:	d201      	bcs.n	800109a <__udivmoddi4+0x276>
 8001096:	4589      	cmp	r9, r1
 8001098:	d81f      	bhi.n	80010da <__udivmoddi4+0x2b6>
 800109a:	eba1 0109 	sub.w	r1, r1, r9
 800109e:	fbb1 f9fe 	udiv	r9, r1, lr
 80010a2:	fb09 f804 	mul.w	r8, r9, r4
 80010a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80010aa:	b292      	uxth	r2, r2
 80010ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010b0:	4542      	cmp	r2, r8
 80010b2:	d229      	bcs.n	8001108 <__udivmoddi4+0x2e4>
 80010b4:	18ba      	adds	r2, r7, r2
 80010b6:	f109 31ff 	add.w	r1, r9, #4294967295
 80010ba:	d2c4      	bcs.n	8001046 <__udivmoddi4+0x222>
 80010bc:	4542      	cmp	r2, r8
 80010be:	d2c2      	bcs.n	8001046 <__udivmoddi4+0x222>
 80010c0:	f1a9 0102 	sub.w	r1, r9, #2
 80010c4:	443a      	add	r2, r7
 80010c6:	e7be      	b.n	8001046 <__udivmoddi4+0x222>
 80010c8:	45f0      	cmp	r8, lr
 80010ca:	d29d      	bcs.n	8001008 <__udivmoddi4+0x1e4>
 80010cc:	ebbe 0302 	subs.w	r3, lr, r2
 80010d0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010d4:	3801      	subs	r0, #1
 80010d6:	46e1      	mov	r9, ip
 80010d8:	e796      	b.n	8001008 <__udivmoddi4+0x1e4>
 80010da:	eba7 0909 	sub.w	r9, r7, r9
 80010de:	4449      	add	r1, r9
 80010e0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e8:	fb09 f804 	mul.w	r8, r9, r4
 80010ec:	e7db      	b.n	80010a6 <__udivmoddi4+0x282>
 80010ee:	4673      	mov	r3, lr
 80010f0:	e77f      	b.n	8000ff2 <__udivmoddi4+0x1ce>
 80010f2:	4650      	mov	r0, sl
 80010f4:	e766      	b.n	8000fc4 <__udivmoddi4+0x1a0>
 80010f6:	4608      	mov	r0, r1
 80010f8:	e6fd      	b.n	8000ef6 <__udivmoddi4+0xd2>
 80010fa:	443b      	add	r3, r7
 80010fc:	3a02      	subs	r2, #2
 80010fe:	e733      	b.n	8000f68 <__udivmoddi4+0x144>
 8001100:	f1ac 0c02 	sub.w	ip, ip, #2
 8001104:	443b      	add	r3, r7
 8001106:	e71c      	b.n	8000f42 <__udivmoddi4+0x11e>
 8001108:	4649      	mov	r1, r9
 800110a:	e79c      	b.n	8001046 <__udivmoddi4+0x222>
 800110c:	eba1 0109 	sub.w	r1, r1, r9
 8001110:	46c4      	mov	ip, r8
 8001112:	fbb1 f9fe 	udiv	r9, r1, lr
 8001116:	fb09 f804 	mul.w	r8, r9, r4
 800111a:	e7c4      	b.n	80010a6 <__udivmoddi4+0x282>

0800111c <__aeabi_idiv0>:
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <ILI9341_DrawFilledCircle>:
		}
	}
}

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b08b      	sub	sp, #44	@ 0x2c
 8001124:	af00      	add	r7, sp, #0
 8001126:	4604      	mov	r4, r0
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4623      	mov	r3, r4
 8001130:	80fb      	strh	r3, [r7, #6]
 8001132:	4603      	mov	r3, r0
 8001134:	80bb      	strh	r3, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]
 800113a:	4613      	mov	r3, r2
 800113c:	803b      	strh	r3, [r7, #0]

	int x = radius;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	f1c3 0301 	rsb	r3, r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8001158:	e061      	b.n	800121e <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	e018      	b.n	8001196 <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	b298      	uxth	r0, r3
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	b29a      	uxth	r2, r3
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	b29b      	uxth	r3, r3
 8001172:	883a      	ldrh	r2, [r7, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f000 fc71 	bl	8001a5c <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	b298      	uxth	r0, r3
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	b29b      	uxth	r3, r3
 8001182:	88ba      	ldrh	r2, [r7, #4]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	f000 fc66 	bl	8001a5c <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	3301      	adds	r3, #1
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119a:	4413      	add	r3, r2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	429a      	cmp	r2, r3
 80011a0:	dde0      	ble.n	8001164 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e018      	b.n	80011de <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	b298      	uxth	r0, r3
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	883a      	ldrh	r2, [r7, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f000 fc4d 	bl	8001a5c <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	b298      	uxth	r0, r3
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	88ba      	ldrh	r2, [r7, #4]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	883a      	ldrh	r2, [r7, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	f000 fc42 	bl	8001a5c <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	88fa      	ldrh	r2, [r7, #6]
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	4413      	add	r3, r2
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dde0      	ble.n	80011ac <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	3301      	adds	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4413      	add	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
		yChange += 2;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	3302      	adds	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005a      	lsls	r2, r3, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	4413      	add	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	dd09      	ble.n	800121e <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	3b01      	subs	r3, #1
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4413      	add	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3302      	adds	r3, #2
 800121c:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 800121e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	429a      	cmp	r2, r3
 8001224:	da99      	bge.n	800115a <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	372c      	adds	r7, #44	@ 0x2c
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}

08001230 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b08d      	sub	sp, #52	@ 0x34
 8001234:	af02      	add	r7, sp, #8
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	4611      	mov	r1, r2
 800123a:	461a      	mov	r2, r3
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	460b      	mov	r3, r1
 8001242:	81bb      	strh	r3, [r7, #12]
 8001244:	4613      	mov	r3, r2
 8001246:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b1e      	cmp	r3, #30
 800124c:	d964      	bls.n	8001318 <ILI9341_DrawChar+0xe8>
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db60      	blt.n	8001318 <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3302      	adds	r3, #2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	3303      	adds	r3, #3
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	3b20      	subs	r3, #32
 8001278:	7ffa      	ldrb	r2, [r7, #31]
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	3304      	adds	r3, #4
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	4413      	add	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8001286:	7fbb      	ldrb	r3, [r7, #30]
 8001288:	b29a      	uxth	r2, r3
 800128a:	7f7b      	ldrb	r3, [r7, #29]
 800128c:	b29c      	uxth	r4, r3
 800128e:	88f9      	ldrh	r1, [r7, #6]
 8001290:	89b8      	ldrh	r0, [r7, #12]
 8001292:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4623      	mov	r3, r4
 8001298:	f000 fc46 	bl	8001b28 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a0:	e035      	b.n	800130e <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	e02b      	b.n	8001300 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80012a8:	7f3b      	ldrb	r3, [r7, #28]
 80012aa:	6a3a      	ldr	r2, [r7, #32]
 80012ac:	fb03 f202 	mul.w	r2, r3, r2
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	10db      	asrs	r3, r3, #3
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	4413      	add	r3, r2
 80012ba:	3301      	adds	r3, #1
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	2201      	movs	r2, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80012d2:	7dfa      	ldrb	r2, [r7, #23]
 80012d4:	7dbb      	ldrb	r3, [r7, #22]
 80012d6:	4013      	ands	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00d      	beq.n	80012fa <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	89bb      	ldrh	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	b298      	uxth	r0, r3
 80012e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	4413      	add	r3, r2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80012f4:	4619      	mov	r1, r3
 80012f6:	f000 fbb1 	bl	8001a5c <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	3301      	adds	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
 8001300:	7fbb      	ldrb	r3, [r7, #30]
 8001302:	6a3a      	ldr	r2, [r7, #32]
 8001304:	429a      	cmp	r2, r3
 8001306:	dbcf      	blt.n	80012a8 <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	3301      	adds	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
 800130e:	7f7b      	ldrb	r3, [r7, #29]
 8001310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001312:	429a      	cmp	r2, r3
 8001314:	dbc5      	blt.n	80012a2 <ILI9341_DrawChar+0x72>
 8001316:	e000      	b.n	800131a <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 8001318:	bf00      	nop
			}
		}
	}
}
 800131a:	372c      	adds	r7, #44	@ 0x2c
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}

08001320 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	@ 0x28
 8001324:	af02      	add	r7, sp, #8
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	4611      	mov	r1, r2
 800132c:	461a      	mov	r2, r3
 800132e:	460b      	mov	r3, r1
 8001330:	80fb      	strh	r3, [r7, #6]
 8001332:	4613      	mov	r3, r2
 8001334:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8001344:	e02d      	b.n	80013a2 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	7818      	ldrb	r0, [r3, #0]
 800134a:	88b9      	ldrh	r1, [r7, #4]
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	460b      	mov	r3, r1
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	f7ff ff69 	bl	8001230 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3b20      	subs	r3, #32
 8001364:	7ffa      	ldrb	r2, [r7, #31]
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	3304      	adds	r3, #4
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	1c9a      	adds	r2, r3, #2
 800137c:	7fbb      	ldrb	r3, [r7, #30]
 800137e:	429a      	cmp	r2, r3
 8001380:	da07      	bge.n	8001392 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	b29a      	uxth	r2, r3
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	4413      	add	r3, r2
 800138a:	b29b      	uxth	r3, r3
 800138c:	3302      	adds	r3, #2
 800138e:	80fb      	strh	r3, [r7, #6]
 8001390:	e004      	b.n	800139c <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001392:	7fbb      	ldrb	r3, [r7, #30]
 8001394:	b29a      	uxth	r2, r3
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	4413      	add	r3, r2
 800139a:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
	while (*str)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1cd      	bne.n	8001346 <ILI9341_DrawText+0x26>
	}
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_SPI_TxCpltCallback>:

// added
extern int tft_y;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a06      	ldr	r2, [pc, #24]	@ (80013d8 <HAL_SPI_TxCpltCallback+0x24>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d105      	bne.n	80013d0 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ca:	4804      	ldr	r0, [pc, #16]	@ (80013dc <HAL_SPI_TxCpltCallback+0x28>)
 80013cc:	f004 fb12 	bl	80059f4 <HAL_GPIO_WritePin>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000e70 	.word	0x20000e70
 80013dc:	40020400 	.word	0x40020400

080013e0 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80013ea:	bf00      	nop
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <ILI9341_SPI_Tx+0x30>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d1f8      	bne.n	80013ec <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	4803      	ldr	r0, [pc, #12]	@ (8001410 <ILI9341_SPI_Tx+0x30>)
 8001402:	f005 fc01 	bl	8006c08 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000e70 	.word	0x20000e70

08001414 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001420:	bf00      	nop
 8001422:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <ILI9341_SPI_TxBuffer+0x30>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b02      	cmp	r3, #2
 800142e:	d1f8      	bne.n	8001422 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	461a      	mov	r2, r3
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4803      	ldr	r0, [pc, #12]	@ (8001444 <ILI9341_SPI_TxBuffer+0x30>)
 8001438:	f005 fbe6 	bl	8006c08 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000e70 	.word	0x20000e70

08001448 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001452:	2200      	movs	r2, #0
 8001454:	2120      	movs	r1, #32
 8001456:	4808      	ldr	r0, [pc, #32]	@ (8001478 <ILI9341_WriteCommand+0x30>)
 8001458:	f004 facc 	bl	80059f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001462:	4805      	ldr	r0, [pc, #20]	@ (8001478 <ILI9341_WriteCommand+0x30>)
 8001464:	f004 fac6 	bl	80059f4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ffb8 	bl	80013e0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40020400 	.word	0x40020400

0800147c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001486:	2201      	movs	r2, #1
 8001488:	2120      	movs	r1, #32
 800148a:	4808      	ldr	r0, [pc, #32]	@ (80014ac <ILI9341_WriteData+0x30>)
 800148c:	f004 fab2 	bl	80059f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <ILI9341_WriteData+0x30>)
 8001498:	f004 faac 	bl	80059f4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff9e 	bl	80013e0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020400 	.word	0x40020400

080014b0 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80014bc:	2201      	movs	r2, #1
 80014be:	2120      	movs	r1, #32
 80014c0:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <ILI9341_WriteBuffer+0x34>)
 80014c2:	f004 fa97 	bl	80059f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014cc:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <ILI9341_WriteBuffer+0x34>)
 80014ce:	f004 fa91 	bl	80059f4 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff9c 	bl	8001414 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40020400 	.word	0x40020400

080014e8 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	4603      	mov	r3, r0
 80014fc:	80bb      	strh	r3, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]
 8001502:	4613      	mov	r3, r2
 8001504:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	b29b      	uxth	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8001526:	202a      	movs	r0, #42	@ 0x2a
 8001528:	f7ff ff8e 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2104      	movs	r1, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ffbc 	bl	80014b0 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001548:	883b      	ldrh	r3, [r7, #0]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	b29b      	uxth	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001552:	883b      	ldrh	r3, [r7, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001558:	202b      	movs	r0, #43	@ 0x2b
 800155a:	f7ff ff75 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2104      	movs	r1, #4
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ffa3 	bl	80014b0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800156a:	202c      	movs	r0, #44	@ 0x2c
 800156c:	f7ff ff6c 	bl	8001448 <ILI9341_WriteCommand>
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}

08001578 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001582:	480e      	ldr	r0, [pc, #56]	@ (80015bc <ILI9341_Reset+0x44>)
 8001584:	f004 fa36 	bl	80059f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001588:	200a      	movs	r0, #10
 800158a:	f003 fb95 	bl	8004cb8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001594:	4809      	ldr	r0, [pc, #36]	@ (80015bc <ILI9341_Reset+0x44>)
 8001596:	f004 fa2d 	bl	80059f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800159a:	200a      	movs	r0, #10
 800159c:	f003 fb8c 	bl	8004cb8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <ILI9341_Reset+0x44>)
 80015a8:	f004 fa24 	bl	80059f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015b2:	4802      	ldr	r0, [pc, #8]	@ (80015bc <ILI9341_Reset+0x44>)
 80015b4:	f004 fa1e 	bl	80059f4 <HAL_GPIO_WritePin>
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40020400 	.word	0x40020400

080015c0 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015ca:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <ILI9341_Enable+0x14>)
 80015cc:	f004 fa12 	bl	80059f4 <HAL_GPIO_WritePin>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40020400 	.word	0x40020400

080015d8 <ILI9341_Init>:

void ILI9341_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80015dc:	f7ff fff0 	bl	80015c0 <ILI9341_Enable>
	ILI9341_Reset();
 80015e0:	f7ff ffca 	bl	8001578 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff ff2f 	bl	8001448 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f003 fb64 	bl	8004cb8 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80015f0:	20cb      	movs	r0, #203	@ 0xcb
 80015f2:	f7ff ff29 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80015f6:	2039      	movs	r0, #57	@ 0x39
 80015f8:	f7ff ff40 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80015fc:	202c      	movs	r0, #44	@ 0x2c
 80015fe:	f7ff ff3d 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff ff3a 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001608:	2034      	movs	r0, #52	@ 0x34
 800160a:	f7ff ff37 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800160e:	2002      	movs	r0, #2
 8001610:	f7ff ff34 	bl	800147c <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001614:	20cf      	movs	r0, #207	@ 0xcf
 8001616:	f7ff ff17 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff ff2e 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001620:	20c1      	movs	r0, #193	@ 0xc1
 8001622:	f7ff ff2b 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8001626:	2030      	movs	r0, #48	@ 0x30
 8001628:	f7ff ff28 	bl	800147c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 800162c:	20e8      	movs	r0, #232	@ 0xe8
 800162e:	f7ff ff0b 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001632:	2085      	movs	r0, #133	@ 0x85
 8001634:	f7ff ff22 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff ff1f 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800163e:	2078      	movs	r0, #120	@ 0x78
 8001640:	f7ff ff1c 	bl	800147c <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001644:	20ea      	movs	r0, #234	@ 0xea
 8001646:	f7ff feff 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff ff16 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff ff13 	bl	800147c <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001656:	20ed      	movs	r0, #237	@ 0xed
 8001658:	f7ff fef6 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 800165c:	2064      	movs	r0, #100	@ 0x64
 800165e:	f7ff ff0d 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001662:	2003      	movs	r0, #3
 8001664:	f7ff ff0a 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001668:	2012      	movs	r0, #18
 800166a:	f7ff ff07 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800166e:	2081      	movs	r0, #129	@ 0x81
 8001670:	f7ff ff04 	bl	800147c <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001674:	20f7      	movs	r0, #247	@ 0xf7
 8001676:	f7ff fee7 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800167a:	2020      	movs	r0, #32
 800167c:	f7ff fefe 	bl	800147c <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001680:	20c0      	movs	r0, #192	@ 0xc0
 8001682:	f7ff fee1 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8001686:	2023      	movs	r0, #35	@ 0x23
 8001688:	f7ff fef8 	bl	800147c <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800168c:	20c1      	movs	r0, #193	@ 0xc1
 800168e:	f7ff fedb 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001692:	2010      	movs	r0, #16
 8001694:	f7ff fef2 	bl	800147c <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001698:	20c5      	movs	r0, #197	@ 0xc5
 800169a:	f7ff fed5 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800169e:	203e      	movs	r0, #62	@ 0x3e
 80016a0:	f7ff feec 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80016a4:	2028      	movs	r0, #40	@ 0x28
 80016a6:	f7ff fee9 	bl	800147c <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80016aa:	20c7      	movs	r0, #199	@ 0xc7
 80016ac:	f7ff fecc 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80016b0:	2086      	movs	r0, #134	@ 0x86
 80016b2:	f7ff fee3 	bl	800147c <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80016b6:	2036      	movs	r0, #54	@ 0x36
 80016b8:	f7ff fec6 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80016bc:	2048      	movs	r0, #72	@ 0x48
 80016be:	f7ff fedd 	bl	800147c <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80016c2:	203a      	movs	r0, #58	@ 0x3a
 80016c4:	f7ff fec0 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80016c8:	2055      	movs	r0, #85	@ 0x55
 80016ca:	f7ff fed7 	bl	800147c <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80016ce:	20b1      	movs	r0, #177	@ 0xb1
 80016d0:	f7ff feba 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fed1 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80016da:	2018      	movs	r0, #24
 80016dc:	f7ff fece 	bl	800147c <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80016e0:	20b6      	movs	r0, #182	@ 0xb6
 80016e2:	f7ff feb1 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80016e6:	2008      	movs	r0, #8
 80016e8:	f7ff fec8 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80016ec:	2082      	movs	r0, #130	@ 0x82
 80016ee:	f7ff fec5 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80016f2:	2027      	movs	r0, #39	@ 0x27
 80016f4:	f7ff fec2 	bl	800147c <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80016f8:	20f2      	movs	r0, #242	@ 0xf2
 80016fa:	f7ff fea5 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff febc 	bl	800147c <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001704:	2026      	movs	r0, #38	@ 0x26
 8001706:	f7ff fe9f 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff feb6 	bl	800147c <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001710:	20e0      	movs	r0, #224	@ 0xe0
 8001712:	f7ff fe99 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8001716:	200f      	movs	r0, #15
 8001718:	f7ff feb0 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800171c:	2031      	movs	r0, #49	@ 0x31
 800171e:	f7ff fead 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001722:	202b      	movs	r0, #43	@ 0x2b
 8001724:	f7ff feaa 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001728:	200c      	movs	r0, #12
 800172a:	f7ff fea7 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800172e:	200e      	movs	r0, #14
 8001730:	f7ff fea4 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001734:	2008      	movs	r0, #8
 8001736:	f7ff fea1 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800173a:	204e      	movs	r0, #78	@ 0x4e
 800173c:	f7ff fe9e 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001740:	20f1      	movs	r0, #241	@ 0xf1
 8001742:	f7ff fe9b 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001746:	2037      	movs	r0, #55	@ 0x37
 8001748:	f7ff fe98 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800174c:	2007      	movs	r0, #7
 800174e:	f7ff fe95 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001752:	2010      	movs	r0, #16
 8001754:	f7ff fe92 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001758:	2003      	movs	r0, #3
 800175a:	f7ff fe8f 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800175e:	200e      	movs	r0, #14
 8001760:	f7ff fe8c 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001764:	2009      	movs	r0, #9
 8001766:	f7ff fe89 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff fe86 	bl	800147c <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001770:	20e1      	movs	r0, #225	@ 0xe1
 8001772:	f7ff fe69 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fe80 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800177c:	200e      	movs	r0, #14
 800177e:	f7ff fe7d 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001782:	2014      	movs	r0, #20
 8001784:	f7ff fe7a 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001788:	2003      	movs	r0, #3
 800178a:	f7ff fe77 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800178e:	2011      	movs	r0, #17
 8001790:	f7ff fe74 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001794:	2007      	movs	r0, #7
 8001796:	f7ff fe71 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800179a:	2031      	movs	r0, #49	@ 0x31
 800179c:	f7ff fe6e 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80017a0:	20c1      	movs	r0, #193	@ 0xc1
 80017a2:	f7ff fe6b 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80017a6:	2048      	movs	r0, #72	@ 0x48
 80017a8:	f7ff fe68 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80017ac:	2008      	movs	r0, #8
 80017ae:	f7ff fe65 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f7ff fe62 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80017b8:	200c      	movs	r0, #12
 80017ba:	f7ff fe5f 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80017be:	2031      	movs	r0, #49	@ 0x31
 80017c0:	f7ff fe5c 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80017c4:	2036      	movs	r0, #54	@ 0x36
 80017c6:	f7ff fe59 	bl	800147c <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f7ff fe56 	bl	800147c <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80017d0:	2011      	movs	r0, #17
 80017d2:	f7ff fe39 	bl	8001448 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80017d6:	2064      	movs	r0, #100	@ 0x64
 80017d8:	f003 fa6e 	bl	8004cb8 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80017dc:	2029      	movs	r0, #41	@ 0x29
 80017de:	f7ff fe33 	bl	8001448 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f802 	bl	80017ec <ILI9341_SetRotation>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80017f6:	2036      	movs	r0, #54	@ 0x36
 80017f8:	f7ff fe26 	bl	8001448 <ILI9341_WriteCommand>
	HAL_Delay(1);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f003 fa5b 	bl	8004cb8 <HAL_Delay>

	switch(rotation)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d837      	bhi.n	8001878 <ILI9341_SetRotation+0x8c>
 8001808:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <ILI9341_SetRotation+0x24>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	08001821 	.word	0x08001821
 8001814:	08001837 	.word	0x08001837
 8001818:	0800184d 	.word	0x0800184d
 800181c:	08001863 	.word	0x08001863
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001820:	2048      	movs	r0, #72	@ 0x48
 8001822:	f7ff fe2b 	bl	800147c <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <ILI9341_SetRotation+0x98>)
 8001828:	22f0      	movs	r2, #240	@ 0xf0
 800182a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800182c:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <ILI9341_SetRotation+0x9c>)
 800182e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001832:	801a      	strh	r2, [r3, #0]
		break;
 8001834:	e021      	b.n	800187a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8001836:	2028      	movs	r0, #40	@ 0x28
 8001838:	f7ff fe20 	bl	800147c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <ILI9341_SetRotation+0x98>)
 800183e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001842:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001844:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <ILI9341_SetRotation+0x9c>)
 8001846:	22f0      	movs	r2, #240	@ 0xf0
 8001848:	801a      	strh	r2, [r3, #0]
		break;
 800184a:	e016      	b.n	800187a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 800184c:	2088      	movs	r0, #136	@ 0x88
 800184e:	f7ff fe15 	bl	800147c <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001852:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <ILI9341_SetRotation+0x98>)
 8001854:	22f0      	movs	r2, #240	@ 0xf0
 8001856:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <ILI9341_SetRotation+0x9c>)
 800185a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800185e:	801a      	strh	r2, [r3, #0]
		break;
 8001860:	e00b      	b.n	800187a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001862:	20e8      	movs	r0, #232	@ 0xe8
 8001864:	f7ff fe0a 	bl	800147c <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <ILI9341_SetRotation+0x98>)
 800186a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800186e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <ILI9341_SetRotation+0x9c>)
 8001872:	22f0      	movs	r2, #240	@ 0xf0
 8001874:	801a      	strh	r2, [r3, #0]
		break;
 8001876:	e000      	b.n	800187a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001878:	bf00      	nop
	}
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000002 	.word	0x20000002
 8001888:	20000000 	.word	0x20000000

0800188c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 800188c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001890:	b08d      	sub	sp, #52	@ 0x34
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	6039      	str	r1, [r7, #0]
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	466b      	mov	r3, sp
 800189c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018aa:	d202      	bcs.n	80018b2 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b0:	e002      	b.n	80018b8 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80018b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2120      	movs	r1, #32
 80018bc:	483f      	ldr	r0, [pc, #252]	@ (80019bc <ILI9341_DrawColorBurst+0x130>)
 80018be:	f004 f899 	bl	80059f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018c8:	483c      	ldr	r0, [pc, #240]	@ (80019bc <ILI9341_DrawColorBurst+0x130>)
 80018ca:	f004 f893 	bl	80059f4 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 80018d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80018da:	460b      	mov	r3, r1
 80018dc:	3b01      	subs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	2300      	movs	r3, #0
 80018e2:	4688      	mov	r8, r1
 80018e4:	4699      	mov	r9, r3
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018fa:	2300      	movs	r3, #0
 80018fc:	460c      	mov	r4, r1
 80018fe:	461d      	mov	r5, r3
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	00eb      	lsls	r3, r5, #3
 800190a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800190e:	00e2      	lsls	r2, r4, #3
 8001910:	1dcb      	adds	r3, r1, #7
 8001912:	08db      	lsrs	r3, r3, #3
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	ebad 0d03 	sub.w	sp, sp, r3
 800191a:	466b      	mov	r3, sp
 800191c:	3300      	adds	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001924:	e00e      	b.n	8001944 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192a:	4413      	add	r3, r2
 800192c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001930:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001934:	3301      	adds	r3, #1
 8001936:	88fa      	ldrh	r2, [r7, #6]
 8001938:	b2d1      	uxtb	r1, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 800193e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001940:	3302      	adds	r3, #2
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001948:	429a      	cmp	r2, r3
 800194a:	d3ec      	bcc.n	8001926 <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001960:	fbb3 f2f2 	udiv	r2, r3, r2
 8001964:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001966:	fb01 f202 	mul.w	r2, r1, r2
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d010      	beq.n	8001996 <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
 8001978:	e009      	b.n	800198e <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800197a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197c:	b29a      	uxth	r2, r3
 800197e:	230a      	movs	r3, #10
 8001980:	69b9      	ldr	r1, [r7, #24]
 8001982:	480f      	ldr	r0, [pc, #60]	@ (80019c0 <ILI9341_DrawColorBurst+0x134>)
 8001984:	f004 fe53 	bl	800662e <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	3301      	adds	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
 800198e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	429a      	cmp	r2, r3
 8001994:	d3f1      	bcc.n	800197a <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	b29a      	uxth	r2, r3
 800199a:	230a      	movs	r3, #10
 800199c:	69b9      	ldr	r1, [r7, #24]
 800199e:	4808      	ldr	r0, [pc, #32]	@ (80019c0 <ILI9341_DrawColorBurst+0x134>)
 80019a0:	f004 fe45 	bl	800662e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019aa:	4804      	ldr	r0, [pc, #16]	@ (80019bc <ILI9341_DrawColorBurst+0x130>)
 80019ac:	f004 f822 	bl	80059f4 <HAL_GPIO_WritePin>
 80019b0:	46b5      	mov	sp, r6
}
 80019b2:	bf00      	nop
 80019b4:	3734      	adds	r7, #52	@ 0x34
 80019b6:	46bd      	mov	sp, r7
 80019b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019bc:	40020400 	.word	0x40020400
 80019c0:	20000e70 	.word	0x20000e70

080019c4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
	// width = 320 & height = 240
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <ILI9341_FillScreen+0x44>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <ILI9341_FillScreen+0x48>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fd83 	bl	80014e8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <ILI9341_FillScreen+0x44>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <ILI9341_FillScreen+0x48>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff46 	bl	800188c <ILI9341_DrawColorBurst>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000002 	.word	0x20000002
 8001a0c:	20000000 	.word	0x20000000

08001a10 <ILI9341_TopScreen>:

// Added
void ILI9341_TopScreen(uint16_t color){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	tft_y = 0;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <ILI9341_TopScreen+0x44>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
	ILI9341_SetAddress(0,0,LCD_WIDTH, 80 );
 8001a20:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <ILI9341_TopScreen+0x48>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	2350      	movs	r3, #80	@ 0x50
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff fd5c 	bl	80014e8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color,LCD_WIDTH*80);
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <ILI9341_TopScreen+0x48>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	461a      	mov	r2, r3
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff20 	bl	800188c <ILI9341_DrawColorBurst>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000230 	.word	0x20000230
 8001a58:	20000002 	.word	0x20000002

08001a5c <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	80fb      	strh	r3, [r7, #6]
 8001a66:	460b      	mov	r3, r1
 8001a68:	80bb      	strh	r3, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <ILI9341_DrawPixel+0xc4>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d24d      	bcs.n	8001b16 <ILI9341_DrawPixel+0xba>
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <ILI9341_DrawPixel+0xc8>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	88ba      	ldrh	r2, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d247      	bcs.n	8001b16 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	753b      	strb	r3, [r7, #20]
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	757b      	strb	r3, [r7, #21]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	121b      	asrs	r3, r3, #8
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	75bb      	strb	r3, [r7, #22]
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	743b      	strb	r3, [r7, #16]
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	747b      	strb	r3, [r7, #17]
 8001aba:	88bb      	ldrh	r3, [r7, #4]
 8001abc:	3301      	adds	r3, #1
 8001abe:	121b      	asrs	r3, r3, #8
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	74bb      	strb	r3, [r7, #18]
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	733b      	strb	r3, [r7, #12]
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001ade:	202a      	movs	r0, #42	@ 0x2a
 8001ae0:	f7ff fcb2 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2104      	movs	r1, #4
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fce0 	bl	80014b0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001af0:	202b      	movs	r0, #43	@ 0x2b
 8001af2:	f7ff fca9 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	2104      	movs	r1, #4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fcd7 	bl	80014b0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001b02:	202c      	movs	r0, #44	@ 0x2c
 8001b04:	f7ff fca0 	bl	8001448 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fcce 	bl	80014b0 <ILI9341_WriteBuffer>
 8001b14:	e000      	b.n	8001b18 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b16:	bf00      	nop
}
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000002 	.word	0x20000002
 8001b24:	20000000 	.word	0x20000000

08001b28 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4604      	mov	r4, r0
 8001b30:	4608      	mov	r0, r1
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	80fb      	strh	r3, [r7, #6]
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80bb      	strh	r3, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	807b      	strh	r3, [r7, #2]
 8001b42:	4613      	mov	r3, r2
 8001b44:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b46:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <ILI9341_DrawRectangle+0xb0>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	88fa      	ldrh	r2, [r7, #6]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d23d      	bcs.n	8001bce <ILI9341_DrawRectangle+0xa6>
 8001b52:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <ILI9341_DrawRectangle+0xb4>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	88ba      	ldrh	r2, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d237      	bcs.n	8001bce <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001b5e:	88fa      	ldrh	r2, [r7, #6]
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd8 <ILI9341_DrawRectangle+0xb0>)
 8001b66:	8812      	ldrh	r2, [r2, #0]
 8001b68:	b292      	uxth	r2, r2
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	dd05      	ble.n	8001b7a <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <ILI9341_DrawRectangle+0xb0>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001b7a:	88ba      	ldrh	r2, [r7, #4]
 8001b7c:	883b      	ldrh	r3, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a16      	ldr	r2, [pc, #88]	@ (8001bdc <ILI9341_DrawRectangle+0xb4>)
 8001b82:	8812      	ldrh	r2, [r2, #0]
 8001b84:	b292      	uxth	r2, r2
 8001b86:	4293      	cmp	r3, r2
 8001b88:	dd05      	ble.n	8001b96 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <ILI9341_DrawRectangle+0xb4>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29c      	uxth	r4, r3
 8001ba2:	88ba      	ldrh	r2, [r7, #4]
 8001ba4:	883b      	ldrh	r3, [r7, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	88b9      	ldrh	r1, [r7, #4]
 8001bb0:	88f8      	ldrh	r0, [r7, #6]
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	f7ff fc98 	bl	80014e8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001bb8:	883b      	ldrh	r3, [r7, #0]
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	8b3b      	ldrh	r3, [r7, #24]
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fe60 	bl	800188c <ILI9341_DrawColorBurst>
 8001bcc:	e000      	b.n	8001bd0 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001bce:	bf00      	nop
}
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000002 	.word	0x20000002
 8001bdc:	20000000 	.word	0x20000000

08001be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_DMA_Init+0x3c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <MX_DMA_Init+0x3c>)
 8001bf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_DMA_Init+0x3c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	200f      	movs	r0, #15
 8001c08:	f003 f98f 	bl	8004f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c0c:	200f      	movs	r0, #15
 8001c0e:	f003 f9a8 	bl	8004f62 <HAL_NVIC_EnableIRQ>

}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <find_coord>:
		{"ROW 4", {.coord = {{106.075,216.875},{138.225,216.875},{170.375,216.875},{202.525,216.875},{234.725,216.875},{266.825,216.875},{298.975,216.875}} } }

};


const Location* find_coord(const char *key){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++){
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	e01a      	b.n	8001c64 <find_coord+0x44>
		if (strcmp(dict[i].key, key) == 0)
 8001c2e:	4911      	ldr	r1, [pc, #68]	@ (8001c74 <find_coord+0x54>)
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4613      	mov	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fae5 	bl	8000210 <strcmp>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d108      	bne.n	8001c5e <find_coord+0x3e>
			return &dict[i].info;
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	3308      	adds	r3, #8
 8001c58:	4a06      	ldr	r2, [pc, #24]	@ (8001c74 <find_coord+0x54>)
 8001c5a:	4413      	add	r3, r2
 8001c5c:	e006      	b.n	8001c6c <find_coord+0x4c>
	for (int i = 0; i < 4; i++){
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3301      	adds	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	dde1      	ble.n	8001c2e <find_coord+0xe>
	}
	return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	08010da8 	.word	0x08010da8

08001c78 <drawer_lookup>:


/**/
void drawer_lookup(uint16_t rows, uint16_t drawer, char colors){
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b08b      	sub	sp, #44	@ 0x2c
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
 8001c82:	460b      	mov	r3, r1
 8001c84:	80bb      	strh	r3, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	70fb      	strb	r3, [r7, #3]
	//printf("%d\n\r", rows);
	//printf("%d\n\r", drawer);
	switch (rows){
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	f200 8214 	bhi.w	80020bc <drawer_lookup+0x444>
 8001c94:	a201      	add	r2, pc, #4	@ (adr r2, 8001c9c <drawer_lookup+0x24>)
 8001c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9a:	bf00      	nop
 8001c9c:	08001cad 	.word	0x08001cad
 8001ca0:	08001da9 	.word	0x08001da9
 8001ca4:	08001ea5 	.word	0x08001ea5
 8001ca8:	08001fb7 	.word	0x08001fb7
		case 1:
			const Location *info = find_coord("ROW 1");
 8001cac:	48a0      	ldr	r0, [pc, #640]	@ (8001f30 <drawer_lookup+0x2b8>)
 8001cae:	f7ff ffb7 	bl	8001c20 <find_coord>
 8001cb2:	60b8      	str	r0, [r7, #8]
			if (info != NULL){
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 81f9 	beq.w	80020ae <drawer_lookup+0x436>
				for (int i = 0; i < 4; i++){
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc0:	e01b      	b.n	8001cfa <drawer_lookup+0x82>
					if (i == (drawer - 1)){
 8001cc2:	88bb      	ldrh	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d113      	bne.n	8001cf4 <drawer_lookup+0x7c>
						LCD_X = info->coord[i].x;
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	4996      	ldr	r1, [pc, #600]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001cda:	e9c1 2300 	strd	r2, r3, [r1]
						LCD_Y = info->coord[i].y;
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	4992      	ldr	r1, [pc, #584]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001cee:	e9c1 2300 	strd	r2, r3, [r1]
						//printf("X: %lf\n\r", LCD_X);
						//printf("Y: %lf\n\r", LCD_Y);
						break;
 8001cf2:	e005      	b.n	8001d00 <drawer_lookup+0x88>
				for (int i = 0; i < 4; i++){
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	dde0      	ble.n	8001cc2 <drawer_lookup+0x4a>
					}
				}
				if (colors == 'B')
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	2b42      	cmp	r3, #66	@ 0x42
 8001d04:	d117      	bne.n	8001d36 <drawer_lookup+0xbe>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,BLUE);
 8001d06:	4b8b      	ldr	r3, [pc, #556]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe ff7a 	bl	8000c08 <__aeabi_d2uiz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b29c      	uxth	r4, r3
 8001d18:	4b87      	ldr	r3, [pc, #540]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7fe ff71 	bl	8000c08 <__aeabi_d2uiz>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	231f      	movs	r3, #31
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff f9f6 	bl	8001120 <ILI9341_DrawFilledCircle>
				}
				else if (colors == 'W'){
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
				}
			}
			break;
 8001d34:	e1bb      	b.n	80020ae <drawer_lookup+0x436>
				else if (colors == 'R'){
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	2b52      	cmp	r3, #82	@ 0x52
 8001d3a:	d118      	bne.n	8001d6e <drawer_lookup+0xf6>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,RED);
 8001d3c:	4b7d      	ldr	r3, [pc, #500]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe ff5f 	bl	8000c08 <__aeabi_d2uiz>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29c      	uxth	r4, r3
 8001d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe ff56 	bl	8000c08 <__aeabi_d2uiz>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	b299      	uxth	r1, r3
 8001d60:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d64:	2205      	movs	r2, #5
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff f9da 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8001d6c:	e19f      	b.n	80020ae <drawer_lookup+0x436>
				else if (colors == 'W'){
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	2b57      	cmp	r3, #87	@ 0x57
 8001d72:	f040 819c 	bne.w	80020ae <drawer_lookup+0x436>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
 8001d76:	4b6f      	ldr	r3, [pc, #444]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe ff42 	bl	8000c08 <__aeabi_d2uiz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b29c      	uxth	r4, r3
 8001d88:	4b6b      	ldr	r3, [pc, #428]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe ff39 	bl	8000c08 <__aeabi_d2uiz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b299      	uxth	r1, r3
 8001d9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d9e:	2205      	movs	r2, #5
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff f9bd 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8001da6:	e182      	b.n	80020ae <drawer_lookup+0x436>

	 	case 2:
			const Location *info_sec = find_coord("ROW 2");
 8001da8:	4864      	ldr	r0, [pc, #400]	@ (8001f3c <drawer_lookup+0x2c4>)
 8001daa:	f7ff ff39 	bl	8001c20 <find_coord>
 8001dae:	60f8      	str	r0, [r7, #12]
			if (info_sec != NULL){
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 817d 	beq.w	80020b2 <drawer_lookup+0x43a>
				for (int i = 0; i < 7; i++){
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	e01b      	b.n	8001df6 <drawer_lookup+0x17e>
					if (i == (drawer - 1)){
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	6a3a      	ldr	r2, [r7, #32]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d113      	bne.n	8001df0 <drawer_lookup+0x178>
						LCD_X = info_sec->coord[i].x;
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	4413      	add	r3, r2
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	4957      	ldr	r1, [pc, #348]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001dd6:	e9c1 2300 	strd	r2, r3, [r1]
						LCD_Y = info_sec->coord[i].y;
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	3308      	adds	r3, #8
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	4953      	ldr	r1, [pc, #332]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001dea:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 8001dee:	e005      	b.n	8001dfc <drawer_lookup+0x184>
				for (int i = 0; i < 7; i++){
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	3301      	adds	r3, #1
 8001df4:	623b      	str	r3, [r7, #32]
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	dde0      	ble.n	8001dbe <drawer_lookup+0x146>
					}
				}
				if (colors == 'B')
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	2b42      	cmp	r3, #66	@ 0x42
 8001e00:	d117      	bne.n	8001e32 <drawer_lookup+0x1ba>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,BLUE);
 8001e02:	4b4c      	ldr	r3, [pc, #304]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fefc 	bl	8000c08 <__aeabi_d2uiz>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29c      	uxth	r4, r3
 8001e14:	4b48      	ldr	r3, [pc, #288]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fef3 	bl	8000c08 <__aeabi_d2uiz>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b299      	uxth	r1, r3
 8001e26:	231f      	movs	r3, #31
 8001e28:	2205      	movs	r2, #5
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7ff f978 	bl	8001120 <ILI9341_DrawFilledCircle>
				}
				else if (colors == 'W'){
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
				}
			}
			break;
 8001e30:	e13f      	b.n	80020b2 <drawer_lookup+0x43a>
				else if (colors == 'R'){
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	2b52      	cmp	r3, #82	@ 0x52
 8001e36:	d118      	bne.n	8001e6a <drawer_lookup+0x1f2>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,RED);
 8001e38:	4b3e      	ldr	r3, [pc, #248]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fee1 	bl	8000c08 <__aeabi_d2uiz>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b29c      	uxth	r4, r3
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fed8 	bl	8000c08 <__aeabi_d2uiz>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	b299      	uxth	r1, r3
 8001e5c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e60:	2205      	movs	r2, #5
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff f95c 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8001e68:	e123      	b.n	80020b2 <drawer_lookup+0x43a>
				else if (colors == 'W'){
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	2b57      	cmp	r3, #87	@ 0x57
 8001e6e:	f040 8120 	bne.w	80020b2 <drawer_lookup+0x43a>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
 8001e72:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fec4 	bl	8000c08 <__aeabi_d2uiz>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b29c      	uxth	r4, r3
 8001e84:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe febb 	bl	8000c08 <__aeabi_d2uiz>
 8001e92:	4603      	mov	r3, r0
 8001e94:	b299      	uxth	r1, r3
 8001e96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e9a:	2205      	movs	r2, #5
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7ff f93f 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8001ea2:	e106      	b.n	80020b2 <drawer_lookup+0x43a>

		case 3:
			const Location *info_th = find_coord("ROW 3");
 8001ea4:	4826      	ldr	r0, [pc, #152]	@ (8001f40 <drawer_lookup+0x2c8>)
 8001ea6:	f7ff febb 	bl	8001c20 <find_coord>
 8001eaa:	6138      	str	r0, [r7, #16]
			if (info_th != NULL){
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8101 	beq.w	80020b6 <drawer_lookup+0x43e>
				for (int i = 0; i < 7; i++){
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	e01b      	b.n	8001ef2 <drawer_lookup+0x27a>
					if (i == (drawer - 1)){
 8001eba:	88bb      	ldrh	r3, [r7, #4]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d113      	bne.n	8001eec <drawer_lookup+0x274>
						LCD_X = info_th->coord[i].x;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	4413      	add	r3, r2
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	4918      	ldr	r1, [pc, #96]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001ed2:	e9c1 2300 	strd	r2, r3, [r1]
						LCD_Y = info_th->coord[i].y;
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4413      	add	r3, r2
 8001ede:	3308      	adds	r3, #8
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	4914      	ldr	r1, [pc, #80]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001ee6:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 8001eea:	e005      	b.n	8001ef8 <drawer_lookup+0x280>
				for (int i = 0; i < 7; i++){
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	dde0      	ble.n	8001eba <drawer_lookup+0x242>
					}
				}
				if (colors == 'B')
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b42      	cmp	r3, #66	@ 0x42
 8001efc:	d122      	bne.n	8001f44 <drawer_lookup+0x2cc>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,BLUE);
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <drawer_lookup+0x2bc>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fe7e 	bl	8000c08 <__aeabi_d2uiz>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	b29c      	uxth	r4, r3
 8001f10:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <drawer_lookup+0x2c0>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f7fe fe75 	bl	8000c08 <__aeabi_d2uiz>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	b299      	uxth	r1, r3
 8001f22:	231f      	movs	r3, #31
 8001f24:	2205      	movs	r2, #5
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff f8fa 	bl	8001120 <ILI9341_DrawFilledCircle>
				}
				else if (colors == 'W'){
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
				}
			}
			break;
 8001f2c:	e0c3      	b.n	80020b6 <drawer_lookup+0x43e>
 8001f2e:	bf00      	nop
 8001f30:	08010400 	.word	0x08010400
 8001f34:	20000220 	.word	0x20000220
 8001f38:	20000228 	.word	0x20000228
 8001f3c:	08010408 	.word	0x08010408
 8001f40:	08010410 	.word	0x08010410
				else if (colors == 'R'){
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	2b52      	cmp	r3, #82	@ 0x52
 8001f48:	d118      	bne.n	8001f7c <drawer_lookup+0x304>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,RED);
 8001f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80020c4 <drawer_lookup+0x44c>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fe58 	bl	8000c08 <__aeabi_d2uiz>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b29c      	uxth	r4, r3
 8001f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80020c8 <drawer_lookup+0x450>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fe4f 	bl	8000c08 <__aeabi_d2uiz>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	b299      	uxth	r1, r3
 8001f6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f72:	2205      	movs	r2, #5
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff f8d3 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8001f7a:	e09c      	b.n	80020b6 <drawer_lookup+0x43e>
				else if (colors == 'W'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b57      	cmp	r3, #87	@ 0x57
 8001f80:	f040 8099 	bne.w	80020b6 <drawer_lookup+0x43e>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
 8001f84:	4b4f      	ldr	r3, [pc, #316]	@ (80020c4 <drawer_lookup+0x44c>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fe3b 	bl	8000c08 <__aeabi_d2uiz>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29c      	uxth	r4, r3
 8001f96:	4b4c      	ldr	r3, [pc, #304]	@ (80020c8 <drawer_lookup+0x450>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7fe fe32 	bl	8000c08 <__aeabi_d2uiz>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	b299      	uxth	r1, r3
 8001fa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fac:	2205      	movs	r2, #5
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7ff f8b6 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8001fb4:	e07f      	b.n	80020b6 <drawer_lookup+0x43e>

		case 4:
			const Location *info_f = find_coord("ROW 4");
 8001fb6:	4845      	ldr	r0, [pc, #276]	@ (80020cc <drawer_lookup+0x454>)
 8001fb8:	f7ff fe32 	bl	8001c20 <find_coord>
 8001fbc:	6178      	str	r0, [r7, #20]
			if (info_f != NULL){
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d07a      	beq.n	80020ba <drawer_lookup+0x442>
				for (int i = 0; i < 7; i++){
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	e01b      	b.n	8002002 <drawer_lookup+0x38a>
					if (i == (drawer - 1)){
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d113      	bne.n	8001ffc <drawer_lookup+0x384>
						LCD_X = info_f->coord[i].x;
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	4938      	ldr	r1, [pc, #224]	@ (80020c4 <drawer_lookup+0x44c>)
 8001fe2:	e9c1 2300 	strd	r2, r3, [r1]
						LCD_Y = info_f->coord[i].y;
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	3308      	adds	r3, #8
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	4934      	ldr	r1, [pc, #208]	@ (80020c8 <drawer_lookup+0x450>)
 8001ff6:	e9c1 2300 	strd	r2, r3, [r1]
						break;
 8001ffa:	e005      	b.n	8002008 <drawer_lookup+0x390>
				for (int i = 0; i < 7; i++){
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	3301      	adds	r3, #1
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b06      	cmp	r3, #6
 8002006:	dde0      	ble.n	8001fca <drawer_lookup+0x352>
					}
				}
				if (colors == 'B')
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	2b42      	cmp	r3, #66	@ 0x42
 800200c:	d117      	bne.n	800203e <drawer_lookup+0x3c6>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,BLUE);
 800200e:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <drawer_lookup+0x44c>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	f7fe fdf6 	bl	8000c08 <__aeabi_d2uiz>
 800201c:	4603      	mov	r3, r0
 800201e:	b29c      	uxth	r4, r3
 8002020:	4b29      	ldr	r3, [pc, #164]	@ (80020c8 <drawer_lookup+0x450>)
 8002022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f7fe fded 	bl	8000c08 <__aeabi_d2uiz>
 800202e:	4603      	mov	r3, r0
 8002030:	b299      	uxth	r1, r3
 8002032:	231f      	movs	r3, #31
 8002034:	2205      	movs	r2, #5
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff f872 	bl	8001120 <ILI9341_DrawFilledCircle>
				}
				else if (colors == 'W'){
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
				}
			}
			break;
 800203c:	e03d      	b.n	80020ba <drawer_lookup+0x442>
				else if (colors == 'R'){
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	2b52      	cmp	r3, #82	@ 0x52
 8002042:	d118      	bne.n	8002076 <drawer_lookup+0x3fe>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,RED);
 8002044:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <drawer_lookup+0x44c>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fddb 	bl	8000c08 <__aeabi_d2uiz>
 8002052:	4603      	mov	r3, r0
 8002054:	b29c      	uxth	r4, r3
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <drawer_lookup+0x450>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fdd2 	bl	8000c08 <__aeabi_d2uiz>
 8002064:	4603      	mov	r3, r0
 8002066:	b299      	uxth	r1, r3
 8002068:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800206c:	2205      	movs	r2, #5
 800206e:	4620      	mov	r0, r4
 8002070:	f7ff f856 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 8002074:	e021      	b.n	80020ba <drawer_lookup+0x442>
				else if (colors == 'W'){
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	2b57      	cmp	r3, #87	@ 0x57
 800207a:	d11e      	bne.n	80020ba <drawer_lookup+0x442>
					ILI9341_DrawFilledCircle(LCD_X, LCD_Y,5,WHITE);
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <drawer_lookup+0x44c>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fdbf 	bl	8000c08 <__aeabi_d2uiz>
 800208a:	4603      	mov	r3, r0
 800208c:	b29c      	uxth	r4, r3
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <drawer_lookup+0x450>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fdb6 	bl	8000c08 <__aeabi_d2uiz>
 800209c:	4603      	mov	r3, r0
 800209e:	b299      	uxth	r1, r3
 80020a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020a4:	2205      	movs	r2, #5
 80020a6:	4620      	mov	r0, r4
 80020a8:	f7ff f83a 	bl	8001120 <ILI9341_DrawFilledCircle>
			break;
 80020ac:	e005      	b.n	80020ba <drawer_lookup+0x442>
			break;
 80020ae:	bf00      	nop
 80020b0:	e004      	b.n	80020bc <drawer_lookup+0x444>
			break;
 80020b2:	bf00      	nop
 80020b4:	e002      	b.n	80020bc <drawer_lookup+0x444>
			break;
 80020b6:	bf00      	nop
 80020b8:	e000      	b.n	80020bc <drawer_lookup+0x444>
			break;
 80020ba:	bf00      	nop
			/**/
	}
}
 80020bc:	bf00      	nop
 80020be:	372c      	adds	r7, #44	@ 0x2c
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	20000220 	.word	0x20000220
 80020c8:	20000228 	.word	0x20000228
 80020cc:	08010418 	.word	0x08010418

080020d0 <getTare>:
char tft_row[50];
char tft_drawer[50];
char tft_knownHX711[50];
char tft_weights[50];

uint32_t getTare(){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b090      	sub	sp, #64	@ 0x40
 80020d4:	af02      	add	r7, sp, #8
	char tft_weight_temp[50];

	printf("Remove all weight from the drawer(5 seconds)\n\r");
 80020d6:	485c      	ldr	r0, [pc, #368]	@ (8002248 <getTare+0x178>)
 80020d8:	f00a fc6c 	bl	800c9b4 <iprintf>
	HAL_Delay(1000);
 80020dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e0:	f002 fdea 	bl	8004cb8 <HAL_Delay>
	printf("Gathering initial Tare of Load Cell...\n\r");
 80020e4:	4859      	ldr	r0, [pc, #356]	@ (800224c <getTare+0x17c>)
 80020e6:	f00a fc65 	bl	800c9b4 <iprintf>
	int weight_temp = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34

	//TFT
	ILI9341_DrawText("Remove all weight from the drawer", FONT4, 0, tft_y, WHITE, BLACK);
 80020ee:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <getTare+0x180>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2200      	movs	r2, #0
 80020f6:	9201      	str	r2, [sp, #4]
 80020f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020fc:	9200      	str	r2, [sp, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	4954      	ldr	r1, [pc, #336]	@ (8002254 <getTare+0x184>)
 8002102:	4855      	ldr	r0, [pc, #340]	@ (8002258 <getTare+0x188>)
 8002104:	f7ff f90c 	bl	8001320 <ILI9341_DrawText>
	tft_y +=20;
 8002108:	4b51      	ldr	r3, [pc, #324]	@ (8002250 <getTare+0x180>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3314      	adds	r3, #20
 800210e:	4a50      	ldr	r2, [pc, #320]	@ (8002250 <getTare+0x180>)
 8002110:	6013      	str	r3, [r2, #0]
	ILI9341_DrawText("(5 seconds)", FONT4, 0, tft_y, WHITE, BLACK);
 8002112:	4b4f      	ldr	r3, [pc, #316]	@ (8002250 <getTare+0x180>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	2200      	movs	r2, #0
 800211a:	9201      	str	r2, [sp, #4]
 800211c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002120:	9200      	str	r2, [sp, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	494b      	ldr	r1, [pc, #300]	@ (8002254 <getTare+0x184>)
 8002126:	484d      	ldr	r0, [pc, #308]	@ (800225c <getTare+0x18c>)
 8002128:	f7ff f8fa 	bl	8001320 <ILI9341_DrawText>
	tft_y +=20;
 800212c:	4b48      	ldr	r3, [pc, #288]	@ (8002250 <getTare+0x180>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3314      	adds	r3, #20
 8002132:	4a47      	ldr	r2, [pc, #284]	@ (8002250 <getTare+0x180>)
 8002134:	6013      	str	r3, [r2, #0]
	HAL_Delay(5000);
 8002136:	f241 3088 	movw	r0, #5000	@ 0x1388
 800213a:	f002 fdbd 	bl	8004cb8 <HAL_Delay>
	ILI9341_DrawText("Gathering initial Tare of Load Cell...", FONT4, 0, tft_y, WHITE, BLACK);
 800213e:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <getTare+0x180>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	2200      	movs	r2, #0
 8002146:	9201      	str	r2, [sp, #4]
 8002148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800214c:	9200      	str	r2, [sp, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	4940      	ldr	r1, [pc, #256]	@ (8002254 <getTare+0x184>)
 8002152:	4843      	ldr	r0, [pc, #268]	@ (8002260 <getTare+0x190>)
 8002154:	f7ff f8e4 	bl	8001320 <ILI9341_DrawText>
	tft_y +=20;
 8002158:	4b3d      	ldr	r3, [pc, #244]	@ (8002250 <getTare+0x180>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3314      	adds	r3, #20
 800215e:	4a3c      	ldr	r2, [pc, #240]	@ (8002250 <getTare+0x180>)
 8002160:	6013      	str	r3, [r2, #0]
	HAL_Delay(3500);
 8002162:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8002166:	f002 fda7 	bl	8004cb8 <HAL_Delay>
	ILI9341_TopScreen(BLACK);
 800216a:	2000      	movs	r0, #0
 800216c:	f7ff fc50 	bl	8001a10 <ILI9341_TopScreen>

	for(uint16_t i = 1; i <= 4; i++){
 8002170:	2301      	movs	r3, #1
 8002172:	867b      	strh	r3, [r7, #50]	@ 0x32
 8002174:	e037      	b.n	80021e6 <getTare+0x116>
			weight_temp = (int)weighRaw();
 8002176:	f002 f81a 	bl	80041ae <weighRaw>
 800217a:	6378      	str	r0, [r7, #52]	@ 0x34
			printf("Tare attempt %d: %d\n\r", i, weight_temp);
 800217c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800217e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002180:	4619      	mov	r1, r3
 8002182:	4838      	ldr	r0, [pc, #224]	@ (8002264 <getTare+0x194>)
 8002184:	f00a fc16 	bl	800c9b4 <iprintf>
			HAL_Delay(10);
 8002188:	200a      	movs	r0, #10
 800218a:	f002 fd95 	bl	8004cb8 <HAL_Delay>

			//TFT
			ILI9341_DrawText("Tare attempt ", FONT4, 0, tft_y, WHITE, BLACK);
 800218e:	4b30      	ldr	r3, [pc, #192]	@ (8002250 <getTare+0x180>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	2200      	movs	r2, #0
 8002196:	9201      	str	r2, [sp, #4]
 8002198:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800219c:	9200      	str	r2, [sp, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	492c      	ldr	r1, [pc, #176]	@ (8002254 <getTare+0x184>)
 80021a2:	4831      	ldr	r0, [pc, #196]	@ (8002268 <getTare+0x198>)
 80021a4:	f7ff f8bc 	bl	8001320 <ILI9341_DrawText>
			snprintf(tft_weight_temp, sizeof(tft_weight_temp), "%d", weight_temp);
 80021a8:	4638      	mov	r0, r7
 80021aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ac:	4a2f      	ldr	r2, [pc, #188]	@ (800226c <getTare+0x19c>)
 80021ae:	2132      	movs	r1, #50	@ 0x32
 80021b0:	f00a fcc6 	bl	800cb40 <sniprintf>
			ILI9341_DrawText(tft_weight_temp, FONT4, 120, tft_y, WHITE, BLACK);
 80021b4:	4b26      	ldr	r3, [pc, #152]	@ (8002250 <getTare+0x180>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4638      	mov	r0, r7
 80021bc:	2200      	movs	r2, #0
 80021be:	9201      	str	r2, [sp, #4]
 80021c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	2278      	movs	r2, #120	@ 0x78
 80021c8:	4922      	ldr	r1, [pc, #136]	@ (8002254 <getTare+0x184>)
 80021ca:	f7ff f8a9 	bl	8001320 <ILI9341_DrawText>
			tft_y +=20;
 80021ce:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <getTare+0x180>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3314      	adds	r3, #20
 80021d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002250 <getTare+0x180>)
 80021d6:	6013      	str	r3, [r2, #0]
			HAL_Delay(1000);
 80021d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021dc:	f002 fd6c 	bl	8004cb8 <HAL_Delay>
	for(uint16_t i = 1; i <= 4; i++){
 80021e0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80021e2:	3301      	adds	r3, #1
 80021e4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80021e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d9c4      	bls.n	8002176 <getTare+0xa6>

		}
	printf("Tare Set: %d\n\r", weight_temp);
 80021ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021ee:	4820      	ldr	r0, [pc, #128]	@ (8002270 <getTare+0x1a0>)
 80021f0:	f00a fbe0 	bl	800c9b4 <iprintf>
	//TFT
	HAL_Delay(1000);
 80021f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021f8:	f002 fd5e 	bl	8004cb8 <HAL_Delay>
	ILI9341_TopScreen(BLACK);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff fc07 	bl	8001a10 <ILI9341_TopScreen>
	ILI9341_DrawText("Tare Set: ", FONT4, 0, tft_y, WHITE, BLACK);
 8002202:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <getTare+0x180>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	2200      	movs	r2, #0
 800220a:	9201      	str	r2, [sp, #4]
 800220c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002210:	9200      	str	r2, [sp, #0]
 8002212:	2200      	movs	r2, #0
 8002214:	490f      	ldr	r1, [pc, #60]	@ (8002254 <getTare+0x184>)
 8002216:	4817      	ldr	r0, [pc, #92]	@ (8002274 <getTare+0x1a4>)
 8002218:	f7ff f882 	bl	8001320 <ILI9341_DrawText>
	ILI9341_DrawText(tft_weight_temp, FONT4, 90, tft_y, WHITE, BLACK);
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <getTare+0x180>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	4638      	mov	r0, r7
 8002224:	2200      	movs	r2, #0
 8002226:	9201      	str	r2, [sp, #4]
 8002228:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800222c:	9200      	str	r2, [sp, #0]
 800222e:	225a      	movs	r2, #90	@ 0x5a
 8002230:	4908      	ldr	r1, [pc, #32]	@ (8002254 <getTare+0x184>)
 8002232:	f7ff f875 	bl	8001320 <ILI9341_DrawText>
	HAL_Delay(2000);
 8002236:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800223a:	f002 fd3d 	bl	8004cb8 <HAL_Delay>
	return weight_temp;
 800223e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002240:	4618      	mov	r0, r3
 8002242:	3738      	adds	r7, #56	@ 0x38
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	08010420 	.word	0x08010420
 800224c:	08010450 	.word	0x08010450
 8002250:	20000230 	.word	0x20000230
 8002254:	08010f88 	.word	0x08010f88
 8002258:	0801047c 	.word	0x0801047c
 800225c:	080104a0 	.word	0x080104a0
 8002260:	080104ac 	.word	0x080104ac
 8002264:	080104d4 	.word	0x080104d4
 8002268:	080104ec 	.word	0x080104ec
 800226c:	080104fc 	.word	0x080104fc
 8002270:	08010500 	.word	0x08010500
 8002274:	08010510 	.word	0x08010510

08002278 <Calibrate>:

void Calibrate(){
 8002278:	b580      	push	{r7, lr}
 800227a:	b094      	sub	sp, #80	@ 0x50
 800227c:	af02      	add	r7, sp, #8
	printf("Beginning with Row: 1 Drawer: 1\n\r");
 800227e:	482e      	ldr	r0, [pc, #184]	@ (8002338 <Calibrate+0xc0>)
 8002280:	f00a fb98 	bl	800c9b4 <iprintf>
// TFT
	ILI9341_DrawText("Beginning with Row: 1 Drawer: 1", FONT4, 0, tft_y, WHITE, BLACK);
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <Calibrate+0xc4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	2200      	movs	r2, #0
 800228c:	9201      	str	r2, [sp, #4]
 800228e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	492a      	ldr	r1, [pc, #168]	@ (8002340 <Calibrate+0xc8>)
 8002298:	482a      	ldr	r0, [pc, #168]	@ (8002344 <Calibrate+0xcc>)
 800229a:	f7ff f841 	bl	8001320 <ILI9341_DrawText>
	tft_y +=20;
 800229e:	4b27      	ldr	r3, [pc, #156]	@ (800233c <Calibrate+0xc4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3314      	adds	r3, #20
 80022a4:	4a25      	ldr	r2, [pc, #148]	@ (800233c <Calibrate+0xc4>)
 80022a6:	6013      	str	r3, [r2, #0]

	uint32_t tare = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	633b      	str	r3, [r7, #48]	@ 0x30
	int knownHX711 = 1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t thresh = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	FRESULT res = f_unlink("drwConf.txt"); //deletes the original file
 80022b4:	4824      	ldr	r0, [pc, #144]	@ (8002348 <Calibrate+0xd0>)
 80022b6:	f009 f992 	bl	800b5de <f_unlink>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(res == FR_OK){
 80022c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <Calibrate+0x56>
		printf("Removed old 'drwConf.txt'\n\r");
 80022c8:	4820      	ldr	r0, [pc, #128]	@ (800234c <Calibrate+0xd4>)
 80022ca:	f00a fb73 	bl	800c9b4 <iprintf>
	}
	f_unlink("temp_drawerConfig.txt"); //deletes the original file
 80022ce:	4820      	ldr	r0, [pc, #128]	@ (8002350 <Calibrate+0xd8>)
 80022d0:	f009 f985 	bl	800b5de <f_unlink>


	for(int i = 1; i <= 1; i++){
 80022d4:	2301      	movs	r3, #1
 80022d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80022d8:	e358      	b.n	800298c <Calibrate+0x714>

		uint16_t A_mast = MuxCombos[i-1].A;
 80022da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	491d      	ldr	r1, [pc, #116]	@ (8002354 <Calibrate+0xdc>)
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	3302      	adds	r3, #2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t B_mast = MuxCombos[i-1].B;
 80022ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	4918      	ldr	r1, [pc, #96]	@ (8002354 <Calibrate+0xdc>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	3301      	adds	r3, #1
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint16_t C_mast = MuxCombos[i-1].C;
 8002302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	4913      	ldr	r1, [pc, #76]	@ (8002354 <Calibrate+0xdc>)
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	440b      	add	r3, r1
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	843b      	strh	r3, [r7, #32]

		muxSET(A_mast, B_mast, C_mast, 1);
 8002314:	8c3a      	ldrh	r2, [r7, #32]
 8002316:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8002318:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800231a:	2301      	movs	r3, #1
 800231c:	f001 fdb0 	bl	8003e80 <muxSET>

		setRelay(i);
 8002320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002322:	b2db      	uxtb	r3, r3
 8002324:	4618      	mov	r0, r3
 8002326:	f001 fdf3 	bl	8003f10 <setRelay>

		if(i == 1){
 800232a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800232c:	2b01      	cmp	r3, #1
 800232e:	f040 81a5 	bne.w	800267c <Calibrate+0x404>
			for(int j = 1; j <= 4; j++){
 8002332:	2301      	movs	r3, #1
 8002334:	643b      	str	r3, [r7, #64]	@ 0x40
 8002336:	e19c      	b.n	8002672 <Calibrate+0x3fa>
 8002338:	0801051c 	.word	0x0801051c
 800233c:	20000230 	.word	0x20000230
 8002340:	08010f88 	.word	0x08010f88
 8002344:	08010540 	.word	0x08010540
 8002348:	08010560 	.word	0x08010560
 800234c:	0801056c 	.word	0x0801056c
 8002350:	08010588 	.word	0x08010588
 8002354:	080120cc 	.word	0x080120cc

				uint16_t A_slave = MuxCombos[j-1].A;
 8002358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	4987      	ldr	r1, [pc, #540]	@ (800257c <Calibrate+0x304>)
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	440b      	add	r3, r1
 8002366:	3302      	adds	r3, #2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	81fb      	strh	r3, [r7, #14]
				uint16_t B_slave = MuxCombos[j-1].B;
 800236c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800236e:	1e5a      	subs	r2, r3, #1
 8002370:	4982      	ldr	r1, [pc, #520]	@ (800257c <Calibrate+0x304>)
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	440b      	add	r3, r1
 800237a:	3301      	adds	r3, #1
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	81bb      	strh	r3, [r7, #12]
				uint16_t C_slave = MuxCombos[j-1].C;
 8002380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002382:	1e5a      	subs	r2, r3, #1
 8002384:	497d      	ldr	r1, [pc, #500]	@ (800257c <Calibrate+0x304>)
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	440b      	add	r3, r1
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	817b      	strh	r3, [r7, #10]

				muxSET(A_slave, B_slave, C_slave, 0);
 8002392:	897a      	ldrh	r2, [r7, #10]
 8002394:	89b9      	ldrh	r1, [r7, #12]
 8002396:	89f8      	ldrh	r0, [r7, #14]
 8002398:	2300      	movs	r3, #0
 800239a:	f001 fd71 	bl	8003e80 <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, j);
 800239e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80023a2:	4877      	ldr	r0, [pc, #476]	@ (8002580 <Calibrate+0x308>)
 80023a4:	f00a fb06 	bl	800c9b4 <iprintf>

				//TFT
				snprintf(tft_row, sizeof(tft_row), "%d", i);
 80023a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023aa:	4a76      	ldr	r2, [pc, #472]	@ (8002584 <Calibrate+0x30c>)
 80023ac:	2132      	movs	r1, #50	@ 0x32
 80023ae:	4876      	ldr	r0, [pc, #472]	@ (8002588 <Calibrate+0x310>)
 80023b0:	f00a fbc6 	bl	800cb40 <sniprintf>
				ILI9341_DrawText("ROW ", FONT4, 0, tft_y, WHITE, BLACK);
 80023b4:	4b75      	ldr	r3, [pc, #468]	@ (800258c <Calibrate+0x314>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2200      	movs	r2, #0
 80023bc:	9201      	str	r2, [sp, #4]
 80023be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023c2:	9200      	str	r2, [sp, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	4972      	ldr	r1, [pc, #456]	@ (8002590 <Calibrate+0x318>)
 80023c8:	4872      	ldr	r0, [pc, #456]	@ (8002594 <Calibrate+0x31c>)
 80023ca:	f7fe ffa9 	bl	8001320 <ILI9341_DrawText>
				ILI9341_DrawText(tft_row, FONT4, 55, tft_y, WHITE, BLACK);
 80023ce:	4b6f      	ldr	r3, [pc, #444]	@ (800258c <Calibrate+0x314>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2200      	movs	r2, #0
 80023d6:	9201      	str	r2, [sp, #4]
 80023d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023dc:	9200      	str	r2, [sp, #0]
 80023de:	2237      	movs	r2, #55	@ 0x37
 80023e0:	496b      	ldr	r1, [pc, #428]	@ (8002590 <Calibrate+0x318>)
 80023e2:	4869      	ldr	r0, [pc, #420]	@ (8002588 <Calibrate+0x310>)
 80023e4:	f7fe ff9c 	bl	8001320 <ILI9341_DrawText>
				snprintf(tft_drawer, sizeof(tft_drawer), "%d", j);
 80023e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ea:	4a66      	ldr	r2, [pc, #408]	@ (8002584 <Calibrate+0x30c>)
 80023ec:	2132      	movs	r1, #50	@ 0x32
 80023ee:	486a      	ldr	r0, [pc, #424]	@ (8002598 <Calibrate+0x320>)
 80023f0:	f00a fba6 	bl	800cb40 <sniprintf>
				ILI9341_DrawText(" | DRAWER ",FONT4, 60, tft_y, WHITE, BLACK);
 80023f4:	4b65      	ldr	r3, [pc, #404]	@ (800258c <Calibrate+0x314>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2200      	movs	r2, #0
 80023fc:	9201      	str	r2, [sp, #4]
 80023fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002402:	9200      	str	r2, [sp, #0]
 8002404:	223c      	movs	r2, #60	@ 0x3c
 8002406:	4962      	ldr	r1, [pc, #392]	@ (8002590 <Calibrate+0x318>)
 8002408:	4864      	ldr	r0, [pc, #400]	@ (800259c <Calibrate+0x324>)
 800240a:	f7fe ff89 	bl	8001320 <ILI9341_DrawText>
				ILI9341_DrawText(tft_drawer, FONT4, 175, tft_y, WHITE, BLACK);
 800240e:	4b5f      	ldr	r3, [pc, #380]	@ (800258c <Calibrate+0x314>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	2200      	movs	r2, #0
 8002416:	9201      	str	r2, [sp, #4]
 8002418:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800241c:	9200      	str	r2, [sp, #0]
 800241e:	22af      	movs	r2, #175	@ 0xaf
 8002420:	495b      	ldr	r1, [pc, #364]	@ (8002590 <Calibrate+0x318>)
 8002422:	485d      	ldr	r0, [pc, #372]	@ (8002598 <Calibrate+0x320>)
 8002424:	f7fe ff7c 	bl	8001320 <ILI9341_DrawText>
				tft_y +=20;
 8002428:	4b58      	ldr	r3, [pc, #352]	@ (800258c <Calibrate+0x314>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3314      	adds	r3, #20
 800242e:	4a57      	ldr	r2, [pc, #348]	@ (800258c <Calibrate+0x314>)
 8002430:	6013      	str	r3, [r2, #0]
				HAL_Delay(2000);
 8002432:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002436:	f002 fc3f 	bl	8004cb8 <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 800243a:	2000      	movs	r0, #0
 800243c:	f7ff fae8 	bl	8001a10 <ILI9341_TopScreen>

				tare = getTare();
 8002440:	f7ff fe46 	bl	80020d0 <getTare>
 8002444:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button once when ready to calibrate\n\r");
 8002446:	4856      	ldr	r0, [pc, #344]	@ (80025a0 <Calibrate+0x328>)
 8002448:	f00a fab4 	bl	800c9b4 <iprintf>

				//TFT
				ILI9341_TopScreen(BLACK);
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff fadf 	bl	8001a10 <ILI9341_TopScreen>
				ILI9341_DrawText("Place the calibration weight", FONT4, 0, tft_y, WHITE, BLACK);
 8002452:	4b4e      	ldr	r3, [pc, #312]	@ (800258c <Calibrate+0x314>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	2200      	movs	r2, #0
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002460:	9200      	str	r2, [sp, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	494a      	ldr	r1, [pc, #296]	@ (8002590 <Calibrate+0x318>)
 8002466:	484f      	ldr	r0, [pc, #316]	@ (80025a4 <Calibrate+0x32c>)
 8002468:	f7fe ff5a 	bl	8001320 <ILI9341_DrawText>
				tft_y +=20;
 800246c:	4b47      	ldr	r3, [pc, #284]	@ (800258c <Calibrate+0x314>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3314      	adds	r3, #20
 8002472:	4a46      	ldr	r2, [pc, #280]	@ (800258c <Calibrate+0x314>)
 8002474:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("on the drawer", FONT4, 0, tft_y, WHITE, BLACK);
 8002476:	4b45      	ldr	r3, [pc, #276]	@ (800258c <Calibrate+0x314>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	2200      	movs	r2, #0
 800247e:	9201      	str	r2, [sp, #4]
 8002480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002484:	9200      	str	r2, [sp, #0]
 8002486:	2200      	movs	r2, #0
 8002488:	4941      	ldr	r1, [pc, #260]	@ (8002590 <Calibrate+0x318>)
 800248a:	4847      	ldr	r0, [pc, #284]	@ (80025a8 <Calibrate+0x330>)
 800248c:	f7fe ff48 	bl	8001320 <ILI9341_DrawText>
				tft_y +=20;
 8002490:	4b3e      	ldr	r3, [pc, #248]	@ (800258c <Calibrate+0x314>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3314      	adds	r3, #20
 8002496:	4a3d      	ldr	r2, [pc, #244]	@ (800258c <Calibrate+0x314>)
 8002498:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("Press the button once ", FONT4, 0, tft_y, WHITE, BLACK);
 800249a:	4b3c      	ldr	r3, [pc, #240]	@ (800258c <Calibrate+0x314>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	9201      	str	r2, [sp, #4]
 80024a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024a8:	9200      	str	r2, [sp, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	4938      	ldr	r1, [pc, #224]	@ (8002590 <Calibrate+0x318>)
 80024ae:	483f      	ldr	r0, [pc, #252]	@ (80025ac <Calibrate+0x334>)
 80024b0:	f7fe ff36 	bl	8001320 <ILI9341_DrawText>
				tft_y +=20;
 80024b4:	4b35      	ldr	r3, [pc, #212]	@ (800258c <Calibrate+0x314>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3314      	adds	r3, #20
 80024ba:	4a34      	ldr	r2, [pc, #208]	@ (800258c <Calibrate+0x314>)
 80024bc:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("when ready to calibrate ", FONT4, 0, tft_y, WHITE, BLACK);
 80024be:	4b33      	ldr	r3, [pc, #204]	@ (800258c <Calibrate+0x314>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2200      	movs	r2, #0
 80024c6:	9201      	str	r2, [sp, #4]
 80024c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024cc:	9200      	str	r2, [sp, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	492f      	ldr	r1, [pc, #188]	@ (8002590 <Calibrate+0x318>)
 80024d2:	4837      	ldr	r0, [pc, #220]	@ (80025b0 <Calibrate+0x338>)
 80024d4:	f7fe ff24 	bl	8001320 <ILI9341_DrawText>
				drawer_lookup(i,j,'B');
 80024d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024da:	b29b      	uxth	r3, r3
 80024dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024de:	b291      	uxth	r1, r2
 80024e0:	2242      	movs	r2, #66	@ 0x42
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fbc8 	bl	8001c78 <drawer_lookup>
				 row_num = i;
 80024e8:	4a32      	ldr	r2, [pc, #200]	@ (80025b4 <Calibrate+0x33c>)
 80024ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ec:	6013      	str	r3, [r2, #0]
				 drawer_num = j;
 80024ee:	4a32      	ldr	r2, [pc, #200]	@ (80025b8 <Calibrate+0x340>)
 80024f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f2:	6013      	str	r3, [r2, #0]

				 //double press confirmation here
				button_output(num);
 80024f4:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <Calibrate+0x344>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f001 fc09 	bl	8003d10 <button_output>

				knownHX711 = weighRawTare(tare);
 80024fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002500:	f001 fe8f 	bl	8004222 <weighRawTare>
 8002504:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8002506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002508:	482d      	ldr	r0, [pc, #180]	@ (80025c0 <Calibrate+0x348>)
 800250a:	f00a fa53 	bl	800c9b4 <iprintf>

				//TFT
				HAL_Delay(2000);
 800250e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002512:	f002 fbd1 	bl	8004cb8 <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 8002516:	2000      	movs	r0, #0
 8002518:	f7ff fa7a 	bl	8001a10 <ILI9341_TopScreen>
				ILI9341_DrawText("Read weight: ",FONT4, 0, tft_y, WHITE, BLACK);
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <Calibrate+0x314>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	2200      	movs	r2, #0
 8002524:	9201      	str	r2, [sp, #4]
 8002526:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800252a:	9200      	str	r2, [sp, #0]
 800252c:	2200      	movs	r2, #0
 800252e:	4918      	ldr	r1, [pc, #96]	@ (8002590 <Calibrate+0x318>)
 8002530:	4824      	ldr	r0, [pc, #144]	@ (80025c4 <Calibrate+0x34c>)
 8002532:	f7fe fef5 	bl	8001320 <ILI9341_DrawText>
				snprintf(tft_knownHX711, sizeof(tft_knownHX711), "%d", knownHX711);
 8002536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002538:	4a12      	ldr	r2, [pc, #72]	@ (8002584 <Calibrate+0x30c>)
 800253a:	2132      	movs	r1, #50	@ 0x32
 800253c:	4822      	ldr	r0, [pc, #136]	@ (80025c8 <Calibrate+0x350>)
 800253e:	f00a faff 	bl	800cb40 <sniprintf>
				ILI9341_DrawText(tft_knownHX711,FONT4, 115, tft_y, WHITE, BLACK);
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <Calibrate+0x314>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	2200      	movs	r2, #0
 800254a:	9201      	str	r2, [sp, #4]
 800254c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002550:	9200      	str	r2, [sp, #0]
 8002552:	2273      	movs	r2, #115	@ 0x73
 8002554:	490e      	ldr	r1, [pc, #56]	@ (8002590 <Calibrate+0x318>)
 8002556:	481c      	ldr	r0, [pc, #112]	@ (80025c8 <Calibrate+0x350>)
 8002558:	f7fe fee2 	bl	8001320 <ILI9341_DrawText>
				HAL_Delay(3000);
 800255c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002560:	f002 fbaa 	bl	8004cb8 <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 8002564:	2000      	movs	r0, #0
 8002566:	f7ff fa53 	bl	8001a10 <ILI9341_TopScreen>

				float calFactor = getCalFactor(knownHX711);
 800256a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256c:	4618      	mov	r0, r3
 800256e:	f001 fe9b 	bl	80042a8 <getCalFactor>
 8002572:	ed87 0a01 	vstr	s0, [r7, #4]

				for(int p = 0; p < 4; p++){
 8002576:	2300      	movs	r3, #0
 8002578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800257a:	e061      	b.n	8002640 <Calibrate+0x3c8>
 800257c:	080120cc 	.word	0x080120cc
 8002580:	080105a0 	.word	0x080105a0
 8002584:	080104fc 	.word	0x080104fc
 8002588:	20000234 	.word	0x20000234
 800258c:	20000230 	.word	0x20000230
 8002590:	08010f88 	.word	0x08010f88
 8002594:	080105b8 	.word	0x080105b8
 8002598:	20000268 	.word	0x20000268
 800259c:	080105c0 	.word	0x080105c0
 80025a0:	080105cc 	.word	0x080105cc
 80025a4:	08010628 	.word	0x08010628
 80025a8:	08010648 	.word	0x08010648
 80025ac:	08010658 	.word	0x08010658
 80025b0:	08010670 	.word	0x08010670
 80025b4:	20000338 	.word	0x20000338
 80025b8:	2000033c 	.word	0x2000033c
 80025bc:	20000004 	.word	0x20000004
 80025c0:	0801068c 	.word	0x0801068c
 80025c4:	080106a0 	.word	0x080106a0
 80025c8:	2000029c 	.word	0x2000029c
					int weight = weigh(tare, calFactor);
 80025cc:	ed97 0a01 	vldr	s0, [r7, #4]
 80025d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025d2:	f001 fd9d 	bl	8004110 <weigh>
 80025d6:	6038      	str	r0, [r7, #0]
					printf("Weight: %d\n\r", weight);
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	48aa      	ldr	r0, [pc, #680]	@ (8002884 <Calibrate+0x60c>)
 80025dc:	f00a f9ea 	bl	800c9b4 <iprintf>
					HAL_Delay(400);
 80025e0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80025e4:	f002 fb68 	bl	8004cb8 <HAL_Delay>
					//TFT
					snprintf(tft_weights, sizeof(tft_weights), "%d", weight);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4aa7      	ldr	r2, [pc, #668]	@ (8002888 <Calibrate+0x610>)
 80025ec:	2132      	movs	r1, #50	@ 0x32
 80025ee:	48a7      	ldr	r0, [pc, #668]	@ (800288c <Calibrate+0x614>)
 80025f0:	f00a faa6 	bl	800cb40 <sniprintf>
					ILI9341_DrawText("Weight: ",FONT4, 0, tft_y, WHITE, BLACK);
 80025f4:	4ba6      	ldr	r3, [pc, #664]	@ (8002890 <Calibrate+0x618>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2200      	movs	r2, #0
 80025fc:	9201      	str	r2, [sp, #4]
 80025fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002602:	9200      	str	r2, [sp, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	49a3      	ldr	r1, [pc, #652]	@ (8002894 <Calibrate+0x61c>)
 8002608:	48a3      	ldr	r0, [pc, #652]	@ (8002898 <Calibrate+0x620>)
 800260a:	f7fe fe89 	bl	8001320 <ILI9341_DrawText>
					ILI9341_DrawText(tft_weights,FONT4, 65, tft_y, WHITE, BLACK);
 800260e:	4ba0      	ldr	r3, [pc, #640]	@ (8002890 <Calibrate+0x618>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	2200      	movs	r2, #0
 8002616:	9201      	str	r2, [sp, #4]
 8002618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800261c:	9200      	str	r2, [sp, #0]
 800261e:	2241      	movs	r2, #65	@ 0x41
 8002620:	499c      	ldr	r1, [pc, #624]	@ (8002894 <Calibrate+0x61c>)
 8002622:	489a      	ldr	r0, [pc, #616]	@ (800288c <Calibrate+0x614>)
 8002624:	f7fe fe7c 	bl	8001320 <ILI9341_DrawText>
					tft_y +=20;
 8002628:	4b99      	ldr	r3, [pc, #612]	@ (8002890 <Calibrate+0x618>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3314      	adds	r3, #20
 800262e:	4a98      	ldr	r2, [pc, #608]	@ (8002890 <Calibrate+0x618>)
 8002630:	6013      	str	r3, [r2, #0]
					HAL_Delay(400);
 8002632:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002636:	f002 fb3f 	bl	8004cb8 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 800263a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263c:	3301      	adds	r3, #1
 800263e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002642:	2b03      	cmp	r3, #3
 8002644:	ddc2      	ble.n	80025cc <Calibrate+0x354>
				}

				thresh = refillDrawer(tare, calFactor);
 8002646:	ed97 0a01 	vldr	s0, [r7, #4]
 800264a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800264c:	f000 f9fe 	bl	8002a4c <refillDrawer>
 8002650:	4603      	mov	r3, r0
 8002652:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 8002654:	f000 fec4 	bl	80033e0 <SD_init>

				saveDrawerConfig(i, j, calFactor, tare, thresh);
 8002658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800265a:	b298      	uxth	r0, r3
 800265c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800265e:	b299      	uxth	r1, r3
 8002660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002664:	ed97 0a01 	vldr	s0, [r7, #4]
 8002668:	f000 fef6 	bl	8003458 <saveDrawerConfig>
			for(int j = 1; j <= 4; j++){
 800266c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800266e:	3301      	adds	r3, #1
 8002670:	643b      	str	r3, [r7, #64]	@ 0x40
 8002672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002674:	2b04      	cmp	r3, #4
 8002676:	f77f ae6f 	ble.w	8002358 <Calibrate+0xe0>
 800267a:	e184      	b.n	8002986 <Calibrate+0x70e>
			}
		}

		else{
			for(int k = 7; k <= 7; k++){
 800267c:	2307      	movs	r3, #7
 800267e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002680:	e17d      	b.n	800297e <Calibrate+0x706>

				uint16_t A_slave = MuxCombos[k-1].A;
 8002682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002684:	1e5a      	subs	r2, r3, #1
 8002686:	4985      	ldr	r1, [pc, #532]	@ (800289c <Calibrate+0x624>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	440b      	add	r3, r1
 8002690:	3302      	adds	r3, #2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	83fb      	strh	r3, [r7, #30]
				uint16_t B_slave = MuxCombos[k-1].B;
 8002696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002698:	1e5a      	subs	r2, r3, #1
 800269a:	4980      	ldr	r1, [pc, #512]	@ (800289c <Calibrate+0x624>)
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	3301      	adds	r3, #1
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	83bb      	strh	r3, [r7, #28]
				uint16_t C_slave = MuxCombos[k-1].C;
 80026aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ac:	1e5a      	subs	r2, r3, #1
 80026ae:	497b      	ldr	r1, [pc, #492]	@ (800289c <Calibrate+0x624>)
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	837b      	strh	r3, [r7, #26]

				muxSET(A_slave, B_slave, C_slave, 0);
 80026bc:	8b7a      	ldrh	r2, [r7, #26]
 80026be:	8bb9      	ldrh	r1, [r7, #28]
 80026c0:	8bf8      	ldrh	r0, [r7, #30]
 80026c2:	2300      	movs	r3, #0
 80026c4:	f001 fbdc 	bl	8003e80 <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, k);
 80026c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80026cc:	4874      	ldr	r0, [pc, #464]	@ (80028a0 <Calibrate+0x628>)
 80026ce:	f00a f971 	bl	800c9b4 <iprintf>

				//TFT
				snprintf(tft_row, sizeof(tft_row), "%d", i);
 80026d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026d4:	4a6c      	ldr	r2, [pc, #432]	@ (8002888 <Calibrate+0x610>)
 80026d6:	2132      	movs	r1, #50	@ 0x32
 80026d8:	4872      	ldr	r0, [pc, #456]	@ (80028a4 <Calibrate+0x62c>)
 80026da:	f00a fa31 	bl	800cb40 <sniprintf>
				ILI9341_DrawText("ROW ", FONT4, 0, tft_y, WHITE, BLACK);
 80026de:	4b6c      	ldr	r3, [pc, #432]	@ (8002890 <Calibrate+0x618>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2200      	movs	r2, #0
 80026e6:	9201      	str	r2, [sp, #4]
 80026e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026ec:	9200      	str	r2, [sp, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	4968      	ldr	r1, [pc, #416]	@ (8002894 <Calibrate+0x61c>)
 80026f2:	486d      	ldr	r0, [pc, #436]	@ (80028a8 <Calibrate+0x630>)
 80026f4:	f7fe fe14 	bl	8001320 <ILI9341_DrawText>
				ILI9341_DrawText(tft_row, FONT4, 55, tft_y, WHITE, BLACK);
 80026f8:	4b65      	ldr	r3, [pc, #404]	@ (8002890 <Calibrate+0x618>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2200      	movs	r2, #0
 8002700:	9201      	str	r2, [sp, #4]
 8002702:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002706:	9200      	str	r2, [sp, #0]
 8002708:	2237      	movs	r2, #55	@ 0x37
 800270a:	4962      	ldr	r1, [pc, #392]	@ (8002894 <Calibrate+0x61c>)
 800270c:	4865      	ldr	r0, [pc, #404]	@ (80028a4 <Calibrate+0x62c>)
 800270e:	f7fe fe07 	bl	8001320 <ILI9341_DrawText>
				snprintf(tft_drawer, sizeof(tft_drawer), "%d", i);
 8002712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002714:	4a5c      	ldr	r2, [pc, #368]	@ (8002888 <Calibrate+0x610>)
 8002716:	2132      	movs	r1, #50	@ 0x32
 8002718:	4864      	ldr	r0, [pc, #400]	@ (80028ac <Calibrate+0x634>)
 800271a:	f00a fa11 	bl	800cb40 <sniprintf>
				ILI9341_DrawText(" | DRAWER ",FONT4, 60, tft_y, WHITE, BLACK);
 800271e:	4b5c      	ldr	r3, [pc, #368]	@ (8002890 <Calibrate+0x618>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	2200      	movs	r2, #0
 8002726:	9201      	str	r2, [sp, #4]
 8002728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800272c:	9200      	str	r2, [sp, #0]
 800272e:	223c      	movs	r2, #60	@ 0x3c
 8002730:	4958      	ldr	r1, [pc, #352]	@ (8002894 <Calibrate+0x61c>)
 8002732:	485f      	ldr	r0, [pc, #380]	@ (80028b0 <Calibrate+0x638>)
 8002734:	f7fe fdf4 	bl	8001320 <ILI9341_DrawText>
				ILI9341_DrawText(tft_drawer, FONT4, 175, tft_y, WHITE, BLACK);
 8002738:	4b55      	ldr	r3, [pc, #340]	@ (8002890 <Calibrate+0x618>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	2200      	movs	r2, #0
 8002740:	9201      	str	r2, [sp, #4]
 8002742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002746:	9200      	str	r2, [sp, #0]
 8002748:	22af      	movs	r2, #175	@ 0xaf
 800274a:	4952      	ldr	r1, [pc, #328]	@ (8002894 <Calibrate+0x61c>)
 800274c:	4857      	ldr	r0, [pc, #348]	@ (80028ac <Calibrate+0x634>)
 800274e:	f7fe fde7 	bl	8001320 <ILI9341_DrawText>
				tft_y +=20;
 8002752:	4b4f      	ldr	r3, [pc, #316]	@ (8002890 <Calibrate+0x618>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3314      	adds	r3, #20
 8002758:	4a4d      	ldr	r2, [pc, #308]	@ (8002890 <Calibrate+0x618>)
 800275a:	6013      	str	r3, [r2, #0]
				HAL_Delay(2000);
 800275c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002760:	f002 faaa 	bl	8004cb8 <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff f953 	bl	8001a10 <ILI9341_TopScreen>

				tare = getTare();
 800276a:	f7ff fcb1 	bl	80020d0 <getTare>
 800276e:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button twice when ready to calibrate\n\r");
 8002770:	4850      	ldr	r0, [pc, #320]	@ (80028b4 <Calibrate+0x63c>)
 8002772:	f00a f91f 	bl	800c9b4 <iprintf>

				//TFT
				ILI9341_DrawText("Place the calibration weight", FONT4, 0, tft_y, WHITE, BLACK);
 8002776:	4b46      	ldr	r3, [pc, #280]	@ (8002890 <Calibrate+0x618>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	2200      	movs	r2, #0
 800277e:	9201      	str	r2, [sp, #4]
 8002780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002784:	9200      	str	r2, [sp, #0]
 8002786:	2200      	movs	r2, #0
 8002788:	4942      	ldr	r1, [pc, #264]	@ (8002894 <Calibrate+0x61c>)
 800278a:	484b      	ldr	r0, [pc, #300]	@ (80028b8 <Calibrate+0x640>)
 800278c:	f7fe fdc8 	bl	8001320 <ILI9341_DrawText>
				tft_y +=20;
 8002790:	4b3f      	ldr	r3, [pc, #252]	@ (8002890 <Calibrate+0x618>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3314      	adds	r3, #20
 8002796:	4a3e      	ldr	r2, [pc, #248]	@ (8002890 <Calibrate+0x618>)
 8002798:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("on the drawer", FONT4, 0, tft_y, WHITE, BLACK);
 800279a:	4b3d      	ldr	r3, [pc, #244]	@ (8002890 <Calibrate+0x618>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	9201      	str	r2, [sp, #4]
 80027a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027a8:	9200      	str	r2, [sp, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	4939      	ldr	r1, [pc, #228]	@ (8002894 <Calibrate+0x61c>)
 80027ae:	4843      	ldr	r0, [pc, #268]	@ (80028bc <Calibrate+0x644>)
 80027b0:	f7fe fdb6 	bl	8001320 <ILI9341_DrawText>
				tft_y +=20;
 80027b4:	4b36      	ldr	r3, [pc, #216]	@ (8002890 <Calibrate+0x618>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3314      	adds	r3, #20
 80027ba:	4a35      	ldr	r2, [pc, #212]	@ (8002890 <Calibrate+0x618>)
 80027bc:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("Press the button once ", FONT4, 0, tft_y, WHITE, BLACK);
 80027be:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <Calibrate+0x618>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2200      	movs	r2, #0
 80027c6:	9201      	str	r2, [sp, #4]
 80027c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027cc:	9200      	str	r2, [sp, #0]
 80027ce:	2200      	movs	r2, #0
 80027d0:	4930      	ldr	r1, [pc, #192]	@ (8002894 <Calibrate+0x61c>)
 80027d2:	483b      	ldr	r0, [pc, #236]	@ (80028c0 <Calibrate+0x648>)
 80027d4:	f7fe fda4 	bl	8001320 <ILI9341_DrawText>
				tft_y +=20;
 80027d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <Calibrate+0x618>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	4a2c      	ldr	r2, [pc, #176]	@ (8002890 <Calibrate+0x618>)
 80027e0:	6013      	str	r3, [r2, #0]
				ILI9341_DrawText("when ready to calibrate ", FONT4, 0, tft_y, WHITE, BLACK);
 80027e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002890 <Calibrate+0x618>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2200      	movs	r2, #0
 80027ea:	9201      	str	r2, [sp, #4]
 80027ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027f0:	9200      	str	r2, [sp, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	4927      	ldr	r1, [pc, #156]	@ (8002894 <Calibrate+0x61c>)
 80027f6:	4833      	ldr	r0, [pc, #204]	@ (80028c4 <Calibrate+0x64c>)
 80027f8:	f7fe fd92 	bl	8001320 <ILI9341_DrawText>

				//double press confirmation here
				button_output(num);
 80027fc:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <Calibrate+0x650>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f001 fa85 	bl	8003d10 <button_output>


				knownHX711 = weighRawTare(tare);
 8002806:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002808:	f001 fd0b 	bl	8004222 <weighRawTare>
 800280c:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 800280e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002810:	482e      	ldr	r0, [pc, #184]	@ (80028cc <Calibrate+0x654>)
 8002812:	f00a f8cf 	bl	800c9b4 <iprintf>

				//TFT
				HAL_Delay(2000);
 8002816:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800281a:	f002 fa4d 	bl	8004cb8 <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 800281e:	2000      	movs	r0, #0
 8002820:	f7ff f8f6 	bl	8001a10 <ILI9341_TopScreen>
				ILI9341_DrawText("Read weight: ",FONT4, 0, tft_y, WHITE, BLACK);
 8002824:	4b1a      	ldr	r3, [pc, #104]	@ (8002890 <Calibrate+0x618>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	2200      	movs	r2, #0
 800282c:	9201      	str	r2, [sp, #4]
 800282e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002832:	9200      	str	r2, [sp, #0]
 8002834:	2200      	movs	r2, #0
 8002836:	4917      	ldr	r1, [pc, #92]	@ (8002894 <Calibrate+0x61c>)
 8002838:	4825      	ldr	r0, [pc, #148]	@ (80028d0 <Calibrate+0x658>)
 800283a:	f7fe fd71 	bl	8001320 <ILI9341_DrawText>
				snprintf(tft_knownHX711, sizeof(tft_knownHX711), "%d", knownHX711);
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <Calibrate+0x610>)
 8002842:	2132      	movs	r1, #50	@ 0x32
 8002844:	4823      	ldr	r0, [pc, #140]	@ (80028d4 <Calibrate+0x65c>)
 8002846:	f00a f97b 	bl	800cb40 <sniprintf>
				ILI9341_DrawText(tft_knownHX711,FONT4, 115, tft_y, WHITE, BLACK);
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <Calibrate+0x618>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	2200      	movs	r2, #0
 8002852:	9201      	str	r2, [sp, #4]
 8002854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002858:	9200      	str	r2, [sp, #0]
 800285a:	2273      	movs	r2, #115	@ 0x73
 800285c:	490d      	ldr	r1, [pc, #52]	@ (8002894 <Calibrate+0x61c>)
 800285e:	481d      	ldr	r0, [pc, #116]	@ (80028d4 <Calibrate+0x65c>)
 8002860:	f7fe fd5e 	bl	8001320 <ILI9341_DrawText>
				HAL_Delay(3000);
 8002864:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002868:	f002 fa26 	bl	8004cb8 <HAL_Delay>
				ILI9341_TopScreen(BLACK);
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff f8cf 	bl	8001a10 <ILI9341_TopScreen>

				float calFactor = getCalFactor(knownHX711);
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	4618      	mov	r0, r3
 8002876:	f001 fd17 	bl	80042a8 <getCalFactor>
 800287a:	ed87 0a05 	vstr	s0, [r7, #20]

				for(int p = 0; p < 4; p++){
 800287e:	2300      	movs	r3, #0
 8002880:	637b      	str	r3, [r7, #52]	@ 0x34
 8002882:	e063      	b.n	800294c <Calibrate+0x6d4>
 8002884:	080106b0 	.word	0x080106b0
 8002888:	080104fc 	.word	0x080104fc
 800288c:	200002d0 	.word	0x200002d0
 8002890:	20000230 	.word	0x20000230
 8002894:	08010f88 	.word	0x08010f88
 8002898:	080106c0 	.word	0x080106c0
 800289c:	080120cc 	.word	0x080120cc
 80028a0:	080105a0 	.word	0x080105a0
 80028a4:	20000234 	.word	0x20000234
 80028a8:	080105b8 	.word	0x080105b8
 80028ac:	20000268 	.word	0x20000268
 80028b0:	080105c0 	.word	0x080105c0
 80028b4:	080106cc 	.word	0x080106cc
 80028b8:	08010628 	.word	0x08010628
 80028bc:	08010648 	.word	0x08010648
 80028c0:	08010658 	.word	0x08010658
 80028c4:	08010670 	.word	0x08010670
 80028c8:	20000004 	.word	0x20000004
 80028cc:	0801068c 	.word	0x0801068c
 80028d0:	080106a0 	.word	0x080106a0
 80028d4:	2000029c 	.word	0x2000029c
					int weight = weigh(tare, calFactor);
 80028d8:	ed97 0a05 	vldr	s0, [r7, #20]
 80028dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028de:	f001 fc17 	bl	8004110 <weigh>
 80028e2:	6138      	str	r0, [r7, #16]
					printf("Weight: %d\n\r", weight);
 80028e4:	6939      	ldr	r1, [r7, #16]
 80028e6:	482e      	ldr	r0, [pc, #184]	@ (80029a0 <Calibrate+0x728>)
 80028e8:	f00a f864 	bl	800c9b4 <iprintf>
					HAL_Delay(400);
 80028ec:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80028f0:	f002 f9e2 	bl	8004cb8 <HAL_Delay>

					//TFT
					snprintf(tft_weights, sizeof(tft_weights), "%d", weight);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4a2b      	ldr	r2, [pc, #172]	@ (80029a4 <Calibrate+0x72c>)
 80028f8:	2132      	movs	r1, #50	@ 0x32
 80028fa:	482b      	ldr	r0, [pc, #172]	@ (80029a8 <Calibrate+0x730>)
 80028fc:	f00a f920 	bl	800cb40 <sniprintf>
					ILI9341_DrawText("Weight: ",FONT4, 0, tft_y, WHITE, BLACK);
 8002900:	4b2a      	ldr	r3, [pc, #168]	@ (80029ac <Calibrate+0x734>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	2200      	movs	r2, #0
 8002908:	9201      	str	r2, [sp, #4]
 800290a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800290e:	9200      	str	r2, [sp, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	4927      	ldr	r1, [pc, #156]	@ (80029b0 <Calibrate+0x738>)
 8002914:	4827      	ldr	r0, [pc, #156]	@ (80029b4 <Calibrate+0x73c>)
 8002916:	f7fe fd03 	bl	8001320 <ILI9341_DrawText>
					ILI9341_DrawText(tft_weights,FONT4, 65, tft_y, WHITE, BLACK);
 800291a:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <Calibrate+0x734>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	2200      	movs	r2, #0
 8002922:	9201      	str	r2, [sp, #4]
 8002924:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002928:	9200      	str	r2, [sp, #0]
 800292a:	2241      	movs	r2, #65	@ 0x41
 800292c:	4920      	ldr	r1, [pc, #128]	@ (80029b0 <Calibrate+0x738>)
 800292e:	481e      	ldr	r0, [pc, #120]	@ (80029a8 <Calibrate+0x730>)
 8002930:	f7fe fcf6 	bl	8001320 <ILI9341_DrawText>
					tft_y +=20;
 8002934:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <Calibrate+0x734>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	4a1c      	ldr	r2, [pc, #112]	@ (80029ac <Calibrate+0x734>)
 800293c:	6013      	str	r3, [r2, #0]
					HAL_Delay(400);
 800293e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002942:	f002 f9b9 	bl	8004cb8 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8002946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002948:	3301      	adds	r3, #1
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
 800294c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294e:	2b03      	cmp	r3, #3
 8002950:	ddc2      	ble.n	80028d8 <Calibrate+0x660>
				}

				thresh = refillDrawer(tare, calFactor);
 8002952:	ed97 0a05 	vldr	s0, [r7, #20]
 8002956:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002958:	f000 f878 	bl	8002a4c <refillDrawer>
 800295c:	4603      	mov	r3, r0
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 8002960:	f000 fd3e 	bl	80033e0 <SD_init>

				saveDrawerConfig(i, k, calFactor, tare, thresh);
 8002964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002966:	b298      	uxth	r0, r3
 8002968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296a:	b299      	uxth	r1, r3
 800296c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002970:	ed97 0a05 	vldr	s0, [r7, #20]
 8002974:	f000 fd70 	bl	8003458 <saveDrawerConfig>
			for(int k = 7; k <= 7; k++){
 8002978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800297a:	3301      	adds	r3, #1
 800297c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002980:	2b07      	cmp	r3, #7
 8002982:	f77f ae7e 	ble.w	8002682 <Calibrate+0x40a>
	for(int i = 1; i <= 1; i++){
 8002986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002988:	3301      	adds	r3, #1
 800298a:	647b      	str	r3, [r7, #68]	@ 0x44
 800298c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800298e:	2b01      	cmp	r3, #1
 8002990:	f77f aca3 	ble.w	80022da <Calibrate+0x62>

			}
		}
	}
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3748      	adds	r7, #72	@ 0x48
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	080106b0 	.word	0x080106b0
 80029a4:	080104fc 	.word	0x080104fc
 80029a8:	200002d0 	.word	0x200002d0
 80029ac:	20000230 	.word	0x20000230
 80029b0:	08010f88 	.word	0x08010f88
 80029b4:	080106c0 	.word	0x080106c0

080029b8 <getThresh>:
extern int drawer_num;
extern int tft_y;

int num2 = 2;

uint32_t getThresh(uint32_t tare, float calFactor){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	ed87 0a00 	vstr	s0, [r7]
	uint32_t sum = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
	float avg = 0;
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < 4; i++){
 80029ce:	2300      	movs	r3, #0
 80029d0:	827b      	strh	r3, [r7, #18]
 80029d2:	e00d      	b.n	80029f0 <getThresh+0x38>
		uint16_t weight = weigh(tare, calFactor);
 80029d4:	ed97 0a00 	vldr	s0, [r7]
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f001 fb99 	bl	8004110 <weigh>
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]
		sum += weight;
 80029e2:	897b      	ldrh	r3, [r7, #10]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4413      	add	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < 4; i++){
 80029ea:	8a7b      	ldrh	r3, [r7, #18]
 80029ec:	3301      	adds	r3, #1
 80029ee:	827b      	strh	r3, [r7, #18]
 80029f0:	8a7b      	ldrh	r3, [r7, #18]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d9ee      	bls.n	80029d4 <getThresh+0x1c>
	}

	avg = sum / 4.0;
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7fd fdb4 	bl	8000564 <__aeabi_ui2d>
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <getThresh+0x90>)
 8002a02:	f7fd ff53 	bl	80008ac <__aeabi_ddiv>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f7fe f91b 	bl	8000c48 <__aeabi_d2f>
 8002a12:	4603      	mov	r3, r0
 8002a14:	60fb      	str	r3, [r7, #12]

	return (avg * 0.1); //returns 10% of the normalized weight as the threshold
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7fd fdc6 	bl	80005a8 <__aeabi_f2d>
 8002a1c:	a308      	add	r3, pc, #32	@ (adr r3, 8002a40 <getThresh+0x88>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f7fd fe19 	bl	8000658 <__aeabi_dmul>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7fe f8eb 	bl	8000c08 <__aeabi_d2uiz>
 8002a32:	4603      	mov	r3, r0

}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	f3af 8000 	nop.w
 8002a40:	9999999a 	.word	0x9999999a
 8002a44:	3fb99999 	.word	0x3fb99999
 8002a48:	40100000 	.word	0x40100000

08002a4c <refillDrawer>:


int refillDrawer(uint32_t tare, float calFactor){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	ed87 0a00 	vstr	s0, [r7]

	uint32_t thresh;

	printf("Please refill the current drawer\n\rPress and Hold the button when ready\n\r");
 8002a58:	4865      	ldr	r0, [pc, #404]	@ (8002bf0 <refillDrawer+0x1a4>)
 8002a5a:	f009 ffab 	bl	800c9b4 <iprintf>

	//TFT
	ILI9341_TopScreen(BLACK);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7fe ffd6 	bl	8001a10 <ILI9341_TopScreen>
	ILI9341_DrawText("Please refill the current drawer",FONT4, 0, tft_y, WHITE, BLACK);
 8002a64:	4b63      	ldr	r3, [pc, #396]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	9201      	str	r2, [sp, #4]
 8002a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a72:	9200      	str	r2, [sp, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	4960      	ldr	r1, [pc, #384]	@ (8002bf8 <refillDrawer+0x1ac>)
 8002a78:	4860      	ldr	r0, [pc, #384]	@ (8002bfc <refillDrawer+0x1b0>)
 8002a7a:	f7fe fc51 	bl	8001320 <ILI9341_DrawText>
	tft_y +=20;
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3314      	adds	r3, #20
 8002a84:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002a86:	6013      	str	r3, [r2, #0]
	ILI9341_DrawText("Press and Hold the button",FONT4, 0, tft_y, WHITE, BLACK);
 8002a88:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2200      	movs	r2, #0
 8002a90:	9201      	str	r2, [sp, #4]
 8002a92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a96:	9200      	str	r2, [sp, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4957      	ldr	r1, [pc, #348]	@ (8002bf8 <refillDrawer+0x1ac>)
 8002a9c:	4858      	ldr	r0, [pc, #352]	@ (8002c00 <refillDrawer+0x1b4>)
 8002a9e:	f7fe fc3f 	bl	8001320 <ILI9341_DrawText>
	tft_y+=20;
 8002aa2:	4b54      	ldr	r3, [pc, #336]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002aaa:	6013      	str	r3, [r2, #0]
	ILI9341_DrawText("when ready",FONT4, 0, tft_y, WHITE, BLACK);
 8002aac:	4b51      	ldr	r3, [pc, #324]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	9201      	str	r2, [sp, #4]
 8002ab6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002aba:	9200      	str	r2, [sp, #0]
 8002abc:	2200      	movs	r2, #0
 8002abe:	494e      	ldr	r1, [pc, #312]	@ (8002bf8 <refillDrawer+0x1ac>)
 8002ac0:	4850      	ldr	r0, [pc, #320]	@ (8002c04 <refillDrawer+0x1b8>)
 8002ac2:	f7fe fc2d 	bl	8001320 <ILI9341_DrawText>
	tft_y+=20;
 8002ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3314      	adds	r3, #20
 8002acc:	4a49      	ldr	r2, [pc, #292]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002ace:	6013      	str	r3, [r2, #0]
	drawer_lookup(row_num,drawer_num,'R');
 8002ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c08 <refillDrawer+0x1bc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4a4d      	ldr	r2, [pc, #308]	@ (8002c0c <refillDrawer+0x1c0>)
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	b291      	uxth	r1, r2
 8002adc:	2252      	movs	r2, #82	@ 0x52
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f8ca 	bl	8001c78 <drawer_lookup>

	int refill_output;
	// waits for the user to press the button within 15 seconds
	refill_output = button_refill();
 8002ae4:	f001 f9ac 	bl	8003e40 <button_refill>
 8002ae8:	60b8      	str	r0, [r7, #8]

	if (refill_output == 1){
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d140      	bne.n	8002b72 <refillDrawer+0x126>
		// if pressed, change dot to white
		printf("true\n\r");
 8002af0:	4847      	ldr	r0, [pc, #284]	@ (8002c10 <refillDrawer+0x1c4>)
 8002af2:	f009 ff5f 	bl	800c9b4 <iprintf>
		HAL_Delay(1500);
 8002af6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002afa:	f002 f8dd 	bl	8004cb8 <HAL_Delay>

		 thresh = getThresh(tare, calFactor);
 8002afe:	ed97 0a00 	vldr	s0, [r7]
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff ff58 	bl	80029b8 <getThresh>
 8002b08:	60f8      	str	r0, [r7, #12]
		printf("Threshold set to %ld\n\r", thresh);
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	4841      	ldr	r0, [pc, #260]	@ (8002c14 <refillDrawer+0x1c8>)
 8002b0e:	f009 ff51 	bl	800c9b4 <iprintf>

		//TFT
		ILI9341_DrawText("Threshold set to",FONT4, 0, tft_y, WHITE, BLACK);
 8002b12:	4b38      	ldr	r3, [pc, #224]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2200      	movs	r2, #0
 8002b1a:	9201      	str	r2, [sp, #4]
 8002b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	4934      	ldr	r1, [pc, #208]	@ (8002bf8 <refillDrawer+0x1ac>)
 8002b26:	483c      	ldr	r0, [pc, #240]	@ (8002c18 <refillDrawer+0x1cc>)
 8002b28:	f7fe fbfa 	bl	8001320 <ILI9341_DrawText>
		snprintf(tft_thresh, sizeof(tft_thresh), "%ld", thresh);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c1c <refillDrawer+0x1d0>)
 8002b30:	2132      	movs	r1, #50	@ 0x32
 8002b32:	483b      	ldr	r0, [pc, #236]	@ (8002c20 <refillDrawer+0x1d4>)
 8002b34:	f00a f804 	bl	800cb40 <sniprintf>
		ILI9341_DrawText(tft_thresh,FONT4, 155, tft_y, WHITE, BLACK);
 8002b38:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	9201      	str	r2, [sp, #4]
 8002b42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b46:	9200      	str	r2, [sp, #0]
 8002b48:	229b      	movs	r2, #155	@ 0x9b
 8002b4a:	492b      	ldr	r1, [pc, #172]	@ (8002bf8 <refillDrawer+0x1ac>)
 8002b4c:	4834      	ldr	r0, [pc, #208]	@ (8002c20 <refillDrawer+0x1d4>)
 8002b4e:	f7fe fbe7 	bl	8001320 <ILI9341_DrawText>
		tft_y+=20;
 8002b52:	4b28      	ldr	r3, [pc, #160]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3314      	adds	r3, #20
 8002b58:	4a26      	ldr	r2, [pc, #152]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002b5a:	6013      	str	r3, [r2, #0]
		drawer_lookup(row_num,drawer_num,'W');
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c08 <refillDrawer+0x1bc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	4a2a      	ldr	r2, [pc, #168]	@ (8002c0c <refillDrawer+0x1c0>)
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	b291      	uxth	r1, r2
 8002b68:	2257      	movs	r2, #87	@ 0x57
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff f884 	bl	8001c78 <drawer_lookup>
 8002b70:	e038      	b.n	8002be4 <refillDrawer+0x198>
		//return thresh;

	}

	else if (refill_output == 0){
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d135      	bne.n	8002be4 <refillDrawer+0x198>
		// if timer goes off and no press is read, leave the dot as red
		printf("false\n\r");
 8002b78:	482a      	ldr	r0, [pc, #168]	@ (8002c24 <refillDrawer+0x1d8>)
 8002b7a:	f009 ff1b 	bl	800c9b4 <iprintf>
		HAL_Delay(1500);
 8002b7e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002b82:	f002 f899 	bl	8004cb8 <HAL_Delay>

		 thresh = getThresh(tare, calFactor);
 8002b86:	ed97 0a00 	vldr	s0, [r7]
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff14 	bl	80029b8 <getThresh>
 8002b90:	60f8      	str	r0, [r7, #12]
		printf("Threshold set to %ld\n\r", thresh);
 8002b92:	68f9      	ldr	r1, [r7, #12]
 8002b94:	481f      	ldr	r0, [pc, #124]	@ (8002c14 <refillDrawer+0x1c8>)
 8002b96:	f009 ff0d 	bl	800c9b4 <iprintf>

		//TFT
		ILI9341_DrawText("Threshold set to",FONT4, 0, tft_y, WHITE, BLACK);
 8002b9a:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	9201      	str	r2, [sp, #4]
 8002ba4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	4912      	ldr	r1, [pc, #72]	@ (8002bf8 <refillDrawer+0x1ac>)
 8002bae:	481a      	ldr	r0, [pc, #104]	@ (8002c18 <refillDrawer+0x1cc>)
 8002bb0:	f7fe fbb6 	bl	8001320 <ILI9341_DrawText>
		snprintf(tft_thresh, sizeof(tft_thresh), "%ld", thresh);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a19      	ldr	r2, [pc, #100]	@ (8002c1c <refillDrawer+0x1d0>)
 8002bb8:	2132      	movs	r1, #50	@ 0x32
 8002bba:	4819      	ldr	r0, [pc, #100]	@ (8002c20 <refillDrawer+0x1d4>)
 8002bbc:	f009 ffc0 	bl	800cb40 <sniprintf>
		ILI9341_DrawText(tft_thresh,FONT4, 155, tft_y, WHITE, BLACK);
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	9201      	str	r2, [sp, #4]
 8002bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bce:	9200      	str	r2, [sp, #0]
 8002bd0:	229b      	movs	r2, #155	@ 0x9b
 8002bd2:	4909      	ldr	r1, [pc, #36]	@ (8002bf8 <refillDrawer+0x1ac>)
 8002bd4:	4812      	ldr	r0, [pc, #72]	@ (8002c20 <refillDrawer+0x1d4>)
 8002bd6:	f7fe fba3 	bl	8001320 <ILI9341_DrawText>
		tft_y+=20;
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3314      	adds	r3, #20
 8002be0:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <refillDrawer+0x1a8>)
 8002be2:	6013      	str	r3, [r2, #0]
		//return thresh;

	}

	return thresh;
 8002be4:	68fb      	ldr	r3, [r7, #12]


}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	0801072c 	.word	0x0801072c
 8002bf4:	20000230 	.word	0x20000230
 8002bf8:	08010f88 	.word	0x08010f88
 8002bfc:	08010778 	.word	0x08010778
 8002c00:	0801079c 	.word	0x0801079c
 8002c04:	080107b8 	.word	0x080107b8
 8002c08:	20000338 	.word	0x20000338
 8002c0c:	2000033c 	.word	0x2000033c
 8002c10:	080107c4 	.word	0x080107c4
 8002c14:	080107cc 	.word	0x080107cc
 8002c18:	080107e4 	.word	0x080107e4
 8002c1c:	080107f8 	.word	0x080107f8
 8002c20:	20000304 	.word	0x20000304
 8002c24:	080107fc 	.word	0x080107fc

08002c28 <main_function>:
extern char tft_row[50];
extern char tft_drawer[50];
extern char tft_knownHX711[50];
extern char tft_weights[50];

void main_function(){
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b09b      	sub	sp, #108	@ 0x6c
 8002c2c:	af02      	add	r7, sp, #8


	struct drawerInfo drawerInst;
	uint32_t tare = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	64bb      	str	r3, [r7, #72]	@ 0x48
	float calFactor = 1;
 8002c32:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002c36:	647b      	str	r3, [r7, #68]	@ 0x44
	int thresh;

	uint32_t sum;
	uint16_t normalizedWeight;

	for(uint16_t i = 1; i <= 4; i++){
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8002c3e:	e1fa      	b.n	8003036 <main_function+0x40e>
			printf("Row %d ", i);
 8002c40:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002c44:	4619      	mov	r1, r3
 8002c46:	48a7      	ldr	r0, [pc, #668]	@ (8002ee4 <main_function+0x2bc>)
 8002c48:	f009 feb4 	bl	800c9b4 <iprintf>

			//TFT
			ILI9341_DrawText("ROW ", FONT4, 0, tft_y, WHITE, BLACK);
 8002c4c:	4ba6      	ldr	r3, [pc, #664]	@ (8002ee8 <main_function+0x2c0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2200      	movs	r2, #0
 8002c54:	9201      	str	r2, [sp, #4]
 8002c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c5a:	9200      	str	r2, [sp, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	49a3      	ldr	r1, [pc, #652]	@ (8002eec <main_function+0x2c4>)
 8002c60:	48a3      	ldr	r0, [pc, #652]	@ (8002ef0 <main_function+0x2c8>)
 8002c62:	f7fe fb5d 	bl	8001320 <ILI9341_DrawText>
			snprintf(tft_row, sizeof(tft_drawer), "%d", i);
 8002c66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002c6a:	4aa2      	ldr	r2, [pc, #648]	@ (8002ef4 <main_function+0x2cc>)
 8002c6c:	2132      	movs	r1, #50	@ 0x32
 8002c6e:	48a2      	ldr	r0, [pc, #648]	@ (8002ef8 <main_function+0x2d0>)
 8002c70:	f009 ff66 	bl	800cb40 <sniprintf>
			ILI9341_DrawText(tft_row, FONT4, 55, tft_y, WHITE, BLACK);
 8002c74:	4b9c      	ldr	r3, [pc, #624]	@ (8002ee8 <main_function+0x2c0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	9201      	str	r2, [sp, #4]
 8002c7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c82:	9200      	str	r2, [sp, #0]
 8002c84:	2237      	movs	r2, #55	@ 0x37
 8002c86:	4999      	ldr	r1, [pc, #612]	@ (8002eec <main_function+0x2c4>)
 8002c88:	489b      	ldr	r0, [pc, #620]	@ (8002ef8 <main_function+0x2d0>)
 8002c8a:	f7fe fb49 	bl	8001320 <ILI9341_DrawText>

			uint16_t A_mast = MuxCombos[i-1].A;
 8002c8e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	4999      	ldr	r1, [pc, #612]	@ (8002efc <main_function+0x2d4>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			uint16_t B_mast = MuxCombos[i-1].B;
 8002ca6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	4993      	ldr	r1, [pc, #588]	@ (8002efc <main_function+0x2d4>)
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t C_mast = MuxCombos[i-1].C;
 8002cbe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002cc2:	1e5a      	subs	r2, r3, #1
 8002cc4:	498d      	ldr	r1, [pc, #564]	@ (8002efc <main_function+0x2d4>)
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e

			muxSET(A_mast, B_mast, C_mast, 1);
 8002cd2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002cd4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002cd8:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f001 f8cf 	bl	8003e80 <muxSET>

			setRelay(i);
 8002ce2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 f911 	bl	8003f10 <setRelay>

			if(i == 1){
 8002cee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f040 80ac 	bne.w	8002e50 <main_function+0x228>
				for(uint16_t j = 1; j <= 4; j++){
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002cfe:	e0a1      	b.n	8002e44 <main_function+0x21c>

					sum = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[j-1].A;
 8002d08:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	497b      	ldr	r1, [pc, #492]	@ (8002efc <main_function+0x2d4>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	440b      	add	r3, r1
 8002d18:	3302      	adds	r3, #2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	857b      	strh	r3, [r7, #42]	@ 0x2a
					uint16_t B_slave = MuxCombos[j-1].B;
 8002d1e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002d22:	1e5a      	subs	r2, r3, #1
 8002d24:	4975      	ldr	r1, [pc, #468]	@ (8002efc <main_function+0x2d4>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3301      	adds	r3, #1
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	853b      	strh	r3, [r7, #40]	@ 0x28
					uint16_t C_slave = MuxCombos[j-1].C;
 8002d34:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002d38:	1e5a      	subs	r2, r3, #1
 8002d3a:	4970      	ldr	r1, [pc, #448]	@ (8002efc <main_function+0x2d4>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	440b      	add	r3, r1
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	84fb      	strh	r3, [r7, #38]	@ 0x26

					muxSET(A_slave, B_slave, C_slave, 0);
 8002d48:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002d4a:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002d4c:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f001 f896 	bl	8003e80 <muxSET>

					printf("Drawer %d\n\r", j);
 8002d54:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4869      	ldr	r0, [pc, #420]	@ (8002f00 <main_function+0x2d8>)
 8002d5c:	f009 fe2a 	bl	800c9b4 <iprintf>

					//TFT
					snprintf(tft_drawer, sizeof(tft_drawer), "%d", j);
 8002d60:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002d64:	4a63      	ldr	r2, [pc, #396]	@ (8002ef4 <main_function+0x2cc>)
 8002d66:	2132      	movs	r1, #50	@ 0x32
 8002d68:	4866      	ldr	r0, [pc, #408]	@ (8002f04 <main_function+0x2dc>)
 8002d6a:	f009 fee9 	bl	800cb40 <sniprintf>
					ILI9341_DrawText(" DRAWER ",FONT4, 60, tft_y, WHITE, BLACK);
 8002d6e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ee8 <main_function+0x2c0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2200      	movs	r2, #0
 8002d76:	9201      	str	r2, [sp, #4]
 8002d78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d7c:	9200      	str	r2, [sp, #0]
 8002d7e:	223c      	movs	r2, #60	@ 0x3c
 8002d80:	495a      	ldr	r1, [pc, #360]	@ (8002eec <main_function+0x2c4>)
 8002d82:	4861      	ldr	r0, [pc, #388]	@ (8002f08 <main_function+0x2e0>)
 8002d84:	f7fe facc 	bl	8001320 <ILI9341_DrawText>
					ILI9341_DrawText(tft_drawer, FONT4, 175, tft_y, WHITE, BLACK);
 8002d88:	4b57      	ldr	r3, [pc, #348]	@ (8002ee8 <main_function+0x2c0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2200      	movs	r2, #0
 8002d90:	9201      	str	r2, [sp, #4]
 8002d92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d96:	9200      	str	r2, [sp, #0]
 8002d98:	22af      	movs	r2, #175	@ 0xaf
 8002d9a:	4954      	ldr	r1, [pc, #336]	@ (8002eec <main_function+0x2c4>)
 8002d9c:	4859      	ldr	r0, [pc, #356]	@ (8002f04 <main_function+0x2dc>)
 8002d9e:	f7fe fabf 	bl	8001320 <ILI9341_DrawText>

					drawerInst = getFileInfo(i, j);
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8002daa:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fd38 	bl	8003824 <getFileInfo>

					tare = drawerInst.Tare;
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 8002dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc4:	ee17 3a90 	vmov	r3, s15
 8002dc8:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 8002dca:	2300      	movs	r3, #0
 8002dcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dce:	e010      	b.n	8002df2 <main_function+0x1ca>

						int weight = weigh(tare, calFactor);
 8002dd0:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002dd4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002dd6:	f001 f99b 	bl	8004110 <weigh>
 8002dda:	6238      	str	r0, [r7, #32]
						sum += weight;
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002de0:	4413      	add	r3, r2
 8002de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8002de4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002de8:	f001 ff66 	bl	8004cb8 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 8002dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dee:	3301      	adds	r3, #1
 8002df0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	ddeb      	ble.n	8002dd0 <main_function+0x1a8>
					}

					normalizedWeight = sum / 4;
 8002df8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8002e04:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	db17      	blt.n	8002e3a <main_function+0x212>
						//LCD CODE
						row_num = i;
 8002e0a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f0c <main_function+0x2e4>)
 8002e10:	6013      	str	r3, [r2, #0]
						drawer_num = j;
 8002e12:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002e16:	4a3e      	ldr	r2, [pc, #248]	@ (8002f10 <main_function+0x2e8>)
 8002e18:	6013      	str	r3, [r2, #0]

						thresh = refillDrawer(tare, calFactor);
 8002e1a:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002e1e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002e20:	f7ff fe14 	bl	8002a4c <refillDrawer>
 8002e24:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, j, calFactor, tare, thresh);
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8002e2c:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8002e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e32:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002e36:	f000 fc21 	bl	800367c <updateDrawerConfig>
				for(uint16_t j = 1; j <= 4; j++){
 8002e3a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002e44:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	f67f af59 	bls.w	8002d00 <main_function+0xd8>
 8002e4e:	e0ed      	b.n	800302c <main_function+0x404>
				}

			}

			else{
				for(int k = 1; k <= 7; k++){
 8002e50:	2301      	movs	r3, #1
 8002e52:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e54:	e0e6      	b.n	8003024 <main_function+0x3fc>

					sum = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[k-1].A;
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e60:	1e5a      	subs	r2, r3, #1
 8002e62:	4926      	ldr	r1, [pc, #152]	@ (8002efc <main_function+0x2d4>)
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	877b      	strh	r3, [r7, #58]	@ 0x3a
					uint16_t B_slave = MuxCombos[k-1].B;
 8002e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e74:	1e5a      	subs	r2, r3, #1
 8002e76:	4921      	ldr	r1, [pc, #132]	@ (8002efc <main_function+0x2d4>)
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3301      	adds	r3, #1
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	873b      	strh	r3, [r7, #56]	@ 0x38
					uint16_t C_slave = MuxCombos[k-1].C;
 8002e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e88:	1e5a      	subs	r2, r3, #1
 8002e8a:	491c      	ldr	r1, [pc, #112]	@ (8002efc <main_function+0x2d4>)
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	440b      	add	r3, r1
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	86fb      	strh	r3, [r7, #54]	@ 0x36

					muxSET(A_slave, B_slave, C_slave, 0);
 8002e98:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002e9a:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002e9c:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f000 ffee 	bl	8003e80 <muxSET>

					printf("Drawer %d\n\r", k);
 8002ea4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002ea6:	4816      	ldr	r0, [pc, #88]	@ (8002f00 <main_function+0x2d8>)
 8002ea8:	f009 fd84 	bl	800c9b4 <iprintf>

					drawerInst = getFileInfo(i, k);
 8002eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fcb4 	bl	8003824 <getFileInfo>
 8002ebc:	f107 0410 	add.w	r4, r7, #16
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

					tare = drawerInst.Tare;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 8002ed0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed8:	ee17 3a90 	vmov	r3, s15
 8002edc:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 8002ede:	2300      	movs	r3, #0
 8002ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ee2:	e028      	b.n	8002f36 <main_function+0x30e>
 8002ee4:	08010804 	.word	0x08010804
 8002ee8:	20000230 	.word	0x20000230
 8002eec:	08010f88 	.word	0x08010f88
 8002ef0:	0801080c 	.word	0x0801080c
 8002ef4:	08010814 	.word	0x08010814
 8002ef8:	20000234 	.word	0x20000234
 8002efc:	080120cc 	.word	0x080120cc
 8002f00:	08010818 	.word	0x08010818
 8002f04:	20000268 	.word	0x20000268
 8002f08:	08010824 	.word	0x08010824
 8002f0c:	20000338 	.word	0x20000338
 8002f10:	2000033c 	.word	0x2000033c

						int weight = weigh(tare, calFactor);
 8002f14:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002f18:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002f1a:	f001 f8f9 	bl	8004110 <weigh>
 8002f1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
						sum += weight;
 8002f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f24:	4413      	add	r3, r2
 8002f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8002f28:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002f2c:	f001 fec4 	bl	8004cb8 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 8002f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f32:	3301      	adds	r3, #1
 8002f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	ddeb      	ble.n	8002f14 <main_function+0x2ec>
					}

					normalizedWeight = sum / 4;
 8002f3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 8002f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f44:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8002f48:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	db67      	blt.n	800301e <main_function+0x3f6>
						printf("This drawer is low on components\n\rPlease refill the drawer\n\r");
 8002f4e:	483f      	ldr	r0, [pc, #252]	@ (800304c <main_function+0x424>)
 8002f50:	f009 fd30 	bl	800c9b4 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 8002f54:	483e      	ldr	r0, [pc, #248]	@ (8003050 <main_function+0x428>)
 8002f56:	f009 fd2d 	bl	800c9b4 <iprintf>

						//TFT
						ILI9341_TopScreen(BLACK);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fe fd58 	bl	8001a10 <ILI9341_TopScreen>
						ILI9341_DrawText("This drawer is low on components", FONT4, 0, tft_y, WHITE, BLACK);
 8002f60:	4b3c      	ldr	r3, [pc, #240]	@ (8003054 <main_function+0x42c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2200      	movs	r2, #0
 8002f68:	9201      	str	r2, [sp, #4]
 8002f6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f6e:	9200      	str	r2, [sp, #0]
 8002f70:	2200      	movs	r2, #0
 8002f72:	4939      	ldr	r1, [pc, #228]	@ (8003058 <main_function+0x430>)
 8002f74:	4839      	ldr	r0, [pc, #228]	@ (800305c <main_function+0x434>)
 8002f76:	f7fe f9d3 	bl	8001320 <ILI9341_DrawText>
						tft_y +=20;
 8002f7a:	4b36      	ldr	r3, [pc, #216]	@ (8003054 <main_function+0x42c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3314      	adds	r3, #20
 8002f80:	4a34      	ldr	r2, [pc, #208]	@ (8003054 <main_function+0x42c>)
 8002f82:	6013      	str	r3, [r2, #0]
						ILI9341_DrawText("Please refill the drawer", FONT4, 0, tft_y, WHITE, BLACK);
 8002f84:	4b33      	ldr	r3, [pc, #204]	@ (8003054 <main_function+0x42c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	9201      	str	r2, [sp, #4]
 8002f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f92:	9200      	str	r2, [sp, #0]
 8002f94:	2200      	movs	r2, #0
 8002f96:	4930      	ldr	r1, [pc, #192]	@ (8003058 <main_function+0x430>)
 8002f98:	4831      	ldr	r0, [pc, #196]	@ (8003060 <main_function+0x438>)
 8002f9a:	f7fe f9c1 	bl	8001320 <ILI9341_DrawText>
						tft_y +=20;
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003054 <main_function+0x42c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8003054 <main_function+0x42c>)
 8002fa6:	6013      	str	r3, [r2, #0]
						ILI9341_DrawText("Press the selector button", FONT4, 0, tft_y, WHITE, BLACK);
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8003054 <main_function+0x42c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2200      	movs	r2, #0
 8002fb0:	9201      	str	r2, [sp, #4]
 8002fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fb6:	9200      	str	r2, [sp, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4927      	ldr	r1, [pc, #156]	@ (8003058 <main_function+0x430>)
 8002fbc:	4829      	ldr	r0, [pc, #164]	@ (8003064 <main_function+0x43c>)
 8002fbe:	f7fe f9af 	bl	8001320 <ILI9341_DrawText>
						tft_y +=20;
 8002fc2:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <main_function+0x42c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	4a22      	ldr	r2, [pc, #136]	@ (8003054 <main_function+0x42c>)
 8002fca:	6013      	str	r3, [r2, #0]
						ILI9341_DrawText("ONCE to continue", FONT4, 0, tft_y, WHITE, BLACK);
 8002fcc:	4b21      	ldr	r3, [pc, #132]	@ (8003054 <main_function+0x42c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	9201      	str	r2, [sp, #4]
 8002fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fda:	9200      	str	r2, [sp, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	491e      	ldr	r1, [pc, #120]	@ (8003058 <main_function+0x430>)
 8002fe0:	4821      	ldr	r0, [pc, #132]	@ (8003068 <main_function+0x440>)
 8002fe2:	f7fe f99d 	bl	8001320 <ILI9341_DrawText>

						button_output(selector_button);
 8002fe6:	4b21      	ldr	r3, [pc, #132]	@ (800306c <main_function+0x444>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fe90 	bl	8003d10 <button_output>
						//LCD CODE
						 row_num = i;
 8002ff0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8003070 <main_function+0x448>)
 8002ff6:	6013      	str	r3, [r2, #0]
						 drawer_num = k;
 8002ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8003074 <main_function+0x44c>)
 8002ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ffc:	6013      	str	r3, [r2, #0]

						thresh = refillDrawer(tare, calFactor);
 8002ffe:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8003002:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003004:	f7ff fd22 	bl	8002a4c <refillDrawer>
 8003008:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, k, calFactor, tare, thresh);
 800300a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800300c:	b299      	uxth	r1, r3
 800300e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003010:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8003014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003016:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800301a:	f000 fb2f 	bl	800367c <updateDrawerConfig>
				for(int k = 1; k <= 7; k++){
 800301e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003020:	3301      	adds	r3, #1
 8003022:	653b      	str	r3, [r7, #80]	@ 0x50
 8003024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003026:	2b07      	cmp	r3, #7
 8003028:	f77f af15 	ble.w	8002e56 <main_function+0x22e>
	for(uint16_t i = 1; i <= 4; i++){
 800302c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8003030:	3301      	adds	r3, #1
 8003032:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8003036:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800303a:	2b04      	cmp	r3, #4
 800303c:	f67f ae00 	bls.w	8002c40 <main_function+0x18>

				}
			}
	}

}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3764      	adds	r7, #100	@ 0x64
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	08010830 	.word	0x08010830
 8003050:	08010870 	.word	0x08010870
 8003054:	20000230 	.word	0x20000230
 8003058:	08010f88 	.word	0x08010f88
 800305c:	080108a0 	.word	0x080108a0
 8003060:	080108c4 	.word	0x080108c4
 8003064:	080108e0 	.word	0x080108e0
 8003068:	080108fc 	.word	0x080108fc
 800306c:	20000008 	.word	0x20000008
 8003070:	20000338 	.word	0x20000338
 8003074:	2000033c 	.word	0x2000033c

08003078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	4b5b      	ldr	r3, [pc, #364]	@ (8003200 <MX_GPIO_Init+0x188>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	4a5a      	ldr	r2, [pc, #360]	@ (8003200 <MX_GPIO_Init+0x188>)
 8003098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800309c:	6313      	str	r3, [r2, #48]	@ 0x30
 800309e:	4b58      	ldr	r3, [pc, #352]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b54      	ldr	r3, [pc, #336]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	4a53      	ldr	r2, [pc, #332]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ba:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	4b46      	ldr	r3, [pc, #280]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	4a45      	ldr	r2, [pc, #276]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f2:	4b43      	ldr	r3, [pc, #268]	@ (8003200 <MX_GPIO_Init+0x188>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SLAVE_C_Pin|SLAVE_B_Pin|REL_1_Pin|REL_3_Pin
 80030fe:	2200      	movs	r2, #0
 8003100:	f641 4103 	movw	r1, #7171	@ 0x1c03
 8003104:	483f      	ldr	r0, [pc, #252]	@ (8003204 <MX_GPIO_Init+0x18c>)
 8003106:	f002 fc75 	bl	80059f4 <HAL_GPIO_WritePin>
                          |REL_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAST_A_Pin|MAST_B_Pin|MAST_C_Pin, GPIO_PIN_RESET);
 800310a:	2200      	movs	r2, #0
 800310c:	2113      	movs	r1, #19
 800310e:	483e      	ldr	r0, [pc, #248]	@ (8003208 <MX_GPIO_Init+0x190>)
 8003110:	f002 fc70 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 8003114:	2200      	movs	r2, #0
 8003116:	f24c 5121 	movw	r1, #50465	@ 0xc521
 800311a:	483c      	ldr	r0, [pc, #240]	@ (800320c <MX_GPIO_Init+0x194>)
 800311c:	f002 fc6a 	bl	80059f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|REL_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003120:	2201      	movs	r2, #1
 8003122:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003126:	4838      	ldr	r0, [pc, #224]	@ (8003208 <MX_GPIO_Init+0x190>)
 8003128:	f002 fc64 	bl	80059f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLAVE_C_Pin SLAVE_B_Pin REL_1_Pin REL_3_Pin
                           REL_2_Pin */
  GPIO_InitStruct.Pin = SLAVE_C_Pin|SLAVE_B_Pin|REL_1_Pin|REL_3_Pin
 800312c:	f641 4303 	movw	r3, #7171	@ 0x1c03
 8003130:	617b      	str	r3, [r7, #20]
                          |REL_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003132:	2301      	movs	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4619      	mov	r1, r3
 8003144:	482f      	ldr	r0, [pc, #188]	@ (8003204 <MX_GPIO_Init+0x18c>)
 8003146:	f002 faa9 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pins : MAST_A_Pin MAST_B_Pin MAST_C_Pin */
  GPIO_InitStruct.Pin = MAST_A_Pin|MAST_B_Pin|MAST_C_Pin;
 800314a:	2313      	movs	r3, #19
 800314c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4829      	ldr	r0, [pc, #164]	@ (8003208 <MX_GPIO_Init+0x190>)
 8003162:	f002 fa9b 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pins : SLAVE_A_Pin SCK_DRW_Pin PB14 PB15
                           PB5 REL_4_Pin */
  GPIO_InitStruct.Pin = SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 8003166:	f24c 5321 	movw	r3, #50465	@ 0xc521
 800316a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|REL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316c:	2301      	movs	r3, #1
 800316e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4823      	ldr	r0, [pc, #140]	@ (800320c <MX_GPIO_Init+0x194>)
 8003180:	f002 fa8c 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BTN_Pin CONFIRM_BTN_Pin */
  GPIO_InitStruct.Pin = RESET_BTN_Pin|CONFIRM_BTN_Pin;
 8003184:	2306      	movs	r3, #6
 8003186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003188:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800318c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003192:	f107 0314 	add.w	r3, r7, #20
 8003196:	4619      	mov	r1, r3
 8003198:	481c      	ldr	r0, [pc, #112]	@ (800320c <MX_GPIO_Init+0x194>)
 800319a:	f002 fa7f 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : DAT_IN_Pin */
  GPIO_InitStruct.Pin = DAT_IN_Pin;
 800319e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAT_IN_GPIO_Port, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	4815      	ldr	r0, [pc, #84]	@ (8003208 <MX_GPIO_Init+0x190>)
 80031b4:	f002 fa72 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80031b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031be:	2301      	movs	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	480d      	ldr	r0, [pc, #52]	@ (8003208 <MX_GPIO_Init+0x190>)
 80031d2:	f002 fa63 	bl	800569c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	2007      	movs	r0, #7
 80031dc:	f001 fea5 	bl	8004f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031e0:	2007      	movs	r0, #7
 80031e2:	f001 febe 	bl	8004f62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2100      	movs	r1, #0
 80031ea:	2008      	movs	r0, #8
 80031ec:	f001 fe9d 	bl	8004f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80031f0:	2008      	movs	r0, #8
 80031f2:	f001 feb6 	bl	8004f62 <HAL_NVIC_EnableIRQ>

}
 80031f6:	bf00      	nop
 80031f8:	3728      	adds	r7, #40	@ 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40020800 	.word	0x40020800
 8003208:	40020000 	.word	0x40020000
 800320c:	40020400 	.word	0x40020400

08003210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	//disables internal buffering for input stream for scanf
	setvbuf(stdin, NULL, _IONBF, 0);
 8003216:	4b33      	ldr	r3, [pc, #204]	@ (80032e4 <main+0xd4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6858      	ldr	r0, [r3, #4]
 800321c:	2300      	movs	r3, #0
 800321e:	2202      	movs	r2, #2
 8003220:	2100      	movs	r1, #0
 8003222:	f009 fbd9 	bl	800c9d8 <setvbuf>

	/* Configure the system clock */
	SystemClock_Config();
 8003226:	f000 f869 	bl	80032fc <SystemClock_Config>

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800322a:	f001 fcd3 	bl	8004bd4 <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800322e:	f7ff ff23 	bl	8003078 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8003232:	f001 fc33 	bl	8004a9c <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8003236:	f001 fad7 	bl	80047e8 <MX_TIM2_Init>
  MX_FATFS_Init();
 800323a:	f005 f8b7 	bl	80083ac <MX_FATFS_Init>
  MX_SPI1_Init();
 800323e:	f001 f857 	bl	80042f0 <MX_SPI1_Init>

	printf("Hello from STM32 UART!\n\r");
 8003242:	4829      	ldr	r0, [pc, #164]	@ (80032e8 <main+0xd8>)
 8003244:	f009 fbb6 	bl	800c9b4 <iprintf>

	HAL_TIM_Base_Start(&htim2);
 8003248:	4828      	ldr	r0, [pc, #160]	@ (80032ec <main+0xdc>)
 800324a:	f003 ff51 	bl	80070f0 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 800324e:	2201      	movs	r2, #1
 8003250:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003254:	4826      	ldr	r0, [pc, #152]	@ (80032f0 <main+0xe0>)
 8003256:	f002 fbcd 	bl	80059f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800325a:	200a      	movs	r0, #10
 800325c:	f001 fd2c 	bl	8004cb8 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003266:	4822      	ldr	r0, [pc, #136]	@ (80032f0 <main+0xe0>)
 8003268:	f002 fbc4 	bl	80059f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800326c:	200a      	movs	r0, #10
 800326e:	f001 fd23 	bl	8004cb8 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003272:	f001 fcaf 	bl	8004bd4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003276:	f000 f841 	bl	80032fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800327a:	f7ff fefd 	bl	8003078 <MX_GPIO_Init>
  MX_DMA_Init();
 800327e:	f7fe fcaf 	bl	8001be0 <MX_DMA_Init>
  MX_TIM2_Init();
 8003282:	f001 fab1 	bl	80047e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003286:	f001 fc09 	bl	8004a9c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800328a:	f005 f88f 	bl	80083ac <MX_FATFS_Init>
  MX_SPI1_Init();
 800328e:	f001 f82f 	bl	80042f0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003292:	f001 f863 	bl	800435c <MX_SPI2_Init>
  MX_TIM3_Init();
 8003296:	f001 faf3 	bl	8004880 <MX_TIM3_Init>
  MX_TIM4_Init();
 800329a:	f001 fb4b 	bl	8004934 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 800329e:	f7fe f99b 	bl	80015d8 <ILI9341_Init>
//  int rectXStart = 80;
//  int rectYStart = 80;

  // Simple Text writing (Text, Font, X, Y, Color, BackColor)
  // Available Fonts are FONT1, FONT2, FONT3 and FONT4
  ILI9341_FillScreen(BLACK);
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7fe fb8e 	bl	80019c4 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 80032a8:	2003      	movs	r0, #3
 80032aa:	f7fe fa9f 	bl	80017ec <ILI9341_SetRotation>
  ILI9341_DrawText("Hello from STM32 UART!", FONT4, 55, 110, WHITE, BLACK);
 80032ae:	2300      	movs	r3, #0
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	236e      	movs	r3, #110	@ 0x6e
 80032ba:	2237      	movs	r2, #55	@ 0x37
 80032bc:	490d      	ldr	r1, [pc, #52]	@ (80032f4 <main+0xe4>)
 80032be:	480e      	ldr	r0, [pc, #56]	@ (80032f8 <main+0xe8>)
 80032c0:	f7fe f82e 	bl	8001320 <ILI9341_DrawText>
  HAL_Delay(3000);
 80032c4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80032c8:	f001 fcf6 	bl	8004cb8 <HAL_Delay>
  ILI9341_FillScreen(BLACK);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7fe fb79 	bl	80019c4 <ILI9341_FillScreen>
//
//		HAL_Delay(1000);
//
//  }

  Calibrate();
 80032d2:	f7fe ffd1 	bl	8002278 <Calibrate>
  main_function();
 80032d6:	f7ff fca7 	bl	8002c28 <main_function>
 80032da:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000044 	.word	0x20000044
 80032e8:	08010910 	.word	0x08010910
 80032ec:	20000f2c 	.word	0x20000f2c
 80032f0:	40020400 	.word	0x40020400
 80032f4:	08010f88 	.word	0x08010f88
 80032f8:	0801092c 	.word	0x0801092c

080032fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b094      	sub	sp, #80	@ 0x50
 8003300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	2234      	movs	r2, #52	@ 0x34
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f009 fcb3 	bl	800cc76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003310:	f107 0308 	add.w	r3, r7, #8
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <SystemClock_Config+0xd0>)
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	4a28      	ldr	r2, [pc, #160]	@ (80033cc <SystemClock_Config+0xd0>)
 800332a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003330:	4b26      	ldr	r3, [pc, #152]	@ (80033cc <SystemClock_Config+0xd0>)
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800333c:	2300      	movs	r3, #0
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <SystemClock_Config+0xd4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003348:	4a21      	ldr	r2, [pc, #132]	@ (80033d0 <SystemClock_Config+0xd4>)
 800334a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b1f      	ldr	r3, [pc, #124]	@ (80033d0 <SystemClock_Config+0xd4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800335c:	2302      	movs	r3, #2
 800335e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003360:	2301      	movs	r3, #1
 8003362:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003364:	2310      	movs	r3, #16
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003368:	2302      	movs	r3, #2
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800336c:	2300      	movs	r3, #0
 800336e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003370:	2308      	movs	r3, #8
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003374:	2340      	movs	r3, #64	@ 0x40
 8003376:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003378:	2302      	movs	r3, #2
 800337a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800337c:	2302      	movs	r3, #2
 800337e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003380:	2302      	movs	r3, #2
 8003382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003384:	f107 031c 	add.w	r3, r7, #28
 8003388:	4618      	mov	r0, r3
 800338a:	f002 fe29 	bl	8005fe0 <HAL_RCC_OscConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003394:	f000 f81e 	bl	80033d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003398:	230f      	movs	r3, #15
 800339a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800339c:	2302      	movs	r3, #2
 800339e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033ae:	f107 0308 	add.w	r3, r7, #8
 80033b2:	2102      	movs	r1, #2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f002 fb4f 	bl	8005a58 <HAL_RCC_ClockConfig>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80033c0:	f000 f808 	bl	80033d4 <Error_Handler>
  }
}
 80033c4:	bf00      	nop
 80033c6:	3750      	adds	r7, #80	@ 0x50
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40007000 	.word	0x40007000

080033d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d8:	b672      	cpsid	i
}
 80033da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <Error_Handler+0x8>

080033e0 <SD_init>:

static char buffer[MAX_FILELINE];
BYTE previousLine[MAX_FILELINE];


void  SD_init(){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80033e6:	2201      	movs	r2, #1
 80033e8:	4916      	ldr	r1, [pc, #88]	@ (8003444 <SD_init+0x64>)
 80033ea:	4817      	ldr	r0, [pc, #92]	@ (8003448 <SD_init+0x68>)
 80033ec:	f007 fae6 	bl	800a9bc <f_mount>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b15      	ldr	r3, [pc, #84]	@ (800344c <SD_init+0x6c>)
 80033f6:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80033f8:	4b14      	ldr	r3, [pc, #80]	@ (800344c <SD_init+0x6c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <SD_init+0x30>
		printf("f_mount error (%i)\r\n", fres);
 8003400:	4b12      	ldr	r3, [pc, #72]	@ (800344c <SD_init+0x6c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4619      	mov	r1, r3
 8003406:	4812      	ldr	r0, [pc, #72]	@ (8003450 <SD_init+0x70>)
 8003408:	f009 fad4 	bl	800c9b4 <iprintf>
		while(1);
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <SD_init+0x2c>
	//Let's get some statistics from the SD card
	DWORD free_clusters;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8003410:	463a      	mov	r2, r7
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	4619      	mov	r1, r3
 8003416:	480b      	ldr	r0, [pc, #44]	@ (8003444 <SD_init+0x64>)
 8003418:	f008 f82c 	bl	800b474 <f_getfree>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <SD_init+0x6c>)
 8003422:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <SD_init+0x6c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <SD_init+0x5c>
		printf("f_getfree error (%i)\r\n", fres);
 800342c:	4b07      	ldr	r3, [pc, #28]	@ (800344c <SD_init+0x6c>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	4808      	ldr	r0, [pc, #32]	@ (8003454 <SD_init+0x74>)
 8003434:	f009 fabe 	bl	800c9b4 <iprintf>
		while(1);
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <SD_init+0x58>
	}

}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	0801095c 	.word	0x0801095c
 8003448:	20000340 	.word	0x20000340
 800344c:	200009d0 	.word	0x200009d0
 8003450:	08010960 	.word	0x08010960
 8003454:	08010978 	.word	0x08010978

08003458 <saveDrawerConfig>:

void saveDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b08c      	sub	sp, #48	@ 0x30
 800345c:	af06      	add	r7, sp, #24
 800345e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4603      	mov	r3, r0
 8003468:	81fb      	strh	r3, [r7, #14]
 800346a:	460b      	mov	r3, r1
 800346c:	81bb      	strh	r3, [r7, #12]

	UINT bytesWrote;

	//f_unlink((TCHAR*)filename); //deletes the original file

	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND | FA_CREATE_NEW);
 800346e:	4b33      	ldr	r3, [pc, #204]	@ (800353c <saveDrawerConfig+0xe4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2236      	movs	r2, #54	@ 0x36
 8003474:	4619      	mov	r1, r3
 8003476:	4832      	ldr	r0, [pc, #200]	@ (8003540 <saveDrawerConfig+0xe8>)
 8003478:	f007 fae6 	bl	800aa48 <f_open>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	4b30      	ldr	r3, [pc, #192]	@ (8003544 <saveDrawerConfig+0xec>)
 8003482:	701a      	strb	r2, [r3, #0]

	if(fres == FR_EXIST){
 8003484:	4b2f      	ldr	r3, [pc, #188]	@ (8003544 <saveDrawerConfig+0xec>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d116      	bne.n	80034ba <saveDrawerConfig+0x62>
				fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND);
 800348c:	4b2b      	ldr	r3, [pc, #172]	@ (800353c <saveDrawerConfig+0xe4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2232      	movs	r2, #50	@ 0x32
 8003492:	4619      	mov	r1, r3
 8003494:	482a      	ldr	r0, [pc, #168]	@ (8003540 <saveDrawerConfig+0xe8>)
 8003496:	f007 fad7 	bl	800aa48 <f_open>
 800349a:	4603      	mov	r3, r0
 800349c:	461a      	mov	r2, r3
 800349e:	4b29      	ldr	r3, [pc, #164]	@ (8003544 <saveDrawerConfig+0xec>)
 80034a0:	701a      	strb	r2, [r3, #0]
				if(fres != FR_OK){
 80034a2:	4b28      	ldr	r3, [pc, #160]	@ (8003544 <saveDrawerConfig+0xec>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d017      	beq.n	80034da <saveDrawerConfig+0x82>
					printf("f_write error (%i) IN saveDrawerConfig\r\n", fres);
 80034aa:	4b26      	ldr	r3, [pc, #152]	@ (8003544 <saveDrawerConfig+0xec>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	4619      	mov	r1, r3
 80034b0:	4825      	ldr	r0, [pc, #148]	@ (8003548 <saveDrawerConfig+0xf0>)
 80034b2:	f009 fa7f 	bl	800c9b4 <iprintf>
					while(1);
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <saveDrawerConfig+0x5e>
				}
	}
	else if(fres == FR_OK){
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <saveDrawerConfig+0xec>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <saveDrawerConfig+0x72>
		printf("Created new file");
 80034c2:	4822      	ldr	r0, [pc, #136]	@ (800354c <saveDrawerConfig+0xf4>)
 80034c4:	f009 fa76 	bl	800c9b4 <iprintf>
 80034c8:	e007      	b.n	80034da <saveDrawerConfig+0x82>
	}
	else {
		printf("f_open error (%i) IN saveDrawerConfig\r\n", fres);
 80034ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003544 <saveDrawerConfig+0xec>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	481f      	ldr	r0, [pc, #124]	@ (8003550 <saveDrawerConfig+0xf8>)
 80034d2:	f009 fa6f 	bl	800c9b4 <iprintf>
		while(1);
 80034d6:	bf00      	nop
 80034d8:	e7fd      	b.n	80034d6 <saveDrawerConfig+0x7e>
	}

	snprintf((char*)buffer, sizeof(buffer),"Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld\n", row, drawer, calFactor, Tare, thresh);
 80034da:	89fd      	ldrh	r5, [r7, #14]
 80034dc:	89bc      	ldrh	r4, [r7, #12]
 80034de:	68b8      	ldr	r0, [r7, #8]
 80034e0:	f7fd f862 	bl	80005a8 <__aeabi_f2d>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	6839      	ldr	r1, [r7, #0]
 80034ea:	9105      	str	r1, [sp, #20]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	9104      	str	r1, [sp, #16]
 80034f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034f4:	9400      	str	r4, [sp, #0]
 80034f6:	462b      	mov	r3, r5
 80034f8:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <saveDrawerConfig+0xfc>)
 80034fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034fe:	4816      	ldr	r0, [pc, #88]	@ (8003558 <saveDrawerConfig+0x100>)
 8003500:	f009 fb1e 	bl	800cb40 <sniprintf>
	fres = f_write(&fil, buffer, strlen(buffer), &bytesWrote);
 8003504:	4814      	ldr	r0, [pc, #80]	@ (8003558 <saveDrawerConfig+0x100>)
 8003506:	f7fc fee3 	bl	80002d0 <strlen>
 800350a:	4602      	mov	r2, r0
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4911      	ldr	r1, [pc, #68]	@ (8003558 <saveDrawerConfig+0x100>)
 8003512:	480b      	ldr	r0, [pc, #44]	@ (8003540 <saveDrawerConfig+0xe8>)
 8003514:	f007 fd91 	bl	800b03a <f_write>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <saveDrawerConfig+0xec>)
 800351e:	701a      	strb	r2, [r3, #0]
	printf("Wrote %i bytes to %s\r\n", bytesWrote,filename);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	4a06      	ldr	r2, [pc, #24]	@ (800353c <saveDrawerConfig+0xe4>)
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	4619      	mov	r1, r3
 8003528:	480c      	ldr	r0, [pc, #48]	@ (800355c <saveDrawerConfig+0x104>)
 800352a:	f009 fa43 	bl	800c9b4 <iprintf>


	f_close(&fil);
 800352e:	4804      	ldr	r0, [pc, #16]	@ (8003540 <saveDrawerConfig+0xe8>)
 8003530:	f007 ff76 	bl	800b420 <f_close>

}
 8003534:	bf00      	nop
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bdb0      	pop	{r4, r5, r7, pc}
 800353c:	2000000c 	.word	0x2000000c
 8003540:	20000570 	.word	0x20000570
 8003544:	200009d0 	.word	0x200009d0
 8003548:	08010990 	.word	0x08010990
 800354c:	080109bc 	.word	0x080109bc
 8003550:	080109d0 	.word	0x080109d0
 8003554:	080109f8 	.word	0x080109f8
 8003558:	200009d4 	.word	0x200009d4
 800355c:	08010a2c 	.word	0x08010a2c

08003560 <getData>:

uint32_t getData(char* token){
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i <= 1; i++){
 8003568:	2300      	movs	r3, #0
 800356a:	81fb      	strh	r3, [r7, #14]
 800356c:	e011      	b.n	8003592 <getData+0x32>
		char* temp_token = strtok(token, ":");
 800356e:	490d      	ldr	r1, [pc, #52]	@ (80035a4 <getData+0x44>)
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f009 fb89 	bl	800cc88 <strtok>
 8003576:	60b8      	str	r0, [r7, #8]
		if(i == 1){
 8003578:	89fb      	ldrh	r3, [r7, #14]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d106      	bne.n	800358c <getData+0x2c>

			return strtol(temp_token, NULL, 10);
 800357e:	220a      	movs	r2, #10
 8003580:	2100      	movs	r1, #0
 8003582:	68b8      	ldr	r0, [r7, #8]
 8003584:	f008 fae6 	bl	800bb54 <strtol>
 8003588:	4603      	mov	r3, r0
 800358a:	e006      	b.n	800359a <getData+0x3a>
	for(uint16_t i = 0; i <= 1; i++){
 800358c:	89fb      	ldrh	r3, [r7, #14]
 800358e:	3301      	adds	r3, #1
 8003590:	81fb      	strh	r3, [r7, #14]
 8003592:	89fb      	ldrh	r3, [r7, #14]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d9ea      	bls.n	800356e <getData+0xe>
		}
	}
	return 0;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	08010a44 	.word	0x08010a44

080035a8 <getLineMarker>:

uint16_t getLineMarker(uint16_t row, uint16_t drawer){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	460a      	mov	r2, r1
 80035b2:	80fb      	strh	r3, [r7, #6]
 80035b4:	4613      	mov	r3, r2
 80035b6:	80bb      	strh	r3, [r7, #4]

	fres = f_open(&fil, filename, FA_READ);
 80035b8:	4b29      	ldr	r3, [pc, #164]	@ (8003660 <getLineMarker+0xb8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	4619      	mov	r1, r3
 80035c0:	4828      	ldr	r0, [pc, #160]	@ (8003664 <getLineMarker+0xbc>)
 80035c2:	f007 fa41 	bl	800aa48 <f_open>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b27      	ldr	r3, [pc, #156]	@ (8003668 <getLineMarker+0xc0>)
 80035cc:	701a      	strb	r2, [r3, #0]
	uint16_t fileIndex = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (fres != FR_OK){
 80035d2:	4b25      	ldr	r3, [pc, #148]	@ (8003668 <getLineMarker+0xc0>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <getLineMarker+0x42>
		printf("f_open error (%i) IN getLineMarker\r\n", fres);
 80035da:	4b23      	ldr	r3, [pc, #140]	@ (8003668 <getLineMarker+0xc0>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	4619      	mov	r1, r3
 80035e0:	4822      	ldr	r0, [pc, #136]	@ (800366c <getLineMarker+0xc4>)
 80035e2:	f009 f9e7 	bl	800c9b4 <iprintf>
		while(1);
 80035e6:	bf00      	nop
 80035e8:	e7fd      	b.n	80035e6 <getLineMarker+0x3e>
	}
	else{
		TCHAR* rres = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
		do{
			rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 80035ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003664 <getLineMarker+0xbc>)
 80035f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035f4:	481e      	ldr	r0, [pc, #120]	@ (8003670 <getLineMarker+0xc8>)
 80035f6:	f008 f996 	bl	800b926 <f_gets>
 80035fa:	6138      	str	r0, [r7, #16]

			//char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
			char* token = strtok(rres, ";");
 80035fc:	491d      	ldr	r1, [pc, #116]	@ (8003674 <getLineMarker+0xcc>)
 80035fe:	6938      	ldr	r0, [r7, #16]
 8003600:	f009 fb42 	bl	800cc88 <strtok>
 8003604:	60f8      	str	r0, [r7, #12]

				for(uint16_t i = 0; i <= 1 ; i++){
 8003606:	2300      	movs	r3, #0
 8003608:	82bb      	strh	r3, [r7, #20]
 800360a:	e00a      	b.n	8003622 <getLineMarker+0x7a>
					array[i] = getData(token);
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7ff ffa7 	bl	8003560 <getData>
 8003612:	4602      	mov	r2, r0
 8003614:	8abb      	ldrh	r3, [r7, #20]
 8003616:	b2d1      	uxtb	r1, r2
 8003618:	4a17      	ldr	r2, [pc, #92]	@ (8003678 <getLineMarker+0xd0>)
 800361a:	54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i <= 1 ; i++){
 800361c:	8abb      	ldrh	r3, [r7, #20]
 800361e:	3301      	adds	r3, #1
 8003620:	82bb      	strh	r3, [r7, #20]
 8003622:	8abb      	ldrh	r3, [r7, #20]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d9f1      	bls.n	800360c <getLineMarker+0x64>
				}

			if(row == array[0] && drawer == array[1]){
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <getLineMarker+0xd0>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	4293      	cmp	r3, r2
 8003632:	d107      	bne.n	8003644 <getLineMarker+0x9c>
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <getLineMarker+0xd0>)
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	461a      	mov	r2, r3
 800363a:	88bb      	ldrh	r3, [r7, #4]
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <getLineMarker+0x9c>
					return fileIndex;
 8003640:	8afb      	ldrh	r3, [r7, #22]
 8003642:	e009      	b.n	8003658 <getLineMarker+0xb0>
			}
			else{
				fileIndex++;
 8003644:	8afb      	ldrh	r3, [r7, #22]
 8003646:	3301      	adds	r3, #1
 8003648:	82fb      	strh	r3, [r7, #22]

			}
		}while(rres != 0);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ce      	bne.n	80035ee <getLineMarker+0x46>
	}
	f_close(&fil);
 8003650:	4804      	ldr	r0, [pc, #16]	@ (8003664 <getLineMarker+0xbc>)
 8003652:	f007 fee5 	bl	800b420 <f_close>
	return 0;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	2000000c 	.word	0x2000000c
 8003664:	20000570 	.word	0x20000570
 8003668:	200009d0 	.word	0x200009d0
 800366c:	08010a48 	.word	0x08010a48
 8003670:	200009d4 	.word	0x200009d4
 8003674:	08010a70 	.word	0x08010a70
 8003678:	20000dd4 	.word	0x20000dd4

0800367c <updateDrawerConfig>:

void updateDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){ //will need to add ID marker and compare if they are the same, if not then change both locations
 800367c:	b5b0      	push	{r4, r5, r7, lr}
 800367e:	b08e      	sub	sp, #56	@ 0x38
 8003680:	af06      	add	r7, sp, #24
 8003682:	ed87 0a02 	vstr	s0, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	4603      	mov	r3, r0
 800368c:	81fb      	strh	r3, [r7, #14]
 800368e:	460b      	mov	r3, r1
 8003690:	81bb      	strh	r3, [r7, #12]

	fres = f_open(&fil, filename, FA_READ);
 8003692:	4b58      	ldr	r3, [pc, #352]	@ (80037f4 <updateDrawerConfig+0x178>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2201      	movs	r2, #1
 8003698:	4619      	mov	r1, r3
 800369a:	4857      	ldr	r0, [pc, #348]	@ (80037f8 <updateDrawerConfig+0x17c>)
 800369c:	f007 f9d4 	bl	800aa48 <f_open>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b55      	ldr	r3, [pc, #340]	@ (80037fc <updateDrawerConfig+0x180>)
 80036a6:	701a      	strb	r2, [r3, #0]
	fres_temp = f_open(&fil_temp, temp_filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80036a8:	4b55      	ldr	r3, [pc, #340]	@ (8003800 <updateDrawerConfig+0x184>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	221a      	movs	r2, #26
 80036ae:	4619      	mov	r1, r3
 80036b0:	4854      	ldr	r0, [pc, #336]	@ (8003804 <updateDrawerConfig+0x188>)
 80036b2:	f007 f9c9 	bl	800aa48 <f_open>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	4b53      	ldr	r3, [pc, #332]	@ (8003808 <updateDrawerConfig+0x18c>)
 80036bc:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 80036be:	4b4f      	ldr	r3, [pc, #316]	@ (80037fc <updateDrawerConfig+0x180>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <updateDrawerConfig+0x5a>
		printf("f_open error (%i) IN updateDrawerConfig FOR filename\r\n", fres);
 80036c6:	4b4d      	ldr	r3, [pc, #308]	@ (80037fc <updateDrawerConfig+0x180>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4619      	mov	r1, r3
 80036cc:	484f      	ldr	r0, [pc, #316]	@ (800380c <updateDrawerConfig+0x190>)
 80036ce:	f009 f971 	bl	800c9b4 <iprintf>
		while(1);
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <updateDrawerConfig+0x56>
	}
	if (fres_temp != FR_OK){
 80036d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003808 <updateDrawerConfig+0x18c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <updateDrawerConfig+0x72>
		printf("f_open error (%i) IN updateDrawerConfig FOR temp_filename\r\n", fres_temp);
 80036de:	4b4a      	ldr	r3, [pc, #296]	@ (8003808 <updateDrawerConfig+0x18c>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	4619      	mov	r1, r3
 80036e4:	484a      	ldr	r0, [pc, #296]	@ (8003810 <updateDrawerConfig+0x194>)
 80036e6:	f009 f965 	bl	800c9b4 <iprintf>
		while(1);
 80036ea:	bf00      	nop
 80036ec:	e7fd      	b.n	80036ea <updateDrawerConfig+0x6e>
	}

	UINT bytesWrote;

	bool keep_reading = true;
 80036ee:	2301      	movs	r3, #1
 80036f0:	77fb      	strb	r3, [r7, #31]
	uint16_t lineMarker = getLineMarker(row, drawer);
 80036f2:	89ba      	ldrh	r2, [r7, #12]
 80036f4:	89fb      	ldrh	r3, [r7, #14]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff55 	bl	80035a8 <getLineMarker>
 80036fe:	4603      	mov	r3, r0
 8003700:	837b      	strh	r3, [r7, #26]
	uint16_t currentLine = 1;
 8003702:	2301      	movs	r3, #1
 8003704:	83bb      	strh	r3, [r7, #28]
	do{

		TCHAR* rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 8003706:	4a3c      	ldr	r2, [pc, #240]	@ (80037f8 <updateDrawerConfig+0x17c>)
 8003708:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800370c:	4841      	ldr	r0, [pc, #260]	@ (8003814 <updateDrawerConfig+0x198>)
 800370e:	f008 f90a 	bl	800b926 <f_gets>
 8003712:	6178      	str	r0, [r7, #20]

		if(rres == 0) keep_reading = false;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <updateDrawerConfig+0xa4>
 800371a:	2300      	movs	r3, #0
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e04c      	b.n	80037ba <updateDrawerConfig+0x13e>
		else if(currentLine == lineMarker){ //ID matching would go here, check if IDs match, if not then save previous line, update line, then search for original location of ID and replace that line
 8003720:	8bba      	ldrh	r2, [r7, #28]
 8003722:	8b7b      	ldrh	r3, [r7, #26]
 8003724:	429a      	cmp	r2, r3
 8003726:	d12e      	bne.n	8003786 <updateDrawerConfig+0x10a>
			snprintf((char*)buffer, MAX_FILELINE, "Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld", row, drawer, calFactor, Tare, thresh);
 8003728:	89fd      	ldrh	r5, [r7, #14]
 800372a:	89bc      	ldrh	r4, [r7, #12]
 800372c:	68b8      	ldr	r0, [r7, #8]
 800372e:	f7fc ff3b 	bl	80005a8 <__aeabi_f2d>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	9105      	str	r1, [sp, #20]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	9104      	str	r1, [sp, #16]
 800373e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003742:	9400      	str	r4, [sp, #0]
 8003744:	462b      	mov	r3, r5
 8003746:	4a34      	ldr	r2, [pc, #208]	@ (8003818 <updateDrawerConfig+0x19c>)
 8003748:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800374c:	4831      	ldr	r0, [pc, #196]	@ (8003814 <updateDrawerConfig+0x198>)
 800374e:	f009 f9f7 	bl	800cb40 <sniprintf>
			//fputs(buffer, temp);

			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8003752:	4830      	ldr	r0, [pc, #192]	@ (8003814 <updateDrawerConfig+0x198>)
 8003754:	f7fc fdbc 	bl	80002d0 <strlen>
 8003758:	4602      	mov	r2, r0
 800375a:	f107 0310 	add.w	r3, r7, #16
 800375e:	492d      	ldr	r1, [pc, #180]	@ (8003814 <updateDrawerConfig+0x198>)
 8003760:	4828      	ldr	r0, [pc, #160]	@ (8003804 <updateDrawerConfig+0x188>)
 8003762:	f007 fc6a 	bl	800b03a <f_write>
 8003766:	4603      	mov	r3, r0
 8003768:	461a      	mov	r2, r3
 800376a:	4b24      	ldr	r3, [pc, #144]	@ (80037fc <updateDrawerConfig+0x180>)
 800376c:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 800376e:	4b23      	ldr	r3, [pc, #140]	@ (80037fc <updateDrawerConfig+0x180>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d021      	beq.n	80037ba <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(1)\r\n", fres);
 8003776:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <updateDrawerConfig+0x180>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	4827      	ldr	r0, [pc, #156]	@ (800381c <updateDrawerConfig+0x1a0>)
 800377e:	f009 f919 	bl	800c9b4 <iprintf>
				while(1);
 8003782:	bf00      	nop
 8003784:	e7fd      	b.n	8003782 <updateDrawerConfig+0x106>
			}

		}
		else {
			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 8003786:	4823      	ldr	r0, [pc, #140]	@ (8003814 <updateDrawerConfig+0x198>)
 8003788:	f7fc fda2 	bl	80002d0 <strlen>
 800378c:	4602      	mov	r2, r0
 800378e:	f107 0310 	add.w	r3, r7, #16
 8003792:	4920      	ldr	r1, [pc, #128]	@ (8003814 <updateDrawerConfig+0x198>)
 8003794:	481b      	ldr	r0, [pc, #108]	@ (8003804 <updateDrawerConfig+0x188>)
 8003796:	f007 fc50 	bl	800b03a <f_write>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <updateDrawerConfig+0x180>)
 80037a0:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 80037a2:	4b16      	ldr	r3, [pc, #88]	@ (80037fc <updateDrawerConfig+0x180>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(2)\r\n", fres);
 80037aa:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <updateDrawerConfig+0x180>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	4619      	mov	r1, r3
 80037b0:	481b      	ldr	r0, [pc, #108]	@ (8003820 <updateDrawerConfig+0x1a4>)
 80037b2:	f009 f8ff 	bl	800c9b4 <iprintf>
				while(1);
 80037b6:	bf00      	nop
 80037b8:	e7fd      	b.n	80037b6 <updateDrawerConfig+0x13a>
			}
		}


		currentLine++;
 80037ba:	8bbb      	ldrh	r3, [r7, #28]
 80037bc:	3301      	adds	r3, #1
 80037be:	83bb      	strh	r3, [r7, #28]

	}while(keep_reading);
 80037c0:	7ffb      	ldrb	r3, [r7, #31]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d19f      	bne.n	8003706 <updateDrawerConfig+0x8a>

	f_close(&fil);
 80037c6:	480c      	ldr	r0, [pc, #48]	@ (80037f8 <updateDrawerConfig+0x17c>)
 80037c8:	f007 fe2a 	bl	800b420 <f_close>
	f_close(&fil_temp);
 80037cc:	480d      	ldr	r0, [pc, #52]	@ (8003804 <updateDrawerConfig+0x188>)
 80037ce:	f007 fe27 	bl	800b420 <f_close>

	f_unlink((TCHAR*)filename); //deletes the original file
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <updateDrawerConfig+0x178>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f007 ff01 	bl	800b5de <f_unlink>
	f_rename((TCHAR*)temp_filename, (TCHAR*)filename); //rename the temp file to be the new "orginal" file
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <updateDrawerConfig+0x184>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <updateDrawerConfig+0x178>)
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f007 ffa4 	bl	800b734 <f_rename>


}
 80037ec:	bf00      	nop
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bdb0      	pop	{r4, r5, r7, pc}
 80037f4:	2000000c 	.word	0x2000000c
 80037f8:	20000570 	.word	0x20000570
 80037fc:	200009d0 	.word	0x200009d0
 8003800:	20000010 	.word	0x20000010
 8003804:	200007a0 	.word	0x200007a0
 8003808:	200009d1 	.word	0x200009d1
 800380c:	08010a74 	.word	0x08010a74
 8003810:	08010aac 	.word	0x08010aac
 8003814:	200009d4 	.word	0x200009d4
 8003818:	08010ae8 	.word	0x08010ae8
 800381c:	08010b1c 	.word	0x08010b1c
 8003820:	08010b4c 	.word	0x08010b4c

08003824 <getFileInfo>:


struct drawerInfo getFileInfo(uint16_t row, uint16_t drawer){ //add ID parameter here later
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b08d      	sub	sp, #52	@ 0x34
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
 8003830:	4613      	mov	r3, r2
 8003832:	803b      	strh	r3, [r7, #0]

	struct drawerInfo drawerInst = { 0 };
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
	static unsigned int array[5];

	uint16_t lineMarker = getLineMarker(row, drawer);
 8003842:	883a      	ldrh	r2, [r7, #0]
 8003844:	887b      	ldrh	r3, [r7, #2]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fead 	bl	80035a8 <getLineMarker>
 800384e:	4603      	mov	r3, r0
 8003850:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t fileIndex = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	fres = f_open(&fil, filename, FA_READ);
 8003856:	4b3e      	ldr	r3, [pc, #248]	@ (8003950 <getFileInfo+0x12c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2201      	movs	r2, #1
 800385c:	4619      	mov	r1, r3
 800385e:	483d      	ldr	r0, [pc, #244]	@ (8003954 <getFileInfo+0x130>)
 8003860:	f007 f8f2 	bl	800aa48 <f_open>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	4b3b      	ldr	r3, [pc, #236]	@ (8003958 <getFileInfo+0x134>)
 800386a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 800386c:	4b3a      	ldr	r3, [pc, #232]	@ (8003958 <getFileInfo+0x134>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <getFileInfo+0x60>
			printf("f_open error (%i) IN getFileInfo\r\n", fres);
 8003874:	4b38      	ldr	r3, [pc, #224]	@ (8003958 <getFileInfo+0x134>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4619      	mov	r1, r3
 800387a:	4838      	ldr	r0, [pc, #224]	@ (800395c <getFileInfo+0x138>)
 800387c:	f009 f89a 	bl	800c9b4 <iprintf>
			while(1);
 8003880:	bf00      	nop
 8003882:	e7fd      	b.n	8003880 <getFileInfo+0x5c>
		}
	else {
		TCHAR* rres = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
		do {

				rres = f_gets((TCHAR*) buffer, MAX_FILELINE, &fil);
 8003888:	4a32      	ldr	r2, [pc, #200]	@ (8003954 <getFileInfo+0x130>)
 800388a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800388e:	4834      	ldr	r0, [pc, #208]	@ (8003960 <getFileInfo+0x13c>)
 8003890:	f008 f849 	bl	800b926 <f_gets>
 8003894:	61f8      	str	r0, [r7, #28]

				if (fileIndex == lineMarker) {
 8003896:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003898:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800389a:	429a      	cmp	r2, r3
 800389c:	d140      	bne.n	8003920 <getFileInfo+0xfc>
						char* token = strtok(buffer, ";");
 800389e:	4931      	ldr	r1, [pc, #196]	@ (8003964 <getFileInfo+0x140>)
 80038a0:	482f      	ldr	r0, [pc, #188]	@ (8003960 <getFileInfo+0x13c>)
 80038a2:	f009 f9f1 	bl	800cc88 <strtok>
 80038a6:	62b8      	str	r0, [r7, #40]	@ 0x28
						unsigned int index = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24

						while (token != NULL) {
 80038ac:	e00f      	b.n	80038ce <getFileInfo+0xaa>
								array[index] = getData(token);
 80038ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038b0:	f7ff fe56 	bl	8003560 <getData>
 80038b4:	4602      	mov	r2, r0
 80038b6:	492c      	ldr	r1, [pc, #176]	@ (8003968 <getFileInfo+0x144>)
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								token = strtok(NULL, ";");
 80038be:	4929      	ldr	r1, [pc, #164]	@ (8003964 <getFileInfo+0x140>)
 80038c0:	2000      	movs	r0, #0
 80038c2:	f009 f9e1 	bl	800cc88 <strtok>
 80038c6:	62b8      	str	r0, [r7, #40]	@ 0x28
								index++;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	3301      	adds	r3, #1
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
						while (token != NULL) {
 80038ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ec      	bne.n	80038ae <getFileInfo+0x8a>
						}
						f_close(&fil);
 80038d4:	481f      	ldr	r0, [pc, #124]	@ (8003954 <getFileInfo+0x130>)
 80038d6:	f007 fda3 	bl	800b420 <f_close>

						drawerInst.row = array[0];
 80038da:	4b23      	ldr	r3, [pc, #140]	@ (8003968 <getFileInfo+0x144>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	81bb      	strh	r3, [r7, #12]
						drawerInst.drawer = array[1];
 80038e2:	4b21      	ldr	r3, [pc, #132]	@ (8003968 <getFileInfo+0x144>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	81fb      	strh	r3, [r7, #14]
						drawerInst.calFactor = array[2];
 80038ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003968 <getFileInfo+0x144>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	edc7 7a04 	vstr	s15, [r7, #16]
						drawerInst.Tare = array[3];
 80038fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003968 <getFileInfo+0x144>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	617b      	str	r3, [r7, #20]
						drawerInst.thresh = array[4];
 8003900:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <getFileInfo+0x144>)
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	ee07 3a90 	vmov	s15, r3
 8003908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390c:	edc7 7a06 	vstr	s15, [r7, #24]

						return drawerInst;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	461c      	mov	r4, r3
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800391a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800391e:	e012      	b.n	8003946 <getFileInfo+0x122>
				}
				fileIndex++;
 8003920:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003922:	3301      	adds	r3, #1
 8003924:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		}while(rres != 0);
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ad      	bne.n	8003888 <getFileInfo+0x64>
	}

	f_close(&fil);
 800392c:	4809      	ldr	r0, [pc, #36]	@ (8003954 <getFileInfo+0x130>)
 800392e:	f007 fd77 	bl	800b420 <f_close>
	printf("An error occurred during info extraction.");
 8003932:	480e      	ldr	r0, [pc, #56]	@ (800396c <getFileInfo+0x148>)
 8003934:	f009 f83e 	bl	800c9b4 <iprintf>
	return drawerInst;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	461c      	mov	r4, r3
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	3734      	adds	r7, #52	@ 0x34
 800394a:	46bd      	mov	sp, r7
 800394c:	bd90      	pop	{r4, r7, pc}
 800394e:	bf00      	nop
 8003950:	2000000c 	.word	0x2000000c
 8003954:	20000570 	.word	0x20000570
 8003958:	200009d0 	.word	0x200009d0
 800395c:	08010b7c 	.word	0x08010b7c
 8003960:	200009d4 	.word	0x200009d4
 8003964:	08010a70 	.word	0x08010a70
 8003968:	20000dd8 	.word	0x20000dd8
 800396c:	08010ba0 	.word	0x08010ba0

08003970 <_write>:
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

//extern int tft_y;
//Code to enable printf statements
int _write(int file, char *data, int len) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	b29a      	uxth	r2, r3
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4804      	ldr	r0, [pc, #16]	@ (8003998 <_write+0x28>)
 8003988:	f004 f8be 	bl	8007b08 <HAL_UART_Transmit>
    return len;
 800398c:	687b      	ldr	r3, [r7, #4]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20001004 	.word	0x20001004

0800399c <__io_getchar>:

//Code to enable scanf statements
GETCHAR_PROTOTYPE
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 80039a6:	2300      	movs	r3, #0
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4b0e      	ldr	r3, [pc, #56]	@ (80039e4 <__io_getchar+0x48>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <__io_getchar+0x48>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80039bc:	1df9      	adds	r1, r7, #7
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
 80039c2:	2201      	movs	r2, #1
 80039c4:	4807      	ldr	r0, [pc, #28]	@ (80039e4 <__io_getchar+0x48>)
 80039c6:	f004 f92a 	bl	8007c1e <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80039ca:	1df9      	adds	r1, r7, #7
 80039cc:	f04f 33ff 	mov.w	r3, #4294967295
 80039d0:	2201      	movs	r2, #1
 80039d2:	4804      	ldr	r0, [pc, #16]	@ (80039e4 <__io_getchar+0x48>)
 80039d4:	f004 f898 	bl	8007b08 <HAL_UART_Transmit>
  return ch;
 80039d8:	79fb      	ldrb	r3, [r7, #7]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20001004 	.word	0x20001004

080039e8 <HAL_GPIO_EXTI_Callback>:
#define NVIC_RESET_KEY 0x5FA0000

// TFT
extern int tft_y;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	80fb      	strh	r3, [r7, #6]

    //uint32_t current_time = HAL_GetTick();
	// D7
	/**/if (GPIO_Pin == RESET_BTN_Pin) {
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d10d      	bne.n	8003a14 <HAL_GPIO_EXTI_Callback+0x2c>
		//printf("Reset button Pressed");
		num_button = 1;
 80039f8:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <HAL_GPIO_EXTI_Callback+0x54>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

	    HAL_NVIC_DisableIRQ(EXTI1_IRQn); // assuming EXTI1 used for RESET
 80039fe:	2007      	movs	r0, #7
 8003a00:	f001 fabd 	bl	8004f7e <HAL_NVIC_DisableIRQ>
	    __HAL_TIM_SET_COUNTER(&htim4, 0);
 8003a04:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <HAL_GPIO_EXTI_Callback+0x58>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	625a      	str	r2, [r3, #36]	@ 0x24
	    HAL_TIM_Base_Start_IT(&htim4);
 8003a0c:	480c      	ldr	r0, [pc, #48]	@ (8003a40 <HAL_GPIO_EXTI_Callback+0x58>)
 8003a0e:	f003 fbd7 	bl	80071c0 <HAL_TIM_Base_Start_IT>
	        __HAL_TIM_SET_COUNTER(&htim4, 0);
	        HAL_TIM_Base_Start_IT(&htim4);
		}


}
 8003a12:	e00f      	b.n	8003a34 <HAL_GPIO_EXTI_Callback+0x4c>
		else if (GPIO_Pin == CONFIRM_BTN_Pin){
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d10c      	bne.n	8003a34 <HAL_GPIO_EXTI_Callback+0x4c>
			num_button = 2;
 8003a1a:	4b08      	ldr	r3, [pc, #32]	@ (8003a3c <HAL_GPIO_EXTI_Callback+0x54>)
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	601a      	str	r2, [r3, #0]
	        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // Disable EXTI
 8003a20:	2006      	movs	r0, #6
 8003a22:	f001 faac 	bl	8004f7e <HAL_NVIC_DisableIRQ>
	        __HAL_TIM_SET_COUNTER(&htim4, 0);
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_GPIO_EXTI_Callback+0x58>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	625a      	str	r2, [r3, #36]	@ 0x24
	        HAL_TIM_Base_Start_IT(&htim4);
 8003a2e:	4804      	ldr	r0, [pc, #16]	@ (8003a40 <HAL_GPIO_EXTI_Callback+0x58>)
 8003a30:	f003 fbc6 	bl	80071c0 <HAL_TIM_Base_Start_IT>
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000e10 	.word	0x20000e10
 8003a40:	20000fbc 	.word	0x20000fbc

08003a44 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	6078      	str	r0, [r7, #4]
	// executes once the time runs out

	//Confirm Button Code
	if(htim -> Instance == TIM4 && num_button == 2){
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a96      	ldr	r2, [pc, #600]	@ (8003cac <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d158      	bne.n	8003b08 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8003a56:	4b96      	ldr	r3, [pc, #600]	@ (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d154      	bne.n	8003b08 <HAL_TIM_PeriodElapsedCallback+0xc4>
		HAL_TIM_Base_Stop_IT(&htim4);
 8003a5e:	4895      	ldr	r0, [pc, #596]	@ (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003a60:	f003 fc1e 	bl	80072a0 <HAL_TIM_Base_Stop_IT>

		 uint8_t current_button_state = HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);
 8003a64:	2104      	movs	r1, #4
 8003a66:	4894      	ldr	r0, [pc, #592]	@ (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003a68:	f001 ffac 	bl	80059c4 <HAL_GPIO_ReadPin>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	73fb      	strb	r3, [r7, #15]

			if(current_button_state == GPIO_PIN_SET && current_button_state != previous_button_state){
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d11c      	bne.n	8003ab0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8003a76:	4b91      	ldr	r3, [pc, #580]	@ (8003cbc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d016      	beq.n	8003ab0 <HAL_TIM_PeriodElapsedCallback+0x6c>
				time_start = HAL_GetTick();
 8003a82:	f001 f90d 	bl	8004ca0 <HAL_GetTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4a8d      	ldr	r2, [pc, #564]	@ (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003a8a:	6013      	str	r3, [r2, #0]
				if (!timer_active){
 8003a8c:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <HAL_TIM_PeriodElapsedCallback+0x64>
					 HAL_TIM_Base_Start_IT(&htim3);
 8003a94:	488c      	ldr	r0, [pc, #560]	@ (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003a96:	f003 fb93 	bl	80071c0 <HAL_TIM_Base_Start_IT>
					 timer_active = 1;
 8003a9a:	4b8a      	ldr	r3, [pc, #552]	@ (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
					button_press = PRESS_DETECTED;
 8003aa0:	4b8a      	ldr	r3, [pc, #552]	@ (8003ccc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
				if (!timer_active){
 8003aa6:	e025      	b.n	8003af4 <HAL_TIM_PeriodElapsedCallback+0xb0>
					//printf("%d\n\r", count);
					//printf("Detected\n\r");
				}
				else {
					button_press = WAIT_RELEASE;
 8003aa8:	4b88      	ldr	r3, [pc, #544]	@ (8003ccc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003aaa:	2202      	movs	r2, #2
 8003aac:	701a      	strb	r2, [r3, #0]
				if (!timer_active){
 8003aae:	e021      	b.n	8003af4 <HAL_TIM_PeriodElapsedCallback+0xb0>
					//printf("W R\n\r");
				}
			}

			else if (current_button_state == GPIO_PIN_RESET && current_button_state != previous_button_state){
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11e      	bne.n	8003af4 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8003ab6:	4b81      	ldr	r3, [pc, #516]	@ (8003cbc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d018      	beq.n	8003af4 <HAL_TIM_PeriodElapsedCallback+0xb0>
				released_time = HAL_GetTick() - time_start;
 8003ac2:	f001 f8ed 	bl	8004ca0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	4b7d      	ldr	r3, [pc, #500]	@ (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	4a80      	ldr	r2, [pc, #512]	@ (8003cd0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003ad0:	6013      	str	r3, [r2, #0]

				if (released_time >= 900){
 8003ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8003cd0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8003ada:	d303      	bcc.n	8003ae4 <HAL_TIM_PeriodElapsedCallback+0xa0>
					LP_flag = 1;
 8003adc:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e007      	b.n	8003af4 <HAL_TIM_PeriodElapsedCallback+0xb0>
					//printf("LP\n\r");

				}
				else {
					count++;
 8003ae4:	4b7c      	ldr	r3, [pc, #496]	@ (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	4a7b      	ldr	r2, [pc, #492]	@ (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003aec:	6013      	str	r3, [r2, #0]
					//printf("%d\n\r", count);
					button_press = PRESS_DETECTED;
 8003aee:	4b77      	ldr	r3, [pc, #476]	@ (8003ccc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
					//printf("P D \n\r");
				}

			}

			previous_button_state = current_button_state;
 8003af4:	4a71      	ldr	r2, [pc, #452]	@ (8003cbc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	7013      	strb	r3, [r2, #0]
			__HAL_GPIO_EXTI_CLEAR_IT(CONFIRM_BTN_Pin);
 8003afa:	4b78      	ldr	r3, [pc, #480]	@ (8003cdc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003afc:	2204      	movs	r2, #4
 8003afe:	615a      	str	r2, [r3, #20]
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003b00:	2006      	movs	r0, #6
 8003b02:	f001 fa2e 	bl	8004f62 <HAL_NVIC_EnableIRQ>
	if(htim -> Instance == TIM4 && num_button == 2){
 8003b06:	e062      	b.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x18a>

}

	//Reset Button Code
	else if (htim -> Instance == TIM4 && num_button == 1){
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a67      	ldr	r2, [pc, #412]	@ (8003cac <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d15d      	bne.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x18a>
 8003b12:	4b67      	ldr	r3, [pc, #412]	@ (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d159      	bne.n	8003bce <HAL_TIM_PeriodElapsedCallback+0x18a>
		HAL_TIM_Base_Stop_IT(&htim4);
 8003b1a:	4866      	ldr	r0, [pc, #408]	@ (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003b1c:	f003 fbc0 	bl	80072a0 <HAL_TIM_Base_Stop_IT>

		    uint8_t current_state = HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin);
 8003b20:	2102      	movs	r1, #2
 8003b22:	4865      	ldr	r0, [pc, #404]	@ (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003b24:	f001 ff4e 	bl	80059c4 <HAL_GPIO_ReadPin>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73bb      	strb	r3, [r7, #14]

		    if (current_state == GPIO_PIN_SET) {
 8003b2c:	7bbb      	ldrb	r3, [r7, #14]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d147      	bne.n	8003bc2 <HAL_TIM_PeriodElapsedCallback+0x17e>
		        uint32_t now = HAL_GetTick();
 8003b32:	f001 f8b5 	bl	8004ca0 <HAL_GetTick>
 8003b36:	60b8      	str	r0, [r7, #8]

		        if (!reset_confirm_window_active) {
 8003b38:	4b69      	ldr	r3, [pc, #420]	@ (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f083 0301 	eor.w	r3, r3, #1
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d022      	beq.n	8003b8e <HAL_TIM_PeriodElapsedCallback+0x14a>
		            // First press -> open confirmation window
		            reset_confirm_window_active = true;
 8003b48:	4b65      	ldr	r3, [pc, #404]	@ (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
		            reset_button_time_start = now;
 8003b4e:	4a65      	ldr	r2, [pc, #404]	@ (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6013      	str	r3, [r2, #0]

		            printf("\n\rReset requested. Press again within 3 seconds to confirm.\n\r");
 8003b54:	4864      	ldr	r0, [pc, #400]	@ (8003ce8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003b56:	f008 ff2d 	bl	800c9b4 <iprintf>

		            //TFT
		            ILI9341_DrawText("Reset requested. Press again within 3 seconds to confirm.", FONT4, 0, tft_y, WHITE, BLACK);
 8003b5a:	4b64      	ldr	r3, [pc, #400]	@ (8003cec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2200      	movs	r2, #0
 8003b62:	9201      	str	r2, [sp, #4]
 8003b64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b68:	9200      	str	r2, [sp, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	4960      	ldr	r1, [pc, #384]	@ (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003b6e:	4861      	ldr	r0, [pc, #388]	@ (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003b70:	f7fd fbd6 	bl	8001320 <ILI9341_DrawText>
		            tft_y+=20;
 8003b74:	4b5d      	ldr	r3, [pc, #372]	@ (8003cec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8003cec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003b7c:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(&htim3, 0);
 8003b7e:	4b52      	ldr	r3, [pc, #328]	@ (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24
		            HAL_TIM_Base_Start_IT(&htim3); // Start 3s countdown
 8003b86:	4850      	ldr	r0, [pc, #320]	@ (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003b88:	f003 fb1a 	bl	80071c0 <HAL_TIM_Base_Start_IT>
 8003b8c:	e019      	b.n	8003bc2 <HAL_TIM_PeriodElapsedCallback+0x17e>
		        }

		        else {
		            // Second press within window -> reset
		            if ((now - reset_button_time_start) <= 3000) {
 8003b8e:	4b55      	ldr	r3, [pc, #340]	@ (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d811      	bhi.n	8003bc2 <HAL_TIM_PeriodElapsedCallback+0x17e>
		                printf("\n\rReset confirmed. Performing system reset...\n\r");
 8003b9e:	4856      	ldr	r0, [pc, #344]	@ (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003ba0:	f008 ff08 	bl	800c9b4 <iprintf>
		                //TFT
		                ILI9341_DrawText("Reset confirmed. Performing system reset...", FONT4, 0, tft_y, WHITE, BLACK);
 8003ba4:	4b51      	ldr	r3, [pc, #324]	@ (8003cec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2200      	movs	r2, #0
 8003bac:	9201      	str	r2, [sp, #4]
 8003bae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bb2:	9200      	str	r2, [sp, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	494e      	ldr	r1, [pc, #312]	@ (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003bb8:	4850      	ldr	r0, [pc, #320]	@ (8003cfc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003bba:	f7fd fbb1 	bl	8001320 <ILI9341_DrawText>
		                HAL_NVIC_SystemReset();
 8003bbe:	f001 f9ec 	bl	8004f9a <HAL_NVIC_SystemReset>

		            }
		        }
		    }

		    __HAL_GPIO_EXTI_CLEAR_IT(RESET_BTN_Pin);
 8003bc2:	4b46      	ldr	r3, [pc, #280]	@ (8003cdc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	615a      	str	r2, [r3, #20]
		    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003bc8:	2007      	movs	r0, #7
 8003bca:	f001 f9ca 	bl	8004f62 <HAL_NVIC_EnableIRQ>
	}

	if (htim->Instance == TIM3 && num_button == 2){
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a4b      	ldr	r2, [pc, #300]	@ (8003d00 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d139      	bne.n	8003c4c <HAL_TIM_PeriodElapsedCallback+0x208>
 8003bd8:	4b35      	ldr	r3, [pc, #212]	@ (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d135      	bne.n	8003c4c <HAL_TIM_PeriodElapsedCallback+0x208>
        HAL_TIM_Base_Stop_IT(&htim3);
 8003be0:	4839      	ldr	r0, [pc, #228]	@ (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003be2:	f003 fb5d 	bl	80072a0 <HAL_TIM_Base_Stop_IT>
        timer_active = 0;
 8003be6:	4b37      	ldr	r3, [pc, #220]	@ (8003cc4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        // Determine the result
        if (LP_flag == 1)
 8003bec:	4b39      	ldr	r3, [pc, #228]	@ (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d103      	bne.n	8003bfc <HAL_TIM_PeriodElapsedCallback+0x1b8>
        {
        	input_type = 3; // LONG PRESS
 8003bf4:	4b43      	ldr	r3, [pc, #268]	@ (8003d04 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e01d      	b.n	8003c38 <HAL_TIM_PeriodElapsedCallback+0x1f4>
           // printf("%d\n\r", input_type);
        }
        else if (count >= 2)
 8003bfc:	4b36      	ldr	r3, [pc, #216]	@ (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	dd03      	ble.n	8003c0c <HAL_TIM_PeriodElapsedCallback+0x1c8>
        {
        	input_type = 2; // DOUBLE PRESS
 8003c04:	4b3f      	ldr	r3, [pc, #252]	@ (8003d04 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003c06:	2202      	movs	r2, #2
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e015      	b.n	8003c38 <HAL_TIM_PeriodElapsedCallback+0x1f4>
           // printf("%d\n\r", input_type);
        }
        else if (count == 1 && button_press == PRESS_DETECTED)
 8003c0c:	4b32      	ldr	r3, [pc, #200]	@ (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d108      	bne.n	8003c26 <HAL_TIM_PeriodElapsedCallback+0x1e2>
 8003c14:	4b2d      	ldr	r3, [pc, #180]	@ (8003ccc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d103      	bne.n	8003c26 <HAL_TIM_PeriodElapsedCallback+0x1e2>
        {
        	input_type = 1; // SINGLE PRESS
 8003c1e:	4b39      	ldr	r3, [pc, #228]	@ (8003d04 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e008      	b.n	8003c38 <HAL_TIM_PeriodElapsedCallback+0x1f4>
           // printf("%d\n\r", input_type);
        }

        // Reset everything
        else {
    		count = 0;
 8003c26:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
    		LP_flag = 0;
 8003c2c:	4b29      	ldr	r3, [pc, #164]	@ (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
    		button_press = IDLE;
 8003c32:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
			}
		count = 0;
 8003c38:	4b27      	ldr	r3, [pc, #156]	@ (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
		LP_flag = 0;
 8003c3e:	4b25      	ldr	r3, [pc, #148]	@ (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
		button_press = IDLE;
 8003c44:	4b21      	ldr	r3, [pc, #132]	@ (8003ccc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	701a      	strb	r2, [r3, #0]
	    HAL_Delay(2500);
		ILI9341_TopScreen(BLACK);

		}

	}
 8003c4a:	e02a      	b.n	8003ca2 <HAL_TIM_PeriodElapsedCallback+0x25e>
	else if (htim->Instance == TIM3 && num_button == 1 && reset_confirm_window_active){
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2b      	ldr	r2, [pc, #172]	@ (8003d00 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d125      	bne.n	8003ca2 <HAL_TIM_PeriodElapsedCallback+0x25e>
 8003c56:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d121      	bne.n	8003ca2 <HAL_TIM_PeriodElapsedCallback+0x25e>
 8003c5e:	4b20      	ldr	r3, [pc, #128]	@ (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01c      	beq.n	8003ca2 <HAL_TIM_PeriodElapsedCallback+0x25e>
	    HAL_TIM_Base_Stop_IT(&htim3);
 8003c68:	4817      	ldr	r0, [pc, #92]	@ (8003cc8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003c6a:	f003 fb19 	bl	80072a0 <HAL_TIM_Base_Stop_IT>
	    reset_confirm_window_active = false;
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
	    printf("\n\rReset canceled. Returning to normal operation.\n\r");
 8003c74:	4824      	ldr	r0, [pc, #144]	@ (8003d08 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003c76:	f008 fe9d 	bl	800c9b4 <iprintf>
	    ILI9341_DrawText("Reset canceled. Returning to normal operation.", FONT4, 0, tft_y, WHITE, BLACK);
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2200      	movs	r2, #0
 8003c82:	9201      	str	r2, [sp, #4]
 8003c84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c88:	9200      	str	r2, [sp, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4918      	ldr	r1, [pc, #96]	@ (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003c8e:	481f      	ldr	r0, [pc, #124]	@ (8003d0c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003c90:	f7fd fb46 	bl	8001320 <ILI9341_DrawText>
	    HAL_Delay(2500);
 8003c94:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003c98:	f001 f80e 	bl	8004cb8 <HAL_Delay>
		ILI9341_TopScreen(BLACK);
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	f7fd feb7 	bl	8001a10 <ILI9341_TopScreen>
	}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40000800 	.word	0x40000800
 8003cb0:	20000e10 	.word	0x20000e10
 8003cb4:	20000fbc 	.word	0x20000fbc
 8003cb8:	40020400 	.word	0x40020400
 8003cbc:	20000e14 	.word	0x20000e14
 8003cc0:	20000e00 	.word	0x20000e00
 8003cc4:	20000dfc 	.word	0x20000dfc
 8003cc8:	20000f74 	.word	0x20000f74
 8003ccc:	20000dec 	.word	0x20000dec
 8003cd0:	20000e04 	.word	0x20000e04
 8003cd4:	20000df0 	.word	0x20000df0
 8003cd8:	20000df8 	.word	0x20000df8
 8003cdc:	40013c00 	.word	0x40013c00
 8003ce0:	20000e08 	.word	0x20000e08
 8003ce4:	20000e0c 	.word	0x20000e0c
 8003ce8:	08010bcc 	.word	0x08010bcc
 8003cec:	20000230 	.word	0x20000230
 8003cf0:	08010f88 	.word	0x08010f88
 8003cf4:	08010c0c 	.word	0x08010c0c
 8003cf8:	08010c48 	.word	0x08010c48
 8003cfc:	08010c78 	.word	0x08010c78
 8003d00:	40000400 	.word	0x40000400
 8003d04:	20000df4 	.word	0x20000df4
 8003d08:	08010ca4 	.word	0x08010ca4
 8003d0c:	08010cd8 	.word	0x08010cd8

08003d10 <button_output>:


void button_output(int button_num){
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	6078      	str	r0, [r7, #4]
	  while (true){
		if(input_type == 1){
 8003d18:	4b3e      	ldr	r3, [pc, #248]	@ (8003e14 <button_output+0x104>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d124      	bne.n	8003d6a <button_output+0x5a>
			printf("SINGLE PRESS\n\r");
 8003d20:	483d      	ldr	r0, [pc, #244]	@ (8003e18 <button_output+0x108>)
 8003d22:	f008 fe47 	bl	800c9b4 <iprintf>
			//TFT
			ILI9341_TopScreen(BLACK);
 8003d26:	2000      	movs	r0, #0
 8003d28:	f7fd fe72 	bl	8001a10 <ILI9341_TopScreen>
			ILI9341_DrawText("SINGLE PRESS", FONT4, 0, 0, WHITE, BLACK);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4938      	ldr	r1, [pc, #224]	@ (8003e1c <button_output+0x10c>)
 8003d3c:	4838      	ldr	r0, [pc, #224]	@ (8003e20 <button_output+0x110>)
 8003d3e:	f7fd faef 	bl	8001320 <ILI9341_DrawText>
			HAL_Delay(2000);
 8003d42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003d46:	f000 ffb7 	bl	8004cb8 <HAL_Delay>
			ILI9341_TopScreen(BLACK);
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f7fd fe60 	bl	8001a10 <ILI9341_TopScreen>
			input_type = 0;
 8003d50:	4b30      	ldr	r3, [pc, #192]	@ (8003e14 <button_output+0x104>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]

	        // Reset everything
	        count = 0;
 8003d56:	4b33      	ldr	r3, [pc, #204]	@ (8003e24 <button_output+0x114>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
	        LP_flag = 0;
 8003d5c:	4b32      	ldr	r3, [pc, #200]	@ (8003e28 <button_output+0x118>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
	        button_press = IDLE;
 8003d62:	4b32      	ldr	r3, [pc, #200]	@ (8003e2c <button_output+0x11c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
			break;
 8003d68:	e050      	b.n	8003e0c <button_output+0xfc>
		}
		else if (input_type == 2){
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003e14 <button_output+0x104>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d124      	bne.n	8003dbc <button_output+0xac>
			printf("DOUBLE PRESS\n\r");
 8003d72:	482f      	ldr	r0, [pc, #188]	@ (8003e30 <button_output+0x120>)
 8003d74:	f008 fe1e 	bl	800c9b4 <iprintf>
			//TFT
			ILI9341_TopScreen(BLACK);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7fd fe49 	bl	8001a10 <ILI9341_TopScreen>
			ILI9341_DrawText("DOUBLE PRESS", FONT4, 0, 0, WHITE, BLACK);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9301      	str	r3, [sp, #4]
 8003d82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4923      	ldr	r1, [pc, #140]	@ (8003e1c <button_output+0x10c>)
 8003d8e:	4829      	ldr	r0, [pc, #164]	@ (8003e34 <button_output+0x124>)
 8003d90:	f7fd fac6 	bl	8001320 <ILI9341_DrawText>
			HAL_Delay(2000);
 8003d94:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003d98:	f000 ff8e 	bl	8004cb8 <HAL_Delay>
			ILI9341_TopScreen(BLACK);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7fd fe37 	bl	8001a10 <ILI9341_TopScreen>
			input_type = 0;
 8003da2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <button_output+0x104>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

	        // Reset everything
	        count = 0;
 8003da8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <button_output+0x114>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
	        LP_flag = 0;
 8003dae:	4b1e      	ldr	r3, [pc, #120]	@ (8003e28 <button_output+0x118>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
	        button_press = IDLE;
 8003db4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e2c <button_output+0x11c>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
			break;
 8003dba:	e027      	b.n	8003e0c <button_output+0xfc>
		}
		else if (input_type == 3){
 8003dbc:	4b15      	ldr	r3, [pc, #84]	@ (8003e14 <button_output+0x104>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d1a9      	bne.n	8003d18 <button_output+0x8>
			printf("LONG PRESS\n\r");
 8003dc4:	481c      	ldr	r0, [pc, #112]	@ (8003e38 <button_output+0x128>)
 8003dc6:	f008 fdf5 	bl	800c9b4 <iprintf>
			input_type = 0;
 8003dca:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <button_output+0x104>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
			//TFT
			ILI9341_TopScreen(BLACK);
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f7fd fe1d 	bl	8001a10 <ILI9341_TopScreen>
			ILI9341_DrawText("LONG PRESS", FONT4, 0, 0, WHITE, BLACK);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	2300      	movs	r3, #0
 8003de2:	2200      	movs	r2, #0
 8003de4:	490d      	ldr	r1, [pc, #52]	@ (8003e1c <button_output+0x10c>)
 8003de6:	4815      	ldr	r0, [pc, #84]	@ (8003e3c <button_output+0x12c>)
 8003de8:	f7fd fa9a 	bl	8001320 <ILI9341_DrawText>
			HAL_Delay(2000);
 8003dec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003df0:	f000 ff62 	bl	8004cb8 <HAL_Delay>
			ILI9341_TopScreen(BLACK);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fd fe0b 	bl	8001a10 <ILI9341_TopScreen>

	        // Reset everything
	        count = 0;
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <button_output+0x114>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
	        LP_flag = 0;
 8003e00:	4b09      	ldr	r3, [pc, #36]	@ (8003e28 <button_output+0x118>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
	        button_press = IDLE;
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <button_output+0x11c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
}
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000df4 	.word	0x20000df4
 8003e18:	08010d08 	.word	0x08010d08
 8003e1c:	08010f88 	.word	0x08010f88
 8003e20:	08010d18 	.word	0x08010d18
 8003e24:	20000df8 	.word	0x20000df8
 8003e28:	20000df0 	.word	0x20000df0
 8003e2c:	20000dec 	.word	0x20000dec
 8003e30:	08010d28 	.word	0x08010d28
 8003e34:	08010d38 	.word	0x08010d38
 8003e38:	08010d48 	.word	0x08010d48
 8003e3c:	08010d58 	.word	0x08010d58

08003e40 <button_refill>:

int button_refill(){
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
	int firstcall = HAL_GetTick();
 8003e46:	f000 ff2b 	bl	8004ca0 <HAL_GetTick>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	607b      	str	r3, [r7, #4]

	while(HAL_GetTick() - firstcall <= 15000){
 8003e4e:	e006      	b.n	8003e5e <button_refill+0x1e>
		if (button_press != IDLE){
 8003e50:	4b0a      	ldr	r3, [pc, #40]	@ (8003e7c <button_refill+0x3c>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <button_refill+0x1e>
			return 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e009      	b.n	8003e72 <button_refill+0x32>
	while(HAL_GetTick() - firstcall <= 15000){
 8003e5e:	f000 ff1f 	bl	8004ca0 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d9ef      	bls.n	8003e50 <button_refill+0x10>
		}
	}

	return 0;
 8003e70:	2300      	movs	r3, #0

}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000dec 	.word	0x20000dec

08003e80 <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4604      	mov	r4, r0
 8003e88:	4608      	mov	r0, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4623      	mov	r3, r4
 8003e90:	80fb      	strh	r3, [r7, #6]
 8003e92:	4603      	mov	r3, r0
 8003e94:	80bb      	strh	r3, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	807b      	strh	r3, [r7, #2]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	707b      	strb	r3, [r7, #1]
  if(control){
 8003e9e:	787b      	ldrb	r3, [r7, #1]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <muxSET+0x50>
    HAL_GPIO_WritePin(MAST_A_GPIO_Port, MAST_A_Pin, A);
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4815      	ldr	r0, [pc, #84]	@ (8003f04 <muxSET+0x84>)
 8003eae:	f001 fda1 	bl	80059f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_B_GPIO_Port, MAST_B_Pin, B);
 8003eb2:	88bb      	ldrh	r3, [r7, #4]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2102      	movs	r1, #2
 8003eba:	4812      	ldr	r0, [pc, #72]	@ (8003f04 <muxSET+0x84>)
 8003ebc:	f001 fd9a 	bl	80059f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_C_GPIO_Port, MAST_C_Pin, C);
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2110      	movs	r1, #16
 8003ec8:	480e      	ldr	r0, [pc, #56]	@ (8003f04 <muxSET+0x84>)
 8003eca:	f001 fd93 	bl	80059f4 <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
  }
}
 8003ece:	e014      	b.n	8003efa <muxSET+0x7a>
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	480b      	ldr	r0, [pc, #44]	@ (8003f08 <muxSET+0x88>)
 8003eda:	f001 fd8b 	bl	80059f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
 8003ede:	88bb      	ldrh	r3, [r7, #4]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4809      	ldr	r0, [pc, #36]	@ (8003f0c <muxSET+0x8c>)
 8003ee8:	f001 fd84 	bl	80059f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4805      	ldr	r0, [pc, #20]	@ (8003f0c <muxSET+0x8c>)
 8003ef6:	f001 fd7d 	bl	80059f4 <HAL_GPIO_WritePin>
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd90      	pop	{r4, r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40020000 	.word	0x40020000
 8003f08:	40020400 	.word	0x40020400
 8003f0c:	40020800 	.word	0x40020800

08003f10 <setRelay>:
#include <manager_io.h>
#include <manager_mux.h>
#include <manager_weight.h>


void setRelay(uint8_t rowNum){
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]

	switch (rowNum){
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d86e      	bhi.n	8004000 <setRelay+0xf0>
 8003f22:	a201      	add	r2, pc, #4	@ (adr r2, 8003f28 <setRelay+0x18>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f6b 	.word	0x08003f6b
 8003f30:	08003f9d 	.word	0x08003f9d
 8003f34:	08003fcf 	.word	0x08003fcf
		case 1:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 1);
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f3e:	4832      	ldr	r0, [pc, #200]	@ (8004008 <setRelay+0xf8>)
 8003f40:	f001 fd58 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8003f44:	2200      	movs	r2, #0
 8003f46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f4a:	482f      	ldr	r0, [pc, #188]	@ (8004008 <setRelay+0xf8>)
 8003f4c:	f001 fd52 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8003f50:	2200      	movs	r2, #0
 8003f52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f56:	482c      	ldr	r0, [pc, #176]	@ (8004008 <setRelay+0xf8>)
 8003f58:	f001 fd4c 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f62:	482a      	ldr	r0, [pc, #168]	@ (800400c <setRelay+0xfc>)
 8003f64:	f001 fd46 	bl	80059f4 <HAL_GPIO_WritePin>
			break;
 8003f68:	e04b      	b.n	8004002 <setRelay+0xf2>

		case 2:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f70:	4825      	ldr	r0, [pc, #148]	@ (8004008 <setRelay+0xf8>)
 8003f72:	f001 fd3f 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 1);
 8003f76:	2201      	movs	r2, #1
 8003f78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f7c:	4822      	ldr	r0, [pc, #136]	@ (8004008 <setRelay+0xf8>)
 8003f7e:	f001 fd39 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f88:	481f      	ldr	r0, [pc, #124]	@ (8004008 <setRelay+0xf8>)
 8003f8a:	f001 fd33 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f94:	481d      	ldr	r0, [pc, #116]	@ (800400c <setRelay+0xfc>)
 8003f96:	f001 fd2d 	bl	80059f4 <HAL_GPIO_WritePin>
			break;
 8003f9a:	e032      	b.n	8004002 <setRelay+0xf2>

		case 3:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fa2:	4819      	ldr	r0, [pc, #100]	@ (8004008 <setRelay+0xf8>)
 8003fa4:	f001 fd26 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fae:	4816      	ldr	r0, [pc, #88]	@ (8004008 <setRelay+0xf8>)
 8003fb0:	f001 fd20 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 1);
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fba:	4813      	ldr	r0, [pc, #76]	@ (8004008 <setRelay+0xf8>)
 8003fbc:	f001 fd1a 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003fc6:	4811      	ldr	r0, [pc, #68]	@ (800400c <setRelay+0xfc>)
 8003fc8:	f001 fd14 	bl	80059f4 <HAL_GPIO_WritePin>
			break;
 8003fcc:	e019      	b.n	8004002 <setRelay+0xf2>

		case 4:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fd4:	480c      	ldr	r0, [pc, #48]	@ (8004008 <setRelay+0xf8>)
 8003fd6:	f001 fd0d 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fe0:	4809      	ldr	r0, [pc, #36]	@ (8004008 <setRelay+0xf8>)
 8003fe2:	f001 fd07 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fec:	4806      	ldr	r0, [pc, #24]	@ (8004008 <setRelay+0xf8>)
 8003fee:	f001 fd01 	bl	80059f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 1);
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ff8:	4804      	ldr	r0, [pc, #16]	@ (800400c <setRelay+0xfc>)
 8003ffa:	f001 fcfb 	bl	80059f4 <HAL_GPIO_WritePin>
			break;
 8003ffe:	e000      	b.n	8004002 <setRelay+0xf2>

		default:
			return;
 8004000:	bf00      	nop
	}
}
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40020800 	.word	0x40020800
 800400c:	40020400 	.word	0x40020400

08004010 <microDelay>:
#include "gpio.h"
#include "tim.h"


void microDelay(uint16_t delay)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 800401a:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <microDelay+0x30>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8004022:	bf00      	nop
 8004024:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <microDelay+0x30>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	429a      	cmp	r2, r3
 800402e:	d3f9      	bcc.n	8004024 <microDelay+0x14>
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000f2c 	.word	0x20000f2c

08004044 <getHX711>:

int32_t getHX711(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 800404e:	f000 fe27 	bl	8004ca0 <HAL_GetTick>
 8004052:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8004054:	e008      	b.n	8004068 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8004056:	f000 fe23 	bl	8004ca0 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2bc8      	cmp	r3, #200	@ 0xc8
 8004062:	d901      	bls.n	8004068 <getHX711+0x24>
      return 0;
 8004064:	2300      	movs	r3, #0
 8004066:	e04b      	b.n	8004100 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8004068:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800406c:	4826      	ldr	r0, [pc, #152]	@ (8004108 <getHX711+0xc4>)
 800406e:	f001 fca9 	bl	80059c4 <HAL_GPIO_ReadPin>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d0ee      	beq.n	8004056 <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8004078:	2300      	movs	r3, #0
 800407a:	72fb      	strb	r3, [r7, #11]
 800407c:	e025      	b.n	80040ca <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 800407e:	2201      	movs	r2, #1
 8004080:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004084:	4821      	ldr	r0, [pc, #132]	@ (800410c <getHX711+0xc8>)
 8004086:	f001 fcb5 	bl	80059f4 <HAL_GPIO_WritePin>
    microDelay(1);
 800408a:	2001      	movs	r0, #1
 800408c:	f7ff ffc0 	bl	8004010 <microDelay>
    data = data << 1;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8004096:	2200      	movs	r2, #0
 8004098:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800409c:	481b      	ldr	r0, [pc, #108]	@ (800410c <getHX711+0xc8>)
 800409e:	f001 fca9 	bl	80059f4 <HAL_GPIO_WritePin>
    microDelay(1);
 80040a2:	2001      	movs	r0, #1
 80040a4:	f7ff ffb4 	bl	8004010 <microDelay>
    if(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 80040a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040ac:	4816      	ldr	r0, [pc, #88]	@ (8004108 <getHX711+0xc4>)
 80040ae:	f001 fc89 	bl	80059c4 <HAL_GPIO_ReadPin>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d102      	bne.n	80040be <getHX711+0x7a>
      data ++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 80040be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	72fb      	strb	r3, [r7, #11]
 80040ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80040ce:	2b17      	cmp	r3, #23
 80040d0:	ddd5      	ble.n	800407e <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80040d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 80040da:	2201      	movs	r2, #1
 80040dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040e0:	480a      	ldr	r0, [pc, #40]	@ (800410c <getHX711+0xc8>)
 80040e2:	f001 fc87 	bl	80059f4 <HAL_GPIO_WritePin>
  microDelay(1);
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7ff ff92 	bl	8004010 <microDelay>
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 80040ec:	2200      	movs	r2, #0
 80040ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040f2:	4806      	ldr	r0, [pc, #24]	@ (800410c <getHX711+0xc8>)
 80040f4:	f001 fc7e 	bl	80059f4 <HAL_GPIO_WritePin>
  microDelay(1);
 80040f8:	2001      	movs	r0, #1
 80040fa:	f7ff ff89 	bl	8004010 <microDelay>
  return data;
 80040fe:	68fb      	ldr	r3, [r7, #12]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40020000 	.word	0x40020000
 800410c:	40020400 	.word	0x40020400

08004110 <weigh>:

int weigh(uint32_t tare, float calFactor)
{
 8004110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004114:	b088      	sub	sp, #32
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	ed87 0a00 	vstr	s0, [r7]
  int64_t  total = 0;
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 800412a:	2332      	movs	r3, #50	@ 0x32
 800412c:	613b      	str	r3, [r7, #16]

  int milligram = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
  int32_t average = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	82fb      	strh	r3, [r7, #22]
 800413a:	e010      	b.n	800415e <weigh+0x4e>
  {
      total += getHX711();
 800413c:	f7ff ff82 	bl	8004044 <getHX711>
 8004140:	4603      	mov	r3, r0
 8004142:	17da      	asrs	r2, r3, #31
 8004144:	461c      	mov	r4, r3
 8004146:	4615      	mov	r5, r2
 8004148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800414c:	eb12 0804 	adds.w	r8, r2, r4
 8004150:	eb43 0905 	adc.w	r9, r3, r5
 8004154:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8004158:	8afb      	ldrh	r3, [r7, #22]
 800415a:	3301      	adds	r3, #1
 800415c:	82fb      	strh	r3, [r7, #22]
 800415e:	8afb      	ldrh	r3, [r7, #22]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	429a      	cmp	r2, r3
 8004164:	dcea      	bgt.n	800413c <weigh+0x2c>
  }
  average = (int32_t)(total / samples);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	17da      	asrs	r2, r3, #31
 800416a:	469a      	mov	sl, r3
 800416c:	4693      	mov	fp, r2
 800416e:	4652      	mov	r2, sl
 8004170:	465b      	mov	r3, fp
 8004172:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004176:	f7fc fdb7 	bl	8000ce8 <__aeabi_ldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4613      	mov	r3, r2
 8004180:	60bb      	str	r3, [r7, #8]
  milligram = (int)(average - tare)*calFactor;
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004190:	edd7 7a00 	vldr	s15, [r7]
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800419c:	ee17 3a90 	vmov	r3, s15
 80041a0:	60fb      	str	r3, [r7, #12]
  return milligram;
 80041a2:	68fb      	ldr	r3, [r7, #12]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3720      	adds	r7, #32
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041ae <weighRaw>:

int32_t weighRaw()
{
 80041ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
  int64_t  	total = 0;
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  	samples = 50;
 80041c2:	2332      	movs	r3, #50	@ 0x32
 80041c4:	60bb      	str	r3, [r7, #8]
  int32_t 	average = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]

  for(uint16_t i=0 ; i<samples ; i++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	81fb      	strh	r3, [r7, #14]
 80041ce:	e010      	b.n	80041f2 <weighRaw+0x44>
  {
      total += getHX711();
 80041d0:	f7ff ff38 	bl	8004044 <getHX711>
 80041d4:	4603      	mov	r3, r0
 80041d6:	17da      	asrs	r2, r3, #31
 80041d8:	461c      	mov	r4, r3
 80041da:	4615      	mov	r5, r2
 80041dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041e0:	eb12 0804 	adds.w	r8, r2, r4
 80041e4:	eb43 0905 	adc.w	r9, r3, r5
 80041e8:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 80041ec:	89fb      	ldrh	r3, [r7, #14]
 80041ee:	3301      	adds	r3, #1
 80041f0:	81fb      	strh	r3, [r7, #14]
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	dcea      	bgt.n	80041d0 <weighRaw+0x22>
  }
  average = (int32_t)(total / samples);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	17da      	asrs	r2, r3, #31
 80041fe:	469a      	mov	sl, r3
 8004200:	4693      	mov	fp, r2
 8004202:	4652      	mov	r2, sl
 8004204:	465b      	mov	r3, fp
 8004206:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800420a:	f7fc fd6d 	bl	8000ce8 <__aeabi_ldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4613      	mov	r3, r2
 8004214:	607b      	str	r3, [r7, #4]
  return average;
 8004216:	687b      	ldr	r3, [r7, #4]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004222 <weighRawTare>:

int32_t weighRawTare(uint32_t tare)
{
 8004222:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  int64_t  	total = 0;
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  	samples = 50;
 8004238:	2332      	movs	r3, #50	@ 0x32
 800423a:	613b      	str	r3, [r7, #16]
  int32_t 	average = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  int32_t 	avgTare = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 8004244:	2300      	movs	r3, #0
 8004246:	82fb      	strh	r3, [r7, #22]
 8004248:	e010      	b.n	800426c <weighRawTare+0x4a>
  {
      total += getHX711();
 800424a:	f7ff fefb 	bl	8004044 <getHX711>
 800424e:	4603      	mov	r3, r0
 8004250:	17da      	asrs	r2, r3, #31
 8004252:	461c      	mov	r4, r3
 8004254:	4615      	mov	r5, r2
 8004256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800425a:	eb12 0804 	adds.w	r8, r2, r4
 800425e:	eb43 0905 	adc.w	r9, r3, r5
 8004262:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8004266:	8afb      	ldrh	r3, [r7, #22]
 8004268:	3301      	adds	r3, #1
 800426a:	82fb      	strh	r3, [r7, #22]
 800426c:	8afb      	ldrh	r3, [r7, #22]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	429a      	cmp	r2, r3
 8004272:	dcea      	bgt.n	800424a <weighRawTare+0x28>
  }
  average = (int32_t)(total / samples);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	17da      	asrs	r2, r3, #31
 8004278:	469a      	mov	sl, r3
 800427a:	4693      	mov	fp, r2
 800427c:	4652      	mov	r2, sl
 800427e:	465b      	mov	r3, fp
 8004280:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004284:	f7fc fd30 	bl	8000ce8 <__aeabi_ldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4613      	mov	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  avgTare = average - tare;
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	60bb      	str	r3, [r7, #8]
  return avgTare;
 8004298:	68bb      	ldr	r3, [r7, #8]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a4:	0000      	movs	r0, r0
	...

080042a8 <getCalFactor>:

float getCalFactor(uint32_t knownHX711){
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	float cal = 20000.0 / knownHX711;
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fc f957 	bl	8000564 <__aeabi_ui2d>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	a10b      	add	r1, pc, #44	@ (adr r1, 80042e8 <getCalFactor+0x40>)
 80042bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042c0:	f7fc faf4 	bl	80008ac <__aeabi_ddiv>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f7fc fcbc 	bl	8000c48 <__aeabi_d2f>
 80042d0:	4603      	mov	r3, r0
 80042d2:	60fb      	str	r3, [r7, #12]
	return cal;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	ee07 3a90 	vmov	s15, r3
}
 80042da:	eeb0 0a67 	vmov.f32	s0, s15
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	f3af 8000 	nop.w
 80042e8:	00000000 	.word	0x00000000
 80042ec:	40d38800 	.word	0x40d38800

080042f0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80042f4:	4b17      	ldr	r3, [pc, #92]	@ (8004354 <MX_SPI1_Init+0x64>)
 80042f6:	4a18      	ldr	r2, [pc, #96]	@ (8004358 <MX_SPI1_Init+0x68>)
 80042f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042fa:	4b16      	ldr	r3, [pc, #88]	@ (8004354 <MX_SPI1_Init+0x64>)
 80042fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004300:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004302:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <MX_SPI1_Init+0x64>)
 8004304:	2200      	movs	r2, #0
 8004306:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004308:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <MX_SPI1_Init+0x64>)
 800430a:	2200      	movs	r2, #0
 800430c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800430e:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <MX_SPI1_Init+0x64>)
 8004310:	2200      	movs	r2, #0
 8004312:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004314:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <MX_SPI1_Init+0x64>)
 8004316:	2200      	movs	r2, #0
 8004318:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800431a:	4b0e      	ldr	r3, [pc, #56]	@ (8004354 <MX_SPI1_Init+0x64>)
 800431c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004320:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004322:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <MX_SPI1_Init+0x64>)
 8004324:	2200      	movs	r2, #0
 8004326:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004328:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <MX_SPI1_Init+0x64>)
 800432a:	2200      	movs	r2, #0
 800432c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800432e:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <MX_SPI1_Init+0x64>)
 8004330:	2200      	movs	r2, #0
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004334:	4b07      	ldr	r3, [pc, #28]	@ (8004354 <MX_SPI1_Init+0x64>)
 8004336:	2200      	movs	r2, #0
 8004338:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <MX_SPI1_Init+0x64>)
 800433c:	220a      	movs	r2, #10
 800433e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004340:	4804      	ldr	r0, [pc, #16]	@ (8004354 <MX_SPI1_Init+0x64>)
 8004342:	f002 f8eb 	bl	800651c <HAL_SPI_Init>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800434c:	f7ff f842 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004350:	bf00      	nop
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000e18 	.word	0x20000e18
 8004358:	40013000 	.word	0x40013000

0800435c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004360:	4b17      	ldr	r3, [pc, #92]	@ (80043c0 <MX_SPI2_Init+0x64>)
 8004362:	4a18      	ldr	r2, [pc, #96]	@ (80043c4 <MX_SPI2_Init+0x68>)
 8004364:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004366:	4b16      	ldr	r3, [pc, #88]	@ (80043c0 <MX_SPI2_Init+0x64>)
 8004368:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800436c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800436e:	4b14      	ldr	r3, [pc, #80]	@ (80043c0 <MX_SPI2_Init+0x64>)
 8004370:	2200      	movs	r2, #0
 8004372:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004374:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <MX_SPI2_Init+0x64>)
 8004376:	2200      	movs	r2, #0
 8004378:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800437a:	4b11      	ldr	r3, [pc, #68]	@ (80043c0 <MX_SPI2_Init+0x64>)
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004380:	4b0f      	ldr	r3, [pc, #60]	@ (80043c0 <MX_SPI2_Init+0x64>)
 8004382:	2200      	movs	r2, #0
 8004384:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004386:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <MX_SPI2_Init+0x64>)
 8004388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800438c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800438e:	4b0c      	ldr	r3, [pc, #48]	@ (80043c0 <MX_SPI2_Init+0x64>)
 8004390:	2200      	movs	r2, #0
 8004392:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004394:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <MX_SPI2_Init+0x64>)
 8004396:	2200      	movs	r2, #0
 8004398:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <MX_SPI2_Init+0x64>)
 800439c:	2200      	movs	r2, #0
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a0:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <MX_SPI2_Init+0x64>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80043a6:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <MX_SPI2_Init+0x64>)
 80043a8:	220a      	movs	r2, #10
 80043aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043ac:	4804      	ldr	r0, [pc, #16]	@ (80043c0 <MX_SPI2_Init+0x64>)
 80043ae:	f002 f8b5 	bl	800651c <HAL_SPI_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80043b8:	f7ff f80c 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000e70 	.word	0x20000e70
 80043c4:	40003800 	.word	0x40003800

080043c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	@ 0x30
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d0:	f107 031c 	add.w	r3, r7, #28
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	60da      	str	r2, [r3, #12]
 80043de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a58      	ldr	r2, [pc, #352]	@ (8004548 <HAL_SPI_MspInit+0x180>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d12c      	bne.n	8004444 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	4b57      	ldr	r3, [pc, #348]	@ (800454c <HAL_SPI_MspInit+0x184>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	4a56      	ldr	r2, [pc, #344]	@ (800454c <HAL_SPI_MspInit+0x184>)
 80043f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80043f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80043fa:	4b54      	ldr	r3, [pc, #336]	@ (800454c <HAL_SPI_MspInit+0x184>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	4b50      	ldr	r3, [pc, #320]	@ (800454c <HAL_SPI_MspInit+0x184>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	4a4f      	ldr	r2, [pc, #316]	@ (800454c <HAL_SPI_MspInit+0x184>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6313      	str	r3, [r2, #48]	@ 0x30
 8004416:	4b4d      	ldr	r3, [pc, #308]	@ (800454c <HAL_SPI_MspInit+0x184>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004422:	23e0      	movs	r3, #224	@ 0xe0
 8004424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800442e:	2303      	movs	r3, #3
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004432:	2305      	movs	r3, #5
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004436:	f107 031c 	add.w	r3, r7, #28
 800443a:	4619      	mov	r1, r3
 800443c:	4844      	ldr	r0, [pc, #272]	@ (8004550 <HAL_SPI_MspInit+0x188>)
 800443e:	f001 f92d 	bl	800569c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004442:	e07c      	b.n	800453e <HAL_SPI_MspInit+0x176>
  else if(spiHandle->Instance==SPI2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a42      	ldr	r2, [pc, #264]	@ (8004554 <HAL_SPI_MspInit+0x18c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d177      	bne.n	800453e <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	4b3e      	ldr	r3, [pc, #248]	@ (800454c <HAL_SPI_MspInit+0x184>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	4a3d      	ldr	r2, [pc, #244]	@ (800454c <HAL_SPI_MspInit+0x184>)
 8004458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800445c:	6413      	str	r3, [r2, #64]	@ 0x40
 800445e:	4b3b      	ldr	r3, [pc, #236]	@ (800454c <HAL_SPI_MspInit+0x184>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	4b37      	ldr	r3, [pc, #220]	@ (800454c <HAL_SPI_MspInit+0x184>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	4a36      	ldr	r2, [pc, #216]	@ (800454c <HAL_SPI_MspInit+0x184>)
 8004474:	f043 0304 	orr.w	r3, r3, #4
 8004478:	6313      	str	r3, [r2, #48]	@ 0x30
 800447a:	4b34      	ldr	r3, [pc, #208]	@ (800454c <HAL_SPI_MspInit+0x184>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	4b30      	ldr	r3, [pc, #192]	@ (800454c <HAL_SPI_MspInit+0x184>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	4a2f      	ldr	r2, [pc, #188]	@ (800454c <HAL_SPI_MspInit+0x184>)
 8004490:	f043 0302 	orr.w	r3, r3, #2
 8004494:	6313      	str	r3, [r2, #48]	@ 0x30
 8004496:	4b2d      	ldr	r3, [pc, #180]	@ (800454c <HAL_SPI_MspInit+0x184>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044a2:	2308      	movs	r3, #8
 80044a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ae:	2303      	movs	r3, #3
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044b2:	2305      	movs	r3, #5
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044b6:	f107 031c 	add.w	r3, r7, #28
 80044ba:	4619      	mov	r1, r3
 80044bc:	4826      	ldr	r0, [pc, #152]	@ (8004558 <HAL_SPI_MspInit+0x190>)
 80044be:	f001 f8ed 	bl	800569c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80044c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c8:	2302      	movs	r3, #2
 80044ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d0:	2303      	movs	r3, #3
 80044d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044d4:	2305      	movs	r3, #5
 80044d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d8:	f107 031c 	add.w	r3, r7, #28
 80044dc:	4619      	mov	r1, r3
 80044de:	481f      	ldr	r0, [pc, #124]	@ (800455c <HAL_SPI_MspInit+0x194>)
 80044e0:	f001 f8dc 	bl	800569c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80044e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 80044e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004564 <HAL_SPI_MspInit+0x19c>)
 80044e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80044ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 80044f2:	2240      	movs	r2, #64	@ 0x40
 80044f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044fc:	4b18      	ldr	r3, [pc, #96]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 80044fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004502:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004504:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 8004506:	2200      	movs	r2, #0
 8004508:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800450a:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 800450c:	2200      	movs	r2, #0
 800450e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004510:	4b13      	ldr	r3, [pc, #76]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 8004512:	2200      	movs	r2, #0
 8004514:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004516:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 8004518:	2200      	movs	r2, #0
 800451a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800451c:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 800451e:	2200      	movs	r2, #0
 8004520:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004522:	480f      	ldr	r0, [pc, #60]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 8004524:	f000 fd4a 	bl	8004fbc <HAL_DMA_Init>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 800452e:	f7fe ff51 	bl	80033d4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 8004536:	649a      	str	r2, [r3, #72]	@ 0x48
 8004538:	4a09      	ldr	r2, [pc, #36]	@ (8004560 <HAL_SPI_MspInit+0x198>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800453e:	bf00      	nop
 8004540:	3730      	adds	r7, #48	@ 0x30
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40013000 	.word	0x40013000
 800454c:	40023800 	.word	0x40023800
 8004550:	40020000 	.word	0x40020000
 8004554:	40003800 	.word	0x40003800
 8004558:	40020800 	.word	0x40020800
 800455c:	40020400 	.word	0x40020400
 8004560:	20000ec8 	.word	0x20000ec8
 8004564:	40026070 	.word	0x40026070

08004568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	4b10      	ldr	r3, [pc, #64]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004576:	4a0f      	ldr	r2, [pc, #60]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800457c:	6453      	str	r3, [r2, #68]	@ 0x44
 800457e:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	603b      	str	r3, [r7, #0]
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	4a08      	ldr	r2, [pc, #32]	@ (80045b4 <HAL_MspInit+0x4c>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	@ 0x40
 800459a:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <HAL_MspInit+0x4c>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800

080045b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045bc:	bf00      	nop
 80045be:	e7fd      	b.n	80045bc <NMI_Handler+0x4>

080045c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045c4:	bf00      	nop
 80045c6:	e7fd      	b.n	80045c4 <HardFault_Handler+0x4>

080045c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <MemManage_Handler+0x4>

080045d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045d4:	bf00      	nop
 80045d6:	e7fd      	b.n	80045d4 <BusFault_Handler+0x4>

080045d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <UsageFault_Handler+0x4>

080045e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045f2:	bf00      	nop
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800460e:	f000 fb33 	bl	8004c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}

08004616 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_BTN_Pin);
 800461a:	2002      	movs	r0, #2
 800461c:	f001 fa04 	bl	8005a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004620:	bf00      	nop
 8004622:	bd80      	pop	{r7, pc}

08004624 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CONFIRM_BTN_Pin);
 8004628:	2004      	movs	r0, #4
 800462a:	f001 f9fd 	bl	8005a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004638:	4802      	ldr	r0, [pc, #8]	@ (8004644 <DMA1_Stream4_IRQHandler+0x10>)
 800463a:	f000 fdc5 	bl	80051c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000ec8 	.word	0x20000ec8

08004648 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800464c:	4802      	ldr	r0, [pc, #8]	@ (8004658 <TIM3_IRQHandler+0x10>)
 800464e:	f002 fe56 	bl	80072fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000f74 	.word	0x20000f74

0800465c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004660:	4802      	ldr	r0, [pc, #8]	@ (800466c <TIM4_IRQHandler+0x10>)
 8004662:	f002 fe4c 	bl	80072fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000fbc 	.word	0x20000fbc

08004670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return 1;
 8004674:	2301      	movs	r3, #1
}
 8004676:	4618      	mov	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <_kill>:

int _kill(int pid, int sig)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800468a:	f008 fba3 	bl	800cdd4 <__errno>
 800468e:	4603      	mov	r3, r0
 8004690:	2216      	movs	r2, #22
 8004692:	601a      	str	r2, [r3, #0]
  return -1;
 8004694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <_exit>:

void _exit (int status)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046a8:	f04f 31ff 	mov.w	r1, #4294967295
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff ffe7 	bl	8004680 <_kill>
  while (1) {}    /* Make sure we hang here */
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <_exit+0x12>

080046b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e00a      	b.n	80046de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046c8:	f7ff f968 	bl	800399c <__io_getchar>
 80046cc:	4601      	mov	r1, r0
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	60ba      	str	r2, [r7, #8]
 80046d4:	b2ca      	uxtb	r2, r1
 80046d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	3301      	adds	r3, #1
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	dbf0      	blt.n	80046c8 <_read+0x12>
  }

  return len;
 80046e6:	687b      	ldr	r3, [r7, #4]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004718:	605a      	str	r2, [r3, #4]
  return 0;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <_isatty>:

int _isatty(int file)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004730:	2301      	movs	r3, #1
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004760:	4a14      	ldr	r2, [pc, #80]	@ (80047b4 <_sbrk+0x5c>)
 8004762:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <_sbrk+0x60>)
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800476c:	4b13      	ldr	r3, [pc, #76]	@ (80047bc <_sbrk+0x64>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004774:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <_sbrk+0x64>)
 8004776:	4a12      	ldr	r2, [pc, #72]	@ (80047c0 <_sbrk+0x68>)
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800477a:	4b10      	ldr	r3, [pc, #64]	@ (80047bc <_sbrk+0x64>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	429a      	cmp	r2, r3
 8004786:	d207      	bcs.n	8004798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004788:	f008 fb24 	bl	800cdd4 <__errno>
 800478c:	4603      	mov	r3, r0
 800478e:	220c      	movs	r2, #12
 8004790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
 8004796:	e009      	b.n	80047ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004798:	4b08      	ldr	r3, [pc, #32]	@ (80047bc <_sbrk+0x64>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800479e:	4b07      	ldr	r3, [pc, #28]	@ (80047bc <_sbrk+0x64>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	4a05      	ldr	r2, [pc, #20]	@ (80047bc <_sbrk+0x64>)
 80047a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20020000 	.word	0x20020000
 80047b8:	00000400 	.word	0x00000400
 80047bc:	20000f28 	.word	0x20000f28
 80047c0:	200011e8 	.word	0x200011e8

080047c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047c8:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <SystemInit+0x20>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	4a05      	ldr	r2, [pc, #20]	@ (80047e4 <SystemInit+0x20>)
 80047d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047ee:	f107 0308 	add.w	r3, r7, #8
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	609a      	str	r2, [r3, #8]
 80047fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047fc:	463b      	mov	r3, r7
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004804:	4b1d      	ldr	r3, [pc, #116]	@ (800487c <MX_TIM2_Init+0x94>)
 8004806:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800480a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800480c:	4b1b      	ldr	r3, [pc, #108]	@ (800487c <MX_TIM2_Init+0x94>)
 800480e:	2207      	movs	r2, #7
 8004810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004812:	4b1a      	ldr	r3, [pc, #104]	@ (800487c <MX_TIM2_Init+0x94>)
 8004814:	2200      	movs	r2, #0
 8004816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004818:	4b18      	ldr	r3, [pc, #96]	@ (800487c <MX_TIM2_Init+0x94>)
 800481a:	f04f 32ff 	mov.w	r2, #4294967295
 800481e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004820:	4b16      	ldr	r3, [pc, #88]	@ (800487c <MX_TIM2_Init+0x94>)
 8004822:	2200      	movs	r2, #0
 8004824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004826:	4b15      	ldr	r3, [pc, #84]	@ (800487c <MX_TIM2_Init+0x94>)
 8004828:	2200      	movs	r2, #0
 800482a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800482c:	4813      	ldr	r0, [pc, #76]	@ (800487c <MX_TIM2_Init+0x94>)
 800482e:	f002 fc0f 	bl	8007050 <HAL_TIM_Base_Init>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004838:	f7fe fdcc 	bl	80033d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800483c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004842:	f107 0308 	add.w	r3, r7, #8
 8004846:	4619      	mov	r1, r3
 8004848:	480c      	ldr	r0, [pc, #48]	@ (800487c <MX_TIM2_Init+0x94>)
 800484a:	f002 fe48 	bl	80074de <HAL_TIM_ConfigClockSource>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004854:	f7fe fdbe 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004858:	2300      	movs	r3, #0
 800485a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800485c:	2300      	movs	r3, #0
 800485e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004860:	463b      	mov	r3, r7
 8004862:	4619      	mov	r1, r3
 8004864:	4805      	ldr	r0, [pc, #20]	@ (800487c <MX_TIM2_Init+0x94>)
 8004866:	f003 f86f 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004870:	f7fe fdb0 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004874:	bf00      	nop
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000f2c 	.word	0x20000f2c

08004880 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	609a      	str	r2, [r3, #8]
 8004892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004894:	463b      	mov	r3, r7
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800489c:	4b23      	ldr	r3, [pc, #140]	@ (800492c <MX_TIM3_Init+0xac>)
 800489e:	4a24      	ldr	r2, [pc, #144]	@ (8004930 <MX_TIM3_Init+0xb0>)
 80048a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 80048a2:	4b22      	ldr	r3, [pc, #136]	@ (800492c <MX_TIM3_Init+0xac>)
 80048a4:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80048a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048aa:	4b20      	ldr	r3, [pc, #128]	@ (800492c <MX_TIM3_Init+0xac>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19000 - 1;
 80048b0:	4b1e      	ldr	r3, [pc, #120]	@ (800492c <MX_TIM3_Init+0xac>)
 80048b2:	f644 2237 	movw	r2, #18999	@ 0x4a37
 80048b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b8:	4b1c      	ldr	r3, [pc, #112]	@ (800492c <MX_TIM3_Init+0xac>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048be:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <MX_TIM3_Init+0xac>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80048c4:	4819      	ldr	r0, [pc, #100]	@ (800492c <MX_TIM3_Init+0xac>)
 80048c6:	f002 fbc3 	bl	8007050 <HAL_TIM_Base_Init>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80048d0:	f7fe fd80 	bl	80033d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80048da:	f107 0308 	add.w	r3, r7, #8
 80048de:	4619      	mov	r1, r3
 80048e0:	4812      	ldr	r0, [pc, #72]	@ (800492c <MX_TIM3_Init+0xac>)
 80048e2:	f002 fdfc 	bl	80074de <HAL_TIM_ConfigClockSource>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80048ec:	f7fe fd72 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048f0:	2300      	movs	r3, #0
 80048f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048f8:	463b      	mov	r3, r7
 80048fa:	4619      	mov	r1, r3
 80048fc:	480b      	ldr	r0, [pc, #44]	@ (800492c <MX_TIM3_Init+0xac>)
 80048fe:	f003 f823 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004908:	f7fe fd64 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  __HAL_TIM_SET_COUNTER(&htim3, 0);           // Reset counter
 800490c:	4b07      	ldr	r3, [pc, #28]	@ (800492c <MX_TIM3_Init+0xac>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Stop_IT(&htim3);               // Ensure it's stopped and not running from startup
 8004914:	4805      	ldr	r0, [pc, #20]	@ (800492c <MX_TIM3_Init+0xac>)
 8004916:	f002 fcc3 	bl	80072a0 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE); // Clear any pending update events
 800491a:	4b04      	ldr	r3, [pc, #16]	@ (800492c <MX_TIM3_Init+0xac>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f06f 0201 	mvn.w	r2, #1
 8004922:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM3_Init 2 */

}
 8004924:	bf00      	nop
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000f74 	.word	0x20000f74
 8004930:	40000400 	.word	0x40000400

08004934 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	609a      	str	r2, [r3, #8]
 8004946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004948:	463b      	mov	r3, r7
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004950:	4b23      	ldr	r3, [pc, #140]	@ (80049e0 <MX_TIM4_Init+0xac>)
 8004952:	4a24      	ldr	r2, [pc, #144]	@ (80049e4 <MX_TIM4_Init+0xb0>)
 8004954:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6400 - 1;
 8004956:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <MX_TIM4_Init+0xac>)
 8004958:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800495c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800495e:	4b20      	ldr	r3, [pc, #128]	@ (80049e0 <MX_TIM4_Init+0xac>)
 8004960:	2200      	movs	r2, #0
 8004962:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1135 - 1;
 8004964:	4b1e      	ldr	r3, [pc, #120]	@ (80049e0 <MX_TIM4_Init+0xac>)
 8004966:	f240 426e 	movw	r2, #1134	@ 0x46e
 800496a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800496c:	4b1c      	ldr	r3, [pc, #112]	@ (80049e0 <MX_TIM4_Init+0xac>)
 800496e:	2200      	movs	r2, #0
 8004970:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004972:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <MX_TIM4_Init+0xac>)
 8004974:	2200      	movs	r2, #0
 8004976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004978:	4819      	ldr	r0, [pc, #100]	@ (80049e0 <MX_TIM4_Init+0xac>)
 800497a:	f002 fb69 	bl	8007050 <HAL_TIM_Base_Init>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004984:	f7fe fd26 	bl	80033d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800498c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800498e:	f107 0308 	add.w	r3, r7, #8
 8004992:	4619      	mov	r1, r3
 8004994:	4812      	ldr	r0, [pc, #72]	@ (80049e0 <MX_TIM4_Init+0xac>)
 8004996:	f002 fda2 	bl	80074de <HAL_TIM_ConfigClockSource>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80049a0:	f7fe fd18 	bl	80033d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049a4:	2300      	movs	r3, #0
 80049a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80049ac:	463b      	mov	r3, r7
 80049ae:	4619      	mov	r1, r3
 80049b0:	480b      	ldr	r0, [pc, #44]	@ (80049e0 <MX_TIM4_Init+0xac>)
 80049b2:	f002 ffc9 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80049bc:	f7fe fd0a 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  __HAL_TIM_SET_COUNTER(&htim4, 0);           // Reset counter
 80049c0:	4b07      	ldr	r3, [pc, #28]	@ (80049e0 <MX_TIM4_Init+0xac>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2200      	movs	r2, #0
 80049c6:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Stop_IT(&htim4);               // Ensure it's stopped and not running from startup
 80049c8:	4805      	ldr	r0, [pc, #20]	@ (80049e0 <MX_TIM4_Init+0xac>)
 80049ca:	f002 fc69 	bl	80072a0 <HAL_TIM_Base_Stop_IT>
    __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE); // Clear any pending update events
 80049ce:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <MX_TIM4_Init+0xac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0201 	mvn.w	r2, #1
 80049d6:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM4_Init 2 */

}
 80049d8:	bf00      	nop
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000fbc 	.word	0x20000fbc
 80049e4:	40000800 	.word	0x40000800

080049e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f8:	d10e      	bne.n	8004a18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	4b24      	ldr	r3, [pc, #144]	@ (8004a90 <HAL_TIM_Base_MspInit+0xa8>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	4a23      	ldr	r2, [pc, #140]	@ (8004a90 <HAL_TIM_Base_MspInit+0xa8>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a0a:	4b21      	ldr	r3, [pc, #132]	@ (8004a90 <HAL_TIM_Base_MspInit+0xa8>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004a16:	e036      	b.n	8004a86 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <HAL_TIM_Base_MspInit+0xac>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d116      	bne.n	8004a50 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	4b1a      	ldr	r3, [pc, #104]	@ (8004a90 <HAL_TIM_Base_MspInit+0xa8>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	4a19      	ldr	r2, [pc, #100]	@ (8004a90 <HAL_TIM_Base_MspInit+0xa8>)
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a32:	4b17      	ldr	r3, [pc, #92]	@ (8004a90 <HAL_TIM_Base_MspInit+0xa8>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2100      	movs	r1, #0
 8004a42:	201d      	movs	r0, #29
 8004a44:	f000 fa71 	bl	8004f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a48:	201d      	movs	r0, #29
 8004a4a:	f000 fa8a 	bl	8004f62 <HAL_NVIC_EnableIRQ>
}
 8004a4e:	e01a      	b.n	8004a86 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a10      	ldr	r2, [pc, #64]	@ (8004a98 <HAL_TIM_Base_MspInit+0xb0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d115      	bne.n	8004a86 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <HAL_TIM_Base_MspInit+0xa8>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	4a0b      	ldr	r2, [pc, #44]	@ (8004a90 <HAL_TIM_Base_MspInit+0xa8>)
 8004a64:	f043 0304 	orr.w	r3, r3, #4
 8004a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a6a:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <HAL_TIM_Base_MspInit+0xa8>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004a76:	2200      	movs	r2, #0
 8004a78:	2100      	movs	r1, #0
 8004a7a:	201e      	movs	r0, #30
 8004a7c:	f000 fa55 	bl	8004f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004a80:	201e      	movs	r0, #30
 8004a82:	f000 fa6e 	bl	8004f62 <HAL_NVIC_EnableIRQ>
}
 8004a86:	bf00      	nop
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800

08004a9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004aa0:	4b11      	ldr	r3, [pc, #68]	@ (8004ae8 <MX_USART2_UART_Init+0x4c>)
 8004aa2:	4a12      	ldr	r2, [pc, #72]	@ (8004aec <MX_USART2_UART_Init+0x50>)
 8004aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004aa6:	4b10      	ldr	r3, [pc, #64]	@ (8004ae8 <MX_USART2_UART_Init+0x4c>)
 8004aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004aae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <MX_USART2_UART_Init+0x4c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <MX_USART2_UART_Init+0x4c>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004aba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <MX_USART2_UART_Init+0x4c>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ac0:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <MX_USART2_UART_Init+0x4c>)
 8004ac2:	220c      	movs	r2, #12
 8004ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ac6:	4b08      	ldr	r3, [pc, #32]	@ (8004ae8 <MX_USART2_UART_Init+0x4c>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <MX_USART2_UART_Init+0x4c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ad2:	4805      	ldr	r0, [pc, #20]	@ (8004ae8 <MX_USART2_UART_Init+0x4c>)
 8004ad4:	f002 ffc8 	bl	8007a68 <HAL_UART_Init>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004ade:	f7fe fc79 	bl	80033d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20001004 	.word	0x20001004
 8004aec:	40004400 	.word	0x40004400

08004af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	@ 0x28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <HAL_UART_MspInit+0x84>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d12b      	bne.n	8004b6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	4b18      	ldr	r3, [pc, #96]	@ (8004b78 <HAL_UART_MspInit+0x88>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <HAL_UART_MspInit+0x88>)
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b22:	4b15      	ldr	r3, [pc, #84]	@ (8004b78 <HAL_UART_MspInit+0x88>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	4b11      	ldr	r3, [pc, #68]	@ (8004b78 <HAL_UART_MspInit+0x88>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	4a10      	ldr	r2, [pc, #64]	@ (8004b78 <HAL_UART_MspInit+0x88>)
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b78 <HAL_UART_MspInit+0x88>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b56:	2303      	movs	r3, #3
 8004b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b5a:	2307      	movs	r3, #7
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b5e:	f107 0314 	add.w	r3, r7, #20
 8004b62:	4619      	mov	r1, r3
 8004b64:	4805      	ldr	r0, [pc, #20]	@ (8004b7c <HAL_UART_MspInit+0x8c>)
 8004b66:	f000 fd99 	bl	800569c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	3728      	adds	r7, #40	@ 0x28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40004400 	.word	0x40004400
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40020000 	.word	0x40020000

08004b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004bb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004b84:	f7ff fe1e 	bl	80047c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b88:	480c      	ldr	r0, [pc, #48]	@ (8004bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b8a:	490d      	ldr	r1, [pc, #52]	@ (8004bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b90:	e002      	b.n	8004b98 <LoopCopyDataInit>

08004b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b96:	3304      	adds	r3, #4

08004b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b9c:	d3f9      	bcc.n	8004b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8004bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ba4:	e001      	b.n	8004baa <LoopFillZerobss>

08004ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ba8:	3204      	adds	r2, #4

08004baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bac:	d3fb      	bcc.n	8004ba6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004bae:	f008 f917 	bl	800cde0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bb2:	f7fe fb2d 	bl	8003210 <main>
  bx  lr    
 8004bb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bc0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004bc4:	08012618 	.word	0x08012618
  ldr r2, =_sbss
 8004bc8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004bcc:	200011e4 	.word	0x200011e4

08004bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bd0:	e7fe      	b.n	8004bd0 <ADC_IRQHandler>
	...

08004bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c14 <HAL_Init+0x40>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c14 <HAL_Init+0x40>)
 8004bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004be4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <HAL_Init+0x40>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0a      	ldr	r2, [pc, #40]	@ (8004c14 <HAL_Init+0x40>)
 8004bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bf0:	4b08      	ldr	r3, [pc, #32]	@ (8004c14 <HAL_Init+0x40>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a07      	ldr	r2, [pc, #28]	@ (8004c14 <HAL_Init+0x40>)
 8004bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bfc:	2003      	movs	r0, #3
 8004bfe:	f000 f989 	bl	8004f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c02:	200f      	movs	r0, #15
 8004c04:	f000 f808 	bl	8004c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c08:	f7ff fcae 	bl	8004568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023c00 	.word	0x40023c00

08004c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c20:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <HAL_InitTick+0x54>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <HAL_InitTick+0x58>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f9b3 	bl	8004fa2 <HAL_SYSTICK_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e00e      	b.n	8004c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d80a      	bhi.n	8004c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	f000 f969 	bl	8004f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c58:	4a06      	ldr	r2, [pc, #24]	@ (8004c74 <HAL_InitTick+0x5c>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000014 	.word	0x20000014
 8004c70:	2000001c 	.word	0x2000001c
 8004c74:	20000018 	.word	0x20000018

08004c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <HAL_IncTick+0x20>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <HAL_IncTick+0x24>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4413      	add	r3, r2
 8004c88:	4a04      	ldr	r2, [pc, #16]	@ (8004c9c <HAL_IncTick+0x24>)
 8004c8a:	6013      	str	r3, [r2, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	2000001c 	.word	0x2000001c
 8004c9c:	2000104c 	.word	0x2000104c

08004ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ca4:	4b03      	ldr	r3, [pc, #12]	@ (8004cb4 <HAL_GetTick+0x14>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	2000104c 	.word	0x2000104c

08004cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cc0:	f7ff ffee 	bl	8004ca0 <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d005      	beq.n	8004cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <HAL_Delay+0x44>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cde:	bf00      	nop
 8004ce0:	f7ff ffde 	bl	8004ca0 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d8f7      	bhi.n	8004ce0 <HAL_Delay+0x28>
  {
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	2000001c 	.word	0x2000001c

08004d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d10:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <__NVIC_SetPriorityGrouping+0x44>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d32:	4a04      	ldr	r2, [pc, #16]	@ (8004d44 <__NVIC_SetPriorityGrouping+0x44>)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	60d3      	str	r3, [r2, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d4c:	4b04      	ldr	r3, [pc, #16]	@ (8004d60 <__NVIC_GetPriorityGrouping+0x18>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	0a1b      	lsrs	r3, r3, #8
 8004d52:	f003 0307 	and.w	r3, r3, #7
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	db0b      	blt.n	8004d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	f003 021f 	and.w	r2, r3, #31
 8004d7c:	4907      	ldr	r1, [pc, #28]	@ (8004d9c <__NVIC_EnableIRQ+0x38>)
 8004d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	2001      	movs	r0, #1
 8004d86:	fa00 f202 	lsl.w	r2, r0, r2
 8004d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	e000e100 	.word	0xe000e100

08004da0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	db12      	blt.n	8004dd8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	f003 021f 	and.w	r2, r3, #31
 8004db8:	490a      	ldr	r1, [pc, #40]	@ (8004de4 <__NVIC_DisableIRQ+0x44>)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004dc6:	3320      	adds	r3, #32
 8004dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004dcc:	f3bf 8f4f 	dsb	sy
}
 8004dd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004dd2:	f3bf 8f6f 	isb	sy
}
 8004dd6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	e000e100 	.word	0xe000e100

08004de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	6039      	str	r1, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db0a      	blt.n	8004e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	490c      	ldr	r1, [pc, #48]	@ (8004e34 <__NVIC_SetPriority+0x4c>)
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	0112      	lsls	r2, r2, #4
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e10:	e00a      	b.n	8004e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4908      	ldr	r1, [pc, #32]	@ (8004e38 <__NVIC_SetPriority+0x50>)
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	3b04      	subs	r3, #4
 8004e20:	0112      	lsls	r2, r2, #4
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	440b      	add	r3, r1
 8004e26:	761a      	strb	r2, [r3, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	e000e100 	.word	0xe000e100
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b089      	sub	sp, #36	@ 0x24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f1c3 0307 	rsb	r3, r3, #7
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	bf28      	it	cs
 8004e5a:	2304      	movcs	r3, #4
 8004e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d902      	bls.n	8004e6c <NVIC_EncodePriority+0x30>
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3b03      	subs	r3, #3
 8004e6a:	e000      	b.n	8004e6e <NVIC_EncodePriority+0x32>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	401a      	ands	r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e84:	f04f 31ff 	mov.w	r1, #4294967295
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8e:	43d9      	mvns	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	4313      	orrs	r3, r2
         );
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3724      	adds	r7, #36	@ 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004ea8:	f3bf 8f4f 	dsb	sy
}
 8004eac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <__NVIC_SystemReset+0x24>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004eb6:	4904      	ldr	r1, [pc, #16]	@ (8004ec8 <__NVIC_SystemReset+0x24>)
 8004eb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ecc <__NVIC_SystemReset+0x28>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ebe:	f3bf 8f4f 	dsb	sy
}
 8004ec2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <__NVIC_SystemReset+0x20>
 8004ec8:	e000ed00 	.word	0xe000ed00
 8004ecc:	05fa0004 	.word	0x05fa0004

08004ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ee0:	d301      	bcc.n	8004ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e00f      	b.n	8004f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f10 <SysTick_Config+0x40>)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eee:	210f      	movs	r1, #15
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	f7ff ff78 	bl	8004de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <SysTick_Config+0x40>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004efe:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <SysTick_Config+0x40>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	e000e010 	.word	0xe000e010

08004f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff feef 	bl	8004d00 <__NVIC_SetPriorityGrouping>
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	4603      	mov	r3, r0
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f3c:	f7ff ff04 	bl	8004d48 <__NVIC_GetPriorityGrouping>
 8004f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	6978      	ldr	r0, [r7, #20]
 8004f48:	f7ff ff78 	bl	8004e3c <NVIC_EncodePriority>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f52:	4611      	mov	r1, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff ff47 	bl	8004de8 <__NVIC_SetPriority>
}
 8004f5a:	bf00      	nop
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	4603      	mov	r3, r0
 8004f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fef7 	bl	8004d64 <__NVIC_EnableIRQ>
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	4603      	mov	r3, r0
 8004f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff ff07 	bl	8004da0 <__NVIC_DisableIRQ>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004f9e:	f7ff ff81 	bl	8004ea4 <__NVIC_SystemReset>

08004fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ff90 	bl	8004ed0 <SysTick_Config>
 8004fb0:	4603      	mov	r3, r0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fc8:	f7ff fe6a 	bl	8004ca0 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e099      	b.n	800510c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ff8:	e00f      	b.n	800501a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ffa:	f7ff fe51 	bl	8004ca0 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b05      	cmp	r3, #5
 8005006:	d908      	bls.n	800501a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2203      	movs	r2, #3
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e078      	b.n	800510c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e8      	bne.n	8004ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4b38      	ldr	r3, [pc, #224]	@ (8005114 <HAL_DMA_Init+0x158>)
 8005034:	4013      	ands	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800505e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	2b04      	cmp	r3, #4
 8005072:	d107      	bne.n	8005084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507c:	4313      	orrs	r3, r2
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0307 	bic.w	r3, r3, #7
 800509a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d117      	bne.n	80050de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00e      	beq.n	80050de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fa6f 	bl	80055a4 <DMA_CheckFifoParam>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2240      	movs	r2, #64	@ 0x40
 80050d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80050da:	2301      	movs	r3, #1
 80050dc:	e016      	b.n	800510c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa26 	bl	8005538 <DMA_CalcBaseAndBitshift>
 80050ec:	4603      	mov	r3, r0
 80050ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f4:	223f      	movs	r2, #63	@ 0x3f
 80050f6:	409a      	lsls	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	f010803f 	.word	0xf010803f

08005118 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_DMA_Start_IT+0x26>
 800513a:	2302      	movs	r3, #2
 800513c:	e040      	b.n	80051c0 <HAL_DMA_Start_IT+0xa8>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d12f      	bne.n	80051b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f9b8 	bl	80054dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005170:	223f      	movs	r2, #63	@ 0x3f
 8005172:	409a      	lsls	r2, r3
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0216 	orr.w	r2, r2, #22
 8005186:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0208 	orr.w	r2, r2, #8
 800519e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	e005      	b.n	80051be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80051ba:	2302      	movs	r3, #2
 80051bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80051be:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005410 <HAL_DMA_IRQHandler+0x248>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a8e      	ldr	r2, [pc, #568]	@ (8005414 <HAL_DMA_IRQHandler+0x24c>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	0a9b      	lsrs	r3, r3, #10
 80051e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f2:	2208      	movs	r2, #8
 80051f4:	409a      	lsls	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01a      	beq.n	8005234 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0204 	bic.w	r2, r2, #4
 800521a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005220:	2208      	movs	r2, #8
 8005222:	409a      	lsls	r2, r3
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522c:	f043 0201 	orr.w	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005238:	2201      	movs	r2, #1
 800523a:	409a      	lsls	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d012      	beq.n	800526a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00b      	beq.n	800526a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005256:	2201      	movs	r2, #1
 8005258:	409a      	lsls	r2, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005262:	f043 0202 	orr.w	r2, r3, #2
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526e:	2204      	movs	r2, #4
 8005270:	409a      	lsls	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d012      	beq.n	80052a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800528c:	2204      	movs	r2, #4
 800528e:	409a      	lsls	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005298:	f043 0204 	orr.w	r2, r3, #4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a4:	2210      	movs	r2, #16
 80052a6:	409a      	lsls	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d043      	beq.n	8005338 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d03c      	beq.n	8005338 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c2:	2210      	movs	r2, #16
 80052c4:	409a      	lsls	r2, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d018      	beq.n	800530a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d108      	bne.n	80052f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d024      	beq.n	8005338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	4798      	blx	r3
 80052f6:	e01f      	b.n	8005338 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01b      	beq.n	8005338 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	4798      	blx	r3
 8005308:	e016      	b.n	8005338 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d107      	bne.n	8005328 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0208 	bic.w	r2, r2, #8
 8005326:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800533c:	2220      	movs	r2, #32
 800533e:	409a      	lsls	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4013      	ands	r3, r2
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 808f 	beq.w	8005468 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8087 	beq.w	8005468 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535e:	2220      	movs	r2, #32
 8005360:	409a      	lsls	r2, r3
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b05      	cmp	r3, #5
 8005370:	d136      	bne.n	80053e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0216 	bic.w	r2, r2, #22
 8005380:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005390:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d103      	bne.n	80053a2 <HAL_DMA_IRQHandler+0x1da>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0208 	bic.w	r2, r2, #8
 80053b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b6:	223f      	movs	r2, #63	@ 0x3f
 80053b8:	409a      	lsls	r2, r3
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d07e      	beq.n	80054d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
        }
        return;
 80053de:	e079      	b.n	80054d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01d      	beq.n	800542a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10d      	bne.n	8005418 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005400:	2b00      	cmp	r3, #0
 8005402:	d031      	beq.n	8005468 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	4798      	blx	r3
 800540c:	e02c      	b.n	8005468 <HAL_DMA_IRQHandler+0x2a0>
 800540e:	bf00      	nop
 8005410:	20000014 	.word	0x20000014
 8005414:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d023      	beq.n	8005468 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
 8005428:	e01e      	b.n	8005468 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10f      	bne.n	8005458 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0210 	bic.w	r2, r2, #16
 8005446:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546c:	2b00      	cmp	r3, #0
 800546e:	d032      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d022      	beq.n	80054c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2205      	movs	r2, #5
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	3301      	adds	r3, #1
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	429a      	cmp	r2, r3
 800549e:	d307      	bcc.n	80054b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f2      	bne.n	8005494 <HAL_DMA_IRQHandler+0x2cc>
 80054ae:	e000      	b.n	80054b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80054b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
 80054d2:	e000      	b.n	80054d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80054d4:	bf00      	nop
    }
  }
}
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d108      	bne.n	800551c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800551a:	e007      	b.n	800552c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	3b10      	subs	r3, #16
 8005548:	4a14      	ldr	r2, [pc, #80]	@ (800559c <DMA_CalcBaseAndBitshift+0x64>)
 800554a:	fba2 2303 	umull	r2, r3, r2, r3
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005552:	4a13      	ldr	r2, [pc, #76]	@ (80055a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b03      	cmp	r3, #3
 8005564:	d909      	bls.n	800557a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	659a      	str	r2, [r3, #88]	@ 0x58
 8005578:	e007      	b.n	800558a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800558e:	4618      	mov	r0, r3
 8005590:	3714      	adds	r7, #20
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	aaaaaaab 	.word	0xaaaaaaab
 80055a0:	080120fc 	.word	0x080120fc

080055a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d11f      	bne.n	80055fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d856      	bhi.n	8005672 <DMA_CheckFifoParam+0xce>
 80055c4:	a201      	add	r2, pc, #4	@ (adr r2, 80055cc <DMA_CheckFifoParam+0x28>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	080055dd 	.word	0x080055dd
 80055d0:	080055ef 	.word	0x080055ef
 80055d4:	080055dd 	.word	0x080055dd
 80055d8:	08005673 	.word	0x08005673
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d046      	beq.n	8005676 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ec:	e043      	b.n	8005676 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055f6:	d140      	bne.n	800567a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055fc:	e03d      	b.n	800567a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005606:	d121      	bne.n	800564c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b03      	cmp	r3, #3
 800560c:	d837      	bhi.n	800567e <DMA_CheckFifoParam+0xda>
 800560e:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <DMA_CheckFifoParam+0x70>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005625 	.word	0x08005625
 8005618:	0800562b 	.word	0x0800562b
 800561c:	08005625 	.word	0x08005625
 8005620:	0800563d 	.word	0x0800563d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      break;
 8005628:	e030      	b.n	800568c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d025      	beq.n	8005682 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800563a:	e022      	b.n	8005682 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005644:	d11f      	bne.n	8005686 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800564a:	e01c      	b.n	8005686 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d903      	bls.n	800565a <DMA_CheckFifoParam+0xb6>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d003      	beq.n	8005660 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005658:	e018      	b.n	800568c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
      break;
 800565e:	e015      	b.n	800568c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005664:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00e      	beq.n	800568a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      break;
 8005670:	e00b      	b.n	800568a <DMA_CheckFifoParam+0xe6>
      break;
 8005672:	bf00      	nop
 8005674:	e00a      	b.n	800568c <DMA_CheckFifoParam+0xe8>
      break;
 8005676:	bf00      	nop
 8005678:	e008      	b.n	800568c <DMA_CheckFifoParam+0xe8>
      break;
 800567a:	bf00      	nop
 800567c:	e006      	b.n	800568c <DMA_CheckFifoParam+0xe8>
      break;
 800567e:	bf00      	nop
 8005680:	e004      	b.n	800568c <DMA_CheckFifoParam+0xe8>
      break;
 8005682:	bf00      	nop
 8005684:	e002      	b.n	800568c <DMA_CheckFifoParam+0xe8>
      break;   
 8005686:	bf00      	nop
 8005688:	e000      	b.n	800568c <DMA_CheckFifoParam+0xe8>
      break;
 800568a:	bf00      	nop
    }
  } 
  
  return status; 
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop

0800569c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	@ 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	e165      	b.n	8005984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056b8:	2201      	movs	r2, #1
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	f040 8154 	bne.w	800597e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d005      	beq.n	80056ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d130      	bne.n	8005750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	2203      	movs	r2, #3
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43db      	mvns	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4313      	orrs	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005724:	2201      	movs	r2, #1
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	43db      	mvns	r3, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4013      	ands	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f003 0201 	and.w	r2, r3, #1
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4313      	orrs	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	2b03      	cmp	r3, #3
 800575a:	d017      	beq.n	800578c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	2203      	movs	r2, #3
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4313      	orrs	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d123      	bne.n	80057e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	08da      	lsrs	r2, r3, #3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3208      	adds	r2, #8
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	220f      	movs	r2, #15
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4013      	ands	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	08da      	lsrs	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3208      	adds	r2, #8
 80057da:	69b9      	ldr	r1, [r7, #24]
 80057dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	2203      	movs	r2, #3
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4013      	ands	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 0203 	and.w	r2, r3, #3
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80ae 	beq.w	800597e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	4b5d      	ldr	r3, [pc, #372]	@ (800599c <HAL_GPIO_Init+0x300>)
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	4a5c      	ldr	r2, [pc, #368]	@ (800599c <HAL_GPIO_Init+0x300>)
 800582c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005830:	6453      	str	r3, [r2, #68]	@ 0x44
 8005832:	4b5a      	ldr	r3, [pc, #360]	@ (800599c <HAL_GPIO_Init+0x300>)
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800583e:	4a58      	ldr	r2, [pc, #352]	@ (80059a0 <HAL_GPIO_Init+0x304>)
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	3302      	adds	r3, #2
 8005846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800584a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	220f      	movs	r2, #15
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4013      	ands	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a4f      	ldr	r2, [pc, #316]	@ (80059a4 <HAL_GPIO_Init+0x308>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d025      	beq.n	80058b6 <HAL_GPIO_Init+0x21a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a4e      	ldr	r2, [pc, #312]	@ (80059a8 <HAL_GPIO_Init+0x30c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01f      	beq.n	80058b2 <HAL_GPIO_Init+0x216>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a4d      	ldr	r2, [pc, #308]	@ (80059ac <HAL_GPIO_Init+0x310>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d019      	beq.n	80058ae <HAL_GPIO_Init+0x212>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a4c      	ldr	r2, [pc, #304]	@ (80059b0 <HAL_GPIO_Init+0x314>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_GPIO_Init+0x20e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a4b      	ldr	r2, [pc, #300]	@ (80059b4 <HAL_GPIO_Init+0x318>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00d      	beq.n	80058a6 <HAL_GPIO_Init+0x20a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a4a      	ldr	r2, [pc, #296]	@ (80059b8 <HAL_GPIO_Init+0x31c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <HAL_GPIO_Init+0x206>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a49      	ldr	r2, [pc, #292]	@ (80059bc <HAL_GPIO_Init+0x320>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d101      	bne.n	800589e <HAL_GPIO_Init+0x202>
 800589a:	2306      	movs	r3, #6
 800589c:	e00c      	b.n	80058b8 <HAL_GPIO_Init+0x21c>
 800589e:	2307      	movs	r3, #7
 80058a0:	e00a      	b.n	80058b8 <HAL_GPIO_Init+0x21c>
 80058a2:	2305      	movs	r3, #5
 80058a4:	e008      	b.n	80058b8 <HAL_GPIO_Init+0x21c>
 80058a6:	2304      	movs	r3, #4
 80058a8:	e006      	b.n	80058b8 <HAL_GPIO_Init+0x21c>
 80058aa:	2303      	movs	r3, #3
 80058ac:	e004      	b.n	80058b8 <HAL_GPIO_Init+0x21c>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e002      	b.n	80058b8 <HAL_GPIO_Init+0x21c>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <HAL_GPIO_Init+0x21c>
 80058b6:	2300      	movs	r3, #0
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	f002 0203 	and.w	r2, r2, #3
 80058be:	0092      	lsls	r2, r2, #2
 80058c0:	4093      	lsls	r3, r2
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058c8:	4935      	ldr	r1, [pc, #212]	@ (80059a0 <HAL_GPIO_Init+0x304>)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	089b      	lsrs	r3, r3, #2
 80058ce:	3302      	adds	r3, #2
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058d6:	4b3a      	ldr	r3, [pc, #232]	@ (80059c0 <HAL_GPIO_Init+0x324>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	43db      	mvns	r3, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4013      	ands	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058fa:	4a31      	ldr	r2, [pc, #196]	@ (80059c0 <HAL_GPIO_Init+0x324>)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005900:	4b2f      	ldr	r3, [pc, #188]	@ (80059c0 <HAL_GPIO_Init+0x324>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	43db      	mvns	r3, r3
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4013      	ands	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005924:	4a26      	ldr	r2, [pc, #152]	@ (80059c0 <HAL_GPIO_Init+0x324>)
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800592a:	4b25      	ldr	r3, [pc, #148]	@ (80059c0 <HAL_GPIO_Init+0x324>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	43db      	mvns	r3, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	4013      	ands	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800594e:	4a1c      	ldr	r2, [pc, #112]	@ (80059c0 <HAL_GPIO_Init+0x324>)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005954:	4b1a      	ldr	r3, [pc, #104]	@ (80059c0 <HAL_GPIO_Init+0x324>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	43db      	mvns	r3, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4013      	ands	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005978:	4a11      	ldr	r2, [pc, #68]	@ (80059c0 <HAL_GPIO_Init+0x324>)
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	3301      	adds	r3, #1
 8005982:	61fb      	str	r3, [r7, #28]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	2b0f      	cmp	r3, #15
 8005988:	f67f ae96 	bls.w	80056b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	3724      	adds	r7, #36	@ 0x24
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800
 80059a0:	40013800 	.word	0x40013800
 80059a4:	40020000 	.word	0x40020000
 80059a8:	40020400 	.word	0x40020400
 80059ac:	40020800 	.word	0x40020800
 80059b0:	40020c00 	.word	0x40020c00
 80059b4:	40021000 	.word	0x40021000
 80059b8:	40021400 	.word	0x40021400
 80059bc:	40021800 	.word	0x40021800
 80059c0:	40013c00 	.word	0x40013c00

080059c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	887b      	ldrh	r3, [r7, #2]
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
 80059e0:	e001      	b.n	80059e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	807b      	strh	r3, [r7, #2]
 8005a00:	4613      	mov	r3, r2
 8005a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a04:	787b      	ldrb	r3, [r7, #1]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a0a:	887a      	ldrh	r2, [r7, #2]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a10:	e003      	b.n	8005a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a12:	887b      	ldrh	r3, [r7, #2]
 8005a14:	041a      	lsls	r2, r3, #16
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	619a      	str	r2, [r3, #24]
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a32:	4b08      	ldr	r3, [pc, #32]	@ (8005a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d006      	beq.n	8005a4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a3e:	4a05      	ldr	r2, [pc, #20]	@ (8005a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fd ffce 	bl	80039e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40013c00 	.word	0x40013c00

08005a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0cc      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b68      	ldr	r3, [pc, #416]	@ (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d90c      	bls.n	8005a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b65      	ldr	r3, [pc, #404]	@ (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b63      	ldr	r3, [pc, #396]	@ (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0b8      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aac:	4b59      	ldr	r3, [pc, #356]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	4a58      	ldr	r2, [pc, #352]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ab6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ac4:	4b53      	ldr	r3, [pc, #332]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4a52      	ldr	r2, [pc, #328]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad0:	4b50      	ldr	r3, [pc, #320]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	494d      	ldr	r1, [pc, #308]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d044      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af6:	4b47      	ldr	r3, [pc, #284]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d119      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e07f      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d003      	beq.n	8005b16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d107      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b16:	4b3f      	ldr	r3, [pc, #252]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e06f      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b26:	4b3b      	ldr	r3, [pc, #236]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e067      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b36:	4b37      	ldr	r3, [pc, #220]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f023 0203 	bic.w	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4934      	ldr	r1, [pc, #208]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b48:	f7ff f8aa 	bl	8004ca0 <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4e:	e00a      	b.n	8005b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b50:	f7ff f8a6 	bl	8004ca0 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e04f      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b66:	4b2b      	ldr	r3, [pc, #172]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 020c 	and.w	r2, r3, #12
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d1eb      	bne.n	8005b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b78:	4b25      	ldr	r3, [pc, #148]	@ (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d20c      	bcs.n	8005ba0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4b22      	ldr	r3, [pc, #136]	@ (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8e:	4b20      	ldr	r3, [pc, #128]	@ (8005c10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e032      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bac:	4b19      	ldr	r3, [pc, #100]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4916      	ldr	r1, [pc, #88]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bca:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	490e      	ldr	r1, [pc, #56]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bde:	f000 f855 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8005be2:	4602      	mov	r2, r0
 8005be4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	490a      	ldr	r1, [pc, #40]	@ (8005c18 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf0:	5ccb      	ldrb	r3, [r1, r3]
 8005bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf6:	4a09      	ldr	r2, [pc, #36]	@ (8005c1c <HAL_RCC_ClockConfig+0x1c4>)
 8005bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005bfa:	4b09      	ldr	r3, [pc, #36]	@ (8005c20 <HAL_RCC_ClockConfig+0x1c8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff f80a 	bl	8004c18 <HAL_InitTick>

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40023c00 	.word	0x40023c00
 8005c14:	40023800 	.word	0x40023800
 8005c18:	080120e4 	.word	0x080120e4
 8005c1c:	20000014 	.word	0x20000014
 8005c20:	20000018 	.word	0x20000018

08005c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c28:	4b03      	ldr	r3, [pc, #12]	@ (8005c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000014 	.word	0x20000014

08005c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c40:	f7ff fff0 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b05      	ldr	r3, [pc, #20]	@ (8005c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	0a9b      	lsrs	r3, r3, #10
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	4903      	ldr	r1, [pc, #12]	@ (8005c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c52:	5ccb      	ldrb	r3, [r1, r3]
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	080120f4 	.word	0x080120f4

08005c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c68:	f7ff ffdc 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	0b5b      	lsrs	r3, r3, #13
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	4903      	ldr	r1, [pc, #12]	@ (8005c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c7a:	5ccb      	ldrb	r3, [r1, r3]
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40023800 	.word	0x40023800
 8005c88:	080120f4 	.word	0x080120f4

08005c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c90:	b0a6      	sub	sp, #152	@ 0x98
 8005c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cb2:	4bc8      	ldr	r3, [pc, #800]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b0c      	cmp	r3, #12
 8005cbc:	f200 817e 	bhi.w	8005fbc <HAL_RCC_GetSysClockFreq+0x330>
 8005cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005cfd 	.word	0x08005cfd
 8005ccc:	08005fbd 	.word	0x08005fbd
 8005cd0:	08005fbd 	.word	0x08005fbd
 8005cd4:	08005fbd 	.word	0x08005fbd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005fbd 	.word	0x08005fbd
 8005ce0:	08005fbd 	.word	0x08005fbd
 8005ce4:	08005fbd 	.word	0x08005fbd
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005fbd 	.word	0x08005fbd
 8005cf0:	08005fbd 	.word	0x08005fbd
 8005cf4:	08005fbd 	.word	0x08005fbd
 8005cf8:	08005e77 	.word	0x08005e77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cfc:	4bb6      	ldr	r3, [pc, #728]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005d02:	e15f      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d04:	4bb5      	ldr	r3, [pc, #724]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8005d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005d0a:	e15b      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d0c:	4bb1      	ldr	r3, [pc, #708]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d18:	4bae      	ldr	r3, [pc, #696]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d031      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d24:	4bab      	ldr	r3, [pc, #684]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	099b      	lsrs	r3, r3, #6
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d36:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d38:	2300      	movs	r3, #0
 8005d3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d3c:	4ba7      	ldr	r3, [pc, #668]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8005d3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005d42:	462a      	mov	r2, r5
 8005d44:	fb03 f202 	mul.w	r2, r3, r2
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	4413      	add	r3, r2
 8005d52:	4aa2      	ldr	r2, [pc, #648]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8005d54:	4621      	mov	r1, r4
 8005d56:	fba1 1202 	umull	r1, r2, r1, r2
 8005d5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005d60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005d62:	4413      	add	r3, r2
 8005d64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005d70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005d78:	f7fb f806 	bl	8000d88 <__aeabi_uldivmod>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4613      	mov	r3, r2
 8005d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d86:	e064      	b.n	8005e52 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d88:	4b92      	ldr	r3, [pc, #584]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	099b      	lsrs	r3, r3, #6
 8005d8e:	2200      	movs	r2, #0
 8005d90:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d92:	657a      	str	r2, [r7, #84]	@ 0x54
 8005d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005da4:	4622      	mov	r2, r4
 8005da6:	462b      	mov	r3, r5
 8005da8:	f04f 0000 	mov.w	r0, #0
 8005dac:	f04f 0100 	mov.w	r1, #0
 8005db0:	0159      	lsls	r1, r3, #5
 8005db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005db6:	0150      	lsls	r0, r2, #5
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	1a51      	subs	r1, r2, r1
 8005dc0:	6139      	str	r1, [r7, #16]
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	eb63 0301 	sbc.w	r3, r3, r1
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	018b      	lsls	r3, r1, #6
 8005dda:	4651      	mov	r1, sl
 8005ddc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005de0:	4651      	mov	r1, sl
 8005de2:	018a      	lsls	r2, r1, #6
 8005de4:	4651      	mov	r1, sl
 8005de6:	ebb2 0801 	subs.w	r8, r2, r1
 8005dea:	4659      	mov	r1, fp
 8005dec:	eb63 0901 	sbc.w	r9, r3, r1
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e04:	4690      	mov	r8, r2
 8005e06:	4699      	mov	r9, r3
 8005e08:	4623      	mov	r3, r4
 8005e0a:	eb18 0303 	adds.w	r3, r8, r3
 8005e0e:	60bb      	str	r3, [r7, #8]
 8005e10:	462b      	mov	r3, r5
 8005e12:	eb49 0303 	adc.w	r3, r9, r3
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e24:	4629      	mov	r1, r5
 8005e26:	028b      	lsls	r3, r1, #10
 8005e28:	4621      	mov	r1, r4
 8005e2a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e2e:	4621      	mov	r1, r4
 8005e30:	028a      	lsls	r2, r1, #10
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e44:	f7fa ffa0 	bl	8000d88 <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e52:	4b60      	ldr	r3, [pc, #384]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	0c1b      	lsrs	r3, r3, #16
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005e64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005e74:	e0a6      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e76:	4b57      	ldr	r3, [pc, #348]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e82:	4b54      	ldr	r3, [pc, #336]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d02a      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8e:	4b51      	ldr	r3, [pc, #324]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	099b      	lsrs	r3, r3, #6
 8005e94:	2200      	movs	r2, #0
 8005e96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8005ea4:	fb03 f201 	mul.w	r2, r3, r1
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	fb00 f303 	mul.w	r3, r0, r3
 8005eae:	4413      	add	r3, r2
 8005eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x350>)
 8005eb2:	fba0 1202 	umull	r1, r2, r0, r2
 8005eb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005eb8:	460a      	mov	r2, r1
 8005eba:	673a      	str	r2, [r7, #112]	@ 0x70
 8005ebc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005ebe:	4413      	add	r3, r2
 8005ec0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eca:	637a      	str	r2, [r7, #52]	@ 0x34
 8005ecc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005ed0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005ed4:	f7fa ff58 	bl	8000d88 <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4613      	mov	r3, r2
 8005ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ee2:	e05b      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	099b      	lsrs	r3, r3, #6
 8005eea:	2200      	movs	r2, #0
 8005eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f00:	4642      	mov	r2, r8
 8005f02:	464b      	mov	r3, r9
 8005f04:	f04f 0000 	mov.w	r0, #0
 8005f08:	f04f 0100 	mov.w	r1, #0
 8005f0c:	0159      	lsls	r1, r3, #5
 8005f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f12:	0150      	lsls	r0, r2, #5
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4641      	mov	r1, r8
 8005f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f1e:	4649      	mov	r1, r9
 8005f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f38:	ebb2 040a 	subs.w	r4, r2, sl
 8005f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	00eb      	lsls	r3, r5, #3
 8005f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f4e:	00e2      	lsls	r2, r4, #3
 8005f50:	4614      	mov	r4, r2
 8005f52:	461d      	mov	r5, r3
 8005f54:	4643      	mov	r3, r8
 8005f56:	18e3      	adds	r3, r4, r3
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	eb45 0303 	adc.w	r3, r5, r3
 8005f60:	607b      	str	r3, [r7, #4]
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f6e:	4629      	mov	r1, r5
 8005f70:	028b      	lsls	r3, r1, #10
 8005f72:	4621      	mov	r1, r4
 8005f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f78:	4621      	mov	r1, r4
 8005f7a:	028a      	lsls	r2, r1, #10
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4619      	mov	r1, r3
 8005f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f84:	2200      	movs	r2, #0
 8005f86:	61bb      	str	r3, [r7, #24]
 8005f88:	61fa      	str	r2, [r7, #28]
 8005f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f8e:	f7fa fefb 	bl	8000d88 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4613      	mov	r3, r2
 8005f98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	0f1b      	lsrs	r3, r3, #28
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005fba:	e003      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fbc:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005fbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3798      	adds	r7, #152	@ 0x98
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	00f42400 	.word	0x00f42400
 8005fdc:	017d7840 	.word	0x017d7840

08005fe0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e28d      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8083 	beq.w	8006106 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006000:	4b94      	ldr	r3, [pc, #592]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 030c 	and.w	r3, r3, #12
 8006008:	2b04      	cmp	r3, #4
 800600a:	d019      	beq.n	8006040 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800600c:	4b91      	ldr	r3, [pc, #580]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 030c 	and.w	r3, r3, #12
        || \
 8006014:	2b08      	cmp	r3, #8
 8006016:	d106      	bne.n	8006026 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006018:	4b8e      	ldr	r3, [pc, #568]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006020:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006024:	d00c      	beq.n	8006040 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006026:	4b8b      	ldr	r3, [pc, #556]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800602e:	2b0c      	cmp	r3, #12
 8006030:	d112      	bne.n	8006058 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006032:	4b88      	ldr	r3, [pc, #544]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800603a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800603e:	d10b      	bne.n	8006058 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006040:	4b84      	ldr	r3, [pc, #528]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d05b      	beq.n	8006104 <HAL_RCC_OscConfig+0x124>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d157      	bne.n	8006104 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e25a      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006060:	d106      	bne.n	8006070 <HAL_RCC_OscConfig+0x90>
 8006062:	4b7c      	ldr	r3, [pc, #496]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a7b      	ldr	r2, [pc, #492]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e01d      	b.n	80060ac <HAL_RCC_OscConfig+0xcc>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006078:	d10c      	bne.n	8006094 <HAL_RCC_OscConfig+0xb4>
 800607a:	4b76      	ldr	r3, [pc, #472]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a75      	ldr	r2, [pc, #468]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	4b73      	ldr	r3, [pc, #460]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a72      	ldr	r2, [pc, #456]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 800608c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e00b      	b.n	80060ac <HAL_RCC_OscConfig+0xcc>
 8006094:	4b6f      	ldr	r3, [pc, #444]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a6e      	ldr	r2, [pc, #440]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 800609a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a6b      	ldr	r2, [pc, #428]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 80060a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d013      	beq.n	80060dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b4:	f7fe fdf4 	bl	8004ca0 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060bc:	f7fe fdf0 	bl	8004ca0 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	@ 0x64
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e21f      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ce:	4b61      	ldr	r3, [pc, #388]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0xdc>
 80060da:	e014      	b.n	8006106 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fe fde0 	bl	8004ca0 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060e4:	f7fe fddc 	bl	8004ca0 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b64      	cmp	r3, #100	@ 0x64
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e20b      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f6:	4b57      	ldr	r3, [pc, #348]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f0      	bne.n	80060e4 <HAL_RCC_OscConfig+0x104>
 8006102:	e000      	b.n	8006106 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d06f      	beq.n	80061f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006112:	4b50      	ldr	r3, [pc, #320]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b00      	cmp	r3, #0
 800611c:	d017      	beq.n	800614e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800611e:	4b4d      	ldr	r3, [pc, #308]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 030c 	and.w	r3, r3, #12
        || \
 8006126:	2b08      	cmp	r3, #8
 8006128:	d105      	bne.n	8006136 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800612a:	4b4a      	ldr	r3, [pc, #296]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006136:	4b47      	ldr	r3, [pc, #284]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800613e:	2b0c      	cmp	r3, #12
 8006140:	d11c      	bne.n	800617c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006142:	4b44      	ldr	r3, [pc, #272]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d116      	bne.n	800617c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614e:	4b41      	ldr	r3, [pc, #260]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_RCC_OscConfig+0x186>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d001      	beq.n	8006166 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e1d3      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006166:	4b3b      	ldr	r3, [pc, #236]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4937      	ldr	r1, [pc, #220]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006176:	4313      	orrs	r3, r2
 8006178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800617a:	e03a      	b.n	80061f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d020      	beq.n	80061c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006184:	4b34      	ldr	r3, [pc, #208]	@ (8006258 <HAL_RCC_OscConfig+0x278>)
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618a:	f7fe fd89 	bl	8004ca0 <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006192:	f7fe fd85 	bl	8004ca0 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e1b4      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0f0      	beq.n	8006192 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b0:	4b28      	ldr	r3, [pc, #160]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4925      	ldr	r1, [pc, #148]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	600b      	str	r3, [r1, #0]
 80061c4:	e015      	b.n	80061f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061c6:	4b24      	ldr	r3, [pc, #144]	@ (8006258 <HAL_RCC_OscConfig+0x278>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fe fd68 	bl	8004ca0 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d4:	f7fe fd64 	bl	8004ca0 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e193      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f0      	bne.n	80061d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d036      	beq.n	800626c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d016      	beq.n	8006234 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006206:	4b15      	ldr	r3, [pc, #84]	@ (800625c <HAL_RCC_OscConfig+0x27c>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620c:	f7fe fd48 	bl	8004ca0 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006214:	f7fe fd44 	bl	8004ca0 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e173      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006226:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <HAL_RCC_OscConfig+0x274>)
 8006228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0f0      	beq.n	8006214 <HAL_RCC_OscConfig+0x234>
 8006232:	e01b      	b.n	800626c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006234:	4b09      	ldr	r3, [pc, #36]	@ (800625c <HAL_RCC_OscConfig+0x27c>)
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623a:	f7fe fd31 	bl	8004ca0 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006240:	e00e      	b.n	8006260 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006242:	f7fe fd2d 	bl	8004ca0 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d907      	bls.n	8006260 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e15c      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
 8006254:	40023800 	.word	0x40023800
 8006258:	42470000 	.word	0x42470000
 800625c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006260:	4b8a      	ldr	r3, [pc, #552]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1ea      	bne.n	8006242 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8097 	beq.w	80063a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800627a:	2300      	movs	r3, #0
 800627c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800627e:	4b83      	ldr	r3, [pc, #524]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10f      	bne.n	80062aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800628a:	2300      	movs	r3, #0
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	4b7f      	ldr	r3, [pc, #508]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	4a7e      	ldr	r2, [pc, #504]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006298:	6413      	str	r3, [r2, #64]	@ 0x40
 800629a:	4b7c      	ldr	r3, [pc, #496]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062aa:	4b79      	ldr	r3, [pc, #484]	@ (8006490 <HAL_RCC_OscConfig+0x4b0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d118      	bne.n	80062e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062b6:	4b76      	ldr	r3, [pc, #472]	@ (8006490 <HAL_RCC_OscConfig+0x4b0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a75      	ldr	r2, [pc, #468]	@ (8006490 <HAL_RCC_OscConfig+0x4b0>)
 80062bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062c2:	f7fe fced 	bl	8004ca0 <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ca:	f7fe fce9 	bl	8004ca0 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e118      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062dc:	4b6c      	ldr	r3, [pc, #432]	@ (8006490 <HAL_RCC_OscConfig+0x4b0>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0f0      	beq.n	80062ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d106      	bne.n	80062fe <HAL_RCC_OscConfig+0x31e>
 80062f0:	4b66      	ldr	r3, [pc, #408]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f4:	4a65      	ldr	r2, [pc, #404]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80062fc:	e01c      	b.n	8006338 <HAL_RCC_OscConfig+0x358>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b05      	cmp	r3, #5
 8006304:	d10c      	bne.n	8006320 <HAL_RCC_OscConfig+0x340>
 8006306:	4b61      	ldr	r3, [pc, #388]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630a:	4a60      	ldr	r2, [pc, #384]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 800630c:	f043 0304 	orr.w	r3, r3, #4
 8006310:	6713      	str	r3, [r2, #112]	@ 0x70
 8006312:	4b5e      	ldr	r3, [pc, #376]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006316:	4a5d      	ldr	r2, [pc, #372]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006318:	f043 0301 	orr.w	r3, r3, #1
 800631c:	6713      	str	r3, [r2, #112]	@ 0x70
 800631e:	e00b      	b.n	8006338 <HAL_RCC_OscConfig+0x358>
 8006320:	4b5a      	ldr	r3, [pc, #360]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006324:	4a59      	ldr	r2, [pc, #356]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	6713      	str	r3, [r2, #112]	@ 0x70
 800632c:	4b57      	ldr	r3, [pc, #348]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	4a56      	ldr	r2, [pc, #344]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006332:	f023 0304 	bic.w	r3, r3, #4
 8006336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d015      	beq.n	800636c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006340:	f7fe fcae 	bl	8004ca0 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006346:	e00a      	b.n	800635e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fe fcaa 	bl	8004ca0 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e0d7      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800635e:	4b4b      	ldr	r3, [pc, #300]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0ee      	beq.n	8006348 <HAL_RCC_OscConfig+0x368>
 800636a:	e014      	b.n	8006396 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fe fc98 	bl	8004ca0 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006372:	e00a      	b.n	800638a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006374:	f7fe fc94 	bl	8004ca0 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e0c1      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800638a:	4b40      	ldr	r3, [pc, #256]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1ee      	bne.n	8006374 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006396:	7dfb      	ldrb	r3, [r7, #23]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d105      	bne.n	80063a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800639c:	4b3b      	ldr	r3, [pc, #236]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	4a3a      	ldr	r2, [pc, #232]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 80063a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80ad 	beq.w	800650c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063b2:	4b36      	ldr	r3, [pc, #216]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 030c 	and.w	r3, r3, #12
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d060      	beq.n	8006480 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d145      	bne.n	8006452 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c6:	4b33      	ldr	r3, [pc, #204]	@ (8006494 <HAL_RCC_OscConfig+0x4b4>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fe fc68 	bl	8004ca0 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d4:	f7fe fc64 	bl	8004ca0 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e093      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e6:	4b29      	ldr	r3, [pc, #164]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f0      	bne.n	80063d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	019b      	lsls	r3, r3, #6
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	085b      	lsrs	r3, r3, #1
 800640a:	3b01      	subs	r3, #1
 800640c:	041b      	lsls	r3, r3, #16
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	061b      	lsls	r3, r3, #24
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641c:	071b      	lsls	r3, r3, #28
 800641e:	491b      	ldr	r1, [pc, #108]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006420:	4313      	orrs	r3, r2
 8006422:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006424:	4b1b      	ldr	r3, [pc, #108]	@ (8006494 <HAL_RCC_OscConfig+0x4b4>)
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642a:	f7fe fc39 	bl	8004ca0 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006432:	f7fe fc35 	bl	8004ca0 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e064      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006444:	4b11      	ldr	r3, [pc, #68]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x452>
 8006450:	e05c      	b.n	800650c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006452:	4b10      	ldr	r3, [pc, #64]	@ (8006494 <HAL_RCC_OscConfig+0x4b4>)
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006458:	f7fe fc22 	bl	8004ca0 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006460:	f7fe fc1e 	bl	8004ca0 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e04d      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006472:	4b06      	ldr	r3, [pc, #24]	@ (800648c <HAL_RCC_OscConfig+0x4ac>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0x480>
 800647e:	e045      	b.n	800650c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d107      	bne.n	8006498 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e040      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
 800648c:	40023800 	.word	0x40023800
 8006490:	40007000 	.word	0x40007000
 8006494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006498:	4b1f      	ldr	r3, [pc, #124]	@ (8006518 <HAL_RCC_OscConfig+0x538>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d030      	beq.n	8006508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d129      	bne.n	8006508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064be:	429a      	cmp	r2, r3
 80064c0:	d122      	bne.n	8006508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064c8:	4013      	ands	r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d119      	bne.n	8006508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	3b01      	subs	r3, #1
 80064e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d10f      	bne.n	8006508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d107      	bne.n	8006508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006502:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40023800 	.word	0x40023800

0800651c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e07b      	b.n	8006626 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d108      	bne.n	8006548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800653e:	d009      	beq.n	8006554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]
 8006546:	e005      	b.n	8006554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fd ff2a 	bl	80043c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800658a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d8:	ea42 0103 	orr.w	r1, r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	f003 0104 	and.w	r1, r3, #4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fa:	f003 0210 	and.w	r2, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b088      	sub	sp, #32
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	603b      	str	r3, [r7, #0]
 800663a:	4613      	mov	r3, r2
 800663c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800663e:	f7fe fb2f 	bl	8004ca0 <HAL_GetTick>
 8006642:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006644:	88fb      	ldrh	r3, [r7, #6]
 8006646:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	d001      	beq.n	8006658 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
 8006656:	e12a      	b.n	80068ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_SPI_Transmit+0x36>
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e122      	b.n	80068ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_SPI_Transmit+0x48>
 8006672:	2302      	movs	r3, #2
 8006674:	e11b      	b.n	80068ae <HAL_SPI_Transmit+0x280>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2203      	movs	r2, #3
 8006682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	88fa      	ldrh	r2, [r7, #6]
 8006696:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	88fa      	ldrh	r2, [r7, #6]
 800669c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c4:	d10f      	bne.n	80066e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b40      	cmp	r3, #64	@ 0x40
 80066f2:	d007      	beq.n	8006704 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800670c:	d152      	bne.n	80067b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <HAL_SPI_Transmit+0xee>
 8006716:	8b7b      	ldrh	r3, [r7, #26]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d145      	bne.n	80067a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006720:	881a      	ldrh	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672c:	1c9a      	adds	r2, r3, #2
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006736:	b29b      	uxth	r3, r3
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006740:	e032      	b.n	80067a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b02      	cmp	r3, #2
 800674e:	d112      	bne.n	8006776 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006754:	881a      	ldrh	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006760:	1c9a      	adds	r2, r3, #2
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006774:	e018      	b.n	80067a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006776:	f7fe fa93 	bl	8004ca0 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d803      	bhi.n	800678e <HAL_SPI_Transmit+0x160>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d102      	bne.n	8006794 <HAL_SPI_Transmit+0x166>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d109      	bne.n	80067a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e082      	b.n	80068ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1c7      	bne.n	8006742 <HAL_SPI_Transmit+0x114>
 80067b2:	e053      	b.n	800685c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_SPI_Transmit+0x194>
 80067bc:	8b7b      	ldrh	r3, [r7, #26]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d147      	bne.n	8006852 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067e8:	e033      	b.n	8006852 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d113      	bne.n	8006820 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	7812      	ldrb	r2, [r2, #0]
 8006804:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800681e:	e018      	b.n	8006852 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006820:	f7fe fa3e 	bl	8004ca0 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d803      	bhi.n	8006838 <HAL_SPI_Transmit+0x20a>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	d102      	bne.n	800683e <HAL_SPI_Transmit+0x210>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e02d      	b.n	80068ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1c6      	bne.n	80067ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fba1 	bl	8006fa8 <SPI_EndRxTxTransaction>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80068ac:	2300      	movs	r3, #0
  }
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b08a      	sub	sp, #40	@ 0x28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068c4:	2301      	movs	r3, #1
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068c8:	f7fe f9ea 	bl	8004ca0 <HAL_GetTick>
 80068cc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068d4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80068dc:	887b      	ldrh	r3, [r7, #2]
 80068de:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d00c      	beq.n	8006900 <HAL_SPI_TransmitReceive+0x4a>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068ec:	d106      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x46>
 80068f6:	7ffb      	ldrb	r3, [r7, #31]
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d001      	beq.n	8006900 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80068fc:	2302      	movs	r3, #2
 80068fe:	e17f      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <HAL_SPI_TransmitReceive+0x5c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <HAL_SPI_TransmitReceive+0x5c>
 800690c:	887b      	ldrh	r3, [r7, #2]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e174      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x6e>
 8006920:	2302      	movs	r3, #2
 8006922:	e16d      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x34a>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b04      	cmp	r3, #4
 8006936:	d003      	beq.n	8006940 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2205      	movs	r2, #5
 800693c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	887a      	ldrh	r2, [r7, #2]
 8006950:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	887a      	ldrh	r2, [r7, #2]
 8006956:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	887a      	ldrh	r2, [r7, #2]
 8006962:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	887a      	ldrh	r2, [r7, #2]
 8006968:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006980:	2b40      	cmp	r3, #64	@ 0x40
 8006982:	d007      	beq.n	8006994 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800699c:	d17e      	bne.n	8006a9c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_SPI_TransmitReceive+0xf6>
 80069a6:	8afb      	ldrh	r3, [r7, #22]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d16c      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b0:	881a      	ldrh	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069bc:	1c9a      	adds	r2, r3, #2
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069d0:	e059      	b.n	8006a86 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d11b      	bne.n	8006a18 <HAL_SPI_TransmitReceive+0x162>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d016      	beq.n	8006a18 <HAL_SPI_TransmitReceive+0x162>
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d113      	bne.n	8006a18 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f4:	881a      	ldrh	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a00:	1c9a      	adds	r2, r3, #2
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d119      	bne.n	8006a5a <HAL_SPI_TransmitReceive+0x1a4>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d014      	beq.n	8006a5a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3a:	b292      	uxth	r2, r2
 8006a3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a42:	1c9a      	adds	r2, r3, #2
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a56:	2301      	movs	r3, #1
 8006a58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a5a:	f7fe f921 	bl	8004ca0 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d80d      	bhi.n	8006a86 <HAL_SPI_TransmitReceive+0x1d0>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d009      	beq.n	8006a86 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e0bc      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1a0      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x11c>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d19b      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x11c>
 8006a9a:	e082      	b.n	8006ba2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <HAL_SPI_TransmitReceive+0x1f4>
 8006aa4:	8afb      	ldrh	r3, [r7, #22]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d171      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	7812      	ldrb	r2, [r2, #0]
 8006ab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ad0:	e05d      	b.n	8006b8e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d11c      	bne.n	8006b1a <HAL_SPI_TransmitReceive+0x264>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d017      	beq.n	8006b1a <HAL_SPI_TransmitReceive+0x264>
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d114      	bne.n	8006b1a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	7812      	ldrb	r2, [r2, #0]
 8006afc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d119      	bne.n	8006b5c <HAL_SPI_TransmitReceive+0x2a6>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d014      	beq.n	8006b5c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b5c:	f7fe f8a0 	bl	8004ca0 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d803      	bhi.n	8006b74 <HAL_SPI_TransmitReceive+0x2be>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d102      	bne.n	8006b7a <HAL_SPI_TransmitReceive+0x2c4>
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e038      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d19c      	bne.n	8006ad2 <HAL_SPI_TransmitReceive+0x21c>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d197      	bne.n	8006ad2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f9fe 	bl	8006fa8 <SPI_EndRxTxTransaction>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e01d      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
  }
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3728      	adds	r7, #40	@ 0x28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d001      	beq.n	8006c26 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006c22:	2302      	movs	r3, #2
 8006c24:	e097      	b.n	8006d56 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_SPI_Transmit_DMA+0x2a>
 8006c2c:	88fb      	ldrh	r3, [r7, #6]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e08f      	b.n	8006d56 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_SPI_Transmit_DMA+0x3c>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e088      	b.n	8006d56 <HAL_SPI_Transmit_DMA+0x14e>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2203      	movs	r2, #3
 8006c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	88fa      	ldrh	r2, [r7, #6]
 8006c64:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	88fa      	ldrh	r2, [r7, #6]
 8006c6a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c92:	d10f      	bne.n	8006cb4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ca2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb8:	4a29      	ldr	r2, [pc, #164]	@ (8006d60 <HAL_SPI_Transmit_DMA+0x158>)
 8006cba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc0:	4a28      	ldr	r2, [pc, #160]	@ (8006d64 <HAL_SPI_Transmit_DMA+0x15c>)
 8006cc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc8:	4a27      	ldr	r2, [pc, #156]	@ (8006d68 <HAL_SPI_Transmit_DMA+0x160>)
 8006cca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cdc:	4619      	mov	r1, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006cec:	f7fe fa14 	bl	8005118 <HAL_DMA_Start_IT>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cfa:	f043 0210 	orr.w	r2, r3, #16
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e023      	b.n	8006d56 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d18:	2b40      	cmp	r3, #64	@ 0x40
 8006d1a:	d007      	beq.n	8006d2c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d2a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0220 	orr.w	r2, r2, #32
 8006d42:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0202 	orr.w	r2, r2, #2
 8006d52:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	08006e3d 	.word	0x08006e3d
 8006d64:	08006d95 	.word	0x08006d95
 8006d68:	08006e59 	.word	0x08006e59

08006d6c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006da2:	f7fd ff7d 	bl	8004ca0 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db6:	d03b      	beq.n	8006e30 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0220 	bic.w	r2, r2, #32
 8006dc6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0202 	bic.w	r2, r2, #2
 8006dd6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	2164      	movs	r1, #100	@ 0x64
 8006ddc:	6978      	ldr	r0, [r7, #20]
 8006dde:	f000 f8e3 	bl	8006fa8 <SPI_EndRxTxTransaction>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2200      	movs	r2, #0
 8006e16:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006e28:	6978      	ldr	r0, [r7, #20]
 8006e2a:	f7ff ffa9 	bl	8006d80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006e2e:	e002      	b.n	8006e36 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006e30:	6978      	ldr	r0, [r7, #20]
 8006e32:	f7fa fabf 	bl	80013b4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7ff ff8e 	bl	8006d6c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e50:	bf00      	nop
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0203 	bic.w	r2, r2, #3
 8006e74:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e7a:	f043 0210 	orr.w	r2, r3, #16
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff ff78 	bl	8006d80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ea8:	f7fd fefa 	bl	8004ca0 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006eb8:	f7fd fef2 	bl	8004ca0 <HAL_GetTick>
 8006ebc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ebe:	4b39      	ldr	r3, [pc, #228]	@ (8006fa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	015b      	lsls	r3, r3, #5
 8006ec4:	0d1b      	lsrs	r3, r3, #20
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ece:	e054      	b.n	8006f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d050      	beq.n	8006f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ed8:	f7fd fee2 	bl	8004ca0 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d902      	bls.n	8006eee <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d13d      	bne.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f06:	d111      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f10:	d004      	beq.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1a:	d107      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f34:	d10f      	bne.n	8006f56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e017      	b.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4013      	ands	r3, r2
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	bf0c      	ite	eq
 8006f8a:	2301      	moveq	r3, #1
 8006f8c:	2300      	movne	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d19b      	bne.n	8006ed0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000014 	.word	0x20000014

08006fa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7ff ff6a 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fce:	f043 0220 	orr.w	r2, r3, #32
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e032      	b.n	8007040 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fda:	4b1b      	ldr	r3, [pc, #108]	@ (8007048 <SPI_EndRxTxTransaction+0xa0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a1b      	ldr	r2, [pc, #108]	@ (800704c <SPI_EndRxTxTransaction+0xa4>)
 8006fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe4:	0d5b      	lsrs	r3, r3, #21
 8006fe6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff8:	d112      	bne.n	8007020 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	2180      	movs	r1, #128	@ 0x80
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff ff47 	bl	8006e98 <SPI_WaitFlagStateUntilTimeout>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d016      	beq.n	800703e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007014:	f043 0220 	orr.w	r2, r3, #32
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e00f      	b.n	8007040 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	3b01      	subs	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007036:	2b80      	cmp	r3, #128	@ 0x80
 8007038:	d0f2      	beq.n	8007020 <SPI_EndRxTxTransaction+0x78>
 800703a:	e000      	b.n	800703e <SPI_EndRxTxTransaction+0x96>
        break;
 800703c:	bf00      	nop
  }

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20000014 	.word	0x20000014
 800704c:	165e9f81 	.word	0x165e9f81

08007050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e041      	b.n	80070e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fd fcb6 	bl	80049e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f000 fb14 	bl	80076bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b01      	cmp	r3, #1
 8007102:	d001      	beq.n	8007108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e046      	b.n	8007196 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a23      	ldr	r2, [pc, #140]	@ (80071a4 <HAL_TIM_Base_Start+0xb4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <HAL_TIM_Base_Start+0x70>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007122:	d01d      	beq.n	8007160 <HAL_TIM_Base_Start+0x70>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1f      	ldr	r2, [pc, #124]	@ (80071a8 <HAL_TIM_Base_Start+0xb8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <HAL_TIM_Base_Start+0x70>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1e      	ldr	r2, [pc, #120]	@ (80071ac <HAL_TIM_Base_Start+0xbc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <HAL_TIM_Base_Start+0x70>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a1c      	ldr	r2, [pc, #112]	@ (80071b0 <HAL_TIM_Base_Start+0xc0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_TIM_Base_Start+0x70>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a1b      	ldr	r2, [pc, #108]	@ (80071b4 <HAL_TIM_Base_Start+0xc4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_TIM_Base_Start+0x70>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a19      	ldr	r2, [pc, #100]	@ (80071b8 <HAL_TIM_Base_Start+0xc8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_Base_Start+0x70>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a18      	ldr	r2, [pc, #96]	@ (80071bc <HAL_TIM_Base_Start+0xcc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d111      	bne.n	8007184 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b06      	cmp	r3, #6
 8007170:	d010      	beq.n	8007194 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007182:	e007      	b.n	8007194 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	40010400 	.word	0x40010400
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40001800 	.word	0x40001800

080071c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d001      	beq.n	80071d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e04e      	b.n	8007276 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a23      	ldr	r2, [pc, #140]	@ (8007284 <HAL_TIM_Base_Start_IT+0xc4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d022      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007202:	d01d      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1f      	ldr	r2, [pc, #124]	@ (8007288 <HAL_TIM_Base_Start_IT+0xc8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d018      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1e      	ldr	r2, [pc, #120]	@ (800728c <HAL_TIM_Base_Start_IT+0xcc>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1c      	ldr	r2, [pc, #112]	@ (8007290 <HAL_TIM_Base_Start_IT+0xd0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00e      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1b      	ldr	r2, [pc, #108]	@ (8007294 <HAL_TIM_Base_Start_IT+0xd4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d009      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a19      	ldr	r2, [pc, #100]	@ (8007298 <HAL_TIM_Base_Start_IT+0xd8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x80>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a18      	ldr	r2, [pc, #96]	@ (800729c <HAL_TIM_Base_Start_IT+0xdc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d111      	bne.n	8007264 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b06      	cmp	r3, #6
 8007250:	d010      	beq.n	8007274 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f042 0201 	orr.w	r2, r2, #1
 8007260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007262:	e007      	b.n	8007274 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40010000 	.word	0x40010000
 8007288:	40000400 	.word	0x40000400
 800728c:	40000800 	.word	0x40000800
 8007290:	40000c00 	.word	0x40000c00
 8007294:	40010400 	.word	0x40010400
 8007298:	40014000 	.word	0x40014000
 800729c:	40001800 	.word	0x40001800

080072a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0201 	bic.w	r2, r2, #1
 80072b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10f      	bne.n	80072e8 <HAL_TIM_Base_Stop_IT+0x48>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d107      	bne.n	80072e8 <HAL_TIM_Base_Stop_IT+0x48>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0201 	bic.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d020      	beq.n	8007362 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d01b      	beq.n	8007362 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f06f 0202 	mvn.w	r2, #2
 8007332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	f003 0303 	and.w	r3, r3, #3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f999 	bl	8007680 <HAL_TIM_IC_CaptureCallback>
 800734e:	e005      	b.n	800735c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f98b 	bl	800766c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f99c 	bl	8007694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d020      	beq.n	80073ae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f003 0304 	and.w	r3, r3, #4
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01b      	beq.n	80073ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f06f 0204 	mvn.w	r2, #4
 800737e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f973 	bl	8007680 <HAL_TIM_IC_CaptureCallback>
 800739a:	e005      	b.n	80073a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f965 	bl	800766c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f976 	bl	8007694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d020      	beq.n	80073fa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01b      	beq.n	80073fa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f06f 0208 	mvn.w	r2, #8
 80073ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2204      	movs	r2, #4
 80073d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f94d 	bl	8007680 <HAL_TIM_IC_CaptureCallback>
 80073e6:	e005      	b.n	80073f4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f93f 	bl	800766c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f950 	bl	8007694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	2b00      	cmp	r3, #0
 8007402:	d020      	beq.n	8007446 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01b      	beq.n	8007446 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f06f 0210 	mvn.w	r2, #16
 8007416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2208      	movs	r2, #8
 800741c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f927 	bl	8007680 <HAL_TIM_IC_CaptureCallback>
 8007432:	e005      	b.n	8007440 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f919 	bl	800766c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f92a 	bl	8007694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00c      	beq.n	800746a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f06f 0201 	mvn.w	r2, #1
 8007462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7fc faed 	bl	8003a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00c      	beq.n	800748e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fae3 	bl	8007a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00c      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8fb 	bl	80076a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f003 0320 	and.w	r3, r3, #32
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00c      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f06f 0220 	mvn.w	r2, #32
 80074ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fab5 	bl	8007a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_TIM_ConfigClockSource+0x1c>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e0b4      	b.n	8007664 <HAL_TIM_ConfigClockSource+0x186>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007518:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007520:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007532:	d03e      	beq.n	80075b2 <HAL_TIM_ConfigClockSource+0xd4>
 8007534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007538:	f200 8087 	bhi.w	800764a <HAL_TIM_ConfigClockSource+0x16c>
 800753c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007540:	f000 8086 	beq.w	8007650 <HAL_TIM_ConfigClockSource+0x172>
 8007544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007548:	d87f      	bhi.n	800764a <HAL_TIM_ConfigClockSource+0x16c>
 800754a:	2b70      	cmp	r3, #112	@ 0x70
 800754c:	d01a      	beq.n	8007584 <HAL_TIM_ConfigClockSource+0xa6>
 800754e:	2b70      	cmp	r3, #112	@ 0x70
 8007550:	d87b      	bhi.n	800764a <HAL_TIM_ConfigClockSource+0x16c>
 8007552:	2b60      	cmp	r3, #96	@ 0x60
 8007554:	d050      	beq.n	80075f8 <HAL_TIM_ConfigClockSource+0x11a>
 8007556:	2b60      	cmp	r3, #96	@ 0x60
 8007558:	d877      	bhi.n	800764a <HAL_TIM_ConfigClockSource+0x16c>
 800755a:	2b50      	cmp	r3, #80	@ 0x50
 800755c:	d03c      	beq.n	80075d8 <HAL_TIM_ConfigClockSource+0xfa>
 800755e:	2b50      	cmp	r3, #80	@ 0x50
 8007560:	d873      	bhi.n	800764a <HAL_TIM_ConfigClockSource+0x16c>
 8007562:	2b40      	cmp	r3, #64	@ 0x40
 8007564:	d058      	beq.n	8007618 <HAL_TIM_ConfigClockSource+0x13a>
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d86f      	bhi.n	800764a <HAL_TIM_ConfigClockSource+0x16c>
 800756a:	2b30      	cmp	r3, #48	@ 0x30
 800756c:	d064      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0x15a>
 800756e:	2b30      	cmp	r3, #48	@ 0x30
 8007570:	d86b      	bhi.n	800764a <HAL_TIM_ConfigClockSource+0x16c>
 8007572:	2b20      	cmp	r3, #32
 8007574:	d060      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0x15a>
 8007576:	2b20      	cmp	r3, #32
 8007578:	d867      	bhi.n	800764a <HAL_TIM_ConfigClockSource+0x16c>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d05c      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0x15a>
 800757e:	2b10      	cmp	r3, #16
 8007580:	d05a      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0x15a>
 8007582:	e062      	b.n	800764a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007594:	f000 f9b8 	bl	8007908 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	609a      	str	r2, [r3, #8]
      break;
 80075b0:	e04f      	b.n	8007652 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075c2:	f000 f9a1 	bl	8007908 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075d4:	609a      	str	r2, [r3, #8]
      break;
 80075d6:	e03c      	b.n	8007652 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e4:	461a      	mov	r2, r3
 80075e6:	f000 f915 	bl	8007814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2150      	movs	r1, #80	@ 0x50
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 f96e 	bl	80078d2 <TIM_ITRx_SetConfig>
      break;
 80075f6:	e02c      	b.n	8007652 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007604:	461a      	mov	r2, r3
 8007606:	f000 f934 	bl	8007872 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2160      	movs	r1, #96	@ 0x60
 8007610:	4618      	mov	r0, r3
 8007612:	f000 f95e 	bl	80078d2 <TIM_ITRx_SetConfig>
      break;
 8007616:	e01c      	b.n	8007652 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007624:	461a      	mov	r2, r3
 8007626:	f000 f8f5 	bl	8007814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2140      	movs	r1, #64	@ 0x40
 8007630:	4618      	mov	r0, r3
 8007632:	f000 f94e 	bl	80078d2 <TIM_ITRx_SetConfig>
      break;
 8007636:	e00c      	b.n	8007652 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f000 f945 	bl	80078d2 <TIM_ITRx_SetConfig>
      break;
 8007648:	e003      	b.n	8007652 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	73fb      	strb	r3, [r7, #15]
      break;
 800764e:	e000      	b.n	8007652 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007650:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a46      	ldr	r2, [pc, #280]	@ (80077e8 <TIM_Base_SetConfig+0x12c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d013      	beq.n	80076fc <TIM_Base_SetConfig+0x40>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076da:	d00f      	beq.n	80076fc <TIM_Base_SetConfig+0x40>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a43      	ldr	r2, [pc, #268]	@ (80077ec <TIM_Base_SetConfig+0x130>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00b      	beq.n	80076fc <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a42      	ldr	r2, [pc, #264]	@ (80077f0 <TIM_Base_SetConfig+0x134>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d007      	beq.n	80076fc <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a41      	ldr	r2, [pc, #260]	@ (80077f4 <TIM_Base_SetConfig+0x138>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d003      	beq.n	80076fc <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a40      	ldr	r2, [pc, #256]	@ (80077f8 <TIM_Base_SetConfig+0x13c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d108      	bne.n	800770e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a35      	ldr	r2, [pc, #212]	@ (80077e8 <TIM_Base_SetConfig+0x12c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d02b      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800771c:	d027      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a32      	ldr	r2, [pc, #200]	@ (80077ec <TIM_Base_SetConfig+0x130>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d023      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a31      	ldr	r2, [pc, #196]	@ (80077f0 <TIM_Base_SetConfig+0x134>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01f      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a30      	ldr	r2, [pc, #192]	@ (80077f4 <TIM_Base_SetConfig+0x138>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d01b      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a2f      	ldr	r2, [pc, #188]	@ (80077f8 <TIM_Base_SetConfig+0x13c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d017      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a2e      	ldr	r2, [pc, #184]	@ (80077fc <TIM_Base_SetConfig+0x140>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d013      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a2d      	ldr	r2, [pc, #180]	@ (8007800 <TIM_Base_SetConfig+0x144>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00f      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a2c      	ldr	r2, [pc, #176]	@ (8007804 <TIM_Base_SetConfig+0x148>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00b      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a2b      	ldr	r2, [pc, #172]	@ (8007808 <TIM_Base_SetConfig+0x14c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d007      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a2a      	ldr	r2, [pc, #168]	@ (800780c <TIM_Base_SetConfig+0x150>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d003      	beq.n	800776e <TIM_Base_SetConfig+0xb2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a29      	ldr	r2, [pc, #164]	@ (8007810 <TIM_Base_SetConfig+0x154>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d108      	bne.n	8007780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a10      	ldr	r2, [pc, #64]	@ (80077e8 <TIM_Base_SetConfig+0x12c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d003      	beq.n	80077b4 <TIM_Base_SetConfig+0xf8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a12      	ldr	r2, [pc, #72]	@ (80077f8 <TIM_Base_SetConfig+0x13c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d103      	bne.n	80077bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	691a      	ldr	r2, [r3, #16]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d105      	bne.n	80077da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f023 0201 	bic.w	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	611a      	str	r2, [r3, #16]
  }
}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40000400 	.word	0x40000400
 80077f0:	40000800 	.word	0x40000800
 80077f4:	40000c00 	.word	0x40000c00
 80077f8:	40010400 	.word	0x40010400
 80077fc:	40014000 	.word	0x40014000
 8007800:	40014400 	.word	0x40014400
 8007804:	40014800 	.word	0x40014800
 8007808:	40001800 	.word	0x40001800
 800780c:	40001c00 	.word	0x40001c00
 8007810:	40002000 	.word	0x40002000

08007814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	f023 0201 	bic.w	r2, r3, #1
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800783e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f023 030a 	bic.w	r3, r3, #10
 8007850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007872:	b480      	push	{r7}
 8007874:	b087      	sub	sp, #28
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f023 0210 	bic.w	r2, r3, #16
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800789c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	031b      	lsls	r3, r3, #12
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	621a      	str	r2, [r3, #32]
}
 80078c6:	bf00      	nop
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f043 0307 	orr.w	r3, r3, #7
 80078f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	609a      	str	r2, [r3, #8]
}
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	021a      	lsls	r2, r3, #8
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	431a      	orrs	r2, r3
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4313      	orrs	r3, r2
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	609a      	str	r2, [r3, #8]
}
 800793c:	bf00      	nop
 800793e:	371c      	adds	r7, #28
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800795c:	2302      	movs	r3, #2
 800795e:	e05a      	b.n	8007a16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a21      	ldr	r2, [pc, #132]	@ (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d022      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ac:	d01d      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d018      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d013      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00e      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a18      	ldr	r2, [pc, #96]	@ (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d009      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a17      	ldr	r2, [pc, #92]	@ (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d004      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a15      	ldr	r2, [pc, #84]	@ (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d10c      	bne.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40010000 	.word	0x40010000
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40010400 	.word	0x40010400
 8007a38:	40014000 	.word	0x40014000
 8007a3c:	40001800 	.word	0x40001800

08007a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e042      	b.n	8007b00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d106      	bne.n	8007a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fd f82e 	bl	8004af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2224      	movs	r2, #36	@ 0x24
 8007a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa09 	bl	8007ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	695a      	ldr	r2, [r3, #20]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	@ 0x28
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b20      	cmp	r3, #32
 8007b26:	d175      	bne.n	8007c14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_UART_Transmit+0x2c>
 8007b2e:	88fb      	ldrh	r3, [r7, #6]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e06e      	b.n	8007c16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2221      	movs	r2, #33	@ 0x21
 8007b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b46:	f7fd f8ab 	bl	8004ca0 <HAL_GetTick>
 8007b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	88fa      	ldrh	r2, [r7, #6]
 8007b50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	88fa      	ldrh	r2, [r7, #6]
 8007b56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b60:	d108      	bne.n	8007b74 <HAL_UART_Transmit+0x6c>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d104      	bne.n	8007b74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	61bb      	str	r3, [r7, #24]
 8007b72:	e003      	b.n	8007b7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b7c:	e02e      	b.n	8007bdc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2200      	movs	r2, #0
 8007b86:	2180      	movs	r1, #128	@ 0x80
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 f8df 	bl	8007d4c <UART_WaitOnFlagUntilTimeout>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d005      	beq.n	8007ba0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e03a      	b.n	8007c16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	3302      	adds	r3, #2
 8007bba:	61bb      	str	r3, [r7, #24]
 8007bbc:	e007      	b.n	8007bce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	781a      	ldrb	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1cb      	bne.n	8007b7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2200      	movs	r2, #0
 8007bee:	2140      	movs	r1, #64	@ 0x40
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 f8ab 	bl	8007d4c <UART_WaitOnFlagUntilTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e006      	b.n	8007c16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	e000      	b.n	8007c16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007c14:	2302      	movs	r3, #2
  }
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b08a      	sub	sp, #40	@ 0x28
 8007c22:	af02      	add	r7, sp, #8
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	603b      	str	r3, [r7, #0]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	f040 8081 	bne.w	8007d42 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <HAL_UART_Receive+0x2e>
 8007c46:	88fb      	ldrh	r3, [r7, #6]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e079      	b.n	8007d44 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2222      	movs	r2, #34	@ 0x22
 8007c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c64:	f7fd f81c 	bl	8004ca0 <HAL_GetTick>
 8007c68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c7e:	d108      	bne.n	8007c92 <HAL_UART_Receive+0x74>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	61bb      	str	r3, [r7, #24]
 8007c90:	e003      	b.n	8007c9a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007c9a:	e047      	b.n	8007d2c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2120      	movs	r1, #32
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 f850 	bl	8007d4c <UART_WaitOnFlagUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e042      	b.n	8007d44 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10c      	bne.n	8007cde <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	3302      	adds	r3, #2
 8007cda:	61bb      	str	r3, [r7, #24]
 8007cdc:	e01f      	b.n	8007d1e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce6:	d007      	beq.n	8007cf8 <HAL_UART_Receive+0xda>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <HAL_UART_Receive+0xe8>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	e008      	b.n	8007d18 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1b2      	bne.n	8007c9c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e000      	b.n	8007d44 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007d42:	2302      	movs	r3, #2
  }
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3720      	adds	r7, #32
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d5c:	e03b      	b.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d64:	d037      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d66:	f7fc ff9b 	bl	8004ca0 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	6a3a      	ldr	r2, [r7, #32]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d302      	bcc.n	8007d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e03a      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f003 0304 	and.w	r3, r3, #4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d023      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b80      	cmp	r3, #128	@ 0x80
 8007d92:	d020      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b40      	cmp	r3, #64	@ 0x40
 8007d98:	d01d      	beq.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d116      	bne.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007da8:	2300      	movs	r3, #0
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 f81d 	bl	8007dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2208      	movs	r2, #8
 8007dc8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e00f      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	bf0c      	ite	eq
 8007de6:	2301      	moveq	r3, #1
 8007de8:	2300      	movne	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d0b4      	beq.n	8007d5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b095      	sub	sp, #84	@ 0x54
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	330c      	adds	r3, #12
 8007e24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e26:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e5      	bne.n	8007e06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f023 0301 	bic.w	r3, r3, #1
 8007e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3314      	adds	r3, #20
 8007e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e5      	bne.n	8007e3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d119      	bne.n	8007eaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f023 0310 	bic.w	r3, r3, #16
 8007e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	330c      	adds	r3, #12
 8007e94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e96:	61ba      	str	r2, [r7, #24]
 8007e98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6979      	ldr	r1, [r7, #20]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e5      	bne.n	8007e76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007eb8:	bf00      	nop
 8007eba:	3754      	adds	r7, #84	@ 0x54
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ec8:	b0c0      	sub	sp, #256	@ 0x100
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee0:	68d9      	ldr	r1, [r3, #12]
 8007ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	ea40 0301 	orr.w	r3, r0, r1
 8007eec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f1c:	f021 010c 	bic.w	r1, r1, #12
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3e:	6999      	ldr	r1, [r3, #24]
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	ea40 0301 	orr.w	r3, r0, r1
 8007f4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b8f      	ldr	r3, [pc, #572]	@ (8008190 <UART_SetConfig+0x2cc>)
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d005      	beq.n	8007f64 <UART_SetConfig+0xa0>
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	4b8d      	ldr	r3, [pc, #564]	@ (8008194 <UART_SetConfig+0x2d0>)
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d104      	bne.n	8007f6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f64:	f7fd fe7e 	bl	8005c64 <HAL_RCC_GetPCLK2Freq>
 8007f68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f6c:	e003      	b.n	8007f76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f6e:	f7fd fe65 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 8007f72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f80:	f040 810c 	bne.w	800819c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f96:	4622      	mov	r2, r4
 8007f98:	462b      	mov	r3, r5
 8007f9a:	1891      	adds	r1, r2, r2
 8007f9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f9e:	415b      	adcs	r3, r3
 8007fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	eb12 0801 	adds.w	r8, r2, r1
 8007fac:	4629      	mov	r1, r5
 8007fae:	eb43 0901 	adc.w	r9, r3, r1
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fc6:	4690      	mov	r8, r2
 8007fc8:	4699      	mov	r9, r3
 8007fca:	4623      	mov	r3, r4
 8007fcc:	eb18 0303 	adds.w	r3, r8, r3
 8007fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	eb49 0303 	adc.w	r3, r9, r3
 8007fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007fee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	18db      	adds	r3, r3, r3
 8007ff6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	eb42 0303 	adc.w	r3, r2, r3
 8007ffe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008004:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008008:	f7f8 febe 	bl	8000d88 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4b61      	ldr	r3, [pc, #388]	@ (8008198 <UART_SetConfig+0x2d4>)
 8008012:	fba3 2302 	umull	r2, r3, r3, r2
 8008016:	095b      	lsrs	r3, r3, #5
 8008018:	011c      	lsls	r4, r3, #4
 800801a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800801e:	2200      	movs	r2, #0
 8008020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008024:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008028:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800802c:	4642      	mov	r2, r8
 800802e:	464b      	mov	r3, r9
 8008030:	1891      	adds	r1, r2, r2
 8008032:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008034:	415b      	adcs	r3, r3
 8008036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008038:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800803c:	4641      	mov	r1, r8
 800803e:	eb12 0a01 	adds.w	sl, r2, r1
 8008042:	4649      	mov	r1, r9
 8008044:	eb43 0b01 	adc.w	fp, r3, r1
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008054:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800805c:	4692      	mov	sl, r2
 800805e:	469b      	mov	fp, r3
 8008060:	4643      	mov	r3, r8
 8008062:	eb1a 0303 	adds.w	r3, sl, r3
 8008066:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800806a:	464b      	mov	r3, r9
 800806c:	eb4b 0303 	adc.w	r3, fp, r3
 8008070:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008080:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008084:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008088:	460b      	mov	r3, r1
 800808a:	18db      	adds	r3, r3, r3
 800808c:	643b      	str	r3, [r7, #64]	@ 0x40
 800808e:	4613      	mov	r3, r2
 8008090:	eb42 0303 	adc.w	r3, r2, r3
 8008094:	647b      	str	r3, [r7, #68]	@ 0x44
 8008096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800809a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800809e:	f7f8 fe73 	bl	8000d88 <__aeabi_uldivmod>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4611      	mov	r1, r2
 80080a8:	4b3b      	ldr	r3, [pc, #236]	@ (8008198 <UART_SetConfig+0x2d4>)
 80080aa:	fba3 2301 	umull	r2, r3, r3, r1
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	2264      	movs	r2, #100	@ 0x64
 80080b2:	fb02 f303 	mul.w	r3, r2, r3
 80080b6:	1acb      	subs	r3, r1, r3
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80080be:	4b36      	ldr	r3, [pc, #216]	@ (8008198 <UART_SetConfig+0x2d4>)
 80080c0:	fba3 2302 	umull	r2, r3, r3, r2
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80080cc:	441c      	add	r4, r3
 80080ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80080dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80080e0:	4642      	mov	r2, r8
 80080e2:	464b      	mov	r3, r9
 80080e4:	1891      	adds	r1, r2, r2
 80080e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080e8:	415b      	adcs	r3, r3
 80080ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080f0:	4641      	mov	r1, r8
 80080f2:	1851      	adds	r1, r2, r1
 80080f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80080f6:	4649      	mov	r1, r9
 80080f8:	414b      	adcs	r3, r1
 80080fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008108:	4659      	mov	r1, fp
 800810a:	00cb      	lsls	r3, r1, #3
 800810c:	4651      	mov	r1, sl
 800810e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008112:	4651      	mov	r1, sl
 8008114:	00ca      	lsls	r2, r1, #3
 8008116:	4610      	mov	r0, r2
 8008118:	4619      	mov	r1, r3
 800811a:	4603      	mov	r3, r0
 800811c:	4642      	mov	r2, r8
 800811e:	189b      	adds	r3, r3, r2
 8008120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008124:	464b      	mov	r3, r9
 8008126:	460a      	mov	r2, r1
 8008128:	eb42 0303 	adc.w	r3, r2, r3
 800812c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800813c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008144:	460b      	mov	r3, r1
 8008146:	18db      	adds	r3, r3, r3
 8008148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800814a:	4613      	mov	r3, r2
 800814c:	eb42 0303 	adc.w	r3, r2, r3
 8008150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008156:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800815a:	f7f8 fe15 	bl	8000d88 <__aeabi_uldivmod>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <UART_SetConfig+0x2d4>)
 8008164:	fba3 1302 	umull	r1, r3, r3, r2
 8008168:	095b      	lsrs	r3, r3, #5
 800816a:	2164      	movs	r1, #100	@ 0x64
 800816c:	fb01 f303 	mul.w	r3, r1, r3
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	3332      	adds	r3, #50	@ 0x32
 8008176:	4a08      	ldr	r2, [pc, #32]	@ (8008198 <UART_SetConfig+0x2d4>)
 8008178:	fba2 2303 	umull	r2, r3, r2, r3
 800817c:	095b      	lsrs	r3, r3, #5
 800817e:	f003 0207 	and.w	r2, r3, #7
 8008182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4422      	add	r2, r4
 800818a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800818c:	e106      	b.n	800839c <UART_SetConfig+0x4d8>
 800818e:	bf00      	nop
 8008190:	40011000 	.word	0x40011000
 8008194:	40011400 	.word	0x40011400
 8008198:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800819c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081ae:	4642      	mov	r2, r8
 80081b0:	464b      	mov	r3, r9
 80081b2:	1891      	adds	r1, r2, r2
 80081b4:	6239      	str	r1, [r7, #32]
 80081b6:	415b      	adcs	r3, r3
 80081b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80081ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081be:	4641      	mov	r1, r8
 80081c0:	1854      	adds	r4, r2, r1
 80081c2:	4649      	mov	r1, r9
 80081c4:	eb43 0501 	adc.w	r5, r3, r1
 80081c8:	f04f 0200 	mov.w	r2, #0
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	00eb      	lsls	r3, r5, #3
 80081d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081d6:	00e2      	lsls	r2, r4, #3
 80081d8:	4614      	mov	r4, r2
 80081da:	461d      	mov	r5, r3
 80081dc:	4643      	mov	r3, r8
 80081de:	18e3      	adds	r3, r4, r3
 80081e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081e4:	464b      	mov	r3, r9
 80081e6:	eb45 0303 	adc.w	r3, r5, r3
 80081ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	f04f 0300 	mov.w	r3, #0
 8008206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800820a:	4629      	mov	r1, r5
 800820c:	008b      	lsls	r3, r1, #2
 800820e:	4621      	mov	r1, r4
 8008210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008214:	4621      	mov	r1, r4
 8008216:	008a      	lsls	r2, r1, #2
 8008218:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800821c:	f7f8 fdb4 	bl	8000d88 <__aeabi_uldivmod>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4b60      	ldr	r3, [pc, #384]	@ (80083a8 <UART_SetConfig+0x4e4>)
 8008226:	fba3 2302 	umull	r2, r3, r3, r2
 800822a:	095b      	lsrs	r3, r3, #5
 800822c:	011c      	lsls	r4, r3, #4
 800822e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008232:	2200      	movs	r2, #0
 8008234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008238:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800823c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008240:	4642      	mov	r2, r8
 8008242:	464b      	mov	r3, r9
 8008244:	1891      	adds	r1, r2, r2
 8008246:	61b9      	str	r1, [r7, #24]
 8008248:	415b      	adcs	r3, r3
 800824a:	61fb      	str	r3, [r7, #28]
 800824c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008250:	4641      	mov	r1, r8
 8008252:	1851      	adds	r1, r2, r1
 8008254:	6139      	str	r1, [r7, #16]
 8008256:	4649      	mov	r1, r9
 8008258:	414b      	adcs	r3, r1
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	f04f 0300 	mov.w	r3, #0
 8008264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008268:	4659      	mov	r1, fp
 800826a:	00cb      	lsls	r3, r1, #3
 800826c:	4651      	mov	r1, sl
 800826e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008272:	4651      	mov	r1, sl
 8008274:	00ca      	lsls	r2, r1, #3
 8008276:	4610      	mov	r0, r2
 8008278:	4619      	mov	r1, r3
 800827a:	4603      	mov	r3, r0
 800827c:	4642      	mov	r2, r8
 800827e:	189b      	adds	r3, r3, r2
 8008280:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008284:	464b      	mov	r3, r9
 8008286:	460a      	mov	r2, r1
 8008288:	eb42 0303 	adc.w	r3, r2, r3
 800828c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	67bb      	str	r3, [r7, #120]	@ 0x78
 800829a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	f04f 0300 	mov.w	r3, #0
 80082a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082a8:	4649      	mov	r1, r9
 80082aa:	008b      	lsls	r3, r1, #2
 80082ac:	4641      	mov	r1, r8
 80082ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082b2:	4641      	mov	r1, r8
 80082b4:	008a      	lsls	r2, r1, #2
 80082b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80082ba:	f7f8 fd65 	bl	8000d88 <__aeabi_uldivmod>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4611      	mov	r1, r2
 80082c4:	4b38      	ldr	r3, [pc, #224]	@ (80083a8 <UART_SetConfig+0x4e4>)
 80082c6:	fba3 2301 	umull	r2, r3, r3, r1
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	2264      	movs	r2, #100	@ 0x64
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	1acb      	subs	r3, r1, r3
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	3332      	adds	r3, #50	@ 0x32
 80082d8:	4a33      	ldr	r2, [pc, #204]	@ (80083a8 <UART_SetConfig+0x4e4>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082e4:	441c      	add	r4, r3
 80082e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082ea:	2200      	movs	r2, #0
 80082ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80082ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80082f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80082f4:	4642      	mov	r2, r8
 80082f6:	464b      	mov	r3, r9
 80082f8:	1891      	adds	r1, r2, r2
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	415b      	adcs	r3, r3
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008304:	4641      	mov	r1, r8
 8008306:	1851      	adds	r1, r2, r1
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	4649      	mov	r1, r9
 800830c:	414b      	adcs	r3, r1
 800830e:	607b      	str	r3, [r7, #4]
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800831c:	4659      	mov	r1, fp
 800831e:	00cb      	lsls	r3, r1, #3
 8008320:	4651      	mov	r1, sl
 8008322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008326:	4651      	mov	r1, sl
 8008328:	00ca      	lsls	r2, r1, #3
 800832a:	4610      	mov	r0, r2
 800832c:	4619      	mov	r1, r3
 800832e:	4603      	mov	r3, r0
 8008330:	4642      	mov	r2, r8
 8008332:	189b      	adds	r3, r3, r2
 8008334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008336:	464b      	mov	r3, r9
 8008338:	460a      	mov	r2, r1
 800833a:	eb42 0303 	adc.w	r3, r2, r3
 800833e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	663b      	str	r3, [r7, #96]	@ 0x60
 800834a:	667a      	str	r2, [r7, #100]	@ 0x64
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008358:	4649      	mov	r1, r9
 800835a:	008b      	lsls	r3, r1, #2
 800835c:	4641      	mov	r1, r8
 800835e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008362:	4641      	mov	r1, r8
 8008364:	008a      	lsls	r2, r1, #2
 8008366:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800836a:	f7f8 fd0d 	bl	8000d88 <__aeabi_uldivmod>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <UART_SetConfig+0x4e4>)
 8008374:	fba3 1302 	umull	r1, r3, r3, r2
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	2164      	movs	r1, #100	@ 0x64
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	3332      	adds	r3, #50	@ 0x32
 8008386:	4a08      	ldr	r2, [pc, #32]	@ (80083a8 <UART_SetConfig+0x4e4>)
 8008388:	fba2 2303 	umull	r2, r3, r2, r3
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	f003 020f 	and.w	r2, r3, #15
 8008392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4422      	add	r2, r4
 800839a:	609a      	str	r2, [r3, #8]
}
 800839c:	bf00      	nop
 800839e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083a2:	46bd      	mov	sp, r7
 80083a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083a8:	51eb851f 	.word	0x51eb851f

080083ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80083b0:	4904      	ldr	r1, [pc, #16]	@ (80083c4 <MX_FATFS_Init+0x18>)
 80083b2:	4805      	ldr	r0, [pc, #20]	@ (80083c8 <MX_FATFS_Init+0x1c>)
 80083b4:	f003 fb42 	bl	800ba3c <FATFS_LinkDriver>
 80083b8:	4603      	mov	r3, r0
 80083ba:	461a      	mov	r2, r3
 80083bc:	4b03      	ldr	r3, [pc, #12]	@ (80083cc <MX_FATFS_Init+0x20>)
 80083be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80083c0:	bf00      	nop
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20001054 	.word	0x20001054
 80083c8:	20000020 	.word	0x20000020
 80083cc:	20001050 	.word	0x20001050

080083d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80083d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 f9d7 	bl	80087a0 <USER_SPI_initialize>
 80083f2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fab5 	bl	8008978 <USER_SPI_status>
 800840e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	4603      	mov	r3, r0
 8008426:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8008428:	7bf8      	ldrb	r0, [r7, #15]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	f000 fab8 	bl	80089a4 <USER_SPI_read>
 8008434:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
 800844a:	4603      	mov	r3, r0
 800844c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800844e:	7bf8      	ldrb	r0, [r7, #15]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	f000 fb0b 	bl	8008a70 <USER_SPI_write>
 800845a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	603a      	str	r2, [r7, #0]
 800846e:	71fb      	strb	r3, [r7, #7]
 8008470:	460b      	mov	r3, r1
 8008472:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8008474:	79b9      	ldrb	r1, [r7, #6]
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fb74 	bl	8008b68 <USER_SPI_ioctl>
 8008480:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008494:	f7fc fc04 	bl	8004ca0 <HAL_GetTick>
 8008498:	4603      	mov	r3, r0
 800849a:	4a04      	ldr	r2, [pc, #16]	@ (80084ac <SPI_Timer_On+0x20>)
 800849c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800849e:	4a04      	ldr	r2, [pc, #16]	@ (80084b0 <SPI_Timer_On+0x24>)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6013      	str	r3, [r2, #0]
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	2000105c 	.word	0x2000105c
 80084b0:	20001060 	.word	0x20001060

080084b4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80084b8:	f7fc fbf2 	bl	8004ca0 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	4b06      	ldr	r3, [pc, #24]	@ (80084d8 <SPI_Timer_Status+0x24>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	1ad2      	subs	r2, r2, r3
 80084c4:	4b05      	ldr	r3, [pc, #20]	@ (80084dc <SPI_Timer_Status+0x28>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	bf34      	ite	cc
 80084cc:	2301      	movcc	r3, #1
 80084ce:	2300      	movcs	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	2000105c 	.word	0x2000105c
 80084dc:	20001060 	.word	0x20001060

080084e0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	4603      	mov	r3, r0
 80084e8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80084ea:	f107 020f 	add.w	r2, r7, #15
 80084ee:	1df9      	adds	r1, r7, #7
 80084f0:	2332      	movs	r3, #50	@ 0x32
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	2301      	movs	r3, #1
 80084f6:	4804      	ldr	r0, [pc, #16]	@ (8008508 <xchg_spi+0x28>)
 80084f8:	f7fe f9dd 	bl	80068b6 <HAL_SPI_TransmitReceive>
    return rxDat;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000e18 	.word	0x20000e18

0800850c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800850c:	b590      	push	{r4, r7, lr}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e00a      	b.n	8008532 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	18d4      	adds	r4, r2, r3
 8008522:	20ff      	movs	r0, #255	@ 0xff
 8008524:	f7ff ffdc 	bl	80084e0 <xchg_spi>
 8008528:	4603      	mov	r3, r0
 800852a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	429a      	cmp	r2, r3
 8008538:	d3f0      	bcc.n	800851c <rcvr_spi_multi+0x10>
	}
}
 800853a:	bf00      	nop
 800853c:	bf00      	nop
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	bd90      	pop	{r4, r7, pc}

08008544 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	b29a      	uxth	r2, r3
 8008552:	f04f 33ff 	mov.w	r3, #4294967295
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4803      	ldr	r0, [pc, #12]	@ (8008568 <xmit_spi_multi+0x24>)
 800855a:	f7fe f868 	bl	800662e <HAL_SPI_Transmit>
}
 800855e:	bf00      	nop
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000e18 	.word	0x20000e18

0800856c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008574:	f7fc fb94 	bl	8004ca0 <HAL_GetTick>
 8008578:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800857e:	20ff      	movs	r0, #255	@ 0xff
 8008580:	f7ff ffae 	bl	80084e0 <xchg_spi>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	2bff      	cmp	r3, #255	@ 0xff
 800858c:	d007      	beq.n	800859e <wait_ready+0x32>
 800858e:	f7fc fb87 	bl	8004ca0 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	429a      	cmp	r2, r3
 800859c:	d8ef      	bhi.n	800857e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2bff      	cmp	r3, #255	@ 0xff
 80085a2:	bf0c      	ite	eq
 80085a4:	2301      	moveq	r3, #1
 80085a6:	2300      	movne	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80085b8:	2201      	movs	r2, #1
 80085ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085be:	4804      	ldr	r0, [pc, #16]	@ (80085d0 <despiselect+0x1c>)
 80085c0:	f7fd fa18 	bl	80059f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80085c4:	20ff      	movs	r0, #255	@ 0xff
 80085c6:	f7ff ff8b 	bl	80084e0 <xchg_spi>

}
 80085ca:	bf00      	nop
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40020000 	.word	0x40020000

080085d4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80085d8:	2200      	movs	r2, #0
 80085da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085de:	480a      	ldr	r0, [pc, #40]	@ (8008608 <spiselect+0x34>)
 80085e0:	f7fd fa08 	bl	80059f4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80085e4:	20ff      	movs	r0, #255	@ 0xff
 80085e6:	f7ff ff7b 	bl	80084e0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80085ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80085ee:	f7ff ffbd 	bl	800856c <wait_ready>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <spiselect+0x28>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e002      	b.n	8008602 <spiselect+0x2e>

	despiselect();
 80085fc:	f7ff ffda 	bl	80085b4 <despiselect>
	return 0;	/* Timeout */
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40020000 	.word	0x40020000

0800860c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008616:	20c8      	movs	r0, #200	@ 0xc8
 8008618:	f7ff ff38 	bl	800848c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800861c:	20ff      	movs	r0, #255	@ 0xff
 800861e:	f7ff ff5f 	bl	80084e0 <xchg_spi>
 8008622:	4603      	mov	r3, r0
 8008624:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	2bff      	cmp	r3, #255	@ 0xff
 800862a:	d104      	bne.n	8008636 <rcvr_datablock+0x2a>
 800862c:	f7ff ff42 	bl	80084b4 <SPI_Timer_Status>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f2      	bne.n	800861c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	2bfe      	cmp	r3, #254	@ 0xfe
 800863a:	d001      	beq.n	8008640 <rcvr_datablock+0x34>
 800863c:	2300      	movs	r3, #0
 800863e:	e00a      	b.n	8008656 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff ff62 	bl	800850c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008648:	20ff      	movs	r0, #255	@ 0xff
 800864a:	f7ff ff49 	bl	80084e0 <xchg_spi>
 800864e:	20ff      	movs	r0, #255	@ 0xff
 8008650:	f7ff ff46 	bl	80084e0 <xchg_spi>

	return 1;						/* Function succeeded */
 8008654:	2301      	movs	r3, #1
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800866a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800866e:	f7ff ff7d 	bl	800856c <wait_ready>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <xmit_datablock+0x1e>
 8008678:	2300      	movs	r3, #0
 800867a:	e01e      	b.n	80086ba <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	4618      	mov	r0, r3
 8008680:	f7ff ff2e 	bl	80084e0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	2bfd      	cmp	r3, #253	@ 0xfd
 8008688:	d016      	beq.n	80086b8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800868a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff ff58 	bl	8008544 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008694:	20ff      	movs	r0, #255	@ 0xff
 8008696:	f7ff ff23 	bl	80084e0 <xchg_spi>
 800869a:	20ff      	movs	r0, #255	@ 0xff
 800869c:	f7ff ff20 	bl	80084e0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80086a0:	20ff      	movs	r0, #255	@ 0xff
 80086a2:	f7ff ff1d 	bl	80084e0 <xchg_spi>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	f003 031f 	and.w	r3, r3, #31
 80086b0:	2b05      	cmp	r3, #5
 80086b2:	d001      	beq.n	80086b8 <xmit_datablock+0x5a>
 80086b4:	2300      	movs	r3, #0
 80086b6:	e000      	b.n	80086ba <xmit_datablock+0x5c>
	}
	return 1;
 80086b8:	2301      	movs	r3, #1
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	4603      	mov	r3, r0
 80086ca:	6039      	str	r1, [r7, #0]
 80086cc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80086ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da0e      	bge.n	80086f4 <send_cmd+0x32>
		cmd &= 0x7F;
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086dc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80086de:	2100      	movs	r1, #0
 80086e0:	2037      	movs	r0, #55	@ 0x37
 80086e2:	f7ff ffee 	bl	80086c2 <send_cmd>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d901      	bls.n	80086f4 <send_cmd+0x32>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	e051      	b.n	8008798 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	2b0c      	cmp	r3, #12
 80086f8:	d008      	beq.n	800870c <send_cmd+0x4a>
		despiselect();
 80086fa:	f7ff ff5b 	bl	80085b4 <despiselect>
		if (!spiselect()) return 0xFF;
 80086fe:	f7ff ff69 	bl	80085d4 <spiselect>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <send_cmd+0x4a>
 8008708:	23ff      	movs	r3, #255	@ 0xff
 800870a:	e045      	b.n	8008798 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008712:	b2db      	uxtb	r3, r3
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fee3 	bl	80084e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	0e1b      	lsrs	r3, r3, #24
 800871e:	b2db      	uxtb	r3, r3
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff fedd 	bl	80084e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	0c1b      	lsrs	r3, r3, #16
 800872a:	b2db      	uxtb	r3, r3
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff fed7 	bl	80084e0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	0a1b      	lsrs	r3, r3, #8
 8008736:	b2db      	uxtb	r3, r3
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fed1 	bl	80084e0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fecc 	bl	80084e0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <send_cmd+0x94>
 8008752:	2395      	movs	r3, #149	@ 0x95
 8008754:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b08      	cmp	r3, #8
 800875a:	d101      	bne.n	8008760 <send_cmd+0x9e>
 800875c:	2387      	movs	r3, #135	@ 0x87
 800875e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff febc 	bl	80084e0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b0c      	cmp	r3, #12
 800876c:	d102      	bne.n	8008774 <send_cmd+0xb2>
 800876e:	20ff      	movs	r0, #255	@ 0xff
 8008770:	f7ff feb6 	bl	80084e0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8008774:	230a      	movs	r3, #10
 8008776:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8008778:	20ff      	movs	r0, #255	@ 0xff
 800877a:	f7ff feb1 	bl	80084e0 <xchg_spi>
 800877e:	4603      	mov	r3, r0
 8008780:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8008782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008786:	2b00      	cmp	r3, #0
 8008788:	da05      	bge.n	8008796 <send_cmd+0xd4>
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	3b01      	subs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1f0      	bne.n	8008778 <send_cmd+0xb6>

	return res;							/* Return received response */
 8008796:	7bbb      	ldrb	r3, [r7, #14]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80087a0:	b590      	push	{r4, r7, lr}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <USER_SPI_initialize+0x14>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e0d6      	b.n	8008962 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80087b4:	4b6d      	ldr	r3, [pc, #436]	@ (800896c <USER_SPI_initialize+0x1cc>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <USER_SPI_initialize+0x2a>
 80087c2:	4b6a      	ldr	r3, [pc, #424]	@ (800896c <USER_SPI_initialize+0x1cc>)
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	e0cb      	b.n	8008962 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80087ca:	4b69      	ldr	r3, [pc, #420]	@ (8008970 <USER_SPI_initialize+0x1d0>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80087d4:	4b66      	ldr	r3, [pc, #408]	@ (8008970 <USER_SPI_initialize+0x1d0>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80087dc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80087de:	230a      	movs	r3, #10
 80087e0:	73fb      	strb	r3, [r7, #15]
 80087e2:	e005      	b.n	80087f0 <USER_SPI_initialize+0x50>
 80087e4:	20ff      	movs	r0, #255	@ 0xff
 80087e6:	f7ff fe7b 	bl	80084e0 <xchg_spi>
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f6      	bne.n	80087e4 <USER_SPI_initialize+0x44>

	ty = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80087fa:	2100      	movs	r1, #0
 80087fc:	2000      	movs	r0, #0
 80087fe:	f7ff ff60 	bl	80086c2 <send_cmd>
 8008802:	4603      	mov	r3, r0
 8008804:	2b01      	cmp	r3, #1
 8008806:	f040 808b 	bne.w	8008920 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800880a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800880e:	f7ff fe3d 	bl	800848c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8008812:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8008816:	2008      	movs	r0, #8
 8008818:	f7ff ff53 	bl	80086c2 <send_cmd>
 800881c:	4603      	mov	r3, r0
 800881e:	2b01      	cmp	r3, #1
 8008820:	d151      	bne.n	80088c6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
 8008826:	e00d      	b.n	8008844 <USER_SPI_initialize+0xa4>
 8008828:	7bfc      	ldrb	r4, [r7, #15]
 800882a:	20ff      	movs	r0, #255	@ 0xff
 800882c:	f7ff fe58 	bl	80084e0 <xchg_spi>
 8008830:	4603      	mov	r3, r0
 8008832:	461a      	mov	r2, r3
 8008834:	f104 0310 	add.w	r3, r4, #16
 8008838:	443b      	add	r3, r7
 800883a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	3301      	adds	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	2b03      	cmp	r3, #3
 8008848:	d9ee      	bls.n	8008828 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800884a:	7abb      	ldrb	r3, [r7, #10]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d167      	bne.n	8008920 <USER_SPI_initialize+0x180>
 8008850:	7afb      	ldrb	r3, [r7, #11]
 8008852:	2baa      	cmp	r3, #170	@ 0xaa
 8008854:	d164      	bne.n	8008920 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8008856:	bf00      	nop
 8008858:	f7ff fe2c 	bl	80084b4 <SPI_Timer_Status>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d007      	beq.n	8008872 <USER_SPI_initialize+0xd2>
 8008862:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008866:	20a9      	movs	r0, #169	@ 0xa9
 8008868:	f7ff ff2b 	bl	80086c2 <send_cmd>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f2      	bne.n	8008858 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8008872:	f7ff fe1f 	bl	80084b4 <SPI_Timer_Status>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d051      	beq.n	8008920 <USER_SPI_initialize+0x180>
 800887c:	2100      	movs	r1, #0
 800887e:	203a      	movs	r0, #58	@ 0x3a
 8008880:	f7ff ff1f 	bl	80086c2 <send_cmd>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d14a      	bne.n	8008920 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
 800888e:	e00d      	b.n	80088ac <USER_SPI_initialize+0x10c>
 8008890:	7bfc      	ldrb	r4, [r7, #15]
 8008892:	20ff      	movs	r0, #255	@ 0xff
 8008894:	f7ff fe24 	bl	80084e0 <xchg_spi>
 8008898:	4603      	mov	r3, r0
 800889a:	461a      	mov	r2, r3
 800889c:	f104 0310 	add.w	r3, r4, #16
 80088a0:	443b      	add	r3, r7
 80088a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	3301      	adds	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d9ee      	bls.n	8008890 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80088b2:	7a3b      	ldrb	r3, [r7, #8]
 80088b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <USER_SPI_initialize+0x120>
 80088bc:	230c      	movs	r3, #12
 80088be:	e000      	b.n	80088c2 <USER_SPI_initialize+0x122>
 80088c0:	2304      	movs	r3, #4
 80088c2:	737b      	strb	r3, [r7, #13]
 80088c4:	e02c      	b.n	8008920 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80088c6:	2100      	movs	r1, #0
 80088c8:	20a9      	movs	r0, #169	@ 0xa9
 80088ca:	f7ff fefa 	bl	80086c2 <send_cmd>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d804      	bhi.n	80088de <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80088d4:	2302      	movs	r3, #2
 80088d6:	737b      	strb	r3, [r7, #13]
 80088d8:	23a9      	movs	r3, #169	@ 0xa9
 80088da:	73bb      	strb	r3, [r7, #14]
 80088dc:	e003      	b.n	80088e6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80088de:	2301      	movs	r3, #1
 80088e0:	737b      	strb	r3, [r7, #13]
 80088e2:	2301      	movs	r3, #1
 80088e4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80088e6:	bf00      	nop
 80088e8:	f7ff fde4 	bl	80084b4 <SPI_Timer_Status>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <USER_SPI_initialize+0x162>
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2100      	movs	r1, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff fee3 	bl	80086c2 <send_cmd>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f2      	bne.n	80088e8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8008902:	f7ff fdd7 	bl	80084b4 <SPI_Timer_Status>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <USER_SPI_initialize+0x17c>
 800890c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008910:	2010      	movs	r0, #16
 8008912:	f7ff fed6 	bl	80086c2 <send_cmd>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <USER_SPI_initialize+0x180>
				ty = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8008920:	4a14      	ldr	r2, [pc, #80]	@ (8008974 <USER_SPI_initialize+0x1d4>)
 8008922:	7b7b      	ldrb	r3, [r7, #13]
 8008924:	7013      	strb	r3, [r2, #0]
	despiselect();
 8008926:	f7ff fe45 	bl	80085b4 <despiselect>

	if (ty) {			/* OK */
 800892a:	7b7b      	ldrb	r3, [r7, #13]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d012      	beq.n	8008956 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8008930:	4b0f      	ldr	r3, [pc, #60]	@ (8008970 <USER_SPI_initialize+0x1d0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800893a:	4b0d      	ldr	r3, [pc, #52]	@ (8008970 <USER_SPI_initialize+0x1d0>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f042 0210 	orr.w	r2, r2, #16
 8008942:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8008944:	4b09      	ldr	r3, [pc, #36]	@ (800896c <USER_SPI_initialize+0x1cc>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	f023 0301 	bic.w	r3, r3, #1
 800894e:	b2da      	uxtb	r2, r3
 8008950:	4b06      	ldr	r3, [pc, #24]	@ (800896c <USER_SPI_initialize+0x1cc>)
 8008952:	701a      	strb	r2, [r3, #0]
 8008954:	e002      	b.n	800895c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8008956:	4b05      	ldr	r3, [pc, #20]	@ (800896c <USER_SPI_initialize+0x1cc>)
 8008958:	2201      	movs	r2, #1
 800895a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800895c:	4b03      	ldr	r3, [pc, #12]	@ (800896c <USER_SPI_initialize+0x1cc>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b2db      	uxtb	r3, r3
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	bd90      	pop	{r4, r7, pc}
 800896a:	bf00      	nop
 800896c:	20000034 	.word	0x20000034
 8008970:	20000e18 	.word	0x20000e18
 8008974:	20001058 	.word	0x20001058

08008978 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8008982:	79fb      	ldrb	r3, [r7, #7]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <USER_SPI_status+0x14>
 8008988:	2301      	movs	r3, #1
 800898a:	e002      	b.n	8008992 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800898c:	4b04      	ldr	r3, [pc, #16]	@ (80089a0 <USER_SPI_status+0x28>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	b2db      	uxtb	r3, r3
}
 8008992:	4618      	mov	r0, r3
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	20000034 	.word	0x20000034

080089a4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	607a      	str	r2, [r7, #4]
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d102      	bne.n	80089c0 <USER_SPI_read+0x1c>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <USER_SPI_read+0x20>
 80089c0:	2304      	movs	r3, #4
 80089c2:	e04d      	b.n	8008a60 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80089c4:	4b28      	ldr	r3, [pc, #160]	@ (8008a68 <USER_SPI_read+0xc4>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <USER_SPI_read+0x32>
 80089d2:	2303      	movs	r3, #3
 80089d4:	e044      	b.n	8008a60 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80089d6:	4b25      	ldr	r3, [pc, #148]	@ (8008a6c <USER_SPI_read+0xc8>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	f003 0308 	and.w	r3, r3, #8
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d102      	bne.n	80089e8 <USER_SPI_read+0x44>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	025b      	lsls	r3, r3, #9
 80089e6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d111      	bne.n	8008a12 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	2011      	movs	r0, #17
 80089f2:	f7ff fe66 	bl	80086c2 <send_cmd>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d129      	bne.n	8008a50 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80089fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a00:	68b8      	ldr	r0, [r7, #8]
 8008a02:	f7ff fe03 	bl	800860c <rcvr_datablock>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d021      	beq.n	8008a50 <USER_SPI_read+0xac>
			count = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	e01e      	b.n	8008a50 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	2012      	movs	r0, #18
 8008a16:	f7ff fe54 	bl	80086c2 <send_cmd>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d117      	bne.n	8008a50 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8008a20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a24:	68b8      	ldr	r0, [r7, #8]
 8008a26:	f7ff fdf1 	bl	800860c <rcvr_datablock>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00a      	beq.n	8008a46 <USER_SPI_read+0xa2>
				buff += 512;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008a36:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	603b      	str	r3, [r7, #0]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1ed      	bne.n	8008a20 <USER_SPI_read+0x7c>
 8008a44:	e000      	b.n	8008a48 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8008a46:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8008a48:	2100      	movs	r1, #0
 8008a4a:	200c      	movs	r0, #12
 8008a4c:	f7ff fe39 	bl	80086c2 <send_cmd>
		}
	}
	despiselect();
 8008a50:	f7ff fdb0 	bl	80085b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bf14      	ite	ne
 8008a5a:	2301      	movne	r3, #1
 8008a5c:	2300      	moveq	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20000034 	.word	0x20000034
 8008a6c:	20001058 	.word	0x20001058

08008a70 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d102      	bne.n	8008a8c <USER_SPI_write+0x1c>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <USER_SPI_write+0x20>
 8008a8c:	2304      	movs	r3, #4
 8008a8e:	e063      	b.n	8008b58 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8008a90:	4b33      	ldr	r3, [pc, #204]	@ (8008b60 <USER_SPI_write+0xf0>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <USER_SPI_write+0x32>
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e05a      	b.n	8008b58 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8008aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8008b60 <USER_SPI_write+0xf0>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <USER_SPI_write+0x44>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e051      	b.n	8008b58 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8008ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8008b64 <USER_SPI_write+0xf4>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	f003 0308 	and.w	r3, r3, #8
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <USER_SPI_write+0x56>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	025b      	lsls	r3, r3, #9
 8008ac4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d110      	bne.n	8008aee <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	2018      	movs	r0, #24
 8008ad0:	f7ff fdf7 	bl	80086c2 <send_cmd>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d136      	bne.n	8008b48 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8008ada:	21fe      	movs	r1, #254	@ 0xfe
 8008adc:	68b8      	ldr	r0, [r7, #8]
 8008ade:	f7ff fdbe 	bl	800865e <xmit_datablock>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d02f      	beq.n	8008b48 <USER_SPI_write+0xd8>
			count = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	e02c      	b.n	8008b48 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8008aee:	4b1d      	ldr	r3, [pc, #116]	@ (8008b64 <USER_SPI_write+0xf4>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	f003 0306 	and.w	r3, r3, #6
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <USER_SPI_write+0x92>
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	2097      	movs	r0, #151	@ 0x97
 8008afe:	f7ff fde0 	bl	80086c2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	2019      	movs	r0, #25
 8008b06:	f7ff fddc 	bl	80086c2 <send_cmd>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11b      	bne.n	8008b48 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8008b10:	21fc      	movs	r1, #252	@ 0xfc
 8008b12:	68b8      	ldr	r0, [r7, #8]
 8008b14:	f7ff fda3 	bl	800865e <xmit_datablock>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <USER_SPI_write+0xc4>
				buff += 512;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008b24:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	603b      	str	r3, [r7, #0]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1ee      	bne.n	8008b10 <USER_SPI_write+0xa0>
 8008b32:	e000      	b.n	8008b36 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8008b34:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8008b36:	21fd      	movs	r1, #253	@ 0xfd
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f7ff fd90 	bl	800865e <xmit_datablock>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <USER_SPI_write+0xd8>
 8008b44:	2301      	movs	r3, #1
 8008b46:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8008b48:	f7ff fd34 	bl	80085b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	bf14      	ite	ne
 8008b52:	2301      	movne	r3, #1
 8008b54:	2300      	moveq	r3, #0
 8008b56:	b2db      	uxtb	r3, r3
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20000034 	.word	0x20000034
 8008b64:	20001058 	.word	0x20001058

08008b68 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08c      	sub	sp, #48	@ 0x30
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	603a      	str	r2, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
 8008b74:	460b      	mov	r3, r1
 8008b76:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <USER_SPI_ioctl+0x1a>
 8008b7e:	2304      	movs	r3, #4
 8008b80:	e15a      	b.n	8008e38 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008b82:	4baf      	ldr	r3, [pc, #700]	@ (8008e40 <USER_SPI_ioctl+0x2d8>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <USER_SPI_ioctl+0x2c>
 8008b90:	2303      	movs	r3, #3
 8008b92:	e151      	b.n	8008e38 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8008b9a:	79bb      	ldrb	r3, [r7, #6]
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	f200 8136 	bhi.w	8008e0e <USER_SPI_ioctl+0x2a6>
 8008ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba8 <USER_SPI_ioctl+0x40>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bbd 	.word	0x08008bbd
 8008bac:	08008bd1 	.word	0x08008bd1
 8008bb0:	08008e0f 	.word	0x08008e0f
 8008bb4:	08008c7d 	.word	0x08008c7d
 8008bb8:	08008d73 	.word	0x08008d73
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008bbc:	f7ff fd0a 	bl	80085d4 <spiselect>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 8127 	beq.w	8008e16 <USER_SPI_ioctl+0x2ae>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008bce:	e122      	b.n	8008e16 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	2009      	movs	r0, #9
 8008bd4:	f7ff fd75 	bl	80086c2 <send_cmd>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f040 811d 	bne.w	8008e1a <USER_SPI_ioctl+0x2b2>
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	2110      	movs	r1, #16
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fd10 	bl	800860c <rcvr_datablock>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 8113 	beq.w	8008e1a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008bf4:	7b3b      	ldrb	r3, [r7, #12]
 8008bf6:	099b      	lsrs	r3, r3, #6
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d111      	bne.n	8008c22 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8008bfe:	7d7b      	ldrb	r3, [r7, #21]
 8008c00:	461a      	mov	r2, r3
 8008c02:	7d3b      	ldrb	r3, [r7, #20]
 8008c04:	021b      	lsls	r3, r3, #8
 8008c06:	4413      	add	r3, r2
 8008c08:	461a      	mov	r2, r3
 8008c0a:	7cfb      	ldrb	r3, [r7, #19]
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8008c12:	4413      	add	r3, r2
 8008c14:	3301      	adds	r3, #1
 8008c16:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	029a      	lsls	r2, r3, #10
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	e028      	b.n	8008c74 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008c22:	7c7b      	ldrb	r3, [r7, #17]
 8008c24:	f003 030f 	and.w	r3, r3, #15
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	7dbb      	ldrb	r3, [r7, #22]
 8008c2c:	09db      	lsrs	r3, r3, #7
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	4413      	add	r3, r2
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	7d7b      	ldrb	r3, [r7, #21]
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0306 	and.w	r3, r3, #6
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	4413      	add	r3, r2
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	3302      	adds	r3, #2
 8008c46:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8008c4a:	7d3b      	ldrb	r3, [r7, #20]
 8008c4c:	099b      	lsrs	r3, r3, #6
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	461a      	mov	r2, r3
 8008c52:	7cfb      	ldrb	r3, [r7, #19]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	441a      	add	r2, r3
 8008c58:	7cbb      	ldrb	r3, [r7, #18]
 8008c5a:	029b      	lsls	r3, r3, #10
 8008c5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008c60:	4413      	add	r3, r2
 8008c62:	3301      	adds	r3, #1
 8008c64:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8008c66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008c6a:	3b09      	subs	r3, #9
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	409a      	lsls	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008c7a:	e0ce      	b.n	8008e1a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008c7c:	4b71      	ldr	r3, [pc, #452]	@ (8008e44 <USER_SPI_ioctl+0x2dc>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d031      	beq.n	8008cec <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008c88:	2100      	movs	r1, #0
 8008c8a:	208d      	movs	r0, #141	@ 0x8d
 8008c8c:	f7ff fd19 	bl	80086c2 <send_cmd>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 80c3 	bne.w	8008e1e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008c98:	20ff      	movs	r0, #255	@ 0xff
 8008c9a:	f7ff fc21 	bl	80084e0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008c9e:	f107 030c 	add.w	r3, r7, #12
 8008ca2:	2110      	movs	r1, #16
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fcb1 	bl	800860c <rcvr_datablock>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 80b6 	beq.w	8008e1e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008cb2:	2330      	movs	r3, #48	@ 0x30
 8008cb4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008cb8:	e007      	b.n	8008cca <USER_SPI_ioctl+0x162>
 8008cba:	20ff      	movs	r0, #255	@ 0xff
 8008cbc:	f7ff fc10 	bl	80084e0 <xchg_spi>
 8008cc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008cca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f3      	bne.n	8008cba <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008cd2:	7dbb      	ldrb	r3, [r7, #22]
 8008cd4:	091b      	lsrs	r3, r3, #4
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	2310      	movs	r3, #16
 8008cdc:	fa03 f202 	lsl.w	r2, r3, r2
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008cea:	e098      	b.n	8008e1e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008cec:	2100      	movs	r1, #0
 8008cee:	2009      	movs	r0, #9
 8008cf0:	f7ff fce7 	bl	80086c2 <send_cmd>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f040 8091 	bne.w	8008e1e <USER_SPI_ioctl+0x2b6>
 8008cfc:	f107 030c 	add.w	r3, r7, #12
 8008d00:	2110      	movs	r1, #16
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff fc82 	bl	800860c <rcvr_datablock>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 8087 	beq.w	8008e1e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008d10:	4b4c      	ldr	r3, [pc, #304]	@ (8008e44 <USER_SPI_ioctl+0x2dc>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 0302 	and.w	r3, r3, #2
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d012      	beq.n	8008d42 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8008d1c:	7dbb      	ldrb	r3, [r7, #22]
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8008d24:	7dfa      	ldrb	r2, [r7, #23]
 8008d26:	09d2      	lsrs	r2, r2, #7
 8008d28:	b2d2      	uxtb	r2, r2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	7e7b      	ldrb	r3, [r7, #25]
 8008d30:	099b      	lsrs	r3, r3, #6
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	3b01      	subs	r3, #1
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e013      	b.n	8008d6a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8008d42:	7dbb      	ldrb	r3, [r7, #22]
 8008d44:	109b      	asrs	r3, r3, #2
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f003 031f 	and.w	r3, r3, #31
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	7dfa      	ldrb	r2, [r7, #23]
 8008d50:	00d2      	lsls	r2, r2, #3
 8008d52:	f002 0218 	and.w	r2, r2, #24
 8008d56:	7df9      	ldrb	r1, [r7, #23]
 8008d58:	0949      	lsrs	r1, r1, #5
 8008d5a:	b2c9      	uxtb	r1, r1
 8008d5c:	440a      	add	r2, r1
 8008d5e:	3201      	adds	r2, #1
 8008d60:	fb02 f303 	mul.w	r3, r2, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8008d70:	e055      	b.n	8008e1e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008d72:	4b34      	ldr	r3, [pc, #208]	@ (8008e44 <USER_SPI_ioctl+0x2dc>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	f003 0306 	and.w	r3, r3, #6
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d051      	beq.n	8008e22 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008d7e:	f107 020c 	add.w	r2, r7, #12
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	210b      	movs	r1, #11
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff feee 	bl	8008b68 <USER_SPI_ioctl>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d149      	bne.n	8008e26 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008d92:	7b3b      	ldrb	r3, [r7, #12]
 8008d94:	099b      	lsrs	r3, r3, #6
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <USER_SPI_ioctl+0x23e>
 8008d9c:	7dbb      	ldrb	r3, [r7, #22]
 8008d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d041      	beq.n	8008e2a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8008db6:	4b23      	ldr	r3, [pc, #140]	@ (8008e44 <USER_SPI_ioctl+0x2dc>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d105      	bne.n	8008dce <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc4:	025b      	lsls	r3, r3, #9
 8008dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	025b      	lsls	r3, r3, #9
 8008dcc:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008dce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dd0:	2020      	movs	r0, #32
 8008dd2:	f7ff fc76 	bl	80086c2 <send_cmd>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d128      	bne.n	8008e2e <USER_SPI_ioctl+0x2c6>
 8008ddc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008dde:	2021      	movs	r0, #33	@ 0x21
 8008de0:	f7ff fc6f 	bl	80086c2 <send_cmd>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d121      	bne.n	8008e2e <USER_SPI_ioctl+0x2c6>
 8008dea:	2100      	movs	r1, #0
 8008dec:	2026      	movs	r0, #38	@ 0x26
 8008dee:	f7ff fc68 	bl	80086c2 <send_cmd>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d11a      	bne.n	8008e2e <USER_SPI_ioctl+0x2c6>
 8008df8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008dfc:	f7ff fbb6 	bl	800856c <wait_ready>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d013      	beq.n	8008e2e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008e06:	2300      	movs	r3, #0
 8008e08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8008e0c:	e00f      	b.n	8008e2e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8008e0e:	2304      	movs	r3, #4
 8008e10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008e14:	e00c      	b.n	8008e30 <USER_SPI_ioctl+0x2c8>
		break;
 8008e16:	bf00      	nop
 8008e18:	e00a      	b.n	8008e30 <USER_SPI_ioctl+0x2c8>
		break;
 8008e1a:	bf00      	nop
 8008e1c:	e008      	b.n	8008e30 <USER_SPI_ioctl+0x2c8>
		break;
 8008e1e:	bf00      	nop
 8008e20:	e006      	b.n	8008e30 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008e22:	bf00      	nop
 8008e24:	e004      	b.n	8008e30 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008e26:	bf00      	nop
 8008e28:	e002      	b.n	8008e30 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008e2a:	bf00      	nop
 8008e2c:	e000      	b.n	8008e30 <USER_SPI_ioctl+0x2c8>
		break;
 8008e2e:	bf00      	nop
	}

	despiselect();
 8008e30:	f7ff fbc0 	bl	80085b4 <despiselect>

	return res;
 8008e34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3730      	adds	r7, #48	@ 0x30
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000034 	.word	0x20000034
 8008e44:	20001058 	.word	0x20001058

08008e48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	4a08      	ldr	r2, [pc, #32]	@ (8008e78 <disk_status+0x30>)
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	79fa      	ldrb	r2, [r7, #7]
 8008e60:	4905      	ldr	r1, [pc, #20]	@ (8008e78 <disk_status+0x30>)
 8008e62:	440a      	add	r2, r1
 8008e64:	7a12      	ldrb	r2, [r2, #8]
 8008e66:	4610      	mov	r0, r2
 8008e68:	4798      	blx	r3
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	2000108c 	.word	0x2000108c

08008e7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8008ec8 <disk_initialize+0x4c>)
 8008e8e:	5cd3      	ldrb	r3, [r2, r3]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d114      	bne.n	8008ebe <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	4a0c      	ldr	r2, [pc, #48]	@ (8008ec8 <disk_initialize+0x4c>)
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	79fa      	ldrb	r2, [r7, #7]
 8008ea2:	4909      	ldr	r1, [pc, #36]	@ (8008ec8 <disk_initialize+0x4c>)
 8008ea4:	440a      	add	r2, r1
 8008ea6:	7a12      	ldrb	r2, [r2, #8]
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3
 8008eac:	4603      	mov	r3, r0
 8008eae:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d103      	bne.n	8008ebe <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	4a03      	ldr	r2, [pc, #12]	@ (8008ec8 <disk_initialize+0x4c>)
 8008eba:	2101      	movs	r1, #1
 8008ebc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	2000108c 	.word	0x2000108c

08008ecc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008ecc:	b590      	push	{r4, r7, lr}
 8008ece:	b087      	sub	sp, #28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	4a0a      	ldr	r2, [pc, #40]	@ (8008f08 <disk_read+0x3c>)
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	689c      	ldr	r4, [r3, #8]
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	4a07      	ldr	r2, [pc, #28]	@ (8008f08 <disk_read+0x3c>)
 8008eec:	4413      	add	r3, r2
 8008eee:	7a18      	ldrb	r0, [r3, #8]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	47a0      	blx	r4
 8008ef8:	4603      	mov	r3, r0
 8008efa:	75fb      	strb	r3, [r7, #23]
  return res;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	371c      	adds	r7, #28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd90      	pop	{r4, r7, pc}
 8008f06:	bf00      	nop
 8008f08:	2000108c 	.word	0x2000108c

08008f0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008f0c:	b590      	push	{r4, r7, lr}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	607a      	str	r2, [r7, #4]
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8008f48 <disk_write+0x3c>)
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	68dc      	ldr	r4, [r3, #12]
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	4a07      	ldr	r2, [pc, #28]	@ (8008f48 <disk_write+0x3c>)
 8008f2c:	4413      	add	r3, r2
 8008f2e:	7a18      	ldrb	r0, [r3, #8]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	47a0      	blx	r4
 8008f38:	4603      	mov	r3, r0
 8008f3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd90      	pop	{r4, r7, pc}
 8008f46:	bf00      	nop
 8008f48:	2000108c 	.word	0x2000108c

08008f4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	603a      	str	r2, [r7, #0]
 8008f56:	71fb      	strb	r3, [r7, #7]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	4a09      	ldr	r2, [pc, #36]	@ (8008f84 <disk_ioctl+0x38>)
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	79fa      	ldrb	r2, [r7, #7]
 8008f6a:	4906      	ldr	r1, [pc, #24]	@ (8008f84 <disk_ioctl+0x38>)
 8008f6c:	440a      	add	r2, r1
 8008f6e:	7a10      	ldrb	r0, [r2, #8]
 8008f70:	79b9      	ldrb	r1, [r7, #6]
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
  return res;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	2000108c 	.word	0x2000108c

08008f88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3301      	adds	r3, #1
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008f98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	b21a      	sxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	b21b      	sxth	r3, r3
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	b21b      	sxth	r3, r3
 8008faa:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008fac:	89fb      	ldrh	r3, [r7, #14]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b085      	sub	sp, #20
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3303      	adds	r3, #3
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	3202      	adds	r2, #2
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	3201      	adds	r2, #1
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	7812      	ldrb	r2, [r2, #0]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]
	return rv;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	607a      	str	r2, [r7, #4]
 8009012:	887a      	ldrh	r2, [r7, #2]
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	701a      	strb	r2, [r3, #0]
 8009018:	887b      	ldrh	r3, [r7, #2]
 800901a:	0a1b      	lsrs	r3, r3, #8
 800901c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	887a      	ldrh	r2, [r7, #2]
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	701a      	strb	r2, [r3, #0]
}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	1c5a      	adds	r2, r3, #1
 8009044:	607a      	str	r2, [r7, #4]
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	b2d2      	uxtb	r2, r2
 800904a:	701a      	strb	r2, [r3, #0]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	0a1b      	lsrs	r3, r3, #8
 8009050:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	0a1b      	lsrs	r3, r3, #8
 8009062:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	607a      	str	r2, [r7, #4]
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	b2d2      	uxtb	r2, r2
 800906e:	701a      	strb	r2, [r3, #0]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	0a1b      	lsrs	r3, r3, #8
 8009074:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	701a      	strb	r2, [r3, #0]
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800908e:	b480      	push	{r7}
 8009090:	b087      	sub	sp, #28
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00d      	beq.n	80090c4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	1c53      	adds	r3, r2, #1
 80090ac:	613b      	str	r3, [r7, #16]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	1c59      	adds	r1, r3, #1
 80090b2:	6179      	str	r1, [r7, #20]
 80090b4:	7812      	ldrb	r2, [r2, #0]
 80090b6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	607b      	str	r3, [r7, #4]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1f1      	bne.n	80090a8 <mem_cpy+0x1a>
	}
}
 80090c4:	bf00      	nop
 80090c6:	371c      	adds	r7, #28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	617a      	str	r2, [r7, #20]
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	b2d2      	uxtb	r2, r2
 80090ea:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	607b      	str	r3, [r7, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1f3      	bne.n	80090e0 <mem_set+0x10>
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009106:	b480      	push	{r7}
 8009108:	b089      	sub	sp, #36	@ 0x24
 800910a:	af00      	add	r7, sp, #0
 800910c:	60f8      	str	r0, [r7, #12]
 800910e:	60b9      	str	r1, [r7, #8]
 8009110:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	61fb      	str	r3, [r7, #28]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	61fa      	str	r2, [r7, #28]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	4619      	mov	r1, r3
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	61ba      	str	r2, [r7, #24]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	1acb      	subs	r3, r1, r3
 8009132:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3b01      	subs	r3, #1
 8009138:	607b      	str	r3, [r7, #4]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <mem_cmp+0x40>
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0eb      	beq.n	800911e <mem_cmp+0x18>

	return r;
 8009146:	697b      	ldr	r3, [r7, #20]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3724      	adds	r7, #36	@ 0x24
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800915e:	e002      	b.n	8009166 <chk_chr+0x12>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3301      	adds	r3, #1
 8009164:	607b      	str	r3, [r7, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d005      	beq.n	800917a <chk_chr+0x26>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	4293      	cmp	r3, r2
 8009178:	d1f2      	bne.n	8009160 <chk_chr+0xc>
	return *str;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	781b      	ldrb	r3, [r3, #0]
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
	...

0800918c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009196:	2300      	movs	r3, #0
 8009198:	60bb      	str	r3, [r7, #8]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	e029      	b.n	80091f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80091a0:	4a27      	ldr	r2, [pc, #156]	@ (8009240 <chk_lock+0xb4>)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	4413      	add	r3, r2
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d01d      	beq.n	80091ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80091ae:	4a24      	ldr	r2, [pc, #144]	@ (8009240 <chk_lock+0xb4>)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	011b      	lsls	r3, r3, #4
 80091b4:	4413      	add	r3, r2
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d116      	bne.n	80091ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80091c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009240 <chk_lock+0xb4>)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	4413      	add	r3, r2
 80091c8:	3304      	adds	r3, #4
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d10c      	bne.n	80091ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80091d4:	4a1a      	ldr	r2, [pc, #104]	@ (8009240 <chk_lock+0xb4>)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	4413      	add	r3, r2
 80091dc:	3308      	adds	r3, #8
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d102      	bne.n	80091ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80091e8:	e007      	b.n	80091fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80091ea:	2301      	movs	r3, #1
 80091ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3301      	adds	r3, #1
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d9d2      	bls.n	80091a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d109      	bne.n	8009214 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d102      	bne.n	800920c <chk_lock+0x80>
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d101      	bne.n	8009210 <chk_lock+0x84>
 800920c:	2300      	movs	r3, #0
 800920e:	e010      	b.n	8009232 <chk_lock+0xa6>
 8009210:	2312      	movs	r3, #18
 8009212:	e00e      	b.n	8009232 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d108      	bne.n	800922c <chk_lock+0xa0>
 800921a:	4a09      	ldr	r2, [pc, #36]	@ (8009240 <chk_lock+0xb4>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	4413      	add	r3, r2
 8009222:	330c      	adds	r3, #12
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800922a:	d101      	bne.n	8009230 <chk_lock+0xa4>
 800922c:	2310      	movs	r3, #16
 800922e:	e000      	b.n	8009232 <chk_lock+0xa6>
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	2000106c 	.word	0x2000106c

08009244 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800924a:	2300      	movs	r3, #0
 800924c:	607b      	str	r3, [r7, #4]
 800924e:	e002      	b.n	8009256 <enq_lock+0x12>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3301      	adds	r3, #1
 8009254:	607b      	str	r3, [r7, #4]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d806      	bhi.n	800926a <enq_lock+0x26>
 800925c:	4a09      	ldr	r2, [pc, #36]	@ (8009284 <enq_lock+0x40>)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	4413      	add	r3, r2
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1f2      	bne.n	8009250 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b02      	cmp	r3, #2
 800926e:	bf14      	ite	ne
 8009270:	2301      	movne	r3, #1
 8009272:	2300      	moveq	r3, #0
 8009274:	b2db      	uxtb	r3, r3
}
 8009276:	4618      	mov	r0, r3
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	2000106c 	.word	0x2000106c

08009288 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	e01f      	b.n	80092d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009298:	4a41      	ldr	r2, [pc, #260]	@ (80093a0 <inc_lock+0x118>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	4413      	add	r3, r2
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d113      	bne.n	80092d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80092aa:	4a3d      	ldr	r2, [pc, #244]	@ (80093a0 <inc_lock+0x118>)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	4413      	add	r3, r2
 80092b2:	3304      	adds	r3, #4
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d109      	bne.n	80092d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80092be:	4a38      	ldr	r2, [pc, #224]	@ (80093a0 <inc_lock+0x118>)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	4413      	add	r3, r2
 80092c6:	3308      	adds	r3, #8
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d006      	beq.n	80092e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3301      	adds	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d9dc      	bls.n	8009298 <inc_lock+0x10>
 80092de:	e000      	b.n	80092e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80092e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d132      	bne.n	800934e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	e002      	b.n	80092f4 <inc_lock+0x6c>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3301      	adds	r3, #1
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d806      	bhi.n	8009308 <inc_lock+0x80>
 80092fa:	4a29      	ldr	r2, [pc, #164]	@ (80093a0 <inc_lock+0x118>)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	011b      	lsls	r3, r3, #4
 8009300:	4413      	add	r3, r2
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1f2      	bne.n	80092ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b02      	cmp	r3, #2
 800930c:	d101      	bne.n	8009312 <inc_lock+0x8a>
 800930e:	2300      	movs	r3, #0
 8009310:	e040      	b.n	8009394 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4922      	ldr	r1, [pc, #136]	@ (80093a0 <inc_lock+0x118>)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	011b      	lsls	r3, r3, #4
 800931c:	440b      	add	r3, r1
 800931e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	491e      	ldr	r1, [pc, #120]	@ (80093a0 <inc_lock+0x118>)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	011b      	lsls	r3, r3, #4
 800932a:	440b      	add	r3, r1
 800932c:	3304      	adds	r3, #4
 800932e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	695a      	ldr	r2, [r3, #20]
 8009334:	491a      	ldr	r1, [pc, #104]	@ (80093a0 <inc_lock+0x118>)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	011b      	lsls	r3, r3, #4
 800933a:	440b      	add	r3, r1
 800933c:	3308      	adds	r3, #8
 800933e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009340:	4a17      	ldr	r2, [pc, #92]	@ (80093a0 <inc_lock+0x118>)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	4413      	add	r3, r2
 8009348:	330c      	adds	r3, #12
 800934a:	2200      	movs	r2, #0
 800934c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d009      	beq.n	8009368 <inc_lock+0xe0>
 8009354:	4a12      	ldr	r2, [pc, #72]	@ (80093a0 <inc_lock+0x118>)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	011b      	lsls	r3, r3, #4
 800935a:	4413      	add	r3, r2
 800935c:	330c      	adds	r3, #12
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <inc_lock+0xe0>
 8009364:	2300      	movs	r3, #0
 8009366:	e015      	b.n	8009394 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d108      	bne.n	8009380 <inc_lock+0xf8>
 800936e:	4a0c      	ldr	r2, [pc, #48]	@ (80093a0 <inc_lock+0x118>)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	4413      	add	r3, r2
 8009376:	330c      	adds	r3, #12
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	3301      	adds	r3, #1
 800937c:	b29a      	uxth	r2, r3
 800937e:	e001      	b.n	8009384 <inc_lock+0xfc>
 8009380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009384:	4906      	ldr	r1, [pc, #24]	@ (80093a0 <inc_lock+0x118>)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	011b      	lsls	r3, r3, #4
 800938a:	440b      	add	r3, r1
 800938c:	330c      	adds	r3, #12
 800938e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3301      	adds	r3, #1
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	2000106c 	.word	0x2000106c

080093a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	607b      	str	r3, [r7, #4]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d825      	bhi.n	8009404 <dec_lock+0x60>
		n = Files[i].ctr;
 80093b8:	4a17      	ldr	r2, [pc, #92]	@ (8009418 <dec_lock+0x74>)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	011b      	lsls	r3, r3, #4
 80093be:	4413      	add	r3, r2
 80093c0:	330c      	adds	r3, #12
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80093c6:	89fb      	ldrh	r3, [r7, #14]
 80093c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093cc:	d101      	bne.n	80093d2 <dec_lock+0x2e>
 80093ce:	2300      	movs	r3, #0
 80093d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80093d2:	89fb      	ldrh	r3, [r7, #14]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <dec_lock+0x3a>
 80093d8:	89fb      	ldrh	r3, [r7, #14]
 80093da:	3b01      	subs	r3, #1
 80093dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80093de:	4a0e      	ldr	r2, [pc, #56]	@ (8009418 <dec_lock+0x74>)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	011b      	lsls	r3, r3, #4
 80093e4:	4413      	add	r3, r2
 80093e6:	330c      	adds	r3, #12
 80093e8:	89fa      	ldrh	r2, [r7, #14]
 80093ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80093ec:	89fb      	ldrh	r3, [r7, #14]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d105      	bne.n	80093fe <dec_lock+0x5a>
 80093f2:	4a09      	ldr	r2, [pc, #36]	@ (8009418 <dec_lock+0x74>)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	4413      	add	r3, r2
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	737b      	strb	r3, [r7, #13]
 8009402:	e001      	b.n	8009408 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009404:	2302      	movs	r3, #2
 8009406:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009408:	7b7b      	ldrb	r3, [r7, #13]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	2000106c 	.word	0x2000106c

0800941c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]
 8009428:	e010      	b.n	800944c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800942a:	4a0d      	ldr	r2, [pc, #52]	@ (8009460 <clear_lock+0x44>)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	4413      	add	r3, r2
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	429a      	cmp	r2, r3
 8009438:	d105      	bne.n	8009446 <clear_lock+0x2a>
 800943a:	4a09      	ldr	r2, [pc, #36]	@ (8009460 <clear_lock+0x44>)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	4413      	add	r3, r2
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3301      	adds	r3, #1
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d9eb      	bls.n	800942a <clear_lock+0xe>
	}
}
 8009452:	bf00      	nop
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	2000106c 	.word	0x2000106c

08009464 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	78db      	ldrb	r3, [r3, #3]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d034      	beq.n	80094e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	7858      	ldrb	r0, [r3, #1]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009488:	2301      	movs	r3, #1
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	f7ff fd3e 	bl	8008f0c <disk_write>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d002      	beq.n	800949c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009496:	2301      	movs	r3, #1
 8009498:	73fb      	strb	r3, [r7, #15]
 800949a:	e022      	b.n	80094e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	1ad2      	subs	r2, r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d217      	bcs.n	80094e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	789b      	ldrb	r3, [r3, #2]
 80094b6:	613b      	str	r3, [r7, #16]
 80094b8:	e010      	b.n	80094dc <sync_window+0x78>
					wsect += fs->fsize;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	4413      	add	r3, r2
 80094c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	7858      	ldrb	r0, [r3, #1]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80094ce:	2301      	movs	r3, #1
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	f7ff fd1b 	bl	8008f0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	3b01      	subs	r3, #1
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d8eb      	bhi.n	80094ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d01b      	beq.n	800953c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff ffad 	bl	8009464 <sync_window>
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d113      	bne.n	800953c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	7858      	ldrb	r0, [r3, #1]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800951e:	2301      	movs	r3, #1
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	f7ff fcd3 	bl	8008ecc <disk_read>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d004      	beq.n	8009536 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800952c:	f04f 33ff 	mov.w	r3, #4294967295
 8009530:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009532:	2301      	movs	r3, #1
 8009534:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff ff87 	bl	8009464 <sync_window>
 8009556:	4603      	mov	r3, r0
 8009558:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d158      	bne.n	8009612 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b03      	cmp	r3, #3
 8009566:	d148      	bne.n	80095fa <sync_fs+0xb2>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	791b      	ldrb	r3, [r3, #4]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d144      	bne.n	80095fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3330      	adds	r3, #48	@ 0x30
 8009574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009578:	2100      	movs	r1, #0
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff fda8 	bl	80090d0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3330      	adds	r3, #48	@ 0x30
 8009584:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009588:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fd37 	bl	8009000 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3330      	adds	r3, #48	@ 0x30
 8009596:	4921      	ldr	r1, [pc, #132]	@ (800961c <sync_fs+0xd4>)
 8009598:	4618      	mov	r0, r3
 800959a:	f7ff fd4c 	bl	8009036 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3330      	adds	r3, #48	@ 0x30
 80095a2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80095a6:	491e      	ldr	r1, [pc, #120]	@ (8009620 <sync_fs+0xd8>)
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff fd44 	bl	8009036 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3330      	adds	r3, #48	@ 0x30
 80095b2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7ff fd3a 	bl	8009036 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3330      	adds	r3, #48	@ 0x30
 80095c6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	4619      	mov	r1, r3
 80095d0:	4610      	mov	r0, r2
 80095d2:	f7ff fd30 	bl	8009036 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	69db      	ldr	r3, [r3, #28]
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	7858      	ldrb	r0, [r3, #1]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ee:	2301      	movs	r3, #1
 80095f0:	f7ff fc8c 	bl	8008f0c <disk_write>
			fs->fsi_flag = 0;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff fca2 	bl	8008f4c <disk_ioctl>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <sync_fs+0xca>
 800960e:	2301      	movs	r3, #1
 8009610:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009612:	7bfb      	ldrb	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	41615252 	.word	0x41615252
 8009620:	61417272 	.word	0x61417272

08009624 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	3b02      	subs	r3, #2
 8009632:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	3b02      	subs	r3, #2
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d301      	bcc.n	8009644 <clust2sect+0x20>
 8009640:	2300      	movs	r3, #0
 8009642:	e008      	b.n	8009656 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	895b      	ldrh	r3, [r3, #10]
 8009648:	461a      	mov	r2, r3
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	fb03 f202 	mul.w	r2, r3, r2
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009654:	4413      	add	r3, r2
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b086      	sub	sp, #24
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d904      	bls.n	8009682 <get_fat+0x20>
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d302      	bcc.n	8009688 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009682:	2301      	movs	r3, #1
 8009684:	617b      	str	r3, [r7, #20]
 8009686:	e08e      	b.n	80097a6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009688:	f04f 33ff 	mov.w	r3, #4294967295
 800968c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	2b03      	cmp	r3, #3
 8009694:	d061      	beq.n	800975a <get_fat+0xf8>
 8009696:	2b03      	cmp	r3, #3
 8009698:	dc7b      	bgt.n	8009792 <get_fat+0x130>
 800969a:	2b01      	cmp	r3, #1
 800969c:	d002      	beq.n	80096a4 <get_fat+0x42>
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d041      	beq.n	8009726 <get_fat+0xc4>
 80096a2:	e076      	b.n	8009792 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	085b      	lsrs	r3, r3, #1
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	6a1a      	ldr	r2, [r3, #32]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	0a5b      	lsrs	r3, r3, #9
 80096ba:	4413      	add	r3, r2
 80096bc:	4619      	mov	r1, r3
 80096be:	6938      	ldr	r0, [r7, #16]
 80096c0:	f7ff ff14 	bl	80094ec <move_window>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d166      	bne.n	8009798 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	1c5a      	adds	r2, r3, #1
 80096ce:	60fa      	str	r2, [r7, #12]
 80096d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	4413      	add	r3, r2
 80096d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	6a1a      	ldr	r2, [r3, #32]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	0a5b      	lsrs	r3, r3, #9
 80096e6:	4413      	add	r3, r2
 80096e8:	4619      	mov	r1, r3
 80096ea:	6938      	ldr	r0, [r7, #16]
 80096ec:	f7ff fefe 	bl	80094ec <move_window>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d152      	bne.n	800979c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	4413      	add	r3, r2
 8009700:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009704:	021b      	lsls	r3, r3, #8
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	4313      	orrs	r3, r2
 800970a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <get_fat+0xba>
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	091b      	lsrs	r3, r3, #4
 800971a:	e002      	b.n	8009722 <get_fat+0xc0>
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009722:	617b      	str	r3, [r7, #20]
			break;
 8009724:	e03f      	b.n	80097a6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	6a1a      	ldr	r2, [r3, #32]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	0a1b      	lsrs	r3, r3, #8
 800972e:	4413      	add	r3, r2
 8009730:	4619      	mov	r1, r3
 8009732:	6938      	ldr	r0, [r7, #16]
 8009734:	f7ff feda 	bl	80094ec <move_window>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d130      	bne.n	80097a0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800974c:	4413      	add	r3, r2
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff fc1a 	bl	8008f88 <ld_word>
 8009754:	4603      	mov	r3, r0
 8009756:	617b      	str	r3, [r7, #20]
			break;
 8009758:	e025      	b.n	80097a6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6a1a      	ldr	r2, [r3, #32]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	09db      	lsrs	r3, r3, #7
 8009762:	4413      	add	r3, r2
 8009764:	4619      	mov	r1, r3
 8009766:	6938      	ldr	r0, [r7, #16]
 8009768:	f7ff fec0 	bl	80094ec <move_window>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d118      	bne.n	80097a4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009780:	4413      	add	r3, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff fc19 	bl	8008fba <ld_dword>
 8009788:	4603      	mov	r3, r0
 800978a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800978e:	617b      	str	r3, [r7, #20]
			break;
 8009790:	e009      	b.n	80097a6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009792:	2301      	movs	r3, #1
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	e006      	b.n	80097a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009798:	bf00      	nop
 800979a:	e004      	b.n	80097a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800979c:	bf00      	nop
 800979e:	e002      	b.n	80097a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80097a0:	bf00      	nop
 80097a2:	e000      	b.n	80097a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097a4:	bf00      	nop
		}
	}

	return val;
 80097a6:	697b      	ldr	r3, [r7, #20]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3718      	adds	r7, #24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80097b0:	b590      	push	{r4, r7, lr}
 80097b2:	b089      	sub	sp, #36	@ 0x24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80097bc:	2302      	movs	r3, #2
 80097be:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	f240 80d9 	bls.w	800997a <put_fat+0x1ca>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	f080 80d3 	bcs.w	800997a <put_fat+0x1ca>
		switch (fs->fs_type) {
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b03      	cmp	r3, #3
 80097da:	f000 8096 	beq.w	800990a <put_fat+0x15a>
 80097de:	2b03      	cmp	r3, #3
 80097e0:	f300 80cb 	bgt.w	800997a <put_fat+0x1ca>
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d002      	beq.n	80097ee <put_fat+0x3e>
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d06e      	beq.n	80098ca <put_fat+0x11a>
 80097ec:	e0c5      	b.n	800997a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	085b      	lsrs	r3, r3, #1
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	4413      	add	r3, r2
 80097fa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a1a      	ldr	r2, [r3, #32]
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	0a5b      	lsrs	r3, r3, #9
 8009804:	4413      	add	r3, r2
 8009806:	4619      	mov	r1, r3
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f7ff fe6f 	bl	80094ec <move_window>
 800980e:	4603      	mov	r3, r0
 8009810:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009812:	7ffb      	ldrb	r3, [r7, #31]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f040 80a9 	bne.w	800996c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	1c59      	adds	r1, r3, #1
 8009824:	61b9      	str	r1, [r7, #24]
 8009826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982a:	4413      	add	r3, r2
 800982c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00d      	beq.n	8009854 <put_fat+0xa4>
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	b25b      	sxtb	r3, r3
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	b25a      	sxtb	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	b25b      	sxtb	r3, r3
 8009848:	011b      	lsls	r3, r3, #4
 800984a:	b25b      	sxtb	r3, r3
 800984c:	4313      	orrs	r3, r2
 800984e:	b25b      	sxtb	r3, r3
 8009850:	b2db      	uxtb	r3, r3
 8009852:	e001      	b.n	8009858 <put_fat+0xa8>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2201      	movs	r2, #1
 8009860:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a1a      	ldr	r2, [r3, #32]
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	0a5b      	lsrs	r3, r3, #9
 800986a:	4413      	add	r3, r2
 800986c:	4619      	mov	r1, r3
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fe3c 	bl	80094ec <move_window>
 8009874:	4603      	mov	r3, r0
 8009876:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009878:	7ffb      	ldrb	r3, [r7, #31]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d178      	bne.n	8009970 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988a:	4413      	add	r3, r2
 800988c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	d003      	beq.n	80098a0 <put_fat+0xf0>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	091b      	lsrs	r3, r3, #4
 800989c:	b2db      	uxtb	r3, r3
 800989e:	e00e      	b.n	80098be <put_fat+0x10e>
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	b25b      	sxtb	r3, r3
 80098a6:	f023 030f 	bic.w	r3, r3, #15
 80098aa:	b25a      	sxtb	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	b25b      	sxtb	r3, r3
 80098b2:	f003 030f 	and.w	r3, r3, #15
 80098b6:	b25b      	sxtb	r3, r3
 80098b8:	4313      	orrs	r3, r2
 80098ba:	b25b      	sxtb	r3, r3
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	70da      	strb	r2, [r3, #3]
			break;
 80098c8:	e057      	b.n	800997a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a1a      	ldr	r2, [r3, #32]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	0a1b      	lsrs	r3, r3, #8
 80098d2:	4413      	add	r3, r2
 80098d4:	4619      	mov	r1, r3
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f7ff fe08 	bl	80094ec <move_window>
 80098dc:	4603      	mov	r3, r0
 80098de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098e0:	7ffb      	ldrb	r3, [r7, #31]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d146      	bne.n	8009974 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80098f4:	4413      	add	r3, r2
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	b292      	uxth	r2, r2
 80098fa:	4611      	mov	r1, r2
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7ff fb7f 	bl	8009000 <st_word>
			fs->wflag = 1;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2201      	movs	r2, #1
 8009906:	70da      	strb	r2, [r3, #3]
			break;
 8009908:	e037      	b.n	800997a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a1a      	ldr	r2, [r3, #32]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	09db      	lsrs	r3, r3, #7
 8009912:	4413      	add	r3, r2
 8009914:	4619      	mov	r1, r3
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7ff fde8 	bl	80094ec <move_window>
 800991c:	4603      	mov	r3, r0
 800991e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009920:	7ffb      	ldrb	r3, [r7, #31]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d128      	bne.n	8009978 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800993a:	4413      	add	r3, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff fb3c 	bl	8008fba <ld_dword>
 8009942:	4603      	mov	r3, r0
 8009944:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009948:	4323      	orrs	r3, r4
 800994a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800995a:	4413      	add	r3, r2
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff fb69 	bl	8009036 <st_dword>
			fs->wflag = 1;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2201      	movs	r2, #1
 8009968:	70da      	strb	r2, [r3, #3]
			break;
 800996a:	e006      	b.n	800997a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800996c:	bf00      	nop
 800996e:	e004      	b.n	800997a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009970:	bf00      	nop
 8009972:	e002      	b.n	800997a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009974:	bf00      	nop
 8009976:	e000      	b.n	800997a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009978:	bf00      	nop
		}
	}
	return res;
 800997a:	7ffb      	ldrb	r3, [r7, #31]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3724      	adds	r7, #36	@ 0x24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd90      	pop	{r4, r7, pc}

08009984 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d904      	bls.n	80099aa <remove_chain+0x26>
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d301      	bcc.n	80099ae <remove_chain+0x2a>
 80099aa:	2302      	movs	r3, #2
 80099ac:	e04b      	b.n	8009a46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00c      	beq.n	80099ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80099b4:	f04f 32ff 	mov.w	r2, #4294967295
 80099b8:	6879      	ldr	r1, [r7, #4]
 80099ba:	69b8      	ldr	r0, [r7, #24]
 80099bc:	f7ff fef8 	bl	80097b0 <put_fat>
 80099c0:	4603      	mov	r3, r0
 80099c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80099c4:	7ffb      	ldrb	r3, [r7, #31]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <remove_chain+0x4a>
 80099ca:	7ffb      	ldrb	r3, [r7, #31]
 80099cc:	e03b      	b.n	8009a46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80099ce:	68b9      	ldr	r1, [r7, #8]
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f7ff fe46 	bl	8009662 <get_fat>
 80099d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d031      	beq.n	8009a42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d101      	bne.n	80099e8 <remove_chain+0x64>
 80099e4:	2302      	movs	r3, #2
 80099e6:	e02e      	b.n	8009a46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ee:	d101      	bne.n	80099f4 <remove_chain+0x70>
 80099f0:	2301      	movs	r3, #1
 80099f2:	e028      	b.n	8009a46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80099f4:	2200      	movs	r2, #0
 80099f6:	68b9      	ldr	r1, [r7, #8]
 80099f8:	69b8      	ldr	r0, [r7, #24]
 80099fa:	f7ff fed9 	bl	80097b0 <put_fat>
 80099fe:	4603      	mov	r3, r0
 8009a00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009a02:	7ffb      	ldrb	r3, [r7, #31]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <remove_chain+0x88>
 8009a08:	7ffb      	ldrb	r3, [r7, #31]
 8009a0a:	e01c      	b.n	8009a46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	691a      	ldr	r2, [r3, #16]
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	3b02      	subs	r3, #2
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d20b      	bcs.n	8009a32 <remove_chain+0xae>
			fs->free_clst++;
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	791b      	ldrb	r3, [r3, #4]
 8009a28:	f043 0301 	orr.w	r3, r3, #1
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d3c6      	bcc.n	80099ce <remove_chain+0x4a>
 8009a40:	e000      	b.n	8009a44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009a42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b088      	sub	sp, #32
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10d      	bne.n	8009a80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d004      	beq.n	8009a7a <create_chain+0x2c>
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d31b      	bcc.n	8009ab2 <create_chain+0x64>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	61bb      	str	r3, [r7, #24]
 8009a7e:	e018      	b.n	8009ab2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f7ff fded 	bl	8009662 <get_fat>
 8009a88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d801      	bhi.n	8009a94 <create_chain+0x46>
 8009a90:	2301      	movs	r3, #1
 8009a92:	e070      	b.n	8009b76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9a:	d101      	bne.n	8009aa0 <create_chain+0x52>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	e06a      	b.n	8009b76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d201      	bcs.n	8009aae <create_chain+0x60>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	e063      	b.n	8009b76 <create_chain+0x128>
		scl = clst;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d307      	bcc.n	8009ad6 <create_chain+0x88>
				ncl = 2;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009aca:	69fa      	ldr	r2, [r7, #28]
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d901      	bls.n	8009ad6 <create_chain+0x88>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	e04f      	b.n	8009b76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009ad6:	69f9      	ldr	r1, [r7, #28]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff fdc2 	bl	8009662 <get_fat>
 8009ade:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00e      	beq.n	8009b04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d003      	beq.n	8009af4 <create_chain+0xa6>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af2:	d101      	bne.n	8009af8 <create_chain+0xaa>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	e03e      	b.n	8009b76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009af8:	69fa      	ldr	r2, [r7, #28]
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d1da      	bne.n	8009ab6 <create_chain+0x68>
 8009b00:	2300      	movs	r3, #0
 8009b02:	e038      	b.n	8009b76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009b04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	69f9      	ldr	r1, [r7, #28]
 8009b0c:	6938      	ldr	r0, [r7, #16]
 8009b0e:	f7ff fe4f 	bl	80097b0 <put_fat>
 8009b12:	4603      	mov	r3, r0
 8009b14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d109      	bne.n	8009b30 <create_chain+0xe2>
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d006      	beq.n	8009b30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009b22:	69fa      	ldr	r2, [r7, #28]
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6938      	ldr	r0, [r7, #16]
 8009b28:	f7ff fe42 	bl	80097b0 <put_fat>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d116      	bne.n	8009b64 <create_chain+0x116>
		fs->last_clst = ncl;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	691a      	ldr	r2, [r3, #16]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	3b02      	subs	r3, #2
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d804      	bhi.n	8009b54 <create_chain+0x106>
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	1e5a      	subs	r2, r3, #1
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	791b      	ldrb	r3, [r3, #4]
 8009b58:	f043 0301 	orr.w	r3, r3, #1
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	711a      	strb	r2, [r3, #4]
 8009b62:	e007      	b.n	8009b74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d102      	bne.n	8009b70 <create_chain+0x122>
 8009b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6e:	e000      	b.n	8009b72 <create_chain+0x124>
 8009b70:	2301      	movs	r3, #1
 8009b72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009b74:	69fb      	ldr	r3, [r7, #28]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3720      	adds	r7, #32
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b087      	sub	sp, #28
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b92:	3304      	adds	r3, #4
 8009b94:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	0a5b      	lsrs	r3, r3, #9
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	8952      	ldrh	r2, [r2, #10]
 8009b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ba2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	1d1a      	adds	r2, r3, #4
 8009ba8:	613a      	str	r2, [r7, #16]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <clmt_clust+0x3a>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e010      	b.n	8009bda <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d307      	bcc.n	8009bd0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009bce:	e7e9      	b.n	8009ba4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009bd0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	4413      	add	r3, r2
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b086      	sub	sp, #24
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bfc:	d204      	bcs.n	8009c08 <dir_sdi+0x22>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	f003 031f 	and.w	r3, r3, #31
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	e063      	b.n	8009cd4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d106      	bne.n	8009c2c <dir_sdi+0x46>
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d902      	bls.n	8009c2c <dir_sdi+0x46>
		clst = fs->dirbase;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10c      	bne.n	8009c4c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	095b      	lsrs	r3, r3, #5
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	8912      	ldrh	r2, [r2, #8]
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d301      	bcc.n	8009c42 <dir_sdi+0x5c>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e048      	b.n	8009cd4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	61da      	str	r2, [r3, #28]
 8009c4a:	e029      	b.n	8009ca0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	895b      	ldrh	r3, [r3, #10]
 8009c50:	025b      	lsls	r3, r3, #9
 8009c52:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009c54:	e019      	b.n	8009c8a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6979      	ldr	r1, [r7, #20]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7ff fd01 	bl	8009662 <get_fat>
 8009c60:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c68:	d101      	bne.n	8009c6e <dir_sdi+0x88>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e032      	b.n	8009cd4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d904      	bls.n	8009c7e <dir_sdi+0x98>
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d301      	bcc.n	8009c82 <dir_sdi+0x9c>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e028      	b.n	8009cd4 <dir_sdi+0xee>
			ofs -= csz;
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d2e1      	bcs.n	8009c56 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009c92:	6979      	ldr	r1, [r7, #20]
 8009c94:	6938      	ldr	r0, [r7, #16]
 8009c96:	f7ff fcc5 	bl	8009624 <clust2sect>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <dir_sdi+0xcc>
 8009cae:	2302      	movs	r3, #2
 8009cb0:	e010      	b.n	8009cd4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	69da      	ldr	r2, [r3, #28]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	0a5b      	lsrs	r3, r3, #9
 8009cba:	441a      	add	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ccc:	441a      	add	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	3320      	adds	r3, #32
 8009cf2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	69db      	ldr	r3, [r3, #28]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d003      	beq.n	8009d04 <dir_next+0x28>
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d02:	d301      	bcc.n	8009d08 <dir_next+0x2c>
 8009d04:	2304      	movs	r3, #4
 8009d06:	e0aa      	b.n	8009e5e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f040 8098 	bne.w	8009e44 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10b      	bne.n	8009d3e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	095b      	lsrs	r3, r3, #5
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	8912      	ldrh	r2, [r2, #8]
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	f0c0 8088 	bcc.w	8009e44 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	61da      	str	r2, [r3, #28]
 8009d3a:	2304      	movs	r3, #4
 8009d3c:	e08f      	b.n	8009e5e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	0a5b      	lsrs	r3, r3, #9
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	8952      	ldrh	r2, [r2, #10]
 8009d46:	3a01      	subs	r2, #1
 8009d48:	4013      	ands	r3, r2
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d17a      	bne.n	8009e44 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	4619      	mov	r1, r3
 8009d56:	4610      	mov	r0, r2
 8009d58:	f7ff fc83 	bl	8009662 <get_fat>
 8009d5c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d801      	bhi.n	8009d68 <dir_next+0x8c>
 8009d64:	2302      	movs	r3, #2
 8009d66:	e07a      	b.n	8009e5e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6e:	d101      	bne.n	8009d74 <dir_next+0x98>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e074      	b.n	8009e5e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d358      	bcc.n	8009e30 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d104      	bne.n	8009d8e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	61da      	str	r2, [r3, #28]
 8009d8a:	2304      	movs	r3, #4
 8009d8c:	e067      	b.n	8009e5e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	4619      	mov	r1, r3
 8009d96:	4610      	mov	r0, r2
 8009d98:	f7ff fe59 	bl	8009a4e <create_chain>
 8009d9c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <dir_next+0xcc>
 8009da4:	2307      	movs	r3, #7
 8009da6:	e05a      	b.n	8009e5e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <dir_next+0xd6>
 8009dae:	2302      	movs	r3, #2
 8009db0:	e055      	b.n	8009e5e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db8:	d101      	bne.n	8009dbe <dir_next+0xe2>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e04f      	b.n	8009e5e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f7ff fb50 	bl	8009464 <sync_window>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <dir_next+0xf2>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e047      	b.n	8009e5e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3330      	adds	r3, #48	@ 0x30
 8009dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff f979 	bl	80090d0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009dde:	2300      	movs	r3, #0
 8009de0:	613b      	str	r3, [r7, #16]
 8009de2:	6979      	ldr	r1, [r7, #20]
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f7ff fc1d 	bl	8009624 <clust2sect>
 8009dea:	4602      	mov	r2, r0
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009df0:	e012      	b.n	8009e18 <dir_next+0x13c>
						fs->wflag = 1;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2201      	movs	r2, #1
 8009df6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7ff fb33 	bl	8009464 <sync_window>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <dir_next+0x12c>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e02a      	b.n	8009e5e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	613b      	str	r3, [r7, #16]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	895b      	ldrh	r3, [r3, #10]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d3e6      	bcc.n	8009df2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	1ad2      	subs	r2, r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009e36:	6979      	ldr	r1, [r7, #20]
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f7ff fbf3 	bl	8009624 <clust2sect>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e56:	441a      	add	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b086      	sub	sp, #24
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009e76:	2100      	movs	r1, #0
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff feb4 	bl	8009be6 <dir_sdi>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d12b      	bne.n	8009ee0 <dir_alloc+0x7a>
		n = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	4619      	mov	r1, r3
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f7ff fb2a 	bl	80094ec <move_window>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d11d      	bne.n	8009ede <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2be5      	cmp	r3, #229	@ 0xe5
 8009eaa:	d004      	beq.n	8009eb6 <dir_alloc+0x50>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d107      	bne.n	8009ec6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	613b      	str	r3, [r7, #16]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d102      	bne.n	8009eca <dir_alloc+0x64>
 8009ec4:	e00c      	b.n	8009ee0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009eca:	2101      	movs	r1, #1
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff ff05 	bl	8009cdc <dir_next>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0d7      	beq.n	8009e8c <dir_alloc+0x26>
 8009edc:	e000      	b.n	8009ee0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009ede:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009ee0:	7dfb      	ldrb	r3, [r7, #23]
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d101      	bne.n	8009eea <dir_alloc+0x84>
 8009ee6:	2307      	movs	r3, #7
 8009ee8:	75fb      	strb	r3, [r7, #23]
	return res;
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	331a      	adds	r3, #26
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff f840 	bl	8008f88 <ld_word>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d109      	bne.n	8009f28 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	3314      	adds	r3, #20
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff f835 	bl	8008f88 <ld_word>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	041b      	lsls	r3, r3, #16
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009f28:	68fb      	ldr	r3, [r7, #12]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	331a      	adds	r3, #26
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	b292      	uxth	r2, r2
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7ff f859 	bl	8009000 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d109      	bne.n	8009f6a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f103 0214 	add.w	r2, r3, #20
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f7ff f84b 	bl	8009000 <st_word>
	}
}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b086      	sub	sp, #24
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009f7c:	2304      	movs	r3, #4
 8009f7e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009f86:	e03c      	b.n	800a002 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6938      	ldr	r0, [r7, #16]
 8009f90:	f7ff faac 	bl	80094ec <move_window>
 8009f94:	4603      	mov	r3, r0
 8009f96:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d136      	bne.n	800a00c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d102      	bne.n	8009fb2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009fac:	2304      	movs	r3, #4
 8009fae:	75fb      	strb	r3, [r7, #23]
 8009fb0:	e031      	b.n	800a016 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	330b      	adds	r3, #11
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fbe:	73bb      	strb	r3, [r7, #14]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	7bba      	ldrb	r2, [r7, #14]
 8009fc4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2be5      	cmp	r3, #229	@ 0xe5
 8009fca:	d011      	beq.n	8009ff0 <dir_read+0x7e>
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fd0:	d00e      	beq.n	8009ff0 <dir_read+0x7e>
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
 8009fd4:	2b0f      	cmp	r3, #15
 8009fd6:	d00b      	beq.n	8009ff0 <dir_read+0x7e>
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	f023 0320 	bic.w	r3, r3, #32
 8009fde:	2b08      	cmp	r3, #8
 8009fe0:	bf0c      	ite	eq
 8009fe2:	2301      	moveq	r3, #1
 8009fe4:	2300      	movne	r3, #0
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	461a      	mov	r2, r3
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d00f      	beq.n	800a010 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7ff fe72 	bl	8009cdc <dir_next>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d108      	bne.n	800a014 <dir_read+0xa2>
	while (dp->sect) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1be      	bne.n	8009f88 <dir_read+0x16>
 800a00a:	e004      	b.n	800a016 <dir_read+0xa4>
		if (res != FR_OK) break;
 800a00c:	bf00      	nop
 800a00e:	e002      	b.n	800a016 <dir_read+0xa4>
				break;
 800a010:	bf00      	nop
 800a012:	e000      	b.n	800a016 <dir_read+0xa4>
		if (res != FR_OK) break;
 800a014:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <dir_read+0xb0>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	61da      	str	r2, [r3, #28]
	return res;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a03a:	2100      	movs	r1, #0
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7ff fdd2 	bl	8009be6 <dir_sdi>
 800a042:	4603      	mov	r3, r0
 800a044:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <dir_find+0x24>
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	e03e      	b.n	800a0ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	4619      	mov	r1, r3
 800a056:	6938      	ldr	r0, [r7, #16]
 800a058:	f7ff fa48 	bl	80094ec <move_window>
 800a05c:	4603      	mov	r3, r0
 800a05e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d12f      	bne.n	800a0c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <dir_find+0x4e>
 800a074:	2304      	movs	r3, #4
 800a076:	75fb      	strb	r3, [r7, #23]
 800a078:	e028      	b.n	800a0cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	330b      	adds	r3, #11
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a086:	b2da      	uxtb	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	330b      	adds	r3, #11
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	f003 0308 	and.w	r3, r3, #8
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <dir_find+0x86>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a18      	ldr	r0, [r3, #32]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3324      	adds	r3, #36	@ 0x24
 800a0a4:	220b      	movs	r2, #11
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f7ff f82d 	bl	8009106 <mem_cmp>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00b      	beq.n	800a0ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff fe11 	bl	8009cdc <dir_next>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d0c5      	beq.n	800a050 <dir_find+0x24>
 800a0c4:	e002      	b.n	800a0cc <dir_find+0xa0>
		if (res != FR_OK) break;
 800a0c6:	bf00      	nop
 800a0c8:	e000      	b.n	800a0cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a0ca:	bf00      	nop

	return res;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff febd 	bl	8009e66 <dir_alloc>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d11c      	bne.n	800a130 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	68b8      	ldr	r0, [r7, #8]
 800a0fe:	f7ff f9f5 	bl	80094ec <move_window>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a106:	7bfb      	ldrb	r3, [r7, #15]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d111      	bne.n	800a130 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	2220      	movs	r2, #32
 800a112:	2100      	movs	r1, #0
 800a114:	4618      	mov	r0, r3
 800a116:	f7fe ffdb 	bl	80090d0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a18      	ldr	r0, [r3, #32]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3324      	adds	r3, #36	@ 0x24
 800a122:	220b      	movs	r2, #11
 800a124:	4619      	mov	r1, r3
 800a126:	f7fe ffb2 	bl	800908e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	2201      	movs	r2, #1
 800a12e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	69db      	ldr	r3, [r3, #28]
 800a14c:	4619      	mov	r1, r3
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7ff f9cc 	bl	80094ec <move_window>
 800a154:	4603      	mov	r3, r0
 800a156:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800a158:	7afb      	ldrb	r3, [r7, #11]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d106      	bne.n	800a16c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a1b      	ldr	r3, [r3, #32]
 800a162:	22e5      	movs	r2, #229	@ 0xe5
 800a164:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2201      	movs	r2, #1
 800a16a:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800a16c:	7afb      	ldrb	r3, [r7, #11]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3324      	adds	r3, #36	@ 0x24
 800a18c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a18e:	220b      	movs	r2, #11
 800a190:	2120      	movs	r1, #32
 800a192:	68b8      	ldr	r0, [r7, #8]
 800a194:	f7fe ff9c 	bl	80090d0 <mem_set>
	si = i = 0; ni = 8;
 800a198:	2300      	movs	r3, #0
 800a19a:	613b      	str	r3, [r7, #16]
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	61fb      	str	r3, [r7, #28]
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	61fa      	str	r2, [r7, #28]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a1b2:	7efb      	ldrb	r3, [r7, #27]
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	d94e      	bls.n	800a256 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a1b8:	7efb      	ldrb	r3, [r7, #27]
 800a1ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800a1bc:	d006      	beq.n	800a1cc <create_name+0x54>
 800a1be:	7efb      	ldrb	r3, [r7, #27]
 800a1c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a1c2:	d110      	bne.n	800a1e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a1c4:	e002      	b.n	800a1cc <create_name+0x54>
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	61fb      	str	r3, [r7, #28]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800a1d6:	d0f6      	beq.n	800a1c6 <create_name+0x4e>
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	4413      	add	r3, r2
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2b5c      	cmp	r3, #92	@ 0x5c
 800a1e2:	d0f0      	beq.n	800a1c6 <create_name+0x4e>
			break;
 800a1e4:	e038      	b.n	800a258 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a1e6:	7efb      	ldrb	r3, [r7, #27]
 800a1e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1ea:	d003      	beq.n	800a1f4 <create_name+0x7c>
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d30c      	bcc.n	800a20e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2b0b      	cmp	r3, #11
 800a1f8:	d002      	beq.n	800a200 <create_name+0x88>
 800a1fa:	7efb      	ldrb	r3, [r7, #27]
 800a1fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1fe:	d001      	beq.n	800a204 <create_name+0x8c>
 800a200:	2306      	movs	r3, #6
 800a202:	e044      	b.n	800a28e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a204:	2308      	movs	r3, #8
 800a206:	613b      	str	r3, [r7, #16]
 800a208:	230b      	movs	r3, #11
 800a20a:	617b      	str	r3, [r7, #20]
			continue;
 800a20c:	e022      	b.n	800a254 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a20e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a212:	2b00      	cmp	r3, #0
 800a214:	da04      	bge.n	800a220 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a216:	7efb      	ldrb	r3, [r7, #27]
 800a218:	3b80      	subs	r3, #128	@ 0x80
 800a21a:	4a1f      	ldr	r2, [pc, #124]	@ (800a298 <create_name+0x120>)
 800a21c:	5cd3      	ldrb	r3, [r2, r3]
 800a21e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a220:	7efb      	ldrb	r3, [r7, #27]
 800a222:	4619      	mov	r1, r3
 800a224:	481d      	ldr	r0, [pc, #116]	@ (800a29c <create_name+0x124>)
 800a226:	f7fe ff95 	bl	8009154 <chk_chr>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <create_name+0xbc>
 800a230:	2306      	movs	r3, #6
 800a232:	e02c      	b.n	800a28e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a234:	7efb      	ldrb	r3, [r7, #27]
 800a236:	2b60      	cmp	r3, #96	@ 0x60
 800a238:	d905      	bls.n	800a246 <create_name+0xce>
 800a23a:	7efb      	ldrb	r3, [r7, #27]
 800a23c:	2b7a      	cmp	r3, #122	@ 0x7a
 800a23e:	d802      	bhi.n	800a246 <create_name+0xce>
 800a240:	7efb      	ldrb	r3, [r7, #27]
 800a242:	3b20      	subs	r3, #32
 800a244:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	613a      	str	r2, [r7, #16]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	4413      	add	r3, r2
 800a250:	7efa      	ldrb	r2, [r7, #27]
 800a252:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a254:	e7a6      	b.n	800a1a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a256:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	441a      	add	r2, r3
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <create_name+0xf4>
 800a268:	2306      	movs	r3, #6
 800a26a:	e010      	b.n	800a28e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	2be5      	cmp	r3, #229	@ 0xe5
 800a272:	d102      	bne.n	800a27a <create_name+0x102>
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2205      	movs	r2, #5
 800a278:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a27a:	7efb      	ldrb	r3, [r7, #27]
 800a27c:	2b20      	cmp	r3, #32
 800a27e:	d801      	bhi.n	800a284 <create_name+0x10c>
 800a280:	2204      	movs	r2, #4
 800a282:	e000      	b.n	800a286 <create_name+0x10e>
 800a284:	2200      	movs	r2, #0
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	330b      	adds	r3, #11
 800a28a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a28c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3720      	adds	r7, #32
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	08012104 	.word	0x08012104
 800a29c:	08010d64 	.word	0x08010d64

0800a2a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a2b4:	e002      	b.n	800a2bc <follow_path+0x1c>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	2b2f      	cmp	r3, #47	@ 0x2f
 800a2c2:	d0f8      	beq.n	800a2b6 <follow_path+0x16>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800a2ca:	d0f4      	beq.n	800a2b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b1f      	cmp	r3, #31
 800a2d8:	d80a      	bhi.n	800a2f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2280      	movs	r2, #128	@ 0x80
 800a2de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff fc7e 	bl	8009be6 <dir_sdi>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75fb      	strb	r3, [r7, #23]
 800a2ee:	e043      	b.n	800a378 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a2f0:	463b      	mov	r3, r7
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f7ff ff3f 	bl	800a178 <create_name>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a2fe:	7dfb      	ldrb	r3, [r7, #23]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d134      	bne.n	800a36e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7ff fe91 	bl	800a02c <dir_find>
 800a30a:	4603      	mov	r3, r0
 800a30c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a314:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00a      	beq.n	800a332 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
 800a31e:	2b04      	cmp	r3, #4
 800a320:	d127      	bne.n	800a372 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	f003 0304 	and.w	r3, r3, #4
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d122      	bne.n	800a372 <follow_path+0xd2>
 800a32c:	2305      	movs	r3, #5
 800a32e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a330:	e01f      	b.n	800a372 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a332:	7afb      	ldrb	r3, [r7, #11]
 800a334:	f003 0304 	and.w	r3, r3, #4
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d11c      	bne.n	800a376 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	799b      	ldrb	r3, [r3, #6]
 800a340:	f003 0310 	and.w	r3, r3, #16
 800a344:	2b00      	cmp	r3, #0
 800a346:	d102      	bne.n	800a34e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a348:	2305      	movs	r3, #5
 800a34a:	75fb      	strb	r3, [r7, #23]
 800a34c:	e014      	b.n	800a378 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35c:	4413      	add	r3, r2
 800a35e:	4619      	mov	r1, r3
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7ff fdc7 	bl	8009ef4 <ld_clust>
 800a366:	4602      	mov	r2, r0
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a36c:	e7c0      	b.n	800a2f0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a36e:	bf00      	nop
 800a370:	e002      	b.n	800a378 <follow_path+0xd8>
				break;
 800a372:	bf00      	nop
 800a374:	e000      	b.n	800a378 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a376:	bf00      	nop
			}
		}
	}

	return res;
 800a378:	7dfb      	ldrb	r3, [r7, #23]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a382:	b480      	push	{r7}
 800a384:	b087      	sub	sp, #28
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a38a:	f04f 33ff 	mov.w	r3, #4294967295
 800a38e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d031      	beq.n	800a3fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	617b      	str	r3, [r7, #20]
 800a39e:	e002      	b.n	800a3a6 <get_ldnumber+0x24>
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b20      	cmp	r3, #32
 800a3ac:	d903      	bls.n	800a3b6 <get_ldnumber+0x34>
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b3a      	cmp	r3, #58	@ 0x3a
 800a3b4:	d1f4      	bne.n	800a3a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800a3bc:	d11c      	bne.n	800a3f8 <get_ldnumber+0x76>
			tp = *path;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	60fa      	str	r2, [r7, #12]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	3b30      	subs	r3, #48	@ 0x30
 800a3ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b09      	cmp	r3, #9
 800a3d4:	d80e      	bhi.n	800a3f4 <get_ldnumber+0x72>
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d10a      	bne.n	800a3f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d107      	bne.n	800a3f4 <get_ldnumber+0x72>
					vol = (int)i;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	e002      	b.n	800a3fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a3fc:	693b      	ldr	r3, [r7, #16]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
	...

0800a40c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	70da      	strb	r2, [r3, #3]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295
 800a422:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff f860 	bl	80094ec <move_window>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <check_fs+0x2a>
 800a432:	2304      	movs	r3, #4
 800a434:	e038      	b.n	800a4a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3330      	adds	r3, #48	@ 0x30
 800a43a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe fda2 	bl	8008f88 <ld_word>
 800a444:	4603      	mov	r3, r0
 800a446:	461a      	mov	r2, r3
 800a448:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d001      	beq.n	800a454 <check_fs+0x48>
 800a450:	2303      	movs	r3, #3
 800a452:	e029      	b.n	800a4a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a45a:	2be9      	cmp	r3, #233	@ 0xe9
 800a45c:	d009      	beq.n	800a472 <check_fs+0x66>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a464:	2beb      	cmp	r3, #235	@ 0xeb
 800a466:	d11e      	bne.n	800a4a6 <check_fs+0x9a>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a46e:	2b90      	cmp	r3, #144	@ 0x90
 800a470:	d119      	bne.n	800a4a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3330      	adds	r3, #48	@ 0x30
 800a476:	3336      	adds	r3, #54	@ 0x36
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fe fd9e 	bl	8008fba <ld_dword>
 800a47e:	4603      	mov	r3, r0
 800a480:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a484:	4a0a      	ldr	r2, [pc, #40]	@ (800a4b0 <check_fs+0xa4>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d101      	bne.n	800a48e <check_fs+0x82>
 800a48a:	2300      	movs	r3, #0
 800a48c:	e00c      	b.n	800a4a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	3330      	adds	r3, #48	@ 0x30
 800a492:	3352      	adds	r3, #82	@ 0x52
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe fd90 	bl	8008fba <ld_dword>
 800a49a:	4603      	mov	r3, r0
 800a49c:	4a05      	ldr	r2, [pc, #20]	@ (800a4b4 <check_fs+0xa8>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d101      	bne.n	800a4a6 <check_fs+0x9a>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e000      	b.n	800a4a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a4a6:	2302      	movs	r3, #2
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	00544146 	.word	0x00544146
 800a4b4:	33544146 	.word	0x33544146

0800a4b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b096      	sub	sp, #88	@ 0x58
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff ff58 	bl	800a382 <get_ldnumber>
 800a4d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	da01      	bge.n	800a4de <find_volume+0x26>
 800a4da:	230b      	movs	r3, #11
 800a4dc:	e22d      	b.n	800a93a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a4de:	4aa1      	ldr	r2, [pc, #644]	@ (800a764 <find_volume+0x2ac>)
 800a4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <find_volume+0x3a>
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	e223      	b.n	800a93a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a4f8:	79fb      	ldrb	r3, [r7, #7]
 800a4fa:	f023 0301 	bic.w	r3, r3, #1
 800a4fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d01a      	beq.n	800a53e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	785b      	ldrb	r3, [r3, #1]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fe fc9b 	bl	8008e48 <disk_status>
 800a512:	4603      	mov	r3, r0
 800a514:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a518:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10c      	bne.n	800a53e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <find_volume+0x82>
 800a52a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a52e:	f003 0304 	and.w	r3, r3, #4
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a536:	230a      	movs	r3, #10
 800a538:	e1ff      	b.n	800a93a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a53a:	2300      	movs	r3, #0
 800a53c:	e1fd      	b.n	800a93a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a540:	2200      	movs	r2, #0
 800a542:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a546:	b2da      	uxtb	r2, r3
 800a548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	785b      	ldrb	r3, [r3, #1]
 800a550:	4618      	mov	r0, r3
 800a552:	f7fe fc93 	bl	8008e7c <disk_initialize>
 800a556:	4603      	mov	r3, r0
 800a558:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a55c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a568:	2303      	movs	r3, #3
 800a56a:	e1e6      	b.n	800a93a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d007      	beq.n	800a582 <find_volume+0xca>
 800a572:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a576:	f003 0304 	and.w	r3, r3, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a57e:	230a      	movs	r3, #10
 800a580:	e1db      	b.n	800a93a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a586:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a588:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a58a:	f7ff ff3f 	bl	800a40c <check_fs>
 800a58e:	4603      	mov	r3, r0
 800a590:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a594:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d149      	bne.n	800a630 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a59c:	2300      	movs	r3, #0
 800a59e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5a0:	e01e      	b.n	800a5e0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a5b0:	4413      	add	r3, r2
 800a5b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d006      	beq.n	800a5cc <find_volume+0x114>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe fcf9 	bl	8008fba <ld_dword>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	e000      	b.n	800a5ce <find_volume+0x116>
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	3358      	adds	r3, #88	@ 0x58
 800a5d4:	443b      	add	r3, r7
 800a5d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a5da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5dc:	3301      	adds	r3, #1
 800a5de:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d9dd      	bls.n	800a5a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a5ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <find_volume+0x13e>
 800a5f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a5f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	3358      	adds	r3, #88	@ 0x58
 800a5fc:	443b      	add	r3, r7
 800a5fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a602:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a606:	2b00      	cmp	r3, #0
 800a608:	d005      	beq.n	800a616 <find_volume+0x15e>
 800a60a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a60c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a60e:	f7ff fefd 	bl	800a40c <check_fs>
 800a612:	4603      	mov	r3, r0
 800a614:	e000      	b.n	800a618 <find_volume+0x160>
 800a616:	2303      	movs	r3, #3
 800a618:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a61c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a620:	2b01      	cmp	r3, #1
 800a622:	d905      	bls.n	800a630 <find_volume+0x178>
 800a624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a626:	3301      	adds	r3, #1
 800a628:	643b      	str	r3, [r7, #64]	@ 0x40
 800a62a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d9e2      	bls.n	800a5f6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a630:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a634:	2b04      	cmp	r3, #4
 800a636:	d101      	bne.n	800a63c <find_volume+0x184>
 800a638:	2301      	movs	r3, #1
 800a63a:	e17e      	b.n	800a93a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a63c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a640:	2b01      	cmp	r3, #1
 800a642:	d901      	bls.n	800a648 <find_volume+0x190>
 800a644:	230d      	movs	r3, #13
 800a646:	e178      	b.n	800a93a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64a:	3330      	adds	r3, #48	@ 0x30
 800a64c:	330b      	adds	r3, #11
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe fc9a 	bl	8008f88 <ld_word>
 800a654:	4603      	mov	r3, r0
 800a656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a65a:	d001      	beq.n	800a660 <find_volume+0x1a8>
 800a65c:	230d      	movs	r3, #13
 800a65e:	e16c      	b.n	800a93a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a662:	3330      	adds	r3, #48	@ 0x30
 800a664:	3316      	adds	r3, #22
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fc8e 	bl	8008f88 <ld_word>
 800a66c:	4603      	mov	r3, r0
 800a66e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a672:	2b00      	cmp	r3, #0
 800a674:	d106      	bne.n	800a684 <find_volume+0x1cc>
 800a676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a678:	3330      	adds	r3, #48	@ 0x30
 800a67a:	3324      	adds	r3, #36	@ 0x24
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fe fc9c 	bl	8008fba <ld_dword>
 800a682:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a686:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a688:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800a690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a692:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	789b      	ldrb	r3, [r3, #2]
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d005      	beq.n	800a6a8 <find_volume+0x1f0>
 800a69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69e:	789b      	ldrb	r3, [r3, #2]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d001      	beq.n	800a6a8 <find_volume+0x1f0>
 800a6a4:	230d      	movs	r3, #13
 800a6a6:	e148      	b.n	800a93a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6aa:	789b      	ldrb	r3, [r3, #2]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6b0:	fb02 f303 	mul.w	r3, r2, r3
 800a6b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6bc:	461a      	mov	r2, r3
 800a6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c4:	895b      	ldrh	r3, [r3, #10]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d008      	beq.n	800a6dc <find_volume+0x224>
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6cc:	895b      	ldrh	r3, [r3, #10]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d2:	895b      	ldrh	r3, [r3, #10]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <find_volume+0x228>
 800a6dc:	230d      	movs	r3, #13
 800a6de:	e12c      	b.n	800a93a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e2:	3330      	adds	r3, #48	@ 0x30
 800a6e4:	3311      	adds	r3, #17
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe fc4e 	bl	8008f88 <ld_word>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f6:	891b      	ldrh	r3, [r3, #8]
 800a6f8:	f003 030f 	and.w	r3, r3, #15
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <find_volume+0x24e>
 800a702:	230d      	movs	r3, #13
 800a704:	e119      	b.n	800a93a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a708:	3330      	adds	r3, #48	@ 0x30
 800a70a:	3313      	adds	r3, #19
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fe fc3b 	bl	8008f88 <ld_word>
 800a712:	4603      	mov	r3, r0
 800a714:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d106      	bne.n	800a72a <find_volume+0x272>
 800a71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71e:	3330      	adds	r3, #48	@ 0x30
 800a720:	3320      	adds	r3, #32
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe fc49 	bl	8008fba <ld_dword>
 800a728:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72c:	3330      	adds	r3, #48	@ 0x30
 800a72e:	330e      	adds	r3, #14
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe fc29 	bl	8008f88 <ld_word>
 800a736:	4603      	mov	r3, r0
 800a738:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a73a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <find_volume+0x28c>
 800a740:	230d      	movs	r3, #13
 800a742:	e0fa      	b.n	800a93a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a744:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a748:	4413      	add	r3, r2
 800a74a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a74c:	8912      	ldrh	r2, [r2, #8]
 800a74e:	0912      	lsrs	r2, r2, #4
 800a750:	b292      	uxth	r2, r2
 800a752:	4413      	add	r3, r2
 800a754:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d204      	bcs.n	800a768 <find_volume+0x2b0>
 800a75e:	230d      	movs	r3, #13
 800a760:	e0eb      	b.n	800a93a <find_volume+0x482>
 800a762:	bf00      	nop
 800a764:	20001064 	.word	0x20001064
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a770:	8952      	ldrh	r2, [r2, #10]
 800a772:	fbb3 f3f2 	udiv	r3, r3, r2
 800a776:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d101      	bne.n	800a782 <find_volume+0x2ca>
 800a77e:	230d      	movs	r3, #13
 800a780:	e0db      	b.n	800a93a <find_volume+0x482>
		fmt = FS_FAT32;
 800a782:	2303      	movs	r3, #3
 800a784:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a78e:	4293      	cmp	r3, r2
 800a790:	d802      	bhi.n	800a798 <find_volume+0x2e0>
 800a792:	2302      	movs	r3, #2
 800a794:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d802      	bhi.n	800a7a8 <find_volume+0x2f0>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7aa:	1c9a      	adds	r2, r3, #2
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7b4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a7b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a7b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ba:	441a      	add	r2, r3
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7be:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a7c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c4:	441a      	add	r2, r3
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a7ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d11e      	bne.n	800a810 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d4:	3330      	adds	r3, #48	@ 0x30
 800a7d6:	332a      	adds	r3, #42	@ 0x2a
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe fbd5 	bl	8008f88 <ld_word>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <find_volume+0x330>
 800a7e4:	230d      	movs	r3, #13
 800a7e6:	e0a8      	b.n	800a93a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ea:	891b      	ldrh	r3, [r3, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <find_volume+0x33c>
 800a7f0:	230d      	movs	r3, #13
 800a7f2:	e0a2      	b.n	800a93a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f6:	3330      	adds	r3, #48	@ 0x30
 800a7f8:	332c      	adds	r3, #44	@ 0x2c
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe fbdd 	bl	8008fba <ld_dword>
 800a800:	4602      	mov	r2, r0
 800a802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a804:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a80e:	e01f      	b.n	800a850 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a812:	891b      	ldrh	r3, [r3, #8]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <find_volume+0x364>
 800a818:	230d      	movs	r3, #13
 800a81a:	e08e      	b.n	800a93a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	6a1a      	ldr	r2, [r3, #32]
 800a820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a822:	441a      	add	r2, r3
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a828:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d103      	bne.n	800a838 <find_volume+0x380>
 800a830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	e00a      	b.n	800a84e <find_volume+0x396>
 800a838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83a:	695a      	ldr	r2, [r3, #20]
 800a83c:	4613      	mov	r3, r2
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	4413      	add	r3, r2
 800a842:	085a      	lsrs	r2, r3, #1
 800a844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a84e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a856:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a85a:	0a5b      	lsrs	r3, r3, #9
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d201      	bcs.n	800a864 <find_volume+0x3ac>
 800a860:	230d      	movs	r3, #13
 800a862:	e06a      	b.n	800a93a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a866:	f04f 32ff 	mov.w	r2, #4294967295
 800a86a:	611a      	str	r2, [r3, #16]
 800a86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86e:	691a      	ldr	r2, [r3, #16]
 800a870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a872:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a876:	2280      	movs	r2, #128	@ 0x80
 800a878:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a87a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d149      	bne.n	800a916 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a884:	3330      	adds	r3, #48	@ 0x30
 800a886:	3330      	adds	r3, #48	@ 0x30
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fe fb7d 	bl	8008f88 <ld_word>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b01      	cmp	r3, #1
 800a892:	d140      	bne.n	800a916 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a896:	3301      	adds	r3, #1
 800a898:	4619      	mov	r1, r3
 800a89a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a89c:	f7fe fe26 	bl	80094ec <move_window>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d137      	bne.n	800a916 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ae:	3330      	adds	r3, #48	@ 0x30
 800a8b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fe fb67 	bl	8008f88 <ld_word>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	461a      	mov	r2, r3
 800a8be:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d127      	bne.n	800a916 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c8:	3330      	adds	r3, #48	@ 0x30
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fe fb75 	bl	8008fba <ld_dword>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	4a1c      	ldr	r2, [pc, #112]	@ (800a944 <find_volume+0x48c>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d11e      	bne.n	800a916 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8da:	3330      	adds	r3, #48	@ 0x30
 800a8dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fe fb6a 	bl	8008fba <ld_dword>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	4a17      	ldr	r2, [pc, #92]	@ (800a948 <find_volume+0x490>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d113      	bne.n	800a916 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f0:	3330      	adds	r3, #48	@ 0x30
 800a8f2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe fb5f 	bl	8008fba <ld_dword>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a900:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	3330      	adds	r3, #48	@ 0x30
 800a906:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fb55 	bl	8008fba <ld_dword>
 800a910:	4602      	mov	r2, r0
 800a912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a914:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a91c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a91e:	4b0b      	ldr	r3, [pc, #44]	@ (800a94c <find_volume+0x494>)
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	b29a      	uxth	r2, r3
 800a926:	4b09      	ldr	r3, [pc, #36]	@ (800a94c <find_volume+0x494>)
 800a928:	801a      	strh	r2, [r3, #0]
 800a92a:	4b08      	ldr	r3, [pc, #32]	@ (800a94c <find_volume+0x494>)
 800a92c:	881a      	ldrh	r2, [r3, #0]
 800a92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a930:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a932:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a934:	f7fe fd72 	bl	800941c <clear_lock>
#endif
	return FR_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3758      	adds	r7, #88	@ 0x58
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	41615252 	.word	0x41615252
 800a948:	61417272 	.word	0x61417272
 800a94c:	20001068 	.word	0x20001068

0800a950 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a95a:	2309      	movs	r3, #9
 800a95c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01c      	beq.n	800a99e <validate+0x4e>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d018      	beq.n	800a99e <validate+0x4e>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d013      	beq.n	800a99e <validate+0x4e>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	889a      	ldrh	r2, [r3, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	88db      	ldrh	r3, [r3, #6]
 800a980:	429a      	cmp	r2, r3
 800a982:	d10c      	bne.n	800a99e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fa5c 	bl	8008e48 <disk_status>
 800a990:	4603      	mov	r3, r0
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <validate+0x4e>
			res = FR_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d102      	bne.n	800a9aa <validate+0x5a>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	e000      	b.n	800a9ac <validate+0x5c>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	6013      	str	r3, [r2, #0]
	return res;
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a9ce:	f107 0310 	add.w	r3, r7, #16
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff fcd5 	bl	800a382 <get_ldnumber>
 800a9d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	da01      	bge.n	800a9e4 <f_mount+0x28>
 800a9e0:	230b      	movs	r3, #11
 800a9e2:	e02b      	b.n	800aa3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a9e4:	4a17      	ldr	r2, [pc, #92]	@ (800aa44 <f_mount+0x88>)
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d005      	beq.n	800aa00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a9f4:	69b8      	ldr	r0, [r7, #24]
 800a9f6:	f7fe fd11 	bl	800941c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d002      	beq.n	800aa0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	490d      	ldr	r1, [pc, #52]	@ (800aa44 <f_mount+0x88>)
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <f_mount+0x66>
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d001      	beq.n	800aa26 <f_mount+0x6a>
 800aa22:	2300      	movs	r3, #0
 800aa24:	e00a      	b.n	800aa3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aa26:	f107 010c 	add.w	r1, r7, #12
 800aa2a:	f107 0308 	add.w	r3, r7, #8
 800aa2e:	2200      	movs	r2, #0
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff fd41 	bl	800a4b8 <find_volume>
 800aa36:	4603      	mov	r3, r0
 800aa38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3720      	adds	r7, #32
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	20001064 	.word	0x20001064

0800aa48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b098      	sub	sp, #96	@ 0x60
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	4613      	mov	r3, r2
 800aa54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <f_open+0x18>
 800aa5c:	2309      	movs	r3, #9
 800aa5e:	e1a9      	b.n	800adb4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800aa68:	79fa      	ldrb	r2, [r7, #7]
 800aa6a:	f107 0110 	add.w	r1, r7, #16
 800aa6e:	f107 0308 	add.w	r3, r7, #8
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff fd20 	bl	800a4b8 <find_volume>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800aa7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f040 818d 	bne.w	800ada2 <f_open+0x35a>
		dj.obj.fs = fs;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	f107 0314 	add.w	r3, r7, #20
 800aa92:	4611      	mov	r1, r2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7ff fc03 	bl	800a2a0 <follow_path>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aaa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d118      	bne.n	800aada <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aaa8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aaac:	b25b      	sxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	da03      	bge.n	800aaba <f_open+0x72>
				res = FR_INVALID_NAME;
 800aab2:	2306      	movs	r3, #6
 800aab4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800aab8:	e00f      	b.n	800aada <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	bf8c      	ite	hi
 800aac0:	2301      	movhi	r3, #1
 800aac2:	2300      	movls	r3, #0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	461a      	mov	r2, r3
 800aac8:	f107 0314 	add.w	r3, r7, #20
 800aacc:	4611      	mov	r1, r2
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fe fb5c 	bl	800918c <chk_lock>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	f003 031c 	and.w	r3, r3, #28
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d07f      	beq.n	800abe4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800aae4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d017      	beq.n	800ab1c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aaec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aaf0:	2b04      	cmp	r3, #4
 800aaf2:	d10e      	bne.n	800ab12 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aaf4:	f7fe fba6 	bl	8009244 <enq_lock>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d006      	beq.n	800ab0c <f_open+0xc4>
 800aafe:	f107 0314 	add.w	r3, r7, #20
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7ff fae7 	bl	800a0d6 <dir_register>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	e000      	b.n	800ab0e <f_open+0xc6>
 800ab0c:	2312      	movs	r3, #18
 800ab0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ab12:	79fb      	ldrb	r3, [r7, #7]
 800ab14:	f043 0308 	orr.w	r3, r3, #8
 800ab18:	71fb      	strb	r3, [r7, #7]
 800ab1a:	e010      	b.n	800ab3e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ab1c:	7ebb      	ldrb	r3, [r7, #26]
 800ab1e:	f003 0311 	and.w	r3, r3, #17
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d003      	beq.n	800ab2e <f_open+0xe6>
					res = FR_DENIED;
 800ab26:	2307      	movs	r3, #7
 800ab28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ab2c:	e007      	b.n	800ab3e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ab2e:	79fb      	ldrb	r3, [r7, #7]
 800ab30:	f003 0304 	and.w	r3, r3, #4
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <f_open+0xf6>
 800ab38:	2308      	movs	r3, #8
 800ab3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ab3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d168      	bne.n	800ac18 <f_open+0x1d0>
 800ab46:	79fb      	ldrb	r3, [r7, #7]
 800ab48:	f003 0308 	and.w	r3, r3, #8
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d063      	beq.n	800ac18 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ab50:	f7fd fc3e 	bl	80083d0 <get_fattime>
 800ab54:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ab56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab58:	330e      	adds	r3, #14
 800ab5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fe fa6a 	bl	8009036 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ab62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab64:	3316      	adds	r3, #22
 800ab66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fe fa64 	bl	8009036 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ab6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab70:	330b      	adds	r3, #11
 800ab72:	2220      	movs	r2, #32
 800ab74:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7ff f9b9 	bl	8009ef4 <ld_clust>
 800ab82:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ab88:	2200      	movs	r2, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff f9d1 	bl	8009f32 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ab90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab92:	331c      	adds	r3, #28
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fe fa4d 	bl	8009036 <st_dword>
					fs->wflag = 1;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d037      	beq.n	800ac18 <f_open+0x1d0>
						dw = fs->winsect;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abac:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800abae:	f107 0314 	add.w	r3, r7, #20
 800abb2:	2200      	movs	r2, #0
 800abb4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe fee4 	bl	8009984 <remove_chain>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800abc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d126      	bne.n	800ac18 <f_open+0x1d0>
							res = move_window(fs, dw);
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fe fc8c 	bl	80094ec <move_window>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800abde:	3a01      	subs	r2, #1
 800abe0:	60da      	str	r2, [r3, #12]
 800abe2:	e019      	b.n	800ac18 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800abe4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d115      	bne.n	800ac18 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800abec:	7ebb      	ldrb	r3, [r7, #26]
 800abee:	f003 0310 	and.w	r3, r3, #16
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <f_open+0x1b6>
					res = FR_NO_FILE;
 800abf6:	2304      	movs	r3, #4
 800abf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800abfc:	e00c      	b.n	800ac18 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800abfe:	79fb      	ldrb	r3, [r7, #7]
 800ac00:	f003 0302 	and.w	r3, r3, #2
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d007      	beq.n	800ac18 <f_open+0x1d0>
 800ac08:	7ebb      	ldrb	r3, [r7, #26]
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d002      	beq.n	800ac18 <f_open+0x1d0>
						res = FR_DENIED;
 800ac12:	2307      	movs	r3, #7
 800ac14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ac18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d126      	bne.n	800ac6e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	f003 0308 	and.w	r3, r3, #8
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d003      	beq.n	800ac32 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac30:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ac3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	bf8c      	ite	hi
 800ac46:	2301      	movhi	r3, #1
 800ac48:	2300      	movls	r3, #0
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	f107 0314 	add.w	r3, r7, #20
 800ac52:	4611      	mov	r1, r2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fe fb17 	bl	8009288 <inc_lock>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <f_open+0x226>
 800ac68:	2302      	movs	r3, #2
 800ac6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ac6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f040 8095 	bne.w	800ada2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7ff f938 	bl	8009ef4 <ld_clust>
 800ac84:	4602      	mov	r2, r0
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac8c:	331c      	adds	r3, #28
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe f993 	bl	8008fba <ld_dword>
 800ac94:	4602      	mov	r2, r0
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	88da      	ldrh	r2, [r3, #6]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	79fa      	ldrb	r2, [r7, #7]
 800acb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3330      	adds	r3, #48	@ 0x30
 800acca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800acce:	2100      	movs	r1, #0
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe f9fd 	bl	80090d0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	f003 0320 	and.w	r3, r3, #32
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d060      	beq.n	800ada2 <f_open+0x35a>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d05c      	beq.n	800ada2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	68da      	ldr	r2, [r3, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	895b      	ldrh	r3, [r3, #10]
 800acf4:	025b      	lsls	r3, r3, #9
 800acf6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad04:	e016      	b.n	800ad34 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe fca9 	bl	8009662 <get_fat>
 800ad10:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ad12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d802      	bhi.n	800ad1e <f_open+0x2d6>
 800ad18:	2302      	movs	r3, #2
 800ad1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ad1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad24:	d102      	bne.n	800ad2c <f_open+0x2e4>
 800ad26:	2301      	movs	r3, #1
 800ad28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ad2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d103      	bne.n	800ad44 <f_open+0x2fc>
 800ad3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d8e0      	bhi.n	800ad06 <f_open+0x2be>
				}
				fp->clust = clst;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ad4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d127      	bne.n	800ada2 <f_open+0x35a>
 800ad52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d022      	beq.n	800ada2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fe fc5f 	bl	8009624 <clust2sect>
 800ad66:	6478      	str	r0, [r7, #68]	@ 0x44
 800ad68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d103      	bne.n	800ad76 <f_open+0x32e>
						res = FR_INT_ERR;
 800ad6e:	2302      	movs	r3, #2
 800ad70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ad74:	e015      	b.n	800ada2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ad76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad78:	0a5a      	lsrs	r2, r3, #9
 800ad7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad7c:	441a      	add	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	7858      	ldrb	r0, [r3, #1]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6a1a      	ldr	r2, [r3, #32]
 800ad90:	2301      	movs	r3, #1
 800ad92:	f7fe f89b 	bl	8008ecc <disk_read>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <f_open+0x35a>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ada2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d002      	beq.n	800adb0 <f_open+0x368>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800adb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3760      	adds	r7, #96	@ 0x60
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b08e      	sub	sp, #56	@ 0x38
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2200      	movs	r2, #0
 800add2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f107 0214 	add.w	r2, r7, #20
 800adda:	4611      	mov	r1, r2
 800addc:	4618      	mov	r0, r3
 800adde:	f7ff fdb7 	bl	800a950 <validate>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ade8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800adec:	2b00      	cmp	r3, #0
 800adee:	d107      	bne.n	800ae00 <f_read+0x44>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	7d5b      	ldrb	r3, [r3, #21]
 800adf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800adf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <f_read+0x4a>
 800ae00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ae04:	e115      	b.n	800b032 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	7d1b      	ldrb	r3, [r3, #20]
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <f_read+0x5a>
 800ae12:	2307      	movs	r3, #7
 800ae14:	e10d      	b.n	800b032 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	6a3b      	ldr	r3, [r7, #32]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	f240 80fe 	bls.w	800b028 <f_read+0x26c>
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ae30:	e0fa      	b.n	800b028 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f040 80c6 	bne.w	800afcc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	0a5b      	lsrs	r3, r3, #9
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	8952      	ldrh	r2, [r2, #10]
 800ae4a:	3a01      	subs	r2, #1
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d12f      	bne.n	800aeb6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d103      	bne.n	800ae66 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae64:	e013      	b.n	800ae8e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d007      	beq.n	800ae7e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	4619      	mov	r1, r3
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f7fe fe82 	bl	8009b7e <clmt_clust>
 800ae7a:	6338      	str	r0, [r7, #48]	@ 0x30
 800ae7c:	e007      	b.n	800ae8e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	4619      	mov	r1, r3
 800ae86:	4610      	mov	r0, r2
 800ae88:	f7fe fbeb 	bl	8009662 <get_fat>
 800ae8c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d804      	bhi.n	800ae9e <f_read+0xe2>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2202      	movs	r2, #2
 800ae98:	755a      	strb	r2, [r3, #21]
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e0c9      	b.n	800b032 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea4:	d104      	bne.n	800aeb0 <f_read+0xf4>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	755a      	strb	r2, [r3, #21]
 800aeac:	2301      	movs	r3, #1
 800aeae:	e0c0      	b.n	800b032 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeb4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	69db      	ldr	r3, [r3, #28]
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	f7fe fbb0 	bl	8009624 <clust2sect>
 800aec4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d104      	bne.n	800aed6 <f_read+0x11a>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2202      	movs	r2, #2
 800aed0:	755a      	strb	r2, [r3, #21]
 800aed2:	2302      	movs	r3, #2
 800aed4:	e0ad      	b.n	800b032 <f_read+0x276>
			sect += csect;
 800aed6:	69ba      	ldr	r2, [r7, #24]
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	4413      	add	r3, r2
 800aedc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	0a5b      	lsrs	r3, r3, #9
 800aee2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d039      	beq.n	800af5e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aeea:	69fa      	ldr	r2, [r7, #28]
 800aeec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeee:	4413      	add	r3, r2
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	8952      	ldrh	r2, [r2, #10]
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d905      	bls.n	800af04 <f_read+0x148>
					cc = fs->csize - csect;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	895b      	ldrh	r3, [r3, #10]
 800aefc:	461a      	mov	r2, r3
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	7858      	ldrb	r0, [r3, #1]
 800af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0a:	69ba      	ldr	r2, [r7, #24]
 800af0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af0e:	f7fd ffdd 	bl	8008ecc <disk_read>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <f_read+0x166>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2201      	movs	r2, #1
 800af1c:	755a      	strb	r2, [r3, #21]
 800af1e:	2301      	movs	r3, #1
 800af20:	e087      	b.n	800b032 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	7d1b      	ldrb	r3, [r3, #20]
 800af26:	b25b      	sxtb	r3, r3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	da14      	bge.n	800af56 <f_read+0x19a>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6a1a      	ldr	r2, [r3, #32]
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af36:	429a      	cmp	r2, r3
 800af38:	d90d      	bls.n	800af56 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6a1a      	ldr	r2, [r3, #32]
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	025b      	lsls	r3, r3, #9
 800af44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af46:	18d0      	adds	r0, r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3330      	adds	r3, #48	@ 0x30
 800af4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af50:	4619      	mov	r1, r3
 800af52:	f7fe f89c 	bl	800908e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800af56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af58:	025b      	lsls	r3, r3, #9
 800af5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800af5c:	e050      	b.n	800b000 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	69ba      	ldr	r2, [r7, #24]
 800af64:	429a      	cmp	r2, r3
 800af66:	d02e      	beq.n	800afc6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	7d1b      	ldrb	r3, [r3, #20]
 800af6c:	b25b      	sxtb	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	da18      	bge.n	800afa4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	7858      	ldrb	r0, [r3, #1]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6a1a      	ldr	r2, [r3, #32]
 800af80:	2301      	movs	r3, #1
 800af82:	f7fd ffc3 	bl	8008f0c <disk_write>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d004      	beq.n	800af96 <f_read+0x1da>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2201      	movs	r2, #1
 800af90:	755a      	strb	r2, [r3, #21]
 800af92:	2301      	movs	r3, #1
 800af94:	e04d      	b.n	800b032 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	7d1b      	ldrb	r3, [r3, #20]
 800af9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	7858      	ldrb	r0, [r3, #1]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800afae:	2301      	movs	r3, #1
 800afb0:	69ba      	ldr	r2, [r7, #24]
 800afb2:	f7fd ff8b 	bl	8008ecc <disk_read>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d004      	beq.n	800afc6 <f_read+0x20a>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2201      	movs	r2, #1
 800afc0:	755a      	strb	r2, [r3, #21]
 800afc2:	2301      	movs	r3, #1
 800afc4:	e035      	b.n	800b032 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	69ba      	ldr	r2, [r7, #24]
 800afca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800afd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800afda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d901      	bls.n	800afe6 <f_read+0x22a>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff4:	4413      	add	r3, r2
 800aff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aff8:	4619      	mov	r1, r3
 800affa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800affc:	f7fe f847 	bl	800908e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b004:	4413      	add	r3, r2
 800b006:	627b      	str	r3, [r7, #36]	@ 0x24
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	699a      	ldr	r2, [r3, #24]
 800b00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b00e:	441a      	add	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	619a      	str	r2, [r3, #24]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b01a:	441a      	add	r2, r3
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f47f af01 	bne.w	800ae32 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3738      	adds	r7, #56	@ 0x38
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b08c      	sub	sp, #48	@ 0x30
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	607a      	str	r2, [r7, #4]
 800b046:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	2200      	movs	r2, #0
 800b050:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f107 0210 	add.w	r2, r7, #16
 800b058:	4611      	mov	r1, r2
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fc78 	bl	800a950 <validate>
 800b060:	4603      	mov	r3, r0
 800b062:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b066:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d107      	bne.n	800b07e <f_write+0x44>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	7d5b      	ldrb	r3, [r3, #21]
 800b072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b076:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d002      	beq.n	800b084 <f_write+0x4a>
 800b07e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b082:	e14b      	b.n	800b31c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	7d1b      	ldrb	r3, [r3, #20]
 800b088:	f003 0302 	and.w	r3, r3, #2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d101      	bne.n	800b094 <f_write+0x5a>
 800b090:	2307      	movs	r3, #7
 800b092:	e143      	b.n	800b31c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	699a      	ldr	r2, [r3, #24]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	441a      	add	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	f080 812d 	bcs.w	800b300 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	43db      	mvns	r3, r3
 800b0ac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b0ae:	e127      	b.n	800b300 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f040 80e3 	bne.w	800b284 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	0a5b      	lsrs	r3, r3, #9
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	8952      	ldrh	r2, [r2, #10]
 800b0c8:	3a01      	subs	r2, #1
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d143      	bne.n	800b15c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10c      	bne.n	800b0f6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d11a      	bne.n	800b11e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fe fcae 	bl	8009a4e <create_chain>
 800b0f2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b0f4:	e013      	b.n	800b11e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d007      	beq.n	800b10e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	4619      	mov	r1, r3
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7fe fd3a 	bl	8009b7e <clmt_clust>
 800b10a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b10c:	e007      	b.n	800b11e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	69db      	ldr	r3, [r3, #28]
 800b114:	4619      	mov	r1, r3
 800b116:	4610      	mov	r0, r2
 800b118:	f7fe fc99 	bl	8009a4e <create_chain>
 800b11c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 80f2 	beq.w	800b30a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d104      	bne.n	800b136 <f_write+0xfc>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2202      	movs	r2, #2
 800b130:	755a      	strb	r2, [r3, #21]
 800b132:	2302      	movs	r3, #2
 800b134:	e0f2      	b.n	800b31c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13c:	d104      	bne.n	800b148 <f_write+0x10e>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2201      	movs	r2, #1
 800b142:	755a      	strb	r2, [r3, #21]
 800b144:	2301      	movs	r3, #1
 800b146:	e0e9      	b.n	800b31c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b14c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d102      	bne.n	800b15c <f_write+0x122>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b15a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	7d1b      	ldrb	r3, [r3, #20]
 800b160:	b25b      	sxtb	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	da18      	bge.n	800b198 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	7858      	ldrb	r0, [r3, #1]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6a1a      	ldr	r2, [r3, #32]
 800b174:	2301      	movs	r3, #1
 800b176:	f7fd fec9 	bl	8008f0c <disk_write>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d004      	beq.n	800b18a <f_write+0x150>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2201      	movs	r2, #1
 800b184:	755a      	strb	r2, [r3, #21]
 800b186:	2301      	movs	r3, #1
 800b188:	e0c8      	b.n	800b31c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	7d1b      	ldrb	r3, [r3, #20]
 800b18e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b192:	b2da      	uxtb	r2, r3
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	f7fe fa3f 	bl	8009624 <clust2sect>
 800b1a6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d104      	bne.n	800b1b8 <f_write+0x17e>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	755a      	strb	r2, [r3, #21]
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e0b1      	b.n	800b31c <f_write+0x2e2>
			sect += csect;
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	4413      	add	r3, r2
 800b1be:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	0a5b      	lsrs	r3, r3, #9
 800b1c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d03c      	beq.n	800b246 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	8952      	ldrh	r2, [r2, #10]
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d905      	bls.n	800b1e6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	895b      	ldrh	r3, [r3, #10]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	7858      	ldrb	r0, [r3, #1]
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	69f9      	ldr	r1, [r7, #28]
 800b1f0:	f7fd fe8c 	bl	8008f0c <disk_write>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d004      	beq.n	800b204 <f_write+0x1ca>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	755a      	strb	r2, [r3, #21]
 800b200:	2301      	movs	r3, #1
 800b202:	e08b      	b.n	800b31c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6a1a      	ldr	r2, [r3, #32]
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	6a3a      	ldr	r2, [r7, #32]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d915      	bls.n	800b23e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a1a      	ldr	r2, [r3, #32]
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	025b      	lsls	r3, r3, #9
 800b222:	69fa      	ldr	r2, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b22a:	4619      	mov	r1, r3
 800b22c:	f7fd ff2f 	bl	800908e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	7d1b      	ldrb	r3, [r3, #20]
 800b234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	025b      	lsls	r3, r3, #9
 800b242:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b244:	e03f      	b.n	800b2c6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d016      	beq.n	800b27e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	699a      	ldr	r2, [r3, #24]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b258:	429a      	cmp	r2, r3
 800b25a:	d210      	bcs.n	800b27e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	7858      	ldrb	r0, [r3, #1]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b266:	2301      	movs	r3, #1
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	f7fd fe2f 	bl	8008ecc <disk_read>
 800b26e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b270:	2b00      	cmp	r3, #0
 800b272:	d004      	beq.n	800b27e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2201      	movs	r2, #1
 800b278:	755a      	strb	r2, [r3, #21]
 800b27a:	2301      	movs	r3, #1
 800b27c:	e04e      	b.n	800b31c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	699b      	ldr	r3, [r3, #24]
 800b288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b290:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	429a      	cmp	r2, r3
 800b298:	d901      	bls.n	800b29e <f_write+0x264>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ac:	4413      	add	r3, r2
 800b2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2b0:	69f9      	ldr	r1, [r7, #28]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fd feeb 	bl	800908e <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	7d1b      	ldrb	r3, [r3, #20]
 800b2bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ca:	4413      	add	r3, r2
 800b2cc:	61fb      	str	r3, [r7, #28]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	699a      	ldr	r2, [r3, #24]
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	441a      	add	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	619a      	str	r2, [r3, #24]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	bf38      	it	cc
 800b2e6:	461a      	movcc	r2, r3
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	60da      	str	r2, [r3, #12]
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f2:	441a      	add	r2, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	601a      	str	r2, [r3, #0]
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	f47f aed4 	bne.w	800b0b0 <f_write+0x76>
 800b308:	e000      	b.n	800b30c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b30a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	7d1b      	ldrb	r3, [r3, #20]
 800b310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b314:	b2da      	uxtb	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3730      	adds	r7, #48	@ 0x30
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f107 0208 	add.w	r2, r7, #8
 800b332:	4611      	mov	r1, r2
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff fb0b 	bl	800a950 <validate>
 800b33a:	4603      	mov	r3, r0
 800b33c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d168      	bne.n	800b416 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	7d1b      	ldrb	r3, [r3, #20]
 800b348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d062      	beq.n	800b416 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	7d1b      	ldrb	r3, [r3, #20]
 800b354:	b25b      	sxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	da15      	bge.n	800b386 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	7858      	ldrb	r0, [r3, #1]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a1a      	ldr	r2, [r3, #32]
 800b368:	2301      	movs	r3, #1
 800b36a:	f7fd fdcf 	bl	8008f0c <disk_write>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <f_sync+0x54>
 800b374:	2301      	movs	r3, #1
 800b376:	e04f      	b.n	800b418 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	7d1b      	ldrb	r3, [r3, #20]
 800b37c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b380:	b2da      	uxtb	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b386:	f7fd f823 	bl	80083d0 <get_fattime>
 800b38a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b392:	4619      	mov	r1, r3
 800b394:	4610      	mov	r0, r2
 800b396:	f7fe f8a9 	bl	80094ec <move_window>
 800b39a:	4603      	mov	r3, r0
 800b39c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b39e:	7dfb      	ldrb	r3, [r7, #23]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d138      	bne.n	800b416 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	330b      	adds	r3, #11
 800b3ae:	781a      	ldrb	r2, [r3, #0]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	330b      	adds	r3, #11
 800b3b4:	f042 0220 	orr.w	r2, r2, #32
 800b3b8:	b2d2      	uxtb	r2, r2
 800b3ba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	68f9      	ldr	r1, [r7, #12]
 800b3c8:	f7fe fdb3 	bl	8009f32 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f103 021c 	add.w	r2, r3, #28
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	4610      	mov	r0, r2
 800b3da:	f7fd fe2c 	bl	8009036 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3316      	adds	r3, #22
 800b3e2:	6939      	ldr	r1, [r7, #16]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fd fe26 	bl	8009036 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3312      	adds	r3, #18
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fd fe05 	bl	8009000 <st_word>
					fs->wflag = 1;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe f8a2 	bl	8009548 <sync_fs>
 800b404:	4603      	mov	r3, r0
 800b406:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	7d1b      	ldrb	r3, [r3, #20]
 800b40c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b410:	b2da      	uxtb	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b416:	7dfb      	ldrb	r3, [r7, #23]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7ff ff7b 	bl	800b324 <f_sync>
 800b42e:	4603      	mov	r3, r0
 800b430:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d118      	bne.n	800b46a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f107 0208 	add.w	r2, r7, #8
 800b43e:	4611      	mov	r1, r2
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff fa85 	bl	800a950 <validate>
 800b446:	4603      	mov	r3, r0
 800b448:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10c      	bne.n	800b46a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	4618      	mov	r0, r3
 800b456:	f7fd ffa5 	bl	80093a4 <dec_lock>
 800b45a:	4603      	mov	r3, r0
 800b45c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b45e:	7bfb      	ldrb	r3, [r7, #15]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b092      	sub	sp, #72	@ 0x48
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b480:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800b484:	f107 030c 	add.w	r3, r7, #12
 800b488:	2200      	movs	r2, #0
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7ff f814 	bl	800a4b8 <find_volume>
 800b490:	4603      	mov	r3, r0
 800b492:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800b496:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f040 8099 	bne.w	800b5d2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b4a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	691a      	ldr	r2, [r3, #16]
 800b4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	3b02      	subs	r3, #2
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d804      	bhi.n	800b4be <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b6:	691a      	ldr	r2, [r3, #16]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	e089      	b.n	800b5d2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d128      	bne.n	800b51c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b4d2:	f107 0314 	add.w	r3, r7, #20
 800b4d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7fe f8c2 	bl	8009662 <get_fat>
 800b4de:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e6:	d103      	bne.n	800b4f0 <f_getfree+0x7c>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b4ee:	e063      	b.n	800b5b8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d103      	bne.n	800b4fe <f_getfree+0x8a>
 800b4f6:	2302      	movs	r3, #2
 800b4f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b4fc:	e05c      	b.n	800b5b8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b500:	2b00      	cmp	r3, #0
 800b502:	d102      	bne.n	800b50a <f_getfree+0x96>
 800b504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b506:	3301      	adds	r3, #1
 800b508:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800b50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b50c:	3301      	adds	r3, #1
 800b50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b516:	429a      	cmp	r2, r3
 800b518:	d3db      	bcc.n	800b4d2 <f_getfree+0x5e>
 800b51a:	e04d      	b.n	800b5b8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51e:	695b      	ldr	r3, [r3, #20]
 800b520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b52c:	2300      	movs	r3, #0
 800b52e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800b530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b532:	2b00      	cmp	r3, #0
 800b534:	d113      	bne.n	800b55e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b53e:	4619      	mov	r1, r3
 800b540:	f7fd ffd4 	bl	80094ec <move_window>
 800b544:	4603      	mov	r3, r0
 800b546:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800b54a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d131      	bne.n	800b5b6 <f_getfree+0x142>
							p = fs->win;
 800b552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b554:	3330      	adds	r3, #48	@ 0x30
 800b556:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800b558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b55c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	2b02      	cmp	r3, #2
 800b564:	d10f      	bne.n	800b586 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b566:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b568:	f7fd fd0e 	bl	8008f88 <ld_word>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d102      	bne.n	800b578 <f_getfree+0x104>
 800b572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b574:	3301      	adds	r3, #1
 800b576:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	3302      	adds	r3, #2
 800b57c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b580:	3b02      	subs	r3, #2
 800b582:	637b      	str	r3, [r7, #52]	@ 0x34
 800b584:	e010      	b.n	800b5a8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b586:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b588:	f7fd fd17 	bl	8008fba <ld_dword>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b592:	2b00      	cmp	r3, #0
 800b594:	d102      	bne.n	800b59c <f_getfree+0x128>
 800b596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b598:	3301      	adds	r3, #1
 800b59a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800b59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59e:	3304      	adds	r3, #4
 800b5a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a4:	3b04      	subs	r3, #4
 800b5a6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800b5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1bd      	bne.n	800b530 <f_getfree+0xbc>
 800b5b4:	e000      	b.n	800b5b8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b5b6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5bc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5c2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c6:	791a      	ldrb	r2, [r3, #4]
 800b5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ca:	f042 0201 	orr.w	r2, r2, #1
 800b5ce:	b2d2      	uxtb	r2, r2
 800b5d0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b5d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3748      	adds	r7, #72	@ 0x48
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b09e      	sub	sp, #120	@ 0x78
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b5ea:	f107 010c 	add.w	r1, r7, #12
 800b5ee:	1d3b      	adds	r3, r7, #4
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fe ff60 	bl	800a4b8 <find_volume>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800b602:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b606:	2b00      	cmp	r3, #0
 800b608:	f040 808e 	bne.w	800b728 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b612:	4611      	mov	r1, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f7fe fe43 	bl	800a2a0 <follow_path>
 800b61a:	4603      	mov	r3, r0
 800b61c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b620:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b624:	2b00      	cmp	r3, #0
 800b626:	d108      	bne.n	800b63a <f_unlink+0x5c>
 800b628:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b62c:	2102      	movs	r1, #2
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fd fdac 	bl	800918c <chk_lock>
 800b634:	4603      	mov	r3, r0
 800b636:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b63a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d172      	bne.n	800b728 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b642:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b646:	b25b      	sxtb	r3, r3
 800b648:	2b00      	cmp	r3, #0
 800b64a:	da03      	bge.n	800b654 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b64c:	2306      	movs	r3, #6
 800b64e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800b652:	e008      	b.n	800b666 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b654:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b660:	2307      	movs	r3, #7
 800b662:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800b666:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d134      	bne.n	800b6d8 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b672:	4611      	mov	r1, r2
 800b674:	4618      	mov	r0, r3
 800b676:	f7fe fc3d 	bl	8009ef4 <ld_clust>
 800b67a:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b67c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800b680:	f003 0310 	and.w	r3, r3, #16
 800b684:	2b00      	cmp	r3, #0
 800b686:	d027      	beq.n	800b6d8 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b68c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b68e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b690:	f107 0310 	add.w	r3, r7, #16
 800b694:	2100      	movs	r1, #0
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe faa5 	bl	8009be6 <dir_sdi>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800b6a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d116      	bne.n	800b6d8 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b6aa:	f107 0310 	add.w	r3, r7, #16
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe fc5e 	bl	8009f72 <dir_read>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b6bc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d102      	bne.n	800b6ca <f_unlink+0xec>
 800b6c4:	2307      	movs	r3, #7
 800b6c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b6ca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d102      	bne.n	800b6d8 <f_unlink+0xfa>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b6d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d123      	bne.n	800b728 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b6e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fe fd28 	bl	800a13a <dir_remove>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b6f0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10c      	bne.n	800b712 <f_unlink+0x134>
 800b6f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d009      	beq.n	800b712 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b6fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b702:	2200      	movs	r2, #0
 800b704:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe f93c 	bl	8009984 <remove_chain>
 800b70c:	4603      	mov	r3, r0
 800b70e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b712:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b716:	2b00      	cmp	r3, #0
 800b718:	d106      	bne.n	800b728 <f_unlink+0x14a>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fd ff13 	bl	8009548 <sync_fs>
 800b722:	4603      	mov	r3, r0
 800b724:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b728:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3778      	adds	r7, #120	@ 0x78
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800b734:	b590      	push	{r4, r7, lr}
 800b736:	b0a5      	sub	sp, #148	@ 0x94
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800b73e:	463b      	mov	r3, r7
 800b740:	4618      	mov	r0, r3
 800b742:	f7fe fe1e 	bl	800a382 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800b746:	f107 0120 	add.w	r1, r7, #32
 800b74a:	1d3b      	adds	r3, r7, #4
 800b74c:	2202      	movs	r2, #2
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe feb2 	bl	800a4b8 <find_volume>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800b75a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f040 80db 	bne.w	800b91a <f_rename+0x1e6>
		djo.obj.fs = fs;
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800b76e:	4611      	mov	r1, r2
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe fd95 	bl	800a2a0 <follow_path>
 800b776:	4603      	mov	r3, r0
 800b778:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800b77c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b780:	2b00      	cmp	r3, #0
 800b782:	d108      	bne.n	800b796 <f_rename+0x62>
 800b784:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800b788:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <f_rename+0x62>
 800b790:	2306      	movs	r3, #6
 800b792:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800b796:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d108      	bne.n	800b7b0 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800b79e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800b7a2:	2102      	movs	r1, #2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fd fcf1 	bl	800918c <chk_lock>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800b7b0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f040 80b0 	bne.w	800b91a <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800b7ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7bc:	f103 010b 	add.w	r1, r3, #11
 800b7c0:	f107 0308 	add.w	r3, r7, #8
 800b7c4:	2215      	movs	r2, #21
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fd fc61 	bl	800908e <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800b7cc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800b7d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7d4:	2230      	movs	r2, #48	@ 0x30
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fd fc59 	bl	800908e <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fe fd5b 	bl	800a2a0 <follow_path>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800b7f0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10c      	bne.n	800b812 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800b7f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d105      	bne.n	800b80c <f_rename+0xd8>
 800b800:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b802:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b804:	429a      	cmp	r2, r3
 800b806:	d101      	bne.n	800b80c <f_rename+0xd8>
 800b808:	2304      	movs	r3, #4
 800b80a:	e000      	b.n	800b80e <f_rename+0xda>
 800b80c:	2308      	movs	r3, #8
 800b80e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800b812:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b816:	2b04      	cmp	r3, #4
 800b818:	d168      	bne.n	800b8ec <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800b81a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe fc59 	bl	800a0d6 <dir_register>
 800b824:	4603      	mov	r3, r0
 800b826:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800b82a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d15c      	bne.n	800b8ec <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800b832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800b838:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b83c:	f103 000d 	add.w	r0, r3, #13
 800b840:	f107 0308 	add.w	r3, r7, #8
 800b844:	3302      	adds	r3, #2
 800b846:	2213      	movs	r2, #19
 800b848:	4619      	mov	r1, r3
 800b84a:	f7fd fc20 	bl	800908e <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800b84e:	7a3a      	ldrb	r2, [r7, #8]
 800b850:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b854:	330b      	adds	r3, #11
 800b856:	f042 0220 	orr.w	r2, r2, #32
 800b85a:	b2d2      	uxtb	r2, r2
 800b85c:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800b85e:	6a3b      	ldr	r3, [r7, #32]
 800b860:	2201      	movs	r2, #1
 800b862:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800b864:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b868:	330b      	adds	r3, #11
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	f003 0310 	and.w	r3, r3, #16
 800b870:	2b00      	cmp	r3, #0
 800b872:	d03b      	beq.n	800b8ec <f_rename+0x1b8>
 800b874:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b878:	429a      	cmp	r2, r3
 800b87a:	d037      	beq.n	800b8ec <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800b87c:	6a3c      	ldr	r4, [r7, #32]
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800b884:	4618      	mov	r0, r3
 800b886:	f7fe fb35 	bl	8009ef4 <ld_clust>
 800b88a:	4603      	mov	r3, r0
 800b88c:	4619      	mov	r1, r3
 800b88e:	4620      	mov	r0, r4
 800b890:	f7fd fec8 	bl	8009624 <clust2sect>
 800b894:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800b898:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d103      	bne.n	800b8a8 <f_rename+0x174>
								res = FR_INT_ERR;
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800b8a6:	e021      	b.n	800b8ec <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800b8a8:	6a3b      	ldr	r3, [r7, #32]
 800b8aa:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fd fe1c 	bl	80094ec <move_window>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	3330      	adds	r3, #48	@ 0x30
 800b8be:	3320      	adds	r3, #32
 800b8c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800b8c4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10f      	bne.n	800b8ec <f_rename+0x1b8>
 800b8cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8d6:	d109      	bne.n	800b8ec <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8dc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fb26 	bl	8009f32 <st_clust>
									fs->wflag = 1;
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800b8ec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d112      	bne.n	800b91a <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800b8f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe fc1e 	bl	800a13a <dir_remove>
 800b8fe:	4603      	mov	r3, r0
 800b900:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800b904:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <f_rename+0x1e6>
					res = sync_fs(fs);
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fd fe1a 	bl	8009548 <sync_fs>
 800b914:	4603      	mov	r3, r0
 800b916:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b91a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3794      	adds	r7, #148	@ 0x94
 800b922:	46bd      	mov	sp, r7
 800b924:	bd90      	pop	{r4, r7, pc}

0800b926 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b088      	sub	sp, #32
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
	int n = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b93a:	e01c      	b.n	800b976 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800b93c:	f107 0310 	add.w	r3, r7, #16
 800b940:	f107 0114 	add.w	r1, r7, #20
 800b944:	2201      	movs	r2, #1
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7ff fa38 	bl	800adbc <f_read>
		if (rc != 1) break;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d117      	bne.n	800b982 <f_gets+0x5c>
		c = s[0];
 800b952:	7d3b      	ldrb	r3, [r7, #20]
 800b954:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b956:	7dfb      	ldrb	r3, [r7, #23]
 800b958:	2b0d      	cmp	r3, #13
 800b95a:	d00b      	beq.n	800b974 <f_gets+0x4e>
		*p++ = c;
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	61ba      	str	r2, [r7, #24]
 800b962:	7dfa      	ldrb	r2, [r7, #23]
 800b964:	701a      	strb	r2, [r3, #0]
		n++;
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	3301      	adds	r3, #1
 800b96a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800b96c:	7dfb      	ldrb	r3, [r7, #23]
 800b96e:	2b0a      	cmp	r3, #10
 800b970:	d009      	beq.n	800b986 <f_gets+0x60>
 800b972:	e000      	b.n	800b976 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b974:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	3b01      	subs	r3, #1
 800b97a:	69fa      	ldr	r2, [r7, #28]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	dbdd      	blt.n	800b93c <f_gets+0x16>
 800b980:	e002      	b.n	800b988 <f_gets+0x62>
		if (rc != 1) break;
 800b982:	bf00      	nop
 800b984:	e000      	b.n	800b988 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800b986:	bf00      	nop
	}
	*p = 0;
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	2200      	movs	r2, #0
 800b98c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <f_gets+0x72>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	e000      	b.n	800b99a <f_gets+0x74>
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3720      	adds	r7, #32
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9ba:	4b1f      	ldr	r3, [pc, #124]	@ (800ba38 <FATFS_LinkDriverEx+0x94>)
 800b9bc:	7a5b      	ldrb	r3, [r3, #9]
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d131      	bne.n	800ba28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9c4:	4b1c      	ldr	r3, [pc, #112]	@ (800ba38 <FATFS_LinkDriverEx+0x94>)
 800b9c6:	7a5b      	ldrb	r3, [r3, #9]
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4b1a      	ldr	r3, [pc, #104]	@ (800ba38 <FATFS_LinkDriverEx+0x94>)
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9d2:	4b19      	ldr	r3, [pc, #100]	@ (800ba38 <FATFS_LinkDriverEx+0x94>)
 800b9d4:	7a5b      	ldrb	r3, [r3, #9]
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	4a17      	ldr	r2, [pc, #92]	@ (800ba38 <FATFS_LinkDriverEx+0x94>)
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9e2:	4b15      	ldr	r3, [pc, #84]	@ (800ba38 <FATFS_LinkDriverEx+0x94>)
 800b9e4:	7a5b      	ldrb	r3, [r3, #9]
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	4b13      	ldr	r3, [pc, #76]	@ (800ba38 <FATFS_LinkDriverEx+0x94>)
 800b9ec:	4413      	add	r3, r2
 800b9ee:	79fa      	ldrb	r2, [r7, #7]
 800b9f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9f2:	4b11      	ldr	r3, [pc, #68]	@ (800ba38 <FATFS_LinkDriverEx+0x94>)
 800b9f4:	7a5b      	ldrb	r3, [r3, #9]
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	1c5a      	adds	r2, r3, #1
 800b9fa:	b2d1      	uxtb	r1, r2
 800b9fc:	4a0e      	ldr	r2, [pc, #56]	@ (800ba38 <FATFS_LinkDriverEx+0x94>)
 800b9fe:	7251      	strb	r1, [r2, #9]
 800ba00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ba02:	7dbb      	ldrb	r3, [r7, #22]
 800ba04:	3330      	adds	r3, #48	@ 0x30
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	223a      	movs	r2, #58	@ 0x3a
 800ba12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	3302      	adds	r3, #2
 800ba18:	222f      	movs	r2, #47	@ 0x2f
 800ba1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	3303      	adds	r3, #3
 800ba20:	2200      	movs	r2, #0
 800ba22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	371c      	adds	r7, #28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	2000108c 	.word	0x2000108c

0800ba3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba46:	2200      	movs	r2, #0
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7ff ffaa 	bl	800b9a4 <FATFS_LinkDriverEx>
 800ba50:	4603      	mov	r3, r0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
	...

0800ba5c <_strtol_l.isra.0>:
 800ba5c:	2b24      	cmp	r3, #36	@ 0x24
 800ba5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba62:	4686      	mov	lr, r0
 800ba64:	4690      	mov	r8, r2
 800ba66:	d801      	bhi.n	800ba6c <_strtol_l.isra.0+0x10>
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d106      	bne.n	800ba7a <_strtol_l.isra.0+0x1e>
 800ba6c:	f001 f9b2 	bl	800cdd4 <__errno>
 800ba70:	2316      	movs	r3, #22
 800ba72:	6003      	str	r3, [r0, #0]
 800ba74:	2000      	movs	r0, #0
 800ba76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba7a:	4834      	ldr	r0, [pc, #208]	@ (800bb4c <_strtol_l.isra.0+0xf0>)
 800ba7c:	460d      	mov	r5, r1
 800ba7e:	462a      	mov	r2, r5
 800ba80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba84:	5d06      	ldrb	r6, [r0, r4]
 800ba86:	f016 0608 	ands.w	r6, r6, #8
 800ba8a:	d1f8      	bne.n	800ba7e <_strtol_l.isra.0+0x22>
 800ba8c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ba8e:	d110      	bne.n	800bab2 <_strtol_l.isra.0+0x56>
 800ba90:	782c      	ldrb	r4, [r5, #0]
 800ba92:	2601      	movs	r6, #1
 800ba94:	1c95      	adds	r5, r2, #2
 800ba96:	f033 0210 	bics.w	r2, r3, #16
 800ba9a:	d115      	bne.n	800bac8 <_strtol_l.isra.0+0x6c>
 800ba9c:	2c30      	cmp	r4, #48	@ 0x30
 800ba9e:	d10d      	bne.n	800babc <_strtol_l.isra.0+0x60>
 800baa0:	782a      	ldrb	r2, [r5, #0]
 800baa2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800baa6:	2a58      	cmp	r2, #88	@ 0x58
 800baa8:	d108      	bne.n	800babc <_strtol_l.isra.0+0x60>
 800baaa:	786c      	ldrb	r4, [r5, #1]
 800baac:	3502      	adds	r5, #2
 800baae:	2310      	movs	r3, #16
 800bab0:	e00a      	b.n	800bac8 <_strtol_l.isra.0+0x6c>
 800bab2:	2c2b      	cmp	r4, #43	@ 0x2b
 800bab4:	bf04      	itt	eq
 800bab6:	782c      	ldrbeq	r4, [r5, #0]
 800bab8:	1c95      	addeq	r5, r2, #2
 800baba:	e7ec      	b.n	800ba96 <_strtol_l.isra.0+0x3a>
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1f6      	bne.n	800baae <_strtol_l.isra.0+0x52>
 800bac0:	2c30      	cmp	r4, #48	@ 0x30
 800bac2:	bf14      	ite	ne
 800bac4:	230a      	movne	r3, #10
 800bac6:	2308      	moveq	r3, #8
 800bac8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bacc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bad0:	2200      	movs	r2, #0
 800bad2:	fbbc f9f3 	udiv	r9, ip, r3
 800bad6:	4610      	mov	r0, r2
 800bad8:	fb03 ca19 	mls	sl, r3, r9, ip
 800badc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bae0:	2f09      	cmp	r7, #9
 800bae2:	d80f      	bhi.n	800bb04 <_strtol_l.isra.0+0xa8>
 800bae4:	463c      	mov	r4, r7
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	dd1b      	ble.n	800bb22 <_strtol_l.isra.0+0xc6>
 800baea:	1c57      	adds	r7, r2, #1
 800baec:	d007      	beq.n	800bafe <_strtol_l.isra.0+0xa2>
 800baee:	4581      	cmp	r9, r0
 800baf0:	d314      	bcc.n	800bb1c <_strtol_l.isra.0+0xc0>
 800baf2:	d101      	bne.n	800baf8 <_strtol_l.isra.0+0x9c>
 800baf4:	45a2      	cmp	sl, r4
 800baf6:	db11      	blt.n	800bb1c <_strtol_l.isra.0+0xc0>
 800baf8:	fb00 4003 	mla	r0, r0, r3, r4
 800bafc:	2201      	movs	r2, #1
 800bafe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb02:	e7eb      	b.n	800badc <_strtol_l.isra.0+0x80>
 800bb04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bb08:	2f19      	cmp	r7, #25
 800bb0a:	d801      	bhi.n	800bb10 <_strtol_l.isra.0+0xb4>
 800bb0c:	3c37      	subs	r4, #55	@ 0x37
 800bb0e:	e7ea      	b.n	800bae6 <_strtol_l.isra.0+0x8a>
 800bb10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bb14:	2f19      	cmp	r7, #25
 800bb16:	d804      	bhi.n	800bb22 <_strtol_l.isra.0+0xc6>
 800bb18:	3c57      	subs	r4, #87	@ 0x57
 800bb1a:	e7e4      	b.n	800bae6 <_strtol_l.isra.0+0x8a>
 800bb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb20:	e7ed      	b.n	800bafe <_strtol_l.isra.0+0xa2>
 800bb22:	1c53      	adds	r3, r2, #1
 800bb24:	d108      	bne.n	800bb38 <_strtol_l.isra.0+0xdc>
 800bb26:	2322      	movs	r3, #34	@ 0x22
 800bb28:	f8ce 3000 	str.w	r3, [lr]
 800bb2c:	4660      	mov	r0, ip
 800bb2e:	f1b8 0f00 	cmp.w	r8, #0
 800bb32:	d0a0      	beq.n	800ba76 <_strtol_l.isra.0+0x1a>
 800bb34:	1e69      	subs	r1, r5, #1
 800bb36:	e006      	b.n	800bb46 <_strtol_l.isra.0+0xea>
 800bb38:	b106      	cbz	r6, 800bb3c <_strtol_l.isra.0+0xe0>
 800bb3a:	4240      	negs	r0, r0
 800bb3c:	f1b8 0f00 	cmp.w	r8, #0
 800bb40:	d099      	beq.n	800ba76 <_strtol_l.isra.0+0x1a>
 800bb42:	2a00      	cmp	r2, #0
 800bb44:	d1f6      	bne.n	800bb34 <_strtol_l.isra.0+0xd8>
 800bb46:	f8c8 1000 	str.w	r1, [r8]
 800bb4a:	e794      	b.n	800ba76 <_strtol_l.isra.0+0x1a>
 800bb4c:	08012185 	.word	0x08012185

0800bb50 <_strtol_r>:
 800bb50:	f7ff bf84 	b.w	800ba5c <_strtol_l.isra.0>

0800bb54 <strtol>:
 800bb54:	4613      	mov	r3, r2
 800bb56:	460a      	mov	r2, r1
 800bb58:	4601      	mov	r1, r0
 800bb5a:	4802      	ldr	r0, [pc, #8]	@ (800bb64 <strtol+0x10>)
 800bb5c:	6800      	ldr	r0, [r0, #0]
 800bb5e:	f7ff bf7d 	b.w	800ba5c <_strtol_l.isra.0>
 800bb62:	bf00      	nop
 800bb64:	20000044 	.word	0x20000044

0800bb68 <__cvt>:
 800bb68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb6c:	ec57 6b10 	vmov	r6, r7, d0
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	460c      	mov	r4, r1
 800bb74:	4619      	mov	r1, r3
 800bb76:	463b      	mov	r3, r7
 800bb78:	bfbb      	ittet	lt
 800bb7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bb7e:	461f      	movlt	r7, r3
 800bb80:	2300      	movge	r3, #0
 800bb82:	232d      	movlt	r3, #45	@ 0x2d
 800bb84:	700b      	strb	r3, [r1, #0]
 800bb86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bb8c:	4691      	mov	r9, r2
 800bb8e:	f023 0820 	bic.w	r8, r3, #32
 800bb92:	bfbc      	itt	lt
 800bb94:	4632      	movlt	r2, r6
 800bb96:	4616      	movlt	r6, r2
 800bb98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bb9c:	d005      	beq.n	800bbaa <__cvt+0x42>
 800bb9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bba2:	d100      	bne.n	800bba6 <__cvt+0x3e>
 800bba4:	3401      	adds	r4, #1
 800bba6:	2102      	movs	r1, #2
 800bba8:	e000      	b.n	800bbac <__cvt+0x44>
 800bbaa:	2103      	movs	r1, #3
 800bbac:	ab03      	add	r3, sp, #12
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	ab02      	add	r3, sp, #8
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	ec47 6b10 	vmov	d0, r6, r7
 800bbb8:	4653      	mov	r3, sl
 800bbba:	4622      	mov	r2, r4
 800bbbc:	f001 f9e4 	bl	800cf88 <_dtoa_r>
 800bbc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	d119      	bne.n	800bbfc <__cvt+0x94>
 800bbc8:	f019 0f01 	tst.w	r9, #1
 800bbcc:	d00e      	beq.n	800bbec <__cvt+0x84>
 800bbce:	eb00 0904 	add.w	r9, r0, r4
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	4639      	mov	r1, r7
 800bbda:	f7f4 ffa5 	bl	8000b28 <__aeabi_dcmpeq>
 800bbde:	b108      	cbz	r0, 800bbe4 <__cvt+0x7c>
 800bbe0:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbe4:	2230      	movs	r2, #48	@ 0x30
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	454b      	cmp	r3, r9
 800bbea:	d31e      	bcc.n	800bc2a <__cvt+0xc2>
 800bbec:	9b03      	ldr	r3, [sp, #12]
 800bbee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbf0:	1b5b      	subs	r3, r3, r5
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	b004      	add	sp, #16
 800bbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc00:	eb00 0904 	add.w	r9, r0, r4
 800bc04:	d1e5      	bne.n	800bbd2 <__cvt+0x6a>
 800bc06:	7803      	ldrb	r3, [r0, #0]
 800bc08:	2b30      	cmp	r3, #48	@ 0x30
 800bc0a:	d10a      	bne.n	800bc22 <__cvt+0xba>
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2300      	movs	r3, #0
 800bc10:	4630      	mov	r0, r6
 800bc12:	4639      	mov	r1, r7
 800bc14:	f7f4 ff88 	bl	8000b28 <__aeabi_dcmpeq>
 800bc18:	b918      	cbnz	r0, 800bc22 <__cvt+0xba>
 800bc1a:	f1c4 0401 	rsb	r4, r4, #1
 800bc1e:	f8ca 4000 	str.w	r4, [sl]
 800bc22:	f8da 3000 	ldr.w	r3, [sl]
 800bc26:	4499      	add	r9, r3
 800bc28:	e7d3      	b.n	800bbd2 <__cvt+0x6a>
 800bc2a:	1c59      	adds	r1, r3, #1
 800bc2c:	9103      	str	r1, [sp, #12]
 800bc2e:	701a      	strb	r2, [r3, #0]
 800bc30:	e7d9      	b.n	800bbe6 <__cvt+0x7e>

0800bc32 <__exponent>:
 800bc32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc34:	2900      	cmp	r1, #0
 800bc36:	bfba      	itte	lt
 800bc38:	4249      	neglt	r1, r1
 800bc3a:	232d      	movlt	r3, #45	@ 0x2d
 800bc3c:	232b      	movge	r3, #43	@ 0x2b
 800bc3e:	2909      	cmp	r1, #9
 800bc40:	7002      	strb	r2, [r0, #0]
 800bc42:	7043      	strb	r3, [r0, #1]
 800bc44:	dd29      	ble.n	800bc9a <__exponent+0x68>
 800bc46:	f10d 0307 	add.w	r3, sp, #7
 800bc4a:	461d      	mov	r5, r3
 800bc4c:	270a      	movs	r7, #10
 800bc4e:	461a      	mov	r2, r3
 800bc50:	fbb1 f6f7 	udiv	r6, r1, r7
 800bc54:	fb07 1416 	mls	r4, r7, r6, r1
 800bc58:	3430      	adds	r4, #48	@ 0x30
 800bc5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bc5e:	460c      	mov	r4, r1
 800bc60:	2c63      	cmp	r4, #99	@ 0x63
 800bc62:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc66:	4631      	mov	r1, r6
 800bc68:	dcf1      	bgt.n	800bc4e <__exponent+0x1c>
 800bc6a:	3130      	adds	r1, #48	@ 0x30
 800bc6c:	1e94      	subs	r4, r2, #2
 800bc6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc72:	1c41      	adds	r1, r0, #1
 800bc74:	4623      	mov	r3, r4
 800bc76:	42ab      	cmp	r3, r5
 800bc78:	d30a      	bcc.n	800bc90 <__exponent+0x5e>
 800bc7a:	f10d 0309 	add.w	r3, sp, #9
 800bc7e:	1a9b      	subs	r3, r3, r2
 800bc80:	42ac      	cmp	r4, r5
 800bc82:	bf88      	it	hi
 800bc84:	2300      	movhi	r3, #0
 800bc86:	3302      	adds	r3, #2
 800bc88:	4403      	add	r3, r0
 800bc8a:	1a18      	subs	r0, r3, r0
 800bc8c:	b003      	add	sp, #12
 800bc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc90:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bc94:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bc98:	e7ed      	b.n	800bc76 <__exponent+0x44>
 800bc9a:	2330      	movs	r3, #48	@ 0x30
 800bc9c:	3130      	adds	r1, #48	@ 0x30
 800bc9e:	7083      	strb	r3, [r0, #2]
 800bca0:	70c1      	strb	r1, [r0, #3]
 800bca2:	1d03      	adds	r3, r0, #4
 800bca4:	e7f1      	b.n	800bc8a <__exponent+0x58>
	...

0800bca8 <_printf_float>:
 800bca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcac:	b08d      	sub	sp, #52	@ 0x34
 800bcae:	460c      	mov	r4, r1
 800bcb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bcb4:	4616      	mov	r6, r2
 800bcb6:	461f      	mov	r7, r3
 800bcb8:	4605      	mov	r5, r0
 800bcba:	f001 f841 	bl	800cd40 <_localeconv_r>
 800bcbe:	6803      	ldr	r3, [r0, #0]
 800bcc0:	9304      	str	r3, [sp, #16]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7f4 fb04 	bl	80002d0 <strlen>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	930a      	str	r3, [sp, #40]	@ 0x28
 800bccc:	f8d8 3000 	ldr.w	r3, [r8]
 800bcd0:	9005      	str	r0, [sp, #20]
 800bcd2:	3307      	adds	r3, #7
 800bcd4:	f023 0307 	bic.w	r3, r3, #7
 800bcd8:	f103 0208 	add.w	r2, r3, #8
 800bcdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bce0:	f8d4 b000 	ldr.w	fp, [r4]
 800bce4:	f8c8 2000 	str.w	r2, [r8]
 800bce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bcf0:	9307      	str	r3, [sp, #28]
 800bcf2:	f8cd 8018 	str.w	r8, [sp, #24]
 800bcf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bcfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcfe:	4b9c      	ldr	r3, [pc, #624]	@ (800bf70 <_printf_float+0x2c8>)
 800bd00:	f04f 32ff 	mov.w	r2, #4294967295
 800bd04:	f7f4 ff42 	bl	8000b8c <__aeabi_dcmpun>
 800bd08:	bb70      	cbnz	r0, 800bd68 <_printf_float+0xc0>
 800bd0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd0e:	4b98      	ldr	r3, [pc, #608]	@ (800bf70 <_printf_float+0x2c8>)
 800bd10:	f04f 32ff 	mov.w	r2, #4294967295
 800bd14:	f7f4 ff1c 	bl	8000b50 <__aeabi_dcmple>
 800bd18:	bb30      	cbnz	r0, 800bd68 <_printf_float+0xc0>
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	4640      	mov	r0, r8
 800bd20:	4649      	mov	r1, r9
 800bd22:	f7f4 ff0b 	bl	8000b3c <__aeabi_dcmplt>
 800bd26:	b110      	cbz	r0, 800bd2e <_printf_float+0x86>
 800bd28:	232d      	movs	r3, #45	@ 0x2d
 800bd2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd2e:	4a91      	ldr	r2, [pc, #580]	@ (800bf74 <_printf_float+0x2cc>)
 800bd30:	4b91      	ldr	r3, [pc, #580]	@ (800bf78 <_printf_float+0x2d0>)
 800bd32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bd36:	bf8c      	ite	hi
 800bd38:	4690      	movhi	r8, r2
 800bd3a:	4698      	movls	r8, r3
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	6123      	str	r3, [r4, #16]
 800bd40:	f02b 0304 	bic.w	r3, fp, #4
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	f04f 0900 	mov.w	r9, #0
 800bd4a:	9700      	str	r7, [sp, #0]
 800bd4c:	4633      	mov	r3, r6
 800bd4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bd50:	4621      	mov	r1, r4
 800bd52:	4628      	mov	r0, r5
 800bd54:	f000 f9d2 	bl	800c0fc <_printf_common>
 800bd58:	3001      	adds	r0, #1
 800bd5a:	f040 808d 	bne.w	800be78 <_printf_float+0x1d0>
 800bd5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd62:	b00d      	add	sp, #52	@ 0x34
 800bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd68:	4642      	mov	r2, r8
 800bd6a:	464b      	mov	r3, r9
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	4649      	mov	r1, r9
 800bd70:	f7f4 ff0c 	bl	8000b8c <__aeabi_dcmpun>
 800bd74:	b140      	cbz	r0, 800bd88 <_printf_float+0xe0>
 800bd76:	464b      	mov	r3, r9
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfbc      	itt	lt
 800bd7c:	232d      	movlt	r3, #45	@ 0x2d
 800bd7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bd82:	4a7e      	ldr	r2, [pc, #504]	@ (800bf7c <_printf_float+0x2d4>)
 800bd84:	4b7e      	ldr	r3, [pc, #504]	@ (800bf80 <_printf_float+0x2d8>)
 800bd86:	e7d4      	b.n	800bd32 <_printf_float+0x8a>
 800bd88:	6863      	ldr	r3, [r4, #4]
 800bd8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bd8e:	9206      	str	r2, [sp, #24]
 800bd90:	1c5a      	adds	r2, r3, #1
 800bd92:	d13b      	bne.n	800be0c <_printf_float+0x164>
 800bd94:	2306      	movs	r3, #6
 800bd96:	6063      	str	r3, [r4, #4]
 800bd98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	6022      	str	r2, [r4, #0]
 800bda0:	9303      	str	r3, [sp, #12]
 800bda2:	ab0a      	add	r3, sp, #40	@ 0x28
 800bda4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bda8:	ab09      	add	r3, sp, #36	@ 0x24
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	6861      	ldr	r1, [r4, #4]
 800bdae:	ec49 8b10 	vmov	d0, r8, r9
 800bdb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f7ff fed6 	bl	800bb68 <__cvt>
 800bdbc:	9b06      	ldr	r3, [sp, #24]
 800bdbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bdc0:	2b47      	cmp	r3, #71	@ 0x47
 800bdc2:	4680      	mov	r8, r0
 800bdc4:	d129      	bne.n	800be1a <_printf_float+0x172>
 800bdc6:	1cc8      	adds	r0, r1, #3
 800bdc8:	db02      	blt.n	800bdd0 <_printf_float+0x128>
 800bdca:	6863      	ldr	r3, [r4, #4]
 800bdcc:	4299      	cmp	r1, r3
 800bdce:	dd41      	ble.n	800be54 <_printf_float+0x1ac>
 800bdd0:	f1aa 0a02 	sub.w	sl, sl, #2
 800bdd4:	fa5f fa8a 	uxtb.w	sl, sl
 800bdd8:	3901      	subs	r1, #1
 800bdda:	4652      	mov	r2, sl
 800bddc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bde0:	9109      	str	r1, [sp, #36]	@ 0x24
 800bde2:	f7ff ff26 	bl	800bc32 <__exponent>
 800bde6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bde8:	1813      	adds	r3, r2, r0
 800bdea:	2a01      	cmp	r2, #1
 800bdec:	4681      	mov	r9, r0
 800bdee:	6123      	str	r3, [r4, #16]
 800bdf0:	dc02      	bgt.n	800bdf8 <_printf_float+0x150>
 800bdf2:	6822      	ldr	r2, [r4, #0]
 800bdf4:	07d2      	lsls	r2, r2, #31
 800bdf6:	d501      	bpl.n	800bdfc <_printf_float+0x154>
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	6123      	str	r3, [r4, #16]
 800bdfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800be00:	2b00      	cmp	r3, #0
 800be02:	d0a2      	beq.n	800bd4a <_printf_float+0xa2>
 800be04:	232d      	movs	r3, #45	@ 0x2d
 800be06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be0a:	e79e      	b.n	800bd4a <_printf_float+0xa2>
 800be0c:	9a06      	ldr	r2, [sp, #24]
 800be0e:	2a47      	cmp	r2, #71	@ 0x47
 800be10:	d1c2      	bne.n	800bd98 <_printf_float+0xf0>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1c0      	bne.n	800bd98 <_printf_float+0xf0>
 800be16:	2301      	movs	r3, #1
 800be18:	e7bd      	b.n	800bd96 <_printf_float+0xee>
 800be1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be1e:	d9db      	bls.n	800bdd8 <_printf_float+0x130>
 800be20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800be24:	d118      	bne.n	800be58 <_printf_float+0x1b0>
 800be26:	2900      	cmp	r1, #0
 800be28:	6863      	ldr	r3, [r4, #4]
 800be2a:	dd0b      	ble.n	800be44 <_printf_float+0x19c>
 800be2c:	6121      	str	r1, [r4, #16]
 800be2e:	b913      	cbnz	r3, 800be36 <_printf_float+0x18e>
 800be30:	6822      	ldr	r2, [r4, #0]
 800be32:	07d0      	lsls	r0, r2, #31
 800be34:	d502      	bpl.n	800be3c <_printf_float+0x194>
 800be36:	3301      	adds	r3, #1
 800be38:	440b      	add	r3, r1
 800be3a:	6123      	str	r3, [r4, #16]
 800be3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800be3e:	f04f 0900 	mov.w	r9, #0
 800be42:	e7db      	b.n	800bdfc <_printf_float+0x154>
 800be44:	b913      	cbnz	r3, 800be4c <_printf_float+0x1a4>
 800be46:	6822      	ldr	r2, [r4, #0]
 800be48:	07d2      	lsls	r2, r2, #31
 800be4a:	d501      	bpl.n	800be50 <_printf_float+0x1a8>
 800be4c:	3302      	adds	r3, #2
 800be4e:	e7f4      	b.n	800be3a <_printf_float+0x192>
 800be50:	2301      	movs	r3, #1
 800be52:	e7f2      	b.n	800be3a <_printf_float+0x192>
 800be54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800be58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be5a:	4299      	cmp	r1, r3
 800be5c:	db05      	blt.n	800be6a <_printf_float+0x1c2>
 800be5e:	6823      	ldr	r3, [r4, #0]
 800be60:	6121      	str	r1, [r4, #16]
 800be62:	07d8      	lsls	r0, r3, #31
 800be64:	d5ea      	bpl.n	800be3c <_printf_float+0x194>
 800be66:	1c4b      	adds	r3, r1, #1
 800be68:	e7e7      	b.n	800be3a <_printf_float+0x192>
 800be6a:	2900      	cmp	r1, #0
 800be6c:	bfd4      	ite	le
 800be6e:	f1c1 0202 	rsble	r2, r1, #2
 800be72:	2201      	movgt	r2, #1
 800be74:	4413      	add	r3, r2
 800be76:	e7e0      	b.n	800be3a <_printf_float+0x192>
 800be78:	6823      	ldr	r3, [r4, #0]
 800be7a:	055a      	lsls	r2, r3, #21
 800be7c:	d407      	bmi.n	800be8e <_printf_float+0x1e6>
 800be7e:	6923      	ldr	r3, [r4, #16]
 800be80:	4642      	mov	r2, r8
 800be82:	4631      	mov	r1, r6
 800be84:	4628      	mov	r0, r5
 800be86:	47b8      	blx	r7
 800be88:	3001      	adds	r0, #1
 800be8a:	d12b      	bne.n	800bee4 <_printf_float+0x23c>
 800be8c:	e767      	b.n	800bd5e <_printf_float+0xb6>
 800be8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800be92:	f240 80dd 	bls.w	800c050 <_printf_float+0x3a8>
 800be96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be9a:	2200      	movs	r2, #0
 800be9c:	2300      	movs	r3, #0
 800be9e:	f7f4 fe43 	bl	8000b28 <__aeabi_dcmpeq>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d033      	beq.n	800bf0e <_printf_float+0x266>
 800bea6:	4a37      	ldr	r2, [pc, #220]	@ (800bf84 <_printf_float+0x2dc>)
 800bea8:	2301      	movs	r3, #1
 800beaa:	4631      	mov	r1, r6
 800beac:	4628      	mov	r0, r5
 800beae:	47b8      	blx	r7
 800beb0:	3001      	adds	r0, #1
 800beb2:	f43f af54 	beq.w	800bd5e <_printf_float+0xb6>
 800beb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800beba:	4543      	cmp	r3, r8
 800bebc:	db02      	blt.n	800bec4 <_printf_float+0x21c>
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	07d8      	lsls	r0, r3, #31
 800bec2:	d50f      	bpl.n	800bee4 <_printf_float+0x23c>
 800bec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bec8:	4631      	mov	r1, r6
 800beca:	4628      	mov	r0, r5
 800becc:	47b8      	blx	r7
 800bece:	3001      	adds	r0, #1
 800bed0:	f43f af45 	beq.w	800bd5e <_printf_float+0xb6>
 800bed4:	f04f 0900 	mov.w	r9, #0
 800bed8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bedc:	f104 0a1a 	add.w	sl, r4, #26
 800bee0:	45c8      	cmp	r8, r9
 800bee2:	dc09      	bgt.n	800bef8 <_printf_float+0x250>
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	079b      	lsls	r3, r3, #30
 800bee8:	f100 8103 	bmi.w	800c0f2 <_printf_float+0x44a>
 800beec:	68e0      	ldr	r0, [r4, #12]
 800beee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bef0:	4298      	cmp	r0, r3
 800bef2:	bfb8      	it	lt
 800bef4:	4618      	movlt	r0, r3
 800bef6:	e734      	b.n	800bd62 <_printf_float+0xba>
 800bef8:	2301      	movs	r3, #1
 800befa:	4652      	mov	r2, sl
 800befc:	4631      	mov	r1, r6
 800befe:	4628      	mov	r0, r5
 800bf00:	47b8      	blx	r7
 800bf02:	3001      	adds	r0, #1
 800bf04:	f43f af2b 	beq.w	800bd5e <_printf_float+0xb6>
 800bf08:	f109 0901 	add.w	r9, r9, #1
 800bf0c:	e7e8      	b.n	800bee0 <_printf_float+0x238>
 800bf0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	dc39      	bgt.n	800bf88 <_printf_float+0x2e0>
 800bf14:	4a1b      	ldr	r2, [pc, #108]	@ (800bf84 <_printf_float+0x2dc>)
 800bf16:	2301      	movs	r3, #1
 800bf18:	4631      	mov	r1, r6
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	47b8      	blx	r7
 800bf1e:	3001      	adds	r0, #1
 800bf20:	f43f af1d 	beq.w	800bd5e <_printf_float+0xb6>
 800bf24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bf28:	ea59 0303 	orrs.w	r3, r9, r3
 800bf2c:	d102      	bne.n	800bf34 <_printf_float+0x28c>
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	07d9      	lsls	r1, r3, #31
 800bf32:	d5d7      	bpl.n	800bee4 <_printf_float+0x23c>
 800bf34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf38:	4631      	mov	r1, r6
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	47b8      	blx	r7
 800bf3e:	3001      	adds	r0, #1
 800bf40:	f43f af0d 	beq.w	800bd5e <_printf_float+0xb6>
 800bf44:	f04f 0a00 	mov.w	sl, #0
 800bf48:	f104 0b1a 	add.w	fp, r4, #26
 800bf4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf4e:	425b      	negs	r3, r3
 800bf50:	4553      	cmp	r3, sl
 800bf52:	dc01      	bgt.n	800bf58 <_printf_float+0x2b0>
 800bf54:	464b      	mov	r3, r9
 800bf56:	e793      	b.n	800be80 <_printf_float+0x1d8>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	465a      	mov	r2, fp
 800bf5c:	4631      	mov	r1, r6
 800bf5e:	4628      	mov	r0, r5
 800bf60:	47b8      	blx	r7
 800bf62:	3001      	adds	r0, #1
 800bf64:	f43f aefb 	beq.w	800bd5e <_printf_float+0xb6>
 800bf68:	f10a 0a01 	add.w	sl, sl, #1
 800bf6c:	e7ee      	b.n	800bf4c <_printf_float+0x2a4>
 800bf6e:	bf00      	nop
 800bf70:	7fefffff 	.word	0x7fefffff
 800bf74:	08012289 	.word	0x08012289
 800bf78:	08012285 	.word	0x08012285
 800bf7c:	08012291 	.word	0x08012291
 800bf80:	0801228d 	.word	0x0801228d
 800bf84:	08012295 	.word	0x08012295
 800bf88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf8e:	4553      	cmp	r3, sl
 800bf90:	bfa8      	it	ge
 800bf92:	4653      	movge	r3, sl
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	4699      	mov	r9, r3
 800bf98:	dc36      	bgt.n	800c008 <_printf_float+0x360>
 800bf9a:	f04f 0b00 	mov.w	fp, #0
 800bf9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfa2:	f104 021a 	add.w	r2, r4, #26
 800bfa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bfa8:	9306      	str	r3, [sp, #24]
 800bfaa:	eba3 0309 	sub.w	r3, r3, r9
 800bfae:	455b      	cmp	r3, fp
 800bfb0:	dc31      	bgt.n	800c016 <_printf_float+0x36e>
 800bfb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb4:	459a      	cmp	sl, r3
 800bfb6:	dc3a      	bgt.n	800c02e <_printf_float+0x386>
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	07da      	lsls	r2, r3, #31
 800bfbc:	d437      	bmi.n	800c02e <_printf_float+0x386>
 800bfbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfc0:	ebaa 0903 	sub.w	r9, sl, r3
 800bfc4:	9b06      	ldr	r3, [sp, #24]
 800bfc6:	ebaa 0303 	sub.w	r3, sl, r3
 800bfca:	4599      	cmp	r9, r3
 800bfcc:	bfa8      	it	ge
 800bfce:	4699      	movge	r9, r3
 800bfd0:	f1b9 0f00 	cmp.w	r9, #0
 800bfd4:	dc33      	bgt.n	800c03e <_printf_float+0x396>
 800bfd6:	f04f 0800 	mov.w	r8, #0
 800bfda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfde:	f104 0b1a 	add.w	fp, r4, #26
 800bfe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe4:	ebaa 0303 	sub.w	r3, sl, r3
 800bfe8:	eba3 0309 	sub.w	r3, r3, r9
 800bfec:	4543      	cmp	r3, r8
 800bfee:	f77f af79 	ble.w	800bee4 <_printf_float+0x23c>
 800bff2:	2301      	movs	r3, #1
 800bff4:	465a      	mov	r2, fp
 800bff6:	4631      	mov	r1, r6
 800bff8:	4628      	mov	r0, r5
 800bffa:	47b8      	blx	r7
 800bffc:	3001      	adds	r0, #1
 800bffe:	f43f aeae 	beq.w	800bd5e <_printf_float+0xb6>
 800c002:	f108 0801 	add.w	r8, r8, #1
 800c006:	e7ec      	b.n	800bfe2 <_printf_float+0x33a>
 800c008:	4642      	mov	r2, r8
 800c00a:	4631      	mov	r1, r6
 800c00c:	4628      	mov	r0, r5
 800c00e:	47b8      	blx	r7
 800c010:	3001      	adds	r0, #1
 800c012:	d1c2      	bne.n	800bf9a <_printf_float+0x2f2>
 800c014:	e6a3      	b.n	800bd5e <_printf_float+0xb6>
 800c016:	2301      	movs	r3, #1
 800c018:	4631      	mov	r1, r6
 800c01a:	4628      	mov	r0, r5
 800c01c:	9206      	str	r2, [sp, #24]
 800c01e:	47b8      	blx	r7
 800c020:	3001      	adds	r0, #1
 800c022:	f43f ae9c 	beq.w	800bd5e <_printf_float+0xb6>
 800c026:	9a06      	ldr	r2, [sp, #24]
 800c028:	f10b 0b01 	add.w	fp, fp, #1
 800c02c:	e7bb      	b.n	800bfa6 <_printf_float+0x2fe>
 800c02e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c032:	4631      	mov	r1, r6
 800c034:	4628      	mov	r0, r5
 800c036:	47b8      	blx	r7
 800c038:	3001      	adds	r0, #1
 800c03a:	d1c0      	bne.n	800bfbe <_printf_float+0x316>
 800c03c:	e68f      	b.n	800bd5e <_printf_float+0xb6>
 800c03e:	9a06      	ldr	r2, [sp, #24]
 800c040:	464b      	mov	r3, r9
 800c042:	4442      	add	r2, r8
 800c044:	4631      	mov	r1, r6
 800c046:	4628      	mov	r0, r5
 800c048:	47b8      	blx	r7
 800c04a:	3001      	adds	r0, #1
 800c04c:	d1c3      	bne.n	800bfd6 <_printf_float+0x32e>
 800c04e:	e686      	b.n	800bd5e <_printf_float+0xb6>
 800c050:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c054:	f1ba 0f01 	cmp.w	sl, #1
 800c058:	dc01      	bgt.n	800c05e <_printf_float+0x3b6>
 800c05a:	07db      	lsls	r3, r3, #31
 800c05c:	d536      	bpl.n	800c0cc <_printf_float+0x424>
 800c05e:	2301      	movs	r3, #1
 800c060:	4642      	mov	r2, r8
 800c062:	4631      	mov	r1, r6
 800c064:	4628      	mov	r0, r5
 800c066:	47b8      	blx	r7
 800c068:	3001      	adds	r0, #1
 800c06a:	f43f ae78 	beq.w	800bd5e <_printf_float+0xb6>
 800c06e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c072:	4631      	mov	r1, r6
 800c074:	4628      	mov	r0, r5
 800c076:	47b8      	blx	r7
 800c078:	3001      	adds	r0, #1
 800c07a:	f43f ae70 	beq.w	800bd5e <_printf_float+0xb6>
 800c07e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c082:	2200      	movs	r2, #0
 800c084:	2300      	movs	r3, #0
 800c086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c08a:	f7f4 fd4d 	bl	8000b28 <__aeabi_dcmpeq>
 800c08e:	b9c0      	cbnz	r0, 800c0c2 <_printf_float+0x41a>
 800c090:	4653      	mov	r3, sl
 800c092:	f108 0201 	add.w	r2, r8, #1
 800c096:	4631      	mov	r1, r6
 800c098:	4628      	mov	r0, r5
 800c09a:	47b8      	blx	r7
 800c09c:	3001      	adds	r0, #1
 800c09e:	d10c      	bne.n	800c0ba <_printf_float+0x412>
 800c0a0:	e65d      	b.n	800bd5e <_printf_float+0xb6>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	465a      	mov	r2, fp
 800c0a6:	4631      	mov	r1, r6
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	47b8      	blx	r7
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	f43f ae56 	beq.w	800bd5e <_printf_float+0xb6>
 800c0b2:	f108 0801 	add.w	r8, r8, #1
 800c0b6:	45d0      	cmp	r8, sl
 800c0b8:	dbf3      	blt.n	800c0a2 <_printf_float+0x3fa>
 800c0ba:	464b      	mov	r3, r9
 800c0bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c0c0:	e6df      	b.n	800be82 <_printf_float+0x1da>
 800c0c2:	f04f 0800 	mov.w	r8, #0
 800c0c6:	f104 0b1a 	add.w	fp, r4, #26
 800c0ca:	e7f4      	b.n	800c0b6 <_printf_float+0x40e>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	4642      	mov	r2, r8
 800c0d0:	e7e1      	b.n	800c096 <_printf_float+0x3ee>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	464a      	mov	r2, r9
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	4628      	mov	r0, r5
 800c0da:	47b8      	blx	r7
 800c0dc:	3001      	adds	r0, #1
 800c0de:	f43f ae3e 	beq.w	800bd5e <_printf_float+0xb6>
 800c0e2:	f108 0801 	add.w	r8, r8, #1
 800c0e6:	68e3      	ldr	r3, [r4, #12]
 800c0e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c0ea:	1a5b      	subs	r3, r3, r1
 800c0ec:	4543      	cmp	r3, r8
 800c0ee:	dcf0      	bgt.n	800c0d2 <_printf_float+0x42a>
 800c0f0:	e6fc      	b.n	800beec <_printf_float+0x244>
 800c0f2:	f04f 0800 	mov.w	r8, #0
 800c0f6:	f104 0919 	add.w	r9, r4, #25
 800c0fa:	e7f4      	b.n	800c0e6 <_printf_float+0x43e>

0800c0fc <_printf_common>:
 800c0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c100:	4616      	mov	r6, r2
 800c102:	4698      	mov	r8, r3
 800c104:	688a      	ldr	r2, [r1, #8]
 800c106:	690b      	ldr	r3, [r1, #16]
 800c108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c10c:	4293      	cmp	r3, r2
 800c10e:	bfb8      	it	lt
 800c110:	4613      	movlt	r3, r2
 800c112:	6033      	str	r3, [r6, #0]
 800c114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c118:	4607      	mov	r7, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	b10a      	cbz	r2, 800c122 <_printf_common+0x26>
 800c11e:	3301      	adds	r3, #1
 800c120:	6033      	str	r3, [r6, #0]
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	0699      	lsls	r1, r3, #26
 800c126:	bf42      	ittt	mi
 800c128:	6833      	ldrmi	r3, [r6, #0]
 800c12a:	3302      	addmi	r3, #2
 800c12c:	6033      	strmi	r3, [r6, #0]
 800c12e:	6825      	ldr	r5, [r4, #0]
 800c130:	f015 0506 	ands.w	r5, r5, #6
 800c134:	d106      	bne.n	800c144 <_printf_common+0x48>
 800c136:	f104 0a19 	add.w	sl, r4, #25
 800c13a:	68e3      	ldr	r3, [r4, #12]
 800c13c:	6832      	ldr	r2, [r6, #0]
 800c13e:	1a9b      	subs	r3, r3, r2
 800c140:	42ab      	cmp	r3, r5
 800c142:	dc26      	bgt.n	800c192 <_printf_common+0x96>
 800c144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c148:	6822      	ldr	r2, [r4, #0]
 800c14a:	3b00      	subs	r3, #0
 800c14c:	bf18      	it	ne
 800c14e:	2301      	movne	r3, #1
 800c150:	0692      	lsls	r2, r2, #26
 800c152:	d42b      	bmi.n	800c1ac <_printf_common+0xb0>
 800c154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c158:	4641      	mov	r1, r8
 800c15a:	4638      	mov	r0, r7
 800c15c:	47c8      	blx	r9
 800c15e:	3001      	adds	r0, #1
 800c160:	d01e      	beq.n	800c1a0 <_printf_common+0xa4>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	6922      	ldr	r2, [r4, #16]
 800c166:	f003 0306 	and.w	r3, r3, #6
 800c16a:	2b04      	cmp	r3, #4
 800c16c:	bf02      	ittt	eq
 800c16e:	68e5      	ldreq	r5, [r4, #12]
 800c170:	6833      	ldreq	r3, [r6, #0]
 800c172:	1aed      	subeq	r5, r5, r3
 800c174:	68a3      	ldr	r3, [r4, #8]
 800c176:	bf0c      	ite	eq
 800c178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c17c:	2500      	movne	r5, #0
 800c17e:	4293      	cmp	r3, r2
 800c180:	bfc4      	itt	gt
 800c182:	1a9b      	subgt	r3, r3, r2
 800c184:	18ed      	addgt	r5, r5, r3
 800c186:	2600      	movs	r6, #0
 800c188:	341a      	adds	r4, #26
 800c18a:	42b5      	cmp	r5, r6
 800c18c:	d11a      	bne.n	800c1c4 <_printf_common+0xc8>
 800c18e:	2000      	movs	r0, #0
 800c190:	e008      	b.n	800c1a4 <_printf_common+0xa8>
 800c192:	2301      	movs	r3, #1
 800c194:	4652      	mov	r2, sl
 800c196:	4641      	mov	r1, r8
 800c198:	4638      	mov	r0, r7
 800c19a:	47c8      	blx	r9
 800c19c:	3001      	adds	r0, #1
 800c19e:	d103      	bne.n	800c1a8 <_printf_common+0xac>
 800c1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a8:	3501      	adds	r5, #1
 800c1aa:	e7c6      	b.n	800c13a <_printf_common+0x3e>
 800c1ac:	18e1      	adds	r1, r4, r3
 800c1ae:	1c5a      	adds	r2, r3, #1
 800c1b0:	2030      	movs	r0, #48	@ 0x30
 800c1b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c1b6:	4422      	add	r2, r4
 800c1b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c1bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c1c0:	3302      	adds	r3, #2
 800c1c2:	e7c7      	b.n	800c154 <_printf_common+0x58>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	4641      	mov	r1, r8
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	47c8      	blx	r9
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d0e6      	beq.n	800c1a0 <_printf_common+0xa4>
 800c1d2:	3601      	adds	r6, #1
 800c1d4:	e7d9      	b.n	800c18a <_printf_common+0x8e>
	...

0800c1d8 <_printf_i>:
 800c1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1dc:	7e0f      	ldrb	r7, [r1, #24]
 800c1de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1e0:	2f78      	cmp	r7, #120	@ 0x78
 800c1e2:	4691      	mov	r9, r2
 800c1e4:	4680      	mov	r8, r0
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	469a      	mov	sl, r3
 800c1ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c1ee:	d807      	bhi.n	800c200 <_printf_i+0x28>
 800c1f0:	2f62      	cmp	r7, #98	@ 0x62
 800c1f2:	d80a      	bhi.n	800c20a <_printf_i+0x32>
 800c1f4:	2f00      	cmp	r7, #0
 800c1f6:	f000 80d1 	beq.w	800c39c <_printf_i+0x1c4>
 800c1fa:	2f58      	cmp	r7, #88	@ 0x58
 800c1fc:	f000 80b8 	beq.w	800c370 <_printf_i+0x198>
 800c200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c208:	e03a      	b.n	800c280 <_printf_i+0xa8>
 800c20a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c20e:	2b15      	cmp	r3, #21
 800c210:	d8f6      	bhi.n	800c200 <_printf_i+0x28>
 800c212:	a101      	add	r1, pc, #4	@ (adr r1, 800c218 <_printf_i+0x40>)
 800c214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c218:	0800c271 	.word	0x0800c271
 800c21c:	0800c285 	.word	0x0800c285
 800c220:	0800c201 	.word	0x0800c201
 800c224:	0800c201 	.word	0x0800c201
 800c228:	0800c201 	.word	0x0800c201
 800c22c:	0800c201 	.word	0x0800c201
 800c230:	0800c285 	.word	0x0800c285
 800c234:	0800c201 	.word	0x0800c201
 800c238:	0800c201 	.word	0x0800c201
 800c23c:	0800c201 	.word	0x0800c201
 800c240:	0800c201 	.word	0x0800c201
 800c244:	0800c383 	.word	0x0800c383
 800c248:	0800c2af 	.word	0x0800c2af
 800c24c:	0800c33d 	.word	0x0800c33d
 800c250:	0800c201 	.word	0x0800c201
 800c254:	0800c201 	.word	0x0800c201
 800c258:	0800c3a5 	.word	0x0800c3a5
 800c25c:	0800c201 	.word	0x0800c201
 800c260:	0800c2af 	.word	0x0800c2af
 800c264:	0800c201 	.word	0x0800c201
 800c268:	0800c201 	.word	0x0800c201
 800c26c:	0800c345 	.word	0x0800c345
 800c270:	6833      	ldr	r3, [r6, #0]
 800c272:	1d1a      	adds	r2, r3, #4
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6032      	str	r2, [r6, #0]
 800c278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c27c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c280:	2301      	movs	r3, #1
 800c282:	e09c      	b.n	800c3be <_printf_i+0x1e6>
 800c284:	6833      	ldr	r3, [r6, #0]
 800c286:	6820      	ldr	r0, [r4, #0]
 800c288:	1d19      	adds	r1, r3, #4
 800c28a:	6031      	str	r1, [r6, #0]
 800c28c:	0606      	lsls	r6, r0, #24
 800c28e:	d501      	bpl.n	800c294 <_printf_i+0xbc>
 800c290:	681d      	ldr	r5, [r3, #0]
 800c292:	e003      	b.n	800c29c <_printf_i+0xc4>
 800c294:	0645      	lsls	r5, r0, #25
 800c296:	d5fb      	bpl.n	800c290 <_printf_i+0xb8>
 800c298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c29c:	2d00      	cmp	r5, #0
 800c29e:	da03      	bge.n	800c2a8 <_printf_i+0xd0>
 800c2a0:	232d      	movs	r3, #45	@ 0x2d
 800c2a2:	426d      	negs	r5, r5
 800c2a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2a8:	4858      	ldr	r0, [pc, #352]	@ (800c40c <_printf_i+0x234>)
 800c2aa:	230a      	movs	r3, #10
 800c2ac:	e011      	b.n	800c2d2 <_printf_i+0xfa>
 800c2ae:	6821      	ldr	r1, [r4, #0]
 800c2b0:	6833      	ldr	r3, [r6, #0]
 800c2b2:	0608      	lsls	r0, r1, #24
 800c2b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c2b8:	d402      	bmi.n	800c2c0 <_printf_i+0xe8>
 800c2ba:	0649      	lsls	r1, r1, #25
 800c2bc:	bf48      	it	mi
 800c2be:	b2ad      	uxthmi	r5, r5
 800c2c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c2c2:	4852      	ldr	r0, [pc, #328]	@ (800c40c <_printf_i+0x234>)
 800c2c4:	6033      	str	r3, [r6, #0]
 800c2c6:	bf14      	ite	ne
 800c2c8:	230a      	movne	r3, #10
 800c2ca:	2308      	moveq	r3, #8
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c2d2:	6866      	ldr	r6, [r4, #4]
 800c2d4:	60a6      	str	r6, [r4, #8]
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	db05      	blt.n	800c2e6 <_printf_i+0x10e>
 800c2da:	6821      	ldr	r1, [r4, #0]
 800c2dc:	432e      	orrs	r6, r5
 800c2de:	f021 0104 	bic.w	r1, r1, #4
 800c2e2:	6021      	str	r1, [r4, #0]
 800c2e4:	d04b      	beq.n	800c37e <_printf_i+0x1a6>
 800c2e6:	4616      	mov	r6, r2
 800c2e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2ec:	fb03 5711 	mls	r7, r3, r1, r5
 800c2f0:	5dc7      	ldrb	r7, [r0, r7]
 800c2f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2f6:	462f      	mov	r7, r5
 800c2f8:	42bb      	cmp	r3, r7
 800c2fa:	460d      	mov	r5, r1
 800c2fc:	d9f4      	bls.n	800c2e8 <_printf_i+0x110>
 800c2fe:	2b08      	cmp	r3, #8
 800c300:	d10b      	bne.n	800c31a <_printf_i+0x142>
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	07df      	lsls	r7, r3, #31
 800c306:	d508      	bpl.n	800c31a <_printf_i+0x142>
 800c308:	6923      	ldr	r3, [r4, #16]
 800c30a:	6861      	ldr	r1, [r4, #4]
 800c30c:	4299      	cmp	r1, r3
 800c30e:	bfde      	ittt	le
 800c310:	2330      	movle	r3, #48	@ 0x30
 800c312:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c316:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c31a:	1b92      	subs	r2, r2, r6
 800c31c:	6122      	str	r2, [r4, #16]
 800c31e:	f8cd a000 	str.w	sl, [sp]
 800c322:	464b      	mov	r3, r9
 800c324:	aa03      	add	r2, sp, #12
 800c326:	4621      	mov	r1, r4
 800c328:	4640      	mov	r0, r8
 800c32a:	f7ff fee7 	bl	800c0fc <_printf_common>
 800c32e:	3001      	adds	r0, #1
 800c330:	d14a      	bne.n	800c3c8 <_printf_i+0x1f0>
 800c332:	f04f 30ff 	mov.w	r0, #4294967295
 800c336:	b004      	add	sp, #16
 800c338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33c:	6823      	ldr	r3, [r4, #0]
 800c33e:	f043 0320 	orr.w	r3, r3, #32
 800c342:	6023      	str	r3, [r4, #0]
 800c344:	4832      	ldr	r0, [pc, #200]	@ (800c410 <_printf_i+0x238>)
 800c346:	2778      	movs	r7, #120	@ 0x78
 800c348:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c34c:	6823      	ldr	r3, [r4, #0]
 800c34e:	6831      	ldr	r1, [r6, #0]
 800c350:	061f      	lsls	r7, r3, #24
 800c352:	f851 5b04 	ldr.w	r5, [r1], #4
 800c356:	d402      	bmi.n	800c35e <_printf_i+0x186>
 800c358:	065f      	lsls	r7, r3, #25
 800c35a:	bf48      	it	mi
 800c35c:	b2ad      	uxthmi	r5, r5
 800c35e:	6031      	str	r1, [r6, #0]
 800c360:	07d9      	lsls	r1, r3, #31
 800c362:	bf44      	itt	mi
 800c364:	f043 0320 	orrmi.w	r3, r3, #32
 800c368:	6023      	strmi	r3, [r4, #0]
 800c36a:	b11d      	cbz	r5, 800c374 <_printf_i+0x19c>
 800c36c:	2310      	movs	r3, #16
 800c36e:	e7ad      	b.n	800c2cc <_printf_i+0xf4>
 800c370:	4826      	ldr	r0, [pc, #152]	@ (800c40c <_printf_i+0x234>)
 800c372:	e7e9      	b.n	800c348 <_printf_i+0x170>
 800c374:	6823      	ldr	r3, [r4, #0]
 800c376:	f023 0320 	bic.w	r3, r3, #32
 800c37a:	6023      	str	r3, [r4, #0]
 800c37c:	e7f6      	b.n	800c36c <_printf_i+0x194>
 800c37e:	4616      	mov	r6, r2
 800c380:	e7bd      	b.n	800c2fe <_printf_i+0x126>
 800c382:	6833      	ldr	r3, [r6, #0]
 800c384:	6825      	ldr	r5, [r4, #0]
 800c386:	6961      	ldr	r1, [r4, #20]
 800c388:	1d18      	adds	r0, r3, #4
 800c38a:	6030      	str	r0, [r6, #0]
 800c38c:	062e      	lsls	r6, r5, #24
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	d501      	bpl.n	800c396 <_printf_i+0x1be>
 800c392:	6019      	str	r1, [r3, #0]
 800c394:	e002      	b.n	800c39c <_printf_i+0x1c4>
 800c396:	0668      	lsls	r0, r5, #25
 800c398:	d5fb      	bpl.n	800c392 <_printf_i+0x1ba>
 800c39a:	8019      	strh	r1, [r3, #0]
 800c39c:	2300      	movs	r3, #0
 800c39e:	6123      	str	r3, [r4, #16]
 800c3a0:	4616      	mov	r6, r2
 800c3a2:	e7bc      	b.n	800c31e <_printf_i+0x146>
 800c3a4:	6833      	ldr	r3, [r6, #0]
 800c3a6:	1d1a      	adds	r2, r3, #4
 800c3a8:	6032      	str	r2, [r6, #0]
 800c3aa:	681e      	ldr	r6, [r3, #0]
 800c3ac:	6862      	ldr	r2, [r4, #4]
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	f7f3 ff3d 	bl	8000230 <memchr>
 800c3b6:	b108      	cbz	r0, 800c3bc <_printf_i+0x1e4>
 800c3b8:	1b80      	subs	r0, r0, r6
 800c3ba:	6060      	str	r0, [r4, #4]
 800c3bc:	6863      	ldr	r3, [r4, #4]
 800c3be:	6123      	str	r3, [r4, #16]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3c6:	e7aa      	b.n	800c31e <_printf_i+0x146>
 800c3c8:	6923      	ldr	r3, [r4, #16]
 800c3ca:	4632      	mov	r2, r6
 800c3cc:	4649      	mov	r1, r9
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	47d0      	blx	sl
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	d0ad      	beq.n	800c332 <_printf_i+0x15a>
 800c3d6:	6823      	ldr	r3, [r4, #0]
 800c3d8:	079b      	lsls	r3, r3, #30
 800c3da:	d413      	bmi.n	800c404 <_printf_i+0x22c>
 800c3dc:	68e0      	ldr	r0, [r4, #12]
 800c3de:	9b03      	ldr	r3, [sp, #12]
 800c3e0:	4298      	cmp	r0, r3
 800c3e2:	bfb8      	it	lt
 800c3e4:	4618      	movlt	r0, r3
 800c3e6:	e7a6      	b.n	800c336 <_printf_i+0x15e>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	4632      	mov	r2, r6
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	4640      	mov	r0, r8
 800c3f0:	47d0      	blx	sl
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	d09d      	beq.n	800c332 <_printf_i+0x15a>
 800c3f6:	3501      	adds	r5, #1
 800c3f8:	68e3      	ldr	r3, [r4, #12]
 800c3fa:	9903      	ldr	r1, [sp, #12]
 800c3fc:	1a5b      	subs	r3, r3, r1
 800c3fe:	42ab      	cmp	r3, r5
 800c400:	dcf2      	bgt.n	800c3e8 <_printf_i+0x210>
 800c402:	e7eb      	b.n	800c3dc <_printf_i+0x204>
 800c404:	2500      	movs	r5, #0
 800c406:	f104 0619 	add.w	r6, r4, #25
 800c40a:	e7f5      	b.n	800c3f8 <_printf_i+0x220>
 800c40c:	08012297 	.word	0x08012297
 800c410:	080122a8 	.word	0x080122a8

0800c414 <_scanf_float>:
 800c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c418:	b087      	sub	sp, #28
 800c41a:	4691      	mov	r9, r2
 800c41c:	9303      	str	r3, [sp, #12]
 800c41e:	688b      	ldr	r3, [r1, #8]
 800c420:	1e5a      	subs	r2, r3, #1
 800c422:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c426:	bf81      	itttt	hi
 800c428:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c42c:	eb03 0b05 	addhi.w	fp, r3, r5
 800c430:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c434:	608b      	strhi	r3, [r1, #8]
 800c436:	680b      	ldr	r3, [r1, #0]
 800c438:	460a      	mov	r2, r1
 800c43a:	f04f 0500 	mov.w	r5, #0
 800c43e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c442:	f842 3b1c 	str.w	r3, [r2], #28
 800c446:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c44a:	4680      	mov	r8, r0
 800c44c:	460c      	mov	r4, r1
 800c44e:	bf98      	it	ls
 800c450:	f04f 0b00 	movls.w	fp, #0
 800c454:	9201      	str	r2, [sp, #4]
 800c456:	4616      	mov	r6, r2
 800c458:	46aa      	mov	sl, r5
 800c45a:	462f      	mov	r7, r5
 800c45c:	9502      	str	r5, [sp, #8]
 800c45e:	68a2      	ldr	r2, [r4, #8]
 800c460:	b15a      	cbz	r2, 800c47a <_scanf_float+0x66>
 800c462:	f8d9 3000 	ldr.w	r3, [r9]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2b4e      	cmp	r3, #78	@ 0x4e
 800c46a:	d863      	bhi.n	800c534 <_scanf_float+0x120>
 800c46c:	2b40      	cmp	r3, #64	@ 0x40
 800c46e:	d83b      	bhi.n	800c4e8 <_scanf_float+0xd4>
 800c470:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c474:	b2c8      	uxtb	r0, r1
 800c476:	280e      	cmp	r0, #14
 800c478:	d939      	bls.n	800c4ee <_scanf_float+0xda>
 800c47a:	b11f      	cbz	r7, 800c484 <_scanf_float+0x70>
 800c47c:	6823      	ldr	r3, [r4, #0]
 800c47e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c482:	6023      	str	r3, [r4, #0]
 800c484:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c488:	f1ba 0f01 	cmp.w	sl, #1
 800c48c:	f200 8114 	bhi.w	800c6b8 <_scanf_float+0x2a4>
 800c490:	9b01      	ldr	r3, [sp, #4]
 800c492:	429e      	cmp	r6, r3
 800c494:	f200 8105 	bhi.w	800c6a2 <_scanf_float+0x28e>
 800c498:	2001      	movs	r0, #1
 800c49a:	b007      	add	sp, #28
 800c49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c4a4:	2a0d      	cmp	r2, #13
 800c4a6:	d8e8      	bhi.n	800c47a <_scanf_float+0x66>
 800c4a8:	a101      	add	r1, pc, #4	@ (adr r1, 800c4b0 <_scanf_float+0x9c>)
 800c4aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c4ae:	bf00      	nop
 800c4b0:	0800c5f9 	.word	0x0800c5f9
 800c4b4:	0800c47b 	.word	0x0800c47b
 800c4b8:	0800c47b 	.word	0x0800c47b
 800c4bc:	0800c47b 	.word	0x0800c47b
 800c4c0:	0800c655 	.word	0x0800c655
 800c4c4:	0800c62f 	.word	0x0800c62f
 800c4c8:	0800c47b 	.word	0x0800c47b
 800c4cc:	0800c47b 	.word	0x0800c47b
 800c4d0:	0800c607 	.word	0x0800c607
 800c4d4:	0800c47b 	.word	0x0800c47b
 800c4d8:	0800c47b 	.word	0x0800c47b
 800c4dc:	0800c47b 	.word	0x0800c47b
 800c4e0:	0800c47b 	.word	0x0800c47b
 800c4e4:	0800c5c3 	.word	0x0800c5c3
 800c4e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c4ec:	e7da      	b.n	800c4a4 <_scanf_float+0x90>
 800c4ee:	290e      	cmp	r1, #14
 800c4f0:	d8c3      	bhi.n	800c47a <_scanf_float+0x66>
 800c4f2:	a001      	add	r0, pc, #4	@ (adr r0, 800c4f8 <_scanf_float+0xe4>)
 800c4f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c4f8:	0800c5b3 	.word	0x0800c5b3
 800c4fc:	0800c47b 	.word	0x0800c47b
 800c500:	0800c5b3 	.word	0x0800c5b3
 800c504:	0800c643 	.word	0x0800c643
 800c508:	0800c47b 	.word	0x0800c47b
 800c50c:	0800c555 	.word	0x0800c555
 800c510:	0800c599 	.word	0x0800c599
 800c514:	0800c599 	.word	0x0800c599
 800c518:	0800c599 	.word	0x0800c599
 800c51c:	0800c599 	.word	0x0800c599
 800c520:	0800c599 	.word	0x0800c599
 800c524:	0800c599 	.word	0x0800c599
 800c528:	0800c599 	.word	0x0800c599
 800c52c:	0800c599 	.word	0x0800c599
 800c530:	0800c599 	.word	0x0800c599
 800c534:	2b6e      	cmp	r3, #110	@ 0x6e
 800c536:	d809      	bhi.n	800c54c <_scanf_float+0x138>
 800c538:	2b60      	cmp	r3, #96	@ 0x60
 800c53a:	d8b1      	bhi.n	800c4a0 <_scanf_float+0x8c>
 800c53c:	2b54      	cmp	r3, #84	@ 0x54
 800c53e:	d07b      	beq.n	800c638 <_scanf_float+0x224>
 800c540:	2b59      	cmp	r3, #89	@ 0x59
 800c542:	d19a      	bne.n	800c47a <_scanf_float+0x66>
 800c544:	2d07      	cmp	r5, #7
 800c546:	d198      	bne.n	800c47a <_scanf_float+0x66>
 800c548:	2508      	movs	r5, #8
 800c54a:	e02f      	b.n	800c5ac <_scanf_float+0x198>
 800c54c:	2b74      	cmp	r3, #116	@ 0x74
 800c54e:	d073      	beq.n	800c638 <_scanf_float+0x224>
 800c550:	2b79      	cmp	r3, #121	@ 0x79
 800c552:	e7f6      	b.n	800c542 <_scanf_float+0x12e>
 800c554:	6821      	ldr	r1, [r4, #0]
 800c556:	05c8      	lsls	r0, r1, #23
 800c558:	d51e      	bpl.n	800c598 <_scanf_float+0x184>
 800c55a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c55e:	6021      	str	r1, [r4, #0]
 800c560:	3701      	adds	r7, #1
 800c562:	f1bb 0f00 	cmp.w	fp, #0
 800c566:	d003      	beq.n	800c570 <_scanf_float+0x15c>
 800c568:	3201      	adds	r2, #1
 800c56a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c56e:	60a2      	str	r2, [r4, #8]
 800c570:	68a3      	ldr	r3, [r4, #8]
 800c572:	3b01      	subs	r3, #1
 800c574:	60a3      	str	r3, [r4, #8]
 800c576:	6923      	ldr	r3, [r4, #16]
 800c578:	3301      	adds	r3, #1
 800c57a:	6123      	str	r3, [r4, #16]
 800c57c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c580:	3b01      	subs	r3, #1
 800c582:	2b00      	cmp	r3, #0
 800c584:	f8c9 3004 	str.w	r3, [r9, #4]
 800c588:	f340 8082 	ble.w	800c690 <_scanf_float+0x27c>
 800c58c:	f8d9 3000 	ldr.w	r3, [r9]
 800c590:	3301      	adds	r3, #1
 800c592:	f8c9 3000 	str.w	r3, [r9]
 800c596:	e762      	b.n	800c45e <_scanf_float+0x4a>
 800c598:	eb1a 0105 	adds.w	r1, sl, r5
 800c59c:	f47f af6d 	bne.w	800c47a <_scanf_float+0x66>
 800c5a0:	6822      	ldr	r2, [r4, #0]
 800c5a2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c5a6:	6022      	str	r2, [r4, #0]
 800c5a8:	460d      	mov	r5, r1
 800c5aa:	468a      	mov	sl, r1
 800c5ac:	f806 3b01 	strb.w	r3, [r6], #1
 800c5b0:	e7de      	b.n	800c570 <_scanf_float+0x15c>
 800c5b2:	6822      	ldr	r2, [r4, #0]
 800c5b4:	0610      	lsls	r0, r2, #24
 800c5b6:	f57f af60 	bpl.w	800c47a <_scanf_float+0x66>
 800c5ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c5be:	6022      	str	r2, [r4, #0]
 800c5c0:	e7f4      	b.n	800c5ac <_scanf_float+0x198>
 800c5c2:	f1ba 0f00 	cmp.w	sl, #0
 800c5c6:	d10c      	bne.n	800c5e2 <_scanf_float+0x1ce>
 800c5c8:	b977      	cbnz	r7, 800c5e8 <_scanf_float+0x1d4>
 800c5ca:	6822      	ldr	r2, [r4, #0]
 800c5cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c5d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c5d4:	d108      	bne.n	800c5e8 <_scanf_float+0x1d4>
 800c5d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c5da:	6022      	str	r2, [r4, #0]
 800c5dc:	f04f 0a01 	mov.w	sl, #1
 800c5e0:	e7e4      	b.n	800c5ac <_scanf_float+0x198>
 800c5e2:	f1ba 0f02 	cmp.w	sl, #2
 800c5e6:	d050      	beq.n	800c68a <_scanf_float+0x276>
 800c5e8:	2d01      	cmp	r5, #1
 800c5ea:	d002      	beq.n	800c5f2 <_scanf_float+0x1de>
 800c5ec:	2d04      	cmp	r5, #4
 800c5ee:	f47f af44 	bne.w	800c47a <_scanf_float+0x66>
 800c5f2:	3501      	adds	r5, #1
 800c5f4:	b2ed      	uxtb	r5, r5
 800c5f6:	e7d9      	b.n	800c5ac <_scanf_float+0x198>
 800c5f8:	f1ba 0f01 	cmp.w	sl, #1
 800c5fc:	f47f af3d 	bne.w	800c47a <_scanf_float+0x66>
 800c600:	f04f 0a02 	mov.w	sl, #2
 800c604:	e7d2      	b.n	800c5ac <_scanf_float+0x198>
 800c606:	b975      	cbnz	r5, 800c626 <_scanf_float+0x212>
 800c608:	2f00      	cmp	r7, #0
 800c60a:	f47f af37 	bne.w	800c47c <_scanf_float+0x68>
 800c60e:	6822      	ldr	r2, [r4, #0]
 800c610:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c614:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c618:	f040 8103 	bne.w	800c822 <_scanf_float+0x40e>
 800c61c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c620:	6022      	str	r2, [r4, #0]
 800c622:	2501      	movs	r5, #1
 800c624:	e7c2      	b.n	800c5ac <_scanf_float+0x198>
 800c626:	2d03      	cmp	r5, #3
 800c628:	d0e3      	beq.n	800c5f2 <_scanf_float+0x1de>
 800c62a:	2d05      	cmp	r5, #5
 800c62c:	e7df      	b.n	800c5ee <_scanf_float+0x1da>
 800c62e:	2d02      	cmp	r5, #2
 800c630:	f47f af23 	bne.w	800c47a <_scanf_float+0x66>
 800c634:	2503      	movs	r5, #3
 800c636:	e7b9      	b.n	800c5ac <_scanf_float+0x198>
 800c638:	2d06      	cmp	r5, #6
 800c63a:	f47f af1e 	bne.w	800c47a <_scanf_float+0x66>
 800c63e:	2507      	movs	r5, #7
 800c640:	e7b4      	b.n	800c5ac <_scanf_float+0x198>
 800c642:	6822      	ldr	r2, [r4, #0]
 800c644:	0591      	lsls	r1, r2, #22
 800c646:	f57f af18 	bpl.w	800c47a <_scanf_float+0x66>
 800c64a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c64e:	6022      	str	r2, [r4, #0]
 800c650:	9702      	str	r7, [sp, #8]
 800c652:	e7ab      	b.n	800c5ac <_scanf_float+0x198>
 800c654:	6822      	ldr	r2, [r4, #0]
 800c656:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c65a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c65e:	d005      	beq.n	800c66c <_scanf_float+0x258>
 800c660:	0550      	lsls	r0, r2, #21
 800c662:	f57f af0a 	bpl.w	800c47a <_scanf_float+0x66>
 800c666:	2f00      	cmp	r7, #0
 800c668:	f000 80db 	beq.w	800c822 <_scanf_float+0x40e>
 800c66c:	0591      	lsls	r1, r2, #22
 800c66e:	bf58      	it	pl
 800c670:	9902      	ldrpl	r1, [sp, #8]
 800c672:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c676:	bf58      	it	pl
 800c678:	1a79      	subpl	r1, r7, r1
 800c67a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c67e:	bf58      	it	pl
 800c680:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c684:	6022      	str	r2, [r4, #0]
 800c686:	2700      	movs	r7, #0
 800c688:	e790      	b.n	800c5ac <_scanf_float+0x198>
 800c68a:	f04f 0a03 	mov.w	sl, #3
 800c68e:	e78d      	b.n	800c5ac <_scanf_float+0x198>
 800c690:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c694:	4649      	mov	r1, r9
 800c696:	4640      	mov	r0, r8
 800c698:	4798      	blx	r3
 800c69a:	2800      	cmp	r0, #0
 800c69c:	f43f aedf 	beq.w	800c45e <_scanf_float+0x4a>
 800c6a0:	e6eb      	b.n	800c47a <_scanf_float+0x66>
 800c6a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6aa:	464a      	mov	r2, r9
 800c6ac:	4640      	mov	r0, r8
 800c6ae:	4798      	blx	r3
 800c6b0:	6923      	ldr	r3, [r4, #16]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	6123      	str	r3, [r4, #16]
 800c6b6:	e6eb      	b.n	800c490 <_scanf_float+0x7c>
 800c6b8:	1e6b      	subs	r3, r5, #1
 800c6ba:	2b06      	cmp	r3, #6
 800c6bc:	d824      	bhi.n	800c708 <_scanf_float+0x2f4>
 800c6be:	2d02      	cmp	r5, #2
 800c6c0:	d836      	bhi.n	800c730 <_scanf_float+0x31c>
 800c6c2:	9b01      	ldr	r3, [sp, #4]
 800c6c4:	429e      	cmp	r6, r3
 800c6c6:	f67f aee7 	bls.w	800c498 <_scanf_float+0x84>
 800c6ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6d2:	464a      	mov	r2, r9
 800c6d4:	4640      	mov	r0, r8
 800c6d6:	4798      	blx	r3
 800c6d8:	6923      	ldr	r3, [r4, #16]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	6123      	str	r3, [r4, #16]
 800c6de:	e7f0      	b.n	800c6c2 <_scanf_float+0x2ae>
 800c6e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c6e8:	464a      	mov	r2, r9
 800c6ea:	4640      	mov	r0, r8
 800c6ec:	4798      	blx	r3
 800c6ee:	6923      	ldr	r3, [r4, #16]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	6123      	str	r3, [r4, #16]
 800c6f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6f8:	fa5f fa8a 	uxtb.w	sl, sl
 800c6fc:	f1ba 0f02 	cmp.w	sl, #2
 800c700:	d1ee      	bne.n	800c6e0 <_scanf_float+0x2cc>
 800c702:	3d03      	subs	r5, #3
 800c704:	b2ed      	uxtb	r5, r5
 800c706:	1b76      	subs	r6, r6, r5
 800c708:	6823      	ldr	r3, [r4, #0]
 800c70a:	05da      	lsls	r2, r3, #23
 800c70c:	d530      	bpl.n	800c770 <_scanf_float+0x35c>
 800c70e:	055b      	lsls	r3, r3, #21
 800c710:	d511      	bpl.n	800c736 <_scanf_float+0x322>
 800c712:	9b01      	ldr	r3, [sp, #4]
 800c714:	429e      	cmp	r6, r3
 800c716:	f67f aebf 	bls.w	800c498 <_scanf_float+0x84>
 800c71a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c71e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c722:	464a      	mov	r2, r9
 800c724:	4640      	mov	r0, r8
 800c726:	4798      	blx	r3
 800c728:	6923      	ldr	r3, [r4, #16]
 800c72a:	3b01      	subs	r3, #1
 800c72c:	6123      	str	r3, [r4, #16]
 800c72e:	e7f0      	b.n	800c712 <_scanf_float+0x2fe>
 800c730:	46aa      	mov	sl, r5
 800c732:	46b3      	mov	fp, r6
 800c734:	e7de      	b.n	800c6f4 <_scanf_float+0x2e0>
 800c736:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c73a:	6923      	ldr	r3, [r4, #16]
 800c73c:	2965      	cmp	r1, #101	@ 0x65
 800c73e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c742:	f106 35ff 	add.w	r5, r6, #4294967295
 800c746:	6123      	str	r3, [r4, #16]
 800c748:	d00c      	beq.n	800c764 <_scanf_float+0x350>
 800c74a:	2945      	cmp	r1, #69	@ 0x45
 800c74c:	d00a      	beq.n	800c764 <_scanf_float+0x350>
 800c74e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c752:	464a      	mov	r2, r9
 800c754:	4640      	mov	r0, r8
 800c756:	4798      	blx	r3
 800c758:	6923      	ldr	r3, [r4, #16]
 800c75a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c75e:	3b01      	subs	r3, #1
 800c760:	1eb5      	subs	r5, r6, #2
 800c762:	6123      	str	r3, [r4, #16]
 800c764:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c768:	464a      	mov	r2, r9
 800c76a:	4640      	mov	r0, r8
 800c76c:	4798      	blx	r3
 800c76e:	462e      	mov	r6, r5
 800c770:	6822      	ldr	r2, [r4, #0]
 800c772:	f012 0210 	ands.w	r2, r2, #16
 800c776:	d001      	beq.n	800c77c <_scanf_float+0x368>
 800c778:	2000      	movs	r0, #0
 800c77a:	e68e      	b.n	800c49a <_scanf_float+0x86>
 800c77c:	7032      	strb	r2, [r6, #0]
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c788:	d125      	bne.n	800c7d6 <_scanf_float+0x3c2>
 800c78a:	9b02      	ldr	r3, [sp, #8]
 800c78c:	429f      	cmp	r7, r3
 800c78e:	d00a      	beq.n	800c7a6 <_scanf_float+0x392>
 800c790:	1bda      	subs	r2, r3, r7
 800c792:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c796:	429e      	cmp	r6, r3
 800c798:	bf28      	it	cs
 800c79a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c79e:	4922      	ldr	r1, [pc, #136]	@ (800c828 <_scanf_float+0x414>)
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	f000 fa03 	bl	800cbac <siprintf>
 800c7a6:	9901      	ldr	r1, [sp, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	4640      	mov	r0, r8
 800c7ac:	f002 fd68 	bl	800f280 <_strtod_r>
 800c7b0:	9b03      	ldr	r3, [sp, #12]
 800c7b2:	6821      	ldr	r1, [r4, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f011 0f02 	tst.w	r1, #2
 800c7ba:	ec57 6b10 	vmov	r6, r7, d0
 800c7be:	f103 0204 	add.w	r2, r3, #4
 800c7c2:	d015      	beq.n	800c7f0 <_scanf_float+0x3dc>
 800c7c4:	9903      	ldr	r1, [sp, #12]
 800c7c6:	600a      	str	r2, [r1, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	e9c3 6700 	strd	r6, r7, [r3]
 800c7ce:	68e3      	ldr	r3, [r4, #12]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	60e3      	str	r3, [r4, #12]
 800c7d4:	e7d0      	b.n	800c778 <_scanf_float+0x364>
 800c7d6:	9b04      	ldr	r3, [sp, #16]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d0e4      	beq.n	800c7a6 <_scanf_float+0x392>
 800c7dc:	9905      	ldr	r1, [sp, #20]
 800c7de:	230a      	movs	r3, #10
 800c7e0:	3101      	adds	r1, #1
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	f7ff f9b4 	bl	800bb50 <_strtol_r>
 800c7e8:	9b04      	ldr	r3, [sp, #16]
 800c7ea:	9e05      	ldr	r6, [sp, #20]
 800c7ec:	1ac2      	subs	r2, r0, r3
 800c7ee:	e7d0      	b.n	800c792 <_scanf_float+0x37e>
 800c7f0:	f011 0f04 	tst.w	r1, #4
 800c7f4:	9903      	ldr	r1, [sp, #12]
 800c7f6:	600a      	str	r2, [r1, #0]
 800c7f8:	d1e6      	bne.n	800c7c8 <_scanf_float+0x3b4>
 800c7fa:	681d      	ldr	r5, [r3, #0]
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	463b      	mov	r3, r7
 800c800:	4630      	mov	r0, r6
 800c802:	4639      	mov	r1, r7
 800c804:	f7f4 f9c2 	bl	8000b8c <__aeabi_dcmpun>
 800c808:	b128      	cbz	r0, 800c816 <_scanf_float+0x402>
 800c80a:	4808      	ldr	r0, [pc, #32]	@ (800c82c <_scanf_float+0x418>)
 800c80c:	f000 fb10 	bl	800ce30 <nanf>
 800c810:	ed85 0a00 	vstr	s0, [r5]
 800c814:	e7db      	b.n	800c7ce <_scanf_float+0x3ba>
 800c816:	4630      	mov	r0, r6
 800c818:	4639      	mov	r1, r7
 800c81a:	f7f4 fa15 	bl	8000c48 <__aeabi_d2f>
 800c81e:	6028      	str	r0, [r5, #0]
 800c820:	e7d5      	b.n	800c7ce <_scanf_float+0x3ba>
 800c822:	2700      	movs	r7, #0
 800c824:	e62e      	b.n	800c484 <_scanf_float+0x70>
 800c826:	bf00      	nop
 800c828:	080122b9 	.word	0x080122b9
 800c82c:	0801236a 	.word	0x0801236a

0800c830 <std>:
 800c830:	2300      	movs	r3, #0
 800c832:	b510      	push	{r4, lr}
 800c834:	4604      	mov	r4, r0
 800c836:	e9c0 3300 	strd	r3, r3, [r0]
 800c83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c83e:	6083      	str	r3, [r0, #8]
 800c840:	8181      	strh	r1, [r0, #12]
 800c842:	6643      	str	r3, [r0, #100]	@ 0x64
 800c844:	81c2      	strh	r2, [r0, #14]
 800c846:	6183      	str	r3, [r0, #24]
 800c848:	4619      	mov	r1, r3
 800c84a:	2208      	movs	r2, #8
 800c84c:	305c      	adds	r0, #92	@ 0x5c
 800c84e:	f000 fa12 	bl	800cc76 <memset>
 800c852:	4b0d      	ldr	r3, [pc, #52]	@ (800c888 <std+0x58>)
 800c854:	6263      	str	r3, [r4, #36]	@ 0x24
 800c856:	4b0d      	ldr	r3, [pc, #52]	@ (800c88c <std+0x5c>)
 800c858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c85a:	4b0d      	ldr	r3, [pc, #52]	@ (800c890 <std+0x60>)
 800c85c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c85e:	4b0d      	ldr	r3, [pc, #52]	@ (800c894 <std+0x64>)
 800c860:	6323      	str	r3, [r4, #48]	@ 0x30
 800c862:	4b0d      	ldr	r3, [pc, #52]	@ (800c898 <std+0x68>)
 800c864:	6224      	str	r4, [r4, #32]
 800c866:	429c      	cmp	r4, r3
 800c868:	d006      	beq.n	800c878 <std+0x48>
 800c86a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c86e:	4294      	cmp	r4, r2
 800c870:	d002      	beq.n	800c878 <std+0x48>
 800c872:	33d0      	adds	r3, #208	@ 0xd0
 800c874:	429c      	cmp	r4, r3
 800c876:	d105      	bne.n	800c884 <std+0x54>
 800c878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c880:	f000 bad2 	b.w	800ce28 <__retarget_lock_init_recursive>
 800c884:	bd10      	pop	{r4, pc}
 800c886:	bf00      	nop
 800c888:	0800cbf1 	.word	0x0800cbf1
 800c88c:	0800cc13 	.word	0x0800cc13
 800c890:	0800cc4b 	.word	0x0800cc4b
 800c894:	0800cc6f 	.word	0x0800cc6f
 800c898:	20001098 	.word	0x20001098

0800c89c <stdio_exit_handler>:
 800c89c:	4a02      	ldr	r2, [pc, #8]	@ (800c8a8 <stdio_exit_handler+0xc>)
 800c89e:	4903      	ldr	r1, [pc, #12]	@ (800c8ac <stdio_exit_handler+0x10>)
 800c8a0:	4803      	ldr	r0, [pc, #12]	@ (800c8b0 <stdio_exit_handler+0x14>)
 800c8a2:	f000 b869 	b.w	800c978 <_fwalk_sglue>
 800c8a6:	bf00      	nop
 800c8a8:	20000038 	.word	0x20000038
 800c8ac:	0800f8c9 	.word	0x0800f8c9
 800c8b0:	20000048 	.word	0x20000048

0800c8b4 <cleanup_stdio>:
 800c8b4:	6841      	ldr	r1, [r0, #4]
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c8e8 <cleanup_stdio+0x34>)
 800c8b8:	4299      	cmp	r1, r3
 800c8ba:	b510      	push	{r4, lr}
 800c8bc:	4604      	mov	r4, r0
 800c8be:	d001      	beq.n	800c8c4 <cleanup_stdio+0x10>
 800c8c0:	f003 f802 	bl	800f8c8 <_fflush_r>
 800c8c4:	68a1      	ldr	r1, [r4, #8]
 800c8c6:	4b09      	ldr	r3, [pc, #36]	@ (800c8ec <cleanup_stdio+0x38>)
 800c8c8:	4299      	cmp	r1, r3
 800c8ca:	d002      	beq.n	800c8d2 <cleanup_stdio+0x1e>
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f002 fffb 	bl	800f8c8 <_fflush_r>
 800c8d2:	68e1      	ldr	r1, [r4, #12]
 800c8d4:	4b06      	ldr	r3, [pc, #24]	@ (800c8f0 <cleanup_stdio+0x3c>)
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	d004      	beq.n	800c8e4 <cleanup_stdio+0x30>
 800c8da:	4620      	mov	r0, r4
 800c8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8e0:	f002 bff2 	b.w	800f8c8 <_fflush_r>
 800c8e4:	bd10      	pop	{r4, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20001098 	.word	0x20001098
 800c8ec:	20001100 	.word	0x20001100
 800c8f0:	20001168 	.word	0x20001168

0800c8f4 <global_stdio_init.part.0>:
 800c8f4:	b510      	push	{r4, lr}
 800c8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c924 <global_stdio_init.part.0+0x30>)
 800c8f8:	4c0b      	ldr	r4, [pc, #44]	@ (800c928 <global_stdio_init.part.0+0x34>)
 800c8fa:	4a0c      	ldr	r2, [pc, #48]	@ (800c92c <global_stdio_init.part.0+0x38>)
 800c8fc:	601a      	str	r2, [r3, #0]
 800c8fe:	4620      	mov	r0, r4
 800c900:	2200      	movs	r2, #0
 800c902:	2104      	movs	r1, #4
 800c904:	f7ff ff94 	bl	800c830 <std>
 800c908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c90c:	2201      	movs	r2, #1
 800c90e:	2109      	movs	r1, #9
 800c910:	f7ff ff8e 	bl	800c830 <std>
 800c914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c918:	2202      	movs	r2, #2
 800c91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c91e:	2112      	movs	r1, #18
 800c920:	f7ff bf86 	b.w	800c830 <std>
 800c924:	200011d0 	.word	0x200011d0
 800c928:	20001098 	.word	0x20001098
 800c92c:	0800c89d 	.word	0x0800c89d

0800c930 <__sfp_lock_acquire>:
 800c930:	4801      	ldr	r0, [pc, #4]	@ (800c938 <__sfp_lock_acquire+0x8>)
 800c932:	f000 ba7a 	b.w	800ce2a <__retarget_lock_acquire_recursive>
 800c936:	bf00      	nop
 800c938:	200011d9 	.word	0x200011d9

0800c93c <__sfp_lock_release>:
 800c93c:	4801      	ldr	r0, [pc, #4]	@ (800c944 <__sfp_lock_release+0x8>)
 800c93e:	f000 ba75 	b.w	800ce2c <__retarget_lock_release_recursive>
 800c942:	bf00      	nop
 800c944:	200011d9 	.word	0x200011d9

0800c948 <__sinit>:
 800c948:	b510      	push	{r4, lr}
 800c94a:	4604      	mov	r4, r0
 800c94c:	f7ff fff0 	bl	800c930 <__sfp_lock_acquire>
 800c950:	6a23      	ldr	r3, [r4, #32]
 800c952:	b11b      	cbz	r3, 800c95c <__sinit+0x14>
 800c954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c958:	f7ff bff0 	b.w	800c93c <__sfp_lock_release>
 800c95c:	4b04      	ldr	r3, [pc, #16]	@ (800c970 <__sinit+0x28>)
 800c95e:	6223      	str	r3, [r4, #32]
 800c960:	4b04      	ldr	r3, [pc, #16]	@ (800c974 <__sinit+0x2c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1f5      	bne.n	800c954 <__sinit+0xc>
 800c968:	f7ff ffc4 	bl	800c8f4 <global_stdio_init.part.0>
 800c96c:	e7f2      	b.n	800c954 <__sinit+0xc>
 800c96e:	bf00      	nop
 800c970:	0800c8b5 	.word	0x0800c8b5
 800c974:	200011d0 	.word	0x200011d0

0800c978 <_fwalk_sglue>:
 800c978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c97c:	4607      	mov	r7, r0
 800c97e:	4688      	mov	r8, r1
 800c980:	4614      	mov	r4, r2
 800c982:	2600      	movs	r6, #0
 800c984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c988:	f1b9 0901 	subs.w	r9, r9, #1
 800c98c:	d505      	bpl.n	800c99a <_fwalk_sglue+0x22>
 800c98e:	6824      	ldr	r4, [r4, #0]
 800c990:	2c00      	cmp	r4, #0
 800c992:	d1f7      	bne.n	800c984 <_fwalk_sglue+0xc>
 800c994:	4630      	mov	r0, r6
 800c996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c99a:	89ab      	ldrh	r3, [r5, #12]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d907      	bls.n	800c9b0 <_fwalk_sglue+0x38>
 800c9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	d003      	beq.n	800c9b0 <_fwalk_sglue+0x38>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	47c0      	blx	r8
 800c9ae:	4306      	orrs	r6, r0
 800c9b0:	3568      	adds	r5, #104	@ 0x68
 800c9b2:	e7e9      	b.n	800c988 <_fwalk_sglue+0x10>

0800c9b4 <iprintf>:
 800c9b4:	b40f      	push	{r0, r1, r2, r3}
 800c9b6:	b507      	push	{r0, r1, r2, lr}
 800c9b8:	4906      	ldr	r1, [pc, #24]	@ (800c9d4 <iprintf+0x20>)
 800c9ba:	ab04      	add	r3, sp, #16
 800c9bc:	6808      	ldr	r0, [r1, #0]
 800c9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c2:	6881      	ldr	r1, [r0, #8]
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	f002 fde3 	bl	800f590 <_vfiprintf_r>
 800c9ca:	b003      	add	sp, #12
 800c9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9d0:	b004      	add	sp, #16
 800c9d2:	4770      	bx	lr
 800c9d4:	20000044 	.word	0x20000044

0800c9d8 <setvbuf>:
 800c9d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9dc:	461d      	mov	r5, r3
 800c9de:	4b57      	ldr	r3, [pc, #348]	@ (800cb3c <setvbuf+0x164>)
 800c9e0:	681f      	ldr	r7, [r3, #0]
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	460e      	mov	r6, r1
 800c9e6:	4690      	mov	r8, r2
 800c9e8:	b127      	cbz	r7, 800c9f4 <setvbuf+0x1c>
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	b913      	cbnz	r3, 800c9f4 <setvbuf+0x1c>
 800c9ee:	4638      	mov	r0, r7
 800c9f0:	f7ff ffaa 	bl	800c948 <__sinit>
 800c9f4:	f1b8 0f02 	cmp.w	r8, #2
 800c9f8:	d006      	beq.n	800ca08 <setvbuf+0x30>
 800c9fa:	f1b8 0f01 	cmp.w	r8, #1
 800c9fe:	f200 809a 	bhi.w	800cb36 <setvbuf+0x15e>
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	f2c0 8097 	blt.w	800cb36 <setvbuf+0x15e>
 800ca08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca0a:	07d9      	lsls	r1, r3, #31
 800ca0c:	d405      	bmi.n	800ca1a <setvbuf+0x42>
 800ca0e:	89a3      	ldrh	r3, [r4, #12]
 800ca10:	059a      	lsls	r2, r3, #22
 800ca12:	d402      	bmi.n	800ca1a <setvbuf+0x42>
 800ca14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca16:	f000 fa08 	bl	800ce2a <__retarget_lock_acquire_recursive>
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	f002 ff53 	bl	800f8c8 <_fflush_r>
 800ca22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca24:	b141      	cbz	r1, 800ca38 <setvbuf+0x60>
 800ca26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca2a:	4299      	cmp	r1, r3
 800ca2c:	d002      	beq.n	800ca34 <setvbuf+0x5c>
 800ca2e:	4638      	mov	r0, r7
 800ca30:	f001 f87a 	bl	800db28 <_free_r>
 800ca34:	2300      	movs	r3, #0
 800ca36:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca38:	2300      	movs	r3, #0
 800ca3a:	61a3      	str	r3, [r4, #24]
 800ca3c:	6063      	str	r3, [r4, #4]
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	061b      	lsls	r3, r3, #24
 800ca42:	d503      	bpl.n	800ca4c <setvbuf+0x74>
 800ca44:	6921      	ldr	r1, [r4, #16]
 800ca46:	4638      	mov	r0, r7
 800ca48:	f001 f86e 	bl	800db28 <_free_r>
 800ca4c:	89a3      	ldrh	r3, [r4, #12]
 800ca4e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800ca52:	f023 0303 	bic.w	r3, r3, #3
 800ca56:	f1b8 0f02 	cmp.w	r8, #2
 800ca5a:	81a3      	strh	r3, [r4, #12]
 800ca5c:	d061      	beq.n	800cb22 <setvbuf+0x14a>
 800ca5e:	ab01      	add	r3, sp, #4
 800ca60:	466a      	mov	r2, sp
 800ca62:	4621      	mov	r1, r4
 800ca64:	4638      	mov	r0, r7
 800ca66:	f002 ff69 	bl	800f93c <__swhatbuf_r>
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	4318      	orrs	r0, r3
 800ca6e:	81a0      	strh	r0, [r4, #12]
 800ca70:	bb2d      	cbnz	r5, 800cabe <setvbuf+0xe6>
 800ca72:	9d00      	ldr	r5, [sp, #0]
 800ca74:	4628      	mov	r0, r5
 800ca76:	f001 f8a1 	bl	800dbbc <malloc>
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d152      	bne.n	800cb26 <setvbuf+0x14e>
 800ca80:	f8dd 9000 	ldr.w	r9, [sp]
 800ca84:	45a9      	cmp	r9, r5
 800ca86:	d140      	bne.n	800cb0a <setvbuf+0x132>
 800ca88:	f04f 35ff 	mov.w	r5, #4294967295
 800ca8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca90:	f043 0202 	orr.w	r2, r3, #2
 800ca94:	81a2      	strh	r2, [r4, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	60a2      	str	r2, [r4, #8]
 800ca9a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800ca9e:	6022      	str	r2, [r4, #0]
 800caa0:	6122      	str	r2, [r4, #16]
 800caa2:	2201      	movs	r2, #1
 800caa4:	6162      	str	r2, [r4, #20]
 800caa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800caa8:	07d6      	lsls	r6, r2, #31
 800caaa:	d404      	bmi.n	800cab6 <setvbuf+0xde>
 800caac:	0598      	lsls	r0, r3, #22
 800caae:	d402      	bmi.n	800cab6 <setvbuf+0xde>
 800cab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cab2:	f000 f9bb 	bl	800ce2c <__retarget_lock_release_recursive>
 800cab6:	4628      	mov	r0, r5
 800cab8:	b003      	add	sp, #12
 800caba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	d0d8      	beq.n	800ca74 <setvbuf+0x9c>
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	b913      	cbnz	r3, 800cacc <setvbuf+0xf4>
 800cac6:	4638      	mov	r0, r7
 800cac8:	f7ff ff3e 	bl	800c948 <__sinit>
 800cacc:	f1b8 0f01 	cmp.w	r8, #1
 800cad0:	bf08      	it	eq
 800cad2:	89a3      	ldrheq	r3, [r4, #12]
 800cad4:	6026      	str	r6, [r4, #0]
 800cad6:	bf04      	itt	eq
 800cad8:	f043 0301 	orreq.w	r3, r3, #1
 800cadc:	81a3      	strheq	r3, [r4, #12]
 800cade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cae2:	f013 0208 	ands.w	r2, r3, #8
 800cae6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800caea:	d01e      	beq.n	800cb2a <setvbuf+0x152>
 800caec:	07d9      	lsls	r1, r3, #31
 800caee:	bf41      	itttt	mi
 800caf0:	2200      	movmi	r2, #0
 800caf2:	426d      	negmi	r5, r5
 800caf4:	60a2      	strmi	r2, [r4, #8]
 800caf6:	61a5      	strmi	r5, [r4, #24]
 800caf8:	bf58      	it	pl
 800cafa:	60a5      	strpl	r5, [r4, #8]
 800cafc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cafe:	07d2      	lsls	r2, r2, #31
 800cb00:	d401      	bmi.n	800cb06 <setvbuf+0x12e>
 800cb02:	059b      	lsls	r3, r3, #22
 800cb04:	d513      	bpl.n	800cb2e <setvbuf+0x156>
 800cb06:	2500      	movs	r5, #0
 800cb08:	e7d5      	b.n	800cab6 <setvbuf+0xde>
 800cb0a:	4648      	mov	r0, r9
 800cb0c:	f001 f856 	bl	800dbbc <malloc>
 800cb10:	4606      	mov	r6, r0
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d0b8      	beq.n	800ca88 <setvbuf+0xb0>
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb1c:	81a3      	strh	r3, [r4, #12]
 800cb1e:	464d      	mov	r5, r9
 800cb20:	e7cf      	b.n	800cac2 <setvbuf+0xea>
 800cb22:	2500      	movs	r5, #0
 800cb24:	e7b2      	b.n	800ca8c <setvbuf+0xb4>
 800cb26:	46a9      	mov	r9, r5
 800cb28:	e7f5      	b.n	800cb16 <setvbuf+0x13e>
 800cb2a:	60a2      	str	r2, [r4, #8]
 800cb2c:	e7e6      	b.n	800cafc <setvbuf+0x124>
 800cb2e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb30:	f000 f97c 	bl	800ce2c <__retarget_lock_release_recursive>
 800cb34:	e7e7      	b.n	800cb06 <setvbuf+0x12e>
 800cb36:	f04f 35ff 	mov.w	r5, #4294967295
 800cb3a:	e7bc      	b.n	800cab6 <setvbuf+0xde>
 800cb3c:	20000044 	.word	0x20000044

0800cb40 <sniprintf>:
 800cb40:	b40c      	push	{r2, r3}
 800cb42:	b530      	push	{r4, r5, lr}
 800cb44:	4b18      	ldr	r3, [pc, #96]	@ (800cba8 <sniprintf+0x68>)
 800cb46:	1e0c      	subs	r4, r1, #0
 800cb48:	681d      	ldr	r5, [r3, #0]
 800cb4a:	b09d      	sub	sp, #116	@ 0x74
 800cb4c:	da08      	bge.n	800cb60 <sniprintf+0x20>
 800cb4e:	238b      	movs	r3, #139	@ 0x8b
 800cb50:	602b      	str	r3, [r5, #0]
 800cb52:	f04f 30ff 	mov.w	r0, #4294967295
 800cb56:	b01d      	add	sp, #116	@ 0x74
 800cb58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb5c:	b002      	add	sp, #8
 800cb5e:	4770      	bx	lr
 800cb60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb64:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb68:	f04f 0300 	mov.w	r3, #0
 800cb6c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cb6e:	bf14      	ite	ne
 800cb70:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb74:	4623      	moveq	r3, r4
 800cb76:	9304      	str	r3, [sp, #16]
 800cb78:	9307      	str	r3, [sp, #28]
 800cb7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb7e:	9002      	str	r0, [sp, #8]
 800cb80:	9006      	str	r0, [sp, #24]
 800cb82:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb86:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cb88:	ab21      	add	r3, sp, #132	@ 0x84
 800cb8a:	a902      	add	r1, sp, #8
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	9301      	str	r3, [sp, #4]
 800cb90:	f002 fbd8 	bl	800f344 <_svfiprintf_r>
 800cb94:	1c43      	adds	r3, r0, #1
 800cb96:	bfbc      	itt	lt
 800cb98:	238b      	movlt	r3, #139	@ 0x8b
 800cb9a:	602b      	strlt	r3, [r5, #0]
 800cb9c:	2c00      	cmp	r4, #0
 800cb9e:	d0da      	beq.n	800cb56 <sniprintf+0x16>
 800cba0:	9b02      	ldr	r3, [sp, #8]
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
 800cba6:	e7d6      	b.n	800cb56 <sniprintf+0x16>
 800cba8:	20000044 	.word	0x20000044

0800cbac <siprintf>:
 800cbac:	b40e      	push	{r1, r2, r3}
 800cbae:	b510      	push	{r4, lr}
 800cbb0:	b09d      	sub	sp, #116	@ 0x74
 800cbb2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cbb4:	9002      	str	r0, [sp, #8]
 800cbb6:	9006      	str	r0, [sp, #24]
 800cbb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cbbc:	480a      	ldr	r0, [pc, #40]	@ (800cbe8 <siprintf+0x3c>)
 800cbbe:	9107      	str	r1, [sp, #28]
 800cbc0:	9104      	str	r1, [sp, #16]
 800cbc2:	490a      	ldr	r1, [pc, #40]	@ (800cbec <siprintf+0x40>)
 800cbc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbc8:	9105      	str	r1, [sp, #20]
 800cbca:	2400      	movs	r4, #0
 800cbcc:	a902      	add	r1, sp, #8
 800cbce:	6800      	ldr	r0, [r0, #0]
 800cbd0:	9301      	str	r3, [sp, #4]
 800cbd2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cbd4:	f002 fbb6 	bl	800f344 <_svfiprintf_r>
 800cbd8:	9b02      	ldr	r3, [sp, #8]
 800cbda:	701c      	strb	r4, [r3, #0]
 800cbdc:	b01d      	add	sp, #116	@ 0x74
 800cbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbe2:	b003      	add	sp, #12
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	20000044 	.word	0x20000044
 800cbec:	ffff0208 	.word	0xffff0208

0800cbf0 <__sread>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	460c      	mov	r4, r1
 800cbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf8:	f000 f8c8 	bl	800cd8c <_read_r>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	bfab      	itete	ge
 800cc00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cc02:	89a3      	ldrhlt	r3, [r4, #12]
 800cc04:	181b      	addge	r3, r3, r0
 800cc06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc0a:	bfac      	ite	ge
 800cc0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc0e:	81a3      	strhlt	r3, [r4, #12]
 800cc10:	bd10      	pop	{r4, pc}

0800cc12 <__swrite>:
 800cc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc16:	461f      	mov	r7, r3
 800cc18:	898b      	ldrh	r3, [r1, #12]
 800cc1a:	05db      	lsls	r3, r3, #23
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	460c      	mov	r4, r1
 800cc20:	4616      	mov	r6, r2
 800cc22:	d505      	bpl.n	800cc30 <__swrite+0x1e>
 800cc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc28:	2302      	movs	r3, #2
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f000 f89c 	bl	800cd68 <_lseek_r>
 800cc30:	89a3      	ldrh	r3, [r4, #12]
 800cc32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc3a:	81a3      	strh	r3, [r4, #12]
 800cc3c:	4632      	mov	r2, r6
 800cc3e:	463b      	mov	r3, r7
 800cc40:	4628      	mov	r0, r5
 800cc42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc46:	f000 b8b3 	b.w	800cdb0 <_write_r>

0800cc4a <__sseek>:
 800cc4a:	b510      	push	{r4, lr}
 800cc4c:	460c      	mov	r4, r1
 800cc4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc52:	f000 f889 	bl	800cd68 <_lseek_r>
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	bf15      	itete	ne
 800cc5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc66:	81a3      	strheq	r3, [r4, #12]
 800cc68:	bf18      	it	ne
 800cc6a:	81a3      	strhne	r3, [r4, #12]
 800cc6c:	bd10      	pop	{r4, pc}

0800cc6e <__sclose>:
 800cc6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc72:	f000 b869 	b.w	800cd48 <_close_r>

0800cc76 <memset>:
 800cc76:	4402      	add	r2, r0
 800cc78:	4603      	mov	r3, r0
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d100      	bne.n	800cc80 <memset+0xa>
 800cc7e:	4770      	bx	lr
 800cc80:	f803 1b01 	strb.w	r1, [r3], #1
 800cc84:	e7f9      	b.n	800cc7a <memset+0x4>
	...

0800cc88 <strtok>:
 800cc88:	4b16      	ldr	r3, [pc, #88]	@ (800cce4 <strtok+0x5c>)
 800cc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8e:	681f      	ldr	r7, [r3, #0]
 800cc90:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cc92:	4605      	mov	r5, r0
 800cc94:	460e      	mov	r6, r1
 800cc96:	b9ec      	cbnz	r4, 800ccd4 <strtok+0x4c>
 800cc98:	2050      	movs	r0, #80	@ 0x50
 800cc9a:	f000 ff8f 	bl	800dbbc <malloc>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	6478      	str	r0, [r7, #68]	@ 0x44
 800cca2:	b920      	cbnz	r0, 800ccae <strtok+0x26>
 800cca4:	4b10      	ldr	r3, [pc, #64]	@ (800cce8 <strtok+0x60>)
 800cca6:	4811      	ldr	r0, [pc, #68]	@ (800ccec <strtok+0x64>)
 800cca8:	215b      	movs	r1, #91	@ 0x5b
 800ccaa:	f000 f8c7 	bl	800ce3c <__assert_func>
 800ccae:	e9c0 4400 	strd	r4, r4, [r0]
 800ccb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ccb6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ccba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ccbe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ccc2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ccc6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ccca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ccce:	6184      	str	r4, [r0, #24]
 800ccd0:	7704      	strb	r4, [r0, #28]
 800ccd2:	6244      	str	r4, [r0, #36]	@ 0x24
 800ccd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccd6:	4631      	mov	r1, r6
 800ccd8:	4628      	mov	r0, r5
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cce0:	f000 b806 	b.w	800ccf0 <__strtok_r>
 800cce4:	20000044 	.word	0x20000044
 800cce8:	080122be 	.word	0x080122be
 800ccec:	080122d5 	.word	0x080122d5

0800ccf0 <__strtok_r>:
 800ccf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	b908      	cbnz	r0, 800ccfa <__strtok_r+0xa>
 800ccf6:	6814      	ldr	r4, [r2, #0]
 800ccf8:	b144      	cbz	r4, 800cd0c <__strtok_r+0x1c>
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cd00:	460f      	mov	r7, r1
 800cd02:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cd06:	b91e      	cbnz	r6, 800cd10 <__strtok_r+0x20>
 800cd08:	b965      	cbnz	r5, 800cd24 <__strtok_r+0x34>
 800cd0a:	6015      	str	r5, [r2, #0]
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	e005      	b.n	800cd1c <__strtok_r+0x2c>
 800cd10:	42b5      	cmp	r5, r6
 800cd12:	d1f6      	bne.n	800cd02 <__strtok_r+0x12>
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1f0      	bne.n	800ccfa <__strtok_r+0xa>
 800cd18:	6014      	str	r4, [r2, #0]
 800cd1a:	7003      	strb	r3, [r0, #0]
 800cd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd1e:	461c      	mov	r4, r3
 800cd20:	e00c      	b.n	800cd3c <__strtok_r+0x4c>
 800cd22:	b91d      	cbnz	r5, 800cd2c <__strtok_r+0x3c>
 800cd24:	4627      	mov	r7, r4
 800cd26:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd2a:	460e      	mov	r6, r1
 800cd2c:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cd30:	42ab      	cmp	r3, r5
 800cd32:	d1f6      	bne.n	800cd22 <__strtok_r+0x32>
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d0f2      	beq.n	800cd1e <__strtok_r+0x2e>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	703b      	strb	r3, [r7, #0]
 800cd3c:	6014      	str	r4, [r2, #0]
 800cd3e:	e7ed      	b.n	800cd1c <__strtok_r+0x2c>

0800cd40 <_localeconv_r>:
 800cd40:	4800      	ldr	r0, [pc, #0]	@ (800cd44 <_localeconv_r+0x4>)
 800cd42:	4770      	bx	lr
 800cd44:	20000184 	.word	0x20000184

0800cd48 <_close_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4d06      	ldr	r5, [pc, #24]	@ (800cd64 <_close_r+0x1c>)
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4604      	mov	r4, r0
 800cd50:	4608      	mov	r0, r1
 800cd52:	602b      	str	r3, [r5, #0]
 800cd54:	f7f7 fccc 	bl	80046f0 <_close>
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	d102      	bne.n	800cd62 <_close_r+0x1a>
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	b103      	cbz	r3, 800cd62 <_close_r+0x1a>
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	200011d4 	.word	0x200011d4

0800cd68 <_lseek_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4d07      	ldr	r5, [pc, #28]	@ (800cd88 <_lseek_r+0x20>)
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	4608      	mov	r0, r1
 800cd70:	4611      	mov	r1, r2
 800cd72:	2200      	movs	r2, #0
 800cd74:	602a      	str	r2, [r5, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	f7f7 fce1 	bl	800473e <_lseek>
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d102      	bne.n	800cd86 <_lseek_r+0x1e>
 800cd80:	682b      	ldr	r3, [r5, #0]
 800cd82:	b103      	cbz	r3, 800cd86 <_lseek_r+0x1e>
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	200011d4 	.word	0x200011d4

0800cd8c <_read_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4d07      	ldr	r5, [pc, #28]	@ (800cdac <_read_r+0x20>)
 800cd90:	4604      	mov	r4, r0
 800cd92:	4608      	mov	r0, r1
 800cd94:	4611      	mov	r1, r2
 800cd96:	2200      	movs	r2, #0
 800cd98:	602a      	str	r2, [r5, #0]
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	f7f7 fc8b 	bl	80046b6 <_read>
 800cda0:	1c43      	adds	r3, r0, #1
 800cda2:	d102      	bne.n	800cdaa <_read_r+0x1e>
 800cda4:	682b      	ldr	r3, [r5, #0]
 800cda6:	b103      	cbz	r3, 800cdaa <_read_r+0x1e>
 800cda8:	6023      	str	r3, [r4, #0]
 800cdaa:	bd38      	pop	{r3, r4, r5, pc}
 800cdac:	200011d4 	.word	0x200011d4

0800cdb0 <_write_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	4d07      	ldr	r5, [pc, #28]	@ (800cdd0 <_write_r+0x20>)
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	4608      	mov	r0, r1
 800cdb8:	4611      	mov	r1, r2
 800cdba:	2200      	movs	r2, #0
 800cdbc:	602a      	str	r2, [r5, #0]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	f7f6 fdd6 	bl	8003970 <_write>
 800cdc4:	1c43      	adds	r3, r0, #1
 800cdc6:	d102      	bne.n	800cdce <_write_r+0x1e>
 800cdc8:	682b      	ldr	r3, [r5, #0]
 800cdca:	b103      	cbz	r3, 800cdce <_write_r+0x1e>
 800cdcc:	6023      	str	r3, [r4, #0]
 800cdce:	bd38      	pop	{r3, r4, r5, pc}
 800cdd0:	200011d4 	.word	0x200011d4

0800cdd4 <__errno>:
 800cdd4:	4b01      	ldr	r3, [pc, #4]	@ (800cddc <__errno+0x8>)
 800cdd6:	6818      	ldr	r0, [r3, #0]
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	20000044 	.word	0x20000044

0800cde0 <__libc_init_array>:
 800cde0:	b570      	push	{r4, r5, r6, lr}
 800cde2:	4d0d      	ldr	r5, [pc, #52]	@ (800ce18 <__libc_init_array+0x38>)
 800cde4:	4c0d      	ldr	r4, [pc, #52]	@ (800ce1c <__libc_init_array+0x3c>)
 800cde6:	1b64      	subs	r4, r4, r5
 800cde8:	10a4      	asrs	r4, r4, #2
 800cdea:	2600      	movs	r6, #0
 800cdec:	42a6      	cmp	r6, r4
 800cdee:	d109      	bne.n	800ce04 <__libc_init_array+0x24>
 800cdf0:	4d0b      	ldr	r5, [pc, #44]	@ (800ce20 <__libc_init_array+0x40>)
 800cdf2:	4c0c      	ldr	r4, [pc, #48]	@ (800ce24 <__libc_init_array+0x44>)
 800cdf4:	f003 faf8 	bl	80103e8 <_init>
 800cdf8:	1b64      	subs	r4, r4, r5
 800cdfa:	10a4      	asrs	r4, r4, #2
 800cdfc:	2600      	movs	r6, #0
 800cdfe:	42a6      	cmp	r6, r4
 800ce00:	d105      	bne.n	800ce0e <__libc_init_array+0x2e>
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
 800ce04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce08:	4798      	blx	r3
 800ce0a:	3601      	adds	r6, #1
 800ce0c:	e7ee      	b.n	800cdec <__libc_init_array+0xc>
 800ce0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce12:	4798      	blx	r3
 800ce14:	3601      	adds	r6, #1
 800ce16:	e7f2      	b.n	800cdfe <__libc_init_array+0x1e>
 800ce18:	08012610 	.word	0x08012610
 800ce1c:	08012610 	.word	0x08012610
 800ce20:	08012610 	.word	0x08012610
 800ce24:	08012614 	.word	0x08012614

0800ce28 <__retarget_lock_init_recursive>:
 800ce28:	4770      	bx	lr

0800ce2a <__retarget_lock_acquire_recursive>:
 800ce2a:	4770      	bx	lr

0800ce2c <__retarget_lock_release_recursive>:
 800ce2c:	4770      	bx	lr
	...

0800ce30 <nanf>:
 800ce30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ce38 <nanf+0x8>
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	7fc00000 	.word	0x7fc00000

0800ce3c <__assert_func>:
 800ce3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce3e:	4614      	mov	r4, r2
 800ce40:	461a      	mov	r2, r3
 800ce42:	4b09      	ldr	r3, [pc, #36]	@ (800ce68 <__assert_func+0x2c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4605      	mov	r5, r0
 800ce48:	68d8      	ldr	r0, [r3, #12]
 800ce4a:	b14c      	cbz	r4, 800ce60 <__assert_func+0x24>
 800ce4c:	4b07      	ldr	r3, [pc, #28]	@ (800ce6c <__assert_func+0x30>)
 800ce4e:	9100      	str	r1, [sp, #0]
 800ce50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce54:	4906      	ldr	r1, [pc, #24]	@ (800ce70 <__assert_func+0x34>)
 800ce56:	462b      	mov	r3, r5
 800ce58:	f002 fd5e 	bl	800f918 <fiprintf>
 800ce5c:	f002 fed8 	bl	800fc10 <abort>
 800ce60:	4b04      	ldr	r3, [pc, #16]	@ (800ce74 <__assert_func+0x38>)
 800ce62:	461c      	mov	r4, r3
 800ce64:	e7f3      	b.n	800ce4e <__assert_func+0x12>
 800ce66:	bf00      	nop
 800ce68:	20000044 	.word	0x20000044
 800ce6c:	0801232f 	.word	0x0801232f
 800ce70:	0801233c 	.word	0x0801233c
 800ce74:	0801236a 	.word	0x0801236a

0800ce78 <quorem>:
 800ce78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7c:	6903      	ldr	r3, [r0, #16]
 800ce7e:	690c      	ldr	r4, [r1, #16]
 800ce80:	42a3      	cmp	r3, r4
 800ce82:	4607      	mov	r7, r0
 800ce84:	db7e      	blt.n	800cf84 <quorem+0x10c>
 800ce86:	3c01      	subs	r4, #1
 800ce88:	f101 0814 	add.w	r8, r1, #20
 800ce8c:	00a3      	lsls	r3, r4, #2
 800ce8e:	f100 0514 	add.w	r5, r0, #20
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce98:	9301      	str	r3, [sp, #4]
 800ce9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cea2:	3301      	adds	r3, #1
 800cea4:	429a      	cmp	r2, r3
 800cea6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ceaa:	fbb2 f6f3 	udiv	r6, r2, r3
 800ceae:	d32e      	bcc.n	800cf0e <quorem+0x96>
 800ceb0:	f04f 0a00 	mov.w	sl, #0
 800ceb4:	46c4      	mov	ip, r8
 800ceb6:	46ae      	mov	lr, r5
 800ceb8:	46d3      	mov	fp, sl
 800ceba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cebe:	b298      	uxth	r0, r3
 800cec0:	fb06 a000 	mla	r0, r6, r0, sl
 800cec4:	0c02      	lsrs	r2, r0, #16
 800cec6:	0c1b      	lsrs	r3, r3, #16
 800cec8:	fb06 2303 	mla	r3, r6, r3, r2
 800cecc:	f8de 2000 	ldr.w	r2, [lr]
 800ced0:	b280      	uxth	r0, r0
 800ced2:	b292      	uxth	r2, r2
 800ced4:	1a12      	subs	r2, r2, r0
 800ced6:	445a      	add	r2, fp
 800ced8:	f8de 0000 	ldr.w	r0, [lr]
 800cedc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cee6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ceea:	b292      	uxth	r2, r2
 800ceec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cef0:	45e1      	cmp	r9, ip
 800cef2:	f84e 2b04 	str.w	r2, [lr], #4
 800cef6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cefa:	d2de      	bcs.n	800ceba <quorem+0x42>
 800cefc:	9b00      	ldr	r3, [sp, #0]
 800cefe:	58eb      	ldr	r3, [r5, r3]
 800cf00:	b92b      	cbnz	r3, 800cf0e <quorem+0x96>
 800cf02:	9b01      	ldr	r3, [sp, #4]
 800cf04:	3b04      	subs	r3, #4
 800cf06:	429d      	cmp	r5, r3
 800cf08:	461a      	mov	r2, r3
 800cf0a:	d32f      	bcc.n	800cf6c <quorem+0xf4>
 800cf0c:	613c      	str	r4, [r7, #16]
 800cf0e:	4638      	mov	r0, r7
 800cf10:	f001 f9c6 	bl	800e2a0 <__mcmp>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	db25      	blt.n	800cf64 <quorem+0xec>
 800cf18:	4629      	mov	r1, r5
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf20:	f8d1 c000 	ldr.w	ip, [r1]
 800cf24:	fa1f fe82 	uxth.w	lr, r2
 800cf28:	fa1f f38c 	uxth.w	r3, ip
 800cf2c:	eba3 030e 	sub.w	r3, r3, lr
 800cf30:	4403      	add	r3, r0
 800cf32:	0c12      	lsrs	r2, r2, #16
 800cf34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cf38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf42:	45c1      	cmp	r9, r8
 800cf44:	f841 3b04 	str.w	r3, [r1], #4
 800cf48:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf4c:	d2e6      	bcs.n	800cf1c <quorem+0xa4>
 800cf4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf56:	b922      	cbnz	r2, 800cf62 <quorem+0xea>
 800cf58:	3b04      	subs	r3, #4
 800cf5a:	429d      	cmp	r5, r3
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	d30b      	bcc.n	800cf78 <quorem+0x100>
 800cf60:	613c      	str	r4, [r7, #16]
 800cf62:	3601      	adds	r6, #1
 800cf64:	4630      	mov	r0, r6
 800cf66:	b003      	add	sp, #12
 800cf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6c:	6812      	ldr	r2, [r2, #0]
 800cf6e:	3b04      	subs	r3, #4
 800cf70:	2a00      	cmp	r2, #0
 800cf72:	d1cb      	bne.n	800cf0c <quorem+0x94>
 800cf74:	3c01      	subs	r4, #1
 800cf76:	e7c6      	b.n	800cf06 <quorem+0x8e>
 800cf78:	6812      	ldr	r2, [r2, #0]
 800cf7a:	3b04      	subs	r3, #4
 800cf7c:	2a00      	cmp	r2, #0
 800cf7e:	d1ef      	bne.n	800cf60 <quorem+0xe8>
 800cf80:	3c01      	subs	r4, #1
 800cf82:	e7ea      	b.n	800cf5a <quorem+0xe2>
 800cf84:	2000      	movs	r0, #0
 800cf86:	e7ee      	b.n	800cf66 <quorem+0xee>

0800cf88 <_dtoa_r>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	69c7      	ldr	r7, [r0, #28]
 800cf8e:	b097      	sub	sp, #92	@ 0x5c
 800cf90:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cf94:	ec55 4b10 	vmov	r4, r5, d0
 800cf98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cf9a:	9107      	str	r1, [sp, #28]
 800cf9c:	4681      	mov	r9, r0
 800cf9e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cfa0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cfa2:	b97f      	cbnz	r7, 800cfc4 <_dtoa_r+0x3c>
 800cfa4:	2010      	movs	r0, #16
 800cfa6:	f000 fe09 	bl	800dbbc <malloc>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	f8c9 001c 	str.w	r0, [r9, #28]
 800cfb0:	b920      	cbnz	r0, 800cfbc <_dtoa_r+0x34>
 800cfb2:	4ba9      	ldr	r3, [pc, #676]	@ (800d258 <_dtoa_r+0x2d0>)
 800cfb4:	21ef      	movs	r1, #239	@ 0xef
 800cfb6:	48a9      	ldr	r0, [pc, #676]	@ (800d25c <_dtoa_r+0x2d4>)
 800cfb8:	f7ff ff40 	bl	800ce3c <__assert_func>
 800cfbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cfc0:	6007      	str	r7, [r0, #0]
 800cfc2:	60c7      	str	r7, [r0, #12]
 800cfc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfc8:	6819      	ldr	r1, [r3, #0]
 800cfca:	b159      	cbz	r1, 800cfe4 <_dtoa_r+0x5c>
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	604a      	str	r2, [r1, #4]
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	4093      	lsls	r3, r2
 800cfd4:	608b      	str	r3, [r1, #8]
 800cfd6:	4648      	mov	r0, r9
 800cfd8:	f000 fee6 	bl	800dda8 <_Bfree>
 800cfdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	601a      	str	r2, [r3, #0]
 800cfe4:	1e2b      	subs	r3, r5, #0
 800cfe6:	bfb9      	ittee	lt
 800cfe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cfec:	9305      	strlt	r3, [sp, #20]
 800cfee:	2300      	movge	r3, #0
 800cff0:	6033      	strge	r3, [r6, #0]
 800cff2:	9f05      	ldr	r7, [sp, #20]
 800cff4:	4b9a      	ldr	r3, [pc, #616]	@ (800d260 <_dtoa_r+0x2d8>)
 800cff6:	bfbc      	itt	lt
 800cff8:	2201      	movlt	r2, #1
 800cffa:	6032      	strlt	r2, [r6, #0]
 800cffc:	43bb      	bics	r3, r7
 800cffe:	d112      	bne.n	800d026 <_dtoa_r+0x9e>
 800d000:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d002:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d006:	6013      	str	r3, [r2, #0]
 800d008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d00c:	4323      	orrs	r3, r4
 800d00e:	f000 855a 	beq.w	800dac6 <_dtoa_r+0xb3e>
 800d012:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d014:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d274 <_dtoa_r+0x2ec>
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 855c 	beq.w	800dad6 <_dtoa_r+0xb4e>
 800d01e:	f10a 0303 	add.w	r3, sl, #3
 800d022:	f000 bd56 	b.w	800dad2 <_dtoa_r+0xb4a>
 800d026:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d02a:	2200      	movs	r2, #0
 800d02c:	ec51 0b17 	vmov	r0, r1, d7
 800d030:	2300      	movs	r3, #0
 800d032:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d036:	f7f3 fd77 	bl	8000b28 <__aeabi_dcmpeq>
 800d03a:	4680      	mov	r8, r0
 800d03c:	b158      	cbz	r0, 800d056 <_dtoa_r+0xce>
 800d03e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d040:	2301      	movs	r3, #1
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d046:	b113      	cbz	r3, 800d04e <_dtoa_r+0xc6>
 800d048:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d04a:	4b86      	ldr	r3, [pc, #536]	@ (800d264 <_dtoa_r+0x2dc>)
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d278 <_dtoa_r+0x2f0>
 800d052:	f000 bd40 	b.w	800dad6 <_dtoa_r+0xb4e>
 800d056:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d05a:	aa14      	add	r2, sp, #80	@ 0x50
 800d05c:	a915      	add	r1, sp, #84	@ 0x54
 800d05e:	4648      	mov	r0, r9
 800d060:	f001 fa3e 	bl	800e4e0 <__d2b>
 800d064:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d068:	9002      	str	r0, [sp, #8]
 800d06a:	2e00      	cmp	r6, #0
 800d06c:	d078      	beq.n	800d160 <_dtoa_r+0x1d8>
 800d06e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d070:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d078:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d07c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d080:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d084:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d088:	4619      	mov	r1, r3
 800d08a:	2200      	movs	r2, #0
 800d08c:	4b76      	ldr	r3, [pc, #472]	@ (800d268 <_dtoa_r+0x2e0>)
 800d08e:	f7f3 f92b 	bl	80002e8 <__aeabi_dsub>
 800d092:	a36b      	add	r3, pc, #428	@ (adr r3, 800d240 <_dtoa_r+0x2b8>)
 800d094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d098:	f7f3 fade 	bl	8000658 <__aeabi_dmul>
 800d09c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d248 <_dtoa_r+0x2c0>)
 800d09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a2:	f7f3 f923 	bl	80002ec <__adddf3>
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	460d      	mov	r5, r1
 800d0ac:	f7f3 fa6a 	bl	8000584 <__aeabi_i2d>
 800d0b0:	a367      	add	r3, pc, #412	@ (adr r3, 800d250 <_dtoa_r+0x2c8>)
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	f7f3 facf 	bl	8000658 <__aeabi_dmul>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	460b      	mov	r3, r1
 800d0be:	4620      	mov	r0, r4
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	f7f3 f913 	bl	80002ec <__adddf3>
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	460d      	mov	r5, r1
 800d0ca:	f7f3 fd75 	bl	8000bb8 <__aeabi_d2iz>
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	4629      	mov	r1, r5
 800d0d8:	f7f3 fd30 	bl	8000b3c <__aeabi_dcmplt>
 800d0dc:	b140      	cbz	r0, 800d0f0 <_dtoa_r+0x168>
 800d0de:	4638      	mov	r0, r7
 800d0e0:	f7f3 fa50 	bl	8000584 <__aeabi_i2d>
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	462b      	mov	r3, r5
 800d0e8:	f7f3 fd1e 	bl	8000b28 <__aeabi_dcmpeq>
 800d0ec:	b900      	cbnz	r0, 800d0f0 <_dtoa_r+0x168>
 800d0ee:	3f01      	subs	r7, #1
 800d0f0:	2f16      	cmp	r7, #22
 800d0f2:	d852      	bhi.n	800d19a <_dtoa_r+0x212>
 800d0f4:	4b5d      	ldr	r3, [pc, #372]	@ (800d26c <_dtoa_r+0x2e4>)
 800d0f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d102:	f7f3 fd1b 	bl	8000b3c <__aeabi_dcmplt>
 800d106:	2800      	cmp	r0, #0
 800d108:	d049      	beq.n	800d19e <_dtoa_r+0x216>
 800d10a:	3f01      	subs	r7, #1
 800d10c:	2300      	movs	r3, #0
 800d10e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d110:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d112:	1b9b      	subs	r3, r3, r6
 800d114:	1e5a      	subs	r2, r3, #1
 800d116:	bf45      	ittet	mi
 800d118:	f1c3 0301 	rsbmi	r3, r3, #1
 800d11c:	9300      	strmi	r3, [sp, #0]
 800d11e:	2300      	movpl	r3, #0
 800d120:	2300      	movmi	r3, #0
 800d122:	9206      	str	r2, [sp, #24]
 800d124:	bf54      	ite	pl
 800d126:	9300      	strpl	r3, [sp, #0]
 800d128:	9306      	strmi	r3, [sp, #24]
 800d12a:	2f00      	cmp	r7, #0
 800d12c:	db39      	blt.n	800d1a2 <_dtoa_r+0x21a>
 800d12e:	9b06      	ldr	r3, [sp, #24]
 800d130:	970d      	str	r7, [sp, #52]	@ 0x34
 800d132:	443b      	add	r3, r7
 800d134:	9306      	str	r3, [sp, #24]
 800d136:	2300      	movs	r3, #0
 800d138:	9308      	str	r3, [sp, #32]
 800d13a:	9b07      	ldr	r3, [sp, #28]
 800d13c:	2b09      	cmp	r3, #9
 800d13e:	d863      	bhi.n	800d208 <_dtoa_r+0x280>
 800d140:	2b05      	cmp	r3, #5
 800d142:	bfc4      	itt	gt
 800d144:	3b04      	subgt	r3, #4
 800d146:	9307      	strgt	r3, [sp, #28]
 800d148:	9b07      	ldr	r3, [sp, #28]
 800d14a:	f1a3 0302 	sub.w	r3, r3, #2
 800d14e:	bfcc      	ite	gt
 800d150:	2400      	movgt	r4, #0
 800d152:	2401      	movle	r4, #1
 800d154:	2b03      	cmp	r3, #3
 800d156:	d863      	bhi.n	800d220 <_dtoa_r+0x298>
 800d158:	e8df f003 	tbb	[pc, r3]
 800d15c:	2b375452 	.word	0x2b375452
 800d160:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d164:	441e      	add	r6, r3
 800d166:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d16a:	2b20      	cmp	r3, #32
 800d16c:	bfc1      	itttt	gt
 800d16e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d172:	409f      	lslgt	r7, r3
 800d174:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d178:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d17c:	bfd6      	itet	le
 800d17e:	f1c3 0320 	rsble	r3, r3, #32
 800d182:	ea47 0003 	orrgt.w	r0, r7, r3
 800d186:	fa04 f003 	lslle.w	r0, r4, r3
 800d18a:	f7f3 f9eb 	bl	8000564 <__aeabi_ui2d>
 800d18e:	2201      	movs	r2, #1
 800d190:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d194:	3e01      	subs	r6, #1
 800d196:	9212      	str	r2, [sp, #72]	@ 0x48
 800d198:	e776      	b.n	800d088 <_dtoa_r+0x100>
 800d19a:	2301      	movs	r3, #1
 800d19c:	e7b7      	b.n	800d10e <_dtoa_r+0x186>
 800d19e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d1a0:	e7b6      	b.n	800d110 <_dtoa_r+0x188>
 800d1a2:	9b00      	ldr	r3, [sp, #0]
 800d1a4:	1bdb      	subs	r3, r3, r7
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	427b      	negs	r3, r7
 800d1aa:	9308      	str	r3, [sp, #32]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	930d      	str	r3, [sp, #52]	@ 0x34
 800d1b0:	e7c3      	b.n	800d13a <_dtoa_r+0x1b2>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1b8:	eb07 0b03 	add.w	fp, r7, r3
 800d1bc:	f10b 0301 	add.w	r3, fp, #1
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	9303      	str	r3, [sp, #12]
 800d1c4:	bfb8      	it	lt
 800d1c6:	2301      	movlt	r3, #1
 800d1c8:	e006      	b.n	800d1d8 <_dtoa_r+0x250>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	dd28      	ble.n	800d226 <_dtoa_r+0x29e>
 800d1d4:	469b      	mov	fp, r3
 800d1d6:	9303      	str	r3, [sp, #12]
 800d1d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d1dc:	2100      	movs	r1, #0
 800d1de:	2204      	movs	r2, #4
 800d1e0:	f102 0514 	add.w	r5, r2, #20
 800d1e4:	429d      	cmp	r5, r3
 800d1e6:	d926      	bls.n	800d236 <_dtoa_r+0x2ae>
 800d1e8:	6041      	str	r1, [r0, #4]
 800d1ea:	4648      	mov	r0, r9
 800d1ec:	f000 fd9c 	bl	800dd28 <_Balloc>
 800d1f0:	4682      	mov	sl, r0
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d142      	bne.n	800d27c <_dtoa_r+0x2f4>
 800d1f6:	4b1e      	ldr	r3, [pc, #120]	@ (800d270 <_dtoa_r+0x2e8>)
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	f240 11af 	movw	r1, #431	@ 0x1af
 800d1fe:	e6da      	b.n	800cfb6 <_dtoa_r+0x2e>
 800d200:	2300      	movs	r3, #0
 800d202:	e7e3      	b.n	800d1cc <_dtoa_r+0x244>
 800d204:	2300      	movs	r3, #0
 800d206:	e7d5      	b.n	800d1b4 <_dtoa_r+0x22c>
 800d208:	2401      	movs	r4, #1
 800d20a:	2300      	movs	r3, #0
 800d20c:	9307      	str	r3, [sp, #28]
 800d20e:	9409      	str	r4, [sp, #36]	@ 0x24
 800d210:	f04f 3bff 	mov.w	fp, #4294967295
 800d214:	2200      	movs	r2, #0
 800d216:	f8cd b00c 	str.w	fp, [sp, #12]
 800d21a:	2312      	movs	r3, #18
 800d21c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d21e:	e7db      	b.n	800d1d8 <_dtoa_r+0x250>
 800d220:	2301      	movs	r3, #1
 800d222:	9309      	str	r3, [sp, #36]	@ 0x24
 800d224:	e7f4      	b.n	800d210 <_dtoa_r+0x288>
 800d226:	f04f 0b01 	mov.w	fp, #1
 800d22a:	f8cd b00c 	str.w	fp, [sp, #12]
 800d22e:	465b      	mov	r3, fp
 800d230:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d234:	e7d0      	b.n	800d1d8 <_dtoa_r+0x250>
 800d236:	3101      	adds	r1, #1
 800d238:	0052      	lsls	r2, r2, #1
 800d23a:	e7d1      	b.n	800d1e0 <_dtoa_r+0x258>
 800d23c:	f3af 8000 	nop.w
 800d240:	636f4361 	.word	0x636f4361
 800d244:	3fd287a7 	.word	0x3fd287a7
 800d248:	8b60c8b3 	.word	0x8b60c8b3
 800d24c:	3fc68a28 	.word	0x3fc68a28
 800d250:	509f79fb 	.word	0x509f79fb
 800d254:	3fd34413 	.word	0x3fd34413
 800d258:	080122be 	.word	0x080122be
 800d25c:	08012378 	.word	0x08012378
 800d260:	7ff00000 	.word	0x7ff00000
 800d264:	08012296 	.word	0x08012296
 800d268:	3ff80000 	.word	0x3ff80000
 800d26c:	080124f0 	.word	0x080124f0
 800d270:	080123d0 	.word	0x080123d0
 800d274:	08012374 	.word	0x08012374
 800d278:	08012295 	.word	0x08012295
 800d27c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d280:	6018      	str	r0, [r3, #0]
 800d282:	9b03      	ldr	r3, [sp, #12]
 800d284:	2b0e      	cmp	r3, #14
 800d286:	f200 80a1 	bhi.w	800d3cc <_dtoa_r+0x444>
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	f000 809e 	beq.w	800d3cc <_dtoa_r+0x444>
 800d290:	2f00      	cmp	r7, #0
 800d292:	dd33      	ble.n	800d2fc <_dtoa_r+0x374>
 800d294:	4b9c      	ldr	r3, [pc, #624]	@ (800d508 <_dtoa_r+0x580>)
 800d296:	f007 020f 	and.w	r2, r7, #15
 800d29a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d29e:	ed93 7b00 	vldr	d7, [r3]
 800d2a2:	05f8      	lsls	r0, r7, #23
 800d2a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d2a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d2ac:	d516      	bpl.n	800d2dc <_dtoa_r+0x354>
 800d2ae:	4b97      	ldr	r3, [pc, #604]	@ (800d50c <_dtoa_r+0x584>)
 800d2b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d2b8:	f7f3 faf8 	bl	80008ac <__aeabi_ddiv>
 800d2bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2c0:	f004 040f 	and.w	r4, r4, #15
 800d2c4:	2603      	movs	r6, #3
 800d2c6:	4d91      	ldr	r5, [pc, #580]	@ (800d50c <_dtoa_r+0x584>)
 800d2c8:	b954      	cbnz	r4, 800d2e0 <_dtoa_r+0x358>
 800d2ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d2ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2d2:	f7f3 faeb 	bl	80008ac <__aeabi_ddiv>
 800d2d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2da:	e028      	b.n	800d32e <_dtoa_r+0x3a6>
 800d2dc:	2602      	movs	r6, #2
 800d2de:	e7f2      	b.n	800d2c6 <_dtoa_r+0x33e>
 800d2e0:	07e1      	lsls	r1, r4, #31
 800d2e2:	d508      	bpl.n	800d2f6 <_dtoa_r+0x36e>
 800d2e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d2e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2ec:	f7f3 f9b4 	bl	8000658 <__aeabi_dmul>
 800d2f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d2f4:	3601      	adds	r6, #1
 800d2f6:	1064      	asrs	r4, r4, #1
 800d2f8:	3508      	adds	r5, #8
 800d2fa:	e7e5      	b.n	800d2c8 <_dtoa_r+0x340>
 800d2fc:	f000 80af 	beq.w	800d45e <_dtoa_r+0x4d6>
 800d300:	427c      	negs	r4, r7
 800d302:	4b81      	ldr	r3, [pc, #516]	@ (800d508 <_dtoa_r+0x580>)
 800d304:	4d81      	ldr	r5, [pc, #516]	@ (800d50c <_dtoa_r+0x584>)
 800d306:	f004 020f 	and.w	r2, r4, #15
 800d30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d316:	f7f3 f99f 	bl	8000658 <__aeabi_dmul>
 800d31a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d31e:	1124      	asrs	r4, r4, #4
 800d320:	2300      	movs	r3, #0
 800d322:	2602      	movs	r6, #2
 800d324:	2c00      	cmp	r4, #0
 800d326:	f040 808f 	bne.w	800d448 <_dtoa_r+0x4c0>
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1d3      	bne.n	800d2d6 <_dtoa_r+0x34e>
 800d32e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d330:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 8094 	beq.w	800d462 <_dtoa_r+0x4da>
 800d33a:	4b75      	ldr	r3, [pc, #468]	@ (800d510 <_dtoa_r+0x588>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	4620      	mov	r0, r4
 800d340:	4629      	mov	r1, r5
 800d342:	f7f3 fbfb 	bl	8000b3c <__aeabi_dcmplt>
 800d346:	2800      	cmp	r0, #0
 800d348:	f000 808b 	beq.w	800d462 <_dtoa_r+0x4da>
 800d34c:	9b03      	ldr	r3, [sp, #12]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 8087 	beq.w	800d462 <_dtoa_r+0x4da>
 800d354:	f1bb 0f00 	cmp.w	fp, #0
 800d358:	dd34      	ble.n	800d3c4 <_dtoa_r+0x43c>
 800d35a:	4620      	mov	r0, r4
 800d35c:	4b6d      	ldr	r3, [pc, #436]	@ (800d514 <_dtoa_r+0x58c>)
 800d35e:	2200      	movs	r2, #0
 800d360:	4629      	mov	r1, r5
 800d362:	f7f3 f979 	bl	8000658 <__aeabi_dmul>
 800d366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d36a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d36e:	3601      	adds	r6, #1
 800d370:	465c      	mov	r4, fp
 800d372:	4630      	mov	r0, r6
 800d374:	f7f3 f906 	bl	8000584 <__aeabi_i2d>
 800d378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d37c:	f7f3 f96c 	bl	8000658 <__aeabi_dmul>
 800d380:	4b65      	ldr	r3, [pc, #404]	@ (800d518 <_dtoa_r+0x590>)
 800d382:	2200      	movs	r2, #0
 800d384:	f7f2 ffb2 	bl	80002ec <__adddf3>
 800d388:	4605      	mov	r5, r0
 800d38a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d38e:	2c00      	cmp	r4, #0
 800d390:	d16a      	bne.n	800d468 <_dtoa_r+0x4e0>
 800d392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d396:	4b61      	ldr	r3, [pc, #388]	@ (800d51c <_dtoa_r+0x594>)
 800d398:	2200      	movs	r2, #0
 800d39a:	f7f2 ffa5 	bl	80002e8 <__aeabi_dsub>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d3a6:	462a      	mov	r2, r5
 800d3a8:	4633      	mov	r3, r6
 800d3aa:	f7f3 fbe5 	bl	8000b78 <__aeabi_dcmpgt>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	f040 8298 	bne.w	800d8e4 <_dtoa_r+0x95c>
 800d3b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3b8:	462a      	mov	r2, r5
 800d3ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d3be:	f7f3 fbbd 	bl	8000b3c <__aeabi_dcmplt>
 800d3c2:	bb38      	cbnz	r0, 800d414 <_dtoa_r+0x48c>
 800d3c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d3c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d3cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f2c0 8157 	blt.w	800d682 <_dtoa_r+0x6fa>
 800d3d4:	2f0e      	cmp	r7, #14
 800d3d6:	f300 8154 	bgt.w	800d682 <_dtoa_r+0x6fa>
 800d3da:	4b4b      	ldr	r3, [pc, #300]	@ (800d508 <_dtoa_r+0x580>)
 800d3dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3e0:	ed93 7b00 	vldr	d7, [r3]
 800d3e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	ed8d 7b00 	vstr	d7, [sp]
 800d3ec:	f280 80e5 	bge.w	800d5ba <_dtoa_r+0x632>
 800d3f0:	9b03      	ldr	r3, [sp, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f300 80e1 	bgt.w	800d5ba <_dtoa_r+0x632>
 800d3f8:	d10c      	bne.n	800d414 <_dtoa_r+0x48c>
 800d3fa:	4b48      	ldr	r3, [pc, #288]	@ (800d51c <_dtoa_r+0x594>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	ec51 0b17 	vmov	r0, r1, d7
 800d402:	f7f3 f929 	bl	8000658 <__aeabi_dmul>
 800d406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d40a:	f7f3 fbab 	bl	8000b64 <__aeabi_dcmpge>
 800d40e:	2800      	cmp	r0, #0
 800d410:	f000 8266 	beq.w	800d8e0 <_dtoa_r+0x958>
 800d414:	2400      	movs	r4, #0
 800d416:	4625      	mov	r5, r4
 800d418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d41a:	4656      	mov	r6, sl
 800d41c:	ea6f 0803 	mvn.w	r8, r3
 800d420:	2700      	movs	r7, #0
 800d422:	4621      	mov	r1, r4
 800d424:	4648      	mov	r0, r9
 800d426:	f000 fcbf 	bl	800dda8 <_Bfree>
 800d42a:	2d00      	cmp	r5, #0
 800d42c:	f000 80bd 	beq.w	800d5aa <_dtoa_r+0x622>
 800d430:	b12f      	cbz	r7, 800d43e <_dtoa_r+0x4b6>
 800d432:	42af      	cmp	r7, r5
 800d434:	d003      	beq.n	800d43e <_dtoa_r+0x4b6>
 800d436:	4639      	mov	r1, r7
 800d438:	4648      	mov	r0, r9
 800d43a:	f000 fcb5 	bl	800dda8 <_Bfree>
 800d43e:	4629      	mov	r1, r5
 800d440:	4648      	mov	r0, r9
 800d442:	f000 fcb1 	bl	800dda8 <_Bfree>
 800d446:	e0b0      	b.n	800d5aa <_dtoa_r+0x622>
 800d448:	07e2      	lsls	r2, r4, #31
 800d44a:	d505      	bpl.n	800d458 <_dtoa_r+0x4d0>
 800d44c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d450:	f7f3 f902 	bl	8000658 <__aeabi_dmul>
 800d454:	3601      	adds	r6, #1
 800d456:	2301      	movs	r3, #1
 800d458:	1064      	asrs	r4, r4, #1
 800d45a:	3508      	adds	r5, #8
 800d45c:	e762      	b.n	800d324 <_dtoa_r+0x39c>
 800d45e:	2602      	movs	r6, #2
 800d460:	e765      	b.n	800d32e <_dtoa_r+0x3a6>
 800d462:	9c03      	ldr	r4, [sp, #12]
 800d464:	46b8      	mov	r8, r7
 800d466:	e784      	b.n	800d372 <_dtoa_r+0x3ea>
 800d468:	4b27      	ldr	r3, [pc, #156]	@ (800d508 <_dtoa_r+0x580>)
 800d46a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d46c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d470:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d474:	4454      	add	r4, sl
 800d476:	2900      	cmp	r1, #0
 800d478:	d054      	beq.n	800d524 <_dtoa_r+0x59c>
 800d47a:	4929      	ldr	r1, [pc, #164]	@ (800d520 <_dtoa_r+0x598>)
 800d47c:	2000      	movs	r0, #0
 800d47e:	f7f3 fa15 	bl	80008ac <__aeabi_ddiv>
 800d482:	4633      	mov	r3, r6
 800d484:	462a      	mov	r2, r5
 800d486:	f7f2 ff2f 	bl	80002e8 <__aeabi_dsub>
 800d48a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d48e:	4656      	mov	r6, sl
 800d490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d494:	f7f3 fb90 	bl	8000bb8 <__aeabi_d2iz>
 800d498:	4605      	mov	r5, r0
 800d49a:	f7f3 f873 	bl	8000584 <__aeabi_i2d>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4a6:	f7f2 ff1f 	bl	80002e8 <__aeabi_dsub>
 800d4aa:	3530      	adds	r5, #48	@ 0x30
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d4b4:	f806 5b01 	strb.w	r5, [r6], #1
 800d4b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d4bc:	f7f3 fb3e 	bl	8000b3c <__aeabi_dcmplt>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d172      	bne.n	800d5aa <_dtoa_r+0x622>
 800d4c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4c8:	4911      	ldr	r1, [pc, #68]	@ (800d510 <_dtoa_r+0x588>)
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	f7f2 ff0c 	bl	80002e8 <__aeabi_dsub>
 800d4d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d4d4:	f7f3 fb32 	bl	8000b3c <__aeabi_dcmplt>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f040 80b4 	bne.w	800d646 <_dtoa_r+0x6be>
 800d4de:	42a6      	cmp	r6, r4
 800d4e0:	f43f af70 	beq.w	800d3c4 <_dtoa_r+0x43c>
 800d4e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d514 <_dtoa_r+0x58c>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f7f3 f8b4 	bl	8000658 <__aeabi_dmul>
 800d4f0:	4b08      	ldr	r3, [pc, #32]	@ (800d514 <_dtoa_r+0x58c>)
 800d4f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4fc:	f7f3 f8ac 	bl	8000658 <__aeabi_dmul>
 800d500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d504:	e7c4      	b.n	800d490 <_dtoa_r+0x508>
 800d506:	bf00      	nop
 800d508:	080124f0 	.word	0x080124f0
 800d50c:	080124c8 	.word	0x080124c8
 800d510:	3ff00000 	.word	0x3ff00000
 800d514:	40240000 	.word	0x40240000
 800d518:	401c0000 	.word	0x401c0000
 800d51c:	40140000 	.word	0x40140000
 800d520:	3fe00000 	.word	0x3fe00000
 800d524:	4631      	mov	r1, r6
 800d526:	4628      	mov	r0, r5
 800d528:	f7f3 f896 	bl	8000658 <__aeabi_dmul>
 800d52c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d530:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d532:	4656      	mov	r6, sl
 800d534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d538:	f7f3 fb3e 	bl	8000bb8 <__aeabi_d2iz>
 800d53c:	4605      	mov	r5, r0
 800d53e:	f7f3 f821 	bl	8000584 <__aeabi_i2d>
 800d542:	4602      	mov	r2, r0
 800d544:	460b      	mov	r3, r1
 800d546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d54a:	f7f2 fecd 	bl	80002e8 <__aeabi_dsub>
 800d54e:	3530      	adds	r5, #48	@ 0x30
 800d550:	f806 5b01 	strb.w	r5, [r6], #1
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	42a6      	cmp	r6, r4
 800d55a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d55e:	f04f 0200 	mov.w	r2, #0
 800d562:	d124      	bne.n	800d5ae <_dtoa_r+0x626>
 800d564:	4baf      	ldr	r3, [pc, #700]	@ (800d824 <_dtoa_r+0x89c>)
 800d566:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d56a:	f7f2 febf 	bl	80002ec <__adddf3>
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d576:	f7f3 faff 	bl	8000b78 <__aeabi_dcmpgt>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d163      	bne.n	800d646 <_dtoa_r+0x6be>
 800d57e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d582:	49a8      	ldr	r1, [pc, #672]	@ (800d824 <_dtoa_r+0x89c>)
 800d584:	2000      	movs	r0, #0
 800d586:	f7f2 feaf 	bl	80002e8 <__aeabi_dsub>
 800d58a:	4602      	mov	r2, r0
 800d58c:	460b      	mov	r3, r1
 800d58e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d592:	f7f3 fad3 	bl	8000b3c <__aeabi_dcmplt>
 800d596:	2800      	cmp	r0, #0
 800d598:	f43f af14 	beq.w	800d3c4 <_dtoa_r+0x43c>
 800d59c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d59e:	1e73      	subs	r3, r6, #1
 800d5a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d5a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d5a6:	2b30      	cmp	r3, #48	@ 0x30
 800d5a8:	d0f8      	beq.n	800d59c <_dtoa_r+0x614>
 800d5aa:	4647      	mov	r7, r8
 800d5ac:	e03b      	b.n	800d626 <_dtoa_r+0x69e>
 800d5ae:	4b9e      	ldr	r3, [pc, #632]	@ (800d828 <_dtoa_r+0x8a0>)
 800d5b0:	f7f3 f852 	bl	8000658 <__aeabi_dmul>
 800d5b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5b8:	e7bc      	b.n	800d534 <_dtoa_r+0x5ac>
 800d5ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d5be:	4656      	mov	r6, sl
 800d5c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	f7f3 f970 	bl	80008ac <__aeabi_ddiv>
 800d5cc:	f7f3 faf4 	bl	8000bb8 <__aeabi_d2iz>
 800d5d0:	4680      	mov	r8, r0
 800d5d2:	f7f2 ffd7 	bl	8000584 <__aeabi_i2d>
 800d5d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5da:	f7f3 f83d 	bl	8000658 <__aeabi_dmul>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5ea:	f7f2 fe7d 	bl	80002e8 <__aeabi_dsub>
 800d5ee:	f806 4b01 	strb.w	r4, [r6], #1
 800d5f2:	9d03      	ldr	r5, [sp, #12]
 800d5f4:	eba6 040a 	sub.w	r4, r6, sl
 800d5f8:	42a5      	cmp	r5, r4
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	d133      	bne.n	800d668 <_dtoa_r+0x6e0>
 800d600:	f7f2 fe74 	bl	80002ec <__adddf3>
 800d604:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d608:	4604      	mov	r4, r0
 800d60a:	460d      	mov	r5, r1
 800d60c:	f7f3 fab4 	bl	8000b78 <__aeabi_dcmpgt>
 800d610:	b9c0      	cbnz	r0, 800d644 <_dtoa_r+0x6bc>
 800d612:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d616:	4620      	mov	r0, r4
 800d618:	4629      	mov	r1, r5
 800d61a:	f7f3 fa85 	bl	8000b28 <__aeabi_dcmpeq>
 800d61e:	b110      	cbz	r0, 800d626 <_dtoa_r+0x69e>
 800d620:	f018 0f01 	tst.w	r8, #1
 800d624:	d10e      	bne.n	800d644 <_dtoa_r+0x6bc>
 800d626:	9902      	ldr	r1, [sp, #8]
 800d628:	4648      	mov	r0, r9
 800d62a:	f000 fbbd 	bl	800dda8 <_Bfree>
 800d62e:	2300      	movs	r3, #0
 800d630:	7033      	strb	r3, [r6, #0]
 800d632:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d634:	3701      	adds	r7, #1
 800d636:	601f      	str	r7, [r3, #0]
 800d638:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f000 824b 	beq.w	800dad6 <_dtoa_r+0xb4e>
 800d640:	601e      	str	r6, [r3, #0]
 800d642:	e248      	b.n	800dad6 <_dtoa_r+0xb4e>
 800d644:	46b8      	mov	r8, r7
 800d646:	4633      	mov	r3, r6
 800d648:	461e      	mov	r6, r3
 800d64a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d64e:	2a39      	cmp	r2, #57	@ 0x39
 800d650:	d106      	bne.n	800d660 <_dtoa_r+0x6d8>
 800d652:	459a      	cmp	sl, r3
 800d654:	d1f8      	bne.n	800d648 <_dtoa_r+0x6c0>
 800d656:	2230      	movs	r2, #48	@ 0x30
 800d658:	f108 0801 	add.w	r8, r8, #1
 800d65c:	f88a 2000 	strb.w	r2, [sl]
 800d660:	781a      	ldrb	r2, [r3, #0]
 800d662:	3201      	adds	r2, #1
 800d664:	701a      	strb	r2, [r3, #0]
 800d666:	e7a0      	b.n	800d5aa <_dtoa_r+0x622>
 800d668:	4b6f      	ldr	r3, [pc, #444]	@ (800d828 <_dtoa_r+0x8a0>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	f7f2 fff4 	bl	8000658 <__aeabi_dmul>
 800d670:	2200      	movs	r2, #0
 800d672:	2300      	movs	r3, #0
 800d674:	4604      	mov	r4, r0
 800d676:	460d      	mov	r5, r1
 800d678:	f7f3 fa56 	bl	8000b28 <__aeabi_dcmpeq>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d09f      	beq.n	800d5c0 <_dtoa_r+0x638>
 800d680:	e7d1      	b.n	800d626 <_dtoa_r+0x69e>
 800d682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d684:	2a00      	cmp	r2, #0
 800d686:	f000 80ea 	beq.w	800d85e <_dtoa_r+0x8d6>
 800d68a:	9a07      	ldr	r2, [sp, #28]
 800d68c:	2a01      	cmp	r2, #1
 800d68e:	f300 80cd 	bgt.w	800d82c <_dtoa_r+0x8a4>
 800d692:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d694:	2a00      	cmp	r2, #0
 800d696:	f000 80c1 	beq.w	800d81c <_dtoa_r+0x894>
 800d69a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d69e:	9c08      	ldr	r4, [sp, #32]
 800d6a0:	9e00      	ldr	r6, [sp, #0]
 800d6a2:	9a00      	ldr	r2, [sp, #0]
 800d6a4:	441a      	add	r2, r3
 800d6a6:	9200      	str	r2, [sp, #0]
 800d6a8:	9a06      	ldr	r2, [sp, #24]
 800d6aa:	2101      	movs	r1, #1
 800d6ac:	441a      	add	r2, r3
 800d6ae:	4648      	mov	r0, r9
 800d6b0:	9206      	str	r2, [sp, #24]
 800d6b2:	f000 fc77 	bl	800dfa4 <__i2b>
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	b166      	cbz	r6, 800d6d4 <_dtoa_r+0x74c>
 800d6ba:	9b06      	ldr	r3, [sp, #24]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dd09      	ble.n	800d6d4 <_dtoa_r+0x74c>
 800d6c0:	42b3      	cmp	r3, r6
 800d6c2:	9a00      	ldr	r2, [sp, #0]
 800d6c4:	bfa8      	it	ge
 800d6c6:	4633      	movge	r3, r6
 800d6c8:	1ad2      	subs	r2, r2, r3
 800d6ca:	9200      	str	r2, [sp, #0]
 800d6cc:	9a06      	ldr	r2, [sp, #24]
 800d6ce:	1af6      	subs	r6, r6, r3
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	9306      	str	r3, [sp, #24]
 800d6d4:	9b08      	ldr	r3, [sp, #32]
 800d6d6:	b30b      	cbz	r3, 800d71c <_dtoa_r+0x794>
 800d6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 80c6 	beq.w	800d86c <_dtoa_r+0x8e4>
 800d6e0:	2c00      	cmp	r4, #0
 800d6e2:	f000 80c0 	beq.w	800d866 <_dtoa_r+0x8de>
 800d6e6:	4629      	mov	r1, r5
 800d6e8:	4622      	mov	r2, r4
 800d6ea:	4648      	mov	r0, r9
 800d6ec:	f000 fd12 	bl	800e114 <__pow5mult>
 800d6f0:	9a02      	ldr	r2, [sp, #8]
 800d6f2:	4601      	mov	r1, r0
 800d6f4:	4605      	mov	r5, r0
 800d6f6:	4648      	mov	r0, r9
 800d6f8:	f000 fc6a 	bl	800dfd0 <__multiply>
 800d6fc:	9902      	ldr	r1, [sp, #8]
 800d6fe:	4680      	mov	r8, r0
 800d700:	4648      	mov	r0, r9
 800d702:	f000 fb51 	bl	800dda8 <_Bfree>
 800d706:	9b08      	ldr	r3, [sp, #32]
 800d708:	1b1b      	subs	r3, r3, r4
 800d70a:	9308      	str	r3, [sp, #32]
 800d70c:	f000 80b1 	beq.w	800d872 <_dtoa_r+0x8ea>
 800d710:	9a08      	ldr	r2, [sp, #32]
 800d712:	4641      	mov	r1, r8
 800d714:	4648      	mov	r0, r9
 800d716:	f000 fcfd 	bl	800e114 <__pow5mult>
 800d71a:	9002      	str	r0, [sp, #8]
 800d71c:	2101      	movs	r1, #1
 800d71e:	4648      	mov	r0, r9
 800d720:	f000 fc40 	bl	800dfa4 <__i2b>
 800d724:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d726:	4604      	mov	r4, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f000 81d8 	beq.w	800dade <_dtoa_r+0xb56>
 800d72e:	461a      	mov	r2, r3
 800d730:	4601      	mov	r1, r0
 800d732:	4648      	mov	r0, r9
 800d734:	f000 fcee 	bl	800e114 <__pow5mult>
 800d738:	9b07      	ldr	r3, [sp, #28]
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	4604      	mov	r4, r0
 800d73e:	f300 809f 	bgt.w	800d880 <_dtoa_r+0x8f8>
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f040 8097 	bne.w	800d878 <_dtoa_r+0x8f0>
 800d74a:	9b05      	ldr	r3, [sp, #20]
 800d74c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d750:	2b00      	cmp	r3, #0
 800d752:	f040 8093 	bne.w	800d87c <_dtoa_r+0x8f4>
 800d756:	9b05      	ldr	r3, [sp, #20]
 800d758:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d75c:	0d1b      	lsrs	r3, r3, #20
 800d75e:	051b      	lsls	r3, r3, #20
 800d760:	b133      	cbz	r3, 800d770 <_dtoa_r+0x7e8>
 800d762:	9b00      	ldr	r3, [sp, #0]
 800d764:	3301      	adds	r3, #1
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	9b06      	ldr	r3, [sp, #24]
 800d76a:	3301      	adds	r3, #1
 800d76c:	9306      	str	r3, [sp, #24]
 800d76e:	2301      	movs	r3, #1
 800d770:	9308      	str	r3, [sp, #32]
 800d772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 81b8 	beq.w	800daea <_dtoa_r+0xb62>
 800d77a:	6923      	ldr	r3, [r4, #16]
 800d77c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d780:	6918      	ldr	r0, [r3, #16]
 800d782:	f000 fbc3 	bl	800df0c <__hi0bits>
 800d786:	f1c0 0020 	rsb	r0, r0, #32
 800d78a:	9b06      	ldr	r3, [sp, #24]
 800d78c:	4418      	add	r0, r3
 800d78e:	f010 001f 	ands.w	r0, r0, #31
 800d792:	f000 8082 	beq.w	800d89a <_dtoa_r+0x912>
 800d796:	f1c0 0320 	rsb	r3, r0, #32
 800d79a:	2b04      	cmp	r3, #4
 800d79c:	dd73      	ble.n	800d886 <_dtoa_r+0x8fe>
 800d79e:	9b00      	ldr	r3, [sp, #0]
 800d7a0:	f1c0 001c 	rsb	r0, r0, #28
 800d7a4:	4403      	add	r3, r0
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	9b06      	ldr	r3, [sp, #24]
 800d7aa:	4403      	add	r3, r0
 800d7ac:	4406      	add	r6, r0
 800d7ae:	9306      	str	r3, [sp, #24]
 800d7b0:	9b00      	ldr	r3, [sp, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	dd05      	ble.n	800d7c2 <_dtoa_r+0x83a>
 800d7b6:	9902      	ldr	r1, [sp, #8]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	4648      	mov	r0, r9
 800d7bc:	f000 fd04 	bl	800e1c8 <__lshift>
 800d7c0:	9002      	str	r0, [sp, #8]
 800d7c2:	9b06      	ldr	r3, [sp, #24]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	dd05      	ble.n	800d7d4 <_dtoa_r+0x84c>
 800d7c8:	4621      	mov	r1, r4
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	4648      	mov	r0, r9
 800d7ce:	f000 fcfb 	bl	800e1c8 <__lshift>
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d061      	beq.n	800d89e <_dtoa_r+0x916>
 800d7da:	9802      	ldr	r0, [sp, #8]
 800d7dc:	4621      	mov	r1, r4
 800d7de:	f000 fd5f 	bl	800e2a0 <__mcmp>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	da5b      	bge.n	800d89e <_dtoa_r+0x916>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	9902      	ldr	r1, [sp, #8]
 800d7ea:	220a      	movs	r2, #10
 800d7ec:	4648      	mov	r0, r9
 800d7ee:	f000 fafd 	bl	800ddec <__multadd>
 800d7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7f4:	9002      	str	r0, [sp, #8]
 800d7f6:	f107 38ff 	add.w	r8, r7, #4294967295
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	f000 8177 	beq.w	800daee <_dtoa_r+0xb66>
 800d800:	4629      	mov	r1, r5
 800d802:	2300      	movs	r3, #0
 800d804:	220a      	movs	r2, #10
 800d806:	4648      	mov	r0, r9
 800d808:	f000 faf0 	bl	800ddec <__multadd>
 800d80c:	f1bb 0f00 	cmp.w	fp, #0
 800d810:	4605      	mov	r5, r0
 800d812:	dc6f      	bgt.n	800d8f4 <_dtoa_r+0x96c>
 800d814:	9b07      	ldr	r3, [sp, #28]
 800d816:	2b02      	cmp	r3, #2
 800d818:	dc49      	bgt.n	800d8ae <_dtoa_r+0x926>
 800d81a:	e06b      	b.n	800d8f4 <_dtoa_r+0x96c>
 800d81c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d81e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d822:	e73c      	b.n	800d69e <_dtoa_r+0x716>
 800d824:	3fe00000 	.word	0x3fe00000
 800d828:	40240000 	.word	0x40240000
 800d82c:	9b03      	ldr	r3, [sp, #12]
 800d82e:	1e5c      	subs	r4, r3, #1
 800d830:	9b08      	ldr	r3, [sp, #32]
 800d832:	42a3      	cmp	r3, r4
 800d834:	db09      	blt.n	800d84a <_dtoa_r+0x8c2>
 800d836:	1b1c      	subs	r4, r3, r4
 800d838:	9b03      	ldr	r3, [sp, #12]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f6bf af30 	bge.w	800d6a0 <_dtoa_r+0x718>
 800d840:	9b00      	ldr	r3, [sp, #0]
 800d842:	9a03      	ldr	r2, [sp, #12]
 800d844:	1a9e      	subs	r6, r3, r2
 800d846:	2300      	movs	r3, #0
 800d848:	e72b      	b.n	800d6a2 <_dtoa_r+0x71a>
 800d84a:	9b08      	ldr	r3, [sp, #32]
 800d84c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d84e:	9408      	str	r4, [sp, #32]
 800d850:	1ae3      	subs	r3, r4, r3
 800d852:	441a      	add	r2, r3
 800d854:	9e00      	ldr	r6, [sp, #0]
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	920d      	str	r2, [sp, #52]	@ 0x34
 800d85a:	2400      	movs	r4, #0
 800d85c:	e721      	b.n	800d6a2 <_dtoa_r+0x71a>
 800d85e:	9c08      	ldr	r4, [sp, #32]
 800d860:	9e00      	ldr	r6, [sp, #0]
 800d862:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d864:	e728      	b.n	800d6b8 <_dtoa_r+0x730>
 800d866:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d86a:	e751      	b.n	800d710 <_dtoa_r+0x788>
 800d86c:	9a08      	ldr	r2, [sp, #32]
 800d86e:	9902      	ldr	r1, [sp, #8]
 800d870:	e750      	b.n	800d714 <_dtoa_r+0x78c>
 800d872:	f8cd 8008 	str.w	r8, [sp, #8]
 800d876:	e751      	b.n	800d71c <_dtoa_r+0x794>
 800d878:	2300      	movs	r3, #0
 800d87a:	e779      	b.n	800d770 <_dtoa_r+0x7e8>
 800d87c:	9b04      	ldr	r3, [sp, #16]
 800d87e:	e777      	b.n	800d770 <_dtoa_r+0x7e8>
 800d880:	2300      	movs	r3, #0
 800d882:	9308      	str	r3, [sp, #32]
 800d884:	e779      	b.n	800d77a <_dtoa_r+0x7f2>
 800d886:	d093      	beq.n	800d7b0 <_dtoa_r+0x828>
 800d888:	9a00      	ldr	r2, [sp, #0]
 800d88a:	331c      	adds	r3, #28
 800d88c:	441a      	add	r2, r3
 800d88e:	9200      	str	r2, [sp, #0]
 800d890:	9a06      	ldr	r2, [sp, #24]
 800d892:	441a      	add	r2, r3
 800d894:	441e      	add	r6, r3
 800d896:	9206      	str	r2, [sp, #24]
 800d898:	e78a      	b.n	800d7b0 <_dtoa_r+0x828>
 800d89a:	4603      	mov	r3, r0
 800d89c:	e7f4      	b.n	800d888 <_dtoa_r+0x900>
 800d89e:	9b03      	ldr	r3, [sp, #12]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	46b8      	mov	r8, r7
 800d8a4:	dc20      	bgt.n	800d8e8 <_dtoa_r+0x960>
 800d8a6:	469b      	mov	fp, r3
 800d8a8:	9b07      	ldr	r3, [sp, #28]
 800d8aa:	2b02      	cmp	r3, #2
 800d8ac:	dd1e      	ble.n	800d8ec <_dtoa_r+0x964>
 800d8ae:	f1bb 0f00 	cmp.w	fp, #0
 800d8b2:	f47f adb1 	bne.w	800d418 <_dtoa_r+0x490>
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	465b      	mov	r3, fp
 800d8ba:	2205      	movs	r2, #5
 800d8bc:	4648      	mov	r0, r9
 800d8be:	f000 fa95 	bl	800ddec <__multadd>
 800d8c2:	4601      	mov	r1, r0
 800d8c4:	4604      	mov	r4, r0
 800d8c6:	9802      	ldr	r0, [sp, #8]
 800d8c8:	f000 fcea 	bl	800e2a0 <__mcmp>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	f77f ada3 	ble.w	800d418 <_dtoa_r+0x490>
 800d8d2:	4656      	mov	r6, sl
 800d8d4:	2331      	movs	r3, #49	@ 0x31
 800d8d6:	f806 3b01 	strb.w	r3, [r6], #1
 800d8da:	f108 0801 	add.w	r8, r8, #1
 800d8de:	e59f      	b.n	800d420 <_dtoa_r+0x498>
 800d8e0:	9c03      	ldr	r4, [sp, #12]
 800d8e2:	46b8      	mov	r8, r7
 800d8e4:	4625      	mov	r5, r4
 800d8e6:	e7f4      	b.n	800d8d2 <_dtoa_r+0x94a>
 800d8e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f000 8101 	beq.w	800daf6 <_dtoa_r+0xb6e>
 800d8f4:	2e00      	cmp	r6, #0
 800d8f6:	dd05      	ble.n	800d904 <_dtoa_r+0x97c>
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	4632      	mov	r2, r6
 800d8fc:	4648      	mov	r0, r9
 800d8fe:	f000 fc63 	bl	800e1c8 <__lshift>
 800d902:	4605      	mov	r5, r0
 800d904:	9b08      	ldr	r3, [sp, #32]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d05c      	beq.n	800d9c4 <_dtoa_r+0xa3c>
 800d90a:	6869      	ldr	r1, [r5, #4]
 800d90c:	4648      	mov	r0, r9
 800d90e:	f000 fa0b 	bl	800dd28 <_Balloc>
 800d912:	4606      	mov	r6, r0
 800d914:	b928      	cbnz	r0, 800d922 <_dtoa_r+0x99a>
 800d916:	4b82      	ldr	r3, [pc, #520]	@ (800db20 <_dtoa_r+0xb98>)
 800d918:	4602      	mov	r2, r0
 800d91a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d91e:	f7ff bb4a 	b.w	800cfb6 <_dtoa_r+0x2e>
 800d922:	692a      	ldr	r2, [r5, #16]
 800d924:	3202      	adds	r2, #2
 800d926:	0092      	lsls	r2, r2, #2
 800d928:	f105 010c 	add.w	r1, r5, #12
 800d92c:	300c      	adds	r0, #12
 800d92e:	f002 f959 	bl	800fbe4 <memcpy>
 800d932:	2201      	movs	r2, #1
 800d934:	4631      	mov	r1, r6
 800d936:	4648      	mov	r0, r9
 800d938:	f000 fc46 	bl	800e1c8 <__lshift>
 800d93c:	f10a 0301 	add.w	r3, sl, #1
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	eb0a 030b 	add.w	r3, sl, fp
 800d946:	9308      	str	r3, [sp, #32]
 800d948:	9b04      	ldr	r3, [sp, #16]
 800d94a:	f003 0301 	and.w	r3, r3, #1
 800d94e:	462f      	mov	r7, r5
 800d950:	9306      	str	r3, [sp, #24]
 800d952:	4605      	mov	r5, r0
 800d954:	9b00      	ldr	r3, [sp, #0]
 800d956:	9802      	ldr	r0, [sp, #8]
 800d958:	4621      	mov	r1, r4
 800d95a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d95e:	f7ff fa8b 	bl	800ce78 <quorem>
 800d962:	4603      	mov	r3, r0
 800d964:	3330      	adds	r3, #48	@ 0x30
 800d966:	9003      	str	r0, [sp, #12]
 800d968:	4639      	mov	r1, r7
 800d96a:	9802      	ldr	r0, [sp, #8]
 800d96c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d96e:	f000 fc97 	bl	800e2a0 <__mcmp>
 800d972:	462a      	mov	r2, r5
 800d974:	9004      	str	r0, [sp, #16]
 800d976:	4621      	mov	r1, r4
 800d978:	4648      	mov	r0, r9
 800d97a:	f000 fcad 	bl	800e2d8 <__mdiff>
 800d97e:	68c2      	ldr	r2, [r0, #12]
 800d980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d982:	4606      	mov	r6, r0
 800d984:	bb02      	cbnz	r2, 800d9c8 <_dtoa_r+0xa40>
 800d986:	4601      	mov	r1, r0
 800d988:	9802      	ldr	r0, [sp, #8]
 800d98a:	f000 fc89 	bl	800e2a0 <__mcmp>
 800d98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d990:	4602      	mov	r2, r0
 800d992:	4631      	mov	r1, r6
 800d994:	4648      	mov	r0, r9
 800d996:	920c      	str	r2, [sp, #48]	@ 0x30
 800d998:	9309      	str	r3, [sp, #36]	@ 0x24
 800d99a:	f000 fa05 	bl	800dda8 <_Bfree>
 800d99e:	9b07      	ldr	r3, [sp, #28]
 800d9a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d9a2:	9e00      	ldr	r6, [sp, #0]
 800d9a4:	ea42 0103 	orr.w	r1, r2, r3
 800d9a8:	9b06      	ldr	r3, [sp, #24]
 800d9aa:	4319      	orrs	r1, r3
 800d9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9ae:	d10d      	bne.n	800d9cc <_dtoa_r+0xa44>
 800d9b0:	2b39      	cmp	r3, #57	@ 0x39
 800d9b2:	d027      	beq.n	800da04 <_dtoa_r+0xa7c>
 800d9b4:	9a04      	ldr	r2, [sp, #16]
 800d9b6:	2a00      	cmp	r2, #0
 800d9b8:	dd01      	ble.n	800d9be <_dtoa_r+0xa36>
 800d9ba:	9b03      	ldr	r3, [sp, #12]
 800d9bc:	3331      	adds	r3, #49	@ 0x31
 800d9be:	f88b 3000 	strb.w	r3, [fp]
 800d9c2:	e52e      	b.n	800d422 <_dtoa_r+0x49a>
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	e7b9      	b.n	800d93c <_dtoa_r+0x9b4>
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	e7e2      	b.n	800d992 <_dtoa_r+0xa0a>
 800d9cc:	9904      	ldr	r1, [sp, #16]
 800d9ce:	2900      	cmp	r1, #0
 800d9d0:	db04      	blt.n	800d9dc <_dtoa_r+0xa54>
 800d9d2:	9807      	ldr	r0, [sp, #28]
 800d9d4:	4301      	orrs	r1, r0
 800d9d6:	9806      	ldr	r0, [sp, #24]
 800d9d8:	4301      	orrs	r1, r0
 800d9da:	d120      	bne.n	800da1e <_dtoa_r+0xa96>
 800d9dc:	2a00      	cmp	r2, #0
 800d9de:	ddee      	ble.n	800d9be <_dtoa_r+0xa36>
 800d9e0:	9902      	ldr	r1, [sp, #8]
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	4648      	mov	r0, r9
 800d9e8:	f000 fbee 	bl	800e1c8 <__lshift>
 800d9ec:	4621      	mov	r1, r4
 800d9ee:	9002      	str	r0, [sp, #8]
 800d9f0:	f000 fc56 	bl	800e2a0 <__mcmp>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	9b00      	ldr	r3, [sp, #0]
 800d9f8:	dc02      	bgt.n	800da00 <_dtoa_r+0xa78>
 800d9fa:	d1e0      	bne.n	800d9be <_dtoa_r+0xa36>
 800d9fc:	07da      	lsls	r2, r3, #31
 800d9fe:	d5de      	bpl.n	800d9be <_dtoa_r+0xa36>
 800da00:	2b39      	cmp	r3, #57	@ 0x39
 800da02:	d1da      	bne.n	800d9ba <_dtoa_r+0xa32>
 800da04:	2339      	movs	r3, #57	@ 0x39
 800da06:	f88b 3000 	strb.w	r3, [fp]
 800da0a:	4633      	mov	r3, r6
 800da0c:	461e      	mov	r6, r3
 800da0e:	3b01      	subs	r3, #1
 800da10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800da14:	2a39      	cmp	r2, #57	@ 0x39
 800da16:	d04e      	beq.n	800dab6 <_dtoa_r+0xb2e>
 800da18:	3201      	adds	r2, #1
 800da1a:	701a      	strb	r2, [r3, #0]
 800da1c:	e501      	b.n	800d422 <_dtoa_r+0x49a>
 800da1e:	2a00      	cmp	r2, #0
 800da20:	dd03      	ble.n	800da2a <_dtoa_r+0xaa2>
 800da22:	2b39      	cmp	r3, #57	@ 0x39
 800da24:	d0ee      	beq.n	800da04 <_dtoa_r+0xa7c>
 800da26:	3301      	adds	r3, #1
 800da28:	e7c9      	b.n	800d9be <_dtoa_r+0xa36>
 800da2a:	9a00      	ldr	r2, [sp, #0]
 800da2c:	9908      	ldr	r1, [sp, #32]
 800da2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800da32:	428a      	cmp	r2, r1
 800da34:	d028      	beq.n	800da88 <_dtoa_r+0xb00>
 800da36:	9902      	ldr	r1, [sp, #8]
 800da38:	2300      	movs	r3, #0
 800da3a:	220a      	movs	r2, #10
 800da3c:	4648      	mov	r0, r9
 800da3e:	f000 f9d5 	bl	800ddec <__multadd>
 800da42:	42af      	cmp	r7, r5
 800da44:	9002      	str	r0, [sp, #8]
 800da46:	f04f 0300 	mov.w	r3, #0
 800da4a:	f04f 020a 	mov.w	r2, #10
 800da4e:	4639      	mov	r1, r7
 800da50:	4648      	mov	r0, r9
 800da52:	d107      	bne.n	800da64 <_dtoa_r+0xadc>
 800da54:	f000 f9ca 	bl	800ddec <__multadd>
 800da58:	4607      	mov	r7, r0
 800da5a:	4605      	mov	r5, r0
 800da5c:	9b00      	ldr	r3, [sp, #0]
 800da5e:	3301      	adds	r3, #1
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	e777      	b.n	800d954 <_dtoa_r+0x9cc>
 800da64:	f000 f9c2 	bl	800ddec <__multadd>
 800da68:	4629      	mov	r1, r5
 800da6a:	4607      	mov	r7, r0
 800da6c:	2300      	movs	r3, #0
 800da6e:	220a      	movs	r2, #10
 800da70:	4648      	mov	r0, r9
 800da72:	f000 f9bb 	bl	800ddec <__multadd>
 800da76:	4605      	mov	r5, r0
 800da78:	e7f0      	b.n	800da5c <_dtoa_r+0xad4>
 800da7a:	f1bb 0f00 	cmp.w	fp, #0
 800da7e:	bfcc      	ite	gt
 800da80:	465e      	movgt	r6, fp
 800da82:	2601      	movle	r6, #1
 800da84:	4456      	add	r6, sl
 800da86:	2700      	movs	r7, #0
 800da88:	9902      	ldr	r1, [sp, #8]
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	2201      	movs	r2, #1
 800da8e:	4648      	mov	r0, r9
 800da90:	f000 fb9a 	bl	800e1c8 <__lshift>
 800da94:	4621      	mov	r1, r4
 800da96:	9002      	str	r0, [sp, #8]
 800da98:	f000 fc02 	bl	800e2a0 <__mcmp>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	dcb4      	bgt.n	800da0a <_dtoa_r+0xa82>
 800daa0:	d102      	bne.n	800daa8 <_dtoa_r+0xb20>
 800daa2:	9b00      	ldr	r3, [sp, #0]
 800daa4:	07db      	lsls	r3, r3, #31
 800daa6:	d4b0      	bmi.n	800da0a <_dtoa_r+0xa82>
 800daa8:	4633      	mov	r3, r6
 800daaa:	461e      	mov	r6, r3
 800daac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dab0:	2a30      	cmp	r2, #48	@ 0x30
 800dab2:	d0fa      	beq.n	800daaa <_dtoa_r+0xb22>
 800dab4:	e4b5      	b.n	800d422 <_dtoa_r+0x49a>
 800dab6:	459a      	cmp	sl, r3
 800dab8:	d1a8      	bne.n	800da0c <_dtoa_r+0xa84>
 800daba:	2331      	movs	r3, #49	@ 0x31
 800dabc:	f108 0801 	add.w	r8, r8, #1
 800dac0:	f88a 3000 	strb.w	r3, [sl]
 800dac4:	e4ad      	b.n	800d422 <_dtoa_r+0x49a>
 800dac6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dac8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800db24 <_dtoa_r+0xb9c>
 800dacc:	b11b      	cbz	r3, 800dad6 <_dtoa_r+0xb4e>
 800dace:	f10a 0308 	add.w	r3, sl, #8
 800dad2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	4650      	mov	r0, sl
 800dad8:	b017      	add	sp, #92	@ 0x5c
 800dada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dade:	9b07      	ldr	r3, [sp, #28]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	f77f ae2e 	ble.w	800d742 <_dtoa_r+0x7ba>
 800dae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dae8:	9308      	str	r3, [sp, #32]
 800daea:	2001      	movs	r0, #1
 800daec:	e64d      	b.n	800d78a <_dtoa_r+0x802>
 800daee:	f1bb 0f00 	cmp.w	fp, #0
 800daf2:	f77f aed9 	ble.w	800d8a8 <_dtoa_r+0x920>
 800daf6:	4656      	mov	r6, sl
 800daf8:	9802      	ldr	r0, [sp, #8]
 800dafa:	4621      	mov	r1, r4
 800dafc:	f7ff f9bc 	bl	800ce78 <quorem>
 800db00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800db04:	f806 3b01 	strb.w	r3, [r6], #1
 800db08:	eba6 020a 	sub.w	r2, r6, sl
 800db0c:	4593      	cmp	fp, r2
 800db0e:	ddb4      	ble.n	800da7a <_dtoa_r+0xaf2>
 800db10:	9902      	ldr	r1, [sp, #8]
 800db12:	2300      	movs	r3, #0
 800db14:	220a      	movs	r2, #10
 800db16:	4648      	mov	r0, r9
 800db18:	f000 f968 	bl	800ddec <__multadd>
 800db1c:	9002      	str	r0, [sp, #8]
 800db1e:	e7eb      	b.n	800daf8 <_dtoa_r+0xb70>
 800db20:	080123d0 	.word	0x080123d0
 800db24:	0801236b 	.word	0x0801236b

0800db28 <_free_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4605      	mov	r5, r0
 800db2c:	2900      	cmp	r1, #0
 800db2e:	d041      	beq.n	800dbb4 <_free_r+0x8c>
 800db30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db34:	1f0c      	subs	r4, r1, #4
 800db36:	2b00      	cmp	r3, #0
 800db38:	bfb8      	it	lt
 800db3a:	18e4      	addlt	r4, r4, r3
 800db3c:	f000 f8e8 	bl	800dd10 <__malloc_lock>
 800db40:	4a1d      	ldr	r2, [pc, #116]	@ (800dbb8 <_free_r+0x90>)
 800db42:	6813      	ldr	r3, [r2, #0]
 800db44:	b933      	cbnz	r3, 800db54 <_free_r+0x2c>
 800db46:	6063      	str	r3, [r4, #4]
 800db48:	6014      	str	r4, [r2, #0]
 800db4a:	4628      	mov	r0, r5
 800db4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db50:	f000 b8e4 	b.w	800dd1c <__malloc_unlock>
 800db54:	42a3      	cmp	r3, r4
 800db56:	d908      	bls.n	800db6a <_free_r+0x42>
 800db58:	6820      	ldr	r0, [r4, #0]
 800db5a:	1821      	adds	r1, r4, r0
 800db5c:	428b      	cmp	r3, r1
 800db5e:	bf01      	itttt	eq
 800db60:	6819      	ldreq	r1, [r3, #0]
 800db62:	685b      	ldreq	r3, [r3, #4]
 800db64:	1809      	addeq	r1, r1, r0
 800db66:	6021      	streq	r1, [r4, #0]
 800db68:	e7ed      	b.n	800db46 <_free_r+0x1e>
 800db6a:	461a      	mov	r2, r3
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	b10b      	cbz	r3, 800db74 <_free_r+0x4c>
 800db70:	42a3      	cmp	r3, r4
 800db72:	d9fa      	bls.n	800db6a <_free_r+0x42>
 800db74:	6811      	ldr	r1, [r2, #0]
 800db76:	1850      	adds	r0, r2, r1
 800db78:	42a0      	cmp	r0, r4
 800db7a:	d10b      	bne.n	800db94 <_free_r+0x6c>
 800db7c:	6820      	ldr	r0, [r4, #0]
 800db7e:	4401      	add	r1, r0
 800db80:	1850      	adds	r0, r2, r1
 800db82:	4283      	cmp	r3, r0
 800db84:	6011      	str	r1, [r2, #0]
 800db86:	d1e0      	bne.n	800db4a <_free_r+0x22>
 800db88:	6818      	ldr	r0, [r3, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	6053      	str	r3, [r2, #4]
 800db8e:	4408      	add	r0, r1
 800db90:	6010      	str	r0, [r2, #0]
 800db92:	e7da      	b.n	800db4a <_free_r+0x22>
 800db94:	d902      	bls.n	800db9c <_free_r+0x74>
 800db96:	230c      	movs	r3, #12
 800db98:	602b      	str	r3, [r5, #0]
 800db9a:	e7d6      	b.n	800db4a <_free_r+0x22>
 800db9c:	6820      	ldr	r0, [r4, #0]
 800db9e:	1821      	adds	r1, r4, r0
 800dba0:	428b      	cmp	r3, r1
 800dba2:	bf04      	itt	eq
 800dba4:	6819      	ldreq	r1, [r3, #0]
 800dba6:	685b      	ldreq	r3, [r3, #4]
 800dba8:	6063      	str	r3, [r4, #4]
 800dbaa:	bf04      	itt	eq
 800dbac:	1809      	addeq	r1, r1, r0
 800dbae:	6021      	streq	r1, [r4, #0]
 800dbb0:	6054      	str	r4, [r2, #4]
 800dbb2:	e7ca      	b.n	800db4a <_free_r+0x22>
 800dbb4:	bd38      	pop	{r3, r4, r5, pc}
 800dbb6:	bf00      	nop
 800dbb8:	200011e0 	.word	0x200011e0

0800dbbc <malloc>:
 800dbbc:	4b02      	ldr	r3, [pc, #8]	@ (800dbc8 <malloc+0xc>)
 800dbbe:	4601      	mov	r1, r0
 800dbc0:	6818      	ldr	r0, [r3, #0]
 800dbc2:	f000 b825 	b.w	800dc10 <_malloc_r>
 800dbc6:	bf00      	nop
 800dbc8:	20000044 	.word	0x20000044

0800dbcc <sbrk_aligned>:
 800dbcc:	b570      	push	{r4, r5, r6, lr}
 800dbce:	4e0f      	ldr	r6, [pc, #60]	@ (800dc0c <sbrk_aligned+0x40>)
 800dbd0:	460c      	mov	r4, r1
 800dbd2:	6831      	ldr	r1, [r6, #0]
 800dbd4:	4605      	mov	r5, r0
 800dbd6:	b911      	cbnz	r1, 800dbde <sbrk_aligned+0x12>
 800dbd8:	f001 fff4 	bl	800fbc4 <_sbrk_r>
 800dbdc:	6030      	str	r0, [r6, #0]
 800dbde:	4621      	mov	r1, r4
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	f001 ffef 	bl	800fbc4 <_sbrk_r>
 800dbe6:	1c43      	adds	r3, r0, #1
 800dbe8:	d103      	bne.n	800dbf2 <sbrk_aligned+0x26>
 800dbea:	f04f 34ff 	mov.w	r4, #4294967295
 800dbee:	4620      	mov	r0, r4
 800dbf0:	bd70      	pop	{r4, r5, r6, pc}
 800dbf2:	1cc4      	adds	r4, r0, #3
 800dbf4:	f024 0403 	bic.w	r4, r4, #3
 800dbf8:	42a0      	cmp	r0, r4
 800dbfa:	d0f8      	beq.n	800dbee <sbrk_aligned+0x22>
 800dbfc:	1a21      	subs	r1, r4, r0
 800dbfe:	4628      	mov	r0, r5
 800dc00:	f001 ffe0 	bl	800fbc4 <_sbrk_r>
 800dc04:	3001      	adds	r0, #1
 800dc06:	d1f2      	bne.n	800dbee <sbrk_aligned+0x22>
 800dc08:	e7ef      	b.n	800dbea <sbrk_aligned+0x1e>
 800dc0a:	bf00      	nop
 800dc0c:	200011dc 	.word	0x200011dc

0800dc10 <_malloc_r>:
 800dc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc14:	1ccd      	adds	r5, r1, #3
 800dc16:	f025 0503 	bic.w	r5, r5, #3
 800dc1a:	3508      	adds	r5, #8
 800dc1c:	2d0c      	cmp	r5, #12
 800dc1e:	bf38      	it	cc
 800dc20:	250c      	movcc	r5, #12
 800dc22:	2d00      	cmp	r5, #0
 800dc24:	4606      	mov	r6, r0
 800dc26:	db01      	blt.n	800dc2c <_malloc_r+0x1c>
 800dc28:	42a9      	cmp	r1, r5
 800dc2a:	d904      	bls.n	800dc36 <_malloc_r+0x26>
 800dc2c:	230c      	movs	r3, #12
 800dc2e:	6033      	str	r3, [r6, #0]
 800dc30:	2000      	movs	r0, #0
 800dc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd0c <_malloc_r+0xfc>
 800dc3a:	f000 f869 	bl	800dd10 <__malloc_lock>
 800dc3e:	f8d8 3000 	ldr.w	r3, [r8]
 800dc42:	461c      	mov	r4, r3
 800dc44:	bb44      	cbnz	r4, 800dc98 <_malloc_r+0x88>
 800dc46:	4629      	mov	r1, r5
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f7ff ffbf 	bl	800dbcc <sbrk_aligned>
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	4604      	mov	r4, r0
 800dc52:	d158      	bne.n	800dd06 <_malloc_r+0xf6>
 800dc54:	f8d8 4000 	ldr.w	r4, [r8]
 800dc58:	4627      	mov	r7, r4
 800dc5a:	2f00      	cmp	r7, #0
 800dc5c:	d143      	bne.n	800dce6 <_malloc_r+0xd6>
 800dc5e:	2c00      	cmp	r4, #0
 800dc60:	d04b      	beq.n	800dcfa <_malloc_r+0xea>
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	4639      	mov	r1, r7
 800dc66:	4630      	mov	r0, r6
 800dc68:	eb04 0903 	add.w	r9, r4, r3
 800dc6c:	f001 ffaa 	bl	800fbc4 <_sbrk_r>
 800dc70:	4581      	cmp	r9, r0
 800dc72:	d142      	bne.n	800dcfa <_malloc_r+0xea>
 800dc74:	6821      	ldr	r1, [r4, #0]
 800dc76:	1a6d      	subs	r5, r5, r1
 800dc78:	4629      	mov	r1, r5
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f7ff ffa6 	bl	800dbcc <sbrk_aligned>
 800dc80:	3001      	adds	r0, #1
 800dc82:	d03a      	beq.n	800dcfa <_malloc_r+0xea>
 800dc84:	6823      	ldr	r3, [r4, #0]
 800dc86:	442b      	add	r3, r5
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc8e:	685a      	ldr	r2, [r3, #4]
 800dc90:	bb62      	cbnz	r2, 800dcec <_malloc_r+0xdc>
 800dc92:	f8c8 7000 	str.w	r7, [r8]
 800dc96:	e00f      	b.n	800dcb8 <_malloc_r+0xa8>
 800dc98:	6822      	ldr	r2, [r4, #0]
 800dc9a:	1b52      	subs	r2, r2, r5
 800dc9c:	d420      	bmi.n	800dce0 <_malloc_r+0xd0>
 800dc9e:	2a0b      	cmp	r2, #11
 800dca0:	d917      	bls.n	800dcd2 <_malloc_r+0xc2>
 800dca2:	1961      	adds	r1, r4, r5
 800dca4:	42a3      	cmp	r3, r4
 800dca6:	6025      	str	r5, [r4, #0]
 800dca8:	bf18      	it	ne
 800dcaa:	6059      	strne	r1, [r3, #4]
 800dcac:	6863      	ldr	r3, [r4, #4]
 800dcae:	bf08      	it	eq
 800dcb0:	f8c8 1000 	streq.w	r1, [r8]
 800dcb4:	5162      	str	r2, [r4, r5]
 800dcb6:	604b      	str	r3, [r1, #4]
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f000 f82f 	bl	800dd1c <__malloc_unlock>
 800dcbe:	f104 000b 	add.w	r0, r4, #11
 800dcc2:	1d23      	adds	r3, r4, #4
 800dcc4:	f020 0007 	bic.w	r0, r0, #7
 800dcc8:	1ac2      	subs	r2, r0, r3
 800dcca:	bf1c      	itt	ne
 800dccc:	1a1b      	subne	r3, r3, r0
 800dcce:	50a3      	strne	r3, [r4, r2]
 800dcd0:	e7af      	b.n	800dc32 <_malloc_r+0x22>
 800dcd2:	6862      	ldr	r2, [r4, #4]
 800dcd4:	42a3      	cmp	r3, r4
 800dcd6:	bf0c      	ite	eq
 800dcd8:	f8c8 2000 	streq.w	r2, [r8]
 800dcdc:	605a      	strne	r2, [r3, #4]
 800dcde:	e7eb      	b.n	800dcb8 <_malloc_r+0xa8>
 800dce0:	4623      	mov	r3, r4
 800dce2:	6864      	ldr	r4, [r4, #4]
 800dce4:	e7ae      	b.n	800dc44 <_malloc_r+0x34>
 800dce6:	463c      	mov	r4, r7
 800dce8:	687f      	ldr	r7, [r7, #4]
 800dcea:	e7b6      	b.n	800dc5a <_malloc_r+0x4a>
 800dcec:	461a      	mov	r2, r3
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	42a3      	cmp	r3, r4
 800dcf2:	d1fb      	bne.n	800dcec <_malloc_r+0xdc>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	6053      	str	r3, [r2, #4]
 800dcf8:	e7de      	b.n	800dcb8 <_malloc_r+0xa8>
 800dcfa:	230c      	movs	r3, #12
 800dcfc:	6033      	str	r3, [r6, #0]
 800dcfe:	4630      	mov	r0, r6
 800dd00:	f000 f80c 	bl	800dd1c <__malloc_unlock>
 800dd04:	e794      	b.n	800dc30 <_malloc_r+0x20>
 800dd06:	6005      	str	r5, [r0, #0]
 800dd08:	e7d6      	b.n	800dcb8 <_malloc_r+0xa8>
 800dd0a:	bf00      	nop
 800dd0c:	200011e0 	.word	0x200011e0

0800dd10 <__malloc_lock>:
 800dd10:	4801      	ldr	r0, [pc, #4]	@ (800dd18 <__malloc_lock+0x8>)
 800dd12:	f7ff b88a 	b.w	800ce2a <__retarget_lock_acquire_recursive>
 800dd16:	bf00      	nop
 800dd18:	200011d8 	.word	0x200011d8

0800dd1c <__malloc_unlock>:
 800dd1c:	4801      	ldr	r0, [pc, #4]	@ (800dd24 <__malloc_unlock+0x8>)
 800dd1e:	f7ff b885 	b.w	800ce2c <__retarget_lock_release_recursive>
 800dd22:	bf00      	nop
 800dd24:	200011d8 	.word	0x200011d8

0800dd28 <_Balloc>:
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	69c6      	ldr	r6, [r0, #28]
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	460d      	mov	r5, r1
 800dd30:	b976      	cbnz	r6, 800dd50 <_Balloc+0x28>
 800dd32:	2010      	movs	r0, #16
 800dd34:	f7ff ff42 	bl	800dbbc <malloc>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	61e0      	str	r0, [r4, #28]
 800dd3c:	b920      	cbnz	r0, 800dd48 <_Balloc+0x20>
 800dd3e:	4b18      	ldr	r3, [pc, #96]	@ (800dda0 <_Balloc+0x78>)
 800dd40:	4818      	ldr	r0, [pc, #96]	@ (800dda4 <_Balloc+0x7c>)
 800dd42:	216b      	movs	r1, #107	@ 0x6b
 800dd44:	f7ff f87a 	bl	800ce3c <__assert_func>
 800dd48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd4c:	6006      	str	r6, [r0, #0]
 800dd4e:	60c6      	str	r6, [r0, #12]
 800dd50:	69e6      	ldr	r6, [r4, #28]
 800dd52:	68f3      	ldr	r3, [r6, #12]
 800dd54:	b183      	cbz	r3, 800dd78 <_Balloc+0x50>
 800dd56:	69e3      	ldr	r3, [r4, #28]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd5e:	b9b8      	cbnz	r0, 800dd90 <_Balloc+0x68>
 800dd60:	2101      	movs	r1, #1
 800dd62:	fa01 f605 	lsl.w	r6, r1, r5
 800dd66:	1d72      	adds	r2, r6, #5
 800dd68:	0092      	lsls	r2, r2, #2
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f001 ff57 	bl	800fc1e <_calloc_r>
 800dd70:	b160      	cbz	r0, 800dd8c <_Balloc+0x64>
 800dd72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd76:	e00e      	b.n	800dd96 <_Balloc+0x6e>
 800dd78:	2221      	movs	r2, #33	@ 0x21
 800dd7a:	2104      	movs	r1, #4
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	f001 ff4e 	bl	800fc1e <_calloc_r>
 800dd82:	69e3      	ldr	r3, [r4, #28]
 800dd84:	60f0      	str	r0, [r6, #12]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1e4      	bne.n	800dd56 <_Balloc+0x2e>
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	6802      	ldr	r2, [r0, #0]
 800dd92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd96:	2300      	movs	r3, #0
 800dd98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd9c:	e7f7      	b.n	800dd8e <_Balloc+0x66>
 800dd9e:	bf00      	nop
 800dda0:	080122be 	.word	0x080122be
 800dda4:	080123e1 	.word	0x080123e1

0800dda8 <_Bfree>:
 800dda8:	b570      	push	{r4, r5, r6, lr}
 800ddaa:	69c6      	ldr	r6, [r0, #28]
 800ddac:	4605      	mov	r5, r0
 800ddae:	460c      	mov	r4, r1
 800ddb0:	b976      	cbnz	r6, 800ddd0 <_Bfree+0x28>
 800ddb2:	2010      	movs	r0, #16
 800ddb4:	f7ff ff02 	bl	800dbbc <malloc>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	61e8      	str	r0, [r5, #28]
 800ddbc:	b920      	cbnz	r0, 800ddc8 <_Bfree+0x20>
 800ddbe:	4b09      	ldr	r3, [pc, #36]	@ (800dde4 <_Bfree+0x3c>)
 800ddc0:	4809      	ldr	r0, [pc, #36]	@ (800dde8 <_Bfree+0x40>)
 800ddc2:	218f      	movs	r1, #143	@ 0x8f
 800ddc4:	f7ff f83a 	bl	800ce3c <__assert_func>
 800ddc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddcc:	6006      	str	r6, [r0, #0]
 800ddce:	60c6      	str	r6, [r0, #12]
 800ddd0:	b13c      	cbz	r4, 800dde2 <_Bfree+0x3a>
 800ddd2:	69eb      	ldr	r3, [r5, #28]
 800ddd4:	6862      	ldr	r2, [r4, #4]
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dddc:	6021      	str	r1, [r4, #0]
 800ddde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dde2:	bd70      	pop	{r4, r5, r6, pc}
 800dde4:	080122be 	.word	0x080122be
 800dde8:	080123e1 	.word	0x080123e1

0800ddec <__multadd>:
 800ddec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf0:	690d      	ldr	r5, [r1, #16]
 800ddf2:	4607      	mov	r7, r0
 800ddf4:	460c      	mov	r4, r1
 800ddf6:	461e      	mov	r6, r3
 800ddf8:	f101 0c14 	add.w	ip, r1, #20
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	f8dc 3000 	ldr.w	r3, [ip]
 800de02:	b299      	uxth	r1, r3
 800de04:	fb02 6101 	mla	r1, r2, r1, r6
 800de08:	0c1e      	lsrs	r6, r3, #16
 800de0a:	0c0b      	lsrs	r3, r1, #16
 800de0c:	fb02 3306 	mla	r3, r2, r6, r3
 800de10:	b289      	uxth	r1, r1
 800de12:	3001      	adds	r0, #1
 800de14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de18:	4285      	cmp	r5, r0
 800de1a:	f84c 1b04 	str.w	r1, [ip], #4
 800de1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de22:	dcec      	bgt.n	800ddfe <__multadd+0x12>
 800de24:	b30e      	cbz	r6, 800de6a <__multadd+0x7e>
 800de26:	68a3      	ldr	r3, [r4, #8]
 800de28:	42ab      	cmp	r3, r5
 800de2a:	dc19      	bgt.n	800de60 <__multadd+0x74>
 800de2c:	6861      	ldr	r1, [r4, #4]
 800de2e:	4638      	mov	r0, r7
 800de30:	3101      	adds	r1, #1
 800de32:	f7ff ff79 	bl	800dd28 <_Balloc>
 800de36:	4680      	mov	r8, r0
 800de38:	b928      	cbnz	r0, 800de46 <__multadd+0x5a>
 800de3a:	4602      	mov	r2, r0
 800de3c:	4b0c      	ldr	r3, [pc, #48]	@ (800de70 <__multadd+0x84>)
 800de3e:	480d      	ldr	r0, [pc, #52]	@ (800de74 <__multadd+0x88>)
 800de40:	21ba      	movs	r1, #186	@ 0xba
 800de42:	f7fe fffb 	bl	800ce3c <__assert_func>
 800de46:	6922      	ldr	r2, [r4, #16]
 800de48:	3202      	adds	r2, #2
 800de4a:	f104 010c 	add.w	r1, r4, #12
 800de4e:	0092      	lsls	r2, r2, #2
 800de50:	300c      	adds	r0, #12
 800de52:	f001 fec7 	bl	800fbe4 <memcpy>
 800de56:	4621      	mov	r1, r4
 800de58:	4638      	mov	r0, r7
 800de5a:	f7ff ffa5 	bl	800dda8 <_Bfree>
 800de5e:	4644      	mov	r4, r8
 800de60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de64:	3501      	adds	r5, #1
 800de66:	615e      	str	r6, [r3, #20]
 800de68:	6125      	str	r5, [r4, #16]
 800de6a:	4620      	mov	r0, r4
 800de6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de70:	080123d0 	.word	0x080123d0
 800de74:	080123e1 	.word	0x080123e1

0800de78 <__s2b>:
 800de78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de7c:	460c      	mov	r4, r1
 800de7e:	4615      	mov	r5, r2
 800de80:	461f      	mov	r7, r3
 800de82:	2209      	movs	r2, #9
 800de84:	3308      	adds	r3, #8
 800de86:	4606      	mov	r6, r0
 800de88:	fb93 f3f2 	sdiv	r3, r3, r2
 800de8c:	2100      	movs	r1, #0
 800de8e:	2201      	movs	r2, #1
 800de90:	429a      	cmp	r2, r3
 800de92:	db09      	blt.n	800dea8 <__s2b+0x30>
 800de94:	4630      	mov	r0, r6
 800de96:	f7ff ff47 	bl	800dd28 <_Balloc>
 800de9a:	b940      	cbnz	r0, 800deae <__s2b+0x36>
 800de9c:	4602      	mov	r2, r0
 800de9e:	4b19      	ldr	r3, [pc, #100]	@ (800df04 <__s2b+0x8c>)
 800dea0:	4819      	ldr	r0, [pc, #100]	@ (800df08 <__s2b+0x90>)
 800dea2:	21d3      	movs	r1, #211	@ 0xd3
 800dea4:	f7fe ffca 	bl	800ce3c <__assert_func>
 800dea8:	0052      	lsls	r2, r2, #1
 800deaa:	3101      	adds	r1, #1
 800deac:	e7f0      	b.n	800de90 <__s2b+0x18>
 800deae:	9b08      	ldr	r3, [sp, #32]
 800deb0:	6143      	str	r3, [r0, #20]
 800deb2:	2d09      	cmp	r5, #9
 800deb4:	f04f 0301 	mov.w	r3, #1
 800deb8:	6103      	str	r3, [r0, #16]
 800deba:	dd16      	ble.n	800deea <__s2b+0x72>
 800debc:	f104 0909 	add.w	r9, r4, #9
 800dec0:	46c8      	mov	r8, r9
 800dec2:	442c      	add	r4, r5
 800dec4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dec8:	4601      	mov	r1, r0
 800deca:	3b30      	subs	r3, #48	@ 0x30
 800decc:	220a      	movs	r2, #10
 800dece:	4630      	mov	r0, r6
 800ded0:	f7ff ff8c 	bl	800ddec <__multadd>
 800ded4:	45a0      	cmp	r8, r4
 800ded6:	d1f5      	bne.n	800dec4 <__s2b+0x4c>
 800ded8:	f1a5 0408 	sub.w	r4, r5, #8
 800dedc:	444c      	add	r4, r9
 800dede:	1b2d      	subs	r5, r5, r4
 800dee0:	1963      	adds	r3, r4, r5
 800dee2:	42bb      	cmp	r3, r7
 800dee4:	db04      	blt.n	800def0 <__s2b+0x78>
 800dee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deea:	340a      	adds	r4, #10
 800deec:	2509      	movs	r5, #9
 800deee:	e7f6      	b.n	800dede <__s2b+0x66>
 800def0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800def4:	4601      	mov	r1, r0
 800def6:	3b30      	subs	r3, #48	@ 0x30
 800def8:	220a      	movs	r2, #10
 800defa:	4630      	mov	r0, r6
 800defc:	f7ff ff76 	bl	800ddec <__multadd>
 800df00:	e7ee      	b.n	800dee0 <__s2b+0x68>
 800df02:	bf00      	nop
 800df04:	080123d0 	.word	0x080123d0
 800df08:	080123e1 	.word	0x080123e1

0800df0c <__hi0bits>:
 800df0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800df10:	4603      	mov	r3, r0
 800df12:	bf36      	itet	cc
 800df14:	0403      	lslcc	r3, r0, #16
 800df16:	2000      	movcs	r0, #0
 800df18:	2010      	movcc	r0, #16
 800df1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800df1e:	bf3c      	itt	cc
 800df20:	021b      	lslcc	r3, r3, #8
 800df22:	3008      	addcc	r0, #8
 800df24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df28:	bf3c      	itt	cc
 800df2a:	011b      	lslcc	r3, r3, #4
 800df2c:	3004      	addcc	r0, #4
 800df2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df32:	bf3c      	itt	cc
 800df34:	009b      	lslcc	r3, r3, #2
 800df36:	3002      	addcc	r0, #2
 800df38:	2b00      	cmp	r3, #0
 800df3a:	db05      	blt.n	800df48 <__hi0bits+0x3c>
 800df3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800df40:	f100 0001 	add.w	r0, r0, #1
 800df44:	bf08      	it	eq
 800df46:	2020      	moveq	r0, #32
 800df48:	4770      	bx	lr

0800df4a <__lo0bits>:
 800df4a:	6803      	ldr	r3, [r0, #0]
 800df4c:	4602      	mov	r2, r0
 800df4e:	f013 0007 	ands.w	r0, r3, #7
 800df52:	d00b      	beq.n	800df6c <__lo0bits+0x22>
 800df54:	07d9      	lsls	r1, r3, #31
 800df56:	d421      	bmi.n	800df9c <__lo0bits+0x52>
 800df58:	0798      	lsls	r0, r3, #30
 800df5a:	bf49      	itett	mi
 800df5c:	085b      	lsrmi	r3, r3, #1
 800df5e:	089b      	lsrpl	r3, r3, #2
 800df60:	2001      	movmi	r0, #1
 800df62:	6013      	strmi	r3, [r2, #0]
 800df64:	bf5c      	itt	pl
 800df66:	6013      	strpl	r3, [r2, #0]
 800df68:	2002      	movpl	r0, #2
 800df6a:	4770      	bx	lr
 800df6c:	b299      	uxth	r1, r3
 800df6e:	b909      	cbnz	r1, 800df74 <__lo0bits+0x2a>
 800df70:	0c1b      	lsrs	r3, r3, #16
 800df72:	2010      	movs	r0, #16
 800df74:	b2d9      	uxtb	r1, r3
 800df76:	b909      	cbnz	r1, 800df7c <__lo0bits+0x32>
 800df78:	3008      	adds	r0, #8
 800df7a:	0a1b      	lsrs	r3, r3, #8
 800df7c:	0719      	lsls	r1, r3, #28
 800df7e:	bf04      	itt	eq
 800df80:	091b      	lsreq	r3, r3, #4
 800df82:	3004      	addeq	r0, #4
 800df84:	0799      	lsls	r1, r3, #30
 800df86:	bf04      	itt	eq
 800df88:	089b      	lsreq	r3, r3, #2
 800df8a:	3002      	addeq	r0, #2
 800df8c:	07d9      	lsls	r1, r3, #31
 800df8e:	d403      	bmi.n	800df98 <__lo0bits+0x4e>
 800df90:	085b      	lsrs	r3, r3, #1
 800df92:	f100 0001 	add.w	r0, r0, #1
 800df96:	d003      	beq.n	800dfa0 <__lo0bits+0x56>
 800df98:	6013      	str	r3, [r2, #0]
 800df9a:	4770      	bx	lr
 800df9c:	2000      	movs	r0, #0
 800df9e:	4770      	bx	lr
 800dfa0:	2020      	movs	r0, #32
 800dfa2:	4770      	bx	lr

0800dfa4 <__i2b>:
 800dfa4:	b510      	push	{r4, lr}
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	2101      	movs	r1, #1
 800dfaa:	f7ff febd 	bl	800dd28 <_Balloc>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	b928      	cbnz	r0, 800dfbe <__i2b+0x1a>
 800dfb2:	4b05      	ldr	r3, [pc, #20]	@ (800dfc8 <__i2b+0x24>)
 800dfb4:	4805      	ldr	r0, [pc, #20]	@ (800dfcc <__i2b+0x28>)
 800dfb6:	f240 1145 	movw	r1, #325	@ 0x145
 800dfba:	f7fe ff3f 	bl	800ce3c <__assert_func>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	6144      	str	r4, [r0, #20]
 800dfc2:	6103      	str	r3, [r0, #16]
 800dfc4:	bd10      	pop	{r4, pc}
 800dfc6:	bf00      	nop
 800dfc8:	080123d0 	.word	0x080123d0
 800dfcc:	080123e1 	.word	0x080123e1

0800dfd0 <__multiply>:
 800dfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd4:	4617      	mov	r7, r2
 800dfd6:	690a      	ldr	r2, [r1, #16]
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	bfa8      	it	ge
 800dfde:	463b      	movge	r3, r7
 800dfe0:	4689      	mov	r9, r1
 800dfe2:	bfa4      	itt	ge
 800dfe4:	460f      	movge	r7, r1
 800dfe6:	4699      	movge	r9, r3
 800dfe8:	693d      	ldr	r5, [r7, #16]
 800dfea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	6879      	ldr	r1, [r7, #4]
 800dff2:	eb05 060a 	add.w	r6, r5, sl
 800dff6:	42b3      	cmp	r3, r6
 800dff8:	b085      	sub	sp, #20
 800dffa:	bfb8      	it	lt
 800dffc:	3101      	addlt	r1, #1
 800dffe:	f7ff fe93 	bl	800dd28 <_Balloc>
 800e002:	b930      	cbnz	r0, 800e012 <__multiply+0x42>
 800e004:	4602      	mov	r2, r0
 800e006:	4b41      	ldr	r3, [pc, #260]	@ (800e10c <__multiply+0x13c>)
 800e008:	4841      	ldr	r0, [pc, #260]	@ (800e110 <__multiply+0x140>)
 800e00a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e00e:	f7fe ff15 	bl	800ce3c <__assert_func>
 800e012:	f100 0414 	add.w	r4, r0, #20
 800e016:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e01a:	4623      	mov	r3, r4
 800e01c:	2200      	movs	r2, #0
 800e01e:	4573      	cmp	r3, lr
 800e020:	d320      	bcc.n	800e064 <__multiply+0x94>
 800e022:	f107 0814 	add.w	r8, r7, #20
 800e026:	f109 0114 	add.w	r1, r9, #20
 800e02a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e02e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e032:	9302      	str	r3, [sp, #8]
 800e034:	1beb      	subs	r3, r5, r7
 800e036:	3b15      	subs	r3, #21
 800e038:	f023 0303 	bic.w	r3, r3, #3
 800e03c:	3304      	adds	r3, #4
 800e03e:	3715      	adds	r7, #21
 800e040:	42bd      	cmp	r5, r7
 800e042:	bf38      	it	cc
 800e044:	2304      	movcc	r3, #4
 800e046:	9301      	str	r3, [sp, #4]
 800e048:	9b02      	ldr	r3, [sp, #8]
 800e04a:	9103      	str	r1, [sp, #12]
 800e04c:	428b      	cmp	r3, r1
 800e04e:	d80c      	bhi.n	800e06a <__multiply+0x9a>
 800e050:	2e00      	cmp	r6, #0
 800e052:	dd03      	ble.n	800e05c <__multiply+0x8c>
 800e054:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d055      	beq.n	800e108 <__multiply+0x138>
 800e05c:	6106      	str	r6, [r0, #16]
 800e05e:	b005      	add	sp, #20
 800e060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e064:	f843 2b04 	str.w	r2, [r3], #4
 800e068:	e7d9      	b.n	800e01e <__multiply+0x4e>
 800e06a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e06e:	f1ba 0f00 	cmp.w	sl, #0
 800e072:	d01f      	beq.n	800e0b4 <__multiply+0xe4>
 800e074:	46c4      	mov	ip, r8
 800e076:	46a1      	mov	r9, r4
 800e078:	2700      	movs	r7, #0
 800e07a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e07e:	f8d9 3000 	ldr.w	r3, [r9]
 800e082:	fa1f fb82 	uxth.w	fp, r2
 800e086:	b29b      	uxth	r3, r3
 800e088:	fb0a 330b 	mla	r3, sl, fp, r3
 800e08c:	443b      	add	r3, r7
 800e08e:	f8d9 7000 	ldr.w	r7, [r9]
 800e092:	0c12      	lsrs	r2, r2, #16
 800e094:	0c3f      	lsrs	r7, r7, #16
 800e096:	fb0a 7202 	mla	r2, sl, r2, r7
 800e09a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0a4:	4565      	cmp	r5, ip
 800e0a6:	f849 3b04 	str.w	r3, [r9], #4
 800e0aa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e0ae:	d8e4      	bhi.n	800e07a <__multiply+0xaa>
 800e0b0:	9b01      	ldr	r3, [sp, #4]
 800e0b2:	50e7      	str	r7, [r4, r3]
 800e0b4:	9b03      	ldr	r3, [sp, #12]
 800e0b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e0ba:	3104      	adds	r1, #4
 800e0bc:	f1b9 0f00 	cmp.w	r9, #0
 800e0c0:	d020      	beq.n	800e104 <__multiply+0x134>
 800e0c2:	6823      	ldr	r3, [r4, #0]
 800e0c4:	4647      	mov	r7, r8
 800e0c6:	46a4      	mov	ip, r4
 800e0c8:	f04f 0a00 	mov.w	sl, #0
 800e0cc:	f8b7 b000 	ldrh.w	fp, [r7]
 800e0d0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e0d4:	fb09 220b 	mla	r2, r9, fp, r2
 800e0d8:	4452      	add	r2, sl
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0e0:	f84c 3b04 	str.w	r3, [ip], #4
 800e0e4:	f857 3b04 	ldr.w	r3, [r7], #4
 800e0e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0ec:	f8bc 3000 	ldrh.w	r3, [ip]
 800e0f0:	fb09 330a 	mla	r3, r9, sl, r3
 800e0f4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e0f8:	42bd      	cmp	r5, r7
 800e0fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0fe:	d8e5      	bhi.n	800e0cc <__multiply+0xfc>
 800e100:	9a01      	ldr	r2, [sp, #4]
 800e102:	50a3      	str	r3, [r4, r2]
 800e104:	3404      	adds	r4, #4
 800e106:	e79f      	b.n	800e048 <__multiply+0x78>
 800e108:	3e01      	subs	r6, #1
 800e10a:	e7a1      	b.n	800e050 <__multiply+0x80>
 800e10c:	080123d0 	.word	0x080123d0
 800e110:	080123e1 	.word	0x080123e1

0800e114 <__pow5mult>:
 800e114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e118:	4615      	mov	r5, r2
 800e11a:	f012 0203 	ands.w	r2, r2, #3
 800e11e:	4607      	mov	r7, r0
 800e120:	460e      	mov	r6, r1
 800e122:	d007      	beq.n	800e134 <__pow5mult+0x20>
 800e124:	4c25      	ldr	r4, [pc, #148]	@ (800e1bc <__pow5mult+0xa8>)
 800e126:	3a01      	subs	r2, #1
 800e128:	2300      	movs	r3, #0
 800e12a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e12e:	f7ff fe5d 	bl	800ddec <__multadd>
 800e132:	4606      	mov	r6, r0
 800e134:	10ad      	asrs	r5, r5, #2
 800e136:	d03d      	beq.n	800e1b4 <__pow5mult+0xa0>
 800e138:	69fc      	ldr	r4, [r7, #28]
 800e13a:	b97c      	cbnz	r4, 800e15c <__pow5mult+0x48>
 800e13c:	2010      	movs	r0, #16
 800e13e:	f7ff fd3d 	bl	800dbbc <malloc>
 800e142:	4602      	mov	r2, r0
 800e144:	61f8      	str	r0, [r7, #28]
 800e146:	b928      	cbnz	r0, 800e154 <__pow5mult+0x40>
 800e148:	4b1d      	ldr	r3, [pc, #116]	@ (800e1c0 <__pow5mult+0xac>)
 800e14a:	481e      	ldr	r0, [pc, #120]	@ (800e1c4 <__pow5mult+0xb0>)
 800e14c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e150:	f7fe fe74 	bl	800ce3c <__assert_func>
 800e154:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e158:	6004      	str	r4, [r0, #0]
 800e15a:	60c4      	str	r4, [r0, #12]
 800e15c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e160:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e164:	b94c      	cbnz	r4, 800e17a <__pow5mult+0x66>
 800e166:	f240 2171 	movw	r1, #625	@ 0x271
 800e16a:	4638      	mov	r0, r7
 800e16c:	f7ff ff1a 	bl	800dfa4 <__i2b>
 800e170:	2300      	movs	r3, #0
 800e172:	f8c8 0008 	str.w	r0, [r8, #8]
 800e176:	4604      	mov	r4, r0
 800e178:	6003      	str	r3, [r0, #0]
 800e17a:	f04f 0900 	mov.w	r9, #0
 800e17e:	07eb      	lsls	r3, r5, #31
 800e180:	d50a      	bpl.n	800e198 <__pow5mult+0x84>
 800e182:	4631      	mov	r1, r6
 800e184:	4622      	mov	r2, r4
 800e186:	4638      	mov	r0, r7
 800e188:	f7ff ff22 	bl	800dfd0 <__multiply>
 800e18c:	4631      	mov	r1, r6
 800e18e:	4680      	mov	r8, r0
 800e190:	4638      	mov	r0, r7
 800e192:	f7ff fe09 	bl	800dda8 <_Bfree>
 800e196:	4646      	mov	r6, r8
 800e198:	106d      	asrs	r5, r5, #1
 800e19a:	d00b      	beq.n	800e1b4 <__pow5mult+0xa0>
 800e19c:	6820      	ldr	r0, [r4, #0]
 800e19e:	b938      	cbnz	r0, 800e1b0 <__pow5mult+0x9c>
 800e1a0:	4622      	mov	r2, r4
 800e1a2:	4621      	mov	r1, r4
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	f7ff ff13 	bl	800dfd0 <__multiply>
 800e1aa:	6020      	str	r0, [r4, #0]
 800e1ac:	f8c0 9000 	str.w	r9, [r0]
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	e7e4      	b.n	800e17e <__pow5mult+0x6a>
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1ba:	bf00      	nop
 800e1bc:	080124b8 	.word	0x080124b8
 800e1c0:	080122be 	.word	0x080122be
 800e1c4:	080123e1 	.word	0x080123e1

0800e1c8 <__lshift>:
 800e1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1cc:	460c      	mov	r4, r1
 800e1ce:	6849      	ldr	r1, [r1, #4]
 800e1d0:	6923      	ldr	r3, [r4, #16]
 800e1d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1d6:	68a3      	ldr	r3, [r4, #8]
 800e1d8:	4607      	mov	r7, r0
 800e1da:	4691      	mov	r9, r2
 800e1dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1e0:	f108 0601 	add.w	r6, r8, #1
 800e1e4:	42b3      	cmp	r3, r6
 800e1e6:	db0b      	blt.n	800e200 <__lshift+0x38>
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	f7ff fd9d 	bl	800dd28 <_Balloc>
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	b948      	cbnz	r0, 800e206 <__lshift+0x3e>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	4b28      	ldr	r3, [pc, #160]	@ (800e298 <__lshift+0xd0>)
 800e1f6:	4829      	ldr	r0, [pc, #164]	@ (800e29c <__lshift+0xd4>)
 800e1f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e1fc:	f7fe fe1e 	bl	800ce3c <__assert_func>
 800e200:	3101      	adds	r1, #1
 800e202:	005b      	lsls	r3, r3, #1
 800e204:	e7ee      	b.n	800e1e4 <__lshift+0x1c>
 800e206:	2300      	movs	r3, #0
 800e208:	f100 0114 	add.w	r1, r0, #20
 800e20c:	f100 0210 	add.w	r2, r0, #16
 800e210:	4618      	mov	r0, r3
 800e212:	4553      	cmp	r3, sl
 800e214:	db33      	blt.n	800e27e <__lshift+0xb6>
 800e216:	6920      	ldr	r0, [r4, #16]
 800e218:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e21c:	f104 0314 	add.w	r3, r4, #20
 800e220:	f019 091f 	ands.w	r9, r9, #31
 800e224:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e228:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e22c:	d02b      	beq.n	800e286 <__lshift+0xbe>
 800e22e:	f1c9 0e20 	rsb	lr, r9, #32
 800e232:	468a      	mov	sl, r1
 800e234:	2200      	movs	r2, #0
 800e236:	6818      	ldr	r0, [r3, #0]
 800e238:	fa00 f009 	lsl.w	r0, r0, r9
 800e23c:	4310      	orrs	r0, r2
 800e23e:	f84a 0b04 	str.w	r0, [sl], #4
 800e242:	f853 2b04 	ldr.w	r2, [r3], #4
 800e246:	459c      	cmp	ip, r3
 800e248:	fa22 f20e 	lsr.w	r2, r2, lr
 800e24c:	d8f3      	bhi.n	800e236 <__lshift+0x6e>
 800e24e:	ebac 0304 	sub.w	r3, ip, r4
 800e252:	3b15      	subs	r3, #21
 800e254:	f023 0303 	bic.w	r3, r3, #3
 800e258:	3304      	adds	r3, #4
 800e25a:	f104 0015 	add.w	r0, r4, #21
 800e25e:	4560      	cmp	r0, ip
 800e260:	bf88      	it	hi
 800e262:	2304      	movhi	r3, #4
 800e264:	50ca      	str	r2, [r1, r3]
 800e266:	b10a      	cbz	r2, 800e26c <__lshift+0xa4>
 800e268:	f108 0602 	add.w	r6, r8, #2
 800e26c:	3e01      	subs	r6, #1
 800e26e:	4638      	mov	r0, r7
 800e270:	612e      	str	r6, [r5, #16]
 800e272:	4621      	mov	r1, r4
 800e274:	f7ff fd98 	bl	800dda8 <_Bfree>
 800e278:	4628      	mov	r0, r5
 800e27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e27e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e282:	3301      	adds	r3, #1
 800e284:	e7c5      	b.n	800e212 <__lshift+0x4a>
 800e286:	3904      	subs	r1, #4
 800e288:	f853 2b04 	ldr.w	r2, [r3], #4
 800e28c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e290:	459c      	cmp	ip, r3
 800e292:	d8f9      	bhi.n	800e288 <__lshift+0xc0>
 800e294:	e7ea      	b.n	800e26c <__lshift+0xa4>
 800e296:	bf00      	nop
 800e298:	080123d0 	.word	0x080123d0
 800e29c:	080123e1 	.word	0x080123e1

0800e2a0 <__mcmp>:
 800e2a0:	690a      	ldr	r2, [r1, #16]
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	6900      	ldr	r0, [r0, #16]
 800e2a6:	1a80      	subs	r0, r0, r2
 800e2a8:	b530      	push	{r4, r5, lr}
 800e2aa:	d10e      	bne.n	800e2ca <__mcmp+0x2a>
 800e2ac:	3314      	adds	r3, #20
 800e2ae:	3114      	adds	r1, #20
 800e2b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e2b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e2b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e2bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e2c0:	4295      	cmp	r5, r2
 800e2c2:	d003      	beq.n	800e2cc <__mcmp+0x2c>
 800e2c4:	d205      	bcs.n	800e2d2 <__mcmp+0x32>
 800e2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ca:	bd30      	pop	{r4, r5, pc}
 800e2cc:	42a3      	cmp	r3, r4
 800e2ce:	d3f3      	bcc.n	800e2b8 <__mcmp+0x18>
 800e2d0:	e7fb      	b.n	800e2ca <__mcmp+0x2a>
 800e2d2:	2001      	movs	r0, #1
 800e2d4:	e7f9      	b.n	800e2ca <__mcmp+0x2a>
	...

0800e2d8 <__mdiff>:
 800e2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	4689      	mov	r9, r1
 800e2de:	4606      	mov	r6, r0
 800e2e0:	4611      	mov	r1, r2
 800e2e2:	4648      	mov	r0, r9
 800e2e4:	4614      	mov	r4, r2
 800e2e6:	f7ff ffdb 	bl	800e2a0 <__mcmp>
 800e2ea:	1e05      	subs	r5, r0, #0
 800e2ec:	d112      	bne.n	800e314 <__mdiff+0x3c>
 800e2ee:	4629      	mov	r1, r5
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f7ff fd19 	bl	800dd28 <_Balloc>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	b928      	cbnz	r0, 800e306 <__mdiff+0x2e>
 800e2fa:	4b3f      	ldr	r3, [pc, #252]	@ (800e3f8 <__mdiff+0x120>)
 800e2fc:	f240 2137 	movw	r1, #567	@ 0x237
 800e300:	483e      	ldr	r0, [pc, #248]	@ (800e3fc <__mdiff+0x124>)
 800e302:	f7fe fd9b 	bl	800ce3c <__assert_func>
 800e306:	2301      	movs	r3, #1
 800e308:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e30c:	4610      	mov	r0, r2
 800e30e:	b003      	add	sp, #12
 800e310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e314:	bfbc      	itt	lt
 800e316:	464b      	movlt	r3, r9
 800e318:	46a1      	movlt	r9, r4
 800e31a:	4630      	mov	r0, r6
 800e31c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e320:	bfba      	itte	lt
 800e322:	461c      	movlt	r4, r3
 800e324:	2501      	movlt	r5, #1
 800e326:	2500      	movge	r5, #0
 800e328:	f7ff fcfe 	bl	800dd28 <_Balloc>
 800e32c:	4602      	mov	r2, r0
 800e32e:	b918      	cbnz	r0, 800e338 <__mdiff+0x60>
 800e330:	4b31      	ldr	r3, [pc, #196]	@ (800e3f8 <__mdiff+0x120>)
 800e332:	f240 2145 	movw	r1, #581	@ 0x245
 800e336:	e7e3      	b.n	800e300 <__mdiff+0x28>
 800e338:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e33c:	6926      	ldr	r6, [r4, #16]
 800e33e:	60c5      	str	r5, [r0, #12]
 800e340:	f109 0310 	add.w	r3, r9, #16
 800e344:	f109 0514 	add.w	r5, r9, #20
 800e348:	f104 0e14 	add.w	lr, r4, #20
 800e34c:	f100 0b14 	add.w	fp, r0, #20
 800e350:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e354:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e358:	9301      	str	r3, [sp, #4]
 800e35a:	46d9      	mov	r9, fp
 800e35c:	f04f 0c00 	mov.w	ip, #0
 800e360:	9b01      	ldr	r3, [sp, #4]
 800e362:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e366:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e36a:	9301      	str	r3, [sp, #4]
 800e36c:	fa1f f38a 	uxth.w	r3, sl
 800e370:	4619      	mov	r1, r3
 800e372:	b283      	uxth	r3, r0
 800e374:	1acb      	subs	r3, r1, r3
 800e376:	0c00      	lsrs	r0, r0, #16
 800e378:	4463      	add	r3, ip
 800e37a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e37e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e382:	b29b      	uxth	r3, r3
 800e384:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e388:	4576      	cmp	r6, lr
 800e38a:	f849 3b04 	str.w	r3, [r9], #4
 800e38e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e392:	d8e5      	bhi.n	800e360 <__mdiff+0x88>
 800e394:	1b33      	subs	r3, r6, r4
 800e396:	3b15      	subs	r3, #21
 800e398:	f023 0303 	bic.w	r3, r3, #3
 800e39c:	3415      	adds	r4, #21
 800e39e:	3304      	adds	r3, #4
 800e3a0:	42a6      	cmp	r6, r4
 800e3a2:	bf38      	it	cc
 800e3a4:	2304      	movcc	r3, #4
 800e3a6:	441d      	add	r5, r3
 800e3a8:	445b      	add	r3, fp
 800e3aa:	461e      	mov	r6, r3
 800e3ac:	462c      	mov	r4, r5
 800e3ae:	4544      	cmp	r4, r8
 800e3b0:	d30e      	bcc.n	800e3d0 <__mdiff+0xf8>
 800e3b2:	f108 0103 	add.w	r1, r8, #3
 800e3b6:	1b49      	subs	r1, r1, r5
 800e3b8:	f021 0103 	bic.w	r1, r1, #3
 800e3bc:	3d03      	subs	r5, #3
 800e3be:	45a8      	cmp	r8, r5
 800e3c0:	bf38      	it	cc
 800e3c2:	2100      	movcc	r1, #0
 800e3c4:	440b      	add	r3, r1
 800e3c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3ca:	b191      	cbz	r1, 800e3f2 <__mdiff+0x11a>
 800e3cc:	6117      	str	r7, [r2, #16]
 800e3ce:	e79d      	b.n	800e30c <__mdiff+0x34>
 800e3d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e3d4:	46e6      	mov	lr, ip
 800e3d6:	0c08      	lsrs	r0, r1, #16
 800e3d8:	fa1c fc81 	uxtah	ip, ip, r1
 800e3dc:	4471      	add	r1, lr
 800e3de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e3e2:	b289      	uxth	r1, r1
 800e3e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e3e8:	f846 1b04 	str.w	r1, [r6], #4
 800e3ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e3f0:	e7dd      	b.n	800e3ae <__mdiff+0xd6>
 800e3f2:	3f01      	subs	r7, #1
 800e3f4:	e7e7      	b.n	800e3c6 <__mdiff+0xee>
 800e3f6:	bf00      	nop
 800e3f8:	080123d0 	.word	0x080123d0
 800e3fc:	080123e1 	.word	0x080123e1

0800e400 <__ulp>:
 800e400:	b082      	sub	sp, #8
 800e402:	ed8d 0b00 	vstr	d0, [sp]
 800e406:	9a01      	ldr	r2, [sp, #4]
 800e408:	4b0f      	ldr	r3, [pc, #60]	@ (800e448 <__ulp+0x48>)
 800e40a:	4013      	ands	r3, r2
 800e40c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e410:	2b00      	cmp	r3, #0
 800e412:	dc08      	bgt.n	800e426 <__ulp+0x26>
 800e414:	425b      	negs	r3, r3
 800e416:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e41a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e41e:	da04      	bge.n	800e42a <__ulp+0x2a>
 800e420:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e424:	4113      	asrs	r3, r2
 800e426:	2200      	movs	r2, #0
 800e428:	e008      	b.n	800e43c <__ulp+0x3c>
 800e42a:	f1a2 0314 	sub.w	r3, r2, #20
 800e42e:	2b1e      	cmp	r3, #30
 800e430:	bfda      	itte	le
 800e432:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e436:	40da      	lsrle	r2, r3
 800e438:	2201      	movgt	r2, #1
 800e43a:	2300      	movs	r3, #0
 800e43c:	4619      	mov	r1, r3
 800e43e:	4610      	mov	r0, r2
 800e440:	ec41 0b10 	vmov	d0, r0, r1
 800e444:	b002      	add	sp, #8
 800e446:	4770      	bx	lr
 800e448:	7ff00000 	.word	0x7ff00000

0800e44c <__b2d>:
 800e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e450:	6906      	ldr	r6, [r0, #16]
 800e452:	f100 0814 	add.w	r8, r0, #20
 800e456:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e45a:	1f37      	subs	r7, r6, #4
 800e45c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e460:	4610      	mov	r0, r2
 800e462:	f7ff fd53 	bl	800df0c <__hi0bits>
 800e466:	f1c0 0320 	rsb	r3, r0, #32
 800e46a:	280a      	cmp	r0, #10
 800e46c:	600b      	str	r3, [r1, #0]
 800e46e:	491b      	ldr	r1, [pc, #108]	@ (800e4dc <__b2d+0x90>)
 800e470:	dc15      	bgt.n	800e49e <__b2d+0x52>
 800e472:	f1c0 0c0b 	rsb	ip, r0, #11
 800e476:	fa22 f30c 	lsr.w	r3, r2, ip
 800e47a:	45b8      	cmp	r8, r7
 800e47c:	ea43 0501 	orr.w	r5, r3, r1
 800e480:	bf34      	ite	cc
 800e482:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e486:	2300      	movcs	r3, #0
 800e488:	3015      	adds	r0, #21
 800e48a:	fa02 f000 	lsl.w	r0, r2, r0
 800e48e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e492:	4303      	orrs	r3, r0
 800e494:	461c      	mov	r4, r3
 800e496:	ec45 4b10 	vmov	d0, r4, r5
 800e49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e49e:	45b8      	cmp	r8, r7
 800e4a0:	bf3a      	itte	cc
 800e4a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e4a6:	f1a6 0708 	subcc.w	r7, r6, #8
 800e4aa:	2300      	movcs	r3, #0
 800e4ac:	380b      	subs	r0, #11
 800e4ae:	d012      	beq.n	800e4d6 <__b2d+0x8a>
 800e4b0:	f1c0 0120 	rsb	r1, r0, #32
 800e4b4:	fa23 f401 	lsr.w	r4, r3, r1
 800e4b8:	4082      	lsls	r2, r0
 800e4ba:	4322      	orrs	r2, r4
 800e4bc:	4547      	cmp	r7, r8
 800e4be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e4c2:	bf8c      	ite	hi
 800e4c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e4c8:	2200      	movls	r2, #0
 800e4ca:	4083      	lsls	r3, r0
 800e4cc:	40ca      	lsrs	r2, r1
 800e4ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	e7de      	b.n	800e494 <__b2d+0x48>
 800e4d6:	ea42 0501 	orr.w	r5, r2, r1
 800e4da:	e7db      	b.n	800e494 <__b2d+0x48>
 800e4dc:	3ff00000 	.word	0x3ff00000

0800e4e0 <__d2b>:
 800e4e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4e4:	460f      	mov	r7, r1
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	ec59 8b10 	vmov	r8, r9, d0
 800e4ec:	4616      	mov	r6, r2
 800e4ee:	f7ff fc1b 	bl	800dd28 <_Balloc>
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	b930      	cbnz	r0, 800e504 <__d2b+0x24>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	4b23      	ldr	r3, [pc, #140]	@ (800e588 <__d2b+0xa8>)
 800e4fa:	4824      	ldr	r0, [pc, #144]	@ (800e58c <__d2b+0xac>)
 800e4fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800e500:	f7fe fc9c 	bl	800ce3c <__assert_func>
 800e504:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e508:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e50c:	b10d      	cbz	r5, 800e512 <__d2b+0x32>
 800e50e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e512:	9301      	str	r3, [sp, #4]
 800e514:	f1b8 0300 	subs.w	r3, r8, #0
 800e518:	d023      	beq.n	800e562 <__d2b+0x82>
 800e51a:	4668      	mov	r0, sp
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	f7ff fd14 	bl	800df4a <__lo0bits>
 800e522:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e526:	b1d0      	cbz	r0, 800e55e <__d2b+0x7e>
 800e528:	f1c0 0320 	rsb	r3, r0, #32
 800e52c:	fa02 f303 	lsl.w	r3, r2, r3
 800e530:	430b      	orrs	r3, r1
 800e532:	40c2      	lsrs	r2, r0
 800e534:	6163      	str	r3, [r4, #20]
 800e536:	9201      	str	r2, [sp, #4]
 800e538:	9b01      	ldr	r3, [sp, #4]
 800e53a:	61a3      	str	r3, [r4, #24]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	bf0c      	ite	eq
 800e540:	2201      	moveq	r2, #1
 800e542:	2202      	movne	r2, #2
 800e544:	6122      	str	r2, [r4, #16]
 800e546:	b1a5      	cbz	r5, 800e572 <__d2b+0x92>
 800e548:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e54c:	4405      	add	r5, r0
 800e54e:	603d      	str	r5, [r7, #0]
 800e550:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e554:	6030      	str	r0, [r6, #0]
 800e556:	4620      	mov	r0, r4
 800e558:	b003      	add	sp, #12
 800e55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e55e:	6161      	str	r1, [r4, #20]
 800e560:	e7ea      	b.n	800e538 <__d2b+0x58>
 800e562:	a801      	add	r0, sp, #4
 800e564:	f7ff fcf1 	bl	800df4a <__lo0bits>
 800e568:	9b01      	ldr	r3, [sp, #4]
 800e56a:	6163      	str	r3, [r4, #20]
 800e56c:	3020      	adds	r0, #32
 800e56e:	2201      	movs	r2, #1
 800e570:	e7e8      	b.n	800e544 <__d2b+0x64>
 800e572:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e576:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e57a:	6038      	str	r0, [r7, #0]
 800e57c:	6918      	ldr	r0, [r3, #16]
 800e57e:	f7ff fcc5 	bl	800df0c <__hi0bits>
 800e582:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e586:	e7e5      	b.n	800e554 <__d2b+0x74>
 800e588:	080123d0 	.word	0x080123d0
 800e58c:	080123e1 	.word	0x080123e1

0800e590 <__ratio>:
 800e590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e594:	b085      	sub	sp, #20
 800e596:	e9cd 1000 	strd	r1, r0, [sp]
 800e59a:	a902      	add	r1, sp, #8
 800e59c:	f7ff ff56 	bl	800e44c <__b2d>
 800e5a0:	9800      	ldr	r0, [sp, #0]
 800e5a2:	a903      	add	r1, sp, #12
 800e5a4:	ec55 4b10 	vmov	r4, r5, d0
 800e5a8:	f7ff ff50 	bl	800e44c <__b2d>
 800e5ac:	9b01      	ldr	r3, [sp, #4]
 800e5ae:	6919      	ldr	r1, [r3, #16]
 800e5b0:	9b00      	ldr	r3, [sp, #0]
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	1ac9      	subs	r1, r1, r3
 800e5b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e5ba:	1a9b      	subs	r3, r3, r2
 800e5bc:	ec5b ab10 	vmov	sl, fp, d0
 800e5c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	bfce      	itee	gt
 800e5c8:	462a      	movgt	r2, r5
 800e5ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e5ce:	465a      	movle	r2, fp
 800e5d0:	462f      	mov	r7, r5
 800e5d2:	46d9      	mov	r9, fp
 800e5d4:	bfcc      	ite	gt
 800e5d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e5da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e5de:	464b      	mov	r3, r9
 800e5e0:	4652      	mov	r2, sl
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	4639      	mov	r1, r7
 800e5e6:	f7f2 f961 	bl	80008ac <__aeabi_ddiv>
 800e5ea:	ec41 0b10 	vmov	d0, r0, r1
 800e5ee:	b005      	add	sp, #20
 800e5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5f4 <__copybits>:
 800e5f4:	3901      	subs	r1, #1
 800e5f6:	b570      	push	{r4, r5, r6, lr}
 800e5f8:	1149      	asrs	r1, r1, #5
 800e5fa:	6914      	ldr	r4, [r2, #16]
 800e5fc:	3101      	adds	r1, #1
 800e5fe:	f102 0314 	add.w	r3, r2, #20
 800e602:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e606:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e60a:	1f05      	subs	r5, r0, #4
 800e60c:	42a3      	cmp	r3, r4
 800e60e:	d30c      	bcc.n	800e62a <__copybits+0x36>
 800e610:	1aa3      	subs	r3, r4, r2
 800e612:	3b11      	subs	r3, #17
 800e614:	f023 0303 	bic.w	r3, r3, #3
 800e618:	3211      	adds	r2, #17
 800e61a:	42a2      	cmp	r2, r4
 800e61c:	bf88      	it	hi
 800e61e:	2300      	movhi	r3, #0
 800e620:	4418      	add	r0, r3
 800e622:	2300      	movs	r3, #0
 800e624:	4288      	cmp	r0, r1
 800e626:	d305      	bcc.n	800e634 <__copybits+0x40>
 800e628:	bd70      	pop	{r4, r5, r6, pc}
 800e62a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e62e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e632:	e7eb      	b.n	800e60c <__copybits+0x18>
 800e634:	f840 3b04 	str.w	r3, [r0], #4
 800e638:	e7f4      	b.n	800e624 <__copybits+0x30>

0800e63a <__any_on>:
 800e63a:	f100 0214 	add.w	r2, r0, #20
 800e63e:	6900      	ldr	r0, [r0, #16]
 800e640:	114b      	asrs	r3, r1, #5
 800e642:	4298      	cmp	r0, r3
 800e644:	b510      	push	{r4, lr}
 800e646:	db11      	blt.n	800e66c <__any_on+0x32>
 800e648:	dd0a      	ble.n	800e660 <__any_on+0x26>
 800e64a:	f011 011f 	ands.w	r1, r1, #31
 800e64e:	d007      	beq.n	800e660 <__any_on+0x26>
 800e650:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e654:	fa24 f001 	lsr.w	r0, r4, r1
 800e658:	fa00 f101 	lsl.w	r1, r0, r1
 800e65c:	428c      	cmp	r4, r1
 800e65e:	d10b      	bne.n	800e678 <__any_on+0x3e>
 800e660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e664:	4293      	cmp	r3, r2
 800e666:	d803      	bhi.n	800e670 <__any_on+0x36>
 800e668:	2000      	movs	r0, #0
 800e66a:	bd10      	pop	{r4, pc}
 800e66c:	4603      	mov	r3, r0
 800e66e:	e7f7      	b.n	800e660 <__any_on+0x26>
 800e670:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e674:	2900      	cmp	r1, #0
 800e676:	d0f5      	beq.n	800e664 <__any_on+0x2a>
 800e678:	2001      	movs	r0, #1
 800e67a:	e7f6      	b.n	800e66a <__any_on+0x30>

0800e67c <sulp>:
 800e67c:	b570      	push	{r4, r5, r6, lr}
 800e67e:	4604      	mov	r4, r0
 800e680:	460d      	mov	r5, r1
 800e682:	ec45 4b10 	vmov	d0, r4, r5
 800e686:	4616      	mov	r6, r2
 800e688:	f7ff feba 	bl	800e400 <__ulp>
 800e68c:	ec51 0b10 	vmov	r0, r1, d0
 800e690:	b17e      	cbz	r6, 800e6b2 <sulp+0x36>
 800e692:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e696:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	dd09      	ble.n	800e6b2 <sulp+0x36>
 800e69e:	051b      	lsls	r3, r3, #20
 800e6a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e6a4:	2400      	movs	r4, #0
 800e6a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e6aa:	4622      	mov	r2, r4
 800e6ac:	462b      	mov	r3, r5
 800e6ae:	f7f1 ffd3 	bl	8000658 <__aeabi_dmul>
 800e6b2:	ec41 0b10 	vmov	d0, r0, r1
 800e6b6:	bd70      	pop	{r4, r5, r6, pc}

0800e6b8 <_strtod_l>:
 800e6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6bc:	b09f      	sub	sp, #124	@ 0x7c
 800e6be:	460c      	mov	r4, r1
 800e6c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	921a      	str	r2, [sp, #104]	@ 0x68
 800e6c6:	9005      	str	r0, [sp, #20]
 800e6c8:	f04f 0a00 	mov.w	sl, #0
 800e6cc:	f04f 0b00 	mov.w	fp, #0
 800e6d0:	460a      	mov	r2, r1
 800e6d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6d4:	7811      	ldrb	r1, [r2, #0]
 800e6d6:	292b      	cmp	r1, #43	@ 0x2b
 800e6d8:	d04a      	beq.n	800e770 <_strtod_l+0xb8>
 800e6da:	d838      	bhi.n	800e74e <_strtod_l+0x96>
 800e6dc:	290d      	cmp	r1, #13
 800e6de:	d832      	bhi.n	800e746 <_strtod_l+0x8e>
 800e6e0:	2908      	cmp	r1, #8
 800e6e2:	d832      	bhi.n	800e74a <_strtod_l+0x92>
 800e6e4:	2900      	cmp	r1, #0
 800e6e6:	d03b      	beq.n	800e760 <_strtod_l+0xa8>
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e6ee:	782a      	ldrb	r2, [r5, #0]
 800e6f0:	2a30      	cmp	r2, #48	@ 0x30
 800e6f2:	f040 80b2 	bne.w	800e85a <_strtod_l+0x1a2>
 800e6f6:	786a      	ldrb	r2, [r5, #1]
 800e6f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e6fc:	2a58      	cmp	r2, #88	@ 0x58
 800e6fe:	d16e      	bne.n	800e7de <_strtod_l+0x126>
 800e700:	9302      	str	r3, [sp, #8]
 800e702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	ab1a      	add	r3, sp, #104	@ 0x68
 800e708:	9300      	str	r3, [sp, #0]
 800e70a:	4a8f      	ldr	r2, [pc, #572]	@ (800e948 <_strtod_l+0x290>)
 800e70c:	9805      	ldr	r0, [sp, #20]
 800e70e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e710:	a919      	add	r1, sp, #100	@ 0x64
 800e712:	f001 faff 	bl	800fd14 <__gethex>
 800e716:	f010 060f 	ands.w	r6, r0, #15
 800e71a:	4604      	mov	r4, r0
 800e71c:	d005      	beq.n	800e72a <_strtod_l+0x72>
 800e71e:	2e06      	cmp	r6, #6
 800e720:	d128      	bne.n	800e774 <_strtod_l+0xbc>
 800e722:	3501      	adds	r5, #1
 800e724:	2300      	movs	r3, #0
 800e726:	9519      	str	r5, [sp, #100]	@ 0x64
 800e728:	930e      	str	r3, [sp, #56]	@ 0x38
 800e72a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f040 858e 	bne.w	800f24e <_strtod_l+0xb96>
 800e732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e734:	b1cb      	cbz	r3, 800e76a <_strtod_l+0xb2>
 800e736:	4652      	mov	r2, sl
 800e738:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e73c:	ec43 2b10 	vmov	d0, r2, r3
 800e740:	b01f      	add	sp, #124	@ 0x7c
 800e742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e746:	2920      	cmp	r1, #32
 800e748:	d1ce      	bne.n	800e6e8 <_strtod_l+0x30>
 800e74a:	3201      	adds	r2, #1
 800e74c:	e7c1      	b.n	800e6d2 <_strtod_l+0x1a>
 800e74e:	292d      	cmp	r1, #45	@ 0x2d
 800e750:	d1ca      	bne.n	800e6e8 <_strtod_l+0x30>
 800e752:	2101      	movs	r1, #1
 800e754:	910e      	str	r1, [sp, #56]	@ 0x38
 800e756:	1c51      	adds	r1, r2, #1
 800e758:	9119      	str	r1, [sp, #100]	@ 0x64
 800e75a:	7852      	ldrb	r2, [r2, #1]
 800e75c:	2a00      	cmp	r2, #0
 800e75e:	d1c5      	bne.n	800e6ec <_strtod_l+0x34>
 800e760:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e762:	9419      	str	r4, [sp, #100]	@ 0x64
 800e764:	2b00      	cmp	r3, #0
 800e766:	f040 8570 	bne.w	800f24a <_strtod_l+0xb92>
 800e76a:	4652      	mov	r2, sl
 800e76c:	465b      	mov	r3, fp
 800e76e:	e7e5      	b.n	800e73c <_strtod_l+0x84>
 800e770:	2100      	movs	r1, #0
 800e772:	e7ef      	b.n	800e754 <_strtod_l+0x9c>
 800e774:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e776:	b13a      	cbz	r2, 800e788 <_strtod_l+0xd0>
 800e778:	2135      	movs	r1, #53	@ 0x35
 800e77a:	a81c      	add	r0, sp, #112	@ 0x70
 800e77c:	f7ff ff3a 	bl	800e5f4 <__copybits>
 800e780:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e782:	9805      	ldr	r0, [sp, #20]
 800e784:	f7ff fb10 	bl	800dda8 <_Bfree>
 800e788:	3e01      	subs	r6, #1
 800e78a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e78c:	2e04      	cmp	r6, #4
 800e78e:	d806      	bhi.n	800e79e <_strtod_l+0xe6>
 800e790:	e8df f006 	tbb	[pc, r6]
 800e794:	201d0314 	.word	0x201d0314
 800e798:	14          	.byte	0x14
 800e799:	00          	.byte	0x00
 800e79a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e79e:	05e1      	lsls	r1, r4, #23
 800e7a0:	bf48      	it	mi
 800e7a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e7a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7aa:	0d1b      	lsrs	r3, r3, #20
 800e7ac:	051b      	lsls	r3, r3, #20
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1bb      	bne.n	800e72a <_strtod_l+0x72>
 800e7b2:	f7fe fb0f 	bl	800cdd4 <__errno>
 800e7b6:	2322      	movs	r3, #34	@ 0x22
 800e7b8:	6003      	str	r3, [r0, #0]
 800e7ba:	e7b6      	b.n	800e72a <_strtod_l+0x72>
 800e7bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e7c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e7c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e7c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e7cc:	e7e7      	b.n	800e79e <_strtod_l+0xe6>
 800e7ce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e950 <_strtod_l+0x298>
 800e7d2:	e7e4      	b.n	800e79e <_strtod_l+0xe6>
 800e7d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e7d8:	f04f 3aff 	mov.w	sl, #4294967295
 800e7dc:	e7df      	b.n	800e79e <_strtod_l+0xe6>
 800e7de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7e0:	1c5a      	adds	r2, r3, #1
 800e7e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e7e4:	785b      	ldrb	r3, [r3, #1]
 800e7e6:	2b30      	cmp	r3, #48	@ 0x30
 800e7e8:	d0f9      	beq.n	800e7de <_strtod_l+0x126>
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d09d      	beq.n	800e72a <_strtod_l+0x72>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	2700      	movs	r7, #0
 800e7f2:	9308      	str	r3, [sp, #32]
 800e7f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e7f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e7f8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e7fa:	46b9      	mov	r9, r7
 800e7fc:	220a      	movs	r2, #10
 800e7fe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e800:	7805      	ldrb	r5, [r0, #0]
 800e802:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e806:	b2d9      	uxtb	r1, r3
 800e808:	2909      	cmp	r1, #9
 800e80a:	d928      	bls.n	800e85e <_strtod_l+0x1a6>
 800e80c:	494f      	ldr	r1, [pc, #316]	@ (800e94c <_strtod_l+0x294>)
 800e80e:	2201      	movs	r2, #1
 800e810:	f001 f9a4 	bl	800fb5c <strncmp>
 800e814:	2800      	cmp	r0, #0
 800e816:	d032      	beq.n	800e87e <_strtod_l+0x1c6>
 800e818:	2000      	movs	r0, #0
 800e81a:	462a      	mov	r2, r5
 800e81c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e81e:	464d      	mov	r5, r9
 800e820:	4603      	mov	r3, r0
 800e822:	2a65      	cmp	r2, #101	@ 0x65
 800e824:	d001      	beq.n	800e82a <_strtod_l+0x172>
 800e826:	2a45      	cmp	r2, #69	@ 0x45
 800e828:	d114      	bne.n	800e854 <_strtod_l+0x19c>
 800e82a:	b91d      	cbnz	r5, 800e834 <_strtod_l+0x17c>
 800e82c:	9a08      	ldr	r2, [sp, #32]
 800e82e:	4302      	orrs	r2, r0
 800e830:	d096      	beq.n	800e760 <_strtod_l+0xa8>
 800e832:	2500      	movs	r5, #0
 800e834:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e836:	1c62      	adds	r2, r4, #1
 800e838:	9219      	str	r2, [sp, #100]	@ 0x64
 800e83a:	7862      	ldrb	r2, [r4, #1]
 800e83c:	2a2b      	cmp	r2, #43	@ 0x2b
 800e83e:	d07a      	beq.n	800e936 <_strtod_l+0x27e>
 800e840:	2a2d      	cmp	r2, #45	@ 0x2d
 800e842:	d07e      	beq.n	800e942 <_strtod_l+0x28a>
 800e844:	f04f 0c00 	mov.w	ip, #0
 800e848:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e84c:	2909      	cmp	r1, #9
 800e84e:	f240 8085 	bls.w	800e95c <_strtod_l+0x2a4>
 800e852:	9419      	str	r4, [sp, #100]	@ 0x64
 800e854:	f04f 0800 	mov.w	r8, #0
 800e858:	e0a5      	b.n	800e9a6 <_strtod_l+0x2ee>
 800e85a:	2300      	movs	r3, #0
 800e85c:	e7c8      	b.n	800e7f0 <_strtod_l+0x138>
 800e85e:	f1b9 0f08 	cmp.w	r9, #8
 800e862:	bfd8      	it	le
 800e864:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800e866:	f100 0001 	add.w	r0, r0, #1
 800e86a:	bfda      	itte	le
 800e86c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e870:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800e872:	fb02 3707 	mlagt	r7, r2, r7, r3
 800e876:	f109 0901 	add.w	r9, r9, #1
 800e87a:	9019      	str	r0, [sp, #100]	@ 0x64
 800e87c:	e7bf      	b.n	800e7fe <_strtod_l+0x146>
 800e87e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e880:	1c5a      	adds	r2, r3, #1
 800e882:	9219      	str	r2, [sp, #100]	@ 0x64
 800e884:	785a      	ldrb	r2, [r3, #1]
 800e886:	f1b9 0f00 	cmp.w	r9, #0
 800e88a:	d03b      	beq.n	800e904 <_strtod_l+0x24c>
 800e88c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e88e:	464d      	mov	r5, r9
 800e890:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e894:	2b09      	cmp	r3, #9
 800e896:	d912      	bls.n	800e8be <_strtod_l+0x206>
 800e898:	2301      	movs	r3, #1
 800e89a:	e7c2      	b.n	800e822 <_strtod_l+0x16a>
 800e89c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e89e:	1c5a      	adds	r2, r3, #1
 800e8a0:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8a2:	785a      	ldrb	r2, [r3, #1]
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	2a30      	cmp	r2, #48	@ 0x30
 800e8a8:	d0f8      	beq.n	800e89c <_strtod_l+0x1e4>
 800e8aa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e8ae:	2b08      	cmp	r3, #8
 800e8b0:	f200 84d2 	bhi.w	800f258 <_strtod_l+0xba0>
 800e8b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8b6:	900a      	str	r0, [sp, #40]	@ 0x28
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8bc:	4605      	mov	r5, r0
 800e8be:	3a30      	subs	r2, #48	@ 0x30
 800e8c0:	f100 0301 	add.w	r3, r0, #1
 800e8c4:	d018      	beq.n	800e8f8 <_strtod_l+0x240>
 800e8c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8c8:	4419      	add	r1, r3
 800e8ca:	910a      	str	r1, [sp, #40]	@ 0x28
 800e8cc:	462e      	mov	r6, r5
 800e8ce:	f04f 0e0a 	mov.w	lr, #10
 800e8d2:	1c71      	adds	r1, r6, #1
 800e8d4:	eba1 0c05 	sub.w	ip, r1, r5
 800e8d8:	4563      	cmp	r3, ip
 800e8da:	dc15      	bgt.n	800e908 <_strtod_l+0x250>
 800e8dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e8e0:	182b      	adds	r3, r5, r0
 800e8e2:	2b08      	cmp	r3, #8
 800e8e4:	f105 0501 	add.w	r5, r5, #1
 800e8e8:	4405      	add	r5, r0
 800e8ea:	dc1a      	bgt.n	800e922 <_strtod_l+0x26a>
 800e8ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8ee:	230a      	movs	r3, #10
 800e8f0:	fb03 2301 	mla	r3, r3, r1, r2
 800e8f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e8fa:	1c51      	adds	r1, r2, #1
 800e8fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e8fe:	7852      	ldrb	r2, [r2, #1]
 800e900:	4618      	mov	r0, r3
 800e902:	e7c5      	b.n	800e890 <_strtod_l+0x1d8>
 800e904:	4648      	mov	r0, r9
 800e906:	e7ce      	b.n	800e8a6 <_strtod_l+0x1ee>
 800e908:	2e08      	cmp	r6, #8
 800e90a:	dc05      	bgt.n	800e918 <_strtod_l+0x260>
 800e90c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e90e:	fb0e f606 	mul.w	r6, lr, r6
 800e912:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e914:	460e      	mov	r6, r1
 800e916:	e7dc      	b.n	800e8d2 <_strtod_l+0x21a>
 800e918:	2910      	cmp	r1, #16
 800e91a:	bfd8      	it	le
 800e91c:	fb0e f707 	mulle.w	r7, lr, r7
 800e920:	e7f8      	b.n	800e914 <_strtod_l+0x25c>
 800e922:	2b0f      	cmp	r3, #15
 800e924:	bfdc      	itt	le
 800e926:	230a      	movle	r3, #10
 800e928:	fb03 2707 	mlale	r7, r3, r7, r2
 800e92c:	e7e3      	b.n	800e8f6 <_strtod_l+0x23e>
 800e92e:	2300      	movs	r3, #0
 800e930:	930a      	str	r3, [sp, #40]	@ 0x28
 800e932:	2301      	movs	r3, #1
 800e934:	e77a      	b.n	800e82c <_strtod_l+0x174>
 800e936:	f04f 0c00 	mov.w	ip, #0
 800e93a:	1ca2      	adds	r2, r4, #2
 800e93c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e93e:	78a2      	ldrb	r2, [r4, #2]
 800e940:	e782      	b.n	800e848 <_strtod_l+0x190>
 800e942:	f04f 0c01 	mov.w	ip, #1
 800e946:	e7f8      	b.n	800e93a <_strtod_l+0x282>
 800e948:	080125cc 	.word	0x080125cc
 800e94c:	0801243a 	.word	0x0801243a
 800e950:	7ff00000 	.word	0x7ff00000
 800e954:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e956:	1c51      	adds	r1, r2, #1
 800e958:	9119      	str	r1, [sp, #100]	@ 0x64
 800e95a:	7852      	ldrb	r2, [r2, #1]
 800e95c:	2a30      	cmp	r2, #48	@ 0x30
 800e95e:	d0f9      	beq.n	800e954 <_strtod_l+0x29c>
 800e960:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e964:	2908      	cmp	r1, #8
 800e966:	f63f af75 	bhi.w	800e854 <_strtod_l+0x19c>
 800e96a:	3a30      	subs	r2, #48	@ 0x30
 800e96c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e96e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e970:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e972:	f04f 080a 	mov.w	r8, #10
 800e976:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e978:	1c56      	adds	r6, r2, #1
 800e97a:	9619      	str	r6, [sp, #100]	@ 0x64
 800e97c:	7852      	ldrb	r2, [r2, #1]
 800e97e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e982:	f1be 0f09 	cmp.w	lr, #9
 800e986:	d939      	bls.n	800e9fc <_strtod_l+0x344>
 800e988:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e98a:	1a76      	subs	r6, r6, r1
 800e98c:	2e08      	cmp	r6, #8
 800e98e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e992:	dc03      	bgt.n	800e99c <_strtod_l+0x2e4>
 800e994:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e996:	4588      	cmp	r8, r1
 800e998:	bfa8      	it	ge
 800e99a:	4688      	movge	r8, r1
 800e99c:	f1bc 0f00 	cmp.w	ip, #0
 800e9a0:	d001      	beq.n	800e9a6 <_strtod_l+0x2ee>
 800e9a2:	f1c8 0800 	rsb	r8, r8, #0
 800e9a6:	2d00      	cmp	r5, #0
 800e9a8:	d14e      	bne.n	800ea48 <_strtod_l+0x390>
 800e9aa:	9908      	ldr	r1, [sp, #32]
 800e9ac:	4308      	orrs	r0, r1
 800e9ae:	f47f aebc 	bne.w	800e72a <_strtod_l+0x72>
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f47f aed4 	bne.w	800e760 <_strtod_l+0xa8>
 800e9b8:	2a69      	cmp	r2, #105	@ 0x69
 800e9ba:	d028      	beq.n	800ea0e <_strtod_l+0x356>
 800e9bc:	dc25      	bgt.n	800ea0a <_strtod_l+0x352>
 800e9be:	2a49      	cmp	r2, #73	@ 0x49
 800e9c0:	d025      	beq.n	800ea0e <_strtod_l+0x356>
 800e9c2:	2a4e      	cmp	r2, #78	@ 0x4e
 800e9c4:	f47f aecc 	bne.w	800e760 <_strtod_l+0xa8>
 800e9c8:	499a      	ldr	r1, [pc, #616]	@ (800ec34 <_strtod_l+0x57c>)
 800e9ca:	a819      	add	r0, sp, #100	@ 0x64
 800e9cc:	f001 fbc4 	bl	8010158 <__match>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	f43f aec5 	beq.w	800e760 <_strtod_l+0xa8>
 800e9d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	2b28      	cmp	r3, #40	@ 0x28
 800e9dc:	d12e      	bne.n	800ea3c <_strtod_l+0x384>
 800e9de:	4996      	ldr	r1, [pc, #600]	@ (800ec38 <_strtod_l+0x580>)
 800e9e0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e9e2:	a819      	add	r0, sp, #100	@ 0x64
 800e9e4:	f001 fbcc 	bl	8010180 <__hexnan>
 800e9e8:	2805      	cmp	r0, #5
 800e9ea:	d127      	bne.n	800ea3c <_strtod_l+0x384>
 800e9ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e9ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e9f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e9f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e9fa:	e696      	b.n	800e72a <_strtod_l+0x72>
 800e9fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9fe:	fb08 2101 	mla	r1, r8, r1, r2
 800ea02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ea06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea08:	e7b5      	b.n	800e976 <_strtod_l+0x2be>
 800ea0a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ea0c:	e7da      	b.n	800e9c4 <_strtod_l+0x30c>
 800ea0e:	498b      	ldr	r1, [pc, #556]	@ (800ec3c <_strtod_l+0x584>)
 800ea10:	a819      	add	r0, sp, #100	@ 0x64
 800ea12:	f001 fba1 	bl	8010158 <__match>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	f43f aea2 	beq.w	800e760 <_strtod_l+0xa8>
 800ea1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea1e:	4988      	ldr	r1, [pc, #544]	@ (800ec40 <_strtod_l+0x588>)
 800ea20:	3b01      	subs	r3, #1
 800ea22:	a819      	add	r0, sp, #100	@ 0x64
 800ea24:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea26:	f001 fb97 	bl	8010158 <__match>
 800ea2a:	b910      	cbnz	r0, 800ea32 <_strtod_l+0x37a>
 800ea2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea2e:	3301      	adds	r3, #1
 800ea30:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea32:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ec50 <_strtod_l+0x598>
 800ea36:	f04f 0a00 	mov.w	sl, #0
 800ea3a:	e676      	b.n	800e72a <_strtod_l+0x72>
 800ea3c:	4881      	ldr	r0, [pc, #516]	@ (800ec44 <_strtod_l+0x58c>)
 800ea3e:	f001 f8df 	bl	800fc00 <nan>
 800ea42:	ec5b ab10 	vmov	sl, fp, d0
 800ea46:	e670      	b.n	800e72a <_strtod_l+0x72>
 800ea48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea4a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ea4c:	eba8 0303 	sub.w	r3, r8, r3
 800ea50:	f1b9 0f00 	cmp.w	r9, #0
 800ea54:	bf08      	it	eq
 800ea56:	46a9      	moveq	r9, r5
 800ea58:	2d10      	cmp	r5, #16
 800ea5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea5c:	462c      	mov	r4, r5
 800ea5e:	bfa8      	it	ge
 800ea60:	2410      	movge	r4, #16
 800ea62:	f7f1 fd7f 	bl	8000564 <__aeabi_ui2d>
 800ea66:	2d09      	cmp	r5, #9
 800ea68:	4682      	mov	sl, r0
 800ea6a:	468b      	mov	fp, r1
 800ea6c:	dc13      	bgt.n	800ea96 <_strtod_l+0x3de>
 800ea6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f43f ae5a 	beq.w	800e72a <_strtod_l+0x72>
 800ea76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea78:	dd78      	ble.n	800eb6c <_strtod_l+0x4b4>
 800ea7a:	2b16      	cmp	r3, #22
 800ea7c:	dc5f      	bgt.n	800eb3e <_strtod_l+0x486>
 800ea7e:	4972      	ldr	r1, [pc, #456]	@ (800ec48 <_strtod_l+0x590>)
 800ea80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ea84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea88:	4652      	mov	r2, sl
 800ea8a:	465b      	mov	r3, fp
 800ea8c:	f7f1 fde4 	bl	8000658 <__aeabi_dmul>
 800ea90:	4682      	mov	sl, r0
 800ea92:	468b      	mov	fp, r1
 800ea94:	e649      	b.n	800e72a <_strtod_l+0x72>
 800ea96:	4b6c      	ldr	r3, [pc, #432]	@ (800ec48 <_strtod_l+0x590>)
 800ea98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eaa0:	f7f1 fdda 	bl	8000658 <__aeabi_dmul>
 800eaa4:	4682      	mov	sl, r0
 800eaa6:	4638      	mov	r0, r7
 800eaa8:	468b      	mov	fp, r1
 800eaaa:	f7f1 fd5b 	bl	8000564 <__aeabi_ui2d>
 800eaae:	4602      	mov	r2, r0
 800eab0:	460b      	mov	r3, r1
 800eab2:	4650      	mov	r0, sl
 800eab4:	4659      	mov	r1, fp
 800eab6:	f7f1 fc19 	bl	80002ec <__adddf3>
 800eaba:	2d0f      	cmp	r5, #15
 800eabc:	4682      	mov	sl, r0
 800eabe:	468b      	mov	fp, r1
 800eac0:	ddd5      	ble.n	800ea6e <_strtod_l+0x3b6>
 800eac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac4:	1b2c      	subs	r4, r5, r4
 800eac6:	441c      	add	r4, r3
 800eac8:	2c00      	cmp	r4, #0
 800eaca:	f340 8093 	ble.w	800ebf4 <_strtod_l+0x53c>
 800eace:	f014 030f 	ands.w	r3, r4, #15
 800ead2:	d00a      	beq.n	800eaea <_strtod_l+0x432>
 800ead4:	495c      	ldr	r1, [pc, #368]	@ (800ec48 <_strtod_l+0x590>)
 800ead6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eada:	4652      	mov	r2, sl
 800eadc:	465b      	mov	r3, fp
 800eade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eae2:	f7f1 fdb9 	bl	8000658 <__aeabi_dmul>
 800eae6:	4682      	mov	sl, r0
 800eae8:	468b      	mov	fp, r1
 800eaea:	f034 040f 	bics.w	r4, r4, #15
 800eaee:	d073      	beq.n	800ebd8 <_strtod_l+0x520>
 800eaf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800eaf4:	dd49      	ble.n	800eb8a <_strtod_l+0x4d2>
 800eaf6:	2400      	movs	r4, #0
 800eaf8:	46a0      	mov	r8, r4
 800eafa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eafc:	46a1      	mov	r9, r4
 800eafe:	9a05      	ldr	r2, [sp, #20]
 800eb00:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ec50 <_strtod_l+0x598>
 800eb04:	2322      	movs	r3, #34	@ 0x22
 800eb06:	6013      	str	r3, [r2, #0]
 800eb08:	f04f 0a00 	mov.w	sl, #0
 800eb0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f43f ae0b 	beq.w	800e72a <_strtod_l+0x72>
 800eb14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb16:	9805      	ldr	r0, [sp, #20]
 800eb18:	f7ff f946 	bl	800dda8 <_Bfree>
 800eb1c:	9805      	ldr	r0, [sp, #20]
 800eb1e:	4649      	mov	r1, r9
 800eb20:	f7ff f942 	bl	800dda8 <_Bfree>
 800eb24:	9805      	ldr	r0, [sp, #20]
 800eb26:	4641      	mov	r1, r8
 800eb28:	f7ff f93e 	bl	800dda8 <_Bfree>
 800eb2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eb2e:	9805      	ldr	r0, [sp, #20]
 800eb30:	f7ff f93a 	bl	800dda8 <_Bfree>
 800eb34:	9805      	ldr	r0, [sp, #20]
 800eb36:	4621      	mov	r1, r4
 800eb38:	f7ff f936 	bl	800dda8 <_Bfree>
 800eb3c:	e5f5      	b.n	800e72a <_strtod_l+0x72>
 800eb3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800eb44:	4293      	cmp	r3, r2
 800eb46:	dbbc      	blt.n	800eac2 <_strtod_l+0x40a>
 800eb48:	4c3f      	ldr	r4, [pc, #252]	@ (800ec48 <_strtod_l+0x590>)
 800eb4a:	f1c5 050f 	rsb	r5, r5, #15
 800eb4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eb52:	4652      	mov	r2, sl
 800eb54:	465b      	mov	r3, fp
 800eb56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb5a:	f7f1 fd7d 	bl	8000658 <__aeabi_dmul>
 800eb5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb60:	1b5d      	subs	r5, r3, r5
 800eb62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800eb66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eb6a:	e78f      	b.n	800ea8c <_strtod_l+0x3d4>
 800eb6c:	3316      	adds	r3, #22
 800eb6e:	dba8      	blt.n	800eac2 <_strtod_l+0x40a>
 800eb70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb72:	eba3 0808 	sub.w	r8, r3, r8
 800eb76:	4b34      	ldr	r3, [pc, #208]	@ (800ec48 <_strtod_l+0x590>)
 800eb78:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800eb7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800eb80:	4650      	mov	r0, sl
 800eb82:	4659      	mov	r1, fp
 800eb84:	f7f1 fe92 	bl	80008ac <__aeabi_ddiv>
 800eb88:	e782      	b.n	800ea90 <_strtod_l+0x3d8>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	4f2f      	ldr	r7, [pc, #188]	@ (800ec4c <_strtod_l+0x594>)
 800eb8e:	1124      	asrs	r4, r4, #4
 800eb90:	4650      	mov	r0, sl
 800eb92:	4659      	mov	r1, fp
 800eb94:	461e      	mov	r6, r3
 800eb96:	2c01      	cmp	r4, #1
 800eb98:	dc21      	bgt.n	800ebde <_strtod_l+0x526>
 800eb9a:	b10b      	cbz	r3, 800eba0 <_strtod_l+0x4e8>
 800eb9c:	4682      	mov	sl, r0
 800eb9e:	468b      	mov	fp, r1
 800eba0:	492a      	ldr	r1, [pc, #168]	@ (800ec4c <_strtod_l+0x594>)
 800eba2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800eba6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ebaa:	4652      	mov	r2, sl
 800ebac:	465b      	mov	r3, fp
 800ebae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebb2:	f7f1 fd51 	bl	8000658 <__aeabi_dmul>
 800ebb6:	4b26      	ldr	r3, [pc, #152]	@ (800ec50 <_strtod_l+0x598>)
 800ebb8:	460a      	mov	r2, r1
 800ebba:	400b      	ands	r3, r1
 800ebbc:	4925      	ldr	r1, [pc, #148]	@ (800ec54 <_strtod_l+0x59c>)
 800ebbe:	428b      	cmp	r3, r1
 800ebc0:	4682      	mov	sl, r0
 800ebc2:	d898      	bhi.n	800eaf6 <_strtod_l+0x43e>
 800ebc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ebc8:	428b      	cmp	r3, r1
 800ebca:	bf86      	itte	hi
 800ebcc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ec58 <_strtod_l+0x5a0>
 800ebd0:	f04f 3aff 	movhi.w	sl, #4294967295
 800ebd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ebd8:	2300      	movs	r3, #0
 800ebda:	9308      	str	r3, [sp, #32]
 800ebdc:	e076      	b.n	800eccc <_strtod_l+0x614>
 800ebde:	07e2      	lsls	r2, r4, #31
 800ebe0:	d504      	bpl.n	800ebec <_strtod_l+0x534>
 800ebe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebe6:	f7f1 fd37 	bl	8000658 <__aeabi_dmul>
 800ebea:	2301      	movs	r3, #1
 800ebec:	3601      	adds	r6, #1
 800ebee:	1064      	asrs	r4, r4, #1
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	e7d0      	b.n	800eb96 <_strtod_l+0x4de>
 800ebf4:	d0f0      	beq.n	800ebd8 <_strtod_l+0x520>
 800ebf6:	4264      	negs	r4, r4
 800ebf8:	f014 020f 	ands.w	r2, r4, #15
 800ebfc:	d00a      	beq.n	800ec14 <_strtod_l+0x55c>
 800ebfe:	4b12      	ldr	r3, [pc, #72]	@ (800ec48 <_strtod_l+0x590>)
 800ec00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec04:	4650      	mov	r0, sl
 800ec06:	4659      	mov	r1, fp
 800ec08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0c:	f7f1 fe4e 	bl	80008ac <__aeabi_ddiv>
 800ec10:	4682      	mov	sl, r0
 800ec12:	468b      	mov	fp, r1
 800ec14:	1124      	asrs	r4, r4, #4
 800ec16:	d0df      	beq.n	800ebd8 <_strtod_l+0x520>
 800ec18:	2c1f      	cmp	r4, #31
 800ec1a:	dd1f      	ble.n	800ec5c <_strtod_l+0x5a4>
 800ec1c:	2400      	movs	r4, #0
 800ec1e:	46a0      	mov	r8, r4
 800ec20:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ec22:	46a1      	mov	r9, r4
 800ec24:	9a05      	ldr	r2, [sp, #20]
 800ec26:	2322      	movs	r3, #34	@ 0x22
 800ec28:	f04f 0a00 	mov.w	sl, #0
 800ec2c:	f04f 0b00 	mov.w	fp, #0
 800ec30:	6013      	str	r3, [r2, #0]
 800ec32:	e76b      	b.n	800eb0c <_strtod_l+0x454>
 800ec34:	08012292 	.word	0x08012292
 800ec38:	080125b8 	.word	0x080125b8
 800ec3c:	0801228a 	.word	0x0801228a
 800ec40:	0801236e 	.word	0x0801236e
 800ec44:	0801236a 	.word	0x0801236a
 800ec48:	080124f0 	.word	0x080124f0
 800ec4c:	080124c8 	.word	0x080124c8
 800ec50:	7ff00000 	.word	0x7ff00000
 800ec54:	7ca00000 	.word	0x7ca00000
 800ec58:	7fefffff 	.word	0x7fefffff
 800ec5c:	f014 0310 	ands.w	r3, r4, #16
 800ec60:	bf18      	it	ne
 800ec62:	236a      	movne	r3, #106	@ 0x6a
 800ec64:	4ea9      	ldr	r6, [pc, #676]	@ (800ef0c <_strtod_l+0x854>)
 800ec66:	9308      	str	r3, [sp, #32]
 800ec68:	4650      	mov	r0, sl
 800ec6a:	4659      	mov	r1, fp
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	07e7      	lsls	r7, r4, #31
 800ec70:	d504      	bpl.n	800ec7c <_strtod_l+0x5c4>
 800ec72:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec76:	f7f1 fcef 	bl	8000658 <__aeabi_dmul>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	1064      	asrs	r4, r4, #1
 800ec7e:	f106 0608 	add.w	r6, r6, #8
 800ec82:	d1f4      	bne.n	800ec6e <_strtod_l+0x5b6>
 800ec84:	b10b      	cbz	r3, 800ec8a <_strtod_l+0x5d2>
 800ec86:	4682      	mov	sl, r0
 800ec88:	468b      	mov	fp, r1
 800ec8a:	9b08      	ldr	r3, [sp, #32]
 800ec8c:	b1b3      	cbz	r3, 800ecbc <_strtod_l+0x604>
 800ec8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ec92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	4659      	mov	r1, fp
 800ec9a:	dd0f      	ble.n	800ecbc <_strtod_l+0x604>
 800ec9c:	2b1f      	cmp	r3, #31
 800ec9e:	dd56      	ble.n	800ed4e <_strtod_l+0x696>
 800eca0:	2b34      	cmp	r3, #52	@ 0x34
 800eca2:	bfde      	ittt	le
 800eca4:	f04f 33ff 	movle.w	r3, #4294967295
 800eca8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ecac:	4093      	lslle	r3, r2
 800ecae:	f04f 0a00 	mov.w	sl, #0
 800ecb2:	bfcc      	ite	gt
 800ecb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ecb8:	ea03 0b01 	andle.w	fp, r3, r1
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	4650      	mov	r0, sl
 800ecc2:	4659      	mov	r1, fp
 800ecc4:	f7f1 ff30 	bl	8000b28 <__aeabi_dcmpeq>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	d1a7      	bne.n	800ec1c <_strtod_l+0x564>
 800eccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ecd2:	9805      	ldr	r0, [sp, #20]
 800ecd4:	462b      	mov	r3, r5
 800ecd6:	464a      	mov	r2, r9
 800ecd8:	f7ff f8ce 	bl	800de78 <__s2b>
 800ecdc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ecde:	2800      	cmp	r0, #0
 800ece0:	f43f af09 	beq.w	800eaf6 <_strtod_l+0x43e>
 800ece4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ece6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ece8:	2a00      	cmp	r2, #0
 800ecea:	eba3 0308 	sub.w	r3, r3, r8
 800ecee:	bfa8      	it	ge
 800ecf0:	2300      	movge	r3, #0
 800ecf2:	9312      	str	r3, [sp, #72]	@ 0x48
 800ecf4:	2400      	movs	r4, #0
 800ecf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ecfa:	9316      	str	r3, [sp, #88]	@ 0x58
 800ecfc:	46a0      	mov	r8, r4
 800ecfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed00:	9805      	ldr	r0, [sp, #20]
 800ed02:	6859      	ldr	r1, [r3, #4]
 800ed04:	f7ff f810 	bl	800dd28 <_Balloc>
 800ed08:	4681      	mov	r9, r0
 800ed0a:	2800      	cmp	r0, #0
 800ed0c:	f43f aef7 	beq.w	800eafe <_strtod_l+0x446>
 800ed10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed12:	691a      	ldr	r2, [r3, #16]
 800ed14:	3202      	adds	r2, #2
 800ed16:	f103 010c 	add.w	r1, r3, #12
 800ed1a:	0092      	lsls	r2, r2, #2
 800ed1c:	300c      	adds	r0, #12
 800ed1e:	f000 ff61 	bl	800fbe4 <memcpy>
 800ed22:	ec4b ab10 	vmov	d0, sl, fp
 800ed26:	9805      	ldr	r0, [sp, #20]
 800ed28:	aa1c      	add	r2, sp, #112	@ 0x70
 800ed2a:	a91b      	add	r1, sp, #108	@ 0x6c
 800ed2c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ed30:	f7ff fbd6 	bl	800e4e0 <__d2b>
 800ed34:	901a      	str	r0, [sp, #104]	@ 0x68
 800ed36:	2800      	cmp	r0, #0
 800ed38:	f43f aee1 	beq.w	800eafe <_strtod_l+0x446>
 800ed3c:	9805      	ldr	r0, [sp, #20]
 800ed3e:	2101      	movs	r1, #1
 800ed40:	f7ff f930 	bl	800dfa4 <__i2b>
 800ed44:	4680      	mov	r8, r0
 800ed46:	b948      	cbnz	r0, 800ed5c <_strtod_l+0x6a4>
 800ed48:	f04f 0800 	mov.w	r8, #0
 800ed4c:	e6d7      	b.n	800eafe <_strtod_l+0x446>
 800ed4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed52:	fa02 f303 	lsl.w	r3, r2, r3
 800ed56:	ea03 0a0a 	and.w	sl, r3, sl
 800ed5a:	e7af      	b.n	800ecbc <_strtod_l+0x604>
 800ed5c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ed5e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ed60:	2d00      	cmp	r5, #0
 800ed62:	bfab      	itete	ge
 800ed64:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ed66:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ed68:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ed6a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ed6c:	bfac      	ite	ge
 800ed6e:	18ef      	addge	r7, r5, r3
 800ed70:	1b5e      	sublt	r6, r3, r5
 800ed72:	9b08      	ldr	r3, [sp, #32]
 800ed74:	1aed      	subs	r5, r5, r3
 800ed76:	4415      	add	r5, r2
 800ed78:	4b65      	ldr	r3, [pc, #404]	@ (800ef10 <_strtod_l+0x858>)
 800ed7a:	3d01      	subs	r5, #1
 800ed7c:	429d      	cmp	r5, r3
 800ed7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ed82:	da50      	bge.n	800ee26 <_strtod_l+0x76e>
 800ed84:	1b5b      	subs	r3, r3, r5
 800ed86:	2b1f      	cmp	r3, #31
 800ed88:	eba2 0203 	sub.w	r2, r2, r3
 800ed8c:	f04f 0101 	mov.w	r1, #1
 800ed90:	dc3d      	bgt.n	800ee0e <_strtod_l+0x756>
 800ed92:	fa01 f303 	lsl.w	r3, r1, r3
 800ed96:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ed98:	2300      	movs	r3, #0
 800ed9a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ed9c:	18bd      	adds	r5, r7, r2
 800ed9e:	9b08      	ldr	r3, [sp, #32]
 800eda0:	42af      	cmp	r7, r5
 800eda2:	4416      	add	r6, r2
 800eda4:	441e      	add	r6, r3
 800eda6:	463b      	mov	r3, r7
 800eda8:	bfa8      	it	ge
 800edaa:	462b      	movge	r3, r5
 800edac:	42b3      	cmp	r3, r6
 800edae:	bfa8      	it	ge
 800edb0:	4633      	movge	r3, r6
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	bfc2      	ittt	gt
 800edb6:	1aed      	subgt	r5, r5, r3
 800edb8:	1af6      	subgt	r6, r6, r3
 800edba:	1aff      	subgt	r7, r7, r3
 800edbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	dd16      	ble.n	800edf0 <_strtod_l+0x738>
 800edc2:	4641      	mov	r1, r8
 800edc4:	9805      	ldr	r0, [sp, #20]
 800edc6:	461a      	mov	r2, r3
 800edc8:	f7ff f9a4 	bl	800e114 <__pow5mult>
 800edcc:	4680      	mov	r8, r0
 800edce:	2800      	cmp	r0, #0
 800edd0:	d0ba      	beq.n	800ed48 <_strtod_l+0x690>
 800edd2:	4601      	mov	r1, r0
 800edd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800edd6:	9805      	ldr	r0, [sp, #20]
 800edd8:	f7ff f8fa 	bl	800dfd0 <__multiply>
 800eddc:	900a      	str	r0, [sp, #40]	@ 0x28
 800edde:	2800      	cmp	r0, #0
 800ede0:	f43f ae8d 	beq.w	800eafe <_strtod_l+0x446>
 800ede4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ede6:	9805      	ldr	r0, [sp, #20]
 800ede8:	f7fe ffde 	bl	800dda8 <_Bfree>
 800edec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edee:	931a      	str	r3, [sp, #104]	@ 0x68
 800edf0:	2d00      	cmp	r5, #0
 800edf2:	dc1d      	bgt.n	800ee30 <_strtod_l+0x778>
 800edf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	dd23      	ble.n	800ee42 <_strtod_l+0x78a>
 800edfa:	4649      	mov	r1, r9
 800edfc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800edfe:	9805      	ldr	r0, [sp, #20]
 800ee00:	f7ff f988 	bl	800e114 <__pow5mult>
 800ee04:	4681      	mov	r9, r0
 800ee06:	b9e0      	cbnz	r0, 800ee42 <_strtod_l+0x78a>
 800ee08:	f04f 0900 	mov.w	r9, #0
 800ee0c:	e677      	b.n	800eafe <_strtod_l+0x446>
 800ee0e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ee12:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ee16:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ee1a:	35e2      	adds	r5, #226	@ 0xe2
 800ee1c:	fa01 f305 	lsl.w	r3, r1, r5
 800ee20:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee22:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ee24:	e7ba      	b.n	800ed9c <_strtod_l+0x6e4>
 800ee26:	2300      	movs	r3, #0
 800ee28:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee2e:	e7b5      	b.n	800ed9c <_strtod_l+0x6e4>
 800ee30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee32:	9805      	ldr	r0, [sp, #20]
 800ee34:	462a      	mov	r2, r5
 800ee36:	f7ff f9c7 	bl	800e1c8 <__lshift>
 800ee3a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d1d9      	bne.n	800edf4 <_strtod_l+0x73c>
 800ee40:	e65d      	b.n	800eafe <_strtod_l+0x446>
 800ee42:	2e00      	cmp	r6, #0
 800ee44:	dd07      	ble.n	800ee56 <_strtod_l+0x79e>
 800ee46:	4649      	mov	r1, r9
 800ee48:	9805      	ldr	r0, [sp, #20]
 800ee4a:	4632      	mov	r2, r6
 800ee4c:	f7ff f9bc 	bl	800e1c8 <__lshift>
 800ee50:	4681      	mov	r9, r0
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d0d8      	beq.n	800ee08 <_strtod_l+0x750>
 800ee56:	2f00      	cmp	r7, #0
 800ee58:	dd08      	ble.n	800ee6c <_strtod_l+0x7b4>
 800ee5a:	4641      	mov	r1, r8
 800ee5c:	9805      	ldr	r0, [sp, #20]
 800ee5e:	463a      	mov	r2, r7
 800ee60:	f7ff f9b2 	bl	800e1c8 <__lshift>
 800ee64:	4680      	mov	r8, r0
 800ee66:	2800      	cmp	r0, #0
 800ee68:	f43f ae49 	beq.w	800eafe <_strtod_l+0x446>
 800ee6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee6e:	9805      	ldr	r0, [sp, #20]
 800ee70:	464a      	mov	r2, r9
 800ee72:	f7ff fa31 	bl	800e2d8 <__mdiff>
 800ee76:	4604      	mov	r4, r0
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	f43f ae40 	beq.w	800eafe <_strtod_l+0x446>
 800ee7e:	68c3      	ldr	r3, [r0, #12]
 800ee80:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee82:	2300      	movs	r3, #0
 800ee84:	60c3      	str	r3, [r0, #12]
 800ee86:	4641      	mov	r1, r8
 800ee88:	f7ff fa0a 	bl	800e2a0 <__mcmp>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	da45      	bge.n	800ef1c <_strtod_l+0x864>
 800ee90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee92:	ea53 030a 	orrs.w	r3, r3, sl
 800ee96:	d16b      	bne.n	800ef70 <_strtod_l+0x8b8>
 800ee98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d167      	bne.n	800ef70 <_strtod_l+0x8b8>
 800eea0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eea4:	0d1b      	lsrs	r3, r3, #20
 800eea6:	051b      	lsls	r3, r3, #20
 800eea8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eeac:	d960      	bls.n	800ef70 <_strtod_l+0x8b8>
 800eeae:	6963      	ldr	r3, [r4, #20]
 800eeb0:	b913      	cbnz	r3, 800eeb8 <_strtod_l+0x800>
 800eeb2:	6923      	ldr	r3, [r4, #16]
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	dd5b      	ble.n	800ef70 <_strtod_l+0x8b8>
 800eeb8:	4621      	mov	r1, r4
 800eeba:	2201      	movs	r2, #1
 800eebc:	9805      	ldr	r0, [sp, #20]
 800eebe:	f7ff f983 	bl	800e1c8 <__lshift>
 800eec2:	4641      	mov	r1, r8
 800eec4:	4604      	mov	r4, r0
 800eec6:	f7ff f9eb 	bl	800e2a0 <__mcmp>
 800eeca:	2800      	cmp	r0, #0
 800eecc:	dd50      	ble.n	800ef70 <_strtod_l+0x8b8>
 800eece:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eed2:	9a08      	ldr	r2, [sp, #32]
 800eed4:	0d1b      	lsrs	r3, r3, #20
 800eed6:	051b      	lsls	r3, r3, #20
 800eed8:	2a00      	cmp	r2, #0
 800eeda:	d06a      	beq.n	800efb2 <_strtod_l+0x8fa>
 800eedc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eee0:	d867      	bhi.n	800efb2 <_strtod_l+0x8fa>
 800eee2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800eee6:	f67f ae9d 	bls.w	800ec24 <_strtod_l+0x56c>
 800eeea:	4b0a      	ldr	r3, [pc, #40]	@ (800ef14 <_strtod_l+0x85c>)
 800eeec:	4650      	mov	r0, sl
 800eeee:	4659      	mov	r1, fp
 800eef0:	2200      	movs	r2, #0
 800eef2:	f7f1 fbb1 	bl	8000658 <__aeabi_dmul>
 800eef6:	4b08      	ldr	r3, [pc, #32]	@ (800ef18 <_strtod_l+0x860>)
 800eef8:	400b      	ands	r3, r1
 800eefa:	4682      	mov	sl, r0
 800eefc:	468b      	mov	fp, r1
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f47f ae08 	bne.w	800eb14 <_strtod_l+0x45c>
 800ef04:	9a05      	ldr	r2, [sp, #20]
 800ef06:	2322      	movs	r3, #34	@ 0x22
 800ef08:	6013      	str	r3, [r2, #0]
 800ef0a:	e603      	b.n	800eb14 <_strtod_l+0x45c>
 800ef0c:	080125e0 	.word	0x080125e0
 800ef10:	fffffc02 	.word	0xfffffc02
 800ef14:	39500000 	.word	0x39500000
 800ef18:	7ff00000 	.word	0x7ff00000
 800ef1c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ef20:	d165      	bne.n	800efee <_strtod_l+0x936>
 800ef22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ef24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef28:	b35a      	cbz	r2, 800ef82 <_strtod_l+0x8ca>
 800ef2a:	4a9f      	ldr	r2, [pc, #636]	@ (800f1a8 <_strtod_l+0xaf0>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d12b      	bne.n	800ef88 <_strtod_l+0x8d0>
 800ef30:	9b08      	ldr	r3, [sp, #32]
 800ef32:	4651      	mov	r1, sl
 800ef34:	b303      	cbz	r3, 800ef78 <_strtod_l+0x8c0>
 800ef36:	4b9d      	ldr	r3, [pc, #628]	@ (800f1ac <_strtod_l+0xaf4>)
 800ef38:	465a      	mov	r2, fp
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ef40:	f04f 32ff 	mov.w	r2, #4294967295
 800ef44:	d81b      	bhi.n	800ef7e <_strtod_l+0x8c6>
 800ef46:	0d1b      	lsrs	r3, r3, #20
 800ef48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ef4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ef50:	4299      	cmp	r1, r3
 800ef52:	d119      	bne.n	800ef88 <_strtod_l+0x8d0>
 800ef54:	4b96      	ldr	r3, [pc, #600]	@ (800f1b0 <_strtod_l+0xaf8>)
 800ef56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d102      	bne.n	800ef62 <_strtod_l+0x8aa>
 800ef5c:	3101      	adds	r1, #1
 800ef5e:	f43f adce 	beq.w	800eafe <_strtod_l+0x446>
 800ef62:	4b92      	ldr	r3, [pc, #584]	@ (800f1ac <_strtod_l+0xaf4>)
 800ef64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef66:	401a      	ands	r2, r3
 800ef68:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ef6c:	f04f 0a00 	mov.w	sl, #0
 800ef70:	9b08      	ldr	r3, [sp, #32]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d1b9      	bne.n	800eeea <_strtod_l+0x832>
 800ef76:	e5cd      	b.n	800eb14 <_strtod_l+0x45c>
 800ef78:	f04f 33ff 	mov.w	r3, #4294967295
 800ef7c:	e7e8      	b.n	800ef50 <_strtod_l+0x898>
 800ef7e:	4613      	mov	r3, r2
 800ef80:	e7e6      	b.n	800ef50 <_strtod_l+0x898>
 800ef82:	ea53 030a 	orrs.w	r3, r3, sl
 800ef86:	d0a2      	beq.n	800eece <_strtod_l+0x816>
 800ef88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef8a:	b1db      	cbz	r3, 800efc4 <_strtod_l+0x90c>
 800ef8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef8e:	4213      	tst	r3, r2
 800ef90:	d0ee      	beq.n	800ef70 <_strtod_l+0x8b8>
 800ef92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef94:	9a08      	ldr	r2, [sp, #32]
 800ef96:	4650      	mov	r0, sl
 800ef98:	4659      	mov	r1, fp
 800ef9a:	b1bb      	cbz	r3, 800efcc <_strtod_l+0x914>
 800ef9c:	f7ff fb6e 	bl	800e67c <sulp>
 800efa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800efa4:	ec53 2b10 	vmov	r2, r3, d0
 800efa8:	f7f1 f9a0 	bl	80002ec <__adddf3>
 800efac:	4682      	mov	sl, r0
 800efae:	468b      	mov	fp, r1
 800efb0:	e7de      	b.n	800ef70 <_strtod_l+0x8b8>
 800efb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800efb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800efba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800efbe:	f04f 3aff 	mov.w	sl, #4294967295
 800efc2:	e7d5      	b.n	800ef70 <_strtod_l+0x8b8>
 800efc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800efc6:	ea13 0f0a 	tst.w	r3, sl
 800efca:	e7e1      	b.n	800ef90 <_strtod_l+0x8d8>
 800efcc:	f7ff fb56 	bl	800e67c <sulp>
 800efd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800efd4:	ec53 2b10 	vmov	r2, r3, d0
 800efd8:	f7f1 f986 	bl	80002e8 <__aeabi_dsub>
 800efdc:	2200      	movs	r2, #0
 800efde:	2300      	movs	r3, #0
 800efe0:	4682      	mov	sl, r0
 800efe2:	468b      	mov	fp, r1
 800efe4:	f7f1 fda0 	bl	8000b28 <__aeabi_dcmpeq>
 800efe8:	2800      	cmp	r0, #0
 800efea:	d0c1      	beq.n	800ef70 <_strtod_l+0x8b8>
 800efec:	e61a      	b.n	800ec24 <_strtod_l+0x56c>
 800efee:	4641      	mov	r1, r8
 800eff0:	4620      	mov	r0, r4
 800eff2:	f7ff facd 	bl	800e590 <__ratio>
 800eff6:	ec57 6b10 	vmov	r6, r7, d0
 800effa:	2200      	movs	r2, #0
 800effc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f000:	4630      	mov	r0, r6
 800f002:	4639      	mov	r1, r7
 800f004:	f7f1 fda4 	bl	8000b50 <__aeabi_dcmple>
 800f008:	2800      	cmp	r0, #0
 800f00a:	d06f      	beq.n	800f0ec <_strtod_l+0xa34>
 800f00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d17a      	bne.n	800f108 <_strtod_l+0xa50>
 800f012:	f1ba 0f00 	cmp.w	sl, #0
 800f016:	d158      	bne.n	800f0ca <_strtod_l+0xa12>
 800f018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f01a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d15a      	bne.n	800f0d8 <_strtod_l+0xa20>
 800f022:	4b64      	ldr	r3, [pc, #400]	@ (800f1b4 <_strtod_l+0xafc>)
 800f024:	2200      	movs	r2, #0
 800f026:	4630      	mov	r0, r6
 800f028:	4639      	mov	r1, r7
 800f02a:	f7f1 fd87 	bl	8000b3c <__aeabi_dcmplt>
 800f02e:	2800      	cmp	r0, #0
 800f030:	d159      	bne.n	800f0e6 <_strtod_l+0xa2e>
 800f032:	4630      	mov	r0, r6
 800f034:	4639      	mov	r1, r7
 800f036:	4b60      	ldr	r3, [pc, #384]	@ (800f1b8 <_strtod_l+0xb00>)
 800f038:	2200      	movs	r2, #0
 800f03a:	f7f1 fb0d 	bl	8000658 <__aeabi_dmul>
 800f03e:	4606      	mov	r6, r0
 800f040:	460f      	mov	r7, r1
 800f042:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f046:	9606      	str	r6, [sp, #24]
 800f048:	9307      	str	r3, [sp, #28]
 800f04a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f04e:	4d57      	ldr	r5, [pc, #348]	@ (800f1ac <_strtod_l+0xaf4>)
 800f050:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f056:	401d      	ands	r5, r3
 800f058:	4b58      	ldr	r3, [pc, #352]	@ (800f1bc <_strtod_l+0xb04>)
 800f05a:	429d      	cmp	r5, r3
 800f05c:	f040 80b2 	bne.w	800f1c4 <_strtod_l+0xb0c>
 800f060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f062:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f066:	ec4b ab10 	vmov	d0, sl, fp
 800f06a:	f7ff f9c9 	bl	800e400 <__ulp>
 800f06e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f072:	ec51 0b10 	vmov	r0, r1, d0
 800f076:	f7f1 faef 	bl	8000658 <__aeabi_dmul>
 800f07a:	4652      	mov	r2, sl
 800f07c:	465b      	mov	r3, fp
 800f07e:	f7f1 f935 	bl	80002ec <__adddf3>
 800f082:	460b      	mov	r3, r1
 800f084:	4949      	ldr	r1, [pc, #292]	@ (800f1ac <_strtod_l+0xaf4>)
 800f086:	4a4e      	ldr	r2, [pc, #312]	@ (800f1c0 <_strtod_l+0xb08>)
 800f088:	4019      	ands	r1, r3
 800f08a:	4291      	cmp	r1, r2
 800f08c:	4682      	mov	sl, r0
 800f08e:	d942      	bls.n	800f116 <_strtod_l+0xa5e>
 800f090:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f092:	4b47      	ldr	r3, [pc, #284]	@ (800f1b0 <_strtod_l+0xaf8>)
 800f094:	429a      	cmp	r2, r3
 800f096:	d103      	bne.n	800f0a0 <_strtod_l+0x9e8>
 800f098:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f09a:	3301      	adds	r3, #1
 800f09c:	f43f ad2f 	beq.w	800eafe <_strtod_l+0x446>
 800f0a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f1b0 <_strtod_l+0xaf8>
 800f0a4:	f04f 3aff 	mov.w	sl, #4294967295
 800f0a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0aa:	9805      	ldr	r0, [sp, #20]
 800f0ac:	f7fe fe7c 	bl	800dda8 <_Bfree>
 800f0b0:	9805      	ldr	r0, [sp, #20]
 800f0b2:	4649      	mov	r1, r9
 800f0b4:	f7fe fe78 	bl	800dda8 <_Bfree>
 800f0b8:	9805      	ldr	r0, [sp, #20]
 800f0ba:	4641      	mov	r1, r8
 800f0bc:	f7fe fe74 	bl	800dda8 <_Bfree>
 800f0c0:	9805      	ldr	r0, [sp, #20]
 800f0c2:	4621      	mov	r1, r4
 800f0c4:	f7fe fe70 	bl	800dda8 <_Bfree>
 800f0c8:	e619      	b.n	800ecfe <_strtod_l+0x646>
 800f0ca:	f1ba 0f01 	cmp.w	sl, #1
 800f0ce:	d103      	bne.n	800f0d8 <_strtod_l+0xa20>
 800f0d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f43f ada6 	beq.w	800ec24 <_strtod_l+0x56c>
 800f0d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f188 <_strtod_l+0xad0>
 800f0dc:	4f35      	ldr	r7, [pc, #212]	@ (800f1b4 <_strtod_l+0xafc>)
 800f0de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f0e2:	2600      	movs	r6, #0
 800f0e4:	e7b1      	b.n	800f04a <_strtod_l+0x992>
 800f0e6:	4f34      	ldr	r7, [pc, #208]	@ (800f1b8 <_strtod_l+0xb00>)
 800f0e8:	2600      	movs	r6, #0
 800f0ea:	e7aa      	b.n	800f042 <_strtod_l+0x98a>
 800f0ec:	4b32      	ldr	r3, [pc, #200]	@ (800f1b8 <_strtod_l+0xb00>)
 800f0ee:	4630      	mov	r0, r6
 800f0f0:	4639      	mov	r1, r7
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f7f1 fab0 	bl	8000658 <__aeabi_dmul>
 800f0f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0fa:	4606      	mov	r6, r0
 800f0fc:	460f      	mov	r7, r1
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d09f      	beq.n	800f042 <_strtod_l+0x98a>
 800f102:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f106:	e7a0      	b.n	800f04a <_strtod_l+0x992>
 800f108:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f190 <_strtod_l+0xad8>
 800f10c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f110:	ec57 6b17 	vmov	r6, r7, d7
 800f114:	e799      	b.n	800f04a <_strtod_l+0x992>
 800f116:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f11a:	9b08      	ldr	r3, [sp, #32]
 800f11c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f120:	2b00      	cmp	r3, #0
 800f122:	d1c1      	bne.n	800f0a8 <_strtod_l+0x9f0>
 800f124:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f128:	0d1b      	lsrs	r3, r3, #20
 800f12a:	051b      	lsls	r3, r3, #20
 800f12c:	429d      	cmp	r5, r3
 800f12e:	d1bb      	bne.n	800f0a8 <_strtod_l+0x9f0>
 800f130:	4630      	mov	r0, r6
 800f132:	4639      	mov	r1, r7
 800f134:	f7f1 fe40 	bl	8000db8 <__aeabi_d2lz>
 800f138:	f7f1 fa60 	bl	80005fc <__aeabi_l2d>
 800f13c:	4602      	mov	r2, r0
 800f13e:	460b      	mov	r3, r1
 800f140:	4630      	mov	r0, r6
 800f142:	4639      	mov	r1, r7
 800f144:	f7f1 f8d0 	bl	80002e8 <__aeabi_dsub>
 800f148:	460b      	mov	r3, r1
 800f14a:	4602      	mov	r2, r0
 800f14c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f150:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f156:	ea46 060a 	orr.w	r6, r6, sl
 800f15a:	431e      	orrs	r6, r3
 800f15c:	d06f      	beq.n	800f23e <_strtod_l+0xb86>
 800f15e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f198 <_strtod_l+0xae0>)
 800f160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f164:	f7f1 fcea 	bl	8000b3c <__aeabi_dcmplt>
 800f168:	2800      	cmp	r0, #0
 800f16a:	f47f acd3 	bne.w	800eb14 <_strtod_l+0x45c>
 800f16e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f1a0 <_strtod_l+0xae8>)
 800f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f174:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f178:	f7f1 fcfe 	bl	8000b78 <__aeabi_dcmpgt>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d093      	beq.n	800f0a8 <_strtod_l+0x9f0>
 800f180:	e4c8      	b.n	800eb14 <_strtod_l+0x45c>
 800f182:	bf00      	nop
 800f184:	f3af 8000 	nop.w
 800f188:	00000000 	.word	0x00000000
 800f18c:	bff00000 	.word	0xbff00000
 800f190:	00000000 	.word	0x00000000
 800f194:	3ff00000 	.word	0x3ff00000
 800f198:	94a03595 	.word	0x94a03595
 800f19c:	3fdfffff 	.word	0x3fdfffff
 800f1a0:	35afe535 	.word	0x35afe535
 800f1a4:	3fe00000 	.word	0x3fe00000
 800f1a8:	000fffff 	.word	0x000fffff
 800f1ac:	7ff00000 	.word	0x7ff00000
 800f1b0:	7fefffff 	.word	0x7fefffff
 800f1b4:	3ff00000 	.word	0x3ff00000
 800f1b8:	3fe00000 	.word	0x3fe00000
 800f1bc:	7fe00000 	.word	0x7fe00000
 800f1c0:	7c9fffff 	.word	0x7c9fffff
 800f1c4:	9b08      	ldr	r3, [sp, #32]
 800f1c6:	b323      	cbz	r3, 800f212 <_strtod_l+0xb5a>
 800f1c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f1cc:	d821      	bhi.n	800f212 <_strtod_l+0xb5a>
 800f1ce:	a328      	add	r3, pc, #160	@ (adr r3, 800f270 <_strtod_l+0xbb8>)
 800f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	4639      	mov	r1, r7
 800f1d8:	f7f1 fcba 	bl	8000b50 <__aeabi_dcmple>
 800f1dc:	b1a0      	cbz	r0, 800f208 <_strtod_l+0xb50>
 800f1de:	4639      	mov	r1, r7
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f7f1 fd11 	bl	8000c08 <__aeabi_d2uiz>
 800f1e6:	2801      	cmp	r0, #1
 800f1e8:	bf38      	it	cc
 800f1ea:	2001      	movcc	r0, #1
 800f1ec:	f7f1 f9ba 	bl	8000564 <__aeabi_ui2d>
 800f1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	460f      	mov	r7, r1
 800f1f6:	b9fb      	cbnz	r3, 800f238 <_strtod_l+0xb80>
 800f1f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f1fc:	9014      	str	r0, [sp, #80]	@ 0x50
 800f1fe:	9315      	str	r3, [sp, #84]	@ 0x54
 800f200:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f204:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f208:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f20a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f20e:	1b5b      	subs	r3, r3, r5
 800f210:	9311      	str	r3, [sp, #68]	@ 0x44
 800f212:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f216:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f21a:	f7ff f8f1 	bl	800e400 <__ulp>
 800f21e:	4650      	mov	r0, sl
 800f220:	ec53 2b10 	vmov	r2, r3, d0
 800f224:	4659      	mov	r1, fp
 800f226:	f7f1 fa17 	bl	8000658 <__aeabi_dmul>
 800f22a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f22e:	f7f1 f85d 	bl	80002ec <__adddf3>
 800f232:	4682      	mov	sl, r0
 800f234:	468b      	mov	fp, r1
 800f236:	e770      	b.n	800f11a <_strtod_l+0xa62>
 800f238:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f23c:	e7e0      	b.n	800f200 <_strtod_l+0xb48>
 800f23e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f278 <_strtod_l+0xbc0>)
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f7f1 fc7a 	bl	8000b3c <__aeabi_dcmplt>
 800f248:	e798      	b.n	800f17c <_strtod_l+0xac4>
 800f24a:	2300      	movs	r3, #0
 800f24c:	930e      	str	r3, [sp, #56]	@ 0x38
 800f24e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f250:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f252:	6013      	str	r3, [r2, #0]
 800f254:	f7ff ba6d 	b.w	800e732 <_strtod_l+0x7a>
 800f258:	2a65      	cmp	r2, #101	@ 0x65
 800f25a:	f43f ab68 	beq.w	800e92e <_strtod_l+0x276>
 800f25e:	2a45      	cmp	r2, #69	@ 0x45
 800f260:	f43f ab65 	beq.w	800e92e <_strtod_l+0x276>
 800f264:	2301      	movs	r3, #1
 800f266:	f7ff bba0 	b.w	800e9aa <_strtod_l+0x2f2>
 800f26a:	bf00      	nop
 800f26c:	f3af 8000 	nop.w
 800f270:	ffc00000 	.word	0xffc00000
 800f274:	41dfffff 	.word	0x41dfffff
 800f278:	94a03595 	.word	0x94a03595
 800f27c:	3fcfffff 	.word	0x3fcfffff

0800f280 <_strtod_r>:
 800f280:	4b01      	ldr	r3, [pc, #4]	@ (800f288 <_strtod_r+0x8>)
 800f282:	f7ff ba19 	b.w	800e6b8 <_strtod_l>
 800f286:	bf00      	nop
 800f288:	20000094 	.word	0x20000094

0800f28c <__ssputs_r>:
 800f28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f290:	688e      	ldr	r6, [r1, #8]
 800f292:	461f      	mov	r7, r3
 800f294:	42be      	cmp	r6, r7
 800f296:	680b      	ldr	r3, [r1, #0]
 800f298:	4682      	mov	sl, r0
 800f29a:	460c      	mov	r4, r1
 800f29c:	4690      	mov	r8, r2
 800f29e:	d82d      	bhi.n	800f2fc <__ssputs_r+0x70>
 800f2a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f2a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f2a8:	d026      	beq.n	800f2f8 <__ssputs_r+0x6c>
 800f2aa:	6965      	ldr	r5, [r4, #20]
 800f2ac:	6909      	ldr	r1, [r1, #16]
 800f2ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2b2:	eba3 0901 	sub.w	r9, r3, r1
 800f2b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f2ba:	1c7b      	adds	r3, r7, #1
 800f2bc:	444b      	add	r3, r9
 800f2be:	106d      	asrs	r5, r5, #1
 800f2c0:	429d      	cmp	r5, r3
 800f2c2:	bf38      	it	cc
 800f2c4:	461d      	movcc	r5, r3
 800f2c6:	0553      	lsls	r3, r2, #21
 800f2c8:	d527      	bpl.n	800f31a <__ssputs_r+0x8e>
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	f7fe fca0 	bl	800dc10 <_malloc_r>
 800f2d0:	4606      	mov	r6, r0
 800f2d2:	b360      	cbz	r0, 800f32e <__ssputs_r+0xa2>
 800f2d4:	6921      	ldr	r1, [r4, #16]
 800f2d6:	464a      	mov	r2, r9
 800f2d8:	f000 fc84 	bl	800fbe4 <memcpy>
 800f2dc:	89a3      	ldrh	r3, [r4, #12]
 800f2de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f2e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2e6:	81a3      	strh	r3, [r4, #12]
 800f2e8:	6126      	str	r6, [r4, #16]
 800f2ea:	6165      	str	r5, [r4, #20]
 800f2ec:	444e      	add	r6, r9
 800f2ee:	eba5 0509 	sub.w	r5, r5, r9
 800f2f2:	6026      	str	r6, [r4, #0]
 800f2f4:	60a5      	str	r5, [r4, #8]
 800f2f6:	463e      	mov	r6, r7
 800f2f8:	42be      	cmp	r6, r7
 800f2fa:	d900      	bls.n	800f2fe <__ssputs_r+0x72>
 800f2fc:	463e      	mov	r6, r7
 800f2fe:	6820      	ldr	r0, [r4, #0]
 800f300:	4632      	mov	r2, r6
 800f302:	4641      	mov	r1, r8
 800f304:	f000 fc10 	bl	800fb28 <memmove>
 800f308:	68a3      	ldr	r3, [r4, #8]
 800f30a:	1b9b      	subs	r3, r3, r6
 800f30c:	60a3      	str	r3, [r4, #8]
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	4433      	add	r3, r6
 800f312:	6023      	str	r3, [r4, #0]
 800f314:	2000      	movs	r0, #0
 800f316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f31a:	462a      	mov	r2, r5
 800f31c:	f000 ffdd 	bl	80102da <_realloc_r>
 800f320:	4606      	mov	r6, r0
 800f322:	2800      	cmp	r0, #0
 800f324:	d1e0      	bne.n	800f2e8 <__ssputs_r+0x5c>
 800f326:	6921      	ldr	r1, [r4, #16]
 800f328:	4650      	mov	r0, sl
 800f32a:	f7fe fbfd 	bl	800db28 <_free_r>
 800f32e:	230c      	movs	r3, #12
 800f330:	f8ca 3000 	str.w	r3, [sl]
 800f334:	89a3      	ldrh	r3, [r4, #12]
 800f336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f33a:	81a3      	strh	r3, [r4, #12]
 800f33c:	f04f 30ff 	mov.w	r0, #4294967295
 800f340:	e7e9      	b.n	800f316 <__ssputs_r+0x8a>
	...

0800f344 <_svfiprintf_r>:
 800f344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	4698      	mov	r8, r3
 800f34a:	898b      	ldrh	r3, [r1, #12]
 800f34c:	061b      	lsls	r3, r3, #24
 800f34e:	b09d      	sub	sp, #116	@ 0x74
 800f350:	4607      	mov	r7, r0
 800f352:	460d      	mov	r5, r1
 800f354:	4614      	mov	r4, r2
 800f356:	d510      	bpl.n	800f37a <_svfiprintf_r+0x36>
 800f358:	690b      	ldr	r3, [r1, #16]
 800f35a:	b973      	cbnz	r3, 800f37a <_svfiprintf_r+0x36>
 800f35c:	2140      	movs	r1, #64	@ 0x40
 800f35e:	f7fe fc57 	bl	800dc10 <_malloc_r>
 800f362:	6028      	str	r0, [r5, #0]
 800f364:	6128      	str	r0, [r5, #16]
 800f366:	b930      	cbnz	r0, 800f376 <_svfiprintf_r+0x32>
 800f368:	230c      	movs	r3, #12
 800f36a:	603b      	str	r3, [r7, #0]
 800f36c:	f04f 30ff 	mov.w	r0, #4294967295
 800f370:	b01d      	add	sp, #116	@ 0x74
 800f372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f376:	2340      	movs	r3, #64	@ 0x40
 800f378:	616b      	str	r3, [r5, #20]
 800f37a:	2300      	movs	r3, #0
 800f37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f37e:	2320      	movs	r3, #32
 800f380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f384:	f8cd 800c 	str.w	r8, [sp, #12]
 800f388:	2330      	movs	r3, #48	@ 0x30
 800f38a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f528 <_svfiprintf_r+0x1e4>
 800f38e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f392:	f04f 0901 	mov.w	r9, #1
 800f396:	4623      	mov	r3, r4
 800f398:	469a      	mov	sl, r3
 800f39a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f39e:	b10a      	cbz	r2, 800f3a4 <_svfiprintf_r+0x60>
 800f3a0:	2a25      	cmp	r2, #37	@ 0x25
 800f3a2:	d1f9      	bne.n	800f398 <_svfiprintf_r+0x54>
 800f3a4:	ebba 0b04 	subs.w	fp, sl, r4
 800f3a8:	d00b      	beq.n	800f3c2 <_svfiprintf_r+0x7e>
 800f3aa:	465b      	mov	r3, fp
 800f3ac:	4622      	mov	r2, r4
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	4638      	mov	r0, r7
 800f3b2:	f7ff ff6b 	bl	800f28c <__ssputs_r>
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	f000 80a7 	beq.w	800f50a <_svfiprintf_r+0x1c6>
 800f3bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3be:	445a      	add	r2, fp
 800f3c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	f000 809f 	beq.w	800f50a <_svfiprintf_r+0x1c6>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f3d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3d6:	f10a 0a01 	add.w	sl, sl, #1
 800f3da:	9304      	str	r3, [sp, #16]
 800f3dc:	9307      	str	r3, [sp, #28]
 800f3de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3e4:	4654      	mov	r4, sl
 800f3e6:	2205      	movs	r2, #5
 800f3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ec:	484e      	ldr	r0, [pc, #312]	@ (800f528 <_svfiprintf_r+0x1e4>)
 800f3ee:	f7f0 ff1f 	bl	8000230 <memchr>
 800f3f2:	9a04      	ldr	r2, [sp, #16]
 800f3f4:	b9d8      	cbnz	r0, 800f42e <_svfiprintf_r+0xea>
 800f3f6:	06d0      	lsls	r0, r2, #27
 800f3f8:	bf44      	itt	mi
 800f3fa:	2320      	movmi	r3, #32
 800f3fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f400:	0711      	lsls	r1, r2, #28
 800f402:	bf44      	itt	mi
 800f404:	232b      	movmi	r3, #43	@ 0x2b
 800f406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f40a:	f89a 3000 	ldrb.w	r3, [sl]
 800f40e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f410:	d015      	beq.n	800f43e <_svfiprintf_r+0xfa>
 800f412:	9a07      	ldr	r2, [sp, #28]
 800f414:	4654      	mov	r4, sl
 800f416:	2000      	movs	r0, #0
 800f418:	f04f 0c0a 	mov.w	ip, #10
 800f41c:	4621      	mov	r1, r4
 800f41e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f422:	3b30      	subs	r3, #48	@ 0x30
 800f424:	2b09      	cmp	r3, #9
 800f426:	d94b      	bls.n	800f4c0 <_svfiprintf_r+0x17c>
 800f428:	b1b0      	cbz	r0, 800f458 <_svfiprintf_r+0x114>
 800f42a:	9207      	str	r2, [sp, #28]
 800f42c:	e014      	b.n	800f458 <_svfiprintf_r+0x114>
 800f42e:	eba0 0308 	sub.w	r3, r0, r8
 800f432:	fa09 f303 	lsl.w	r3, r9, r3
 800f436:	4313      	orrs	r3, r2
 800f438:	9304      	str	r3, [sp, #16]
 800f43a:	46a2      	mov	sl, r4
 800f43c:	e7d2      	b.n	800f3e4 <_svfiprintf_r+0xa0>
 800f43e:	9b03      	ldr	r3, [sp, #12]
 800f440:	1d19      	adds	r1, r3, #4
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	9103      	str	r1, [sp, #12]
 800f446:	2b00      	cmp	r3, #0
 800f448:	bfbb      	ittet	lt
 800f44a:	425b      	neglt	r3, r3
 800f44c:	f042 0202 	orrlt.w	r2, r2, #2
 800f450:	9307      	strge	r3, [sp, #28]
 800f452:	9307      	strlt	r3, [sp, #28]
 800f454:	bfb8      	it	lt
 800f456:	9204      	strlt	r2, [sp, #16]
 800f458:	7823      	ldrb	r3, [r4, #0]
 800f45a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f45c:	d10a      	bne.n	800f474 <_svfiprintf_r+0x130>
 800f45e:	7863      	ldrb	r3, [r4, #1]
 800f460:	2b2a      	cmp	r3, #42	@ 0x2a
 800f462:	d132      	bne.n	800f4ca <_svfiprintf_r+0x186>
 800f464:	9b03      	ldr	r3, [sp, #12]
 800f466:	1d1a      	adds	r2, r3, #4
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	9203      	str	r2, [sp, #12]
 800f46c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f470:	3402      	adds	r4, #2
 800f472:	9305      	str	r3, [sp, #20]
 800f474:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f538 <_svfiprintf_r+0x1f4>
 800f478:	7821      	ldrb	r1, [r4, #0]
 800f47a:	2203      	movs	r2, #3
 800f47c:	4650      	mov	r0, sl
 800f47e:	f7f0 fed7 	bl	8000230 <memchr>
 800f482:	b138      	cbz	r0, 800f494 <_svfiprintf_r+0x150>
 800f484:	9b04      	ldr	r3, [sp, #16]
 800f486:	eba0 000a 	sub.w	r0, r0, sl
 800f48a:	2240      	movs	r2, #64	@ 0x40
 800f48c:	4082      	lsls	r2, r0
 800f48e:	4313      	orrs	r3, r2
 800f490:	3401      	adds	r4, #1
 800f492:	9304      	str	r3, [sp, #16]
 800f494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f498:	4824      	ldr	r0, [pc, #144]	@ (800f52c <_svfiprintf_r+0x1e8>)
 800f49a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f49e:	2206      	movs	r2, #6
 800f4a0:	f7f0 fec6 	bl	8000230 <memchr>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d036      	beq.n	800f516 <_svfiprintf_r+0x1d2>
 800f4a8:	4b21      	ldr	r3, [pc, #132]	@ (800f530 <_svfiprintf_r+0x1ec>)
 800f4aa:	bb1b      	cbnz	r3, 800f4f4 <_svfiprintf_r+0x1b0>
 800f4ac:	9b03      	ldr	r3, [sp, #12]
 800f4ae:	3307      	adds	r3, #7
 800f4b0:	f023 0307 	bic.w	r3, r3, #7
 800f4b4:	3308      	adds	r3, #8
 800f4b6:	9303      	str	r3, [sp, #12]
 800f4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4ba:	4433      	add	r3, r6
 800f4bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4be:	e76a      	b.n	800f396 <_svfiprintf_r+0x52>
 800f4c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4c4:	460c      	mov	r4, r1
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	e7a8      	b.n	800f41c <_svfiprintf_r+0xd8>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	3401      	adds	r4, #1
 800f4ce:	9305      	str	r3, [sp, #20]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	f04f 0c0a 	mov.w	ip, #10
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4dc:	3a30      	subs	r2, #48	@ 0x30
 800f4de:	2a09      	cmp	r2, #9
 800f4e0:	d903      	bls.n	800f4ea <_svfiprintf_r+0x1a6>
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d0c6      	beq.n	800f474 <_svfiprintf_r+0x130>
 800f4e6:	9105      	str	r1, [sp, #20]
 800f4e8:	e7c4      	b.n	800f474 <_svfiprintf_r+0x130>
 800f4ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e7f0      	b.n	800f4d6 <_svfiprintf_r+0x192>
 800f4f4:	ab03      	add	r3, sp, #12
 800f4f6:	9300      	str	r3, [sp, #0]
 800f4f8:	462a      	mov	r2, r5
 800f4fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f534 <_svfiprintf_r+0x1f0>)
 800f4fc:	a904      	add	r1, sp, #16
 800f4fe:	4638      	mov	r0, r7
 800f500:	f7fc fbd2 	bl	800bca8 <_printf_float>
 800f504:	1c42      	adds	r2, r0, #1
 800f506:	4606      	mov	r6, r0
 800f508:	d1d6      	bne.n	800f4b8 <_svfiprintf_r+0x174>
 800f50a:	89ab      	ldrh	r3, [r5, #12]
 800f50c:	065b      	lsls	r3, r3, #25
 800f50e:	f53f af2d 	bmi.w	800f36c <_svfiprintf_r+0x28>
 800f512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f514:	e72c      	b.n	800f370 <_svfiprintf_r+0x2c>
 800f516:	ab03      	add	r3, sp, #12
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	462a      	mov	r2, r5
 800f51c:	4b05      	ldr	r3, [pc, #20]	@ (800f534 <_svfiprintf_r+0x1f0>)
 800f51e:	a904      	add	r1, sp, #16
 800f520:	4638      	mov	r0, r7
 800f522:	f7fc fe59 	bl	800c1d8 <_printf_i>
 800f526:	e7ed      	b.n	800f504 <_svfiprintf_r+0x1c0>
 800f528:	0801243c 	.word	0x0801243c
 800f52c:	08012446 	.word	0x08012446
 800f530:	0800bca9 	.word	0x0800bca9
 800f534:	0800f28d 	.word	0x0800f28d
 800f538:	08012442 	.word	0x08012442

0800f53c <__sfputc_r>:
 800f53c:	6893      	ldr	r3, [r2, #8]
 800f53e:	3b01      	subs	r3, #1
 800f540:	2b00      	cmp	r3, #0
 800f542:	b410      	push	{r4}
 800f544:	6093      	str	r3, [r2, #8]
 800f546:	da08      	bge.n	800f55a <__sfputc_r+0x1e>
 800f548:	6994      	ldr	r4, [r2, #24]
 800f54a:	42a3      	cmp	r3, r4
 800f54c:	db01      	blt.n	800f552 <__sfputc_r+0x16>
 800f54e:	290a      	cmp	r1, #10
 800f550:	d103      	bne.n	800f55a <__sfputc_r+0x1e>
 800f552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f556:	f000 ba53 	b.w	800fa00 <__swbuf_r>
 800f55a:	6813      	ldr	r3, [r2, #0]
 800f55c:	1c58      	adds	r0, r3, #1
 800f55e:	6010      	str	r0, [r2, #0]
 800f560:	7019      	strb	r1, [r3, #0]
 800f562:	4608      	mov	r0, r1
 800f564:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f568:	4770      	bx	lr

0800f56a <__sfputs_r>:
 800f56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56c:	4606      	mov	r6, r0
 800f56e:	460f      	mov	r7, r1
 800f570:	4614      	mov	r4, r2
 800f572:	18d5      	adds	r5, r2, r3
 800f574:	42ac      	cmp	r4, r5
 800f576:	d101      	bne.n	800f57c <__sfputs_r+0x12>
 800f578:	2000      	movs	r0, #0
 800f57a:	e007      	b.n	800f58c <__sfputs_r+0x22>
 800f57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f580:	463a      	mov	r2, r7
 800f582:	4630      	mov	r0, r6
 800f584:	f7ff ffda 	bl	800f53c <__sfputc_r>
 800f588:	1c43      	adds	r3, r0, #1
 800f58a:	d1f3      	bne.n	800f574 <__sfputs_r+0xa>
 800f58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f590 <_vfiprintf_r>:
 800f590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f594:	460d      	mov	r5, r1
 800f596:	b09d      	sub	sp, #116	@ 0x74
 800f598:	4614      	mov	r4, r2
 800f59a:	4698      	mov	r8, r3
 800f59c:	4606      	mov	r6, r0
 800f59e:	b118      	cbz	r0, 800f5a8 <_vfiprintf_r+0x18>
 800f5a0:	6a03      	ldr	r3, [r0, #32]
 800f5a2:	b90b      	cbnz	r3, 800f5a8 <_vfiprintf_r+0x18>
 800f5a4:	f7fd f9d0 	bl	800c948 <__sinit>
 800f5a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5aa:	07d9      	lsls	r1, r3, #31
 800f5ac:	d405      	bmi.n	800f5ba <_vfiprintf_r+0x2a>
 800f5ae:	89ab      	ldrh	r3, [r5, #12]
 800f5b0:	059a      	lsls	r2, r3, #22
 800f5b2:	d402      	bmi.n	800f5ba <_vfiprintf_r+0x2a>
 800f5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5b6:	f7fd fc38 	bl	800ce2a <__retarget_lock_acquire_recursive>
 800f5ba:	89ab      	ldrh	r3, [r5, #12]
 800f5bc:	071b      	lsls	r3, r3, #28
 800f5be:	d501      	bpl.n	800f5c4 <_vfiprintf_r+0x34>
 800f5c0:	692b      	ldr	r3, [r5, #16]
 800f5c2:	b99b      	cbnz	r3, 800f5ec <_vfiprintf_r+0x5c>
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f000 fa58 	bl	800fa7c <__swsetup_r>
 800f5cc:	b170      	cbz	r0, 800f5ec <_vfiprintf_r+0x5c>
 800f5ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5d0:	07dc      	lsls	r4, r3, #31
 800f5d2:	d504      	bpl.n	800f5de <_vfiprintf_r+0x4e>
 800f5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d8:	b01d      	add	sp, #116	@ 0x74
 800f5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5de:	89ab      	ldrh	r3, [r5, #12]
 800f5e0:	0598      	lsls	r0, r3, #22
 800f5e2:	d4f7      	bmi.n	800f5d4 <_vfiprintf_r+0x44>
 800f5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5e6:	f7fd fc21 	bl	800ce2c <__retarget_lock_release_recursive>
 800f5ea:	e7f3      	b.n	800f5d4 <_vfiprintf_r+0x44>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5f0:	2320      	movs	r3, #32
 800f5f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5fa:	2330      	movs	r3, #48	@ 0x30
 800f5fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f7ac <_vfiprintf_r+0x21c>
 800f600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f604:	f04f 0901 	mov.w	r9, #1
 800f608:	4623      	mov	r3, r4
 800f60a:	469a      	mov	sl, r3
 800f60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f610:	b10a      	cbz	r2, 800f616 <_vfiprintf_r+0x86>
 800f612:	2a25      	cmp	r2, #37	@ 0x25
 800f614:	d1f9      	bne.n	800f60a <_vfiprintf_r+0x7a>
 800f616:	ebba 0b04 	subs.w	fp, sl, r4
 800f61a:	d00b      	beq.n	800f634 <_vfiprintf_r+0xa4>
 800f61c:	465b      	mov	r3, fp
 800f61e:	4622      	mov	r2, r4
 800f620:	4629      	mov	r1, r5
 800f622:	4630      	mov	r0, r6
 800f624:	f7ff ffa1 	bl	800f56a <__sfputs_r>
 800f628:	3001      	adds	r0, #1
 800f62a:	f000 80a7 	beq.w	800f77c <_vfiprintf_r+0x1ec>
 800f62e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f630:	445a      	add	r2, fp
 800f632:	9209      	str	r2, [sp, #36]	@ 0x24
 800f634:	f89a 3000 	ldrb.w	r3, [sl]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f000 809f 	beq.w	800f77c <_vfiprintf_r+0x1ec>
 800f63e:	2300      	movs	r3, #0
 800f640:	f04f 32ff 	mov.w	r2, #4294967295
 800f644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f648:	f10a 0a01 	add.w	sl, sl, #1
 800f64c:	9304      	str	r3, [sp, #16]
 800f64e:	9307      	str	r3, [sp, #28]
 800f650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f654:	931a      	str	r3, [sp, #104]	@ 0x68
 800f656:	4654      	mov	r4, sl
 800f658:	2205      	movs	r2, #5
 800f65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f65e:	4853      	ldr	r0, [pc, #332]	@ (800f7ac <_vfiprintf_r+0x21c>)
 800f660:	f7f0 fde6 	bl	8000230 <memchr>
 800f664:	9a04      	ldr	r2, [sp, #16]
 800f666:	b9d8      	cbnz	r0, 800f6a0 <_vfiprintf_r+0x110>
 800f668:	06d1      	lsls	r1, r2, #27
 800f66a:	bf44      	itt	mi
 800f66c:	2320      	movmi	r3, #32
 800f66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f672:	0713      	lsls	r3, r2, #28
 800f674:	bf44      	itt	mi
 800f676:	232b      	movmi	r3, #43	@ 0x2b
 800f678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f67c:	f89a 3000 	ldrb.w	r3, [sl]
 800f680:	2b2a      	cmp	r3, #42	@ 0x2a
 800f682:	d015      	beq.n	800f6b0 <_vfiprintf_r+0x120>
 800f684:	9a07      	ldr	r2, [sp, #28]
 800f686:	4654      	mov	r4, sl
 800f688:	2000      	movs	r0, #0
 800f68a:	f04f 0c0a 	mov.w	ip, #10
 800f68e:	4621      	mov	r1, r4
 800f690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f694:	3b30      	subs	r3, #48	@ 0x30
 800f696:	2b09      	cmp	r3, #9
 800f698:	d94b      	bls.n	800f732 <_vfiprintf_r+0x1a2>
 800f69a:	b1b0      	cbz	r0, 800f6ca <_vfiprintf_r+0x13a>
 800f69c:	9207      	str	r2, [sp, #28]
 800f69e:	e014      	b.n	800f6ca <_vfiprintf_r+0x13a>
 800f6a0:	eba0 0308 	sub.w	r3, r0, r8
 800f6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	46a2      	mov	sl, r4
 800f6ae:	e7d2      	b.n	800f656 <_vfiprintf_r+0xc6>
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	1d19      	adds	r1, r3, #4
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	9103      	str	r1, [sp, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bfbb      	ittet	lt
 800f6bc:	425b      	neglt	r3, r3
 800f6be:	f042 0202 	orrlt.w	r2, r2, #2
 800f6c2:	9307      	strge	r3, [sp, #28]
 800f6c4:	9307      	strlt	r3, [sp, #28]
 800f6c6:	bfb8      	it	lt
 800f6c8:	9204      	strlt	r2, [sp, #16]
 800f6ca:	7823      	ldrb	r3, [r4, #0]
 800f6cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6ce:	d10a      	bne.n	800f6e6 <_vfiprintf_r+0x156>
 800f6d0:	7863      	ldrb	r3, [r4, #1]
 800f6d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6d4:	d132      	bne.n	800f73c <_vfiprintf_r+0x1ac>
 800f6d6:	9b03      	ldr	r3, [sp, #12]
 800f6d8:	1d1a      	adds	r2, r3, #4
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	9203      	str	r2, [sp, #12]
 800f6de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6e2:	3402      	adds	r4, #2
 800f6e4:	9305      	str	r3, [sp, #20]
 800f6e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f7bc <_vfiprintf_r+0x22c>
 800f6ea:	7821      	ldrb	r1, [r4, #0]
 800f6ec:	2203      	movs	r2, #3
 800f6ee:	4650      	mov	r0, sl
 800f6f0:	f7f0 fd9e 	bl	8000230 <memchr>
 800f6f4:	b138      	cbz	r0, 800f706 <_vfiprintf_r+0x176>
 800f6f6:	9b04      	ldr	r3, [sp, #16]
 800f6f8:	eba0 000a 	sub.w	r0, r0, sl
 800f6fc:	2240      	movs	r2, #64	@ 0x40
 800f6fe:	4082      	lsls	r2, r0
 800f700:	4313      	orrs	r3, r2
 800f702:	3401      	adds	r4, #1
 800f704:	9304      	str	r3, [sp, #16]
 800f706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f70a:	4829      	ldr	r0, [pc, #164]	@ (800f7b0 <_vfiprintf_r+0x220>)
 800f70c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f710:	2206      	movs	r2, #6
 800f712:	f7f0 fd8d 	bl	8000230 <memchr>
 800f716:	2800      	cmp	r0, #0
 800f718:	d03f      	beq.n	800f79a <_vfiprintf_r+0x20a>
 800f71a:	4b26      	ldr	r3, [pc, #152]	@ (800f7b4 <_vfiprintf_r+0x224>)
 800f71c:	bb1b      	cbnz	r3, 800f766 <_vfiprintf_r+0x1d6>
 800f71e:	9b03      	ldr	r3, [sp, #12]
 800f720:	3307      	adds	r3, #7
 800f722:	f023 0307 	bic.w	r3, r3, #7
 800f726:	3308      	adds	r3, #8
 800f728:	9303      	str	r3, [sp, #12]
 800f72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f72c:	443b      	add	r3, r7
 800f72e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f730:	e76a      	b.n	800f608 <_vfiprintf_r+0x78>
 800f732:	fb0c 3202 	mla	r2, ip, r2, r3
 800f736:	460c      	mov	r4, r1
 800f738:	2001      	movs	r0, #1
 800f73a:	e7a8      	b.n	800f68e <_vfiprintf_r+0xfe>
 800f73c:	2300      	movs	r3, #0
 800f73e:	3401      	adds	r4, #1
 800f740:	9305      	str	r3, [sp, #20]
 800f742:	4619      	mov	r1, r3
 800f744:	f04f 0c0a 	mov.w	ip, #10
 800f748:	4620      	mov	r0, r4
 800f74a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f74e:	3a30      	subs	r2, #48	@ 0x30
 800f750:	2a09      	cmp	r2, #9
 800f752:	d903      	bls.n	800f75c <_vfiprintf_r+0x1cc>
 800f754:	2b00      	cmp	r3, #0
 800f756:	d0c6      	beq.n	800f6e6 <_vfiprintf_r+0x156>
 800f758:	9105      	str	r1, [sp, #20]
 800f75a:	e7c4      	b.n	800f6e6 <_vfiprintf_r+0x156>
 800f75c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f760:	4604      	mov	r4, r0
 800f762:	2301      	movs	r3, #1
 800f764:	e7f0      	b.n	800f748 <_vfiprintf_r+0x1b8>
 800f766:	ab03      	add	r3, sp, #12
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	462a      	mov	r2, r5
 800f76c:	4b12      	ldr	r3, [pc, #72]	@ (800f7b8 <_vfiprintf_r+0x228>)
 800f76e:	a904      	add	r1, sp, #16
 800f770:	4630      	mov	r0, r6
 800f772:	f7fc fa99 	bl	800bca8 <_printf_float>
 800f776:	4607      	mov	r7, r0
 800f778:	1c78      	adds	r0, r7, #1
 800f77a:	d1d6      	bne.n	800f72a <_vfiprintf_r+0x19a>
 800f77c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f77e:	07d9      	lsls	r1, r3, #31
 800f780:	d405      	bmi.n	800f78e <_vfiprintf_r+0x1fe>
 800f782:	89ab      	ldrh	r3, [r5, #12]
 800f784:	059a      	lsls	r2, r3, #22
 800f786:	d402      	bmi.n	800f78e <_vfiprintf_r+0x1fe>
 800f788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f78a:	f7fd fb4f 	bl	800ce2c <__retarget_lock_release_recursive>
 800f78e:	89ab      	ldrh	r3, [r5, #12]
 800f790:	065b      	lsls	r3, r3, #25
 800f792:	f53f af1f 	bmi.w	800f5d4 <_vfiprintf_r+0x44>
 800f796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f798:	e71e      	b.n	800f5d8 <_vfiprintf_r+0x48>
 800f79a:	ab03      	add	r3, sp, #12
 800f79c:	9300      	str	r3, [sp, #0]
 800f79e:	462a      	mov	r2, r5
 800f7a0:	4b05      	ldr	r3, [pc, #20]	@ (800f7b8 <_vfiprintf_r+0x228>)
 800f7a2:	a904      	add	r1, sp, #16
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f7fc fd17 	bl	800c1d8 <_printf_i>
 800f7aa:	e7e4      	b.n	800f776 <_vfiprintf_r+0x1e6>
 800f7ac:	0801243c 	.word	0x0801243c
 800f7b0:	08012446 	.word	0x08012446
 800f7b4:	0800bca9 	.word	0x0800bca9
 800f7b8:	0800f56b 	.word	0x0800f56b
 800f7bc:	08012442 	.word	0x08012442

0800f7c0 <__sflush_r>:
 800f7c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c8:	0716      	lsls	r6, r2, #28
 800f7ca:	4605      	mov	r5, r0
 800f7cc:	460c      	mov	r4, r1
 800f7ce:	d454      	bmi.n	800f87a <__sflush_r+0xba>
 800f7d0:	684b      	ldr	r3, [r1, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	dc02      	bgt.n	800f7dc <__sflush_r+0x1c>
 800f7d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	dd48      	ble.n	800f86e <__sflush_r+0xae>
 800f7dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7de:	2e00      	cmp	r6, #0
 800f7e0:	d045      	beq.n	800f86e <__sflush_r+0xae>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f7e8:	682f      	ldr	r7, [r5, #0]
 800f7ea:	6a21      	ldr	r1, [r4, #32]
 800f7ec:	602b      	str	r3, [r5, #0]
 800f7ee:	d030      	beq.n	800f852 <__sflush_r+0x92>
 800f7f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f7f2:	89a3      	ldrh	r3, [r4, #12]
 800f7f4:	0759      	lsls	r1, r3, #29
 800f7f6:	d505      	bpl.n	800f804 <__sflush_r+0x44>
 800f7f8:	6863      	ldr	r3, [r4, #4]
 800f7fa:	1ad2      	subs	r2, r2, r3
 800f7fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f7fe:	b10b      	cbz	r3, 800f804 <__sflush_r+0x44>
 800f800:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f802:	1ad2      	subs	r2, r2, r3
 800f804:	2300      	movs	r3, #0
 800f806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f808:	6a21      	ldr	r1, [r4, #32]
 800f80a:	4628      	mov	r0, r5
 800f80c:	47b0      	blx	r6
 800f80e:	1c43      	adds	r3, r0, #1
 800f810:	89a3      	ldrh	r3, [r4, #12]
 800f812:	d106      	bne.n	800f822 <__sflush_r+0x62>
 800f814:	6829      	ldr	r1, [r5, #0]
 800f816:	291d      	cmp	r1, #29
 800f818:	d82b      	bhi.n	800f872 <__sflush_r+0xb2>
 800f81a:	4a2a      	ldr	r2, [pc, #168]	@ (800f8c4 <__sflush_r+0x104>)
 800f81c:	40ca      	lsrs	r2, r1
 800f81e:	07d6      	lsls	r6, r2, #31
 800f820:	d527      	bpl.n	800f872 <__sflush_r+0xb2>
 800f822:	2200      	movs	r2, #0
 800f824:	6062      	str	r2, [r4, #4]
 800f826:	04d9      	lsls	r1, r3, #19
 800f828:	6922      	ldr	r2, [r4, #16]
 800f82a:	6022      	str	r2, [r4, #0]
 800f82c:	d504      	bpl.n	800f838 <__sflush_r+0x78>
 800f82e:	1c42      	adds	r2, r0, #1
 800f830:	d101      	bne.n	800f836 <__sflush_r+0x76>
 800f832:	682b      	ldr	r3, [r5, #0]
 800f834:	b903      	cbnz	r3, 800f838 <__sflush_r+0x78>
 800f836:	6560      	str	r0, [r4, #84]	@ 0x54
 800f838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f83a:	602f      	str	r7, [r5, #0]
 800f83c:	b1b9      	cbz	r1, 800f86e <__sflush_r+0xae>
 800f83e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f842:	4299      	cmp	r1, r3
 800f844:	d002      	beq.n	800f84c <__sflush_r+0x8c>
 800f846:	4628      	mov	r0, r5
 800f848:	f7fe f96e 	bl	800db28 <_free_r>
 800f84c:	2300      	movs	r3, #0
 800f84e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f850:	e00d      	b.n	800f86e <__sflush_r+0xae>
 800f852:	2301      	movs	r3, #1
 800f854:	4628      	mov	r0, r5
 800f856:	47b0      	blx	r6
 800f858:	4602      	mov	r2, r0
 800f85a:	1c50      	adds	r0, r2, #1
 800f85c:	d1c9      	bne.n	800f7f2 <__sflush_r+0x32>
 800f85e:	682b      	ldr	r3, [r5, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d0c6      	beq.n	800f7f2 <__sflush_r+0x32>
 800f864:	2b1d      	cmp	r3, #29
 800f866:	d001      	beq.n	800f86c <__sflush_r+0xac>
 800f868:	2b16      	cmp	r3, #22
 800f86a:	d11e      	bne.n	800f8aa <__sflush_r+0xea>
 800f86c:	602f      	str	r7, [r5, #0]
 800f86e:	2000      	movs	r0, #0
 800f870:	e022      	b.n	800f8b8 <__sflush_r+0xf8>
 800f872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f876:	b21b      	sxth	r3, r3
 800f878:	e01b      	b.n	800f8b2 <__sflush_r+0xf2>
 800f87a:	690f      	ldr	r7, [r1, #16]
 800f87c:	2f00      	cmp	r7, #0
 800f87e:	d0f6      	beq.n	800f86e <__sflush_r+0xae>
 800f880:	0793      	lsls	r3, r2, #30
 800f882:	680e      	ldr	r6, [r1, #0]
 800f884:	bf08      	it	eq
 800f886:	694b      	ldreq	r3, [r1, #20]
 800f888:	600f      	str	r7, [r1, #0]
 800f88a:	bf18      	it	ne
 800f88c:	2300      	movne	r3, #0
 800f88e:	eba6 0807 	sub.w	r8, r6, r7
 800f892:	608b      	str	r3, [r1, #8]
 800f894:	f1b8 0f00 	cmp.w	r8, #0
 800f898:	dde9      	ble.n	800f86e <__sflush_r+0xae>
 800f89a:	6a21      	ldr	r1, [r4, #32]
 800f89c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f89e:	4643      	mov	r3, r8
 800f8a0:	463a      	mov	r2, r7
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	47b0      	blx	r6
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	dc08      	bgt.n	800f8bc <__sflush_r+0xfc>
 800f8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8b2:	81a3      	strh	r3, [r4, #12]
 800f8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8bc:	4407      	add	r7, r0
 800f8be:	eba8 0800 	sub.w	r8, r8, r0
 800f8c2:	e7e7      	b.n	800f894 <__sflush_r+0xd4>
 800f8c4:	20400001 	.word	0x20400001

0800f8c8 <_fflush_r>:
 800f8c8:	b538      	push	{r3, r4, r5, lr}
 800f8ca:	690b      	ldr	r3, [r1, #16]
 800f8cc:	4605      	mov	r5, r0
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	b913      	cbnz	r3, 800f8d8 <_fflush_r+0x10>
 800f8d2:	2500      	movs	r5, #0
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	bd38      	pop	{r3, r4, r5, pc}
 800f8d8:	b118      	cbz	r0, 800f8e2 <_fflush_r+0x1a>
 800f8da:	6a03      	ldr	r3, [r0, #32]
 800f8dc:	b90b      	cbnz	r3, 800f8e2 <_fflush_r+0x1a>
 800f8de:	f7fd f833 	bl	800c948 <__sinit>
 800f8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d0f3      	beq.n	800f8d2 <_fflush_r+0xa>
 800f8ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f8ec:	07d0      	lsls	r0, r2, #31
 800f8ee:	d404      	bmi.n	800f8fa <_fflush_r+0x32>
 800f8f0:	0599      	lsls	r1, r3, #22
 800f8f2:	d402      	bmi.n	800f8fa <_fflush_r+0x32>
 800f8f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8f6:	f7fd fa98 	bl	800ce2a <__retarget_lock_acquire_recursive>
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	f7ff ff5f 	bl	800f7c0 <__sflush_r>
 800f902:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f904:	07da      	lsls	r2, r3, #31
 800f906:	4605      	mov	r5, r0
 800f908:	d4e4      	bmi.n	800f8d4 <_fflush_r+0xc>
 800f90a:	89a3      	ldrh	r3, [r4, #12]
 800f90c:	059b      	lsls	r3, r3, #22
 800f90e:	d4e1      	bmi.n	800f8d4 <_fflush_r+0xc>
 800f910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f912:	f7fd fa8b 	bl	800ce2c <__retarget_lock_release_recursive>
 800f916:	e7dd      	b.n	800f8d4 <_fflush_r+0xc>

0800f918 <fiprintf>:
 800f918:	b40e      	push	{r1, r2, r3}
 800f91a:	b503      	push	{r0, r1, lr}
 800f91c:	4601      	mov	r1, r0
 800f91e:	ab03      	add	r3, sp, #12
 800f920:	4805      	ldr	r0, [pc, #20]	@ (800f938 <fiprintf+0x20>)
 800f922:	f853 2b04 	ldr.w	r2, [r3], #4
 800f926:	6800      	ldr	r0, [r0, #0]
 800f928:	9301      	str	r3, [sp, #4]
 800f92a:	f7ff fe31 	bl	800f590 <_vfiprintf_r>
 800f92e:	b002      	add	sp, #8
 800f930:	f85d eb04 	ldr.w	lr, [sp], #4
 800f934:	b003      	add	sp, #12
 800f936:	4770      	bx	lr
 800f938:	20000044 	.word	0x20000044

0800f93c <__swhatbuf_r>:
 800f93c:	b570      	push	{r4, r5, r6, lr}
 800f93e:	460c      	mov	r4, r1
 800f940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f944:	2900      	cmp	r1, #0
 800f946:	b096      	sub	sp, #88	@ 0x58
 800f948:	4615      	mov	r5, r2
 800f94a:	461e      	mov	r6, r3
 800f94c:	da0d      	bge.n	800f96a <__swhatbuf_r+0x2e>
 800f94e:	89a3      	ldrh	r3, [r4, #12]
 800f950:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f954:	f04f 0100 	mov.w	r1, #0
 800f958:	bf14      	ite	ne
 800f95a:	2340      	movne	r3, #64	@ 0x40
 800f95c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f960:	2000      	movs	r0, #0
 800f962:	6031      	str	r1, [r6, #0]
 800f964:	602b      	str	r3, [r5, #0]
 800f966:	b016      	add	sp, #88	@ 0x58
 800f968:	bd70      	pop	{r4, r5, r6, pc}
 800f96a:	466a      	mov	r2, sp
 800f96c:	f000 f908 	bl	800fb80 <_fstat_r>
 800f970:	2800      	cmp	r0, #0
 800f972:	dbec      	blt.n	800f94e <__swhatbuf_r+0x12>
 800f974:	9901      	ldr	r1, [sp, #4]
 800f976:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f97a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f97e:	4259      	negs	r1, r3
 800f980:	4159      	adcs	r1, r3
 800f982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f986:	e7eb      	b.n	800f960 <__swhatbuf_r+0x24>

0800f988 <__smakebuf_r>:
 800f988:	898b      	ldrh	r3, [r1, #12]
 800f98a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f98c:	079d      	lsls	r5, r3, #30
 800f98e:	4606      	mov	r6, r0
 800f990:	460c      	mov	r4, r1
 800f992:	d507      	bpl.n	800f9a4 <__smakebuf_r+0x1c>
 800f994:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f998:	6023      	str	r3, [r4, #0]
 800f99a:	6123      	str	r3, [r4, #16]
 800f99c:	2301      	movs	r3, #1
 800f99e:	6163      	str	r3, [r4, #20]
 800f9a0:	b003      	add	sp, #12
 800f9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9a4:	ab01      	add	r3, sp, #4
 800f9a6:	466a      	mov	r2, sp
 800f9a8:	f7ff ffc8 	bl	800f93c <__swhatbuf_r>
 800f9ac:	9f00      	ldr	r7, [sp, #0]
 800f9ae:	4605      	mov	r5, r0
 800f9b0:	4639      	mov	r1, r7
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f7fe f92c 	bl	800dc10 <_malloc_r>
 800f9b8:	b948      	cbnz	r0, 800f9ce <__smakebuf_r+0x46>
 800f9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9be:	059a      	lsls	r2, r3, #22
 800f9c0:	d4ee      	bmi.n	800f9a0 <__smakebuf_r+0x18>
 800f9c2:	f023 0303 	bic.w	r3, r3, #3
 800f9c6:	f043 0302 	orr.w	r3, r3, #2
 800f9ca:	81a3      	strh	r3, [r4, #12]
 800f9cc:	e7e2      	b.n	800f994 <__smakebuf_r+0xc>
 800f9ce:	89a3      	ldrh	r3, [r4, #12]
 800f9d0:	6020      	str	r0, [r4, #0]
 800f9d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9d6:	81a3      	strh	r3, [r4, #12]
 800f9d8:	9b01      	ldr	r3, [sp, #4]
 800f9da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f9de:	b15b      	cbz	r3, 800f9f8 <__smakebuf_r+0x70>
 800f9e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9e4:	4630      	mov	r0, r6
 800f9e6:	f000 f8dd 	bl	800fba4 <_isatty_r>
 800f9ea:	b128      	cbz	r0, 800f9f8 <__smakebuf_r+0x70>
 800f9ec:	89a3      	ldrh	r3, [r4, #12]
 800f9ee:	f023 0303 	bic.w	r3, r3, #3
 800f9f2:	f043 0301 	orr.w	r3, r3, #1
 800f9f6:	81a3      	strh	r3, [r4, #12]
 800f9f8:	89a3      	ldrh	r3, [r4, #12]
 800f9fa:	431d      	orrs	r5, r3
 800f9fc:	81a5      	strh	r5, [r4, #12]
 800f9fe:	e7cf      	b.n	800f9a0 <__smakebuf_r+0x18>

0800fa00 <__swbuf_r>:
 800fa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa02:	460e      	mov	r6, r1
 800fa04:	4614      	mov	r4, r2
 800fa06:	4605      	mov	r5, r0
 800fa08:	b118      	cbz	r0, 800fa12 <__swbuf_r+0x12>
 800fa0a:	6a03      	ldr	r3, [r0, #32]
 800fa0c:	b90b      	cbnz	r3, 800fa12 <__swbuf_r+0x12>
 800fa0e:	f7fc ff9b 	bl	800c948 <__sinit>
 800fa12:	69a3      	ldr	r3, [r4, #24]
 800fa14:	60a3      	str	r3, [r4, #8]
 800fa16:	89a3      	ldrh	r3, [r4, #12]
 800fa18:	071a      	lsls	r2, r3, #28
 800fa1a:	d501      	bpl.n	800fa20 <__swbuf_r+0x20>
 800fa1c:	6923      	ldr	r3, [r4, #16]
 800fa1e:	b943      	cbnz	r3, 800fa32 <__swbuf_r+0x32>
 800fa20:	4621      	mov	r1, r4
 800fa22:	4628      	mov	r0, r5
 800fa24:	f000 f82a 	bl	800fa7c <__swsetup_r>
 800fa28:	b118      	cbz	r0, 800fa32 <__swbuf_r+0x32>
 800fa2a:	f04f 37ff 	mov.w	r7, #4294967295
 800fa2e:	4638      	mov	r0, r7
 800fa30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa32:	6823      	ldr	r3, [r4, #0]
 800fa34:	6922      	ldr	r2, [r4, #16]
 800fa36:	1a98      	subs	r0, r3, r2
 800fa38:	6963      	ldr	r3, [r4, #20]
 800fa3a:	b2f6      	uxtb	r6, r6
 800fa3c:	4283      	cmp	r3, r0
 800fa3e:	4637      	mov	r7, r6
 800fa40:	dc05      	bgt.n	800fa4e <__swbuf_r+0x4e>
 800fa42:	4621      	mov	r1, r4
 800fa44:	4628      	mov	r0, r5
 800fa46:	f7ff ff3f 	bl	800f8c8 <_fflush_r>
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	d1ed      	bne.n	800fa2a <__swbuf_r+0x2a>
 800fa4e:	68a3      	ldr	r3, [r4, #8]
 800fa50:	3b01      	subs	r3, #1
 800fa52:	60a3      	str	r3, [r4, #8]
 800fa54:	6823      	ldr	r3, [r4, #0]
 800fa56:	1c5a      	adds	r2, r3, #1
 800fa58:	6022      	str	r2, [r4, #0]
 800fa5a:	701e      	strb	r6, [r3, #0]
 800fa5c:	6962      	ldr	r2, [r4, #20]
 800fa5e:	1c43      	adds	r3, r0, #1
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d004      	beq.n	800fa6e <__swbuf_r+0x6e>
 800fa64:	89a3      	ldrh	r3, [r4, #12]
 800fa66:	07db      	lsls	r3, r3, #31
 800fa68:	d5e1      	bpl.n	800fa2e <__swbuf_r+0x2e>
 800fa6a:	2e0a      	cmp	r6, #10
 800fa6c:	d1df      	bne.n	800fa2e <__swbuf_r+0x2e>
 800fa6e:	4621      	mov	r1, r4
 800fa70:	4628      	mov	r0, r5
 800fa72:	f7ff ff29 	bl	800f8c8 <_fflush_r>
 800fa76:	2800      	cmp	r0, #0
 800fa78:	d0d9      	beq.n	800fa2e <__swbuf_r+0x2e>
 800fa7a:	e7d6      	b.n	800fa2a <__swbuf_r+0x2a>

0800fa7c <__swsetup_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4b29      	ldr	r3, [pc, #164]	@ (800fb24 <__swsetup_r+0xa8>)
 800fa80:	4605      	mov	r5, r0
 800fa82:	6818      	ldr	r0, [r3, #0]
 800fa84:	460c      	mov	r4, r1
 800fa86:	b118      	cbz	r0, 800fa90 <__swsetup_r+0x14>
 800fa88:	6a03      	ldr	r3, [r0, #32]
 800fa8a:	b90b      	cbnz	r3, 800fa90 <__swsetup_r+0x14>
 800fa8c:	f7fc ff5c 	bl	800c948 <__sinit>
 800fa90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa94:	0719      	lsls	r1, r3, #28
 800fa96:	d422      	bmi.n	800fade <__swsetup_r+0x62>
 800fa98:	06da      	lsls	r2, r3, #27
 800fa9a:	d407      	bmi.n	800faac <__swsetup_r+0x30>
 800fa9c:	2209      	movs	r2, #9
 800fa9e:	602a      	str	r2, [r5, #0]
 800faa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800faa4:	81a3      	strh	r3, [r4, #12]
 800faa6:	f04f 30ff 	mov.w	r0, #4294967295
 800faaa:	e033      	b.n	800fb14 <__swsetup_r+0x98>
 800faac:	0758      	lsls	r0, r3, #29
 800faae:	d512      	bpl.n	800fad6 <__swsetup_r+0x5a>
 800fab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fab2:	b141      	cbz	r1, 800fac6 <__swsetup_r+0x4a>
 800fab4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fab8:	4299      	cmp	r1, r3
 800faba:	d002      	beq.n	800fac2 <__swsetup_r+0x46>
 800fabc:	4628      	mov	r0, r5
 800fabe:	f7fe f833 	bl	800db28 <_free_r>
 800fac2:	2300      	movs	r3, #0
 800fac4:	6363      	str	r3, [r4, #52]	@ 0x34
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800facc:	81a3      	strh	r3, [r4, #12]
 800face:	2300      	movs	r3, #0
 800fad0:	6063      	str	r3, [r4, #4]
 800fad2:	6923      	ldr	r3, [r4, #16]
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	89a3      	ldrh	r3, [r4, #12]
 800fad8:	f043 0308 	orr.w	r3, r3, #8
 800fadc:	81a3      	strh	r3, [r4, #12]
 800fade:	6923      	ldr	r3, [r4, #16]
 800fae0:	b94b      	cbnz	r3, 800faf6 <__swsetup_r+0x7a>
 800fae2:	89a3      	ldrh	r3, [r4, #12]
 800fae4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800faec:	d003      	beq.n	800faf6 <__swsetup_r+0x7a>
 800faee:	4621      	mov	r1, r4
 800faf0:	4628      	mov	r0, r5
 800faf2:	f7ff ff49 	bl	800f988 <__smakebuf_r>
 800faf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fafa:	f013 0201 	ands.w	r2, r3, #1
 800fafe:	d00a      	beq.n	800fb16 <__swsetup_r+0x9a>
 800fb00:	2200      	movs	r2, #0
 800fb02:	60a2      	str	r2, [r4, #8]
 800fb04:	6962      	ldr	r2, [r4, #20]
 800fb06:	4252      	negs	r2, r2
 800fb08:	61a2      	str	r2, [r4, #24]
 800fb0a:	6922      	ldr	r2, [r4, #16]
 800fb0c:	b942      	cbnz	r2, 800fb20 <__swsetup_r+0xa4>
 800fb0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb12:	d1c5      	bne.n	800faa0 <__swsetup_r+0x24>
 800fb14:	bd38      	pop	{r3, r4, r5, pc}
 800fb16:	0799      	lsls	r1, r3, #30
 800fb18:	bf58      	it	pl
 800fb1a:	6962      	ldrpl	r2, [r4, #20]
 800fb1c:	60a2      	str	r2, [r4, #8]
 800fb1e:	e7f4      	b.n	800fb0a <__swsetup_r+0x8e>
 800fb20:	2000      	movs	r0, #0
 800fb22:	e7f7      	b.n	800fb14 <__swsetup_r+0x98>
 800fb24:	20000044 	.word	0x20000044

0800fb28 <memmove>:
 800fb28:	4288      	cmp	r0, r1
 800fb2a:	b510      	push	{r4, lr}
 800fb2c:	eb01 0402 	add.w	r4, r1, r2
 800fb30:	d902      	bls.n	800fb38 <memmove+0x10>
 800fb32:	4284      	cmp	r4, r0
 800fb34:	4623      	mov	r3, r4
 800fb36:	d807      	bhi.n	800fb48 <memmove+0x20>
 800fb38:	1e43      	subs	r3, r0, #1
 800fb3a:	42a1      	cmp	r1, r4
 800fb3c:	d008      	beq.n	800fb50 <memmove+0x28>
 800fb3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb46:	e7f8      	b.n	800fb3a <memmove+0x12>
 800fb48:	4402      	add	r2, r0
 800fb4a:	4601      	mov	r1, r0
 800fb4c:	428a      	cmp	r2, r1
 800fb4e:	d100      	bne.n	800fb52 <memmove+0x2a>
 800fb50:	bd10      	pop	{r4, pc}
 800fb52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb5a:	e7f7      	b.n	800fb4c <memmove+0x24>

0800fb5c <strncmp>:
 800fb5c:	b510      	push	{r4, lr}
 800fb5e:	b16a      	cbz	r2, 800fb7c <strncmp+0x20>
 800fb60:	3901      	subs	r1, #1
 800fb62:	1884      	adds	r4, r0, r2
 800fb64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d103      	bne.n	800fb78 <strncmp+0x1c>
 800fb70:	42a0      	cmp	r0, r4
 800fb72:	d001      	beq.n	800fb78 <strncmp+0x1c>
 800fb74:	2a00      	cmp	r2, #0
 800fb76:	d1f5      	bne.n	800fb64 <strncmp+0x8>
 800fb78:	1ad0      	subs	r0, r2, r3
 800fb7a:	bd10      	pop	{r4, pc}
 800fb7c:	4610      	mov	r0, r2
 800fb7e:	e7fc      	b.n	800fb7a <strncmp+0x1e>

0800fb80 <_fstat_r>:
 800fb80:	b538      	push	{r3, r4, r5, lr}
 800fb82:	4d07      	ldr	r5, [pc, #28]	@ (800fba0 <_fstat_r+0x20>)
 800fb84:	2300      	movs	r3, #0
 800fb86:	4604      	mov	r4, r0
 800fb88:	4608      	mov	r0, r1
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	602b      	str	r3, [r5, #0]
 800fb8e:	f7f4 fdbb 	bl	8004708 <_fstat>
 800fb92:	1c43      	adds	r3, r0, #1
 800fb94:	d102      	bne.n	800fb9c <_fstat_r+0x1c>
 800fb96:	682b      	ldr	r3, [r5, #0]
 800fb98:	b103      	cbz	r3, 800fb9c <_fstat_r+0x1c>
 800fb9a:	6023      	str	r3, [r4, #0]
 800fb9c:	bd38      	pop	{r3, r4, r5, pc}
 800fb9e:	bf00      	nop
 800fba0:	200011d4 	.word	0x200011d4

0800fba4 <_isatty_r>:
 800fba4:	b538      	push	{r3, r4, r5, lr}
 800fba6:	4d06      	ldr	r5, [pc, #24]	@ (800fbc0 <_isatty_r+0x1c>)
 800fba8:	2300      	movs	r3, #0
 800fbaa:	4604      	mov	r4, r0
 800fbac:	4608      	mov	r0, r1
 800fbae:	602b      	str	r3, [r5, #0]
 800fbb0:	f7f4 fdba 	bl	8004728 <_isatty>
 800fbb4:	1c43      	adds	r3, r0, #1
 800fbb6:	d102      	bne.n	800fbbe <_isatty_r+0x1a>
 800fbb8:	682b      	ldr	r3, [r5, #0]
 800fbba:	b103      	cbz	r3, 800fbbe <_isatty_r+0x1a>
 800fbbc:	6023      	str	r3, [r4, #0]
 800fbbe:	bd38      	pop	{r3, r4, r5, pc}
 800fbc0:	200011d4 	.word	0x200011d4

0800fbc4 <_sbrk_r>:
 800fbc4:	b538      	push	{r3, r4, r5, lr}
 800fbc6:	4d06      	ldr	r5, [pc, #24]	@ (800fbe0 <_sbrk_r+0x1c>)
 800fbc8:	2300      	movs	r3, #0
 800fbca:	4604      	mov	r4, r0
 800fbcc:	4608      	mov	r0, r1
 800fbce:	602b      	str	r3, [r5, #0]
 800fbd0:	f7f4 fdc2 	bl	8004758 <_sbrk>
 800fbd4:	1c43      	adds	r3, r0, #1
 800fbd6:	d102      	bne.n	800fbde <_sbrk_r+0x1a>
 800fbd8:	682b      	ldr	r3, [r5, #0]
 800fbda:	b103      	cbz	r3, 800fbde <_sbrk_r+0x1a>
 800fbdc:	6023      	str	r3, [r4, #0]
 800fbde:	bd38      	pop	{r3, r4, r5, pc}
 800fbe0:	200011d4 	.word	0x200011d4

0800fbe4 <memcpy>:
 800fbe4:	440a      	add	r2, r1
 800fbe6:	4291      	cmp	r1, r2
 800fbe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbec:	d100      	bne.n	800fbf0 <memcpy+0xc>
 800fbee:	4770      	bx	lr
 800fbf0:	b510      	push	{r4, lr}
 800fbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbfa:	4291      	cmp	r1, r2
 800fbfc:	d1f9      	bne.n	800fbf2 <memcpy+0xe>
 800fbfe:	bd10      	pop	{r4, pc}

0800fc00 <nan>:
 800fc00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fc08 <nan+0x8>
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	00000000 	.word	0x00000000
 800fc0c:	7ff80000 	.word	0x7ff80000

0800fc10 <abort>:
 800fc10:	b508      	push	{r3, lr}
 800fc12:	2006      	movs	r0, #6
 800fc14:	f000 fbc4 	bl	80103a0 <raise>
 800fc18:	2001      	movs	r0, #1
 800fc1a:	f7f4 fd41 	bl	80046a0 <_exit>

0800fc1e <_calloc_r>:
 800fc1e:	b570      	push	{r4, r5, r6, lr}
 800fc20:	fba1 5402 	umull	r5, r4, r1, r2
 800fc24:	b934      	cbnz	r4, 800fc34 <_calloc_r+0x16>
 800fc26:	4629      	mov	r1, r5
 800fc28:	f7fd fff2 	bl	800dc10 <_malloc_r>
 800fc2c:	4606      	mov	r6, r0
 800fc2e:	b928      	cbnz	r0, 800fc3c <_calloc_r+0x1e>
 800fc30:	4630      	mov	r0, r6
 800fc32:	bd70      	pop	{r4, r5, r6, pc}
 800fc34:	220c      	movs	r2, #12
 800fc36:	6002      	str	r2, [r0, #0]
 800fc38:	2600      	movs	r6, #0
 800fc3a:	e7f9      	b.n	800fc30 <_calloc_r+0x12>
 800fc3c:	462a      	mov	r2, r5
 800fc3e:	4621      	mov	r1, r4
 800fc40:	f7fd f819 	bl	800cc76 <memset>
 800fc44:	e7f4      	b.n	800fc30 <_calloc_r+0x12>

0800fc46 <rshift>:
 800fc46:	6903      	ldr	r3, [r0, #16]
 800fc48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fc4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc50:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fc54:	f100 0414 	add.w	r4, r0, #20
 800fc58:	dd45      	ble.n	800fce6 <rshift+0xa0>
 800fc5a:	f011 011f 	ands.w	r1, r1, #31
 800fc5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fc62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fc66:	d10c      	bne.n	800fc82 <rshift+0x3c>
 800fc68:	f100 0710 	add.w	r7, r0, #16
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	42b1      	cmp	r1, r6
 800fc70:	d334      	bcc.n	800fcdc <rshift+0x96>
 800fc72:	1a9b      	subs	r3, r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	1eea      	subs	r2, r5, #3
 800fc78:	4296      	cmp	r6, r2
 800fc7a:	bf38      	it	cc
 800fc7c:	2300      	movcc	r3, #0
 800fc7e:	4423      	add	r3, r4
 800fc80:	e015      	b.n	800fcae <rshift+0x68>
 800fc82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fc86:	f1c1 0820 	rsb	r8, r1, #32
 800fc8a:	40cf      	lsrs	r7, r1
 800fc8c:	f105 0e04 	add.w	lr, r5, #4
 800fc90:	46a1      	mov	r9, r4
 800fc92:	4576      	cmp	r6, lr
 800fc94:	46f4      	mov	ip, lr
 800fc96:	d815      	bhi.n	800fcc4 <rshift+0x7e>
 800fc98:	1a9a      	subs	r2, r3, r2
 800fc9a:	0092      	lsls	r2, r2, #2
 800fc9c:	3a04      	subs	r2, #4
 800fc9e:	3501      	adds	r5, #1
 800fca0:	42ae      	cmp	r6, r5
 800fca2:	bf38      	it	cc
 800fca4:	2200      	movcc	r2, #0
 800fca6:	18a3      	adds	r3, r4, r2
 800fca8:	50a7      	str	r7, [r4, r2]
 800fcaa:	b107      	cbz	r7, 800fcae <rshift+0x68>
 800fcac:	3304      	adds	r3, #4
 800fcae:	1b1a      	subs	r2, r3, r4
 800fcb0:	42a3      	cmp	r3, r4
 800fcb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fcb6:	bf08      	it	eq
 800fcb8:	2300      	moveq	r3, #0
 800fcba:	6102      	str	r2, [r0, #16]
 800fcbc:	bf08      	it	eq
 800fcbe:	6143      	streq	r3, [r0, #20]
 800fcc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcc4:	f8dc c000 	ldr.w	ip, [ip]
 800fcc8:	fa0c fc08 	lsl.w	ip, ip, r8
 800fccc:	ea4c 0707 	orr.w	r7, ip, r7
 800fcd0:	f849 7b04 	str.w	r7, [r9], #4
 800fcd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fcd8:	40cf      	lsrs	r7, r1
 800fcda:	e7da      	b.n	800fc92 <rshift+0x4c>
 800fcdc:	f851 cb04 	ldr.w	ip, [r1], #4
 800fce0:	f847 cf04 	str.w	ip, [r7, #4]!
 800fce4:	e7c3      	b.n	800fc6e <rshift+0x28>
 800fce6:	4623      	mov	r3, r4
 800fce8:	e7e1      	b.n	800fcae <rshift+0x68>

0800fcea <__hexdig_fun>:
 800fcea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fcee:	2b09      	cmp	r3, #9
 800fcf0:	d802      	bhi.n	800fcf8 <__hexdig_fun+0xe>
 800fcf2:	3820      	subs	r0, #32
 800fcf4:	b2c0      	uxtb	r0, r0
 800fcf6:	4770      	bx	lr
 800fcf8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fcfc:	2b05      	cmp	r3, #5
 800fcfe:	d801      	bhi.n	800fd04 <__hexdig_fun+0x1a>
 800fd00:	3847      	subs	r0, #71	@ 0x47
 800fd02:	e7f7      	b.n	800fcf4 <__hexdig_fun+0xa>
 800fd04:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fd08:	2b05      	cmp	r3, #5
 800fd0a:	d801      	bhi.n	800fd10 <__hexdig_fun+0x26>
 800fd0c:	3827      	subs	r0, #39	@ 0x27
 800fd0e:	e7f1      	b.n	800fcf4 <__hexdig_fun+0xa>
 800fd10:	2000      	movs	r0, #0
 800fd12:	4770      	bx	lr

0800fd14 <__gethex>:
 800fd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	b085      	sub	sp, #20
 800fd1a:	468a      	mov	sl, r1
 800fd1c:	9302      	str	r3, [sp, #8]
 800fd1e:	680b      	ldr	r3, [r1, #0]
 800fd20:	9001      	str	r0, [sp, #4]
 800fd22:	4690      	mov	r8, r2
 800fd24:	1c9c      	adds	r4, r3, #2
 800fd26:	46a1      	mov	r9, r4
 800fd28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fd2c:	2830      	cmp	r0, #48	@ 0x30
 800fd2e:	d0fa      	beq.n	800fd26 <__gethex+0x12>
 800fd30:	eba9 0303 	sub.w	r3, r9, r3
 800fd34:	f1a3 0b02 	sub.w	fp, r3, #2
 800fd38:	f7ff ffd7 	bl	800fcea <__hexdig_fun>
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	d168      	bne.n	800fe14 <__gethex+0x100>
 800fd42:	49a0      	ldr	r1, [pc, #640]	@ (800ffc4 <__gethex+0x2b0>)
 800fd44:	2201      	movs	r2, #1
 800fd46:	4648      	mov	r0, r9
 800fd48:	f7ff ff08 	bl	800fb5c <strncmp>
 800fd4c:	4607      	mov	r7, r0
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	d167      	bne.n	800fe22 <__gethex+0x10e>
 800fd52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fd56:	4626      	mov	r6, r4
 800fd58:	f7ff ffc7 	bl	800fcea <__hexdig_fun>
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	d062      	beq.n	800fe26 <__gethex+0x112>
 800fd60:	4623      	mov	r3, r4
 800fd62:	7818      	ldrb	r0, [r3, #0]
 800fd64:	2830      	cmp	r0, #48	@ 0x30
 800fd66:	4699      	mov	r9, r3
 800fd68:	f103 0301 	add.w	r3, r3, #1
 800fd6c:	d0f9      	beq.n	800fd62 <__gethex+0x4e>
 800fd6e:	f7ff ffbc 	bl	800fcea <__hexdig_fun>
 800fd72:	fab0 f580 	clz	r5, r0
 800fd76:	096d      	lsrs	r5, r5, #5
 800fd78:	f04f 0b01 	mov.w	fp, #1
 800fd7c:	464a      	mov	r2, r9
 800fd7e:	4616      	mov	r6, r2
 800fd80:	3201      	adds	r2, #1
 800fd82:	7830      	ldrb	r0, [r6, #0]
 800fd84:	f7ff ffb1 	bl	800fcea <__hexdig_fun>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d1f8      	bne.n	800fd7e <__gethex+0x6a>
 800fd8c:	498d      	ldr	r1, [pc, #564]	@ (800ffc4 <__gethex+0x2b0>)
 800fd8e:	2201      	movs	r2, #1
 800fd90:	4630      	mov	r0, r6
 800fd92:	f7ff fee3 	bl	800fb5c <strncmp>
 800fd96:	2800      	cmp	r0, #0
 800fd98:	d13f      	bne.n	800fe1a <__gethex+0x106>
 800fd9a:	b944      	cbnz	r4, 800fdae <__gethex+0x9a>
 800fd9c:	1c74      	adds	r4, r6, #1
 800fd9e:	4622      	mov	r2, r4
 800fda0:	4616      	mov	r6, r2
 800fda2:	3201      	adds	r2, #1
 800fda4:	7830      	ldrb	r0, [r6, #0]
 800fda6:	f7ff ffa0 	bl	800fcea <__hexdig_fun>
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	d1f8      	bne.n	800fda0 <__gethex+0x8c>
 800fdae:	1ba4      	subs	r4, r4, r6
 800fdb0:	00a7      	lsls	r7, r4, #2
 800fdb2:	7833      	ldrb	r3, [r6, #0]
 800fdb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fdb8:	2b50      	cmp	r3, #80	@ 0x50
 800fdba:	d13e      	bne.n	800fe3a <__gethex+0x126>
 800fdbc:	7873      	ldrb	r3, [r6, #1]
 800fdbe:	2b2b      	cmp	r3, #43	@ 0x2b
 800fdc0:	d033      	beq.n	800fe2a <__gethex+0x116>
 800fdc2:	2b2d      	cmp	r3, #45	@ 0x2d
 800fdc4:	d034      	beq.n	800fe30 <__gethex+0x11c>
 800fdc6:	1c71      	adds	r1, r6, #1
 800fdc8:	2400      	movs	r4, #0
 800fdca:	7808      	ldrb	r0, [r1, #0]
 800fdcc:	f7ff ff8d 	bl	800fcea <__hexdig_fun>
 800fdd0:	1e43      	subs	r3, r0, #1
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	2b18      	cmp	r3, #24
 800fdd6:	d830      	bhi.n	800fe3a <__gethex+0x126>
 800fdd8:	f1a0 0210 	sub.w	r2, r0, #16
 800fddc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fde0:	f7ff ff83 	bl	800fcea <__hexdig_fun>
 800fde4:	f100 3cff 	add.w	ip, r0, #4294967295
 800fde8:	fa5f fc8c 	uxtb.w	ip, ip
 800fdec:	f1bc 0f18 	cmp.w	ip, #24
 800fdf0:	f04f 030a 	mov.w	r3, #10
 800fdf4:	d91e      	bls.n	800fe34 <__gethex+0x120>
 800fdf6:	b104      	cbz	r4, 800fdfa <__gethex+0xe6>
 800fdf8:	4252      	negs	r2, r2
 800fdfa:	4417      	add	r7, r2
 800fdfc:	f8ca 1000 	str.w	r1, [sl]
 800fe00:	b1ed      	cbz	r5, 800fe3e <__gethex+0x12a>
 800fe02:	f1bb 0f00 	cmp.w	fp, #0
 800fe06:	bf0c      	ite	eq
 800fe08:	2506      	moveq	r5, #6
 800fe0a:	2500      	movne	r5, #0
 800fe0c:	4628      	mov	r0, r5
 800fe0e:	b005      	add	sp, #20
 800fe10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe14:	2500      	movs	r5, #0
 800fe16:	462c      	mov	r4, r5
 800fe18:	e7b0      	b.n	800fd7c <__gethex+0x68>
 800fe1a:	2c00      	cmp	r4, #0
 800fe1c:	d1c7      	bne.n	800fdae <__gethex+0x9a>
 800fe1e:	4627      	mov	r7, r4
 800fe20:	e7c7      	b.n	800fdb2 <__gethex+0x9e>
 800fe22:	464e      	mov	r6, r9
 800fe24:	462f      	mov	r7, r5
 800fe26:	2501      	movs	r5, #1
 800fe28:	e7c3      	b.n	800fdb2 <__gethex+0x9e>
 800fe2a:	2400      	movs	r4, #0
 800fe2c:	1cb1      	adds	r1, r6, #2
 800fe2e:	e7cc      	b.n	800fdca <__gethex+0xb6>
 800fe30:	2401      	movs	r4, #1
 800fe32:	e7fb      	b.n	800fe2c <__gethex+0x118>
 800fe34:	fb03 0002 	mla	r0, r3, r2, r0
 800fe38:	e7ce      	b.n	800fdd8 <__gethex+0xc4>
 800fe3a:	4631      	mov	r1, r6
 800fe3c:	e7de      	b.n	800fdfc <__gethex+0xe8>
 800fe3e:	eba6 0309 	sub.w	r3, r6, r9
 800fe42:	3b01      	subs	r3, #1
 800fe44:	4629      	mov	r1, r5
 800fe46:	2b07      	cmp	r3, #7
 800fe48:	dc0a      	bgt.n	800fe60 <__gethex+0x14c>
 800fe4a:	9801      	ldr	r0, [sp, #4]
 800fe4c:	f7fd ff6c 	bl	800dd28 <_Balloc>
 800fe50:	4604      	mov	r4, r0
 800fe52:	b940      	cbnz	r0, 800fe66 <__gethex+0x152>
 800fe54:	4b5c      	ldr	r3, [pc, #368]	@ (800ffc8 <__gethex+0x2b4>)
 800fe56:	4602      	mov	r2, r0
 800fe58:	21e4      	movs	r1, #228	@ 0xe4
 800fe5a:	485c      	ldr	r0, [pc, #368]	@ (800ffcc <__gethex+0x2b8>)
 800fe5c:	f7fc ffee 	bl	800ce3c <__assert_func>
 800fe60:	3101      	adds	r1, #1
 800fe62:	105b      	asrs	r3, r3, #1
 800fe64:	e7ef      	b.n	800fe46 <__gethex+0x132>
 800fe66:	f100 0a14 	add.w	sl, r0, #20
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	4655      	mov	r5, sl
 800fe6e:	469b      	mov	fp, r3
 800fe70:	45b1      	cmp	r9, r6
 800fe72:	d337      	bcc.n	800fee4 <__gethex+0x1d0>
 800fe74:	f845 bb04 	str.w	fp, [r5], #4
 800fe78:	eba5 050a 	sub.w	r5, r5, sl
 800fe7c:	10ad      	asrs	r5, r5, #2
 800fe7e:	6125      	str	r5, [r4, #16]
 800fe80:	4658      	mov	r0, fp
 800fe82:	f7fe f843 	bl	800df0c <__hi0bits>
 800fe86:	016d      	lsls	r5, r5, #5
 800fe88:	f8d8 6000 	ldr.w	r6, [r8]
 800fe8c:	1a2d      	subs	r5, r5, r0
 800fe8e:	42b5      	cmp	r5, r6
 800fe90:	dd54      	ble.n	800ff3c <__gethex+0x228>
 800fe92:	1bad      	subs	r5, r5, r6
 800fe94:	4629      	mov	r1, r5
 800fe96:	4620      	mov	r0, r4
 800fe98:	f7fe fbcf 	bl	800e63a <__any_on>
 800fe9c:	4681      	mov	r9, r0
 800fe9e:	b178      	cbz	r0, 800fec0 <__gethex+0x1ac>
 800fea0:	1e6b      	subs	r3, r5, #1
 800fea2:	1159      	asrs	r1, r3, #5
 800fea4:	f003 021f 	and.w	r2, r3, #31
 800fea8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800feac:	f04f 0901 	mov.w	r9, #1
 800feb0:	fa09 f202 	lsl.w	r2, r9, r2
 800feb4:	420a      	tst	r2, r1
 800feb6:	d003      	beq.n	800fec0 <__gethex+0x1ac>
 800feb8:	454b      	cmp	r3, r9
 800feba:	dc36      	bgt.n	800ff2a <__gethex+0x216>
 800febc:	f04f 0902 	mov.w	r9, #2
 800fec0:	4629      	mov	r1, r5
 800fec2:	4620      	mov	r0, r4
 800fec4:	f7ff febf 	bl	800fc46 <rshift>
 800fec8:	442f      	add	r7, r5
 800feca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fece:	42bb      	cmp	r3, r7
 800fed0:	da42      	bge.n	800ff58 <__gethex+0x244>
 800fed2:	9801      	ldr	r0, [sp, #4]
 800fed4:	4621      	mov	r1, r4
 800fed6:	f7fd ff67 	bl	800dda8 <_Bfree>
 800feda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fedc:	2300      	movs	r3, #0
 800fede:	6013      	str	r3, [r2, #0]
 800fee0:	25a3      	movs	r5, #163	@ 0xa3
 800fee2:	e793      	b.n	800fe0c <__gethex+0xf8>
 800fee4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fee8:	2a2e      	cmp	r2, #46	@ 0x2e
 800feea:	d012      	beq.n	800ff12 <__gethex+0x1fe>
 800feec:	2b20      	cmp	r3, #32
 800feee:	d104      	bne.n	800fefa <__gethex+0x1e6>
 800fef0:	f845 bb04 	str.w	fp, [r5], #4
 800fef4:	f04f 0b00 	mov.w	fp, #0
 800fef8:	465b      	mov	r3, fp
 800fefa:	7830      	ldrb	r0, [r6, #0]
 800fefc:	9303      	str	r3, [sp, #12]
 800fefe:	f7ff fef4 	bl	800fcea <__hexdig_fun>
 800ff02:	9b03      	ldr	r3, [sp, #12]
 800ff04:	f000 000f 	and.w	r0, r0, #15
 800ff08:	4098      	lsls	r0, r3
 800ff0a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ff0e:	3304      	adds	r3, #4
 800ff10:	e7ae      	b.n	800fe70 <__gethex+0x15c>
 800ff12:	45b1      	cmp	r9, r6
 800ff14:	d8ea      	bhi.n	800feec <__gethex+0x1d8>
 800ff16:	492b      	ldr	r1, [pc, #172]	@ (800ffc4 <__gethex+0x2b0>)
 800ff18:	9303      	str	r3, [sp, #12]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	f7ff fe1d 	bl	800fb5c <strncmp>
 800ff22:	9b03      	ldr	r3, [sp, #12]
 800ff24:	2800      	cmp	r0, #0
 800ff26:	d1e1      	bne.n	800feec <__gethex+0x1d8>
 800ff28:	e7a2      	b.n	800fe70 <__gethex+0x15c>
 800ff2a:	1ea9      	subs	r1, r5, #2
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	f7fe fb84 	bl	800e63a <__any_on>
 800ff32:	2800      	cmp	r0, #0
 800ff34:	d0c2      	beq.n	800febc <__gethex+0x1a8>
 800ff36:	f04f 0903 	mov.w	r9, #3
 800ff3a:	e7c1      	b.n	800fec0 <__gethex+0x1ac>
 800ff3c:	da09      	bge.n	800ff52 <__gethex+0x23e>
 800ff3e:	1b75      	subs	r5, r6, r5
 800ff40:	4621      	mov	r1, r4
 800ff42:	9801      	ldr	r0, [sp, #4]
 800ff44:	462a      	mov	r2, r5
 800ff46:	f7fe f93f 	bl	800e1c8 <__lshift>
 800ff4a:	1b7f      	subs	r7, r7, r5
 800ff4c:	4604      	mov	r4, r0
 800ff4e:	f100 0a14 	add.w	sl, r0, #20
 800ff52:	f04f 0900 	mov.w	r9, #0
 800ff56:	e7b8      	b.n	800feca <__gethex+0x1b6>
 800ff58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ff5c:	42bd      	cmp	r5, r7
 800ff5e:	dd6f      	ble.n	8010040 <__gethex+0x32c>
 800ff60:	1bed      	subs	r5, r5, r7
 800ff62:	42ae      	cmp	r6, r5
 800ff64:	dc34      	bgt.n	800ffd0 <__gethex+0x2bc>
 800ff66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff6a:	2b02      	cmp	r3, #2
 800ff6c:	d022      	beq.n	800ffb4 <__gethex+0x2a0>
 800ff6e:	2b03      	cmp	r3, #3
 800ff70:	d024      	beq.n	800ffbc <__gethex+0x2a8>
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d115      	bne.n	800ffa2 <__gethex+0x28e>
 800ff76:	42ae      	cmp	r6, r5
 800ff78:	d113      	bne.n	800ffa2 <__gethex+0x28e>
 800ff7a:	2e01      	cmp	r6, #1
 800ff7c:	d10b      	bne.n	800ff96 <__gethex+0x282>
 800ff7e:	9a02      	ldr	r2, [sp, #8]
 800ff80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff84:	6013      	str	r3, [r2, #0]
 800ff86:	2301      	movs	r3, #1
 800ff88:	6123      	str	r3, [r4, #16]
 800ff8a:	f8ca 3000 	str.w	r3, [sl]
 800ff8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff90:	2562      	movs	r5, #98	@ 0x62
 800ff92:	601c      	str	r4, [r3, #0]
 800ff94:	e73a      	b.n	800fe0c <__gethex+0xf8>
 800ff96:	1e71      	subs	r1, r6, #1
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f7fe fb4e 	bl	800e63a <__any_on>
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d1ed      	bne.n	800ff7e <__gethex+0x26a>
 800ffa2:	9801      	ldr	r0, [sp, #4]
 800ffa4:	4621      	mov	r1, r4
 800ffa6:	f7fd feff 	bl	800dda8 <_Bfree>
 800ffaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffac:	2300      	movs	r3, #0
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	2550      	movs	r5, #80	@ 0x50
 800ffb2:	e72b      	b.n	800fe0c <__gethex+0xf8>
 800ffb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d1f3      	bne.n	800ffa2 <__gethex+0x28e>
 800ffba:	e7e0      	b.n	800ff7e <__gethex+0x26a>
 800ffbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d1dd      	bne.n	800ff7e <__gethex+0x26a>
 800ffc2:	e7ee      	b.n	800ffa2 <__gethex+0x28e>
 800ffc4:	0801243a 	.word	0x0801243a
 800ffc8:	080123d0 	.word	0x080123d0
 800ffcc:	08012455 	.word	0x08012455
 800ffd0:	1e6f      	subs	r7, r5, #1
 800ffd2:	f1b9 0f00 	cmp.w	r9, #0
 800ffd6:	d130      	bne.n	801003a <__gethex+0x326>
 800ffd8:	b127      	cbz	r7, 800ffe4 <__gethex+0x2d0>
 800ffda:	4639      	mov	r1, r7
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f7fe fb2c 	bl	800e63a <__any_on>
 800ffe2:	4681      	mov	r9, r0
 800ffe4:	117a      	asrs	r2, r7, #5
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ffec:	f007 071f 	and.w	r7, r7, #31
 800fff0:	40bb      	lsls	r3, r7
 800fff2:	4213      	tst	r3, r2
 800fff4:	4629      	mov	r1, r5
 800fff6:	4620      	mov	r0, r4
 800fff8:	bf18      	it	ne
 800fffa:	f049 0902 	orrne.w	r9, r9, #2
 800fffe:	f7ff fe22 	bl	800fc46 <rshift>
 8010002:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010006:	1b76      	subs	r6, r6, r5
 8010008:	2502      	movs	r5, #2
 801000a:	f1b9 0f00 	cmp.w	r9, #0
 801000e:	d047      	beq.n	80100a0 <__gethex+0x38c>
 8010010:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010014:	2b02      	cmp	r3, #2
 8010016:	d015      	beq.n	8010044 <__gethex+0x330>
 8010018:	2b03      	cmp	r3, #3
 801001a:	d017      	beq.n	801004c <__gethex+0x338>
 801001c:	2b01      	cmp	r3, #1
 801001e:	d109      	bne.n	8010034 <__gethex+0x320>
 8010020:	f019 0f02 	tst.w	r9, #2
 8010024:	d006      	beq.n	8010034 <__gethex+0x320>
 8010026:	f8da 3000 	ldr.w	r3, [sl]
 801002a:	ea49 0903 	orr.w	r9, r9, r3
 801002e:	f019 0f01 	tst.w	r9, #1
 8010032:	d10e      	bne.n	8010052 <__gethex+0x33e>
 8010034:	f045 0510 	orr.w	r5, r5, #16
 8010038:	e032      	b.n	80100a0 <__gethex+0x38c>
 801003a:	f04f 0901 	mov.w	r9, #1
 801003e:	e7d1      	b.n	800ffe4 <__gethex+0x2d0>
 8010040:	2501      	movs	r5, #1
 8010042:	e7e2      	b.n	801000a <__gethex+0x2f6>
 8010044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010046:	f1c3 0301 	rsb	r3, r3, #1
 801004a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801004c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801004e:	2b00      	cmp	r3, #0
 8010050:	d0f0      	beq.n	8010034 <__gethex+0x320>
 8010052:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010056:	f104 0314 	add.w	r3, r4, #20
 801005a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801005e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010062:	f04f 0c00 	mov.w	ip, #0
 8010066:	4618      	mov	r0, r3
 8010068:	f853 2b04 	ldr.w	r2, [r3], #4
 801006c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010070:	d01b      	beq.n	80100aa <__gethex+0x396>
 8010072:	3201      	adds	r2, #1
 8010074:	6002      	str	r2, [r0, #0]
 8010076:	2d02      	cmp	r5, #2
 8010078:	f104 0314 	add.w	r3, r4, #20
 801007c:	d13c      	bne.n	80100f8 <__gethex+0x3e4>
 801007e:	f8d8 2000 	ldr.w	r2, [r8]
 8010082:	3a01      	subs	r2, #1
 8010084:	42b2      	cmp	r2, r6
 8010086:	d109      	bne.n	801009c <__gethex+0x388>
 8010088:	1171      	asrs	r1, r6, #5
 801008a:	2201      	movs	r2, #1
 801008c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010090:	f006 061f 	and.w	r6, r6, #31
 8010094:	fa02 f606 	lsl.w	r6, r2, r6
 8010098:	421e      	tst	r6, r3
 801009a:	d13a      	bne.n	8010112 <__gethex+0x3fe>
 801009c:	f045 0520 	orr.w	r5, r5, #32
 80100a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100a2:	601c      	str	r4, [r3, #0]
 80100a4:	9b02      	ldr	r3, [sp, #8]
 80100a6:	601f      	str	r7, [r3, #0]
 80100a8:	e6b0      	b.n	800fe0c <__gethex+0xf8>
 80100aa:	4299      	cmp	r1, r3
 80100ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80100b0:	d8d9      	bhi.n	8010066 <__gethex+0x352>
 80100b2:	68a3      	ldr	r3, [r4, #8]
 80100b4:	459b      	cmp	fp, r3
 80100b6:	db17      	blt.n	80100e8 <__gethex+0x3d4>
 80100b8:	6861      	ldr	r1, [r4, #4]
 80100ba:	9801      	ldr	r0, [sp, #4]
 80100bc:	3101      	adds	r1, #1
 80100be:	f7fd fe33 	bl	800dd28 <_Balloc>
 80100c2:	4681      	mov	r9, r0
 80100c4:	b918      	cbnz	r0, 80100ce <__gethex+0x3ba>
 80100c6:	4b1a      	ldr	r3, [pc, #104]	@ (8010130 <__gethex+0x41c>)
 80100c8:	4602      	mov	r2, r0
 80100ca:	2184      	movs	r1, #132	@ 0x84
 80100cc:	e6c5      	b.n	800fe5a <__gethex+0x146>
 80100ce:	6922      	ldr	r2, [r4, #16]
 80100d0:	3202      	adds	r2, #2
 80100d2:	f104 010c 	add.w	r1, r4, #12
 80100d6:	0092      	lsls	r2, r2, #2
 80100d8:	300c      	adds	r0, #12
 80100da:	f7ff fd83 	bl	800fbe4 <memcpy>
 80100de:	4621      	mov	r1, r4
 80100e0:	9801      	ldr	r0, [sp, #4]
 80100e2:	f7fd fe61 	bl	800dda8 <_Bfree>
 80100e6:	464c      	mov	r4, r9
 80100e8:	6923      	ldr	r3, [r4, #16]
 80100ea:	1c5a      	adds	r2, r3, #1
 80100ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80100f0:	6122      	str	r2, [r4, #16]
 80100f2:	2201      	movs	r2, #1
 80100f4:	615a      	str	r2, [r3, #20]
 80100f6:	e7be      	b.n	8010076 <__gethex+0x362>
 80100f8:	6922      	ldr	r2, [r4, #16]
 80100fa:	455a      	cmp	r2, fp
 80100fc:	dd0b      	ble.n	8010116 <__gethex+0x402>
 80100fe:	2101      	movs	r1, #1
 8010100:	4620      	mov	r0, r4
 8010102:	f7ff fda0 	bl	800fc46 <rshift>
 8010106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801010a:	3701      	adds	r7, #1
 801010c:	42bb      	cmp	r3, r7
 801010e:	f6ff aee0 	blt.w	800fed2 <__gethex+0x1be>
 8010112:	2501      	movs	r5, #1
 8010114:	e7c2      	b.n	801009c <__gethex+0x388>
 8010116:	f016 061f 	ands.w	r6, r6, #31
 801011a:	d0fa      	beq.n	8010112 <__gethex+0x3fe>
 801011c:	4453      	add	r3, sl
 801011e:	f1c6 0620 	rsb	r6, r6, #32
 8010122:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010126:	f7fd fef1 	bl	800df0c <__hi0bits>
 801012a:	42b0      	cmp	r0, r6
 801012c:	dbe7      	blt.n	80100fe <__gethex+0x3ea>
 801012e:	e7f0      	b.n	8010112 <__gethex+0x3fe>
 8010130:	080123d0 	.word	0x080123d0

08010134 <L_shift>:
 8010134:	f1c2 0208 	rsb	r2, r2, #8
 8010138:	0092      	lsls	r2, r2, #2
 801013a:	b570      	push	{r4, r5, r6, lr}
 801013c:	f1c2 0620 	rsb	r6, r2, #32
 8010140:	6843      	ldr	r3, [r0, #4]
 8010142:	6804      	ldr	r4, [r0, #0]
 8010144:	fa03 f506 	lsl.w	r5, r3, r6
 8010148:	432c      	orrs	r4, r5
 801014a:	40d3      	lsrs	r3, r2
 801014c:	6004      	str	r4, [r0, #0]
 801014e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010152:	4288      	cmp	r0, r1
 8010154:	d3f4      	bcc.n	8010140 <L_shift+0xc>
 8010156:	bd70      	pop	{r4, r5, r6, pc}

08010158 <__match>:
 8010158:	b530      	push	{r4, r5, lr}
 801015a:	6803      	ldr	r3, [r0, #0]
 801015c:	3301      	adds	r3, #1
 801015e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010162:	b914      	cbnz	r4, 801016a <__match+0x12>
 8010164:	6003      	str	r3, [r0, #0]
 8010166:	2001      	movs	r0, #1
 8010168:	bd30      	pop	{r4, r5, pc}
 801016a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801016e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010172:	2d19      	cmp	r5, #25
 8010174:	bf98      	it	ls
 8010176:	3220      	addls	r2, #32
 8010178:	42a2      	cmp	r2, r4
 801017a:	d0f0      	beq.n	801015e <__match+0x6>
 801017c:	2000      	movs	r0, #0
 801017e:	e7f3      	b.n	8010168 <__match+0x10>

08010180 <__hexnan>:
 8010180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010184:	680b      	ldr	r3, [r1, #0]
 8010186:	6801      	ldr	r1, [r0, #0]
 8010188:	115e      	asrs	r6, r3, #5
 801018a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801018e:	f013 031f 	ands.w	r3, r3, #31
 8010192:	b087      	sub	sp, #28
 8010194:	bf18      	it	ne
 8010196:	3604      	addne	r6, #4
 8010198:	2500      	movs	r5, #0
 801019a:	1f37      	subs	r7, r6, #4
 801019c:	4682      	mov	sl, r0
 801019e:	4690      	mov	r8, r2
 80101a0:	9301      	str	r3, [sp, #4]
 80101a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80101a6:	46b9      	mov	r9, r7
 80101a8:	463c      	mov	r4, r7
 80101aa:	9502      	str	r5, [sp, #8]
 80101ac:	46ab      	mov	fp, r5
 80101ae:	784a      	ldrb	r2, [r1, #1]
 80101b0:	1c4b      	adds	r3, r1, #1
 80101b2:	9303      	str	r3, [sp, #12]
 80101b4:	b342      	cbz	r2, 8010208 <__hexnan+0x88>
 80101b6:	4610      	mov	r0, r2
 80101b8:	9105      	str	r1, [sp, #20]
 80101ba:	9204      	str	r2, [sp, #16]
 80101bc:	f7ff fd95 	bl	800fcea <__hexdig_fun>
 80101c0:	2800      	cmp	r0, #0
 80101c2:	d151      	bne.n	8010268 <__hexnan+0xe8>
 80101c4:	9a04      	ldr	r2, [sp, #16]
 80101c6:	9905      	ldr	r1, [sp, #20]
 80101c8:	2a20      	cmp	r2, #32
 80101ca:	d818      	bhi.n	80101fe <__hexnan+0x7e>
 80101cc:	9b02      	ldr	r3, [sp, #8]
 80101ce:	459b      	cmp	fp, r3
 80101d0:	dd13      	ble.n	80101fa <__hexnan+0x7a>
 80101d2:	454c      	cmp	r4, r9
 80101d4:	d206      	bcs.n	80101e4 <__hexnan+0x64>
 80101d6:	2d07      	cmp	r5, #7
 80101d8:	dc04      	bgt.n	80101e4 <__hexnan+0x64>
 80101da:	462a      	mov	r2, r5
 80101dc:	4649      	mov	r1, r9
 80101de:	4620      	mov	r0, r4
 80101e0:	f7ff ffa8 	bl	8010134 <L_shift>
 80101e4:	4544      	cmp	r4, r8
 80101e6:	d952      	bls.n	801028e <__hexnan+0x10e>
 80101e8:	2300      	movs	r3, #0
 80101ea:	f1a4 0904 	sub.w	r9, r4, #4
 80101ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80101f2:	f8cd b008 	str.w	fp, [sp, #8]
 80101f6:	464c      	mov	r4, r9
 80101f8:	461d      	mov	r5, r3
 80101fa:	9903      	ldr	r1, [sp, #12]
 80101fc:	e7d7      	b.n	80101ae <__hexnan+0x2e>
 80101fe:	2a29      	cmp	r2, #41	@ 0x29
 8010200:	d157      	bne.n	80102b2 <__hexnan+0x132>
 8010202:	3102      	adds	r1, #2
 8010204:	f8ca 1000 	str.w	r1, [sl]
 8010208:	f1bb 0f00 	cmp.w	fp, #0
 801020c:	d051      	beq.n	80102b2 <__hexnan+0x132>
 801020e:	454c      	cmp	r4, r9
 8010210:	d206      	bcs.n	8010220 <__hexnan+0xa0>
 8010212:	2d07      	cmp	r5, #7
 8010214:	dc04      	bgt.n	8010220 <__hexnan+0xa0>
 8010216:	462a      	mov	r2, r5
 8010218:	4649      	mov	r1, r9
 801021a:	4620      	mov	r0, r4
 801021c:	f7ff ff8a 	bl	8010134 <L_shift>
 8010220:	4544      	cmp	r4, r8
 8010222:	d936      	bls.n	8010292 <__hexnan+0x112>
 8010224:	f1a8 0204 	sub.w	r2, r8, #4
 8010228:	4623      	mov	r3, r4
 801022a:	f853 1b04 	ldr.w	r1, [r3], #4
 801022e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010232:	429f      	cmp	r7, r3
 8010234:	d2f9      	bcs.n	801022a <__hexnan+0xaa>
 8010236:	1b3b      	subs	r3, r7, r4
 8010238:	f023 0303 	bic.w	r3, r3, #3
 801023c:	3304      	adds	r3, #4
 801023e:	3401      	adds	r4, #1
 8010240:	3e03      	subs	r6, #3
 8010242:	42b4      	cmp	r4, r6
 8010244:	bf88      	it	hi
 8010246:	2304      	movhi	r3, #4
 8010248:	4443      	add	r3, r8
 801024a:	2200      	movs	r2, #0
 801024c:	f843 2b04 	str.w	r2, [r3], #4
 8010250:	429f      	cmp	r7, r3
 8010252:	d2fb      	bcs.n	801024c <__hexnan+0xcc>
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	b91b      	cbnz	r3, 8010260 <__hexnan+0xe0>
 8010258:	4547      	cmp	r7, r8
 801025a:	d128      	bne.n	80102ae <__hexnan+0x12e>
 801025c:	2301      	movs	r3, #1
 801025e:	603b      	str	r3, [r7, #0]
 8010260:	2005      	movs	r0, #5
 8010262:	b007      	add	sp, #28
 8010264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010268:	3501      	adds	r5, #1
 801026a:	2d08      	cmp	r5, #8
 801026c:	f10b 0b01 	add.w	fp, fp, #1
 8010270:	dd06      	ble.n	8010280 <__hexnan+0x100>
 8010272:	4544      	cmp	r4, r8
 8010274:	d9c1      	bls.n	80101fa <__hexnan+0x7a>
 8010276:	2300      	movs	r3, #0
 8010278:	f844 3c04 	str.w	r3, [r4, #-4]
 801027c:	2501      	movs	r5, #1
 801027e:	3c04      	subs	r4, #4
 8010280:	6822      	ldr	r2, [r4, #0]
 8010282:	f000 000f 	and.w	r0, r0, #15
 8010286:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801028a:	6020      	str	r0, [r4, #0]
 801028c:	e7b5      	b.n	80101fa <__hexnan+0x7a>
 801028e:	2508      	movs	r5, #8
 8010290:	e7b3      	b.n	80101fa <__hexnan+0x7a>
 8010292:	9b01      	ldr	r3, [sp, #4]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d0dd      	beq.n	8010254 <__hexnan+0xd4>
 8010298:	f1c3 0320 	rsb	r3, r3, #32
 801029c:	f04f 32ff 	mov.w	r2, #4294967295
 80102a0:	40da      	lsrs	r2, r3
 80102a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80102a6:	4013      	ands	r3, r2
 80102a8:	f846 3c04 	str.w	r3, [r6, #-4]
 80102ac:	e7d2      	b.n	8010254 <__hexnan+0xd4>
 80102ae:	3f04      	subs	r7, #4
 80102b0:	e7d0      	b.n	8010254 <__hexnan+0xd4>
 80102b2:	2004      	movs	r0, #4
 80102b4:	e7d5      	b.n	8010262 <__hexnan+0xe2>

080102b6 <__ascii_mbtowc>:
 80102b6:	b082      	sub	sp, #8
 80102b8:	b901      	cbnz	r1, 80102bc <__ascii_mbtowc+0x6>
 80102ba:	a901      	add	r1, sp, #4
 80102bc:	b142      	cbz	r2, 80102d0 <__ascii_mbtowc+0x1a>
 80102be:	b14b      	cbz	r3, 80102d4 <__ascii_mbtowc+0x1e>
 80102c0:	7813      	ldrb	r3, [r2, #0]
 80102c2:	600b      	str	r3, [r1, #0]
 80102c4:	7812      	ldrb	r2, [r2, #0]
 80102c6:	1e10      	subs	r0, r2, #0
 80102c8:	bf18      	it	ne
 80102ca:	2001      	movne	r0, #1
 80102cc:	b002      	add	sp, #8
 80102ce:	4770      	bx	lr
 80102d0:	4610      	mov	r0, r2
 80102d2:	e7fb      	b.n	80102cc <__ascii_mbtowc+0x16>
 80102d4:	f06f 0001 	mvn.w	r0, #1
 80102d8:	e7f8      	b.n	80102cc <__ascii_mbtowc+0x16>

080102da <_realloc_r>:
 80102da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102de:	4607      	mov	r7, r0
 80102e0:	4614      	mov	r4, r2
 80102e2:	460d      	mov	r5, r1
 80102e4:	b921      	cbnz	r1, 80102f0 <_realloc_r+0x16>
 80102e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102ea:	4611      	mov	r1, r2
 80102ec:	f7fd bc90 	b.w	800dc10 <_malloc_r>
 80102f0:	b92a      	cbnz	r2, 80102fe <_realloc_r+0x24>
 80102f2:	f7fd fc19 	bl	800db28 <_free_r>
 80102f6:	4625      	mov	r5, r4
 80102f8:	4628      	mov	r0, r5
 80102fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102fe:	f000 f86b 	bl	80103d8 <_malloc_usable_size_r>
 8010302:	4284      	cmp	r4, r0
 8010304:	4606      	mov	r6, r0
 8010306:	d802      	bhi.n	801030e <_realloc_r+0x34>
 8010308:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801030c:	d8f4      	bhi.n	80102f8 <_realloc_r+0x1e>
 801030e:	4621      	mov	r1, r4
 8010310:	4638      	mov	r0, r7
 8010312:	f7fd fc7d 	bl	800dc10 <_malloc_r>
 8010316:	4680      	mov	r8, r0
 8010318:	b908      	cbnz	r0, 801031e <_realloc_r+0x44>
 801031a:	4645      	mov	r5, r8
 801031c:	e7ec      	b.n	80102f8 <_realloc_r+0x1e>
 801031e:	42b4      	cmp	r4, r6
 8010320:	4622      	mov	r2, r4
 8010322:	4629      	mov	r1, r5
 8010324:	bf28      	it	cs
 8010326:	4632      	movcs	r2, r6
 8010328:	f7ff fc5c 	bl	800fbe4 <memcpy>
 801032c:	4629      	mov	r1, r5
 801032e:	4638      	mov	r0, r7
 8010330:	f7fd fbfa 	bl	800db28 <_free_r>
 8010334:	e7f1      	b.n	801031a <_realloc_r+0x40>

08010336 <__ascii_wctomb>:
 8010336:	4603      	mov	r3, r0
 8010338:	4608      	mov	r0, r1
 801033a:	b141      	cbz	r1, 801034e <__ascii_wctomb+0x18>
 801033c:	2aff      	cmp	r2, #255	@ 0xff
 801033e:	d904      	bls.n	801034a <__ascii_wctomb+0x14>
 8010340:	228a      	movs	r2, #138	@ 0x8a
 8010342:	601a      	str	r2, [r3, #0]
 8010344:	f04f 30ff 	mov.w	r0, #4294967295
 8010348:	4770      	bx	lr
 801034a:	700a      	strb	r2, [r1, #0]
 801034c:	2001      	movs	r0, #1
 801034e:	4770      	bx	lr

08010350 <_raise_r>:
 8010350:	291f      	cmp	r1, #31
 8010352:	b538      	push	{r3, r4, r5, lr}
 8010354:	4605      	mov	r5, r0
 8010356:	460c      	mov	r4, r1
 8010358:	d904      	bls.n	8010364 <_raise_r+0x14>
 801035a:	2316      	movs	r3, #22
 801035c:	6003      	str	r3, [r0, #0]
 801035e:	f04f 30ff 	mov.w	r0, #4294967295
 8010362:	bd38      	pop	{r3, r4, r5, pc}
 8010364:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010366:	b112      	cbz	r2, 801036e <_raise_r+0x1e>
 8010368:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801036c:	b94b      	cbnz	r3, 8010382 <_raise_r+0x32>
 801036e:	4628      	mov	r0, r5
 8010370:	f000 f830 	bl	80103d4 <_getpid_r>
 8010374:	4622      	mov	r2, r4
 8010376:	4601      	mov	r1, r0
 8010378:	4628      	mov	r0, r5
 801037a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801037e:	f000 b817 	b.w	80103b0 <_kill_r>
 8010382:	2b01      	cmp	r3, #1
 8010384:	d00a      	beq.n	801039c <_raise_r+0x4c>
 8010386:	1c59      	adds	r1, r3, #1
 8010388:	d103      	bne.n	8010392 <_raise_r+0x42>
 801038a:	2316      	movs	r3, #22
 801038c:	6003      	str	r3, [r0, #0]
 801038e:	2001      	movs	r0, #1
 8010390:	e7e7      	b.n	8010362 <_raise_r+0x12>
 8010392:	2100      	movs	r1, #0
 8010394:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010398:	4620      	mov	r0, r4
 801039a:	4798      	blx	r3
 801039c:	2000      	movs	r0, #0
 801039e:	e7e0      	b.n	8010362 <_raise_r+0x12>

080103a0 <raise>:
 80103a0:	4b02      	ldr	r3, [pc, #8]	@ (80103ac <raise+0xc>)
 80103a2:	4601      	mov	r1, r0
 80103a4:	6818      	ldr	r0, [r3, #0]
 80103a6:	f7ff bfd3 	b.w	8010350 <_raise_r>
 80103aa:	bf00      	nop
 80103ac:	20000044 	.word	0x20000044

080103b0 <_kill_r>:
 80103b0:	b538      	push	{r3, r4, r5, lr}
 80103b2:	4d07      	ldr	r5, [pc, #28]	@ (80103d0 <_kill_r+0x20>)
 80103b4:	2300      	movs	r3, #0
 80103b6:	4604      	mov	r4, r0
 80103b8:	4608      	mov	r0, r1
 80103ba:	4611      	mov	r1, r2
 80103bc:	602b      	str	r3, [r5, #0]
 80103be:	f7f4 f95f 	bl	8004680 <_kill>
 80103c2:	1c43      	adds	r3, r0, #1
 80103c4:	d102      	bne.n	80103cc <_kill_r+0x1c>
 80103c6:	682b      	ldr	r3, [r5, #0]
 80103c8:	b103      	cbz	r3, 80103cc <_kill_r+0x1c>
 80103ca:	6023      	str	r3, [r4, #0]
 80103cc:	bd38      	pop	{r3, r4, r5, pc}
 80103ce:	bf00      	nop
 80103d0:	200011d4 	.word	0x200011d4

080103d4 <_getpid_r>:
 80103d4:	f7f4 b94c 	b.w	8004670 <_getpid>

080103d8 <_malloc_usable_size_r>:
 80103d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103dc:	1f18      	subs	r0, r3, #4
 80103de:	2b00      	cmp	r3, #0
 80103e0:	bfbc      	itt	lt
 80103e2:	580b      	ldrlt	r3, [r1, r0]
 80103e4:	18c0      	addlt	r0, r0, r3
 80103e6:	4770      	bx	lr

080103e8 <_init>:
 80103e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ea:	bf00      	nop
 80103ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ee:	bc08      	pop	{r3}
 80103f0:	469e      	mov	lr, r3
 80103f2:	4770      	bx	lr

080103f4 <_fini>:
 80103f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f6:	bf00      	nop
 80103f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103fa:	bc08      	pop	{r3}
 80103fc:	469e      	mov	lr, r3
 80103fe:	4770      	bx	lr
