
test_case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f080  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cec  0800f250  0800f250  00010250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f3c  08010f3c  00012200  2**0
                  CONTENTS
  4 .ARM          00000008  08010f3c  08010f3c  00011f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f44  08010f44  00012200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f44  08010f44  00011f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010f48  08010f48  00011f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08010f4c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb4  20000200  0801114c  00012200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010b4  0801114c  000130b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b03  00000000  00000000  00012230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004751  00000000  00000000  0002bd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00030488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010dd  00000000  00000000  00031aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e15  00000000  00000000  00032b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022152  00000000  00000000  0005a992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7fda  00000000  00000000  0007cae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154abe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f20  00000000  00000000  00154b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0015ba24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f238 	.word	0x0800f238

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800f238 	.word	0x0800f238

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b08d      	sub	sp, #52	@ 0x34
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	4611      	mov	r1, r2
 80010ce:	461a      	mov	r2, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	460b      	mov	r3, r1
 80010d6:	81bb      	strh	r3, [r7, #12]
 80010d8:	4613      	mov	r3, r2
 80010da:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b1e      	cmp	r3, #30
 80010e0:	d964      	bls.n	80011ac <ILI9341_DrawChar+0xe8>
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db60      	blt.n	80011ac <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3301      	adds	r3, #1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	3302      	adds	r3, #2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3303      	adds	r3, #3
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	3b20      	subs	r3, #32
 800110c:	7ffa      	ldrb	r2, [r7, #31]
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	3304      	adds	r3, #4
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	4413      	add	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800111a:	7fbb      	ldrb	r3, [r7, #30]
 800111c:	b29a      	uxth	r2, r3
 800111e:	7f7b      	ldrb	r3, [r7, #29]
 8001120:	b29c      	uxth	r4, r3
 8001122:	88f9      	ldrh	r1, [r7, #6]
 8001124:	89b8      	ldrh	r0, [r7, #12]
 8001126:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	4623      	mov	r3, r4
 800112c:	f000 fc20 	bl	8001970 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
 8001134:	e035      	b.n	80011a2 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
 800113a:	e02b      	b.n	8001194 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800113c:	7f3b      	ldrb	r3, [r7, #28]
 800113e:	6a3a      	ldr	r2, [r7, #32]
 8001140:	fb03 f202 	mul.w	r2, r3, r2
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	10db      	asrs	r3, r3, #3
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	4413      	add	r3, r2
 800114e:	3301      	adds	r3, #1
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	2201      	movs	r2, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001166:	7dfa      	ldrb	r2, [r7, #23]
 8001168:	7dbb      	ldrb	r3, [r7, #22]
 800116a:	4013      	ands	r3, r2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00d      	beq.n	800118e <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	b29a      	uxth	r2, r3
 8001176:	89bb      	ldrh	r3, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	b298      	uxth	r0, r3
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	b29a      	uxth	r2, r3
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4413      	add	r3, r2
 8001184:	b29b      	uxth	r3, r3
 8001186:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001188:	4619      	mov	r1, r3
 800118a:	f000 fb8b 	bl	80018a4 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	3301      	adds	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	7fbb      	ldrb	r3, [r7, #30]
 8001196:	6a3a      	ldr	r2, [r7, #32]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbcf      	blt.n	800113c <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	3301      	adds	r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a2:	7f7b      	ldrb	r3, [r7, #29]
 80011a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbc5      	blt.n	8001136 <ILI9341_DrawChar+0x72>
 80011aa:	e000      	b.n	80011ae <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80011ac:	bf00      	nop
			}
		}
	}
}
 80011ae:	372c      	adds	r7, #44	@ 0x2c
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}

080011b4 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	460b      	mov	r3, r1
 80011c4:	80fb      	strh	r3, [r7, #6]
 80011c6:	4613      	mov	r3, r2
 80011c8:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	3301      	adds	r3, #1
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80011d8:	e02d      	b.n	8001236 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	7818      	ldrb	r0, [r3, #0]
 80011de:	88b9      	ldrh	r1, [r7, #4]
 80011e0:	88fa      	ldrh	r2, [r7, #6]
 80011e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	460b      	mov	r3, r1
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	f7ff ff69 	bl	80010c4 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	3b20      	subs	r3, #32
 80011f8:	7ffa      	ldrb	r2, [r7, #31]
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	3304      	adds	r3, #4
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	1c9a      	adds	r2, r3, #2
 8001210:	7fbb      	ldrb	r3, [r7, #30]
 8001212:	429a      	cmp	r2, r3
 8001214:	da07      	bge.n	8001226 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	b29a      	uxth	r2, r3
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	4413      	add	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	3302      	adds	r3, #2
 8001222:	80fb      	strh	r3, [r7, #6]
 8001224:	e004      	b.n	8001230 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001226:	7fbb      	ldrb	r3, [r7, #30]
 8001228:	b29a      	uxth	r2, r3
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	4413      	add	r3, r2
 800122e:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1cd      	bne.n	80011da <ILI9341_DrawText+0x26>
	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a06      	ldr	r2, [pc, #24]	@ (800126c <HAL_SPI_TxCpltCallback+0x24>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d105      	bne.n	8001264 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <HAL_SPI_TxCpltCallback+0x28>)
 8001260:	f003 faf0 	bl	8004844 <HAL_GPIO_WritePin>
  }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000d40 	.word	0x20000d40
 8001270:	40020400 	.word	0x40020400

08001274 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800127e:	bf00      	nop
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <ILI9341_SPI_Tx+0x30>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b02      	cmp	r3, #2
 800128c:	d1f8      	bne.n	8001280 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	2201      	movs	r2, #1
 8001292:	4619      	mov	r1, r3
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <ILI9341_SPI_Tx+0x30>)
 8001296:	f004 fbdf 	bl	8005a58 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000d40 	.word	0x20000d40

080012a8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80012b4:	bf00      	nop
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <ILI9341_SPI_TxBuffer+0x30>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d1f8      	bne.n	80012b6 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	461a      	mov	r2, r3
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <ILI9341_SPI_TxBuffer+0x30>)
 80012cc:	f004 fbc4 	bl	8005a58 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000d40 	.word	0x20000d40

080012dc <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 80012e6:	2200      	movs	r2, #0
 80012e8:	2120      	movs	r1, #32
 80012ea:	4808      	ldr	r0, [pc, #32]	@ (800130c <ILI9341_WriteCommand+0x30>)
 80012ec:	f003 faaa 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <ILI9341_WriteCommand+0x30>)
 80012f8:	f003 faa4 	bl	8004844 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffb8 	bl	8001274 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020400 	.word	0x40020400

08001310 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800131a:	2201      	movs	r2, #1
 800131c:	2120      	movs	r1, #32
 800131e:	4808      	ldr	r0, [pc, #32]	@ (8001340 <ILI9341_WriteData+0x30>)
 8001320:	f003 fa90 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <ILI9341_WriteData+0x30>)
 800132c:	f003 fa8a 	bl	8004844 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff9e 	bl	8001274 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40020400 	.word	0x40020400

08001344 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001350:	2201      	movs	r2, #1
 8001352:	2120      	movs	r1, #32
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <ILI9341_WriteBuffer+0x34>)
 8001356:	f003 fa75 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <ILI9341_WriteBuffer+0x34>)
 8001362:	f003 fa6f 	bl	8004844 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff9c 	bl	80012a8 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020400 	.word	0x40020400

0800137c <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	80fb      	strh	r3, [r7, #6]
 800138e:	4603      	mov	r3, r0
 8001390:	80bb      	strh	r3, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	807b      	strh	r3, [r7, #2]
 8001396:	4613      	mov	r3, r2
 8001398:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80013ba:	202a      	movs	r0, #42	@ 0x2a
 80013bc:	f7ff ff8e 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2104      	movs	r1, #4
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ffbc 	bl	8001344 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80013cc:	88bb      	ldrh	r3, [r7, #4]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80013d6:	88bb      	ldrh	r3, [r7, #4]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80013dc:	883b      	ldrh	r3, [r7, #0]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80013e6:	883b      	ldrh	r3, [r7, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80013ec:	202b      	movs	r0, #43	@ 0x2b
 80013ee:	f7ff ff75 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2104      	movs	r1, #4
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ffa3 	bl	8001344 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80013fe:	202c      	movs	r0, #44	@ 0x2c
 8001400:	f7ff ff6c 	bl	80012dc <ILI9341_WriteCommand>
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bd90      	pop	{r4, r7, pc}

0800140c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001416:	480e      	ldr	r0, [pc, #56]	@ (8001450 <ILI9341_Reset+0x44>)
 8001418:	f003 fa14 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800141c:	200a      	movs	r0, #10
 800141e:	f002 fbbf 	bl	8003ba0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001428:	4809      	ldr	r0, [pc, #36]	@ (8001450 <ILI9341_Reset+0x44>)
 800142a:	f003 fa0b 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800142e:	200a      	movs	r0, #10
 8001430:	f002 fbb6 	bl	8003ba0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <ILI9341_Reset+0x44>)
 800143c:	f003 fa02 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001446:	4802      	ldr	r0, [pc, #8]	@ (8001450 <ILI9341_Reset+0x44>)
 8001448:	f003 f9fc 	bl	8004844 <HAL_GPIO_WritePin>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020400 	.word	0x40020400

08001454 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800145e:	4802      	ldr	r0, [pc, #8]	@ (8001468 <ILI9341_Enable+0x14>)
 8001460:	f003 f9f0 	bl	8004844 <HAL_GPIO_WritePin>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020400 	.word	0x40020400

0800146c <ILI9341_Init>:

void ILI9341_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001470:	f7ff fff0 	bl	8001454 <ILI9341_Enable>
	ILI9341_Reset();
 8001474:	f7ff ffca 	bl	800140c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff ff2f 	bl	80012dc <ILI9341_WriteCommand>
	HAL_Delay(10);
 800147e:	200a      	movs	r0, #10
 8001480:	f002 fb8e 	bl	8003ba0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001484:	20cb      	movs	r0, #203	@ 0xcb
 8001486:	f7ff ff29 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 800148a:	2039      	movs	r0, #57	@ 0x39
 800148c:	f7ff ff40 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8001490:	202c      	movs	r0, #44	@ 0x2c
 8001492:	f7ff ff3d 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff ff3a 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 800149c:	2034      	movs	r0, #52	@ 0x34
 800149e:	f7ff ff37 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80014a2:	2002      	movs	r0, #2
 80014a4:	f7ff ff34 	bl	8001310 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80014a8:	20cf      	movs	r0, #207	@ 0xcf
 80014aa:	f7ff ff17 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff ff2e 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80014b4:	20c1      	movs	r0, #193	@ 0xc1
 80014b6:	f7ff ff2b 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80014ba:	2030      	movs	r0, #48	@ 0x30
 80014bc:	f7ff ff28 	bl	8001310 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80014c0:	20e8      	movs	r0, #232	@ 0xe8
 80014c2:	f7ff ff0b 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80014c6:	2085      	movs	r0, #133	@ 0x85
 80014c8:	f7ff ff22 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ff1f 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80014d2:	2078      	movs	r0, #120	@ 0x78
 80014d4:	f7ff ff1c 	bl	8001310 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80014d8:	20ea      	movs	r0, #234	@ 0xea
 80014da:	f7ff feff 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff ff16 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff ff13 	bl	8001310 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80014ea:	20ed      	movs	r0, #237	@ 0xed
 80014ec:	f7ff fef6 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80014f0:	2064      	movs	r0, #100	@ 0x64
 80014f2:	f7ff ff0d 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f7ff ff0a 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80014fc:	2012      	movs	r0, #18
 80014fe:	f7ff ff07 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001502:	2081      	movs	r0, #129	@ 0x81
 8001504:	f7ff ff04 	bl	8001310 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001508:	20f7      	movs	r0, #247	@ 0xf7
 800150a:	f7ff fee7 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800150e:	2020      	movs	r0, #32
 8001510:	f7ff fefe 	bl	8001310 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001514:	20c0      	movs	r0, #192	@ 0xc0
 8001516:	f7ff fee1 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800151a:	2023      	movs	r0, #35	@ 0x23
 800151c:	f7ff fef8 	bl	8001310 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001520:	20c1      	movs	r0, #193	@ 0xc1
 8001522:	f7ff fedb 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001526:	2010      	movs	r0, #16
 8001528:	f7ff fef2 	bl	8001310 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 800152c:	20c5      	movs	r0, #197	@ 0xc5
 800152e:	f7ff fed5 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001532:	203e      	movs	r0, #62	@ 0x3e
 8001534:	f7ff feec 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001538:	2028      	movs	r0, #40	@ 0x28
 800153a:	f7ff fee9 	bl	8001310 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800153e:	20c7      	movs	r0, #199	@ 0xc7
 8001540:	f7ff fecc 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001544:	2086      	movs	r0, #134	@ 0x86
 8001546:	f7ff fee3 	bl	8001310 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800154a:	2036      	movs	r0, #54	@ 0x36
 800154c:	f7ff fec6 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001550:	2048      	movs	r0, #72	@ 0x48
 8001552:	f7ff fedd 	bl	8001310 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001556:	203a      	movs	r0, #58	@ 0x3a
 8001558:	f7ff fec0 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 800155c:	2055      	movs	r0, #85	@ 0x55
 800155e:	f7ff fed7 	bl	8001310 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8001562:	20b1      	movs	r0, #177	@ 0xb1
 8001564:	f7ff feba 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff fed1 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800156e:	2018      	movs	r0, #24
 8001570:	f7ff fece 	bl	8001310 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001574:	20b6      	movs	r0, #182	@ 0xb6
 8001576:	f7ff feb1 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 800157a:	2008      	movs	r0, #8
 800157c:	f7ff fec8 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001580:	2082      	movs	r0, #130	@ 0x82
 8001582:	f7ff fec5 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001586:	2027      	movs	r0, #39	@ 0x27
 8001588:	f7ff fec2 	bl	8001310 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 800158c:	20f2      	movs	r0, #242	@ 0xf2
 800158e:	f7ff fea5 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff febc 	bl	8001310 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001598:	2026      	movs	r0, #38	@ 0x26
 800159a:	f7ff fe9f 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff feb6 	bl	8001310 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80015a4:	20e0      	movs	r0, #224	@ 0xe0
 80015a6:	f7ff fe99 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80015aa:	200f      	movs	r0, #15
 80015ac:	f7ff feb0 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80015b0:	2031      	movs	r0, #49	@ 0x31
 80015b2:	f7ff fead 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80015b6:	202b      	movs	r0, #43	@ 0x2b
 80015b8:	f7ff feaa 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80015bc:	200c      	movs	r0, #12
 80015be:	f7ff fea7 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80015c2:	200e      	movs	r0, #14
 80015c4:	f7ff fea4 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80015c8:	2008      	movs	r0, #8
 80015ca:	f7ff fea1 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80015ce:	204e      	movs	r0, #78	@ 0x4e
 80015d0:	f7ff fe9e 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80015d4:	20f1      	movs	r0, #241	@ 0xf1
 80015d6:	f7ff fe9b 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80015da:	2037      	movs	r0, #55	@ 0x37
 80015dc:	f7ff fe98 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80015e0:	2007      	movs	r0, #7
 80015e2:	f7ff fe95 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80015e6:	2010      	movs	r0, #16
 80015e8:	f7ff fe92 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f7ff fe8f 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80015f2:	200e      	movs	r0, #14
 80015f4:	f7ff fe8c 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80015f8:	2009      	movs	r0, #9
 80015fa:	f7ff fe89 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fe86 	bl	8001310 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001604:	20e1      	movs	r0, #225	@ 0xe1
 8001606:	f7ff fe69 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fe80 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001610:	200e      	movs	r0, #14
 8001612:	f7ff fe7d 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001616:	2014      	movs	r0, #20
 8001618:	f7ff fe7a 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800161c:	2003      	movs	r0, #3
 800161e:	f7ff fe77 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001622:	2011      	movs	r0, #17
 8001624:	f7ff fe74 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001628:	2007      	movs	r0, #7
 800162a:	f7ff fe71 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800162e:	2031      	movs	r0, #49	@ 0x31
 8001630:	f7ff fe6e 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001634:	20c1      	movs	r0, #193	@ 0xc1
 8001636:	f7ff fe6b 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800163a:	2048      	movs	r0, #72	@ 0x48
 800163c:	f7ff fe68 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001640:	2008      	movs	r0, #8
 8001642:	f7ff fe65 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001646:	200f      	movs	r0, #15
 8001648:	f7ff fe62 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800164c:	200c      	movs	r0, #12
 800164e:	f7ff fe5f 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001652:	2031      	movs	r0, #49	@ 0x31
 8001654:	f7ff fe5c 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001658:	2036      	movs	r0, #54	@ 0x36
 800165a:	f7ff fe59 	bl	8001310 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800165e:	200f      	movs	r0, #15
 8001660:	f7ff fe56 	bl	8001310 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001664:	2011      	movs	r0, #17
 8001666:	f7ff fe39 	bl	80012dc <ILI9341_WriteCommand>
	HAL_Delay(100);
 800166a:	2064      	movs	r0, #100	@ 0x64
 800166c:	f002 fa98 	bl	8003ba0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001670:	2029      	movs	r0, #41	@ 0x29
 8001672:	f7ff fe33 	bl	80012dc <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f802 	bl	8001680 <ILI9341_SetRotation>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800168a:	2036      	movs	r0, #54	@ 0x36
 800168c:	f7ff fe26 	bl	80012dc <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001690:	2001      	movs	r0, #1
 8001692:	f002 fa85 	bl	8003ba0 <HAL_Delay>

	switch(rotation)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d837      	bhi.n	800170c <ILI9341_SetRotation+0x8c>
 800169c:	a201      	add	r2, pc, #4	@ (adr r2, 80016a4 <ILI9341_SetRotation+0x24>)
 800169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a2:	bf00      	nop
 80016a4:	080016b5 	.word	0x080016b5
 80016a8:	080016cb 	.word	0x080016cb
 80016ac:	080016e1 	.word	0x080016e1
 80016b0:	080016f7 	.word	0x080016f7
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80016b4:	2048      	movs	r0, #72	@ 0x48
 80016b6:	f7ff fe2b 	bl	8001310 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <ILI9341_SetRotation+0x98>)
 80016bc:	22f0      	movs	r2, #240	@ 0xf0
 80016be:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80016c0:	4b16      	ldr	r3, [pc, #88]	@ (800171c <ILI9341_SetRotation+0x9c>)
 80016c2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016c6:	801a      	strh	r2, [r3, #0]
		break;
 80016c8:	e021      	b.n	800170e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80016ca:	2028      	movs	r0, #40	@ 0x28
 80016cc:	f7ff fe20 	bl	8001310 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <ILI9341_SetRotation+0x98>)
 80016d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016d6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80016d8:	4b10      	ldr	r3, [pc, #64]	@ (800171c <ILI9341_SetRotation+0x9c>)
 80016da:	22f0      	movs	r2, #240	@ 0xf0
 80016dc:	801a      	strh	r2, [r3, #0]
		break;
 80016de:	e016      	b.n	800170e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 80016e0:	2088      	movs	r0, #136	@ 0x88
 80016e2:	f7ff fe15 	bl	8001310 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <ILI9341_SetRotation+0x98>)
 80016e8:	22f0      	movs	r2, #240	@ 0xf0
 80016ea:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <ILI9341_SetRotation+0x9c>)
 80016ee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016f2:	801a      	strh	r2, [r3, #0]
		break;
 80016f4:	e00b      	b.n	800170e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 80016f6:	20e8      	movs	r0, #232	@ 0xe8
 80016f8:	f7ff fe0a 	bl	8001310 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <ILI9341_SetRotation+0x98>)
 80016fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001702:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <ILI9341_SetRotation+0x9c>)
 8001706:	22f0      	movs	r2, #240	@ 0xf0
 8001708:	801a      	strh	r2, [r3, #0]
		break;
 800170a:	e000      	b.n	800170e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800170c:	bf00      	nop
	}
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000002 	.word	0x20000002
 800171c:	20000000 	.word	0x20000000

08001720 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001724:	b08d      	sub	sp, #52	@ 0x34
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	6039      	str	r1, [r7, #0]
 800172c:	80fb      	strh	r3, [r7, #6]
 800172e:	466b      	mov	r3, sp
 8001730:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800173e:	d202      	bcs.n	8001746 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001744:	e002      	b.n	800174c <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001746:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	2120      	movs	r1, #32
 8001750:	483f      	ldr	r0, [pc, #252]	@ (8001850 <ILI9341_DrawColorBurst+0x130>)
 8001752:	f003 f877 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800175c:	483c      	ldr	r0, [pc, #240]	@ (8001850 <ILI9341_DrawColorBurst+0x130>)
 800175e:	f003 f871 	bl	8004844 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 800176c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800176e:	460b      	mov	r3, r1
 8001770:	3b01      	subs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	2300      	movs	r3, #0
 8001776:	4688      	mov	r8, r1
 8001778:	4699      	mov	r9, r3
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800178a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800178e:	2300      	movs	r3, #0
 8001790:	460c      	mov	r4, r1
 8001792:	461d      	mov	r5, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	00eb      	lsls	r3, r5, #3
 800179e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a2:	00e2      	lsls	r2, r4, #3
 80017a4:	1dcb      	adds	r3, r1, #7
 80017a6:	08db      	lsrs	r3, r3, #3
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	ebad 0d03 	sub.w	sp, sp, r3
 80017ae:	466b      	mov	r3, sp
 80017b0:	3300      	adds	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b8:	e00e      	b.n	80017d8 <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017be:	4413      	add	r3, r2
 80017c0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80017c4:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80017c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c8:	3301      	adds	r3, #1
 80017ca:	88fa      	ldrh	r2, [r7, #6]
 80017cc:	b2d1      	uxtb	r1, r2
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80017d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d4:	3302      	adds	r3, #2
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3ec      	bcc.n	80017ba <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80017f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017fa:	fb01 f202 	mul.w	r2, r1, r2
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d010      	beq.n	800182a <ILI9341_DrawColorBurst+0x10a>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
 800180c:	e009      	b.n	8001822 <ILI9341_DrawColorBurst+0x102>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 800180e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001810:	b29a      	uxth	r2, r3
 8001812:	230a      	movs	r3, #10
 8001814:	69b9      	ldr	r1, [r7, #24]
 8001816:	480f      	ldr	r0, [pc, #60]	@ (8001854 <ILI9341_DrawColorBurst+0x134>)
 8001818:	f003 fe31 	bl	800547e <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	3301      	adds	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
 8001822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	429a      	cmp	r2, r3
 8001828:	d3f1      	bcc.n	800180e <ILI9341_DrawColorBurst+0xee>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b29a      	uxth	r2, r3
 800182e:	230a      	movs	r3, #10
 8001830:	69b9      	ldr	r1, [r7, #24]
 8001832:	4808      	ldr	r0, [pc, #32]	@ (8001854 <ILI9341_DrawColorBurst+0x134>)
 8001834:	f003 fe23 	bl	800547e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800183e:	4804      	ldr	r0, [pc, #16]	@ (8001850 <ILI9341_DrawColorBurst+0x130>)
 8001840:	f003 f800 	bl	8004844 <HAL_GPIO_WritePin>
 8001844:	46b5      	mov	sp, r6
}
 8001846:	bf00      	nop
 8001848:	3734      	adds	r7, #52	@ 0x34
 800184a:	46bd      	mov	sp, r7
 800184c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001850:	40020400 	.word	0x40020400
 8001854:	20000d40 	.word	0x20000d40

08001858 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <ILI9341_FillScreen+0x44>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <ILI9341_FillScreen+0x48>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	2100      	movs	r1, #0
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fd83 	bl	800137c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <ILI9341_FillScreen+0x44>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <ILI9341_FillScreen+0x48>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	461a      	mov	r2, r3
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff46 	bl	8001720 <ILI9341_DrawColorBurst>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000002 	.word	0x20000002
 80018a0:	20000000 	.word	0x20000000

080018a4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	460b      	mov	r3, r1
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <ILI9341_DrawPixel+0xc4>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d24d      	bcs.n	800195e <ILI9341_DrawPixel+0xba>
 80018c2:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <ILI9341_DrawPixel+0xc8>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	88ba      	ldrh	r2, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d247      	bcs.n	800195e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	753b      	strb	r3, [r7, #20]
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	757b      	strb	r3, [r7, #21]
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	3301      	adds	r3, #1
 80018e2:	121b      	asrs	r3, r3, #8
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	75bb      	strb	r3, [r7, #22]
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 80018f2:	88bb      	ldrh	r3, [r7, #4]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	743b      	strb	r3, [r7, #16]
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	747b      	strb	r3, [r7, #17]
 8001902:	88bb      	ldrh	r3, [r7, #4]
 8001904:	3301      	adds	r3, #1
 8001906:	121b      	asrs	r3, r3, #8
 8001908:	b2db      	uxtb	r3, r3
 800190a:	74bb      	strb	r3, [r7, #18]
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	b29b      	uxth	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	733b      	strb	r3, [r7, #12]
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001926:	202a      	movs	r0, #42	@ 0x2a
 8001928:	f7ff fcd8 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2104      	movs	r1, #4
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fd06 	bl	8001344 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001938:	202b      	movs	r0, #43	@ 0x2b
 800193a:	f7ff fccf 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	2104      	movs	r1, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fcfd 	bl	8001344 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 800194a:	202c      	movs	r0, #44	@ 0x2c
 800194c:	f7ff fcc6 	bl	80012dc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2102      	movs	r1, #2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fcf4 	bl	8001344 <ILI9341_WriteBuffer>
 800195c:	e000      	b.n	8001960 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800195e:	bf00      	nop
}
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000002 	.word	0x20000002
 800196c:	20000000 	.word	0x20000000

08001970 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4604      	mov	r4, r0
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	80fb      	strh	r3, [r7, #6]
 8001982:	4603      	mov	r3, r0
 8001984:	80bb      	strh	r3, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]
 800198a:	4613      	mov	r3, r2
 800198c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800198e:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <ILI9341_DrawRectangle+0xb0>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	d23d      	bcs.n	8001a16 <ILI9341_DrawRectangle+0xa6>
 800199a:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <ILI9341_DrawRectangle+0xb4>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	88ba      	ldrh	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d237      	bcs.n	8001a16 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001a20 <ILI9341_DrawRectangle+0xb0>)
 80019ae:	8812      	ldrh	r2, [r2, #0]
 80019b0:	b292      	uxth	r2, r2
 80019b2:	4293      	cmp	r3, r2
 80019b4:	dd05      	ble.n	80019c2 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <ILI9341_DrawRectangle+0xb0>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80019c2:	88ba      	ldrh	r2, [r7, #4]
 80019c4:	883b      	ldrh	r3, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a16      	ldr	r2, [pc, #88]	@ (8001a24 <ILI9341_DrawRectangle+0xb4>)
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	b292      	uxth	r2, r2
 80019ce:	4293      	cmp	r3, r2
 80019d0:	dd05      	ble.n	80019de <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <ILI9341_DrawRectangle+0xb4>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	88bb      	ldrh	r3, [r7, #4]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 80019de:	88fa      	ldrh	r2, [r7, #6]
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	4413      	add	r3, r2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29c      	uxth	r4, r3
 80019ea:	88ba      	ldrh	r2, [r7, #4]
 80019ec:	883b      	ldrh	r3, [r7, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	88b9      	ldrh	r1, [r7, #4]
 80019f8:	88f8      	ldrh	r0, [r7, #6]
 80019fa:	4622      	mov	r2, r4
 80019fc:	f7ff fcbe 	bl	800137c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001a00:	883b      	ldrh	r3, [r7, #0]
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	fb02 f303 	mul.w	r3, r2, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	8b3b      	ldrh	r3, [r7, #24]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fe86 	bl	8001720 <ILI9341_DrawColorBurst>
 8001a14:	e000      	b.n	8001a18 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a16:	bf00      	nop
}
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000002 	.word	0x20000002
 8001a24:	20000000 	.word	0x20000000

08001a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <MX_DMA_Init+0x3c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a0b      	ldr	r2, [pc, #44]	@ (8001a64 <MX_DMA_Init+0x3c>)
 8001a38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <MX_DMA_Init+0x3c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	200f      	movs	r0, #15
 8001a50:	f002 f9a5 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a54:	200f      	movs	r0, #15
 8001a56:	f002 f9be 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <getTare>:



int num = 2;

uint32_t getTare(){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
	printf("Remove all weight from the drawer(5 seconds)\n\r");
 8001a6e:	4815      	ldr	r0, [pc, #84]	@ (8001ac4 <getTare+0x5c>)
 8001a70:	f009 fece 	bl	800b810 <iprintf>
	HAL_Delay(5000);
 8001a74:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a78:	f002 f892 	bl	8003ba0 <HAL_Delay>
	printf("Gathering initial Tare of Load Cell...\n\r");
 8001a7c:	4812      	ldr	r0, [pc, #72]	@ (8001ac8 <getTare+0x60>)
 8001a7e:	f009 fec7 	bl	800b810 <iprintf>
	int weight_temp = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 1; i <= 4; i++){
 8001a86:	2301      	movs	r3, #1
 8001a88:	807b      	strh	r3, [r7, #2]
 8001a8a:	e00e      	b.n	8001aaa <getTare+0x42>
			weight_temp = (int)weighRaw();
 8001a8c:	f001 fb1b 	bl	80030c6 <weighRaw>
 8001a90:	6078      	str	r0, [r7, #4]
			printf("Tare attempt %d: %d\n\r", i, weight_temp);
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <getTare+0x64>)
 8001a9a:	f009 feb9 	bl	800b810 <iprintf>
			HAL_Delay(10);
 8001a9e:	200a      	movs	r0, #10
 8001aa0:	f002 f87e 	bl	8003ba0 <HAL_Delay>
	for(uint16_t i = 1; i <= 4; i++){
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d9ed      	bls.n	8001a8c <getTare+0x24>
		}
	printf("Tare Set: %d\n\r", weight_temp);
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4807      	ldr	r0, [pc, #28]	@ (8001ad0 <getTare+0x68>)
 8001ab4:	f009 feac 	bl	800b810 <iprintf>
	return weight_temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	0800f250 	.word	0x0800f250
 8001ac8:	0800f280 	.word	0x0800f280
 8001acc:	0800f2ac 	.word	0x0800f2ac
 8001ad0:	0800f2c4 	.word	0x0800f2c4

08001ad4 <Calibrate>:

void Calibrate(){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b092      	sub	sp, #72	@ 0x48
 8001ad8:	af00      	add	r7, sp, #0
	printf("Beginning with Row: 1 Drawer: 1\n\r");
 8001ada:	489e      	ldr	r0, [pc, #632]	@ (8001d54 <Calibrate+0x280>)
 8001adc:	f009 fe98 	bl	800b810 <iprintf>

	uint32_t tare = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	633b      	str	r3, [r7, #48]	@ 0x30
	int knownHX711 = 1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t thresh = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28

	FRESULT res = f_unlink("drwConf.txt"); //deletes the original file
 8001aec:	489a      	ldr	r0, [pc, #616]	@ (8001d58 <Calibrate+0x284>)
 8001aee:	f008 fc9c 	bl	800a42a <f_unlink>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(res == FR_OK){
 8001af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <Calibrate+0x32>
		printf("Removed old 'drwConf.txt'\n\r");
 8001b00:	4896      	ldr	r0, [pc, #600]	@ (8001d5c <Calibrate+0x288>)
 8001b02:	f009 fe85 	bl	800b810 <iprintf>
	}
	f_unlink("temp_drawerConfig.txt"); //deletes the original file
 8001b06:	4896      	ldr	r0, [pc, #600]	@ (8001d60 <Calibrate+0x28c>)
 8001b08:	f008 fc8f 	bl	800a42a <f_unlink>


	for(int i = 1; i <= 1; i++){
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b10:	e116      	b.n	8001d40 <Calibrate+0x26c>

		uint16_t A_mast = MuxCombos[i-1].A;
 8001b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	4993      	ldr	r1, [pc, #588]	@ (8001d64 <Calibrate+0x290>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	3302      	adds	r3, #2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint16_t B_mast = MuxCombos[i-1].B;
 8001b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b28:	1e5a      	subs	r2, r3, #1
 8001b2a:	498e      	ldr	r1, [pc, #568]	@ (8001d64 <Calibrate+0x290>)
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	3301      	adds	r3, #1
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	847b      	strh	r3, [r7, #34]	@ 0x22
		uint16_t C_mast = MuxCombos[i-1].C;
 8001b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	4989      	ldr	r1, [pc, #548]	@ (8001d64 <Calibrate+0x290>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	843b      	strh	r3, [r7, #32]

		muxSET(A_mast, B_mast, C_mast, 1);
 8001b4c:	8c3a      	ldrh	r2, [r7, #32]
 8001b4e:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8001b50:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8001b52:	2301      	movs	r3, #1
 8001b54:	f001 f920 	bl	8002d98 <muxSET>

		setRelay(i);
 8001b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 f963 	bl	8002e28 <setRelay>

		if(i == 1){
 8001b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d174      	bne.n	8001c52 <Calibrate+0x17e>
			for(int j = 1; j <= 4; j++){
 8001b68:	2301      	movs	r3, #1
 8001b6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b6c:	e06d      	b.n	8001c4a <Calibrate+0x176>

				uint16_t A_slave = MuxCombos[j-1].A;
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	497c      	ldr	r1, [pc, #496]	@ (8001d64 <Calibrate+0x290>)
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	81fb      	strh	r3, [r7, #14]
				uint16_t B_slave = MuxCombos[j-1].B;
 8001b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	4977      	ldr	r1, [pc, #476]	@ (8001d64 <Calibrate+0x290>)
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	3301      	adds	r3, #1
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	81bb      	strh	r3, [r7, #12]
				uint16_t C_slave = MuxCombos[j-1].C;
 8001b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	4972      	ldr	r1, [pc, #456]	@ (8001d64 <Calibrate+0x290>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	817b      	strh	r3, [r7, #10]

				muxSET(A_slave, B_slave, C_slave, 0);
 8001ba8:	897a      	ldrh	r2, [r7, #10]
 8001baa:	89b9      	ldrh	r1, [r7, #12]
 8001bac:	89f8      	ldrh	r0, [r7, #14]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f001 f8f2 	bl	8002d98 <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, j);
 8001bb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001bb8:	486b      	ldr	r0, [pc, #428]	@ (8001d68 <Calibrate+0x294>)
 8001bba:	f009 fe29 	bl	800b810 <iprintf>
				tare = getTare();
 8001bbe:	f7ff ff53 	bl	8001a68 <getTare>
 8001bc2:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button once when ready to calibrate\n\r");
 8001bc4:	4869      	ldr	r0, [pc, #420]	@ (8001d6c <Calibrate+0x298>)
 8001bc6:	f009 fe23 	bl	800b810 <iprintf>

				//double press confirmation here
				button_output(num);
 8001bca:	4b69      	ldr	r3, [pc, #420]	@ (8001d70 <Calibrate+0x29c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 f87a 	bl	8002cc8 <button_output>


				knownHX711 = weighRawTare(tare);
 8001bd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001bd6:	f001 fab0 	bl	800313a <weighRawTare>
 8001bda:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8001bdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001bde:	4865      	ldr	r0, [pc, #404]	@ (8001d74 <Calibrate+0x2a0>)
 8001be0:	f009 fe16 	bl	800b810 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be6:	4618      	mov	r0, r3
 8001be8:	f001 faea 	bl	80031c0 <getCalFactor>
 8001bec:	ed87 0a01 	vstr	s0, [r7, #4]

				for(int p = 0; p < 4; p++){
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bf4:	e010      	b.n	8001c18 <Calibrate+0x144>
					int weight = weigh(tare, calFactor);
 8001bf6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001bfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001bfc:	f001 fa14 	bl	8003028 <weigh>
 8001c00:	6038      	str	r0, [r7, #0]
					printf("Weight: %d\n\r", weight);
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	485c      	ldr	r0, [pc, #368]	@ (8001d78 <Calibrate+0x2a4>)
 8001c06:	f009 fe03 	bl	800b810 <iprintf>
					HAL_Delay(400);
 8001c0a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001c0e:	f001 ffc7 	bl	8003ba0 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c14:	3301      	adds	r3, #1
 8001c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	ddeb      	ble.n	8001bf6 <Calibrate+0x122>
				}

				thresh = refillDrawer(tare, calFactor);
 8001c1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c24:	f000 f8f6 	bl	8001e14 <refillDrawer>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 8001c2c:	f000 fc34 	bl	8002498 <SD_init>

				saveDrawerConfig(i, j, calFactor, tare, thresh);
 8001c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c32:	b298      	uxth	r0, r3
 8001c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c36:	b299      	uxth	r1, r3
 8001c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c3c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c40:	f000 fc66 	bl	8002510 <saveDrawerConfig>
			for(int j = 1; j <= 4; j++){
 8001c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c46:	3301      	adds	r3, #1
 8001c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	dd8e      	ble.n	8001b6e <Calibrate+0x9a>
 8001c50:	e073      	b.n	8001d3a <Calibrate+0x266>
			}
		}
		else{
			for(int k = 1; k <= 7; k++){
 8001c52:	2301      	movs	r3, #1
 8001c54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c56:	e06d      	b.n	8001d34 <Calibrate+0x260>

				uint16_t A_slave = MuxCombos[k-1].A;
 8001c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c5a:	1e5a      	subs	r2, r3, #1
 8001c5c:	4941      	ldr	r1, [pc, #260]	@ (8001d64 <Calibrate+0x290>)
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	3302      	adds	r3, #2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	83fb      	strh	r3, [r7, #30]
				uint16_t B_slave = MuxCombos[k-1].B;
 8001c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c6e:	1e5a      	subs	r2, r3, #1
 8001c70:	493c      	ldr	r1, [pc, #240]	@ (8001d64 <Calibrate+0x290>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	83bb      	strh	r3, [r7, #28]
				uint16_t C_slave = MuxCombos[k-1].C;
 8001c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c82:	1e5a      	subs	r2, r3, #1
 8001c84:	4937      	ldr	r1, [pc, #220]	@ (8001d64 <Calibrate+0x290>)
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	837b      	strh	r3, [r7, #26]

				muxSET(A_slave, B_slave, C_slave, 0);
 8001c92:	8b7a      	ldrh	r2, [r7, #26]
 8001c94:	8bb9      	ldrh	r1, [r7, #28]
 8001c96:	8bf8      	ldrh	r0, [r7, #30]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f001 f87d 	bl	8002d98 <muxSET>

				printf("ROW %d | DRAWER %d\n\r", i, k);
 8001c9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ca0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001ca2:	4831      	ldr	r0, [pc, #196]	@ (8001d68 <Calibrate+0x294>)
 8001ca4:	f009 fdb4 	bl	800b810 <iprintf>
				tare = getTare();
 8001ca8:	f7ff fede 	bl	8001a68 <getTare>
 8001cac:	6338      	str	r0, [r7, #48]	@ 0x30
				printf("Place the calibration weight on the drawer\n\rPress the button twice when ready to calibrate\n\r");
 8001cae:	4833      	ldr	r0, [pc, #204]	@ (8001d7c <Calibrate+0x2a8>)
 8001cb0:	f009 fdae 	bl	800b810 <iprintf>

				//double press confirmation here
				button_output(num);
 8001cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <Calibrate+0x29c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 f805 	bl	8002cc8 <button_output>


				knownHX711 = weighRawTare(tare);
 8001cbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cc0:	f001 fa3b 	bl	800313a <weighRawTare>
 8001cc4:	62f8      	str	r0, [r7, #44]	@ 0x2c
				printf("Read weight: %d\n\r", knownHX711);
 8001cc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001cc8:	482a      	ldr	r0, [pc, #168]	@ (8001d74 <Calibrate+0x2a0>)
 8001cca:	f009 fda1 	bl	800b810 <iprintf>

				float calFactor = getCalFactor(knownHX711);
 8001cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fa75 	bl	80031c0 <getCalFactor>
 8001cd6:	ed87 0a05 	vstr	s0, [r7, #20]

				for(int p = 0; p < 4; p++){
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cde:	e010      	b.n	8001d02 <Calibrate+0x22e>
					int weight = weigh(tare, calFactor);
 8001ce0:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ce6:	f001 f99f 	bl	8003028 <weigh>
 8001cea:	6138      	str	r0, [r7, #16]
					printf("Weight: %d\n\r", weight);
 8001cec:	6939      	ldr	r1, [r7, #16]
 8001cee:	4822      	ldr	r0, [pc, #136]	@ (8001d78 <Calibrate+0x2a4>)
 8001cf0:	f009 fd8e 	bl	800b810 <iprintf>
					HAL_Delay(400);
 8001cf4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001cf8:	f001 ff52 	bl	8003ba0 <HAL_Delay>
				for(int p = 0; p < 4; p++){
 8001cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfe:	3301      	adds	r3, #1
 8001d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	ddeb      	ble.n	8001ce0 <Calibrate+0x20c>
				}

				thresh = refillDrawer(tare, calFactor);
 8001d08:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d0e:	f000 f881 	bl	8001e14 <refillDrawer>
 8001d12:	4603      	mov	r3, r0
 8001d14:	62bb      	str	r3, [r7, #40]	@ 0x28

				SD_init();
 8001d16:	f000 fbbf 	bl	8002498 <SD_init>

				saveDrawerConfig(i, k, calFactor, tare, thresh);
 8001d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d20:	b299      	uxth	r1, r3
 8001d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d26:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d2a:	f000 fbf1 	bl	8002510 <saveDrawerConfig>
			for(int k = 1; k <= 7; k++){
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d30:	3301      	adds	r3, #1
 8001d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d36:	2b07      	cmp	r3, #7
 8001d38:	dd8e      	ble.n	8001c58 <Calibrate+0x184>
	for(int i = 1; i <= 1; i++){
 8001d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	f77f aee5 	ble.w	8001b12 <Calibrate+0x3e>

			}
		}
	}
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3748      	adds	r7, #72	@ 0x48
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	0800f2d4 	.word	0x0800f2d4
 8001d58:	0800f2f8 	.word	0x0800f2f8
 8001d5c:	0800f304 	.word	0x0800f304
 8001d60:	0800f320 	.word	0x0800f320
 8001d64:	080109f8 	.word	0x080109f8
 8001d68:	0800f338 	.word	0x0800f338
 8001d6c:	0800f350 	.word	0x0800f350
 8001d70:	20000004 	.word	0x20000004
 8001d74:	0800f3ac 	.word	0x0800f3ac
 8001d78:	0800f3c0 	.word	0x0800f3c0
 8001d7c:	0800f3d0 	.word	0x0800f3d0

08001d80 <getThresh>:
uint32_t press_time = 0;  // Timestamp of the first press
uint8_t press_count = 0;  // A Flag that's used for indicating a second press

int num2 = 1;

uint32_t getThresh(uint32_t tare, float calFactor){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	ed87 0a00 	vstr	s0, [r7]
	uint32_t sum = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
	float avg = 0;
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < 4; i++){
 8001d96:	2300      	movs	r3, #0
 8001d98:	827b      	strh	r3, [r7, #18]
 8001d9a:	e00d      	b.n	8001db8 <getThresh+0x38>
		uint16_t weight = weigh(tare, calFactor);
 8001d9c:	ed97 0a00 	vldr	s0, [r7]
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f001 f941 	bl	8003028 <weigh>
 8001da6:	4603      	mov	r3, r0
 8001da8:	817b      	strh	r3, [r7, #10]
		sum += weight;
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4413      	add	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < 4; i++){
 8001db2:	8a7b      	ldrh	r3, [r7, #18]
 8001db4:	3301      	adds	r3, #1
 8001db6:	827b      	strh	r3, [r7, #18]
 8001db8:	8a7b      	ldrh	r3, [r7, #18]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d9ee      	bls.n	8001d9c <getThresh+0x1c>
	}

	avg = sum / 4.0;
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7fe fbc0 	bl	8000544 <__aeabi_ui2d>
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <getThresh+0x90>)
 8001dca:	f7fe fd5f 	bl	800088c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe ff27 	bl	8000c28 <__aeabi_d2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60fb      	str	r3, [r7, #12]

	return (avg * 0.1); //returns 10% of the normalized weight as the threshold
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7fe fbd2 	bl	8000588 <__aeabi_f2d>
 8001de4:	a308      	add	r3, pc, #32	@ (adr r3, 8001e08 <getThresh+0x88>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	f7fe fc25 	bl	8000638 <__aeabi_dmul>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fef7 	bl	8000be8 <__aeabi_d2uiz>
 8001dfa:	4603      	mov	r3, r0

}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	f3af 8000 	nop.w
 8001e08:	9999999a 	.word	0x9999999a
 8001e0c:	3fb99999 	.word	0x3fb99999
 8001e10:	40100000 	.word	0x40100000

08001e14 <refillDrawer>:



int refillDrawer(uint32_t tare, float calFactor){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	ed87 0a00 	vstr	s0, [r7]
	printf("Please refill the current drawer\n\rPress and Hold the button when ready\n\r");
 8001e20:	480b      	ldr	r0, [pc, #44]	@ (8001e50 <refillDrawer+0x3c>)
 8001e22:	f009 fcf5 	bl	800b810 <iprintf>

	//function to wait for a double press then a confirmation press
	button_output(num2);
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <refillDrawer+0x40>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 ff4c 	bl	8002cc8 <button_output>

	//doublePress(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin);

	uint32_t thresh = getThresh(tare, calFactor);
 8001e30:	ed97 0a00 	vldr	s0, [r7]
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ffa3 	bl	8001d80 <getThresh>
 8001e3a:	60f8      	str	r0, [r7, #12]
	printf("Threshold set to %ld\n\r", thresh);
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	4806      	ldr	r0, [pc, #24]	@ (8001e58 <refillDrawer+0x44>)
 8001e40:	f009 fce6 	bl	800b810 <iprintf>
	return thresh;
 8001e44:	68fb      	ldr	r3, [r7, #12]


}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	0800f430 	.word	0x0800f430
 8001e54:	20000008 	.word	0x20000008
 8001e58:	0800f47c 	.word	0x0800f47c

08001e5c <main_function>:
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"



void main_function(){
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b099      	sub	sp, #100	@ 0x64
 8001e60:	af00      	add	r7, sp, #0


	struct drawerInfo drawerInst;
	uint32_t tare = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	64bb      	str	r3, [r7, #72]	@ 0x48
	float calFactor = 1;
 8001e66:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e6a:	647b      	str	r3, [r7, #68]	@ 0x44
	int thresh;

	uint32_t sum;
	uint16_t normalizedWeight;

	for(uint16_t i = 1; i <= 4; i++){
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8001e72:	e145      	b.n	8002100 <main_function+0x2a4>
			printf("Row %d", i);
 8001e74:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001e78:	4619      	mov	r1, r3
 8001e7a:	48a6      	ldr	r0, [pc, #664]	@ (8002114 <main_function+0x2b8>)
 8001e7c:	f009 fcc8 	bl	800b810 <iprintf>

			uint16_t A_mast = MuxCombos[i-1].A;
 8001e80:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001e84:	1e5a      	subs	r2, r3, #1
 8001e86:	49a4      	ldr	r1, [pc, #656]	@ (8002118 <main_function+0x2bc>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	3302      	adds	r3, #2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
			uint16_t B_mast = MuxCombos[i-1].B;
 8001e98:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	499e      	ldr	r1, [pc, #632]	@ (8002118 <main_function+0x2bc>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			uint16_t C_mast = MuxCombos[i-1].C;
 8001eb0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	4998      	ldr	r1, [pc, #608]	@ (8002118 <main_function+0x2bc>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	87fb      	strh	r3, [r7, #62]	@ 0x3e

			muxSET(A_mast, B_mast, C_mast, 1);
 8001ec4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001ec6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8001eca:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f000 ff62 	bl	8002d98 <muxSET>

			setRelay(i);
 8001ed4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 ffa4 	bl	8002e28 <setRelay>

			if(i == 1){
 8001ee0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	f040 8082 	bne.w	8001fee <main_function+0x192>
				for(uint16_t j = 1; j <= 4; j++){
 8001eea:	2301      	movs	r3, #1
 8001eec:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8001ef0:	e078      	b.n	8001fe4 <main_function+0x188>

					sum = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[j-1].A;
 8001efa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001efe:	1e5a      	subs	r2, r3, #1
 8001f00:	4985      	ldr	r1, [pc, #532]	@ (8002118 <main_function+0x2bc>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
					uint16_t B_slave = MuxCombos[j-1].B;
 8001f10:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001f14:	1e5a      	subs	r2, r3, #1
 8001f16:	4980      	ldr	r1, [pc, #512]	@ (8002118 <main_function+0x2bc>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	3301      	adds	r3, #1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	853b      	strh	r3, [r7, #40]	@ 0x28
					uint16_t C_slave = MuxCombos[j-1].C;
 8001f26:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	497a      	ldr	r1, [pc, #488]	@ (8002118 <main_function+0x2bc>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	84fb      	strh	r3, [r7, #38]	@ 0x26

					muxSET(A_slave, B_slave, C_slave, 0);
 8001f3a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001f3c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001f3e:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8001f40:	2300      	movs	r3, #0
 8001f42:	f000 ff29 	bl	8002d98 <muxSET>

					printf("Drawer %d\n", j);
 8001f46:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4873      	ldr	r0, [pc, #460]	@ (800211c <main_function+0x2c0>)
 8001f4e:	f009 fc5f 	bl	800b810 <iprintf>

					drawerInst = getFileInfo(i, j);
 8001f52:	f107 0310 	add.w	r3, r7, #16
 8001f56:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8001f5a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fcbc 	bl	80028dc <getFileInfo>

					tare = drawerInst.Tare;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 8001f6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f7e:	e010      	b.n	8001fa2 <main_function+0x146>

						int weight = weigh(tare, calFactor);
 8001f80:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001f84:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001f86:	f001 f84f 	bl	8003028 <weigh>
 8001f8a:	6238      	str	r0, [r7, #32]
						sum += weight;
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001f90:	4413      	add	r3, r2
 8001f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8001f94:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001f98:	f001 fe02 	bl	8003ba0 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 8001f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	ddeb      	ble.n	8001f80 <main_function+0x124>
					}

					normalizedWeight = sum / 4;
 8001fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 8001fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb0:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 8001fb4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	db0f      	blt.n	8001fda <main_function+0x17e>

						thresh = refillDrawer(tare, calFactor);
 8001fba:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001fbe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001fc0:	f7ff ff28 	bl	8001e14 <refillDrawer>
 8001fc4:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, j, calFactor, tare, thresh);
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc8:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8001fcc:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8001fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fd2:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001fd6:	f000 fbad 	bl	8002734 <updateDrawerConfig>
				for(uint16_t j = 1; j <= 4; j++){
 8001fda:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8001fe4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d982      	bls.n	8001ef2 <main_function+0x96>
 8001fec:	e083      	b.n	80020f6 <main_function+0x29a>


				}
			}
			else{
				for(int k = 1; k <= 7; k++){
 8001fee:	2301      	movs	r3, #1
 8001ff0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ff2:	e07c      	b.n	80020ee <main_function+0x292>

					sum = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
					normalizedWeight = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					uint16_t A_slave = MuxCombos[k-1].A;
 8001ffc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	4945      	ldr	r1, [pc, #276]	@ (8002118 <main_function+0x2bc>)
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	440b      	add	r3, r1
 800200a:	3302      	adds	r3, #2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	877b      	strh	r3, [r7, #58]	@ 0x3a
					uint16_t B_slave = MuxCombos[k-1].B;
 8002010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002012:	1e5a      	subs	r2, r3, #1
 8002014:	4940      	ldr	r1, [pc, #256]	@ (8002118 <main_function+0x2bc>)
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	440b      	add	r3, r1
 800201e:	3301      	adds	r3, #1
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	873b      	strh	r3, [r7, #56]	@ 0x38
					uint16_t C_slave = MuxCombos[k-1].C;
 8002024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002026:	1e5a      	subs	r2, r3, #1
 8002028:	493b      	ldr	r1, [pc, #236]	@ (8002118 <main_function+0x2bc>)
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	440b      	add	r3, r1
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	86fb      	strh	r3, [r7, #54]	@ 0x36

					muxSET(A_slave, B_slave, C_slave, 0);
 8002036:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002038:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800203a:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 800203c:	2300      	movs	r3, #0
 800203e:	f000 feab 	bl	8002d98 <muxSET>

					printf("Drawer %d", k);
 8002042:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002044:	4836      	ldr	r0, [pc, #216]	@ (8002120 <main_function+0x2c4>)
 8002046:	f009 fbe3 	bl	800b810 <iprintf>

					drawerInst = getFileInfo(i, k);
 800204a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800204c:	b29a      	uxth	r2, r3
 800204e:	463b      	mov	r3, r7
 8002050:	f8b7 105a 	ldrh.w	r1, [r7, #90]	@ 0x5a
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fc41 	bl	80028dc <getFileInfo>
 800205a:	f107 0410 	add.w	r4, r7, #16
 800205e:	463b      	mov	r3, r7
 8002060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

					tare = drawerInst.Tare;
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	64bb      	str	r3, [r7, #72]	@ 0x48
					calFactor = drawerInst.calFactor;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	647b      	str	r3, [r7, #68]	@ 0x44
					thresh = drawerInst.thresh;
 800206e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002076:	ee17 3a90 	vmov	r3, s15
 800207a:	633b      	str	r3, [r7, #48]	@ 0x30

					for(int p = 0; p < 4; p++){
 800207c:	2300      	movs	r3, #0
 800207e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002080:	e010      	b.n	80020a4 <main_function+0x248>

						int weight = weigh(tare, calFactor);
 8002082:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8002086:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002088:	f000 ffce 	bl	8003028 <weigh>
 800208c:	62f8      	str	r0, [r7, #44]	@ 0x2c
						sum += weight;
 800208e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002090:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002092:	4413      	add	r3, r2
 8002094:	65fb      	str	r3, [r7, #92]	@ 0x5c
						HAL_Delay(400);
 8002096:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800209a:	f001 fd81 	bl	8003ba0 <HAL_Delay>
					for(int p = 0; p < 4; p++){
 800209e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020a0:	3301      	adds	r3, #1
 80020a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	ddeb      	ble.n	8002082 <main_function+0x226>
					}

					normalizedWeight = sum / 4;
 80020aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	87bb      	strh	r3, [r7, #60]	@ 0x3c

					if((thresh + 100) > normalizedWeight){
 80020b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b2:	f103 0263 	add.w	r2, r3, #99	@ 0x63
 80020b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80020b8:	429a      	cmp	r2, r3
 80020ba:	db15      	blt.n	80020e8 <main_function+0x28c>
						printf("This drawer is low on components\n\rPlease refill the drawer");
 80020bc:	4819      	ldr	r0, [pc, #100]	@ (8002124 <main_function+0x2c8>)
 80020be:	f009 fba7 	bl	800b810 <iprintf>
						printf("Press the selector button ONCE to continue\n\r");
 80020c2:	4819      	ldr	r0, [pc, #100]	@ (8002128 <main_function+0x2cc>)
 80020c4:	f009 fba4 	bl	800b810 <iprintf>

						thresh = refillDrawer(tare, calFactor);
 80020c8:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80020cc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80020ce:	f7ff fea1 	bl	8001e14 <refillDrawer>
 80020d2:	6338      	str	r0, [r7, #48]	@ 0x30
						updateDrawerConfig(i, k, calFactor, tare, thresh);
 80020d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020d6:	b299      	uxth	r1, r3
 80020d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020da:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 80020de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020e0:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80020e4:	f000 fb26 	bl	8002734 <updateDrawerConfig>
				for(int k = 1; k <= 7; k++){
 80020e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020ea:	3301      	adds	r3, #1
 80020ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80020ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020f0:	2b07      	cmp	r3, #7
 80020f2:	f77f af7f 	ble.w	8001ff4 <main_function+0x198>
	for(uint16_t i = 1; i <= 4; i++){
 80020f6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80020fa:	3301      	adds	r3, #1
 80020fc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8002100:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002104:	2b04      	cmp	r3, #4
 8002106:	f67f aeb5 	bls.w	8001e74 <main_function+0x18>

				}
			}
	}

}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	3764      	adds	r7, #100	@ 0x64
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	0800f494 	.word	0x0800f494
 8002118:	080109f8 	.word	0x080109f8
 800211c:	0800f49c 	.word	0x0800f49c
 8002120:	0800f4a8 	.word	0x0800f4a8
 8002124:	0800f4b4 	.word	0x0800f4b4
 8002128:	0800f4f0 	.word	0x0800f4f0

0800212c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	@ 0x28
 8002130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b5b      	ldr	r3, [pc, #364]	@ (80022b4 <MX_GPIO_Init+0x188>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a5a      	ldr	r2, [pc, #360]	@ (80022b4 <MX_GPIO_Init+0x188>)
 800214c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b58      	ldr	r3, [pc, #352]	@ (80022b4 <MX_GPIO_Init+0x188>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b54      	ldr	r3, [pc, #336]	@ (80022b4 <MX_GPIO_Init+0x188>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a53      	ldr	r2, [pc, #332]	@ (80022b4 <MX_GPIO_Init+0x188>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b51      	ldr	r3, [pc, #324]	@ (80022b4 <MX_GPIO_Init+0x188>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b4d      	ldr	r3, [pc, #308]	@ (80022b4 <MX_GPIO_Init+0x188>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a4c      	ldr	r2, [pc, #304]	@ (80022b4 <MX_GPIO_Init+0x188>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b4a      	ldr	r3, [pc, #296]	@ (80022b4 <MX_GPIO_Init+0x188>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b46      	ldr	r3, [pc, #280]	@ (80022b4 <MX_GPIO_Init+0x188>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a45      	ldr	r2, [pc, #276]	@ (80022b4 <MX_GPIO_Init+0x188>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b43      	ldr	r3, [pc, #268]	@ (80022b4 <MX_GPIO_Init+0x188>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SLAVE_C_Pin|SLAVE_B_Pin|REL_1_Pin|REL_3_Pin
 80021b2:	2200      	movs	r2, #0
 80021b4:	f641 4103 	movw	r1, #7171	@ 0x1c03
 80021b8:	483f      	ldr	r0, [pc, #252]	@ (80022b8 <MX_GPIO_Init+0x18c>)
 80021ba:	f002 fb43 	bl	8004844 <HAL_GPIO_WritePin>
                          |REL_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAST_A_Pin|MAST_B_Pin|MAST_C_Pin, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	2113      	movs	r1, #19
 80021c2:	483e      	ldr	r0, [pc, #248]	@ (80022bc <MX_GPIO_Init+0x190>)
 80021c4:	f002 fb3e 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 80021c8:	2200      	movs	r2, #0
 80021ca:	f24c 5121 	movw	r1, #50465	@ 0xc521
 80021ce:	483c      	ldr	r0, [pc, #240]	@ (80022c0 <MX_GPIO_Init+0x194>)
 80021d0:	f002 fb38 	bl	8004844 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|REL_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021da:	4838      	ldr	r0, [pc, #224]	@ (80022bc <MX_GPIO_Init+0x190>)
 80021dc:	f002 fb32 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLAVE_C_Pin SLAVE_B_Pin REL_1_Pin REL_3_Pin
                           REL_2_Pin */
  GPIO_InitStruct.Pin = SLAVE_C_Pin|SLAVE_B_Pin|REL_1_Pin|REL_3_Pin
 80021e0:	f641 4303 	movw	r3, #7171	@ 0x1c03
 80021e4:	617b      	str	r3, [r7, #20]
                          |REL_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	482f      	ldr	r0, [pc, #188]	@ (80022b8 <MX_GPIO_Init+0x18c>)
 80021fa:	f002 f977 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MAST_A_Pin MAST_B_Pin MAST_C_Pin */
  GPIO_InitStruct.Pin = MAST_A_Pin|MAST_B_Pin|MAST_C_Pin;
 80021fe:	2313      	movs	r3, #19
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2301      	movs	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4829      	ldr	r0, [pc, #164]	@ (80022bc <MX_GPIO_Init+0x190>)
 8002216:	f002 f969 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SLAVE_A_Pin SCK_DRW_Pin PB14 PB15
                           PB5 REL_4_Pin */
  GPIO_InitStruct.Pin = SLAVE_A_Pin|SCK_DRW_Pin|GPIO_PIN_14|GPIO_PIN_15
 800221a:	f24c 5321 	movw	r3, #50465	@ 0xc521
 800221e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|REL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4823      	ldr	r0, [pc, #140]	@ (80022c0 <MX_GPIO_Init+0x194>)
 8002234:	f002 f95a 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BTN_Pin CONFIRM_BTN_Pin */
  GPIO_InitStruct.Pin = RESET_BTN_Pin|CONFIRM_BTN_Pin;
 8002238:	2306      	movs	r3, #6
 800223a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800223c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	481c      	ldr	r0, [pc, #112]	@ (80022c0 <MX_GPIO_Init+0x194>)
 800224e:	f002 f94d 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DAT_IN_Pin */
  GPIO_InitStruct.Pin = DAT_IN_Pin;
 8002252:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DAT_IN_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4815      	ldr	r0, [pc, #84]	@ (80022bc <MX_GPIO_Init+0x190>)
 8002268:	f002 f940 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800226c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002276:	2301      	movs	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	480d      	ldr	r0, [pc, #52]	@ (80022bc <MX_GPIO_Init+0x190>)
 8002286:	f002 f931 	bl	80044ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2007      	movs	r0, #7
 8002290:	f001 fd85 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002294:	2007      	movs	r0, #7
 8002296:	f001 fd9e 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	2008      	movs	r0, #8
 80022a0:	f001 fd7d 	bl	8003d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80022a4:	2008      	movs	r0, #8
 80022a6:	f001 fd96 	bl	8003dd6 <HAL_NVIC_EnableIRQ>

}
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	@ 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020000 	.word	0x40020000
 80022c0:	40020400 	.word	0x40020400

080022c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	//disables internal buffering for input stream for scanf
	setvbuf(stdin, NULL, _IONBF, 0);
 80022ca:	4b34      	ldr	r3, [pc, #208]	@ (800239c <main+0xd8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6858      	ldr	r0, [r3, #4]
 80022d0:	2300      	movs	r3, #0
 80022d2:	2202      	movs	r2, #2
 80022d4:	2100      	movs	r1, #0
 80022d6:	f009 faad 	bl	800b834 <setvbuf>

	/* Configure the system clock */
	SystemClock_Config();
 80022da:	f000 f86b 	bl	80023b4 <SystemClock_Config>

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022de:	f001 fbed 	bl	8003abc <HAL_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022e2:	f7ff ff23 	bl	800212c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80022e6:	f001 fb4d 	bl	8003984 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80022ea:	f001 fa09 	bl	8003700 <MX_TIM2_Init>
  MX_FATFS_Init();
 80022ee:	f004 ff85 	bl	80071fc <MX_FATFS_Init>
  MX_SPI1_Init();
 80022f2:	f000 ff89 	bl	8003208 <MX_SPI1_Init>

	printf("Hello from STM32 UART!\n\r");
 80022f6:	482a      	ldr	r0, [pc, #168]	@ (80023a0 <main+0xdc>)
 80022f8:	f009 fa8a 	bl	800b810 <iprintf>

	HAL_TIM_Base_Start(&htim2);
 80022fc:	4829      	ldr	r0, [pc, #164]	@ (80023a4 <main+0xe0>)
 80022fe:	f003 fe1f 	bl	8005f40 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002308:	4827      	ldr	r0, [pc, #156]	@ (80023a8 <main+0xe4>)
 800230a:	f002 fa9b 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800230e:	200a      	movs	r0, #10
 8002310:	f001 fc46 	bl	8003ba0 <HAL_Delay>
	HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800231a:	4823      	ldr	r0, [pc, #140]	@ (80023a8 <main+0xe4>)
 800231c:	f002 fa92 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002320:	200a      	movs	r0, #10
 8002322:	f001 fc3d 	bl	8003ba0 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002326:	f001 fbc9 	bl	8003abc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800232a:	f000 f843 	bl	80023b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800232e:	f7ff fefd 	bl	800212c <MX_GPIO_Init>
  MX_DMA_Init();
 8002332:	f7ff fb79 	bl	8001a28 <MX_DMA_Init>
  MX_TIM2_Init();
 8002336:	f001 f9e3 	bl	8003700 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800233a:	f001 fb23 	bl	8003984 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800233e:	f004 ff5d 	bl	80071fc <MX_FATFS_Init>
  MX_SPI1_Init();
 8002342:	f000 ff61 	bl	8003208 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002346:	f000 ff95 	bl	8003274 <MX_SPI2_Init>
  MX_TIM3_Init();
 800234a:	f001 fa25 	bl	8003798 <MX_TIM3_Init>
  MX_TIM4_Init();
 800234e:	f001 fa71 	bl	8003834 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8002352:	f7ff f88b 	bl	800146c <ILI9341_Init>

  int rectXStart = 80;
 8002356:	2350      	movs	r3, #80	@ 0x50
 8002358:	607b      	str	r3, [r7, #4]
  int rectYStart = 80;
 800235a:	2350      	movs	r3, #80	@ 0x50
 800235c:	603b      	str	r3, [r7, #0]

  // Simple Text writing (Text, Font, X, Y, Color, BackColor)
  // Available Fonts are FONT1, FONT2, FONT3 and FONT4
  ILI9341_FillScreen(BLACK);
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff fa7a 	bl	8001858 <ILI9341_FillScreen>
  ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 8002364:	2003      	movs	r0, #3
 8002366:	f7ff f98b 	bl	8001680 <ILI9341_SetRotation>
  ILI9341_DrawText("Hello from STM32 UART!", FONT4, 55, 110, WHITE, BLACK);
 800236a:	2300      	movs	r3, #0
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	236e      	movs	r3, #110	@ 0x6e
 8002376:	2237      	movs	r2, #55	@ 0x37
 8002378:	490c      	ldr	r1, [pc, #48]	@ (80023ac <main+0xe8>)
 800237a:	480d      	ldr	r0, [pc, #52]	@ (80023b0 <main+0xec>)
 800237c:	f7fe ff1a 	bl	80011b4 <ILI9341_DrawText>
  HAL_Delay(3000);
 8002380:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002384:	f001 fc0c 	bl	8003ba0 <HAL_Delay>
//
//		HAL_Delay(1000);
//
//  }

  Calibrate();
 8002388:	f7ff fba4 	bl	8001ad4 <Calibrate>
  main_function();
 800238c:	f7ff fd66 	bl	8001e5c <main_function>
 8002390:	2300      	movs	r3, #0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000044 	.word	0x20000044
 80023a0:	0800f520 	.word	0x0800f520
 80023a4:	20000dfc 	.word	0x20000dfc
 80023a8:	40020400 	.word	0x40020400
 80023ac:	0800f8b4 	.word	0x0800f8b4
 80023b0:	0800f53c 	.word	0x0800f53c

080023b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b094      	sub	sp, #80	@ 0x50
 80023b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	2234      	movs	r2, #52	@ 0x34
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f009 fb81 	bl	800baca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	2300      	movs	r3, #0
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <SystemClock_Config+0xd0>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	4a28      	ldr	r2, [pc, #160]	@ (8002484 <SystemClock_Config+0xd0>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e8:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <SystemClock_Config+0xd0>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023f4:	2300      	movs	r3, #0
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <SystemClock_Config+0xd4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002400:	4a21      	ldr	r2, [pc, #132]	@ (8002488 <SystemClock_Config+0xd4>)
 8002402:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <SystemClock_Config+0xd4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002414:	2302      	movs	r3, #2
 8002416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002418:	2301      	movs	r3, #1
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800241c:	2310      	movs	r3, #16
 800241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002420:	2302      	movs	r3, #2
 8002422:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002424:	2300      	movs	r3, #0
 8002426:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002428:	2308      	movs	r3, #8
 800242a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 800242c:	2340      	movs	r3, #64	@ 0x40
 800242e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002430:	2302      	movs	r3, #2
 8002432:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002434:	2302      	movs	r3, #2
 8002436:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002438:	2302      	movs	r3, #2
 800243a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	4618      	mov	r0, r3
 8002442:	f002 fcf5 	bl	8004e30 <HAL_RCC_OscConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800244c:	f000 f81e 	bl	800248c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002450:	230f      	movs	r3, #15
 8002452:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002454:	2302      	movs	r3, #2
 8002456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800245c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	2102      	movs	r1, #2
 800246c:	4618      	mov	r0, r3
 800246e:	f002 fa1b 	bl	80048a8 <HAL_RCC_ClockConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002478:	f000 f808 	bl	800248c <Error_Handler>
  }
}
 800247c:	bf00      	nop
 800247e:	3750      	adds	r7, #80	@ 0x50
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	40007000 	.word	0x40007000

0800248c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002490:	b672      	cpsid	i
}
 8002492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <Error_Handler+0x8>

08002498 <SD_init>:

static char buffer[MAX_FILELINE];
BYTE previousLine[MAX_FILELINE];


void  SD_init(){
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800249e:	2201      	movs	r2, #1
 80024a0:	4916      	ldr	r1, [pc, #88]	@ (80024fc <SD_init+0x64>)
 80024a2:	4817      	ldr	r0, [pc, #92]	@ (8002500 <SD_init+0x68>)
 80024a4:	f007 f9b0 	bl	8009808 <f_mount>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <SD_init+0x6c>)
 80024ae:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80024b0:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <SD_init+0x6c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <SD_init+0x30>
		printf("f_mount error (%i)\r\n", fres);
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <SD_init+0x6c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	4812      	ldr	r0, [pc, #72]	@ (8002508 <SD_init+0x70>)
 80024c0:	f009 f9a6 	bl	800b810 <iprintf>
		while(1);
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <SD_init+0x2c>
	//Let's get some statistics from the SD card
	DWORD free_clusters;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 80024c8:	463a      	mov	r2, r7
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	4619      	mov	r1, r3
 80024ce:	480b      	ldr	r0, [pc, #44]	@ (80024fc <SD_init+0x64>)
 80024d0:	f007 fef6 	bl	800a2c0 <f_getfree>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <SD_init+0x6c>)
 80024da:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80024dc:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <SD_init+0x6c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <SD_init+0x5c>
		printf("f_getfree error (%i)\r\n", fres);
 80024e4:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <SD_init+0x6c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	4808      	ldr	r0, [pc, #32]	@ (800250c <SD_init+0x74>)
 80024ec:	f009 f990 	bl	800b810 <iprintf>
		while(1);
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <SD_init+0x58>
	}

}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	0800f56c 	.word	0x0800f56c
 8002500:	2000021c 	.word	0x2000021c
 8002504:	200008ac 	.word	0x200008ac
 8002508:	0800f570 	.word	0x0800f570
 800250c:	0800f588 	.word	0x0800f588

08002510 <saveDrawerConfig>:

void saveDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b08c      	sub	sp, #48	@ 0x30
 8002514:	af06      	add	r7, sp, #24
 8002516:	ed87 0a02 	vstr	s0, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4603      	mov	r3, r0
 8002520:	81fb      	strh	r3, [r7, #14]
 8002522:	460b      	mov	r3, r1
 8002524:	81bb      	strh	r3, [r7, #12]

	UINT bytesWrote;

	//f_unlink((TCHAR*)filename); //deletes the original file

	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND | FA_CREATE_NEW);
 8002526:	4b33      	ldr	r3, [pc, #204]	@ (80025f4 <saveDrawerConfig+0xe4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2236      	movs	r2, #54	@ 0x36
 800252c:	4619      	mov	r1, r3
 800252e:	4832      	ldr	r0, [pc, #200]	@ (80025f8 <saveDrawerConfig+0xe8>)
 8002530:	f007 f9b0 	bl	8009894 <f_open>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	4b30      	ldr	r3, [pc, #192]	@ (80025fc <saveDrawerConfig+0xec>)
 800253a:	701a      	strb	r2, [r3, #0]

	if(fres == FR_EXIST){
 800253c:	4b2f      	ldr	r3, [pc, #188]	@ (80025fc <saveDrawerConfig+0xec>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d116      	bne.n	8002572 <saveDrawerConfig+0x62>
				fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND);
 8002544:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <saveDrawerConfig+0xe4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2232      	movs	r2, #50	@ 0x32
 800254a:	4619      	mov	r1, r3
 800254c:	482a      	ldr	r0, [pc, #168]	@ (80025f8 <saveDrawerConfig+0xe8>)
 800254e:	f007 f9a1 	bl	8009894 <f_open>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b29      	ldr	r3, [pc, #164]	@ (80025fc <saveDrawerConfig+0xec>)
 8002558:	701a      	strb	r2, [r3, #0]
				if(fres != FR_OK){
 800255a:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <saveDrawerConfig+0xec>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d017      	beq.n	8002592 <saveDrawerConfig+0x82>
					printf("f_write error (%i) IN saveDrawerConfig\r\n", fres);
 8002562:	4b26      	ldr	r3, [pc, #152]	@ (80025fc <saveDrawerConfig+0xec>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	4619      	mov	r1, r3
 8002568:	4825      	ldr	r0, [pc, #148]	@ (8002600 <saveDrawerConfig+0xf0>)
 800256a:	f009 f951 	bl	800b810 <iprintf>
					while(1);
 800256e:	bf00      	nop
 8002570:	e7fd      	b.n	800256e <saveDrawerConfig+0x5e>
				}
	}
	else if(fres == FR_OK){
 8002572:	4b22      	ldr	r3, [pc, #136]	@ (80025fc <saveDrawerConfig+0xec>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <saveDrawerConfig+0x72>
		printf("Created new file");
 800257a:	4822      	ldr	r0, [pc, #136]	@ (8002604 <saveDrawerConfig+0xf4>)
 800257c:	f009 f948 	bl	800b810 <iprintf>
 8002580:	e007      	b.n	8002592 <saveDrawerConfig+0x82>
	}
	else {
		printf("f_open error (%i) IN saveDrawerConfig\r\n", fres);
 8002582:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <saveDrawerConfig+0xec>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	481f      	ldr	r0, [pc, #124]	@ (8002608 <saveDrawerConfig+0xf8>)
 800258a:	f009 f941 	bl	800b810 <iprintf>
		while(1);
 800258e:	bf00      	nop
 8002590:	e7fd      	b.n	800258e <saveDrawerConfig+0x7e>
	}

	snprintf((char*)buffer, sizeof(buffer),"Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld\n", row, drawer, calFactor, Tare, thresh);
 8002592:	89fd      	ldrh	r5, [r7, #14]
 8002594:	89bc      	ldrh	r4, [r7, #12]
 8002596:	68b8      	ldr	r0, [r7, #8]
 8002598:	f7fd fff6 	bl	8000588 <__aeabi_f2d>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	9105      	str	r1, [sp, #20]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	9104      	str	r1, [sp, #16]
 80025a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025ac:	9400      	str	r4, [sp, #0]
 80025ae:	462b      	mov	r3, r5
 80025b0:	4a16      	ldr	r2, [pc, #88]	@ (800260c <saveDrawerConfig+0xfc>)
 80025b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025b6:	4816      	ldr	r0, [pc, #88]	@ (8002610 <saveDrawerConfig+0x100>)
 80025b8:	f009 f9f0 	bl	800b99c <sniprintf>
	fres = f_write(&fil, buffer, strlen(buffer), &bytesWrote);
 80025bc:	4814      	ldr	r0, [pc, #80]	@ (8002610 <saveDrawerConfig+0x100>)
 80025be:	f7fd fe77 	bl	80002b0 <strlen>
 80025c2:	4602      	mov	r2, r0
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4911      	ldr	r1, [pc, #68]	@ (8002610 <saveDrawerConfig+0x100>)
 80025ca:	480b      	ldr	r0, [pc, #44]	@ (80025f8 <saveDrawerConfig+0xe8>)
 80025cc:	f007 fc5b 	bl	8009e86 <f_write>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <saveDrawerConfig+0xec>)
 80025d6:	701a      	strb	r2, [r3, #0]
	printf("Wrote %i bytes to %s\r\n", bytesWrote,filename);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4a06      	ldr	r2, [pc, #24]	@ (80025f4 <saveDrawerConfig+0xe4>)
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	480c      	ldr	r0, [pc, #48]	@ (8002614 <saveDrawerConfig+0x104>)
 80025e2:	f009 f915 	bl	800b810 <iprintf>


	f_close(&fil);
 80025e6:	4804      	ldr	r0, [pc, #16]	@ (80025f8 <saveDrawerConfig+0xe8>)
 80025e8:	f007 fe40 	bl	800a26c <f_close>

}
 80025ec:	bf00      	nop
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bdb0      	pop	{r4, r5, r7, pc}
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	2000044c 	.word	0x2000044c
 80025fc:	200008ac 	.word	0x200008ac
 8002600:	0800f5a0 	.word	0x0800f5a0
 8002604:	0800f5cc 	.word	0x0800f5cc
 8002608:	0800f5e0 	.word	0x0800f5e0
 800260c:	0800f608 	.word	0x0800f608
 8002610:	200008b0 	.word	0x200008b0
 8002614:	0800f63c 	.word	0x0800f63c

08002618 <getData>:

uint32_t getData(char* token){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i <= 1; i++){
 8002620:	2300      	movs	r3, #0
 8002622:	81fb      	strh	r3, [r7, #14]
 8002624:	e011      	b.n	800264a <getData+0x32>
		char* temp_token = strtok(token, ":");
 8002626:	490d      	ldr	r1, [pc, #52]	@ (800265c <getData+0x44>)
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f009 fa57 	bl	800badc <strtok>
 800262e:	60b8      	str	r0, [r7, #8]
		if(i == 1){
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d106      	bne.n	8002644 <getData+0x2c>

			return strtol(temp_token, NULL, 10);
 8002636:	220a      	movs	r2, #10
 8002638:	2100      	movs	r1, #0
 800263a:	68b8      	ldr	r0, [r7, #8]
 800263c:	f008 f9b0 	bl	800a9a0 <strtol>
 8002640:	4603      	mov	r3, r0
 8002642:	e006      	b.n	8002652 <getData+0x3a>
	for(uint16_t i = 0; i <= 1; i++){
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	3301      	adds	r3, #1
 8002648:	81fb      	strh	r3, [r7, #14]
 800264a:	89fb      	ldrh	r3, [r7, #14]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d9ea      	bls.n	8002626 <getData+0xe>
		}
	}
	return 0;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	0800f654 	.word	0x0800f654

08002660 <getLineMarker>:

uint16_t getLineMarker(uint16_t row, uint16_t drawer){
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	460a      	mov	r2, r1
 800266a:	80fb      	strh	r3, [r7, #6]
 800266c:	4613      	mov	r3, r2
 800266e:	80bb      	strh	r3, [r7, #4]

	fres = f_open(&fil, filename, FA_READ);
 8002670:	4b29      	ldr	r3, [pc, #164]	@ (8002718 <getLineMarker+0xb8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4619      	mov	r1, r3
 8002678:	4828      	ldr	r0, [pc, #160]	@ (800271c <getLineMarker+0xbc>)
 800267a:	f007 f90b 	bl	8009894 <f_open>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <getLineMarker+0xc0>)
 8002684:	701a      	strb	r2, [r3, #0]
	uint16_t fileIndex = 1;
 8002686:	2301      	movs	r3, #1
 8002688:	82fb      	strh	r3, [r7, #22]
	static char array[2];

	if (fres != FR_OK){
 800268a:	4b25      	ldr	r3, [pc, #148]	@ (8002720 <getLineMarker+0xc0>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <getLineMarker+0x42>
		printf("f_open error (%i) IN getLineMarker\r\n", fres);
 8002692:	4b23      	ldr	r3, [pc, #140]	@ (8002720 <getLineMarker+0xc0>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4619      	mov	r1, r3
 8002698:	4822      	ldr	r0, [pc, #136]	@ (8002724 <getLineMarker+0xc4>)
 800269a:	f009 f8b9 	bl	800b810 <iprintf>
		while(1);
 800269e:	bf00      	nop
 80026a0:	e7fd      	b.n	800269e <getLineMarker+0x3e>
	}
	else{
		TCHAR* rres = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
		do{
			rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 80026a6:	4a1d      	ldr	r2, [pc, #116]	@ (800271c <getLineMarker+0xbc>)
 80026a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026ac:	481e      	ldr	r0, [pc, #120]	@ (8002728 <getLineMarker+0xc8>)
 80026ae:	f008 f860 	bl	800a772 <f_gets>
 80026b2:	6138      	str	r0, [r7, #16]

			//char* fileLine = fgets(buffer, MAX_FILELINE, drawerConfig);
			char* token = strtok(rres, ";");
 80026b4:	491d      	ldr	r1, [pc, #116]	@ (800272c <getLineMarker+0xcc>)
 80026b6:	6938      	ldr	r0, [r7, #16]
 80026b8:	f009 fa10 	bl	800badc <strtok>
 80026bc:	60f8      	str	r0, [r7, #12]

				for(uint16_t i = 0; i <= 1 ; i++){
 80026be:	2300      	movs	r3, #0
 80026c0:	82bb      	strh	r3, [r7, #20]
 80026c2:	e00a      	b.n	80026da <getLineMarker+0x7a>
					array[i] = getData(token);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff ffa7 	bl	8002618 <getData>
 80026ca:	4602      	mov	r2, r0
 80026cc:	8abb      	ldrh	r3, [r7, #20]
 80026ce:	b2d1      	uxtb	r1, r2
 80026d0:	4a17      	ldr	r2, [pc, #92]	@ (8002730 <getLineMarker+0xd0>)
 80026d2:	54d1      	strb	r1, [r2, r3]
				for(uint16_t i = 0; i <= 1 ; i++){
 80026d4:	8abb      	ldrh	r3, [r7, #20]
 80026d6:	3301      	adds	r3, #1
 80026d8:	82bb      	strh	r3, [r7, #20]
 80026da:	8abb      	ldrh	r3, [r7, #20]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d9f1      	bls.n	80026c4 <getLineMarker+0x64>
				}

			if(row == array[0] && drawer == array[1]){
 80026e0:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <getLineMarker+0xd0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d107      	bne.n	80026fc <getLineMarker+0x9c>
 80026ec:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <getLineMarker+0xd0>)
 80026ee:	785b      	ldrb	r3, [r3, #1]
 80026f0:	461a      	mov	r2, r3
 80026f2:	88bb      	ldrh	r3, [r7, #4]
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <getLineMarker+0x9c>
					return fileIndex;
 80026f8:	8afb      	ldrh	r3, [r7, #22]
 80026fa:	e009      	b.n	8002710 <getLineMarker+0xb0>
			}
			else{
				fileIndex++;
 80026fc:	8afb      	ldrh	r3, [r7, #22]
 80026fe:	3301      	adds	r3, #1
 8002700:	82fb      	strh	r3, [r7, #22]

			}
		}while(rres != 0);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ce      	bne.n	80026a6 <getLineMarker+0x46>
	}
	f_close(&fil);
 8002708:	4804      	ldr	r0, [pc, #16]	@ (800271c <getLineMarker+0xbc>)
 800270a:	f007 fdaf 	bl	800a26c <f_close>
	return 0;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000000c 	.word	0x2000000c
 800271c:	2000044c 	.word	0x2000044c
 8002720:	200008ac 	.word	0x200008ac
 8002724:	0800f658 	.word	0x0800f658
 8002728:	200008b0 	.word	0x200008b0
 800272c:	0800f680 	.word	0x0800f680
 8002730:	20000cb0 	.word	0x20000cb0

08002734 <updateDrawerConfig>:

void updateDrawerConfig(uint16_t row, uint16_t drawer, float calFactor, uint32_t Tare, uint32_t thresh){ //will need to add ID marker and compare if they are the same, if not then change both locations
 8002734:	b5b0      	push	{r4, r5, r7, lr}
 8002736:	b08e      	sub	sp, #56	@ 0x38
 8002738:	af06      	add	r7, sp, #24
 800273a:	ed87 0a02 	vstr	s0, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	4603      	mov	r3, r0
 8002744:	81fb      	strh	r3, [r7, #14]
 8002746:	460b      	mov	r3, r1
 8002748:	81bb      	strh	r3, [r7, #12]

	fres = f_open(&fil, filename, FA_READ);
 800274a:	4b58      	ldr	r3, [pc, #352]	@ (80028ac <updateDrawerConfig+0x178>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2201      	movs	r2, #1
 8002750:	4619      	mov	r1, r3
 8002752:	4857      	ldr	r0, [pc, #348]	@ (80028b0 <updateDrawerConfig+0x17c>)
 8002754:	f007 f89e 	bl	8009894 <f_open>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	4b55      	ldr	r3, [pc, #340]	@ (80028b4 <updateDrawerConfig+0x180>)
 800275e:	701a      	strb	r2, [r3, #0]
	fres_temp = f_open(&fil_temp, temp_filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002760:	4b55      	ldr	r3, [pc, #340]	@ (80028b8 <updateDrawerConfig+0x184>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	221a      	movs	r2, #26
 8002766:	4619      	mov	r1, r3
 8002768:	4854      	ldr	r0, [pc, #336]	@ (80028bc <updateDrawerConfig+0x188>)
 800276a:	f007 f893 	bl	8009894 <f_open>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <updateDrawerConfig+0x18c>)
 8002774:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8002776:	4b4f      	ldr	r3, [pc, #316]	@ (80028b4 <updateDrawerConfig+0x180>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <updateDrawerConfig+0x5a>
		printf("f_open error (%i) IN updateDrawerConfig FOR filename\r\n", fres);
 800277e:	4b4d      	ldr	r3, [pc, #308]	@ (80028b4 <updateDrawerConfig+0x180>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	484f      	ldr	r0, [pc, #316]	@ (80028c4 <updateDrawerConfig+0x190>)
 8002786:	f009 f843 	bl	800b810 <iprintf>
		while(1);
 800278a:	bf00      	nop
 800278c:	e7fd      	b.n	800278a <updateDrawerConfig+0x56>
	}
	if (fres_temp != FR_OK){
 800278e:	4b4c      	ldr	r3, [pc, #304]	@ (80028c0 <updateDrawerConfig+0x18c>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <updateDrawerConfig+0x72>
		printf("f_open error (%i) IN updateDrawerConfig FOR temp_filename\r\n", fres_temp);
 8002796:	4b4a      	ldr	r3, [pc, #296]	@ (80028c0 <updateDrawerConfig+0x18c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4619      	mov	r1, r3
 800279c:	484a      	ldr	r0, [pc, #296]	@ (80028c8 <updateDrawerConfig+0x194>)
 800279e:	f009 f837 	bl	800b810 <iprintf>
		while(1);
 80027a2:	bf00      	nop
 80027a4:	e7fd      	b.n	80027a2 <updateDrawerConfig+0x6e>
	}

	UINT bytesWrote;

	bool keep_reading = true;
 80027a6:	2301      	movs	r3, #1
 80027a8:	77fb      	strb	r3, [r7, #31]
	uint16_t lineMarker = getLineMarker(row, drawer);
 80027aa:	89ba      	ldrh	r2, [r7, #12]
 80027ac:	89fb      	ldrh	r3, [r7, #14]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff55 	bl	8002660 <getLineMarker>
 80027b6:	4603      	mov	r3, r0
 80027b8:	837b      	strh	r3, [r7, #26]
	uint16_t currentLine = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	83bb      	strh	r3, [r7, #28]
	do{

		TCHAR* rres = f_gets((TCHAR*)buffer, MAX_FILELINE, &fil);
 80027be:	4a3c      	ldr	r2, [pc, #240]	@ (80028b0 <updateDrawerConfig+0x17c>)
 80027c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027c4:	4841      	ldr	r0, [pc, #260]	@ (80028cc <updateDrawerConfig+0x198>)
 80027c6:	f007 ffd4 	bl	800a772 <f_gets>
 80027ca:	6178      	str	r0, [r7, #20]

		if(rres == 0) keep_reading = false;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <updateDrawerConfig+0xa4>
 80027d2:	2300      	movs	r3, #0
 80027d4:	77fb      	strb	r3, [r7, #31]
 80027d6:	e04c      	b.n	8002872 <updateDrawerConfig+0x13e>
		else if(currentLine == lineMarker){ //ID matching would go here, check if IDs match, if not then save previous line, update line, then search for original location of ID and replace that line
 80027d8:	8bba      	ldrh	r2, [r7, #28]
 80027da:	8b7b      	ldrh	r3, [r7, #26]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d12e      	bne.n	800283e <updateDrawerConfig+0x10a>
			snprintf((char*)buffer, MAX_FILELINE, "Row:%d;Drawer:%d;CalFactor:%f;Tare:%lu;Thresh:%ld", row, drawer, calFactor, Tare, thresh);
 80027e0:	89fd      	ldrh	r5, [r7, #14]
 80027e2:	89bc      	ldrh	r4, [r7, #12]
 80027e4:	68b8      	ldr	r0, [r7, #8]
 80027e6:	f7fd fecf 	bl	8000588 <__aeabi_f2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	9105      	str	r1, [sp, #20]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	9104      	str	r1, [sp, #16]
 80027f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027fa:	9400      	str	r4, [sp, #0]
 80027fc:	462b      	mov	r3, r5
 80027fe:	4a34      	ldr	r2, [pc, #208]	@ (80028d0 <updateDrawerConfig+0x19c>)
 8002800:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002804:	4831      	ldr	r0, [pc, #196]	@ (80028cc <updateDrawerConfig+0x198>)
 8002806:	f009 f8c9 	bl	800b99c <sniprintf>
			//fputs(buffer, temp);

			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 800280a:	4830      	ldr	r0, [pc, #192]	@ (80028cc <updateDrawerConfig+0x198>)
 800280c:	f7fd fd50 	bl	80002b0 <strlen>
 8002810:	4602      	mov	r2, r0
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	492d      	ldr	r1, [pc, #180]	@ (80028cc <updateDrawerConfig+0x198>)
 8002818:	4828      	ldr	r0, [pc, #160]	@ (80028bc <updateDrawerConfig+0x188>)
 800281a:	f007 fb34 	bl	8009e86 <f_write>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <updateDrawerConfig+0x180>)
 8002824:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8002826:	4b23      	ldr	r3, [pc, #140]	@ (80028b4 <updateDrawerConfig+0x180>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d021      	beq.n	8002872 <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(1)\r\n", fres);
 800282e:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <updateDrawerConfig+0x180>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	4827      	ldr	r0, [pc, #156]	@ (80028d4 <updateDrawerConfig+0x1a0>)
 8002836:	f008 ffeb 	bl	800b810 <iprintf>
				while(1);
 800283a:	bf00      	nop
 800283c:	e7fd      	b.n	800283a <updateDrawerConfig+0x106>
			}

		}
		else {
			fres = f_write(&fil_temp, buffer, strlen(buffer), &bytesWrote);
 800283e:	4823      	ldr	r0, [pc, #140]	@ (80028cc <updateDrawerConfig+0x198>)
 8002840:	f7fd fd36 	bl	80002b0 <strlen>
 8002844:	4602      	mov	r2, r0
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	4920      	ldr	r1, [pc, #128]	@ (80028cc <updateDrawerConfig+0x198>)
 800284c:	481b      	ldr	r0, [pc, #108]	@ (80028bc <updateDrawerConfig+0x188>)
 800284e:	f007 fb1a 	bl	8009e86 <f_write>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	4b17      	ldr	r3, [pc, #92]	@ (80028b4 <updateDrawerConfig+0x180>)
 8002858:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 800285a:	4b16      	ldr	r3, [pc, #88]	@ (80028b4 <updateDrawerConfig+0x180>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <updateDrawerConfig+0x13e>
				printf("f_write error (%i) IN updateDrawerConfig(2)\r\n", fres);
 8002862:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <updateDrawerConfig+0x180>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	4619      	mov	r1, r3
 8002868:	481b      	ldr	r0, [pc, #108]	@ (80028d8 <updateDrawerConfig+0x1a4>)
 800286a:	f008 ffd1 	bl	800b810 <iprintf>
				while(1);
 800286e:	bf00      	nop
 8002870:	e7fd      	b.n	800286e <updateDrawerConfig+0x13a>
			}
		}


		currentLine++;
 8002872:	8bbb      	ldrh	r3, [r7, #28]
 8002874:	3301      	adds	r3, #1
 8002876:	83bb      	strh	r3, [r7, #28]

	}while(keep_reading);
 8002878:	7ffb      	ldrb	r3, [r7, #31]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d19f      	bne.n	80027be <updateDrawerConfig+0x8a>

	f_close(&fil);
 800287e:	480c      	ldr	r0, [pc, #48]	@ (80028b0 <updateDrawerConfig+0x17c>)
 8002880:	f007 fcf4 	bl	800a26c <f_close>
	f_close(&fil_temp);
 8002884:	480d      	ldr	r0, [pc, #52]	@ (80028bc <updateDrawerConfig+0x188>)
 8002886:	f007 fcf1 	bl	800a26c <f_close>

	f_unlink((TCHAR*)filename); //deletes the original file
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <updateDrawerConfig+0x178>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f007 fdcb 	bl	800a42a <f_unlink>
	f_rename((TCHAR*)temp_filename, (TCHAR*)filename); //rename the temp file to be the new "orginal" file
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <updateDrawerConfig+0x184>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <updateDrawerConfig+0x178>)
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f007 fe6e 	bl	800a580 <f_rename>


}
 80028a4:	bf00      	nop
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bdb0      	pop	{r4, r5, r7, pc}
 80028ac:	2000000c 	.word	0x2000000c
 80028b0:	2000044c 	.word	0x2000044c
 80028b4:	200008ac 	.word	0x200008ac
 80028b8:	20000010 	.word	0x20000010
 80028bc:	2000067c 	.word	0x2000067c
 80028c0:	200008ad 	.word	0x200008ad
 80028c4:	0800f684 	.word	0x0800f684
 80028c8:	0800f6bc 	.word	0x0800f6bc
 80028cc:	200008b0 	.word	0x200008b0
 80028d0:	0800f6f8 	.word	0x0800f6f8
 80028d4:	0800f72c 	.word	0x0800f72c
 80028d8:	0800f75c 	.word	0x0800f75c

080028dc <getFileInfo>:


struct drawerInfo getFileInfo(uint16_t row, uint16_t drawer){ //add ID parameter here later
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b08d      	sub	sp, #52	@ 0x34
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	4613      	mov	r3, r2
 80028ea:	803b      	strh	r3, [r7, #0]

	struct drawerInfo drawerInst = { 0 };
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
	static unsigned int array[5];

	uint16_t lineMarker = getLineMarker(row, drawer);
 80028fa:	883a      	ldrh	r2, [r7, #0]
 80028fc:	887b      	ldrh	r3, [r7, #2]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fead 	bl	8002660 <getLineMarker>
 8002906:	4603      	mov	r3, r0
 8002908:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t fileIndex = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	fres = f_open(&fil, filename, FA_READ);
 800290e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a08 <getFileInfo+0x12c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	4619      	mov	r1, r3
 8002916:	483d      	ldr	r0, [pc, #244]	@ (8002a0c <getFileInfo+0x130>)
 8002918:	f006 ffbc 	bl	8009894 <f_open>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <getFileInfo+0x134>)
 8002922:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK){
 8002924:	4b3a      	ldr	r3, [pc, #232]	@ (8002a10 <getFileInfo+0x134>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <getFileInfo+0x60>
			printf("f_open error (%i) IN getFileInfo\r\n", fres);
 800292c:	4b38      	ldr	r3, [pc, #224]	@ (8002a10 <getFileInfo+0x134>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4619      	mov	r1, r3
 8002932:	4838      	ldr	r0, [pc, #224]	@ (8002a14 <getFileInfo+0x138>)
 8002934:	f008 ff6c 	bl	800b810 <iprintf>
			while(1);
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <getFileInfo+0x5c>
		}
	else {
		TCHAR* rres = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
		do {

				rres = f_gets((TCHAR*) buffer, MAX_FILELINE, &fil);
 8002940:	4a32      	ldr	r2, [pc, #200]	@ (8002a0c <getFileInfo+0x130>)
 8002942:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002946:	4834      	ldr	r0, [pc, #208]	@ (8002a18 <getFileInfo+0x13c>)
 8002948:	f007 ff13 	bl	800a772 <f_gets>
 800294c:	61f8      	str	r0, [r7, #28]

				if (fileIndex == lineMarker) {
 800294e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002950:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002952:	429a      	cmp	r2, r3
 8002954:	d140      	bne.n	80029d8 <getFileInfo+0xfc>
						char* token = strtok(buffer, ";");
 8002956:	4931      	ldr	r1, [pc, #196]	@ (8002a1c <getFileInfo+0x140>)
 8002958:	482f      	ldr	r0, [pc, #188]	@ (8002a18 <getFileInfo+0x13c>)
 800295a:	f009 f8bf 	bl	800badc <strtok>
 800295e:	62b8      	str	r0, [r7, #40]	@ 0x28
						unsigned int index = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24

						while (token != NULL) {
 8002964:	e00f      	b.n	8002986 <getFileInfo+0xaa>
								array[index] = getData(token);
 8002966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002968:	f7ff fe56 	bl	8002618 <getData>
 800296c:	4602      	mov	r2, r0
 800296e:	492c      	ldr	r1, [pc, #176]	@ (8002a20 <getFileInfo+0x144>)
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								token = strtok(NULL, ";");
 8002976:	4929      	ldr	r1, [pc, #164]	@ (8002a1c <getFileInfo+0x140>)
 8002978:	2000      	movs	r0, #0
 800297a:	f009 f8af 	bl	800badc <strtok>
 800297e:	62b8      	str	r0, [r7, #40]	@ 0x28
								index++;
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	3301      	adds	r3, #1
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
						while (token != NULL) {
 8002986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ec      	bne.n	8002966 <getFileInfo+0x8a>
						}
						f_close(&fil);
 800298c:	481f      	ldr	r0, [pc, #124]	@ (8002a0c <getFileInfo+0x130>)
 800298e:	f007 fc6d 	bl	800a26c <f_close>

						drawerInst.row = array[0];
 8002992:	4b23      	ldr	r3, [pc, #140]	@ (8002a20 <getFileInfo+0x144>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	81bb      	strh	r3, [r7, #12]
						drawerInst.drawer = array[1];
 800299a:	4b21      	ldr	r3, [pc, #132]	@ (8002a20 <getFileInfo+0x144>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	81fb      	strh	r3, [r7, #14]
						drawerInst.calFactor = array[2];
 80029a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a20 <getFileInfo+0x144>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	edc7 7a04 	vstr	s15, [r7, #16]
						drawerInst.Tare = array[3];
 80029b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <getFileInfo+0x144>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	617b      	str	r3, [r7, #20]
						drawerInst.thresh = array[4];
 80029b8:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <getFileInfo+0x144>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	ee07 3a90 	vmov	s15, r3
 80029c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c4:	edc7 7a06 	vstr	s15, [r7, #24]

						return drawerInst;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	461c      	mov	r4, r3
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029d6:	e012      	b.n	80029fe <getFileInfo+0x122>
				}
				fileIndex++;
 80029d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80029da:	3301      	adds	r3, #1
 80029dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		}while(rres != 0);
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ad      	bne.n	8002940 <getFileInfo+0x64>
	}

	f_close(&fil);
 80029e4:	4809      	ldr	r0, [pc, #36]	@ (8002a0c <getFileInfo+0x130>)
 80029e6:	f007 fc41 	bl	800a26c <f_close>
	printf("An error occurred during info extraction.");
 80029ea:	480e      	ldr	r0, [pc, #56]	@ (8002a24 <getFileInfo+0x148>)
 80029ec:	f008 ff10 	bl	800b810 <iprintf>
	return drawerInst;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	461c      	mov	r4, r3
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	3734      	adds	r7, #52	@ 0x34
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2000000c 	.word	0x2000000c
 8002a0c:	2000044c 	.word	0x2000044c
 8002a10:	200008ac 	.word	0x200008ac
 8002a14:	0800f78c 	.word	0x0800f78c
 8002a18:	200008b0 	.word	0x200008b0
 8002a1c:	0800f680 	.word	0x0800f680
 8002a20:	20000cb4 	.word	0x20000cb4
 8002a24:	0800f7b0 	.word	0x0800f7b0

08002a28 <_write>:
#else
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

//Code to enable printf statements
int _write(int file, char *data, int len) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY); // Replace &huart2 with your UART instance
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	4804      	ldr	r0, [pc, #16]	@ (8002a50 <_write+0x28>)
 8002a40:	f003 ff8a 	bl	8006958 <HAL_UART_Transmit>
    return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000ed4 	.word	0x20000ed4

08002a54 <__io_getchar>:

//Code to enable scanf statements
GETCHAR_PROTOTYPE
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <__io_getchar+0x48>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <__io_getchar+0x48>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002a74:	1df9      	adds	r1, r7, #7
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4807      	ldr	r0, [pc, #28]	@ (8002a9c <__io_getchar+0x48>)
 8002a7e:	f003 fff6 	bl	8006a6e <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002a82:	1df9      	adds	r1, r7, #7
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4804      	ldr	r0, [pc, #16]	@ (8002a9c <__io_getchar+0x48>)
 8002a8c:	f003 ff64 	bl	8006958 <HAL_UART_Transmit>
  return ch;
 8002a90:	79fb      	ldrb	r3, [r7, #7]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000ed4 	.word	0x20000ed4

08002aa0 <HAL_GPIO_EXTI_Callback>:
unsigned int released_time; // Timestamp of the button released

int num_button = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
	// D7
	if (GPIO_Pin == RESET_BTN_Pin) {
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d13a      	bne.n	8002b26 <HAL_GPIO_EXTI_Callback+0x86>
		printf("Reset button Pressed");
 8002ab0:	4842      	ldr	r0, [pc, #264]	@ (8002bbc <HAL_GPIO_EXTI_Callback+0x11c>)
 8002ab2:	f008 fead 	bl	800b810 <iprintf>
		num_button = 1;
 8002ab6:	4b42      	ldr	r3, [pc, #264]	@ (8002bc0 <HAL_GPIO_EXTI_Callback+0x120>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
		if 	(timer_active == 0){
 8002abc:	4b41      	ldr	r3, [pc, #260]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d177      	bne.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
			if(HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin) == GPIO_PIN_SET && i == 0){
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	4840      	ldr	r0, [pc, #256]	@ (8002bc8 <HAL_GPIO_EXTI_Callback+0x128>)
 8002ac8:	f001 fea4 	bl	8004814 <HAL_GPIO_ReadPin>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d10c      	bne.n	8002aec <HAL_GPIO_EXTI_Callback+0x4c>
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bcc <HAL_GPIO_EXTI_Callback+0x12c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d108      	bne.n	8002aec <HAL_GPIO_EXTI_Callback+0x4c>
					i = 1; // states the button already been pressed to ignore interrupts
 8002ada:	4b3c      	ldr	r3, [pc, #240]	@ (8002bcc <HAL_GPIO_EXTI_Callback+0x12c>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
					//printf("%d i\n\r", i);
					time_start = HAL_GetTick(); // reads when button is pressed
 8002ae0:	f001 f852 	bl	8003b88 <HAL_GetTick>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8002bd0 <HAL_GPIO_EXTI_Callback+0x130>)
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e063      	b.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
				}

				else if (HAL_GPIO_ReadPin(RESET_BTN_GPIO_Port, RESET_BTN_Pin) == GPIO_PIN_RESET && j == 0){
 8002aec:	2102      	movs	r1, #2
 8002aee:	4836      	ldr	r0, [pc, #216]	@ (8002bc8 <HAL_GPIO_EXTI_Callback+0x128>)
 8002af0:	f001 fe90 	bl	8004814 <HAL_GPIO_ReadPin>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d15c      	bne.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
 8002afa:	4b36      	ldr	r3, [pc, #216]	@ (8002bd4 <HAL_GPIO_EXTI_Callback+0x134>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d158      	bne.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
					j = 1;
 8002b02:	4b34      	ldr	r3, [pc, #208]	@ (8002bd4 <HAL_GPIO_EXTI_Callback+0x134>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
					count = 1;
 8002b08:	4b33      	ldr	r3, [pc, #204]	@ (8002bd8 <HAL_GPIO_EXTI_Callback+0x138>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
					/*printf("%d j\n\r", j);*/
					released_time = HAL_GetTick();// reads when button is released
 8002b0e:	f001 f83b 	bl	8003b88 <HAL_GetTick>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4a31      	ldr	r2, [pc, #196]	@ (8002bdc <HAL_GPIO_EXTI_Callback+0x13c>)
 8002b16:	6013      	str	r3, [r2, #0]
					HAL_TIM_Base_Start_IT(&htim3);
 8002b18:	4831      	ldr	r0, [pc, #196]	@ (8002be0 <HAL_GPIO_EXTI_Callback+0x140>)
 8002b1a:	f003 fa79 	bl	8006010 <HAL_TIM_Base_Start_IT>
					timer_active = 1; // timer has active so button sequence is paused
 8002b1e:	4b29      	ldr	r3, [pc, #164]	@ (8002bc4 <HAL_GPIO_EXTI_Callback+0x124>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
						num_button = 2;
					}
				}
			}

}
 8002b24:	e046      	b.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
		else if (GPIO_Pin == CONFIRM_BTN_Pin){
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d143      	bne.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
			printf("Confirm button Pressed");
 8002b2c:	482d      	ldr	r0, [pc, #180]	@ (8002be4 <HAL_GPIO_EXTI_Callback+0x144>)
 8002b2e:	f008 fe6f 	bl	800b810 <iprintf>
			num_button = 2;
 8002b32:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <HAL_GPIO_EXTI_Callback+0x120>)
 8002b34:	2202      	movs	r2, #2
 8002b36:	601a      	str	r2, [r3, #0]
			if(count != 2){
 8002b38:	4b27      	ldr	r3, [pc, #156]	@ (8002bd8 <HAL_GPIO_EXTI_Callback+0x138>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d039      	beq.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
				if ( count == 0){
 8002b40:	4b25      	ldr	r3, [pc, #148]	@ (8002bd8 <HAL_GPIO_EXTI_Callback+0x138>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <HAL_GPIO_EXTI_Callback+0xae>
				HAL_TIM_Base_Start_IT(&htim3);
 8002b48:	4825      	ldr	r0, [pc, #148]	@ (8002be0 <HAL_GPIO_EXTI_Callback+0x140>)
 8002b4a:	f003 fa61 	bl	8006010 <HAL_TIM_Base_Start_IT>
					if(HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin) == GPIO_PIN_SET && i == 0){
 8002b4e:	2104      	movs	r1, #4
 8002b50:	481d      	ldr	r0, [pc, #116]	@ (8002bc8 <HAL_GPIO_EXTI_Callback+0x128>)
 8002b52:	f001 fe5f 	bl	8004814 <HAL_GPIO_ReadPin>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10c      	bne.n	8002b76 <HAL_GPIO_EXTI_Callback+0xd6>
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <HAL_GPIO_EXTI_Callback+0x12c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d108      	bne.n	8002b76 <HAL_GPIO_EXTI_Callback+0xd6>
						i = 1;
 8002b64:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <HAL_GPIO_EXTI_Callback+0x12c>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
						time_start = HAL_GetTick(); // reads when button is pressed
 8002b6a:	f001 f80d 	bl	8003b88 <HAL_GetTick>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <HAL_GPIO_EXTI_Callback+0x130>)
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e01e      	b.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
					else if(HAL_GPIO_ReadPin(CONFIRM_BTN_GPIO_Port, CONFIRM_BTN_Pin) == GPIO_PIN_RESET && j == 0) {
 8002b76:	2104      	movs	r1, #4
 8002b78:	4813      	ldr	r0, [pc, #76]	@ (8002bc8 <HAL_GPIO_EXTI_Callback+0x128>)
 8002b7a:	f001 fe4b 	bl	8004814 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d117      	bne.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
 8002b84:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <HAL_GPIO_EXTI_Callback+0x134>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d113      	bne.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
						j = 1;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <HAL_GPIO_EXTI_Callback+0x134>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
						count++;
 8002b92:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_GPIO_EXTI_Callback+0x138>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd8 <HAL_GPIO_EXTI_Callback+0x138>)
 8002b9a:	6013      	str	r3, [r2, #0]
						released_time = HAL_GetTick();// reads when button is released
 8002b9c:	f000 fff4 	bl	8003b88 <HAL_GetTick>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8002bdc <HAL_GPIO_EXTI_Callback+0x13c>)
 8002ba4:	6013      	str	r3, [r2, #0]
						HAL_TIM_Base_Start_IT(&htim4);// timer used to reset i and j values & handle debounce
 8002ba6:	4810      	ldr	r0, [pc, #64]	@ (8002be8 <HAL_GPIO_EXTI_Callback+0x148>)
 8002ba8:	f003 fa32 	bl	8006010 <HAL_TIM_Base_Start_IT>
						num_button = 2;
 8002bac:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <HAL_GPIO_EXTI_Callback+0x120>)
 8002bae:	2202      	movs	r2, #2
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	e7ff      	b.n	8002bb4 <HAL_GPIO_EXTI_Callback+0x114>
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	0800f7dc 	.word	0x0800f7dc
 8002bc0:	20000ce4 	.word	0x20000ce4
 8002bc4:	20000cd8 	.word	0x20000cd8
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	20000ccc 	.word	0x20000ccc
 8002bd0:	20000cdc 	.word	0x20000cdc
 8002bd4:	20000cd0 	.word	0x20000cd0
 8002bd8:	20000cd4 	.word	0x20000cd4
 8002bdc:	20000ce0 	.word	0x20000ce0
 8002be0:	20000e44 	.word	0x20000e44
 8002be4:	0800f7f4 	.word	0x0800f7f4
 8002be8:	20000e8c 	.word	0x20000e8c

08002bec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	// executes once the time runs out
	if(htim -> Instance == TIM3){
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	@ (8002c98 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d133      	bne.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x7a>
		if ( count == 1){
 8002bfe:	4b27      	ldr	r3, [pc, #156]	@ (8002c9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d118      	bne.n	8002c38 <HAL_TIM_PeriodElapsedCallback+0x4c>
			// short press
			if (released_time - time_start <= 900){
 8002c06:	4b26      	ldr	r3, [pc, #152]	@ (8002ca0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8002c14:	d803      	bhi.n	8002c1e <HAL_TIM_PeriodElapsedCallback+0x32>
				button_press = press_short;
 8002c16:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e013      	b.n	8002c46 <HAL_TIM_PeriodElapsedCallback+0x5a>
			}
			// long press
			else if (released_time - time_start >= 1100){
 8002c1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f240 424b 	movw	r2, #1099	@ 0x44b
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d90a      	bls.n	8002c46 <HAL_TIM_PeriodElapsedCallback+0x5a>
				button_press = press_long;
 8002c30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002c32:	2203      	movs	r2, #3
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e006      	b.n	8002c46 <HAL_TIM_PeriodElapsedCallback+0x5a>
			}
		}
		// double press
		else if ( count == 2){
 8002c38:	4b18      	ldr	r3, [pc, #96]	@ (8002c9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d102      	bne.n	8002c46 <HAL_TIM_PeriodElapsedCallback+0x5a>
			button_press = press_double;
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]
		}

		HAL_TIM_Base_Stop_IT(&htim3); // stops timer interrupt
 8002c46:	4819      	ldr	r0, [pc, #100]	@ (8002cac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002c48:	f003 fa52 	bl	80060f0 <HAL_TIM_Base_Stop_IT>
		//resets flags & press count
		i = 0;
 8002c4c:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
		timer_active = 0;
 8002c52:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
		j = 0;
 8002c58:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
		count = 0;
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
			// resets flags
			i = 0;
			j = 0;
		}

}
 8002c64:	e013      	b.n	8002c8e <HAL_TIM_PeriodElapsedCallback+0xa2>
		else if (htim -> Instance == TIM4){
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10e      	bne.n	8002c8e <HAL_TIM_PeriodElapsedCallback+0xa2>
			printf("%d\n\r",count);
 8002c70:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	4812      	ldr	r0, [pc, #72]	@ (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002c78:	f008 fdca 	bl	800b810 <iprintf>
			HAL_TIM_Base_Stop_IT(&htim4); // stops timer interrupt
 8002c7c:	4811      	ldr	r0, [pc, #68]	@ (8002cc4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002c7e:	f003 fa37 	bl	80060f0 <HAL_TIM_Base_Stop_IT>
			i = 0;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
			j = 0;
 8002c88:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	20000cd4 	.word	0x20000cd4
 8002ca0:	20000ce0 	.word	0x20000ce0
 8002ca4:	20000cdc 	.word	0x20000cdc
 8002ca8:	20000cc8 	.word	0x20000cc8
 8002cac:	20000e44 	.word	0x20000e44
 8002cb0:	20000ccc 	.word	0x20000ccc
 8002cb4:	20000cd8 	.word	0x20000cd8
 8002cb8:	20000cd0 	.word	0x20000cd0
 8002cbc:	40000800 	.word	0x40000800
 8002cc0:	0800f80c 	.word	0x0800f80c
 8002cc4:	20000e8c 	.word	0x20000e8c

08002cc8 <button_output>:

void button_output(int button_num){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	  while (true){
		  // checks if user presses the correct button
		  if(num_button != 0){
 8002cd0:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <button_output+0xb0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0fb      	beq.n	8002cd0 <button_output+0x8>
			 if (button_num == num_button){
 8002cd8:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <button_output+0xb0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d135      	bne.n	8002d4e <button_output+0x86>
// different button states
			  if (button_press == press_short){
 8002ce2:	4b26      	ldr	r3, [pc, #152]	@ (8002d7c <button_output+0xb4>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d10c      	bne.n	8002d06 <button_output+0x3e>
				  printf("short %d\n\r",i);
 8002cec:	4b24      	ldr	r3, [pc, #144]	@ (8002d80 <button_output+0xb8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4824      	ldr	r0, [pc, #144]	@ (8002d84 <button_output+0xbc>)
 8002cf4:	f008 fd8c 	bl	800b810 <iprintf>
				  num_button = 0;
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d78 <button_output+0xb0>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
				  button_press = press_none;
 8002cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <button_output+0xb4>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
				  break;
 8002d04:	e034      	b.n	8002d70 <button_output+0xa8>
			  }
				else if (button_press == press_long){
 8002d06:	4b1d      	ldr	r3, [pc, #116]	@ (8002d7c <button_output+0xb4>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d10c      	bne.n	8002d2a <button_output+0x62>
						  printf("long %d\n\r",i);
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <button_output+0xb8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	481c      	ldr	r0, [pc, #112]	@ (8002d88 <button_output+0xc0>)
 8002d18:	f008 fd7a 	bl	800b810 <iprintf>
						  num_button = 0;
 8002d1c:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <button_output+0xb0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
						  button_press = press_none;
 8002d22:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <button_output+0xb4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
						  break;
 8002d28:	e022      	b.n	8002d70 <button_output+0xa8>
					  }

				else if (button_press == press_double) {
 8002d2a:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <button_output+0xb4>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d1cd      	bne.n	8002cd0 <button_output+0x8>
						printf("double %d\n\r",i);
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <button_output+0xb8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4814      	ldr	r0, [pc, #80]	@ (8002d8c <button_output+0xc4>)
 8002d3c:	f008 fd68 	bl	800b810 <iprintf>
						num_button = 0;
 8002d40:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <button_output+0xb0>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
						button_press = press_none;
 8002d46:	4b0d      	ldr	r3, [pc, #52]	@ (8002d7c <button_output+0xb4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
						break;
 8002d4c:	e010      	b.n	8002d70 <button_output+0xa8>
				}
		  }
			 // displays if user presses wrong button
			 else {
				 printf("Wrong Button, Please Wait Three Seconds To Try Again \n\r");
 8002d4e:	4810      	ldr	r0, [pc, #64]	@ (8002d90 <button_output+0xc8>)
 8002d50:	f008 fd5e 	bl	800b810 <iprintf>
				 HAL_Delay(500);
 8002d54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d58:	f000 ff22 	bl	8003ba0 <HAL_Delay>
				 num_button = 0;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <button_output+0xb0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
				 count = 0;
 8002d62:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <button_output+0xcc>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
				 button_press = press_none;
 8002d68:	4b04      	ldr	r3, [pc, #16]	@ (8002d7c <button_output+0xb4>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
		  if(num_button != 0){
 8002d6e:	e7af      	b.n	8002cd0 <button_output+0x8>
			 }
		}
	}
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000ce4 	.word	0x20000ce4
 8002d7c:	20000cc8 	.word	0x20000cc8
 8002d80:	20000ccc 	.word	0x20000ccc
 8002d84:	0800f814 	.word	0x0800f814
 8002d88:	0800f820 	.word	0x0800f820
 8002d8c:	0800f82c 	.word	0x0800f82c
 8002d90:	0800f838 	.word	0x0800f838
 8002d94:	20000cd4 	.word	0x20000cd4

08002d98 <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	80fb      	strh	r3, [r7, #6]
 8002daa:	4603      	mov	r3, r0
 8002dac:	80bb      	strh	r3, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	807b      	strh	r3, [r7, #2]
 8002db2:	4613      	mov	r3, r2
 8002db4:	707b      	strb	r3, [r7, #1]
  if(control){
 8002db6:	787b      	ldrb	r3, [r7, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <muxSET+0x50>
    HAL_GPIO_WritePin(MAST_A_GPIO_Port, MAST_A_Pin, A);
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4815      	ldr	r0, [pc, #84]	@ (8002e1c <muxSET+0x84>)
 8002dc6:	f001 fd3d 	bl	8004844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_B_GPIO_Port, MAST_B_Pin, B);
 8002dca:	88bb      	ldrh	r3, [r7, #4]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	4812      	ldr	r0, [pc, #72]	@ (8002e1c <muxSET+0x84>)
 8002dd4:	f001 fd36 	bl	8004844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_C_GPIO_Port, MAST_C_Pin, C);
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2110      	movs	r1, #16
 8002de0:	480e      	ldr	r0, [pc, #56]	@ (8002e1c <muxSET+0x84>)
 8002de2:	f001 fd2f 	bl	8004844 <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
  }
}
 8002de6:	e014      	b.n	8002e12 <muxSET+0x7a>
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	2101      	movs	r1, #1
 8002df0:	480b      	ldr	r0, [pc, #44]	@ (8002e20 <muxSET+0x88>)
 8002df2:	f001 fd27 	bl	8004844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
 8002df6:	88bb      	ldrh	r3, [r7, #4]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4809      	ldr	r0, [pc, #36]	@ (8002e24 <muxSET+0x8c>)
 8002e00:	f001 fd20 	bl	8004844 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4805      	ldr	r0, [pc, #20]	@ (8002e24 <muxSET+0x8c>)
 8002e0e:	f001 fd19 	bl	8004844 <HAL_GPIO_WritePin>
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd90      	pop	{r4, r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	40020400 	.word	0x40020400
 8002e24:	40020800 	.word	0x40020800

08002e28 <setRelay>:
#include <manager_io.h>
#include <manager_mux.h>
#include <manager_weight.h>


void setRelay(uint8_t rowNum){
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]

	switch (rowNum){
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d86e      	bhi.n	8002f18 <setRelay+0xf0>
 8002e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e40 <setRelay+0x18>)
 8002e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e40:	08002e51 	.word	0x08002e51
 8002e44:	08002e83 	.word	0x08002e83
 8002e48:	08002eb5 	.word	0x08002eb5
 8002e4c:	08002ee7 	.word	0x08002ee7
		case 1:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 1);
 8002e50:	2201      	movs	r2, #1
 8002e52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e56:	4832      	ldr	r0, [pc, #200]	@ (8002f20 <setRelay+0xf8>)
 8002e58:	f001 fcf4 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e62:	482f      	ldr	r0, [pc, #188]	@ (8002f20 <setRelay+0xf8>)
 8002e64:	f001 fcee 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e6e:	482c      	ldr	r0, [pc, #176]	@ (8002f20 <setRelay+0xf8>)
 8002e70:	f001 fce8 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002e74:	2200      	movs	r2, #0
 8002e76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e7a:	482a      	ldr	r0, [pc, #168]	@ (8002f24 <setRelay+0xfc>)
 8002e7c:	f001 fce2 	bl	8004844 <HAL_GPIO_WritePin>
			break;
 8002e80:	e04b      	b.n	8002f1a <setRelay+0xf2>

		case 2:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e88:	4825      	ldr	r0, [pc, #148]	@ (8002f20 <setRelay+0xf8>)
 8002e8a:	f001 fcdb 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 1);
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e94:	4822      	ldr	r0, [pc, #136]	@ (8002f20 <setRelay+0xf8>)
 8002e96:	f001 fcd5 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ea0:	481f      	ldr	r0, [pc, #124]	@ (8002f20 <setRelay+0xf8>)
 8002ea2:	f001 fccf 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002eac:	481d      	ldr	r0, [pc, #116]	@ (8002f24 <setRelay+0xfc>)
 8002eae:	f001 fcc9 	bl	8004844 <HAL_GPIO_WritePin>
			break;
 8002eb2:	e032      	b.n	8002f1a <setRelay+0xf2>

		case 3:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002eba:	4819      	ldr	r0, [pc, #100]	@ (8002f20 <setRelay+0xf8>)
 8002ebc:	f001 fcc2 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ec6:	4816      	ldr	r0, [pc, #88]	@ (8002f20 <setRelay+0xf8>)
 8002ec8:	f001 fcbc 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 1);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ed2:	4813      	ldr	r0, [pc, #76]	@ (8002f20 <setRelay+0xf8>)
 8002ed4:	f001 fcb6 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ede:	4811      	ldr	r0, [pc, #68]	@ (8002f24 <setRelay+0xfc>)
 8002ee0:	f001 fcb0 	bl	8004844 <HAL_GPIO_WritePin>
			break;
 8002ee4:	e019      	b.n	8002f1a <setRelay+0xf2>

		case 4:
			HAL_GPIO_WritePin(REL_1_GPIO_Port, REL_1_Pin, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002eec:	480c      	ldr	r0, [pc, #48]	@ (8002f20 <setRelay+0xf8>)
 8002eee:	f001 fca9 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_2_GPIO_Port, REL_2_Pin, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ef8:	4809      	ldr	r0, [pc, #36]	@ (8002f20 <setRelay+0xf8>)
 8002efa:	f001 fca3 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_3_GPIO_Port, REL_3_Pin, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f04:	4806      	ldr	r0, [pc, #24]	@ (8002f20 <setRelay+0xf8>)
 8002f06:	f001 fc9d 	bl	8004844 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REL_4_GPIO_Port, REL_4_Pin, 1);
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f10:	4804      	ldr	r0, [pc, #16]	@ (8002f24 <setRelay+0xfc>)
 8002f12:	f001 fc97 	bl	8004844 <HAL_GPIO_WritePin>
			break;
 8002f16:	e000      	b.n	8002f1a <setRelay+0xf2>

		default:
			return;
 8002f18:	bf00      	nop
	}
}
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020400 	.word	0x40020400

08002f28 <microDelay>:
#include "gpio.h"
#include "tim.h"


void microDelay(uint16_t delay)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <microDelay+0x30>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8002f3a:	bf00      	nop
 8002f3c:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <microDelay+0x30>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d3f9      	bcc.n	8002f3c <microDelay+0x14>
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000dfc 	.word	0x20000dfc

08002f5c <getHX711>:

int32_t getHX711(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
  uint32_t data = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick();
 8002f66:	f000 fe0f 	bl	8003b88 <HAL_GetTick>
 8002f6a:	6078      	str	r0, [r7, #4]
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8002f6c:	e008      	b.n	8002f80 <getHX711+0x24>
  {
    if(HAL_GetTick() - startTime > 200)
 8002f6e:	f000 fe0b 	bl	8003b88 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f7a:	d901      	bls.n	8002f80 <getHX711+0x24>
      return 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e04b      	b.n	8003018 <getHX711+0xbc>
  while(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8002f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f84:	4826      	ldr	r0, [pc, #152]	@ (8003020 <getHX711+0xc4>)
 8002f86:	f001 fc45 	bl	8004814 <HAL_GPIO_ReadPin>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d0ee      	beq.n	8002f6e <getHX711+0x12>
  }
  for(int8_t len=0; len<24 ; len++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	72fb      	strb	r3, [r7, #11]
 8002f94:	e025      	b.n	8002fe2 <getHX711+0x86>
  {
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 8002f96:	2201      	movs	r2, #1
 8002f98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f9c:	4821      	ldr	r0, [pc, #132]	@ (8003024 <getHX711+0xc8>)
 8002f9e:	f001 fc51 	bl	8004844 <HAL_GPIO_WritePin>
    microDelay(1);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7ff ffc0 	bl	8002f28 <microDelay>
    data = data << 1;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002fb4:	481b      	ldr	r0, [pc, #108]	@ (8003024 <getHX711+0xc8>)
 8002fb6:	f001 fc45 	bl	8004844 <HAL_GPIO_WritePin>
    microDelay(1);
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f7ff ffb4 	bl	8002f28 <microDelay>
    if(HAL_GPIO_ReadPin(DAT_IN_GPIO_Port, DAT_IN_Pin) == GPIO_PIN_SET)
 8002fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fc4:	4816      	ldr	r0, [pc, #88]	@ (8003020 <getHX711+0xc4>)
 8002fc6:	f001 fc25 	bl	8004814 <HAL_GPIO_ReadPin>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d102      	bne.n	8002fd6 <getHX711+0x7a>
      data ++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
  for(int8_t len=0; len<24 ; len++)
 8002fd6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	72fb      	strb	r3, [r7, #11]
 8002fe2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002fe6:	2b17      	cmp	r3, #23
 8002fe8:	ddd5      	ble.n	8002f96 <getHX711+0x3a>
  }
  data = data ^ 0x800000;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8002ff0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_SET);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ff8:	480a      	ldr	r0, [pc, #40]	@ (8003024 <getHX711+0xc8>)
 8002ffa:	f001 fc23 	bl	8004844 <HAL_GPIO_WritePin>
  microDelay(1);
 8002ffe:	2001      	movs	r0, #1
 8003000:	f7ff ff92 	bl	8002f28 <microDelay>
  HAL_GPIO_WritePin(SCK_DRW_GPIO_Port, SCK_DRW_Pin, GPIO_PIN_RESET);
 8003004:	2200      	movs	r2, #0
 8003006:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800300a:	4806      	ldr	r0, [pc, #24]	@ (8003024 <getHX711+0xc8>)
 800300c:	f001 fc1a 	bl	8004844 <HAL_GPIO_WritePin>
  microDelay(1);
 8003010:	2001      	movs	r0, #1
 8003012:	f7ff ff89 	bl	8002f28 <microDelay>
  return data;
 8003016:	68fb      	ldr	r3, [r7, #12]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400

08003028 <weigh>:

int weigh(uint32_t tare, float calFactor)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b088      	sub	sp, #32
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	ed87 0a00 	vstr	s0, [r7]
  int64_t  total = 0;
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  samples = 50;
 8003042:	2332      	movs	r3, #50	@ 0x32
 8003044:	613b      	str	r3, [r7, #16]

  int milligram = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  int32_t average = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 800304e:	2300      	movs	r3, #0
 8003050:	82fb      	strh	r3, [r7, #22]
 8003052:	e010      	b.n	8003076 <weigh+0x4e>
  {
      total += getHX711();
 8003054:	f7ff ff82 	bl	8002f5c <getHX711>
 8003058:	4603      	mov	r3, r0
 800305a:	17da      	asrs	r2, r3, #31
 800305c:	461c      	mov	r4, r3
 800305e:	4615      	mov	r5, r2
 8003060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003064:	eb12 0804 	adds.w	r8, r2, r4
 8003068:	eb43 0905 	adc.w	r9, r3, r5
 800306c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 8003070:	8afb      	ldrh	r3, [r7, #22]
 8003072:	3301      	adds	r3, #1
 8003074:	82fb      	strh	r3, [r7, #22]
 8003076:	8afb      	ldrh	r3, [r7, #22]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	429a      	cmp	r2, r3
 800307c:	dcea      	bgt.n	8003054 <weigh+0x2c>
  }
  average = (int32_t)(total / samples);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	17da      	asrs	r2, r3, #31
 8003082:	469a      	mov	sl, r3
 8003084:	4693      	mov	fp, r2
 8003086:	4652      	mov	r2, sl
 8003088:	465b      	mov	r3, fp
 800308a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800308e:	f7fd fe1b 	bl	8000cc8 <__aeabi_ldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4613      	mov	r3, r2
 8003098:	60bb      	str	r3, [r7, #8]
  milligram = (int)(average - tare)*calFactor;
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030a8:	edd7 7a00 	vldr	s15, [r7]
 80030ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030b4:	ee17 3a90 	vmov	r3, s15
 80030b8:	60fb      	str	r3, [r7, #12]
  return milligram;
 80030ba:	68fb      	ldr	r3, [r7, #12]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080030c6 <weighRaw>:

int32_t weighRaw()
{
 80030c6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
  int64_t  	total = 0;
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  int32_t  	samples = 50;
 80030da:	2332      	movs	r3, #50	@ 0x32
 80030dc:	60bb      	str	r3, [r7, #8]
  int32_t 	average = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]

  for(uint16_t i=0 ; i<samples ; i++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	81fb      	strh	r3, [r7, #14]
 80030e6:	e010      	b.n	800310a <weighRaw+0x44>
  {
      total += getHX711();
 80030e8:	f7ff ff38 	bl	8002f5c <getHX711>
 80030ec:	4603      	mov	r3, r0
 80030ee:	17da      	asrs	r2, r3, #31
 80030f0:	461c      	mov	r4, r3
 80030f2:	4615      	mov	r5, r2
 80030f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030f8:	eb12 0804 	adds.w	r8, r2, r4
 80030fc:	eb43 0905 	adc.w	r9, r3, r5
 8003100:	e9c7 8904 	strd	r8, r9, [r7, #16]
  for(uint16_t i=0 ; i<samples ; i++)
 8003104:	89fb      	ldrh	r3, [r7, #14]
 8003106:	3301      	adds	r3, #1
 8003108:	81fb      	strh	r3, [r7, #14]
 800310a:	89fb      	ldrh	r3, [r7, #14]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	dcea      	bgt.n	80030e8 <weighRaw+0x22>
  }
  average = (int32_t)(total / samples);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	17da      	asrs	r2, r3, #31
 8003116:	469a      	mov	sl, r3
 8003118:	4693      	mov	fp, r2
 800311a:	4652      	mov	r2, sl
 800311c:	465b      	mov	r3, fp
 800311e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003122:	f7fd fdd1 	bl	8000cc8 <__aeabi_ldivmod>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4613      	mov	r3, r2
 800312c:	607b      	str	r3, [r7, #4]
  return average;
 800312e:	687b      	ldr	r3, [r7, #4]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800313a <weighRawTare>:

int32_t weighRawTare(uint32_t tare)
{
 800313a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  int64_t  	total = 0;
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int32_t  	samples = 50;
 8003150:	2332      	movs	r3, #50	@ 0x32
 8003152:	613b      	str	r3, [r7, #16]
  int32_t 	average = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  int32_t 	avgTare = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]

  for(uint16_t i=0 ; i<samples ; i++)
 800315c:	2300      	movs	r3, #0
 800315e:	82fb      	strh	r3, [r7, #22]
 8003160:	e010      	b.n	8003184 <weighRawTare+0x4a>
  {
      total += getHX711();
 8003162:	f7ff fefb 	bl	8002f5c <getHX711>
 8003166:	4603      	mov	r3, r0
 8003168:	17da      	asrs	r2, r3, #31
 800316a:	461c      	mov	r4, r3
 800316c:	4615      	mov	r5, r2
 800316e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003172:	eb12 0804 	adds.w	r8, r2, r4
 8003176:	eb43 0905 	adc.w	r9, r3, r5
 800317a:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(uint16_t i=0 ; i<samples ; i++)
 800317e:	8afb      	ldrh	r3, [r7, #22]
 8003180:	3301      	adds	r3, #1
 8003182:	82fb      	strh	r3, [r7, #22]
 8003184:	8afb      	ldrh	r3, [r7, #22]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	dcea      	bgt.n	8003162 <weighRawTare+0x28>
  }
  average = (int32_t)(total / samples);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	17da      	asrs	r2, r3, #31
 8003190:	469a      	mov	sl, r3
 8003192:	4693      	mov	fp, r2
 8003194:	4652      	mov	r2, sl
 8003196:	465b      	mov	r3, fp
 8003198:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800319c:	f7fd fd94 	bl	8000cc8 <__aeabi_ldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4613      	mov	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  avgTare = average - tare;
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	60bb      	str	r3, [r7, #8]
  return avgTare;
 80031b0:	68bb      	ldr	r3, [r7, #8]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031bc:	0000      	movs	r0, r0
	...

080031c0 <getCalFactor>:

float getCalFactor(uint32_t knownHX711){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	float cal = 20000.0 / knownHX711;
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fd f9bb 	bl	8000544 <__aeabi_ui2d>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	a10b      	add	r1, pc, #44	@ (adr r1, 8003200 <getCalFactor+0x40>)
 80031d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031d8:	f7fd fb58 	bl	800088c <__aeabi_ddiv>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd fd20 	bl	8000c28 <__aeabi_d2f>
 80031e8:	4603      	mov	r3, r0
 80031ea:	60fb      	str	r3, [r7, #12]
	return cal;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	ee07 3a90 	vmov	s15, r3
}
 80031f2:	eeb0 0a67 	vmov.f32	s0, s15
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	f3af 8000 	nop.w
 8003200:	00000000 	.word	0x00000000
 8003204:	40d38800 	.word	0x40d38800

08003208 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800320c:	4b17      	ldr	r3, [pc, #92]	@ (800326c <MX_SPI1_Init+0x64>)
 800320e:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <MX_SPI1_Init+0x68>)
 8003210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003212:	4b16      	ldr	r3, [pc, #88]	@ (800326c <MX_SPI1_Init+0x64>)
 8003214:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800321a:	4b14      	ldr	r3, [pc, #80]	@ (800326c <MX_SPI1_Init+0x64>)
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003220:	4b12      	ldr	r3, [pc, #72]	@ (800326c <MX_SPI1_Init+0x64>)
 8003222:	2200      	movs	r2, #0
 8003224:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003226:	4b11      	ldr	r3, [pc, #68]	@ (800326c <MX_SPI1_Init+0x64>)
 8003228:	2200      	movs	r2, #0
 800322a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800322c:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <MX_SPI1_Init+0x64>)
 800322e:	2200      	movs	r2, #0
 8003230:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003232:	4b0e      	ldr	r3, [pc, #56]	@ (800326c <MX_SPI1_Init+0x64>)
 8003234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003238:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800323a:	4b0c      	ldr	r3, [pc, #48]	@ (800326c <MX_SPI1_Init+0x64>)
 800323c:	2200      	movs	r2, #0
 800323e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003240:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <MX_SPI1_Init+0x64>)
 8003242:	2200      	movs	r2, #0
 8003244:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <MX_SPI1_Init+0x64>)
 8003248:	2200      	movs	r2, #0
 800324a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800324c:	4b07      	ldr	r3, [pc, #28]	@ (800326c <MX_SPI1_Init+0x64>)
 800324e:	2200      	movs	r2, #0
 8003250:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003252:	4b06      	ldr	r3, [pc, #24]	@ (800326c <MX_SPI1_Init+0x64>)
 8003254:	220a      	movs	r2, #10
 8003256:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003258:	4804      	ldr	r0, [pc, #16]	@ (800326c <MX_SPI1_Init+0x64>)
 800325a:	f002 f887 	bl	800536c <HAL_SPI_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003264:	f7ff f912 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000ce8 	.word	0x20000ce8
 8003270:	40013000 	.word	0x40013000

08003274 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003278:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <MX_SPI2_Init+0x64>)
 800327a:	4a18      	ldr	r2, [pc, #96]	@ (80032dc <MX_SPI2_Init+0x68>)
 800327c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <MX_SPI2_Init+0x64>)
 8003280:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003284:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003286:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <MX_SPI2_Init+0x64>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800328c:	4b12      	ldr	r3, [pc, #72]	@ (80032d8 <MX_SPI2_Init+0x64>)
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003292:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <MX_SPI2_Init+0x64>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003298:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <MX_SPI2_Init+0x64>)
 800329a:	2200      	movs	r2, #0
 800329c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800329e:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <MX_SPI2_Init+0x64>)
 80032a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a6:	4b0c      	ldr	r3, [pc, #48]	@ (80032d8 <MX_SPI2_Init+0x64>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ac:	4b0a      	ldr	r3, [pc, #40]	@ (80032d8 <MX_SPI2_Init+0x64>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032b2:	4b09      	ldr	r3, [pc, #36]	@ (80032d8 <MX_SPI2_Init+0x64>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b8:	4b07      	ldr	r3, [pc, #28]	@ (80032d8 <MX_SPI2_Init+0x64>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80032be:	4b06      	ldr	r3, [pc, #24]	@ (80032d8 <MX_SPI2_Init+0x64>)
 80032c0:	220a      	movs	r2, #10
 80032c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032c4:	4804      	ldr	r0, [pc, #16]	@ (80032d8 <MX_SPI2_Init+0x64>)
 80032c6:	f002 f851 	bl	800536c <HAL_SPI_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80032d0:	f7ff f8dc 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000d40 	.word	0x20000d40
 80032dc:	40003800 	.word	0x40003800

080032e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	@ 0x30
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 031c 	add.w	r3, r7, #28
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a58      	ldr	r2, [pc, #352]	@ (8003460 <HAL_SPI_MspInit+0x180>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d12c      	bne.n	800335c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	4b57      	ldr	r3, [pc, #348]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	4a56      	ldr	r2, [pc, #344]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 800330c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003310:	6453      	str	r3, [r2, #68]	@ 0x44
 8003312:	4b54      	ldr	r3, [pc, #336]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	4b50      	ldr	r3, [pc, #320]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	4a4f      	ldr	r2, [pc, #316]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6313      	str	r3, [r2, #48]	@ 0x30
 800332e:	4b4d      	ldr	r3, [pc, #308]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800333a:	23e0      	movs	r3, #224	@ 0xe0
 800333c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800334a:	2305      	movs	r3, #5
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4619      	mov	r1, r3
 8003354:	4844      	ldr	r0, [pc, #272]	@ (8003468 <HAL_SPI_MspInit+0x188>)
 8003356:	f001 f8c9 	bl	80044ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800335a:	e07c      	b.n	8003456 <HAL_SPI_MspInit+0x176>
  else if(spiHandle->Instance==SPI2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a42      	ldr	r2, [pc, #264]	@ (800346c <HAL_SPI_MspInit+0x18c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d177      	bne.n	8003456 <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	4b3e      	ldr	r3, [pc, #248]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	4a3d      	ldr	r2, [pc, #244]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 8003370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003374:	6413      	str	r3, [r2, #64]	@ 0x40
 8003376:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	4b37      	ldr	r3, [pc, #220]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	4a36      	ldr	r2, [pc, #216]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6313      	str	r3, [r2, #48]	@ 0x30
 8003392:	4b34      	ldr	r3, [pc, #208]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	4b30      	ldr	r3, [pc, #192]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003464 <HAL_SPI_MspInit+0x184>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033ba:	2308      	movs	r3, #8
 80033bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c6:	2303      	movs	r3, #3
 80033c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033ca:	2305      	movs	r3, #5
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ce:	f107 031c 	add.w	r3, r7, #28
 80033d2:	4619      	mov	r1, r3
 80033d4:	4826      	ldr	r0, [pc, #152]	@ (8003470 <HAL_SPI_MspInit+0x190>)
 80033d6:	f001 f889 	bl	80044ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80033da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e8:	2303      	movs	r3, #3
 80033ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033ec:	2305      	movs	r3, #5
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f0:	f107 031c 	add.w	r3, r7, #28
 80033f4:	4619      	mov	r1, r3
 80033f6:	481f      	ldr	r0, [pc, #124]	@ (8003474 <HAL_SPI_MspInit+0x194>)
 80033f8:	f001 f878 	bl	80044ec <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80033fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 80033fe:	4a1f      	ldr	r2, [pc, #124]	@ (800347c <HAL_SPI_MspInit+0x19c>)
 8003400:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003402:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 8003404:	2200      	movs	r2, #0
 8003406:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003408:	4b1b      	ldr	r3, [pc, #108]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 800340a:	2240      	movs	r2, #64	@ 0x40
 800340c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800340e:	4b1a      	ldr	r3, [pc, #104]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 8003410:	2200      	movs	r2, #0
 8003412:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003414:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 8003416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800341a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800341c:	4b16      	ldr	r3, [pc, #88]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 800341e:	2200      	movs	r2, #0
 8003420:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003422:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003428:	4b13      	ldr	r3, [pc, #76]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800342e:	4b12      	ldr	r3, [pc, #72]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 8003430:	2200      	movs	r2, #0
 8003432:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003434:	4b10      	ldr	r3, [pc, #64]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 8003436:	2200      	movs	r2, #0
 8003438:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800343a:	480f      	ldr	r0, [pc, #60]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 800343c:	f000 fce6 	bl	8003e0c <HAL_DMA_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 8003446:	f7ff f821 	bl	800248c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a0a      	ldr	r2, [pc, #40]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 800344e:	649a      	str	r2, [r3, #72]	@ 0x48
 8003450:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_SPI_MspInit+0x198>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003456:	bf00      	nop
 8003458:	3730      	adds	r7, #48	@ 0x30
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40013000 	.word	0x40013000
 8003464:	40023800 	.word	0x40023800
 8003468:	40020000 	.word	0x40020000
 800346c:	40003800 	.word	0x40003800
 8003470:	40020800 	.word	0x40020800
 8003474:	40020400 	.word	0x40020400
 8003478:	20000d98 	.word	0x20000d98
 800347c:	40026070 	.word	0x40026070

08003480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <HAL_MspInit+0x4c>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	4a0f      	ldr	r2, [pc, #60]	@ (80034cc <HAL_MspInit+0x4c>)
 8003490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003494:	6453      	str	r3, [r2, #68]	@ 0x44
 8003496:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <HAL_MspInit+0x4c>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <HAL_MspInit+0x4c>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	4a08      	ldr	r2, [pc, #32]	@ (80034cc <HAL_MspInit+0x4c>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <HAL_MspInit+0x4c>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800

080034d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <NMI_Handler+0x4>

080034d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <HardFault_Handler+0x4>

080034e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <MemManage_Handler+0x4>

080034e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <BusFault_Handler+0x4>

080034f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f4:	bf00      	nop
 80034f6:	e7fd      	b.n	80034f4 <UsageFault_Handler+0x4>

080034f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003526:	f000 fb1b 	bl	8003b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}

0800352e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_BTN_Pin);
 8003532:	2002      	movs	r0, #2
 8003534:	f001 f9a0 	bl	8004878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}

0800353c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CONFIRM_BTN_Pin);
 8003540:	2004      	movs	r0, #4
 8003542:	f001 f999 	bl	8004878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003550:	4802      	ldr	r0, [pc, #8]	@ (800355c <DMA1_Stream4_IRQHandler+0x10>)
 8003552:	f000 fd61 	bl	8004018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000d98 	.word	0x20000d98

08003560 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003564:	4802      	ldr	r0, [pc, #8]	@ (8003570 <TIM3_IRQHandler+0x10>)
 8003566:	f002 fdf2 	bl	800614e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000e44 	.word	0x20000e44

08003574 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003578:	4802      	ldr	r0, [pc, #8]	@ (8003584 <TIM4_IRQHandler+0x10>)
 800357a:	f002 fde8 	bl	800614e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000e8c 	.word	0x20000e8c

08003588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return 1;
 800358c:	2301      	movs	r3, #1
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <_kill>:

int _kill(int pid, int sig)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035a2:	f008 fb41 	bl	800bc28 <__errno>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2216      	movs	r2, #22
 80035aa:	601a      	str	r2, [r3, #0]
  return -1;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_exit>:

void _exit (int status)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ffe7 	bl	8003598 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035ca:	bf00      	nop
 80035cc:	e7fd      	b.n	80035ca <_exit+0x12>

080035ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e00a      	b.n	80035f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035e0:	f7ff fa38 	bl	8002a54 <__io_getchar>
 80035e4:	4601      	mov	r1, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	60ba      	str	r2, [r7, #8]
 80035ec:	b2ca      	uxtb	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3301      	adds	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	dbf0      	blt.n	80035e0 <_read+0x12>
  }

  return len;
 80035fe:	687b      	ldr	r3, [r7, #4]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003630:	605a      	str	r2, [r3, #4]
  return 0;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <_isatty>:

int _isatty(int file)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003648:	2301      	movs	r3, #1
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003678:	4a14      	ldr	r2, [pc, #80]	@ (80036cc <_sbrk+0x5c>)
 800367a:	4b15      	ldr	r3, [pc, #84]	@ (80036d0 <_sbrk+0x60>)
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003684:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <_sbrk+0x64>)
 800368e:	4a12      	ldr	r2, [pc, #72]	@ (80036d8 <_sbrk+0x68>)
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003692:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <_sbrk+0x64>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	429a      	cmp	r2, r3
 800369e:	d207      	bcs.n	80036b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a0:	f008 fac2 	bl	800bc28 <__errno>
 80036a4:	4603      	mov	r3, r0
 80036a6:	220c      	movs	r2, #12
 80036a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	e009      	b.n	80036c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <_sbrk+0x64>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036b6:	4b07      	ldr	r3, [pc, #28]	@ (80036d4 <_sbrk+0x64>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	4a05      	ldr	r2, [pc, #20]	@ (80036d4 <_sbrk+0x64>)
 80036c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20020000 	.word	0x20020000
 80036d0:	00000400 	.word	0x00000400
 80036d4:	20000df8 	.word	0x20000df8
 80036d8:	200010b8 	.word	0x200010b8

080036dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e0:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <SystemInit+0x20>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e6:	4a05      	ldr	r2, [pc, #20]	@ (80036fc <SystemInit+0x20>)
 80036e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003706:	f107 0308 	add.w	r3, r7, #8
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003714:	463b      	mov	r3, r7
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800371c:	4b1d      	ldr	r3, [pc, #116]	@ (8003794 <MX_TIM2_Init+0x94>)
 800371e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8003724:	4b1b      	ldr	r3, [pc, #108]	@ (8003794 <MX_TIM2_Init+0x94>)
 8003726:	2207      	movs	r2, #7
 8003728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372a:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <MX_TIM2_Init+0x94>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003730:	4b18      	ldr	r3, [pc, #96]	@ (8003794 <MX_TIM2_Init+0x94>)
 8003732:	f04f 32ff 	mov.w	r2, #4294967295
 8003736:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003738:	4b16      	ldr	r3, [pc, #88]	@ (8003794 <MX_TIM2_Init+0x94>)
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800373e:	4b15      	ldr	r3, [pc, #84]	@ (8003794 <MX_TIM2_Init+0x94>)
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003744:	4813      	ldr	r0, [pc, #76]	@ (8003794 <MX_TIM2_Init+0x94>)
 8003746:	f002 fbab 	bl	8005ea0 <HAL_TIM_Base_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003750:	f7fe fe9c 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003758:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800375a:	f107 0308 	add.w	r3, r7, #8
 800375e:	4619      	mov	r1, r3
 8003760:	480c      	ldr	r0, [pc, #48]	@ (8003794 <MX_TIM2_Init+0x94>)
 8003762:	f002 fde4 	bl	800632e <HAL_TIM_ConfigClockSource>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800376c:	f7fe fe8e 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003770:	2300      	movs	r3, #0
 8003772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003774:	2300      	movs	r3, #0
 8003776:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003778:	463b      	mov	r3, r7
 800377a:	4619      	mov	r1, r3
 800377c:	4805      	ldr	r0, [pc, #20]	@ (8003794 <MX_TIM2_Init+0x94>)
 800377e:	f003 f80b 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003788:	f7fe fe80 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800378c:	bf00      	nop
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000dfc 	.word	0x20000dfc

08003798 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800379e:	f107 0308 	add.w	r3, r7, #8
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ac:	463b      	mov	r3, r7
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037b4:	4b1d      	ldr	r3, [pc, #116]	@ (800382c <MX_TIM3_Init+0x94>)
 80037b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003830 <MX_TIM3_Init+0x98>)
 80037b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400 - 1;
 80037ba:	4b1c      	ldr	r3, [pc, #112]	@ (800382c <MX_TIM3_Init+0x94>)
 80037bc:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80037c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c2:	4b1a      	ldr	r3, [pc, #104]	@ (800382c <MX_TIM3_Init+0x94>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19000 - 1;
 80037c8:	4b18      	ldr	r3, [pc, #96]	@ (800382c <MX_TIM3_Init+0x94>)
 80037ca:	f644 2237 	movw	r2, #18999	@ 0x4a37
 80037ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d0:	4b16      	ldr	r3, [pc, #88]	@ (800382c <MX_TIM3_Init+0x94>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d6:	4b15      	ldr	r3, [pc, #84]	@ (800382c <MX_TIM3_Init+0x94>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037dc:	4813      	ldr	r0, [pc, #76]	@ (800382c <MX_TIM3_Init+0x94>)
 80037de:	f002 fb5f 	bl	8005ea0 <HAL_TIM_Base_Init>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80037e8:	f7fe fe50 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	4619      	mov	r1, r3
 80037f8:	480c      	ldr	r0, [pc, #48]	@ (800382c <MX_TIM3_Init+0x94>)
 80037fa:	f002 fd98 	bl	800632e <HAL_TIM_ConfigClockSource>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003804:	f7fe fe42 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380c:	2300      	movs	r3, #0
 800380e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003810:	463b      	mov	r3, r7
 8003812:	4619      	mov	r1, r3
 8003814:	4805      	ldr	r0, [pc, #20]	@ (800382c <MX_TIM3_Init+0x94>)
 8003816:	f002 ffbf 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003820:	f7fe fe34 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003824:	bf00      	nop
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000e44 	.word	0x20000e44
 8003830:	40000400 	.word	0x40000400

08003834 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383a:	f107 0308 	add.w	r3, r7, #8
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	609a      	str	r2, [r3, #8]
 8003846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003848:	463b      	mov	r3, r7
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003850:	4b1d      	ldr	r3, [pc, #116]	@ (80038c8 <MX_TIM4_Init+0x94>)
 8003852:	4a1e      	ldr	r2, [pc, #120]	@ (80038cc <MX_TIM4_Init+0x98>)
 8003854:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6400 - 1;
 8003856:	4b1c      	ldr	r3, [pc, #112]	@ (80038c8 <MX_TIM4_Init+0x94>)
 8003858:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 800385c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385e:	4b1a      	ldr	r3, [pc, #104]	@ (80038c8 <MX_TIM4_Init+0x94>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1135 - 1;
 8003864:	4b18      	ldr	r3, [pc, #96]	@ (80038c8 <MX_TIM4_Init+0x94>)
 8003866:	f240 426e 	movw	r2, #1134	@ 0x46e
 800386a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800386c:	4b16      	ldr	r3, [pc, #88]	@ (80038c8 <MX_TIM4_Init+0x94>)
 800386e:	2200      	movs	r2, #0
 8003870:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003872:	4b15      	ldr	r3, [pc, #84]	@ (80038c8 <MX_TIM4_Init+0x94>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003878:	4813      	ldr	r0, [pc, #76]	@ (80038c8 <MX_TIM4_Init+0x94>)
 800387a:	f002 fb11 	bl	8005ea0 <HAL_TIM_Base_Init>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003884:	f7fe fe02 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800388c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	4619      	mov	r1, r3
 8003894:	480c      	ldr	r0, [pc, #48]	@ (80038c8 <MX_TIM4_Init+0x94>)
 8003896:	f002 fd4a 	bl	800632e <HAL_TIM_ConfigClockSource>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80038a0:	f7fe fdf4 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a4:	2300      	movs	r3, #0
 80038a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038ac:	463b      	mov	r3, r7
 80038ae:	4619      	mov	r1, r3
 80038b0:	4805      	ldr	r0, [pc, #20]	@ (80038c8 <MX_TIM4_Init+0x94>)
 80038b2:	f002 ff71 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80038bc:	f7fe fde6 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038c0:	bf00      	nop
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000e8c 	.word	0x20000e8c
 80038cc:	40000800 	.word	0x40000800

080038d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	4b24      	ldr	r3, [pc, #144]	@ (8003978 <HAL_TIM_Base_MspInit+0xa8>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	4a23      	ldr	r2, [pc, #140]	@ (8003978 <HAL_TIM_Base_MspInit+0xa8>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038f2:	4b21      	ldr	r3, [pc, #132]	@ (8003978 <HAL_TIM_Base_MspInit+0xa8>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80038fe:	e036      	b.n	800396e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_TIM_Base_MspInit+0xac>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d116      	bne.n	8003938 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	4b1a      	ldr	r3, [pc, #104]	@ (8003978 <HAL_TIM_Base_MspInit+0xa8>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	4a19      	ldr	r2, [pc, #100]	@ (8003978 <HAL_TIM_Base_MspInit+0xa8>)
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	6413      	str	r3, [r2, #64]	@ 0x40
 800391a:	4b17      	ldr	r3, [pc, #92]	@ (8003978 <HAL_TIM_Base_MspInit+0xa8>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003926:	2200      	movs	r2, #0
 8003928:	2100      	movs	r1, #0
 800392a:	201d      	movs	r0, #29
 800392c:	f000 fa37 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003930:	201d      	movs	r0, #29
 8003932:	f000 fa50 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
}
 8003936:	e01a      	b.n	800396e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a10      	ldr	r2, [pc, #64]	@ (8003980 <HAL_TIM_Base_MspInit+0xb0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d115      	bne.n	800396e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <HAL_TIM_Base_MspInit+0xa8>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	4a0b      	ldr	r2, [pc, #44]	@ (8003978 <HAL_TIM_Base_MspInit+0xa8>)
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	6413      	str	r3, [r2, #64]	@ 0x40
 8003952:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <HAL_TIM_Base_MspInit+0xa8>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800395e:	2200      	movs	r2, #0
 8003960:	2100      	movs	r1, #0
 8003962:	201e      	movs	r0, #30
 8003964:	f000 fa1b 	bl	8003d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003968:	201e      	movs	r0, #30
 800396a:	f000 fa34 	bl	8003dd6 <HAL_NVIC_EnableIRQ>
}
 800396e:	bf00      	nop
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800

08003984 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003988:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <MX_USART2_UART_Init+0x4c>)
 800398a:	4a12      	ldr	r2, [pc, #72]	@ (80039d4 <MX_USART2_UART_Init+0x50>)
 800398c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800398e:	4b10      	ldr	r3, [pc, #64]	@ (80039d0 <MX_USART2_UART_Init+0x4c>)
 8003990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003996:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <MX_USART2_UART_Init+0x4c>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800399c:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <MX_USART2_UART_Init+0x4c>)
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <MX_USART2_UART_Init+0x4c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039a8:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <MX_USART2_UART_Init+0x4c>)
 80039aa:	220c      	movs	r2, #12
 80039ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ae:	4b08      	ldr	r3, [pc, #32]	@ (80039d0 <MX_USART2_UART_Init+0x4c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b4:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <MX_USART2_UART_Init+0x4c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039ba:	4805      	ldr	r0, [pc, #20]	@ (80039d0 <MX_USART2_UART_Init+0x4c>)
 80039bc:	f002 ff7c 	bl	80068b8 <HAL_UART_Init>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80039c6:	f7fe fd61 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000ed4 	.word	0x20000ed4
 80039d4:	40004400 	.word	0x40004400

080039d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a19      	ldr	r2, [pc, #100]	@ (8003a5c <HAL_UART_MspInit+0x84>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d12b      	bne.n	8003a52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	4b18      	ldr	r3, [pc, #96]	@ (8003a60 <HAL_UART_MspInit+0x88>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	4a17      	ldr	r2, [pc, #92]	@ (8003a60 <HAL_UART_MspInit+0x88>)
 8003a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <HAL_UART_MspInit+0x88>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <HAL_UART_MspInit+0x88>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	4a10      	ldr	r2, [pc, #64]	@ (8003a60 <HAL_UART_MspInit+0x88>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a26:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <HAL_UART_MspInit+0x88>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a32:	230c      	movs	r3, #12
 8003a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a42:	2307      	movs	r3, #7
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4805      	ldr	r0, [pc, #20]	@ (8003a64 <HAL_UART_MspInit+0x8c>)
 8003a4e:	f000 fd4d 	bl	80044ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a52:	bf00      	nop
 8003a54:	3728      	adds	r7, #40	@ 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40004400 	.word	0x40004400
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40020000 	.word	0x40020000

08003a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003aa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a6c:	f7ff fe36 	bl	80036dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a70:	480c      	ldr	r0, [pc, #48]	@ (8003aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a72:	490d      	ldr	r1, [pc, #52]	@ (8003aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a74:	4a0d      	ldr	r2, [pc, #52]	@ (8003aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a78:	e002      	b.n	8003a80 <LoopCopyDataInit>

08003a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a7e:	3304      	adds	r3, #4

08003a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a84:	d3f9      	bcc.n	8003a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a86:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a88:	4c0a      	ldr	r4, [pc, #40]	@ (8003ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a8c:	e001      	b.n	8003a92 <LoopFillZerobss>

08003a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a90:	3204      	adds	r2, #4

08003a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a94:	d3fb      	bcc.n	8003a8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a96:	f008 f8cd 	bl	800bc34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a9a:	f7fe fc13 	bl	80022c4 <main>
  bx  lr    
 8003a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003aac:	08010f4c 	.word	0x08010f4c
  ldr r2, =_sbss
 8003ab0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003ab4:	200010b4 	.word	0x200010b4

08003ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ab8:	e7fe      	b.n	8003ab8 <ADC_IRQHandler>
	...

08003abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8003afc <HAL_Init+0x40>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8003afc <HAL_Init+0x40>)
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003acc:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <HAL_Init+0x40>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <HAL_Init+0x40>)
 8003ad2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad8:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <HAL_Init+0x40>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a07      	ldr	r2, [pc, #28]	@ (8003afc <HAL_Init+0x40>)
 8003ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae4:	2003      	movs	r0, #3
 8003ae6:	f000 f94f 	bl	8003d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aea:	200f      	movs	r0, #15
 8003aec:	f000 f808 	bl	8003b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003af0:	f7ff fcc6 	bl	8003480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023c00 	.word	0x40023c00

08003b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b08:	4b12      	ldr	r3, [pc, #72]	@ (8003b54 <HAL_InitTick+0x54>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <HAL_InitTick+0x58>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f967 	bl	8003df2 <HAL_SYSTICK_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e00e      	b.n	8003b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d80a      	bhi.n	8003b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b34:	2200      	movs	r2, #0
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3c:	f000 f92f 	bl	8003d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b40:	4a06      	ldr	r2, [pc, #24]	@ (8003b5c <HAL_InitTick+0x5c>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000014 	.word	0x20000014
 8003b58:	2000001c 	.word	0x2000001c
 8003b5c:	20000018 	.word	0x20000018

08003b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_IncTick+0x20>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_IncTick+0x24>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <HAL_IncTick+0x24>)
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	2000001c 	.word	0x2000001c
 8003b84:	20000f1c 	.word	0x20000f1c

08003b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	@ (8003b9c <HAL_GetTick+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000f1c 	.word	0x20000f1c

08003ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff ffee 	bl	8003b88 <HAL_GetTick>
 8003bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d005      	beq.n	8003bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <HAL_Delay+0x44>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bc6:	bf00      	nop
 8003bc8:	f7ff ffde 	bl	8003b88 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d8f7      	bhi.n	8003bc8 <HAL_Delay+0x28>
  {
  }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	2000001c 	.word	0x2000001c

08003be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1a:	4a04      	ldr	r2, [pc, #16]	@ (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	60d3      	str	r3, [r2, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <__NVIC_GetPriorityGrouping+0x18>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	f003 0307 	and.w	r3, r3, #7
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	db0b      	blt.n	8003c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4907      	ldr	r1, [pc, #28]	@ (8003c84 <__NVIC_EnableIRQ+0x38>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000e100 	.word	0xe000e100

08003c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	6039      	str	r1, [r7, #0]
 8003c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	db0a      	blt.n	8003cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	490c      	ldr	r1, [pc, #48]	@ (8003cd4 <__NVIC_SetPriority+0x4c>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	440b      	add	r3, r1
 8003cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb0:	e00a      	b.n	8003cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4908      	ldr	r1, [pc, #32]	@ (8003cd8 <__NVIC_SetPriority+0x50>)
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	0112      	lsls	r2, r2, #4
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	761a      	strb	r2, [r3, #24]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000e100 	.word	0xe000e100
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	@ 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f1c3 0307 	rsb	r3, r3, #7
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf28      	it	cs
 8003cfa:	2304      	movcs	r3, #4
 8003cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d902      	bls.n	8003d0c <NVIC_EncodePriority+0x30>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3b03      	subs	r3, #3
 8003d0a:	e000      	b.n	8003d0e <NVIC_EncodePriority+0x32>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	401a      	ands	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	4313      	orrs	r3, r2
         );
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3724      	adds	r7, #36	@ 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d54:	d301      	bcc.n	8003d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d56:	2301      	movs	r3, #1
 8003d58:	e00f      	b.n	8003d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d84 <SysTick_Config+0x40>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d62:	210f      	movs	r1, #15
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	f7ff ff8e 	bl	8003c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <SysTick_Config+0x40>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d72:	4b04      	ldr	r3, [pc, #16]	@ (8003d84 <SysTick_Config+0x40>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff29 	bl	8003be8 <__NVIC_SetPriorityGrouping>
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db0:	f7ff ff3e 	bl	8003c30 <__NVIC_GetPriorityGrouping>
 8003db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	6978      	ldr	r0, [r7, #20]
 8003dbc:	f7ff ff8e 	bl	8003cdc <NVIC_EncodePriority>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff5d 	bl	8003c88 <__NVIC_SetPriority>
}
 8003dce:	bf00      	nop
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	4603      	mov	r3, r0
 8003dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff31 	bl	8003c4c <__NVIC_EnableIRQ>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ffa2 	bl	8003d44 <SysTick_Config>
 8003e00:	4603      	mov	r3, r0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e18:	f7ff feb6 	bl	8003b88 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e099      	b.n	8003f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e48:	e00f      	b.n	8003e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e4a:	f7ff fe9d 	bl	8003b88 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d908      	bls.n	8003e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2203      	movs	r2, #3
 8003e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e078      	b.n	8003f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e8      	bne.n	8003e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4b38      	ldr	r3, [pc, #224]	@ (8003f64 <HAL_DMA_Init+0x158>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d107      	bne.n	8003ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f023 0307 	bic.w	r3, r3, #7
 8003eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d117      	bne.n	8003f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fa6f 	bl	80043f4 <DMA_CheckFifoParam>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2240      	movs	r2, #64	@ 0x40
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e016      	b.n	8003f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fa26 	bl	8004388 <DMA_CalcBaseAndBitshift>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f44:	223f      	movs	r2, #63	@ 0x3f
 8003f46:	409a      	lsls	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	f010803f 	.word	0xf010803f

08003f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_DMA_Start_IT+0x26>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e040      	b.n	8004010 <HAL_DMA_Start_IT+0xa8>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d12f      	bne.n	8004002 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f9b8 	bl	800432c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc0:	223f      	movs	r2, #63	@ 0x3f
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0216 	orr.w	r2, r2, #22
 8003fd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0208 	orr.w	r2, r2, #8
 8003fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e005      	b.n	800400e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800400a:	2302      	movs	r3, #2
 800400c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800400e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004024:	4b8e      	ldr	r3, [pc, #568]	@ (8004260 <HAL_DMA_IRQHandler+0x248>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a8e      	ldr	r2, [pc, #568]	@ (8004264 <HAL_DMA_IRQHandler+0x24c>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0a9b      	lsrs	r3, r3, #10
 8004030:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004036:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004042:	2208      	movs	r2, #8
 8004044:	409a      	lsls	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01a      	beq.n	8004084 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0204 	bic.w	r2, r2, #4
 800406a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004070:	2208      	movs	r2, #8
 8004072:	409a      	lsls	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	f043 0201 	orr.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004088:	2201      	movs	r2, #1
 800408a:	409a      	lsls	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d012      	beq.n	80040ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	2201      	movs	r2, #1
 80040a8:	409a      	lsls	r2, r3
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040be:	2204      	movs	r2, #4
 80040c0:	409a      	lsls	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d012      	beq.n	80040f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	2204      	movs	r2, #4
 80040de:	409a      	lsls	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	f043 0204 	orr.w	r2, r3, #4
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f4:	2210      	movs	r2, #16
 80040f6:	409a      	lsls	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d043      	beq.n	8004188 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d03c      	beq.n	8004188 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	2210      	movs	r2, #16
 8004114:	409a      	lsls	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d018      	beq.n	800415a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d024      	beq.n	8004188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
 8004146:	e01f      	b.n	8004188 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
 8004158:	e016      	b.n	8004188 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d107      	bne.n	8004178 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0208 	bic.w	r2, r2, #8
 8004176:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	2220      	movs	r2, #32
 800418e:	409a      	lsls	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 808f 	beq.w	80042b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8087 	beq.w	80042b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ae:	2220      	movs	r2, #32
 80041b0:	409a      	lsls	r2, r3
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d136      	bne.n	8004230 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0216 	bic.w	r2, r2, #22
 80041d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <HAL_DMA_IRQHandler+0x1da>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0208 	bic.w	r2, r2, #8
 8004200:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004206:	223f      	movs	r2, #63	@ 0x3f
 8004208:	409a      	lsls	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004222:	2b00      	cmp	r3, #0
 8004224:	d07e      	beq.n	8004324 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
        }
        return;
 800422e:	e079      	b.n	8004324 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01d      	beq.n	800427a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10d      	bne.n	8004268 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004250:	2b00      	cmp	r3, #0
 8004252:	d031      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
 800425c:	e02c      	b.n	80042b8 <HAL_DMA_IRQHandler+0x2a0>
 800425e:	bf00      	nop
 8004260:	20000014 	.word	0x20000014
 8004264:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d023      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
 8004278:	e01e      	b.n	80042b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0210 	bic.w	r2, r2, #16
 8004296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d032      	beq.n	8004326 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d022      	beq.n	8004312 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2205      	movs	r2, #5
 80042d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	3301      	adds	r3, #1
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d307      	bcc.n	8004300 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f2      	bne.n	80042e4 <HAL_DMA_IRQHandler+0x2cc>
 80042fe:	e000      	b.n	8004302 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004300:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
 8004322:	e000      	b.n	8004326 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004324:	bf00      	nop
    }
  }
}
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004348:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b40      	cmp	r3, #64	@ 0x40
 8004358:	d108      	bne.n	800436c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800436a:	e007      	b.n	800437c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	3b10      	subs	r3, #16
 8004398:	4a14      	ldr	r2, [pc, #80]	@ (80043ec <DMA_CalcBaseAndBitshift+0x64>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043a2:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <DMA_CalcBaseAndBitshift+0x68>)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d909      	bls.n	80043ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80043c8:	e007      	b.n	80043da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043d2:	f023 0303 	bic.w	r3, r3, #3
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	aaaaaaab 	.word	0xaaaaaaab
 80043f0:	08010a28 	.word	0x08010a28

080043f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d11f      	bne.n	800444e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d856      	bhi.n	80044c2 <DMA_CheckFifoParam+0xce>
 8004414:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <DMA_CheckFifoParam+0x28>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	0800442d 	.word	0x0800442d
 8004420:	0800443f 	.word	0x0800443f
 8004424:	0800442d 	.word	0x0800442d
 8004428:	080044c3 	.word	0x080044c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d046      	beq.n	80044c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800443c:	e043      	b.n	80044c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004446:	d140      	bne.n	80044ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444c:	e03d      	b.n	80044ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004456:	d121      	bne.n	800449c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d837      	bhi.n	80044ce <DMA_CheckFifoParam+0xda>
 800445e:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <DMA_CheckFifoParam+0x70>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	08004475 	.word	0x08004475
 8004468:	0800447b 	.word	0x0800447b
 800446c:	08004475 	.word	0x08004475
 8004470:	0800448d 	.word	0x0800448d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e030      	b.n	80044dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d025      	beq.n	80044d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448a:	e022      	b.n	80044d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004494:	d11f      	bne.n	80044d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800449a:	e01c      	b.n	80044d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d903      	bls.n	80044aa <DMA_CheckFifoParam+0xb6>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d003      	beq.n	80044b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044a8:	e018      	b.n	80044dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
      break;
 80044ae:	e015      	b.n	80044dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
      break;
 80044c0:	e00b      	b.n	80044da <DMA_CheckFifoParam+0xe6>
      break;
 80044c2:	bf00      	nop
 80044c4:	e00a      	b.n	80044dc <DMA_CheckFifoParam+0xe8>
      break;
 80044c6:	bf00      	nop
 80044c8:	e008      	b.n	80044dc <DMA_CheckFifoParam+0xe8>
      break;
 80044ca:	bf00      	nop
 80044cc:	e006      	b.n	80044dc <DMA_CheckFifoParam+0xe8>
      break;
 80044ce:	bf00      	nop
 80044d0:	e004      	b.n	80044dc <DMA_CheckFifoParam+0xe8>
      break;
 80044d2:	bf00      	nop
 80044d4:	e002      	b.n	80044dc <DMA_CheckFifoParam+0xe8>
      break;   
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <DMA_CheckFifoParam+0xe8>
      break;
 80044da:	bf00      	nop
    }
  } 
  
  return status; 
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop

080044ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b089      	sub	sp, #36	@ 0x24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e165      	b.n	80047d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004508:	2201      	movs	r2, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	429a      	cmp	r2, r3
 8004522:	f040 8154 	bne.w	80047ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b01      	cmp	r3, #1
 8004530:	d005      	beq.n	800453e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800453a:	2b02      	cmp	r3, #2
 800453c:	d130      	bne.n	80045a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	2203      	movs	r2, #3
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004574:	2201      	movs	r2, #1
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 0201 	and.w	r2, r3, #1
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d017      	beq.n	80045dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	2203      	movs	r2, #3
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d123      	bne.n	8004630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	08da      	lsrs	r2, r3, #3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3208      	adds	r2, #8
 80045f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	220f      	movs	r2, #15
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	08da      	lsrs	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3208      	adds	r2, #8
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	2203      	movs	r2, #3
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 0203 	and.w	r2, r3, #3
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80ae 	beq.w	80047ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	4b5d      	ldr	r3, [pc, #372]	@ (80047ec <HAL_GPIO_Init+0x300>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	4a5c      	ldr	r2, [pc, #368]	@ (80047ec <HAL_GPIO_Init+0x300>)
 800467c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004680:	6453      	str	r3, [r2, #68]	@ 0x44
 8004682:	4b5a      	ldr	r3, [pc, #360]	@ (80047ec <HAL_GPIO_Init+0x300>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800468e:	4a58      	ldr	r2, [pc, #352]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	3302      	adds	r3, #2
 8004696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	220f      	movs	r2, #15
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a4f      	ldr	r2, [pc, #316]	@ (80047f4 <HAL_GPIO_Init+0x308>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d025      	beq.n	8004706 <HAL_GPIO_Init+0x21a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a4e      	ldr	r2, [pc, #312]	@ (80047f8 <HAL_GPIO_Init+0x30c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01f      	beq.n	8004702 <HAL_GPIO_Init+0x216>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a4d      	ldr	r2, [pc, #308]	@ (80047fc <HAL_GPIO_Init+0x310>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d019      	beq.n	80046fe <HAL_GPIO_Init+0x212>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a4c      	ldr	r2, [pc, #304]	@ (8004800 <HAL_GPIO_Init+0x314>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_GPIO_Init+0x20e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004804 <HAL_GPIO_Init+0x318>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00d      	beq.n	80046f6 <HAL_GPIO_Init+0x20a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004808 <HAL_GPIO_Init+0x31c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <HAL_GPIO_Init+0x206>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a49      	ldr	r2, [pc, #292]	@ (800480c <HAL_GPIO_Init+0x320>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_GPIO_Init+0x202>
 80046ea:	2306      	movs	r3, #6
 80046ec:	e00c      	b.n	8004708 <HAL_GPIO_Init+0x21c>
 80046ee:	2307      	movs	r3, #7
 80046f0:	e00a      	b.n	8004708 <HAL_GPIO_Init+0x21c>
 80046f2:	2305      	movs	r3, #5
 80046f4:	e008      	b.n	8004708 <HAL_GPIO_Init+0x21c>
 80046f6:	2304      	movs	r3, #4
 80046f8:	e006      	b.n	8004708 <HAL_GPIO_Init+0x21c>
 80046fa:	2303      	movs	r3, #3
 80046fc:	e004      	b.n	8004708 <HAL_GPIO_Init+0x21c>
 80046fe:	2302      	movs	r3, #2
 8004700:	e002      	b.n	8004708 <HAL_GPIO_Init+0x21c>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_GPIO_Init+0x21c>
 8004706:	2300      	movs	r3, #0
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	f002 0203 	and.w	r2, r2, #3
 800470e:	0092      	lsls	r2, r2, #2
 8004710:	4093      	lsls	r3, r2
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004718:	4935      	ldr	r1, [pc, #212]	@ (80047f0 <HAL_GPIO_Init+0x304>)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	3302      	adds	r3, #2
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004726:	4b3a      	ldr	r3, [pc, #232]	@ (8004810 <HAL_GPIO_Init+0x324>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800474a:	4a31      	ldr	r2, [pc, #196]	@ (8004810 <HAL_GPIO_Init+0x324>)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004750:	4b2f      	ldr	r3, [pc, #188]	@ (8004810 <HAL_GPIO_Init+0x324>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004774:	4a26      	ldr	r2, [pc, #152]	@ (8004810 <HAL_GPIO_Init+0x324>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800477a:	4b25      	ldr	r3, [pc, #148]	@ (8004810 <HAL_GPIO_Init+0x324>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800479e:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <HAL_GPIO_Init+0x324>)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004810 <HAL_GPIO_Init+0x324>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047c8:	4a11      	ldr	r2, [pc, #68]	@ (8004810 <HAL_GPIO_Init+0x324>)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	3301      	adds	r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b0f      	cmp	r3, #15
 80047d8:	f67f ae96 	bls.w	8004508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3724      	adds	r7, #36	@ 0x24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40013800 	.word	0x40013800
 80047f4:	40020000 	.word	0x40020000
 80047f8:	40020400 	.word	0x40020400
 80047fc:	40020800 	.word	0x40020800
 8004800:	40020c00 	.word	0x40020c00
 8004804:	40021000 	.word	0x40021000
 8004808:	40021400 	.word	0x40021400
 800480c:	40021800 	.word	0x40021800
 8004810:	40013c00 	.word	0x40013c00

08004814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	887b      	ldrh	r3, [r7, #2]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e001      	b.n	8004836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	807b      	strh	r3, [r7, #2]
 8004850:	4613      	mov	r3, r2
 8004852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004854:	787b      	ldrb	r3, [r7, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004860:	e003      	b.n	800486a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004862:	887b      	ldrh	r3, [r7, #2]
 8004864:	041a      	lsls	r2, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	619a      	str	r2, [r3, #24]
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004882:	4b08      	ldr	r3, [pc, #32]	@ (80048a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800488e:	4a05      	ldr	r2, [pc, #20]	@ (80048a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe f902 	bl	8002aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40013c00 	.word	0x40013c00

080048a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0cc      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048bc:	4b68      	ldr	r3, [pc, #416]	@ (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d90c      	bls.n	80048e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ca:	4b65      	ldr	r3, [pc, #404]	@ (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d2:	4b63      	ldr	r3, [pc, #396]	@ (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d001      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0b8      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048fc:	4b59      	ldr	r3, [pc, #356]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	4a58      	ldr	r2, [pc, #352]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004906:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004914:	4b53      	ldr	r3, [pc, #332]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4a52      	ldr	r2, [pc, #328]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800491e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004920:	4b50      	ldr	r3, [pc, #320]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	494d      	ldr	r1, [pc, #308]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d044      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004946:	4b47      	ldr	r3, [pc, #284]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d119      	bne.n	8004986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e07f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d003      	beq.n	8004966 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004962:	2b03      	cmp	r3, #3
 8004964:	d107      	bne.n	8004976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004966:	4b3f      	ldr	r3, [pc, #252]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e06f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004976:	4b3b      	ldr	r3, [pc, #236]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e067      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004986:	4b37      	ldr	r3, [pc, #220]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 0203 	bic.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4934      	ldr	r1, [pc, #208]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004998:	f7ff f8f6 	bl	8003b88 <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	e00a      	b.n	80049b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a0:	f7ff f8f2 	bl	8003b88 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e04f      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 020c 	and.w	r2, r3, #12
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d1eb      	bne.n	80049a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049c8:	4b25      	ldr	r3, [pc, #148]	@ (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d20c      	bcs.n	80049f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b22      	ldr	r3, [pc, #136]	@ (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b20      	ldr	r3, [pc, #128]	@ (8004a60 <HAL_RCC_ClockConfig+0x1b8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e032      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049fc:	4b19      	ldr	r3, [pc, #100]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4916      	ldr	r1, [pc, #88]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a1a:	4b12      	ldr	r3, [pc, #72]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	490e      	ldr	r1, [pc, #56]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a2e:	f000 f855 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004a32:	4602      	mov	r2, r0
 8004a34:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	490a      	ldr	r1, [pc, #40]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c0>)
 8004a40:	5ccb      	ldrb	r3, [r1, r3]
 8004a42:	fa22 f303 	lsr.w	r3, r2, r3
 8004a46:	4a09      	ldr	r2, [pc, #36]	@ (8004a6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a4a:	4b09      	ldr	r3, [pc, #36]	@ (8004a70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff f856 	bl	8003b00 <HAL_InitTick>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40023c00 	.word	0x40023c00
 8004a64:	40023800 	.word	0x40023800
 8004a68:	08010a10 	.word	0x08010a10
 8004a6c:	20000014 	.word	0x20000014
 8004a70:	20000018 	.word	0x20000018

08004a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a78:	4b03      	ldr	r3, [pc, #12]	@ (8004a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000014 	.word	0x20000014

08004a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a90:	f7ff fff0 	bl	8004a74 <HAL_RCC_GetHCLKFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	0a9b      	lsrs	r3, r3, #10
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	4903      	ldr	r1, [pc, #12]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	08010a20 	.word	0x08010a20

08004ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ab8:	f7ff ffdc 	bl	8004a74 <HAL_RCC_GetHCLKFreq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	0b5b      	lsrs	r3, r3, #13
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	4903      	ldr	r1, [pc, #12]	@ (8004ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aca:	5ccb      	ldrb	r3, [r1, r3]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	08010a20 	.word	0x08010a20

08004adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae0:	b0a6      	sub	sp, #152	@ 0x98
 8004ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b02:	4bc8      	ldr	r3, [pc, #800]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b0c      	cmp	r3, #12
 8004b0c:	f200 817e 	bhi.w	8004e0c <HAL_RCC_GetSysClockFreq+0x330>
 8004b10:	a201      	add	r2, pc, #4	@ (adr r2, 8004b18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b4d 	.word	0x08004b4d
 8004b1c:	08004e0d 	.word	0x08004e0d
 8004b20:	08004e0d 	.word	0x08004e0d
 8004b24:	08004e0d 	.word	0x08004e0d
 8004b28:	08004b55 	.word	0x08004b55
 8004b2c:	08004e0d 	.word	0x08004e0d
 8004b30:	08004e0d 	.word	0x08004e0d
 8004b34:	08004e0d 	.word	0x08004e0d
 8004b38:	08004b5d 	.word	0x08004b5d
 8004b3c:	08004e0d 	.word	0x08004e0d
 8004b40:	08004e0d 	.word	0x08004e0d
 8004b44:	08004e0d 	.word	0x08004e0d
 8004b48:	08004cc7 	.word	0x08004cc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4bb6      	ldr	r3, [pc, #728]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004b52:	e15f      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b54:	4bb5      	ldr	r3, [pc, #724]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8004b56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004b5a:	e15b      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b5c:	4bb1      	ldr	r3, [pc, #708]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b68:	4bae      	ldr	r3, [pc, #696]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d031      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b74:	4bab      	ldr	r3, [pc, #684]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	099b      	lsrs	r3, r3, #6
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b88:	2300      	movs	r3, #0
 8004b8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b8c:	4ba7      	ldr	r3, [pc, #668]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8004b8e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004b92:	462a      	mov	r2, r5
 8004b94:	fb03 f202 	mul.w	r2, r3, r2
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4aa2      	ldr	r2, [pc, #648]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	fba1 1202 	umull	r1, r2, r1, r2
 8004baa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bac:	460a      	mov	r2, r1
 8004bae:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004bb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004bb2:	4413      	add	r3, r2
 8004bb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bba:	2200      	movs	r2, #0
 8004bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bbe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004bc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bc4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004bc8:	f7fc f8ce 	bl	8000d68 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bd6:	e064      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd8:	4b92      	ldr	r3, [pc, #584]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	099b      	lsrs	r3, r3, #6
 8004bde:	2200      	movs	r2, #0
 8004be0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004be2:	657a      	str	r2, [r7, #84]	@ 0x54
 8004be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bec:	2300      	movs	r3, #0
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	f04f 0000 	mov.w	r0, #0
 8004bfc:	f04f 0100 	mov.w	r1, #0
 8004c00:	0159      	lsls	r1, r3, #5
 8004c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c06:	0150      	lsls	r0, r2, #5
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	1a51      	subs	r1, r2, r1
 8004c10:	6139      	str	r1, [r7, #16]
 8004c12:	4629      	mov	r1, r5
 8004c14:	eb63 0301 	sbc.w	r3, r3, r1
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c26:	4659      	mov	r1, fp
 8004c28:	018b      	lsls	r3, r1, #6
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c30:	4651      	mov	r1, sl
 8004c32:	018a      	lsls	r2, r1, #6
 8004c34:	4651      	mov	r1, sl
 8004c36:	ebb2 0801 	subs.w	r8, r2, r1
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	eb63 0901 	sbc.w	r9, r3, r1
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c54:	4690      	mov	r8, r2
 8004c56:	4699      	mov	r9, r3
 8004c58:	4623      	mov	r3, r4
 8004c5a:	eb18 0303 	adds.w	r3, r8, r3
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	462b      	mov	r3, r5
 8004c62:	eb49 0303 	adc.w	r3, r9, r3
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c74:	4629      	mov	r1, r5
 8004c76:	028b      	lsls	r3, r1, #10
 8004c78:	4621      	mov	r1, r4
 8004c7a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c7e:	4621      	mov	r1, r4
 8004c80:	028a      	lsls	r2, r1, #10
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c94:	f7fc f868 	bl	8000d68 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ca2:	4b60      	ldr	r3, [pc, #384]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	3301      	adds	r3, #1
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004cb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004cc4:	e0a6      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cc6:	4b57      	ldr	r3, [pc, #348]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd2:	4b54      	ldr	r3, [pc, #336]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d02a      	beq.n	8004d34 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cde:	4b51      	ldr	r3, [pc, #324]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	099b      	lsrs	r3, r3, #6
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ce8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8004cf4:	fb03 f201 	mul.w	r2, r3, r1
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	fb00 f303 	mul.w	r3, r0, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	4a4a      	ldr	r2, [pc, #296]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x350>)
 8004d02:	fba0 1202 	umull	r1, r2, r0, r2
 8004d06:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d08:	460a      	mov	r2, r1
 8004d0a:	673a      	str	r2, [r7, #112]	@ 0x70
 8004d0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d0e:	4413      	add	r3, r2
 8004d10:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d16:	2200      	movs	r2, #0
 8004d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d1a:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004d20:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004d24:	f7fc f820 	bl	8000d68 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d32:	e05b      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d34:	4b3b      	ldr	r3, [pc, #236]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	099b      	lsrs	r3, r3, #6
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d50:	4642      	mov	r2, r8
 8004d52:	464b      	mov	r3, r9
 8004d54:	f04f 0000 	mov.w	r0, #0
 8004d58:	f04f 0100 	mov.w	r1, #0
 8004d5c:	0159      	lsls	r1, r3, #5
 8004d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d62:	0150      	lsls	r0, r2, #5
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4641      	mov	r1, r8
 8004d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d6e:	4649      	mov	r1, r9
 8004d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d88:	ebb2 040a 	subs.w	r4, r2, sl
 8004d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	00eb      	lsls	r3, r5, #3
 8004d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d9e:	00e2      	lsls	r2, r4, #3
 8004da0:	4614      	mov	r4, r2
 8004da2:	461d      	mov	r5, r3
 8004da4:	4643      	mov	r3, r8
 8004da6:	18e3      	adds	r3, r4, r3
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	464b      	mov	r3, r9
 8004dac:	eb45 0303 	adc.w	r3, r5, r3
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	028b      	lsls	r3, r1, #10
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc8:	4621      	mov	r1, r4
 8004dca:	028a      	lsls	r2, r1, #10
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	61fa      	str	r2, [r7, #28]
 8004dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dde:	f7fb ffc3 	bl	8000d68 <__aeabi_uldivmod>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4613      	mov	r3, r2
 8004de8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004dec:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0f1b      	lsrs	r3, r3, #28
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e0a:	e003      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004e0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3798      	adds	r7, #152	@ 0x98
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
 8004e28:	00f42400 	.word	0x00f42400
 8004e2c:	017d7840 	.word	0x017d7840

08004e30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e28d      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8083 	beq.w	8004f56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e50:	4b94      	ldr	r3, [pc, #592]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d019      	beq.n	8004e90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e5c:	4b91      	ldr	r3, [pc, #580]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d106      	bne.n	8004e76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e68:	4b8e      	ldr	r3, [pc, #568]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e74:	d00c      	beq.n	8004e90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e76:	4b8b      	ldr	r3, [pc, #556]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e7e:	2b0c      	cmp	r3, #12
 8004e80:	d112      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e82:	4b88      	ldr	r3, [pc, #544]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e90:	4b84      	ldr	r3, [pc, #528]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d05b      	beq.n	8004f54 <HAL_RCC_OscConfig+0x124>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d157      	bne.n	8004f54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e25a      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x90>
 8004eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7b      	ldr	r2, [pc, #492]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e01d      	b.n	8004efc <HAL_RCC_OscConfig+0xcc>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0xb4>
 8004eca:	4b76      	ldr	r3, [pc, #472]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a75      	ldr	r2, [pc, #468]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	4b73      	ldr	r3, [pc, #460]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a72      	ldr	r2, [pc, #456]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e00b      	b.n	8004efc <HAL_RCC_OscConfig+0xcc>
 8004ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d013      	beq.n	8004f2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fe fe40 	bl	8003b88 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f0c:	f7fe fe3c 	bl	8003b88 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b64      	cmp	r3, #100	@ 0x64
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e21f      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b61      	ldr	r3, [pc, #388]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0xdc>
 8004f2a:	e014      	b.n	8004f56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fe fe2c 	bl	8003b88 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fe fe28 	bl	8003b88 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	@ 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e20b      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f46:	4b57      	ldr	r3, [pc, #348]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x104>
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d06f      	beq.n	8005042 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f62:	4b50      	ldr	r3, [pc, #320]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d017      	beq.n	8004f9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d105      	bne.n	8004f86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f86:	4b47      	ldr	r3, [pc, #284]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f8e:	2b0c      	cmp	r3, #12
 8004f90:	d11c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f92:	4b44      	ldr	r3, [pc, #272]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d116      	bne.n	8004fcc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9e:	4b41      	ldr	r3, [pc, #260]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x186>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e1d3      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4937      	ldr	r1, [pc, #220]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	e03a      	b.n	8005042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd4:	4b34      	ldr	r3, [pc, #208]	@ (80050a8 <HAL_RCC_OscConfig+0x278>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fe fdd5 	bl	8003b88 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe2:	f7fe fdd1 	bl	8003b88 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e1b4      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005000:	4b28      	ldr	r3, [pc, #160]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	4925      	ldr	r1, [pc, #148]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
 8005014:	e015      	b.n	8005042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005016:	4b24      	ldr	r3, [pc, #144]	@ (80050a8 <HAL_RCC_OscConfig+0x278>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fe fdb4 	bl	8003b88 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005024:	f7fe fdb0 	bl	8003b88 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e193      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005036:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d036      	beq.n	80050bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005056:	4b15      	ldr	r3, [pc, #84]	@ (80050ac <HAL_RCC_OscConfig+0x27c>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505c:	f7fe fd94 	bl	8003b88 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005064:	f7fe fd90 	bl	8003b88 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e173      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005076:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8005078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x234>
 8005082:	e01b      	b.n	80050bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <HAL_RCC_OscConfig+0x27c>)
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508a:	f7fe fd7d 	bl	8003b88 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005090:	e00e      	b.n	80050b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005092:	f7fe fd79 	bl	8003b88 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d907      	bls.n	80050b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e15c      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
 80050a4:	40023800 	.word	0x40023800
 80050a8:	42470000 	.word	0x42470000
 80050ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b0:	4b8a      	ldr	r3, [pc, #552]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80050b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1ea      	bne.n	8005092 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8097 	beq.w	80051f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ce:	4b83      	ldr	r3, [pc, #524]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10f      	bne.n	80050fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	4b7f      	ldr	r3, [pc, #508]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	4a7e      	ldr	r2, [pc, #504]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ea:	4b7c      	ldr	r3, [pc, #496]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f6:	2301      	movs	r3, #1
 80050f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fa:	4b79      	ldr	r3, [pc, #484]	@ (80052e0 <HAL_RCC_OscConfig+0x4b0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d118      	bne.n	8005138 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005106:	4b76      	ldr	r3, [pc, #472]	@ (80052e0 <HAL_RCC_OscConfig+0x4b0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a75      	ldr	r2, [pc, #468]	@ (80052e0 <HAL_RCC_OscConfig+0x4b0>)
 800510c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005112:	f7fe fd39 	bl	8003b88 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511a:	f7fe fd35 	bl	8003b88 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e118      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512c:	4b6c      	ldr	r3, [pc, #432]	@ (80052e0 <HAL_RCC_OscConfig+0x4b0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d106      	bne.n	800514e <HAL_RCC_OscConfig+0x31e>
 8005140:	4b66      	ldr	r3, [pc, #408]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005144:	4a65      	ldr	r2, [pc, #404]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	6713      	str	r3, [r2, #112]	@ 0x70
 800514c:	e01c      	b.n	8005188 <HAL_RCC_OscConfig+0x358>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b05      	cmp	r3, #5
 8005154:	d10c      	bne.n	8005170 <HAL_RCC_OscConfig+0x340>
 8005156:	4b61      	ldr	r3, [pc, #388]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515a:	4a60      	ldr	r2, [pc, #384]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 800515c:	f043 0304 	orr.w	r3, r3, #4
 8005160:	6713      	str	r3, [r2, #112]	@ 0x70
 8005162:	4b5e      	ldr	r3, [pc, #376]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005166:	4a5d      	ldr	r2, [pc, #372]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	6713      	str	r3, [r2, #112]	@ 0x70
 800516e:	e00b      	b.n	8005188 <HAL_RCC_OscConfig+0x358>
 8005170:	4b5a      	ldr	r3, [pc, #360]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005174:	4a59      	ldr	r2, [pc, #356]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	6713      	str	r3, [r2, #112]	@ 0x70
 800517c:	4b57      	ldr	r3, [pc, #348]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005180:	4a56      	ldr	r2, [pc, #344]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005182:	f023 0304 	bic.w	r3, r3, #4
 8005186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d015      	beq.n	80051bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005190:	f7fe fcfa 	bl	8003b88 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005196:	e00a      	b.n	80051ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7fe fcf6 	bl	8003b88 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e0d7      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ae:	4b4b      	ldr	r3, [pc, #300]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ee      	beq.n	8005198 <HAL_RCC_OscConfig+0x368>
 80051ba:	e014      	b.n	80051e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fe fce4 	bl	8003b88 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fe fce0 	bl	8003b88 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0c1      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051da:	4b40      	ldr	r3, [pc, #256]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ee      	bne.n	80051c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d105      	bne.n	80051f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ec:	4b3b      	ldr	r3, [pc, #236]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	4a3a      	ldr	r2, [pc, #232]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80051f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80ad 	beq.w	800535c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005202:	4b36      	ldr	r3, [pc, #216]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b08      	cmp	r3, #8
 800520c:	d060      	beq.n	80052d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d145      	bne.n	80052a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005216:	4b33      	ldr	r3, [pc, #204]	@ (80052e4 <HAL_RCC_OscConfig+0x4b4>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fe fcb4 	bl	8003b88 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005224:	f7fe fcb0 	bl	8003b88 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e093      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005236:	4b29      	ldr	r3, [pc, #164]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	3b01      	subs	r3, #1
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	061b      	lsls	r3, r3, #24
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	071b      	lsls	r3, r3, #28
 800526e:	491b      	ldr	r1, [pc, #108]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005274:	4b1b      	ldr	r3, [pc, #108]	@ (80052e4 <HAL_RCC_OscConfig+0x4b4>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527a:	f7fe fc85 	bl	8003b88 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005282:	f7fe fc81 	bl	8003b88 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e064      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005294:	4b11      	ldr	r3, [pc, #68]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x452>
 80052a0:	e05c      	b.n	800535c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a2:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <HAL_RCC_OscConfig+0x4b4>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fe fc6e 	bl	8003b88 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b0:	f7fe fc6a 	bl	8003b88 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e04d      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c2:	4b06      	ldr	r3, [pc, #24]	@ (80052dc <HAL_RCC_OscConfig+0x4ac>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x480>
 80052ce:	e045      	b.n	800535c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e040      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40007000 	.word	0x40007000
 80052e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005368 <HAL_RCC_OscConfig+0x538>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d030      	beq.n	8005358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005300:	429a      	cmp	r2, r3
 8005302:	d129      	bne.n	8005358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d122      	bne.n	8005358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005318:	4013      	ands	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800531e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005320:	4293      	cmp	r3, r2
 8005322:	d119      	bne.n	8005358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	3b01      	subs	r3, #1
 8005332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005334:	429a      	cmp	r2, r3
 8005336:	d10f      	bne.n	8005358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005344:	429a      	cmp	r2, r3
 8005346:	d107      	bne.n	8005358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800

0800536c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e07b      	b.n	8005476 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	2b00      	cmp	r3, #0
 8005384:	d108      	bne.n	8005398 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800538e:	d009      	beq.n	80053a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	61da      	str	r2, [r3, #28]
 8005396:	e005      	b.n	80053a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fd ff8e 	bl	80032e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005428:	ea42 0103 	orr.w	r1, r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	f003 0104 	and.w	r1, r3, #4
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544a:	f003 0210 	and.w	r2, r3, #16
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005464:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b088      	sub	sp, #32
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800548e:	f7fe fb7b 	bl	8003b88 <HAL_GetTick>
 8005492:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d001      	beq.n	80054a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
 80054a6:	e12a      	b.n	80056fe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_SPI_Transmit+0x36>
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e122      	b.n	80056fe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_SPI_Transmit+0x48>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e11b      	b.n	80056fe <HAL_SPI_Transmit+0x280>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2203      	movs	r2, #3
 80054d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005514:	d10f      	bne.n	8005536 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005524:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005534:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005540:	2b40      	cmp	r3, #64	@ 0x40
 8005542:	d007      	beq.n	8005554 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005552:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800555c:	d152      	bne.n	8005604 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_SPI_Transmit+0xee>
 8005566:	8b7b      	ldrh	r3, [r7, #26]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d145      	bne.n	80055f8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005570:	881a      	ldrh	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557c:	1c9a      	adds	r2, r3, #2
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005590:	e032      	b.n	80055f8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b02      	cmp	r3, #2
 800559e:	d112      	bne.n	80055c6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a4:	881a      	ldrh	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b0:	1c9a      	adds	r2, r3, #2
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055c4:	e018      	b.n	80055f8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c6:	f7fe fadf 	bl	8003b88 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d803      	bhi.n	80055de <HAL_SPI_Transmit+0x160>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d102      	bne.n	80055e4 <HAL_SPI_Transmit+0x166>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e082      	b.n	80056fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1c7      	bne.n	8005592 <HAL_SPI_Transmit+0x114>
 8005602:	e053      	b.n	80056ac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_SPI_Transmit+0x194>
 800560c:	8b7b      	ldrh	r3, [r7, #26]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d147      	bne.n	80056a2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005638:	e033      	b.n	80056a2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	d113      	bne.n	8005670 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	7812      	ldrb	r2, [r2, #0]
 8005654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800566e:	e018      	b.n	80056a2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005670:	f7fe fa8a 	bl	8003b88 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d803      	bhi.n	8005688 <HAL_SPI_Transmit+0x20a>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d102      	bne.n	800568e <HAL_SPI_Transmit+0x210>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e02d      	b.n	80056fe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1c6      	bne.n	800563a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fba1 	bl	8005df8 <SPI_EndRxTxTransaction>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b08a      	sub	sp, #40	@ 0x28
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005714:	2301      	movs	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005718:	f7fe fa36 	bl	8003b88 <HAL_GetTick>
 800571c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005724:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005730:	7ffb      	ldrb	r3, [r7, #31]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d00c      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x4a>
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800573c:	d106      	bne.n	800574c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d102      	bne.n	800574c <HAL_SPI_TransmitReceive+0x46>
 8005746:	7ffb      	ldrb	r3, [r7, #31]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d001      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
 800574e:	e17f      	b.n	8005a50 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_SPI_TransmitReceive+0x5c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_SPI_TransmitReceive+0x5c>
 800575c:	887b      	ldrh	r3, [r7, #2]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e174      	b.n	8005a50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_SPI_TransmitReceive+0x6e>
 8005770:	2302      	movs	r3, #2
 8005772:	e16d      	b.n	8005a50 <HAL_SPI_TransmitReceive+0x34a>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b04      	cmp	r3, #4
 8005786:	d003      	beq.n	8005790 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2205      	movs	r2, #5
 800578c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	887a      	ldrh	r2, [r7, #2]
 80057a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	887a      	ldrh	r2, [r7, #2]
 80057b2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	887a      	ldrh	r2, [r7, #2]
 80057b8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d0:	2b40      	cmp	r3, #64	@ 0x40
 80057d2:	d007      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ec:	d17e      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_SPI_TransmitReceive+0xf6>
 80057f6:	8afb      	ldrh	r3, [r7, #22]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d16c      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	1c9a      	adds	r2, r3, #2
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005820:	e059      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	d11b      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x162>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x162>
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	2b01      	cmp	r3, #1
 800583e:	d113      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	881a      	ldrh	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005850:	1c9a      	adds	r2, r3, #2
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	d119      	bne.n	80058aa <HAL_SPI_TransmitReceive+0x1a4>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d014      	beq.n	80058aa <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588a:	b292      	uxth	r2, r2
 800588c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005892:	1c9a      	adds	r2, r3, #2
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058a6:	2301      	movs	r3, #1
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058aa:	f7fe f96d 	bl	8003b88 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d80d      	bhi.n	80058d6 <HAL_SPI_TransmitReceive+0x1d0>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d009      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e0bc      	b.n	8005a50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1a0      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x11c>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d19b      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x11c>
 80058ea:	e082      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_SPI_TransmitReceive+0x1f4>
 80058f4:	8afb      	ldrh	r3, [r7, #22]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d171      	bne.n	80059de <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	330c      	adds	r3, #12
 8005904:	7812      	ldrb	r2, [r2, #0]
 8005906:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005920:	e05d      	b.n	80059de <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d11c      	bne.n	800596a <HAL_SPI_TransmitReceive+0x264>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d017      	beq.n	800596a <HAL_SPI_TransmitReceive+0x264>
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	2b01      	cmp	r3, #1
 800593e:	d114      	bne.n	800596a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	7812      	ldrb	r2, [r2, #0]
 800594c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d119      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x2a6>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d014      	beq.n	80059ac <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059a8:	2301      	movs	r3, #1
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059ac:	f7fe f8ec 	bl	8003b88 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d803      	bhi.n	80059c4 <HAL_SPI_TransmitReceive+0x2be>
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c2:	d102      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x2c4>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e038      	b.n	8005a50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d19c      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x21c>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d197      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f2:	6a3a      	ldr	r2, [r7, #32]
 80059f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f9fe 	bl	8005df8 <SPI_EndRxTxTransaction>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e01d      	b.n	8005a50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3728      	adds	r7, #40	@ 0x28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d001      	beq.n	8005a76 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
 8005a74:	e097      	b.n	8005ba6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_SPI_Transmit_DMA+0x2a>
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e08f      	b.n	8005ba6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_SPI_Transmit_DMA+0x3c>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e088      	b.n	8005ba6 <HAL_SPI_Transmit_DMA+0x14e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	88fa      	ldrh	r2, [r7, #6]
 8005aba:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ae2:	d10f      	bne.n	8005b04 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005af2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b08:	4a29      	ldr	r2, [pc, #164]	@ (8005bb0 <HAL_SPI_Transmit_DMA+0x158>)
 8005b0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b10:	4a28      	ldr	r2, [pc, #160]	@ (8005bb4 <HAL_SPI_Transmit_DMA+0x15c>)
 8005b12:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b18:	4a27      	ldr	r2, [pc, #156]	@ (8005bb8 <HAL_SPI_Transmit_DMA+0x160>)
 8005b1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b20:	2200      	movs	r2, #0
 8005b22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b3c:	f7fe fa14 	bl	8003f68 <HAL_DMA_Start_IT>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4a:	f043 0210 	orr.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e023      	b.n	8005ba6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b40      	cmp	r3, #64	@ 0x40
 8005b6a:	d007      	beq.n	8005b7c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b7a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0220 	orr.w	r2, r2, #32
 8005b92:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0202 	orr.w	r2, r2, #2
 8005ba2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	08005c8d 	.word	0x08005c8d
 8005bb4:	08005be5 	.word	0x08005be5
 8005bb8:	08005ca9 	.word	0x08005ca9

08005bbc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bf2:	f7fd ffc9 	bl	8003b88 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c06:	d03b      	beq.n	8005c80 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0220 	bic.w	r2, r2, #32
 8005c16:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0202 	bic.w	r2, r2, #2
 8005c26:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	2164      	movs	r1, #100	@ 0x64
 8005c2c:	6978      	ldr	r0, [r7, #20]
 8005c2e:	f000 f8e3 	bl	8005df8 <SPI_EndRxTxTransaction>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	f043 0220 	orr.w	r2, r3, #32
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2200      	movs	r2, #0
 8005c66:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c78:	6978      	ldr	r0, [r7, #20]
 8005c7a:	f7ff ffa9 	bl	8005bd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c7e:	e002      	b.n	8005c86 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005c80:	6978      	ldr	r0, [r7, #20]
 8005c82:	f7fb fae1 	bl	8001248 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ff8e 	bl	8005bbc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0203 	bic.w	r2, r2, #3
 8005cc4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	f043 0210 	orr.w	r2, r3, #16
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ff78 	bl	8005bd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cf8:	f7fd ff46 	bl	8003b88 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	4413      	add	r3, r2
 8005d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d08:	f7fd ff3e 	bl	8003b88 <HAL_GetTick>
 8005d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d0e:	4b39      	ldr	r3, [pc, #228]	@ (8005df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	015b      	lsls	r3, r3, #5
 8005d14:	0d1b      	lsrs	r3, r3, #20
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	fb02 f303 	mul.w	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d1e:	e054      	b.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d050      	beq.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d28:	f7fd ff2e 	bl	8003b88 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d902      	bls.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d13d      	bne.n	8005dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d56:	d111      	bne.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d60:	d004      	beq.n	8005d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d6a:	d107      	bne.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d84:	d10f      	bne.n	8005da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e017      	b.n	8005dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d19b      	bne.n	8005d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000014 	.word	0x20000014

08005df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	2102      	movs	r1, #2
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff ff6a 	bl	8005ce8 <SPI_WaitFlagStateUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e032      	b.n	8005e90 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e98 <SPI_EndRxTxTransaction+0xa0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e9c <SPI_EndRxTxTransaction+0xa4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	0d5b      	lsrs	r3, r3, #21
 8005e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e48:	d112      	bne.n	8005e70 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2200      	movs	r2, #0
 8005e52:	2180      	movs	r1, #128	@ 0x80
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff ff47 	bl	8005ce8 <SPI_WaitFlagStateUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d016      	beq.n	8005e8e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e00f      	b.n	8005e90 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e86:	2b80      	cmp	r3, #128	@ 0x80
 8005e88:	d0f2      	beq.n	8005e70 <SPI_EndRxTxTransaction+0x78>
 8005e8a:	e000      	b.n	8005e8e <SPI_EndRxTxTransaction+0x96>
        break;
 8005e8c:	bf00      	nop
  }

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20000014 	.word	0x20000014
 8005e9c:	165e9f81 	.word	0x165e9f81

08005ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e041      	b.n	8005f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fd fd02 	bl	80038d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f000 fb14 	bl	800650c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d001      	beq.n	8005f58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e046      	b.n	8005fe6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a23      	ldr	r2, [pc, #140]	@ (8005ff4 <HAL_TIM_Base_Start+0xb4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d022      	beq.n	8005fb0 <HAL_TIM_Base_Start+0x70>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f72:	d01d      	beq.n	8005fb0 <HAL_TIM_Base_Start+0x70>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff8 <HAL_TIM_Base_Start+0xb8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d018      	beq.n	8005fb0 <HAL_TIM_Base_Start+0x70>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1e      	ldr	r2, [pc, #120]	@ (8005ffc <HAL_TIM_Base_Start+0xbc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_TIM_Base_Start+0x70>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8006000 <HAL_TIM_Base_Start+0xc0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00e      	beq.n	8005fb0 <HAL_TIM_Base_Start+0x70>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a1b      	ldr	r2, [pc, #108]	@ (8006004 <HAL_TIM_Base_Start+0xc4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_TIM_Base_Start+0x70>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a19      	ldr	r2, [pc, #100]	@ (8006008 <HAL_TIM_Base_Start+0xc8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_TIM_Base_Start+0x70>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a18      	ldr	r2, [pc, #96]	@ (800600c <HAL_TIM_Base_Start+0xcc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d111      	bne.n	8005fd4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b06      	cmp	r3, #6
 8005fc0:	d010      	beq.n	8005fe4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd2:	e007      	b.n	8005fe4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40000800 	.word	0x40000800
 8006000:	40000c00 	.word	0x40000c00
 8006004:	40010400 	.word	0x40010400
 8006008:	40014000 	.word	0x40014000
 800600c:	40001800 	.word	0x40001800

08006010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	d001      	beq.n	8006028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e04e      	b.n	80060c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a23      	ldr	r2, [pc, #140]	@ (80060d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d022      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x80>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006052:	d01d      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x80>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1f      	ldr	r2, [pc, #124]	@ (80060d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d018      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x80>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1e      	ldr	r2, [pc, #120]	@ (80060dc <HAL_TIM_Base_Start_IT+0xcc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d013      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x80>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1c      	ldr	r2, [pc, #112]	@ (80060e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00e      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x80>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1b      	ldr	r2, [pc, #108]	@ (80060e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d009      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x80>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a19      	ldr	r2, [pc, #100]	@ (80060e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d004      	beq.n	8006090 <HAL_TIM_Base_Start_IT+0x80>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a18      	ldr	r2, [pc, #96]	@ (80060ec <HAL_TIM_Base_Start_IT+0xdc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d111      	bne.n	80060b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b06      	cmp	r3, #6
 80060a0:	d010      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b2:	e007      	b.n	80060c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40000c00 	.word	0x40000c00
 80060e4:	40010400 	.word	0x40010400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40001800 	.word	0x40001800

080060f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <HAL_TIM_Base_Stop_IT+0x48>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a1a      	ldr	r2, [r3, #32]
 800611e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006122:	4013      	ands	r3, r2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <HAL_TIM_Base_Stop_IT+0x48>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d020      	beq.n	80061b2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d01b      	beq.n	80061b2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f06f 0202 	mvn.w	r2, #2
 8006182:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f999 	bl	80064d0 <HAL_TIM_IC_CaptureCallback>
 800619e:	e005      	b.n	80061ac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f98b 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f99c 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d020      	beq.n	80061fe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01b      	beq.n	80061fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f06f 0204 	mvn.w	r2, #4
 80061ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f973 	bl	80064d0 <HAL_TIM_IC_CaptureCallback>
 80061ea:	e005      	b.n	80061f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f965 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f976 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d020      	beq.n	800624a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01b      	beq.n	800624a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f06f 0208 	mvn.w	r2, #8
 800621a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2204      	movs	r2, #4
 8006220:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f94d 	bl	80064d0 <HAL_TIM_IC_CaptureCallback>
 8006236:	e005      	b.n	8006244 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f93f 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f950 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b00      	cmp	r3, #0
 8006252:	d020      	beq.n	8006296 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01b      	beq.n	8006296 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f06f 0210 	mvn.w	r2, #16
 8006266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2208      	movs	r2, #8
 800626c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f927 	bl	80064d0 <HAL_TIM_IC_CaptureCallback>
 8006282:	e005      	b.n	8006290 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f919 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f92a 	bl	80064e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00c      	beq.n	80062ba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f06f 0201 	mvn.w	r2, #1
 80062b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7fc fc99 	bl	8002bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00c      	beq.n	80062de <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fae3 	bl	80068a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00c      	beq.n	8006302 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f8fb 	bl	80064f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f003 0320 	and.w	r3, r3, #32
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00c      	beq.n	8006326 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f06f 0220 	mvn.w	r2, #32
 800631e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fab5 	bl	8006890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_TIM_ConfigClockSource+0x1c>
 8006346:	2302      	movs	r3, #2
 8006348:	e0b4      	b.n	80064b4 <HAL_TIM_ConfigClockSource+0x186>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006368:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006370:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006382:	d03e      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0xd4>
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006388:	f200 8087 	bhi.w	800649a <HAL_TIM_ConfigClockSource+0x16c>
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006390:	f000 8086 	beq.w	80064a0 <HAL_TIM_ConfigClockSource+0x172>
 8006394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006398:	d87f      	bhi.n	800649a <HAL_TIM_ConfigClockSource+0x16c>
 800639a:	2b70      	cmp	r3, #112	@ 0x70
 800639c:	d01a      	beq.n	80063d4 <HAL_TIM_ConfigClockSource+0xa6>
 800639e:	2b70      	cmp	r3, #112	@ 0x70
 80063a0:	d87b      	bhi.n	800649a <HAL_TIM_ConfigClockSource+0x16c>
 80063a2:	2b60      	cmp	r3, #96	@ 0x60
 80063a4:	d050      	beq.n	8006448 <HAL_TIM_ConfigClockSource+0x11a>
 80063a6:	2b60      	cmp	r3, #96	@ 0x60
 80063a8:	d877      	bhi.n	800649a <HAL_TIM_ConfigClockSource+0x16c>
 80063aa:	2b50      	cmp	r3, #80	@ 0x50
 80063ac:	d03c      	beq.n	8006428 <HAL_TIM_ConfigClockSource+0xfa>
 80063ae:	2b50      	cmp	r3, #80	@ 0x50
 80063b0:	d873      	bhi.n	800649a <HAL_TIM_ConfigClockSource+0x16c>
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d058      	beq.n	8006468 <HAL_TIM_ConfigClockSource+0x13a>
 80063b6:	2b40      	cmp	r3, #64	@ 0x40
 80063b8:	d86f      	bhi.n	800649a <HAL_TIM_ConfigClockSource+0x16c>
 80063ba:	2b30      	cmp	r3, #48	@ 0x30
 80063bc:	d064      	beq.n	8006488 <HAL_TIM_ConfigClockSource+0x15a>
 80063be:	2b30      	cmp	r3, #48	@ 0x30
 80063c0:	d86b      	bhi.n	800649a <HAL_TIM_ConfigClockSource+0x16c>
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d060      	beq.n	8006488 <HAL_TIM_ConfigClockSource+0x15a>
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d867      	bhi.n	800649a <HAL_TIM_ConfigClockSource+0x16c>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d05c      	beq.n	8006488 <HAL_TIM_ConfigClockSource+0x15a>
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d05a      	beq.n	8006488 <HAL_TIM_ConfigClockSource+0x15a>
 80063d2:	e062      	b.n	800649a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063e4:	f000 f9b8 	bl	8006758 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	609a      	str	r2, [r3, #8]
      break;
 8006400:	e04f      	b.n	80064a2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006412:	f000 f9a1 	bl	8006758 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006424:	609a      	str	r2, [r3, #8]
      break;
 8006426:	e03c      	b.n	80064a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006434:	461a      	mov	r2, r3
 8006436:	f000 f915 	bl	8006664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2150      	movs	r1, #80	@ 0x50
 8006440:	4618      	mov	r0, r3
 8006442:	f000 f96e 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 8006446:	e02c      	b.n	80064a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006454:	461a      	mov	r2, r3
 8006456:	f000 f934 	bl	80066c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2160      	movs	r1, #96	@ 0x60
 8006460:	4618      	mov	r0, r3
 8006462:	f000 f95e 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 8006466:	e01c      	b.n	80064a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006474:	461a      	mov	r2, r3
 8006476:	f000 f8f5 	bl	8006664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2140      	movs	r1, #64	@ 0x40
 8006480:	4618      	mov	r0, r3
 8006482:	f000 f94e 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 8006486:	e00c      	b.n	80064a2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f000 f945 	bl	8006722 <TIM_ITRx_SetConfig>
      break;
 8006498:	e003      	b.n	80064a2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	73fb      	strb	r3, [r7, #15]
      break;
 800649e:	e000      	b.n	80064a2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a46      	ldr	r2, [pc, #280]	@ (8006638 <TIM_Base_SetConfig+0x12c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d013      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652a:	d00f      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a43      	ldr	r2, [pc, #268]	@ (800663c <TIM_Base_SetConfig+0x130>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00b      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a42      	ldr	r2, [pc, #264]	@ (8006640 <TIM_Base_SetConfig+0x134>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d007      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a41      	ldr	r2, [pc, #260]	@ (8006644 <TIM_Base_SetConfig+0x138>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d003      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a40      	ldr	r2, [pc, #256]	@ (8006648 <TIM_Base_SetConfig+0x13c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d108      	bne.n	800655e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a35      	ldr	r2, [pc, #212]	@ (8006638 <TIM_Base_SetConfig+0x12c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d02b      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656c:	d027      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a32      	ldr	r2, [pc, #200]	@ (800663c <TIM_Base_SetConfig+0x130>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d023      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a31      	ldr	r2, [pc, #196]	@ (8006640 <TIM_Base_SetConfig+0x134>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01f      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a30      	ldr	r2, [pc, #192]	@ (8006644 <TIM_Base_SetConfig+0x138>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01b      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2f      	ldr	r2, [pc, #188]	@ (8006648 <TIM_Base_SetConfig+0x13c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d017      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2e      	ldr	r2, [pc, #184]	@ (800664c <TIM_Base_SetConfig+0x140>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2d      	ldr	r2, [pc, #180]	@ (8006650 <TIM_Base_SetConfig+0x144>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00f      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006654 <TIM_Base_SetConfig+0x148>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00b      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006658 <TIM_Base_SetConfig+0x14c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d007      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2a      	ldr	r2, [pc, #168]	@ (800665c <TIM_Base_SetConfig+0x150>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a29      	ldr	r2, [pc, #164]	@ (8006660 <TIM_Base_SetConfig+0x154>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d108      	bne.n	80065d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a10      	ldr	r2, [pc, #64]	@ (8006638 <TIM_Base_SetConfig+0x12c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d003      	beq.n	8006604 <TIM_Base_SetConfig+0xf8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a12      	ldr	r2, [pc, #72]	@ (8006648 <TIM_Base_SetConfig+0x13c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d103      	bne.n	800660c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d105      	bne.n	800662a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f023 0201 	bic.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	611a      	str	r2, [r3, #16]
  }
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40010400 	.word	0x40010400
 800664c:	40014000 	.word	0x40014000
 8006650:	40014400 	.word	0x40014400
 8006654:	40014800 	.word	0x40014800
 8006658:	40001800 	.word	0x40001800
 800665c:	40001c00 	.word	0x40001c00
 8006660:	40002000 	.word	0x40002000

08006664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f023 0201 	bic.w	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800668e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f023 030a 	bic.w	r3, r3, #10
 80066a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	621a      	str	r2, [r3, #32]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b087      	sub	sp, #28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	f023 0210 	bic.w	r2, r3, #16
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	031b      	lsls	r3, r3, #12
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	f043 0307 	orr.w	r3, r3, #7
 8006744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	021a      	lsls	r2, r3, #8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	431a      	orrs	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4313      	orrs	r3, r2
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	609a      	str	r2, [r3, #8]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e05a      	b.n	8006866 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a21      	ldr	r2, [pc, #132]	@ (8006874 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d022      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067fc:	d01d      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1d      	ldr	r2, [pc, #116]	@ (8006878 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d018      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1b      	ldr	r2, [pc, #108]	@ (800687c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d013      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a1a      	ldr	r2, [pc, #104]	@ (8006880 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00e      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a18      	ldr	r2, [pc, #96]	@ (8006884 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d009      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a17      	ldr	r2, [pc, #92]	@ (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a15      	ldr	r2, [pc, #84]	@ (800688c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d10c      	bne.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006840:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	4313      	orrs	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40010000 	.word	0x40010000
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40010400 	.word	0x40010400
 8006888:	40014000 	.word	0x40014000
 800688c:	40001800 	.word	0x40001800

08006890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e042      	b.n	8006950 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7fd f87a 	bl	80039d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2224      	movs	r2, #36	@ 0x24
 80068e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa09 	bl	8006d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695a      	ldr	r2, [r3, #20]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	@ 0x28
 800695c:	af02      	add	r7, sp, #8
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	4613      	mov	r3, r2
 8006966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b20      	cmp	r3, #32
 8006976:	d175      	bne.n	8006a64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_UART_Transmit+0x2c>
 800697e:	88fb      	ldrh	r3, [r7, #6]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e06e      	b.n	8006a66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2221      	movs	r2, #33	@ 0x21
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006996:	f7fd f8f7 	bl	8003b88 <HAL_GetTick>
 800699a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	88fa      	ldrh	r2, [r7, #6]
 80069a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	88fa      	ldrh	r2, [r7, #6]
 80069a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b0:	d108      	bne.n	80069c4 <HAL_UART_Transmit+0x6c>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d104      	bne.n	80069c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	e003      	b.n	80069cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069cc:	e02e      	b.n	8006a2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2200      	movs	r2, #0
 80069d6:	2180      	movs	r1, #128	@ 0x80
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f8df 	bl	8006b9c <UART_WaitOnFlagUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e03a      	b.n	8006a66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	3302      	adds	r3, #2
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	e007      	b.n	8006a1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1cb      	bne.n	80069ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2140      	movs	r1, #64	@ 0x40
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f8ab 	bl	8006b9c <UART_WaitOnFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e006      	b.n	8006a66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	e000      	b.n	8006a66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a64:	2302      	movs	r3, #2
  }
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3720      	adds	r7, #32
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b08a      	sub	sp, #40	@ 0x28
 8006a72:	af02      	add	r7, sp, #8
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	603b      	str	r3, [r7, #0]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	f040 8081 	bne.w	8006b92 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <HAL_UART_Receive+0x2e>
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e079      	b.n	8006b94 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2222      	movs	r2, #34	@ 0x22
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ab4:	f7fd f868 	bl	8003b88 <HAL_GetTick>
 8006ab8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ace:	d108      	bne.n	8006ae2 <HAL_UART_Receive+0x74>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	61bb      	str	r3, [r7, #24]
 8006ae0:	e003      	b.n	8006aea <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006aea:	e047      	b.n	8006b7c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2200      	movs	r2, #0
 8006af4:	2120      	movs	r1, #32
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f850 	bl	8006b9c <UART_WaitOnFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e042      	b.n	8006b94 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10c      	bne.n	8006b2e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	3302      	adds	r3, #2
 8006b2a:	61bb      	str	r3, [r7, #24]
 8006b2c:	e01f      	b.n	8006b6e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b36:	d007      	beq.n	8006b48 <HAL_UART_Receive+0xda>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <HAL_UART_Receive+0xe8>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	e008      	b.n	8006b68 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1b2      	bne.n	8006aec <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e000      	b.n	8006b94 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
  }
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3720      	adds	r7, #32
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bac:	e03b      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d037      	beq.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb6:	f7fc ffe7 	bl	8003b88 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	6a3a      	ldr	r2, [r7, #32]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d302      	bcc.n	8006bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e03a      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d023      	beq.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b80      	cmp	r3, #128	@ 0x80
 8006be2:	d020      	beq.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b40      	cmp	r3, #64	@ 0x40
 8006be8:	d01d      	beq.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d116      	bne.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f81d 	bl	8006c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2208      	movs	r2, #8
 8006c18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e00f      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	bf0c      	ite	eq
 8006c36:	2301      	moveq	r3, #1
 8006c38:	2300      	movne	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d0b4      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b095      	sub	sp, #84	@ 0x54
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	330c      	adds	r3, #12
 8006c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	330c      	adds	r3, #12
 8006c74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c76:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e5      	bne.n	8006c56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3314      	adds	r3, #20
 8006c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3314      	adds	r3, #20
 8006ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e5      	bne.n	8006c8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d119      	bne.n	8006cfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f023 0310 	bic.w	r3, r3, #16
 8006cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ce6:	61ba      	str	r2, [r7, #24]
 8006ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6979      	ldr	r1, [r7, #20]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e5      	bne.n	8006cc6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d08:	bf00      	nop
 8006d0a:	3754      	adds	r7, #84	@ 0x54
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d18:	b0c0      	sub	sp, #256	@ 0x100
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d30:	68d9      	ldr	r1, [r3, #12]
 8006d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	ea40 0301 	orr.w	r3, r0, r1
 8006d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d6c:	f021 010c 	bic.w	r1, r1, #12
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8e:	6999      	ldr	r1, [r3, #24]
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	ea40 0301 	orr.w	r3, r0, r1
 8006d9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b8f      	ldr	r3, [pc, #572]	@ (8006fe0 <UART_SetConfig+0x2cc>)
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d005      	beq.n	8006db4 <UART_SetConfig+0xa0>
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b8d      	ldr	r3, [pc, #564]	@ (8006fe4 <UART_SetConfig+0x2d0>)
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d104      	bne.n	8006dbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006db4:	f7fd fe7e 	bl	8004ab4 <HAL_RCC_GetPCLK2Freq>
 8006db8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006dbc:	e003      	b.n	8006dc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dbe:	f7fd fe65 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 8006dc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dd0:	f040 810c 	bne.w	8006fec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006dde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006de2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006de6:	4622      	mov	r2, r4
 8006de8:	462b      	mov	r3, r5
 8006dea:	1891      	adds	r1, r2, r2
 8006dec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006dee:	415b      	adcs	r3, r3
 8006df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006df2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006df6:	4621      	mov	r1, r4
 8006df8:	eb12 0801 	adds.w	r8, r2, r1
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	eb43 0901 	adc.w	r9, r3, r1
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e16:	4690      	mov	r8, r2
 8006e18:	4699      	mov	r9, r3
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	eb18 0303 	adds.w	r3, r8, r3
 8006e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e24:	462b      	mov	r3, r5
 8006e26:	eb49 0303 	adc.w	r3, r9, r3
 8006e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e42:	460b      	mov	r3, r1
 8006e44:	18db      	adds	r3, r3, r3
 8006e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e48:	4613      	mov	r3, r2
 8006e4a:	eb42 0303 	adc.w	r3, r2, r3
 8006e4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e58:	f7f9 ff86 	bl	8000d68 <__aeabi_uldivmod>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4b61      	ldr	r3, [pc, #388]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006e62:	fba3 2302 	umull	r2, r3, r3, r2
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	011c      	lsls	r4, r3, #4
 8006e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	464b      	mov	r3, r9
 8006e80:	1891      	adds	r1, r2, r2
 8006e82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e84:	415b      	adcs	r3, r3
 8006e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006e92:	4649      	mov	r1, r9
 8006e94:	eb43 0b01 	adc.w	fp, r3, r1
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eac:	4692      	mov	sl, r2
 8006eae:	469b      	mov	fp, r3
 8006eb0:	4643      	mov	r3, r8
 8006eb2:	eb1a 0303 	adds.w	r3, sl, r3
 8006eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8006ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ed0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	18db      	adds	r3, r3, r3
 8006edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ede:	4613      	mov	r3, r2
 8006ee0:	eb42 0303 	adc.w	r3, r2, r3
 8006ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006eea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006eee:	f7f9 ff3b 	bl	8000d68 <__aeabi_uldivmod>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006efa:	fba3 2301 	umull	r2, r3, r3, r1
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	2264      	movs	r2, #100	@ 0x64
 8006f02:	fb02 f303 	mul.w	r3, r2, r3
 8006f06:	1acb      	subs	r3, r1, r3
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f0e:	4b36      	ldr	r3, [pc, #216]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006f10:	fba3 2302 	umull	r2, r3, r3, r2
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f1c:	441c      	add	r4, r3
 8006f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	1891      	adds	r1, r2, r2
 8006f36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f38:	415b      	adcs	r3, r3
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f40:	4641      	mov	r1, r8
 8006f42:	1851      	adds	r1, r2, r1
 8006f44:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f46:	4649      	mov	r1, r9
 8006f48:	414b      	adcs	r3, r1
 8006f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f58:	4659      	mov	r1, fp
 8006f5a:	00cb      	lsls	r3, r1, #3
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f62:	4651      	mov	r1, sl
 8006f64:	00ca      	lsls	r2, r1, #3
 8006f66:	4610      	mov	r0, r2
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	189b      	adds	r3, r3, r2
 8006f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f74:	464b      	mov	r3, r9
 8006f76:	460a      	mov	r2, r1
 8006f78:	eb42 0303 	adc.w	r3, r2, r3
 8006f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f94:	460b      	mov	r3, r1
 8006f96:	18db      	adds	r3, r3, r3
 8006f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	eb42 0303 	adc.w	r3, r2, r3
 8006fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006faa:	f7f9 fedd 	bl	8000d68 <__aeabi_uldivmod>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	2164      	movs	r1, #100	@ 0x64
 8006fbc:	fb01 f303 	mul.w	r3, r1, r3
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	3332      	adds	r3, #50	@ 0x32
 8006fc6:	4a08      	ldr	r2, [pc, #32]	@ (8006fe8 <UART_SetConfig+0x2d4>)
 8006fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	f003 0207 	and.w	r2, r3, #7
 8006fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4422      	add	r2, r4
 8006fda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fdc:	e106      	b.n	80071ec <UART_SetConfig+0x4d8>
 8006fde:	bf00      	nop
 8006fe0:	40011000 	.word	0x40011000
 8006fe4:	40011400 	.word	0x40011400
 8006fe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ffe:	4642      	mov	r2, r8
 8007000:	464b      	mov	r3, r9
 8007002:	1891      	adds	r1, r2, r2
 8007004:	6239      	str	r1, [r7, #32]
 8007006:	415b      	adcs	r3, r3
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
 800700a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800700e:	4641      	mov	r1, r8
 8007010:	1854      	adds	r4, r2, r1
 8007012:	4649      	mov	r1, r9
 8007014:	eb43 0501 	adc.w	r5, r3, r1
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	00eb      	lsls	r3, r5, #3
 8007022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007026:	00e2      	lsls	r2, r4, #3
 8007028:	4614      	mov	r4, r2
 800702a:	461d      	mov	r5, r3
 800702c:	4643      	mov	r3, r8
 800702e:	18e3      	adds	r3, r4, r3
 8007030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007034:	464b      	mov	r3, r9
 8007036:	eb45 0303 	adc.w	r3, r5, r3
 800703a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800703e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800704a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800705a:	4629      	mov	r1, r5
 800705c:	008b      	lsls	r3, r1, #2
 800705e:	4621      	mov	r1, r4
 8007060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007064:	4621      	mov	r1, r4
 8007066:	008a      	lsls	r2, r1, #2
 8007068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800706c:	f7f9 fe7c 	bl	8000d68 <__aeabi_uldivmod>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4b60      	ldr	r3, [pc, #384]	@ (80071f8 <UART_SetConfig+0x4e4>)
 8007076:	fba3 2302 	umull	r2, r3, r3, r2
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	011c      	lsls	r4, r3, #4
 800707e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007082:	2200      	movs	r2, #0
 8007084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007088:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800708c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	1891      	adds	r1, r2, r2
 8007096:	61b9      	str	r1, [r7, #24]
 8007098:	415b      	adcs	r3, r3
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070a0:	4641      	mov	r1, r8
 80070a2:	1851      	adds	r1, r2, r1
 80070a4:	6139      	str	r1, [r7, #16]
 80070a6:	4649      	mov	r1, r9
 80070a8:	414b      	adcs	r3, r1
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070b8:	4659      	mov	r1, fp
 80070ba:	00cb      	lsls	r3, r1, #3
 80070bc:	4651      	mov	r1, sl
 80070be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070c2:	4651      	mov	r1, sl
 80070c4:	00ca      	lsls	r2, r1, #3
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	4642      	mov	r2, r8
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070d4:	464b      	mov	r3, r9
 80070d6:	460a      	mov	r2, r1
 80070d8:	eb42 0303 	adc.w	r3, r2, r3
 80070dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80070f8:	4649      	mov	r1, r9
 80070fa:	008b      	lsls	r3, r1, #2
 80070fc:	4641      	mov	r1, r8
 80070fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007102:	4641      	mov	r1, r8
 8007104:	008a      	lsls	r2, r1, #2
 8007106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800710a:	f7f9 fe2d 	bl	8000d68 <__aeabi_uldivmod>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4611      	mov	r1, r2
 8007114:	4b38      	ldr	r3, [pc, #224]	@ (80071f8 <UART_SetConfig+0x4e4>)
 8007116:	fba3 2301 	umull	r2, r3, r3, r1
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	2264      	movs	r2, #100	@ 0x64
 800711e:	fb02 f303 	mul.w	r3, r2, r3
 8007122:	1acb      	subs	r3, r1, r3
 8007124:	011b      	lsls	r3, r3, #4
 8007126:	3332      	adds	r3, #50	@ 0x32
 8007128:	4a33      	ldr	r2, [pc, #204]	@ (80071f8 <UART_SetConfig+0x4e4>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007134:	441c      	add	r4, r3
 8007136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800713a:	2200      	movs	r2, #0
 800713c:	673b      	str	r3, [r7, #112]	@ 0x70
 800713e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007140:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	1891      	adds	r1, r2, r2
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	415b      	adcs	r3, r3
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007154:	4641      	mov	r1, r8
 8007156:	1851      	adds	r1, r2, r1
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	4649      	mov	r1, r9
 800715c:	414b      	adcs	r3, r1
 800715e:	607b      	str	r3, [r7, #4]
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800716c:	4659      	mov	r1, fp
 800716e:	00cb      	lsls	r3, r1, #3
 8007170:	4651      	mov	r1, sl
 8007172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007176:	4651      	mov	r1, sl
 8007178:	00ca      	lsls	r2, r1, #3
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	4603      	mov	r3, r0
 8007180:	4642      	mov	r2, r8
 8007182:	189b      	adds	r3, r3, r2
 8007184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007186:	464b      	mov	r3, r9
 8007188:	460a      	mov	r2, r1
 800718a:	eb42 0303 	adc.w	r3, r2, r3
 800718e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	663b      	str	r3, [r7, #96]	@ 0x60
 800719a:	667a      	str	r2, [r7, #100]	@ 0x64
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	f04f 0300 	mov.w	r3, #0
 80071a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071a8:	4649      	mov	r1, r9
 80071aa:	008b      	lsls	r3, r1, #2
 80071ac:	4641      	mov	r1, r8
 80071ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071b2:	4641      	mov	r1, r8
 80071b4:	008a      	lsls	r2, r1, #2
 80071b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80071ba:	f7f9 fdd5 	bl	8000d68 <__aeabi_uldivmod>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4b0d      	ldr	r3, [pc, #52]	@ (80071f8 <UART_SetConfig+0x4e4>)
 80071c4:	fba3 1302 	umull	r1, r3, r3, r2
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	2164      	movs	r1, #100	@ 0x64
 80071cc:	fb01 f303 	mul.w	r3, r1, r3
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	3332      	adds	r3, #50	@ 0x32
 80071d6:	4a08      	ldr	r2, [pc, #32]	@ (80071f8 <UART_SetConfig+0x4e4>)
 80071d8:	fba2 2303 	umull	r2, r3, r2, r3
 80071dc:	095b      	lsrs	r3, r3, #5
 80071de:	f003 020f 	and.w	r2, r3, #15
 80071e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4422      	add	r2, r4
 80071ea:	609a      	str	r2, [r3, #8]
}
 80071ec:	bf00      	nop
 80071ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80071f2:	46bd      	mov	sp, r7
 80071f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071f8:	51eb851f 	.word	0x51eb851f

080071fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007200:	4904      	ldr	r1, [pc, #16]	@ (8007214 <MX_FATFS_Init+0x18>)
 8007202:	4805      	ldr	r0, [pc, #20]	@ (8007218 <MX_FATFS_Init+0x1c>)
 8007204:	f003 fb40 	bl	800a888 <FATFS_LinkDriver>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	4b03      	ldr	r3, [pc, #12]	@ (800721c <MX_FATFS_Init+0x20>)
 800720e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007210:	bf00      	nop
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000f24 	.word	0x20000f24
 8007218:	20000020 	.word	0x20000020
 800721c:	20000f20 	.word	0x20000f20

08007220 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007224:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007226:	4618      	mov	r0, r3
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	4618      	mov	r0, r3
 800723e:	f000 f9d7 	bl	80075f0 <USER_SPI_initialize>
 8007242:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fab5 	bl	80077c8 <USER_SPI_status>
 800725e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4603      	mov	r3, r0
 8007276:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8007278:	7bf8      	ldrb	r0, [r7, #15]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	f000 fab8 	bl	80077f4 <USER_SPI_read>
 8007284:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	4603      	mov	r3, r0
 800729c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800729e:	7bf8      	ldrb	r0, [r7, #15]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	f000 fb0b 	bl	80078c0 <USER_SPI_write>
 80072aa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	603a      	str	r2, [r7, #0]
 80072be:	71fb      	strb	r3, [r7, #7]
 80072c0:	460b      	mov	r3, r1
 80072c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80072c4:	79b9      	ldrb	r1, [r7, #6]
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fb74 	bl	80079b8 <USER_SPI_ioctl>
 80072d0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80072e4:	f7fc fc50 	bl	8003b88 <HAL_GetTick>
 80072e8:	4603      	mov	r3, r0
 80072ea:	4a04      	ldr	r2, [pc, #16]	@ (80072fc <SPI_Timer_On+0x20>)
 80072ec:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80072ee:	4a04      	ldr	r2, [pc, #16]	@ (8007300 <SPI_Timer_On+0x24>)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6013      	str	r3, [r2, #0]
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20000f2c 	.word	0x20000f2c
 8007300:	20000f30 	.word	0x20000f30

08007304 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007308:	f7fc fc3e 	bl	8003b88 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	4b06      	ldr	r3, [pc, #24]	@ (8007328 <SPI_Timer_Status+0x24>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	4b05      	ldr	r3, [pc, #20]	@ (800732c <SPI_Timer_Status+0x28>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	bf34      	ite	cc
 800731c:	2301      	movcc	r3, #1
 800731e:	2300      	movcs	r3, #0
 8007320:	b2db      	uxtb	r3, r3
}
 8007322:	4618      	mov	r0, r3
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000f2c 	.word	0x20000f2c
 800732c:	20000f30 	.word	0x20000f30

08007330 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af02      	add	r7, sp, #8
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800733a:	f107 020f 	add.w	r2, r7, #15
 800733e:	1df9      	adds	r1, r7, #7
 8007340:	2332      	movs	r3, #50	@ 0x32
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	2301      	movs	r3, #1
 8007346:	4804      	ldr	r0, [pc, #16]	@ (8007358 <xchg_spi+0x28>)
 8007348:	f7fe f9dd 	bl	8005706 <HAL_SPI_TransmitReceive>
    return rxDat;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000ce8 	.word	0x20000ce8

0800735c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800735c:	b590      	push	{r4, r7, lr}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	e00a      	b.n	8007382 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	18d4      	adds	r4, r2, r3
 8007372:	20ff      	movs	r0, #255	@ 0xff
 8007374:	f7ff ffdc 	bl	8007330 <xchg_spi>
 8007378:	4603      	mov	r3, r0
 800737a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d3f0      	bcc.n	800736c <rcvr_spi_multi+0x10>
	}
}
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	bd90      	pop	{r4, r7, pc}

08007394 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	f04f 33ff 	mov.w	r3, #4294967295
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	4803      	ldr	r0, [pc, #12]	@ (80073b8 <xmit_spi_multi+0x24>)
 80073aa:	f7fe f868 	bl	800547e <HAL_SPI_Transmit>
}
 80073ae:	bf00      	nop
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000ce8 	.word	0x20000ce8

080073bc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80073c4:	f7fc fbe0 	bl	8003b88 <HAL_GetTick>
 80073c8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80073ce:	20ff      	movs	r0, #255	@ 0xff
 80073d0:	f7ff ffae 	bl	8007330 <xchg_spi>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	2bff      	cmp	r3, #255	@ 0xff
 80073dc:	d007      	beq.n	80073ee <wait_ready+0x32>
 80073de:	f7fc fbd3 	bl	8003b88 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d8ef      	bhi.n	80073ce <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	2bff      	cmp	r3, #255	@ 0xff
 80073f2:	bf0c      	ite	eq
 80073f4:	2301      	moveq	r3, #1
 80073f6:	2300      	movne	r3, #0
 80073f8:	b2db      	uxtb	r3, r3
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007408:	2201      	movs	r2, #1
 800740a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800740e:	4804      	ldr	r0, [pc, #16]	@ (8007420 <despiselect+0x1c>)
 8007410:	f7fd fa18 	bl	8004844 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007414:	20ff      	movs	r0, #255	@ 0xff
 8007416:	f7ff ff8b 	bl	8007330 <xchg_spi>

}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40020000 	.word	0x40020000

08007424 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007428:	2200      	movs	r2, #0
 800742a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800742e:	480a      	ldr	r0, [pc, #40]	@ (8007458 <spiselect+0x34>)
 8007430:	f7fd fa08 	bl	8004844 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007434:	20ff      	movs	r0, #255	@ 0xff
 8007436:	f7ff ff7b 	bl	8007330 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800743a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800743e:	f7ff ffbd 	bl	80073bc <wait_ready>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <spiselect+0x28>
 8007448:	2301      	movs	r3, #1
 800744a:	e002      	b.n	8007452 <spiselect+0x2e>

	despiselect();
 800744c:	f7ff ffda 	bl	8007404 <despiselect>
	return 0;	/* Timeout */
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40020000 	.word	0x40020000

0800745c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007466:	20c8      	movs	r0, #200	@ 0xc8
 8007468:	f7ff ff38 	bl	80072dc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800746c:	20ff      	movs	r0, #255	@ 0xff
 800746e:	f7ff ff5f 	bl	8007330 <xchg_spi>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	2bff      	cmp	r3, #255	@ 0xff
 800747a:	d104      	bne.n	8007486 <rcvr_datablock+0x2a>
 800747c:	f7ff ff42 	bl	8007304 <SPI_Timer_Status>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f2      	bne.n	800746c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	2bfe      	cmp	r3, #254	@ 0xfe
 800748a:	d001      	beq.n	8007490 <rcvr_datablock+0x34>
 800748c:	2300      	movs	r3, #0
 800748e:	e00a      	b.n	80074a6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff ff62 	bl	800735c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007498:	20ff      	movs	r0, #255	@ 0xff
 800749a:	f7ff ff49 	bl	8007330 <xchg_spi>
 800749e:	20ff      	movs	r0, #255	@ 0xff
 80074a0:	f7ff ff46 	bl	8007330 <xchg_spi>

	return 1;						/* Function succeeded */
 80074a4:	2301      	movs	r3, #1
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80074ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80074be:	f7ff ff7d 	bl	80073bc <wait_ready>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <xmit_datablock+0x1e>
 80074c8:	2300      	movs	r3, #0
 80074ca:	e01e      	b.n	800750a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff ff2e 	bl	8007330 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	2bfd      	cmp	r3, #253	@ 0xfd
 80074d8:	d016      	beq.n	8007508 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80074da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff ff58 	bl	8007394 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80074e4:	20ff      	movs	r0, #255	@ 0xff
 80074e6:	f7ff ff23 	bl	8007330 <xchg_spi>
 80074ea:	20ff      	movs	r0, #255	@ 0xff
 80074ec:	f7ff ff20 	bl	8007330 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80074f0:	20ff      	movs	r0, #255	@ 0xff
 80074f2:	f7ff ff1d 	bl	8007330 <xchg_spi>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	2b05      	cmp	r3, #5
 8007502:	d001      	beq.n	8007508 <xmit_datablock+0x5a>
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <xmit_datablock+0x5c>
	}
	return 1;
 8007508:	2301      	movs	r3, #1
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	4603      	mov	r3, r0
 800751a:	6039      	str	r1, [r7, #0]
 800751c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800751e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007522:	2b00      	cmp	r3, #0
 8007524:	da0e      	bge.n	8007544 <send_cmd+0x32>
		cmd &= 0x7F;
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800752c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800752e:	2100      	movs	r1, #0
 8007530:	2037      	movs	r0, #55	@ 0x37
 8007532:	f7ff ffee 	bl	8007512 <send_cmd>
 8007536:	4603      	mov	r3, r0
 8007538:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d901      	bls.n	8007544 <send_cmd+0x32>
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	e051      	b.n	80075e8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	2b0c      	cmp	r3, #12
 8007548:	d008      	beq.n	800755c <send_cmd+0x4a>
		despiselect();
 800754a:	f7ff ff5b 	bl	8007404 <despiselect>
		if (!spiselect()) return 0xFF;
 800754e:	f7ff ff69 	bl	8007424 <spiselect>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <send_cmd+0x4a>
 8007558:	23ff      	movs	r3, #255	@ 0xff
 800755a:	e045      	b.n	80075e8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800755c:	79fb      	ldrb	r3, [r7, #7]
 800755e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007562:	b2db      	uxtb	r3, r3
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fee3 	bl	8007330 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	b2db      	uxtb	r3, r3
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff fedd 	bl	8007330 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	b2db      	uxtb	r3, r3
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fed7 	bl	8007330 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	0a1b      	lsrs	r3, r3, #8
 8007586:	b2db      	uxtb	r3, r3
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff fed1 	bl	8007330 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff fecc 	bl	8007330 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <send_cmd+0x94>
 80075a2:	2395      	movs	r3, #149	@ 0x95
 80075a4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d101      	bne.n	80075b0 <send_cmd+0x9e>
 80075ac:	2387      	movs	r3, #135	@ 0x87
 80075ae:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff febc 	bl	8007330 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	2b0c      	cmp	r3, #12
 80075bc:	d102      	bne.n	80075c4 <send_cmd+0xb2>
 80075be:	20ff      	movs	r0, #255	@ 0xff
 80075c0:	f7ff feb6 	bl	8007330 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80075c4:	230a      	movs	r3, #10
 80075c6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80075c8:	20ff      	movs	r0, #255	@ 0xff
 80075ca:	f7ff feb1 	bl	8007330 <xchg_spi>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80075d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	da05      	bge.n	80075e6 <send_cmd+0xd4>
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	3b01      	subs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f0      	bne.n	80075c8 <send_cmd+0xb6>

	return res;							/* Return received response */
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <USER_SPI_initialize+0x14>
 8007600:	2301      	movs	r3, #1
 8007602:	e0d6      	b.n	80077b2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007604:	4b6d      	ldr	r3, [pc, #436]	@ (80077bc <USER_SPI_initialize+0x1cc>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <USER_SPI_initialize+0x2a>
 8007612:	4b6a      	ldr	r3, [pc, #424]	@ (80077bc <USER_SPI_initialize+0x1cc>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	e0cb      	b.n	80077b2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800761a:	4b69      	ldr	r3, [pc, #420]	@ (80077c0 <USER_SPI_initialize+0x1d0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007624:	4b66      	ldr	r3, [pc, #408]	@ (80077c0 <USER_SPI_initialize+0x1d0>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800762c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800762e:	230a      	movs	r3, #10
 8007630:	73fb      	strb	r3, [r7, #15]
 8007632:	e005      	b.n	8007640 <USER_SPI_initialize+0x50>
 8007634:	20ff      	movs	r0, #255	@ 0xff
 8007636:	f7ff fe7b 	bl	8007330 <xchg_spi>
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	3b01      	subs	r3, #1
 800763e:	73fb      	strb	r3, [r7, #15]
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f6      	bne.n	8007634 <USER_SPI_initialize+0x44>

	ty = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800764a:	2100      	movs	r1, #0
 800764c:	2000      	movs	r0, #0
 800764e:	f7ff ff60 	bl	8007512 <send_cmd>
 8007652:	4603      	mov	r3, r0
 8007654:	2b01      	cmp	r3, #1
 8007656:	f040 808b 	bne.w	8007770 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800765a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800765e:	f7ff fe3d 	bl	80072dc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007662:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007666:	2008      	movs	r0, #8
 8007668:	f7ff ff53 	bl	8007512 <send_cmd>
 800766c:	4603      	mov	r3, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	d151      	bne.n	8007716 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]
 8007676:	e00d      	b.n	8007694 <USER_SPI_initialize+0xa4>
 8007678:	7bfc      	ldrb	r4, [r7, #15]
 800767a:	20ff      	movs	r0, #255	@ 0xff
 800767c:	f7ff fe58 	bl	8007330 <xchg_spi>
 8007680:	4603      	mov	r3, r0
 8007682:	461a      	mov	r2, r3
 8007684:	f104 0310 	add.w	r3, r4, #16
 8007688:	443b      	add	r3, r7
 800768a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	3301      	adds	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	2b03      	cmp	r3, #3
 8007698:	d9ee      	bls.n	8007678 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800769a:	7abb      	ldrb	r3, [r7, #10]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d167      	bne.n	8007770 <USER_SPI_initialize+0x180>
 80076a0:	7afb      	ldrb	r3, [r7, #11]
 80076a2:	2baa      	cmp	r3, #170	@ 0xaa
 80076a4:	d164      	bne.n	8007770 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80076a6:	bf00      	nop
 80076a8:	f7ff fe2c 	bl	8007304 <SPI_Timer_Status>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <USER_SPI_initialize+0xd2>
 80076b2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80076b6:	20a9      	movs	r0, #169	@ 0xa9
 80076b8:	f7ff ff2b 	bl	8007512 <send_cmd>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1f2      	bne.n	80076a8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80076c2:	f7ff fe1f 	bl	8007304 <SPI_Timer_Status>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d051      	beq.n	8007770 <USER_SPI_initialize+0x180>
 80076cc:	2100      	movs	r1, #0
 80076ce:	203a      	movs	r0, #58	@ 0x3a
 80076d0:	f7ff ff1f 	bl	8007512 <send_cmd>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d14a      	bne.n	8007770 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
 80076de:	e00d      	b.n	80076fc <USER_SPI_initialize+0x10c>
 80076e0:	7bfc      	ldrb	r4, [r7, #15]
 80076e2:	20ff      	movs	r0, #255	@ 0xff
 80076e4:	f7ff fe24 	bl	8007330 <xchg_spi>
 80076e8:	4603      	mov	r3, r0
 80076ea:	461a      	mov	r2, r3
 80076ec:	f104 0310 	add.w	r3, r4, #16
 80076f0:	443b      	add	r3, r7
 80076f2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	3301      	adds	r3, #1
 80076fa:	73fb      	strb	r3, [r7, #15]
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d9ee      	bls.n	80076e0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007702:	7a3b      	ldrb	r3, [r7, #8]
 8007704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <USER_SPI_initialize+0x120>
 800770c:	230c      	movs	r3, #12
 800770e:	e000      	b.n	8007712 <USER_SPI_initialize+0x122>
 8007710:	2304      	movs	r3, #4
 8007712:	737b      	strb	r3, [r7, #13]
 8007714:	e02c      	b.n	8007770 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007716:	2100      	movs	r1, #0
 8007718:	20a9      	movs	r0, #169	@ 0xa9
 800771a:	f7ff fefa 	bl	8007512 <send_cmd>
 800771e:	4603      	mov	r3, r0
 8007720:	2b01      	cmp	r3, #1
 8007722:	d804      	bhi.n	800772e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007724:	2302      	movs	r3, #2
 8007726:	737b      	strb	r3, [r7, #13]
 8007728:	23a9      	movs	r3, #169	@ 0xa9
 800772a:	73bb      	strb	r3, [r7, #14]
 800772c:	e003      	b.n	8007736 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800772e:	2301      	movs	r3, #1
 8007730:	737b      	strb	r3, [r7, #13]
 8007732:	2301      	movs	r3, #1
 8007734:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007736:	bf00      	nop
 8007738:	f7ff fde4 	bl	8007304 <SPI_Timer_Status>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <USER_SPI_initialize+0x162>
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fee3 	bl	8007512 <send_cmd>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f2      	bne.n	8007738 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007752:	f7ff fdd7 	bl	8007304 <SPI_Timer_Status>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <USER_SPI_initialize+0x17c>
 800775c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007760:	2010      	movs	r0, #16
 8007762:	f7ff fed6 	bl	8007512 <send_cmd>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <USER_SPI_initialize+0x180>
				ty = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007770:	4a14      	ldr	r2, [pc, #80]	@ (80077c4 <USER_SPI_initialize+0x1d4>)
 8007772:	7b7b      	ldrb	r3, [r7, #13]
 8007774:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007776:	f7ff fe45 	bl	8007404 <despiselect>

	if (ty) {			/* OK */
 800777a:	7b7b      	ldrb	r3, [r7, #13]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d012      	beq.n	80077a6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007780:	4b0f      	ldr	r3, [pc, #60]	@ (80077c0 <USER_SPI_initialize+0x1d0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800778a:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <USER_SPI_initialize+0x1d0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0210 	orr.w	r2, r2, #16
 8007792:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007794:	4b09      	ldr	r3, [pc, #36]	@ (80077bc <USER_SPI_initialize+0x1cc>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <USER_SPI_initialize+0x1cc>)
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e002      	b.n	80077ac <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80077a6:	4b05      	ldr	r3, [pc, #20]	@ (80077bc <USER_SPI_initialize+0x1cc>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80077ac:	4b03      	ldr	r3, [pc, #12]	@ (80077bc <USER_SPI_initialize+0x1cc>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b2db      	uxtb	r3, r3
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd90      	pop	{r4, r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20000034 	.word	0x20000034
 80077c0:	20000ce8 	.word	0x20000ce8
 80077c4:	20000f28 	.word	0x20000f28

080077c8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <USER_SPI_status+0x14>
 80077d8:	2301      	movs	r3, #1
 80077da:	e002      	b.n	80077e2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80077dc:	4b04      	ldr	r3, [pc, #16]	@ (80077f0 <USER_SPI_status+0x28>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	b2db      	uxtb	r3, r3
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	20000034 	.word	0x20000034

080077f4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d102      	bne.n	8007810 <USER_SPI_read+0x1c>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <USER_SPI_read+0x20>
 8007810:	2304      	movs	r3, #4
 8007812:	e04d      	b.n	80078b0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007814:	4b28      	ldr	r3, [pc, #160]	@ (80078b8 <USER_SPI_read+0xc4>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <USER_SPI_read+0x32>
 8007822:	2303      	movs	r3, #3
 8007824:	e044      	b.n	80078b0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007826:	4b25      	ldr	r3, [pc, #148]	@ (80078bc <USER_SPI_read+0xc8>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d102      	bne.n	8007838 <USER_SPI_read+0x44>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	025b      	lsls	r3, r3, #9
 8007836:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d111      	bne.n	8007862 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	2011      	movs	r0, #17
 8007842:	f7ff fe66 	bl	8007512 <send_cmd>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d129      	bne.n	80078a0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800784c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007850:	68b8      	ldr	r0, [r7, #8]
 8007852:	f7ff fe03 	bl	800745c <rcvr_datablock>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d021      	beq.n	80078a0 <USER_SPI_read+0xac>
			count = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	e01e      	b.n	80078a0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	2012      	movs	r0, #18
 8007866:	f7ff fe54 	bl	8007512 <send_cmd>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d117      	bne.n	80078a0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007874:	68b8      	ldr	r0, [r7, #8]
 8007876:	f7ff fdf1 	bl	800745c <rcvr_datablock>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <USER_SPI_read+0xa2>
				buff += 512;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007886:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	3b01      	subs	r3, #1
 800788c:	603b      	str	r3, [r7, #0]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1ed      	bne.n	8007870 <USER_SPI_read+0x7c>
 8007894:	e000      	b.n	8007898 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007896:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007898:	2100      	movs	r1, #0
 800789a:	200c      	movs	r0, #12
 800789c:	f7ff fe39 	bl	8007512 <send_cmd>
		}
	}
	despiselect();
 80078a0:	f7ff fdb0 	bl	8007404 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bf14      	ite	ne
 80078aa:	2301      	movne	r3, #1
 80078ac:	2300      	moveq	r3, #0
 80078ae:	b2db      	uxtb	r3, r3
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20000034 	.word	0x20000034
 80078bc:	20000f28 	.word	0x20000f28

080078c0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	607a      	str	r2, [r7, #4]
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <USER_SPI_write+0x1c>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <USER_SPI_write+0x20>
 80078dc:	2304      	movs	r3, #4
 80078de:	e063      	b.n	80079a8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80078e0:	4b33      	ldr	r3, [pc, #204]	@ (80079b0 <USER_SPI_write+0xf0>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <USER_SPI_write+0x32>
 80078ee:	2303      	movs	r3, #3
 80078f0:	e05a      	b.n	80079a8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80078f2:	4b2f      	ldr	r3, [pc, #188]	@ (80079b0 <USER_SPI_write+0xf0>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <USER_SPI_write+0x44>
 8007900:	2302      	movs	r3, #2
 8007902:	e051      	b.n	80079a8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007904:	4b2b      	ldr	r3, [pc, #172]	@ (80079b4 <USER_SPI_write+0xf4>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <USER_SPI_write+0x56>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	025b      	lsls	r3, r3, #9
 8007914:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d110      	bne.n	800793e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	2018      	movs	r0, #24
 8007920:	f7ff fdf7 	bl	8007512 <send_cmd>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d136      	bne.n	8007998 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800792a:	21fe      	movs	r1, #254	@ 0xfe
 800792c:	68b8      	ldr	r0, [r7, #8]
 800792e:	f7ff fdbe 	bl	80074ae <xmit_datablock>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d02f      	beq.n	8007998 <USER_SPI_write+0xd8>
			count = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	e02c      	b.n	8007998 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800793e:	4b1d      	ldr	r3, [pc, #116]	@ (80079b4 <USER_SPI_write+0xf4>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f003 0306 	and.w	r3, r3, #6
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <USER_SPI_write+0x92>
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	2097      	movs	r0, #151	@ 0x97
 800794e:	f7ff fde0 	bl	8007512 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	2019      	movs	r0, #25
 8007956:	f7ff fddc 	bl	8007512 <send_cmd>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d11b      	bne.n	8007998 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007960:	21fc      	movs	r1, #252	@ 0xfc
 8007962:	68b8      	ldr	r0, [r7, #8]
 8007964:	f7ff fda3 	bl	80074ae <xmit_datablock>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <USER_SPI_write+0xc4>
				buff += 512;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007974:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	3b01      	subs	r3, #1
 800797a:	603b      	str	r3, [r7, #0]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1ee      	bne.n	8007960 <USER_SPI_write+0xa0>
 8007982:	e000      	b.n	8007986 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007984:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007986:	21fd      	movs	r1, #253	@ 0xfd
 8007988:	2000      	movs	r0, #0
 800798a:	f7ff fd90 	bl	80074ae <xmit_datablock>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <USER_SPI_write+0xd8>
 8007994:	2301      	movs	r3, #1
 8007996:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007998:	f7ff fd34 	bl	8007404 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bf14      	ite	ne
 80079a2:	2301      	movne	r3, #1
 80079a4:	2300      	moveq	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20000034 	.word	0x20000034
 80079b4:	20000f28 	.word	0x20000f28

080079b8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08c      	sub	sp, #48	@ 0x30
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	603a      	str	r2, [r7, #0]
 80079c2:	71fb      	strb	r3, [r7, #7]
 80079c4:	460b      	mov	r3, r1
 80079c6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <USER_SPI_ioctl+0x1a>
 80079ce:	2304      	movs	r3, #4
 80079d0:	e15a      	b.n	8007c88 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80079d2:	4baf      	ldr	r3, [pc, #700]	@ (8007c90 <USER_SPI_ioctl+0x2d8>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <USER_SPI_ioctl+0x2c>
 80079e0:	2303      	movs	r3, #3
 80079e2:	e151      	b.n	8007c88 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80079ea:	79bb      	ldrb	r3, [r7, #6]
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	f200 8136 	bhi.w	8007c5e <USER_SPI_ioctl+0x2a6>
 80079f2:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <USER_SPI_ioctl+0x40>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a0d 	.word	0x08007a0d
 80079fc:	08007a21 	.word	0x08007a21
 8007a00:	08007c5f 	.word	0x08007c5f
 8007a04:	08007acd 	.word	0x08007acd
 8007a08:	08007bc3 	.word	0x08007bc3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007a0c:	f7ff fd0a 	bl	8007424 <spiselect>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 8127 	beq.w	8007c66 <USER_SPI_ioctl+0x2ae>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007a1e:	e122      	b.n	8007c66 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007a20:	2100      	movs	r1, #0
 8007a22:	2009      	movs	r0, #9
 8007a24:	f7ff fd75 	bl	8007512 <send_cmd>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f040 811d 	bne.w	8007c6a <USER_SPI_ioctl+0x2b2>
 8007a30:	f107 030c 	add.w	r3, r7, #12
 8007a34:	2110      	movs	r1, #16
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fd10 	bl	800745c <rcvr_datablock>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 8113 	beq.w	8007c6a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007a44:	7b3b      	ldrb	r3, [r7, #12]
 8007a46:	099b      	lsrs	r3, r3, #6
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d111      	bne.n	8007a72 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007a4e:	7d7b      	ldrb	r3, [r7, #21]
 8007a50:	461a      	mov	r2, r3
 8007a52:	7d3b      	ldrb	r3, [r7, #20]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	4413      	add	r3, r2
 8007a58:	461a      	mov	r2, r3
 8007a5a:	7cfb      	ldrb	r3, [r7, #19]
 8007a5c:	041b      	lsls	r3, r3, #16
 8007a5e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007a62:	4413      	add	r3, r2
 8007a64:	3301      	adds	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	029a      	lsls	r2, r3, #10
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	e028      	b.n	8007ac4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007a72:	7c7b      	ldrb	r3, [r7, #17]
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	7dbb      	ldrb	r3, [r7, #22]
 8007a7c:	09db      	lsrs	r3, r3, #7
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	4413      	add	r3, r2
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	7d7b      	ldrb	r3, [r7, #21]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f003 0306 	and.w	r3, r3, #6
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	4413      	add	r3, r2
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	3302      	adds	r3, #2
 8007a96:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007a9a:	7d3b      	ldrb	r3, [r7, #20]
 8007a9c:	099b      	lsrs	r3, r3, #6
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	7cfb      	ldrb	r3, [r7, #19]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	441a      	add	r2, r3
 8007aa8:	7cbb      	ldrb	r3, [r7, #18]
 8007aaa:	029b      	lsls	r3, r3, #10
 8007aac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007ab6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007aba:	3b09      	subs	r3, #9
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	409a      	lsls	r2, r3
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007aca:	e0ce      	b.n	8007c6a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007acc:	4b71      	ldr	r3, [pc, #452]	@ (8007c94 <USER_SPI_ioctl+0x2dc>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d031      	beq.n	8007b3c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007ad8:	2100      	movs	r1, #0
 8007ada:	208d      	movs	r0, #141	@ 0x8d
 8007adc:	f7ff fd19 	bl	8007512 <send_cmd>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f040 80c3 	bne.w	8007c6e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007ae8:	20ff      	movs	r0, #255	@ 0xff
 8007aea:	f7ff fc21 	bl	8007330 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007aee:	f107 030c 	add.w	r3, r7, #12
 8007af2:	2110      	movs	r1, #16
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fcb1 	bl	800745c <rcvr_datablock>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80b6 	beq.w	8007c6e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007b02:	2330      	movs	r3, #48	@ 0x30
 8007b04:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007b08:	e007      	b.n	8007b1a <USER_SPI_ioctl+0x162>
 8007b0a:	20ff      	movs	r0, #255	@ 0xff
 8007b0c:	f7ff fc10 	bl	8007330 <xchg_spi>
 8007b10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b14:	3b01      	subs	r3, #1
 8007b16:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007b1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f3      	bne.n	8007b0a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007b22:	7dbb      	ldrb	r3, [r7, #22]
 8007b24:	091b      	lsrs	r3, r3, #4
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	fa03 f202 	lsl.w	r2, r3, r2
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007b3a:	e098      	b.n	8007c6e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	2009      	movs	r0, #9
 8007b40:	f7ff fce7 	bl	8007512 <send_cmd>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f040 8091 	bne.w	8007c6e <USER_SPI_ioctl+0x2b6>
 8007b4c:	f107 030c 	add.w	r3, r7, #12
 8007b50:	2110      	movs	r1, #16
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff fc82 	bl	800745c <rcvr_datablock>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8087 	beq.w	8007c6e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007b60:	4b4c      	ldr	r3, [pc, #304]	@ (8007c94 <USER_SPI_ioctl+0x2dc>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d012      	beq.n	8007b92 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007b6c:	7dbb      	ldrb	r3, [r7, #22]
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007b74:	7dfa      	ldrb	r2, [r7, #23]
 8007b76:	09d2      	lsrs	r2, r2, #7
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	7e7b      	ldrb	r3, [r7, #25]
 8007b80:	099b      	lsrs	r3, r3, #6
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e013      	b.n	8007bba <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007b92:	7dbb      	ldrb	r3, [r7, #22]
 8007b94:	109b      	asrs	r3, r3, #2
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	f003 031f 	and.w	r3, r3, #31
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	7dfa      	ldrb	r2, [r7, #23]
 8007ba0:	00d2      	lsls	r2, r2, #3
 8007ba2:	f002 0218 	and.w	r2, r2, #24
 8007ba6:	7df9      	ldrb	r1, [r7, #23]
 8007ba8:	0949      	lsrs	r1, r1, #5
 8007baa:	b2c9      	uxtb	r1, r1
 8007bac:	440a      	add	r2, r1
 8007bae:	3201      	adds	r2, #1
 8007bb0:	fb02 f303 	mul.w	r3, r2, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007bc0:	e055      	b.n	8007c6e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007bc2:	4b34      	ldr	r3, [pc, #208]	@ (8007c94 <USER_SPI_ioctl+0x2dc>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	f003 0306 	and.w	r3, r3, #6
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d051      	beq.n	8007c72 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007bce:	f107 020c 	add.w	r2, r7, #12
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	210b      	movs	r1, #11
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff feee 	bl	80079b8 <USER_SPI_ioctl>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d149      	bne.n	8007c76 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007be2:	7b3b      	ldrb	r3, [r7, #12]
 8007be4:	099b      	lsrs	r3, r3, #6
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <USER_SPI_ioctl+0x23e>
 8007bec:	7dbb      	ldrb	r3, [r7, #22]
 8007bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d041      	beq.n	8007c7a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	623b      	str	r3, [r7, #32]
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007c06:	4b23      	ldr	r3, [pc, #140]	@ (8007c94 <USER_SPI_ioctl+0x2dc>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d105      	bne.n	8007c1e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c14:	025b      	lsls	r3, r3, #9
 8007c16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	025b      	lsls	r3, r3, #9
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007c1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c20:	2020      	movs	r0, #32
 8007c22:	f7ff fc76 	bl	8007512 <send_cmd>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d128      	bne.n	8007c7e <USER_SPI_ioctl+0x2c6>
 8007c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c2e:	2021      	movs	r0, #33	@ 0x21
 8007c30:	f7ff fc6f 	bl	8007512 <send_cmd>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d121      	bne.n	8007c7e <USER_SPI_ioctl+0x2c6>
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	2026      	movs	r0, #38	@ 0x26
 8007c3e:	f7ff fc68 	bl	8007512 <send_cmd>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11a      	bne.n	8007c7e <USER_SPI_ioctl+0x2c6>
 8007c48:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007c4c:	f7ff fbb6 	bl	80073bc <wait_ready>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d013      	beq.n	8007c7e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007c56:	2300      	movs	r3, #0
 8007c58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007c5c:	e00f      	b.n	8007c7e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007c5e:	2304      	movs	r3, #4
 8007c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007c64:	e00c      	b.n	8007c80 <USER_SPI_ioctl+0x2c8>
		break;
 8007c66:	bf00      	nop
 8007c68:	e00a      	b.n	8007c80 <USER_SPI_ioctl+0x2c8>
		break;
 8007c6a:	bf00      	nop
 8007c6c:	e008      	b.n	8007c80 <USER_SPI_ioctl+0x2c8>
		break;
 8007c6e:	bf00      	nop
 8007c70:	e006      	b.n	8007c80 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007c72:	bf00      	nop
 8007c74:	e004      	b.n	8007c80 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <USER_SPI_ioctl+0x2c8>
		break;
 8007c7e:	bf00      	nop
	}

	despiselect();
 8007c80:	f7ff fbc0 	bl	8007404 <despiselect>

	return res;
 8007c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3730      	adds	r7, #48	@ 0x30
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000034 	.word	0x20000034
 8007c94:	20000f28 	.word	0x20000f28

08007c98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	4a08      	ldr	r2, [pc, #32]	@ (8007cc8 <disk_status+0x30>)
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	79fa      	ldrb	r2, [r7, #7]
 8007cb0:	4905      	ldr	r1, [pc, #20]	@ (8007cc8 <disk_status+0x30>)
 8007cb2:	440a      	add	r2, r1
 8007cb4:	7a12      	ldrb	r2, [r2, #8]
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	4798      	blx	r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000f5c 	.word	0x20000f5c

08007ccc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8007d18 <disk_initialize+0x4c>)
 8007cde:	5cd3      	ldrb	r3, [r2, r3]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d114      	bne.n	8007d0e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8007d18 <disk_initialize+0x4c>)
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	79fa      	ldrb	r2, [r7, #7]
 8007cf2:	4909      	ldr	r1, [pc, #36]	@ (8007d18 <disk_initialize+0x4c>)
 8007cf4:	440a      	add	r2, r1
 8007cf6:	7a12      	ldrb	r2, [r2, #8]
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d103      	bne.n	8007d0e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	4a03      	ldr	r2, [pc, #12]	@ (8007d18 <disk_initialize+0x4c>)
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000f5c 	.word	0x20000f5c

08007d1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	607a      	str	r2, [r7, #4]
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d58 <disk_read+0x3c>)
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	689c      	ldr	r4, [r3, #8]
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	4a07      	ldr	r2, [pc, #28]	@ (8007d58 <disk_read+0x3c>)
 8007d3c:	4413      	add	r3, r2
 8007d3e:	7a18      	ldrb	r0, [r3, #8]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	68b9      	ldr	r1, [r7, #8]
 8007d46:	47a0      	blx	r4
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd90      	pop	{r4, r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000f5c 	.word	0x20000f5c

08007d5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007d5c:	b590      	push	{r4, r7, lr}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d98 <disk_write+0x3c>)
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	68dc      	ldr	r4, [r3, #12]
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	4a07      	ldr	r2, [pc, #28]	@ (8007d98 <disk_write+0x3c>)
 8007d7c:	4413      	add	r3, r2
 8007d7e:	7a18      	ldrb	r0, [r3, #8]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	47a0      	blx	r4
 8007d88:	4603      	mov	r3, r0
 8007d8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd90      	pop	{r4, r7, pc}
 8007d96:	bf00      	nop
 8007d98:	20000f5c 	.word	0x20000f5c

08007d9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	603a      	str	r2, [r7, #0]
 8007da6:	71fb      	strb	r3, [r7, #7]
 8007da8:	460b      	mov	r3, r1
 8007daa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	4a09      	ldr	r2, [pc, #36]	@ (8007dd4 <disk_ioctl+0x38>)
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	79fa      	ldrb	r2, [r7, #7]
 8007dba:	4906      	ldr	r1, [pc, #24]	@ (8007dd4 <disk_ioctl+0x38>)
 8007dbc:	440a      	add	r2, r1
 8007dbe:	7a10      	ldrb	r0, [r2, #8]
 8007dc0:	79b9      	ldrb	r1, [r7, #6]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	4798      	blx	r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73fb      	strb	r3, [r7, #15]
  return res;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20000f5c 	.word	0x20000f5c

08007dd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3301      	adds	r3, #1
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007de8:	89fb      	ldrh	r3, [r7, #14]
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	b21a      	sxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b21b      	sxth	r3, r3
 8007df4:	4313      	orrs	r3, r2
 8007df6:	b21b      	sxth	r3, r3
 8007df8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007dfa:	89fb      	ldrh	r3, [r7, #14]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3303      	adds	r3, #3
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	021b      	lsls	r3, r3, #8
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	3202      	adds	r2, #2
 8007e20:	7812      	ldrb	r2, [r2, #0]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	3201      	adds	r2, #1
 8007e2e:	7812      	ldrb	r2, [r2, #0]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007e40:	68fb      	ldr	r3, [r7, #12]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	887a      	ldrh	r2, [r7, #2]
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]
 8007e66:	887b      	ldrh	r3, [r7, #2]
 8007e68:	0a1b      	lsrs	r3, r3, #8
 8007e6a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	887a      	ldrh	r2, [r7, #2]
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	701a      	strb	r2, [r3, #0]
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	0a1b      	lsrs	r3, r3, #8
 8007e9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	607a      	str	r2, [r7, #4]
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	b2d2      	uxtb	r2, r2
 8007eaa:	701a      	strb	r2, [r3, #0]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	0a1b      	lsrs	r3, r3, #8
 8007eb0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	0a1b      	lsrs	r3, r3, #8
 8007ec2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	607a      	str	r2, [r7, #4]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	701a      	strb	r2, [r3, #0]
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00d      	beq.n	8007f12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	1c53      	adds	r3, r2, #1
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	1c59      	adds	r1, r3, #1
 8007f00:	6179      	str	r1, [r7, #20]
 8007f02:	7812      	ldrb	r2, [r2, #0]
 8007f04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	607b      	str	r3, [r7, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f1      	bne.n	8007ef6 <mem_cpy+0x1a>
	}
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007f1e:	b480      	push	{r7}
 8007f20:	b087      	sub	sp, #28
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	617a      	str	r2, [r7, #20]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	b2d2      	uxtb	r2, r2
 8007f38:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	607b      	str	r3, [r7, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1f3      	bne.n	8007f2e <mem_set+0x10>
}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	371c      	adds	r7, #28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007f54:	b480      	push	{r7}
 8007f56:	b089      	sub	sp, #36	@ 0x24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	61fb      	str	r3, [r7, #28]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	61fa      	str	r2, [r7, #28]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	4619      	mov	r1, r3
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	61ba      	str	r2, [r7, #24]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	1acb      	subs	r3, r1, r3
 8007f80:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <mem_cmp+0x40>
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0eb      	beq.n	8007f6c <mem_cmp+0x18>

	return r;
 8007f94:	697b      	ldr	r3, [r7, #20]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3724      	adds	r7, #36	@ 0x24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007fac:	e002      	b.n	8007fb4 <chk_chr+0x12>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	607b      	str	r3, [r7, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <chk_chr+0x26>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d1f2      	bne.n	8007fae <chk_chr+0xc>
	return *str;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	781b      	ldrb	r3, [r3, #0]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	e029      	b.n	8008040 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007fec:	4a27      	ldr	r2, [pc, #156]	@ (800808c <chk_lock+0xb4>)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	4413      	add	r3, r2
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01d      	beq.n	8008036 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007ffa:	4a24      	ldr	r2, [pc, #144]	@ (800808c <chk_lock+0xb4>)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	011b      	lsls	r3, r3, #4
 8008000:	4413      	add	r3, r2
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d116      	bne.n	800803a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800800c:	4a1f      	ldr	r2, [pc, #124]	@ (800808c <chk_lock+0xb4>)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	011b      	lsls	r3, r3, #4
 8008012:	4413      	add	r3, r2
 8008014:	3304      	adds	r3, #4
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800801c:	429a      	cmp	r2, r3
 800801e:	d10c      	bne.n	800803a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008020:	4a1a      	ldr	r2, [pc, #104]	@ (800808c <chk_lock+0xb4>)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	4413      	add	r3, r2
 8008028:	3308      	adds	r3, #8
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008030:	429a      	cmp	r2, r3
 8008032:	d102      	bne.n	800803a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008034:	e007      	b.n	8008046 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008036:	2301      	movs	r3, #1
 8008038:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d9d2      	bls.n	8007fec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b02      	cmp	r3, #2
 800804a:	d109      	bne.n	8008060 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <chk_lock+0x80>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d101      	bne.n	800805c <chk_lock+0x84>
 8008058:	2300      	movs	r3, #0
 800805a:	e010      	b.n	800807e <chk_lock+0xa6>
 800805c:	2312      	movs	r3, #18
 800805e:	e00e      	b.n	800807e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d108      	bne.n	8008078 <chk_lock+0xa0>
 8008066:	4a09      	ldr	r2, [pc, #36]	@ (800808c <chk_lock+0xb4>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	4413      	add	r3, r2
 800806e:	330c      	adds	r3, #12
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008076:	d101      	bne.n	800807c <chk_lock+0xa4>
 8008078:	2310      	movs	r3, #16
 800807a:	e000      	b.n	800807e <chk_lock+0xa6>
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	20000f3c 	.word	0x20000f3c

08008090 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008096:	2300      	movs	r3, #0
 8008098:	607b      	str	r3, [r7, #4]
 800809a:	e002      	b.n	80080a2 <enq_lock+0x12>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3301      	adds	r3, #1
 80080a0:	607b      	str	r3, [r7, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d806      	bhi.n	80080b6 <enq_lock+0x26>
 80080a8:	4a09      	ldr	r2, [pc, #36]	@ (80080d0 <enq_lock+0x40>)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	4413      	add	r3, r2
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1f2      	bne.n	800809c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	bf14      	ite	ne
 80080bc:	2301      	movne	r3, #1
 80080be:	2300      	moveq	r3, #0
 80080c0:	b2db      	uxtb	r3, r3
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20000f3c 	.word	0x20000f3c

080080d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	e01f      	b.n	8008124 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80080e4:	4a41      	ldr	r2, [pc, #260]	@ (80081ec <inc_lock+0x118>)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	4413      	add	r3, r2
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d113      	bne.n	800811e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80080f6:	4a3d      	ldr	r2, [pc, #244]	@ (80081ec <inc_lock+0x118>)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	4413      	add	r3, r2
 80080fe:	3304      	adds	r3, #4
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008106:	429a      	cmp	r2, r3
 8008108:	d109      	bne.n	800811e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800810a:	4a38      	ldr	r2, [pc, #224]	@ (80081ec <inc_lock+0x118>)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	4413      	add	r3, r2
 8008112:	3308      	adds	r3, #8
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800811a:	429a      	cmp	r2, r3
 800811c:	d006      	beq.n	800812c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d9dc      	bls.n	80080e4 <inc_lock+0x10>
 800812a:	e000      	b.n	800812e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800812c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d132      	bne.n	800819a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	e002      	b.n	8008140 <inc_lock+0x6c>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d806      	bhi.n	8008154 <inc_lock+0x80>
 8008146:	4a29      	ldr	r2, [pc, #164]	@ (80081ec <inc_lock+0x118>)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	4413      	add	r3, r2
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f2      	bne.n	800813a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d101      	bne.n	800815e <inc_lock+0x8a>
 800815a:	2300      	movs	r3, #0
 800815c:	e040      	b.n	80081e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	4922      	ldr	r1, [pc, #136]	@ (80081ec <inc_lock+0x118>)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	011b      	lsls	r3, r3, #4
 8008168:	440b      	add	r3, r1
 800816a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689a      	ldr	r2, [r3, #8]
 8008170:	491e      	ldr	r1, [pc, #120]	@ (80081ec <inc_lock+0x118>)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	440b      	add	r3, r1
 8008178:	3304      	adds	r3, #4
 800817a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	695a      	ldr	r2, [r3, #20]
 8008180:	491a      	ldr	r1, [pc, #104]	@ (80081ec <inc_lock+0x118>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	011b      	lsls	r3, r3, #4
 8008186:	440b      	add	r3, r1
 8008188:	3308      	adds	r3, #8
 800818a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800818c:	4a17      	ldr	r2, [pc, #92]	@ (80081ec <inc_lock+0x118>)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	4413      	add	r3, r2
 8008194:	330c      	adds	r3, #12
 8008196:	2200      	movs	r2, #0
 8008198:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d009      	beq.n	80081b4 <inc_lock+0xe0>
 80081a0:	4a12      	ldr	r2, [pc, #72]	@ (80081ec <inc_lock+0x118>)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	4413      	add	r3, r2
 80081a8:	330c      	adds	r3, #12
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <inc_lock+0xe0>
 80081b0:	2300      	movs	r3, #0
 80081b2:	e015      	b.n	80081e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d108      	bne.n	80081cc <inc_lock+0xf8>
 80081ba:	4a0c      	ldr	r2, [pc, #48]	@ (80081ec <inc_lock+0x118>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	4413      	add	r3, r2
 80081c2:	330c      	adds	r3, #12
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	3301      	adds	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	e001      	b.n	80081d0 <inc_lock+0xfc>
 80081cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081d0:	4906      	ldr	r1, [pc, #24]	@ (80081ec <inc_lock+0x118>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	440b      	add	r3, r1
 80081d8:	330c      	adds	r3, #12
 80081da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3301      	adds	r3, #1
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20000f3c 	.word	0x20000f3c

080081f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	607b      	str	r3, [r7, #4]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d825      	bhi.n	8008250 <dec_lock+0x60>
		n = Files[i].ctr;
 8008204:	4a17      	ldr	r2, [pc, #92]	@ (8008264 <dec_lock+0x74>)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	4413      	add	r3, r2
 800820c:	330c      	adds	r3, #12
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008212:	89fb      	ldrh	r3, [r7, #14]
 8008214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008218:	d101      	bne.n	800821e <dec_lock+0x2e>
 800821a:	2300      	movs	r3, #0
 800821c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800821e:	89fb      	ldrh	r3, [r7, #14]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <dec_lock+0x3a>
 8008224:	89fb      	ldrh	r3, [r7, #14]
 8008226:	3b01      	subs	r3, #1
 8008228:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800822a:	4a0e      	ldr	r2, [pc, #56]	@ (8008264 <dec_lock+0x74>)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	4413      	add	r3, r2
 8008232:	330c      	adds	r3, #12
 8008234:	89fa      	ldrh	r2, [r7, #14]
 8008236:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008238:	89fb      	ldrh	r3, [r7, #14]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <dec_lock+0x5a>
 800823e:	4a09      	ldr	r2, [pc, #36]	@ (8008264 <dec_lock+0x74>)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	4413      	add	r3, r2
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	737b      	strb	r3, [r7, #13]
 800824e:	e001      	b.n	8008254 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008250:	2302      	movs	r3, #2
 8008252:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008254:	7b7b      	ldrb	r3, [r7, #13]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	20000f3c 	.word	0x20000f3c

08008268 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e010      	b.n	8008298 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008276:	4a0d      	ldr	r2, [pc, #52]	@ (80082ac <clear_lock+0x44>)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	4413      	add	r3, r2
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	429a      	cmp	r2, r3
 8008284:	d105      	bne.n	8008292 <clear_lock+0x2a>
 8008286:	4a09      	ldr	r2, [pc, #36]	@ (80082ac <clear_lock+0x44>)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	4413      	add	r3, r2
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d9eb      	bls.n	8008276 <clear_lock+0xe>
	}
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	20000f3c 	.word	0x20000f3c

080082b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	78db      	ldrb	r3, [r3, #3]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d034      	beq.n	800832e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7858      	ldrb	r0, [r3, #1]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80082d4:	2301      	movs	r3, #1
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	f7ff fd40 	bl	8007d5c <disk_write>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	73fb      	strb	r3, [r7, #15]
 80082e6:	e022      	b.n	800832e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	1ad2      	subs	r2, r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d217      	bcs.n	800832e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	789b      	ldrb	r3, [r3, #2]
 8008302:	613b      	str	r3, [r7, #16]
 8008304:	e010      	b.n	8008328 <sync_window+0x78>
					wsect += fs->fsize;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	4413      	add	r3, r2
 800830e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	7858      	ldrb	r0, [r3, #1]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800831a:	2301      	movs	r3, #1
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	f7ff fd1d 	bl	8007d5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	3b01      	subs	r3, #1
 8008326:	613b      	str	r3, [r7, #16]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d8eb      	bhi.n	8008306 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	d01b      	beq.n	8008388 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff ffad 	bl	80082b0 <sync_window>
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d113      	bne.n	8008388 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7858      	ldrb	r0, [r3, #1]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800836a:	2301      	movs	r3, #1
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	f7ff fcd5 	bl	8007d1c <disk_read>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008378:	f04f 33ff 	mov.w	r3, #4294967295
 800837c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800837e:	2301      	movs	r3, #1
 8008380:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff ff87 	bl	80082b0 <sync_window>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d158      	bne.n	800845e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d148      	bne.n	8008446 <sync_fs+0xb2>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	791b      	ldrb	r3, [r3, #4]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d144      	bne.n	8008446 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3330      	adds	r3, #48	@ 0x30
 80083c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fda9 	bl	8007f1e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3330      	adds	r3, #48	@ 0x30
 80083d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80083d4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff fd38 	bl	8007e4e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3330      	adds	r3, #48	@ 0x30
 80083e2:	4921      	ldr	r1, [pc, #132]	@ (8008468 <sync_fs+0xd4>)
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff fd4d 	bl	8007e84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3330      	adds	r3, #48	@ 0x30
 80083ee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083f2:	491e      	ldr	r1, [pc, #120]	@ (800846c <sync_fs+0xd8>)
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff fd45 	bl	8007e84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3330      	adds	r3, #48	@ 0x30
 80083fe:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	4619      	mov	r1, r3
 8008408:	4610      	mov	r0, r2
 800840a:	f7ff fd3b 	bl	8007e84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3330      	adds	r3, #48	@ 0x30
 8008412:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	4619      	mov	r1, r3
 800841c:	4610      	mov	r0, r2
 800841e:	f7ff fd31 	bl	8007e84 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7858      	ldrb	r0, [r3, #1]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843a:	2301      	movs	r3, #1
 800843c:	f7ff fc8e 	bl	8007d5c <disk_write>
			fs->fsi_flag = 0;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	2200      	movs	r2, #0
 800844c:	2100      	movs	r1, #0
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fca4 	bl	8007d9c <disk_ioctl>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <sync_fs+0xca>
 800845a:	2301      	movs	r3, #1
 800845c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	41615252 	.word	0x41615252
 800846c:	61417272 	.word	0x61417272

08008470 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	3b02      	subs	r3, #2
 800847e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	3b02      	subs	r3, #2
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d301      	bcc.n	8008490 <clust2sect+0x20>
 800848c:	2300      	movs	r3, #0
 800848e:	e008      	b.n	80084a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	895b      	ldrh	r3, [r3, #10]
 8008494:	461a      	mov	r2, r3
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	fb03 f202 	mul.w	r2, r3, r2
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a0:	4413      	add	r3, r2
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b086      	sub	sp, #24
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d904      	bls.n	80084ce <get_fat+0x20>
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d302      	bcc.n	80084d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80084ce:	2301      	movs	r3, #1
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	e08e      	b.n	80085f2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80084d4:	f04f 33ff 	mov.w	r3, #4294967295
 80084d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d061      	beq.n	80085a6 <get_fat+0xf8>
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	dc7b      	bgt.n	80085de <get_fat+0x130>
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d002      	beq.n	80084f0 <get_fat+0x42>
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d041      	beq.n	8008572 <get_fat+0xc4>
 80084ee:	e076      	b.n	80085de <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	085b      	lsrs	r3, r3, #1
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	6a1a      	ldr	r2, [r3, #32]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	0a5b      	lsrs	r3, r3, #9
 8008506:	4413      	add	r3, r2
 8008508:	4619      	mov	r1, r3
 800850a:	6938      	ldr	r0, [r7, #16]
 800850c:	f7ff ff14 	bl	8008338 <move_window>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d166      	bne.n	80085e4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	60fa      	str	r2, [r7, #12]
 800851c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4413      	add	r3, r2
 8008524:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008528:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6a1a      	ldr	r2, [r3, #32]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	0a5b      	lsrs	r3, r3, #9
 8008532:	4413      	add	r3, r2
 8008534:	4619      	mov	r1, r3
 8008536:	6938      	ldr	r0, [r7, #16]
 8008538:	f7ff fefe 	bl	8008338 <move_window>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d152      	bne.n	80085e8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4413      	add	r3, r2
 800854c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008550:	021b      	lsls	r3, r3, #8
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	4313      	orrs	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <get_fat+0xba>
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	091b      	lsrs	r3, r3, #4
 8008566:	e002      	b.n	800856e <get_fat+0xc0>
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800856e:	617b      	str	r3, [r7, #20]
			break;
 8008570:	e03f      	b.n	80085f2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	6a1a      	ldr	r2, [r3, #32]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	0a1b      	lsrs	r3, r3, #8
 800857a:	4413      	add	r3, r2
 800857c:	4619      	mov	r1, r3
 800857e:	6938      	ldr	r0, [r7, #16]
 8008580:	f7ff feda 	bl	8008338 <move_window>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d130      	bne.n	80085ec <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008598:	4413      	add	r3, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff fc1c 	bl	8007dd8 <ld_word>
 80085a0:	4603      	mov	r3, r0
 80085a2:	617b      	str	r3, [r7, #20]
			break;
 80085a4:	e025      	b.n	80085f2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	6a1a      	ldr	r2, [r3, #32]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	09db      	lsrs	r3, r3, #7
 80085ae:	4413      	add	r3, r2
 80085b0:	4619      	mov	r1, r3
 80085b2:	6938      	ldr	r0, [r7, #16]
 80085b4:	f7ff fec0 	bl	8008338 <move_window>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d118      	bne.n	80085f0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80085cc:	4413      	add	r3, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff fc1a 	bl	8007e08 <ld_dword>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80085da:	617b      	str	r3, [r7, #20]
			break;
 80085dc:	e009      	b.n	80085f2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80085de:	2301      	movs	r3, #1
 80085e0:	617b      	str	r3, [r7, #20]
 80085e2:	e006      	b.n	80085f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085e4:	bf00      	nop
 80085e6:	e004      	b.n	80085f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085e8:	bf00      	nop
 80085ea:	e002      	b.n	80085f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085ec:	bf00      	nop
 80085ee:	e000      	b.n	80085f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085f0:	bf00      	nop
		}
	}

	return val;
 80085f2:	697b      	ldr	r3, [r7, #20]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80085fc:	b590      	push	{r4, r7, lr}
 80085fe:	b089      	sub	sp, #36	@ 0x24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008608:	2302      	movs	r3, #2
 800860a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b01      	cmp	r3, #1
 8008610:	f240 80d9 	bls.w	80087c6 <put_fat+0x1ca>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	429a      	cmp	r2, r3
 800861c:	f080 80d3 	bcs.w	80087c6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b03      	cmp	r3, #3
 8008626:	f000 8096 	beq.w	8008756 <put_fat+0x15a>
 800862a:	2b03      	cmp	r3, #3
 800862c:	f300 80cb 	bgt.w	80087c6 <put_fat+0x1ca>
 8008630:	2b01      	cmp	r3, #1
 8008632:	d002      	beq.n	800863a <put_fat+0x3e>
 8008634:	2b02      	cmp	r3, #2
 8008636:	d06e      	beq.n	8008716 <put_fat+0x11a>
 8008638:	e0c5      	b.n	80087c6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	61bb      	str	r3, [r7, #24]
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	085b      	lsrs	r3, r3, #1
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	4413      	add	r3, r2
 8008646:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a1a      	ldr	r2, [r3, #32]
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	0a5b      	lsrs	r3, r3, #9
 8008650:	4413      	add	r3, r2
 8008652:	4619      	mov	r1, r3
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f7ff fe6f 	bl	8008338 <move_window>
 800865a:	4603      	mov	r3, r0
 800865c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800865e:	7ffb      	ldrb	r3, [r7, #31]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f040 80a9 	bne.w	80087b8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	1c59      	adds	r1, r3, #1
 8008670:	61b9      	str	r1, [r7, #24]
 8008672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008676:	4413      	add	r3, r2
 8008678:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00d      	beq.n	80086a0 <put_fat+0xa4>
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	b25b      	sxtb	r3, r3
 800868a:	f003 030f 	and.w	r3, r3, #15
 800868e:	b25a      	sxtb	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	b25b      	sxtb	r3, r3
 8008698:	4313      	orrs	r3, r2
 800869a:	b25b      	sxtb	r3, r3
 800869c:	b2db      	uxtb	r3, r3
 800869e:	e001      	b.n	80086a4 <put_fat+0xa8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2201      	movs	r2, #1
 80086ac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a1a      	ldr	r2, [r3, #32]
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	0a5b      	lsrs	r3, r3, #9
 80086b6:	4413      	add	r3, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7ff fe3c 	bl	8008338 <move_window>
 80086c0:	4603      	mov	r3, r0
 80086c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086c4:	7ffb      	ldrb	r3, [r7, #31]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d178      	bne.n	80087bc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d6:	4413      	add	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <put_fat+0xf0>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	091b      	lsrs	r3, r3, #4
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	e00e      	b.n	800870a <put_fat+0x10e>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	b25b      	sxtb	r3, r3
 80086f2:	f023 030f 	bic.w	r3, r3, #15
 80086f6:	b25a      	sxtb	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	0a1b      	lsrs	r3, r3, #8
 80086fc:	b25b      	sxtb	r3, r3
 80086fe:	f003 030f 	and.w	r3, r3, #15
 8008702:	b25b      	sxtb	r3, r3
 8008704:	4313      	orrs	r3, r2
 8008706:	b25b      	sxtb	r3, r3
 8008708:	b2db      	uxtb	r3, r3
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	70da      	strb	r2, [r3, #3]
			break;
 8008714:	e057      	b.n	80087c6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1a      	ldr	r2, [r3, #32]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	0a1b      	lsrs	r3, r3, #8
 800871e:	4413      	add	r3, r2
 8008720:	4619      	mov	r1, r3
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff fe08 	bl	8008338 <move_window>
 8008728:	4603      	mov	r3, r0
 800872a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800872c:	7ffb      	ldrb	r3, [r7, #31]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d146      	bne.n	80087c0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008740:	4413      	add	r3, r2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	b292      	uxth	r2, r2
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff fb80 	bl	8007e4e <st_word>
			fs->wflag = 1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	70da      	strb	r2, [r3, #3]
			break;
 8008754:	e037      	b.n	80087c6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6a1a      	ldr	r2, [r3, #32]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	09db      	lsrs	r3, r3, #7
 800875e:	4413      	add	r3, r2
 8008760:	4619      	mov	r1, r3
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff fde8 	bl	8008338 <move_window>
 8008768:	4603      	mov	r3, r0
 800876a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800876c:	7ffb      	ldrb	r3, [r7, #31]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d128      	bne.n	80087c4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008786:	4413      	add	r3, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f7ff fb3d 	bl	8007e08 <ld_dword>
 800878e:	4603      	mov	r3, r0
 8008790:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008794:	4323      	orrs	r3, r4
 8008796:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80087a6:	4413      	add	r3, r2
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff fb6a 	bl	8007e84 <st_dword>
			fs->wflag = 1;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2201      	movs	r2, #1
 80087b4:	70da      	strb	r2, [r3, #3]
			break;
 80087b6:	e006      	b.n	80087c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80087b8:	bf00      	nop
 80087ba:	e004      	b.n	80087c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80087bc:	bf00      	nop
 80087be:	e002      	b.n	80087c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80087c0:	bf00      	nop
 80087c2:	e000      	b.n	80087c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80087c4:	bf00      	nop
		}
	}
	return res;
 80087c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3724      	adds	r7, #36	@ 0x24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd90      	pop	{r4, r7, pc}

080087d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d904      	bls.n	80087f6 <remove_chain+0x26>
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d301      	bcc.n	80087fa <remove_chain+0x2a>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e04b      	b.n	8008892 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00c      	beq.n	800881a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008800:	f04f 32ff 	mov.w	r2, #4294967295
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	69b8      	ldr	r0, [r7, #24]
 8008808:	f7ff fef8 	bl	80085fc <put_fat>
 800880c:	4603      	mov	r3, r0
 800880e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008810:	7ffb      	ldrb	r3, [r7, #31]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <remove_chain+0x4a>
 8008816:	7ffb      	ldrb	r3, [r7, #31]
 8008818:	e03b      	b.n	8008892 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff fe46 	bl	80084ae <get_fat>
 8008822:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d031      	beq.n	800888e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <remove_chain+0x64>
 8008830:	2302      	movs	r3, #2
 8008832:	e02e      	b.n	8008892 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883a:	d101      	bne.n	8008840 <remove_chain+0x70>
 800883c:	2301      	movs	r3, #1
 800883e:	e028      	b.n	8008892 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008840:	2200      	movs	r2, #0
 8008842:	68b9      	ldr	r1, [r7, #8]
 8008844:	69b8      	ldr	r0, [r7, #24]
 8008846:	f7ff fed9 	bl	80085fc <put_fat>
 800884a:	4603      	mov	r3, r0
 800884c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800884e:	7ffb      	ldrb	r3, [r7, #31]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <remove_chain+0x88>
 8008854:	7ffb      	ldrb	r3, [r7, #31]
 8008856:	e01c      	b.n	8008892 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	691a      	ldr	r2, [r3, #16]
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	3b02      	subs	r3, #2
 8008862:	429a      	cmp	r2, r3
 8008864:	d20b      	bcs.n	800887e <remove_chain+0xae>
			fs->free_clst++;
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	791b      	ldrb	r3, [r3, #4]
 8008874:	f043 0301 	orr.w	r3, r3, #1
 8008878:	b2da      	uxtb	r2, r3
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	429a      	cmp	r2, r3
 800888a:	d3c6      	bcc.n	800881a <remove_chain+0x4a>
 800888c:	e000      	b.n	8008890 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800888e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b088      	sub	sp, #32
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10d      	bne.n	80088cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d004      	beq.n	80088c6 <create_chain+0x2c>
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d31b      	bcc.n	80088fe <create_chain+0x64>
 80088c6:	2301      	movs	r3, #1
 80088c8:	61bb      	str	r3, [r7, #24]
 80088ca:	e018      	b.n	80088fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fded 	bl	80084ae <get_fat>
 80088d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d801      	bhi.n	80088e0 <create_chain+0x46>
 80088dc:	2301      	movs	r3, #1
 80088de:	e070      	b.n	80089c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d101      	bne.n	80088ec <create_chain+0x52>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	e06a      	b.n	80089c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d201      	bcs.n	80088fa <create_chain+0x60>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	e063      	b.n	80089c2 <create_chain+0x128>
		scl = clst;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	3301      	adds	r3, #1
 8008906:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	429a      	cmp	r2, r3
 8008910:	d307      	bcc.n	8008922 <create_chain+0x88>
				ncl = 2;
 8008912:	2302      	movs	r3, #2
 8008914:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008916:	69fa      	ldr	r2, [r7, #28]
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	429a      	cmp	r2, r3
 800891c:	d901      	bls.n	8008922 <create_chain+0x88>
 800891e:	2300      	movs	r3, #0
 8008920:	e04f      	b.n	80089c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008922:	69f9      	ldr	r1, [r7, #28]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fdc2 	bl	80084ae <get_fat>
 800892a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00e      	beq.n	8008950 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d003      	beq.n	8008940 <create_chain+0xa6>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d101      	bne.n	8008944 <create_chain+0xaa>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	e03e      	b.n	80089c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008944:	69fa      	ldr	r2, [r7, #28]
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	429a      	cmp	r2, r3
 800894a:	d1da      	bne.n	8008902 <create_chain+0x68>
 800894c:	2300      	movs	r3, #0
 800894e:	e038      	b.n	80089c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008950:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008952:	f04f 32ff 	mov.w	r2, #4294967295
 8008956:	69f9      	ldr	r1, [r7, #28]
 8008958:	6938      	ldr	r0, [r7, #16]
 800895a:	f7ff fe4f 	bl	80085fc <put_fat>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d109      	bne.n	800897c <create_chain+0xe2>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d006      	beq.n	800897c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6938      	ldr	r0, [r7, #16]
 8008974:	f7ff fe42 	bl	80085fc <put_fat>
 8008978:	4603      	mov	r3, r0
 800897a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d116      	bne.n	80089b0 <create_chain+0x116>
		fs->last_clst = ncl;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	691a      	ldr	r2, [r3, #16]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	3b02      	subs	r3, #2
 8008992:	429a      	cmp	r2, r3
 8008994:	d804      	bhi.n	80089a0 <create_chain+0x106>
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	1e5a      	subs	r2, r3, #1
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	791b      	ldrb	r3, [r3, #4]
 80089a4:	f043 0301 	orr.w	r3, r3, #1
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	711a      	strb	r2, [r3, #4]
 80089ae:	e007      	b.n	80089c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d102      	bne.n	80089bc <create_chain+0x122>
 80089b6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ba:	e000      	b.n	80089be <create_chain+0x124>
 80089bc:	2301      	movs	r3, #1
 80089be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80089c0:	69fb      	ldr	r3, [r7, #28]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3720      	adds	r7, #32
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b087      	sub	sp, #28
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	3304      	adds	r3, #4
 80089e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	0a5b      	lsrs	r3, r3, #9
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	8952      	ldrh	r2, [r2, #10]
 80089ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	1d1a      	adds	r2, r3, #4
 80089f4:	613a      	str	r2, [r7, #16]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <clmt_clust+0x3a>
 8008a00:	2300      	movs	r3, #0
 8008a02:	e010      	b.n	8008a26 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d307      	bcc.n	8008a1c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	3304      	adds	r3, #4
 8008a18:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a1a:	e7e9      	b.n	80089f0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008a1c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	4413      	add	r3, r2
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b086      	sub	sp, #24
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a48:	d204      	bcs.n	8008a54 <dir_sdi+0x22>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	f003 031f 	and.w	r3, r3, #31
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008a54:	2302      	movs	r3, #2
 8008a56:	e063      	b.n	8008b20 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d106      	bne.n	8008a78 <dir_sdi+0x46>
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d902      	bls.n	8008a78 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a76:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10c      	bne.n	8008a98 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	095b      	lsrs	r3, r3, #5
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	8912      	ldrh	r2, [r2, #8]
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d301      	bcc.n	8008a8e <dir_sdi+0x5c>
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	e048      	b.n	8008b20 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	61da      	str	r2, [r3, #28]
 8008a96:	e029      	b.n	8008aec <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	895b      	ldrh	r3, [r3, #10]
 8008a9c:	025b      	lsls	r3, r3, #9
 8008a9e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008aa0:	e019      	b.n	8008ad6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6979      	ldr	r1, [r7, #20]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fd01 	bl	80084ae <get_fat>
 8008aac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab4:	d101      	bne.n	8008aba <dir_sdi+0x88>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e032      	b.n	8008b20 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d904      	bls.n	8008aca <dir_sdi+0x98>
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d301      	bcc.n	8008ace <dir_sdi+0x9c>
 8008aca:	2302      	movs	r3, #2
 8008acc:	e028      	b.n	8008b20 <dir_sdi+0xee>
			ofs -= csz;
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d2e1      	bcs.n	8008aa2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008ade:	6979      	ldr	r1, [r7, #20]
 8008ae0:	6938      	ldr	r0, [r7, #16]
 8008ae2:	f7ff fcc5 	bl	8008470 <clust2sect>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <dir_sdi+0xcc>
 8008afa:	2302      	movs	r3, #2
 8008afc:	e010      	b.n	8008b20 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	69da      	ldr	r2, [r3, #28]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	0a5b      	lsrs	r3, r3, #9
 8008b06:	441a      	add	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b18:	441a      	add	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	3320      	adds	r3, #32
 8008b3e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <dir_next+0x28>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b4e:	d301      	bcc.n	8008b54 <dir_next+0x2c>
 8008b50:	2304      	movs	r3, #4
 8008b52:	e0aa      	b.n	8008caa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f040 8098 	bne.w	8008c90 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	1c5a      	adds	r2, r3, #1
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	8912      	ldrh	r2, [r2, #8]
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	f0c0 8088 	bcc.w	8008c90 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	61da      	str	r2, [r3, #28]
 8008b86:	2304      	movs	r3, #4
 8008b88:	e08f      	b.n	8008caa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	0a5b      	lsrs	r3, r3, #9
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	8952      	ldrh	r2, [r2, #10]
 8008b92:	3a01      	subs	r2, #1
 8008b94:	4013      	ands	r3, r2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d17a      	bne.n	8008c90 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f7ff fc83 	bl	80084ae <get_fat>
 8008ba8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d801      	bhi.n	8008bb4 <dir_next+0x8c>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e07a      	b.n	8008caa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d101      	bne.n	8008bc0 <dir_next+0x98>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e074      	b.n	8008caa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d358      	bcc.n	8008c7c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	61da      	str	r2, [r3, #28]
 8008bd6:	2304      	movs	r3, #4
 8008bd8:	e067      	b.n	8008caa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f7ff fe59 	bl	800889a <create_chain>
 8008be8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <dir_next+0xcc>
 8008bf0:	2307      	movs	r3, #7
 8008bf2:	e05a      	b.n	8008caa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d101      	bne.n	8008bfe <dir_next+0xd6>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e055      	b.n	8008caa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c04:	d101      	bne.n	8008c0a <dir_next+0xe2>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e04f      	b.n	8008caa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7ff fb50 	bl	80082b0 <sync_window>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <dir_next+0xf2>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e047      	b.n	8008caa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3330      	adds	r3, #48	@ 0x30
 8008c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c22:	2100      	movs	r1, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff f97a 	bl	8007f1e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	613b      	str	r3, [r7, #16]
 8008c2e:	6979      	ldr	r1, [r7, #20]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f7ff fc1d 	bl	8008470 <clust2sect>
 8008c36:	4602      	mov	r2, r0
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008c3c:	e012      	b.n	8008c64 <dir_next+0x13c>
						fs->wflag = 1;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7ff fb33 	bl	80082b0 <sync_window>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <dir_next+0x12c>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e02a      	b.n	8008caa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	3301      	adds	r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	895b      	ldrh	r3, [r3, #10]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d3e6      	bcc.n	8008c3e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	1ad2      	subs	r2, r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008c82:	6979      	ldr	r1, [r7, #20]
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7ff fbf3 	bl	8008470 <clust2sect>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca2:	441a      	add	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b086      	sub	sp, #24
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff feb4 	bl	8008a32 <dir_sdi>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d12b      	bne.n	8008d2c <dir_alloc+0x7a>
		n = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	69db      	ldr	r3, [r3, #28]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f7ff fb2a 	bl	8008338 <move_window>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d11d      	bne.n	8008d2a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2be5      	cmp	r3, #229	@ 0xe5
 8008cf6:	d004      	beq.n	8008d02 <dir_alloc+0x50>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d107      	bne.n	8008d12 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	3301      	adds	r3, #1
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d102      	bne.n	8008d16 <dir_alloc+0x64>
 8008d10:	e00c      	b.n	8008d2c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008d12:	2300      	movs	r3, #0
 8008d14:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008d16:	2101      	movs	r1, #1
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff ff05 	bl	8008b28 <dir_next>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0d7      	beq.n	8008cd8 <dir_alloc+0x26>
 8008d28:	e000      	b.n	8008d2c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008d2a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d101      	bne.n	8008d36 <dir_alloc+0x84>
 8008d32:	2307      	movs	r3, #7
 8008d34:	75fb      	strb	r3, [r7, #23]
	return res;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	331a      	adds	r3, #26
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff f842 	bl	8007dd8 <ld_word>
 8008d54:	4603      	mov	r3, r0
 8008d56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d109      	bne.n	8008d74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	3314      	adds	r3, #20
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff f837 	bl	8007dd8 <ld_word>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	041b      	lsls	r3, r3, #16
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008d74:	68fb      	ldr	r3, [r7, #12]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	331a      	adds	r3, #26
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	b292      	uxth	r2, r2
 8008d92:	4611      	mov	r1, r2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff f85a 	bl	8007e4e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d109      	bne.n	8008db6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f103 0214 	add.w	r2, r3, #20
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	0c1b      	lsrs	r3, r3, #16
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7ff f84c 	bl	8007e4e <st_word>
	}
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008dc8:	2304      	movs	r3, #4
 8008dca:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8008dd2:	e03c      	b.n	8008e4e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6938      	ldr	r0, [r7, #16]
 8008ddc:	f7ff faac 	bl	8008338 <move_window>
 8008de0:	4603      	mov	r3, r0
 8008de2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d136      	bne.n	8008e58 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008df8:	2304      	movs	r3, #4
 8008dfa:	75fb      	strb	r3, [r7, #23]
 8008dfc:	e031      	b.n	8008e62 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	330b      	adds	r3, #11
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e0a:	73bb      	strb	r3, [r7, #14]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	7bba      	ldrb	r2, [r7, #14]
 8008e10:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2be5      	cmp	r3, #229	@ 0xe5
 8008e16:	d011      	beq.n	8008e3c <dir_read+0x7e>
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e1c:	d00e      	beq.n	8008e3c <dir_read+0x7e>
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b0f      	cmp	r3, #15
 8008e22:	d00b      	beq.n	8008e3c <dir_read+0x7e>
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	f023 0320 	bic.w	r3, r3, #32
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	bf0c      	ite	eq
 8008e2e:	2301      	moveq	r3, #1
 8008e30:	2300      	movne	r3, #0
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	461a      	mov	r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00f      	beq.n	8008e5c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fe72 	bl	8008b28 <dir_next>
 8008e44:	4603      	mov	r3, r0
 8008e46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d108      	bne.n	8008e60 <dir_read+0xa2>
	while (dp->sect) {
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1be      	bne.n	8008dd4 <dir_read+0x16>
 8008e56:	e004      	b.n	8008e62 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008e58:	bf00      	nop
 8008e5a:	e002      	b.n	8008e62 <dir_read+0xa4>
				break;
 8008e5c:	bf00      	nop
 8008e5e:	e000      	b.n	8008e62 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008e60:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <dir_read+0xb0>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	61da      	str	r2, [r3, #28]
	return res;
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008e86:	2100      	movs	r1, #0
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff fdd2 	bl	8008a32 <dir_sdi>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <dir_find+0x24>
 8008e98:	7dfb      	ldrb	r3, [r7, #23]
 8008e9a:	e03e      	b.n	8008f1a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	69db      	ldr	r3, [r3, #28]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6938      	ldr	r0, [r7, #16]
 8008ea4:	f7ff fa48 	bl	8008338 <move_window>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d12f      	bne.n	8008f12 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <dir_find+0x4e>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	75fb      	strb	r3, [r7, #23]
 8008ec4:	e028      	b.n	8008f18 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	330b      	adds	r3, #11
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	330b      	adds	r3, #11
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <dir_find+0x86>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a18      	ldr	r0, [r3, #32]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3324      	adds	r3, #36	@ 0x24
 8008ef0:	220b      	movs	r2, #11
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f7ff f82e 	bl	8007f54 <mem_cmp>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008efe:	2100      	movs	r1, #0
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff fe11 	bl	8008b28 <dir_next>
 8008f06:	4603      	mov	r3, r0
 8008f08:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d0c5      	beq.n	8008e9c <dir_find+0x24>
 8008f10:	e002      	b.n	8008f18 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008f12:	bf00      	nop
 8008f14:	e000      	b.n	8008f18 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008f16:	bf00      	nop

	return res;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008f30:	2101      	movs	r1, #1
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff febd 	bl	8008cb2 <dir_alloc>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d11c      	bne.n	8008f7c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	4619      	mov	r1, r3
 8008f48:	68b8      	ldr	r0, [r7, #8]
 8008f4a:	f7ff f9f5 	bl	8008338 <move_window>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d111      	bne.n	8008f7c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe ffdc 	bl	8007f1e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a18      	ldr	r0, [r3, #32]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3324      	adds	r3, #36	@ 0x24
 8008f6e:	220b      	movs	r2, #11
 8008f70:	4619      	mov	r1, r3
 8008f72:	f7fe ffb3 	bl	8007edc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff f9cc 	bl	8008338 <move_window>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008fa4:	7afb      	ldrb	r3, [r7, #11]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d106      	bne.n	8008fb8 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	22e5      	movs	r2, #229	@ 0xe5
 8008fb0:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3324      	adds	r3, #36	@ 0x24
 8008fd8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008fda:	220b      	movs	r2, #11
 8008fdc:	2120      	movs	r1, #32
 8008fde:	68b8      	ldr	r0, [r7, #8]
 8008fe0:	f7fe ff9d 	bl	8007f1e <mem_set>
	si = i = 0; ni = 8;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	613b      	str	r3, [r7, #16]
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	61fb      	str	r3, [r7, #28]
 8008fec:	2308      	movs	r3, #8
 8008fee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	61fa      	str	r2, [r7, #28]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ffe:	7efb      	ldrb	r3, [r7, #27]
 8009000:	2b20      	cmp	r3, #32
 8009002:	d94e      	bls.n	80090a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009004:	7efb      	ldrb	r3, [r7, #27]
 8009006:	2b2f      	cmp	r3, #47	@ 0x2f
 8009008:	d006      	beq.n	8009018 <create_name+0x54>
 800900a:	7efb      	ldrb	r3, [r7, #27]
 800900c:	2b5c      	cmp	r3, #92	@ 0x5c
 800900e:	d110      	bne.n	8009032 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009010:	e002      	b.n	8009018 <create_name+0x54>
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	3301      	adds	r3, #1
 8009016:	61fb      	str	r3, [r7, #28]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	4413      	add	r3, r2
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b2f      	cmp	r3, #47	@ 0x2f
 8009022:	d0f6      	beq.n	8009012 <create_name+0x4e>
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b5c      	cmp	r3, #92	@ 0x5c
 800902e:	d0f0      	beq.n	8009012 <create_name+0x4e>
			break;
 8009030:	e038      	b.n	80090a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009032:	7efb      	ldrb	r3, [r7, #27]
 8009034:	2b2e      	cmp	r3, #46	@ 0x2e
 8009036:	d003      	beq.n	8009040 <create_name+0x7c>
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	429a      	cmp	r2, r3
 800903e:	d30c      	bcc.n	800905a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2b0b      	cmp	r3, #11
 8009044:	d002      	beq.n	800904c <create_name+0x88>
 8009046:	7efb      	ldrb	r3, [r7, #27]
 8009048:	2b2e      	cmp	r3, #46	@ 0x2e
 800904a:	d001      	beq.n	8009050 <create_name+0x8c>
 800904c:	2306      	movs	r3, #6
 800904e:	e044      	b.n	80090da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009050:	2308      	movs	r3, #8
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	230b      	movs	r3, #11
 8009056:	617b      	str	r3, [r7, #20]
			continue;
 8009058:	e022      	b.n	80090a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800905a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800905e:	2b00      	cmp	r3, #0
 8009060:	da04      	bge.n	800906c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009062:	7efb      	ldrb	r3, [r7, #27]
 8009064:	3b80      	subs	r3, #128	@ 0x80
 8009066:	4a1f      	ldr	r2, [pc, #124]	@ (80090e4 <create_name+0x120>)
 8009068:	5cd3      	ldrb	r3, [r2, r3]
 800906a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800906c:	7efb      	ldrb	r3, [r7, #27]
 800906e:	4619      	mov	r1, r3
 8009070:	481d      	ldr	r0, [pc, #116]	@ (80090e8 <create_name+0x124>)
 8009072:	f7fe ff96 	bl	8007fa2 <chk_chr>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <create_name+0xbc>
 800907c:	2306      	movs	r3, #6
 800907e:	e02c      	b.n	80090da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009080:	7efb      	ldrb	r3, [r7, #27]
 8009082:	2b60      	cmp	r3, #96	@ 0x60
 8009084:	d905      	bls.n	8009092 <create_name+0xce>
 8009086:	7efb      	ldrb	r3, [r7, #27]
 8009088:	2b7a      	cmp	r3, #122	@ 0x7a
 800908a:	d802      	bhi.n	8009092 <create_name+0xce>
 800908c:	7efb      	ldrb	r3, [r7, #27]
 800908e:	3b20      	subs	r3, #32
 8009090:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	1c5a      	adds	r2, r3, #1
 8009096:	613a      	str	r2, [r7, #16]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	4413      	add	r3, r2
 800909c:	7efa      	ldrb	r2, [r7, #27]
 800909e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80090a0:	e7a6      	b.n	8008ff0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80090a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	441a      	add	r2, r3
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <create_name+0xf4>
 80090b4:	2306      	movs	r3, #6
 80090b6:	e010      	b.n	80090da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2be5      	cmp	r3, #229	@ 0xe5
 80090be:	d102      	bne.n	80090c6 <create_name+0x102>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2205      	movs	r2, #5
 80090c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80090c6:	7efb      	ldrb	r3, [r7, #27]
 80090c8:	2b20      	cmp	r3, #32
 80090ca:	d801      	bhi.n	80090d0 <create_name+0x10c>
 80090cc:	2204      	movs	r2, #4
 80090ce:	e000      	b.n	80090d2 <create_name+0x10e>
 80090d0:	2200      	movs	r2, #0
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	330b      	adds	r3, #11
 80090d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80090d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	08010a30 	.word	0x08010a30
 80090e8:	0800f870 	.word	0x0800f870

080090ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009100:	e002      	b.n	8009108 <follow_path+0x1c>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	3301      	adds	r3, #1
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b2f      	cmp	r3, #47	@ 0x2f
 800910e:	d0f8      	beq.n	8009102 <follow_path+0x16>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b5c      	cmp	r3, #92	@ 0x5c
 8009116:	d0f4      	beq.n	8009102 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2200      	movs	r2, #0
 800911c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b1f      	cmp	r3, #31
 8009124:	d80a      	bhi.n	800913c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2280      	movs	r2, #128	@ 0x80
 800912a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800912e:	2100      	movs	r1, #0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff fc7e 	bl	8008a32 <dir_sdi>
 8009136:	4603      	mov	r3, r0
 8009138:	75fb      	strb	r3, [r7, #23]
 800913a:	e043      	b.n	80091c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800913c:	463b      	mov	r3, r7
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff ff3f 	bl	8008fc4 <create_name>
 8009146:	4603      	mov	r3, r0
 8009148:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d134      	bne.n	80091ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7ff fe91 	bl	8008e78 <dir_find>
 8009156:	4603      	mov	r3, r0
 8009158:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009160:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009162:	7dfb      	ldrb	r3, [r7, #23]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00a      	beq.n	800917e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009168:	7dfb      	ldrb	r3, [r7, #23]
 800916a:	2b04      	cmp	r3, #4
 800916c:	d127      	bne.n	80091be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800916e:	7afb      	ldrb	r3, [r7, #11]
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b00      	cmp	r3, #0
 8009176:	d122      	bne.n	80091be <follow_path+0xd2>
 8009178:	2305      	movs	r3, #5
 800917a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800917c:	e01f      	b.n	80091be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d11c      	bne.n	80091c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	799b      	ldrb	r3, [r3, #6]
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009194:	2305      	movs	r3, #5
 8009196:	75fb      	strb	r3, [r7, #23]
 8009198:	e014      	b.n	80091c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a8:	4413      	add	r3, r2
 80091aa:	4619      	mov	r1, r3
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f7ff fdc7 	bl	8008d40 <ld_clust>
 80091b2:	4602      	mov	r2, r0
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80091b8:	e7c0      	b.n	800913c <follow_path+0x50>
			if (res != FR_OK) break;
 80091ba:	bf00      	nop
 80091bc:	e002      	b.n	80091c4 <follow_path+0xd8>
				break;
 80091be:	bf00      	nop
 80091c0:	e000      	b.n	80091c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091c2:	bf00      	nop
			}
		}
	}

	return res;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b087      	sub	sp, #28
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80091d6:	f04f 33ff 	mov.w	r3, #4294967295
 80091da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d031      	beq.n	8009248 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	617b      	str	r3, [r7, #20]
 80091ea:	e002      	b.n	80091f2 <get_ldnumber+0x24>
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	3301      	adds	r3, #1
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b20      	cmp	r3, #32
 80091f8:	d903      	bls.n	8009202 <get_ldnumber+0x34>
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8009200:	d1f4      	bne.n	80091ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	2b3a      	cmp	r3, #58	@ 0x3a
 8009208:	d11c      	bne.n	8009244 <get_ldnumber+0x76>
			tp = *path;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	60fa      	str	r2, [r7, #12]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	3b30      	subs	r3, #48	@ 0x30
 800921a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b09      	cmp	r3, #9
 8009220:	d80e      	bhi.n	8009240 <get_ldnumber+0x72>
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	429a      	cmp	r2, r3
 8009228:	d10a      	bne.n	8009240 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d107      	bne.n	8009240 <get_ldnumber+0x72>
					vol = (int)i;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	3301      	adds	r3, #1
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	e002      	b.n	800924a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009244:	2300      	movs	r3, #0
 8009246:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009248:	693b      	ldr	r3, [r7, #16]
}
 800924a:	4618      	mov	r0, r3
 800924c:	371c      	adds	r7, #28
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
	...

08009258 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	70da      	strb	r2, [r3, #3]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f04f 32ff 	mov.w	r2, #4294967295
 800926e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff f860 	bl	8008338 <move_window>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <check_fs+0x2a>
 800927e:	2304      	movs	r3, #4
 8009280:	e038      	b.n	80092f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3330      	adds	r3, #48	@ 0x30
 8009286:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fda4 	bl	8007dd8 <ld_word>
 8009290:	4603      	mov	r3, r0
 8009292:	461a      	mov	r2, r3
 8009294:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009298:	429a      	cmp	r2, r3
 800929a:	d001      	beq.n	80092a0 <check_fs+0x48>
 800929c:	2303      	movs	r3, #3
 800929e:	e029      	b.n	80092f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092a6:	2be9      	cmp	r3, #233	@ 0xe9
 80092a8:	d009      	beq.n	80092be <check_fs+0x66>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80092b0:	2beb      	cmp	r3, #235	@ 0xeb
 80092b2:	d11e      	bne.n	80092f2 <check_fs+0x9a>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80092ba:	2b90      	cmp	r3, #144	@ 0x90
 80092bc:	d119      	bne.n	80092f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3330      	adds	r3, #48	@ 0x30
 80092c2:	3336      	adds	r3, #54	@ 0x36
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fd9f 	bl	8007e08 <ld_dword>
 80092ca:	4603      	mov	r3, r0
 80092cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80092d0:	4a0a      	ldr	r2, [pc, #40]	@ (80092fc <check_fs+0xa4>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d101      	bne.n	80092da <check_fs+0x82>
 80092d6:	2300      	movs	r3, #0
 80092d8:	e00c      	b.n	80092f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3330      	adds	r3, #48	@ 0x30
 80092de:	3352      	adds	r3, #82	@ 0x52
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe fd91 	bl	8007e08 <ld_dword>
 80092e6:	4603      	mov	r3, r0
 80092e8:	4a05      	ldr	r2, [pc, #20]	@ (8009300 <check_fs+0xa8>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d101      	bne.n	80092f2 <check_fs+0x9a>
 80092ee:	2300      	movs	r3, #0
 80092f0:	e000      	b.n	80092f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80092f2:	2302      	movs	r3, #2
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	00544146 	.word	0x00544146
 8009300:	33544146 	.word	0x33544146

08009304 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b096      	sub	sp, #88	@ 0x58
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2200      	movs	r2, #0
 8009316:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff ff58 	bl	80091ce <get_ldnumber>
 800931e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	da01      	bge.n	800932a <find_volume+0x26>
 8009326:	230b      	movs	r3, #11
 8009328:	e22d      	b.n	8009786 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800932a:	4aa1      	ldr	r2, [pc, #644]	@ (80095b0 <find_volume+0x2ac>)
 800932c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800932e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009332:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <find_volume+0x3a>
 800933a:	230c      	movs	r3, #12
 800933c:	e223      	b.n	8009786 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009342:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	f023 0301 	bic.w	r3, r3, #1
 800934a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800934c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01a      	beq.n	800938a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe fc9d 	bl	8007c98 <disk_status>
 800935e:	4603      	mov	r3, r0
 8009360:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009364:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10c      	bne.n	800938a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d007      	beq.n	8009386 <find_volume+0x82>
 8009376:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800937a:	f003 0304 	and.w	r3, r3, #4
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009382:	230a      	movs	r3, #10
 8009384:	e1ff      	b.n	8009786 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009386:	2300      	movs	r3, #0
 8009388:	e1fd      	b.n	8009786 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800938a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938c:	2200      	movs	r2, #0
 800938e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009392:	b2da      	uxtb	r2, r3
 8009394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009396:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fc95 	bl	8007ccc <disk_initialize>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80093a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80093b4:	2303      	movs	r3, #3
 80093b6:	e1e6      	b.n	8009786 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <find_volume+0xca>
 80093be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093c2:	f003 0304 	and.w	r3, r3, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80093ca:	230a      	movs	r3, #10
 80093cc:	e1db      	b.n	8009786 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80093d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80093d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80093d6:	f7ff ff3f 	bl	8009258 <check_fs>
 80093da:	4603      	mov	r3, r0
 80093dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80093e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d149      	bne.n	800947c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80093e8:	2300      	movs	r3, #0
 80093ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80093ec:	e01e      	b.n	800942c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80093ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80093fc:	4413      	add	r3, r2
 80093fe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	3304      	adds	r3, #4
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d006      	beq.n	8009418 <find_volume+0x114>
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	3308      	adds	r3, #8
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe fcfa 	bl	8007e08 <ld_dword>
 8009414:	4602      	mov	r2, r0
 8009416:	e000      	b.n	800941a <find_volume+0x116>
 8009418:	2200      	movs	r2, #0
 800941a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	3358      	adds	r3, #88	@ 0x58
 8009420:	443b      	add	r3, r7
 8009422:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009428:	3301      	adds	r3, #1
 800942a:	643b      	str	r3, [r7, #64]	@ 0x40
 800942c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800942e:	2b03      	cmp	r3, #3
 8009430:	d9dd      	bls.n	80093ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009432:	2300      	movs	r3, #0
 8009434:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <find_volume+0x13e>
 800943c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800943e:	3b01      	subs	r3, #1
 8009440:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	3358      	adds	r3, #88	@ 0x58
 8009448:	443b      	add	r3, r7
 800944a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800944e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <find_volume+0x15e>
 8009456:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009458:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800945a:	f7ff fefd 	bl	8009258 <check_fs>
 800945e:	4603      	mov	r3, r0
 8009460:	e000      	b.n	8009464 <find_volume+0x160>
 8009462:	2303      	movs	r3, #3
 8009464:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009468:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800946c:	2b01      	cmp	r3, #1
 800946e:	d905      	bls.n	800947c <find_volume+0x178>
 8009470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009472:	3301      	adds	r3, #1
 8009474:	643b      	str	r3, [r7, #64]	@ 0x40
 8009476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009478:	2b03      	cmp	r3, #3
 800947a:	d9e2      	bls.n	8009442 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800947c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009480:	2b04      	cmp	r3, #4
 8009482:	d101      	bne.n	8009488 <find_volume+0x184>
 8009484:	2301      	movs	r3, #1
 8009486:	e17e      	b.n	8009786 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009488:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800948c:	2b01      	cmp	r3, #1
 800948e:	d901      	bls.n	8009494 <find_volume+0x190>
 8009490:	230d      	movs	r3, #13
 8009492:	e178      	b.n	8009786 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009496:	3330      	adds	r3, #48	@ 0x30
 8009498:	330b      	adds	r3, #11
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe fc9c 	bl	8007dd8 <ld_word>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094a6:	d001      	beq.n	80094ac <find_volume+0x1a8>
 80094a8:	230d      	movs	r3, #13
 80094aa:	e16c      	b.n	8009786 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80094ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ae:	3330      	adds	r3, #48	@ 0x30
 80094b0:	3316      	adds	r3, #22
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fe fc90 	bl	8007dd8 <ld_word>
 80094b8:	4603      	mov	r3, r0
 80094ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80094bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d106      	bne.n	80094d0 <find_volume+0x1cc>
 80094c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c4:	3330      	adds	r3, #48	@ 0x30
 80094c6:	3324      	adds	r3, #36	@ 0x24
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fe fc9d 	bl	8007e08 <ld_dword>
 80094ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80094d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80094d4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80094d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80094dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80094e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e2:	789b      	ldrb	r3, [r3, #2]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d005      	beq.n	80094f4 <find_volume+0x1f0>
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	789b      	ldrb	r3, [r3, #2]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d001      	beq.n	80094f4 <find_volume+0x1f0>
 80094f0:	230d      	movs	r3, #13
 80094f2:	e148      	b.n	8009786 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	789b      	ldrb	r3, [r3, #2]
 80094f8:	461a      	mov	r2, r3
 80094fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094fc:	fb02 f303 	mul.w	r3, r2, r3
 8009500:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009508:	461a      	mov	r2, r3
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009510:	895b      	ldrh	r3, [r3, #10]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d008      	beq.n	8009528 <find_volume+0x224>
 8009516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009518:	895b      	ldrh	r3, [r3, #10]
 800951a:	461a      	mov	r2, r3
 800951c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951e:	895b      	ldrh	r3, [r3, #10]
 8009520:	3b01      	subs	r3, #1
 8009522:	4013      	ands	r3, r2
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <find_volume+0x228>
 8009528:	230d      	movs	r3, #13
 800952a:	e12c      	b.n	8009786 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800952c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952e:	3330      	adds	r3, #48	@ 0x30
 8009530:	3311      	adds	r3, #17
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe fc50 	bl	8007dd8 <ld_word>
 8009538:	4603      	mov	r3, r0
 800953a:	461a      	mov	r2, r3
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009542:	891b      	ldrh	r3, [r3, #8]
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	b29b      	uxth	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <find_volume+0x24e>
 800954e:	230d      	movs	r3, #13
 8009550:	e119      	b.n	8009786 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009554:	3330      	adds	r3, #48	@ 0x30
 8009556:	3313      	adds	r3, #19
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe fc3d 	bl	8007dd8 <ld_word>
 800955e:	4603      	mov	r3, r0
 8009560:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <find_volume+0x272>
 8009568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956a:	3330      	adds	r3, #48	@ 0x30
 800956c:	3320      	adds	r3, #32
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fc4a 	bl	8007e08 <ld_dword>
 8009574:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009578:	3330      	adds	r3, #48	@ 0x30
 800957a:	330e      	adds	r3, #14
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fc2b 	bl	8007dd8 <ld_word>
 8009582:	4603      	mov	r3, r0
 8009584:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009586:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <find_volume+0x28c>
 800958c:	230d      	movs	r3, #13
 800958e:	e0fa      	b.n	8009786 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009590:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009594:	4413      	add	r3, r2
 8009596:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009598:	8912      	ldrh	r2, [r2, #8]
 800959a:	0912      	lsrs	r2, r2, #4
 800959c:	b292      	uxth	r2, r2
 800959e:	4413      	add	r3, r2
 80095a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80095a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d204      	bcs.n	80095b4 <find_volume+0x2b0>
 80095aa:	230d      	movs	r3, #13
 80095ac:	e0eb      	b.n	8009786 <find_volume+0x482>
 80095ae:	bf00      	nop
 80095b0:	20000f34 	.word	0x20000f34
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80095b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095bc:	8952      	ldrh	r2, [r2, #10]
 80095be:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80095c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <find_volume+0x2ca>
 80095ca:	230d      	movs	r3, #13
 80095cc:	e0db      	b.n	8009786 <find_volume+0x482>
		fmt = FS_FAT32;
 80095ce:	2303      	movs	r3, #3
 80095d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80095da:	4293      	cmp	r3, r2
 80095dc:	d802      	bhi.n	80095e4 <find_volume+0x2e0>
 80095de:	2302      	movs	r3, #2
 80095e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d802      	bhi.n	80095f4 <find_volume+0x2f0>
 80095ee:	2301      	movs	r3, #1
 80095f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	1c9a      	adds	r2, r3, #2
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80095fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009600:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009602:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009606:	441a      	add	r2, r3
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800960c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800960e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009610:	441a      	add	r2, r3
 8009612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009614:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009616:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800961a:	2b03      	cmp	r3, #3
 800961c:	d11e      	bne.n	800965c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800961e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009620:	3330      	adds	r3, #48	@ 0x30
 8009622:	332a      	adds	r3, #42	@ 0x2a
 8009624:	4618      	mov	r0, r3
 8009626:	f7fe fbd7 	bl	8007dd8 <ld_word>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <find_volume+0x330>
 8009630:	230d      	movs	r3, #13
 8009632:	e0a8      	b.n	8009786 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	891b      	ldrh	r3, [r3, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <find_volume+0x33c>
 800963c:	230d      	movs	r3, #13
 800963e:	e0a2      	b.n	8009786 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	3330      	adds	r3, #48	@ 0x30
 8009644:	332c      	adds	r3, #44	@ 0x2c
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe fbde 	bl	8007e08 <ld_dword>
 800964c:	4602      	mov	r2, r0
 800964e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009650:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	647b      	str	r3, [r7, #68]	@ 0x44
 800965a:	e01f      	b.n	800969c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800965c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965e:	891b      	ldrh	r3, [r3, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <find_volume+0x364>
 8009664:	230d      	movs	r3, #13
 8009666:	e08e      	b.n	8009786 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966a:	6a1a      	ldr	r2, [r3, #32]
 800966c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800966e:	441a      	add	r2, r3
 8009670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009672:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009674:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009678:	2b02      	cmp	r3, #2
 800967a:	d103      	bne.n	8009684 <find_volume+0x380>
 800967c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	e00a      	b.n	800969a <find_volume+0x396>
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	695a      	ldr	r2, [r3, #20]
 8009688:	4613      	mov	r3, r2
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	4413      	add	r3, r2
 800968e:	085a      	lsrs	r2, r3, #1
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800969a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969e:	699a      	ldr	r2, [r3, #24]
 80096a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096a2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80096a6:	0a5b      	lsrs	r3, r3, #9
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d201      	bcs.n	80096b0 <find_volume+0x3ac>
 80096ac:	230d      	movs	r3, #13
 80096ae:	e06a      	b.n	8009786 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80096b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	611a      	str	r2, [r3, #16]
 80096b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ba:	691a      	ldr	r2, [r3, #16]
 80096bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096be:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	2280      	movs	r2, #128	@ 0x80
 80096c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80096c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d149      	bne.n	8009762 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80096ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d0:	3330      	adds	r3, #48	@ 0x30
 80096d2:	3330      	adds	r3, #48	@ 0x30
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fe fb7f 	bl	8007dd8 <ld_word>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d140      	bne.n	8009762 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80096e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096e2:	3301      	adds	r3, #1
 80096e4:	4619      	mov	r1, r3
 80096e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096e8:	f7fe fe26 	bl	8008338 <move_window>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d137      	bne.n	8009762 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80096f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f4:	2200      	movs	r2, #0
 80096f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80096f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fa:	3330      	adds	r3, #48	@ 0x30
 80096fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009700:	4618      	mov	r0, r3
 8009702:	f7fe fb69 	bl	8007dd8 <ld_word>
 8009706:	4603      	mov	r3, r0
 8009708:	461a      	mov	r2, r3
 800970a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800970e:	429a      	cmp	r2, r3
 8009710:	d127      	bne.n	8009762 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009714:	3330      	adds	r3, #48	@ 0x30
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fb76 	bl	8007e08 <ld_dword>
 800971c:	4603      	mov	r3, r0
 800971e:	4a1c      	ldr	r2, [pc, #112]	@ (8009790 <find_volume+0x48c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d11e      	bne.n	8009762 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009726:	3330      	adds	r3, #48	@ 0x30
 8009728:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe fb6b 	bl	8007e08 <ld_dword>
 8009732:	4603      	mov	r3, r0
 8009734:	4a17      	ldr	r2, [pc, #92]	@ (8009794 <find_volume+0x490>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d113      	bne.n	8009762 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800973a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800973c:	3330      	adds	r3, #48	@ 0x30
 800973e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fb60 	bl	8007e08 <ld_dword>
 8009748:	4602      	mov	r2, r0
 800974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800974e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009750:	3330      	adds	r3, #48	@ 0x30
 8009752:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe fb56 	bl	8007e08 <ld_dword>
 800975c:	4602      	mov	r2, r0
 800975e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009760:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009764:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009768:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800976a:	4b0b      	ldr	r3, [pc, #44]	@ (8009798 <find_volume+0x494>)
 800976c:	881b      	ldrh	r3, [r3, #0]
 800976e:	3301      	adds	r3, #1
 8009770:	b29a      	uxth	r2, r3
 8009772:	4b09      	ldr	r3, [pc, #36]	@ (8009798 <find_volume+0x494>)
 8009774:	801a      	strh	r2, [r3, #0]
 8009776:	4b08      	ldr	r3, [pc, #32]	@ (8009798 <find_volume+0x494>)
 8009778:	881a      	ldrh	r2, [r3, #0]
 800977a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800977e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009780:	f7fe fd72 	bl	8008268 <clear_lock>
#endif
	return FR_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3758      	adds	r7, #88	@ 0x58
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	41615252 	.word	0x41615252
 8009794:	61417272 	.word	0x61417272
 8009798:	20000f38 	.word	0x20000f38

0800979c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80097a6:	2309      	movs	r3, #9
 80097a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d01c      	beq.n	80097ea <validate+0x4e>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d018      	beq.n	80097ea <validate+0x4e>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d013      	beq.n	80097ea <validate+0x4e>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	889a      	ldrh	r2, [r3, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	88db      	ldrh	r3, [r3, #6]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d10c      	bne.n	80097ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe fa5e 	bl	8007c98 <disk_status>
 80097dc:	4603      	mov	r3, r0
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <validate+0x4e>
			res = FR_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <validate+0x5a>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	e000      	b.n	80097f8 <validate+0x5c>
 80097f6:	2300      	movs	r3, #0
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	6013      	str	r3, [r2, #0]
	return res;
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	4613      	mov	r3, r2
 8009814:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800981a:	f107 0310 	add.w	r3, r7, #16
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fcd5 	bl	80091ce <get_ldnumber>
 8009824:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	2b00      	cmp	r3, #0
 800982a:	da01      	bge.n	8009830 <f_mount+0x28>
 800982c:	230b      	movs	r3, #11
 800982e:	e02b      	b.n	8009888 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009830:	4a17      	ldr	r2, [pc, #92]	@ (8009890 <f_mount+0x88>)
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009838:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009840:	69b8      	ldr	r0, [r7, #24]
 8009842:	f7fe fd11 	bl	8008268 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	490d      	ldr	r1, [pc, #52]	@ (8009890 <f_mount+0x88>)
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <f_mount+0x66>
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d001      	beq.n	8009872 <f_mount+0x6a>
 800986e:	2300      	movs	r3, #0
 8009870:	e00a      	b.n	8009888 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009872:	f107 010c 	add.w	r1, r7, #12
 8009876:	f107 0308 	add.w	r3, r7, #8
 800987a:	2200      	movs	r2, #0
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff fd41 	bl	8009304 <find_volume>
 8009882:	4603      	mov	r3, r0
 8009884:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009886:	7dfb      	ldrb	r3, [r7, #23]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20000f34 	.word	0x20000f34

08009894 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b098      	sub	sp, #96	@ 0x60
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <f_open+0x18>
 80098a8:	2309      	movs	r3, #9
 80098aa:	e1a9      	b.n	8009c00 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80098b4:	79fa      	ldrb	r2, [r7, #7]
 80098b6:	f107 0110 	add.w	r1, r7, #16
 80098ba:	f107 0308 	add.w	r3, r7, #8
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff fd20 	bl	8009304 <find_volume>
 80098c4:	4603      	mov	r3, r0
 80098c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80098ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f040 818d 	bne.w	8009bee <f_open+0x35a>
		dj.obj.fs = fs;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	f107 0314 	add.w	r3, r7, #20
 80098de:	4611      	mov	r1, r2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7ff fc03 	bl	80090ec <follow_path>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80098ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d118      	bne.n	8009926 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80098f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80098f8:	b25b      	sxtb	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	da03      	bge.n	8009906 <f_open+0x72>
				res = FR_INVALID_NAME;
 80098fe:	2306      	movs	r3, #6
 8009900:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009904:	e00f      	b.n	8009926 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	2b01      	cmp	r3, #1
 800990a:	bf8c      	ite	hi
 800990c:	2301      	movhi	r3, #1
 800990e:	2300      	movls	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	f107 0314 	add.w	r3, r7, #20
 8009918:	4611      	mov	r1, r2
 800991a:	4618      	mov	r0, r3
 800991c:	f7fe fb5c 	bl	8007fd8 <chk_lock>
 8009920:	4603      	mov	r3, r0
 8009922:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009926:	79fb      	ldrb	r3, [r7, #7]
 8009928:	f003 031c 	and.w	r3, r3, #28
 800992c:	2b00      	cmp	r3, #0
 800992e:	d07f      	beq.n	8009a30 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009930:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009934:	2b00      	cmp	r3, #0
 8009936:	d017      	beq.n	8009968 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009938:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800993c:	2b04      	cmp	r3, #4
 800993e:	d10e      	bne.n	800995e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009940:	f7fe fba6 	bl	8008090 <enq_lock>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <f_open+0xc4>
 800994a:	f107 0314 	add.w	r3, r7, #20
 800994e:	4618      	mov	r0, r3
 8009950:	f7ff fae7 	bl	8008f22 <dir_register>
 8009954:	4603      	mov	r3, r0
 8009956:	e000      	b.n	800995a <f_open+0xc6>
 8009958:	2312      	movs	r3, #18
 800995a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	f043 0308 	orr.w	r3, r3, #8
 8009964:	71fb      	strb	r3, [r7, #7]
 8009966:	e010      	b.n	800998a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009968:	7ebb      	ldrb	r3, [r7, #26]
 800996a:	f003 0311 	and.w	r3, r3, #17
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <f_open+0xe6>
					res = FR_DENIED;
 8009972:	2307      	movs	r3, #7
 8009974:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009978:	e007      	b.n	800998a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <f_open+0xf6>
 8009984:	2308      	movs	r3, #8
 8009986:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800998a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800998e:	2b00      	cmp	r3, #0
 8009990:	d168      	bne.n	8009a64 <f_open+0x1d0>
 8009992:	79fb      	ldrb	r3, [r7, #7]
 8009994:	f003 0308 	and.w	r3, r3, #8
 8009998:	2b00      	cmp	r3, #0
 800999a:	d063      	beq.n	8009a64 <f_open+0x1d0>
				dw = GET_FATTIME();
 800999c:	f7fd fc40 	bl	8007220 <get_fattime>
 80099a0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80099a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a4:	330e      	adds	r3, #14
 80099a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe fa6b 	bl	8007e84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80099ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b0:	3316      	adds	r3, #22
 80099b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fa65 	bl	8007e84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80099ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099bc:	330b      	adds	r3, #11
 80099be:	2220      	movs	r2, #32
 80099c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099c6:	4611      	mov	r1, r2
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff f9b9 	bl	8008d40 <ld_clust>
 80099ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80099d4:	2200      	movs	r2, #0
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff f9d1 	bl	8008d7e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80099dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099de:	331c      	adds	r3, #28
 80099e0:	2100      	movs	r1, #0
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe fa4e 	bl	8007e84 <st_dword>
					fs->wflag = 1;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2201      	movs	r2, #1
 80099ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80099ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d037      	beq.n	8009a64 <f_open+0x1d0>
						dw = fs->winsect;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80099fa:	f107 0314 	add.w	r3, r7, #20
 80099fe:	2200      	movs	r2, #0
 8009a00:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fee4 	bl	80087d0 <remove_chain>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d126      	bne.n	8009a64 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fc8c 	bl	8008338 <move_window>
 8009a20:	4603      	mov	r3, r0
 8009a22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a2a:	3a01      	subs	r2, #1
 8009a2c:	60da      	str	r2, [r3, #12]
 8009a2e:	e019      	b.n	8009a64 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009a30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d115      	bne.n	8009a64 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009a38:	7ebb      	ldrb	r3, [r7, #26]
 8009a3a:	f003 0310 	and.w	r3, r3, #16
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <f_open+0x1b6>
					res = FR_NO_FILE;
 8009a42:	2304      	movs	r3, #4
 8009a44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009a48:	e00c      	b.n	8009a64 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d007      	beq.n	8009a64 <f_open+0x1d0>
 8009a54:	7ebb      	ldrb	r3, [r7, #26]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <f_open+0x1d0>
						res = FR_DENIED;
 8009a5e:	2307      	movs	r3, #7
 8009a60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009a64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d126      	bne.n	8009aba <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	f003 0308 	and.w	r3, r3, #8
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a7c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009a86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	bf8c      	ite	hi
 8009a92:	2301      	movhi	r3, #1
 8009a94:	2300      	movls	r3, #0
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	461a      	mov	r2, r3
 8009a9a:	f107 0314 	add.w	r3, r7, #20
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fb17 	bl	80080d4 <inc_lock>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d102      	bne.n	8009aba <f_open+0x226>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009aba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f040 8095 	bne.w	8009bee <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff f938 	bl	8008d40 <ld_clust>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ad8:	331c      	adds	r3, #28
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe f994 	bl	8007e08 <ld_dword>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	88da      	ldrh	r2, [r3, #6]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	79fa      	ldrb	r2, [r7, #7]
 8009afe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3330      	adds	r3, #48	@ 0x30
 8009b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe f9fe 	bl	8007f1e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	f003 0320 	and.w	r3, r3, #32
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d060      	beq.n	8009bee <f_open+0x35a>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d05c      	beq.n	8009bee <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	895b      	ldrh	r3, [r3, #10]
 8009b40:	025b      	lsls	r3, r3, #9
 8009b42:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b50:	e016      	b.n	8009b80 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fca9 	bl	80084ae <get_fat>
 8009b5c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d802      	bhi.n	8009b6a <f_open+0x2d6>
 8009b64:	2302      	movs	r3, #2
 8009b66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009b6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b70:	d102      	bne.n	8009b78 <f_open+0x2e4>
 8009b72:	2301      	movs	r3, #1
 8009b74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009b78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d103      	bne.n	8009b90 <f_open+0x2fc>
 8009b88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d8e0      	bhi.n	8009b52 <f_open+0x2be>
				}
				fp->clust = clst;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009b96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d127      	bne.n	8009bee <f_open+0x35a>
 8009b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d022      	beq.n	8009bee <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe fc5f 	bl	8008470 <clust2sect>
 8009bb2:	6478      	str	r0, [r7, #68]	@ 0x44
 8009bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d103      	bne.n	8009bc2 <f_open+0x32e>
						res = FR_INT_ERR;
 8009bba:	2302      	movs	r3, #2
 8009bbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009bc0:	e015      	b.n	8009bee <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bc4:	0a5a      	lsrs	r2, r3, #9
 8009bc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bc8:	441a      	add	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	7858      	ldrb	r0, [r3, #1]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a1a      	ldr	r2, [r3, #32]
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f7fe f89d 	bl	8007d1c <disk_read>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <f_open+0x35a>
 8009be8:	2301      	movs	r3, #1
 8009bea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009bee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <f_open+0x368>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3760      	adds	r7, #96	@ 0x60
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08e      	sub	sp, #56	@ 0x38
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f107 0214 	add.w	r2, r7, #20
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff fdb7 	bl	800979c <validate>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009c34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d107      	bne.n	8009c4c <f_read+0x44>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	7d5b      	ldrb	r3, [r3, #21]
 8009c40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009c44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <f_read+0x4a>
 8009c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009c50:	e115      	b.n	8009e7e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	7d1b      	ldrb	r3, [r3, #20]
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <f_read+0x5a>
 8009c5e:	2307      	movs	r3, #7
 8009c60:	e10d      	b.n	8009e7e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	68da      	ldr	r2, [r3, #12]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	f240 80fe 	bls.w	8009e74 <f_read+0x26c>
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009c7c:	e0fa      	b.n	8009e74 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f040 80c6 	bne.w	8009e18 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	0a5b      	lsrs	r3, r3, #9
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	8952      	ldrh	r2, [r2, #10]
 8009c96:	3a01      	subs	r2, #1
 8009c98:	4013      	ands	r3, r2
 8009c9a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d12f      	bne.n	8009d02 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d103      	bne.n	8009cb2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cb0:	e013      	b.n	8009cda <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d007      	beq.n	8009cca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f7fe fe82 	bl	80089ca <clmt_clust>
 8009cc6:	6338      	str	r0, [r7, #48]	@ 0x30
 8009cc8:	e007      	b.n	8009cda <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f7fe fbeb 	bl	80084ae <get_fat>
 8009cd8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d804      	bhi.n	8009cea <f_read+0xe2>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	755a      	strb	r2, [r3, #21]
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	e0c9      	b.n	8009e7e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf0:	d104      	bne.n	8009cfc <f_read+0xf4>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	755a      	strb	r2, [r3, #21]
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e0c0      	b.n	8009e7e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d00:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	f7fe fbb0 	bl	8008470 <clust2sect>
 8009d10:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d104      	bne.n	8009d22 <f_read+0x11a>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	755a      	strb	r2, [r3, #21]
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e0ad      	b.n	8009e7e <f_read+0x276>
			sect += csect;
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	4413      	add	r3, r2
 8009d28:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	0a5b      	lsrs	r3, r3, #9
 8009d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d039      	beq.n	8009daa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009d36:	69fa      	ldr	r2, [r7, #28]
 8009d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3a:	4413      	add	r3, r2
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	8952      	ldrh	r2, [r2, #10]
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d905      	bls.n	8009d50 <f_read+0x148>
					cc = fs->csize - csect;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	895b      	ldrh	r3, [r3, #10]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	7858      	ldrb	r0, [r3, #1]
 8009d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d5a:	f7fd ffdf 	bl	8007d1c <disk_read>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d004      	beq.n	8009d6e <f_read+0x166>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2201      	movs	r2, #1
 8009d68:	755a      	strb	r2, [r3, #21]
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e087      	b.n	8009e7e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	7d1b      	ldrb	r3, [r3, #20]
 8009d72:	b25b      	sxtb	r3, r3
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da14      	bge.n	8009da2 <f_read+0x19a>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a1a      	ldr	r2, [r3, #32]
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d90d      	bls.n	8009da2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6a1a      	ldr	r2, [r3, #32]
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	025b      	lsls	r3, r3, #9
 8009d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d92:	18d0      	adds	r0, r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3330      	adds	r3, #48	@ 0x30
 8009d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f7fe f89d 	bl	8007edc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	025b      	lsls	r3, r3, #9
 8009da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009da8:	e050      	b.n	8009e4c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	69ba      	ldr	r2, [r7, #24]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d02e      	beq.n	8009e12 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	7d1b      	ldrb	r3, [r3, #20]
 8009db8:	b25b      	sxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da18      	bge.n	8009df0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	7858      	ldrb	r0, [r3, #1]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6a1a      	ldr	r2, [r3, #32]
 8009dcc:	2301      	movs	r3, #1
 8009dce:	f7fd ffc5 	bl	8007d5c <disk_write>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d004      	beq.n	8009de2 <f_read+0x1da>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	755a      	strb	r2, [r3, #21]
 8009dde:	2301      	movs	r3, #1
 8009de0:	e04d      	b.n	8009e7e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	7d1b      	ldrb	r3, [r3, #20]
 8009de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	7858      	ldrb	r0, [r3, #1]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	f7fd ff8d 	bl	8007d1c <disk_read>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <f_read+0x20a>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	755a      	strb	r2, [r3, #21]
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e035      	b.n	8009e7e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e20:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d901      	bls.n	8009e32 <f_read+0x22a>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e40:	4413      	add	r3, r2
 8009e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e44:	4619      	mov	r1, r3
 8009e46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e48:	f7fe f848 	bl	8007edc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e50:	4413      	add	r3, r2
 8009e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5a:	441a      	add	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	619a      	str	r2, [r3, #24]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	441a      	add	r2, r3
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f47f af01 	bne.w	8009c7e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3738      	adds	r7, #56	@ 0x38
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b08c      	sub	sp, #48	@ 0x30
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
 8009e92:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f107 0210 	add.w	r2, r7, #16
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff fc78 	bl	800979c <validate>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d107      	bne.n	8009eca <f_write+0x44>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	7d5b      	ldrb	r3, [r3, #21]
 8009ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <f_write+0x4a>
 8009eca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ece:	e14b      	b.n	800a168 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	7d1b      	ldrb	r3, [r3, #20]
 8009ed4:	f003 0302 	and.w	r3, r3, #2
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <f_write+0x5a>
 8009edc:	2307      	movs	r3, #7
 8009ede:	e143      	b.n	800a168 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	699a      	ldr	r2, [r3, #24]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	441a      	add	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	f080 812d 	bcs.w	800a14c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	43db      	mvns	r3, r3
 8009ef8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009efa:	e127      	b.n	800a14c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 80e3 	bne.w	800a0d0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	0a5b      	lsrs	r3, r3, #9
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	8952      	ldrh	r2, [r2, #10]
 8009f14:	3a01      	subs	r2, #1
 8009f16:	4013      	ands	r3, r2
 8009f18:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d143      	bne.n	8009fa8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10c      	bne.n	8009f42 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d11a      	bne.n	8009f6a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2100      	movs	r1, #0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe fcae 	bl	800889a <create_chain>
 8009f3e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009f40:	e013      	b.n	8009f6a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d007      	beq.n	8009f5a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7fe fd3a 	bl	80089ca <clmt_clust>
 8009f56:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009f58:	e007      	b.n	8009f6a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f7fe fc99 	bl	800889a <create_chain>
 8009f68:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 80f2 	beq.w	800a156 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d104      	bne.n	8009f82 <f_write+0xfc>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	755a      	strb	r2, [r3, #21]
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e0f2      	b.n	800a168 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f88:	d104      	bne.n	8009f94 <f_write+0x10e>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	755a      	strb	r2, [r3, #21]
 8009f90:	2301      	movs	r3, #1
 8009f92:	e0e9      	b.n	800a168 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f98:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <f_write+0x122>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fa6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	7d1b      	ldrb	r3, [r3, #20]
 8009fac:	b25b      	sxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	da18      	bge.n	8009fe4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	7858      	ldrb	r0, [r3, #1]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1a      	ldr	r2, [r3, #32]
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f7fd fecb 	bl	8007d5c <disk_write>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <f_write+0x150>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	755a      	strb	r2, [r3, #21]
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e0c8      	b.n	800a168 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	7d1b      	ldrb	r3, [r3, #20]
 8009fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f7fe fa3f 	bl	8008470 <clust2sect>
 8009ff2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d104      	bne.n	800a004 <f_write+0x17e>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2202      	movs	r2, #2
 8009ffe:	755a      	strb	r2, [r3, #21]
 800a000:	2302      	movs	r3, #2
 800a002:	e0b1      	b.n	800a168 <f_write+0x2e2>
			sect += csect;
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	4413      	add	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	0a5b      	lsrs	r3, r3, #9
 800a010:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d03c      	beq.n	800a092 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	4413      	add	r3, r2
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	8952      	ldrh	r2, [r2, #10]
 800a022:	4293      	cmp	r3, r2
 800a024:	d905      	bls.n	800a032 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	895b      	ldrh	r3, [r3, #10]
 800a02a:	461a      	mov	r2, r3
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	7858      	ldrb	r0, [r3, #1]
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	69f9      	ldr	r1, [r7, #28]
 800a03c:	f7fd fe8e 	bl	8007d5c <disk_write>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d004      	beq.n	800a050 <f_write+0x1ca>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	755a      	strb	r2, [r3, #21]
 800a04c:	2301      	movs	r3, #1
 800a04e:	e08b      	b.n	800a168 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a1a      	ldr	r2, [r3, #32]
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	6a3a      	ldr	r2, [r7, #32]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d915      	bls.n	800a08a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6a1a      	ldr	r2, [r3, #32]
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	025b      	lsls	r3, r3, #9
 800a06e:	69fa      	ldr	r2, [r7, #28]
 800a070:	4413      	add	r3, r2
 800a072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a076:	4619      	mov	r1, r3
 800a078:	f7fd ff30 	bl	8007edc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	7d1b      	ldrb	r3, [r3, #20]
 800a080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a084:	b2da      	uxtb	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	025b      	lsls	r3, r3, #9
 800a08e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a090:	e03f      	b.n	800a112 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d016      	beq.n	800a0ca <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	699a      	ldr	r2, [r3, #24]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d210      	bcs.n	800a0ca <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	7858      	ldrb	r0, [r3, #1]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	f7fd fe31 	bl	8007d1c <disk_read>
 800a0ba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d004      	beq.n	800a0ca <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	755a      	strb	r2, [r3, #21]
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e04e      	b.n	800a168 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a0dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d901      	bls.n	800a0ea <f_write+0x264>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f8:	4413      	add	r3, r2
 800a0fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0fc:	69f9      	ldr	r1, [r7, #28]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fd feec 	bl	8007edc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	7d1b      	ldrb	r3, [r3, #20]
 800a108:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a112:	69fa      	ldr	r2, [r7, #28]
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	4413      	add	r3, r2
 800a118:	61fb      	str	r3, [r7, #28]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	699a      	ldr	r2, [r3, #24]
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a120:	441a      	add	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	619a      	str	r2, [r3, #24]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	429a      	cmp	r2, r3
 800a130:	bf38      	it	cc
 800a132:	461a      	movcc	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	60da      	str	r2, [r3, #12]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13e:	441a      	add	r2, r3
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f47f aed4 	bne.w	8009efc <f_write+0x76>
 800a154:	e000      	b.n	800a158 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a156:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	7d1b      	ldrb	r3, [r3, #20]
 800a15c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a160:	b2da      	uxtb	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3730      	adds	r7, #48	@ 0x30
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f107 0208 	add.w	r2, r7, #8
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff fb0b 	bl	800979c <validate>
 800a186:	4603      	mov	r3, r0
 800a188:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d168      	bne.n	800a262 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7d1b      	ldrb	r3, [r3, #20]
 800a194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d062      	beq.n	800a262 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
 800a1a0:	b25b      	sxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	da15      	bge.n	800a1d2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	7858      	ldrb	r0, [r3, #1]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a1a      	ldr	r2, [r3, #32]
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f7fd fdd1 	bl	8007d5c <disk_write>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <f_sync+0x54>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e04f      	b.n	800a264 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7d1b      	ldrb	r3, [r3, #20]
 800a1c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a1d2:	f7fd f825 	bl	8007220 <get_fattime>
 800a1d6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f7fe f8a9 	bl	8008338 <move_window>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d138      	bne.n	800a262 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	330b      	adds	r3, #11
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	330b      	adds	r3, #11
 800a200:	f042 0220 	orr.w	r2, r2, #32
 800a204:	b2d2      	uxtb	r2, r2
 800a206:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	461a      	mov	r2, r3
 800a212:	68f9      	ldr	r1, [r7, #12]
 800a214:	f7fe fdb3 	bl	8008d7e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f103 021c 	add.w	r2, r3, #28
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f7fd fe2d 	bl	8007e84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3316      	adds	r3, #22
 800a22e:	6939      	ldr	r1, [r7, #16]
 800a230:	4618      	mov	r0, r3
 800a232:	f7fd fe27 	bl	8007e84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3312      	adds	r3, #18
 800a23a:	2100      	movs	r1, #0
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fd fe06 	bl	8007e4e <st_word>
					fs->wflag = 1;
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2201      	movs	r2, #1
 800a246:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe f8a2 	bl	8008394 <sync_fs>
 800a250:	4603      	mov	r3, r0
 800a252:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	7d1b      	ldrb	r3, [r3, #20]
 800a258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a262:	7dfb      	ldrb	r3, [r7, #23]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff ff7b 	bl	800a170 <f_sync>
 800a27a:	4603      	mov	r3, r0
 800a27c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d118      	bne.n	800a2b6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f107 0208 	add.w	r2, r7, #8
 800a28a:	4611      	mov	r1, r2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff fa85 	bl	800979c <validate>
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10c      	bne.n	800a2b6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fd ffa5 	bl	80081f0 <dec_lock>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d102      	bne.n	800a2b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b092      	sub	sp, #72	@ 0x48
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a2cc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff f814 	bl	8009304 <find_volume>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800a2e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f040 8099 	bne.w	800a41e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a2ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f4:	691a      	ldr	r2, [r3, #16]
 800a2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	3b02      	subs	r3, #2
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d804      	bhi.n	800a30a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	e089      	b.n	800a41e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d128      	bne.n	800a368 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a316:	2302      	movs	r3, #2
 800a318:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a31e:	f107 0314 	add.w	r3, r7, #20
 800a322:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe f8c2 	bl	80084ae <get_fat>
 800a32a:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a332:	d103      	bne.n	800a33c <f_getfree+0x7c>
 800a334:	2301      	movs	r3, #1
 800a336:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a33a:	e063      	b.n	800a404 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d103      	bne.n	800a34a <f_getfree+0x8a>
 800a342:	2302      	movs	r3, #2
 800a344:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a348:	e05c      	b.n	800a404 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d102      	bne.n	800a356 <f_getfree+0x96>
 800a350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a352:	3301      	adds	r3, #1
 800a354:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800a356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a358:	3301      	adds	r3, #1
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35e:	695b      	ldr	r3, [r3, #20]
 800a360:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a362:	429a      	cmp	r2, r3
 800a364:	d3db      	bcc.n	800a31e <f_getfree+0x5e>
 800a366:	e04d      	b.n	800a404 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36a:	695b      	ldr	r3, [r3, #20]
 800a36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	637b      	str	r3, [r7, #52]	@ 0x34
 800a378:	2300      	movs	r3, #0
 800a37a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800a37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d113      	bne.n	800a3aa <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	1c5a      	adds	r2, r3, #1
 800a388:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a38a:	4619      	mov	r1, r3
 800a38c:	f7fd ffd4 	bl	8008338 <move_window>
 800a390:	4603      	mov	r3, r0
 800a392:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800a396:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d131      	bne.n	800a402 <f_getfree+0x142>
							p = fs->win;
 800a39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a0:	3330      	adds	r3, #48	@ 0x30
 800a3a2:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800a3a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3a8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d10f      	bne.n	800a3d2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a3b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3b4:	f7fd fd10 	bl	8007dd8 <ld_word>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d102      	bne.n	800a3c4 <f_getfree+0x104>
 800a3be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c6:	3302      	adds	r3, #2
 800a3c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3cc:	3b02      	subs	r3, #2
 800a3ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3d0:	e010      	b.n	800a3f4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a3d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3d4:	f7fd fd18 	bl	8007e08 <ld_dword>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d102      	bne.n	800a3e8 <f_getfree+0x128>
 800a3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	3304      	adds	r3, #4
 800a3ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f0:	3b04      	subs	r3, #4
 800a3f2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800a3f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1bd      	bne.n	800a37c <f_getfree+0xbc>
 800a400:	e000      	b.n	800a404 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a402:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a408:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a40e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a412:	791a      	ldrb	r2, [r3, #4]
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	f042 0201 	orr.w	r2, r2, #1
 800a41a:	b2d2      	uxtb	r2, r2
 800a41c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a41e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a422:	4618      	mov	r0, r3
 800a424:	3748      	adds	r7, #72	@ 0x48
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b09e      	sub	sp, #120	@ 0x78
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a436:	f107 010c 	add.w	r1, r7, #12
 800a43a:	1d3b      	adds	r3, r7, #4
 800a43c:	2202      	movs	r2, #2
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe ff60 	bl	8009304 <find_volume>
 800a444:	4603      	mov	r3, r0
 800a446:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800a44e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a452:	2b00      	cmp	r3, #0
 800a454:	f040 808e 	bne.w	800a574 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a45e:	4611      	mov	r1, r2
 800a460:	4618      	mov	r0, r3
 800a462:	f7fe fe43 	bl	80090ec <follow_path>
 800a466:	4603      	mov	r3, r0
 800a468:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a46c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a470:	2b00      	cmp	r3, #0
 800a472:	d108      	bne.n	800a486 <f_unlink+0x5c>
 800a474:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a478:	2102      	movs	r1, #2
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fd fdac 	bl	8007fd8 <chk_lock>
 800a480:	4603      	mov	r3, r0
 800a482:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a486:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d172      	bne.n	800a574 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a48e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a492:	b25b      	sxtb	r3, r3
 800a494:	2b00      	cmp	r3, #0
 800a496:	da03      	bge.n	800a4a0 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a498:	2306      	movs	r3, #6
 800a49a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800a49e:	e008      	b.n	800a4b2 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a4a0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a4a4:	f003 0301 	and.w	r3, r3, #1
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a4ac:	2307      	movs	r3, #7
 800a4ae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800a4b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d134      	bne.n	800a524 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4be:	4611      	mov	r1, r2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fe fc3d 	bl	8008d40 <ld_clust>
 800a4c6:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a4c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a4cc:	f003 0310 	and.w	r3, r3, #16
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d027      	beq.n	800a524 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800a4d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4da:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a4dc:	f107 0310 	add.w	r3, r7, #16
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe faa5 	bl	8008a32 <dir_sdi>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800a4ee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d116      	bne.n	800a524 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a4f6:	f107 0310 	add.w	r3, r7, #16
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe fc5e 	bl	8008dbe <dir_read>
 800a502:	4603      	mov	r3, r0
 800a504:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a508:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d102      	bne.n	800a516 <f_unlink+0xec>
 800a510:	2307      	movs	r3, #7
 800a512:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a516:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a51a:	2b04      	cmp	r3, #4
 800a51c:	d102      	bne.n	800a524 <f_unlink+0xfa>
 800a51e:	2300      	movs	r3, #0
 800a520:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800a524:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d123      	bne.n	800a574 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a52c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a530:	4618      	mov	r0, r3
 800a532:	f7fe fd28 	bl	8008f86 <dir_remove>
 800a536:	4603      	mov	r3, r0
 800a538:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a53c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10c      	bne.n	800a55e <f_unlink+0x134>
 800a544:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a546:	2b00      	cmp	r3, #0
 800a548:	d009      	beq.n	800a55e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a54a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a54e:	2200      	movs	r2, #0
 800a550:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a552:	4618      	mov	r0, r3
 800a554:	f7fe f93c 	bl	80087d0 <remove_chain>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a55e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a562:	2b00      	cmp	r3, #0
 800a564:	d106      	bne.n	800a574 <f_unlink+0x14a>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fd ff13 	bl	8008394 <sync_fs>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a574:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3778      	adds	r7, #120	@ 0x78
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800a580:	b590      	push	{r4, r7, lr}
 800a582:	b0a5      	sub	sp, #148	@ 0x94
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800a58a:	463b      	mov	r3, r7
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe fe1e 	bl	80091ce <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800a592:	f107 0120 	add.w	r1, r7, #32
 800a596:	1d3b      	adds	r3, r7, #4
 800a598:	2202      	movs	r2, #2
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe feb2 	bl	8009304 <find_volume>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800a5a6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f040 80db 	bne.w	800a766 <f_rename+0x1e6>
		djo.obj.fs = fs;
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fd95 	bl	80090ec <follow_path>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800a5c8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d108      	bne.n	800a5e2 <f_rename+0x62>
 800a5d0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800a5d4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <f_rename+0x62>
 800a5dc:	2306      	movs	r3, #6
 800a5de:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800a5e2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d108      	bne.n	800a5fc <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800a5ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a5ee:	2102      	movs	r1, #2
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fd fcf1 	bl	8007fd8 <chk_lock>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800a5fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a600:	2b00      	cmp	r3, #0
 800a602:	f040 80b0 	bne.w	800a766 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800a606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a608:	f103 010b 	add.w	r1, r3, #11
 800a60c:	f107 0308 	add.w	r3, r7, #8
 800a610:	2215      	movs	r2, #21
 800a612:	4618      	mov	r0, r3
 800a614:	f7fd fc62 	bl	8007edc <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800a618:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800a61c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a620:	2230      	movs	r2, #48	@ 0x30
 800a622:	4618      	mov	r0, r3
 800a624:	f7fd fc5a 	bl	8007edc <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a62e:	4611      	mov	r1, r2
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe fd5b 	bl	80090ec <follow_path>
 800a636:	4603      	mov	r3, r0
 800a638:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800a63c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10c      	bne.n	800a65e <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800a644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a648:	429a      	cmp	r2, r3
 800a64a:	d105      	bne.n	800a658 <f_rename+0xd8>
 800a64c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a64e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a650:	429a      	cmp	r2, r3
 800a652:	d101      	bne.n	800a658 <f_rename+0xd8>
 800a654:	2304      	movs	r3, #4
 800a656:	e000      	b.n	800a65a <f_rename+0xda>
 800a658:	2308      	movs	r3, #8
 800a65a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800a65e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a662:	2b04      	cmp	r3, #4
 800a664:	d168      	bne.n	800a738 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800a666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe fc59 	bl	8008f22 <dir_register>
 800a670:	4603      	mov	r3, r0
 800a672:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800a676:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d15c      	bne.n	800a738 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800a67e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800a684:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a688:	f103 000d 	add.w	r0, r3, #13
 800a68c:	f107 0308 	add.w	r3, r7, #8
 800a690:	3302      	adds	r3, #2
 800a692:	2213      	movs	r2, #19
 800a694:	4619      	mov	r1, r3
 800a696:	f7fd fc21 	bl	8007edc <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800a69a:	7a3a      	ldrb	r2, [r7, #8]
 800a69c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6a0:	330b      	adds	r3, #11
 800a6a2:	f042 0220 	orr.w	r2, r2, #32
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800a6b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6b4:	330b      	adds	r3, #11
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	f003 0310 	and.w	r3, r3, #16
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d03b      	beq.n	800a738 <f_rename+0x1b8>
 800a6c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d037      	beq.n	800a738 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800a6c8:	6a3c      	ldr	r4, [r7, #32]
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe fb35 	bl	8008d40 <ld_clust>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f7fd fec8 	bl	8008470 <clust2sect>
 800a6e0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800a6e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d103      	bne.n	800a6f4 <f_rename+0x174>
								res = FR_INT_ERR;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800a6f2:	e021      	b.n	800a738 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fd fe1c 	bl	8008338 <move_window>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	3330      	adds	r3, #48	@ 0x30
 800a70a:	3320      	adds	r3, #32
 800a70c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800a710:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10f      	bne.n	800a738 <f_rename+0x1b8>
 800a718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a71c:	3301      	adds	r3, #1
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	2b2e      	cmp	r3, #46	@ 0x2e
 800a722:	d109      	bne.n	800a738 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a728:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe fb26 	bl	8008d7e <st_clust>
									fs->wflag = 1;
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	2201      	movs	r2, #1
 800a736:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800a738:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d112      	bne.n	800a766 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800a740:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe fc1e 	bl	8008f86 <dir_remove>
 800a74a:	4603      	mov	r3, r0
 800a74c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800a750:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800a754:	2b00      	cmp	r3, #0
 800a756:	d106      	bne.n	800a766 <f_rename+0x1e6>
					res = sync_fs(fs);
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fd fe1a 	bl	8008394 <sync_fs>
 800a760:	4603      	mov	r3, r0
 800a762:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a766:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3794      	adds	r7, #148	@ 0x94
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd90      	pop	{r4, r7, pc}

0800a772 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b088      	sub	sp, #32
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a786:	e01c      	b.n	800a7c2 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a788:	f107 0310 	add.w	r3, r7, #16
 800a78c:	f107 0114 	add.w	r1, r7, #20
 800a790:	2201      	movs	r2, #1
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fa38 	bl	8009c08 <f_read>
		if (rc != 1) break;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d117      	bne.n	800a7ce <f_gets+0x5c>
		c = s[0];
 800a79e:	7d3b      	ldrb	r3, [r7, #20]
 800a7a0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	2b0d      	cmp	r3, #13
 800a7a6:	d00b      	beq.n	800a7c0 <f_gets+0x4e>
		*p++ = c;
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	1c5a      	adds	r2, r3, #1
 800a7ac:	61ba      	str	r2, [r7, #24]
 800a7ae:	7dfa      	ldrb	r2, [r7, #23]
 800a7b0:	701a      	strb	r2, [r3, #0]
		n++;
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a7b8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ba:	2b0a      	cmp	r3, #10
 800a7bc:	d009      	beq.n	800a7d2 <f_gets+0x60>
 800a7be:	e000      	b.n	800a7c2 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a7c0:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	69fa      	ldr	r2, [r7, #28]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	dbdd      	blt.n	800a788 <f_gets+0x16>
 800a7cc:	e002      	b.n	800a7d4 <f_gets+0x62>
		if (rc != 1) break;
 800a7ce:	bf00      	nop
 800a7d0:	e000      	b.n	800a7d4 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800a7d2:	bf00      	nop
	}
	*p = 0;
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <f_gets+0x72>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	e000      	b.n	800a7e6 <f_gets+0x74>
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3720      	adds	r7, #32
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
	...

0800a7f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a7fe:	2301      	movs	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a806:	4b1f      	ldr	r3, [pc, #124]	@ (800a884 <FATFS_LinkDriverEx+0x94>)
 800a808:	7a5b      	ldrb	r3, [r3, #9]
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d131      	bne.n	800a874 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a810:	4b1c      	ldr	r3, [pc, #112]	@ (800a884 <FATFS_LinkDriverEx+0x94>)
 800a812:	7a5b      	ldrb	r3, [r3, #9]
 800a814:	b2db      	uxtb	r3, r3
 800a816:	461a      	mov	r2, r3
 800a818:	4b1a      	ldr	r3, [pc, #104]	@ (800a884 <FATFS_LinkDriverEx+0x94>)
 800a81a:	2100      	movs	r1, #0
 800a81c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a81e:	4b19      	ldr	r3, [pc, #100]	@ (800a884 <FATFS_LinkDriverEx+0x94>)
 800a820:	7a5b      	ldrb	r3, [r3, #9]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	4a17      	ldr	r2, [pc, #92]	@ (800a884 <FATFS_LinkDriverEx+0x94>)
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a82e:	4b15      	ldr	r3, [pc, #84]	@ (800a884 <FATFS_LinkDriverEx+0x94>)
 800a830:	7a5b      	ldrb	r3, [r3, #9]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	461a      	mov	r2, r3
 800a836:	4b13      	ldr	r3, [pc, #76]	@ (800a884 <FATFS_LinkDriverEx+0x94>)
 800a838:	4413      	add	r3, r2
 800a83a:	79fa      	ldrb	r2, [r7, #7]
 800a83c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a83e:	4b11      	ldr	r3, [pc, #68]	@ (800a884 <FATFS_LinkDriverEx+0x94>)
 800a840:	7a5b      	ldrb	r3, [r3, #9]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	b2d1      	uxtb	r1, r2
 800a848:	4a0e      	ldr	r2, [pc, #56]	@ (800a884 <FATFS_LinkDriverEx+0x94>)
 800a84a:	7251      	strb	r1, [r2, #9]
 800a84c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a84e:	7dbb      	ldrb	r3, [r7, #22]
 800a850:	3330      	adds	r3, #48	@ 0x30
 800a852:	b2da      	uxtb	r2, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	3301      	adds	r3, #1
 800a85c:	223a      	movs	r2, #58	@ 0x3a
 800a85e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	3302      	adds	r3, #2
 800a864:	222f      	movs	r2, #47	@ 0x2f
 800a866:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	3303      	adds	r3, #3
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a874:	7dfb      	ldrb	r3, [r7, #23]
}
 800a876:	4618      	mov	r0, r3
 800a878:	371c      	adds	r7, #28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20000f5c 	.word	0x20000f5c

0800a888 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a892:	2200      	movs	r2, #0
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff ffaa 	bl	800a7f0 <FATFS_LinkDriverEx>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <_strtol_l.constprop.0>:
 800a8a8:	2b24      	cmp	r3, #36	@ 0x24
 800a8aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ae:	4686      	mov	lr, r0
 800a8b0:	4690      	mov	r8, r2
 800a8b2:	d801      	bhi.n	800a8b8 <_strtol_l.constprop.0+0x10>
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d106      	bne.n	800a8c6 <_strtol_l.constprop.0+0x1e>
 800a8b8:	f001 f9b6 	bl	800bc28 <__errno>
 800a8bc:	2316      	movs	r3, #22
 800a8be:	6003      	str	r3, [r0, #0]
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c6:	4834      	ldr	r0, [pc, #208]	@ (800a998 <_strtol_l.constprop.0+0xf0>)
 800a8c8:	460d      	mov	r5, r1
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8d0:	5d06      	ldrb	r6, [r0, r4]
 800a8d2:	f016 0608 	ands.w	r6, r6, #8
 800a8d6:	d1f8      	bne.n	800a8ca <_strtol_l.constprop.0+0x22>
 800a8d8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a8da:	d12d      	bne.n	800a938 <_strtol_l.constprop.0+0x90>
 800a8dc:	782c      	ldrb	r4, [r5, #0]
 800a8de:	2601      	movs	r6, #1
 800a8e0:	1c95      	adds	r5, r2, #2
 800a8e2:	f033 0210 	bics.w	r2, r3, #16
 800a8e6:	d109      	bne.n	800a8fc <_strtol_l.constprop.0+0x54>
 800a8e8:	2c30      	cmp	r4, #48	@ 0x30
 800a8ea:	d12a      	bne.n	800a942 <_strtol_l.constprop.0+0x9a>
 800a8ec:	782a      	ldrb	r2, [r5, #0]
 800a8ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a8f2:	2a58      	cmp	r2, #88	@ 0x58
 800a8f4:	d125      	bne.n	800a942 <_strtol_l.constprop.0+0x9a>
 800a8f6:	786c      	ldrb	r4, [r5, #1]
 800a8f8:	2310      	movs	r3, #16
 800a8fa:	3502      	adds	r5, #2
 800a8fc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a900:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a904:	2200      	movs	r2, #0
 800a906:	fbbc f9f3 	udiv	r9, ip, r3
 800a90a:	4610      	mov	r0, r2
 800a90c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a910:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a914:	2f09      	cmp	r7, #9
 800a916:	d81b      	bhi.n	800a950 <_strtol_l.constprop.0+0xa8>
 800a918:	463c      	mov	r4, r7
 800a91a:	42a3      	cmp	r3, r4
 800a91c:	dd27      	ble.n	800a96e <_strtol_l.constprop.0+0xc6>
 800a91e:	1c57      	adds	r7, r2, #1
 800a920:	d007      	beq.n	800a932 <_strtol_l.constprop.0+0x8a>
 800a922:	4581      	cmp	r9, r0
 800a924:	d320      	bcc.n	800a968 <_strtol_l.constprop.0+0xc0>
 800a926:	d101      	bne.n	800a92c <_strtol_l.constprop.0+0x84>
 800a928:	45a2      	cmp	sl, r4
 800a92a:	db1d      	blt.n	800a968 <_strtol_l.constprop.0+0xc0>
 800a92c:	fb00 4003 	mla	r0, r0, r3, r4
 800a930:	2201      	movs	r2, #1
 800a932:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a936:	e7eb      	b.n	800a910 <_strtol_l.constprop.0+0x68>
 800a938:	2c2b      	cmp	r4, #43	@ 0x2b
 800a93a:	bf04      	itt	eq
 800a93c:	782c      	ldrbeq	r4, [r5, #0]
 800a93e:	1c95      	addeq	r5, r2, #2
 800a940:	e7cf      	b.n	800a8e2 <_strtol_l.constprop.0+0x3a>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1da      	bne.n	800a8fc <_strtol_l.constprop.0+0x54>
 800a946:	2c30      	cmp	r4, #48	@ 0x30
 800a948:	bf0c      	ite	eq
 800a94a:	2308      	moveq	r3, #8
 800a94c:	230a      	movne	r3, #10
 800a94e:	e7d5      	b.n	800a8fc <_strtol_l.constprop.0+0x54>
 800a950:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a954:	2f19      	cmp	r7, #25
 800a956:	d801      	bhi.n	800a95c <_strtol_l.constprop.0+0xb4>
 800a958:	3c37      	subs	r4, #55	@ 0x37
 800a95a:	e7de      	b.n	800a91a <_strtol_l.constprop.0+0x72>
 800a95c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a960:	2f19      	cmp	r7, #25
 800a962:	d804      	bhi.n	800a96e <_strtol_l.constprop.0+0xc6>
 800a964:	3c57      	subs	r4, #87	@ 0x57
 800a966:	e7d8      	b.n	800a91a <_strtol_l.constprop.0+0x72>
 800a968:	f04f 32ff 	mov.w	r2, #4294967295
 800a96c:	e7e1      	b.n	800a932 <_strtol_l.constprop.0+0x8a>
 800a96e:	1c53      	adds	r3, r2, #1
 800a970:	d108      	bne.n	800a984 <_strtol_l.constprop.0+0xdc>
 800a972:	2322      	movs	r3, #34	@ 0x22
 800a974:	f8ce 3000 	str.w	r3, [lr]
 800a978:	4660      	mov	r0, ip
 800a97a:	f1b8 0f00 	cmp.w	r8, #0
 800a97e:	d0a0      	beq.n	800a8c2 <_strtol_l.constprop.0+0x1a>
 800a980:	1e69      	subs	r1, r5, #1
 800a982:	e006      	b.n	800a992 <_strtol_l.constprop.0+0xea>
 800a984:	b106      	cbz	r6, 800a988 <_strtol_l.constprop.0+0xe0>
 800a986:	4240      	negs	r0, r0
 800a988:	f1b8 0f00 	cmp.w	r8, #0
 800a98c:	d099      	beq.n	800a8c2 <_strtol_l.constprop.0+0x1a>
 800a98e:	2a00      	cmp	r2, #0
 800a990:	d1f6      	bne.n	800a980 <_strtol_l.constprop.0+0xd8>
 800a992:	f8c8 1000 	str.w	r1, [r8]
 800a996:	e794      	b.n	800a8c2 <_strtol_l.constprop.0+0x1a>
 800a998:	08010ab1 	.word	0x08010ab1

0800a99c <_strtol_r>:
 800a99c:	f7ff bf84 	b.w	800a8a8 <_strtol_l.constprop.0>

0800a9a0 <strtol>:
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	460a      	mov	r2, r1
 800a9a4:	4601      	mov	r1, r0
 800a9a6:	4802      	ldr	r0, [pc, #8]	@ (800a9b0 <strtol+0x10>)
 800a9a8:	6800      	ldr	r0, [r0, #0]
 800a9aa:	f7ff bf7d 	b.w	800a8a8 <_strtol_l.constprop.0>
 800a9ae:	bf00      	nop
 800a9b0:	20000044 	.word	0x20000044

0800a9b4 <__cvt>:
 800a9b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b8:	ec57 6b10 	vmov	r6, r7, d0
 800a9bc:	2f00      	cmp	r7, #0
 800a9be:	460c      	mov	r4, r1
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	463b      	mov	r3, r7
 800a9c4:	bfbb      	ittet	lt
 800a9c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a9ca:	461f      	movlt	r7, r3
 800a9cc:	2300      	movge	r3, #0
 800a9ce:	232d      	movlt	r3, #45	@ 0x2d
 800a9d0:	700b      	strb	r3, [r1, #0]
 800a9d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a9d8:	4691      	mov	r9, r2
 800a9da:	f023 0820 	bic.w	r8, r3, #32
 800a9de:	bfbc      	itt	lt
 800a9e0:	4632      	movlt	r2, r6
 800a9e2:	4616      	movlt	r6, r2
 800a9e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a9e8:	d005      	beq.n	800a9f6 <__cvt+0x42>
 800a9ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a9ee:	d100      	bne.n	800a9f2 <__cvt+0x3e>
 800a9f0:	3401      	adds	r4, #1
 800a9f2:	2102      	movs	r1, #2
 800a9f4:	e000      	b.n	800a9f8 <__cvt+0x44>
 800a9f6:	2103      	movs	r1, #3
 800a9f8:	ab03      	add	r3, sp, #12
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	ab02      	add	r3, sp, #8
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	ec47 6b10 	vmov	d0, r6, r7
 800aa04:	4653      	mov	r3, sl
 800aa06:	4622      	mov	r2, r4
 800aa08:	f001 f9ea 	bl	800bde0 <_dtoa_r>
 800aa0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa10:	4605      	mov	r5, r0
 800aa12:	d119      	bne.n	800aa48 <__cvt+0x94>
 800aa14:	f019 0f01 	tst.w	r9, #1
 800aa18:	d00e      	beq.n	800aa38 <__cvt+0x84>
 800aa1a:	eb00 0904 	add.w	r9, r0, r4
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2300      	movs	r3, #0
 800aa22:	4630      	mov	r0, r6
 800aa24:	4639      	mov	r1, r7
 800aa26:	f7f6 f86f 	bl	8000b08 <__aeabi_dcmpeq>
 800aa2a:	b108      	cbz	r0, 800aa30 <__cvt+0x7c>
 800aa2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa30:	2230      	movs	r2, #48	@ 0x30
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	454b      	cmp	r3, r9
 800aa36:	d31e      	bcc.n	800aa76 <__cvt+0xc2>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa3c:	1b5b      	subs	r3, r3, r5
 800aa3e:	4628      	mov	r0, r5
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	b004      	add	sp, #16
 800aa44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa4c:	eb00 0904 	add.w	r9, r0, r4
 800aa50:	d1e5      	bne.n	800aa1e <__cvt+0x6a>
 800aa52:	7803      	ldrb	r3, [r0, #0]
 800aa54:	2b30      	cmp	r3, #48	@ 0x30
 800aa56:	d10a      	bne.n	800aa6e <__cvt+0xba>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	4639      	mov	r1, r7
 800aa60:	f7f6 f852 	bl	8000b08 <__aeabi_dcmpeq>
 800aa64:	b918      	cbnz	r0, 800aa6e <__cvt+0xba>
 800aa66:	f1c4 0401 	rsb	r4, r4, #1
 800aa6a:	f8ca 4000 	str.w	r4, [sl]
 800aa6e:	f8da 3000 	ldr.w	r3, [sl]
 800aa72:	4499      	add	r9, r3
 800aa74:	e7d3      	b.n	800aa1e <__cvt+0x6a>
 800aa76:	1c59      	adds	r1, r3, #1
 800aa78:	9103      	str	r1, [sp, #12]
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	e7d9      	b.n	800aa32 <__cvt+0x7e>

0800aa7e <__exponent>:
 800aa7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa80:	2900      	cmp	r1, #0
 800aa82:	bfba      	itte	lt
 800aa84:	4249      	neglt	r1, r1
 800aa86:	232d      	movlt	r3, #45	@ 0x2d
 800aa88:	232b      	movge	r3, #43	@ 0x2b
 800aa8a:	2909      	cmp	r1, #9
 800aa8c:	7002      	strb	r2, [r0, #0]
 800aa8e:	7043      	strb	r3, [r0, #1]
 800aa90:	dd29      	ble.n	800aae6 <__exponent+0x68>
 800aa92:	f10d 0307 	add.w	r3, sp, #7
 800aa96:	461d      	mov	r5, r3
 800aa98:	270a      	movs	r7, #10
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	fbb1 f6f7 	udiv	r6, r1, r7
 800aaa0:	fb07 1416 	mls	r4, r7, r6, r1
 800aaa4:	3430      	adds	r4, #48	@ 0x30
 800aaa6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aaaa:	460c      	mov	r4, r1
 800aaac:	2c63      	cmp	r4, #99	@ 0x63
 800aaae:	f103 33ff 	add.w	r3, r3, #4294967295
 800aab2:	4631      	mov	r1, r6
 800aab4:	dcf1      	bgt.n	800aa9a <__exponent+0x1c>
 800aab6:	3130      	adds	r1, #48	@ 0x30
 800aab8:	1e94      	subs	r4, r2, #2
 800aaba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aabe:	1c41      	adds	r1, r0, #1
 800aac0:	4623      	mov	r3, r4
 800aac2:	42ab      	cmp	r3, r5
 800aac4:	d30a      	bcc.n	800aadc <__exponent+0x5e>
 800aac6:	f10d 0309 	add.w	r3, sp, #9
 800aaca:	1a9b      	subs	r3, r3, r2
 800aacc:	42ac      	cmp	r4, r5
 800aace:	bf88      	it	hi
 800aad0:	2300      	movhi	r3, #0
 800aad2:	3302      	adds	r3, #2
 800aad4:	4403      	add	r3, r0
 800aad6:	1a18      	subs	r0, r3, r0
 800aad8:	b003      	add	sp, #12
 800aada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aadc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aae0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aae4:	e7ed      	b.n	800aac2 <__exponent+0x44>
 800aae6:	2330      	movs	r3, #48	@ 0x30
 800aae8:	3130      	adds	r1, #48	@ 0x30
 800aaea:	7083      	strb	r3, [r0, #2]
 800aaec:	70c1      	strb	r1, [r0, #3]
 800aaee:	1d03      	adds	r3, r0, #4
 800aaf0:	e7f1      	b.n	800aad6 <__exponent+0x58>
	...

0800aaf4 <_printf_float>:
 800aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf8:	b08d      	sub	sp, #52	@ 0x34
 800aafa:	460c      	mov	r4, r1
 800aafc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab00:	4616      	mov	r6, r2
 800ab02:	461f      	mov	r7, r3
 800ab04:	4605      	mov	r5, r0
 800ab06:	f001 f845 	bl	800bb94 <_localeconv_r>
 800ab0a:	6803      	ldr	r3, [r0, #0]
 800ab0c:	9304      	str	r3, [sp, #16]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7f5 fbce 	bl	80002b0 <strlen>
 800ab14:	2300      	movs	r3, #0
 800ab16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab18:	f8d8 3000 	ldr.w	r3, [r8]
 800ab1c:	9005      	str	r0, [sp, #20]
 800ab1e:	3307      	adds	r3, #7
 800ab20:	f023 0307 	bic.w	r3, r3, #7
 800ab24:	f103 0208 	add.w	r2, r3, #8
 800ab28:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab2c:	f8d4 b000 	ldr.w	fp, [r4]
 800ab30:	f8c8 2000 	str.w	r2, [r8]
 800ab34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ab3c:	9307      	str	r3, [sp, #28]
 800ab3e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ab46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab4a:	4b9c      	ldr	r3, [pc, #624]	@ (800adbc <_printf_float+0x2c8>)
 800ab4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab50:	f7f6 f80c 	bl	8000b6c <__aeabi_dcmpun>
 800ab54:	bb70      	cbnz	r0, 800abb4 <_printf_float+0xc0>
 800ab56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab5a:	4b98      	ldr	r3, [pc, #608]	@ (800adbc <_printf_float+0x2c8>)
 800ab5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab60:	f7f5 ffe6 	bl	8000b30 <__aeabi_dcmple>
 800ab64:	bb30      	cbnz	r0, 800abb4 <_printf_float+0xc0>
 800ab66:	2200      	movs	r2, #0
 800ab68:	2300      	movs	r3, #0
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	f7f5 ffd5 	bl	8000b1c <__aeabi_dcmplt>
 800ab72:	b110      	cbz	r0, 800ab7a <_printf_float+0x86>
 800ab74:	232d      	movs	r3, #45	@ 0x2d
 800ab76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab7a:	4a91      	ldr	r2, [pc, #580]	@ (800adc0 <_printf_float+0x2cc>)
 800ab7c:	4b91      	ldr	r3, [pc, #580]	@ (800adc4 <_printf_float+0x2d0>)
 800ab7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ab82:	bf94      	ite	ls
 800ab84:	4690      	movls	r8, r2
 800ab86:	4698      	movhi	r8, r3
 800ab88:	2303      	movs	r3, #3
 800ab8a:	6123      	str	r3, [r4, #16]
 800ab8c:	f02b 0304 	bic.w	r3, fp, #4
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	f04f 0900 	mov.w	r9, #0
 800ab96:	9700      	str	r7, [sp, #0]
 800ab98:	4633      	mov	r3, r6
 800ab9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f000 f9d2 	bl	800af48 <_printf_common>
 800aba4:	3001      	adds	r0, #1
 800aba6:	f040 808d 	bne.w	800acc4 <_printf_float+0x1d0>
 800abaa:	f04f 30ff 	mov.w	r0, #4294967295
 800abae:	b00d      	add	sp, #52	@ 0x34
 800abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb4:	4642      	mov	r2, r8
 800abb6:	464b      	mov	r3, r9
 800abb8:	4640      	mov	r0, r8
 800abba:	4649      	mov	r1, r9
 800abbc:	f7f5 ffd6 	bl	8000b6c <__aeabi_dcmpun>
 800abc0:	b140      	cbz	r0, 800abd4 <_printf_float+0xe0>
 800abc2:	464b      	mov	r3, r9
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bfbc      	itt	lt
 800abc8:	232d      	movlt	r3, #45	@ 0x2d
 800abca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800abce:	4a7e      	ldr	r2, [pc, #504]	@ (800adc8 <_printf_float+0x2d4>)
 800abd0:	4b7e      	ldr	r3, [pc, #504]	@ (800adcc <_printf_float+0x2d8>)
 800abd2:	e7d4      	b.n	800ab7e <_printf_float+0x8a>
 800abd4:	6863      	ldr	r3, [r4, #4]
 800abd6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800abda:	9206      	str	r2, [sp, #24]
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	d13b      	bne.n	800ac58 <_printf_float+0x164>
 800abe0:	2306      	movs	r3, #6
 800abe2:	6063      	str	r3, [r4, #4]
 800abe4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800abe8:	2300      	movs	r3, #0
 800abea:	6022      	str	r2, [r4, #0]
 800abec:	9303      	str	r3, [sp, #12]
 800abee:	ab0a      	add	r3, sp, #40	@ 0x28
 800abf0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800abf4:	ab09      	add	r3, sp, #36	@ 0x24
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	6861      	ldr	r1, [r4, #4]
 800abfa:	ec49 8b10 	vmov	d0, r8, r9
 800abfe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac02:	4628      	mov	r0, r5
 800ac04:	f7ff fed6 	bl	800a9b4 <__cvt>
 800ac08:	9b06      	ldr	r3, [sp, #24]
 800ac0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac0c:	2b47      	cmp	r3, #71	@ 0x47
 800ac0e:	4680      	mov	r8, r0
 800ac10:	d129      	bne.n	800ac66 <_printf_float+0x172>
 800ac12:	1cc8      	adds	r0, r1, #3
 800ac14:	db02      	blt.n	800ac1c <_printf_float+0x128>
 800ac16:	6863      	ldr	r3, [r4, #4]
 800ac18:	4299      	cmp	r1, r3
 800ac1a:	dd41      	ble.n	800aca0 <_printf_float+0x1ac>
 800ac1c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac20:	fa5f fa8a 	uxtb.w	sl, sl
 800ac24:	3901      	subs	r1, #1
 800ac26:	4652      	mov	r2, sl
 800ac28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac2c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac2e:	f7ff ff26 	bl	800aa7e <__exponent>
 800ac32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac34:	1813      	adds	r3, r2, r0
 800ac36:	2a01      	cmp	r2, #1
 800ac38:	4681      	mov	r9, r0
 800ac3a:	6123      	str	r3, [r4, #16]
 800ac3c:	dc02      	bgt.n	800ac44 <_printf_float+0x150>
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	07d2      	lsls	r2, r2, #31
 800ac42:	d501      	bpl.n	800ac48 <_printf_float+0x154>
 800ac44:	3301      	adds	r3, #1
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0a2      	beq.n	800ab96 <_printf_float+0xa2>
 800ac50:	232d      	movs	r3, #45	@ 0x2d
 800ac52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac56:	e79e      	b.n	800ab96 <_printf_float+0xa2>
 800ac58:	9a06      	ldr	r2, [sp, #24]
 800ac5a:	2a47      	cmp	r2, #71	@ 0x47
 800ac5c:	d1c2      	bne.n	800abe4 <_printf_float+0xf0>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1c0      	bne.n	800abe4 <_printf_float+0xf0>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e7bd      	b.n	800abe2 <_printf_float+0xee>
 800ac66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac6a:	d9db      	bls.n	800ac24 <_printf_float+0x130>
 800ac6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ac70:	d118      	bne.n	800aca4 <_printf_float+0x1b0>
 800ac72:	2900      	cmp	r1, #0
 800ac74:	6863      	ldr	r3, [r4, #4]
 800ac76:	dd0b      	ble.n	800ac90 <_printf_float+0x19c>
 800ac78:	6121      	str	r1, [r4, #16]
 800ac7a:	b913      	cbnz	r3, 800ac82 <_printf_float+0x18e>
 800ac7c:	6822      	ldr	r2, [r4, #0]
 800ac7e:	07d0      	lsls	r0, r2, #31
 800ac80:	d502      	bpl.n	800ac88 <_printf_float+0x194>
 800ac82:	3301      	adds	r3, #1
 800ac84:	440b      	add	r3, r1
 800ac86:	6123      	str	r3, [r4, #16]
 800ac88:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ac8a:	f04f 0900 	mov.w	r9, #0
 800ac8e:	e7db      	b.n	800ac48 <_printf_float+0x154>
 800ac90:	b913      	cbnz	r3, 800ac98 <_printf_float+0x1a4>
 800ac92:	6822      	ldr	r2, [r4, #0]
 800ac94:	07d2      	lsls	r2, r2, #31
 800ac96:	d501      	bpl.n	800ac9c <_printf_float+0x1a8>
 800ac98:	3302      	adds	r3, #2
 800ac9a:	e7f4      	b.n	800ac86 <_printf_float+0x192>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e7f2      	b.n	800ac86 <_printf_float+0x192>
 800aca0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aca6:	4299      	cmp	r1, r3
 800aca8:	db05      	blt.n	800acb6 <_printf_float+0x1c2>
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	6121      	str	r1, [r4, #16]
 800acae:	07d8      	lsls	r0, r3, #31
 800acb0:	d5ea      	bpl.n	800ac88 <_printf_float+0x194>
 800acb2:	1c4b      	adds	r3, r1, #1
 800acb4:	e7e7      	b.n	800ac86 <_printf_float+0x192>
 800acb6:	2900      	cmp	r1, #0
 800acb8:	bfd4      	ite	le
 800acba:	f1c1 0202 	rsble	r2, r1, #2
 800acbe:	2201      	movgt	r2, #1
 800acc0:	4413      	add	r3, r2
 800acc2:	e7e0      	b.n	800ac86 <_printf_float+0x192>
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	055a      	lsls	r2, r3, #21
 800acc8:	d407      	bmi.n	800acda <_printf_float+0x1e6>
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	4642      	mov	r2, r8
 800acce:	4631      	mov	r1, r6
 800acd0:	4628      	mov	r0, r5
 800acd2:	47b8      	blx	r7
 800acd4:	3001      	adds	r0, #1
 800acd6:	d12b      	bne.n	800ad30 <_printf_float+0x23c>
 800acd8:	e767      	b.n	800abaa <_printf_float+0xb6>
 800acda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800acde:	f240 80dd 	bls.w	800ae9c <_printf_float+0x3a8>
 800ace2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ace6:	2200      	movs	r2, #0
 800ace8:	2300      	movs	r3, #0
 800acea:	f7f5 ff0d 	bl	8000b08 <__aeabi_dcmpeq>
 800acee:	2800      	cmp	r0, #0
 800acf0:	d033      	beq.n	800ad5a <_printf_float+0x266>
 800acf2:	4a37      	ldr	r2, [pc, #220]	@ (800add0 <_printf_float+0x2dc>)
 800acf4:	2301      	movs	r3, #1
 800acf6:	4631      	mov	r1, r6
 800acf8:	4628      	mov	r0, r5
 800acfa:	47b8      	blx	r7
 800acfc:	3001      	adds	r0, #1
 800acfe:	f43f af54 	beq.w	800abaa <_printf_float+0xb6>
 800ad02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad06:	4543      	cmp	r3, r8
 800ad08:	db02      	blt.n	800ad10 <_printf_float+0x21c>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	07d8      	lsls	r0, r3, #31
 800ad0e:	d50f      	bpl.n	800ad30 <_printf_float+0x23c>
 800ad10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad14:	4631      	mov	r1, r6
 800ad16:	4628      	mov	r0, r5
 800ad18:	47b8      	blx	r7
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	f43f af45 	beq.w	800abaa <_printf_float+0xb6>
 800ad20:	f04f 0900 	mov.w	r9, #0
 800ad24:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad28:	f104 0a1a 	add.w	sl, r4, #26
 800ad2c:	45c8      	cmp	r8, r9
 800ad2e:	dc09      	bgt.n	800ad44 <_printf_float+0x250>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	079b      	lsls	r3, r3, #30
 800ad34:	f100 8103 	bmi.w	800af3e <_printf_float+0x44a>
 800ad38:	68e0      	ldr	r0, [r4, #12]
 800ad3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad3c:	4298      	cmp	r0, r3
 800ad3e:	bfb8      	it	lt
 800ad40:	4618      	movlt	r0, r3
 800ad42:	e734      	b.n	800abae <_printf_float+0xba>
 800ad44:	2301      	movs	r3, #1
 800ad46:	4652      	mov	r2, sl
 800ad48:	4631      	mov	r1, r6
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b8      	blx	r7
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f43f af2b 	beq.w	800abaa <_printf_float+0xb6>
 800ad54:	f109 0901 	add.w	r9, r9, #1
 800ad58:	e7e8      	b.n	800ad2c <_printf_float+0x238>
 800ad5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dc39      	bgt.n	800add4 <_printf_float+0x2e0>
 800ad60:	4a1b      	ldr	r2, [pc, #108]	@ (800add0 <_printf_float+0x2dc>)
 800ad62:	2301      	movs	r3, #1
 800ad64:	4631      	mov	r1, r6
 800ad66:	4628      	mov	r0, r5
 800ad68:	47b8      	blx	r7
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	f43f af1d 	beq.w	800abaa <_printf_float+0xb6>
 800ad70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ad74:	ea59 0303 	orrs.w	r3, r9, r3
 800ad78:	d102      	bne.n	800ad80 <_printf_float+0x28c>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	07d9      	lsls	r1, r3, #31
 800ad7e:	d5d7      	bpl.n	800ad30 <_printf_float+0x23c>
 800ad80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad84:	4631      	mov	r1, r6
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f43f af0d 	beq.w	800abaa <_printf_float+0xb6>
 800ad90:	f04f 0a00 	mov.w	sl, #0
 800ad94:	f104 0b1a 	add.w	fp, r4, #26
 800ad98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad9a:	425b      	negs	r3, r3
 800ad9c:	4553      	cmp	r3, sl
 800ad9e:	dc01      	bgt.n	800ada4 <_printf_float+0x2b0>
 800ada0:	464b      	mov	r3, r9
 800ada2:	e793      	b.n	800accc <_printf_float+0x1d8>
 800ada4:	2301      	movs	r3, #1
 800ada6:	465a      	mov	r2, fp
 800ada8:	4631      	mov	r1, r6
 800adaa:	4628      	mov	r0, r5
 800adac:	47b8      	blx	r7
 800adae:	3001      	adds	r0, #1
 800adb0:	f43f aefb 	beq.w	800abaa <_printf_float+0xb6>
 800adb4:	f10a 0a01 	add.w	sl, sl, #1
 800adb8:	e7ee      	b.n	800ad98 <_printf_float+0x2a4>
 800adba:	bf00      	nop
 800adbc:	7fefffff 	.word	0x7fefffff
 800adc0:	08010bb1 	.word	0x08010bb1
 800adc4:	08010bb5 	.word	0x08010bb5
 800adc8:	08010bb9 	.word	0x08010bb9
 800adcc:	08010bbd 	.word	0x08010bbd
 800add0:	08010bc1 	.word	0x08010bc1
 800add4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800add6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800adda:	4553      	cmp	r3, sl
 800addc:	bfa8      	it	ge
 800adde:	4653      	movge	r3, sl
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	4699      	mov	r9, r3
 800ade4:	dc36      	bgt.n	800ae54 <_printf_float+0x360>
 800ade6:	f04f 0b00 	mov.w	fp, #0
 800adea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adee:	f104 021a 	add.w	r2, r4, #26
 800adf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800adf4:	9306      	str	r3, [sp, #24]
 800adf6:	eba3 0309 	sub.w	r3, r3, r9
 800adfa:	455b      	cmp	r3, fp
 800adfc:	dc31      	bgt.n	800ae62 <_printf_float+0x36e>
 800adfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae00:	459a      	cmp	sl, r3
 800ae02:	dc3a      	bgt.n	800ae7a <_printf_float+0x386>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	07da      	lsls	r2, r3, #31
 800ae08:	d437      	bmi.n	800ae7a <_printf_float+0x386>
 800ae0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0c:	ebaa 0903 	sub.w	r9, sl, r3
 800ae10:	9b06      	ldr	r3, [sp, #24]
 800ae12:	ebaa 0303 	sub.w	r3, sl, r3
 800ae16:	4599      	cmp	r9, r3
 800ae18:	bfa8      	it	ge
 800ae1a:	4699      	movge	r9, r3
 800ae1c:	f1b9 0f00 	cmp.w	r9, #0
 800ae20:	dc33      	bgt.n	800ae8a <_printf_float+0x396>
 800ae22:	f04f 0800 	mov.w	r8, #0
 800ae26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae2a:	f104 0b1a 	add.w	fp, r4, #26
 800ae2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae30:	ebaa 0303 	sub.w	r3, sl, r3
 800ae34:	eba3 0309 	sub.w	r3, r3, r9
 800ae38:	4543      	cmp	r3, r8
 800ae3a:	f77f af79 	ble.w	800ad30 <_printf_float+0x23c>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	465a      	mov	r2, fp
 800ae42:	4631      	mov	r1, r6
 800ae44:	4628      	mov	r0, r5
 800ae46:	47b8      	blx	r7
 800ae48:	3001      	adds	r0, #1
 800ae4a:	f43f aeae 	beq.w	800abaa <_printf_float+0xb6>
 800ae4e:	f108 0801 	add.w	r8, r8, #1
 800ae52:	e7ec      	b.n	800ae2e <_printf_float+0x33a>
 800ae54:	4642      	mov	r2, r8
 800ae56:	4631      	mov	r1, r6
 800ae58:	4628      	mov	r0, r5
 800ae5a:	47b8      	blx	r7
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d1c2      	bne.n	800ade6 <_printf_float+0x2f2>
 800ae60:	e6a3      	b.n	800abaa <_printf_float+0xb6>
 800ae62:	2301      	movs	r3, #1
 800ae64:	4631      	mov	r1, r6
 800ae66:	4628      	mov	r0, r5
 800ae68:	9206      	str	r2, [sp, #24]
 800ae6a:	47b8      	blx	r7
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	f43f ae9c 	beq.w	800abaa <_printf_float+0xb6>
 800ae72:	9a06      	ldr	r2, [sp, #24]
 800ae74:	f10b 0b01 	add.w	fp, fp, #1
 800ae78:	e7bb      	b.n	800adf2 <_printf_float+0x2fe>
 800ae7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae7e:	4631      	mov	r1, r6
 800ae80:	4628      	mov	r0, r5
 800ae82:	47b8      	blx	r7
 800ae84:	3001      	adds	r0, #1
 800ae86:	d1c0      	bne.n	800ae0a <_printf_float+0x316>
 800ae88:	e68f      	b.n	800abaa <_printf_float+0xb6>
 800ae8a:	9a06      	ldr	r2, [sp, #24]
 800ae8c:	464b      	mov	r3, r9
 800ae8e:	4442      	add	r2, r8
 800ae90:	4631      	mov	r1, r6
 800ae92:	4628      	mov	r0, r5
 800ae94:	47b8      	blx	r7
 800ae96:	3001      	adds	r0, #1
 800ae98:	d1c3      	bne.n	800ae22 <_printf_float+0x32e>
 800ae9a:	e686      	b.n	800abaa <_printf_float+0xb6>
 800ae9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aea0:	f1ba 0f01 	cmp.w	sl, #1
 800aea4:	dc01      	bgt.n	800aeaa <_printf_float+0x3b6>
 800aea6:	07db      	lsls	r3, r3, #31
 800aea8:	d536      	bpl.n	800af18 <_printf_float+0x424>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4642      	mov	r2, r8
 800aeae:	4631      	mov	r1, r6
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	47b8      	blx	r7
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	f43f ae78 	beq.w	800abaa <_printf_float+0xb6>
 800aeba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aebe:	4631      	mov	r1, r6
 800aec0:	4628      	mov	r0, r5
 800aec2:	47b8      	blx	r7
 800aec4:	3001      	adds	r0, #1
 800aec6:	f43f ae70 	beq.w	800abaa <_printf_float+0xb6>
 800aeca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aece:	2200      	movs	r2, #0
 800aed0:	2300      	movs	r3, #0
 800aed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aed6:	f7f5 fe17 	bl	8000b08 <__aeabi_dcmpeq>
 800aeda:	b9c0      	cbnz	r0, 800af0e <_printf_float+0x41a>
 800aedc:	4653      	mov	r3, sl
 800aede:	f108 0201 	add.w	r2, r8, #1
 800aee2:	4631      	mov	r1, r6
 800aee4:	4628      	mov	r0, r5
 800aee6:	47b8      	blx	r7
 800aee8:	3001      	adds	r0, #1
 800aeea:	d10c      	bne.n	800af06 <_printf_float+0x412>
 800aeec:	e65d      	b.n	800abaa <_printf_float+0xb6>
 800aeee:	2301      	movs	r3, #1
 800aef0:	465a      	mov	r2, fp
 800aef2:	4631      	mov	r1, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b8      	blx	r7
 800aef8:	3001      	adds	r0, #1
 800aefa:	f43f ae56 	beq.w	800abaa <_printf_float+0xb6>
 800aefe:	f108 0801 	add.w	r8, r8, #1
 800af02:	45d0      	cmp	r8, sl
 800af04:	dbf3      	blt.n	800aeee <_printf_float+0x3fa>
 800af06:	464b      	mov	r3, r9
 800af08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af0c:	e6df      	b.n	800acce <_printf_float+0x1da>
 800af0e:	f04f 0800 	mov.w	r8, #0
 800af12:	f104 0b1a 	add.w	fp, r4, #26
 800af16:	e7f4      	b.n	800af02 <_printf_float+0x40e>
 800af18:	2301      	movs	r3, #1
 800af1a:	4642      	mov	r2, r8
 800af1c:	e7e1      	b.n	800aee2 <_printf_float+0x3ee>
 800af1e:	2301      	movs	r3, #1
 800af20:	464a      	mov	r2, r9
 800af22:	4631      	mov	r1, r6
 800af24:	4628      	mov	r0, r5
 800af26:	47b8      	blx	r7
 800af28:	3001      	adds	r0, #1
 800af2a:	f43f ae3e 	beq.w	800abaa <_printf_float+0xb6>
 800af2e:	f108 0801 	add.w	r8, r8, #1
 800af32:	68e3      	ldr	r3, [r4, #12]
 800af34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af36:	1a5b      	subs	r3, r3, r1
 800af38:	4543      	cmp	r3, r8
 800af3a:	dcf0      	bgt.n	800af1e <_printf_float+0x42a>
 800af3c:	e6fc      	b.n	800ad38 <_printf_float+0x244>
 800af3e:	f04f 0800 	mov.w	r8, #0
 800af42:	f104 0919 	add.w	r9, r4, #25
 800af46:	e7f4      	b.n	800af32 <_printf_float+0x43e>

0800af48 <_printf_common>:
 800af48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af4c:	4616      	mov	r6, r2
 800af4e:	4698      	mov	r8, r3
 800af50:	688a      	ldr	r2, [r1, #8]
 800af52:	690b      	ldr	r3, [r1, #16]
 800af54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af58:	4293      	cmp	r3, r2
 800af5a:	bfb8      	it	lt
 800af5c:	4613      	movlt	r3, r2
 800af5e:	6033      	str	r3, [r6, #0]
 800af60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af64:	4607      	mov	r7, r0
 800af66:	460c      	mov	r4, r1
 800af68:	b10a      	cbz	r2, 800af6e <_printf_common+0x26>
 800af6a:	3301      	adds	r3, #1
 800af6c:	6033      	str	r3, [r6, #0]
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	0699      	lsls	r1, r3, #26
 800af72:	bf42      	ittt	mi
 800af74:	6833      	ldrmi	r3, [r6, #0]
 800af76:	3302      	addmi	r3, #2
 800af78:	6033      	strmi	r3, [r6, #0]
 800af7a:	6825      	ldr	r5, [r4, #0]
 800af7c:	f015 0506 	ands.w	r5, r5, #6
 800af80:	d106      	bne.n	800af90 <_printf_common+0x48>
 800af82:	f104 0a19 	add.w	sl, r4, #25
 800af86:	68e3      	ldr	r3, [r4, #12]
 800af88:	6832      	ldr	r2, [r6, #0]
 800af8a:	1a9b      	subs	r3, r3, r2
 800af8c:	42ab      	cmp	r3, r5
 800af8e:	dc26      	bgt.n	800afde <_printf_common+0x96>
 800af90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af94:	6822      	ldr	r2, [r4, #0]
 800af96:	3b00      	subs	r3, #0
 800af98:	bf18      	it	ne
 800af9a:	2301      	movne	r3, #1
 800af9c:	0692      	lsls	r2, r2, #26
 800af9e:	d42b      	bmi.n	800aff8 <_printf_common+0xb0>
 800afa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afa4:	4641      	mov	r1, r8
 800afa6:	4638      	mov	r0, r7
 800afa8:	47c8      	blx	r9
 800afaa:	3001      	adds	r0, #1
 800afac:	d01e      	beq.n	800afec <_printf_common+0xa4>
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	6922      	ldr	r2, [r4, #16]
 800afb2:	f003 0306 	and.w	r3, r3, #6
 800afb6:	2b04      	cmp	r3, #4
 800afb8:	bf02      	ittt	eq
 800afba:	68e5      	ldreq	r5, [r4, #12]
 800afbc:	6833      	ldreq	r3, [r6, #0]
 800afbe:	1aed      	subeq	r5, r5, r3
 800afc0:	68a3      	ldr	r3, [r4, #8]
 800afc2:	bf0c      	ite	eq
 800afc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afc8:	2500      	movne	r5, #0
 800afca:	4293      	cmp	r3, r2
 800afcc:	bfc4      	itt	gt
 800afce:	1a9b      	subgt	r3, r3, r2
 800afd0:	18ed      	addgt	r5, r5, r3
 800afd2:	2600      	movs	r6, #0
 800afd4:	341a      	adds	r4, #26
 800afd6:	42b5      	cmp	r5, r6
 800afd8:	d11a      	bne.n	800b010 <_printf_common+0xc8>
 800afda:	2000      	movs	r0, #0
 800afdc:	e008      	b.n	800aff0 <_printf_common+0xa8>
 800afde:	2301      	movs	r3, #1
 800afe0:	4652      	mov	r2, sl
 800afe2:	4641      	mov	r1, r8
 800afe4:	4638      	mov	r0, r7
 800afe6:	47c8      	blx	r9
 800afe8:	3001      	adds	r0, #1
 800afea:	d103      	bne.n	800aff4 <_printf_common+0xac>
 800afec:	f04f 30ff 	mov.w	r0, #4294967295
 800aff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff4:	3501      	adds	r5, #1
 800aff6:	e7c6      	b.n	800af86 <_printf_common+0x3e>
 800aff8:	18e1      	adds	r1, r4, r3
 800affa:	1c5a      	adds	r2, r3, #1
 800affc:	2030      	movs	r0, #48	@ 0x30
 800affe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b002:	4422      	add	r2, r4
 800b004:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b008:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b00c:	3302      	adds	r3, #2
 800b00e:	e7c7      	b.n	800afa0 <_printf_common+0x58>
 800b010:	2301      	movs	r3, #1
 800b012:	4622      	mov	r2, r4
 800b014:	4641      	mov	r1, r8
 800b016:	4638      	mov	r0, r7
 800b018:	47c8      	blx	r9
 800b01a:	3001      	adds	r0, #1
 800b01c:	d0e6      	beq.n	800afec <_printf_common+0xa4>
 800b01e:	3601      	adds	r6, #1
 800b020:	e7d9      	b.n	800afd6 <_printf_common+0x8e>
	...

0800b024 <_printf_i>:
 800b024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b028:	7e0f      	ldrb	r7, [r1, #24]
 800b02a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b02c:	2f78      	cmp	r7, #120	@ 0x78
 800b02e:	4691      	mov	r9, r2
 800b030:	4680      	mov	r8, r0
 800b032:	460c      	mov	r4, r1
 800b034:	469a      	mov	sl, r3
 800b036:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b03a:	d807      	bhi.n	800b04c <_printf_i+0x28>
 800b03c:	2f62      	cmp	r7, #98	@ 0x62
 800b03e:	d80a      	bhi.n	800b056 <_printf_i+0x32>
 800b040:	2f00      	cmp	r7, #0
 800b042:	f000 80d2 	beq.w	800b1ea <_printf_i+0x1c6>
 800b046:	2f58      	cmp	r7, #88	@ 0x58
 800b048:	f000 80b9 	beq.w	800b1be <_printf_i+0x19a>
 800b04c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b050:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b054:	e03a      	b.n	800b0cc <_printf_i+0xa8>
 800b056:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b05a:	2b15      	cmp	r3, #21
 800b05c:	d8f6      	bhi.n	800b04c <_printf_i+0x28>
 800b05e:	a101      	add	r1, pc, #4	@ (adr r1, 800b064 <_printf_i+0x40>)
 800b060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b064:	0800b0bd 	.word	0x0800b0bd
 800b068:	0800b0d1 	.word	0x0800b0d1
 800b06c:	0800b04d 	.word	0x0800b04d
 800b070:	0800b04d 	.word	0x0800b04d
 800b074:	0800b04d 	.word	0x0800b04d
 800b078:	0800b04d 	.word	0x0800b04d
 800b07c:	0800b0d1 	.word	0x0800b0d1
 800b080:	0800b04d 	.word	0x0800b04d
 800b084:	0800b04d 	.word	0x0800b04d
 800b088:	0800b04d 	.word	0x0800b04d
 800b08c:	0800b04d 	.word	0x0800b04d
 800b090:	0800b1d1 	.word	0x0800b1d1
 800b094:	0800b0fb 	.word	0x0800b0fb
 800b098:	0800b18b 	.word	0x0800b18b
 800b09c:	0800b04d 	.word	0x0800b04d
 800b0a0:	0800b04d 	.word	0x0800b04d
 800b0a4:	0800b1f3 	.word	0x0800b1f3
 800b0a8:	0800b04d 	.word	0x0800b04d
 800b0ac:	0800b0fb 	.word	0x0800b0fb
 800b0b0:	0800b04d 	.word	0x0800b04d
 800b0b4:	0800b04d 	.word	0x0800b04d
 800b0b8:	0800b193 	.word	0x0800b193
 800b0bc:	6833      	ldr	r3, [r6, #0]
 800b0be:	1d1a      	adds	r2, r3, #4
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	6032      	str	r2, [r6, #0]
 800b0c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e09d      	b.n	800b20c <_printf_i+0x1e8>
 800b0d0:	6833      	ldr	r3, [r6, #0]
 800b0d2:	6820      	ldr	r0, [r4, #0]
 800b0d4:	1d19      	adds	r1, r3, #4
 800b0d6:	6031      	str	r1, [r6, #0]
 800b0d8:	0606      	lsls	r6, r0, #24
 800b0da:	d501      	bpl.n	800b0e0 <_printf_i+0xbc>
 800b0dc:	681d      	ldr	r5, [r3, #0]
 800b0de:	e003      	b.n	800b0e8 <_printf_i+0xc4>
 800b0e0:	0645      	lsls	r5, r0, #25
 800b0e2:	d5fb      	bpl.n	800b0dc <_printf_i+0xb8>
 800b0e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0e8:	2d00      	cmp	r5, #0
 800b0ea:	da03      	bge.n	800b0f4 <_printf_i+0xd0>
 800b0ec:	232d      	movs	r3, #45	@ 0x2d
 800b0ee:	426d      	negs	r5, r5
 800b0f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0f4:	4859      	ldr	r0, [pc, #356]	@ (800b25c <_printf_i+0x238>)
 800b0f6:	230a      	movs	r3, #10
 800b0f8:	e011      	b.n	800b11e <_printf_i+0xfa>
 800b0fa:	6821      	ldr	r1, [r4, #0]
 800b0fc:	6833      	ldr	r3, [r6, #0]
 800b0fe:	0608      	lsls	r0, r1, #24
 800b100:	f853 5b04 	ldr.w	r5, [r3], #4
 800b104:	d402      	bmi.n	800b10c <_printf_i+0xe8>
 800b106:	0649      	lsls	r1, r1, #25
 800b108:	bf48      	it	mi
 800b10a:	b2ad      	uxthmi	r5, r5
 800b10c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b10e:	4853      	ldr	r0, [pc, #332]	@ (800b25c <_printf_i+0x238>)
 800b110:	6033      	str	r3, [r6, #0]
 800b112:	bf14      	ite	ne
 800b114:	230a      	movne	r3, #10
 800b116:	2308      	moveq	r3, #8
 800b118:	2100      	movs	r1, #0
 800b11a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b11e:	6866      	ldr	r6, [r4, #4]
 800b120:	60a6      	str	r6, [r4, #8]
 800b122:	2e00      	cmp	r6, #0
 800b124:	bfa2      	ittt	ge
 800b126:	6821      	ldrge	r1, [r4, #0]
 800b128:	f021 0104 	bicge.w	r1, r1, #4
 800b12c:	6021      	strge	r1, [r4, #0]
 800b12e:	b90d      	cbnz	r5, 800b134 <_printf_i+0x110>
 800b130:	2e00      	cmp	r6, #0
 800b132:	d04b      	beq.n	800b1cc <_printf_i+0x1a8>
 800b134:	4616      	mov	r6, r2
 800b136:	fbb5 f1f3 	udiv	r1, r5, r3
 800b13a:	fb03 5711 	mls	r7, r3, r1, r5
 800b13e:	5dc7      	ldrb	r7, [r0, r7]
 800b140:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b144:	462f      	mov	r7, r5
 800b146:	42bb      	cmp	r3, r7
 800b148:	460d      	mov	r5, r1
 800b14a:	d9f4      	bls.n	800b136 <_printf_i+0x112>
 800b14c:	2b08      	cmp	r3, #8
 800b14e:	d10b      	bne.n	800b168 <_printf_i+0x144>
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	07df      	lsls	r7, r3, #31
 800b154:	d508      	bpl.n	800b168 <_printf_i+0x144>
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	6861      	ldr	r1, [r4, #4]
 800b15a:	4299      	cmp	r1, r3
 800b15c:	bfde      	ittt	le
 800b15e:	2330      	movle	r3, #48	@ 0x30
 800b160:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b164:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b168:	1b92      	subs	r2, r2, r6
 800b16a:	6122      	str	r2, [r4, #16]
 800b16c:	f8cd a000 	str.w	sl, [sp]
 800b170:	464b      	mov	r3, r9
 800b172:	aa03      	add	r2, sp, #12
 800b174:	4621      	mov	r1, r4
 800b176:	4640      	mov	r0, r8
 800b178:	f7ff fee6 	bl	800af48 <_printf_common>
 800b17c:	3001      	adds	r0, #1
 800b17e:	d14a      	bne.n	800b216 <_printf_i+0x1f2>
 800b180:	f04f 30ff 	mov.w	r0, #4294967295
 800b184:	b004      	add	sp, #16
 800b186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	f043 0320 	orr.w	r3, r3, #32
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	4833      	ldr	r0, [pc, #204]	@ (800b260 <_printf_i+0x23c>)
 800b194:	2778      	movs	r7, #120	@ 0x78
 800b196:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	6831      	ldr	r1, [r6, #0]
 800b19e:	061f      	lsls	r7, r3, #24
 800b1a0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1a4:	d402      	bmi.n	800b1ac <_printf_i+0x188>
 800b1a6:	065f      	lsls	r7, r3, #25
 800b1a8:	bf48      	it	mi
 800b1aa:	b2ad      	uxthmi	r5, r5
 800b1ac:	6031      	str	r1, [r6, #0]
 800b1ae:	07d9      	lsls	r1, r3, #31
 800b1b0:	bf44      	itt	mi
 800b1b2:	f043 0320 	orrmi.w	r3, r3, #32
 800b1b6:	6023      	strmi	r3, [r4, #0]
 800b1b8:	b11d      	cbz	r5, 800b1c2 <_printf_i+0x19e>
 800b1ba:	2310      	movs	r3, #16
 800b1bc:	e7ac      	b.n	800b118 <_printf_i+0xf4>
 800b1be:	4827      	ldr	r0, [pc, #156]	@ (800b25c <_printf_i+0x238>)
 800b1c0:	e7e9      	b.n	800b196 <_printf_i+0x172>
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	f023 0320 	bic.w	r3, r3, #32
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	e7f6      	b.n	800b1ba <_printf_i+0x196>
 800b1cc:	4616      	mov	r6, r2
 800b1ce:	e7bd      	b.n	800b14c <_printf_i+0x128>
 800b1d0:	6833      	ldr	r3, [r6, #0]
 800b1d2:	6825      	ldr	r5, [r4, #0]
 800b1d4:	6961      	ldr	r1, [r4, #20]
 800b1d6:	1d18      	adds	r0, r3, #4
 800b1d8:	6030      	str	r0, [r6, #0]
 800b1da:	062e      	lsls	r6, r5, #24
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	d501      	bpl.n	800b1e4 <_printf_i+0x1c0>
 800b1e0:	6019      	str	r1, [r3, #0]
 800b1e2:	e002      	b.n	800b1ea <_printf_i+0x1c6>
 800b1e4:	0668      	lsls	r0, r5, #25
 800b1e6:	d5fb      	bpl.n	800b1e0 <_printf_i+0x1bc>
 800b1e8:	8019      	strh	r1, [r3, #0]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	4616      	mov	r6, r2
 800b1f0:	e7bc      	b.n	800b16c <_printf_i+0x148>
 800b1f2:	6833      	ldr	r3, [r6, #0]
 800b1f4:	1d1a      	adds	r2, r3, #4
 800b1f6:	6032      	str	r2, [r6, #0]
 800b1f8:	681e      	ldr	r6, [r3, #0]
 800b1fa:	6862      	ldr	r2, [r4, #4]
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	4630      	mov	r0, r6
 800b200:	f7f5 f806 	bl	8000210 <memchr>
 800b204:	b108      	cbz	r0, 800b20a <_printf_i+0x1e6>
 800b206:	1b80      	subs	r0, r0, r6
 800b208:	6060      	str	r0, [r4, #4]
 800b20a:	6863      	ldr	r3, [r4, #4]
 800b20c:	6123      	str	r3, [r4, #16]
 800b20e:	2300      	movs	r3, #0
 800b210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b214:	e7aa      	b.n	800b16c <_printf_i+0x148>
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	4632      	mov	r2, r6
 800b21a:	4649      	mov	r1, r9
 800b21c:	4640      	mov	r0, r8
 800b21e:	47d0      	blx	sl
 800b220:	3001      	adds	r0, #1
 800b222:	d0ad      	beq.n	800b180 <_printf_i+0x15c>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	079b      	lsls	r3, r3, #30
 800b228:	d413      	bmi.n	800b252 <_printf_i+0x22e>
 800b22a:	68e0      	ldr	r0, [r4, #12]
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	4298      	cmp	r0, r3
 800b230:	bfb8      	it	lt
 800b232:	4618      	movlt	r0, r3
 800b234:	e7a6      	b.n	800b184 <_printf_i+0x160>
 800b236:	2301      	movs	r3, #1
 800b238:	4632      	mov	r2, r6
 800b23a:	4649      	mov	r1, r9
 800b23c:	4640      	mov	r0, r8
 800b23e:	47d0      	blx	sl
 800b240:	3001      	adds	r0, #1
 800b242:	d09d      	beq.n	800b180 <_printf_i+0x15c>
 800b244:	3501      	adds	r5, #1
 800b246:	68e3      	ldr	r3, [r4, #12]
 800b248:	9903      	ldr	r1, [sp, #12]
 800b24a:	1a5b      	subs	r3, r3, r1
 800b24c:	42ab      	cmp	r3, r5
 800b24e:	dcf2      	bgt.n	800b236 <_printf_i+0x212>
 800b250:	e7eb      	b.n	800b22a <_printf_i+0x206>
 800b252:	2500      	movs	r5, #0
 800b254:	f104 0619 	add.w	r6, r4, #25
 800b258:	e7f5      	b.n	800b246 <_printf_i+0x222>
 800b25a:	bf00      	nop
 800b25c:	08010bc3 	.word	0x08010bc3
 800b260:	08010bd4 	.word	0x08010bd4

0800b264 <_scanf_float>:
 800b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	b087      	sub	sp, #28
 800b26a:	4617      	mov	r7, r2
 800b26c:	9303      	str	r3, [sp, #12]
 800b26e:	688b      	ldr	r3, [r1, #8]
 800b270:	1e5a      	subs	r2, r3, #1
 800b272:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b276:	bf81      	itttt	hi
 800b278:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b27c:	eb03 0b05 	addhi.w	fp, r3, r5
 800b280:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b284:	608b      	strhi	r3, [r1, #8]
 800b286:	680b      	ldr	r3, [r1, #0]
 800b288:	460a      	mov	r2, r1
 800b28a:	f04f 0500 	mov.w	r5, #0
 800b28e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b292:	f842 3b1c 	str.w	r3, [r2], #28
 800b296:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b29a:	4680      	mov	r8, r0
 800b29c:	460c      	mov	r4, r1
 800b29e:	bf98      	it	ls
 800b2a0:	f04f 0b00 	movls.w	fp, #0
 800b2a4:	9201      	str	r2, [sp, #4]
 800b2a6:	4616      	mov	r6, r2
 800b2a8:	46aa      	mov	sl, r5
 800b2aa:	46a9      	mov	r9, r5
 800b2ac:	9502      	str	r5, [sp, #8]
 800b2ae:	68a2      	ldr	r2, [r4, #8]
 800b2b0:	b152      	cbz	r2, 800b2c8 <_scanf_float+0x64>
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	2b4e      	cmp	r3, #78	@ 0x4e
 800b2b8:	d864      	bhi.n	800b384 <_scanf_float+0x120>
 800b2ba:	2b40      	cmp	r3, #64	@ 0x40
 800b2bc:	d83c      	bhi.n	800b338 <_scanf_float+0xd4>
 800b2be:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b2c2:	b2c8      	uxtb	r0, r1
 800b2c4:	280e      	cmp	r0, #14
 800b2c6:	d93a      	bls.n	800b33e <_scanf_float+0xda>
 800b2c8:	f1b9 0f00 	cmp.w	r9, #0
 800b2cc:	d003      	beq.n	800b2d6 <_scanf_float+0x72>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2da:	f1ba 0f01 	cmp.w	sl, #1
 800b2de:	f200 8117 	bhi.w	800b510 <_scanf_float+0x2ac>
 800b2e2:	9b01      	ldr	r3, [sp, #4]
 800b2e4:	429e      	cmp	r6, r3
 800b2e6:	f200 8108 	bhi.w	800b4fa <_scanf_float+0x296>
 800b2ea:	2001      	movs	r0, #1
 800b2ec:	b007      	add	sp, #28
 800b2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b2f6:	2a0d      	cmp	r2, #13
 800b2f8:	d8e6      	bhi.n	800b2c8 <_scanf_float+0x64>
 800b2fa:	a101      	add	r1, pc, #4	@ (adr r1, 800b300 <_scanf_float+0x9c>)
 800b2fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b300:	0800b447 	.word	0x0800b447
 800b304:	0800b2c9 	.word	0x0800b2c9
 800b308:	0800b2c9 	.word	0x0800b2c9
 800b30c:	0800b2c9 	.word	0x0800b2c9
 800b310:	0800b4a7 	.word	0x0800b4a7
 800b314:	0800b47f 	.word	0x0800b47f
 800b318:	0800b2c9 	.word	0x0800b2c9
 800b31c:	0800b2c9 	.word	0x0800b2c9
 800b320:	0800b455 	.word	0x0800b455
 800b324:	0800b2c9 	.word	0x0800b2c9
 800b328:	0800b2c9 	.word	0x0800b2c9
 800b32c:	0800b2c9 	.word	0x0800b2c9
 800b330:	0800b2c9 	.word	0x0800b2c9
 800b334:	0800b40d 	.word	0x0800b40d
 800b338:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b33c:	e7db      	b.n	800b2f6 <_scanf_float+0x92>
 800b33e:	290e      	cmp	r1, #14
 800b340:	d8c2      	bhi.n	800b2c8 <_scanf_float+0x64>
 800b342:	a001      	add	r0, pc, #4	@ (adr r0, 800b348 <_scanf_float+0xe4>)
 800b344:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b348:	0800b3fd 	.word	0x0800b3fd
 800b34c:	0800b2c9 	.word	0x0800b2c9
 800b350:	0800b3fd 	.word	0x0800b3fd
 800b354:	0800b493 	.word	0x0800b493
 800b358:	0800b2c9 	.word	0x0800b2c9
 800b35c:	0800b3a5 	.word	0x0800b3a5
 800b360:	0800b3e3 	.word	0x0800b3e3
 800b364:	0800b3e3 	.word	0x0800b3e3
 800b368:	0800b3e3 	.word	0x0800b3e3
 800b36c:	0800b3e3 	.word	0x0800b3e3
 800b370:	0800b3e3 	.word	0x0800b3e3
 800b374:	0800b3e3 	.word	0x0800b3e3
 800b378:	0800b3e3 	.word	0x0800b3e3
 800b37c:	0800b3e3 	.word	0x0800b3e3
 800b380:	0800b3e3 	.word	0x0800b3e3
 800b384:	2b6e      	cmp	r3, #110	@ 0x6e
 800b386:	d809      	bhi.n	800b39c <_scanf_float+0x138>
 800b388:	2b60      	cmp	r3, #96	@ 0x60
 800b38a:	d8b2      	bhi.n	800b2f2 <_scanf_float+0x8e>
 800b38c:	2b54      	cmp	r3, #84	@ 0x54
 800b38e:	d07b      	beq.n	800b488 <_scanf_float+0x224>
 800b390:	2b59      	cmp	r3, #89	@ 0x59
 800b392:	d199      	bne.n	800b2c8 <_scanf_float+0x64>
 800b394:	2d07      	cmp	r5, #7
 800b396:	d197      	bne.n	800b2c8 <_scanf_float+0x64>
 800b398:	2508      	movs	r5, #8
 800b39a:	e02c      	b.n	800b3f6 <_scanf_float+0x192>
 800b39c:	2b74      	cmp	r3, #116	@ 0x74
 800b39e:	d073      	beq.n	800b488 <_scanf_float+0x224>
 800b3a0:	2b79      	cmp	r3, #121	@ 0x79
 800b3a2:	e7f6      	b.n	800b392 <_scanf_float+0x12e>
 800b3a4:	6821      	ldr	r1, [r4, #0]
 800b3a6:	05c8      	lsls	r0, r1, #23
 800b3a8:	d51b      	bpl.n	800b3e2 <_scanf_float+0x17e>
 800b3aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b3ae:	6021      	str	r1, [r4, #0]
 800b3b0:	f109 0901 	add.w	r9, r9, #1
 800b3b4:	f1bb 0f00 	cmp.w	fp, #0
 800b3b8:	d003      	beq.n	800b3c2 <_scanf_float+0x15e>
 800b3ba:	3201      	adds	r2, #1
 800b3bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3c0:	60a2      	str	r2, [r4, #8]
 800b3c2:	68a3      	ldr	r3, [r4, #8]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	60a3      	str	r3, [r4, #8]
 800b3c8:	6923      	ldr	r3, [r4, #16]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	6123      	str	r3, [r4, #16]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	607b      	str	r3, [r7, #4]
 800b3d6:	f340 8087 	ble.w	800b4e8 <_scanf_float+0x284>
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	e765      	b.n	800b2ae <_scanf_float+0x4a>
 800b3e2:	eb1a 0105 	adds.w	r1, sl, r5
 800b3e6:	f47f af6f 	bne.w	800b2c8 <_scanf_float+0x64>
 800b3ea:	6822      	ldr	r2, [r4, #0]
 800b3ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b3f0:	6022      	str	r2, [r4, #0]
 800b3f2:	460d      	mov	r5, r1
 800b3f4:	468a      	mov	sl, r1
 800b3f6:	f806 3b01 	strb.w	r3, [r6], #1
 800b3fa:	e7e2      	b.n	800b3c2 <_scanf_float+0x15e>
 800b3fc:	6822      	ldr	r2, [r4, #0]
 800b3fe:	0610      	lsls	r0, r2, #24
 800b400:	f57f af62 	bpl.w	800b2c8 <_scanf_float+0x64>
 800b404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b408:	6022      	str	r2, [r4, #0]
 800b40a:	e7f4      	b.n	800b3f6 <_scanf_float+0x192>
 800b40c:	f1ba 0f00 	cmp.w	sl, #0
 800b410:	d10e      	bne.n	800b430 <_scanf_float+0x1cc>
 800b412:	f1b9 0f00 	cmp.w	r9, #0
 800b416:	d10e      	bne.n	800b436 <_scanf_float+0x1d2>
 800b418:	6822      	ldr	r2, [r4, #0]
 800b41a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b41e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b422:	d108      	bne.n	800b436 <_scanf_float+0x1d2>
 800b424:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b428:	6022      	str	r2, [r4, #0]
 800b42a:	f04f 0a01 	mov.w	sl, #1
 800b42e:	e7e2      	b.n	800b3f6 <_scanf_float+0x192>
 800b430:	f1ba 0f02 	cmp.w	sl, #2
 800b434:	d055      	beq.n	800b4e2 <_scanf_float+0x27e>
 800b436:	2d01      	cmp	r5, #1
 800b438:	d002      	beq.n	800b440 <_scanf_float+0x1dc>
 800b43a:	2d04      	cmp	r5, #4
 800b43c:	f47f af44 	bne.w	800b2c8 <_scanf_float+0x64>
 800b440:	3501      	adds	r5, #1
 800b442:	b2ed      	uxtb	r5, r5
 800b444:	e7d7      	b.n	800b3f6 <_scanf_float+0x192>
 800b446:	f1ba 0f01 	cmp.w	sl, #1
 800b44a:	f47f af3d 	bne.w	800b2c8 <_scanf_float+0x64>
 800b44e:	f04f 0a02 	mov.w	sl, #2
 800b452:	e7d0      	b.n	800b3f6 <_scanf_float+0x192>
 800b454:	b97d      	cbnz	r5, 800b476 <_scanf_float+0x212>
 800b456:	f1b9 0f00 	cmp.w	r9, #0
 800b45a:	f47f af38 	bne.w	800b2ce <_scanf_float+0x6a>
 800b45e:	6822      	ldr	r2, [r4, #0]
 800b460:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b464:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b468:	f040 8108 	bne.w	800b67c <_scanf_float+0x418>
 800b46c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b470:	6022      	str	r2, [r4, #0]
 800b472:	2501      	movs	r5, #1
 800b474:	e7bf      	b.n	800b3f6 <_scanf_float+0x192>
 800b476:	2d03      	cmp	r5, #3
 800b478:	d0e2      	beq.n	800b440 <_scanf_float+0x1dc>
 800b47a:	2d05      	cmp	r5, #5
 800b47c:	e7de      	b.n	800b43c <_scanf_float+0x1d8>
 800b47e:	2d02      	cmp	r5, #2
 800b480:	f47f af22 	bne.w	800b2c8 <_scanf_float+0x64>
 800b484:	2503      	movs	r5, #3
 800b486:	e7b6      	b.n	800b3f6 <_scanf_float+0x192>
 800b488:	2d06      	cmp	r5, #6
 800b48a:	f47f af1d 	bne.w	800b2c8 <_scanf_float+0x64>
 800b48e:	2507      	movs	r5, #7
 800b490:	e7b1      	b.n	800b3f6 <_scanf_float+0x192>
 800b492:	6822      	ldr	r2, [r4, #0]
 800b494:	0591      	lsls	r1, r2, #22
 800b496:	f57f af17 	bpl.w	800b2c8 <_scanf_float+0x64>
 800b49a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b49e:	6022      	str	r2, [r4, #0]
 800b4a0:	f8cd 9008 	str.w	r9, [sp, #8]
 800b4a4:	e7a7      	b.n	800b3f6 <_scanf_float+0x192>
 800b4a6:	6822      	ldr	r2, [r4, #0]
 800b4a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b4ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b4b0:	d006      	beq.n	800b4c0 <_scanf_float+0x25c>
 800b4b2:	0550      	lsls	r0, r2, #21
 800b4b4:	f57f af08 	bpl.w	800b2c8 <_scanf_float+0x64>
 800b4b8:	f1b9 0f00 	cmp.w	r9, #0
 800b4bc:	f000 80de 	beq.w	800b67c <_scanf_float+0x418>
 800b4c0:	0591      	lsls	r1, r2, #22
 800b4c2:	bf58      	it	pl
 800b4c4:	9902      	ldrpl	r1, [sp, #8]
 800b4c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b4ca:	bf58      	it	pl
 800b4cc:	eba9 0101 	subpl.w	r1, r9, r1
 800b4d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b4d4:	bf58      	it	pl
 800b4d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b4da:	6022      	str	r2, [r4, #0]
 800b4dc:	f04f 0900 	mov.w	r9, #0
 800b4e0:	e789      	b.n	800b3f6 <_scanf_float+0x192>
 800b4e2:	f04f 0a03 	mov.w	sl, #3
 800b4e6:	e786      	b.n	800b3f6 <_scanf_float+0x192>
 800b4e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	4640      	mov	r0, r8
 800b4f0:	4798      	blx	r3
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f43f aedb 	beq.w	800b2ae <_scanf_float+0x4a>
 800b4f8:	e6e6      	b.n	800b2c8 <_scanf_float+0x64>
 800b4fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b4fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b502:	463a      	mov	r2, r7
 800b504:	4640      	mov	r0, r8
 800b506:	4798      	blx	r3
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	e6e8      	b.n	800b2e2 <_scanf_float+0x7e>
 800b510:	1e6b      	subs	r3, r5, #1
 800b512:	2b06      	cmp	r3, #6
 800b514:	d824      	bhi.n	800b560 <_scanf_float+0x2fc>
 800b516:	2d02      	cmp	r5, #2
 800b518:	d836      	bhi.n	800b588 <_scanf_float+0x324>
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	429e      	cmp	r6, r3
 800b51e:	f67f aee4 	bls.w	800b2ea <_scanf_float+0x86>
 800b522:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b526:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b52a:	463a      	mov	r2, r7
 800b52c:	4640      	mov	r0, r8
 800b52e:	4798      	blx	r3
 800b530:	6923      	ldr	r3, [r4, #16]
 800b532:	3b01      	subs	r3, #1
 800b534:	6123      	str	r3, [r4, #16]
 800b536:	e7f0      	b.n	800b51a <_scanf_float+0x2b6>
 800b538:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b53c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b540:	463a      	mov	r2, r7
 800b542:	4640      	mov	r0, r8
 800b544:	4798      	blx	r3
 800b546:	6923      	ldr	r3, [r4, #16]
 800b548:	3b01      	subs	r3, #1
 800b54a:	6123      	str	r3, [r4, #16]
 800b54c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b550:	fa5f fa8a 	uxtb.w	sl, sl
 800b554:	f1ba 0f02 	cmp.w	sl, #2
 800b558:	d1ee      	bne.n	800b538 <_scanf_float+0x2d4>
 800b55a:	3d03      	subs	r5, #3
 800b55c:	b2ed      	uxtb	r5, r5
 800b55e:	1b76      	subs	r6, r6, r5
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	05da      	lsls	r2, r3, #23
 800b564:	d530      	bpl.n	800b5c8 <_scanf_float+0x364>
 800b566:	055b      	lsls	r3, r3, #21
 800b568:	d511      	bpl.n	800b58e <_scanf_float+0x32a>
 800b56a:	9b01      	ldr	r3, [sp, #4]
 800b56c:	429e      	cmp	r6, r3
 800b56e:	f67f aebc 	bls.w	800b2ea <_scanf_float+0x86>
 800b572:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b576:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b57a:	463a      	mov	r2, r7
 800b57c:	4640      	mov	r0, r8
 800b57e:	4798      	blx	r3
 800b580:	6923      	ldr	r3, [r4, #16]
 800b582:	3b01      	subs	r3, #1
 800b584:	6123      	str	r3, [r4, #16]
 800b586:	e7f0      	b.n	800b56a <_scanf_float+0x306>
 800b588:	46aa      	mov	sl, r5
 800b58a:	46b3      	mov	fp, r6
 800b58c:	e7de      	b.n	800b54c <_scanf_float+0x2e8>
 800b58e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b592:	6923      	ldr	r3, [r4, #16]
 800b594:	2965      	cmp	r1, #101	@ 0x65
 800b596:	f103 33ff 	add.w	r3, r3, #4294967295
 800b59a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b59e:	6123      	str	r3, [r4, #16]
 800b5a0:	d00c      	beq.n	800b5bc <_scanf_float+0x358>
 800b5a2:	2945      	cmp	r1, #69	@ 0x45
 800b5a4:	d00a      	beq.n	800b5bc <_scanf_float+0x358>
 800b5a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5aa:	463a      	mov	r2, r7
 800b5ac:	4640      	mov	r0, r8
 800b5ae:	4798      	blx	r3
 800b5b0:	6923      	ldr	r3, [r4, #16]
 800b5b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	1eb5      	subs	r5, r6, #2
 800b5ba:	6123      	str	r3, [r4, #16]
 800b5bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5c0:	463a      	mov	r2, r7
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	4798      	blx	r3
 800b5c6:	462e      	mov	r6, r5
 800b5c8:	6822      	ldr	r2, [r4, #0]
 800b5ca:	f012 0210 	ands.w	r2, r2, #16
 800b5ce:	d001      	beq.n	800b5d4 <_scanf_float+0x370>
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	e68b      	b.n	800b2ec <_scanf_float+0x88>
 800b5d4:	7032      	strb	r2, [r6, #0]
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b5dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5e0:	d11c      	bne.n	800b61c <_scanf_float+0x3b8>
 800b5e2:	9b02      	ldr	r3, [sp, #8]
 800b5e4:	454b      	cmp	r3, r9
 800b5e6:	eba3 0209 	sub.w	r2, r3, r9
 800b5ea:	d123      	bne.n	800b634 <_scanf_float+0x3d0>
 800b5ec:	9901      	ldr	r1, [sp, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	f002 fd6d 	bl	800e0d0 <_strtod_r>
 800b5f6:	9b03      	ldr	r3, [sp, #12]
 800b5f8:	6821      	ldr	r1, [r4, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f011 0f02 	tst.w	r1, #2
 800b600:	ec57 6b10 	vmov	r6, r7, d0
 800b604:	f103 0204 	add.w	r2, r3, #4
 800b608:	d01f      	beq.n	800b64a <_scanf_float+0x3e6>
 800b60a:	9903      	ldr	r1, [sp, #12]
 800b60c:	600a      	str	r2, [r1, #0]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	e9c3 6700 	strd	r6, r7, [r3]
 800b614:	68e3      	ldr	r3, [r4, #12]
 800b616:	3301      	adds	r3, #1
 800b618:	60e3      	str	r3, [r4, #12]
 800b61a:	e7d9      	b.n	800b5d0 <_scanf_float+0x36c>
 800b61c:	9b04      	ldr	r3, [sp, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0e4      	beq.n	800b5ec <_scanf_float+0x388>
 800b622:	9905      	ldr	r1, [sp, #20]
 800b624:	230a      	movs	r3, #10
 800b626:	3101      	adds	r1, #1
 800b628:	4640      	mov	r0, r8
 800b62a:	f7ff f9b7 	bl	800a99c <_strtol_r>
 800b62e:	9b04      	ldr	r3, [sp, #16]
 800b630:	9e05      	ldr	r6, [sp, #20]
 800b632:	1ac2      	subs	r2, r0, r3
 800b634:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b638:	429e      	cmp	r6, r3
 800b63a:	bf28      	it	cs
 800b63c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b640:	4910      	ldr	r1, [pc, #64]	@ (800b684 <_scanf_float+0x420>)
 800b642:	4630      	mov	r0, r6
 800b644:	f000 f9de 	bl	800ba04 <siprintf>
 800b648:	e7d0      	b.n	800b5ec <_scanf_float+0x388>
 800b64a:	f011 0f04 	tst.w	r1, #4
 800b64e:	9903      	ldr	r1, [sp, #12]
 800b650:	600a      	str	r2, [r1, #0]
 800b652:	d1dc      	bne.n	800b60e <_scanf_float+0x3aa>
 800b654:	681d      	ldr	r5, [r3, #0]
 800b656:	4632      	mov	r2, r6
 800b658:	463b      	mov	r3, r7
 800b65a:	4630      	mov	r0, r6
 800b65c:	4639      	mov	r1, r7
 800b65e:	f7f5 fa85 	bl	8000b6c <__aeabi_dcmpun>
 800b662:	b128      	cbz	r0, 800b670 <_scanf_float+0x40c>
 800b664:	4808      	ldr	r0, [pc, #32]	@ (800b688 <_scanf_float+0x424>)
 800b666:	f000 fb0d 	bl	800bc84 <nanf>
 800b66a:	ed85 0a00 	vstr	s0, [r5]
 800b66e:	e7d1      	b.n	800b614 <_scanf_float+0x3b0>
 800b670:	4630      	mov	r0, r6
 800b672:	4639      	mov	r1, r7
 800b674:	f7f5 fad8 	bl	8000c28 <__aeabi_d2f>
 800b678:	6028      	str	r0, [r5, #0]
 800b67a:	e7cb      	b.n	800b614 <_scanf_float+0x3b0>
 800b67c:	f04f 0900 	mov.w	r9, #0
 800b680:	e629      	b.n	800b2d6 <_scanf_float+0x72>
 800b682:	bf00      	nop
 800b684:	08010be5 	.word	0x08010be5
 800b688:	08010c96 	.word	0x08010c96

0800b68c <std>:
 800b68c:	2300      	movs	r3, #0
 800b68e:	b510      	push	{r4, lr}
 800b690:	4604      	mov	r4, r0
 800b692:	e9c0 3300 	strd	r3, r3, [r0]
 800b696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b69a:	6083      	str	r3, [r0, #8]
 800b69c:	8181      	strh	r1, [r0, #12]
 800b69e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b6a0:	81c2      	strh	r2, [r0, #14]
 800b6a2:	6183      	str	r3, [r0, #24]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	2208      	movs	r2, #8
 800b6a8:	305c      	adds	r0, #92	@ 0x5c
 800b6aa:	f000 fa0e 	bl	800baca <memset>
 800b6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e4 <std+0x58>)
 800b6b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e8 <std+0x5c>)
 800b6b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b6ec <std+0x60>)
 800b6b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f0 <std+0x64>)
 800b6bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6be:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f4 <std+0x68>)
 800b6c0:	6224      	str	r4, [r4, #32]
 800b6c2:	429c      	cmp	r4, r3
 800b6c4:	d006      	beq.n	800b6d4 <std+0x48>
 800b6c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b6ca:	4294      	cmp	r4, r2
 800b6cc:	d002      	beq.n	800b6d4 <std+0x48>
 800b6ce:	33d0      	adds	r3, #208	@ 0xd0
 800b6d0:	429c      	cmp	r4, r3
 800b6d2:	d105      	bne.n	800b6e0 <std+0x54>
 800b6d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6dc:	f000 bace 	b.w	800bc7c <__retarget_lock_init_recursive>
 800b6e0:	bd10      	pop	{r4, pc}
 800b6e2:	bf00      	nop
 800b6e4:	0800ba45 	.word	0x0800ba45
 800b6e8:	0800ba67 	.word	0x0800ba67
 800b6ec:	0800ba9f 	.word	0x0800ba9f
 800b6f0:	0800bac3 	.word	0x0800bac3
 800b6f4:	20000f68 	.word	0x20000f68

0800b6f8 <stdio_exit_handler>:
 800b6f8:	4a02      	ldr	r2, [pc, #8]	@ (800b704 <stdio_exit_handler+0xc>)
 800b6fa:	4903      	ldr	r1, [pc, #12]	@ (800b708 <stdio_exit_handler+0x10>)
 800b6fc:	4803      	ldr	r0, [pc, #12]	@ (800b70c <stdio_exit_handler+0x14>)
 800b6fe:	f000 b869 	b.w	800b7d4 <_fwalk_sglue>
 800b702:	bf00      	nop
 800b704:	20000038 	.word	0x20000038
 800b708:	0800e719 	.word	0x0800e719
 800b70c:	20000048 	.word	0x20000048

0800b710 <cleanup_stdio>:
 800b710:	6841      	ldr	r1, [r0, #4]
 800b712:	4b0c      	ldr	r3, [pc, #48]	@ (800b744 <cleanup_stdio+0x34>)
 800b714:	4299      	cmp	r1, r3
 800b716:	b510      	push	{r4, lr}
 800b718:	4604      	mov	r4, r0
 800b71a:	d001      	beq.n	800b720 <cleanup_stdio+0x10>
 800b71c:	f002 fffc 	bl	800e718 <_fflush_r>
 800b720:	68a1      	ldr	r1, [r4, #8]
 800b722:	4b09      	ldr	r3, [pc, #36]	@ (800b748 <cleanup_stdio+0x38>)
 800b724:	4299      	cmp	r1, r3
 800b726:	d002      	beq.n	800b72e <cleanup_stdio+0x1e>
 800b728:	4620      	mov	r0, r4
 800b72a:	f002 fff5 	bl	800e718 <_fflush_r>
 800b72e:	68e1      	ldr	r1, [r4, #12]
 800b730:	4b06      	ldr	r3, [pc, #24]	@ (800b74c <cleanup_stdio+0x3c>)
 800b732:	4299      	cmp	r1, r3
 800b734:	d004      	beq.n	800b740 <cleanup_stdio+0x30>
 800b736:	4620      	mov	r0, r4
 800b738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b73c:	f002 bfec 	b.w	800e718 <_fflush_r>
 800b740:	bd10      	pop	{r4, pc}
 800b742:	bf00      	nop
 800b744:	20000f68 	.word	0x20000f68
 800b748:	20000fd0 	.word	0x20000fd0
 800b74c:	20001038 	.word	0x20001038

0800b750 <global_stdio_init.part.0>:
 800b750:	b510      	push	{r4, lr}
 800b752:	4b0b      	ldr	r3, [pc, #44]	@ (800b780 <global_stdio_init.part.0+0x30>)
 800b754:	4c0b      	ldr	r4, [pc, #44]	@ (800b784 <global_stdio_init.part.0+0x34>)
 800b756:	4a0c      	ldr	r2, [pc, #48]	@ (800b788 <global_stdio_init.part.0+0x38>)
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	4620      	mov	r0, r4
 800b75c:	2200      	movs	r2, #0
 800b75e:	2104      	movs	r1, #4
 800b760:	f7ff ff94 	bl	800b68c <std>
 800b764:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b768:	2201      	movs	r2, #1
 800b76a:	2109      	movs	r1, #9
 800b76c:	f7ff ff8e 	bl	800b68c <std>
 800b770:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b774:	2202      	movs	r2, #2
 800b776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b77a:	2112      	movs	r1, #18
 800b77c:	f7ff bf86 	b.w	800b68c <std>
 800b780:	200010a0 	.word	0x200010a0
 800b784:	20000f68 	.word	0x20000f68
 800b788:	0800b6f9 	.word	0x0800b6f9

0800b78c <__sfp_lock_acquire>:
 800b78c:	4801      	ldr	r0, [pc, #4]	@ (800b794 <__sfp_lock_acquire+0x8>)
 800b78e:	f000 ba76 	b.w	800bc7e <__retarget_lock_acquire_recursive>
 800b792:	bf00      	nop
 800b794:	200010a9 	.word	0x200010a9

0800b798 <__sfp_lock_release>:
 800b798:	4801      	ldr	r0, [pc, #4]	@ (800b7a0 <__sfp_lock_release+0x8>)
 800b79a:	f000 ba71 	b.w	800bc80 <__retarget_lock_release_recursive>
 800b79e:	bf00      	nop
 800b7a0:	200010a9 	.word	0x200010a9

0800b7a4 <__sinit>:
 800b7a4:	b510      	push	{r4, lr}
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	f7ff fff0 	bl	800b78c <__sfp_lock_acquire>
 800b7ac:	6a23      	ldr	r3, [r4, #32]
 800b7ae:	b11b      	cbz	r3, 800b7b8 <__sinit+0x14>
 800b7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7b4:	f7ff bff0 	b.w	800b798 <__sfp_lock_release>
 800b7b8:	4b04      	ldr	r3, [pc, #16]	@ (800b7cc <__sinit+0x28>)
 800b7ba:	6223      	str	r3, [r4, #32]
 800b7bc:	4b04      	ldr	r3, [pc, #16]	@ (800b7d0 <__sinit+0x2c>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1f5      	bne.n	800b7b0 <__sinit+0xc>
 800b7c4:	f7ff ffc4 	bl	800b750 <global_stdio_init.part.0>
 800b7c8:	e7f2      	b.n	800b7b0 <__sinit+0xc>
 800b7ca:	bf00      	nop
 800b7cc:	0800b711 	.word	0x0800b711
 800b7d0:	200010a0 	.word	0x200010a0

0800b7d4 <_fwalk_sglue>:
 800b7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d8:	4607      	mov	r7, r0
 800b7da:	4688      	mov	r8, r1
 800b7dc:	4614      	mov	r4, r2
 800b7de:	2600      	movs	r6, #0
 800b7e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7e4:	f1b9 0901 	subs.w	r9, r9, #1
 800b7e8:	d505      	bpl.n	800b7f6 <_fwalk_sglue+0x22>
 800b7ea:	6824      	ldr	r4, [r4, #0]
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	d1f7      	bne.n	800b7e0 <_fwalk_sglue+0xc>
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f6:	89ab      	ldrh	r3, [r5, #12]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d907      	bls.n	800b80c <_fwalk_sglue+0x38>
 800b7fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b800:	3301      	adds	r3, #1
 800b802:	d003      	beq.n	800b80c <_fwalk_sglue+0x38>
 800b804:	4629      	mov	r1, r5
 800b806:	4638      	mov	r0, r7
 800b808:	47c0      	blx	r8
 800b80a:	4306      	orrs	r6, r0
 800b80c:	3568      	adds	r5, #104	@ 0x68
 800b80e:	e7e9      	b.n	800b7e4 <_fwalk_sglue+0x10>

0800b810 <iprintf>:
 800b810:	b40f      	push	{r0, r1, r2, r3}
 800b812:	b507      	push	{r0, r1, r2, lr}
 800b814:	4906      	ldr	r1, [pc, #24]	@ (800b830 <iprintf+0x20>)
 800b816:	ab04      	add	r3, sp, #16
 800b818:	6808      	ldr	r0, [r1, #0]
 800b81a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b81e:	6881      	ldr	r1, [r0, #8]
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	f002 fddd 	bl	800e3e0 <_vfiprintf_r>
 800b826:	b003      	add	sp, #12
 800b828:	f85d eb04 	ldr.w	lr, [sp], #4
 800b82c:	b004      	add	sp, #16
 800b82e:	4770      	bx	lr
 800b830:	20000044 	.word	0x20000044

0800b834 <setvbuf>:
 800b834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b838:	461d      	mov	r5, r3
 800b83a:	4b57      	ldr	r3, [pc, #348]	@ (800b998 <setvbuf+0x164>)
 800b83c:	681f      	ldr	r7, [r3, #0]
 800b83e:	4604      	mov	r4, r0
 800b840:	460e      	mov	r6, r1
 800b842:	4690      	mov	r8, r2
 800b844:	b127      	cbz	r7, 800b850 <setvbuf+0x1c>
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	b913      	cbnz	r3, 800b850 <setvbuf+0x1c>
 800b84a:	4638      	mov	r0, r7
 800b84c:	f7ff ffaa 	bl	800b7a4 <__sinit>
 800b850:	f1b8 0f02 	cmp.w	r8, #2
 800b854:	d006      	beq.n	800b864 <setvbuf+0x30>
 800b856:	f1b8 0f01 	cmp.w	r8, #1
 800b85a:	f200 809a 	bhi.w	800b992 <setvbuf+0x15e>
 800b85e:	2d00      	cmp	r5, #0
 800b860:	f2c0 8097 	blt.w	800b992 <setvbuf+0x15e>
 800b864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b866:	07d9      	lsls	r1, r3, #31
 800b868:	d405      	bmi.n	800b876 <setvbuf+0x42>
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	059a      	lsls	r2, r3, #22
 800b86e:	d402      	bmi.n	800b876 <setvbuf+0x42>
 800b870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b872:	f000 fa04 	bl	800bc7e <__retarget_lock_acquire_recursive>
 800b876:	4621      	mov	r1, r4
 800b878:	4638      	mov	r0, r7
 800b87a:	f002 ff4d 	bl	800e718 <_fflush_r>
 800b87e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b880:	b141      	cbz	r1, 800b894 <setvbuf+0x60>
 800b882:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b886:	4299      	cmp	r1, r3
 800b888:	d002      	beq.n	800b890 <setvbuf+0x5c>
 800b88a:	4638      	mov	r0, r7
 800b88c:	f001 f86c 	bl	800c968 <_free_r>
 800b890:	2300      	movs	r3, #0
 800b892:	6363      	str	r3, [r4, #52]	@ 0x34
 800b894:	2300      	movs	r3, #0
 800b896:	61a3      	str	r3, [r4, #24]
 800b898:	6063      	str	r3, [r4, #4]
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	061b      	lsls	r3, r3, #24
 800b89e:	d503      	bpl.n	800b8a8 <setvbuf+0x74>
 800b8a0:	6921      	ldr	r1, [r4, #16]
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	f001 f860 	bl	800c968 <_free_r>
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b8ae:	f023 0303 	bic.w	r3, r3, #3
 800b8b2:	f1b8 0f02 	cmp.w	r8, #2
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	d061      	beq.n	800b97e <setvbuf+0x14a>
 800b8ba:	ab01      	add	r3, sp, #4
 800b8bc:	466a      	mov	r2, sp
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	f002 ff63 	bl	800e78c <__swhatbuf_r>
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	4318      	orrs	r0, r3
 800b8ca:	81a0      	strh	r0, [r4, #12]
 800b8cc:	bb2d      	cbnz	r5, 800b91a <setvbuf+0xe6>
 800b8ce:	9d00      	ldr	r5, [sp, #0]
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f001 f893 	bl	800c9fc <malloc>
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d152      	bne.n	800b982 <setvbuf+0x14e>
 800b8dc:	f8dd 9000 	ldr.w	r9, [sp]
 800b8e0:	45a9      	cmp	r9, r5
 800b8e2:	d140      	bne.n	800b966 <setvbuf+0x132>
 800b8e4:	f04f 35ff 	mov.w	r5, #4294967295
 800b8e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ec:	f043 0202 	orr.w	r2, r3, #2
 800b8f0:	81a2      	strh	r2, [r4, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	60a2      	str	r2, [r4, #8]
 800b8f6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b8fa:	6022      	str	r2, [r4, #0]
 800b8fc:	6122      	str	r2, [r4, #16]
 800b8fe:	2201      	movs	r2, #1
 800b900:	6162      	str	r2, [r4, #20]
 800b902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b904:	07d6      	lsls	r6, r2, #31
 800b906:	d404      	bmi.n	800b912 <setvbuf+0xde>
 800b908:	0598      	lsls	r0, r3, #22
 800b90a:	d402      	bmi.n	800b912 <setvbuf+0xde>
 800b90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b90e:	f000 f9b7 	bl	800bc80 <__retarget_lock_release_recursive>
 800b912:	4628      	mov	r0, r5
 800b914:	b003      	add	sp, #12
 800b916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b91a:	2e00      	cmp	r6, #0
 800b91c:	d0d8      	beq.n	800b8d0 <setvbuf+0x9c>
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	b913      	cbnz	r3, 800b928 <setvbuf+0xf4>
 800b922:	4638      	mov	r0, r7
 800b924:	f7ff ff3e 	bl	800b7a4 <__sinit>
 800b928:	f1b8 0f01 	cmp.w	r8, #1
 800b92c:	bf08      	it	eq
 800b92e:	89a3      	ldrheq	r3, [r4, #12]
 800b930:	6026      	str	r6, [r4, #0]
 800b932:	bf04      	itt	eq
 800b934:	f043 0301 	orreq.w	r3, r3, #1
 800b938:	81a3      	strheq	r3, [r4, #12]
 800b93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b93e:	f013 0208 	ands.w	r2, r3, #8
 800b942:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b946:	d01e      	beq.n	800b986 <setvbuf+0x152>
 800b948:	07d9      	lsls	r1, r3, #31
 800b94a:	bf41      	itttt	mi
 800b94c:	2200      	movmi	r2, #0
 800b94e:	426d      	negmi	r5, r5
 800b950:	60a2      	strmi	r2, [r4, #8]
 800b952:	61a5      	strmi	r5, [r4, #24]
 800b954:	bf58      	it	pl
 800b956:	60a5      	strpl	r5, [r4, #8]
 800b958:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b95a:	07d2      	lsls	r2, r2, #31
 800b95c:	d401      	bmi.n	800b962 <setvbuf+0x12e>
 800b95e:	059b      	lsls	r3, r3, #22
 800b960:	d513      	bpl.n	800b98a <setvbuf+0x156>
 800b962:	2500      	movs	r5, #0
 800b964:	e7d5      	b.n	800b912 <setvbuf+0xde>
 800b966:	4648      	mov	r0, r9
 800b968:	f001 f848 	bl	800c9fc <malloc>
 800b96c:	4606      	mov	r6, r0
 800b96e:	2800      	cmp	r0, #0
 800b970:	d0b8      	beq.n	800b8e4 <setvbuf+0xb0>
 800b972:	89a3      	ldrh	r3, [r4, #12]
 800b974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b978:	81a3      	strh	r3, [r4, #12]
 800b97a:	464d      	mov	r5, r9
 800b97c:	e7cf      	b.n	800b91e <setvbuf+0xea>
 800b97e:	2500      	movs	r5, #0
 800b980:	e7b2      	b.n	800b8e8 <setvbuf+0xb4>
 800b982:	46a9      	mov	r9, r5
 800b984:	e7f5      	b.n	800b972 <setvbuf+0x13e>
 800b986:	60a2      	str	r2, [r4, #8]
 800b988:	e7e6      	b.n	800b958 <setvbuf+0x124>
 800b98a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b98c:	f000 f978 	bl	800bc80 <__retarget_lock_release_recursive>
 800b990:	e7e7      	b.n	800b962 <setvbuf+0x12e>
 800b992:	f04f 35ff 	mov.w	r5, #4294967295
 800b996:	e7bc      	b.n	800b912 <setvbuf+0xde>
 800b998:	20000044 	.word	0x20000044

0800b99c <sniprintf>:
 800b99c:	b40c      	push	{r2, r3}
 800b99e:	b530      	push	{r4, r5, lr}
 800b9a0:	4b17      	ldr	r3, [pc, #92]	@ (800ba00 <sniprintf+0x64>)
 800b9a2:	1e0c      	subs	r4, r1, #0
 800b9a4:	681d      	ldr	r5, [r3, #0]
 800b9a6:	b09d      	sub	sp, #116	@ 0x74
 800b9a8:	da08      	bge.n	800b9bc <sniprintf+0x20>
 800b9aa:	238b      	movs	r3, #139	@ 0x8b
 800b9ac:	602b      	str	r3, [r5, #0]
 800b9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b2:	b01d      	add	sp, #116	@ 0x74
 800b9b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9b8:	b002      	add	sp, #8
 800b9ba:	4770      	bx	lr
 800b9bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b9c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b9c4:	bf14      	ite	ne
 800b9c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b9ca:	4623      	moveq	r3, r4
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	9307      	str	r3, [sp, #28]
 800b9d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b9d4:	9002      	str	r0, [sp, #8]
 800b9d6:	9006      	str	r0, [sp, #24]
 800b9d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b9dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b9de:	ab21      	add	r3, sp, #132	@ 0x84
 800b9e0:	a902      	add	r1, sp, #8
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	f002 fbd5 	bl	800e194 <_svfiprintf_r>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	bfbc      	itt	lt
 800b9ee:	238b      	movlt	r3, #139	@ 0x8b
 800b9f0:	602b      	strlt	r3, [r5, #0]
 800b9f2:	2c00      	cmp	r4, #0
 800b9f4:	d0dd      	beq.n	800b9b2 <sniprintf+0x16>
 800b9f6:	9b02      	ldr	r3, [sp, #8]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	701a      	strb	r2, [r3, #0]
 800b9fc:	e7d9      	b.n	800b9b2 <sniprintf+0x16>
 800b9fe:	bf00      	nop
 800ba00:	20000044 	.word	0x20000044

0800ba04 <siprintf>:
 800ba04:	b40e      	push	{r1, r2, r3}
 800ba06:	b500      	push	{lr}
 800ba08:	b09c      	sub	sp, #112	@ 0x70
 800ba0a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba0c:	9002      	str	r0, [sp, #8]
 800ba0e:	9006      	str	r0, [sp, #24]
 800ba10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba14:	4809      	ldr	r0, [pc, #36]	@ (800ba3c <siprintf+0x38>)
 800ba16:	9107      	str	r1, [sp, #28]
 800ba18:	9104      	str	r1, [sp, #16]
 800ba1a:	4909      	ldr	r1, [pc, #36]	@ (800ba40 <siprintf+0x3c>)
 800ba1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba20:	9105      	str	r1, [sp, #20]
 800ba22:	6800      	ldr	r0, [r0, #0]
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	a902      	add	r1, sp, #8
 800ba28:	f002 fbb4 	bl	800e194 <_svfiprintf_r>
 800ba2c:	9b02      	ldr	r3, [sp, #8]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	b01c      	add	sp, #112	@ 0x70
 800ba34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba38:	b003      	add	sp, #12
 800ba3a:	4770      	bx	lr
 800ba3c:	20000044 	.word	0x20000044
 800ba40:	ffff0208 	.word	0xffff0208

0800ba44 <__sread>:
 800ba44:	b510      	push	{r4, lr}
 800ba46:	460c      	mov	r4, r1
 800ba48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba4c:	f000 f8c8 	bl	800bbe0 <_read_r>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	bfab      	itete	ge
 800ba54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba56:	89a3      	ldrhlt	r3, [r4, #12]
 800ba58:	181b      	addge	r3, r3, r0
 800ba5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba5e:	bfac      	ite	ge
 800ba60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba62:	81a3      	strhlt	r3, [r4, #12]
 800ba64:	bd10      	pop	{r4, pc}

0800ba66 <__swrite>:
 800ba66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6a:	461f      	mov	r7, r3
 800ba6c:	898b      	ldrh	r3, [r1, #12]
 800ba6e:	05db      	lsls	r3, r3, #23
 800ba70:	4605      	mov	r5, r0
 800ba72:	460c      	mov	r4, r1
 800ba74:	4616      	mov	r6, r2
 800ba76:	d505      	bpl.n	800ba84 <__swrite+0x1e>
 800ba78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f000 f89c 	bl	800bbbc <_lseek_r>
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	4632      	mov	r2, r6
 800ba92:	463b      	mov	r3, r7
 800ba94:	4628      	mov	r0, r5
 800ba96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9a:	f000 b8b3 	b.w	800bc04 <_write_r>

0800ba9e <__sseek>:
 800ba9e:	b510      	push	{r4, lr}
 800baa0:	460c      	mov	r4, r1
 800baa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa6:	f000 f889 	bl	800bbbc <_lseek_r>
 800baaa:	1c43      	adds	r3, r0, #1
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	bf15      	itete	ne
 800bab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800baba:	81a3      	strheq	r3, [r4, #12]
 800babc:	bf18      	it	ne
 800babe:	81a3      	strhne	r3, [r4, #12]
 800bac0:	bd10      	pop	{r4, pc}

0800bac2 <__sclose>:
 800bac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac6:	f000 b869 	b.w	800bb9c <_close_r>

0800baca <memset>:
 800baca:	4402      	add	r2, r0
 800bacc:	4603      	mov	r3, r0
 800bace:	4293      	cmp	r3, r2
 800bad0:	d100      	bne.n	800bad4 <memset+0xa>
 800bad2:	4770      	bx	lr
 800bad4:	f803 1b01 	strb.w	r1, [r3], #1
 800bad8:	e7f9      	b.n	800bace <memset+0x4>
	...

0800badc <strtok>:
 800badc:	4b16      	ldr	r3, [pc, #88]	@ (800bb38 <strtok+0x5c>)
 800bade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae2:	681f      	ldr	r7, [r3, #0]
 800bae4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800bae6:	4605      	mov	r5, r0
 800bae8:	460e      	mov	r6, r1
 800baea:	b9ec      	cbnz	r4, 800bb28 <strtok+0x4c>
 800baec:	2050      	movs	r0, #80	@ 0x50
 800baee:	f000 ff85 	bl	800c9fc <malloc>
 800baf2:	4602      	mov	r2, r0
 800baf4:	6478      	str	r0, [r7, #68]	@ 0x44
 800baf6:	b920      	cbnz	r0, 800bb02 <strtok+0x26>
 800baf8:	4b10      	ldr	r3, [pc, #64]	@ (800bb3c <strtok+0x60>)
 800bafa:	4811      	ldr	r0, [pc, #68]	@ (800bb40 <strtok+0x64>)
 800bafc:	215b      	movs	r1, #91	@ 0x5b
 800bafe:	f000 f8c7 	bl	800bc90 <__assert_func>
 800bb02:	e9c0 4400 	strd	r4, r4, [r0]
 800bb06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bb0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bb0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800bb12:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800bb16:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800bb1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800bb1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800bb22:	6184      	str	r4, [r0, #24]
 800bb24:	7704      	strb	r4, [r0, #28]
 800bb26:	6244      	str	r4, [r0, #36]	@ 0x24
 800bb28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb34:	f000 b806 	b.w	800bb44 <__strtok_r>
 800bb38:	20000044 	.word	0x20000044
 800bb3c:	08010bea 	.word	0x08010bea
 800bb40:	08010c01 	.word	0x08010c01

0800bb44 <__strtok_r>:
 800bb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb46:	4604      	mov	r4, r0
 800bb48:	b908      	cbnz	r0, 800bb4e <__strtok_r+0xa>
 800bb4a:	6814      	ldr	r4, [r2, #0]
 800bb4c:	b144      	cbz	r4, 800bb60 <__strtok_r+0x1c>
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bb54:	460f      	mov	r7, r1
 800bb56:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb5a:	b91e      	cbnz	r6, 800bb64 <__strtok_r+0x20>
 800bb5c:	b965      	cbnz	r5, 800bb78 <__strtok_r+0x34>
 800bb5e:	6015      	str	r5, [r2, #0]
 800bb60:	2000      	movs	r0, #0
 800bb62:	e005      	b.n	800bb70 <__strtok_r+0x2c>
 800bb64:	42b5      	cmp	r5, r6
 800bb66:	d1f6      	bne.n	800bb56 <__strtok_r+0x12>
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1f0      	bne.n	800bb4e <__strtok_r+0xa>
 800bb6c:	6014      	str	r4, [r2, #0]
 800bb6e:	7003      	strb	r3, [r0, #0]
 800bb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb72:	461c      	mov	r4, r3
 800bb74:	e00c      	b.n	800bb90 <__strtok_r+0x4c>
 800bb76:	b915      	cbnz	r5, 800bb7e <__strtok_r+0x3a>
 800bb78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb7c:	460e      	mov	r6, r1
 800bb7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bb82:	42ab      	cmp	r3, r5
 800bb84:	d1f7      	bne.n	800bb76 <__strtok_r+0x32>
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d0f3      	beq.n	800bb72 <__strtok_r+0x2e>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bb90:	6014      	str	r4, [r2, #0]
 800bb92:	e7ed      	b.n	800bb70 <__strtok_r+0x2c>

0800bb94 <_localeconv_r>:
 800bb94:	4800      	ldr	r0, [pc, #0]	@ (800bb98 <_localeconv_r+0x4>)
 800bb96:	4770      	bx	lr
 800bb98:	20000184 	.word	0x20000184

0800bb9c <_close_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d06      	ldr	r5, [pc, #24]	@ (800bbb8 <_close_r+0x1c>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	4604      	mov	r4, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f7 fd2e 	bl	8003608 <_close>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_close_r+0x1a>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_close_r+0x1a>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	200010a4 	.word	0x200010a4

0800bbbc <_lseek_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4d07      	ldr	r5, [pc, #28]	@ (800bbdc <_lseek_r+0x20>)
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	4608      	mov	r0, r1
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	602a      	str	r2, [r5, #0]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f7f7 fd43 	bl	8003656 <_lseek>
 800bbd0:	1c43      	adds	r3, r0, #1
 800bbd2:	d102      	bne.n	800bbda <_lseek_r+0x1e>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	b103      	cbz	r3, 800bbda <_lseek_r+0x1e>
 800bbd8:	6023      	str	r3, [r4, #0]
 800bbda:	bd38      	pop	{r3, r4, r5, pc}
 800bbdc:	200010a4 	.word	0x200010a4

0800bbe0 <_read_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4d07      	ldr	r5, [pc, #28]	@ (800bc00 <_read_r+0x20>)
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	4608      	mov	r0, r1
 800bbe8:	4611      	mov	r1, r2
 800bbea:	2200      	movs	r2, #0
 800bbec:	602a      	str	r2, [r5, #0]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	f7f7 fced 	bl	80035ce <_read>
 800bbf4:	1c43      	adds	r3, r0, #1
 800bbf6:	d102      	bne.n	800bbfe <_read_r+0x1e>
 800bbf8:	682b      	ldr	r3, [r5, #0]
 800bbfa:	b103      	cbz	r3, 800bbfe <_read_r+0x1e>
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	bd38      	pop	{r3, r4, r5, pc}
 800bc00:	200010a4 	.word	0x200010a4

0800bc04 <_write_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	4d07      	ldr	r5, [pc, #28]	@ (800bc24 <_write_r+0x20>)
 800bc08:	4604      	mov	r4, r0
 800bc0a:	4608      	mov	r0, r1
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	2200      	movs	r2, #0
 800bc10:	602a      	str	r2, [r5, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	f7f6 ff08 	bl	8002a28 <_write>
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	d102      	bne.n	800bc22 <_write_r+0x1e>
 800bc1c:	682b      	ldr	r3, [r5, #0]
 800bc1e:	b103      	cbz	r3, 800bc22 <_write_r+0x1e>
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	bd38      	pop	{r3, r4, r5, pc}
 800bc24:	200010a4 	.word	0x200010a4

0800bc28 <__errno>:
 800bc28:	4b01      	ldr	r3, [pc, #4]	@ (800bc30 <__errno+0x8>)
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	20000044 	.word	0x20000044

0800bc34 <__libc_init_array>:
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	4d0d      	ldr	r5, [pc, #52]	@ (800bc6c <__libc_init_array+0x38>)
 800bc38:	4c0d      	ldr	r4, [pc, #52]	@ (800bc70 <__libc_init_array+0x3c>)
 800bc3a:	1b64      	subs	r4, r4, r5
 800bc3c:	10a4      	asrs	r4, r4, #2
 800bc3e:	2600      	movs	r6, #0
 800bc40:	42a6      	cmp	r6, r4
 800bc42:	d109      	bne.n	800bc58 <__libc_init_array+0x24>
 800bc44:	4d0b      	ldr	r5, [pc, #44]	@ (800bc74 <__libc_init_array+0x40>)
 800bc46:	4c0c      	ldr	r4, [pc, #48]	@ (800bc78 <__libc_init_array+0x44>)
 800bc48:	f003 faf6 	bl	800f238 <_init>
 800bc4c:	1b64      	subs	r4, r4, r5
 800bc4e:	10a4      	asrs	r4, r4, #2
 800bc50:	2600      	movs	r6, #0
 800bc52:	42a6      	cmp	r6, r4
 800bc54:	d105      	bne.n	800bc62 <__libc_init_array+0x2e>
 800bc56:	bd70      	pop	{r4, r5, r6, pc}
 800bc58:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc5c:	4798      	blx	r3
 800bc5e:	3601      	adds	r6, #1
 800bc60:	e7ee      	b.n	800bc40 <__libc_init_array+0xc>
 800bc62:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc66:	4798      	blx	r3
 800bc68:	3601      	adds	r6, #1
 800bc6a:	e7f2      	b.n	800bc52 <__libc_init_array+0x1e>
 800bc6c:	08010f44 	.word	0x08010f44
 800bc70:	08010f44 	.word	0x08010f44
 800bc74:	08010f44 	.word	0x08010f44
 800bc78:	08010f48 	.word	0x08010f48

0800bc7c <__retarget_lock_init_recursive>:
 800bc7c:	4770      	bx	lr

0800bc7e <__retarget_lock_acquire_recursive>:
 800bc7e:	4770      	bx	lr

0800bc80 <__retarget_lock_release_recursive>:
 800bc80:	4770      	bx	lr
	...

0800bc84 <nanf>:
 800bc84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bc8c <nanf+0x8>
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	7fc00000 	.word	0x7fc00000

0800bc90 <__assert_func>:
 800bc90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc92:	4614      	mov	r4, r2
 800bc94:	461a      	mov	r2, r3
 800bc96:	4b09      	ldr	r3, [pc, #36]	@ (800bcbc <__assert_func+0x2c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	68d8      	ldr	r0, [r3, #12]
 800bc9e:	b954      	cbnz	r4, 800bcb6 <__assert_func+0x26>
 800bca0:	4b07      	ldr	r3, [pc, #28]	@ (800bcc0 <__assert_func+0x30>)
 800bca2:	461c      	mov	r4, r3
 800bca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bca8:	9100      	str	r1, [sp, #0]
 800bcaa:	462b      	mov	r3, r5
 800bcac:	4905      	ldr	r1, [pc, #20]	@ (800bcc4 <__assert_func+0x34>)
 800bcae:	f002 fd5b 	bl	800e768 <fiprintf>
 800bcb2:	f002 fed5 	bl	800ea60 <abort>
 800bcb6:	4b04      	ldr	r3, [pc, #16]	@ (800bcc8 <__assert_func+0x38>)
 800bcb8:	e7f4      	b.n	800bca4 <__assert_func+0x14>
 800bcba:	bf00      	nop
 800bcbc:	20000044 	.word	0x20000044
 800bcc0:	08010c96 	.word	0x08010c96
 800bcc4:	08010c68 	.word	0x08010c68
 800bcc8:	08010c5b 	.word	0x08010c5b

0800bccc <quorem>:
 800bccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	6903      	ldr	r3, [r0, #16]
 800bcd2:	690c      	ldr	r4, [r1, #16]
 800bcd4:	42a3      	cmp	r3, r4
 800bcd6:	4607      	mov	r7, r0
 800bcd8:	db7e      	blt.n	800bdd8 <quorem+0x10c>
 800bcda:	3c01      	subs	r4, #1
 800bcdc:	f101 0814 	add.w	r8, r1, #20
 800bce0:	00a3      	lsls	r3, r4, #2
 800bce2:	f100 0514 	add.w	r5, r0, #20
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcfe:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd02:	d32e      	bcc.n	800bd62 <quorem+0x96>
 800bd04:	f04f 0a00 	mov.w	sl, #0
 800bd08:	46c4      	mov	ip, r8
 800bd0a:	46ae      	mov	lr, r5
 800bd0c:	46d3      	mov	fp, sl
 800bd0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd12:	b298      	uxth	r0, r3
 800bd14:	fb06 a000 	mla	r0, r6, r0, sl
 800bd18:	0c02      	lsrs	r2, r0, #16
 800bd1a:	0c1b      	lsrs	r3, r3, #16
 800bd1c:	fb06 2303 	mla	r3, r6, r3, r2
 800bd20:	f8de 2000 	ldr.w	r2, [lr]
 800bd24:	b280      	uxth	r0, r0
 800bd26:	b292      	uxth	r2, r2
 800bd28:	1a12      	subs	r2, r2, r0
 800bd2a:	445a      	add	r2, fp
 800bd2c:	f8de 0000 	ldr.w	r0, [lr]
 800bd30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd3e:	b292      	uxth	r2, r2
 800bd40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd44:	45e1      	cmp	r9, ip
 800bd46:	f84e 2b04 	str.w	r2, [lr], #4
 800bd4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bd4e:	d2de      	bcs.n	800bd0e <quorem+0x42>
 800bd50:	9b00      	ldr	r3, [sp, #0]
 800bd52:	58eb      	ldr	r3, [r5, r3]
 800bd54:	b92b      	cbnz	r3, 800bd62 <quorem+0x96>
 800bd56:	9b01      	ldr	r3, [sp, #4]
 800bd58:	3b04      	subs	r3, #4
 800bd5a:	429d      	cmp	r5, r3
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	d32f      	bcc.n	800bdc0 <quorem+0xf4>
 800bd60:	613c      	str	r4, [r7, #16]
 800bd62:	4638      	mov	r0, r7
 800bd64:	f001 f9c4 	bl	800d0f0 <__mcmp>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	db25      	blt.n	800bdb8 <quorem+0xec>
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	2000      	movs	r0, #0
 800bd70:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd74:	f8d1 c000 	ldr.w	ip, [r1]
 800bd78:	fa1f fe82 	uxth.w	lr, r2
 800bd7c:	fa1f f38c 	uxth.w	r3, ip
 800bd80:	eba3 030e 	sub.w	r3, r3, lr
 800bd84:	4403      	add	r3, r0
 800bd86:	0c12      	lsrs	r2, r2, #16
 800bd88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd96:	45c1      	cmp	r9, r8
 800bd98:	f841 3b04 	str.w	r3, [r1], #4
 800bd9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bda0:	d2e6      	bcs.n	800bd70 <quorem+0xa4>
 800bda2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bda6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdaa:	b922      	cbnz	r2, 800bdb6 <quorem+0xea>
 800bdac:	3b04      	subs	r3, #4
 800bdae:	429d      	cmp	r5, r3
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	d30b      	bcc.n	800bdcc <quorem+0x100>
 800bdb4:	613c      	str	r4, [r7, #16]
 800bdb6:	3601      	adds	r6, #1
 800bdb8:	4630      	mov	r0, r6
 800bdba:	b003      	add	sp, #12
 800bdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc0:	6812      	ldr	r2, [r2, #0]
 800bdc2:	3b04      	subs	r3, #4
 800bdc4:	2a00      	cmp	r2, #0
 800bdc6:	d1cb      	bne.n	800bd60 <quorem+0x94>
 800bdc8:	3c01      	subs	r4, #1
 800bdca:	e7c6      	b.n	800bd5a <quorem+0x8e>
 800bdcc:	6812      	ldr	r2, [r2, #0]
 800bdce:	3b04      	subs	r3, #4
 800bdd0:	2a00      	cmp	r2, #0
 800bdd2:	d1ef      	bne.n	800bdb4 <quorem+0xe8>
 800bdd4:	3c01      	subs	r4, #1
 800bdd6:	e7ea      	b.n	800bdae <quorem+0xe2>
 800bdd8:	2000      	movs	r0, #0
 800bdda:	e7ee      	b.n	800bdba <quorem+0xee>
 800bddc:	0000      	movs	r0, r0
	...

0800bde0 <_dtoa_r>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	69c7      	ldr	r7, [r0, #28]
 800bde6:	b099      	sub	sp, #100	@ 0x64
 800bde8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bdec:	ec55 4b10 	vmov	r4, r5, d0
 800bdf0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bdf2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bdf4:	4683      	mov	fp, r0
 800bdf6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bdf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdfa:	b97f      	cbnz	r7, 800be1c <_dtoa_r+0x3c>
 800bdfc:	2010      	movs	r0, #16
 800bdfe:	f000 fdfd 	bl	800c9fc <malloc>
 800be02:	4602      	mov	r2, r0
 800be04:	f8cb 001c 	str.w	r0, [fp, #28]
 800be08:	b920      	cbnz	r0, 800be14 <_dtoa_r+0x34>
 800be0a:	4ba7      	ldr	r3, [pc, #668]	@ (800c0a8 <_dtoa_r+0x2c8>)
 800be0c:	21ef      	movs	r1, #239	@ 0xef
 800be0e:	48a7      	ldr	r0, [pc, #668]	@ (800c0ac <_dtoa_r+0x2cc>)
 800be10:	f7ff ff3e 	bl	800bc90 <__assert_func>
 800be14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be18:	6007      	str	r7, [r0, #0]
 800be1a:	60c7      	str	r7, [r0, #12]
 800be1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be20:	6819      	ldr	r1, [r3, #0]
 800be22:	b159      	cbz	r1, 800be3c <_dtoa_r+0x5c>
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	604a      	str	r2, [r1, #4]
 800be28:	2301      	movs	r3, #1
 800be2a:	4093      	lsls	r3, r2
 800be2c:	608b      	str	r3, [r1, #8]
 800be2e:	4658      	mov	r0, fp
 800be30:	f000 feda 	bl	800cbe8 <_Bfree>
 800be34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]
 800be3c:	1e2b      	subs	r3, r5, #0
 800be3e:	bfb9      	ittee	lt
 800be40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be44:	9303      	strlt	r3, [sp, #12]
 800be46:	2300      	movge	r3, #0
 800be48:	6033      	strge	r3, [r6, #0]
 800be4a:	9f03      	ldr	r7, [sp, #12]
 800be4c:	4b98      	ldr	r3, [pc, #608]	@ (800c0b0 <_dtoa_r+0x2d0>)
 800be4e:	bfbc      	itt	lt
 800be50:	2201      	movlt	r2, #1
 800be52:	6032      	strlt	r2, [r6, #0]
 800be54:	43bb      	bics	r3, r7
 800be56:	d112      	bne.n	800be7e <_dtoa_r+0x9e>
 800be58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800be5e:	6013      	str	r3, [r2, #0]
 800be60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be64:	4323      	orrs	r3, r4
 800be66:	f000 854d 	beq.w	800c904 <_dtoa_r+0xb24>
 800be6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c0c4 <_dtoa_r+0x2e4>
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 854f 	beq.w	800c914 <_dtoa_r+0xb34>
 800be76:	f10a 0303 	add.w	r3, sl, #3
 800be7a:	f000 bd49 	b.w	800c910 <_dtoa_r+0xb30>
 800be7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be82:	2200      	movs	r2, #0
 800be84:	ec51 0b17 	vmov	r0, r1, d7
 800be88:	2300      	movs	r3, #0
 800be8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800be8e:	f7f4 fe3b 	bl	8000b08 <__aeabi_dcmpeq>
 800be92:	4680      	mov	r8, r0
 800be94:	b158      	cbz	r0, 800beae <_dtoa_r+0xce>
 800be96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be98:	2301      	movs	r3, #1
 800be9a:	6013      	str	r3, [r2, #0]
 800be9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be9e:	b113      	cbz	r3, 800bea6 <_dtoa_r+0xc6>
 800bea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bea2:	4b84      	ldr	r3, [pc, #528]	@ (800c0b4 <_dtoa_r+0x2d4>)
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c0c8 <_dtoa_r+0x2e8>
 800beaa:	f000 bd33 	b.w	800c914 <_dtoa_r+0xb34>
 800beae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800beb2:	aa16      	add	r2, sp, #88	@ 0x58
 800beb4:	a917      	add	r1, sp, #92	@ 0x5c
 800beb6:	4658      	mov	r0, fp
 800beb8:	f001 fa3a 	bl	800d330 <__d2b>
 800bebc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bec0:	4681      	mov	r9, r0
 800bec2:	2e00      	cmp	r6, #0
 800bec4:	d077      	beq.n	800bfb6 <_dtoa_r+0x1d6>
 800bec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bec8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800becc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bed4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bed8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bedc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bee0:	4619      	mov	r1, r3
 800bee2:	2200      	movs	r2, #0
 800bee4:	4b74      	ldr	r3, [pc, #464]	@ (800c0b8 <_dtoa_r+0x2d8>)
 800bee6:	f7f4 f9ef 	bl	80002c8 <__aeabi_dsub>
 800beea:	a369      	add	r3, pc, #420	@ (adr r3, 800c090 <_dtoa_r+0x2b0>)
 800beec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef0:	f7f4 fba2 	bl	8000638 <__aeabi_dmul>
 800bef4:	a368      	add	r3, pc, #416	@ (adr r3, 800c098 <_dtoa_r+0x2b8>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f7f4 f9e7 	bl	80002cc <__adddf3>
 800befe:	4604      	mov	r4, r0
 800bf00:	4630      	mov	r0, r6
 800bf02:	460d      	mov	r5, r1
 800bf04:	f7f4 fb2e 	bl	8000564 <__aeabi_i2d>
 800bf08:	a365      	add	r3, pc, #404	@ (adr r3, 800c0a0 <_dtoa_r+0x2c0>)
 800bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0e:	f7f4 fb93 	bl	8000638 <__aeabi_dmul>
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	4620      	mov	r0, r4
 800bf18:	4629      	mov	r1, r5
 800bf1a:	f7f4 f9d7 	bl	80002cc <__adddf3>
 800bf1e:	4604      	mov	r4, r0
 800bf20:	460d      	mov	r5, r1
 800bf22:	f7f4 fe39 	bl	8000b98 <__aeabi_d2iz>
 800bf26:	2200      	movs	r2, #0
 800bf28:	4607      	mov	r7, r0
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	4629      	mov	r1, r5
 800bf30:	f7f4 fdf4 	bl	8000b1c <__aeabi_dcmplt>
 800bf34:	b140      	cbz	r0, 800bf48 <_dtoa_r+0x168>
 800bf36:	4638      	mov	r0, r7
 800bf38:	f7f4 fb14 	bl	8000564 <__aeabi_i2d>
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	462b      	mov	r3, r5
 800bf40:	f7f4 fde2 	bl	8000b08 <__aeabi_dcmpeq>
 800bf44:	b900      	cbnz	r0, 800bf48 <_dtoa_r+0x168>
 800bf46:	3f01      	subs	r7, #1
 800bf48:	2f16      	cmp	r7, #22
 800bf4a:	d851      	bhi.n	800bff0 <_dtoa_r+0x210>
 800bf4c:	4b5b      	ldr	r3, [pc, #364]	@ (800c0bc <_dtoa_r+0x2dc>)
 800bf4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf5a:	f7f4 fddf 	bl	8000b1c <__aeabi_dcmplt>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d048      	beq.n	800bff4 <_dtoa_r+0x214>
 800bf62:	3f01      	subs	r7, #1
 800bf64:	2300      	movs	r3, #0
 800bf66:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf6a:	1b9b      	subs	r3, r3, r6
 800bf6c:	1e5a      	subs	r2, r3, #1
 800bf6e:	bf44      	itt	mi
 800bf70:	f1c3 0801 	rsbmi	r8, r3, #1
 800bf74:	2300      	movmi	r3, #0
 800bf76:	9208      	str	r2, [sp, #32]
 800bf78:	bf54      	ite	pl
 800bf7a:	f04f 0800 	movpl.w	r8, #0
 800bf7e:	9308      	strmi	r3, [sp, #32]
 800bf80:	2f00      	cmp	r7, #0
 800bf82:	db39      	blt.n	800bff8 <_dtoa_r+0x218>
 800bf84:	9b08      	ldr	r3, [sp, #32]
 800bf86:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bf88:	443b      	add	r3, r7
 800bf8a:	9308      	str	r3, [sp, #32]
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf92:	2b09      	cmp	r3, #9
 800bf94:	d864      	bhi.n	800c060 <_dtoa_r+0x280>
 800bf96:	2b05      	cmp	r3, #5
 800bf98:	bfc4      	itt	gt
 800bf9a:	3b04      	subgt	r3, #4
 800bf9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bf9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfa0:	f1a3 0302 	sub.w	r3, r3, #2
 800bfa4:	bfcc      	ite	gt
 800bfa6:	2400      	movgt	r4, #0
 800bfa8:	2401      	movle	r4, #1
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d863      	bhi.n	800c076 <_dtoa_r+0x296>
 800bfae:	e8df f003 	tbb	[pc, r3]
 800bfb2:	372a      	.short	0x372a
 800bfb4:	5535      	.short	0x5535
 800bfb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bfba:	441e      	add	r6, r3
 800bfbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bfc0:	2b20      	cmp	r3, #32
 800bfc2:	bfc1      	itttt	gt
 800bfc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bfc8:	409f      	lslgt	r7, r3
 800bfca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bfce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bfd2:	bfd6      	itet	le
 800bfd4:	f1c3 0320 	rsble	r3, r3, #32
 800bfd8:	ea47 0003 	orrgt.w	r0, r7, r3
 800bfdc:	fa04 f003 	lslle.w	r0, r4, r3
 800bfe0:	f7f4 fab0 	bl	8000544 <__aeabi_ui2d>
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bfea:	3e01      	subs	r6, #1
 800bfec:	9214      	str	r2, [sp, #80]	@ 0x50
 800bfee:	e777      	b.n	800bee0 <_dtoa_r+0x100>
 800bff0:	2301      	movs	r3, #1
 800bff2:	e7b8      	b.n	800bf66 <_dtoa_r+0x186>
 800bff4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bff6:	e7b7      	b.n	800bf68 <_dtoa_r+0x188>
 800bff8:	427b      	negs	r3, r7
 800bffa:	930a      	str	r3, [sp, #40]	@ 0x28
 800bffc:	2300      	movs	r3, #0
 800bffe:	eba8 0807 	sub.w	r8, r8, r7
 800c002:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c004:	e7c4      	b.n	800bf90 <_dtoa_r+0x1b0>
 800c006:	2300      	movs	r3, #0
 800c008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c00a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	dc35      	bgt.n	800c07c <_dtoa_r+0x29c>
 800c010:	2301      	movs	r3, #1
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	9307      	str	r3, [sp, #28]
 800c016:	461a      	mov	r2, r3
 800c018:	920e      	str	r2, [sp, #56]	@ 0x38
 800c01a:	e00b      	b.n	800c034 <_dtoa_r+0x254>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e7f3      	b.n	800c008 <_dtoa_r+0x228>
 800c020:	2300      	movs	r3, #0
 800c022:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c026:	18fb      	adds	r3, r7, r3
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	3301      	adds	r3, #1
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	9307      	str	r3, [sp, #28]
 800c030:	bfb8      	it	lt
 800c032:	2301      	movlt	r3, #1
 800c034:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c038:	2100      	movs	r1, #0
 800c03a:	2204      	movs	r2, #4
 800c03c:	f102 0514 	add.w	r5, r2, #20
 800c040:	429d      	cmp	r5, r3
 800c042:	d91f      	bls.n	800c084 <_dtoa_r+0x2a4>
 800c044:	6041      	str	r1, [r0, #4]
 800c046:	4658      	mov	r0, fp
 800c048:	f000 fd8e 	bl	800cb68 <_Balloc>
 800c04c:	4682      	mov	sl, r0
 800c04e:	2800      	cmp	r0, #0
 800c050:	d13c      	bne.n	800c0cc <_dtoa_r+0x2ec>
 800c052:	4b1b      	ldr	r3, [pc, #108]	@ (800c0c0 <_dtoa_r+0x2e0>)
 800c054:	4602      	mov	r2, r0
 800c056:	f240 11af 	movw	r1, #431	@ 0x1af
 800c05a:	e6d8      	b.n	800be0e <_dtoa_r+0x2e>
 800c05c:	2301      	movs	r3, #1
 800c05e:	e7e0      	b.n	800c022 <_dtoa_r+0x242>
 800c060:	2401      	movs	r4, #1
 800c062:	2300      	movs	r3, #0
 800c064:	9309      	str	r3, [sp, #36]	@ 0x24
 800c066:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c068:	f04f 33ff 	mov.w	r3, #4294967295
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	9307      	str	r3, [sp, #28]
 800c070:	2200      	movs	r2, #0
 800c072:	2312      	movs	r3, #18
 800c074:	e7d0      	b.n	800c018 <_dtoa_r+0x238>
 800c076:	2301      	movs	r3, #1
 800c078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c07a:	e7f5      	b.n	800c068 <_dtoa_r+0x288>
 800c07c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	9307      	str	r3, [sp, #28]
 800c082:	e7d7      	b.n	800c034 <_dtoa_r+0x254>
 800c084:	3101      	adds	r1, #1
 800c086:	0052      	lsls	r2, r2, #1
 800c088:	e7d8      	b.n	800c03c <_dtoa_r+0x25c>
 800c08a:	bf00      	nop
 800c08c:	f3af 8000 	nop.w
 800c090:	636f4361 	.word	0x636f4361
 800c094:	3fd287a7 	.word	0x3fd287a7
 800c098:	8b60c8b3 	.word	0x8b60c8b3
 800c09c:	3fc68a28 	.word	0x3fc68a28
 800c0a0:	509f79fb 	.word	0x509f79fb
 800c0a4:	3fd34413 	.word	0x3fd34413
 800c0a8:	08010bea 	.word	0x08010bea
 800c0ac:	08010ca4 	.word	0x08010ca4
 800c0b0:	7ff00000 	.word	0x7ff00000
 800c0b4:	08010bc2 	.word	0x08010bc2
 800c0b8:	3ff80000 	.word	0x3ff80000
 800c0bc:	08010da0 	.word	0x08010da0
 800c0c0:	08010cfc 	.word	0x08010cfc
 800c0c4:	08010ca0 	.word	0x08010ca0
 800c0c8:	08010bc1 	.word	0x08010bc1
 800c0cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0d0:	6018      	str	r0, [r3, #0]
 800c0d2:	9b07      	ldr	r3, [sp, #28]
 800c0d4:	2b0e      	cmp	r3, #14
 800c0d6:	f200 80a4 	bhi.w	800c222 <_dtoa_r+0x442>
 800c0da:	2c00      	cmp	r4, #0
 800c0dc:	f000 80a1 	beq.w	800c222 <_dtoa_r+0x442>
 800c0e0:	2f00      	cmp	r7, #0
 800c0e2:	dd33      	ble.n	800c14c <_dtoa_r+0x36c>
 800c0e4:	4bad      	ldr	r3, [pc, #692]	@ (800c39c <_dtoa_r+0x5bc>)
 800c0e6:	f007 020f 	and.w	r2, r7, #15
 800c0ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0ee:	ed93 7b00 	vldr	d7, [r3]
 800c0f2:	05f8      	lsls	r0, r7, #23
 800c0f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c0f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c0fc:	d516      	bpl.n	800c12c <_dtoa_r+0x34c>
 800c0fe:	4ba8      	ldr	r3, [pc, #672]	@ (800c3a0 <_dtoa_r+0x5c0>)
 800c100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c108:	f7f4 fbc0 	bl	800088c <__aeabi_ddiv>
 800c10c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c110:	f004 040f 	and.w	r4, r4, #15
 800c114:	2603      	movs	r6, #3
 800c116:	4da2      	ldr	r5, [pc, #648]	@ (800c3a0 <_dtoa_r+0x5c0>)
 800c118:	b954      	cbnz	r4, 800c130 <_dtoa_r+0x350>
 800c11a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c11e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c122:	f7f4 fbb3 	bl	800088c <__aeabi_ddiv>
 800c126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c12a:	e028      	b.n	800c17e <_dtoa_r+0x39e>
 800c12c:	2602      	movs	r6, #2
 800c12e:	e7f2      	b.n	800c116 <_dtoa_r+0x336>
 800c130:	07e1      	lsls	r1, r4, #31
 800c132:	d508      	bpl.n	800c146 <_dtoa_r+0x366>
 800c134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c138:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c13c:	f7f4 fa7c 	bl	8000638 <__aeabi_dmul>
 800c140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c144:	3601      	adds	r6, #1
 800c146:	1064      	asrs	r4, r4, #1
 800c148:	3508      	adds	r5, #8
 800c14a:	e7e5      	b.n	800c118 <_dtoa_r+0x338>
 800c14c:	f000 80d2 	beq.w	800c2f4 <_dtoa_r+0x514>
 800c150:	427c      	negs	r4, r7
 800c152:	4b92      	ldr	r3, [pc, #584]	@ (800c39c <_dtoa_r+0x5bc>)
 800c154:	4d92      	ldr	r5, [pc, #584]	@ (800c3a0 <_dtoa_r+0x5c0>)
 800c156:	f004 020f 	and.w	r2, r4, #15
 800c15a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c166:	f7f4 fa67 	bl	8000638 <__aeabi_dmul>
 800c16a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c16e:	1124      	asrs	r4, r4, #4
 800c170:	2300      	movs	r3, #0
 800c172:	2602      	movs	r6, #2
 800c174:	2c00      	cmp	r4, #0
 800c176:	f040 80b2 	bne.w	800c2de <_dtoa_r+0x4fe>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1d3      	bne.n	800c126 <_dtoa_r+0x346>
 800c17e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c180:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 80b7 	beq.w	800c2f8 <_dtoa_r+0x518>
 800c18a:	4b86      	ldr	r3, [pc, #536]	@ (800c3a4 <_dtoa_r+0x5c4>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	4620      	mov	r0, r4
 800c190:	4629      	mov	r1, r5
 800c192:	f7f4 fcc3 	bl	8000b1c <__aeabi_dcmplt>
 800c196:	2800      	cmp	r0, #0
 800c198:	f000 80ae 	beq.w	800c2f8 <_dtoa_r+0x518>
 800c19c:	9b07      	ldr	r3, [sp, #28]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 80aa 	beq.w	800c2f8 <_dtoa_r+0x518>
 800c1a4:	9b00      	ldr	r3, [sp, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	dd37      	ble.n	800c21a <_dtoa_r+0x43a>
 800c1aa:	1e7b      	subs	r3, r7, #1
 800c1ac:	9304      	str	r3, [sp, #16]
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	4b7d      	ldr	r3, [pc, #500]	@ (800c3a8 <_dtoa_r+0x5c8>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7f4 fa3f 	bl	8000638 <__aeabi_dmul>
 800c1ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1be:	9c00      	ldr	r4, [sp, #0]
 800c1c0:	3601      	adds	r6, #1
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7f4 f9ce 	bl	8000564 <__aeabi_i2d>
 800c1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1cc:	f7f4 fa34 	bl	8000638 <__aeabi_dmul>
 800c1d0:	4b76      	ldr	r3, [pc, #472]	@ (800c3ac <_dtoa_r+0x5cc>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7f4 f87a 	bl	80002cc <__adddf3>
 800c1d8:	4605      	mov	r5, r0
 800c1da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c1de:	2c00      	cmp	r4, #0
 800c1e0:	f040 808d 	bne.w	800c2fe <_dtoa_r+0x51e>
 800c1e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e8:	4b71      	ldr	r3, [pc, #452]	@ (800c3b0 <_dtoa_r+0x5d0>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f7f4 f86c 	bl	80002c8 <__aeabi_dsub>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	4633      	mov	r3, r6
 800c1fc:	f7f4 fcac 	bl	8000b58 <__aeabi_dcmpgt>
 800c200:	2800      	cmp	r0, #0
 800c202:	f040 828b 	bne.w	800c71c <_dtoa_r+0x93c>
 800c206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c20a:	462a      	mov	r2, r5
 800c20c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c210:	f7f4 fc84 	bl	8000b1c <__aeabi_dcmplt>
 800c214:	2800      	cmp	r0, #0
 800c216:	f040 8128 	bne.w	800c46a <_dtoa_r+0x68a>
 800c21a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c21e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c224:	2b00      	cmp	r3, #0
 800c226:	f2c0 815a 	blt.w	800c4de <_dtoa_r+0x6fe>
 800c22a:	2f0e      	cmp	r7, #14
 800c22c:	f300 8157 	bgt.w	800c4de <_dtoa_r+0x6fe>
 800c230:	4b5a      	ldr	r3, [pc, #360]	@ (800c39c <_dtoa_r+0x5bc>)
 800c232:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c236:	ed93 7b00 	vldr	d7, [r3]
 800c23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	ed8d 7b00 	vstr	d7, [sp]
 800c242:	da03      	bge.n	800c24c <_dtoa_r+0x46c>
 800c244:	9b07      	ldr	r3, [sp, #28]
 800c246:	2b00      	cmp	r3, #0
 800c248:	f340 8101 	ble.w	800c44e <_dtoa_r+0x66e>
 800c24c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c250:	4656      	mov	r6, sl
 800c252:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c256:	4620      	mov	r0, r4
 800c258:	4629      	mov	r1, r5
 800c25a:	f7f4 fb17 	bl	800088c <__aeabi_ddiv>
 800c25e:	f7f4 fc9b 	bl	8000b98 <__aeabi_d2iz>
 800c262:	4680      	mov	r8, r0
 800c264:	f7f4 f97e 	bl	8000564 <__aeabi_i2d>
 800c268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c26c:	f7f4 f9e4 	bl	8000638 <__aeabi_dmul>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4620      	mov	r0, r4
 800c276:	4629      	mov	r1, r5
 800c278:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c27c:	f7f4 f824 	bl	80002c8 <__aeabi_dsub>
 800c280:	f806 4b01 	strb.w	r4, [r6], #1
 800c284:	9d07      	ldr	r5, [sp, #28]
 800c286:	eba6 040a 	sub.w	r4, r6, sl
 800c28a:	42a5      	cmp	r5, r4
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	f040 8117 	bne.w	800c4c2 <_dtoa_r+0x6e2>
 800c294:	f7f4 f81a 	bl	80002cc <__adddf3>
 800c298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c29c:	4604      	mov	r4, r0
 800c29e:	460d      	mov	r5, r1
 800c2a0:	f7f4 fc5a 	bl	8000b58 <__aeabi_dcmpgt>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	f040 80f9 	bne.w	800c49c <_dtoa_r+0x6bc>
 800c2aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	f7f4 fc29 	bl	8000b08 <__aeabi_dcmpeq>
 800c2b6:	b118      	cbz	r0, 800c2c0 <_dtoa_r+0x4e0>
 800c2b8:	f018 0f01 	tst.w	r8, #1
 800c2bc:	f040 80ee 	bne.w	800c49c <_dtoa_r+0x6bc>
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	4658      	mov	r0, fp
 800c2c4:	f000 fc90 	bl	800cbe8 <_Bfree>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	7033      	strb	r3, [r6, #0]
 800c2cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c2ce:	3701      	adds	r7, #1
 800c2d0:	601f      	str	r7, [r3, #0]
 800c2d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 831d 	beq.w	800c914 <_dtoa_r+0xb34>
 800c2da:	601e      	str	r6, [r3, #0]
 800c2dc:	e31a      	b.n	800c914 <_dtoa_r+0xb34>
 800c2de:	07e2      	lsls	r2, r4, #31
 800c2e0:	d505      	bpl.n	800c2ee <_dtoa_r+0x50e>
 800c2e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2e6:	f7f4 f9a7 	bl	8000638 <__aeabi_dmul>
 800c2ea:	3601      	adds	r6, #1
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	1064      	asrs	r4, r4, #1
 800c2f0:	3508      	adds	r5, #8
 800c2f2:	e73f      	b.n	800c174 <_dtoa_r+0x394>
 800c2f4:	2602      	movs	r6, #2
 800c2f6:	e742      	b.n	800c17e <_dtoa_r+0x39e>
 800c2f8:	9c07      	ldr	r4, [sp, #28]
 800c2fa:	9704      	str	r7, [sp, #16]
 800c2fc:	e761      	b.n	800c1c2 <_dtoa_r+0x3e2>
 800c2fe:	4b27      	ldr	r3, [pc, #156]	@ (800c39c <_dtoa_r+0x5bc>)
 800c300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c306:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c30a:	4454      	add	r4, sl
 800c30c:	2900      	cmp	r1, #0
 800c30e:	d053      	beq.n	800c3b8 <_dtoa_r+0x5d8>
 800c310:	4928      	ldr	r1, [pc, #160]	@ (800c3b4 <_dtoa_r+0x5d4>)
 800c312:	2000      	movs	r0, #0
 800c314:	f7f4 faba 	bl	800088c <__aeabi_ddiv>
 800c318:	4633      	mov	r3, r6
 800c31a:	462a      	mov	r2, r5
 800c31c:	f7f3 ffd4 	bl	80002c8 <__aeabi_dsub>
 800c320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c324:	4656      	mov	r6, sl
 800c326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c32a:	f7f4 fc35 	bl	8000b98 <__aeabi_d2iz>
 800c32e:	4605      	mov	r5, r0
 800c330:	f7f4 f918 	bl	8000564 <__aeabi_i2d>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c33c:	f7f3 ffc4 	bl	80002c8 <__aeabi_dsub>
 800c340:	3530      	adds	r5, #48	@ 0x30
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c34a:	f806 5b01 	strb.w	r5, [r6], #1
 800c34e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c352:	f7f4 fbe3 	bl	8000b1c <__aeabi_dcmplt>
 800c356:	2800      	cmp	r0, #0
 800c358:	d171      	bne.n	800c43e <_dtoa_r+0x65e>
 800c35a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c35e:	4911      	ldr	r1, [pc, #68]	@ (800c3a4 <_dtoa_r+0x5c4>)
 800c360:	2000      	movs	r0, #0
 800c362:	f7f3 ffb1 	bl	80002c8 <__aeabi_dsub>
 800c366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c36a:	f7f4 fbd7 	bl	8000b1c <__aeabi_dcmplt>
 800c36e:	2800      	cmp	r0, #0
 800c370:	f040 8095 	bne.w	800c49e <_dtoa_r+0x6be>
 800c374:	42a6      	cmp	r6, r4
 800c376:	f43f af50 	beq.w	800c21a <_dtoa_r+0x43a>
 800c37a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c37e:	4b0a      	ldr	r3, [pc, #40]	@ (800c3a8 <_dtoa_r+0x5c8>)
 800c380:	2200      	movs	r2, #0
 800c382:	f7f4 f959 	bl	8000638 <__aeabi_dmul>
 800c386:	4b08      	ldr	r3, [pc, #32]	@ (800c3a8 <_dtoa_r+0x5c8>)
 800c388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c38c:	2200      	movs	r2, #0
 800c38e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c392:	f7f4 f951 	bl	8000638 <__aeabi_dmul>
 800c396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c39a:	e7c4      	b.n	800c326 <_dtoa_r+0x546>
 800c39c:	08010da0 	.word	0x08010da0
 800c3a0:	08010d78 	.word	0x08010d78
 800c3a4:	3ff00000 	.word	0x3ff00000
 800c3a8:	40240000 	.word	0x40240000
 800c3ac:	401c0000 	.word	0x401c0000
 800c3b0:	40140000 	.word	0x40140000
 800c3b4:	3fe00000 	.word	0x3fe00000
 800c3b8:	4631      	mov	r1, r6
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f7f4 f93c 	bl	8000638 <__aeabi_dmul>
 800c3c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3c4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c3c6:	4656      	mov	r6, sl
 800c3c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3cc:	f7f4 fbe4 	bl	8000b98 <__aeabi_d2iz>
 800c3d0:	4605      	mov	r5, r0
 800c3d2:	f7f4 f8c7 	bl	8000564 <__aeabi_i2d>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3de:	f7f3 ff73 	bl	80002c8 <__aeabi_dsub>
 800c3e2:	3530      	adds	r5, #48	@ 0x30
 800c3e4:	f806 5b01 	strb.w	r5, [r6], #1
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	42a6      	cmp	r6, r4
 800c3ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3f2:	f04f 0200 	mov.w	r2, #0
 800c3f6:	d124      	bne.n	800c442 <_dtoa_r+0x662>
 800c3f8:	4bac      	ldr	r3, [pc, #688]	@ (800c6ac <_dtoa_r+0x8cc>)
 800c3fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c3fe:	f7f3 ff65 	bl	80002cc <__adddf3>
 800c402:	4602      	mov	r2, r0
 800c404:	460b      	mov	r3, r1
 800c406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c40a:	f7f4 fba5 	bl	8000b58 <__aeabi_dcmpgt>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d145      	bne.n	800c49e <_dtoa_r+0x6be>
 800c412:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c416:	49a5      	ldr	r1, [pc, #660]	@ (800c6ac <_dtoa_r+0x8cc>)
 800c418:	2000      	movs	r0, #0
 800c41a:	f7f3 ff55 	bl	80002c8 <__aeabi_dsub>
 800c41e:	4602      	mov	r2, r0
 800c420:	460b      	mov	r3, r1
 800c422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c426:	f7f4 fb79 	bl	8000b1c <__aeabi_dcmplt>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	f43f aef5 	beq.w	800c21a <_dtoa_r+0x43a>
 800c430:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c432:	1e73      	subs	r3, r6, #1
 800c434:	9315      	str	r3, [sp, #84]	@ 0x54
 800c436:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c43a:	2b30      	cmp	r3, #48	@ 0x30
 800c43c:	d0f8      	beq.n	800c430 <_dtoa_r+0x650>
 800c43e:	9f04      	ldr	r7, [sp, #16]
 800c440:	e73e      	b.n	800c2c0 <_dtoa_r+0x4e0>
 800c442:	4b9b      	ldr	r3, [pc, #620]	@ (800c6b0 <_dtoa_r+0x8d0>)
 800c444:	f7f4 f8f8 	bl	8000638 <__aeabi_dmul>
 800c448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c44c:	e7bc      	b.n	800c3c8 <_dtoa_r+0x5e8>
 800c44e:	d10c      	bne.n	800c46a <_dtoa_r+0x68a>
 800c450:	4b98      	ldr	r3, [pc, #608]	@ (800c6b4 <_dtoa_r+0x8d4>)
 800c452:	2200      	movs	r2, #0
 800c454:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c458:	f7f4 f8ee 	bl	8000638 <__aeabi_dmul>
 800c45c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c460:	f7f4 fb70 	bl	8000b44 <__aeabi_dcmpge>
 800c464:	2800      	cmp	r0, #0
 800c466:	f000 8157 	beq.w	800c718 <_dtoa_r+0x938>
 800c46a:	2400      	movs	r4, #0
 800c46c:	4625      	mov	r5, r4
 800c46e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c470:	43db      	mvns	r3, r3
 800c472:	9304      	str	r3, [sp, #16]
 800c474:	4656      	mov	r6, sl
 800c476:	2700      	movs	r7, #0
 800c478:	4621      	mov	r1, r4
 800c47a:	4658      	mov	r0, fp
 800c47c:	f000 fbb4 	bl	800cbe8 <_Bfree>
 800c480:	2d00      	cmp	r5, #0
 800c482:	d0dc      	beq.n	800c43e <_dtoa_r+0x65e>
 800c484:	b12f      	cbz	r7, 800c492 <_dtoa_r+0x6b2>
 800c486:	42af      	cmp	r7, r5
 800c488:	d003      	beq.n	800c492 <_dtoa_r+0x6b2>
 800c48a:	4639      	mov	r1, r7
 800c48c:	4658      	mov	r0, fp
 800c48e:	f000 fbab 	bl	800cbe8 <_Bfree>
 800c492:	4629      	mov	r1, r5
 800c494:	4658      	mov	r0, fp
 800c496:	f000 fba7 	bl	800cbe8 <_Bfree>
 800c49a:	e7d0      	b.n	800c43e <_dtoa_r+0x65e>
 800c49c:	9704      	str	r7, [sp, #16]
 800c49e:	4633      	mov	r3, r6
 800c4a0:	461e      	mov	r6, r3
 800c4a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4a6:	2a39      	cmp	r2, #57	@ 0x39
 800c4a8:	d107      	bne.n	800c4ba <_dtoa_r+0x6da>
 800c4aa:	459a      	cmp	sl, r3
 800c4ac:	d1f8      	bne.n	800c4a0 <_dtoa_r+0x6c0>
 800c4ae:	9a04      	ldr	r2, [sp, #16]
 800c4b0:	3201      	adds	r2, #1
 800c4b2:	9204      	str	r2, [sp, #16]
 800c4b4:	2230      	movs	r2, #48	@ 0x30
 800c4b6:	f88a 2000 	strb.w	r2, [sl]
 800c4ba:	781a      	ldrb	r2, [r3, #0]
 800c4bc:	3201      	adds	r2, #1
 800c4be:	701a      	strb	r2, [r3, #0]
 800c4c0:	e7bd      	b.n	800c43e <_dtoa_r+0x65e>
 800c4c2:	4b7b      	ldr	r3, [pc, #492]	@ (800c6b0 <_dtoa_r+0x8d0>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f7f4 f8b7 	bl	8000638 <__aeabi_dmul>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	460d      	mov	r5, r1
 800c4d2:	f7f4 fb19 	bl	8000b08 <__aeabi_dcmpeq>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f aebb 	beq.w	800c252 <_dtoa_r+0x472>
 800c4dc:	e6f0      	b.n	800c2c0 <_dtoa_r+0x4e0>
 800c4de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c4e0:	2a00      	cmp	r2, #0
 800c4e2:	f000 80db 	beq.w	800c69c <_dtoa_r+0x8bc>
 800c4e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4e8:	2a01      	cmp	r2, #1
 800c4ea:	f300 80bf 	bgt.w	800c66c <_dtoa_r+0x88c>
 800c4ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c4f0:	2a00      	cmp	r2, #0
 800c4f2:	f000 80b7 	beq.w	800c664 <_dtoa_r+0x884>
 800c4f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c4fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c4fc:	4646      	mov	r6, r8
 800c4fe:	9a08      	ldr	r2, [sp, #32]
 800c500:	2101      	movs	r1, #1
 800c502:	441a      	add	r2, r3
 800c504:	4658      	mov	r0, fp
 800c506:	4498      	add	r8, r3
 800c508:	9208      	str	r2, [sp, #32]
 800c50a:	f000 fc6b 	bl	800cde4 <__i2b>
 800c50e:	4605      	mov	r5, r0
 800c510:	b15e      	cbz	r6, 800c52a <_dtoa_r+0x74a>
 800c512:	9b08      	ldr	r3, [sp, #32]
 800c514:	2b00      	cmp	r3, #0
 800c516:	dd08      	ble.n	800c52a <_dtoa_r+0x74a>
 800c518:	42b3      	cmp	r3, r6
 800c51a:	9a08      	ldr	r2, [sp, #32]
 800c51c:	bfa8      	it	ge
 800c51e:	4633      	movge	r3, r6
 800c520:	eba8 0803 	sub.w	r8, r8, r3
 800c524:	1af6      	subs	r6, r6, r3
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	9308      	str	r3, [sp, #32]
 800c52a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c52c:	b1f3      	cbz	r3, 800c56c <_dtoa_r+0x78c>
 800c52e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 80b7 	beq.w	800c6a4 <_dtoa_r+0x8c4>
 800c536:	b18c      	cbz	r4, 800c55c <_dtoa_r+0x77c>
 800c538:	4629      	mov	r1, r5
 800c53a:	4622      	mov	r2, r4
 800c53c:	4658      	mov	r0, fp
 800c53e:	f000 fd11 	bl	800cf64 <__pow5mult>
 800c542:	464a      	mov	r2, r9
 800c544:	4601      	mov	r1, r0
 800c546:	4605      	mov	r5, r0
 800c548:	4658      	mov	r0, fp
 800c54a:	f000 fc61 	bl	800ce10 <__multiply>
 800c54e:	4649      	mov	r1, r9
 800c550:	9004      	str	r0, [sp, #16]
 800c552:	4658      	mov	r0, fp
 800c554:	f000 fb48 	bl	800cbe8 <_Bfree>
 800c558:	9b04      	ldr	r3, [sp, #16]
 800c55a:	4699      	mov	r9, r3
 800c55c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c55e:	1b1a      	subs	r2, r3, r4
 800c560:	d004      	beq.n	800c56c <_dtoa_r+0x78c>
 800c562:	4649      	mov	r1, r9
 800c564:	4658      	mov	r0, fp
 800c566:	f000 fcfd 	bl	800cf64 <__pow5mult>
 800c56a:	4681      	mov	r9, r0
 800c56c:	2101      	movs	r1, #1
 800c56e:	4658      	mov	r0, fp
 800c570:	f000 fc38 	bl	800cde4 <__i2b>
 800c574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c576:	4604      	mov	r4, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 81cf 	beq.w	800c91c <_dtoa_r+0xb3c>
 800c57e:	461a      	mov	r2, r3
 800c580:	4601      	mov	r1, r0
 800c582:	4658      	mov	r0, fp
 800c584:	f000 fcee 	bl	800cf64 <__pow5mult>
 800c588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	4604      	mov	r4, r0
 800c58e:	f300 8095 	bgt.w	800c6bc <_dtoa_r+0x8dc>
 800c592:	9b02      	ldr	r3, [sp, #8]
 800c594:	2b00      	cmp	r3, #0
 800c596:	f040 8087 	bne.w	800c6a8 <_dtoa_r+0x8c8>
 800c59a:	9b03      	ldr	r3, [sp, #12]
 800c59c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f040 8089 	bne.w	800c6b8 <_dtoa_r+0x8d8>
 800c5a6:	9b03      	ldr	r3, [sp, #12]
 800c5a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5ac:	0d1b      	lsrs	r3, r3, #20
 800c5ae:	051b      	lsls	r3, r3, #20
 800c5b0:	b12b      	cbz	r3, 800c5be <_dtoa_r+0x7de>
 800c5b2:	9b08      	ldr	r3, [sp, #32]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	9308      	str	r3, [sp, #32]
 800c5b8:	f108 0801 	add.w	r8, r8, #1
 800c5bc:	2301      	movs	r3, #1
 800c5be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f000 81b0 	beq.w	800c928 <_dtoa_r+0xb48>
 800c5c8:	6923      	ldr	r3, [r4, #16]
 800c5ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5ce:	6918      	ldr	r0, [r3, #16]
 800c5d0:	f000 fbbc 	bl	800cd4c <__hi0bits>
 800c5d4:	f1c0 0020 	rsb	r0, r0, #32
 800c5d8:	9b08      	ldr	r3, [sp, #32]
 800c5da:	4418      	add	r0, r3
 800c5dc:	f010 001f 	ands.w	r0, r0, #31
 800c5e0:	d077      	beq.n	800c6d2 <_dtoa_r+0x8f2>
 800c5e2:	f1c0 0320 	rsb	r3, r0, #32
 800c5e6:	2b04      	cmp	r3, #4
 800c5e8:	dd6b      	ble.n	800c6c2 <_dtoa_r+0x8e2>
 800c5ea:	9b08      	ldr	r3, [sp, #32]
 800c5ec:	f1c0 001c 	rsb	r0, r0, #28
 800c5f0:	4403      	add	r3, r0
 800c5f2:	4480      	add	r8, r0
 800c5f4:	4406      	add	r6, r0
 800c5f6:	9308      	str	r3, [sp, #32]
 800c5f8:	f1b8 0f00 	cmp.w	r8, #0
 800c5fc:	dd05      	ble.n	800c60a <_dtoa_r+0x82a>
 800c5fe:	4649      	mov	r1, r9
 800c600:	4642      	mov	r2, r8
 800c602:	4658      	mov	r0, fp
 800c604:	f000 fd08 	bl	800d018 <__lshift>
 800c608:	4681      	mov	r9, r0
 800c60a:	9b08      	ldr	r3, [sp, #32]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dd05      	ble.n	800c61c <_dtoa_r+0x83c>
 800c610:	4621      	mov	r1, r4
 800c612:	461a      	mov	r2, r3
 800c614:	4658      	mov	r0, fp
 800c616:	f000 fcff 	bl	800d018 <__lshift>
 800c61a:	4604      	mov	r4, r0
 800c61c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d059      	beq.n	800c6d6 <_dtoa_r+0x8f6>
 800c622:	4621      	mov	r1, r4
 800c624:	4648      	mov	r0, r9
 800c626:	f000 fd63 	bl	800d0f0 <__mcmp>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	da53      	bge.n	800c6d6 <_dtoa_r+0x8f6>
 800c62e:	1e7b      	subs	r3, r7, #1
 800c630:	9304      	str	r3, [sp, #16]
 800c632:	4649      	mov	r1, r9
 800c634:	2300      	movs	r3, #0
 800c636:	220a      	movs	r2, #10
 800c638:	4658      	mov	r0, fp
 800c63a:	f000 faf7 	bl	800cc2c <__multadd>
 800c63e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c640:	4681      	mov	r9, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 8172 	beq.w	800c92c <_dtoa_r+0xb4c>
 800c648:	2300      	movs	r3, #0
 800c64a:	4629      	mov	r1, r5
 800c64c:	220a      	movs	r2, #10
 800c64e:	4658      	mov	r0, fp
 800c650:	f000 faec 	bl	800cc2c <__multadd>
 800c654:	9b00      	ldr	r3, [sp, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	4605      	mov	r5, r0
 800c65a:	dc67      	bgt.n	800c72c <_dtoa_r+0x94c>
 800c65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c65e:	2b02      	cmp	r3, #2
 800c660:	dc41      	bgt.n	800c6e6 <_dtoa_r+0x906>
 800c662:	e063      	b.n	800c72c <_dtoa_r+0x94c>
 800c664:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c666:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c66a:	e746      	b.n	800c4fa <_dtoa_r+0x71a>
 800c66c:	9b07      	ldr	r3, [sp, #28]
 800c66e:	1e5c      	subs	r4, r3, #1
 800c670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c672:	42a3      	cmp	r3, r4
 800c674:	bfbf      	itttt	lt
 800c676:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c678:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c67a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c67c:	1ae3      	sublt	r3, r4, r3
 800c67e:	bfb4      	ite	lt
 800c680:	18d2      	addlt	r2, r2, r3
 800c682:	1b1c      	subge	r4, r3, r4
 800c684:	9b07      	ldr	r3, [sp, #28]
 800c686:	bfbc      	itt	lt
 800c688:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c68a:	2400      	movlt	r4, #0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	bfb5      	itete	lt
 800c690:	eba8 0603 	sublt.w	r6, r8, r3
 800c694:	9b07      	ldrge	r3, [sp, #28]
 800c696:	2300      	movlt	r3, #0
 800c698:	4646      	movge	r6, r8
 800c69a:	e730      	b.n	800c4fe <_dtoa_r+0x71e>
 800c69c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c69e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c6a0:	4646      	mov	r6, r8
 800c6a2:	e735      	b.n	800c510 <_dtoa_r+0x730>
 800c6a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6a6:	e75c      	b.n	800c562 <_dtoa_r+0x782>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	e788      	b.n	800c5be <_dtoa_r+0x7de>
 800c6ac:	3fe00000 	.word	0x3fe00000
 800c6b0:	40240000 	.word	0x40240000
 800c6b4:	40140000 	.word	0x40140000
 800c6b8:	9b02      	ldr	r3, [sp, #8]
 800c6ba:	e780      	b.n	800c5be <_dtoa_r+0x7de>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6c0:	e782      	b.n	800c5c8 <_dtoa_r+0x7e8>
 800c6c2:	d099      	beq.n	800c5f8 <_dtoa_r+0x818>
 800c6c4:	9a08      	ldr	r2, [sp, #32]
 800c6c6:	331c      	adds	r3, #28
 800c6c8:	441a      	add	r2, r3
 800c6ca:	4498      	add	r8, r3
 800c6cc:	441e      	add	r6, r3
 800c6ce:	9208      	str	r2, [sp, #32]
 800c6d0:	e792      	b.n	800c5f8 <_dtoa_r+0x818>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	e7f6      	b.n	800c6c4 <_dtoa_r+0x8e4>
 800c6d6:	9b07      	ldr	r3, [sp, #28]
 800c6d8:	9704      	str	r7, [sp, #16]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dc20      	bgt.n	800c720 <_dtoa_r+0x940>
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	dd1e      	ble.n	800c724 <_dtoa_r+0x944>
 800c6e6:	9b00      	ldr	r3, [sp, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f47f aec0 	bne.w	800c46e <_dtoa_r+0x68e>
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	2205      	movs	r2, #5
 800c6f2:	4658      	mov	r0, fp
 800c6f4:	f000 fa9a 	bl	800cc2c <__multadd>
 800c6f8:	4601      	mov	r1, r0
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	4648      	mov	r0, r9
 800c6fe:	f000 fcf7 	bl	800d0f0 <__mcmp>
 800c702:	2800      	cmp	r0, #0
 800c704:	f77f aeb3 	ble.w	800c46e <_dtoa_r+0x68e>
 800c708:	4656      	mov	r6, sl
 800c70a:	2331      	movs	r3, #49	@ 0x31
 800c70c:	f806 3b01 	strb.w	r3, [r6], #1
 800c710:	9b04      	ldr	r3, [sp, #16]
 800c712:	3301      	adds	r3, #1
 800c714:	9304      	str	r3, [sp, #16]
 800c716:	e6ae      	b.n	800c476 <_dtoa_r+0x696>
 800c718:	9c07      	ldr	r4, [sp, #28]
 800c71a:	9704      	str	r7, [sp, #16]
 800c71c:	4625      	mov	r5, r4
 800c71e:	e7f3      	b.n	800c708 <_dtoa_r+0x928>
 800c720:	9b07      	ldr	r3, [sp, #28]
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 8104 	beq.w	800c934 <_dtoa_r+0xb54>
 800c72c:	2e00      	cmp	r6, #0
 800c72e:	dd05      	ble.n	800c73c <_dtoa_r+0x95c>
 800c730:	4629      	mov	r1, r5
 800c732:	4632      	mov	r2, r6
 800c734:	4658      	mov	r0, fp
 800c736:	f000 fc6f 	bl	800d018 <__lshift>
 800c73a:	4605      	mov	r5, r0
 800c73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d05a      	beq.n	800c7f8 <_dtoa_r+0xa18>
 800c742:	6869      	ldr	r1, [r5, #4]
 800c744:	4658      	mov	r0, fp
 800c746:	f000 fa0f 	bl	800cb68 <_Balloc>
 800c74a:	4606      	mov	r6, r0
 800c74c:	b928      	cbnz	r0, 800c75a <_dtoa_r+0x97a>
 800c74e:	4b84      	ldr	r3, [pc, #528]	@ (800c960 <_dtoa_r+0xb80>)
 800c750:	4602      	mov	r2, r0
 800c752:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c756:	f7ff bb5a 	b.w	800be0e <_dtoa_r+0x2e>
 800c75a:	692a      	ldr	r2, [r5, #16]
 800c75c:	3202      	adds	r2, #2
 800c75e:	0092      	lsls	r2, r2, #2
 800c760:	f105 010c 	add.w	r1, r5, #12
 800c764:	300c      	adds	r0, #12
 800c766:	f002 f965 	bl	800ea34 <memcpy>
 800c76a:	2201      	movs	r2, #1
 800c76c:	4631      	mov	r1, r6
 800c76e:	4658      	mov	r0, fp
 800c770:	f000 fc52 	bl	800d018 <__lshift>
 800c774:	f10a 0301 	add.w	r3, sl, #1
 800c778:	9307      	str	r3, [sp, #28]
 800c77a:	9b00      	ldr	r3, [sp, #0]
 800c77c:	4453      	add	r3, sl
 800c77e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c780:	9b02      	ldr	r3, [sp, #8]
 800c782:	f003 0301 	and.w	r3, r3, #1
 800c786:	462f      	mov	r7, r5
 800c788:	930a      	str	r3, [sp, #40]	@ 0x28
 800c78a:	4605      	mov	r5, r0
 800c78c:	9b07      	ldr	r3, [sp, #28]
 800c78e:	4621      	mov	r1, r4
 800c790:	3b01      	subs	r3, #1
 800c792:	4648      	mov	r0, r9
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	f7ff fa99 	bl	800bccc <quorem>
 800c79a:	4639      	mov	r1, r7
 800c79c:	9002      	str	r0, [sp, #8]
 800c79e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c7a2:	4648      	mov	r0, r9
 800c7a4:	f000 fca4 	bl	800d0f0 <__mcmp>
 800c7a8:	462a      	mov	r2, r5
 800c7aa:	9008      	str	r0, [sp, #32]
 800c7ac:	4621      	mov	r1, r4
 800c7ae:	4658      	mov	r0, fp
 800c7b0:	f000 fcba 	bl	800d128 <__mdiff>
 800c7b4:	68c2      	ldr	r2, [r0, #12]
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	bb02      	cbnz	r2, 800c7fc <_dtoa_r+0xa1c>
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	4648      	mov	r0, r9
 800c7be:	f000 fc97 	bl	800d0f0 <__mcmp>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	4631      	mov	r1, r6
 800c7c6:	4658      	mov	r0, fp
 800c7c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7ca:	f000 fa0d 	bl	800cbe8 <_Bfree>
 800c7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7d2:	9e07      	ldr	r6, [sp, #28]
 800c7d4:	ea43 0102 	orr.w	r1, r3, r2
 800c7d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7da:	4319      	orrs	r1, r3
 800c7dc:	d110      	bne.n	800c800 <_dtoa_r+0xa20>
 800c7de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7e2:	d029      	beq.n	800c838 <_dtoa_r+0xa58>
 800c7e4:	9b08      	ldr	r3, [sp, #32]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	dd02      	ble.n	800c7f0 <_dtoa_r+0xa10>
 800c7ea:	9b02      	ldr	r3, [sp, #8]
 800c7ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c7f0:	9b00      	ldr	r3, [sp, #0]
 800c7f2:	f883 8000 	strb.w	r8, [r3]
 800c7f6:	e63f      	b.n	800c478 <_dtoa_r+0x698>
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	e7bb      	b.n	800c774 <_dtoa_r+0x994>
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	e7e1      	b.n	800c7c4 <_dtoa_r+0x9e4>
 800c800:	9b08      	ldr	r3, [sp, #32]
 800c802:	2b00      	cmp	r3, #0
 800c804:	db04      	blt.n	800c810 <_dtoa_r+0xa30>
 800c806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c808:	430b      	orrs	r3, r1
 800c80a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c80c:	430b      	orrs	r3, r1
 800c80e:	d120      	bne.n	800c852 <_dtoa_r+0xa72>
 800c810:	2a00      	cmp	r2, #0
 800c812:	dded      	ble.n	800c7f0 <_dtoa_r+0xa10>
 800c814:	4649      	mov	r1, r9
 800c816:	2201      	movs	r2, #1
 800c818:	4658      	mov	r0, fp
 800c81a:	f000 fbfd 	bl	800d018 <__lshift>
 800c81e:	4621      	mov	r1, r4
 800c820:	4681      	mov	r9, r0
 800c822:	f000 fc65 	bl	800d0f0 <__mcmp>
 800c826:	2800      	cmp	r0, #0
 800c828:	dc03      	bgt.n	800c832 <_dtoa_r+0xa52>
 800c82a:	d1e1      	bne.n	800c7f0 <_dtoa_r+0xa10>
 800c82c:	f018 0f01 	tst.w	r8, #1
 800c830:	d0de      	beq.n	800c7f0 <_dtoa_r+0xa10>
 800c832:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c836:	d1d8      	bne.n	800c7ea <_dtoa_r+0xa0a>
 800c838:	9a00      	ldr	r2, [sp, #0]
 800c83a:	2339      	movs	r3, #57	@ 0x39
 800c83c:	7013      	strb	r3, [r2, #0]
 800c83e:	4633      	mov	r3, r6
 800c840:	461e      	mov	r6, r3
 800c842:	3b01      	subs	r3, #1
 800c844:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c848:	2a39      	cmp	r2, #57	@ 0x39
 800c84a:	d052      	beq.n	800c8f2 <_dtoa_r+0xb12>
 800c84c:	3201      	adds	r2, #1
 800c84e:	701a      	strb	r2, [r3, #0]
 800c850:	e612      	b.n	800c478 <_dtoa_r+0x698>
 800c852:	2a00      	cmp	r2, #0
 800c854:	dd07      	ble.n	800c866 <_dtoa_r+0xa86>
 800c856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c85a:	d0ed      	beq.n	800c838 <_dtoa_r+0xa58>
 800c85c:	9a00      	ldr	r2, [sp, #0]
 800c85e:	f108 0301 	add.w	r3, r8, #1
 800c862:	7013      	strb	r3, [r2, #0]
 800c864:	e608      	b.n	800c478 <_dtoa_r+0x698>
 800c866:	9b07      	ldr	r3, [sp, #28]
 800c868:	9a07      	ldr	r2, [sp, #28]
 800c86a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c86e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c870:	4293      	cmp	r3, r2
 800c872:	d028      	beq.n	800c8c6 <_dtoa_r+0xae6>
 800c874:	4649      	mov	r1, r9
 800c876:	2300      	movs	r3, #0
 800c878:	220a      	movs	r2, #10
 800c87a:	4658      	mov	r0, fp
 800c87c:	f000 f9d6 	bl	800cc2c <__multadd>
 800c880:	42af      	cmp	r7, r5
 800c882:	4681      	mov	r9, r0
 800c884:	f04f 0300 	mov.w	r3, #0
 800c888:	f04f 020a 	mov.w	r2, #10
 800c88c:	4639      	mov	r1, r7
 800c88e:	4658      	mov	r0, fp
 800c890:	d107      	bne.n	800c8a2 <_dtoa_r+0xac2>
 800c892:	f000 f9cb 	bl	800cc2c <__multadd>
 800c896:	4607      	mov	r7, r0
 800c898:	4605      	mov	r5, r0
 800c89a:	9b07      	ldr	r3, [sp, #28]
 800c89c:	3301      	adds	r3, #1
 800c89e:	9307      	str	r3, [sp, #28]
 800c8a0:	e774      	b.n	800c78c <_dtoa_r+0x9ac>
 800c8a2:	f000 f9c3 	bl	800cc2c <__multadd>
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	220a      	movs	r2, #10
 800c8ae:	4658      	mov	r0, fp
 800c8b0:	f000 f9bc 	bl	800cc2c <__multadd>
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	e7f0      	b.n	800c89a <_dtoa_r+0xaba>
 800c8b8:	9b00      	ldr	r3, [sp, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	bfcc      	ite	gt
 800c8be:	461e      	movgt	r6, r3
 800c8c0:	2601      	movle	r6, #1
 800c8c2:	4456      	add	r6, sl
 800c8c4:	2700      	movs	r7, #0
 800c8c6:	4649      	mov	r1, r9
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	4658      	mov	r0, fp
 800c8cc:	f000 fba4 	bl	800d018 <__lshift>
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	4681      	mov	r9, r0
 800c8d4:	f000 fc0c 	bl	800d0f0 <__mcmp>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	dcb0      	bgt.n	800c83e <_dtoa_r+0xa5e>
 800c8dc:	d102      	bne.n	800c8e4 <_dtoa_r+0xb04>
 800c8de:	f018 0f01 	tst.w	r8, #1
 800c8e2:	d1ac      	bne.n	800c83e <_dtoa_r+0xa5e>
 800c8e4:	4633      	mov	r3, r6
 800c8e6:	461e      	mov	r6, r3
 800c8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8ec:	2a30      	cmp	r2, #48	@ 0x30
 800c8ee:	d0fa      	beq.n	800c8e6 <_dtoa_r+0xb06>
 800c8f0:	e5c2      	b.n	800c478 <_dtoa_r+0x698>
 800c8f2:	459a      	cmp	sl, r3
 800c8f4:	d1a4      	bne.n	800c840 <_dtoa_r+0xa60>
 800c8f6:	9b04      	ldr	r3, [sp, #16]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	2331      	movs	r3, #49	@ 0x31
 800c8fe:	f88a 3000 	strb.w	r3, [sl]
 800c902:	e5b9      	b.n	800c478 <_dtoa_r+0x698>
 800c904:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c906:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c964 <_dtoa_r+0xb84>
 800c90a:	b11b      	cbz	r3, 800c914 <_dtoa_r+0xb34>
 800c90c:	f10a 0308 	add.w	r3, sl, #8
 800c910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	4650      	mov	r0, sl
 800c916:	b019      	add	sp, #100	@ 0x64
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c91e:	2b01      	cmp	r3, #1
 800c920:	f77f ae37 	ble.w	800c592 <_dtoa_r+0x7b2>
 800c924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c926:	930a      	str	r3, [sp, #40]	@ 0x28
 800c928:	2001      	movs	r0, #1
 800c92a:	e655      	b.n	800c5d8 <_dtoa_r+0x7f8>
 800c92c:	9b00      	ldr	r3, [sp, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f77f aed6 	ble.w	800c6e0 <_dtoa_r+0x900>
 800c934:	4656      	mov	r6, sl
 800c936:	4621      	mov	r1, r4
 800c938:	4648      	mov	r0, r9
 800c93a:	f7ff f9c7 	bl	800bccc <quorem>
 800c93e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c942:	f806 8b01 	strb.w	r8, [r6], #1
 800c946:	9b00      	ldr	r3, [sp, #0]
 800c948:	eba6 020a 	sub.w	r2, r6, sl
 800c94c:	4293      	cmp	r3, r2
 800c94e:	ddb3      	ble.n	800c8b8 <_dtoa_r+0xad8>
 800c950:	4649      	mov	r1, r9
 800c952:	2300      	movs	r3, #0
 800c954:	220a      	movs	r2, #10
 800c956:	4658      	mov	r0, fp
 800c958:	f000 f968 	bl	800cc2c <__multadd>
 800c95c:	4681      	mov	r9, r0
 800c95e:	e7ea      	b.n	800c936 <_dtoa_r+0xb56>
 800c960:	08010cfc 	.word	0x08010cfc
 800c964:	08010c97 	.word	0x08010c97

0800c968 <_free_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4605      	mov	r5, r0
 800c96c:	2900      	cmp	r1, #0
 800c96e:	d041      	beq.n	800c9f4 <_free_r+0x8c>
 800c970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c974:	1f0c      	subs	r4, r1, #4
 800c976:	2b00      	cmp	r3, #0
 800c978:	bfb8      	it	lt
 800c97a:	18e4      	addlt	r4, r4, r3
 800c97c:	f000 f8e8 	bl	800cb50 <__malloc_lock>
 800c980:	4a1d      	ldr	r2, [pc, #116]	@ (800c9f8 <_free_r+0x90>)
 800c982:	6813      	ldr	r3, [r2, #0]
 800c984:	b933      	cbnz	r3, 800c994 <_free_r+0x2c>
 800c986:	6063      	str	r3, [r4, #4]
 800c988:	6014      	str	r4, [r2, #0]
 800c98a:	4628      	mov	r0, r5
 800c98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c990:	f000 b8e4 	b.w	800cb5c <__malloc_unlock>
 800c994:	42a3      	cmp	r3, r4
 800c996:	d908      	bls.n	800c9aa <_free_r+0x42>
 800c998:	6820      	ldr	r0, [r4, #0]
 800c99a:	1821      	adds	r1, r4, r0
 800c99c:	428b      	cmp	r3, r1
 800c99e:	bf01      	itttt	eq
 800c9a0:	6819      	ldreq	r1, [r3, #0]
 800c9a2:	685b      	ldreq	r3, [r3, #4]
 800c9a4:	1809      	addeq	r1, r1, r0
 800c9a6:	6021      	streq	r1, [r4, #0]
 800c9a8:	e7ed      	b.n	800c986 <_free_r+0x1e>
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	b10b      	cbz	r3, 800c9b4 <_free_r+0x4c>
 800c9b0:	42a3      	cmp	r3, r4
 800c9b2:	d9fa      	bls.n	800c9aa <_free_r+0x42>
 800c9b4:	6811      	ldr	r1, [r2, #0]
 800c9b6:	1850      	adds	r0, r2, r1
 800c9b8:	42a0      	cmp	r0, r4
 800c9ba:	d10b      	bne.n	800c9d4 <_free_r+0x6c>
 800c9bc:	6820      	ldr	r0, [r4, #0]
 800c9be:	4401      	add	r1, r0
 800c9c0:	1850      	adds	r0, r2, r1
 800c9c2:	4283      	cmp	r3, r0
 800c9c4:	6011      	str	r1, [r2, #0]
 800c9c6:	d1e0      	bne.n	800c98a <_free_r+0x22>
 800c9c8:	6818      	ldr	r0, [r3, #0]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	6053      	str	r3, [r2, #4]
 800c9ce:	4408      	add	r0, r1
 800c9d0:	6010      	str	r0, [r2, #0]
 800c9d2:	e7da      	b.n	800c98a <_free_r+0x22>
 800c9d4:	d902      	bls.n	800c9dc <_free_r+0x74>
 800c9d6:	230c      	movs	r3, #12
 800c9d8:	602b      	str	r3, [r5, #0]
 800c9da:	e7d6      	b.n	800c98a <_free_r+0x22>
 800c9dc:	6820      	ldr	r0, [r4, #0]
 800c9de:	1821      	adds	r1, r4, r0
 800c9e0:	428b      	cmp	r3, r1
 800c9e2:	bf04      	itt	eq
 800c9e4:	6819      	ldreq	r1, [r3, #0]
 800c9e6:	685b      	ldreq	r3, [r3, #4]
 800c9e8:	6063      	str	r3, [r4, #4]
 800c9ea:	bf04      	itt	eq
 800c9ec:	1809      	addeq	r1, r1, r0
 800c9ee:	6021      	streq	r1, [r4, #0]
 800c9f0:	6054      	str	r4, [r2, #4]
 800c9f2:	e7ca      	b.n	800c98a <_free_r+0x22>
 800c9f4:	bd38      	pop	{r3, r4, r5, pc}
 800c9f6:	bf00      	nop
 800c9f8:	200010b0 	.word	0x200010b0

0800c9fc <malloc>:
 800c9fc:	4b02      	ldr	r3, [pc, #8]	@ (800ca08 <malloc+0xc>)
 800c9fe:	4601      	mov	r1, r0
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	f000 b825 	b.w	800ca50 <_malloc_r>
 800ca06:	bf00      	nop
 800ca08:	20000044 	.word	0x20000044

0800ca0c <sbrk_aligned>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	4e0f      	ldr	r6, [pc, #60]	@ (800ca4c <sbrk_aligned+0x40>)
 800ca10:	460c      	mov	r4, r1
 800ca12:	6831      	ldr	r1, [r6, #0]
 800ca14:	4605      	mov	r5, r0
 800ca16:	b911      	cbnz	r1, 800ca1e <sbrk_aligned+0x12>
 800ca18:	f001 fffc 	bl	800ea14 <_sbrk_r>
 800ca1c:	6030      	str	r0, [r6, #0]
 800ca1e:	4621      	mov	r1, r4
 800ca20:	4628      	mov	r0, r5
 800ca22:	f001 fff7 	bl	800ea14 <_sbrk_r>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	d103      	bne.n	800ca32 <sbrk_aligned+0x26>
 800ca2a:	f04f 34ff 	mov.w	r4, #4294967295
 800ca2e:	4620      	mov	r0, r4
 800ca30:	bd70      	pop	{r4, r5, r6, pc}
 800ca32:	1cc4      	adds	r4, r0, #3
 800ca34:	f024 0403 	bic.w	r4, r4, #3
 800ca38:	42a0      	cmp	r0, r4
 800ca3a:	d0f8      	beq.n	800ca2e <sbrk_aligned+0x22>
 800ca3c:	1a21      	subs	r1, r4, r0
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f001 ffe8 	bl	800ea14 <_sbrk_r>
 800ca44:	3001      	adds	r0, #1
 800ca46:	d1f2      	bne.n	800ca2e <sbrk_aligned+0x22>
 800ca48:	e7ef      	b.n	800ca2a <sbrk_aligned+0x1e>
 800ca4a:	bf00      	nop
 800ca4c:	200010ac 	.word	0x200010ac

0800ca50 <_malloc_r>:
 800ca50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca54:	1ccd      	adds	r5, r1, #3
 800ca56:	f025 0503 	bic.w	r5, r5, #3
 800ca5a:	3508      	adds	r5, #8
 800ca5c:	2d0c      	cmp	r5, #12
 800ca5e:	bf38      	it	cc
 800ca60:	250c      	movcc	r5, #12
 800ca62:	2d00      	cmp	r5, #0
 800ca64:	4606      	mov	r6, r0
 800ca66:	db01      	blt.n	800ca6c <_malloc_r+0x1c>
 800ca68:	42a9      	cmp	r1, r5
 800ca6a:	d904      	bls.n	800ca76 <_malloc_r+0x26>
 800ca6c:	230c      	movs	r3, #12
 800ca6e:	6033      	str	r3, [r6, #0]
 800ca70:	2000      	movs	r0, #0
 800ca72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb4c <_malloc_r+0xfc>
 800ca7a:	f000 f869 	bl	800cb50 <__malloc_lock>
 800ca7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca82:	461c      	mov	r4, r3
 800ca84:	bb44      	cbnz	r4, 800cad8 <_malloc_r+0x88>
 800ca86:	4629      	mov	r1, r5
 800ca88:	4630      	mov	r0, r6
 800ca8a:	f7ff ffbf 	bl	800ca0c <sbrk_aligned>
 800ca8e:	1c43      	adds	r3, r0, #1
 800ca90:	4604      	mov	r4, r0
 800ca92:	d158      	bne.n	800cb46 <_malloc_r+0xf6>
 800ca94:	f8d8 4000 	ldr.w	r4, [r8]
 800ca98:	4627      	mov	r7, r4
 800ca9a:	2f00      	cmp	r7, #0
 800ca9c:	d143      	bne.n	800cb26 <_malloc_r+0xd6>
 800ca9e:	2c00      	cmp	r4, #0
 800caa0:	d04b      	beq.n	800cb3a <_malloc_r+0xea>
 800caa2:	6823      	ldr	r3, [r4, #0]
 800caa4:	4639      	mov	r1, r7
 800caa6:	4630      	mov	r0, r6
 800caa8:	eb04 0903 	add.w	r9, r4, r3
 800caac:	f001 ffb2 	bl	800ea14 <_sbrk_r>
 800cab0:	4581      	cmp	r9, r0
 800cab2:	d142      	bne.n	800cb3a <_malloc_r+0xea>
 800cab4:	6821      	ldr	r1, [r4, #0]
 800cab6:	1a6d      	subs	r5, r5, r1
 800cab8:	4629      	mov	r1, r5
 800caba:	4630      	mov	r0, r6
 800cabc:	f7ff ffa6 	bl	800ca0c <sbrk_aligned>
 800cac0:	3001      	adds	r0, #1
 800cac2:	d03a      	beq.n	800cb3a <_malloc_r+0xea>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	442b      	add	r3, r5
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	f8d8 3000 	ldr.w	r3, [r8]
 800cace:	685a      	ldr	r2, [r3, #4]
 800cad0:	bb62      	cbnz	r2, 800cb2c <_malloc_r+0xdc>
 800cad2:	f8c8 7000 	str.w	r7, [r8]
 800cad6:	e00f      	b.n	800caf8 <_malloc_r+0xa8>
 800cad8:	6822      	ldr	r2, [r4, #0]
 800cada:	1b52      	subs	r2, r2, r5
 800cadc:	d420      	bmi.n	800cb20 <_malloc_r+0xd0>
 800cade:	2a0b      	cmp	r2, #11
 800cae0:	d917      	bls.n	800cb12 <_malloc_r+0xc2>
 800cae2:	1961      	adds	r1, r4, r5
 800cae4:	42a3      	cmp	r3, r4
 800cae6:	6025      	str	r5, [r4, #0]
 800cae8:	bf18      	it	ne
 800caea:	6059      	strne	r1, [r3, #4]
 800caec:	6863      	ldr	r3, [r4, #4]
 800caee:	bf08      	it	eq
 800caf0:	f8c8 1000 	streq.w	r1, [r8]
 800caf4:	5162      	str	r2, [r4, r5]
 800caf6:	604b      	str	r3, [r1, #4]
 800caf8:	4630      	mov	r0, r6
 800cafa:	f000 f82f 	bl	800cb5c <__malloc_unlock>
 800cafe:	f104 000b 	add.w	r0, r4, #11
 800cb02:	1d23      	adds	r3, r4, #4
 800cb04:	f020 0007 	bic.w	r0, r0, #7
 800cb08:	1ac2      	subs	r2, r0, r3
 800cb0a:	bf1c      	itt	ne
 800cb0c:	1a1b      	subne	r3, r3, r0
 800cb0e:	50a3      	strne	r3, [r4, r2]
 800cb10:	e7af      	b.n	800ca72 <_malloc_r+0x22>
 800cb12:	6862      	ldr	r2, [r4, #4]
 800cb14:	42a3      	cmp	r3, r4
 800cb16:	bf0c      	ite	eq
 800cb18:	f8c8 2000 	streq.w	r2, [r8]
 800cb1c:	605a      	strne	r2, [r3, #4]
 800cb1e:	e7eb      	b.n	800caf8 <_malloc_r+0xa8>
 800cb20:	4623      	mov	r3, r4
 800cb22:	6864      	ldr	r4, [r4, #4]
 800cb24:	e7ae      	b.n	800ca84 <_malloc_r+0x34>
 800cb26:	463c      	mov	r4, r7
 800cb28:	687f      	ldr	r7, [r7, #4]
 800cb2a:	e7b6      	b.n	800ca9a <_malloc_r+0x4a>
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	d1fb      	bne.n	800cb2c <_malloc_r+0xdc>
 800cb34:	2300      	movs	r3, #0
 800cb36:	6053      	str	r3, [r2, #4]
 800cb38:	e7de      	b.n	800caf8 <_malloc_r+0xa8>
 800cb3a:	230c      	movs	r3, #12
 800cb3c:	6033      	str	r3, [r6, #0]
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f000 f80c 	bl	800cb5c <__malloc_unlock>
 800cb44:	e794      	b.n	800ca70 <_malloc_r+0x20>
 800cb46:	6005      	str	r5, [r0, #0]
 800cb48:	e7d6      	b.n	800caf8 <_malloc_r+0xa8>
 800cb4a:	bf00      	nop
 800cb4c:	200010b0 	.word	0x200010b0

0800cb50 <__malloc_lock>:
 800cb50:	4801      	ldr	r0, [pc, #4]	@ (800cb58 <__malloc_lock+0x8>)
 800cb52:	f7ff b894 	b.w	800bc7e <__retarget_lock_acquire_recursive>
 800cb56:	bf00      	nop
 800cb58:	200010a8 	.word	0x200010a8

0800cb5c <__malloc_unlock>:
 800cb5c:	4801      	ldr	r0, [pc, #4]	@ (800cb64 <__malloc_unlock+0x8>)
 800cb5e:	f7ff b88f 	b.w	800bc80 <__retarget_lock_release_recursive>
 800cb62:	bf00      	nop
 800cb64:	200010a8 	.word	0x200010a8

0800cb68 <_Balloc>:
 800cb68:	b570      	push	{r4, r5, r6, lr}
 800cb6a:	69c6      	ldr	r6, [r0, #28]
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	460d      	mov	r5, r1
 800cb70:	b976      	cbnz	r6, 800cb90 <_Balloc+0x28>
 800cb72:	2010      	movs	r0, #16
 800cb74:	f7ff ff42 	bl	800c9fc <malloc>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	61e0      	str	r0, [r4, #28]
 800cb7c:	b920      	cbnz	r0, 800cb88 <_Balloc+0x20>
 800cb7e:	4b18      	ldr	r3, [pc, #96]	@ (800cbe0 <_Balloc+0x78>)
 800cb80:	4818      	ldr	r0, [pc, #96]	@ (800cbe4 <_Balloc+0x7c>)
 800cb82:	216b      	movs	r1, #107	@ 0x6b
 800cb84:	f7ff f884 	bl	800bc90 <__assert_func>
 800cb88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb8c:	6006      	str	r6, [r0, #0]
 800cb8e:	60c6      	str	r6, [r0, #12]
 800cb90:	69e6      	ldr	r6, [r4, #28]
 800cb92:	68f3      	ldr	r3, [r6, #12]
 800cb94:	b183      	cbz	r3, 800cbb8 <_Balloc+0x50>
 800cb96:	69e3      	ldr	r3, [r4, #28]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb9e:	b9b8      	cbnz	r0, 800cbd0 <_Balloc+0x68>
 800cba0:	2101      	movs	r1, #1
 800cba2:	fa01 f605 	lsl.w	r6, r1, r5
 800cba6:	1d72      	adds	r2, r6, #5
 800cba8:	0092      	lsls	r2, r2, #2
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f001 ff5f 	bl	800ea6e <_calloc_r>
 800cbb0:	b160      	cbz	r0, 800cbcc <_Balloc+0x64>
 800cbb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbb6:	e00e      	b.n	800cbd6 <_Balloc+0x6e>
 800cbb8:	2221      	movs	r2, #33	@ 0x21
 800cbba:	2104      	movs	r1, #4
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f001 ff56 	bl	800ea6e <_calloc_r>
 800cbc2:	69e3      	ldr	r3, [r4, #28]
 800cbc4:	60f0      	str	r0, [r6, #12]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1e4      	bne.n	800cb96 <_Balloc+0x2e>
 800cbcc:	2000      	movs	r0, #0
 800cbce:	bd70      	pop	{r4, r5, r6, pc}
 800cbd0:	6802      	ldr	r2, [r0, #0]
 800cbd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbdc:	e7f7      	b.n	800cbce <_Balloc+0x66>
 800cbde:	bf00      	nop
 800cbe0:	08010bea 	.word	0x08010bea
 800cbe4:	08010d0d 	.word	0x08010d0d

0800cbe8 <_Bfree>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	69c6      	ldr	r6, [r0, #28]
 800cbec:	4605      	mov	r5, r0
 800cbee:	460c      	mov	r4, r1
 800cbf0:	b976      	cbnz	r6, 800cc10 <_Bfree+0x28>
 800cbf2:	2010      	movs	r0, #16
 800cbf4:	f7ff ff02 	bl	800c9fc <malloc>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	61e8      	str	r0, [r5, #28]
 800cbfc:	b920      	cbnz	r0, 800cc08 <_Bfree+0x20>
 800cbfe:	4b09      	ldr	r3, [pc, #36]	@ (800cc24 <_Bfree+0x3c>)
 800cc00:	4809      	ldr	r0, [pc, #36]	@ (800cc28 <_Bfree+0x40>)
 800cc02:	218f      	movs	r1, #143	@ 0x8f
 800cc04:	f7ff f844 	bl	800bc90 <__assert_func>
 800cc08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc0c:	6006      	str	r6, [r0, #0]
 800cc0e:	60c6      	str	r6, [r0, #12]
 800cc10:	b13c      	cbz	r4, 800cc22 <_Bfree+0x3a>
 800cc12:	69eb      	ldr	r3, [r5, #28]
 800cc14:	6862      	ldr	r2, [r4, #4]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc1c:	6021      	str	r1, [r4, #0]
 800cc1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc22:	bd70      	pop	{r4, r5, r6, pc}
 800cc24:	08010bea 	.word	0x08010bea
 800cc28:	08010d0d 	.word	0x08010d0d

0800cc2c <__multadd>:
 800cc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc30:	690d      	ldr	r5, [r1, #16]
 800cc32:	4607      	mov	r7, r0
 800cc34:	460c      	mov	r4, r1
 800cc36:	461e      	mov	r6, r3
 800cc38:	f101 0c14 	add.w	ip, r1, #20
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	f8dc 3000 	ldr.w	r3, [ip]
 800cc42:	b299      	uxth	r1, r3
 800cc44:	fb02 6101 	mla	r1, r2, r1, r6
 800cc48:	0c1e      	lsrs	r6, r3, #16
 800cc4a:	0c0b      	lsrs	r3, r1, #16
 800cc4c:	fb02 3306 	mla	r3, r2, r6, r3
 800cc50:	b289      	uxth	r1, r1
 800cc52:	3001      	adds	r0, #1
 800cc54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc58:	4285      	cmp	r5, r0
 800cc5a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc62:	dcec      	bgt.n	800cc3e <__multadd+0x12>
 800cc64:	b30e      	cbz	r6, 800ccaa <__multadd+0x7e>
 800cc66:	68a3      	ldr	r3, [r4, #8]
 800cc68:	42ab      	cmp	r3, r5
 800cc6a:	dc19      	bgt.n	800cca0 <__multadd+0x74>
 800cc6c:	6861      	ldr	r1, [r4, #4]
 800cc6e:	4638      	mov	r0, r7
 800cc70:	3101      	adds	r1, #1
 800cc72:	f7ff ff79 	bl	800cb68 <_Balloc>
 800cc76:	4680      	mov	r8, r0
 800cc78:	b928      	cbnz	r0, 800cc86 <__multadd+0x5a>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	@ (800ccb0 <__multadd+0x84>)
 800cc7e:	480d      	ldr	r0, [pc, #52]	@ (800ccb4 <__multadd+0x88>)
 800cc80:	21ba      	movs	r1, #186	@ 0xba
 800cc82:	f7ff f805 	bl	800bc90 <__assert_func>
 800cc86:	6922      	ldr	r2, [r4, #16]
 800cc88:	3202      	adds	r2, #2
 800cc8a:	f104 010c 	add.w	r1, r4, #12
 800cc8e:	0092      	lsls	r2, r2, #2
 800cc90:	300c      	adds	r0, #12
 800cc92:	f001 fecf 	bl	800ea34 <memcpy>
 800cc96:	4621      	mov	r1, r4
 800cc98:	4638      	mov	r0, r7
 800cc9a:	f7ff ffa5 	bl	800cbe8 <_Bfree>
 800cc9e:	4644      	mov	r4, r8
 800cca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cca4:	3501      	adds	r5, #1
 800cca6:	615e      	str	r6, [r3, #20]
 800cca8:	6125      	str	r5, [r4, #16]
 800ccaa:	4620      	mov	r0, r4
 800ccac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb0:	08010cfc 	.word	0x08010cfc
 800ccb4:	08010d0d 	.word	0x08010d0d

0800ccb8 <__s2b>:
 800ccb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	4615      	mov	r5, r2
 800ccc0:	461f      	mov	r7, r3
 800ccc2:	2209      	movs	r2, #9
 800ccc4:	3308      	adds	r3, #8
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cccc:	2100      	movs	r1, #0
 800ccce:	2201      	movs	r2, #1
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	db09      	blt.n	800cce8 <__s2b+0x30>
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f7ff ff47 	bl	800cb68 <_Balloc>
 800ccda:	b940      	cbnz	r0, 800ccee <__s2b+0x36>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	4b19      	ldr	r3, [pc, #100]	@ (800cd44 <__s2b+0x8c>)
 800cce0:	4819      	ldr	r0, [pc, #100]	@ (800cd48 <__s2b+0x90>)
 800cce2:	21d3      	movs	r1, #211	@ 0xd3
 800cce4:	f7fe ffd4 	bl	800bc90 <__assert_func>
 800cce8:	0052      	lsls	r2, r2, #1
 800ccea:	3101      	adds	r1, #1
 800ccec:	e7f0      	b.n	800ccd0 <__s2b+0x18>
 800ccee:	9b08      	ldr	r3, [sp, #32]
 800ccf0:	6143      	str	r3, [r0, #20]
 800ccf2:	2d09      	cmp	r5, #9
 800ccf4:	f04f 0301 	mov.w	r3, #1
 800ccf8:	6103      	str	r3, [r0, #16]
 800ccfa:	dd16      	ble.n	800cd2a <__s2b+0x72>
 800ccfc:	f104 0909 	add.w	r9, r4, #9
 800cd00:	46c8      	mov	r8, r9
 800cd02:	442c      	add	r4, r5
 800cd04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd08:	4601      	mov	r1, r0
 800cd0a:	3b30      	subs	r3, #48	@ 0x30
 800cd0c:	220a      	movs	r2, #10
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f7ff ff8c 	bl	800cc2c <__multadd>
 800cd14:	45a0      	cmp	r8, r4
 800cd16:	d1f5      	bne.n	800cd04 <__s2b+0x4c>
 800cd18:	f1a5 0408 	sub.w	r4, r5, #8
 800cd1c:	444c      	add	r4, r9
 800cd1e:	1b2d      	subs	r5, r5, r4
 800cd20:	1963      	adds	r3, r4, r5
 800cd22:	42bb      	cmp	r3, r7
 800cd24:	db04      	blt.n	800cd30 <__s2b+0x78>
 800cd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd2a:	340a      	adds	r4, #10
 800cd2c:	2509      	movs	r5, #9
 800cd2e:	e7f6      	b.n	800cd1e <__s2b+0x66>
 800cd30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd34:	4601      	mov	r1, r0
 800cd36:	3b30      	subs	r3, #48	@ 0x30
 800cd38:	220a      	movs	r2, #10
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	f7ff ff76 	bl	800cc2c <__multadd>
 800cd40:	e7ee      	b.n	800cd20 <__s2b+0x68>
 800cd42:	bf00      	nop
 800cd44:	08010cfc 	.word	0x08010cfc
 800cd48:	08010d0d 	.word	0x08010d0d

0800cd4c <__hi0bits>:
 800cd4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd50:	4603      	mov	r3, r0
 800cd52:	bf36      	itet	cc
 800cd54:	0403      	lslcc	r3, r0, #16
 800cd56:	2000      	movcs	r0, #0
 800cd58:	2010      	movcc	r0, #16
 800cd5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd5e:	bf3c      	itt	cc
 800cd60:	021b      	lslcc	r3, r3, #8
 800cd62:	3008      	addcc	r0, #8
 800cd64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd68:	bf3c      	itt	cc
 800cd6a:	011b      	lslcc	r3, r3, #4
 800cd6c:	3004      	addcc	r0, #4
 800cd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd72:	bf3c      	itt	cc
 800cd74:	009b      	lslcc	r3, r3, #2
 800cd76:	3002      	addcc	r0, #2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	db05      	blt.n	800cd88 <__hi0bits+0x3c>
 800cd7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd80:	f100 0001 	add.w	r0, r0, #1
 800cd84:	bf08      	it	eq
 800cd86:	2020      	moveq	r0, #32
 800cd88:	4770      	bx	lr

0800cd8a <__lo0bits>:
 800cd8a:	6803      	ldr	r3, [r0, #0]
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	f013 0007 	ands.w	r0, r3, #7
 800cd92:	d00b      	beq.n	800cdac <__lo0bits+0x22>
 800cd94:	07d9      	lsls	r1, r3, #31
 800cd96:	d421      	bmi.n	800cddc <__lo0bits+0x52>
 800cd98:	0798      	lsls	r0, r3, #30
 800cd9a:	bf49      	itett	mi
 800cd9c:	085b      	lsrmi	r3, r3, #1
 800cd9e:	089b      	lsrpl	r3, r3, #2
 800cda0:	2001      	movmi	r0, #1
 800cda2:	6013      	strmi	r3, [r2, #0]
 800cda4:	bf5c      	itt	pl
 800cda6:	6013      	strpl	r3, [r2, #0]
 800cda8:	2002      	movpl	r0, #2
 800cdaa:	4770      	bx	lr
 800cdac:	b299      	uxth	r1, r3
 800cdae:	b909      	cbnz	r1, 800cdb4 <__lo0bits+0x2a>
 800cdb0:	0c1b      	lsrs	r3, r3, #16
 800cdb2:	2010      	movs	r0, #16
 800cdb4:	b2d9      	uxtb	r1, r3
 800cdb6:	b909      	cbnz	r1, 800cdbc <__lo0bits+0x32>
 800cdb8:	3008      	adds	r0, #8
 800cdba:	0a1b      	lsrs	r3, r3, #8
 800cdbc:	0719      	lsls	r1, r3, #28
 800cdbe:	bf04      	itt	eq
 800cdc0:	091b      	lsreq	r3, r3, #4
 800cdc2:	3004      	addeq	r0, #4
 800cdc4:	0799      	lsls	r1, r3, #30
 800cdc6:	bf04      	itt	eq
 800cdc8:	089b      	lsreq	r3, r3, #2
 800cdca:	3002      	addeq	r0, #2
 800cdcc:	07d9      	lsls	r1, r3, #31
 800cdce:	d403      	bmi.n	800cdd8 <__lo0bits+0x4e>
 800cdd0:	085b      	lsrs	r3, r3, #1
 800cdd2:	f100 0001 	add.w	r0, r0, #1
 800cdd6:	d003      	beq.n	800cde0 <__lo0bits+0x56>
 800cdd8:	6013      	str	r3, [r2, #0]
 800cdda:	4770      	bx	lr
 800cddc:	2000      	movs	r0, #0
 800cdde:	4770      	bx	lr
 800cde0:	2020      	movs	r0, #32
 800cde2:	4770      	bx	lr

0800cde4 <__i2b>:
 800cde4:	b510      	push	{r4, lr}
 800cde6:	460c      	mov	r4, r1
 800cde8:	2101      	movs	r1, #1
 800cdea:	f7ff febd 	bl	800cb68 <_Balloc>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	b928      	cbnz	r0, 800cdfe <__i2b+0x1a>
 800cdf2:	4b05      	ldr	r3, [pc, #20]	@ (800ce08 <__i2b+0x24>)
 800cdf4:	4805      	ldr	r0, [pc, #20]	@ (800ce0c <__i2b+0x28>)
 800cdf6:	f240 1145 	movw	r1, #325	@ 0x145
 800cdfa:	f7fe ff49 	bl	800bc90 <__assert_func>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	6144      	str	r4, [r0, #20]
 800ce02:	6103      	str	r3, [r0, #16]
 800ce04:	bd10      	pop	{r4, pc}
 800ce06:	bf00      	nop
 800ce08:	08010cfc 	.word	0x08010cfc
 800ce0c:	08010d0d 	.word	0x08010d0d

0800ce10 <__multiply>:
 800ce10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce14:	4614      	mov	r4, r2
 800ce16:	690a      	ldr	r2, [r1, #16]
 800ce18:	6923      	ldr	r3, [r4, #16]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	bfa8      	it	ge
 800ce1e:	4623      	movge	r3, r4
 800ce20:	460f      	mov	r7, r1
 800ce22:	bfa4      	itt	ge
 800ce24:	460c      	movge	r4, r1
 800ce26:	461f      	movge	r7, r3
 800ce28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce30:	68a3      	ldr	r3, [r4, #8]
 800ce32:	6861      	ldr	r1, [r4, #4]
 800ce34:	eb0a 0609 	add.w	r6, sl, r9
 800ce38:	42b3      	cmp	r3, r6
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	bfb8      	it	lt
 800ce3e:	3101      	addlt	r1, #1
 800ce40:	f7ff fe92 	bl	800cb68 <_Balloc>
 800ce44:	b930      	cbnz	r0, 800ce54 <__multiply+0x44>
 800ce46:	4602      	mov	r2, r0
 800ce48:	4b44      	ldr	r3, [pc, #272]	@ (800cf5c <__multiply+0x14c>)
 800ce4a:	4845      	ldr	r0, [pc, #276]	@ (800cf60 <__multiply+0x150>)
 800ce4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce50:	f7fe ff1e 	bl	800bc90 <__assert_func>
 800ce54:	f100 0514 	add.w	r5, r0, #20
 800ce58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce5c:	462b      	mov	r3, r5
 800ce5e:	2200      	movs	r2, #0
 800ce60:	4543      	cmp	r3, r8
 800ce62:	d321      	bcc.n	800cea8 <__multiply+0x98>
 800ce64:	f107 0114 	add.w	r1, r7, #20
 800ce68:	f104 0214 	add.w	r2, r4, #20
 800ce6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce74:	9302      	str	r3, [sp, #8]
 800ce76:	1b13      	subs	r3, r2, r4
 800ce78:	3b15      	subs	r3, #21
 800ce7a:	f023 0303 	bic.w	r3, r3, #3
 800ce7e:	3304      	adds	r3, #4
 800ce80:	f104 0715 	add.w	r7, r4, #21
 800ce84:	42ba      	cmp	r2, r7
 800ce86:	bf38      	it	cc
 800ce88:	2304      	movcc	r3, #4
 800ce8a:	9301      	str	r3, [sp, #4]
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	9103      	str	r1, [sp, #12]
 800ce90:	428b      	cmp	r3, r1
 800ce92:	d80c      	bhi.n	800ceae <__multiply+0x9e>
 800ce94:	2e00      	cmp	r6, #0
 800ce96:	dd03      	ble.n	800cea0 <__multiply+0x90>
 800ce98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d05b      	beq.n	800cf58 <__multiply+0x148>
 800cea0:	6106      	str	r6, [r0, #16]
 800cea2:	b005      	add	sp, #20
 800cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea8:	f843 2b04 	str.w	r2, [r3], #4
 800ceac:	e7d8      	b.n	800ce60 <__multiply+0x50>
 800ceae:	f8b1 a000 	ldrh.w	sl, [r1]
 800ceb2:	f1ba 0f00 	cmp.w	sl, #0
 800ceb6:	d024      	beq.n	800cf02 <__multiply+0xf2>
 800ceb8:	f104 0e14 	add.w	lr, r4, #20
 800cebc:	46a9      	mov	r9, r5
 800cebe:	f04f 0c00 	mov.w	ip, #0
 800cec2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cec6:	f8d9 3000 	ldr.w	r3, [r9]
 800ceca:	fa1f fb87 	uxth.w	fp, r7
 800cece:	b29b      	uxth	r3, r3
 800ced0:	fb0a 330b 	mla	r3, sl, fp, r3
 800ced4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ced8:	f8d9 7000 	ldr.w	r7, [r9]
 800cedc:	4463      	add	r3, ip
 800cede:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cee2:	fb0a c70b 	mla	r7, sl, fp, ip
 800cee6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cef0:	4572      	cmp	r2, lr
 800cef2:	f849 3b04 	str.w	r3, [r9], #4
 800cef6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cefa:	d8e2      	bhi.n	800cec2 <__multiply+0xb2>
 800cefc:	9b01      	ldr	r3, [sp, #4]
 800cefe:	f845 c003 	str.w	ip, [r5, r3]
 800cf02:	9b03      	ldr	r3, [sp, #12]
 800cf04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf08:	3104      	adds	r1, #4
 800cf0a:	f1b9 0f00 	cmp.w	r9, #0
 800cf0e:	d021      	beq.n	800cf54 <__multiply+0x144>
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	f104 0c14 	add.w	ip, r4, #20
 800cf16:	46ae      	mov	lr, r5
 800cf18:	f04f 0a00 	mov.w	sl, #0
 800cf1c:	f8bc b000 	ldrh.w	fp, [ip]
 800cf20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf24:	fb09 770b 	mla	r7, r9, fp, r7
 800cf28:	4457      	add	r7, sl
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf30:	f84e 3b04 	str.w	r3, [lr], #4
 800cf34:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf3c:	f8be 3000 	ldrh.w	r3, [lr]
 800cf40:	fb09 330a 	mla	r3, r9, sl, r3
 800cf44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf48:	4562      	cmp	r2, ip
 800cf4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf4e:	d8e5      	bhi.n	800cf1c <__multiply+0x10c>
 800cf50:	9f01      	ldr	r7, [sp, #4]
 800cf52:	51eb      	str	r3, [r5, r7]
 800cf54:	3504      	adds	r5, #4
 800cf56:	e799      	b.n	800ce8c <__multiply+0x7c>
 800cf58:	3e01      	subs	r6, #1
 800cf5a:	e79b      	b.n	800ce94 <__multiply+0x84>
 800cf5c:	08010cfc 	.word	0x08010cfc
 800cf60:	08010d0d 	.word	0x08010d0d

0800cf64 <__pow5mult>:
 800cf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf68:	4615      	mov	r5, r2
 800cf6a:	f012 0203 	ands.w	r2, r2, #3
 800cf6e:	4607      	mov	r7, r0
 800cf70:	460e      	mov	r6, r1
 800cf72:	d007      	beq.n	800cf84 <__pow5mult+0x20>
 800cf74:	4c25      	ldr	r4, [pc, #148]	@ (800d00c <__pow5mult+0xa8>)
 800cf76:	3a01      	subs	r2, #1
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf7e:	f7ff fe55 	bl	800cc2c <__multadd>
 800cf82:	4606      	mov	r6, r0
 800cf84:	10ad      	asrs	r5, r5, #2
 800cf86:	d03d      	beq.n	800d004 <__pow5mult+0xa0>
 800cf88:	69fc      	ldr	r4, [r7, #28]
 800cf8a:	b97c      	cbnz	r4, 800cfac <__pow5mult+0x48>
 800cf8c:	2010      	movs	r0, #16
 800cf8e:	f7ff fd35 	bl	800c9fc <malloc>
 800cf92:	4602      	mov	r2, r0
 800cf94:	61f8      	str	r0, [r7, #28]
 800cf96:	b928      	cbnz	r0, 800cfa4 <__pow5mult+0x40>
 800cf98:	4b1d      	ldr	r3, [pc, #116]	@ (800d010 <__pow5mult+0xac>)
 800cf9a:	481e      	ldr	r0, [pc, #120]	@ (800d014 <__pow5mult+0xb0>)
 800cf9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfa0:	f7fe fe76 	bl	800bc90 <__assert_func>
 800cfa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfa8:	6004      	str	r4, [r0, #0]
 800cfaa:	60c4      	str	r4, [r0, #12]
 800cfac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cfb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfb4:	b94c      	cbnz	r4, 800cfca <__pow5mult+0x66>
 800cfb6:	f240 2171 	movw	r1, #625	@ 0x271
 800cfba:	4638      	mov	r0, r7
 800cfbc:	f7ff ff12 	bl	800cde4 <__i2b>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	6003      	str	r3, [r0, #0]
 800cfca:	f04f 0900 	mov.w	r9, #0
 800cfce:	07eb      	lsls	r3, r5, #31
 800cfd0:	d50a      	bpl.n	800cfe8 <__pow5mult+0x84>
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	f7ff ff1a 	bl	800ce10 <__multiply>
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4680      	mov	r8, r0
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f7ff fe01 	bl	800cbe8 <_Bfree>
 800cfe6:	4646      	mov	r6, r8
 800cfe8:	106d      	asrs	r5, r5, #1
 800cfea:	d00b      	beq.n	800d004 <__pow5mult+0xa0>
 800cfec:	6820      	ldr	r0, [r4, #0]
 800cfee:	b938      	cbnz	r0, 800d000 <__pow5mult+0x9c>
 800cff0:	4622      	mov	r2, r4
 800cff2:	4621      	mov	r1, r4
 800cff4:	4638      	mov	r0, r7
 800cff6:	f7ff ff0b 	bl	800ce10 <__multiply>
 800cffa:	6020      	str	r0, [r4, #0]
 800cffc:	f8c0 9000 	str.w	r9, [r0]
 800d000:	4604      	mov	r4, r0
 800d002:	e7e4      	b.n	800cfce <__pow5mult+0x6a>
 800d004:	4630      	mov	r0, r6
 800d006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d00a:	bf00      	nop
 800d00c:	08010d68 	.word	0x08010d68
 800d010:	08010bea 	.word	0x08010bea
 800d014:	08010d0d 	.word	0x08010d0d

0800d018 <__lshift>:
 800d018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d01c:	460c      	mov	r4, r1
 800d01e:	6849      	ldr	r1, [r1, #4]
 800d020:	6923      	ldr	r3, [r4, #16]
 800d022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d026:	68a3      	ldr	r3, [r4, #8]
 800d028:	4607      	mov	r7, r0
 800d02a:	4691      	mov	r9, r2
 800d02c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d030:	f108 0601 	add.w	r6, r8, #1
 800d034:	42b3      	cmp	r3, r6
 800d036:	db0b      	blt.n	800d050 <__lshift+0x38>
 800d038:	4638      	mov	r0, r7
 800d03a:	f7ff fd95 	bl	800cb68 <_Balloc>
 800d03e:	4605      	mov	r5, r0
 800d040:	b948      	cbnz	r0, 800d056 <__lshift+0x3e>
 800d042:	4602      	mov	r2, r0
 800d044:	4b28      	ldr	r3, [pc, #160]	@ (800d0e8 <__lshift+0xd0>)
 800d046:	4829      	ldr	r0, [pc, #164]	@ (800d0ec <__lshift+0xd4>)
 800d048:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d04c:	f7fe fe20 	bl	800bc90 <__assert_func>
 800d050:	3101      	adds	r1, #1
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	e7ee      	b.n	800d034 <__lshift+0x1c>
 800d056:	2300      	movs	r3, #0
 800d058:	f100 0114 	add.w	r1, r0, #20
 800d05c:	f100 0210 	add.w	r2, r0, #16
 800d060:	4618      	mov	r0, r3
 800d062:	4553      	cmp	r3, sl
 800d064:	db33      	blt.n	800d0ce <__lshift+0xb6>
 800d066:	6920      	ldr	r0, [r4, #16]
 800d068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d06c:	f104 0314 	add.w	r3, r4, #20
 800d070:	f019 091f 	ands.w	r9, r9, #31
 800d074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d078:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d07c:	d02b      	beq.n	800d0d6 <__lshift+0xbe>
 800d07e:	f1c9 0e20 	rsb	lr, r9, #32
 800d082:	468a      	mov	sl, r1
 800d084:	2200      	movs	r2, #0
 800d086:	6818      	ldr	r0, [r3, #0]
 800d088:	fa00 f009 	lsl.w	r0, r0, r9
 800d08c:	4310      	orrs	r0, r2
 800d08e:	f84a 0b04 	str.w	r0, [sl], #4
 800d092:	f853 2b04 	ldr.w	r2, [r3], #4
 800d096:	459c      	cmp	ip, r3
 800d098:	fa22 f20e 	lsr.w	r2, r2, lr
 800d09c:	d8f3      	bhi.n	800d086 <__lshift+0x6e>
 800d09e:	ebac 0304 	sub.w	r3, ip, r4
 800d0a2:	3b15      	subs	r3, #21
 800d0a4:	f023 0303 	bic.w	r3, r3, #3
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	f104 0015 	add.w	r0, r4, #21
 800d0ae:	4584      	cmp	ip, r0
 800d0b0:	bf38      	it	cc
 800d0b2:	2304      	movcc	r3, #4
 800d0b4:	50ca      	str	r2, [r1, r3]
 800d0b6:	b10a      	cbz	r2, 800d0bc <__lshift+0xa4>
 800d0b8:	f108 0602 	add.w	r6, r8, #2
 800d0bc:	3e01      	subs	r6, #1
 800d0be:	4638      	mov	r0, r7
 800d0c0:	612e      	str	r6, [r5, #16]
 800d0c2:	4621      	mov	r1, r4
 800d0c4:	f7ff fd90 	bl	800cbe8 <_Bfree>
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	e7c5      	b.n	800d062 <__lshift+0x4a>
 800d0d6:	3904      	subs	r1, #4
 800d0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0e0:	459c      	cmp	ip, r3
 800d0e2:	d8f9      	bhi.n	800d0d8 <__lshift+0xc0>
 800d0e4:	e7ea      	b.n	800d0bc <__lshift+0xa4>
 800d0e6:	bf00      	nop
 800d0e8:	08010cfc 	.word	0x08010cfc
 800d0ec:	08010d0d 	.word	0x08010d0d

0800d0f0 <__mcmp>:
 800d0f0:	690a      	ldr	r2, [r1, #16]
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	6900      	ldr	r0, [r0, #16]
 800d0f6:	1a80      	subs	r0, r0, r2
 800d0f8:	b530      	push	{r4, r5, lr}
 800d0fa:	d10e      	bne.n	800d11a <__mcmp+0x2a>
 800d0fc:	3314      	adds	r3, #20
 800d0fe:	3114      	adds	r1, #20
 800d100:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d104:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d108:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d10c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d110:	4295      	cmp	r5, r2
 800d112:	d003      	beq.n	800d11c <__mcmp+0x2c>
 800d114:	d205      	bcs.n	800d122 <__mcmp+0x32>
 800d116:	f04f 30ff 	mov.w	r0, #4294967295
 800d11a:	bd30      	pop	{r4, r5, pc}
 800d11c:	42a3      	cmp	r3, r4
 800d11e:	d3f3      	bcc.n	800d108 <__mcmp+0x18>
 800d120:	e7fb      	b.n	800d11a <__mcmp+0x2a>
 800d122:	2001      	movs	r0, #1
 800d124:	e7f9      	b.n	800d11a <__mcmp+0x2a>
	...

0800d128 <__mdiff>:
 800d128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12c:	4689      	mov	r9, r1
 800d12e:	4606      	mov	r6, r0
 800d130:	4611      	mov	r1, r2
 800d132:	4648      	mov	r0, r9
 800d134:	4614      	mov	r4, r2
 800d136:	f7ff ffdb 	bl	800d0f0 <__mcmp>
 800d13a:	1e05      	subs	r5, r0, #0
 800d13c:	d112      	bne.n	800d164 <__mdiff+0x3c>
 800d13e:	4629      	mov	r1, r5
 800d140:	4630      	mov	r0, r6
 800d142:	f7ff fd11 	bl	800cb68 <_Balloc>
 800d146:	4602      	mov	r2, r0
 800d148:	b928      	cbnz	r0, 800d156 <__mdiff+0x2e>
 800d14a:	4b3f      	ldr	r3, [pc, #252]	@ (800d248 <__mdiff+0x120>)
 800d14c:	f240 2137 	movw	r1, #567	@ 0x237
 800d150:	483e      	ldr	r0, [pc, #248]	@ (800d24c <__mdiff+0x124>)
 800d152:	f7fe fd9d 	bl	800bc90 <__assert_func>
 800d156:	2301      	movs	r3, #1
 800d158:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d15c:	4610      	mov	r0, r2
 800d15e:	b003      	add	sp, #12
 800d160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d164:	bfbc      	itt	lt
 800d166:	464b      	movlt	r3, r9
 800d168:	46a1      	movlt	r9, r4
 800d16a:	4630      	mov	r0, r6
 800d16c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d170:	bfba      	itte	lt
 800d172:	461c      	movlt	r4, r3
 800d174:	2501      	movlt	r5, #1
 800d176:	2500      	movge	r5, #0
 800d178:	f7ff fcf6 	bl	800cb68 <_Balloc>
 800d17c:	4602      	mov	r2, r0
 800d17e:	b918      	cbnz	r0, 800d188 <__mdiff+0x60>
 800d180:	4b31      	ldr	r3, [pc, #196]	@ (800d248 <__mdiff+0x120>)
 800d182:	f240 2145 	movw	r1, #581	@ 0x245
 800d186:	e7e3      	b.n	800d150 <__mdiff+0x28>
 800d188:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d18c:	6926      	ldr	r6, [r4, #16]
 800d18e:	60c5      	str	r5, [r0, #12]
 800d190:	f109 0310 	add.w	r3, r9, #16
 800d194:	f109 0514 	add.w	r5, r9, #20
 800d198:	f104 0e14 	add.w	lr, r4, #20
 800d19c:	f100 0b14 	add.w	fp, r0, #20
 800d1a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	46d9      	mov	r9, fp
 800d1ac:	f04f 0c00 	mov.w	ip, #0
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1ba:	9301      	str	r3, [sp, #4]
 800d1bc:	fa1f f38a 	uxth.w	r3, sl
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	b283      	uxth	r3, r0
 800d1c4:	1acb      	subs	r3, r1, r3
 800d1c6:	0c00      	lsrs	r0, r0, #16
 800d1c8:	4463      	add	r3, ip
 800d1ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1d8:	4576      	cmp	r6, lr
 800d1da:	f849 3b04 	str.w	r3, [r9], #4
 800d1de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1e2:	d8e5      	bhi.n	800d1b0 <__mdiff+0x88>
 800d1e4:	1b33      	subs	r3, r6, r4
 800d1e6:	3b15      	subs	r3, #21
 800d1e8:	f023 0303 	bic.w	r3, r3, #3
 800d1ec:	3415      	adds	r4, #21
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	42a6      	cmp	r6, r4
 800d1f2:	bf38      	it	cc
 800d1f4:	2304      	movcc	r3, #4
 800d1f6:	441d      	add	r5, r3
 800d1f8:	445b      	add	r3, fp
 800d1fa:	461e      	mov	r6, r3
 800d1fc:	462c      	mov	r4, r5
 800d1fe:	4544      	cmp	r4, r8
 800d200:	d30e      	bcc.n	800d220 <__mdiff+0xf8>
 800d202:	f108 0103 	add.w	r1, r8, #3
 800d206:	1b49      	subs	r1, r1, r5
 800d208:	f021 0103 	bic.w	r1, r1, #3
 800d20c:	3d03      	subs	r5, #3
 800d20e:	45a8      	cmp	r8, r5
 800d210:	bf38      	it	cc
 800d212:	2100      	movcc	r1, #0
 800d214:	440b      	add	r3, r1
 800d216:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d21a:	b191      	cbz	r1, 800d242 <__mdiff+0x11a>
 800d21c:	6117      	str	r7, [r2, #16]
 800d21e:	e79d      	b.n	800d15c <__mdiff+0x34>
 800d220:	f854 1b04 	ldr.w	r1, [r4], #4
 800d224:	46e6      	mov	lr, ip
 800d226:	0c08      	lsrs	r0, r1, #16
 800d228:	fa1c fc81 	uxtah	ip, ip, r1
 800d22c:	4471      	add	r1, lr
 800d22e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d232:	b289      	uxth	r1, r1
 800d234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d238:	f846 1b04 	str.w	r1, [r6], #4
 800d23c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d240:	e7dd      	b.n	800d1fe <__mdiff+0xd6>
 800d242:	3f01      	subs	r7, #1
 800d244:	e7e7      	b.n	800d216 <__mdiff+0xee>
 800d246:	bf00      	nop
 800d248:	08010cfc 	.word	0x08010cfc
 800d24c:	08010d0d 	.word	0x08010d0d

0800d250 <__ulp>:
 800d250:	b082      	sub	sp, #8
 800d252:	ed8d 0b00 	vstr	d0, [sp]
 800d256:	9a01      	ldr	r2, [sp, #4]
 800d258:	4b0f      	ldr	r3, [pc, #60]	@ (800d298 <__ulp+0x48>)
 800d25a:	4013      	ands	r3, r2
 800d25c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d260:	2b00      	cmp	r3, #0
 800d262:	dc08      	bgt.n	800d276 <__ulp+0x26>
 800d264:	425b      	negs	r3, r3
 800d266:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d26a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d26e:	da04      	bge.n	800d27a <__ulp+0x2a>
 800d270:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d274:	4113      	asrs	r3, r2
 800d276:	2200      	movs	r2, #0
 800d278:	e008      	b.n	800d28c <__ulp+0x3c>
 800d27a:	f1a2 0314 	sub.w	r3, r2, #20
 800d27e:	2b1e      	cmp	r3, #30
 800d280:	bfda      	itte	le
 800d282:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d286:	40da      	lsrle	r2, r3
 800d288:	2201      	movgt	r2, #1
 800d28a:	2300      	movs	r3, #0
 800d28c:	4619      	mov	r1, r3
 800d28e:	4610      	mov	r0, r2
 800d290:	ec41 0b10 	vmov	d0, r0, r1
 800d294:	b002      	add	sp, #8
 800d296:	4770      	bx	lr
 800d298:	7ff00000 	.word	0x7ff00000

0800d29c <__b2d>:
 800d29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a0:	6906      	ldr	r6, [r0, #16]
 800d2a2:	f100 0814 	add.w	r8, r0, #20
 800d2a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d2aa:	1f37      	subs	r7, r6, #4
 800d2ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f7ff fd4b 	bl	800cd4c <__hi0bits>
 800d2b6:	f1c0 0320 	rsb	r3, r0, #32
 800d2ba:	280a      	cmp	r0, #10
 800d2bc:	600b      	str	r3, [r1, #0]
 800d2be:	491b      	ldr	r1, [pc, #108]	@ (800d32c <__b2d+0x90>)
 800d2c0:	dc15      	bgt.n	800d2ee <__b2d+0x52>
 800d2c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d2c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d2ca:	45b8      	cmp	r8, r7
 800d2cc:	ea43 0501 	orr.w	r5, r3, r1
 800d2d0:	bf34      	ite	cc
 800d2d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2d6:	2300      	movcs	r3, #0
 800d2d8:	3015      	adds	r0, #21
 800d2da:	fa02 f000 	lsl.w	r0, r2, r0
 800d2de:	fa23 f30c 	lsr.w	r3, r3, ip
 800d2e2:	4303      	orrs	r3, r0
 800d2e4:	461c      	mov	r4, r3
 800d2e6:	ec45 4b10 	vmov	d0, r4, r5
 800d2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ee:	45b8      	cmp	r8, r7
 800d2f0:	bf3a      	itte	cc
 800d2f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d2f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800d2fa:	2300      	movcs	r3, #0
 800d2fc:	380b      	subs	r0, #11
 800d2fe:	d012      	beq.n	800d326 <__b2d+0x8a>
 800d300:	f1c0 0120 	rsb	r1, r0, #32
 800d304:	fa23 f401 	lsr.w	r4, r3, r1
 800d308:	4082      	lsls	r2, r0
 800d30a:	4322      	orrs	r2, r4
 800d30c:	4547      	cmp	r7, r8
 800d30e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d312:	bf8c      	ite	hi
 800d314:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d318:	2200      	movls	r2, #0
 800d31a:	4083      	lsls	r3, r0
 800d31c:	40ca      	lsrs	r2, r1
 800d31e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d322:	4313      	orrs	r3, r2
 800d324:	e7de      	b.n	800d2e4 <__b2d+0x48>
 800d326:	ea42 0501 	orr.w	r5, r2, r1
 800d32a:	e7db      	b.n	800d2e4 <__b2d+0x48>
 800d32c:	3ff00000 	.word	0x3ff00000

0800d330 <__d2b>:
 800d330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d334:	460f      	mov	r7, r1
 800d336:	2101      	movs	r1, #1
 800d338:	ec59 8b10 	vmov	r8, r9, d0
 800d33c:	4616      	mov	r6, r2
 800d33e:	f7ff fc13 	bl	800cb68 <_Balloc>
 800d342:	4604      	mov	r4, r0
 800d344:	b930      	cbnz	r0, 800d354 <__d2b+0x24>
 800d346:	4602      	mov	r2, r0
 800d348:	4b23      	ldr	r3, [pc, #140]	@ (800d3d8 <__d2b+0xa8>)
 800d34a:	4824      	ldr	r0, [pc, #144]	@ (800d3dc <__d2b+0xac>)
 800d34c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d350:	f7fe fc9e 	bl	800bc90 <__assert_func>
 800d354:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d35c:	b10d      	cbz	r5, 800d362 <__d2b+0x32>
 800d35e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d362:	9301      	str	r3, [sp, #4]
 800d364:	f1b8 0300 	subs.w	r3, r8, #0
 800d368:	d023      	beq.n	800d3b2 <__d2b+0x82>
 800d36a:	4668      	mov	r0, sp
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	f7ff fd0c 	bl	800cd8a <__lo0bits>
 800d372:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d376:	b1d0      	cbz	r0, 800d3ae <__d2b+0x7e>
 800d378:	f1c0 0320 	rsb	r3, r0, #32
 800d37c:	fa02 f303 	lsl.w	r3, r2, r3
 800d380:	430b      	orrs	r3, r1
 800d382:	40c2      	lsrs	r2, r0
 800d384:	6163      	str	r3, [r4, #20]
 800d386:	9201      	str	r2, [sp, #4]
 800d388:	9b01      	ldr	r3, [sp, #4]
 800d38a:	61a3      	str	r3, [r4, #24]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	bf0c      	ite	eq
 800d390:	2201      	moveq	r2, #1
 800d392:	2202      	movne	r2, #2
 800d394:	6122      	str	r2, [r4, #16]
 800d396:	b1a5      	cbz	r5, 800d3c2 <__d2b+0x92>
 800d398:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d39c:	4405      	add	r5, r0
 800d39e:	603d      	str	r5, [r7, #0]
 800d3a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d3a4:	6030      	str	r0, [r6, #0]
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	b003      	add	sp, #12
 800d3aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ae:	6161      	str	r1, [r4, #20]
 800d3b0:	e7ea      	b.n	800d388 <__d2b+0x58>
 800d3b2:	a801      	add	r0, sp, #4
 800d3b4:	f7ff fce9 	bl	800cd8a <__lo0bits>
 800d3b8:	9b01      	ldr	r3, [sp, #4]
 800d3ba:	6163      	str	r3, [r4, #20]
 800d3bc:	3020      	adds	r0, #32
 800d3be:	2201      	movs	r2, #1
 800d3c0:	e7e8      	b.n	800d394 <__d2b+0x64>
 800d3c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d3ca:	6038      	str	r0, [r7, #0]
 800d3cc:	6918      	ldr	r0, [r3, #16]
 800d3ce:	f7ff fcbd 	bl	800cd4c <__hi0bits>
 800d3d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3d6:	e7e5      	b.n	800d3a4 <__d2b+0x74>
 800d3d8:	08010cfc 	.word	0x08010cfc
 800d3dc:	08010d0d 	.word	0x08010d0d

0800d3e0 <__ratio>:
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	b085      	sub	sp, #20
 800d3e6:	e9cd 1000 	strd	r1, r0, [sp]
 800d3ea:	a902      	add	r1, sp, #8
 800d3ec:	f7ff ff56 	bl	800d29c <__b2d>
 800d3f0:	9800      	ldr	r0, [sp, #0]
 800d3f2:	a903      	add	r1, sp, #12
 800d3f4:	ec55 4b10 	vmov	r4, r5, d0
 800d3f8:	f7ff ff50 	bl	800d29c <__b2d>
 800d3fc:	9b01      	ldr	r3, [sp, #4]
 800d3fe:	6919      	ldr	r1, [r3, #16]
 800d400:	9b00      	ldr	r3, [sp, #0]
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	1ac9      	subs	r1, r1, r3
 800d406:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d40a:	1a9b      	subs	r3, r3, r2
 800d40c:	ec5b ab10 	vmov	sl, fp, d0
 800d410:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d414:	2b00      	cmp	r3, #0
 800d416:	bfce      	itee	gt
 800d418:	462a      	movgt	r2, r5
 800d41a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d41e:	465a      	movle	r2, fp
 800d420:	462f      	mov	r7, r5
 800d422:	46d9      	mov	r9, fp
 800d424:	bfcc      	ite	gt
 800d426:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d42a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d42e:	464b      	mov	r3, r9
 800d430:	4652      	mov	r2, sl
 800d432:	4620      	mov	r0, r4
 800d434:	4639      	mov	r1, r7
 800d436:	f7f3 fa29 	bl	800088c <__aeabi_ddiv>
 800d43a:	ec41 0b10 	vmov	d0, r0, r1
 800d43e:	b005      	add	sp, #20
 800d440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d444 <__copybits>:
 800d444:	3901      	subs	r1, #1
 800d446:	b570      	push	{r4, r5, r6, lr}
 800d448:	1149      	asrs	r1, r1, #5
 800d44a:	6914      	ldr	r4, [r2, #16]
 800d44c:	3101      	adds	r1, #1
 800d44e:	f102 0314 	add.w	r3, r2, #20
 800d452:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d456:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d45a:	1f05      	subs	r5, r0, #4
 800d45c:	42a3      	cmp	r3, r4
 800d45e:	d30c      	bcc.n	800d47a <__copybits+0x36>
 800d460:	1aa3      	subs	r3, r4, r2
 800d462:	3b11      	subs	r3, #17
 800d464:	f023 0303 	bic.w	r3, r3, #3
 800d468:	3211      	adds	r2, #17
 800d46a:	42a2      	cmp	r2, r4
 800d46c:	bf88      	it	hi
 800d46e:	2300      	movhi	r3, #0
 800d470:	4418      	add	r0, r3
 800d472:	2300      	movs	r3, #0
 800d474:	4288      	cmp	r0, r1
 800d476:	d305      	bcc.n	800d484 <__copybits+0x40>
 800d478:	bd70      	pop	{r4, r5, r6, pc}
 800d47a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d47e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d482:	e7eb      	b.n	800d45c <__copybits+0x18>
 800d484:	f840 3b04 	str.w	r3, [r0], #4
 800d488:	e7f4      	b.n	800d474 <__copybits+0x30>

0800d48a <__any_on>:
 800d48a:	f100 0214 	add.w	r2, r0, #20
 800d48e:	6900      	ldr	r0, [r0, #16]
 800d490:	114b      	asrs	r3, r1, #5
 800d492:	4298      	cmp	r0, r3
 800d494:	b510      	push	{r4, lr}
 800d496:	db11      	blt.n	800d4bc <__any_on+0x32>
 800d498:	dd0a      	ble.n	800d4b0 <__any_on+0x26>
 800d49a:	f011 011f 	ands.w	r1, r1, #31
 800d49e:	d007      	beq.n	800d4b0 <__any_on+0x26>
 800d4a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d4a4:	fa24 f001 	lsr.w	r0, r4, r1
 800d4a8:	fa00 f101 	lsl.w	r1, r0, r1
 800d4ac:	428c      	cmp	r4, r1
 800d4ae:	d10b      	bne.n	800d4c8 <__any_on+0x3e>
 800d4b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d803      	bhi.n	800d4c0 <__any_on+0x36>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	bd10      	pop	{r4, pc}
 800d4bc:	4603      	mov	r3, r0
 800d4be:	e7f7      	b.n	800d4b0 <__any_on+0x26>
 800d4c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4c4:	2900      	cmp	r1, #0
 800d4c6:	d0f5      	beq.n	800d4b4 <__any_on+0x2a>
 800d4c8:	2001      	movs	r0, #1
 800d4ca:	e7f6      	b.n	800d4ba <__any_on+0x30>

0800d4cc <sulp>:
 800d4cc:	b570      	push	{r4, r5, r6, lr}
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	460d      	mov	r5, r1
 800d4d2:	ec45 4b10 	vmov	d0, r4, r5
 800d4d6:	4616      	mov	r6, r2
 800d4d8:	f7ff feba 	bl	800d250 <__ulp>
 800d4dc:	ec51 0b10 	vmov	r0, r1, d0
 800d4e0:	b17e      	cbz	r6, 800d502 <sulp+0x36>
 800d4e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d4e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	dd09      	ble.n	800d502 <sulp+0x36>
 800d4ee:	051b      	lsls	r3, r3, #20
 800d4f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d4f4:	2400      	movs	r4, #0
 800d4f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d4fa:	4622      	mov	r2, r4
 800d4fc:	462b      	mov	r3, r5
 800d4fe:	f7f3 f89b 	bl	8000638 <__aeabi_dmul>
 800d502:	ec41 0b10 	vmov	d0, r0, r1
 800d506:	bd70      	pop	{r4, r5, r6, pc}

0800d508 <_strtod_l>:
 800d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50c:	b09f      	sub	sp, #124	@ 0x7c
 800d50e:	460c      	mov	r4, r1
 800d510:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d512:	2200      	movs	r2, #0
 800d514:	921a      	str	r2, [sp, #104]	@ 0x68
 800d516:	9005      	str	r0, [sp, #20]
 800d518:	f04f 0a00 	mov.w	sl, #0
 800d51c:	f04f 0b00 	mov.w	fp, #0
 800d520:	460a      	mov	r2, r1
 800d522:	9219      	str	r2, [sp, #100]	@ 0x64
 800d524:	7811      	ldrb	r1, [r2, #0]
 800d526:	292b      	cmp	r1, #43	@ 0x2b
 800d528:	d04a      	beq.n	800d5c0 <_strtod_l+0xb8>
 800d52a:	d838      	bhi.n	800d59e <_strtod_l+0x96>
 800d52c:	290d      	cmp	r1, #13
 800d52e:	d832      	bhi.n	800d596 <_strtod_l+0x8e>
 800d530:	2908      	cmp	r1, #8
 800d532:	d832      	bhi.n	800d59a <_strtod_l+0x92>
 800d534:	2900      	cmp	r1, #0
 800d536:	d03b      	beq.n	800d5b0 <_strtod_l+0xa8>
 800d538:	2200      	movs	r2, #0
 800d53a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d53c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d53e:	782a      	ldrb	r2, [r5, #0]
 800d540:	2a30      	cmp	r2, #48	@ 0x30
 800d542:	f040 80b3 	bne.w	800d6ac <_strtod_l+0x1a4>
 800d546:	786a      	ldrb	r2, [r5, #1]
 800d548:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d54c:	2a58      	cmp	r2, #88	@ 0x58
 800d54e:	d16e      	bne.n	800d62e <_strtod_l+0x126>
 800d550:	9302      	str	r3, [sp, #8]
 800d552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	ab1a      	add	r3, sp, #104	@ 0x68
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	4a8e      	ldr	r2, [pc, #568]	@ (800d794 <_strtod_l+0x28c>)
 800d55c:	9805      	ldr	r0, [sp, #20]
 800d55e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d560:	a919      	add	r1, sp, #100	@ 0x64
 800d562:	f001 faff 	bl	800eb64 <__gethex>
 800d566:	f010 060f 	ands.w	r6, r0, #15
 800d56a:	4604      	mov	r4, r0
 800d56c:	d005      	beq.n	800d57a <_strtod_l+0x72>
 800d56e:	2e06      	cmp	r6, #6
 800d570:	d128      	bne.n	800d5c4 <_strtod_l+0xbc>
 800d572:	3501      	adds	r5, #1
 800d574:	2300      	movs	r3, #0
 800d576:	9519      	str	r5, [sp, #100]	@ 0x64
 800d578:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d57a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f040 858e 	bne.w	800e09e <_strtod_l+0xb96>
 800d582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d584:	b1cb      	cbz	r3, 800d5ba <_strtod_l+0xb2>
 800d586:	4652      	mov	r2, sl
 800d588:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d58c:	ec43 2b10 	vmov	d0, r2, r3
 800d590:	b01f      	add	sp, #124	@ 0x7c
 800d592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d596:	2920      	cmp	r1, #32
 800d598:	d1ce      	bne.n	800d538 <_strtod_l+0x30>
 800d59a:	3201      	adds	r2, #1
 800d59c:	e7c1      	b.n	800d522 <_strtod_l+0x1a>
 800d59e:	292d      	cmp	r1, #45	@ 0x2d
 800d5a0:	d1ca      	bne.n	800d538 <_strtod_l+0x30>
 800d5a2:	2101      	movs	r1, #1
 800d5a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d5a6:	1c51      	adds	r1, r2, #1
 800d5a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d5aa:	7852      	ldrb	r2, [r2, #1]
 800d5ac:	2a00      	cmp	r2, #0
 800d5ae:	d1c5      	bne.n	800d53c <_strtod_l+0x34>
 800d5b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f040 8570 	bne.w	800e09a <_strtod_l+0xb92>
 800d5ba:	4652      	mov	r2, sl
 800d5bc:	465b      	mov	r3, fp
 800d5be:	e7e5      	b.n	800d58c <_strtod_l+0x84>
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	e7ef      	b.n	800d5a4 <_strtod_l+0x9c>
 800d5c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d5c6:	b13a      	cbz	r2, 800d5d8 <_strtod_l+0xd0>
 800d5c8:	2135      	movs	r1, #53	@ 0x35
 800d5ca:	a81c      	add	r0, sp, #112	@ 0x70
 800d5cc:	f7ff ff3a 	bl	800d444 <__copybits>
 800d5d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5d2:	9805      	ldr	r0, [sp, #20]
 800d5d4:	f7ff fb08 	bl	800cbe8 <_Bfree>
 800d5d8:	3e01      	subs	r6, #1
 800d5da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d5dc:	2e04      	cmp	r6, #4
 800d5de:	d806      	bhi.n	800d5ee <_strtod_l+0xe6>
 800d5e0:	e8df f006 	tbb	[pc, r6]
 800d5e4:	201d0314 	.word	0x201d0314
 800d5e8:	14          	.byte	0x14
 800d5e9:	00          	.byte	0x00
 800d5ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d5ee:	05e1      	lsls	r1, r4, #23
 800d5f0:	bf48      	it	mi
 800d5f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d5f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d5fa:	0d1b      	lsrs	r3, r3, #20
 800d5fc:	051b      	lsls	r3, r3, #20
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1bb      	bne.n	800d57a <_strtod_l+0x72>
 800d602:	f7fe fb11 	bl	800bc28 <__errno>
 800d606:	2322      	movs	r3, #34	@ 0x22
 800d608:	6003      	str	r3, [r0, #0]
 800d60a:	e7b6      	b.n	800d57a <_strtod_l+0x72>
 800d60c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d610:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d614:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d618:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d61c:	e7e7      	b.n	800d5ee <_strtod_l+0xe6>
 800d61e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d79c <_strtod_l+0x294>
 800d622:	e7e4      	b.n	800d5ee <_strtod_l+0xe6>
 800d624:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d628:	f04f 3aff 	mov.w	sl, #4294967295
 800d62c:	e7df      	b.n	800d5ee <_strtod_l+0xe6>
 800d62e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d630:	1c5a      	adds	r2, r3, #1
 800d632:	9219      	str	r2, [sp, #100]	@ 0x64
 800d634:	785b      	ldrb	r3, [r3, #1]
 800d636:	2b30      	cmp	r3, #48	@ 0x30
 800d638:	d0f9      	beq.n	800d62e <_strtod_l+0x126>
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d09d      	beq.n	800d57a <_strtod_l+0x72>
 800d63e:	2301      	movs	r3, #1
 800d640:	9309      	str	r3, [sp, #36]	@ 0x24
 800d642:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d644:	930c      	str	r3, [sp, #48]	@ 0x30
 800d646:	2300      	movs	r3, #0
 800d648:	9308      	str	r3, [sp, #32]
 800d64a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d64c:	461f      	mov	r7, r3
 800d64e:	220a      	movs	r2, #10
 800d650:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d652:	7805      	ldrb	r5, [r0, #0]
 800d654:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d658:	b2d9      	uxtb	r1, r3
 800d65a:	2909      	cmp	r1, #9
 800d65c:	d928      	bls.n	800d6b0 <_strtod_l+0x1a8>
 800d65e:	494e      	ldr	r1, [pc, #312]	@ (800d798 <_strtod_l+0x290>)
 800d660:	2201      	movs	r2, #1
 800d662:	f001 f9a3 	bl	800e9ac <strncmp>
 800d666:	2800      	cmp	r0, #0
 800d668:	d032      	beq.n	800d6d0 <_strtod_l+0x1c8>
 800d66a:	2000      	movs	r0, #0
 800d66c:	462a      	mov	r2, r5
 800d66e:	4681      	mov	r9, r0
 800d670:	463d      	mov	r5, r7
 800d672:	4603      	mov	r3, r0
 800d674:	2a65      	cmp	r2, #101	@ 0x65
 800d676:	d001      	beq.n	800d67c <_strtod_l+0x174>
 800d678:	2a45      	cmp	r2, #69	@ 0x45
 800d67a:	d114      	bne.n	800d6a6 <_strtod_l+0x19e>
 800d67c:	b91d      	cbnz	r5, 800d686 <_strtod_l+0x17e>
 800d67e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d680:	4302      	orrs	r2, r0
 800d682:	d095      	beq.n	800d5b0 <_strtod_l+0xa8>
 800d684:	2500      	movs	r5, #0
 800d686:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d688:	1c62      	adds	r2, r4, #1
 800d68a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d68c:	7862      	ldrb	r2, [r4, #1]
 800d68e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d690:	d077      	beq.n	800d782 <_strtod_l+0x27a>
 800d692:	2a2d      	cmp	r2, #45	@ 0x2d
 800d694:	d07b      	beq.n	800d78e <_strtod_l+0x286>
 800d696:	f04f 0c00 	mov.w	ip, #0
 800d69a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d69e:	2909      	cmp	r1, #9
 800d6a0:	f240 8082 	bls.w	800d7a8 <_strtod_l+0x2a0>
 800d6a4:	9419      	str	r4, [sp, #100]	@ 0x64
 800d6a6:	f04f 0800 	mov.w	r8, #0
 800d6aa:	e0a2      	b.n	800d7f2 <_strtod_l+0x2ea>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	e7c7      	b.n	800d640 <_strtod_l+0x138>
 800d6b0:	2f08      	cmp	r7, #8
 800d6b2:	bfd5      	itete	le
 800d6b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d6b6:	9908      	ldrgt	r1, [sp, #32]
 800d6b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800d6bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d6c0:	f100 0001 	add.w	r0, r0, #1
 800d6c4:	bfd4      	ite	le
 800d6c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d6c8:	9308      	strgt	r3, [sp, #32]
 800d6ca:	3701      	adds	r7, #1
 800d6cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800d6ce:	e7bf      	b.n	800d650 <_strtod_l+0x148>
 800d6d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6d2:	1c5a      	adds	r2, r3, #1
 800d6d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6d6:	785a      	ldrb	r2, [r3, #1]
 800d6d8:	b37f      	cbz	r7, 800d73a <_strtod_l+0x232>
 800d6da:	4681      	mov	r9, r0
 800d6dc:	463d      	mov	r5, r7
 800d6de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d6e2:	2b09      	cmp	r3, #9
 800d6e4:	d912      	bls.n	800d70c <_strtod_l+0x204>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e7c4      	b.n	800d674 <_strtod_l+0x16c>
 800d6ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6ec:	1c5a      	adds	r2, r3, #1
 800d6ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6f0:	785a      	ldrb	r2, [r3, #1]
 800d6f2:	3001      	adds	r0, #1
 800d6f4:	2a30      	cmp	r2, #48	@ 0x30
 800d6f6:	d0f8      	beq.n	800d6ea <_strtod_l+0x1e2>
 800d6f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d6fc:	2b08      	cmp	r3, #8
 800d6fe:	f200 84d3 	bhi.w	800e0a8 <_strtod_l+0xba0>
 800d702:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d704:	930c      	str	r3, [sp, #48]	@ 0x30
 800d706:	4681      	mov	r9, r0
 800d708:	2000      	movs	r0, #0
 800d70a:	4605      	mov	r5, r0
 800d70c:	3a30      	subs	r2, #48	@ 0x30
 800d70e:	f100 0301 	add.w	r3, r0, #1
 800d712:	d02a      	beq.n	800d76a <_strtod_l+0x262>
 800d714:	4499      	add	r9, r3
 800d716:	eb00 0c05 	add.w	ip, r0, r5
 800d71a:	462b      	mov	r3, r5
 800d71c:	210a      	movs	r1, #10
 800d71e:	4563      	cmp	r3, ip
 800d720:	d10d      	bne.n	800d73e <_strtod_l+0x236>
 800d722:	1c69      	adds	r1, r5, #1
 800d724:	4401      	add	r1, r0
 800d726:	4428      	add	r0, r5
 800d728:	2808      	cmp	r0, #8
 800d72a:	dc16      	bgt.n	800d75a <_strtod_l+0x252>
 800d72c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d72e:	230a      	movs	r3, #10
 800d730:	fb03 2300 	mla	r3, r3, r0, r2
 800d734:	930a      	str	r3, [sp, #40]	@ 0x28
 800d736:	2300      	movs	r3, #0
 800d738:	e018      	b.n	800d76c <_strtod_l+0x264>
 800d73a:	4638      	mov	r0, r7
 800d73c:	e7da      	b.n	800d6f4 <_strtod_l+0x1ec>
 800d73e:	2b08      	cmp	r3, #8
 800d740:	f103 0301 	add.w	r3, r3, #1
 800d744:	dc03      	bgt.n	800d74e <_strtod_l+0x246>
 800d746:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d748:	434e      	muls	r6, r1
 800d74a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d74c:	e7e7      	b.n	800d71e <_strtod_l+0x216>
 800d74e:	2b10      	cmp	r3, #16
 800d750:	bfde      	ittt	le
 800d752:	9e08      	ldrle	r6, [sp, #32]
 800d754:	434e      	mulle	r6, r1
 800d756:	9608      	strle	r6, [sp, #32]
 800d758:	e7e1      	b.n	800d71e <_strtod_l+0x216>
 800d75a:	280f      	cmp	r0, #15
 800d75c:	dceb      	bgt.n	800d736 <_strtod_l+0x22e>
 800d75e:	9808      	ldr	r0, [sp, #32]
 800d760:	230a      	movs	r3, #10
 800d762:	fb03 2300 	mla	r3, r3, r0, r2
 800d766:	9308      	str	r3, [sp, #32]
 800d768:	e7e5      	b.n	800d736 <_strtod_l+0x22e>
 800d76a:	4629      	mov	r1, r5
 800d76c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d76e:	1c50      	adds	r0, r2, #1
 800d770:	9019      	str	r0, [sp, #100]	@ 0x64
 800d772:	7852      	ldrb	r2, [r2, #1]
 800d774:	4618      	mov	r0, r3
 800d776:	460d      	mov	r5, r1
 800d778:	e7b1      	b.n	800d6de <_strtod_l+0x1d6>
 800d77a:	f04f 0900 	mov.w	r9, #0
 800d77e:	2301      	movs	r3, #1
 800d780:	e77d      	b.n	800d67e <_strtod_l+0x176>
 800d782:	f04f 0c00 	mov.w	ip, #0
 800d786:	1ca2      	adds	r2, r4, #2
 800d788:	9219      	str	r2, [sp, #100]	@ 0x64
 800d78a:	78a2      	ldrb	r2, [r4, #2]
 800d78c:	e785      	b.n	800d69a <_strtod_l+0x192>
 800d78e:	f04f 0c01 	mov.w	ip, #1
 800d792:	e7f8      	b.n	800d786 <_strtod_l+0x27e>
 800d794:	08010e80 	.word	0x08010e80
 800d798:	08010e68 	.word	0x08010e68
 800d79c:	7ff00000 	.word	0x7ff00000
 800d7a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7a2:	1c51      	adds	r1, r2, #1
 800d7a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d7a6:	7852      	ldrb	r2, [r2, #1]
 800d7a8:	2a30      	cmp	r2, #48	@ 0x30
 800d7aa:	d0f9      	beq.n	800d7a0 <_strtod_l+0x298>
 800d7ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d7b0:	2908      	cmp	r1, #8
 800d7b2:	f63f af78 	bhi.w	800d6a6 <_strtod_l+0x19e>
 800d7b6:	3a30      	subs	r2, #48	@ 0x30
 800d7b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d7ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d7be:	f04f 080a 	mov.w	r8, #10
 800d7c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7c4:	1c56      	adds	r6, r2, #1
 800d7c6:	9619      	str	r6, [sp, #100]	@ 0x64
 800d7c8:	7852      	ldrb	r2, [r2, #1]
 800d7ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d7ce:	f1be 0f09 	cmp.w	lr, #9
 800d7d2:	d939      	bls.n	800d848 <_strtod_l+0x340>
 800d7d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d7d6:	1a76      	subs	r6, r6, r1
 800d7d8:	2e08      	cmp	r6, #8
 800d7da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d7de:	dc03      	bgt.n	800d7e8 <_strtod_l+0x2e0>
 800d7e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d7e2:	4588      	cmp	r8, r1
 800d7e4:	bfa8      	it	ge
 800d7e6:	4688      	movge	r8, r1
 800d7e8:	f1bc 0f00 	cmp.w	ip, #0
 800d7ec:	d001      	beq.n	800d7f2 <_strtod_l+0x2ea>
 800d7ee:	f1c8 0800 	rsb	r8, r8, #0
 800d7f2:	2d00      	cmp	r5, #0
 800d7f4:	d14e      	bne.n	800d894 <_strtod_l+0x38c>
 800d7f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d7f8:	4308      	orrs	r0, r1
 800d7fa:	f47f aebe 	bne.w	800d57a <_strtod_l+0x72>
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f47f aed6 	bne.w	800d5b0 <_strtod_l+0xa8>
 800d804:	2a69      	cmp	r2, #105	@ 0x69
 800d806:	d028      	beq.n	800d85a <_strtod_l+0x352>
 800d808:	dc25      	bgt.n	800d856 <_strtod_l+0x34e>
 800d80a:	2a49      	cmp	r2, #73	@ 0x49
 800d80c:	d025      	beq.n	800d85a <_strtod_l+0x352>
 800d80e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d810:	f47f aece 	bne.w	800d5b0 <_strtod_l+0xa8>
 800d814:	499b      	ldr	r1, [pc, #620]	@ (800da84 <_strtod_l+0x57c>)
 800d816:	a819      	add	r0, sp, #100	@ 0x64
 800d818:	f001 fbc6 	bl	800efa8 <__match>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	f43f aec7 	beq.w	800d5b0 <_strtod_l+0xa8>
 800d822:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	2b28      	cmp	r3, #40	@ 0x28
 800d828:	d12e      	bne.n	800d888 <_strtod_l+0x380>
 800d82a:	4997      	ldr	r1, [pc, #604]	@ (800da88 <_strtod_l+0x580>)
 800d82c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d82e:	a819      	add	r0, sp, #100	@ 0x64
 800d830:	f001 fbce 	bl	800efd0 <__hexnan>
 800d834:	2805      	cmp	r0, #5
 800d836:	d127      	bne.n	800d888 <_strtod_l+0x380>
 800d838:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d83a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d83e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d842:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d846:	e698      	b.n	800d57a <_strtod_l+0x72>
 800d848:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d84a:	fb08 2101 	mla	r1, r8, r1, r2
 800d84e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d852:	920e      	str	r2, [sp, #56]	@ 0x38
 800d854:	e7b5      	b.n	800d7c2 <_strtod_l+0x2ba>
 800d856:	2a6e      	cmp	r2, #110	@ 0x6e
 800d858:	e7da      	b.n	800d810 <_strtod_l+0x308>
 800d85a:	498c      	ldr	r1, [pc, #560]	@ (800da8c <_strtod_l+0x584>)
 800d85c:	a819      	add	r0, sp, #100	@ 0x64
 800d85e:	f001 fba3 	bl	800efa8 <__match>
 800d862:	2800      	cmp	r0, #0
 800d864:	f43f aea4 	beq.w	800d5b0 <_strtod_l+0xa8>
 800d868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d86a:	4989      	ldr	r1, [pc, #548]	@ (800da90 <_strtod_l+0x588>)
 800d86c:	3b01      	subs	r3, #1
 800d86e:	a819      	add	r0, sp, #100	@ 0x64
 800d870:	9319      	str	r3, [sp, #100]	@ 0x64
 800d872:	f001 fb99 	bl	800efa8 <__match>
 800d876:	b910      	cbnz	r0, 800d87e <_strtod_l+0x376>
 800d878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d87a:	3301      	adds	r3, #1
 800d87c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d87e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800daa0 <_strtod_l+0x598>
 800d882:	f04f 0a00 	mov.w	sl, #0
 800d886:	e678      	b.n	800d57a <_strtod_l+0x72>
 800d888:	4882      	ldr	r0, [pc, #520]	@ (800da94 <_strtod_l+0x58c>)
 800d88a:	f001 f8e1 	bl	800ea50 <nan>
 800d88e:	ec5b ab10 	vmov	sl, fp, d0
 800d892:	e672      	b.n	800d57a <_strtod_l+0x72>
 800d894:	eba8 0309 	sub.w	r3, r8, r9
 800d898:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d89a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d89c:	2f00      	cmp	r7, #0
 800d89e:	bf08      	it	eq
 800d8a0:	462f      	moveq	r7, r5
 800d8a2:	2d10      	cmp	r5, #16
 800d8a4:	462c      	mov	r4, r5
 800d8a6:	bfa8      	it	ge
 800d8a8:	2410      	movge	r4, #16
 800d8aa:	f7f2 fe4b 	bl	8000544 <__aeabi_ui2d>
 800d8ae:	2d09      	cmp	r5, #9
 800d8b0:	4682      	mov	sl, r0
 800d8b2:	468b      	mov	fp, r1
 800d8b4:	dc13      	bgt.n	800d8de <_strtod_l+0x3d6>
 800d8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f43f ae5e 	beq.w	800d57a <_strtod_l+0x72>
 800d8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8c0:	dd78      	ble.n	800d9b4 <_strtod_l+0x4ac>
 800d8c2:	2b16      	cmp	r3, #22
 800d8c4:	dc5f      	bgt.n	800d986 <_strtod_l+0x47e>
 800d8c6:	4974      	ldr	r1, [pc, #464]	@ (800da98 <_strtod_l+0x590>)
 800d8c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8d0:	4652      	mov	r2, sl
 800d8d2:	465b      	mov	r3, fp
 800d8d4:	f7f2 feb0 	bl	8000638 <__aeabi_dmul>
 800d8d8:	4682      	mov	sl, r0
 800d8da:	468b      	mov	fp, r1
 800d8dc:	e64d      	b.n	800d57a <_strtod_l+0x72>
 800d8de:	4b6e      	ldr	r3, [pc, #440]	@ (800da98 <_strtod_l+0x590>)
 800d8e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d8e8:	f7f2 fea6 	bl	8000638 <__aeabi_dmul>
 800d8ec:	4682      	mov	sl, r0
 800d8ee:	9808      	ldr	r0, [sp, #32]
 800d8f0:	468b      	mov	fp, r1
 800d8f2:	f7f2 fe27 	bl	8000544 <__aeabi_ui2d>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4650      	mov	r0, sl
 800d8fc:	4659      	mov	r1, fp
 800d8fe:	f7f2 fce5 	bl	80002cc <__adddf3>
 800d902:	2d0f      	cmp	r5, #15
 800d904:	4682      	mov	sl, r0
 800d906:	468b      	mov	fp, r1
 800d908:	ddd5      	ble.n	800d8b6 <_strtod_l+0x3ae>
 800d90a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d90c:	1b2c      	subs	r4, r5, r4
 800d90e:	441c      	add	r4, r3
 800d910:	2c00      	cmp	r4, #0
 800d912:	f340 8096 	ble.w	800da42 <_strtod_l+0x53a>
 800d916:	f014 030f 	ands.w	r3, r4, #15
 800d91a:	d00a      	beq.n	800d932 <_strtod_l+0x42a>
 800d91c:	495e      	ldr	r1, [pc, #376]	@ (800da98 <_strtod_l+0x590>)
 800d91e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d922:	4652      	mov	r2, sl
 800d924:	465b      	mov	r3, fp
 800d926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d92a:	f7f2 fe85 	bl	8000638 <__aeabi_dmul>
 800d92e:	4682      	mov	sl, r0
 800d930:	468b      	mov	fp, r1
 800d932:	f034 040f 	bics.w	r4, r4, #15
 800d936:	d073      	beq.n	800da20 <_strtod_l+0x518>
 800d938:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d93c:	dd48      	ble.n	800d9d0 <_strtod_l+0x4c8>
 800d93e:	2400      	movs	r4, #0
 800d940:	46a0      	mov	r8, r4
 800d942:	940a      	str	r4, [sp, #40]	@ 0x28
 800d944:	46a1      	mov	r9, r4
 800d946:	9a05      	ldr	r2, [sp, #20]
 800d948:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800daa0 <_strtod_l+0x598>
 800d94c:	2322      	movs	r3, #34	@ 0x22
 800d94e:	6013      	str	r3, [r2, #0]
 800d950:	f04f 0a00 	mov.w	sl, #0
 800d954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d956:	2b00      	cmp	r3, #0
 800d958:	f43f ae0f 	beq.w	800d57a <_strtod_l+0x72>
 800d95c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d95e:	9805      	ldr	r0, [sp, #20]
 800d960:	f7ff f942 	bl	800cbe8 <_Bfree>
 800d964:	9805      	ldr	r0, [sp, #20]
 800d966:	4649      	mov	r1, r9
 800d968:	f7ff f93e 	bl	800cbe8 <_Bfree>
 800d96c:	9805      	ldr	r0, [sp, #20]
 800d96e:	4641      	mov	r1, r8
 800d970:	f7ff f93a 	bl	800cbe8 <_Bfree>
 800d974:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d976:	9805      	ldr	r0, [sp, #20]
 800d978:	f7ff f936 	bl	800cbe8 <_Bfree>
 800d97c:	9805      	ldr	r0, [sp, #20]
 800d97e:	4621      	mov	r1, r4
 800d980:	f7ff f932 	bl	800cbe8 <_Bfree>
 800d984:	e5f9      	b.n	800d57a <_strtod_l+0x72>
 800d986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d988:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d98c:	4293      	cmp	r3, r2
 800d98e:	dbbc      	blt.n	800d90a <_strtod_l+0x402>
 800d990:	4c41      	ldr	r4, [pc, #260]	@ (800da98 <_strtod_l+0x590>)
 800d992:	f1c5 050f 	rsb	r5, r5, #15
 800d996:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d99a:	4652      	mov	r2, sl
 800d99c:	465b      	mov	r3, fp
 800d99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9a2:	f7f2 fe49 	bl	8000638 <__aeabi_dmul>
 800d9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a8:	1b5d      	subs	r5, r3, r5
 800d9aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d9ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d9b2:	e78f      	b.n	800d8d4 <_strtod_l+0x3cc>
 800d9b4:	3316      	adds	r3, #22
 800d9b6:	dba8      	blt.n	800d90a <_strtod_l+0x402>
 800d9b8:	4b37      	ldr	r3, [pc, #220]	@ (800da98 <_strtod_l+0x590>)
 800d9ba:	eba9 0808 	sub.w	r8, r9, r8
 800d9be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d9c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d9c6:	4650      	mov	r0, sl
 800d9c8:	4659      	mov	r1, fp
 800d9ca:	f7f2 ff5f 	bl	800088c <__aeabi_ddiv>
 800d9ce:	e783      	b.n	800d8d8 <_strtod_l+0x3d0>
 800d9d0:	4b32      	ldr	r3, [pc, #200]	@ (800da9c <_strtod_l+0x594>)
 800d9d2:	9308      	str	r3, [sp, #32]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	1124      	asrs	r4, r4, #4
 800d9d8:	4650      	mov	r0, sl
 800d9da:	4659      	mov	r1, fp
 800d9dc:	461e      	mov	r6, r3
 800d9de:	2c01      	cmp	r4, #1
 800d9e0:	dc21      	bgt.n	800da26 <_strtod_l+0x51e>
 800d9e2:	b10b      	cbz	r3, 800d9e8 <_strtod_l+0x4e0>
 800d9e4:	4682      	mov	sl, r0
 800d9e6:	468b      	mov	fp, r1
 800d9e8:	492c      	ldr	r1, [pc, #176]	@ (800da9c <_strtod_l+0x594>)
 800d9ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d9ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d9f2:	4652      	mov	r2, sl
 800d9f4:	465b      	mov	r3, fp
 800d9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9fa:	f7f2 fe1d 	bl	8000638 <__aeabi_dmul>
 800d9fe:	4b28      	ldr	r3, [pc, #160]	@ (800daa0 <_strtod_l+0x598>)
 800da00:	460a      	mov	r2, r1
 800da02:	400b      	ands	r3, r1
 800da04:	4927      	ldr	r1, [pc, #156]	@ (800daa4 <_strtod_l+0x59c>)
 800da06:	428b      	cmp	r3, r1
 800da08:	4682      	mov	sl, r0
 800da0a:	d898      	bhi.n	800d93e <_strtod_l+0x436>
 800da0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800da10:	428b      	cmp	r3, r1
 800da12:	bf86      	itte	hi
 800da14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800daa8 <_strtod_l+0x5a0>
 800da18:	f04f 3aff 	movhi.w	sl, #4294967295
 800da1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800da20:	2300      	movs	r3, #0
 800da22:	9308      	str	r3, [sp, #32]
 800da24:	e07a      	b.n	800db1c <_strtod_l+0x614>
 800da26:	07e2      	lsls	r2, r4, #31
 800da28:	d505      	bpl.n	800da36 <_strtod_l+0x52e>
 800da2a:	9b08      	ldr	r3, [sp, #32]
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	f7f2 fe02 	bl	8000638 <__aeabi_dmul>
 800da34:	2301      	movs	r3, #1
 800da36:	9a08      	ldr	r2, [sp, #32]
 800da38:	3208      	adds	r2, #8
 800da3a:	3601      	adds	r6, #1
 800da3c:	1064      	asrs	r4, r4, #1
 800da3e:	9208      	str	r2, [sp, #32]
 800da40:	e7cd      	b.n	800d9de <_strtod_l+0x4d6>
 800da42:	d0ed      	beq.n	800da20 <_strtod_l+0x518>
 800da44:	4264      	negs	r4, r4
 800da46:	f014 020f 	ands.w	r2, r4, #15
 800da4a:	d00a      	beq.n	800da62 <_strtod_l+0x55a>
 800da4c:	4b12      	ldr	r3, [pc, #72]	@ (800da98 <_strtod_l+0x590>)
 800da4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da52:	4650      	mov	r0, sl
 800da54:	4659      	mov	r1, fp
 800da56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5a:	f7f2 ff17 	bl	800088c <__aeabi_ddiv>
 800da5e:	4682      	mov	sl, r0
 800da60:	468b      	mov	fp, r1
 800da62:	1124      	asrs	r4, r4, #4
 800da64:	d0dc      	beq.n	800da20 <_strtod_l+0x518>
 800da66:	2c1f      	cmp	r4, #31
 800da68:	dd20      	ble.n	800daac <_strtod_l+0x5a4>
 800da6a:	2400      	movs	r4, #0
 800da6c:	46a0      	mov	r8, r4
 800da6e:	940a      	str	r4, [sp, #40]	@ 0x28
 800da70:	46a1      	mov	r9, r4
 800da72:	9a05      	ldr	r2, [sp, #20]
 800da74:	2322      	movs	r3, #34	@ 0x22
 800da76:	f04f 0a00 	mov.w	sl, #0
 800da7a:	f04f 0b00 	mov.w	fp, #0
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	e768      	b.n	800d954 <_strtod_l+0x44c>
 800da82:	bf00      	nop
 800da84:	08010bbe 	.word	0x08010bbe
 800da88:	08010e6c 	.word	0x08010e6c
 800da8c:	08010bb6 	.word	0x08010bb6
 800da90:	08010c9a 	.word	0x08010c9a
 800da94:	08010c96 	.word	0x08010c96
 800da98:	08010da0 	.word	0x08010da0
 800da9c:	08010d78 	.word	0x08010d78
 800daa0:	7ff00000 	.word	0x7ff00000
 800daa4:	7ca00000 	.word	0x7ca00000
 800daa8:	7fefffff 	.word	0x7fefffff
 800daac:	f014 0310 	ands.w	r3, r4, #16
 800dab0:	bf18      	it	ne
 800dab2:	236a      	movne	r3, #106	@ 0x6a
 800dab4:	4ea9      	ldr	r6, [pc, #676]	@ (800dd5c <_strtod_l+0x854>)
 800dab6:	9308      	str	r3, [sp, #32]
 800dab8:	4650      	mov	r0, sl
 800daba:	4659      	mov	r1, fp
 800dabc:	2300      	movs	r3, #0
 800dabe:	07e2      	lsls	r2, r4, #31
 800dac0:	d504      	bpl.n	800dacc <_strtod_l+0x5c4>
 800dac2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dac6:	f7f2 fdb7 	bl	8000638 <__aeabi_dmul>
 800daca:	2301      	movs	r3, #1
 800dacc:	1064      	asrs	r4, r4, #1
 800dace:	f106 0608 	add.w	r6, r6, #8
 800dad2:	d1f4      	bne.n	800dabe <_strtod_l+0x5b6>
 800dad4:	b10b      	cbz	r3, 800dada <_strtod_l+0x5d2>
 800dad6:	4682      	mov	sl, r0
 800dad8:	468b      	mov	fp, r1
 800dada:	9b08      	ldr	r3, [sp, #32]
 800dadc:	b1b3      	cbz	r3, 800db0c <_strtod_l+0x604>
 800dade:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dae2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	4659      	mov	r1, fp
 800daea:	dd0f      	ble.n	800db0c <_strtod_l+0x604>
 800daec:	2b1f      	cmp	r3, #31
 800daee:	dd55      	ble.n	800db9c <_strtod_l+0x694>
 800daf0:	2b34      	cmp	r3, #52	@ 0x34
 800daf2:	bfde      	ittt	le
 800daf4:	f04f 33ff 	movle.w	r3, #4294967295
 800daf8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dafc:	4093      	lslle	r3, r2
 800dafe:	f04f 0a00 	mov.w	sl, #0
 800db02:	bfcc      	ite	gt
 800db04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800db08:	ea03 0b01 	andle.w	fp, r3, r1
 800db0c:	2200      	movs	r2, #0
 800db0e:	2300      	movs	r3, #0
 800db10:	4650      	mov	r0, sl
 800db12:	4659      	mov	r1, fp
 800db14:	f7f2 fff8 	bl	8000b08 <__aeabi_dcmpeq>
 800db18:	2800      	cmp	r0, #0
 800db1a:	d1a6      	bne.n	800da6a <_strtod_l+0x562>
 800db1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800db22:	9805      	ldr	r0, [sp, #20]
 800db24:	462b      	mov	r3, r5
 800db26:	463a      	mov	r2, r7
 800db28:	f7ff f8c6 	bl	800ccb8 <__s2b>
 800db2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800db2e:	2800      	cmp	r0, #0
 800db30:	f43f af05 	beq.w	800d93e <_strtod_l+0x436>
 800db34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db36:	2a00      	cmp	r2, #0
 800db38:	eba9 0308 	sub.w	r3, r9, r8
 800db3c:	bfa8      	it	ge
 800db3e:	2300      	movge	r3, #0
 800db40:	9312      	str	r3, [sp, #72]	@ 0x48
 800db42:	2400      	movs	r4, #0
 800db44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800db48:	9316      	str	r3, [sp, #88]	@ 0x58
 800db4a:	46a0      	mov	r8, r4
 800db4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db4e:	9805      	ldr	r0, [sp, #20]
 800db50:	6859      	ldr	r1, [r3, #4]
 800db52:	f7ff f809 	bl	800cb68 <_Balloc>
 800db56:	4681      	mov	r9, r0
 800db58:	2800      	cmp	r0, #0
 800db5a:	f43f aef4 	beq.w	800d946 <_strtod_l+0x43e>
 800db5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db60:	691a      	ldr	r2, [r3, #16]
 800db62:	3202      	adds	r2, #2
 800db64:	f103 010c 	add.w	r1, r3, #12
 800db68:	0092      	lsls	r2, r2, #2
 800db6a:	300c      	adds	r0, #12
 800db6c:	f000 ff62 	bl	800ea34 <memcpy>
 800db70:	ec4b ab10 	vmov	d0, sl, fp
 800db74:	9805      	ldr	r0, [sp, #20]
 800db76:	aa1c      	add	r2, sp, #112	@ 0x70
 800db78:	a91b      	add	r1, sp, #108	@ 0x6c
 800db7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800db7e:	f7ff fbd7 	bl	800d330 <__d2b>
 800db82:	901a      	str	r0, [sp, #104]	@ 0x68
 800db84:	2800      	cmp	r0, #0
 800db86:	f43f aede 	beq.w	800d946 <_strtod_l+0x43e>
 800db8a:	9805      	ldr	r0, [sp, #20]
 800db8c:	2101      	movs	r1, #1
 800db8e:	f7ff f929 	bl	800cde4 <__i2b>
 800db92:	4680      	mov	r8, r0
 800db94:	b948      	cbnz	r0, 800dbaa <_strtod_l+0x6a2>
 800db96:	f04f 0800 	mov.w	r8, #0
 800db9a:	e6d4      	b.n	800d946 <_strtod_l+0x43e>
 800db9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dba0:	fa02 f303 	lsl.w	r3, r2, r3
 800dba4:	ea03 0a0a 	and.w	sl, r3, sl
 800dba8:	e7b0      	b.n	800db0c <_strtod_l+0x604>
 800dbaa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dbac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dbae:	2d00      	cmp	r5, #0
 800dbb0:	bfab      	itete	ge
 800dbb2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dbb4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dbb6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dbb8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dbba:	bfac      	ite	ge
 800dbbc:	18ef      	addge	r7, r5, r3
 800dbbe:	1b5e      	sublt	r6, r3, r5
 800dbc0:	9b08      	ldr	r3, [sp, #32]
 800dbc2:	1aed      	subs	r5, r5, r3
 800dbc4:	4415      	add	r5, r2
 800dbc6:	4b66      	ldr	r3, [pc, #408]	@ (800dd60 <_strtod_l+0x858>)
 800dbc8:	3d01      	subs	r5, #1
 800dbca:	429d      	cmp	r5, r3
 800dbcc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dbd0:	da50      	bge.n	800dc74 <_strtod_l+0x76c>
 800dbd2:	1b5b      	subs	r3, r3, r5
 800dbd4:	2b1f      	cmp	r3, #31
 800dbd6:	eba2 0203 	sub.w	r2, r2, r3
 800dbda:	f04f 0101 	mov.w	r1, #1
 800dbde:	dc3d      	bgt.n	800dc5c <_strtod_l+0x754>
 800dbe0:	fa01 f303 	lsl.w	r3, r1, r3
 800dbe4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbea:	18bd      	adds	r5, r7, r2
 800dbec:	9b08      	ldr	r3, [sp, #32]
 800dbee:	42af      	cmp	r7, r5
 800dbf0:	4416      	add	r6, r2
 800dbf2:	441e      	add	r6, r3
 800dbf4:	463b      	mov	r3, r7
 800dbf6:	bfa8      	it	ge
 800dbf8:	462b      	movge	r3, r5
 800dbfa:	42b3      	cmp	r3, r6
 800dbfc:	bfa8      	it	ge
 800dbfe:	4633      	movge	r3, r6
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	bfc2      	ittt	gt
 800dc04:	1aed      	subgt	r5, r5, r3
 800dc06:	1af6      	subgt	r6, r6, r3
 800dc08:	1aff      	subgt	r7, r7, r3
 800dc0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dd16      	ble.n	800dc3e <_strtod_l+0x736>
 800dc10:	4641      	mov	r1, r8
 800dc12:	9805      	ldr	r0, [sp, #20]
 800dc14:	461a      	mov	r2, r3
 800dc16:	f7ff f9a5 	bl	800cf64 <__pow5mult>
 800dc1a:	4680      	mov	r8, r0
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d0ba      	beq.n	800db96 <_strtod_l+0x68e>
 800dc20:	4601      	mov	r1, r0
 800dc22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dc24:	9805      	ldr	r0, [sp, #20]
 800dc26:	f7ff f8f3 	bl	800ce10 <__multiply>
 800dc2a:	900e      	str	r0, [sp, #56]	@ 0x38
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	f43f ae8a 	beq.w	800d946 <_strtod_l+0x43e>
 800dc32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc34:	9805      	ldr	r0, [sp, #20]
 800dc36:	f7fe ffd7 	bl	800cbe8 <_Bfree>
 800dc3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc3e:	2d00      	cmp	r5, #0
 800dc40:	dc1d      	bgt.n	800dc7e <_strtod_l+0x776>
 800dc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	dd23      	ble.n	800dc90 <_strtod_l+0x788>
 800dc48:	4649      	mov	r1, r9
 800dc4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dc4c:	9805      	ldr	r0, [sp, #20]
 800dc4e:	f7ff f989 	bl	800cf64 <__pow5mult>
 800dc52:	4681      	mov	r9, r0
 800dc54:	b9e0      	cbnz	r0, 800dc90 <_strtod_l+0x788>
 800dc56:	f04f 0900 	mov.w	r9, #0
 800dc5a:	e674      	b.n	800d946 <_strtod_l+0x43e>
 800dc5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dc60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dc64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dc68:	35e2      	adds	r5, #226	@ 0xe2
 800dc6a:	fa01 f305 	lsl.w	r3, r1, r5
 800dc6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc70:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dc72:	e7ba      	b.n	800dbea <_strtod_l+0x6e2>
 800dc74:	2300      	movs	r3, #0
 800dc76:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc78:	2301      	movs	r3, #1
 800dc7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc7c:	e7b5      	b.n	800dbea <_strtod_l+0x6e2>
 800dc7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc80:	9805      	ldr	r0, [sp, #20]
 800dc82:	462a      	mov	r2, r5
 800dc84:	f7ff f9c8 	bl	800d018 <__lshift>
 800dc88:	901a      	str	r0, [sp, #104]	@ 0x68
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d1d9      	bne.n	800dc42 <_strtod_l+0x73a>
 800dc8e:	e65a      	b.n	800d946 <_strtod_l+0x43e>
 800dc90:	2e00      	cmp	r6, #0
 800dc92:	dd07      	ble.n	800dca4 <_strtod_l+0x79c>
 800dc94:	4649      	mov	r1, r9
 800dc96:	9805      	ldr	r0, [sp, #20]
 800dc98:	4632      	mov	r2, r6
 800dc9a:	f7ff f9bd 	bl	800d018 <__lshift>
 800dc9e:	4681      	mov	r9, r0
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d0d8      	beq.n	800dc56 <_strtod_l+0x74e>
 800dca4:	2f00      	cmp	r7, #0
 800dca6:	dd08      	ble.n	800dcba <_strtod_l+0x7b2>
 800dca8:	4641      	mov	r1, r8
 800dcaa:	9805      	ldr	r0, [sp, #20]
 800dcac:	463a      	mov	r2, r7
 800dcae:	f7ff f9b3 	bl	800d018 <__lshift>
 800dcb2:	4680      	mov	r8, r0
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	f43f ae46 	beq.w	800d946 <_strtod_l+0x43e>
 800dcba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dcbc:	9805      	ldr	r0, [sp, #20]
 800dcbe:	464a      	mov	r2, r9
 800dcc0:	f7ff fa32 	bl	800d128 <__mdiff>
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	f43f ae3d 	beq.w	800d946 <_strtod_l+0x43e>
 800dccc:	68c3      	ldr	r3, [r0, #12]
 800dcce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	60c3      	str	r3, [r0, #12]
 800dcd4:	4641      	mov	r1, r8
 800dcd6:	f7ff fa0b 	bl	800d0f0 <__mcmp>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	da46      	bge.n	800dd6c <_strtod_l+0x864>
 800dcde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dce0:	ea53 030a 	orrs.w	r3, r3, sl
 800dce4:	d16c      	bne.n	800ddc0 <_strtod_l+0x8b8>
 800dce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d168      	bne.n	800ddc0 <_strtod_l+0x8b8>
 800dcee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dcf2:	0d1b      	lsrs	r3, r3, #20
 800dcf4:	051b      	lsls	r3, r3, #20
 800dcf6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dcfa:	d961      	bls.n	800ddc0 <_strtod_l+0x8b8>
 800dcfc:	6963      	ldr	r3, [r4, #20]
 800dcfe:	b913      	cbnz	r3, 800dd06 <_strtod_l+0x7fe>
 800dd00:	6923      	ldr	r3, [r4, #16]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	dd5c      	ble.n	800ddc0 <_strtod_l+0x8b8>
 800dd06:	4621      	mov	r1, r4
 800dd08:	2201      	movs	r2, #1
 800dd0a:	9805      	ldr	r0, [sp, #20]
 800dd0c:	f7ff f984 	bl	800d018 <__lshift>
 800dd10:	4641      	mov	r1, r8
 800dd12:	4604      	mov	r4, r0
 800dd14:	f7ff f9ec 	bl	800d0f0 <__mcmp>
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	dd51      	ble.n	800ddc0 <_strtod_l+0x8b8>
 800dd1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd20:	9a08      	ldr	r2, [sp, #32]
 800dd22:	0d1b      	lsrs	r3, r3, #20
 800dd24:	051b      	lsls	r3, r3, #20
 800dd26:	2a00      	cmp	r2, #0
 800dd28:	d06b      	beq.n	800de02 <_strtod_l+0x8fa>
 800dd2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dd2e:	d868      	bhi.n	800de02 <_strtod_l+0x8fa>
 800dd30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dd34:	f67f ae9d 	bls.w	800da72 <_strtod_l+0x56a>
 800dd38:	4b0a      	ldr	r3, [pc, #40]	@ (800dd64 <_strtod_l+0x85c>)
 800dd3a:	4650      	mov	r0, sl
 800dd3c:	4659      	mov	r1, fp
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f7f2 fc7a 	bl	8000638 <__aeabi_dmul>
 800dd44:	4b08      	ldr	r3, [pc, #32]	@ (800dd68 <_strtod_l+0x860>)
 800dd46:	400b      	ands	r3, r1
 800dd48:	4682      	mov	sl, r0
 800dd4a:	468b      	mov	fp, r1
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f47f ae05 	bne.w	800d95c <_strtod_l+0x454>
 800dd52:	9a05      	ldr	r2, [sp, #20]
 800dd54:	2322      	movs	r3, #34	@ 0x22
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	e600      	b.n	800d95c <_strtod_l+0x454>
 800dd5a:	bf00      	nop
 800dd5c:	08010e98 	.word	0x08010e98
 800dd60:	fffffc02 	.word	0xfffffc02
 800dd64:	39500000 	.word	0x39500000
 800dd68:	7ff00000 	.word	0x7ff00000
 800dd6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dd70:	d165      	bne.n	800de3e <_strtod_l+0x936>
 800dd72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dd74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd78:	b35a      	cbz	r2, 800ddd2 <_strtod_l+0x8ca>
 800dd7a:	4a9f      	ldr	r2, [pc, #636]	@ (800dff8 <_strtod_l+0xaf0>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d12b      	bne.n	800ddd8 <_strtod_l+0x8d0>
 800dd80:	9b08      	ldr	r3, [sp, #32]
 800dd82:	4651      	mov	r1, sl
 800dd84:	b303      	cbz	r3, 800ddc8 <_strtod_l+0x8c0>
 800dd86:	4b9d      	ldr	r3, [pc, #628]	@ (800dffc <_strtod_l+0xaf4>)
 800dd88:	465a      	mov	r2, fp
 800dd8a:	4013      	ands	r3, r2
 800dd8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dd90:	f04f 32ff 	mov.w	r2, #4294967295
 800dd94:	d81b      	bhi.n	800ddce <_strtod_l+0x8c6>
 800dd96:	0d1b      	lsrs	r3, r3, #20
 800dd98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800dda0:	4299      	cmp	r1, r3
 800dda2:	d119      	bne.n	800ddd8 <_strtod_l+0x8d0>
 800dda4:	4b96      	ldr	r3, [pc, #600]	@ (800e000 <_strtod_l+0xaf8>)
 800dda6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d102      	bne.n	800ddb2 <_strtod_l+0x8aa>
 800ddac:	3101      	adds	r1, #1
 800ddae:	f43f adca 	beq.w	800d946 <_strtod_l+0x43e>
 800ddb2:	4b92      	ldr	r3, [pc, #584]	@ (800dffc <_strtod_l+0xaf4>)
 800ddb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddb6:	401a      	ands	r2, r3
 800ddb8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ddbc:	f04f 0a00 	mov.w	sl, #0
 800ddc0:	9b08      	ldr	r3, [sp, #32]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1b8      	bne.n	800dd38 <_strtod_l+0x830>
 800ddc6:	e5c9      	b.n	800d95c <_strtod_l+0x454>
 800ddc8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddcc:	e7e8      	b.n	800dda0 <_strtod_l+0x898>
 800ddce:	4613      	mov	r3, r2
 800ddd0:	e7e6      	b.n	800dda0 <_strtod_l+0x898>
 800ddd2:	ea53 030a 	orrs.w	r3, r3, sl
 800ddd6:	d0a1      	beq.n	800dd1c <_strtod_l+0x814>
 800ddd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ddda:	b1db      	cbz	r3, 800de14 <_strtod_l+0x90c>
 800dddc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddde:	4213      	tst	r3, r2
 800dde0:	d0ee      	beq.n	800ddc0 <_strtod_l+0x8b8>
 800dde2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dde4:	9a08      	ldr	r2, [sp, #32]
 800dde6:	4650      	mov	r0, sl
 800dde8:	4659      	mov	r1, fp
 800ddea:	b1bb      	cbz	r3, 800de1c <_strtod_l+0x914>
 800ddec:	f7ff fb6e 	bl	800d4cc <sulp>
 800ddf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddf4:	ec53 2b10 	vmov	r2, r3, d0
 800ddf8:	f7f2 fa68 	bl	80002cc <__adddf3>
 800ddfc:	4682      	mov	sl, r0
 800ddfe:	468b      	mov	fp, r1
 800de00:	e7de      	b.n	800ddc0 <_strtod_l+0x8b8>
 800de02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800de06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800de0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800de0e:	f04f 3aff 	mov.w	sl, #4294967295
 800de12:	e7d5      	b.n	800ddc0 <_strtod_l+0x8b8>
 800de14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de16:	ea13 0f0a 	tst.w	r3, sl
 800de1a:	e7e1      	b.n	800dde0 <_strtod_l+0x8d8>
 800de1c:	f7ff fb56 	bl	800d4cc <sulp>
 800de20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de24:	ec53 2b10 	vmov	r2, r3, d0
 800de28:	f7f2 fa4e 	bl	80002c8 <__aeabi_dsub>
 800de2c:	2200      	movs	r2, #0
 800de2e:	2300      	movs	r3, #0
 800de30:	4682      	mov	sl, r0
 800de32:	468b      	mov	fp, r1
 800de34:	f7f2 fe68 	bl	8000b08 <__aeabi_dcmpeq>
 800de38:	2800      	cmp	r0, #0
 800de3a:	d0c1      	beq.n	800ddc0 <_strtod_l+0x8b8>
 800de3c:	e619      	b.n	800da72 <_strtod_l+0x56a>
 800de3e:	4641      	mov	r1, r8
 800de40:	4620      	mov	r0, r4
 800de42:	f7ff facd 	bl	800d3e0 <__ratio>
 800de46:	ec57 6b10 	vmov	r6, r7, d0
 800de4a:	2200      	movs	r2, #0
 800de4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800de50:	4630      	mov	r0, r6
 800de52:	4639      	mov	r1, r7
 800de54:	f7f2 fe6c 	bl	8000b30 <__aeabi_dcmple>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d06f      	beq.n	800df3c <_strtod_l+0xa34>
 800de5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d17a      	bne.n	800df58 <_strtod_l+0xa50>
 800de62:	f1ba 0f00 	cmp.w	sl, #0
 800de66:	d158      	bne.n	800df1a <_strtod_l+0xa12>
 800de68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d15a      	bne.n	800df28 <_strtod_l+0xa20>
 800de72:	4b64      	ldr	r3, [pc, #400]	@ (800e004 <_strtod_l+0xafc>)
 800de74:	2200      	movs	r2, #0
 800de76:	4630      	mov	r0, r6
 800de78:	4639      	mov	r1, r7
 800de7a:	f7f2 fe4f 	bl	8000b1c <__aeabi_dcmplt>
 800de7e:	2800      	cmp	r0, #0
 800de80:	d159      	bne.n	800df36 <_strtod_l+0xa2e>
 800de82:	4630      	mov	r0, r6
 800de84:	4639      	mov	r1, r7
 800de86:	4b60      	ldr	r3, [pc, #384]	@ (800e008 <_strtod_l+0xb00>)
 800de88:	2200      	movs	r2, #0
 800de8a:	f7f2 fbd5 	bl	8000638 <__aeabi_dmul>
 800de8e:	4606      	mov	r6, r0
 800de90:	460f      	mov	r7, r1
 800de92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800de96:	9606      	str	r6, [sp, #24]
 800de98:	9307      	str	r3, [sp, #28]
 800de9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de9e:	4d57      	ldr	r5, [pc, #348]	@ (800dffc <_strtod_l+0xaf4>)
 800dea0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dea6:	401d      	ands	r5, r3
 800dea8:	4b58      	ldr	r3, [pc, #352]	@ (800e00c <_strtod_l+0xb04>)
 800deaa:	429d      	cmp	r5, r3
 800deac:	f040 80b2 	bne.w	800e014 <_strtod_l+0xb0c>
 800deb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800deb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800deb6:	ec4b ab10 	vmov	d0, sl, fp
 800deba:	f7ff f9c9 	bl	800d250 <__ulp>
 800debe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dec2:	ec51 0b10 	vmov	r0, r1, d0
 800dec6:	f7f2 fbb7 	bl	8000638 <__aeabi_dmul>
 800deca:	4652      	mov	r2, sl
 800decc:	465b      	mov	r3, fp
 800dece:	f7f2 f9fd 	bl	80002cc <__adddf3>
 800ded2:	460b      	mov	r3, r1
 800ded4:	4949      	ldr	r1, [pc, #292]	@ (800dffc <_strtod_l+0xaf4>)
 800ded6:	4a4e      	ldr	r2, [pc, #312]	@ (800e010 <_strtod_l+0xb08>)
 800ded8:	4019      	ands	r1, r3
 800deda:	4291      	cmp	r1, r2
 800dedc:	4682      	mov	sl, r0
 800dede:	d942      	bls.n	800df66 <_strtod_l+0xa5e>
 800dee0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dee2:	4b47      	ldr	r3, [pc, #284]	@ (800e000 <_strtod_l+0xaf8>)
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d103      	bne.n	800def0 <_strtod_l+0x9e8>
 800dee8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800deea:	3301      	adds	r3, #1
 800deec:	f43f ad2b 	beq.w	800d946 <_strtod_l+0x43e>
 800def0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e000 <_strtod_l+0xaf8>
 800def4:	f04f 3aff 	mov.w	sl, #4294967295
 800def8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800defa:	9805      	ldr	r0, [sp, #20]
 800defc:	f7fe fe74 	bl	800cbe8 <_Bfree>
 800df00:	9805      	ldr	r0, [sp, #20]
 800df02:	4649      	mov	r1, r9
 800df04:	f7fe fe70 	bl	800cbe8 <_Bfree>
 800df08:	9805      	ldr	r0, [sp, #20]
 800df0a:	4641      	mov	r1, r8
 800df0c:	f7fe fe6c 	bl	800cbe8 <_Bfree>
 800df10:	9805      	ldr	r0, [sp, #20]
 800df12:	4621      	mov	r1, r4
 800df14:	f7fe fe68 	bl	800cbe8 <_Bfree>
 800df18:	e618      	b.n	800db4c <_strtod_l+0x644>
 800df1a:	f1ba 0f01 	cmp.w	sl, #1
 800df1e:	d103      	bne.n	800df28 <_strtod_l+0xa20>
 800df20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df22:	2b00      	cmp	r3, #0
 800df24:	f43f ada5 	beq.w	800da72 <_strtod_l+0x56a>
 800df28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dfd8 <_strtod_l+0xad0>
 800df2c:	4f35      	ldr	r7, [pc, #212]	@ (800e004 <_strtod_l+0xafc>)
 800df2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800df32:	2600      	movs	r6, #0
 800df34:	e7b1      	b.n	800de9a <_strtod_l+0x992>
 800df36:	4f34      	ldr	r7, [pc, #208]	@ (800e008 <_strtod_l+0xb00>)
 800df38:	2600      	movs	r6, #0
 800df3a:	e7aa      	b.n	800de92 <_strtod_l+0x98a>
 800df3c:	4b32      	ldr	r3, [pc, #200]	@ (800e008 <_strtod_l+0xb00>)
 800df3e:	4630      	mov	r0, r6
 800df40:	4639      	mov	r1, r7
 800df42:	2200      	movs	r2, #0
 800df44:	f7f2 fb78 	bl	8000638 <__aeabi_dmul>
 800df48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df4a:	4606      	mov	r6, r0
 800df4c:	460f      	mov	r7, r1
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d09f      	beq.n	800de92 <_strtod_l+0x98a>
 800df52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800df56:	e7a0      	b.n	800de9a <_strtod_l+0x992>
 800df58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dfe0 <_strtod_l+0xad8>
 800df5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800df60:	ec57 6b17 	vmov	r6, r7, d7
 800df64:	e799      	b.n	800de9a <_strtod_l+0x992>
 800df66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800df6a:	9b08      	ldr	r3, [sp, #32]
 800df6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1c1      	bne.n	800def8 <_strtod_l+0x9f0>
 800df74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800df78:	0d1b      	lsrs	r3, r3, #20
 800df7a:	051b      	lsls	r3, r3, #20
 800df7c:	429d      	cmp	r5, r3
 800df7e:	d1bb      	bne.n	800def8 <_strtod_l+0x9f0>
 800df80:	4630      	mov	r0, r6
 800df82:	4639      	mov	r1, r7
 800df84:	f7f2 ff08 	bl	8000d98 <__aeabi_d2lz>
 800df88:	f7f2 fb28 	bl	80005dc <__aeabi_l2d>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	4630      	mov	r0, r6
 800df92:	4639      	mov	r1, r7
 800df94:	f7f2 f998 	bl	80002c8 <__aeabi_dsub>
 800df98:	460b      	mov	r3, r1
 800df9a:	4602      	mov	r2, r0
 800df9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dfa0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dfa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfa6:	ea46 060a 	orr.w	r6, r6, sl
 800dfaa:	431e      	orrs	r6, r3
 800dfac:	d06f      	beq.n	800e08e <_strtod_l+0xb86>
 800dfae:	a30e      	add	r3, pc, #56	@ (adr r3, 800dfe8 <_strtod_l+0xae0>)
 800dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb4:	f7f2 fdb2 	bl	8000b1c <__aeabi_dcmplt>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	f47f accf 	bne.w	800d95c <_strtod_l+0x454>
 800dfbe:	a30c      	add	r3, pc, #48	@ (adr r3, 800dff0 <_strtod_l+0xae8>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfc8:	f7f2 fdc6 	bl	8000b58 <__aeabi_dcmpgt>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d093      	beq.n	800def8 <_strtod_l+0x9f0>
 800dfd0:	e4c4      	b.n	800d95c <_strtod_l+0x454>
 800dfd2:	bf00      	nop
 800dfd4:	f3af 8000 	nop.w
 800dfd8:	00000000 	.word	0x00000000
 800dfdc:	bff00000 	.word	0xbff00000
 800dfe0:	00000000 	.word	0x00000000
 800dfe4:	3ff00000 	.word	0x3ff00000
 800dfe8:	94a03595 	.word	0x94a03595
 800dfec:	3fdfffff 	.word	0x3fdfffff
 800dff0:	35afe535 	.word	0x35afe535
 800dff4:	3fe00000 	.word	0x3fe00000
 800dff8:	000fffff 	.word	0x000fffff
 800dffc:	7ff00000 	.word	0x7ff00000
 800e000:	7fefffff 	.word	0x7fefffff
 800e004:	3ff00000 	.word	0x3ff00000
 800e008:	3fe00000 	.word	0x3fe00000
 800e00c:	7fe00000 	.word	0x7fe00000
 800e010:	7c9fffff 	.word	0x7c9fffff
 800e014:	9b08      	ldr	r3, [sp, #32]
 800e016:	b323      	cbz	r3, 800e062 <_strtod_l+0xb5a>
 800e018:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e01c:	d821      	bhi.n	800e062 <_strtod_l+0xb5a>
 800e01e:	a328      	add	r3, pc, #160	@ (adr r3, 800e0c0 <_strtod_l+0xbb8>)
 800e020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e024:	4630      	mov	r0, r6
 800e026:	4639      	mov	r1, r7
 800e028:	f7f2 fd82 	bl	8000b30 <__aeabi_dcmple>
 800e02c:	b1a0      	cbz	r0, 800e058 <_strtod_l+0xb50>
 800e02e:	4639      	mov	r1, r7
 800e030:	4630      	mov	r0, r6
 800e032:	f7f2 fdd9 	bl	8000be8 <__aeabi_d2uiz>
 800e036:	2801      	cmp	r0, #1
 800e038:	bf38      	it	cc
 800e03a:	2001      	movcc	r0, #1
 800e03c:	f7f2 fa82 	bl	8000544 <__aeabi_ui2d>
 800e040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e042:	4606      	mov	r6, r0
 800e044:	460f      	mov	r7, r1
 800e046:	b9fb      	cbnz	r3, 800e088 <_strtod_l+0xb80>
 800e048:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e04c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e04e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e050:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e054:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e058:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e05a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e05e:	1b5b      	subs	r3, r3, r5
 800e060:	9311      	str	r3, [sp, #68]	@ 0x44
 800e062:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e066:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e06a:	f7ff f8f1 	bl	800d250 <__ulp>
 800e06e:	4650      	mov	r0, sl
 800e070:	ec53 2b10 	vmov	r2, r3, d0
 800e074:	4659      	mov	r1, fp
 800e076:	f7f2 fadf 	bl	8000638 <__aeabi_dmul>
 800e07a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e07e:	f7f2 f925 	bl	80002cc <__adddf3>
 800e082:	4682      	mov	sl, r0
 800e084:	468b      	mov	fp, r1
 800e086:	e770      	b.n	800df6a <_strtod_l+0xa62>
 800e088:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e08c:	e7e0      	b.n	800e050 <_strtod_l+0xb48>
 800e08e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e0c8 <_strtod_l+0xbc0>)
 800e090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e094:	f7f2 fd42 	bl	8000b1c <__aeabi_dcmplt>
 800e098:	e798      	b.n	800dfcc <_strtod_l+0xac4>
 800e09a:	2300      	movs	r3, #0
 800e09c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e09e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e0a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0a2:	6013      	str	r3, [r2, #0]
 800e0a4:	f7ff ba6d 	b.w	800d582 <_strtod_l+0x7a>
 800e0a8:	2a65      	cmp	r2, #101	@ 0x65
 800e0aa:	f43f ab66 	beq.w	800d77a <_strtod_l+0x272>
 800e0ae:	2a45      	cmp	r2, #69	@ 0x45
 800e0b0:	f43f ab63 	beq.w	800d77a <_strtod_l+0x272>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	f7ff bb9e 	b.w	800d7f6 <_strtod_l+0x2ee>
 800e0ba:	bf00      	nop
 800e0bc:	f3af 8000 	nop.w
 800e0c0:	ffc00000 	.word	0xffc00000
 800e0c4:	41dfffff 	.word	0x41dfffff
 800e0c8:	94a03595 	.word	0x94a03595
 800e0cc:	3fcfffff 	.word	0x3fcfffff

0800e0d0 <_strtod_r>:
 800e0d0:	4b01      	ldr	r3, [pc, #4]	@ (800e0d8 <_strtod_r+0x8>)
 800e0d2:	f7ff ba19 	b.w	800d508 <_strtod_l>
 800e0d6:	bf00      	nop
 800e0d8:	20000094 	.word	0x20000094

0800e0dc <__ssputs_r>:
 800e0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0e0:	688e      	ldr	r6, [r1, #8]
 800e0e2:	461f      	mov	r7, r3
 800e0e4:	42be      	cmp	r6, r7
 800e0e6:	680b      	ldr	r3, [r1, #0]
 800e0e8:	4682      	mov	sl, r0
 800e0ea:	460c      	mov	r4, r1
 800e0ec:	4690      	mov	r8, r2
 800e0ee:	d82d      	bhi.n	800e14c <__ssputs_r+0x70>
 800e0f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e0f8:	d026      	beq.n	800e148 <__ssputs_r+0x6c>
 800e0fa:	6965      	ldr	r5, [r4, #20]
 800e0fc:	6909      	ldr	r1, [r1, #16]
 800e0fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e102:	eba3 0901 	sub.w	r9, r3, r1
 800e106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e10a:	1c7b      	adds	r3, r7, #1
 800e10c:	444b      	add	r3, r9
 800e10e:	106d      	asrs	r5, r5, #1
 800e110:	429d      	cmp	r5, r3
 800e112:	bf38      	it	cc
 800e114:	461d      	movcc	r5, r3
 800e116:	0553      	lsls	r3, r2, #21
 800e118:	d527      	bpl.n	800e16a <__ssputs_r+0x8e>
 800e11a:	4629      	mov	r1, r5
 800e11c:	f7fe fc98 	bl	800ca50 <_malloc_r>
 800e120:	4606      	mov	r6, r0
 800e122:	b360      	cbz	r0, 800e17e <__ssputs_r+0xa2>
 800e124:	6921      	ldr	r1, [r4, #16]
 800e126:	464a      	mov	r2, r9
 800e128:	f000 fc84 	bl	800ea34 <memcpy>
 800e12c:	89a3      	ldrh	r3, [r4, #12]
 800e12e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e136:	81a3      	strh	r3, [r4, #12]
 800e138:	6126      	str	r6, [r4, #16]
 800e13a:	6165      	str	r5, [r4, #20]
 800e13c:	444e      	add	r6, r9
 800e13e:	eba5 0509 	sub.w	r5, r5, r9
 800e142:	6026      	str	r6, [r4, #0]
 800e144:	60a5      	str	r5, [r4, #8]
 800e146:	463e      	mov	r6, r7
 800e148:	42be      	cmp	r6, r7
 800e14a:	d900      	bls.n	800e14e <__ssputs_r+0x72>
 800e14c:	463e      	mov	r6, r7
 800e14e:	6820      	ldr	r0, [r4, #0]
 800e150:	4632      	mov	r2, r6
 800e152:	4641      	mov	r1, r8
 800e154:	f000 fc10 	bl	800e978 <memmove>
 800e158:	68a3      	ldr	r3, [r4, #8]
 800e15a:	1b9b      	subs	r3, r3, r6
 800e15c:	60a3      	str	r3, [r4, #8]
 800e15e:	6823      	ldr	r3, [r4, #0]
 800e160:	4433      	add	r3, r6
 800e162:	6023      	str	r3, [r4, #0]
 800e164:	2000      	movs	r0, #0
 800e166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e16a:	462a      	mov	r2, r5
 800e16c:	f000 ffdd 	bl	800f12a <_realloc_r>
 800e170:	4606      	mov	r6, r0
 800e172:	2800      	cmp	r0, #0
 800e174:	d1e0      	bne.n	800e138 <__ssputs_r+0x5c>
 800e176:	6921      	ldr	r1, [r4, #16]
 800e178:	4650      	mov	r0, sl
 800e17a:	f7fe fbf5 	bl	800c968 <_free_r>
 800e17e:	230c      	movs	r3, #12
 800e180:	f8ca 3000 	str.w	r3, [sl]
 800e184:	89a3      	ldrh	r3, [r4, #12]
 800e186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e18a:	81a3      	strh	r3, [r4, #12]
 800e18c:	f04f 30ff 	mov.w	r0, #4294967295
 800e190:	e7e9      	b.n	800e166 <__ssputs_r+0x8a>
	...

0800e194 <_svfiprintf_r>:
 800e194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e198:	4698      	mov	r8, r3
 800e19a:	898b      	ldrh	r3, [r1, #12]
 800e19c:	061b      	lsls	r3, r3, #24
 800e19e:	b09d      	sub	sp, #116	@ 0x74
 800e1a0:	4607      	mov	r7, r0
 800e1a2:	460d      	mov	r5, r1
 800e1a4:	4614      	mov	r4, r2
 800e1a6:	d510      	bpl.n	800e1ca <_svfiprintf_r+0x36>
 800e1a8:	690b      	ldr	r3, [r1, #16]
 800e1aa:	b973      	cbnz	r3, 800e1ca <_svfiprintf_r+0x36>
 800e1ac:	2140      	movs	r1, #64	@ 0x40
 800e1ae:	f7fe fc4f 	bl	800ca50 <_malloc_r>
 800e1b2:	6028      	str	r0, [r5, #0]
 800e1b4:	6128      	str	r0, [r5, #16]
 800e1b6:	b930      	cbnz	r0, 800e1c6 <_svfiprintf_r+0x32>
 800e1b8:	230c      	movs	r3, #12
 800e1ba:	603b      	str	r3, [r7, #0]
 800e1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c0:	b01d      	add	sp, #116	@ 0x74
 800e1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c6:	2340      	movs	r3, #64	@ 0x40
 800e1c8:	616b      	str	r3, [r5, #20]
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1ce:	2320      	movs	r3, #32
 800e1d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1d8:	2330      	movs	r3, #48	@ 0x30
 800e1da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e378 <_svfiprintf_r+0x1e4>
 800e1de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1e2:	f04f 0901 	mov.w	r9, #1
 800e1e6:	4623      	mov	r3, r4
 800e1e8:	469a      	mov	sl, r3
 800e1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ee:	b10a      	cbz	r2, 800e1f4 <_svfiprintf_r+0x60>
 800e1f0:	2a25      	cmp	r2, #37	@ 0x25
 800e1f2:	d1f9      	bne.n	800e1e8 <_svfiprintf_r+0x54>
 800e1f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e1f8:	d00b      	beq.n	800e212 <_svfiprintf_r+0x7e>
 800e1fa:	465b      	mov	r3, fp
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	4629      	mov	r1, r5
 800e200:	4638      	mov	r0, r7
 800e202:	f7ff ff6b 	bl	800e0dc <__ssputs_r>
 800e206:	3001      	adds	r0, #1
 800e208:	f000 80a7 	beq.w	800e35a <_svfiprintf_r+0x1c6>
 800e20c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e20e:	445a      	add	r2, fp
 800e210:	9209      	str	r2, [sp, #36]	@ 0x24
 800e212:	f89a 3000 	ldrb.w	r3, [sl]
 800e216:	2b00      	cmp	r3, #0
 800e218:	f000 809f 	beq.w	800e35a <_svfiprintf_r+0x1c6>
 800e21c:	2300      	movs	r3, #0
 800e21e:	f04f 32ff 	mov.w	r2, #4294967295
 800e222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e226:	f10a 0a01 	add.w	sl, sl, #1
 800e22a:	9304      	str	r3, [sp, #16]
 800e22c:	9307      	str	r3, [sp, #28]
 800e22e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e232:	931a      	str	r3, [sp, #104]	@ 0x68
 800e234:	4654      	mov	r4, sl
 800e236:	2205      	movs	r2, #5
 800e238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e23c:	484e      	ldr	r0, [pc, #312]	@ (800e378 <_svfiprintf_r+0x1e4>)
 800e23e:	f7f1 ffe7 	bl	8000210 <memchr>
 800e242:	9a04      	ldr	r2, [sp, #16]
 800e244:	b9d8      	cbnz	r0, 800e27e <_svfiprintf_r+0xea>
 800e246:	06d0      	lsls	r0, r2, #27
 800e248:	bf44      	itt	mi
 800e24a:	2320      	movmi	r3, #32
 800e24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e250:	0711      	lsls	r1, r2, #28
 800e252:	bf44      	itt	mi
 800e254:	232b      	movmi	r3, #43	@ 0x2b
 800e256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e25a:	f89a 3000 	ldrb.w	r3, [sl]
 800e25e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e260:	d015      	beq.n	800e28e <_svfiprintf_r+0xfa>
 800e262:	9a07      	ldr	r2, [sp, #28]
 800e264:	4654      	mov	r4, sl
 800e266:	2000      	movs	r0, #0
 800e268:	f04f 0c0a 	mov.w	ip, #10
 800e26c:	4621      	mov	r1, r4
 800e26e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e272:	3b30      	subs	r3, #48	@ 0x30
 800e274:	2b09      	cmp	r3, #9
 800e276:	d94b      	bls.n	800e310 <_svfiprintf_r+0x17c>
 800e278:	b1b0      	cbz	r0, 800e2a8 <_svfiprintf_r+0x114>
 800e27a:	9207      	str	r2, [sp, #28]
 800e27c:	e014      	b.n	800e2a8 <_svfiprintf_r+0x114>
 800e27e:	eba0 0308 	sub.w	r3, r0, r8
 800e282:	fa09 f303 	lsl.w	r3, r9, r3
 800e286:	4313      	orrs	r3, r2
 800e288:	9304      	str	r3, [sp, #16]
 800e28a:	46a2      	mov	sl, r4
 800e28c:	e7d2      	b.n	800e234 <_svfiprintf_r+0xa0>
 800e28e:	9b03      	ldr	r3, [sp, #12]
 800e290:	1d19      	adds	r1, r3, #4
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	9103      	str	r1, [sp, #12]
 800e296:	2b00      	cmp	r3, #0
 800e298:	bfbb      	ittet	lt
 800e29a:	425b      	neglt	r3, r3
 800e29c:	f042 0202 	orrlt.w	r2, r2, #2
 800e2a0:	9307      	strge	r3, [sp, #28]
 800e2a2:	9307      	strlt	r3, [sp, #28]
 800e2a4:	bfb8      	it	lt
 800e2a6:	9204      	strlt	r2, [sp, #16]
 800e2a8:	7823      	ldrb	r3, [r4, #0]
 800e2aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e2ac:	d10a      	bne.n	800e2c4 <_svfiprintf_r+0x130>
 800e2ae:	7863      	ldrb	r3, [r4, #1]
 800e2b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2b2:	d132      	bne.n	800e31a <_svfiprintf_r+0x186>
 800e2b4:	9b03      	ldr	r3, [sp, #12]
 800e2b6:	1d1a      	adds	r2, r3, #4
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	9203      	str	r2, [sp, #12]
 800e2bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2c0:	3402      	adds	r4, #2
 800e2c2:	9305      	str	r3, [sp, #20]
 800e2c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e388 <_svfiprintf_r+0x1f4>
 800e2c8:	7821      	ldrb	r1, [r4, #0]
 800e2ca:	2203      	movs	r2, #3
 800e2cc:	4650      	mov	r0, sl
 800e2ce:	f7f1 ff9f 	bl	8000210 <memchr>
 800e2d2:	b138      	cbz	r0, 800e2e4 <_svfiprintf_r+0x150>
 800e2d4:	9b04      	ldr	r3, [sp, #16]
 800e2d6:	eba0 000a 	sub.w	r0, r0, sl
 800e2da:	2240      	movs	r2, #64	@ 0x40
 800e2dc:	4082      	lsls	r2, r0
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	3401      	adds	r4, #1
 800e2e2:	9304      	str	r3, [sp, #16]
 800e2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2e8:	4824      	ldr	r0, [pc, #144]	@ (800e37c <_svfiprintf_r+0x1e8>)
 800e2ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2ee:	2206      	movs	r2, #6
 800e2f0:	f7f1 ff8e 	bl	8000210 <memchr>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d036      	beq.n	800e366 <_svfiprintf_r+0x1d2>
 800e2f8:	4b21      	ldr	r3, [pc, #132]	@ (800e380 <_svfiprintf_r+0x1ec>)
 800e2fa:	bb1b      	cbnz	r3, 800e344 <_svfiprintf_r+0x1b0>
 800e2fc:	9b03      	ldr	r3, [sp, #12]
 800e2fe:	3307      	adds	r3, #7
 800e300:	f023 0307 	bic.w	r3, r3, #7
 800e304:	3308      	adds	r3, #8
 800e306:	9303      	str	r3, [sp, #12]
 800e308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e30a:	4433      	add	r3, r6
 800e30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e30e:	e76a      	b.n	800e1e6 <_svfiprintf_r+0x52>
 800e310:	fb0c 3202 	mla	r2, ip, r2, r3
 800e314:	460c      	mov	r4, r1
 800e316:	2001      	movs	r0, #1
 800e318:	e7a8      	b.n	800e26c <_svfiprintf_r+0xd8>
 800e31a:	2300      	movs	r3, #0
 800e31c:	3401      	adds	r4, #1
 800e31e:	9305      	str	r3, [sp, #20]
 800e320:	4619      	mov	r1, r3
 800e322:	f04f 0c0a 	mov.w	ip, #10
 800e326:	4620      	mov	r0, r4
 800e328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e32c:	3a30      	subs	r2, #48	@ 0x30
 800e32e:	2a09      	cmp	r2, #9
 800e330:	d903      	bls.n	800e33a <_svfiprintf_r+0x1a6>
 800e332:	2b00      	cmp	r3, #0
 800e334:	d0c6      	beq.n	800e2c4 <_svfiprintf_r+0x130>
 800e336:	9105      	str	r1, [sp, #20]
 800e338:	e7c4      	b.n	800e2c4 <_svfiprintf_r+0x130>
 800e33a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e33e:	4604      	mov	r4, r0
 800e340:	2301      	movs	r3, #1
 800e342:	e7f0      	b.n	800e326 <_svfiprintf_r+0x192>
 800e344:	ab03      	add	r3, sp, #12
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	462a      	mov	r2, r5
 800e34a:	4b0e      	ldr	r3, [pc, #56]	@ (800e384 <_svfiprintf_r+0x1f0>)
 800e34c:	a904      	add	r1, sp, #16
 800e34e:	4638      	mov	r0, r7
 800e350:	f7fc fbd0 	bl	800aaf4 <_printf_float>
 800e354:	1c42      	adds	r2, r0, #1
 800e356:	4606      	mov	r6, r0
 800e358:	d1d6      	bne.n	800e308 <_svfiprintf_r+0x174>
 800e35a:	89ab      	ldrh	r3, [r5, #12]
 800e35c:	065b      	lsls	r3, r3, #25
 800e35e:	f53f af2d 	bmi.w	800e1bc <_svfiprintf_r+0x28>
 800e362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e364:	e72c      	b.n	800e1c0 <_svfiprintf_r+0x2c>
 800e366:	ab03      	add	r3, sp, #12
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	462a      	mov	r2, r5
 800e36c:	4b05      	ldr	r3, [pc, #20]	@ (800e384 <_svfiprintf_r+0x1f0>)
 800e36e:	a904      	add	r1, sp, #16
 800e370:	4638      	mov	r0, r7
 800e372:	f7fc fe57 	bl	800b024 <_printf_i>
 800e376:	e7ed      	b.n	800e354 <_svfiprintf_r+0x1c0>
 800e378:	08010ec0 	.word	0x08010ec0
 800e37c:	08010eca 	.word	0x08010eca
 800e380:	0800aaf5 	.word	0x0800aaf5
 800e384:	0800e0dd 	.word	0x0800e0dd
 800e388:	08010ec6 	.word	0x08010ec6

0800e38c <__sfputc_r>:
 800e38c:	6893      	ldr	r3, [r2, #8]
 800e38e:	3b01      	subs	r3, #1
 800e390:	2b00      	cmp	r3, #0
 800e392:	b410      	push	{r4}
 800e394:	6093      	str	r3, [r2, #8]
 800e396:	da08      	bge.n	800e3aa <__sfputc_r+0x1e>
 800e398:	6994      	ldr	r4, [r2, #24]
 800e39a:	42a3      	cmp	r3, r4
 800e39c:	db01      	blt.n	800e3a2 <__sfputc_r+0x16>
 800e39e:	290a      	cmp	r1, #10
 800e3a0:	d103      	bne.n	800e3aa <__sfputc_r+0x1e>
 800e3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3a6:	f000 ba53 	b.w	800e850 <__swbuf_r>
 800e3aa:	6813      	ldr	r3, [r2, #0]
 800e3ac:	1c58      	adds	r0, r3, #1
 800e3ae:	6010      	str	r0, [r2, #0]
 800e3b0:	7019      	strb	r1, [r3, #0]
 800e3b2:	4608      	mov	r0, r1
 800e3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3b8:	4770      	bx	lr

0800e3ba <__sfputs_r>:
 800e3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3bc:	4606      	mov	r6, r0
 800e3be:	460f      	mov	r7, r1
 800e3c0:	4614      	mov	r4, r2
 800e3c2:	18d5      	adds	r5, r2, r3
 800e3c4:	42ac      	cmp	r4, r5
 800e3c6:	d101      	bne.n	800e3cc <__sfputs_r+0x12>
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	e007      	b.n	800e3dc <__sfputs_r+0x22>
 800e3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3d0:	463a      	mov	r2, r7
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f7ff ffda 	bl	800e38c <__sfputc_r>
 800e3d8:	1c43      	adds	r3, r0, #1
 800e3da:	d1f3      	bne.n	800e3c4 <__sfputs_r+0xa>
 800e3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3e0 <_vfiprintf_r>:
 800e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e4:	460d      	mov	r5, r1
 800e3e6:	b09d      	sub	sp, #116	@ 0x74
 800e3e8:	4614      	mov	r4, r2
 800e3ea:	4698      	mov	r8, r3
 800e3ec:	4606      	mov	r6, r0
 800e3ee:	b118      	cbz	r0, 800e3f8 <_vfiprintf_r+0x18>
 800e3f0:	6a03      	ldr	r3, [r0, #32]
 800e3f2:	b90b      	cbnz	r3, 800e3f8 <_vfiprintf_r+0x18>
 800e3f4:	f7fd f9d6 	bl	800b7a4 <__sinit>
 800e3f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3fa:	07d9      	lsls	r1, r3, #31
 800e3fc:	d405      	bmi.n	800e40a <_vfiprintf_r+0x2a>
 800e3fe:	89ab      	ldrh	r3, [r5, #12]
 800e400:	059a      	lsls	r2, r3, #22
 800e402:	d402      	bmi.n	800e40a <_vfiprintf_r+0x2a>
 800e404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e406:	f7fd fc3a 	bl	800bc7e <__retarget_lock_acquire_recursive>
 800e40a:	89ab      	ldrh	r3, [r5, #12]
 800e40c:	071b      	lsls	r3, r3, #28
 800e40e:	d501      	bpl.n	800e414 <_vfiprintf_r+0x34>
 800e410:	692b      	ldr	r3, [r5, #16]
 800e412:	b99b      	cbnz	r3, 800e43c <_vfiprintf_r+0x5c>
 800e414:	4629      	mov	r1, r5
 800e416:	4630      	mov	r0, r6
 800e418:	f000 fa58 	bl	800e8cc <__swsetup_r>
 800e41c:	b170      	cbz	r0, 800e43c <_vfiprintf_r+0x5c>
 800e41e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e420:	07dc      	lsls	r4, r3, #31
 800e422:	d504      	bpl.n	800e42e <_vfiprintf_r+0x4e>
 800e424:	f04f 30ff 	mov.w	r0, #4294967295
 800e428:	b01d      	add	sp, #116	@ 0x74
 800e42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42e:	89ab      	ldrh	r3, [r5, #12]
 800e430:	0598      	lsls	r0, r3, #22
 800e432:	d4f7      	bmi.n	800e424 <_vfiprintf_r+0x44>
 800e434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e436:	f7fd fc23 	bl	800bc80 <__retarget_lock_release_recursive>
 800e43a:	e7f3      	b.n	800e424 <_vfiprintf_r+0x44>
 800e43c:	2300      	movs	r3, #0
 800e43e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e440:	2320      	movs	r3, #32
 800e442:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e446:	f8cd 800c 	str.w	r8, [sp, #12]
 800e44a:	2330      	movs	r3, #48	@ 0x30
 800e44c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e5fc <_vfiprintf_r+0x21c>
 800e450:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e454:	f04f 0901 	mov.w	r9, #1
 800e458:	4623      	mov	r3, r4
 800e45a:	469a      	mov	sl, r3
 800e45c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e460:	b10a      	cbz	r2, 800e466 <_vfiprintf_r+0x86>
 800e462:	2a25      	cmp	r2, #37	@ 0x25
 800e464:	d1f9      	bne.n	800e45a <_vfiprintf_r+0x7a>
 800e466:	ebba 0b04 	subs.w	fp, sl, r4
 800e46a:	d00b      	beq.n	800e484 <_vfiprintf_r+0xa4>
 800e46c:	465b      	mov	r3, fp
 800e46e:	4622      	mov	r2, r4
 800e470:	4629      	mov	r1, r5
 800e472:	4630      	mov	r0, r6
 800e474:	f7ff ffa1 	bl	800e3ba <__sfputs_r>
 800e478:	3001      	adds	r0, #1
 800e47a:	f000 80a7 	beq.w	800e5cc <_vfiprintf_r+0x1ec>
 800e47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e480:	445a      	add	r2, fp
 800e482:	9209      	str	r2, [sp, #36]	@ 0x24
 800e484:	f89a 3000 	ldrb.w	r3, [sl]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 809f 	beq.w	800e5cc <_vfiprintf_r+0x1ec>
 800e48e:	2300      	movs	r3, #0
 800e490:	f04f 32ff 	mov.w	r2, #4294967295
 800e494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e498:	f10a 0a01 	add.w	sl, sl, #1
 800e49c:	9304      	str	r3, [sp, #16]
 800e49e:	9307      	str	r3, [sp, #28]
 800e4a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4a6:	4654      	mov	r4, sl
 800e4a8:	2205      	movs	r2, #5
 800e4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ae:	4853      	ldr	r0, [pc, #332]	@ (800e5fc <_vfiprintf_r+0x21c>)
 800e4b0:	f7f1 feae 	bl	8000210 <memchr>
 800e4b4:	9a04      	ldr	r2, [sp, #16]
 800e4b6:	b9d8      	cbnz	r0, 800e4f0 <_vfiprintf_r+0x110>
 800e4b8:	06d1      	lsls	r1, r2, #27
 800e4ba:	bf44      	itt	mi
 800e4bc:	2320      	movmi	r3, #32
 800e4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4c2:	0713      	lsls	r3, r2, #28
 800e4c4:	bf44      	itt	mi
 800e4c6:	232b      	movmi	r3, #43	@ 0x2b
 800e4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e4d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4d2:	d015      	beq.n	800e500 <_vfiprintf_r+0x120>
 800e4d4:	9a07      	ldr	r2, [sp, #28]
 800e4d6:	4654      	mov	r4, sl
 800e4d8:	2000      	movs	r0, #0
 800e4da:	f04f 0c0a 	mov.w	ip, #10
 800e4de:	4621      	mov	r1, r4
 800e4e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4e4:	3b30      	subs	r3, #48	@ 0x30
 800e4e6:	2b09      	cmp	r3, #9
 800e4e8:	d94b      	bls.n	800e582 <_vfiprintf_r+0x1a2>
 800e4ea:	b1b0      	cbz	r0, 800e51a <_vfiprintf_r+0x13a>
 800e4ec:	9207      	str	r2, [sp, #28]
 800e4ee:	e014      	b.n	800e51a <_vfiprintf_r+0x13a>
 800e4f0:	eba0 0308 	sub.w	r3, r0, r8
 800e4f4:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	9304      	str	r3, [sp, #16]
 800e4fc:	46a2      	mov	sl, r4
 800e4fe:	e7d2      	b.n	800e4a6 <_vfiprintf_r+0xc6>
 800e500:	9b03      	ldr	r3, [sp, #12]
 800e502:	1d19      	adds	r1, r3, #4
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	9103      	str	r1, [sp, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	bfbb      	ittet	lt
 800e50c:	425b      	neglt	r3, r3
 800e50e:	f042 0202 	orrlt.w	r2, r2, #2
 800e512:	9307      	strge	r3, [sp, #28]
 800e514:	9307      	strlt	r3, [sp, #28]
 800e516:	bfb8      	it	lt
 800e518:	9204      	strlt	r2, [sp, #16]
 800e51a:	7823      	ldrb	r3, [r4, #0]
 800e51c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e51e:	d10a      	bne.n	800e536 <_vfiprintf_r+0x156>
 800e520:	7863      	ldrb	r3, [r4, #1]
 800e522:	2b2a      	cmp	r3, #42	@ 0x2a
 800e524:	d132      	bne.n	800e58c <_vfiprintf_r+0x1ac>
 800e526:	9b03      	ldr	r3, [sp, #12]
 800e528:	1d1a      	adds	r2, r3, #4
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	9203      	str	r2, [sp, #12]
 800e52e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e532:	3402      	adds	r4, #2
 800e534:	9305      	str	r3, [sp, #20]
 800e536:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e60c <_vfiprintf_r+0x22c>
 800e53a:	7821      	ldrb	r1, [r4, #0]
 800e53c:	2203      	movs	r2, #3
 800e53e:	4650      	mov	r0, sl
 800e540:	f7f1 fe66 	bl	8000210 <memchr>
 800e544:	b138      	cbz	r0, 800e556 <_vfiprintf_r+0x176>
 800e546:	9b04      	ldr	r3, [sp, #16]
 800e548:	eba0 000a 	sub.w	r0, r0, sl
 800e54c:	2240      	movs	r2, #64	@ 0x40
 800e54e:	4082      	lsls	r2, r0
 800e550:	4313      	orrs	r3, r2
 800e552:	3401      	adds	r4, #1
 800e554:	9304      	str	r3, [sp, #16]
 800e556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e55a:	4829      	ldr	r0, [pc, #164]	@ (800e600 <_vfiprintf_r+0x220>)
 800e55c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e560:	2206      	movs	r2, #6
 800e562:	f7f1 fe55 	bl	8000210 <memchr>
 800e566:	2800      	cmp	r0, #0
 800e568:	d03f      	beq.n	800e5ea <_vfiprintf_r+0x20a>
 800e56a:	4b26      	ldr	r3, [pc, #152]	@ (800e604 <_vfiprintf_r+0x224>)
 800e56c:	bb1b      	cbnz	r3, 800e5b6 <_vfiprintf_r+0x1d6>
 800e56e:	9b03      	ldr	r3, [sp, #12]
 800e570:	3307      	adds	r3, #7
 800e572:	f023 0307 	bic.w	r3, r3, #7
 800e576:	3308      	adds	r3, #8
 800e578:	9303      	str	r3, [sp, #12]
 800e57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e57c:	443b      	add	r3, r7
 800e57e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e580:	e76a      	b.n	800e458 <_vfiprintf_r+0x78>
 800e582:	fb0c 3202 	mla	r2, ip, r2, r3
 800e586:	460c      	mov	r4, r1
 800e588:	2001      	movs	r0, #1
 800e58a:	e7a8      	b.n	800e4de <_vfiprintf_r+0xfe>
 800e58c:	2300      	movs	r3, #0
 800e58e:	3401      	adds	r4, #1
 800e590:	9305      	str	r3, [sp, #20]
 800e592:	4619      	mov	r1, r3
 800e594:	f04f 0c0a 	mov.w	ip, #10
 800e598:	4620      	mov	r0, r4
 800e59a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e59e:	3a30      	subs	r2, #48	@ 0x30
 800e5a0:	2a09      	cmp	r2, #9
 800e5a2:	d903      	bls.n	800e5ac <_vfiprintf_r+0x1cc>
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d0c6      	beq.n	800e536 <_vfiprintf_r+0x156>
 800e5a8:	9105      	str	r1, [sp, #20]
 800e5aa:	e7c4      	b.n	800e536 <_vfiprintf_r+0x156>
 800e5ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e7f0      	b.n	800e598 <_vfiprintf_r+0x1b8>
 800e5b6:	ab03      	add	r3, sp, #12
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	462a      	mov	r2, r5
 800e5bc:	4b12      	ldr	r3, [pc, #72]	@ (800e608 <_vfiprintf_r+0x228>)
 800e5be:	a904      	add	r1, sp, #16
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	f7fc fa97 	bl	800aaf4 <_printf_float>
 800e5c6:	4607      	mov	r7, r0
 800e5c8:	1c78      	adds	r0, r7, #1
 800e5ca:	d1d6      	bne.n	800e57a <_vfiprintf_r+0x19a>
 800e5cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ce:	07d9      	lsls	r1, r3, #31
 800e5d0:	d405      	bmi.n	800e5de <_vfiprintf_r+0x1fe>
 800e5d2:	89ab      	ldrh	r3, [r5, #12]
 800e5d4:	059a      	lsls	r2, r3, #22
 800e5d6:	d402      	bmi.n	800e5de <_vfiprintf_r+0x1fe>
 800e5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5da:	f7fd fb51 	bl	800bc80 <__retarget_lock_release_recursive>
 800e5de:	89ab      	ldrh	r3, [r5, #12]
 800e5e0:	065b      	lsls	r3, r3, #25
 800e5e2:	f53f af1f 	bmi.w	800e424 <_vfiprintf_r+0x44>
 800e5e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5e8:	e71e      	b.n	800e428 <_vfiprintf_r+0x48>
 800e5ea:	ab03      	add	r3, sp, #12
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	462a      	mov	r2, r5
 800e5f0:	4b05      	ldr	r3, [pc, #20]	@ (800e608 <_vfiprintf_r+0x228>)
 800e5f2:	a904      	add	r1, sp, #16
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	f7fc fd15 	bl	800b024 <_printf_i>
 800e5fa:	e7e4      	b.n	800e5c6 <_vfiprintf_r+0x1e6>
 800e5fc:	08010ec0 	.word	0x08010ec0
 800e600:	08010eca 	.word	0x08010eca
 800e604:	0800aaf5 	.word	0x0800aaf5
 800e608:	0800e3bb 	.word	0x0800e3bb
 800e60c:	08010ec6 	.word	0x08010ec6

0800e610 <__sflush_r>:
 800e610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e618:	0716      	lsls	r6, r2, #28
 800e61a:	4605      	mov	r5, r0
 800e61c:	460c      	mov	r4, r1
 800e61e:	d454      	bmi.n	800e6ca <__sflush_r+0xba>
 800e620:	684b      	ldr	r3, [r1, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	dc02      	bgt.n	800e62c <__sflush_r+0x1c>
 800e626:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e628:	2b00      	cmp	r3, #0
 800e62a:	dd48      	ble.n	800e6be <__sflush_r+0xae>
 800e62c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e62e:	2e00      	cmp	r6, #0
 800e630:	d045      	beq.n	800e6be <__sflush_r+0xae>
 800e632:	2300      	movs	r3, #0
 800e634:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e638:	682f      	ldr	r7, [r5, #0]
 800e63a:	6a21      	ldr	r1, [r4, #32]
 800e63c:	602b      	str	r3, [r5, #0]
 800e63e:	d030      	beq.n	800e6a2 <__sflush_r+0x92>
 800e640:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	0759      	lsls	r1, r3, #29
 800e646:	d505      	bpl.n	800e654 <__sflush_r+0x44>
 800e648:	6863      	ldr	r3, [r4, #4]
 800e64a:	1ad2      	subs	r2, r2, r3
 800e64c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e64e:	b10b      	cbz	r3, 800e654 <__sflush_r+0x44>
 800e650:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e652:	1ad2      	subs	r2, r2, r3
 800e654:	2300      	movs	r3, #0
 800e656:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e658:	6a21      	ldr	r1, [r4, #32]
 800e65a:	4628      	mov	r0, r5
 800e65c:	47b0      	blx	r6
 800e65e:	1c43      	adds	r3, r0, #1
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	d106      	bne.n	800e672 <__sflush_r+0x62>
 800e664:	6829      	ldr	r1, [r5, #0]
 800e666:	291d      	cmp	r1, #29
 800e668:	d82b      	bhi.n	800e6c2 <__sflush_r+0xb2>
 800e66a:	4a2a      	ldr	r2, [pc, #168]	@ (800e714 <__sflush_r+0x104>)
 800e66c:	410a      	asrs	r2, r1
 800e66e:	07d6      	lsls	r6, r2, #31
 800e670:	d427      	bmi.n	800e6c2 <__sflush_r+0xb2>
 800e672:	2200      	movs	r2, #0
 800e674:	6062      	str	r2, [r4, #4]
 800e676:	04d9      	lsls	r1, r3, #19
 800e678:	6922      	ldr	r2, [r4, #16]
 800e67a:	6022      	str	r2, [r4, #0]
 800e67c:	d504      	bpl.n	800e688 <__sflush_r+0x78>
 800e67e:	1c42      	adds	r2, r0, #1
 800e680:	d101      	bne.n	800e686 <__sflush_r+0x76>
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	b903      	cbnz	r3, 800e688 <__sflush_r+0x78>
 800e686:	6560      	str	r0, [r4, #84]	@ 0x54
 800e688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e68a:	602f      	str	r7, [r5, #0]
 800e68c:	b1b9      	cbz	r1, 800e6be <__sflush_r+0xae>
 800e68e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e692:	4299      	cmp	r1, r3
 800e694:	d002      	beq.n	800e69c <__sflush_r+0x8c>
 800e696:	4628      	mov	r0, r5
 800e698:	f7fe f966 	bl	800c968 <_free_r>
 800e69c:	2300      	movs	r3, #0
 800e69e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6a0:	e00d      	b.n	800e6be <__sflush_r+0xae>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	47b0      	blx	r6
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	1c50      	adds	r0, r2, #1
 800e6ac:	d1c9      	bne.n	800e642 <__sflush_r+0x32>
 800e6ae:	682b      	ldr	r3, [r5, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d0c6      	beq.n	800e642 <__sflush_r+0x32>
 800e6b4:	2b1d      	cmp	r3, #29
 800e6b6:	d001      	beq.n	800e6bc <__sflush_r+0xac>
 800e6b8:	2b16      	cmp	r3, #22
 800e6ba:	d11e      	bne.n	800e6fa <__sflush_r+0xea>
 800e6bc:	602f      	str	r7, [r5, #0]
 800e6be:	2000      	movs	r0, #0
 800e6c0:	e022      	b.n	800e708 <__sflush_r+0xf8>
 800e6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c6:	b21b      	sxth	r3, r3
 800e6c8:	e01b      	b.n	800e702 <__sflush_r+0xf2>
 800e6ca:	690f      	ldr	r7, [r1, #16]
 800e6cc:	2f00      	cmp	r7, #0
 800e6ce:	d0f6      	beq.n	800e6be <__sflush_r+0xae>
 800e6d0:	0793      	lsls	r3, r2, #30
 800e6d2:	680e      	ldr	r6, [r1, #0]
 800e6d4:	bf08      	it	eq
 800e6d6:	694b      	ldreq	r3, [r1, #20]
 800e6d8:	600f      	str	r7, [r1, #0]
 800e6da:	bf18      	it	ne
 800e6dc:	2300      	movne	r3, #0
 800e6de:	eba6 0807 	sub.w	r8, r6, r7
 800e6e2:	608b      	str	r3, [r1, #8]
 800e6e4:	f1b8 0f00 	cmp.w	r8, #0
 800e6e8:	dde9      	ble.n	800e6be <__sflush_r+0xae>
 800e6ea:	6a21      	ldr	r1, [r4, #32]
 800e6ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6ee:	4643      	mov	r3, r8
 800e6f0:	463a      	mov	r2, r7
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	47b0      	blx	r6
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	dc08      	bgt.n	800e70c <__sflush_r+0xfc>
 800e6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e702:	81a3      	strh	r3, [r4, #12]
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e70c:	4407      	add	r7, r0
 800e70e:	eba8 0800 	sub.w	r8, r8, r0
 800e712:	e7e7      	b.n	800e6e4 <__sflush_r+0xd4>
 800e714:	dfbffffe 	.word	0xdfbffffe

0800e718 <_fflush_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	690b      	ldr	r3, [r1, #16]
 800e71c:	4605      	mov	r5, r0
 800e71e:	460c      	mov	r4, r1
 800e720:	b913      	cbnz	r3, 800e728 <_fflush_r+0x10>
 800e722:	2500      	movs	r5, #0
 800e724:	4628      	mov	r0, r5
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	b118      	cbz	r0, 800e732 <_fflush_r+0x1a>
 800e72a:	6a03      	ldr	r3, [r0, #32]
 800e72c:	b90b      	cbnz	r3, 800e732 <_fflush_r+0x1a>
 800e72e:	f7fd f839 	bl	800b7a4 <__sinit>
 800e732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d0f3      	beq.n	800e722 <_fflush_r+0xa>
 800e73a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e73c:	07d0      	lsls	r0, r2, #31
 800e73e:	d404      	bmi.n	800e74a <_fflush_r+0x32>
 800e740:	0599      	lsls	r1, r3, #22
 800e742:	d402      	bmi.n	800e74a <_fflush_r+0x32>
 800e744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e746:	f7fd fa9a 	bl	800bc7e <__retarget_lock_acquire_recursive>
 800e74a:	4628      	mov	r0, r5
 800e74c:	4621      	mov	r1, r4
 800e74e:	f7ff ff5f 	bl	800e610 <__sflush_r>
 800e752:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e754:	07da      	lsls	r2, r3, #31
 800e756:	4605      	mov	r5, r0
 800e758:	d4e4      	bmi.n	800e724 <_fflush_r+0xc>
 800e75a:	89a3      	ldrh	r3, [r4, #12]
 800e75c:	059b      	lsls	r3, r3, #22
 800e75e:	d4e1      	bmi.n	800e724 <_fflush_r+0xc>
 800e760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e762:	f7fd fa8d 	bl	800bc80 <__retarget_lock_release_recursive>
 800e766:	e7dd      	b.n	800e724 <_fflush_r+0xc>

0800e768 <fiprintf>:
 800e768:	b40e      	push	{r1, r2, r3}
 800e76a:	b503      	push	{r0, r1, lr}
 800e76c:	4601      	mov	r1, r0
 800e76e:	ab03      	add	r3, sp, #12
 800e770:	4805      	ldr	r0, [pc, #20]	@ (800e788 <fiprintf+0x20>)
 800e772:	f853 2b04 	ldr.w	r2, [r3], #4
 800e776:	6800      	ldr	r0, [r0, #0]
 800e778:	9301      	str	r3, [sp, #4]
 800e77a:	f7ff fe31 	bl	800e3e0 <_vfiprintf_r>
 800e77e:	b002      	add	sp, #8
 800e780:	f85d eb04 	ldr.w	lr, [sp], #4
 800e784:	b003      	add	sp, #12
 800e786:	4770      	bx	lr
 800e788:	20000044 	.word	0x20000044

0800e78c <__swhatbuf_r>:
 800e78c:	b570      	push	{r4, r5, r6, lr}
 800e78e:	460c      	mov	r4, r1
 800e790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e794:	2900      	cmp	r1, #0
 800e796:	b096      	sub	sp, #88	@ 0x58
 800e798:	4615      	mov	r5, r2
 800e79a:	461e      	mov	r6, r3
 800e79c:	da0d      	bge.n	800e7ba <__swhatbuf_r+0x2e>
 800e79e:	89a3      	ldrh	r3, [r4, #12]
 800e7a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7a4:	f04f 0100 	mov.w	r1, #0
 800e7a8:	bf14      	ite	ne
 800e7aa:	2340      	movne	r3, #64	@ 0x40
 800e7ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	6031      	str	r1, [r6, #0]
 800e7b4:	602b      	str	r3, [r5, #0]
 800e7b6:	b016      	add	sp, #88	@ 0x58
 800e7b8:	bd70      	pop	{r4, r5, r6, pc}
 800e7ba:	466a      	mov	r2, sp
 800e7bc:	f000 f908 	bl	800e9d0 <_fstat_r>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	dbec      	blt.n	800e79e <__swhatbuf_r+0x12>
 800e7c4:	9901      	ldr	r1, [sp, #4]
 800e7c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7ce:	4259      	negs	r1, r3
 800e7d0:	4159      	adcs	r1, r3
 800e7d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7d6:	e7eb      	b.n	800e7b0 <__swhatbuf_r+0x24>

0800e7d8 <__smakebuf_r>:
 800e7d8:	898b      	ldrh	r3, [r1, #12]
 800e7da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7dc:	079d      	lsls	r5, r3, #30
 800e7de:	4606      	mov	r6, r0
 800e7e0:	460c      	mov	r4, r1
 800e7e2:	d507      	bpl.n	800e7f4 <__smakebuf_r+0x1c>
 800e7e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	6123      	str	r3, [r4, #16]
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	6163      	str	r3, [r4, #20]
 800e7f0:	b003      	add	sp, #12
 800e7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7f4:	ab01      	add	r3, sp, #4
 800e7f6:	466a      	mov	r2, sp
 800e7f8:	f7ff ffc8 	bl	800e78c <__swhatbuf_r>
 800e7fc:	9f00      	ldr	r7, [sp, #0]
 800e7fe:	4605      	mov	r5, r0
 800e800:	4639      	mov	r1, r7
 800e802:	4630      	mov	r0, r6
 800e804:	f7fe f924 	bl	800ca50 <_malloc_r>
 800e808:	b948      	cbnz	r0, 800e81e <__smakebuf_r+0x46>
 800e80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e80e:	059a      	lsls	r2, r3, #22
 800e810:	d4ee      	bmi.n	800e7f0 <__smakebuf_r+0x18>
 800e812:	f023 0303 	bic.w	r3, r3, #3
 800e816:	f043 0302 	orr.w	r3, r3, #2
 800e81a:	81a3      	strh	r3, [r4, #12]
 800e81c:	e7e2      	b.n	800e7e4 <__smakebuf_r+0xc>
 800e81e:	89a3      	ldrh	r3, [r4, #12]
 800e820:	6020      	str	r0, [r4, #0]
 800e822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e826:	81a3      	strh	r3, [r4, #12]
 800e828:	9b01      	ldr	r3, [sp, #4]
 800e82a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e82e:	b15b      	cbz	r3, 800e848 <__smakebuf_r+0x70>
 800e830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e834:	4630      	mov	r0, r6
 800e836:	f000 f8dd 	bl	800e9f4 <_isatty_r>
 800e83a:	b128      	cbz	r0, 800e848 <__smakebuf_r+0x70>
 800e83c:	89a3      	ldrh	r3, [r4, #12]
 800e83e:	f023 0303 	bic.w	r3, r3, #3
 800e842:	f043 0301 	orr.w	r3, r3, #1
 800e846:	81a3      	strh	r3, [r4, #12]
 800e848:	89a3      	ldrh	r3, [r4, #12]
 800e84a:	431d      	orrs	r5, r3
 800e84c:	81a5      	strh	r5, [r4, #12]
 800e84e:	e7cf      	b.n	800e7f0 <__smakebuf_r+0x18>

0800e850 <__swbuf_r>:
 800e850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e852:	460e      	mov	r6, r1
 800e854:	4614      	mov	r4, r2
 800e856:	4605      	mov	r5, r0
 800e858:	b118      	cbz	r0, 800e862 <__swbuf_r+0x12>
 800e85a:	6a03      	ldr	r3, [r0, #32]
 800e85c:	b90b      	cbnz	r3, 800e862 <__swbuf_r+0x12>
 800e85e:	f7fc ffa1 	bl	800b7a4 <__sinit>
 800e862:	69a3      	ldr	r3, [r4, #24]
 800e864:	60a3      	str	r3, [r4, #8]
 800e866:	89a3      	ldrh	r3, [r4, #12]
 800e868:	071a      	lsls	r2, r3, #28
 800e86a:	d501      	bpl.n	800e870 <__swbuf_r+0x20>
 800e86c:	6923      	ldr	r3, [r4, #16]
 800e86e:	b943      	cbnz	r3, 800e882 <__swbuf_r+0x32>
 800e870:	4621      	mov	r1, r4
 800e872:	4628      	mov	r0, r5
 800e874:	f000 f82a 	bl	800e8cc <__swsetup_r>
 800e878:	b118      	cbz	r0, 800e882 <__swbuf_r+0x32>
 800e87a:	f04f 37ff 	mov.w	r7, #4294967295
 800e87e:	4638      	mov	r0, r7
 800e880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	6922      	ldr	r2, [r4, #16]
 800e886:	1a98      	subs	r0, r3, r2
 800e888:	6963      	ldr	r3, [r4, #20]
 800e88a:	b2f6      	uxtb	r6, r6
 800e88c:	4283      	cmp	r3, r0
 800e88e:	4637      	mov	r7, r6
 800e890:	dc05      	bgt.n	800e89e <__swbuf_r+0x4e>
 800e892:	4621      	mov	r1, r4
 800e894:	4628      	mov	r0, r5
 800e896:	f7ff ff3f 	bl	800e718 <_fflush_r>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d1ed      	bne.n	800e87a <__swbuf_r+0x2a>
 800e89e:	68a3      	ldr	r3, [r4, #8]
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	60a3      	str	r3, [r4, #8]
 800e8a4:	6823      	ldr	r3, [r4, #0]
 800e8a6:	1c5a      	adds	r2, r3, #1
 800e8a8:	6022      	str	r2, [r4, #0]
 800e8aa:	701e      	strb	r6, [r3, #0]
 800e8ac:	6962      	ldr	r2, [r4, #20]
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d004      	beq.n	800e8be <__swbuf_r+0x6e>
 800e8b4:	89a3      	ldrh	r3, [r4, #12]
 800e8b6:	07db      	lsls	r3, r3, #31
 800e8b8:	d5e1      	bpl.n	800e87e <__swbuf_r+0x2e>
 800e8ba:	2e0a      	cmp	r6, #10
 800e8bc:	d1df      	bne.n	800e87e <__swbuf_r+0x2e>
 800e8be:	4621      	mov	r1, r4
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	f7ff ff29 	bl	800e718 <_fflush_r>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d0d9      	beq.n	800e87e <__swbuf_r+0x2e>
 800e8ca:	e7d6      	b.n	800e87a <__swbuf_r+0x2a>

0800e8cc <__swsetup_r>:
 800e8cc:	b538      	push	{r3, r4, r5, lr}
 800e8ce:	4b29      	ldr	r3, [pc, #164]	@ (800e974 <__swsetup_r+0xa8>)
 800e8d0:	4605      	mov	r5, r0
 800e8d2:	6818      	ldr	r0, [r3, #0]
 800e8d4:	460c      	mov	r4, r1
 800e8d6:	b118      	cbz	r0, 800e8e0 <__swsetup_r+0x14>
 800e8d8:	6a03      	ldr	r3, [r0, #32]
 800e8da:	b90b      	cbnz	r3, 800e8e0 <__swsetup_r+0x14>
 800e8dc:	f7fc ff62 	bl	800b7a4 <__sinit>
 800e8e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8e4:	0719      	lsls	r1, r3, #28
 800e8e6:	d422      	bmi.n	800e92e <__swsetup_r+0x62>
 800e8e8:	06da      	lsls	r2, r3, #27
 800e8ea:	d407      	bmi.n	800e8fc <__swsetup_r+0x30>
 800e8ec:	2209      	movs	r2, #9
 800e8ee:	602a      	str	r2, [r5, #0]
 800e8f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8f4:	81a3      	strh	r3, [r4, #12]
 800e8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8fa:	e033      	b.n	800e964 <__swsetup_r+0x98>
 800e8fc:	0758      	lsls	r0, r3, #29
 800e8fe:	d512      	bpl.n	800e926 <__swsetup_r+0x5a>
 800e900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e902:	b141      	cbz	r1, 800e916 <__swsetup_r+0x4a>
 800e904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e908:	4299      	cmp	r1, r3
 800e90a:	d002      	beq.n	800e912 <__swsetup_r+0x46>
 800e90c:	4628      	mov	r0, r5
 800e90e:	f7fe f82b 	bl	800c968 <_free_r>
 800e912:	2300      	movs	r3, #0
 800e914:	6363      	str	r3, [r4, #52]	@ 0x34
 800e916:	89a3      	ldrh	r3, [r4, #12]
 800e918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e91c:	81a3      	strh	r3, [r4, #12]
 800e91e:	2300      	movs	r3, #0
 800e920:	6063      	str	r3, [r4, #4]
 800e922:	6923      	ldr	r3, [r4, #16]
 800e924:	6023      	str	r3, [r4, #0]
 800e926:	89a3      	ldrh	r3, [r4, #12]
 800e928:	f043 0308 	orr.w	r3, r3, #8
 800e92c:	81a3      	strh	r3, [r4, #12]
 800e92e:	6923      	ldr	r3, [r4, #16]
 800e930:	b94b      	cbnz	r3, 800e946 <__swsetup_r+0x7a>
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e93c:	d003      	beq.n	800e946 <__swsetup_r+0x7a>
 800e93e:	4621      	mov	r1, r4
 800e940:	4628      	mov	r0, r5
 800e942:	f7ff ff49 	bl	800e7d8 <__smakebuf_r>
 800e946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e94a:	f013 0201 	ands.w	r2, r3, #1
 800e94e:	d00a      	beq.n	800e966 <__swsetup_r+0x9a>
 800e950:	2200      	movs	r2, #0
 800e952:	60a2      	str	r2, [r4, #8]
 800e954:	6962      	ldr	r2, [r4, #20]
 800e956:	4252      	negs	r2, r2
 800e958:	61a2      	str	r2, [r4, #24]
 800e95a:	6922      	ldr	r2, [r4, #16]
 800e95c:	b942      	cbnz	r2, 800e970 <__swsetup_r+0xa4>
 800e95e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e962:	d1c5      	bne.n	800e8f0 <__swsetup_r+0x24>
 800e964:	bd38      	pop	{r3, r4, r5, pc}
 800e966:	0799      	lsls	r1, r3, #30
 800e968:	bf58      	it	pl
 800e96a:	6962      	ldrpl	r2, [r4, #20]
 800e96c:	60a2      	str	r2, [r4, #8]
 800e96e:	e7f4      	b.n	800e95a <__swsetup_r+0x8e>
 800e970:	2000      	movs	r0, #0
 800e972:	e7f7      	b.n	800e964 <__swsetup_r+0x98>
 800e974:	20000044 	.word	0x20000044

0800e978 <memmove>:
 800e978:	4288      	cmp	r0, r1
 800e97a:	b510      	push	{r4, lr}
 800e97c:	eb01 0402 	add.w	r4, r1, r2
 800e980:	d902      	bls.n	800e988 <memmove+0x10>
 800e982:	4284      	cmp	r4, r0
 800e984:	4623      	mov	r3, r4
 800e986:	d807      	bhi.n	800e998 <memmove+0x20>
 800e988:	1e43      	subs	r3, r0, #1
 800e98a:	42a1      	cmp	r1, r4
 800e98c:	d008      	beq.n	800e9a0 <memmove+0x28>
 800e98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e996:	e7f8      	b.n	800e98a <memmove+0x12>
 800e998:	4402      	add	r2, r0
 800e99a:	4601      	mov	r1, r0
 800e99c:	428a      	cmp	r2, r1
 800e99e:	d100      	bne.n	800e9a2 <memmove+0x2a>
 800e9a0:	bd10      	pop	{r4, pc}
 800e9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9aa:	e7f7      	b.n	800e99c <memmove+0x24>

0800e9ac <strncmp>:
 800e9ac:	b510      	push	{r4, lr}
 800e9ae:	b16a      	cbz	r2, 800e9cc <strncmp+0x20>
 800e9b0:	3901      	subs	r1, #1
 800e9b2:	1884      	adds	r4, r0, r2
 800e9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d103      	bne.n	800e9c8 <strncmp+0x1c>
 800e9c0:	42a0      	cmp	r0, r4
 800e9c2:	d001      	beq.n	800e9c8 <strncmp+0x1c>
 800e9c4:	2a00      	cmp	r2, #0
 800e9c6:	d1f5      	bne.n	800e9b4 <strncmp+0x8>
 800e9c8:	1ad0      	subs	r0, r2, r3
 800e9ca:	bd10      	pop	{r4, pc}
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	e7fc      	b.n	800e9ca <strncmp+0x1e>

0800e9d0 <_fstat_r>:
 800e9d0:	b538      	push	{r3, r4, r5, lr}
 800e9d2:	4d07      	ldr	r5, [pc, #28]	@ (800e9f0 <_fstat_r+0x20>)
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	4608      	mov	r0, r1
 800e9da:	4611      	mov	r1, r2
 800e9dc:	602b      	str	r3, [r5, #0]
 800e9de:	f7f4 fe1f 	bl	8003620 <_fstat>
 800e9e2:	1c43      	adds	r3, r0, #1
 800e9e4:	d102      	bne.n	800e9ec <_fstat_r+0x1c>
 800e9e6:	682b      	ldr	r3, [r5, #0]
 800e9e8:	b103      	cbz	r3, 800e9ec <_fstat_r+0x1c>
 800e9ea:	6023      	str	r3, [r4, #0]
 800e9ec:	bd38      	pop	{r3, r4, r5, pc}
 800e9ee:	bf00      	nop
 800e9f0:	200010a4 	.word	0x200010a4

0800e9f4 <_isatty_r>:
 800e9f4:	b538      	push	{r3, r4, r5, lr}
 800e9f6:	4d06      	ldr	r5, [pc, #24]	@ (800ea10 <_isatty_r+0x1c>)
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	4608      	mov	r0, r1
 800e9fe:	602b      	str	r3, [r5, #0]
 800ea00:	f7f4 fe1e 	bl	8003640 <_isatty>
 800ea04:	1c43      	adds	r3, r0, #1
 800ea06:	d102      	bne.n	800ea0e <_isatty_r+0x1a>
 800ea08:	682b      	ldr	r3, [r5, #0]
 800ea0a:	b103      	cbz	r3, 800ea0e <_isatty_r+0x1a>
 800ea0c:	6023      	str	r3, [r4, #0]
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
 800ea10:	200010a4 	.word	0x200010a4

0800ea14 <_sbrk_r>:
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4d06      	ldr	r5, [pc, #24]	@ (800ea30 <_sbrk_r+0x1c>)
 800ea18:	2300      	movs	r3, #0
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	4608      	mov	r0, r1
 800ea1e:	602b      	str	r3, [r5, #0]
 800ea20:	f7f4 fe26 	bl	8003670 <_sbrk>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	d102      	bne.n	800ea2e <_sbrk_r+0x1a>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	b103      	cbz	r3, 800ea2e <_sbrk_r+0x1a>
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	bd38      	pop	{r3, r4, r5, pc}
 800ea30:	200010a4 	.word	0x200010a4

0800ea34 <memcpy>:
 800ea34:	440a      	add	r2, r1
 800ea36:	4291      	cmp	r1, r2
 800ea38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea3c:	d100      	bne.n	800ea40 <memcpy+0xc>
 800ea3e:	4770      	bx	lr
 800ea40:	b510      	push	{r4, lr}
 800ea42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea4a:	4291      	cmp	r1, r2
 800ea4c:	d1f9      	bne.n	800ea42 <memcpy+0xe>
 800ea4e:	bd10      	pop	{r4, pc}

0800ea50 <nan>:
 800ea50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ea58 <nan+0x8>
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	00000000 	.word	0x00000000
 800ea5c:	7ff80000 	.word	0x7ff80000

0800ea60 <abort>:
 800ea60:	b508      	push	{r3, lr}
 800ea62:	2006      	movs	r0, #6
 800ea64:	f000 fbc4 	bl	800f1f0 <raise>
 800ea68:	2001      	movs	r0, #1
 800ea6a:	f7f4 fda5 	bl	80035b8 <_exit>

0800ea6e <_calloc_r>:
 800ea6e:	b570      	push	{r4, r5, r6, lr}
 800ea70:	fba1 5402 	umull	r5, r4, r1, r2
 800ea74:	b93c      	cbnz	r4, 800ea86 <_calloc_r+0x18>
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7fd ffea 	bl	800ca50 <_malloc_r>
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	b928      	cbnz	r0, 800ea8c <_calloc_r+0x1e>
 800ea80:	2600      	movs	r6, #0
 800ea82:	4630      	mov	r0, r6
 800ea84:	bd70      	pop	{r4, r5, r6, pc}
 800ea86:	220c      	movs	r2, #12
 800ea88:	6002      	str	r2, [r0, #0]
 800ea8a:	e7f9      	b.n	800ea80 <_calloc_r+0x12>
 800ea8c:	462a      	mov	r2, r5
 800ea8e:	4621      	mov	r1, r4
 800ea90:	f7fd f81b 	bl	800baca <memset>
 800ea94:	e7f5      	b.n	800ea82 <_calloc_r+0x14>

0800ea96 <rshift>:
 800ea96:	6903      	ldr	r3, [r0, #16]
 800ea98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaa0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eaa4:	f100 0414 	add.w	r4, r0, #20
 800eaa8:	dd45      	ble.n	800eb36 <rshift+0xa0>
 800eaaa:	f011 011f 	ands.w	r1, r1, #31
 800eaae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eab2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eab6:	d10c      	bne.n	800ead2 <rshift+0x3c>
 800eab8:	f100 0710 	add.w	r7, r0, #16
 800eabc:	4629      	mov	r1, r5
 800eabe:	42b1      	cmp	r1, r6
 800eac0:	d334      	bcc.n	800eb2c <rshift+0x96>
 800eac2:	1a9b      	subs	r3, r3, r2
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	1eea      	subs	r2, r5, #3
 800eac8:	4296      	cmp	r6, r2
 800eaca:	bf38      	it	cc
 800eacc:	2300      	movcc	r3, #0
 800eace:	4423      	add	r3, r4
 800ead0:	e015      	b.n	800eafe <rshift+0x68>
 800ead2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ead6:	f1c1 0820 	rsb	r8, r1, #32
 800eada:	40cf      	lsrs	r7, r1
 800eadc:	f105 0e04 	add.w	lr, r5, #4
 800eae0:	46a1      	mov	r9, r4
 800eae2:	4576      	cmp	r6, lr
 800eae4:	46f4      	mov	ip, lr
 800eae6:	d815      	bhi.n	800eb14 <rshift+0x7e>
 800eae8:	1a9a      	subs	r2, r3, r2
 800eaea:	0092      	lsls	r2, r2, #2
 800eaec:	3a04      	subs	r2, #4
 800eaee:	3501      	adds	r5, #1
 800eaf0:	42ae      	cmp	r6, r5
 800eaf2:	bf38      	it	cc
 800eaf4:	2200      	movcc	r2, #0
 800eaf6:	18a3      	adds	r3, r4, r2
 800eaf8:	50a7      	str	r7, [r4, r2]
 800eafa:	b107      	cbz	r7, 800eafe <rshift+0x68>
 800eafc:	3304      	adds	r3, #4
 800eafe:	1b1a      	subs	r2, r3, r4
 800eb00:	42a3      	cmp	r3, r4
 800eb02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eb06:	bf08      	it	eq
 800eb08:	2300      	moveq	r3, #0
 800eb0a:	6102      	str	r2, [r0, #16]
 800eb0c:	bf08      	it	eq
 800eb0e:	6143      	streq	r3, [r0, #20]
 800eb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb14:	f8dc c000 	ldr.w	ip, [ip]
 800eb18:	fa0c fc08 	lsl.w	ip, ip, r8
 800eb1c:	ea4c 0707 	orr.w	r7, ip, r7
 800eb20:	f849 7b04 	str.w	r7, [r9], #4
 800eb24:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb28:	40cf      	lsrs	r7, r1
 800eb2a:	e7da      	b.n	800eae2 <rshift+0x4c>
 800eb2c:	f851 cb04 	ldr.w	ip, [r1], #4
 800eb30:	f847 cf04 	str.w	ip, [r7, #4]!
 800eb34:	e7c3      	b.n	800eabe <rshift+0x28>
 800eb36:	4623      	mov	r3, r4
 800eb38:	e7e1      	b.n	800eafe <rshift+0x68>

0800eb3a <__hexdig_fun>:
 800eb3a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eb3e:	2b09      	cmp	r3, #9
 800eb40:	d802      	bhi.n	800eb48 <__hexdig_fun+0xe>
 800eb42:	3820      	subs	r0, #32
 800eb44:	b2c0      	uxtb	r0, r0
 800eb46:	4770      	bx	lr
 800eb48:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eb4c:	2b05      	cmp	r3, #5
 800eb4e:	d801      	bhi.n	800eb54 <__hexdig_fun+0x1a>
 800eb50:	3847      	subs	r0, #71	@ 0x47
 800eb52:	e7f7      	b.n	800eb44 <__hexdig_fun+0xa>
 800eb54:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eb58:	2b05      	cmp	r3, #5
 800eb5a:	d801      	bhi.n	800eb60 <__hexdig_fun+0x26>
 800eb5c:	3827      	subs	r0, #39	@ 0x27
 800eb5e:	e7f1      	b.n	800eb44 <__hexdig_fun+0xa>
 800eb60:	2000      	movs	r0, #0
 800eb62:	4770      	bx	lr

0800eb64 <__gethex>:
 800eb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb68:	b085      	sub	sp, #20
 800eb6a:	468a      	mov	sl, r1
 800eb6c:	9302      	str	r3, [sp, #8]
 800eb6e:	680b      	ldr	r3, [r1, #0]
 800eb70:	9001      	str	r0, [sp, #4]
 800eb72:	4690      	mov	r8, r2
 800eb74:	1c9c      	adds	r4, r3, #2
 800eb76:	46a1      	mov	r9, r4
 800eb78:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eb7c:	2830      	cmp	r0, #48	@ 0x30
 800eb7e:	d0fa      	beq.n	800eb76 <__gethex+0x12>
 800eb80:	eba9 0303 	sub.w	r3, r9, r3
 800eb84:	f1a3 0b02 	sub.w	fp, r3, #2
 800eb88:	f7ff ffd7 	bl	800eb3a <__hexdig_fun>
 800eb8c:	4605      	mov	r5, r0
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d168      	bne.n	800ec64 <__gethex+0x100>
 800eb92:	49a0      	ldr	r1, [pc, #640]	@ (800ee14 <__gethex+0x2b0>)
 800eb94:	2201      	movs	r2, #1
 800eb96:	4648      	mov	r0, r9
 800eb98:	f7ff ff08 	bl	800e9ac <strncmp>
 800eb9c:	4607      	mov	r7, r0
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	d167      	bne.n	800ec72 <__gethex+0x10e>
 800eba2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eba6:	4626      	mov	r6, r4
 800eba8:	f7ff ffc7 	bl	800eb3a <__hexdig_fun>
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d062      	beq.n	800ec76 <__gethex+0x112>
 800ebb0:	4623      	mov	r3, r4
 800ebb2:	7818      	ldrb	r0, [r3, #0]
 800ebb4:	2830      	cmp	r0, #48	@ 0x30
 800ebb6:	4699      	mov	r9, r3
 800ebb8:	f103 0301 	add.w	r3, r3, #1
 800ebbc:	d0f9      	beq.n	800ebb2 <__gethex+0x4e>
 800ebbe:	f7ff ffbc 	bl	800eb3a <__hexdig_fun>
 800ebc2:	fab0 f580 	clz	r5, r0
 800ebc6:	096d      	lsrs	r5, r5, #5
 800ebc8:	f04f 0b01 	mov.w	fp, #1
 800ebcc:	464a      	mov	r2, r9
 800ebce:	4616      	mov	r6, r2
 800ebd0:	3201      	adds	r2, #1
 800ebd2:	7830      	ldrb	r0, [r6, #0]
 800ebd4:	f7ff ffb1 	bl	800eb3a <__hexdig_fun>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d1f8      	bne.n	800ebce <__gethex+0x6a>
 800ebdc:	498d      	ldr	r1, [pc, #564]	@ (800ee14 <__gethex+0x2b0>)
 800ebde:	2201      	movs	r2, #1
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	f7ff fee3 	bl	800e9ac <strncmp>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d13f      	bne.n	800ec6a <__gethex+0x106>
 800ebea:	b944      	cbnz	r4, 800ebfe <__gethex+0x9a>
 800ebec:	1c74      	adds	r4, r6, #1
 800ebee:	4622      	mov	r2, r4
 800ebf0:	4616      	mov	r6, r2
 800ebf2:	3201      	adds	r2, #1
 800ebf4:	7830      	ldrb	r0, [r6, #0]
 800ebf6:	f7ff ffa0 	bl	800eb3a <__hexdig_fun>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d1f8      	bne.n	800ebf0 <__gethex+0x8c>
 800ebfe:	1ba4      	subs	r4, r4, r6
 800ec00:	00a7      	lsls	r7, r4, #2
 800ec02:	7833      	ldrb	r3, [r6, #0]
 800ec04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ec08:	2b50      	cmp	r3, #80	@ 0x50
 800ec0a:	d13e      	bne.n	800ec8a <__gethex+0x126>
 800ec0c:	7873      	ldrb	r3, [r6, #1]
 800ec0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ec10:	d033      	beq.n	800ec7a <__gethex+0x116>
 800ec12:	2b2d      	cmp	r3, #45	@ 0x2d
 800ec14:	d034      	beq.n	800ec80 <__gethex+0x11c>
 800ec16:	1c71      	adds	r1, r6, #1
 800ec18:	2400      	movs	r4, #0
 800ec1a:	7808      	ldrb	r0, [r1, #0]
 800ec1c:	f7ff ff8d 	bl	800eb3a <__hexdig_fun>
 800ec20:	1e43      	subs	r3, r0, #1
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	2b18      	cmp	r3, #24
 800ec26:	d830      	bhi.n	800ec8a <__gethex+0x126>
 800ec28:	f1a0 0210 	sub.w	r2, r0, #16
 800ec2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec30:	f7ff ff83 	bl	800eb3a <__hexdig_fun>
 800ec34:	f100 3cff 	add.w	ip, r0, #4294967295
 800ec38:	fa5f fc8c 	uxtb.w	ip, ip
 800ec3c:	f1bc 0f18 	cmp.w	ip, #24
 800ec40:	f04f 030a 	mov.w	r3, #10
 800ec44:	d91e      	bls.n	800ec84 <__gethex+0x120>
 800ec46:	b104      	cbz	r4, 800ec4a <__gethex+0xe6>
 800ec48:	4252      	negs	r2, r2
 800ec4a:	4417      	add	r7, r2
 800ec4c:	f8ca 1000 	str.w	r1, [sl]
 800ec50:	b1ed      	cbz	r5, 800ec8e <__gethex+0x12a>
 800ec52:	f1bb 0f00 	cmp.w	fp, #0
 800ec56:	bf0c      	ite	eq
 800ec58:	2506      	moveq	r5, #6
 800ec5a:	2500      	movne	r5, #0
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	b005      	add	sp, #20
 800ec60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec64:	2500      	movs	r5, #0
 800ec66:	462c      	mov	r4, r5
 800ec68:	e7b0      	b.n	800ebcc <__gethex+0x68>
 800ec6a:	2c00      	cmp	r4, #0
 800ec6c:	d1c7      	bne.n	800ebfe <__gethex+0x9a>
 800ec6e:	4627      	mov	r7, r4
 800ec70:	e7c7      	b.n	800ec02 <__gethex+0x9e>
 800ec72:	464e      	mov	r6, r9
 800ec74:	462f      	mov	r7, r5
 800ec76:	2501      	movs	r5, #1
 800ec78:	e7c3      	b.n	800ec02 <__gethex+0x9e>
 800ec7a:	2400      	movs	r4, #0
 800ec7c:	1cb1      	adds	r1, r6, #2
 800ec7e:	e7cc      	b.n	800ec1a <__gethex+0xb6>
 800ec80:	2401      	movs	r4, #1
 800ec82:	e7fb      	b.n	800ec7c <__gethex+0x118>
 800ec84:	fb03 0002 	mla	r0, r3, r2, r0
 800ec88:	e7ce      	b.n	800ec28 <__gethex+0xc4>
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	e7de      	b.n	800ec4c <__gethex+0xe8>
 800ec8e:	eba6 0309 	sub.w	r3, r6, r9
 800ec92:	3b01      	subs	r3, #1
 800ec94:	4629      	mov	r1, r5
 800ec96:	2b07      	cmp	r3, #7
 800ec98:	dc0a      	bgt.n	800ecb0 <__gethex+0x14c>
 800ec9a:	9801      	ldr	r0, [sp, #4]
 800ec9c:	f7fd ff64 	bl	800cb68 <_Balloc>
 800eca0:	4604      	mov	r4, r0
 800eca2:	b940      	cbnz	r0, 800ecb6 <__gethex+0x152>
 800eca4:	4b5c      	ldr	r3, [pc, #368]	@ (800ee18 <__gethex+0x2b4>)
 800eca6:	4602      	mov	r2, r0
 800eca8:	21e4      	movs	r1, #228	@ 0xe4
 800ecaa:	485c      	ldr	r0, [pc, #368]	@ (800ee1c <__gethex+0x2b8>)
 800ecac:	f7fc fff0 	bl	800bc90 <__assert_func>
 800ecb0:	3101      	adds	r1, #1
 800ecb2:	105b      	asrs	r3, r3, #1
 800ecb4:	e7ef      	b.n	800ec96 <__gethex+0x132>
 800ecb6:	f100 0a14 	add.w	sl, r0, #20
 800ecba:	2300      	movs	r3, #0
 800ecbc:	4655      	mov	r5, sl
 800ecbe:	469b      	mov	fp, r3
 800ecc0:	45b1      	cmp	r9, r6
 800ecc2:	d337      	bcc.n	800ed34 <__gethex+0x1d0>
 800ecc4:	f845 bb04 	str.w	fp, [r5], #4
 800ecc8:	eba5 050a 	sub.w	r5, r5, sl
 800eccc:	10ad      	asrs	r5, r5, #2
 800ecce:	6125      	str	r5, [r4, #16]
 800ecd0:	4658      	mov	r0, fp
 800ecd2:	f7fe f83b 	bl	800cd4c <__hi0bits>
 800ecd6:	016d      	lsls	r5, r5, #5
 800ecd8:	f8d8 6000 	ldr.w	r6, [r8]
 800ecdc:	1a2d      	subs	r5, r5, r0
 800ecde:	42b5      	cmp	r5, r6
 800ece0:	dd54      	ble.n	800ed8c <__gethex+0x228>
 800ece2:	1bad      	subs	r5, r5, r6
 800ece4:	4629      	mov	r1, r5
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7fe fbcf 	bl	800d48a <__any_on>
 800ecec:	4681      	mov	r9, r0
 800ecee:	b178      	cbz	r0, 800ed10 <__gethex+0x1ac>
 800ecf0:	1e6b      	subs	r3, r5, #1
 800ecf2:	1159      	asrs	r1, r3, #5
 800ecf4:	f003 021f 	and.w	r2, r3, #31
 800ecf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ecfc:	f04f 0901 	mov.w	r9, #1
 800ed00:	fa09 f202 	lsl.w	r2, r9, r2
 800ed04:	420a      	tst	r2, r1
 800ed06:	d003      	beq.n	800ed10 <__gethex+0x1ac>
 800ed08:	454b      	cmp	r3, r9
 800ed0a:	dc36      	bgt.n	800ed7a <__gethex+0x216>
 800ed0c:	f04f 0902 	mov.w	r9, #2
 800ed10:	4629      	mov	r1, r5
 800ed12:	4620      	mov	r0, r4
 800ed14:	f7ff febf 	bl	800ea96 <rshift>
 800ed18:	442f      	add	r7, r5
 800ed1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed1e:	42bb      	cmp	r3, r7
 800ed20:	da42      	bge.n	800eda8 <__gethex+0x244>
 800ed22:	9801      	ldr	r0, [sp, #4]
 800ed24:	4621      	mov	r1, r4
 800ed26:	f7fd ff5f 	bl	800cbe8 <_Bfree>
 800ed2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	6013      	str	r3, [r2, #0]
 800ed30:	25a3      	movs	r5, #163	@ 0xa3
 800ed32:	e793      	b.n	800ec5c <__gethex+0xf8>
 800ed34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ed38:	2a2e      	cmp	r2, #46	@ 0x2e
 800ed3a:	d012      	beq.n	800ed62 <__gethex+0x1fe>
 800ed3c:	2b20      	cmp	r3, #32
 800ed3e:	d104      	bne.n	800ed4a <__gethex+0x1e6>
 800ed40:	f845 bb04 	str.w	fp, [r5], #4
 800ed44:	f04f 0b00 	mov.w	fp, #0
 800ed48:	465b      	mov	r3, fp
 800ed4a:	7830      	ldrb	r0, [r6, #0]
 800ed4c:	9303      	str	r3, [sp, #12]
 800ed4e:	f7ff fef4 	bl	800eb3a <__hexdig_fun>
 800ed52:	9b03      	ldr	r3, [sp, #12]
 800ed54:	f000 000f 	and.w	r0, r0, #15
 800ed58:	4098      	lsls	r0, r3
 800ed5a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ed5e:	3304      	adds	r3, #4
 800ed60:	e7ae      	b.n	800ecc0 <__gethex+0x15c>
 800ed62:	45b1      	cmp	r9, r6
 800ed64:	d8ea      	bhi.n	800ed3c <__gethex+0x1d8>
 800ed66:	492b      	ldr	r1, [pc, #172]	@ (800ee14 <__gethex+0x2b0>)
 800ed68:	9303      	str	r3, [sp, #12]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	f7ff fe1d 	bl	800e9ac <strncmp>
 800ed72:	9b03      	ldr	r3, [sp, #12]
 800ed74:	2800      	cmp	r0, #0
 800ed76:	d1e1      	bne.n	800ed3c <__gethex+0x1d8>
 800ed78:	e7a2      	b.n	800ecc0 <__gethex+0x15c>
 800ed7a:	1ea9      	subs	r1, r5, #2
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	f7fe fb84 	bl	800d48a <__any_on>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	d0c2      	beq.n	800ed0c <__gethex+0x1a8>
 800ed86:	f04f 0903 	mov.w	r9, #3
 800ed8a:	e7c1      	b.n	800ed10 <__gethex+0x1ac>
 800ed8c:	da09      	bge.n	800eda2 <__gethex+0x23e>
 800ed8e:	1b75      	subs	r5, r6, r5
 800ed90:	4621      	mov	r1, r4
 800ed92:	9801      	ldr	r0, [sp, #4]
 800ed94:	462a      	mov	r2, r5
 800ed96:	f7fe f93f 	bl	800d018 <__lshift>
 800ed9a:	1b7f      	subs	r7, r7, r5
 800ed9c:	4604      	mov	r4, r0
 800ed9e:	f100 0a14 	add.w	sl, r0, #20
 800eda2:	f04f 0900 	mov.w	r9, #0
 800eda6:	e7b8      	b.n	800ed1a <__gethex+0x1b6>
 800eda8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800edac:	42bd      	cmp	r5, r7
 800edae:	dd6f      	ble.n	800ee90 <__gethex+0x32c>
 800edb0:	1bed      	subs	r5, r5, r7
 800edb2:	42ae      	cmp	r6, r5
 800edb4:	dc34      	bgt.n	800ee20 <__gethex+0x2bc>
 800edb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edba:	2b02      	cmp	r3, #2
 800edbc:	d022      	beq.n	800ee04 <__gethex+0x2a0>
 800edbe:	2b03      	cmp	r3, #3
 800edc0:	d024      	beq.n	800ee0c <__gethex+0x2a8>
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d115      	bne.n	800edf2 <__gethex+0x28e>
 800edc6:	42ae      	cmp	r6, r5
 800edc8:	d113      	bne.n	800edf2 <__gethex+0x28e>
 800edca:	2e01      	cmp	r6, #1
 800edcc:	d10b      	bne.n	800ede6 <__gethex+0x282>
 800edce:	9a02      	ldr	r2, [sp, #8]
 800edd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800edd4:	6013      	str	r3, [r2, #0]
 800edd6:	2301      	movs	r3, #1
 800edd8:	6123      	str	r3, [r4, #16]
 800edda:	f8ca 3000 	str.w	r3, [sl]
 800edde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ede0:	2562      	movs	r5, #98	@ 0x62
 800ede2:	601c      	str	r4, [r3, #0]
 800ede4:	e73a      	b.n	800ec5c <__gethex+0xf8>
 800ede6:	1e71      	subs	r1, r6, #1
 800ede8:	4620      	mov	r0, r4
 800edea:	f7fe fb4e 	bl	800d48a <__any_on>
 800edee:	2800      	cmp	r0, #0
 800edf0:	d1ed      	bne.n	800edce <__gethex+0x26a>
 800edf2:	9801      	ldr	r0, [sp, #4]
 800edf4:	4621      	mov	r1, r4
 800edf6:	f7fd fef7 	bl	800cbe8 <_Bfree>
 800edfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edfc:	2300      	movs	r3, #0
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	2550      	movs	r5, #80	@ 0x50
 800ee02:	e72b      	b.n	800ec5c <__gethex+0xf8>
 800ee04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1f3      	bne.n	800edf2 <__gethex+0x28e>
 800ee0a:	e7e0      	b.n	800edce <__gethex+0x26a>
 800ee0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1dd      	bne.n	800edce <__gethex+0x26a>
 800ee12:	e7ee      	b.n	800edf2 <__gethex+0x28e>
 800ee14:	08010e68 	.word	0x08010e68
 800ee18:	08010cfc 	.word	0x08010cfc
 800ee1c:	08010ed9 	.word	0x08010ed9
 800ee20:	1e6f      	subs	r7, r5, #1
 800ee22:	f1b9 0f00 	cmp.w	r9, #0
 800ee26:	d130      	bne.n	800ee8a <__gethex+0x326>
 800ee28:	b127      	cbz	r7, 800ee34 <__gethex+0x2d0>
 800ee2a:	4639      	mov	r1, r7
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f7fe fb2c 	bl	800d48a <__any_on>
 800ee32:	4681      	mov	r9, r0
 800ee34:	117a      	asrs	r2, r7, #5
 800ee36:	2301      	movs	r3, #1
 800ee38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ee3c:	f007 071f 	and.w	r7, r7, #31
 800ee40:	40bb      	lsls	r3, r7
 800ee42:	4213      	tst	r3, r2
 800ee44:	4629      	mov	r1, r5
 800ee46:	4620      	mov	r0, r4
 800ee48:	bf18      	it	ne
 800ee4a:	f049 0902 	orrne.w	r9, r9, #2
 800ee4e:	f7ff fe22 	bl	800ea96 <rshift>
 800ee52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ee56:	1b76      	subs	r6, r6, r5
 800ee58:	2502      	movs	r5, #2
 800ee5a:	f1b9 0f00 	cmp.w	r9, #0
 800ee5e:	d047      	beq.n	800eef0 <__gethex+0x38c>
 800ee60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	d015      	beq.n	800ee94 <__gethex+0x330>
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d017      	beq.n	800ee9c <__gethex+0x338>
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d109      	bne.n	800ee84 <__gethex+0x320>
 800ee70:	f019 0f02 	tst.w	r9, #2
 800ee74:	d006      	beq.n	800ee84 <__gethex+0x320>
 800ee76:	f8da 3000 	ldr.w	r3, [sl]
 800ee7a:	ea49 0903 	orr.w	r9, r9, r3
 800ee7e:	f019 0f01 	tst.w	r9, #1
 800ee82:	d10e      	bne.n	800eea2 <__gethex+0x33e>
 800ee84:	f045 0510 	orr.w	r5, r5, #16
 800ee88:	e032      	b.n	800eef0 <__gethex+0x38c>
 800ee8a:	f04f 0901 	mov.w	r9, #1
 800ee8e:	e7d1      	b.n	800ee34 <__gethex+0x2d0>
 800ee90:	2501      	movs	r5, #1
 800ee92:	e7e2      	b.n	800ee5a <__gethex+0x2f6>
 800ee94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee96:	f1c3 0301 	rsb	r3, r3, #1
 800ee9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d0f0      	beq.n	800ee84 <__gethex+0x320>
 800eea2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eea6:	f104 0314 	add.w	r3, r4, #20
 800eeaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eeae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eeb2:	f04f 0c00 	mov.w	ip, #0
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eebc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eec0:	d01b      	beq.n	800eefa <__gethex+0x396>
 800eec2:	3201      	adds	r2, #1
 800eec4:	6002      	str	r2, [r0, #0]
 800eec6:	2d02      	cmp	r5, #2
 800eec8:	f104 0314 	add.w	r3, r4, #20
 800eecc:	d13c      	bne.n	800ef48 <__gethex+0x3e4>
 800eece:	f8d8 2000 	ldr.w	r2, [r8]
 800eed2:	3a01      	subs	r2, #1
 800eed4:	42b2      	cmp	r2, r6
 800eed6:	d109      	bne.n	800eeec <__gethex+0x388>
 800eed8:	1171      	asrs	r1, r6, #5
 800eeda:	2201      	movs	r2, #1
 800eedc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eee0:	f006 061f 	and.w	r6, r6, #31
 800eee4:	fa02 f606 	lsl.w	r6, r2, r6
 800eee8:	421e      	tst	r6, r3
 800eeea:	d13a      	bne.n	800ef62 <__gethex+0x3fe>
 800eeec:	f045 0520 	orr.w	r5, r5, #32
 800eef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eef2:	601c      	str	r4, [r3, #0]
 800eef4:	9b02      	ldr	r3, [sp, #8]
 800eef6:	601f      	str	r7, [r3, #0]
 800eef8:	e6b0      	b.n	800ec5c <__gethex+0xf8>
 800eefa:	4299      	cmp	r1, r3
 800eefc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ef00:	d8d9      	bhi.n	800eeb6 <__gethex+0x352>
 800ef02:	68a3      	ldr	r3, [r4, #8]
 800ef04:	459b      	cmp	fp, r3
 800ef06:	db17      	blt.n	800ef38 <__gethex+0x3d4>
 800ef08:	6861      	ldr	r1, [r4, #4]
 800ef0a:	9801      	ldr	r0, [sp, #4]
 800ef0c:	3101      	adds	r1, #1
 800ef0e:	f7fd fe2b 	bl	800cb68 <_Balloc>
 800ef12:	4681      	mov	r9, r0
 800ef14:	b918      	cbnz	r0, 800ef1e <__gethex+0x3ba>
 800ef16:	4b1a      	ldr	r3, [pc, #104]	@ (800ef80 <__gethex+0x41c>)
 800ef18:	4602      	mov	r2, r0
 800ef1a:	2184      	movs	r1, #132	@ 0x84
 800ef1c:	e6c5      	b.n	800ecaa <__gethex+0x146>
 800ef1e:	6922      	ldr	r2, [r4, #16]
 800ef20:	3202      	adds	r2, #2
 800ef22:	f104 010c 	add.w	r1, r4, #12
 800ef26:	0092      	lsls	r2, r2, #2
 800ef28:	300c      	adds	r0, #12
 800ef2a:	f7ff fd83 	bl	800ea34 <memcpy>
 800ef2e:	4621      	mov	r1, r4
 800ef30:	9801      	ldr	r0, [sp, #4]
 800ef32:	f7fd fe59 	bl	800cbe8 <_Bfree>
 800ef36:	464c      	mov	r4, r9
 800ef38:	6923      	ldr	r3, [r4, #16]
 800ef3a:	1c5a      	adds	r2, r3, #1
 800ef3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef40:	6122      	str	r2, [r4, #16]
 800ef42:	2201      	movs	r2, #1
 800ef44:	615a      	str	r2, [r3, #20]
 800ef46:	e7be      	b.n	800eec6 <__gethex+0x362>
 800ef48:	6922      	ldr	r2, [r4, #16]
 800ef4a:	455a      	cmp	r2, fp
 800ef4c:	dd0b      	ble.n	800ef66 <__gethex+0x402>
 800ef4e:	2101      	movs	r1, #1
 800ef50:	4620      	mov	r0, r4
 800ef52:	f7ff fda0 	bl	800ea96 <rshift>
 800ef56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef5a:	3701      	adds	r7, #1
 800ef5c:	42bb      	cmp	r3, r7
 800ef5e:	f6ff aee0 	blt.w	800ed22 <__gethex+0x1be>
 800ef62:	2501      	movs	r5, #1
 800ef64:	e7c2      	b.n	800eeec <__gethex+0x388>
 800ef66:	f016 061f 	ands.w	r6, r6, #31
 800ef6a:	d0fa      	beq.n	800ef62 <__gethex+0x3fe>
 800ef6c:	4453      	add	r3, sl
 800ef6e:	f1c6 0620 	rsb	r6, r6, #32
 800ef72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ef76:	f7fd fee9 	bl	800cd4c <__hi0bits>
 800ef7a:	42b0      	cmp	r0, r6
 800ef7c:	dbe7      	blt.n	800ef4e <__gethex+0x3ea>
 800ef7e:	e7f0      	b.n	800ef62 <__gethex+0x3fe>
 800ef80:	08010cfc 	.word	0x08010cfc

0800ef84 <L_shift>:
 800ef84:	f1c2 0208 	rsb	r2, r2, #8
 800ef88:	0092      	lsls	r2, r2, #2
 800ef8a:	b570      	push	{r4, r5, r6, lr}
 800ef8c:	f1c2 0620 	rsb	r6, r2, #32
 800ef90:	6843      	ldr	r3, [r0, #4]
 800ef92:	6804      	ldr	r4, [r0, #0]
 800ef94:	fa03 f506 	lsl.w	r5, r3, r6
 800ef98:	432c      	orrs	r4, r5
 800ef9a:	40d3      	lsrs	r3, r2
 800ef9c:	6004      	str	r4, [r0, #0]
 800ef9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800efa2:	4288      	cmp	r0, r1
 800efa4:	d3f4      	bcc.n	800ef90 <L_shift+0xc>
 800efa6:	bd70      	pop	{r4, r5, r6, pc}

0800efa8 <__match>:
 800efa8:	b530      	push	{r4, r5, lr}
 800efaa:	6803      	ldr	r3, [r0, #0]
 800efac:	3301      	adds	r3, #1
 800efae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efb2:	b914      	cbnz	r4, 800efba <__match+0x12>
 800efb4:	6003      	str	r3, [r0, #0]
 800efb6:	2001      	movs	r0, #1
 800efb8:	bd30      	pop	{r4, r5, pc}
 800efba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800efc2:	2d19      	cmp	r5, #25
 800efc4:	bf98      	it	ls
 800efc6:	3220      	addls	r2, #32
 800efc8:	42a2      	cmp	r2, r4
 800efca:	d0f0      	beq.n	800efae <__match+0x6>
 800efcc:	2000      	movs	r0, #0
 800efce:	e7f3      	b.n	800efb8 <__match+0x10>

0800efd0 <__hexnan>:
 800efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	680b      	ldr	r3, [r1, #0]
 800efd6:	6801      	ldr	r1, [r0, #0]
 800efd8:	115e      	asrs	r6, r3, #5
 800efda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800efde:	f013 031f 	ands.w	r3, r3, #31
 800efe2:	b087      	sub	sp, #28
 800efe4:	bf18      	it	ne
 800efe6:	3604      	addne	r6, #4
 800efe8:	2500      	movs	r5, #0
 800efea:	1f37      	subs	r7, r6, #4
 800efec:	4682      	mov	sl, r0
 800efee:	4690      	mov	r8, r2
 800eff0:	9301      	str	r3, [sp, #4]
 800eff2:	f846 5c04 	str.w	r5, [r6, #-4]
 800eff6:	46b9      	mov	r9, r7
 800eff8:	463c      	mov	r4, r7
 800effa:	9502      	str	r5, [sp, #8]
 800effc:	46ab      	mov	fp, r5
 800effe:	784a      	ldrb	r2, [r1, #1]
 800f000:	1c4b      	adds	r3, r1, #1
 800f002:	9303      	str	r3, [sp, #12]
 800f004:	b342      	cbz	r2, 800f058 <__hexnan+0x88>
 800f006:	4610      	mov	r0, r2
 800f008:	9105      	str	r1, [sp, #20]
 800f00a:	9204      	str	r2, [sp, #16]
 800f00c:	f7ff fd95 	bl	800eb3a <__hexdig_fun>
 800f010:	2800      	cmp	r0, #0
 800f012:	d151      	bne.n	800f0b8 <__hexnan+0xe8>
 800f014:	9a04      	ldr	r2, [sp, #16]
 800f016:	9905      	ldr	r1, [sp, #20]
 800f018:	2a20      	cmp	r2, #32
 800f01a:	d818      	bhi.n	800f04e <__hexnan+0x7e>
 800f01c:	9b02      	ldr	r3, [sp, #8]
 800f01e:	459b      	cmp	fp, r3
 800f020:	dd13      	ble.n	800f04a <__hexnan+0x7a>
 800f022:	454c      	cmp	r4, r9
 800f024:	d206      	bcs.n	800f034 <__hexnan+0x64>
 800f026:	2d07      	cmp	r5, #7
 800f028:	dc04      	bgt.n	800f034 <__hexnan+0x64>
 800f02a:	462a      	mov	r2, r5
 800f02c:	4649      	mov	r1, r9
 800f02e:	4620      	mov	r0, r4
 800f030:	f7ff ffa8 	bl	800ef84 <L_shift>
 800f034:	4544      	cmp	r4, r8
 800f036:	d952      	bls.n	800f0de <__hexnan+0x10e>
 800f038:	2300      	movs	r3, #0
 800f03a:	f1a4 0904 	sub.w	r9, r4, #4
 800f03e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f042:	f8cd b008 	str.w	fp, [sp, #8]
 800f046:	464c      	mov	r4, r9
 800f048:	461d      	mov	r5, r3
 800f04a:	9903      	ldr	r1, [sp, #12]
 800f04c:	e7d7      	b.n	800effe <__hexnan+0x2e>
 800f04e:	2a29      	cmp	r2, #41	@ 0x29
 800f050:	d157      	bne.n	800f102 <__hexnan+0x132>
 800f052:	3102      	adds	r1, #2
 800f054:	f8ca 1000 	str.w	r1, [sl]
 800f058:	f1bb 0f00 	cmp.w	fp, #0
 800f05c:	d051      	beq.n	800f102 <__hexnan+0x132>
 800f05e:	454c      	cmp	r4, r9
 800f060:	d206      	bcs.n	800f070 <__hexnan+0xa0>
 800f062:	2d07      	cmp	r5, #7
 800f064:	dc04      	bgt.n	800f070 <__hexnan+0xa0>
 800f066:	462a      	mov	r2, r5
 800f068:	4649      	mov	r1, r9
 800f06a:	4620      	mov	r0, r4
 800f06c:	f7ff ff8a 	bl	800ef84 <L_shift>
 800f070:	4544      	cmp	r4, r8
 800f072:	d936      	bls.n	800f0e2 <__hexnan+0x112>
 800f074:	f1a8 0204 	sub.w	r2, r8, #4
 800f078:	4623      	mov	r3, r4
 800f07a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f07e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f082:	429f      	cmp	r7, r3
 800f084:	d2f9      	bcs.n	800f07a <__hexnan+0xaa>
 800f086:	1b3b      	subs	r3, r7, r4
 800f088:	f023 0303 	bic.w	r3, r3, #3
 800f08c:	3304      	adds	r3, #4
 800f08e:	3401      	adds	r4, #1
 800f090:	3e03      	subs	r6, #3
 800f092:	42b4      	cmp	r4, r6
 800f094:	bf88      	it	hi
 800f096:	2304      	movhi	r3, #4
 800f098:	4443      	add	r3, r8
 800f09a:	2200      	movs	r2, #0
 800f09c:	f843 2b04 	str.w	r2, [r3], #4
 800f0a0:	429f      	cmp	r7, r3
 800f0a2:	d2fb      	bcs.n	800f09c <__hexnan+0xcc>
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	b91b      	cbnz	r3, 800f0b0 <__hexnan+0xe0>
 800f0a8:	4547      	cmp	r7, r8
 800f0aa:	d128      	bne.n	800f0fe <__hexnan+0x12e>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	603b      	str	r3, [r7, #0]
 800f0b0:	2005      	movs	r0, #5
 800f0b2:	b007      	add	sp, #28
 800f0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b8:	3501      	adds	r5, #1
 800f0ba:	2d08      	cmp	r5, #8
 800f0bc:	f10b 0b01 	add.w	fp, fp, #1
 800f0c0:	dd06      	ble.n	800f0d0 <__hexnan+0x100>
 800f0c2:	4544      	cmp	r4, r8
 800f0c4:	d9c1      	bls.n	800f04a <__hexnan+0x7a>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800f0cc:	2501      	movs	r5, #1
 800f0ce:	3c04      	subs	r4, #4
 800f0d0:	6822      	ldr	r2, [r4, #0]
 800f0d2:	f000 000f 	and.w	r0, r0, #15
 800f0d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f0da:	6020      	str	r0, [r4, #0]
 800f0dc:	e7b5      	b.n	800f04a <__hexnan+0x7a>
 800f0de:	2508      	movs	r5, #8
 800f0e0:	e7b3      	b.n	800f04a <__hexnan+0x7a>
 800f0e2:	9b01      	ldr	r3, [sp, #4]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d0dd      	beq.n	800f0a4 <__hexnan+0xd4>
 800f0e8:	f1c3 0320 	rsb	r3, r3, #32
 800f0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f0:	40da      	lsrs	r2, r3
 800f0f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f0f6:	4013      	ands	r3, r2
 800f0f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f0fc:	e7d2      	b.n	800f0a4 <__hexnan+0xd4>
 800f0fe:	3f04      	subs	r7, #4
 800f100:	e7d0      	b.n	800f0a4 <__hexnan+0xd4>
 800f102:	2004      	movs	r0, #4
 800f104:	e7d5      	b.n	800f0b2 <__hexnan+0xe2>

0800f106 <__ascii_mbtowc>:
 800f106:	b082      	sub	sp, #8
 800f108:	b901      	cbnz	r1, 800f10c <__ascii_mbtowc+0x6>
 800f10a:	a901      	add	r1, sp, #4
 800f10c:	b142      	cbz	r2, 800f120 <__ascii_mbtowc+0x1a>
 800f10e:	b14b      	cbz	r3, 800f124 <__ascii_mbtowc+0x1e>
 800f110:	7813      	ldrb	r3, [r2, #0]
 800f112:	600b      	str	r3, [r1, #0]
 800f114:	7812      	ldrb	r2, [r2, #0]
 800f116:	1e10      	subs	r0, r2, #0
 800f118:	bf18      	it	ne
 800f11a:	2001      	movne	r0, #1
 800f11c:	b002      	add	sp, #8
 800f11e:	4770      	bx	lr
 800f120:	4610      	mov	r0, r2
 800f122:	e7fb      	b.n	800f11c <__ascii_mbtowc+0x16>
 800f124:	f06f 0001 	mvn.w	r0, #1
 800f128:	e7f8      	b.n	800f11c <__ascii_mbtowc+0x16>

0800f12a <_realloc_r>:
 800f12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12e:	4680      	mov	r8, r0
 800f130:	4615      	mov	r5, r2
 800f132:	460c      	mov	r4, r1
 800f134:	b921      	cbnz	r1, 800f140 <_realloc_r+0x16>
 800f136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f13a:	4611      	mov	r1, r2
 800f13c:	f7fd bc88 	b.w	800ca50 <_malloc_r>
 800f140:	b92a      	cbnz	r2, 800f14e <_realloc_r+0x24>
 800f142:	f7fd fc11 	bl	800c968 <_free_r>
 800f146:	2400      	movs	r4, #0
 800f148:	4620      	mov	r0, r4
 800f14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f14e:	f000 f86b 	bl	800f228 <_malloc_usable_size_r>
 800f152:	4285      	cmp	r5, r0
 800f154:	4606      	mov	r6, r0
 800f156:	d802      	bhi.n	800f15e <_realloc_r+0x34>
 800f158:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f15c:	d8f4      	bhi.n	800f148 <_realloc_r+0x1e>
 800f15e:	4629      	mov	r1, r5
 800f160:	4640      	mov	r0, r8
 800f162:	f7fd fc75 	bl	800ca50 <_malloc_r>
 800f166:	4607      	mov	r7, r0
 800f168:	2800      	cmp	r0, #0
 800f16a:	d0ec      	beq.n	800f146 <_realloc_r+0x1c>
 800f16c:	42b5      	cmp	r5, r6
 800f16e:	462a      	mov	r2, r5
 800f170:	4621      	mov	r1, r4
 800f172:	bf28      	it	cs
 800f174:	4632      	movcs	r2, r6
 800f176:	f7ff fc5d 	bl	800ea34 <memcpy>
 800f17a:	4621      	mov	r1, r4
 800f17c:	4640      	mov	r0, r8
 800f17e:	f7fd fbf3 	bl	800c968 <_free_r>
 800f182:	463c      	mov	r4, r7
 800f184:	e7e0      	b.n	800f148 <_realloc_r+0x1e>

0800f186 <__ascii_wctomb>:
 800f186:	4603      	mov	r3, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	b141      	cbz	r1, 800f19e <__ascii_wctomb+0x18>
 800f18c:	2aff      	cmp	r2, #255	@ 0xff
 800f18e:	d904      	bls.n	800f19a <__ascii_wctomb+0x14>
 800f190:	228a      	movs	r2, #138	@ 0x8a
 800f192:	601a      	str	r2, [r3, #0]
 800f194:	f04f 30ff 	mov.w	r0, #4294967295
 800f198:	4770      	bx	lr
 800f19a:	700a      	strb	r2, [r1, #0]
 800f19c:	2001      	movs	r0, #1
 800f19e:	4770      	bx	lr

0800f1a0 <_raise_r>:
 800f1a0:	291f      	cmp	r1, #31
 800f1a2:	b538      	push	{r3, r4, r5, lr}
 800f1a4:	4605      	mov	r5, r0
 800f1a6:	460c      	mov	r4, r1
 800f1a8:	d904      	bls.n	800f1b4 <_raise_r+0x14>
 800f1aa:	2316      	movs	r3, #22
 800f1ac:	6003      	str	r3, [r0, #0]
 800f1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b2:	bd38      	pop	{r3, r4, r5, pc}
 800f1b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f1b6:	b112      	cbz	r2, 800f1be <_raise_r+0x1e>
 800f1b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1bc:	b94b      	cbnz	r3, 800f1d2 <_raise_r+0x32>
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f000 f830 	bl	800f224 <_getpid_r>
 800f1c4:	4622      	mov	r2, r4
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1ce:	f000 b817 	b.w	800f200 <_kill_r>
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d00a      	beq.n	800f1ec <_raise_r+0x4c>
 800f1d6:	1c59      	adds	r1, r3, #1
 800f1d8:	d103      	bne.n	800f1e2 <_raise_r+0x42>
 800f1da:	2316      	movs	r3, #22
 800f1dc:	6003      	str	r3, [r0, #0]
 800f1de:	2001      	movs	r0, #1
 800f1e0:	e7e7      	b.n	800f1b2 <_raise_r+0x12>
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	4798      	blx	r3
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	e7e0      	b.n	800f1b2 <_raise_r+0x12>

0800f1f0 <raise>:
 800f1f0:	4b02      	ldr	r3, [pc, #8]	@ (800f1fc <raise+0xc>)
 800f1f2:	4601      	mov	r1, r0
 800f1f4:	6818      	ldr	r0, [r3, #0]
 800f1f6:	f7ff bfd3 	b.w	800f1a0 <_raise_r>
 800f1fa:	bf00      	nop
 800f1fc:	20000044 	.word	0x20000044

0800f200 <_kill_r>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4d07      	ldr	r5, [pc, #28]	@ (800f220 <_kill_r+0x20>)
 800f204:	2300      	movs	r3, #0
 800f206:	4604      	mov	r4, r0
 800f208:	4608      	mov	r0, r1
 800f20a:	4611      	mov	r1, r2
 800f20c:	602b      	str	r3, [r5, #0]
 800f20e:	f7f4 f9c3 	bl	8003598 <_kill>
 800f212:	1c43      	adds	r3, r0, #1
 800f214:	d102      	bne.n	800f21c <_kill_r+0x1c>
 800f216:	682b      	ldr	r3, [r5, #0]
 800f218:	b103      	cbz	r3, 800f21c <_kill_r+0x1c>
 800f21a:	6023      	str	r3, [r4, #0]
 800f21c:	bd38      	pop	{r3, r4, r5, pc}
 800f21e:	bf00      	nop
 800f220:	200010a4 	.word	0x200010a4

0800f224 <_getpid_r>:
 800f224:	f7f4 b9b0 	b.w	8003588 <_getpid>

0800f228 <_malloc_usable_size_r>:
 800f228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f22c:	1f18      	subs	r0, r3, #4
 800f22e:	2b00      	cmp	r3, #0
 800f230:	bfbc      	itt	lt
 800f232:	580b      	ldrlt	r3, [r1, r0]
 800f234:	18c0      	addlt	r0, r0, r3
 800f236:	4770      	bx	lr

0800f238 <_init>:
 800f238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23a:	bf00      	nop
 800f23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f23e:	bc08      	pop	{r3}
 800f240:	469e      	mov	lr, r3
 800f242:	4770      	bx	lr

0800f244 <_fini>:
 800f244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f246:	bf00      	nop
 800f248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f24a:	bc08      	pop	{r3}
 800f24c:	469e      	mov	lr, r3
 800f24e:	4770      	bx	lr
