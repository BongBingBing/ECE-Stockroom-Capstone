
ILI9341 TFT Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002788  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002920  080028c4  080028c4  000038c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e4  080051e4  00007024  2**0
                  CONTENTS
  4 .ARM          00000008  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051ec  080051ec  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051f0  080051f0  000061f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080051f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000024  08005218  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08005218  0000709c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000067b0  00000000  00000000  0000704d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182b  00000000  00000000  0000d7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000153ab  00000000  00000000  0000f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 16 .debug_line   0000841b  00000000  00000000  00024a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000837bd  00000000  00000000  0002cea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000086  00000000  00000000  000b0663  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000004f7  00000000  00000000  000b06e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001980  00000000  00000000  000b0be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000b2560  2**0
=======
 16 .debug_line   000083c1  00000000  00000000  00024a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000837a7  00000000  00000000  0002ce4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b05f3  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000004f7  00000000  00000000  000b0636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001980  00000000  00000000  000b0b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000b24b0  2**0
>>>>>>> c4f9c3215e11aefed8f37feac314fac4b0e6ce0f
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000024 	.word	0x20000024
 8000158:	00000000 	.word	0x00000000
 800015c:	080028ac 	.word	0x080028ac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000028 	.word	0x20000028
 8000178:	080028ac 	.word	0x080028ac

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <ILI9341_Select>:


#include "stm32l1xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2110      	movs	r1, #16
 8000470:	4802      	ldr	r0, [pc, #8]	@ (800047c <ILI9341_Select+0x14>)
 8000472:	f001 f9bf 	bl	80017f4 <HAL_GPIO_WritePin>
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40020000 	.word	0x40020000

08000480 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2110      	movs	r1, #16
 8000488:	4802      	ldr	r0, [pc, #8]	@ (8000494 <ILI9341_Unselect+0x14>)
 800048a:	f001 f9b3 	bl	80017f4 <HAL_GPIO_WritePin>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40020000 	.word	0x40020000

08000498 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2101      	movs	r1, #1
 80004a0:	4806      	ldr	r0, [pc, #24]	@ (80004bc <ILI9341_Reset+0x24>)
 80004a2:	f001 f9a7 	bl	80017f4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80004a6:	2005      	movs	r0, #5
 80004a8:	f000 ff0e 	bl	80012c8 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2101      	movs	r1, #1
 80004b0:	4802      	ldr	r0, [pc, #8]	@ (80004bc <ILI9341_Reset+0x24>)
 80004b2:	f001 f99f 	bl	80017f4 <HAL_GPIO_WritePin>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40020400 	.word	0x40020400

080004c0 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2102      	movs	r1, #2
 80004ce:	4807      	ldr	r0, [pc, #28]	@ (80004ec <ILI9341_WriteCommand+0x2c>)
 80004d0:	f001 f990 	bl	80017f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80004d4:	1df9      	adds	r1, r7, #7
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295
 80004da:	2201      	movs	r2, #1
 80004dc:	4804      	ldr	r0, [pc, #16]	@ (80004f0 <ILI9341_WriteCommand+0x30>)
 80004de:	f001 ffac 	bl	800243a <HAL_SPI_Transmit>

}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40020400 	.word	0x40020400
 80004f0:	20000040 	.word	0x20000040

080004f4 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2102      	movs	r1, #2
 8000502:	4811      	ldr	r0, [pc, #68]	@ (8000548 <ILI9341_WriteData+0x54>)
 8000504:	f001 f976 	bl	80017f4 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000508:	e015      	b.n	8000536 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000510:	bf28      	it	cs
 8000512:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000516:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000518:	89fa      	ldrh	r2, [r7, #14]
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	480a      	ldr	r0, [pc, #40]	@ (800054c <ILI9341_WriteData+0x58>)
 8000522:	f001 ff8a 	bl	800243a <HAL_SPI_Transmit>

        buff += chunk_size;
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4413      	add	r3, r2
 800052c:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800052e:	89fb      	ldrh	r3, [r7, #14]
 8000530:	683a      	ldr	r2, [r7, #0]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d1e6      	bne.n	800050a <ILI9341_WriteData+0x16>
    }
}
 800053c:	bf00      	nop
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020400 	.word	0x40020400
 800054c:	20000040 	.word	0x20000040

08000550 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	4604      	mov	r4, r0
 8000558:	4608      	mov	r0, r1
 800055a:	4611      	mov	r1, r2
 800055c:	461a      	mov	r2, r3
 800055e:	4623      	mov	r3, r4
 8000560:	80fb      	strh	r3, [r7, #6]
 8000562:	4603      	mov	r3, r0
 8000564:	80bb      	strh	r3, [r7, #4]
 8000566:	460b      	mov	r3, r1
 8000568:	807b      	strh	r3, [r7, #2]
 800056a:	4613      	mov	r3, r2
 800056c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800056e:	202a      	movs	r0, #42	@ 0x2a
 8000570:	f7ff ffa6 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000574:	88fb      	ldrh	r3, [r7, #6]
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	b29b      	uxth	r3, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	733b      	strb	r3, [r7, #12]
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	737b      	strb	r3, [r7, #13]
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	0a1b      	lsrs	r3, r3, #8
 8000588:	b29b      	uxth	r3, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	73bb      	strb	r3, [r7, #14]
 800058e:	887b      	ldrh	r3, [r7, #2]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2104      	movs	r1, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ffaa 	bl	80004f4 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80005a0:	202b      	movs	r0, #43	@ 0x2b
 80005a2:	f7ff ff8d 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80005a6:	88bb      	ldrh	r3, [r7, #4]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	723b      	strb	r3, [r7, #8]
 80005b0:	88bb      	ldrh	r3, [r7, #4]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	727b      	strb	r3, [r7, #9]
 80005b6:	883b      	ldrh	r3, [r7, #0]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	72bb      	strb	r3, [r7, #10]
 80005c0:	883b      	ldrh	r3, [r7, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff91 	bl	80004f4 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80005d2:	202c      	movs	r0, #44	@ 0x2c
 80005d4:	f7ff ff74 	bl	80004c0 <ILI9341_WriteCommand>
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd90      	pop	{r4, r7, pc}

080005e0 <ILI9341_Init>:

void ILI9341_Init() {
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b09b      	sub	sp, #108	@ 0x6c
 80005e4:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80005e6:	f7ff ff3f 	bl	8000468 <ILI9341_Select>
    ILI9341_Reset();
 80005ea:	f7ff ff55 	bl	8000498 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ff66 	bl	80004c0 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80005f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f8:	f000 fe66 	bl	80012c8 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80005fc:	20cb      	movs	r0, #203	@ 0xcb
 80005fe:	f7ff ff5f 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000602:	4a87      	ldr	r2, [pc, #540]	@ (8000820 <ILI9341_Init+0x240>)
 8000604:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060c:	6018      	str	r0, [r3, #0]
 800060e:	3304      	adds	r3, #4
 8000610:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000612:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000616:	2105      	movs	r1, #5
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff6b 	bl	80004f4 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800061e:	20cf      	movs	r0, #207	@ 0xcf
 8000620:	f7ff ff4e 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000624:	4a7f      	ldr	r2, [pc, #508]	@ (8000824 <ILI9341_Init+0x244>)
 8000626:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	4611      	mov	r1, r2
 800062e:	8019      	strh	r1, [r3, #0]
 8000630:	3302      	adds	r3, #2
 8000632:	0c12      	lsrs	r2, r2, #16
 8000634:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000636:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800063a:	2103      	movs	r1, #3
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff59 	bl	80004f4 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000642:	20e8      	movs	r0, #232	@ 0xe8
 8000644:	f7ff ff3c 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000648:	4a77      	ldr	r2, [pc, #476]	@ (8000828 <ILI9341_Init+0x248>)
 800064a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	4611      	mov	r1, r2
 8000652:	8019      	strh	r1, [r3, #0]
 8000654:	3302      	adds	r3, #2
 8000656:	0c12      	lsrs	r2, r2, #16
 8000658:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800065a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800065e:	2103      	movs	r1, #3
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff47 	bl	80004f4 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000666:	20ea      	movs	r0, #234	@ 0xea
 8000668:	f7ff ff2a 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800066c:	2300      	movs	r3, #0
 800066e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000672:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000676:	2102      	movs	r1, #2
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff3b 	bl	80004f4 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800067e:	20ed      	movs	r0, #237	@ 0xed
 8000680:	f7ff ff1e 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000684:	4b69      	ldr	r3, [pc, #420]	@ (800082c <ILI9341_Init+0x24c>)
 8000686:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000688:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff30 	bl	80004f4 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000694:	20f7      	movs	r0, #247	@ 0xf7
 8000696:	f7ff ff13 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800069a:	2320      	movs	r3, #32
 800069c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80006a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006a4:	2101      	movs	r1, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff24 	bl	80004f4 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80006ac:	20c0      	movs	r0, #192	@ 0xc0
 80006ae:	f7ff ff07 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80006b2:	2323      	movs	r3, #35	@ 0x23
 80006b4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 80006b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006bc:	2101      	movs	r1, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff18 	bl	80004f4 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80006c4:	20c1      	movs	r0, #193	@ 0xc1
 80006c6:	f7ff fefb 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80006ca:	2310      	movs	r3, #16
 80006cc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 80006d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006d4:	2101      	movs	r1, #1
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff0c 	bl	80004f4 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80006dc:	20c5      	movs	r0, #197	@ 0xc5
 80006de:	f7ff feef 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80006e2:	f642 033e 	movw	r3, #10302	@ 0x283e
 80006e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80006ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff feff 	bl	80004f4 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80006f6:	20c7      	movs	r0, #199	@ 0xc7
 80006f8:	f7ff fee2 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80006fc:	2386      	movs	r3, #134	@ 0x86
 80006fe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000702:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000706:	2101      	movs	r1, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fef3 	bl	80004f4 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800070e:	2036      	movs	r0, #54	@ 0x36
 8000710:	f7ff fed6 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000714:	2348      	movs	r3, #72	@ 0x48
 8000716:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 800071a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800071e:	2101      	movs	r1, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fee7 	bl	80004f4 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000726:	203a      	movs	r0, #58	@ 0x3a
 8000728:	f7ff feca 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 800072c:	2355      	movs	r3, #85	@ 0x55
 800072e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000732:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000736:	2101      	movs	r1, #1
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fedb 	bl	80004f4 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800073e:	20b1      	movs	r0, #177	@ 0xb1
 8000740:	f7ff febe 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000744:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000748:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 800074a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800074e:	2102      	movs	r1, #2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fecf 	bl	80004f4 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000756:	20b6      	movs	r0, #182	@ 0xb6
 8000758:	f7ff feb2 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800075c:	4a34      	ldr	r2, [pc, #208]	@ (8000830 <ILI9341_Init+0x250>)
 800075e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000762:	6812      	ldr	r2, [r2, #0]
 8000764:	4611      	mov	r1, r2
 8000766:	8019      	strh	r1, [r3, #0]
 8000768:	3302      	adds	r3, #2
 800076a:	0c12      	lsrs	r2, r2, #16
 800076c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800076e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000772:	2103      	movs	r1, #3
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff febd 	bl	80004f4 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800077a:	20f2      	movs	r0, #242	@ 0xf2
 800077c:	f7ff fea0 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000780:	2300      	movs	r3, #0
 8000782:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8000786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800078a:	2101      	movs	r1, #1
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff feb1 	bl	80004f4 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8000792:	2026      	movs	r0, #38	@ 0x26
 8000794:	f7ff fe94 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000798:	2301      	movs	r3, #1
 800079a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 800079e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a2:	2101      	movs	r1, #1
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fea5 	bl	80004f4 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80007aa:	20e0      	movs	r0, #224	@ 0xe0
 80007ac:	f7ff fe88 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80007b0:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <ILI9341_Init+0x254>)
 80007b2:	f107 0414 	add.w	r4, r7, #20
 80007b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b8:	c407      	stmia	r4!, {r0, r1, r2}
 80007ba:	8023      	strh	r3, [r4, #0]
 80007bc:	3402      	adds	r4, #2
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	210f      	movs	r1, #15
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe93 	bl	80004f4 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80007ce:	20e1      	movs	r0, #225	@ 0xe1
 80007d0:	f7ff fe76 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <ILI9341_Init+0x258>)
 80007d6:	1d3c      	adds	r4, r7, #4
 80007d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007da:	c407      	stmia	r4!, {r0, r1, r2}
 80007dc:	8023      	strh	r3, [r4, #0]
 80007de:	3402      	adds	r4, #2
 80007e0:	0c1b      	lsrs	r3, r3, #16
 80007e2:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	210f      	movs	r1, #15
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe83 	bl	80004f4 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80007ee:	2011      	movs	r0, #17
 80007f0:	f7ff fe66 	bl	80004c0 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80007f4:	2078      	movs	r0, #120	@ 0x78
 80007f6:	f000 fd67 	bl	80012c8 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80007fa:	2029      	movs	r0, #41	@ 0x29
 80007fc:	f7ff fe60 	bl	80004c0 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000800:	2036      	movs	r0, #54	@ 0x36
 8000802:	f7ff fe5d 	bl	80004c0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000806:	2348      	movs	r3, #72	@ 0x48
 8000808:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800080a:	463b      	mov	r3, r7
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fe70 	bl	80004f4 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000814:	f7ff fe34 	bl	8000480 <ILI9341_Unselect>
}
 8000818:	bf00      	nop
 800081a:	376c      	adds	r7, #108	@ 0x6c
 800081c:	46bd      	mov	sp, r7
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	080028c4 	.word	0x080028c4
 8000824:	080028cc 	.word	0x080028cc
 8000828:	080028d0 	.word	0x080028d0
 800082c:	81120364 	.word	0x81120364
 8000830:	080028d4 	.word	0x080028d4
 8000834:	080028d8 	.word	0x080028d8
 8000838:	080028e8 	.word	0x080028e8

0800083c <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
 8000846:	460b      	mov	r3, r1
 8000848:	80bb      	strh	r3, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	2bef      	cmp	r3, #239	@ 0xef
 8000852:	d820      	bhi.n	8000896 <ILI9341_DrawPixel+0x5a>
 8000854:	88bb      	ldrh	r3, [r7, #4]
 8000856:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800085a:	d21c      	bcs.n	8000896 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 800085c:	f7ff fe04 	bl	8000468 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	3301      	adds	r3, #1
 8000864:	b29a      	uxth	r2, r3
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	b29b      	uxth	r3, r3
 800086c:	88b9      	ldrh	r1, [r7, #4]
 800086e:	88f8      	ldrh	r0, [r7, #6]
 8000870:	f7ff fe6e 	bl	8000550 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	733b      	strb	r3, [r7, #12]
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2102      	movs	r1, #2
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe32 	bl	80004f4 <ILI9341_WriteData>

    ILI9341_Unselect();
 8000890:	f7ff fdf6 	bl	8000480 <ILI9341_Unselect>
 8000894:	e000      	b.n	8000898 <ILI9341_DrawPixel+0x5c>
        return;
 8000896:	bf00      	nop
}
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800089e:	b082      	sub	sp, #8
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008a8:	4603      	mov	r3, r0
 80008aa:	80fb      	strh	r3, [r7, #6]
 80008ac:	460b      	mov	r3, r1
 80008ae:	80bb      	strh	r3, [r7, #4]
 80008b0:	4613      	mov	r3, r2
 80008b2:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80008b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008b8:	461a      	mov	r2, r3
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	4413      	add	r3, r2
 80008be:	b29b      	uxth	r3, r3
 80008c0:	3b01      	subs	r3, #1
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80008c8:	4619      	mov	r1, r3
 80008ca:	88bb      	ldrh	r3, [r7, #4]
 80008cc:	440b      	add	r3, r1
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	3b01      	subs	r3, #1
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	88b9      	ldrh	r1, [r7, #4]
 80008d6:	88f8      	ldrh	r0, [r7, #6]
 80008d8:	f7ff fe3a 	bl	8000550 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	e041      	b.n	8000966 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 80008e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	3b20      	subs	r3, #32
 80008e8:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80008ec:	fb01 f303 	mul.w	r3, r1, r3
 80008f0:	4619      	mov	r1, r3
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	440b      	add	r3, r1
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e027      	b.n	8000954 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000910:	2b00      	cmp	r3, #0
 8000912:	d00e      	beq.n	8000932 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000914:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	b29b      	uxth	r3, r3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	743b      	strb	r3, [r7, #16]
 800091e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000920:	b2db      	uxtb	r3, r3
 8000922:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2102      	movs	r1, #2
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fde2 	bl	80004f4 <ILI9341_WriteData>
 8000930:	e00d      	b.n	800094e <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000932:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	733b      	strb	r3, [r7, #12]
 800093c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800093e:	b2db      	uxtb	r3, r3
 8000940:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2102      	movs	r1, #2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fdd3 	bl	80004f4 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	3301      	adds	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000958:	461a      	mov	r2, r3
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	4293      	cmp	r3, r2
 800095e:	d3d1      	bcc.n	8000904 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	3301      	adds	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800096a:	461a      	mov	r2, r3
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	4293      	cmp	r3, r2
 8000970:	d3b7      	bcc.n	80008e2 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800097e:	b002      	add	sp, #8
 8000980:	4770      	bx	lr

08000982 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000982:	b082      	sub	sp, #8
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af04      	add	r7, sp, #16
 800098a:	603a      	str	r2, [r7, #0]
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	460b      	mov	r3, r1
 8000994:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8000996:	f7ff fd67 	bl	8000468 <ILI9341_Select>

    while(*str) {
 800099a:	e02e      	b.n	80009fa <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	7d3a      	ldrb	r2, [r7, #20]
 80009a0:	4413      	add	r3, r2
 80009a2:	2bef      	cmp	r3, #239	@ 0xef
 80009a4:	dd14      	ble.n	80009d0 <ILI9341_WriteString+0x4e>
            x = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80009aa:	7d7b      	ldrb	r3, [r7, #21]
 80009ac:	461a      	mov	r2, r3
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	7d7a      	ldrb	r2, [r7, #21]
 80009b8:	4413      	add	r3, r2
 80009ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009be:	da21      	bge.n	8000a04 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b20      	cmp	r3, #32
 80009c6:	d103      	bne.n	80009d0 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	603b      	str	r3, [r7, #0]
                continue;
 80009ce:	e014      	b.n	80009fa <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	88b9      	ldrh	r1, [r7, #4]
 80009d6:	88f8      	ldrh	r0, [r7, #6]
 80009d8:	8c3b      	ldrh	r3, [r7, #32]
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	8bbb      	ldrh	r3, [r7, #28]
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	f7ff ff5a 	bl	800089e <ILI9341_WriteChar>
        x += font.width;
 80009ea:	7d3b      	ldrb	r3, [r7, #20]
 80009ec:	461a      	mov	r2, r3
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	4413      	add	r3, r2
 80009f2:	80fb      	strh	r3, [r7, #6]
        str++;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	3301      	adds	r3, #1
 80009f8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1cc      	bne.n	800099c <ILI9341_WriteString+0x1a>
 8000a02:	e000      	b.n	8000a06 <ILI9341_WriteString+0x84>
                break;
 8000a04:	bf00      	nop
    }

    ILI9341_Unselect();
 8000a06:	f7ff fd3b 	bl	8000480 <ILI9341_Unselect>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a14:	b002      	add	sp, #8
 8000a16:	4770      	bx	lr

08000a18 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4604      	mov	r4, r0
 8000a20:	4608      	mov	r0, r1
 8000a22:	4611      	mov	r1, r2
 8000a24:	461a      	mov	r2, r3
 8000a26:	4623      	mov	r3, r4
 8000a28:	80fb      	strh	r3, [r7, #6]
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80bb      	strh	r3, [r7, #4]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	807b      	strh	r3, [r7, #2]
 8000a32:	4613      	mov	r3, r2
 8000a34:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	2bef      	cmp	r3, #239	@ 0xef
 8000a3a:	d853      	bhi.n	8000ae4 <ILI9341_FillRectangle+0xcc>
 8000a3c:	88bb      	ldrh	r3, [r7, #4]
 8000a3e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a42:	d24f      	bcs.n	8000ae4 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000a44:	88fa      	ldrh	r2, [r7, #6]
 8000a46:	887b      	ldrh	r3, [r7, #2]
 8000a48:	4413      	add	r3, r2
 8000a4a:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a4c:	dd03      	ble.n	8000a56 <ILI9341_FillRectangle+0x3e>
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000a54:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000a56:	88ba      	ldrh	r2, [r7, #4]
 8000a58:	883b      	ldrh	r3, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a60:	dd03      	ble.n	8000a6a <ILI9341_FillRectangle+0x52>
 8000a62:	88bb      	ldrh	r3, [r7, #4]
 8000a64:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000a68:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000a6a:	f7ff fcfd 	bl	8000468 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000a6e:	88fa      	ldrh	r2, [r7, #6]
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	4413      	add	r3, r2
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	3b01      	subs	r3, #1
 8000a78:	b29c      	uxth	r4, r3
 8000a7a:	88ba      	ldrh	r2, [r7, #4]
 8000a7c:	883b      	ldrh	r3, [r7, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	88b9      	ldrh	r1, [r7, #4]
 8000a88:	88f8      	ldrh	r0, [r7, #6]
 8000a8a:	4622      	mov	r2, r4
 8000a8c:	f7ff fd60 	bl	8000550 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000a90:	8c3b      	ldrh	r3, [r7, #32]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	733b      	strb	r3, [r7, #12]
 8000a9a:	8c3b      	ldrh	r3, [r7, #32]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	4811      	ldr	r0, [pc, #68]	@ (8000aec <ILI9341_FillRectangle+0xd4>)
 8000aa6:	f000 fea5 	bl	80017f4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000aaa:	883b      	ldrh	r3, [r7, #0]
 8000aac:	80bb      	strh	r3, [r7, #4]
 8000aae:	e013      	b.n	8000ad8 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000ab0:	887b      	ldrh	r3, [r7, #2]
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	e00a      	b.n	8000acc <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000ab6:	f107 010c 	add.w	r1, r7, #12
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	2202      	movs	r2, #2
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <ILI9341_FillRectangle+0xd8>)
 8000ac2:	f001 fcba 	bl	800243a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	80fb      	strh	r3, [r7, #6]
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1f1      	bne.n	8000ab6 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000ad2:	88bb      	ldrh	r3, [r7, #4]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	80bb      	strh	r3, [r7, #4]
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1e8      	bne.n	8000ab0 <ILI9341_FillRectangle+0x98>

        }
    }

    ILI9341_Unselect();
 8000ade:	f7ff fccf 	bl	8000480 <ILI9341_Unselect>
 8000ae2:	e000      	b.n	8000ae6 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000ae4:	bf00      	nop
}
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	40020400 	.word	0x40020400
 8000af0:	20000040 	.word	0x20000040

08000af4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000b06:	22f0      	movs	r2, #240	@ 0xf0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff ff84 	bl	8000a18 <ILI9341_FillRectangle>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <ILI9341_InvertColors>:
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ILI9341_Unselect();
}

void ILI9341_InvertColors(bool invert) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
    ILI9341_Select();
 8000b22:	f7ff fca1 	bl	8000468 <ILI9341_Select>
    ILI9341_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <ILI9341_InvertColors+0x18>
 8000b2c:	2321      	movs	r3, #33	@ 0x21
 8000b2e:	e000      	b.n	8000b32 <ILI9341_InvertColors+0x1a>
 8000b30:	2320      	movs	r3, #32
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fcc4 	bl	80004c0 <ILI9341_WriteCommand>
    ILI9341_Unselect();
 8000b38:	f7ff fca2 	bl	8000480 <ILI9341_Unselect>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b4e:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <ILI9341_TouchUnselect+0x14>)
 8000b50:	f000 fe50 	bl	80017f4 <HAL_GPIO_WritePin>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40020000 	.word	0x40020000

08000b5c <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void init(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	ILI9341_Unselect();
 8000b60:	f7ff fc8e 	bl	8000480 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 8000b64:	f7ff ffee 	bl	8000b44 <ILI9341_TouchUnselect>
	ILI9341_Init();
 8000b68:	f7ff fd3a 	bl	80005e0 <ILI9341_Init>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <loop>:

void loop(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af04      	add	r7, sp, #16
	//Check Border
	ILI9341_FillScreen(ILI9341_BLACK);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff ffbc 	bl	8000af4 <ILI9341_FillScreen>

	for(int x = 0; x < ILI9341_WIDTH; x++){
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	e013      	b.n	8000baa <loop+0x3a>
		ILI9341_DrawPixel(x,  0, ILI9341_RED);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe55 	bl	800083c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(x, ILI9341_HEIGHT - 1, ILI9341_RED);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000b9a:	f240 113f 	movw	r1, #319	@ 0x13f
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe4c 	bl	800083c <ILI9341_DrawPixel>
	for(int x = 0; x < ILI9341_WIDTH; x++){
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2bef      	cmp	r3, #239	@ 0xef
 8000bae:	dde8      	ble.n	8000b82 <loop+0x12>
	}

	for(int y = 0; y < ILI9341_HEIGHT; y++){
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	e012      	b.n	8000bdc <loop+0x6c>
		ILI9341_DrawPixel(0,  y, ILI9341_RED);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fe3b 	bl	800083c <ILI9341_DrawPixel>
		ILI9341_DrawPixel(ILI9341_WIDTH - 1, y, ILI9341_RED);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000bce:	4619      	mov	r1, r3
 8000bd0:	20ef      	movs	r0, #239	@ 0xef
 8000bd2:	f7ff fe33 	bl	800083c <ILI9341_DrawPixel>
	for(int y = 0; y < ILI9341_HEIGHT; y++){
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000be2:	dbe8      	blt.n	8000bb6 <loop+0x46>
	}

	//Text Testing
	//	ILI9341_WriteString(0, ,"", Font_, ILI9341_, ILI9341_BLACK);

	HAL_Delay(1000);
 8000be4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000be8:	f000 fb6e 	bl	80012c8 <HAL_Delay>
	ILI9341_WriteString(0, 3*10, "HELLO WORLD!!!!", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8000bec:	4b95      	ldr	r3, [pc, #596]	@ (8000e44 <loop+0x2d4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	9202      	str	r2, [sp, #8]
 8000bf2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000bf6:	9201      	str	r2, [sp, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	9200      	str	r2, [sp, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a92      	ldr	r2, [pc, #584]	@ (8000e48 <loop+0x2d8>)
 8000c00:	211e      	movs	r1, #30
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff febd 	bl	8000982 <ILI9341_WriteString>
	ILI9341_WriteString(0, 6*10, "THIS IS A TEST FOR", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8000c08:	4b8e      	ldr	r3, [pc, #568]	@ (8000e44 <loop+0x2d4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	9202      	str	r2, [sp, #8]
 8000c0e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000c12:	9201      	str	r2, [sp, #4]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	9200      	str	r2, [sp, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a8c      	ldr	r2, [pc, #560]	@ (8000e4c <loop+0x2dc>)
 8000c1c:	213c      	movs	r1, #60	@ 0x3c
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff feaf 	bl	8000982 <ILI9341_WriteString>
	ILI9341_WriteString(0, 9*10, "THE NEW TFT DISPLAY", Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8000c24:	4b87      	ldr	r3, [pc, #540]	@ (8000e44 <loop+0x2d4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	9202      	str	r2, [sp, #8]
 8000c2a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000c2e:	9201      	str	r2, [sp, #4]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	9200      	str	r2, [sp, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a86      	ldr	r2, [pc, #536]	@ (8000e50 <loop+0x2e0>)
 8000c38:	215a      	movs	r1, #90	@ 0x5a
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f7ff fea1 	bl	8000982 <ILI9341_WriteString>
	ILI9341_WriteString(0, 12*10,"I HOPE IT WORKS!!", Font_16x26, ILI9341_RED, ILI9341_BLACK);
 8000c40:	4b84      	ldr	r3, [pc, #528]	@ (8000e54 <loop+0x2e4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	9202      	str	r2, [sp, #8]
 8000c46:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000c4a:	9201      	str	r2, [sp, #4]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	9200      	str	r2, [sp, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a81      	ldr	r2, [pc, #516]	@ (8000e58 <loop+0x2e8>)
 8000c54:	2178      	movs	r1, #120	@ 0x78
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fe93 	bl	8000982 <ILI9341_WriteString>
	HAL_Delay(4000);
 8000c5c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000c60:	f000 fb32 	bl	80012c8 <HAL_Delay>

	//Check the fonts
	ILI9341_FillScreen(ILI9341_BLACK);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff ff45 	bl	8000af4 <ILI9341_FillScreen>
	ILI9341_WriteString(0, 0,"Font_7x10 HELLO", Font_7x10, ILI9341_RED, ILI9341_BLACK);
 8000c6a:	4b7c      	ldr	r3, [pc, #496]	@ (8000e5c <loop+0x2ec>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	9202      	str	r2, [sp, #8]
 8000c70:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000c74:	9201      	str	r2, [sp, #4]
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	9200      	str	r2, [sp, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a78      	ldr	r2, [pc, #480]	@ (8000e60 <loop+0x2f0>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fe7e 	bl	8000982 <ILI9341_WriteString>
	ILI9341_WriteString(0, 3*10,"Font_11x18 HELLO", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 8000c86:	4b6f      	ldr	r3, [pc, #444]	@ (8000e44 <loop+0x2d4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	9202      	str	r2, [sp, #8]
 8000c8c:	221f      	movs	r2, #31
 8000c8e:	9201      	str	r2, [sp, #4]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	9200      	str	r2, [sp, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a73      	ldr	r2, [pc, #460]	@ (8000e64 <loop+0x2f4>)
 8000c98:	211e      	movs	r1, #30
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fe71 	bl	8000982 <ILI9341_WriteString>
	ILI9341_WriteString(0, 3*10+3*18,"Font_16x26 HELLO", Font_16x26, ILI9341_GREEN, ILI9341_BLACK);
 8000ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8000e54 <loop+0x2e4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	9202      	str	r2, [sp, #8]
 8000ca6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000caa:	9201      	str	r2, [sp, #4]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8000e68 <loop+0x2f8>)
 8000cb4:	2154      	movs	r1, #84	@ 0x54
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fe63 	bl	8000982 <ILI9341_WriteString>


	//inverting the displayed colors
	HAL_Delay(1000);
 8000cbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cc0:	f000 fb02 	bl	80012c8 <HAL_Delay>
	ILI9341_InvertColors(true);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff ff27 	bl	8000b18 <ILI9341_InvertColors>
	HAL_Delay(1000);
 8000cca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cce:	f000 fafb 	bl	80012c8 <HAL_Delay>
	ILI9341_InvertColors(false);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff ff20 	bl	8000b18 <ILI9341_InvertColors>

	HAL_Delay(5000);
 8000cd8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cdc:	f000 faf4 	bl	80012c8 <HAL_Delay>

	//Check Colors
	ILI9341_FillScreen(ILI9341_WHITE);
 8000ce0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ce4:	f7ff ff06 	bl	8000af4 <ILI9341_FillScreen>
	ILI9341_WriteString(0,0, "", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8000ce8:	4b56      	ldr	r3, [pc, #344]	@ (8000e44 <loop+0x2d4>)
 8000cea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cee:	9202      	str	r2, [sp, #8]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a5c      	ldr	r2, [pc, #368]	@ (8000e6c <loop+0x2fc>)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff fe3f 	bl	8000982 <ILI9341_WriteString>
	HAL_Delay(500);
 8000d04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d08:	f000 fade 	bl	80012c8 <HAL_Delay>

	ILI9341_FillScreen(ILI9341_BLUE);
 8000d0c:	201f      	movs	r0, #31
 8000d0e:	f7ff fef1 	bl	8000af4 <ILI9341_FillScreen>
	ILI9341_WriteString(0,0, "BLUE", Font_11x18, ILI9341_BLACK, ILI9341_BLUE);
 8000d12:	4b4c      	ldr	r3, [pc, #304]	@ (8000e44 <loop+0x2d4>)
 8000d14:	221f      	movs	r2, #31
 8000d16:	9202      	str	r2, [sp, #8]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	9201      	str	r2, [sp, #4]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	9200      	str	r2, [sp, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a53      	ldr	r2, [pc, #332]	@ (8000e70 <loop+0x300>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff fe2b 	bl	8000982 <ILI9341_WriteString>
	HAL_Delay(500);
 8000d2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d30:	f000 faca 	bl	80012c8 <HAL_Delay>

	ILI9341_FillScreen(ILI9341_RED);
 8000d34:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000d38:	f7ff fedc 	bl	8000af4 <ILI9341_FillScreen>
	ILI9341_WriteString(0,0, "RED", Font_11x18, ILI9341_BLACK, ILI9341_RED);
 8000d3c:	4b41      	ldr	r3, [pc, #260]	@ (8000e44 <loop+0x2d4>)
 8000d3e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000d42:	9202      	str	r2, [sp, #8]
 8000d44:	2200      	movs	r2, #0
 8000d46:	9201      	str	r2, [sp, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	9200      	str	r2, [sp, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a49      	ldr	r2, [pc, #292]	@ (8000e74 <loop+0x304>)
 8000d50:	2100      	movs	r1, #0
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fe15 	bl	8000982 <ILI9341_WriteString>
	HAL_Delay(500);
 8000d58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d5c:	f000 fab4 	bl	80012c8 <HAL_Delay>

	ILI9341_FillScreen(ILI9341_GREEN);
 8000d60:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000d64:	f7ff fec6 	bl	8000af4 <ILI9341_FillScreen>
	ILI9341_WriteString(0,0, "GREEN", Font_11x18, ILI9341_BLACK, ILI9341_GREEN);
 8000d68:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <loop+0x2d4>)
 8000d6a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000d6e:	9202      	str	r2, [sp, #8]
 8000d70:	2200      	movs	r2, #0
 8000d72:	9201      	str	r2, [sp, #4]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	9200      	str	r2, [sp, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e78 <loop+0x308>)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff fdff 	bl	8000982 <ILI9341_WriteString>
	HAL_Delay(500);
 8000d84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d88:	f000 fa9e 	bl	80012c8 <HAL_Delay>

	ILI9341_FillScreen(ILI9341_CYAN);
 8000d8c:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8000d90:	f7ff feb0 	bl	8000af4 <ILI9341_FillScreen>
	ILI9341_WriteString(0,0, "CYAN", Font_11x18, ILI9341_BLACK, ILI9341_CYAN);
 8000d94:	4b2b      	ldr	r3, [pc, #172]	@ (8000e44 <loop+0x2d4>)
 8000d96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000d9a:	9202      	str	r2, [sp, #8]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	9201      	str	r2, [sp, #4]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	9200      	str	r2, [sp, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a35      	ldr	r2, [pc, #212]	@ (8000e7c <loop+0x30c>)
 8000da8:	2100      	movs	r1, #0
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff fde9 	bl	8000982 <ILI9341_WriteString>
	HAL_Delay(500);
 8000db0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000db4:	f000 fa88 	bl	80012c8 <HAL_Delay>

	ILI9341_FillScreen(ILI9341_MAGENTA);
 8000db8:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8000dbc:	f7ff fe9a 	bl	8000af4 <ILI9341_FillScreen>
	ILI9341_WriteString(0,0, "MAGENTA", Font_11x18, ILI9341_BLACK, ILI9341_MAGENTA);
 8000dc0:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <loop+0x2d4>)
 8000dc2:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8000dc6:	9202      	str	r2, [sp, #8]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	9201      	str	r2, [sp, #4]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8000e80 <loop+0x310>)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff fdd3 	bl	8000982 <ILI9341_WriteString>
	HAL_Delay(500);
 8000ddc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000de0:	f000 fa72 	bl	80012c8 <HAL_Delay>

	ILI9341_FillScreen(ILI9341_YELLOW);
 8000de4:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000de8:	f7ff fe84 	bl	8000af4 <ILI9341_FillScreen>
	ILI9341_WriteString(0,0, "YELLOW", Font_11x18, ILI9341_BLACK, ILI9341_YELLOW);
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <loop+0x2d4>)
 8000dee:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000df2:	9202      	str	r2, [sp, #8]
 8000df4:	2200      	movs	r2, #0
 8000df6:	9201      	str	r2, [sp, #4]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a21      	ldr	r2, [pc, #132]	@ (8000e84 <loop+0x314>)
 8000e00:	2100      	movs	r1, #0
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fdbd 	bl	8000982 <ILI9341_WriteString>
	HAL_Delay(500);
 8000e08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e0c:	f000 fa5c 	bl	80012c8 <HAL_Delay>

	ILI9341_FillScreen(ILI9341_BLACK);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff fe6f 	bl	8000af4 <ILI9341_FillScreen>
	ILI9341_WriteString(0,0, "BLACK", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <loop+0x2d4>)
 8000e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e1c:	9202      	str	r2, [sp, #8]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	9201      	str	r2, [sp, #4]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	9200      	str	r2, [sp, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <loop+0x318>)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fda8 	bl	8000982 <ILI9341_WriteString>
	HAL_Delay(500);
 8000e32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e36:	f000 fa47 	bl	80012c8 <HAL_Delay>

}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	080028f8 	.word	0x080028f8
 8000e4c:	08002908 	.word	0x08002908
 8000e50:	0800291c 	.word	0x0800291c
 8000e54:	20000010 	.word	0x20000010
 8000e58:	08002930 	.word	0x08002930
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	08002944 	.word	0x08002944
 8000e64:	08002954 	.word	0x08002954
 8000e68:	08002968 	.word	0x08002968
 8000e6c:	0800297c 	.word	0x0800297c
 8000e70:	08002980 	.word	0x08002980
 8000e74:	08002988 	.word	0x08002988
 8000e78:	0800298c 	.word	0x0800298c
 8000e7c:	08002994 	.word	0x08002994
 8000e80:	0800299c 	.word	0x0800299c
 8000e84:	080029a4 	.word	0x080029a4
 8000e88:	080029ac 	.word	0x080029ac

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e90:	f000 f9ab 	bl	80011ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e94:	f000 f80a 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e98:	f000 f884 	bl	8000fa4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e9c:	f000 f84c 	bl	8000f38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	init();
 8000ea0:	f7ff fe5c 	bl	8000b5c <init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	loop();
 8000ea4:	f7ff fe64 	bl	8000b70 <loop>
 8000ea8:	e7fc      	b.n	8000ea4 <main+0x18>
	...

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b092      	sub	sp, #72	@ 0x48
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2234      	movs	r2, #52	@ 0x34
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fcca 	bl	8002854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ece:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <SystemClock_Config+0x88>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000ed6:	4a17      	ldr	r2, [pc, #92]	@ (8000f34 <SystemClock_Config+0x88>)
 8000ed8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000edc:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fc96 	bl	8001824 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000efe:	f000 f8a5 	bl	800104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000f0a:	2380      	movs	r3, #128	@ 0x80
 8000f0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 ffb2 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f26:	f000 f891 	bl	800104c <Error_Handler>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3748      	adds	r7, #72	@ 0x48
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40007000 	.word	0x40007000

08000f38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f3e:	4a18      	ldr	r2, [pc, #96]	@ (8000fa0 <MX_SPI1_Init+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f56:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f6c:	2228      	movs	r2, #40	@ 0x28
 8000f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f84:	220a      	movs	r2, #10
 8000f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <MX_SPI1_Init+0x64>)
 8000f8a:	f001 f9cd 	bl	8002328 <HAL_SPI_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f94:	f000 f85a 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000040 	.word	0x20000040
 8000fa0:	40013000 	.word	0x40013000

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <MX_GPIO_Init+0x9c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a20      	ldr	r2, [pc, #128]	@ (8001040 <MX_GPIO_Init+0x9c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <MX_GPIO_Init+0x9c>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <MX_GPIO_Init+0x9c>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001040 <MX_GPIO_Init+0x9c>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_GPIO_Init+0x9c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	4815      	ldr	r0, [pc, #84]	@ (8001044 <MX_GPIO_Init+0xa0>)
 8000ff0:	f000 fc00 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	4813      	ldr	r0, [pc, #76]	@ (8001048 <MX_GPIO_Init+0xa4>)
 8000ffa:	f000 fbfb 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ffe:	2310      	movs	r3, #16
 8001000:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4619      	mov	r1, r3
 8001014:	480b      	ldr	r0, [pc, #44]	@ (8001044 <MX_GPIO_Init+0xa0>)
 8001016:	f000 fa5d 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101a:	2303      	movs	r3, #3
 800101c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_GPIO_Init+0xa4>)
 8001032:	f000 fa4f 	bl	80014d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <Error_Handler+0x8>

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_MspInit+0x58>)
 8001060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001062:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <HAL_MspInit+0x58>)
 8001064:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001068:	6253      	str	r3, [r2, #36]	@ 0x24
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <HAL_MspInit+0x58>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <HAL_MspInit+0x58>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <HAL_MspInit+0x58>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <HAL_MspInit+0x58>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <HAL_MspInit+0x58>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	4a07      	ldr	r2, [pc, #28]	@ (80010b0 <HAL_MspInit+0x58>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001098:	6253      	str	r3, [r2, #36]	@ 0x24
 800109a:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <HAL_MspInit+0x58>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a17      	ldr	r2, [pc, #92]	@ (8001130 <HAL_SPI_MspInit+0x7c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d127      	bne.n	8001126 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <HAL_SPI_MspInit+0x80>)
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <HAL_SPI_MspInit+0x80>)
 80010dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010e0:	6213      	str	r3, [r2, #32]
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <HAL_SPI_MspInit+0x80>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_SPI_MspInit+0x80>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	4a10      	ldr	r2, [pc, #64]	@ (8001134 <HAL_SPI_MspInit+0x80>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	61d3      	str	r3, [r2, #28]
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <HAL_SPI_MspInit+0x80>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
<<<<<<< HEAD
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001106:	23e0      	movs	r3, #224	@ 0xe0
=======
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001106:	23a0      	movs	r3, #160	@ 0xa0
>>>>>>> c4f9c3215e11aefed8f37feac314fac4b0e6ce0f
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001116:	2305      	movs	r3, #5
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	@ (8001138 <HAL_SPI_MspInit+0x84>)
 8001122:	f000 f9d7 	bl	80014d4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40013000 	.word	0x40013000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <NMI_Handler+0x4>

08001144 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <MemManage_Handler+0x4>

08001154 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <UsageFault_Handler+0x4>

08001164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118c:	f000 f880 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a0:	f7ff fff8 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a4:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011a6:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011a8:	4a0c      	ldr	r2, [pc, #48]	@ (80011dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a09      	ldr	r2, [pc, #36]	@ (80011e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011bc:	4c09      	ldr	r4, [pc, #36]	@ (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ca:	f001 fb4b 	bl	8002864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ce:	f7ff fe5d 	bl	8000e8c <main>
  bx lr
 80011d2:	4770      	bx	lr
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80011dc:	080051f4 	.word	0x080051f4
  ldr r2, =_sbss
 80011e0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80011e4:	2000009c 	.word	0x2000009c

080011e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_IRQHandler>

080011ea <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f939 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f80e 	bl	800121c <HAL_InitTick>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	e001      	b.n	8001210 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800120c:	f7ff ff24 	bl	8001058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001210:	79fb      	ldrb	r3, [r7, #7]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_InitTick+0x68>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d022      	beq.n	8001276 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <HAL_InitTick+0x6c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <HAL_InitTick+0x68>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800123c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f938 	bl	80014ba <HAL_SYSTICK_Config>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10f      	bne.n	8001270 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	d809      	bhi.n	800126a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001256:	2200      	movs	r2, #0
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	f04f 30ff 	mov.w	r0, #4294967295
 800125e:	f000 f910 	bl	8001482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001262:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <HAL_InitTick+0x70>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e007      	b.n	800127a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e004      	b.n	800127a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e001      	b.n	800127a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000020 	.word	0x20000020
 8001288:	20000018 	.word	0x20000018
 800128c:	2000001c 	.word	0x2000001c

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x1c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_IncTick+0x20>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4413      	add	r3, r2
 800129e:	4a03      	ldr	r2, [pc, #12]	@ (80012ac <HAL_IncTick+0x1c>)
 80012a0:	6013      	str	r3, [r2, #0]
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000098 	.word	0x20000098
 80012b0:	20000020 	.word	0x20000020

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b02      	ldr	r3, [pc, #8]	@ (80012c4 <HAL_GetTick+0x10>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	20000098 	.word	0x20000098

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d004      	beq.n	80012ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <HAL_Delay+0x40>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ec:	bf00      	nop
 80012ee:	f7ff ffe1 	bl	80012b4 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d8f7      	bhi.n	80012ee <HAL_Delay+0x26>
  {
  }
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000020 	.word	0x20000020

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	@ (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	@ (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	@ 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	@ 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff90 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff49 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff5e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff90 	bl	80013c4 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5f 	bl	8001370 <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffb0 	bl	8001428 <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014ea:	e160      	b.n	80017ae <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8152 	beq.w	80017a8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d005      	beq.n	800151c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001518:	2b02      	cmp	r3, #2
 800151a:	d130      	bne.n	800157e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001552:	2201      	movs	r2, #1
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f003 0201 	and.w	r2, r3, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b03      	cmp	r3, #3
 8001588:	d017      	beq.n	80015ba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d123      	bne.n	800160e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0203 	and.w	r2, r3, #3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80ac 	beq.w	80017a8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001650:	4b5e      	ldr	r3, [pc, #376]	@ (80017cc <HAL_GPIO_Init+0x2f8>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a5d      	ldr	r2, [pc, #372]	@ (80017cc <HAL_GPIO_Init+0x2f8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	4b5b      	ldr	r3, [pc, #364]	@ (80017cc <HAL_GPIO_Init+0x2f8>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001668:	4a59      	ldr	r2, [pc, #356]	@ (80017d0 <HAL_GPIO_Init+0x2fc>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a51      	ldr	r2, [pc, #324]	@ (80017d4 <HAL_GPIO_Init+0x300>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d025      	beq.n	80016e0 <HAL_GPIO_Init+0x20c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a50      	ldr	r2, [pc, #320]	@ (80017d8 <HAL_GPIO_Init+0x304>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d01f      	beq.n	80016dc <HAL_GPIO_Init+0x208>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a4f      	ldr	r2, [pc, #316]	@ (80017dc <HAL_GPIO_Init+0x308>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d019      	beq.n	80016d8 <HAL_GPIO_Init+0x204>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a4e      	ldr	r2, [pc, #312]	@ (80017e0 <HAL_GPIO_Init+0x30c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d013      	beq.n	80016d4 <HAL_GPIO_Init+0x200>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a4d      	ldr	r2, [pc, #308]	@ (80017e4 <HAL_GPIO_Init+0x310>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d00d      	beq.n	80016d0 <HAL_GPIO_Init+0x1fc>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a4c      	ldr	r2, [pc, #304]	@ (80017e8 <HAL_GPIO_Init+0x314>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d007      	beq.n	80016cc <HAL_GPIO_Init+0x1f8>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a4b      	ldr	r2, [pc, #300]	@ (80017ec <HAL_GPIO_Init+0x318>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d101      	bne.n	80016c8 <HAL_GPIO_Init+0x1f4>
 80016c4:	2306      	movs	r3, #6
 80016c6:	e00c      	b.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016c8:	2307      	movs	r3, #7
 80016ca:	e00a      	b.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016cc:	2305      	movs	r3, #5
 80016ce:	e008      	b.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016d0:	2304      	movs	r3, #4
 80016d2:	e006      	b.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016d4:	2303      	movs	r3, #3
 80016d6:	e004      	b.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016d8:	2302      	movs	r3, #2
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016e0:	2300      	movs	r3, #0
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	f002 0203 	and.w	r2, r2, #3
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	4093      	lsls	r3, r2
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016f2:	4937      	ldr	r1, [pc, #220]	@ (80017d0 <HAL_GPIO_Init+0x2fc>)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001700:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_GPIO_Init+0x31c>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001724:	4a32      	ldr	r2, [pc, #200]	@ (80017f0 <HAL_GPIO_Init+0x31c>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800172a:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <HAL_GPIO_Init+0x31c>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800174e:	4a28      	ldr	r2, [pc, #160]	@ (80017f0 <HAL_GPIO_Init+0x31c>)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001754:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <HAL_GPIO_Init+0x31c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001778:	4a1d      	ldr	r2, [pc, #116]	@ (80017f0 <HAL_GPIO_Init+0x31c>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <HAL_GPIO_Init+0x31c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <HAL_GPIO_Init+0x31c>)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f47f ae97 	bne.w	80014ec <HAL_GPIO_Init+0x18>
  }
}
 80017be:	bf00      	nop
 80017c0:	bf00      	nop
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40021400 	.word	0x40021400
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001810:	e003      	b.n	800181a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	041a      	lsls	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	619a      	str	r2, [r3, #24]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e31d      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001836:	4b94      	ldr	r3, [pc, #592]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001840:	4b91      	ldr	r3, [pc, #580]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001848:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d07b      	beq.n	800194e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b08      	cmp	r3, #8
 800185a:	d006      	beq.n	800186a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d10f      	bne.n	8001882 <HAL_RCC_OscConfig+0x5e>
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001868:	d10b      	bne.n	8001882 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186a:	4b87      	ldr	r3, [pc, #540]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d06a      	beq.n	800194c <HAL_RCC_OscConfig+0x128>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d166      	bne.n	800194c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e2f7      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x74>
 800188a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e02d      	b.n	80018f4 <HAL_RCC_OscConfig+0xd0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x96>
 80018a0:	4b79      	ldr	r3, [pc, #484]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a78      	ldr	r2, [pc, #480]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b76      	ldr	r3, [pc, #472]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a75      	ldr	r2, [pc, #468]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e01c      	b.n	80018f4 <HAL_RCC_OscConfig+0xd0>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b05      	cmp	r3, #5
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0xb8>
 80018c2:	4b71      	ldr	r3, [pc, #452]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a70      	ldr	r2, [pc, #448]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6d      	ldr	r2, [pc, #436]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xd0>
 80018dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a69      	ldr	r2, [pc, #420]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b67      	ldr	r3, [pc, #412]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a66      	ldr	r2, [pc, #408]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fcda 	bl	80012b4 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fcd6 	bl	80012b4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e2ad      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001916:	4b5c      	ldr	r3, [pc, #368]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xe0>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fcc6 	bl	80012b4 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fcc2 	bl	80012b4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	@ 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e299      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800193e:	4b52      	ldr	r3, [pc, #328]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x108>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d05a      	beq.n	8001a10 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d119      	bne.n	800199a <HAL_RCC_OscConfig+0x176>
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d116      	bne.n	800199a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196c:	4b46      	ldr	r3, [pc, #280]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_OscConfig+0x160>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d001      	beq.n	8001984 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e276      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	4b40      	ldr	r3, [pc, #256]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	493d      	ldr	r1, [pc, #244]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001998:	e03a      	b.n	8001a10 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d020      	beq.n	80019e4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a2:	4b3a      	ldr	r3, [pc, #232]	@ (8001a8c <HAL_RCC_OscConfig+0x268>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fc84 	bl	80012b4 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b0:	f7ff fc80 	bl	80012b4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e257      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c2:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	492a      	ldr	r1, [pc, #168]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
 80019e2:	e015      	b.n	8001a10 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e4:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <HAL_RCC_OscConfig+0x268>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fc63 	bl	80012b4 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff fc5f 	bl	80012b4 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e236      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a04:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80b8 	beq.w	8001b8e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d170      	bne.n	8001b06 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a24:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x218>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e21a      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d921      	bls.n	8001a90 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fc09 	bl	8002268 <RCC_SetFlashLatencyFromMSIRange>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e208      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4906      	ldr	r1, [pc, #24]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a72:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	061b      	lsls	r3, r3, #24
 8001a80:	4901      	ldr	r1, [pc, #4]	@ (8001a88 <HAL_RCC_OscConfig+0x264>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
 8001a86:	e020      	b.n	8001aca <HAL_RCC_OscConfig+0x2a6>
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a90:	4b99      	ldr	r3, [pc, #612]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4996      	ldr	r1, [pc, #600]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa2:	4b95      	ldr	r3, [pc, #596]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	061b      	lsls	r3, r3, #24
 8001ab0:	4991      	ldr	r1, [pc, #580]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fbd4 	bl	8002268 <RCC_SetFlashLatencyFromMSIRange>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e1d3      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	0b5b      	lsrs	r3, r3, #13
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ada:	4a87      	ldr	r2, [pc, #540]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001adc:	6892      	ldr	r2, [r2, #8]
 8001ade:	0912      	lsrs	r2, r2, #4
 8001ae0:	f002 020f 	and.w	r2, r2, #15
 8001ae4:	4985      	ldr	r1, [pc, #532]	@ (8001cfc <HAL_RCC_OscConfig+0x4d8>)
 8001ae6:	5c8a      	ldrb	r2, [r1, r2]
 8001ae8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aea:	4a85      	ldr	r2, [pc, #532]	@ (8001d00 <HAL_RCC_OscConfig+0x4dc>)
 8001aec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aee:	4b85      	ldr	r3, [pc, #532]	@ (8001d04 <HAL_RCC_OscConfig+0x4e0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fb92 	bl	800121c <HAL_InitTick>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d045      	beq.n	8001b8e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	e1b5      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d029      	beq.n	8001b62 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b0e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d08 <HAL_RCC_OscConfig+0x4e4>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fbce 	bl	80012b4 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fbca 	bl	80012b4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1a1      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b2e:	4b72      	ldr	r3, [pc, #456]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	496c      	ldr	r1, [pc, #432]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	061b      	lsls	r3, r3, #24
 8001b5a:	4967      	ldr	r1, [pc, #412]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b62:	4b69      	ldr	r3, [pc, #420]	@ (8001d08 <HAL_RCC_OscConfig+0x4e4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fba4 	bl	80012b4 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b70:	f7ff fba0 	bl	80012b4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e177      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b82:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d030      	beq.n	8001bfc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d0c <HAL_RCC_OscConfig+0x4e8>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fb84 	bl	80012b4 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fb80 	bl	80012b4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e157      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x38c>
 8001bce:	e015      	b.n	8001bfc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8001d0c <HAL_RCC_OscConfig+0x4e8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fb6d 	bl	80012b4 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff fb69 	bl	80012b4 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e140      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bf0:	4b41      	ldr	r3, [pc, #260]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80b5 	beq.w	8001d74 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	4a36      	ldr	r2, [pc, #216]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c26:	4b34      	ldr	r3, [pc, #208]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b36      	ldr	r3, [pc, #216]	@ (8001d10 <HAL_RCC_OscConfig+0x4ec>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b33      	ldr	r3, [pc, #204]	@ (8001d10 <HAL_RCC_OscConfig+0x4ec>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a32      	ldr	r2, [pc, #200]	@ (8001d10 <HAL_RCC_OscConfig+0x4ec>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff fb31 	bl	80012b4 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff fb2d 	bl	80012b4 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	@ 0x64
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e104      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <HAL_RCC_OscConfig+0x4ec>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x466>
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c80:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c86:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c88:	e02d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4c2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x488>
 8001c92:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c96:	4a18      	ldr	r2, [pc, #96]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c9c:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c9e:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca2:	4a15      	ldr	r2, [pc, #84]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001ca4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ca8:	6353      	str	r3, [r2, #52]	@ 0x34
 8001caa:	e01c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4c2>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x4aa>
 8001cb4:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cbe:	6353      	str	r3, [r2, #52]	@ 0x34
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cca:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ccc:	e00b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4c2>
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd2:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cd8:	6353      	str	r3, [r2, #52]	@ 0x34
 8001cda:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cde:	4a06      	ldr	r2, [pc, #24]	@ (8001cf8 <HAL_RCC_OscConfig+0x4d4>)
 8001ce0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ce4:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d024      	beq.n	8001d38 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7ff fae1 	bl	80012b4 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cf4:	e019      	b.n	8001d2a <HAL_RCC_OscConfig+0x506>
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	080051d4 	.word	0x080051d4
 8001d00:	20000018 	.word	0x20000018
 8001d04:	2000001c 	.word	0x2000001c
 8001d08:	42470020 	.word	0x42470020
 8001d0c:	42470680 	.word	0x42470680
 8001d10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7ff face 	bl	80012b4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0a3      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d2a:	4b54      	ldr	r3, [pc, #336]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0ee      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4f0>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff fabc 	bl	80012b4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7ff fab8 	bl	80012b4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e08d      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d56:	4b49      	ldr	r3, [pc, #292]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ee      	bne.n	8001d40 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d68:	4b44      	ldr	r3, [pc, #272]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	4a43      	ldr	r2, [pc, #268]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d72:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d079      	beq.n	8001e70 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d056      	beq.n	8001e30 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d13b      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e80 <HAL_RCC_OscConfig+0x65c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fa90 	bl	80012b4 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff fa8c 	bl	80012b4 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e063      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001daa:	4b34      	ldr	r3, [pc, #208]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db6:	4b31      	ldr	r3, [pc, #196]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc6:	4319      	orrs	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	492b      	ldr	r1, [pc, #172]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e80 <HAL_RCC_OscConfig+0x65c>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7ff fa6b 	bl	80012b4 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de2:	f7ff fa67 	bl	80012b4 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e03e      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001df4:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x5be>
 8001e00:	e036      	b.n	8001e70 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <HAL_RCC_OscConfig+0x65c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fa54 	bl	80012b4 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff fa50 	bl	80012b4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e027      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e22:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x5ec>
 8001e2e:	e01f      	b.n	8001e70 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e01a      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <HAL_RCC_OscConfig+0x658>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d10d      	bne.n	8001e6c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	42470060 	.word	0x42470060

08001e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e11a      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b8f      	ldr	r3, [pc, #572]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d919      	bls.n	8001eda <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x34>
 8001eac:	4b8a      	ldr	r3, [pc, #552]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a89      	ldr	r2, [pc, #548]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b87      	ldr	r3, [pc, #540]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0201 	bic.w	r2, r3, #1
 8001ec0:	4985      	ldr	r1, [pc, #532]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec8:	4b83      	ldr	r3, [pc, #524]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0f9      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	497a      	ldr	r1, [pc, #488]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 808e 	beq.w	8002022 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f0e:	4b73      	ldr	r3, [pc, #460]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d121      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0d7      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f26:	4b6d      	ldr	r3, [pc, #436]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d115      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0cb      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f3e:	4b67      	ldr	r3, [pc, #412]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0bf      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f4e:	4b63      	ldr	r3, [pc, #396]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0b7      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	495c      	ldr	r1, [pc, #368]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f70:	f7ff f9a0 	bl	80012b4 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d112      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7ff f998 	bl	80012b4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e09b      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f96:	4b51      	ldr	r3, [pc, #324]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d1ee      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xfc>
 8001fa2:	e03e      	b.n	8002022 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fae:	f7ff f981 	bl	80012b4 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e084      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc4:	4b45      	ldr	r3, [pc, #276]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_ClockConfig+0x12a>
 8001fd0:	e027      	b.n	8002022 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d11d      	bne.n	8002016 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7ff f96a 	bl	80012b4 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e06d      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d1ee      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x158>
 8001ffe:	e010      	b.n	8002022 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7ff f958 	bl	80012b4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e05b      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002016:	4b31      	ldr	r3, [pc, #196]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ee      	bne.n	8002000 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002022:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d219      	bcs.n	8002064 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d105      	bne.n	8002042 <HAL_RCC_ClockConfig+0x1be>
 8002036:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a27      	ldr	r2, [pc, #156]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b25      	ldr	r3, [pc, #148]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0201 	bic.w	r2, r3, #1
 800204a:	4923      	ldr	r1, [pc, #140]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b21      	ldr	r3, [pc, #132]	@ (80020d8 <HAL_RCC_ClockConfig+0x254>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e034      	b.n	80020ce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002070:	4b1a      	ldr	r3, [pc, #104]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4917      	ldr	r1, [pc, #92]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	490f      	ldr	r1, [pc, #60]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a2:	f000 f823 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020a6:	4602      	mov	r2, r0
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <HAL_RCC_ClockConfig+0x258>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	490b      	ldr	r1, [pc, #44]	@ (80020e0 <HAL_RCC_ClockConfig+0x25c>)
 80020b4:	5ccb      	ldrb	r3, [r1, r3]
 80020b6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <HAL_RCC_ClockConfig+0x260>)
 80020bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_RCC_ClockConfig+0x264>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f8aa 	bl	800121c <HAL_InitTick>
 80020c8:	4603      	mov	r3, r0
 80020ca:	72fb      	strb	r3, [r7, #11]

  return status;
 80020cc:	7afb      	ldrb	r3, [r7, #11]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00
 80020dc:	40023800 	.word	0x40023800
 80020e0:	080051d4 	.word	0x080051d4
 80020e4:	20000018 	.word	0x20000018
 80020e8:	2000001c 	.word	0x2000001c

080020ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f0:	b08e      	sub	sp, #56	@ 0x38
 80020f2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80020f4:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x16c>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d00d      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0x34>
 8002104:	2b0c      	cmp	r3, #12
 8002106:	f200 8092 	bhi.w	800222e <HAL_RCC_GetSysClockFreq+0x142>
 800210a:	2b04      	cmp	r3, #4
 800210c:	d002      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x28>
 800210e:	2b08      	cmp	r3, #8
 8002110:	d003      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0x2e>
 8002112:	e08c      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b51      	ldr	r3, [pc, #324]	@ (800225c <HAL_RCC_GetSysClockFreq+0x170>)
 8002116:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002118:	e097      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800211a:	4b51      	ldr	r3, [pc, #324]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x174>)
 800211c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800211e:	e094      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002122:	0c9b      	lsrs	r3, r3, #18
 8002124:	f003 020f 	and.w	r2, r3, #15
 8002128:	4b4e      	ldr	r3, [pc, #312]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x178>)
 800212a:	5c9b      	ldrb	r3, [r3, r2]
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800212e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002130:	0d9b      	lsrs	r3, r3, #22
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x16c>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d021      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002148:	2200      	movs	r2, #0
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	61fa      	str	r2, [r7, #28]
 800214e:	4b44      	ldr	r3, [pc, #272]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x174>)
 8002150:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002154:	464a      	mov	r2, r9
 8002156:	fb03 f202 	mul.w	r2, r3, r2
 800215a:	2300      	movs	r3, #0
 800215c:	4644      	mov	r4, r8
 800215e:	fb04 f303 	mul.w	r3, r4, r3
 8002162:	4413      	add	r3, r2
 8002164:	4a3e      	ldr	r2, [pc, #248]	@ (8002260 <HAL_RCC_GetSysClockFreq+0x174>)
 8002166:	4644      	mov	r4, r8
 8002168:	fba4 0102 	umull	r0, r1, r4, r2
 800216c:	440b      	add	r3, r1
 800216e:	4619      	mov	r1, r3
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	2200      	movs	r2, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	617a      	str	r2, [r7, #20]
 8002178:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800217c:	f7fd fffe 	bl	800017c <__aeabi_uldivmod>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4613      	mov	r3, r2
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
 8002188:	e04e      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800218a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218c:	2200      	movs	r2, #0
 800218e:	469a      	mov	sl, r3
 8002190:	4693      	mov	fp, r2
 8002192:	4652      	mov	r2, sl
 8002194:	465b      	mov	r3, fp
 8002196:	f04f 0000 	mov.w	r0, #0
 800219a:	f04f 0100 	mov.w	r1, #0
 800219e:	0159      	lsls	r1, r3, #5
 80021a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a4:	0150      	lsls	r0, r2, #5
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	ebb2 080a 	subs.w	r8, r2, sl
 80021ae:	eb63 090b 	sbc.w	r9, r3, fp
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021c6:	ebb2 0408 	subs.w	r4, r2, r8
 80021ca:	eb63 0509 	sbc.w	r5, r3, r9
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	00eb      	lsls	r3, r5, #3
 80021d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021dc:	00e2      	lsls	r2, r4, #3
 80021de:	4614      	mov	r4, r2
 80021e0:	461d      	mov	r5, r3
 80021e2:	eb14 030a 	adds.w	r3, r4, sl
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	eb45 030b 	adc.w	r3, r5, fp
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021fa:	4629      	mov	r1, r5
 80021fc:	028b      	lsls	r3, r1, #10
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	4604      	mov	r4, r0
 8002204:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002208:	4601      	mov	r1, r0
 800220a:	028a      	lsls	r2, r1, #10
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	2200      	movs	r2, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	60fa      	str	r2, [r7, #12]
 8002218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800221c:	f7fd ffae 	bl	800017c <__aeabi_uldivmod>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4613      	mov	r3, r2
 8002226:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8002228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800222c:	e00d      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	0b5b      	lsrs	r3, r3, #13
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	3301      	adds	r3, #1
 800223e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800224c:	4618      	mov	r0, r3
 800224e:	3738      	adds	r7, #56	@ 0x38
 8002250:	46bd      	mov	sp, r7
 8002252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	00f42400 	.word	0x00f42400
 8002260:	016e3600 	.word	0x016e3600
 8002264:	080051c8 	.word	0x080051c8

08002268 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002274:	4b29      	ldr	r3, [pc, #164]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d12c      	bne.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002280:	4b26      	ldr	r3, [pc, #152]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800228c:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e016      	b.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b20      	ldr	r3, [pc, #128]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	6253      	str	r3, [r2, #36]	@ 0x24
 80022a4:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80022b8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b18      	ldr	r3, [pc, #96]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	4a17      	ldr	r2, [pc, #92]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80022cc:	d105      	bne.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x72>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80022d4:	d101      	bne.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80022d6:	2301      	movs	r3, #1
 80022d8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x84>
 80022e0:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 0201 	bic.w	r2, r3, #1
 80022f4:	490b      	ldr	r1, [pc, #44]	@ (8002324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	371c      	adds	r7, #28
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40007000 	.word	0x40007000
 8002324:	40023c00 	.word	0x40023c00

08002328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e07b      	b.n	8002432 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800234a:	d009      	beq.n	8002360 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
 8002352:	e005      	b.n	8002360 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fe9a 	bl	80010b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002396:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e4:	ea42 0103 	orr.w	r1, r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	0c1b      	lsrs	r3, r3, #16
 80023fe:	f003 0104 	and.w	r1, r3, #4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	f003 0210 	and.w	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002420:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b088      	sub	sp, #32
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_SPI_Transmit+0x22>
 8002458:	2302      	movs	r3, #2
 800245a:	e12d      	b.n	80026b8 <HAL_SPI_Transmit+0x27e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002464:	f7fe ff26 	bl	80012b4 <HAL_GetTick>
 8002468:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d002      	beq.n	8002480 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800247e:	e116      	b.n	80026ae <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_SPI_Transmit+0x52>
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002490:	e10d      	b.n	80026ae <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	88fa      	ldrh	r2, [r7, #6]
 80024aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024d8:	d10f      	bne.n	80024fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002504:	2b40      	cmp	r3, #64	@ 0x40
 8002506:	d007      	beq.n	8002518 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002520:	d14f      	bne.n	80025c2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_SPI_Transmit+0xf6>
 800252a:	8afb      	ldrh	r3, [r7, #22]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d142      	bne.n	80025b6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	881a      	ldrh	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	1c9a      	adds	r2, r3, #2
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002554:	e02f      	b.n	80025b6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b02      	cmp	r3, #2
 8002562:	d112      	bne.n	800258a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	881a      	ldrh	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	1c9a      	adds	r2, r3, #2
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002588:	e015      	b.n	80025b6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800258a:	f7fe fe93 	bl	80012b4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d803      	bhi.n	80025a2 <HAL_SPI_Transmit+0x168>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d102      	bne.n	80025a8 <HAL_SPI_Transmit+0x16e>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80025b4:	e07b      	b.n	80026ae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ca      	bne.n	8002556 <HAL_SPI_Transmit+0x11c>
 80025c0:	e050      	b.n	8002664 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_SPI_Transmit+0x196>
 80025ca:	8afb      	ldrh	r3, [r7, #22]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d144      	bne.n	800265a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	7812      	ldrb	r2, [r2, #0]
 80025dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025f6:	e030      	b.n	800265a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d113      	bne.n	800262e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	330c      	adds	r3, #12
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800262c:	e015      	b.n	800265a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262e:	f7fe fe41 	bl	80012b4 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d803      	bhi.n	8002646 <HAL_SPI_Transmit+0x20c>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d102      	bne.n	800264c <HAL_SPI_Transmit+0x212>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002658:	e029      	b.n	80026ae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1c9      	bne.n	80025f8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f8b1 	bl	80027d0 <SPI_EndRxTxTransaction>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	77fb      	strb	r3, [r7, #31]
 80026a4:	e003      	b.n	80026ae <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d0:	f7fe fdf0 	bl	80012b4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e0:	f7fe fde8 	bl	80012b4 <HAL_GetTick>
 80026e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026e6:	4b39      	ldr	r3, [pc, #228]	@ (80027cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	015b      	lsls	r3, r3, #5
 80026ec:	0d1b      	lsrs	r3, r3, #20
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f6:	e054      	b.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fe:	d050      	beq.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002700:	f7fe fdd8 	bl	80012b4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	d902      	bls.n	8002716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d13d      	bne.n	8002792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800272e:	d111      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002738:	d004      	beq.n	8002744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002742:	d107      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275c:	d10f      	bne.n	800277e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800277c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e017      	b.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3b01      	subs	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d19b      	bne.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000018 	.word	0x20000018

080027d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027dc:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <SPI_EndRxTxTransaction+0x7c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002850 <SPI_EndRxTxTransaction+0x80>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0d5b      	lsrs	r3, r3, #21
 80027e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027fa:	d112      	bne.n	8002822 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	@ 0x80
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff ff5a 	bl	80026c0 <SPI_WaitFlagStateUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e00f      	b.n	8002842 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3b01      	subs	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002838:	2b80      	cmp	r3, #128	@ 0x80
 800283a:	d0f2      	beq.n	8002822 <SPI_EndRxTxTransaction+0x52>
 800283c:	e000      	b.n	8002840 <SPI_EndRxTxTransaction+0x70>
        break;
 800283e:	bf00      	nop
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000018 	.word	0x20000018
 8002850:	165e9f81 	.word	0x165e9f81

08002854 <memset>:
 8002854:	4603      	mov	r3, r0
 8002856:	4402      	add	r2, r0
 8002858:	4293      	cmp	r3, r2
 800285a:	d100      	bne.n	800285e <memset+0xa>
 800285c:	4770      	bx	lr
 800285e:	f803 1b01 	strb.w	r1, [r3], #1
 8002862:	e7f9      	b.n	8002858 <memset+0x4>

08002864 <__libc_init_array>:
 8002864:	b570      	push	{r4, r5, r6, lr}
 8002866:	2600      	movs	r6, #0
 8002868:	4d0c      	ldr	r5, [pc, #48]	@ (800289c <__libc_init_array+0x38>)
 800286a:	4c0d      	ldr	r4, [pc, #52]	@ (80028a0 <__libc_init_array+0x3c>)
 800286c:	1b64      	subs	r4, r4, r5
 800286e:	10a4      	asrs	r4, r4, #2
 8002870:	42a6      	cmp	r6, r4
 8002872:	d109      	bne.n	8002888 <__libc_init_array+0x24>
 8002874:	f000 f81a 	bl	80028ac <_init>
 8002878:	2600      	movs	r6, #0
 800287a:	4d0a      	ldr	r5, [pc, #40]	@ (80028a4 <__libc_init_array+0x40>)
 800287c:	4c0a      	ldr	r4, [pc, #40]	@ (80028a8 <__libc_init_array+0x44>)
 800287e:	1b64      	subs	r4, r4, r5
 8002880:	10a4      	asrs	r4, r4, #2
 8002882:	42a6      	cmp	r6, r4
 8002884:	d105      	bne.n	8002892 <__libc_init_array+0x2e>
 8002886:	bd70      	pop	{r4, r5, r6, pc}
 8002888:	f855 3b04 	ldr.w	r3, [r5], #4
 800288c:	4798      	blx	r3
 800288e:	3601      	adds	r6, #1
 8002890:	e7ee      	b.n	8002870 <__libc_init_array+0xc>
 8002892:	f855 3b04 	ldr.w	r3, [r5], #4
 8002896:	4798      	blx	r3
 8002898:	3601      	adds	r6, #1
 800289a:	e7f2      	b.n	8002882 <__libc_init_array+0x1e>
 800289c:	080051ec 	.word	0x080051ec
 80028a0:	080051ec 	.word	0x080051ec
 80028a4:	080051ec 	.word	0x080051ec
 80028a8:	080051f0 	.word	0x080051f0

080028ac <_init>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	bf00      	nop
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr

080028b8 <_fini>:
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ba:	bf00      	nop
 80028bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028be:	bc08      	pop	{r3}
 80028c0:	469e      	mov	lr, r3
 80028c2:	4770      	bx	lr
