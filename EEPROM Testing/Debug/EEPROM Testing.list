
EEPROM Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080043cc  080043cc  000053cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d8  080044d8  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080044d8  080044d8  000054d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044e0  080044e0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e0  080044e0  000054e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044e4  080044e4  000054e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080044e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08004550  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004550  00006278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1e3  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2e  00000000  00000000  0001027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00011cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000751  00000000  00000000  00012640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220ce  00000000  00000000  00012d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b115  00000000  00000000  00034e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbfb3  00000000  00000000  0003ff74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bf27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e44  00000000  00000000  0010bf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080043b4 	.word	0x080043b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080043b4 	.word	0x080043b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <EEPROM_WriteEnable>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void EEPROM_WriteEnable(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x06;
 80005e2:	2306      	movs	r3, #6
 80005e4:	71fb      	strb	r3, [r7, #7]
    EEPROM_CS_LOW();
 80005e6:	2201      	movs	r2, #1
 80005e8:	2104      	movs	r1, #4
 80005ea:	480c      	ldr	r0, [pc, #48]	@ (800061c <EEPROM_WriteEnable+0x40>)
 80005ec:	f001 f85a 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80005f0:	2064      	movs	r0, #100	@ 0x64
 80005f2:	f000 fdb9 	bl	8001168 <HAL_Delay>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005fc:	2201      	movs	r2, #1
 80005fe:	4808      	ldr	r0, [pc, #32]	@ (8000620 <EEPROM_WriteEnable+0x44>)
 8000600:	f001 fe55 	bl	80022ae <HAL_SPI_Transmit>
    EEPROM_CS_HIGH();
 8000604:	2200      	movs	r2, #0
 8000606:	2104      	movs	r1, #4
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <EEPROM_WriteEnable+0x40>)
 800060a:	f001 f84b 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800060e:	2064      	movs	r0, #100	@ 0x64
 8000610:	f000 fdaa 	bl	8001168 <HAL_Delay>

}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40020c00 	.word	0x40020c00
 8000620:	20000084 	.word	0x20000084

08000624 <EEPROM_WriteByte>:

void EEPROM_WriteByte(uint8_t addr, uint8_t data) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	460a      	mov	r2, r1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	4613      	mov	r3, r2
 8000632:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[3] = {0x02, addr, data}; // WRITE instruction
 8000634:	2302      	movs	r3, #2
 8000636:	733b      	strb	r3, [r7, #12]
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	737b      	strb	r3, [r7, #13]
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	73bb      	strb	r3, [r7, #14]
    EEPROM_CS_LOW();
 8000640:	2201      	movs	r2, #1
 8000642:	2104      	movs	r1, #4
 8000644:	480c      	ldr	r0, [pc, #48]	@ (8000678 <EEPROM_WriteByte+0x54>)
 8000646:	f001 f82d 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	@ 0x64
 800064c:	f000 fd8c 	bl	8001168 <HAL_Delay>
    HAL_SPI_Transmit(&hspi3, buf, 3, HAL_MAX_DELAY);
 8000650:	f107 010c 	add.w	r1, r7, #12
 8000654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000658:	2203      	movs	r2, #3
 800065a:	4808      	ldr	r0, [pc, #32]	@ (800067c <EEPROM_WriteByte+0x58>)
 800065c:	f001 fe27 	bl	80022ae <HAL_SPI_Transmit>
    EEPROM_CS_HIGH();
 8000660:	2200      	movs	r2, #0
 8000662:	2104      	movs	r1, #4
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <EEPROM_WriteByte+0x54>)
 8000666:	f001 f81d 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800066a:	2064      	movs	r0, #100	@ 0x64
 800066c:	f000 fd7c 	bl	8001168 <HAL_Delay>

}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40020c00 	.word	0x40020c00
 800067c:	20000084 	.word	0x20000084

08000680 <EEPROM_ReadByte>:

uint8_t EEPROM_ReadByte(uint8_t addr) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd[2] = {0x03, addr}; // READ instruction
 800068a:	2303      	movs	r3, #3
 800068c:	733b      	strb	r3, [r7, #12]
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	737b      	strb	r3, [r7, #13]
    uint8_t data = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	72fb      	strb	r3, [r7, #11]
    EEPROM_CS_LOW();
 8000696:	2201      	movs	r2, #1
 8000698:	2104      	movs	r1, #4
 800069a:	4811      	ldr	r0, [pc, #68]	@ (80006e0 <EEPROM_ReadByte+0x60>)
 800069c:	f001 f802 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80006a0:	2064      	movs	r0, #100	@ 0x64
 80006a2:	f000 fd61 	bl	8001168 <HAL_Delay>
    HAL_SPI_Transmit(&hspi3, cmd, 2, HAL_MAX_DELAY);
 80006a6:	f107 010c 	add.w	r1, r7, #12
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006ae:	2202      	movs	r2, #2
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <EEPROM_ReadByte+0x64>)
 80006b2:	f001 fdfc 	bl	80022ae <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &data, 1, HAL_MAX_DELAY);
 80006b6:	f107 010b 	add.w	r1, r7, #11
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006be:	2201      	movs	r2, #1
 80006c0:	4808      	ldr	r0, [pc, #32]	@ (80006e4 <EEPROM_ReadByte+0x64>)
 80006c2:	f001 ff38 	bl	8002536 <HAL_SPI_Receive>
    EEPROM_CS_HIGH();
 80006c6:	2200      	movs	r2, #0
 80006c8:	2104      	movs	r1, #4
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <EEPROM_ReadByte+0x60>)
 80006cc:	f000 ffea 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	@ 0x64
 80006d2:	f000 fd49 	bl	8001168 <HAL_Delay>
    return data;
 80006d6:	7afb      	ldrb	r3, [r7, #11]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	20000084 	.word	0x20000084

080006e8 <EEPROM_ReadStatus>:

uint8_t EEPROM_ReadStatus(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x05;
 80006ee:	2305      	movs	r3, #5
 80006f0:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	71bb      	strb	r3, [r7, #6]
    EEPROM_CS_LOW();
 80006f6:	2201      	movs	r2, #1
 80006f8:	2104      	movs	r1, #4
 80006fa:	4810      	ldr	r0, [pc, #64]	@ (800073c <EEPROM_ReadStatus+0x54>)
 80006fc:	f000 ffd2 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000700:	2064      	movs	r0, #100	@ 0x64
 8000702:	f000 fd31 	bl	8001168 <HAL_Delay>
    HAL_SPI_Transmit(&hspi3, &cmd, 1, HAL_MAX_DELAY);
 8000706:	1df9      	adds	r1, r7, #7
 8000708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800070c:	2201      	movs	r2, #1
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <EEPROM_ReadStatus+0x58>)
 8000710:	f001 fdcd 	bl	80022ae <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &status, 1, HAL_MAX_DELAY);
 8000714:	1db9      	adds	r1, r7, #6
 8000716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800071a:	2201      	movs	r2, #1
 800071c:	4808      	ldr	r0, [pc, #32]	@ (8000740 <EEPROM_ReadStatus+0x58>)
 800071e:	f001 ff0a 	bl	8002536 <HAL_SPI_Receive>
    EEPROM_CS_HIGH();
 8000722:	2200      	movs	r2, #0
 8000724:	2104      	movs	r1, #4
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <EEPROM_ReadStatus+0x54>)
 8000728:	f000 ffbc 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800072c:	2064      	movs	r0, #100	@ 0x64
 800072e:	f000 fd1b 	bl	8001168 <HAL_Delay>
    return status;
 8000732:	79bb      	ldrb	r3, [r7, #6]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020c00 	.word	0x40020c00
 8000740:	20000084 	.word	0x20000084

08000744 <muxSET>:
	  {1, 0, 0},
	  {1, 0, 1},
	  {1, 1, 0}
	};

void muxSET(uint16_t A, uint16_t B, uint16_t C, bool control){
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4604      	mov	r4, r0
 800074c:	4608      	mov	r0, r1
 800074e:	4611      	mov	r1, r2
 8000750:	461a      	mov	r2, r3
 8000752:	4623      	mov	r3, r4
 8000754:	80fb      	strh	r3, [r7, #6]
 8000756:	4603      	mov	r3, r0
 8000758:	80bb      	strh	r3, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
 800075e:	4613      	mov	r3, r2
 8000760:	707b      	strb	r3, [r7, #1]
  if(control){
 8000762:	787b      	ldrb	r3, [r7, #1]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d015      	beq.n	8000794 <muxSET+0x50>
    HAL_GPIO_WritePin(MAST_A_GPIO_Port, MAST_A_Pin, A);
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	2101      	movs	r1, #1
 8000770:	4815      	ldr	r0, [pc, #84]	@ (80007c8 <muxSET+0x84>)
 8000772:	f000 ff97 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_B_GPIO_Port, MAST_B_Pin, B);
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	2102      	movs	r1, #2
 800077e:	4812      	ldr	r0, [pc, #72]	@ (80007c8 <muxSET+0x84>)
 8000780:	f000 ff90 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAST_C_GPIO_Port, MAST_C_Pin, C);
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	2110      	movs	r1, #16
 800078c:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <muxSET+0x84>)
 800078e:	f000 ff89 	bl	80016a4 <HAL_GPIO_WritePin>
  else{
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
  }
}
 8000792:	e014      	b.n	80007be <muxSET+0x7a>
    HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, A);
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	2101      	movs	r1, #1
 800079c:	480b      	ldr	r0, [pc, #44]	@ (80007cc <muxSET+0x88>)
 800079e:	f000 ff81 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_B_GPIO_Port, SLAVE_B_Pin, B);
 80007a2:	88bb      	ldrh	r3, [r7, #4]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	2102      	movs	r1, #2
 80007aa:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <muxSET+0x8c>)
 80007ac:	f000 ff7a 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SLAVE_C_GPIO_Port, SLAVE_C_Pin, C);
 80007b0:	887b      	ldrh	r3, [r7, #2]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	2101      	movs	r1, #1
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <muxSET+0x8c>)
 80007ba:	f000 ff73 	bl	80016a4 <HAL_GPIO_WritePin>
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020800 	.word	0x40020800

080007d4 <EEPROM_Write>:

void EEPROM_Write(uint8_t addr, uint8_t writeData){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	460a      	mov	r2, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
	printf("Status before write: 0x%02X \r\n", EEPROM_ReadStatus());
 80007e4:	f7ff ff80 	bl	80006e8 <EEPROM_ReadStatus>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4619      	mov	r1, r3
 80007ec:	4812      	ldr	r0, [pc, #72]	@ (8000838 <EEPROM_Write+0x64>)
 80007ee:	f002 ff75 	bl	80036dc <iprintf>
	EEPROM_WriteEnable();
 80007f2:	f7ff fef3 	bl	80005dc <EEPROM_WriteEnable>
	printf("Status after WREN: 0x%02X \r\n", EEPROM_ReadStatus());
 80007f6:	f7ff ff77 	bl	80006e8 <EEPROM_ReadStatus>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	480f      	ldr	r0, [pc, #60]	@ (800083c <EEPROM_Write+0x68>)
 8000800:	f002 ff6c 	bl	80036dc <iprintf>
	EEPROM_WriteByte(addr, writeData);
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff0a 	bl	8000624 <EEPROM_WriteByte>

	// Wait until write complete
	while (EEPROM_ReadStatus() & 0x01){
 8000810:	e004      	b.n	800081c <EEPROM_Write+0x48>
		if (EEPROM_ReadStatus() == 0xFF){
 8000812:	f7ff ff69 	bl	80006e8 <EEPROM_ReadStatus>
 8000816:	4603      	mov	r3, r0
 8000818:	2bff      	cmp	r3, #255	@ 0xff
 800081a:	d007      	beq.n	800082c <EEPROM_Write+0x58>
	while (EEPROM_ReadStatus() & 0x01){
 800081c:	f7ff ff64 	bl	80006e8 <EEPROM_ReadStatus>
 8000820:	4603      	mov	r3, r0
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f3      	bne.n	8000812 <EEPROM_Write+0x3e>
			break;
		}
	}
}
 800082a:	e000      	b.n	800082e <EEPROM_Write+0x5a>
			break;
 800082c:	bf00      	nop
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	080043cc 	.word	0x080043cc
 800083c:	080043ec 	.word	0x080043ec

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fc1d 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f8f7 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 f9b5 	bl	8000bbc <MX_GPIO_Init>
  MX_SPI3_Init();
 8000852:	f000 f953 	bl	8000afc <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000856:	f000 f987 	bl	8000b68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	HAL_Delay(100);
 800085a:	2064      	movs	r0, #100	@ 0x64
 800085c:	f000 fc84 	bl	8001168 <HAL_Delay>

	uint8_t addr = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]
	uint8_t writeData[] = {0xCA, 0xAD, 0xCF, 0xAE, 0xBD, 0xBF, 0xFA, 0xEA};
 8000864:	4a6f      	ldr	r2, [pc, #444]	@ (8000a24 <main+0x1e4>)
 8000866:	463b      	mov	r3, r7
 8000868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800086c:	e883 0003 	stmia.w	r3, {r0, r1}
//	  EEPROM_CS_HIGH();
//	  HAL_Delay(1000);
//	  EEPROM_CS_LOW();
//	}

	for (uint8_t j = 0; j <= 1; j++){
 8000870:	2300      	movs	r3, #0
 8000872:	75fb      	strb	r3, [r7, #23]
 8000874:	e075      	b.n	8000962 <main+0x122>

		A = MuxCombos[j].A;
 8000876:	7dfa      	ldrb	r2, [r7, #23]
 8000878:	496b      	ldr	r1, [pc, #428]	@ (8000a28 <main+0x1e8>)
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	440b      	add	r3, r1
 8000882:	3302      	adds	r3, #2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	73bb      	strb	r3, [r7, #14]
		B = MuxCombos[j].B;
 8000888:	7dfa      	ldrb	r2, [r7, #23]
 800088a:	4967      	ldr	r1, [pc, #412]	@ (8000a28 <main+0x1e8>)
 800088c:	4613      	mov	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4413      	add	r3, r2
 8000892:	440b      	add	r3, r1
 8000894:	3301      	adds	r3, #1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	737b      	strb	r3, [r7, #13]
		C = MuxCombos[j].C;
 800089a:	7dfa      	ldrb	r2, [r7, #23]
 800089c:	4962      	ldr	r1, [pc, #392]	@ (8000a28 <main+0x1e8>)
 800089e:	4613      	mov	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	440b      	add	r3, r1
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	733b      	strb	r3, [r7, #12]

		muxSET(A, B, C, 1);
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	b298      	uxth	r0, r3
 80008ae:	7b7b      	ldrb	r3, [r7, #13]
 80008b0:	b299      	uxth	r1, r3
 80008b2:	7b3b      	ldrb	r3, [r7, #12]
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	2301      	movs	r3, #1
 80008b8:	f7ff ff44 	bl	8000744 <muxSET>

		for(uint8_t i = 0; i <= 1; i++){
 80008bc:	2300      	movs	r3, #0
 80008be:	75bb      	strb	r3, [r7, #22]
 80008c0:	e049      	b.n	8000956 <main+0x116>
			EEPROM_CS_HIGH();
 80008c2:	2200      	movs	r2, #0
 80008c4:	2104      	movs	r1, #4
 80008c6:	4859      	ldr	r0, [pc, #356]	@ (8000a2c <main+0x1ec>)
 80008c8:	f000 feec 	bl	80016a4 <HAL_GPIO_WritePin>
			A = MuxCombos[i].A;
 80008cc:	7dba      	ldrb	r2, [r7, #22]
 80008ce:	4956      	ldr	r1, [pc, #344]	@ (8000a28 <main+0x1e8>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	3302      	adds	r3, #2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	73bb      	strb	r3, [r7, #14]
			B = MuxCombos[i].B;
 80008de:	7dba      	ldrb	r2, [r7, #22]
 80008e0:	4951      	ldr	r1, [pc, #324]	@ (8000a28 <main+0x1e8>)
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	440b      	add	r3, r1
 80008ea:	3301      	adds	r3, #1
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	737b      	strb	r3, [r7, #13]
			C = MuxCombos[i].C;
 80008f0:	7dba      	ldrb	r2, [r7, #22]
 80008f2:	494d      	ldr	r1, [pc, #308]	@ (8000a28 <main+0x1e8>)
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	733b      	strb	r3, [r7, #12]

			muxSET(A, B, C, 0);
 8000900:	7bbb      	ldrb	r3, [r7, #14]
 8000902:	b298      	uxth	r0, r3
 8000904:	7b7b      	ldrb	r3, [r7, #13]
 8000906:	b299      	uxth	r1, r3
 8000908:	7b3b      	ldrb	r3, [r7, #12]
 800090a:	b29a      	uxth	r2, r3
 800090c:	2300      	movs	r3, #0
 800090e:	f7ff ff19 	bl	8000744 <muxSET>
			//printf("A: %d, B: %d, C: %d\n\r", A, B, C);
			HAL_Delay(10); // delay to allow muxxes to set
 8000912:	200a      	movs	r0, #10
 8000914:	f000 fc28 	bl	8001168 <HAL_Delay>
			//EEPROM_CS_LOW();

			EEPROM_Write(addr, writeData[i]);
 8000918:	7dbb      	ldrb	r3, [r7, #22]
 800091a:	3318      	adds	r3, #24
 800091c:	443b      	add	r3, r7
 800091e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff54 	bl	80007d4 <EEPROM_Write>
			HAL_Delay(100);
 800092c:	2064      	movs	r0, #100	@ 0x64
 800092e:	f000 fc1b 	bl	8001168 <HAL_Delay>
			uint8_t readData = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	727b      	strb	r3, [r7, #9]
			readData = EEPROM_ReadByte(addr);
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fea1 	bl	8000680 <EEPROM_ReadByte>
 800093e:	4603      	mov	r3, r0
 8000940:	727b      	strb	r3, [r7, #9]
			printf("EEPROM %d, Read back: 0x%02X\r\n", i + 1, readData);
 8000942:	7dbb      	ldrb	r3, [r7, #22]
 8000944:	3301      	adds	r3, #1
 8000946:	7a7a      	ldrb	r2, [r7, #9]
 8000948:	4619      	mov	r1, r3
 800094a:	4839      	ldr	r0, [pc, #228]	@ (8000a30 <main+0x1f0>)
 800094c:	f002 fec6 	bl	80036dc <iprintf>
		for(uint8_t i = 0; i <= 1; i++){
 8000950:	7dbb      	ldrb	r3, [r7, #22]
 8000952:	3301      	adds	r3, #1
 8000954:	75bb      	strb	r3, [r7, #22]
 8000956:	7dbb      	ldrb	r3, [r7, #22]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d9b2      	bls.n	80008c2 <main+0x82>
	for (uint8_t j = 0; j <= 1; j++){
 800095c:	7dfb      	ldrb	r3, [r7, #23]
 800095e:	3301      	adds	r3, #1
 8000960:	75fb      	strb	r3, [r7, #23]
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d986      	bls.n	8000876 <main+0x36>

		}
	}
	printf("Completed writing to all EEPROMs\n\r");
 8000968:	4832      	ldr	r0, [pc, #200]	@ (8000a34 <main+0x1f4>)
 800096a:	f002 feb7 	bl	80036dc <iprintf>

	int index = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
	while(1){
		index = index % 2;
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	2b00      	cmp	r3, #0
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	bfb8      	it	lt
 800097c:	425b      	neglt	r3, r3
 800097e:	613b      	str	r3, [r7, #16]

		EEPROM_CS_HIGH(); // Deselect EEPROM before switching MUX
 8000980:	2200      	movs	r2, #0
 8000982:	2104      	movs	r1, #4
 8000984:	4829      	ldr	r0, [pc, #164]	@ (8000a2c <main+0x1ec>)
 8000986:	f000 fe8d 	bl	80016a4 <HAL_GPIO_WritePin>
		HAL_Delay(10);    // Tiny delay for CS settling
 800098a:	200a      	movs	r0, #10
 800098c:	f000 fbec 	bl	8001168 <HAL_Delay>


		A = MuxCombos[index].A;
 8000990:	4925      	ldr	r1, [pc, #148]	@ (8000a28 <main+0x1e8>)
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4613      	mov	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4413      	add	r3, r2
 800099a:	440b      	add	r3, r1
 800099c:	3302      	adds	r3, #2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	73bb      	strb	r3, [r7, #14]
		B = MuxCombos[index].B;
 80009a2:	4921      	ldr	r1, [pc, #132]	@ (8000a28 <main+0x1e8>)
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	3301      	adds	r3, #1
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	737b      	strb	r3, [r7, #13]
		C = MuxCombos[index].C;
 80009b4:	491c      	ldr	r1, [pc, #112]	@ (8000a28 <main+0x1e8>)
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	440b      	add	r3, r1
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	733b      	strb	r3, [r7, #12]

		muxSET(A, B, C, 1);
 80009c4:	7bbb      	ldrb	r3, [r7, #14]
 80009c6:	b298      	uxth	r0, r3
 80009c8:	7b7b      	ldrb	r3, [r7, #13]
 80009ca:	b299      	uxth	r1, r3
 80009cc:	7b3b      	ldrb	r3, [r7, #12]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	2301      	movs	r3, #1
 80009d2:	f7ff feb7 	bl	8000744 <muxSET>

		HAL_Delay(10);
 80009d6:	200a      	movs	r0, #10
 80009d8:	f000 fbc6 	bl	8001168 <HAL_Delay>

		// Optional debug:
		uint8_t status = EEPROM_ReadStatus();
 80009dc:	f7ff fe84 	bl	80006e8 <EEPROM_ReadStatus>
 80009e0:	4603      	mov	r3, r0
 80009e2:	72fb      	strb	r3, [r7, #11]
		printf("EEPROM %d status: 0x%02X\r\n", index + 1, status);
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	3301      	adds	r3, #1
 80009e8:	7afa      	ldrb	r2, [r7, #11]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4812      	ldr	r0, [pc, #72]	@ (8000a38 <main+0x1f8>)
 80009ee:	f002 fe75 	bl	80036dc <iprintf>

		uint8_t readData2 = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	72bb      	strb	r3, [r7, #10]
		readData2 = EEPROM_ReadByte(addr);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe41 	bl	8000680 <EEPROM_ReadByte>
 80009fe:	4603      	mov	r3, r0
 8000a00:	72bb      	strb	r3, [r7, #10]
		printf("EEPROM %d, Read back: 0x%02X\r\n", index + 1, readData2);
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	3301      	adds	r3, #1
 8000a06:	7aba      	ldrb	r2, [r7, #10]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <main+0x1f0>)
 8000a0c:	f002 fe66 	bl	80036dc <iprintf>

		index += 1;
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	3301      	adds	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]

		HAL_Delay(1000);
 8000a16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1a:	f000 fba5 	bl	8001168 <HAL_Delay>
	while(1){
 8000a1e:	bf00      	nop
 8000a20:	e7a7      	b.n	8000972 <main+0x132>
 8000a22:	bf00      	nop
 8000a24:	0800446c 	.word	0x0800446c
 8000a28:	08004474 	.word	0x08004474
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	0800440c 	.word	0x0800440c
 8000a34:	0800442c 	.word	0x0800442c
 8000a38:	08004450 	.word	0x08004450

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	@ 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2234      	movs	r2, #52	@ 0x34
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fe9b 	bl	8003786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	4b23      	ldr	r3, [pc, #140]	@ (8000af4 <SystemClock_Config+0xb8>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	4a22      	ldr	r2, [pc, #136]	@ (8000af4 <SystemClock_Config+0xb8>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a70:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <SystemClock_Config+0xb8>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <SystemClock_Config+0xbc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a88:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <SystemClock_Config+0xbc>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <SystemClock_Config+0xbc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f8d5 	bl	8001c60 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000abc:	f000 f932 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fdfc 	bl	80016d8 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ae6:	f000 f91d 	bl	8000d24 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3750      	adds	r7, #80	@ 0x50
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000

08000afc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b02:	4a18      	ldr	r2, [pc, #96]	@ (8000b64 <MX_SPI3_Init+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b2c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b30:	2230      	movs	r2, #48	@ 0x30
 8000b32:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b48:	220a      	movs	r2, #10
 8000b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_SPI3_Init+0x64>)
 8000b4e:	f001 fb25 	bl	800219c <HAL_SPI_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b58:	f000 f8e4 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000084 	.word	0x20000084
 8000b64:	40003c00 	.word	0x40003c00

08000b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <MX_USART2_UART_Init+0x50>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	f002 f8ce 	bl	8002d40 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000baa:	f000 f8bb 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000dc 	.word	0x200000dc
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b43      	ldr	r3, [pc, #268]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a42      	ldr	r2, [pc, #264]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b40      	ldr	r3, [pc, #256]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b39      	ldr	r3, [pc, #228]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a34      	ldr	r2, [pc, #208]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <MX_GPIO_Init+0x128>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SLAVE_C_Pin|SLAVE_B_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2103      	movs	r1, #3
 8000c46:	4828      	ldr	r0, [pc, #160]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000c48:	f000 fd2c 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAST_A_Pin|MAST_B_Pin|MAST_C_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2113      	movs	r1, #19
 8000c50:	4826      	ldr	r0, [pc, #152]	@ (8000cec <MX_GPIO_Init+0x130>)
 8000c52:	f000 fd27 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SLAVE_A_GPIO_Port, SLAVE_A_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4825      	ldr	r0, [pc, #148]	@ (8000cf0 <MX_GPIO_Init+0x134>)
 8000c5c:	f000 fd22 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EEPROM_CS_GPIO_Port, EEPROM_CS_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2104      	movs	r1, #4
 8000c64:	4823      	ldr	r0, [pc, #140]	@ (8000cf4 <MX_GPIO_Init+0x138>)
 8000c66:	f000 fd1d 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLAVE_C_Pin SLAVE_B_Pin */
  GPIO_InitStruct.Pin = SLAVE_C_Pin|SLAVE_B_Pin;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4819      	ldr	r0, [pc, #100]	@ (8000ce8 <MX_GPIO_Init+0x12c>)
 8000c82:	f000 fb7b 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : MAST_A_Pin MAST_B_Pin MAST_C_Pin */
  GPIO_InitStruct.Pin = MAST_A_Pin|MAST_B_Pin|MAST_C_Pin;
 8000c86:	2313      	movs	r3, #19
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4813      	ldr	r0, [pc, #76]	@ (8000cec <MX_GPIO_Init+0x130>)
 8000c9e:	f000 fb6d 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : SLAVE_A_Pin */
  GPIO_InitStruct.Pin = SLAVE_A_Pin;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SLAVE_A_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <MX_GPIO_Init+0x134>)
 8000cba:	f000 fb5f 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_CS_Pin */
  GPIO_InitStruct.Pin = EEPROM_CS_Pin;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <MX_GPIO_Init+0x138>)
 8000cd6:	f000 fb51 	bl	800137c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	@ 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40020c00 	.word	0x40020c00

08000cf8 <_write>:
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
    return ch;
}

// Optional: if using `printf()` from stdio without semihosting
int _write(int file, char *ptr, int len) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <_write+0x28>)
 8000d10:	f002 f866 	bl	8002de0 <HAL_UART_Transmit>
    return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000dc 	.word	0x200000dc

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <Error_Handler+0x8>

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d7c <HAL_MspInit+0x4c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <HAL_MspInit+0x4c>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	@ (8000e04 <HAL_SPI_MspInit+0x84>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12c      	bne.n	8000dfc <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_SPI_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_SPI_MspInit+0x88>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a10      	ldr	r2, [pc, #64]	@ (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000dda:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dec:	2306      	movs	r3, #6
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <HAL_SPI_MspInit+0x8c>)
 8000df8:	f000 fac0 	bl	800137c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	@ 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40003c00 	.word	0x40003c00
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020800 	.word	0x40020800

08000e10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a19      	ldr	r2, [pc, #100]	@ (8000e94 <HAL_UART_MspInit+0x84>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12b      	bne.n	8000e8a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	4a17      	ldr	r2, [pc, #92]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a10      	ldr	r2, [pc, #64]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e6a:	230c      	movs	r3, #12
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e86:	f000 fa79 	bl	800137c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	@ 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 f917 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e00a      	b.n	8000f26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f10:	f3af 8000 	nop.w
 8000f14:	4601      	mov	r1, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	60ba      	str	r2, [r7, #8]
 8000f1c:	b2ca      	uxtb	r2, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dbf0      	blt.n	8000f10 <_read+0x12>
  }

  return len;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f60:	605a      	str	r2, [r3, #4]
  return 0;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <_isatty>:

int _isatty(int file)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b085      	sub	sp, #20
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	@ (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f002 fc28 	bl	8003824 <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20020000 	.word	0x20020000
 8001000:	00000400 	.word	0x00000400
 8001004:	20000124 	.word	0x20000124
 8001008:	20000278 	.word	0x20000278

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001068 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001034:	f7ff ffea 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	@ (8001070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	@ (800107c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800105e:	f002 fbe7 	bl	8003830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fbed 	bl	8000840 <main>
  bx  lr    
 8001066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001074:	080044e8 	.word	0x080044e8
  ldr r2, =_sbss
 8001078:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800107c:	20000278 	.word	0x20000278

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <HAL_Init+0x40>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <HAL_Init+0x40>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800109e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <HAL_Init+0x40>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f931 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fe3a 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023c00 	.word	0x40023c00

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f93b 	bl	8001362 <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001104:	f000 f911 	bl	800132a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	@ (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_IncTick+0x20>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_IncTick+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a04      	ldr	r2, [pc, #16]	@ (800114c <HAL_IncTick+0x24>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008
 800114c:	20000128 	.word	0x20000128

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000128 	.word	0x20000128

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff ffee 	bl	8001150 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <HAL_Delay+0x44>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118e:	bf00      	nop
 8001190:	f7ff ffde 	bl	8001150 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	@ (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	@ (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	@ 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	@ 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012f4:	f7ff ff8e 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff47 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff5c 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff8e 	bl	8001268 <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5d 	bl	8001214 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffb0 	bl	80012d0 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	e165      	b.n	8001664 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 8154 	bne.w	800165e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d005      	beq.n	80013ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d130      	bne.n	8001430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2203      	movs	r2, #3
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 0201 	and.w	r2, r3, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b03      	cmp	r3, #3
 800143a:	d017      	beq.n	800146c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d123      	bne.n	80014c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	08da      	lsrs	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3208      	adds	r2, #8
 8001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80ae 	beq.w	800165e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b5d      	ldr	r3, [pc, #372]	@ (800167c <HAL_GPIO_Init+0x300>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	4a5c      	ldr	r2, [pc, #368]	@ (800167c <HAL_GPIO_Init+0x300>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001510:	6453      	str	r3, [r2, #68]	@ 0x44
 8001512:	4b5a      	ldr	r3, [pc, #360]	@ (800167c <HAL_GPIO_Init+0x300>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151e:	4a58      	ldr	r2, [pc, #352]	@ (8001680 <HAL_GPIO_Init+0x304>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4f      	ldr	r2, [pc, #316]	@ (8001684 <HAL_GPIO_Init+0x308>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d025      	beq.n	8001596 <HAL_GPIO_Init+0x21a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4e      	ldr	r2, [pc, #312]	@ (8001688 <HAL_GPIO_Init+0x30c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d01f      	beq.n	8001592 <HAL_GPIO_Init+0x216>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4d      	ldr	r2, [pc, #308]	@ (800168c <HAL_GPIO_Init+0x310>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d019      	beq.n	800158e <HAL_GPIO_Init+0x212>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4c      	ldr	r2, [pc, #304]	@ (8001690 <HAL_GPIO_Init+0x314>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4b      	ldr	r2, [pc, #300]	@ (8001694 <HAL_GPIO_Init+0x318>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x20a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4a      	ldr	r2, [pc, #296]	@ (8001698 <HAL_GPIO_Init+0x31c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x206>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a49      	ldr	r2, [pc, #292]	@ (800169c <HAL_GPIO_Init+0x320>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x202>
 800157a:	2306      	movs	r3, #6
 800157c:	e00c      	b.n	8001598 <HAL_GPIO_Init+0x21c>
 800157e:	2307      	movs	r3, #7
 8001580:	e00a      	b.n	8001598 <HAL_GPIO_Init+0x21c>
 8001582:	2305      	movs	r3, #5
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x21c>
 8001586:	2304      	movs	r3, #4
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x21c>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x21c>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x21c>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x21c>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	@ (8001680 <HAL_GPIO_Init+0x304>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b3a      	ldr	r3, [pc, #232]	@ (80016a0 <HAL_GPIO_Init+0x324>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a31      	ldr	r2, [pc, #196]	@ (80016a0 <HAL_GPIO_Init+0x324>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <HAL_GPIO_Init+0x324>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a26      	ldr	r2, [pc, #152]	@ (80016a0 <HAL_GPIO_Init+0x324>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160a:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <HAL_GPIO_Init+0x324>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162e:	4a1c      	ldr	r2, [pc, #112]	@ (80016a0 <HAL_GPIO_Init+0x324>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001634:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <HAL_GPIO_Init+0x324>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001658:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <HAL_GPIO_Init+0x324>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f ae96 	bls.w	8001398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40021400 	.word	0x40021400
 800169c:	40021800 	.word	0x40021800
 80016a0:	40013c00 	.word	0x40013c00

080016a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
 80016b0:	4613      	mov	r3, r2
 80016b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c0:	e003      	b.n	80016ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	041a      	lsls	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	619a      	str	r2, [r3, #24]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0cc      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016ec:	4b68      	ldr	r3, [pc, #416]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d90c      	bls.n	8001714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b65      	ldr	r3, [pc, #404]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	4b63      	ldr	r3, [pc, #396]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0b8      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800172c:	4b59      	ldr	r3, [pc, #356]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a58      	ldr	r2, [pc, #352]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001736:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001744:	4b53      	ldr	r3, [pc, #332]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a52      	ldr	r2, [pc, #328]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800174e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001750:	4b50      	ldr	r3, [pc, #320]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	494d      	ldr	r1, [pc, #308]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d044      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b47      	ldr	r3, [pc, #284]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d119      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e07f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d003      	beq.n	8001796 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001792:	2b03      	cmp	r3, #3
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001796:	4b3f      	ldr	r3, [pc, #252]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e067      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b6:	4b37      	ldr	r3, [pc, #220]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f023 0203 	bic.w	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4934      	ldr	r1, [pc, #208]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c8:	f7ff fcc2 	bl	8001150 <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d0:	f7ff fcbe 	bl	8001150 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e04f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 020c 	and.w	r2, r3, #12
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d1eb      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f8:	4b25      	ldr	r3, [pc, #148]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d20c      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e032      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4916      	ldr	r1, [pc, #88]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	490e      	ldr	r1, [pc, #56]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800185e:	f000 f855 	bl	800190c <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	490a      	ldr	r1, [pc, #40]	@ (8001898 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	4a09      	ldr	r2, [pc, #36]	@ (800189c <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_RCC_ClockConfig+0x1c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fc22 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00
 8001894:	40023800 	.word	0x40023800
 8001898:	0800448c 	.word	0x0800448c
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000000 	.word	0x20000000

080018bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c0:	f7ff fff0 	bl	80018a4 <HAL_RCC_GetHCLKFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	0a9b      	lsrs	r3, r3, #10
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	4903      	ldr	r1, [pc, #12]	@ (80018e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	0800449c 	.word	0x0800449c

080018e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018e8:	f7ff ffdc 	bl	80018a4 <HAL_RCC_GetHCLKFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	0b5b      	lsrs	r3, r3, #13
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	4903      	ldr	r1, [pc, #12]	@ (8001908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001900:	4618      	mov	r0, r3
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	0800449c 	.word	0x0800449c

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001910:	b0a6      	sub	sp, #152	@ 0x98
 8001912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001932:	4bc8      	ldr	r3, [pc, #800]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b0c      	cmp	r3, #12
 800193c:	f200 817e 	bhi.w	8001c3c <HAL_RCC_GetSysClockFreq+0x330>
 8001940:	a201      	add	r2, pc, #4	@ (adr r2, 8001948 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	0800197d 	.word	0x0800197d
 800194c:	08001c3d 	.word	0x08001c3d
 8001950:	08001c3d 	.word	0x08001c3d
 8001954:	08001c3d 	.word	0x08001c3d
 8001958:	08001985 	.word	0x08001985
 800195c:	08001c3d 	.word	0x08001c3d
 8001960:	08001c3d 	.word	0x08001c3d
 8001964:	08001c3d 	.word	0x08001c3d
 8001968:	0800198d 	.word	0x0800198d
 800196c:	08001c3d 	.word	0x08001c3d
 8001970:	08001c3d 	.word	0x08001c3d
 8001974:	08001c3d 	.word	0x08001c3d
 8001978:	08001af7 	.word	0x08001af7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4bb6      	ldr	r3, [pc, #728]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x34c>)
 800197e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001982:	e15f      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001984:	4bb5      	ldr	r3, [pc, #724]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x350>)
 8001986:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800198a:	e15b      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800198c:	4bb1      	ldr	r3, [pc, #708]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001994:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001998:	4bae      	ldr	r3, [pc, #696]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d031      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a4:	4bab      	ldr	r3, [pc, #684]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	2200      	movs	r2, #0
 80019ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80019b8:	2300      	movs	r3, #0
 80019ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80019bc:	4ba7      	ldr	r3, [pc, #668]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x350>)
 80019be:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019c2:	462a      	mov	r2, r5
 80019c4:	fb03 f202 	mul.w	r2, r3, r2
 80019c8:	2300      	movs	r3, #0
 80019ca:	4621      	mov	r1, r4
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	4aa2      	ldr	r2, [pc, #648]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x350>)
 80019d4:	4621      	mov	r1, r4
 80019d6:	fba1 1202 	umull	r1, r2, r1, r2
 80019da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80019dc:	460a      	mov	r2, r1
 80019de:	67ba      	str	r2, [r7, #120]	@ 0x78
 80019e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80019e2:	4413      	add	r3, r2
 80019e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019ea:	2200      	movs	r2, #0
 80019ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80019f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80019f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80019f8:	f7fe fc5a 	bl	80002b0 <__aeabi_uldivmod>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4613      	mov	r3, r2
 8001a02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a06:	e064      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a08:	4b92      	ldr	r3, [pc, #584]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	2200      	movs	r2, #0
 8001a10:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a12:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a20:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001a24:	4622      	mov	r2, r4
 8001a26:	462b      	mov	r3, r5
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	0159      	lsls	r1, r3, #5
 8001a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a36:	0150      	lsls	r0, r2, #5
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	1a51      	subs	r1, r2, r1
 8001a40:	6139      	str	r1, [r7, #16]
 8001a42:	4629      	mov	r1, r5
 8001a44:	eb63 0301 	sbc.w	r3, r3, r1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a56:	4659      	mov	r1, fp
 8001a58:	018b      	lsls	r3, r1, #6
 8001a5a:	4651      	mov	r1, sl
 8001a5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a60:	4651      	mov	r1, sl
 8001a62:	018a      	lsls	r2, r1, #6
 8001a64:	4651      	mov	r1, sl
 8001a66:	ebb2 0801 	subs.w	r8, r2, r1
 8001a6a:	4659      	mov	r1, fp
 8001a6c:	eb63 0901 	sbc.w	r9, r3, r1
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a84:	4690      	mov	r8, r2
 8001a86:	4699      	mov	r9, r3
 8001a88:	4623      	mov	r3, r4
 8001a8a:	eb18 0303 	adds.w	r3, r8, r3
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	462b      	mov	r3, r5
 8001a92:	eb49 0303 	adc.w	r3, r9, r3
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	028b      	lsls	r3, r1, #10
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aae:	4621      	mov	r1, r4
 8001ab0:	028a      	lsls	r2, r1, #10
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aba:	2200      	movs	r2, #0
 8001abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8001abe:	647a      	str	r2, [r7, #68]	@ 0x44
 8001ac0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ac4:	f7fe fbf4 	bl	80002b0 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ad2:	4b60      	ldr	r3, [pc, #384]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	0c1b      	lsrs	r3, r3, #16
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	3301      	adds	r3, #1
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001ae4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001af4:	e0a6      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af6:	4b57      	ldr	r3, [pc, #348]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001afe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b02:	4b54      	ldr	r3, [pc, #336]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d02a      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b51      	ldr	r3, [pc, #324]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	2200      	movs	r2, #0
 8001b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b20:	2100      	movs	r1, #0
 8001b22:	4b4e      	ldr	r3, [pc, #312]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x350>)
 8001b24:	fb03 f201 	mul.w	r2, r3, r1
 8001b28:	2300      	movs	r3, #0
 8001b2a:	fb00 f303 	mul.w	r3, r0, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a4a      	ldr	r2, [pc, #296]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x350>)
 8001b32:	fba0 1202 	umull	r1, r2, r0, r2
 8001b36:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b38:	460a      	mov	r2, r1
 8001b3a:	673a      	str	r2, [r7, #112]	@ 0x70
 8001b3c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001b3e:	4413      	add	r3, r2
 8001b40:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b46:	2200      	movs	r2, #0
 8001b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b4a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b50:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b54:	f7fe fbac 	bl	80002b0 <__aeabi_uldivmod>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b62:	e05b      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b64:	4b3b      	ldr	r3, [pc, #236]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	099b      	lsrs	r3, r3, #6
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b80:	4642      	mov	r2, r8
 8001b82:	464b      	mov	r3, r9
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 0100 	mov.w	r1, #0
 8001b8c:	0159      	lsls	r1, r3, #5
 8001b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b92:	0150      	lsls	r0, r2, #5
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4641      	mov	r1, r8
 8001b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b9e:	4649      	mov	r1, r9
 8001ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	00eb      	lsls	r3, r5, #3
 8001bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bce:	00e2      	lsls	r2, r4, #3
 8001bd0:	4614      	mov	r4, r2
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	4643      	mov	r3, r8
 8001bd6:	18e3      	adds	r3, r4, r3
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	464b      	mov	r3, r9
 8001bdc:	eb45 0303 	adc.w	r3, r5, r3
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bee:	4629      	mov	r1, r5
 8001bf0:	028b      	lsls	r3, r1, #10
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	028a      	lsls	r2, r1, #10
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c04:	2200      	movs	r2, #0
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	61fa      	str	r2, [r7, #28]
 8001c0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c0e:	f7fe fb4f 	bl	80002b0 <__aeabi_uldivmod>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4613      	mov	r3, r2
 8001c18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	0f1b      	lsrs	r3, r3, #28
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c3a:	e003      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001c3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3798      	adds	r7, #152	@ 0x98
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	00f42400 	.word	0x00f42400
 8001c5c:	017d7840 	.word	0x017d7840

08001c60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e28d      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8083 	beq.w	8001d86 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c80:	4b94      	ldr	r3, [pc, #592]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d019      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c8c:	4b91      	ldr	r3, [pc, #580]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c98:	4b8e      	ldr	r3, [pc, #568]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d112      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4b88      	ldr	r3, [pc, #544]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	4b84      	ldr	r3, [pc, #528]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d05b      	beq.n	8001d84 <HAL_RCC_OscConfig+0x124>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d157      	bne.n	8001d84 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e25a      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce0:	d106      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x90>
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0xcc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0xb4>
 8001cfa:	4b76      	ldr	r3, [pc, #472]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a75      	ldr	r2, [pc, #468]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b73      	ldr	r3, [pc, #460]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a72      	ldr	r2, [pc, #456]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0xcc>
 8001d14:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6b      	ldr	r2, [pc, #428]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa0c 	bl	8001150 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fa08 	bl	8001150 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	@ 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e21f      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b61      	ldr	r3, [pc, #388]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0xdc>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f9f8 	bl	8001150 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff f9f4 	bl	8001150 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e20b      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b57      	ldr	r3, [pc, #348]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x104>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d06f      	beq.n	8001e72 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d92:	4b50      	ldr	r3, [pc, #320]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d017      	beq.n	8001dce <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
        || \
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001daa:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db6:	4b47      	ldr	r3, [pc, #284]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d11c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc2:	4b44      	ldr	r3, [pc, #272]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d116      	bne.n	8001dfc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	4b41      	ldr	r3, [pc, #260]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_RCC_OscConfig+0x186>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e1d3      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4937      	ldr	r1, [pc, #220]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	e03a      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e04:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <HAL_RCC_OscConfig+0x278>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f9a1 	bl	8001150 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff f99d 	bl	8001150 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e1b4      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b28      	ldr	r3, [pc, #160]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4925      	ldr	r1, [pc, #148]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <HAL_RCC_OscConfig+0x278>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f980 	bl	8001150 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff f97c 	bl	8001150 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e193      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d036      	beq.n	8001eec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d016      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_RCC_OscConfig+0x27c>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f960 	bl	8001150 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff f95c 	bl	8001150 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e173      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x234>
 8001eb2:	e01b      	b.n	8001eec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff f949 	bl	8001150 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	e00e      	b.n	8001ee0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f945 	bl	8001150 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d907      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e15c      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	42470000 	.word	0x42470000
 8001edc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ea      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 8097 	beq.w	8002028 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b83      	ldr	r3, [pc, #524]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10f      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	4a7e      	ldr	r2, [pc, #504]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b79      	ldr	r3, [pc, #484]	@ (8002110 <HAL_RCC_OscConfig+0x4b0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4b76      	ldr	r3, [pc, #472]	@ (8002110 <HAL_RCC_OscConfig+0x4b0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	@ (8002110 <HAL_RCC_OscConfig+0x4b0>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7ff f905 	bl	8001150 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7ff f901 	bl	8001150 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e118      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002110 <HAL_RCC_OscConfig+0x4b0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x31e>
 8001f70:	4b66      	ldr	r3, [pc, #408]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f74:	4a65      	ldr	r2, [pc, #404]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f7c:	e01c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x358>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x340>
 8001f86:	4b61      	ldr	r3, [pc, #388]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8a:	4a60      	ldr	r2, [pc, #384]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f92:	4b5e      	ldr	r3, [pc, #376]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f96:	4a5d      	ldr	r2, [pc, #372]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x358>
 8001fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa4:	4a59      	ldr	r2, [pc, #356]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fac:	4b57      	ldr	r3, [pc, #348]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb0:	4a56      	ldr	r2, [pc, #344]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fb2:	f023 0304 	bic.w	r3, r3, #4
 8001fb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f8c6 	bl	8001150 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f8c2 	bl	8001150 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0d7      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fde:	4b4b      	ldr	r3, [pc, #300]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0ee      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x368>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff f8b0 	bl	8001150 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff2:	e00a      	b.n	800200a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7ff f8ac 	bl	8001150 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e0c1      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200a:	4b40      	ldr	r3, [pc, #256]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ee      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002016:	7dfb      	ldrb	r3, [r7, #23]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201c:	4b3b      	ldr	r3, [pc, #236]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	4a3a      	ldr	r2, [pc, #232]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8002022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002026:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80ad 	beq.w	800218c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002032:	4b36      	ldr	r3, [pc, #216]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	d060      	beq.n	8002100 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d145      	bne.n	80020d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b33      	ldr	r3, [pc, #204]	@ (8002114 <HAL_RCC_OscConfig+0x4b4>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff f880 	bl	8001150 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff f87c 	bl	8001150 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e093      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b29      	ldr	r3, [pc, #164]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	071b      	lsls	r3, r3, #28
 800209e:	491b      	ldr	r1, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x4b4>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7ff f851 	bl	8001150 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff f84d 	bl	8001150 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e064      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x452>
 80020d0:	e05c      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_OscConfig+0x4b4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f83a 	bl	8001150 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f836 	bl	8001150 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e04d      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x480>
 80020fe:	e045      	b.n	800218c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e040      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
 8002114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002118:	4b1f      	ldr	r3, [pc, #124]	@ (8002198 <HAL_RCC_OscConfig+0x538>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d030      	beq.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d129      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d122      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800214e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002150:	4293      	cmp	r3, r2
 8002152:	d119      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	3b01      	subs	r3, #1
 8002162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d10f      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d107      	bne.n	8002188 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800

0800219c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07b      	b.n	80022a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d108      	bne.n	80021c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021be:	d009      	beq.n	80021d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
 80021c6:	e005      	b.n	80021d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fdc6 	bl	8000d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800220a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002258:	ea42 0103 	orr.w	r1, r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	f003 0104 	and.w	r1, r3, #4
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	f003 0210 	and.w	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b088      	sub	sp, #32
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022be:	f7fe ff47 	bl	8001150 <HAL_GetTick>
 80022c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d001      	beq.n	80022d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	e12a      	b.n	800252e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_SPI_Transmit+0x36>
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e122      	b.n	800252e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_SPI_Transmit+0x48>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e11b      	b.n	800252e <HAL_SPI_Transmit+0x280>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2203      	movs	r2, #3
 8002302:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	88fa      	ldrh	r2, [r7, #6]
 8002316:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002344:	d10f      	bne.n	8002366 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002370:	2b40      	cmp	r3, #64	@ 0x40
 8002372:	d007      	beq.n	8002384 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800238c:	d152      	bne.n	8002434 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_SPI_Transmit+0xee>
 8002396:	8b7b      	ldrh	r3, [r7, #26]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d145      	bne.n	8002428 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	881a      	ldrh	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	1c9a      	adds	r2, r3, #2
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023c0:	e032      	b.n	8002428 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d112      	bne.n	80023f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	881a      	ldrh	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	1c9a      	adds	r2, r3, #2
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023f4:	e018      	b.n	8002428 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023f6:	f7fe feab 	bl	8001150 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d803      	bhi.n	800240e <HAL_SPI_Transmit+0x160>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800240c:	d102      	bne.n	8002414 <HAL_SPI_Transmit+0x166>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e082      	b.n	800252e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1c7      	bne.n	80023c2 <HAL_SPI_Transmit+0x114>
 8002432:	e053      	b.n	80024dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Transmit+0x194>
 800243c:	8b7b      	ldrh	r3, [r7, #26]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d147      	bne.n	80024d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	330c      	adds	r3, #12
 800244c:	7812      	ldrb	r2, [r2, #0]
 800244e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002468:	e033      	b.n	80024d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b02      	cmp	r3, #2
 8002476:	d113      	bne.n	80024a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	7812      	ldrb	r2, [r2, #0]
 8002484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800249e:	e018      	b.n	80024d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a0:	f7fe fe56 	bl	8001150 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d803      	bhi.n	80024b8 <HAL_SPI_Transmit+0x20a>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024b6:	d102      	bne.n	80024be <HAL_SPI_Transmit+0x210>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e02d      	b.n	800252e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1c6      	bne.n	800246a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fbd9 	bl	8002c98 <SPI_EndRxTxTransaction>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10a      	bne.n	8002510 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800252c:	2300      	movs	r3, #0
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b088      	sub	sp, #32
 800253a:	af02      	add	r7, sp, #8
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d001      	beq.n	8002556 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	e104      	b.n	8002760 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800255e:	d112      	bne.n	8002586 <HAL_SPI_Receive+0x50>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10e      	bne.n	8002586 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2204      	movs	r2, #4
 800256c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002570:	88fa      	ldrh	r2, [r7, #6]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f8f3 	bl	8002768 <HAL_SPI_TransmitReceive>
 8002582:	4603      	mov	r3, r0
 8002584:	e0ec      	b.n	8002760 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002586:	f7fe fde3 	bl	8001150 <HAL_GetTick>
 800258a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_SPI_Receive+0x62>
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0e1      	b.n	8002760 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_SPI_Receive+0x74>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e0da      	b.n	8002760 <HAL_SPI_Receive+0x22a>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2204      	movs	r2, #4
 80025b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	88fa      	ldrh	r2, [r7, #6]
 80025ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025f8:	d10f      	bne.n	800261a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002608:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002624:	2b40      	cmp	r3, #64	@ 0x40
 8002626:	d007      	beq.n	8002638 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d170      	bne.n	8002722 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002640:	e035      	b.n	80026ae <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d115      	bne.n	800267c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f103 020c 	add.w	r2, r3, #12
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800267a:	e018      	b.n	80026ae <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800267c:	f7fe fd68 	bl	8001150 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d803      	bhi.n	8002694 <HAL_SPI_Receive+0x15e>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002692:	d102      	bne.n	800269a <HAL_SPI_Receive+0x164>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e058      	b.n	8002760 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1c4      	bne.n	8002642 <HAL_SPI_Receive+0x10c>
 80026b8:	e038      	b.n	800272c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d113      	bne.n	80026f0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d2:	b292      	uxth	r2, r2
 80026d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	1c9a      	adds	r2, r3, #2
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026ee:	e018      	b.n	8002722 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f0:	f7fe fd2e 	bl	8001150 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d803      	bhi.n	8002708 <HAL_SPI_Receive+0x1d2>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002706:	d102      	bne.n	800270e <HAL_SPI_Receive+0x1d8>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e01e      	b.n	8002760 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1c6      	bne.n	80026ba <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fa4b 	bl	8002bcc <SPI_EndRxTransaction>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800275e:	2300      	movs	r3, #0
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002776:	2301      	movs	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800277a:	f7fe fce9 	bl	8001150 <HAL_GetTick>
 800277e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002786:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002792:	7ffb      	ldrb	r3, [r7, #31]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d00c      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0x4a>
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800279e:	d106      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x46>
 80027a8:	7ffb      	ldrb	r3, [r7, #31]
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d001      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	e17f      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x5c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x5c>
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e174      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0x6e>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e16d      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x34a>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d003      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2205      	movs	r2, #5
 80027ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	887a      	ldrh	r2, [r7, #2]
 8002802:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	887a      	ldrh	r2, [r7, #2]
 800281a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002832:	2b40      	cmp	r3, #64	@ 0x40
 8002834:	d007      	beq.n	8002846 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800284e:	d17e      	bne.n	800294e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_SPI_TransmitReceive+0xf6>
 8002858:	8afb      	ldrh	r3, [r7, #22]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d16c      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	881a      	ldrh	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	1c9a      	adds	r2, r3, #2
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002882:	e059      	b.n	8002938 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	d11b      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x162>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d016      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x162>
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d113      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	881a      	ldrh	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	1c9a      	adds	r2, r3, #2
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d119      	bne.n	800290c <HAL_SPI_TransmitReceive+0x1a4>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d014      	beq.n	800290c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	b292      	uxth	r2, r2
 80028ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f4:	1c9a      	adds	r2, r3, #2
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002908:	2301      	movs	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800290c:	f7fe fc20 	bl	8001150 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002918:	429a      	cmp	r2, r3
 800291a:	d80d      	bhi.n	8002938 <HAL_SPI_TransmitReceive+0x1d0>
 800291c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002922:	d009      	beq.n	8002938 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0bc      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1a0      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x11c>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d19b      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x11c>
 800294c:	e082      	b.n	8002a54 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_SPI_TransmitReceive+0x1f4>
 8002956:	8afb      	ldrh	r3, [r7, #22]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d171      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	7812      	ldrb	r2, [r2, #0]
 8002968:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002982:	e05d      	b.n	8002a40 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d11c      	bne.n	80029cc <HAL_SPI_TransmitReceive+0x264>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d017      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x264>
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d114      	bne.n	80029cc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d119      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x2a6>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d014      	beq.n	8002a0e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a0e:	f7fe fb9f 	bl	8001150 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d803      	bhi.n	8002a26 <HAL_SPI_TransmitReceive+0x2be>
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a24:	d102      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x2c4>
 8002a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e038      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d19c      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x21c>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d197      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a54:	6a3a      	ldr	r2, [r7, #32]
 8002a56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f91d 	bl	8002c98 <SPI_EndRxTxTransaction>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e01d      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3728      	adds	r7, #40	@ 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002acc:	f7fe fb40 	bl	8001150 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002adc:	f7fe fb38 	bl	8001150 <HAL_GetTick>
 8002ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ae2:	4b39      	ldr	r3, [pc, #228]	@ (8002bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	015b      	lsls	r3, r3, #5
 8002ae8:	0d1b      	lsrs	r3, r3, #20
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af2:	e054      	b.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002afa:	d050      	beq.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002afc:	f7fe fb28 	bl	8001150 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d902      	bls.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d13d      	bne.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b2a:	d111      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b34:	d004      	beq.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	d107      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b58:	d10f      	bne.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e017      	b.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d19b      	bne.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000000 	.word	0x20000000

08002bcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002be0:	d111      	bne.n	8002c06 <SPI_EndRxTransaction+0x3a>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bea:	d004      	beq.n	8002bf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf4:	d107      	bne.n	8002c06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c0e:	d12a      	bne.n	8002c66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c18:	d012      	beq.n	8002c40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2180      	movs	r1, #128	@ 0x80
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff ff49 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02d      	beq.n	8002c8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e026      	b.n	8002c8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	2101      	movs	r1, #1
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7ff ff36 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01a      	beq.n	8002c8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5a:	f043 0220 	orr.w	r2, r3, #32
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e013      	b.n	8002c8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2101      	movs	r1, #1
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff ff23 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e000      	b.n	8002c8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2201      	movs	r2, #1
 8002cac:	2102      	movs	r1, #2
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ff04 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e032      	b.n	8002d30 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <SPI_EndRxTxTransaction+0xa0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1b      	ldr	r2, [pc, #108]	@ (8002d3c <SPI_EndRxTxTransaction+0xa4>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	0d5b      	lsrs	r3, r3, #21
 8002cd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ce8:	d112      	bne.n	8002d10 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2180      	movs	r1, #128	@ 0x80
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff fee1 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d016      	beq.n	8002d2e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e00f      	b.n	8002d30 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	2b80      	cmp	r3, #128	@ 0x80
 8002d28:	d0f2      	beq.n	8002d10 <SPI_EndRxTxTransaction+0x78>
 8002d2a:	e000      	b.n	8002d2e <SPI_EndRxTxTransaction+0x96>
        break;
 8002d2c:	bf00      	nop
  }

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	165e9f81 	.word	0x165e9f81

08002d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e042      	b.n	8002dd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe f852 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	@ 0x24
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f973 	bl	8003070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	@ 0x28
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d175      	bne.n	8002eec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <HAL_UART_Transmit+0x2c>
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e06e      	b.n	8002eee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2221      	movs	r2, #33	@ 0x21
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe f997 	bl	8001150 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e38:	d108      	bne.n	8002e4c <HAL_UART_Transmit+0x6c>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d104      	bne.n	8002e4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	e003      	b.n	8002e54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e54:	e02e      	b.n	8002eb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2180      	movs	r1, #128	@ 0x80
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f848 	bl	8002ef6 <UART_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e03a      	b.n	8002eee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	3302      	adds	r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	e007      	b.n	8002ea6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1cb      	bne.n	8002e56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2140      	movs	r1, #64	@ 0x40
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f814 	bl	8002ef6 <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e006      	b.n	8002eee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	4613      	mov	r3, r2
 8002f04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f06:	e03b      	b.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f0e:	d037      	beq.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f10:	f7fe f91e 	bl	8001150 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	6a3a      	ldr	r2, [r7, #32]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e03a      	b.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d023      	beq.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b80      	cmp	r3, #128	@ 0x80
 8002f3c:	d020      	beq.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b40      	cmp	r3, #64	@ 0x40
 8002f42:	d01d      	beq.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d116      	bne.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f81d 	bl	8002fa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2208      	movs	r2, #8
 8002f72:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e00f      	b.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d0b4      	beq.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b095      	sub	sp, #84	@ 0x54
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fd0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e5      	bne.n	8002fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3314      	adds	r3, #20
 8003002:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003004:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003006:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800300a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800300c:	e841 2300 	strex	r3, r2, [r1]
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e5      	bne.n	8002fe4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	2b01      	cmp	r3, #1
 800301e:	d119      	bne.n	8003054 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f023 0310 	bic.w	r3, r3, #16
 8003036:	647b      	str	r3, [r7, #68]	@ 0x44
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003040:	61ba      	str	r2, [r7, #24]
 8003042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	6979      	ldr	r1, [r7, #20]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	613b      	str	r3, [r7, #16]
   return(result);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e5      	bne.n	8003020 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003062:	bf00      	nop
 8003064:	3754      	adds	r7, #84	@ 0x54
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003074:	b0c0      	sub	sp, #256	@ 0x100
 8003076:	af00      	add	r7, sp, #0
 8003078:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308c:	68d9      	ldr	r1, [r3, #12]
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	ea40 0301 	orr.w	r3, r0, r1
 8003098:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030c8:	f021 010c 	bic.w	r1, r1, #12
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030d6:	430b      	orrs	r3, r1
 80030d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ea:	6999      	ldr	r1, [r3, #24]
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	ea40 0301 	orr.w	r3, r0, r1
 80030f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b8f      	ldr	r3, [pc, #572]	@ (800333c <UART_SetConfig+0x2cc>)
 8003100:	429a      	cmp	r2, r3
 8003102:	d005      	beq.n	8003110 <UART_SetConfig+0xa0>
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b8d      	ldr	r3, [pc, #564]	@ (8003340 <UART_SetConfig+0x2d0>)
 800310c:	429a      	cmp	r2, r3
 800310e:	d104      	bne.n	800311a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003110:	f7fe fbe8 	bl	80018e4 <HAL_RCC_GetPCLK2Freq>
 8003114:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003118:	e003      	b.n	8003122 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800311a:	f7fe fbcf 	bl	80018bc <HAL_RCC_GetPCLK1Freq>
 800311e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800312c:	f040 810c 	bne.w	8003348 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003134:	2200      	movs	r2, #0
 8003136:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800313a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800313e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003142:	4622      	mov	r2, r4
 8003144:	462b      	mov	r3, r5
 8003146:	1891      	adds	r1, r2, r2
 8003148:	65b9      	str	r1, [r7, #88]	@ 0x58
 800314a:	415b      	adcs	r3, r3
 800314c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800314e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003152:	4621      	mov	r1, r4
 8003154:	eb12 0801 	adds.w	r8, r2, r1
 8003158:	4629      	mov	r1, r5
 800315a:	eb43 0901 	adc.w	r9, r3, r1
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800316a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800316e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003172:	4690      	mov	r8, r2
 8003174:	4699      	mov	r9, r3
 8003176:	4623      	mov	r3, r4
 8003178:	eb18 0303 	adds.w	r3, r8, r3
 800317c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003180:	462b      	mov	r3, r5
 8003182:	eb49 0303 	adc.w	r3, r9, r3
 8003186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003196:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800319a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800319e:	460b      	mov	r3, r1
 80031a0:	18db      	adds	r3, r3, r3
 80031a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80031a4:	4613      	mov	r3, r2
 80031a6:	eb42 0303 	adc.w	r3, r2, r3
 80031aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80031ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031b4:	f7fd f87c 	bl	80002b0 <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4b61      	ldr	r3, [pc, #388]	@ (8003344 <UART_SetConfig+0x2d4>)
 80031be:	fba3 2302 	umull	r2, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	011c      	lsls	r4, r3, #4
 80031c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031d8:	4642      	mov	r2, r8
 80031da:	464b      	mov	r3, r9
 80031dc:	1891      	adds	r1, r2, r2
 80031de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031e0:	415b      	adcs	r3, r3
 80031e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031e8:	4641      	mov	r1, r8
 80031ea:	eb12 0a01 	adds.w	sl, r2, r1
 80031ee:	4649      	mov	r1, r9
 80031f0:	eb43 0b01 	adc.w	fp, r3, r1
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003200:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003208:	4692      	mov	sl, r2
 800320a:	469b      	mov	fp, r3
 800320c:	4643      	mov	r3, r8
 800320e:	eb1a 0303 	adds.w	r3, sl, r3
 8003212:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003216:	464b      	mov	r3, r9
 8003218:	eb4b 0303 	adc.w	r3, fp, r3
 800321c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800322c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003230:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003234:	460b      	mov	r3, r1
 8003236:	18db      	adds	r3, r3, r3
 8003238:	643b      	str	r3, [r7, #64]	@ 0x40
 800323a:	4613      	mov	r3, r2
 800323c:	eb42 0303 	adc.w	r3, r2, r3
 8003240:	647b      	str	r3, [r7, #68]	@ 0x44
 8003242:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003246:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800324a:	f7fd f831 	bl	80002b0 <__aeabi_uldivmod>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4611      	mov	r1, r2
 8003254:	4b3b      	ldr	r3, [pc, #236]	@ (8003344 <UART_SetConfig+0x2d4>)
 8003256:	fba3 2301 	umull	r2, r3, r3, r1
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	2264      	movs	r2, #100	@ 0x64
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	1acb      	subs	r3, r1, r3
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800326a:	4b36      	ldr	r3, [pc, #216]	@ (8003344 <UART_SetConfig+0x2d4>)
 800326c:	fba3 2302 	umull	r2, r3, r3, r2
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003278:	441c      	add	r4, r3
 800327a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003284:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003288:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	1891      	adds	r1, r2, r2
 8003292:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003294:	415b      	adcs	r3, r3
 8003296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800329c:	4641      	mov	r1, r8
 800329e:	1851      	adds	r1, r2, r1
 80032a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80032a2:	4649      	mov	r1, r9
 80032a4:	414b      	adcs	r3, r1
 80032a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032b4:	4659      	mov	r1, fp
 80032b6:	00cb      	lsls	r3, r1, #3
 80032b8:	4651      	mov	r1, sl
 80032ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032be:	4651      	mov	r1, sl
 80032c0:	00ca      	lsls	r2, r1, #3
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	4642      	mov	r2, r8
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032d0:	464b      	mov	r3, r9
 80032d2:	460a      	mov	r2, r1
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032f0:	460b      	mov	r3, r1
 80032f2:	18db      	adds	r3, r3, r3
 80032f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032f6:	4613      	mov	r3, r2
 80032f8:	eb42 0303 	adc.w	r3, r2, r3
 80032fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003302:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003306:	f7fc ffd3 	bl	80002b0 <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <UART_SetConfig+0x2d4>)
 8003310:	fba3 1302 	umull	r1, r3, r3, r2
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	2164      	movs	r1, #100	@ 0x64
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	3332      	adds	r3, #50	@ 0x32
 8003322:	4a08      	ldr	r2, [pc, #32]	@ (8003344 <UART_SetConfig+0x2d4>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	f003 0207 	and.w	r2, r3, #7
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4422      	add	r2, r4
 8003336:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003338:	e106      	b.n	8003548 <UART_SetConfig+0x4d8>
 800333a:	bf00      	nop
 800333c:	40011000 	.word	0x40011000
 8003340:	40011400 	.word	0x40011400
 8003344:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800334c:	2200      	movs	r2, #0
 800334e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003352:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003356:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800335a:	4642      	mov	r2, r8
 800335c:	464b      	mov	r3, r9
 800335e:	1891      	adds	r1, r2, r2
 8003360:	6239      	str	r1, [r7, #32]
 8003362:	415b      	adcs	r3, r3
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
 8003366:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800336a:	4641      	mov	r1, r8
 800336c:	1854      	adds	r4, r2, r1
 800336e:	4649      	mov	r1, r9
 8003370:	eb43 0501 	adc.w	r5, r3, r1
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	00eb      	lsls	r3, r5, #3
 800337e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003382:	00e2      	lsls	r2, r4, #3
 8003384:	4614      	mov	r4, r2
 8003386:	461d      	mov	r5, r3
 8003388:	4643      	mov	r3, r8
 800338a:	18e3      	adds	r3, r4, r3
 800338c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003390:	464b      	mov	r3, r9
 8003392:	eb45 0303 	adc.w	r3, r5, r3
 8003396:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033b6:	4629      	mov	r1, r5
 80033b8:	008b      	lsls	r3, r1, #2
 80033ba:	4621      	mov	r1, r4
 80033bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033c0:	4621      	mov	r1, r4
 80033c2:	008a      	lsls	r2, r1, #2
 80033c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033c8:	f7fc ff72 	bl	80002b0 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4b60      	ldr	r3, [pc, #384]	@ (8003554 <UART_SetConfig+0x4e4>)
 80033d2:	fba3 2302 	umull	r2, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	011c      	lsls	r4, r3, #4
 80033da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	1891      	adds	r1, r2, r2
 80033f2:	61b9      	str	r1, [r7, #24]
 80033f4:	415b      	adcs	r3, r3
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033fc:	4641      	mov	r1, r8
 80033fe:	1851      	adds	r1, r2, r1
 8003400:	6139      	str	r1, [r7, #16]
 8003402:	4649      	mov	r1, r9
 8003404:	414b      	adcs	r3, r1
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003414:	4659      	mov	r1, fp
 8003416:	00cb      	lsls	r3, r1, #3
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800341e:	4651      	mov	r1, sl
 8003420:	00ca      	lsls	r2, r1, #3
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	4603      	mov	r3, r0
 8003428:	4642      	mov	r2, r8
 800342a:	189b      	adds	r3, r3, r2
 800342c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003430:	464b      	mov	r3, r9
 8003432:	460a      	mov	r2, r1
 8003434:	eb42 0303 	adc.w	r3, r2, r3
 8003438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003446:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003454:	4649      	mov	r1, r9
 8003456:	008b      	lsls	r3, r1, #2
 8003458:	4641      	mov	r1, r8
 800345a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800345e:	4641      	mov	r1, r8
 8003460:	008a      	lsls	r2, r1, #2
 8003462:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003466:	f7fc ff23 	bl	80002b0 <__aeabi_uldivmod>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4611      	mov	r1, r2
 8003470:	4b38      	ldr	r3, [pc, #224]	@ (8003554 <UART_SetConfig+0x4e4>)
 8003472:	fba3 2301 	umull	r2, r3, r3, r1
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2264      	movs	r2, #100	@ 0x64
 800347a:	fb02 f303 	mul.w	r3, r2, r3
 800347e:	1acb      	subs	r3, r1, r3
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	3332      	adds	r3, #50	@ 0x32
 8003484:	4a33      	ldr	r2, [pc, #204]	@ (8003554 <UART_SetConfig+0x4e4>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003490:	441c      	add	r4, r3
 8003492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003496:	2200      	movs	r2, #0
 8003498:	673b      	str	r3, [r7, #112]	@ 0x70
 800349a:	677a      	str	r2, [r7, #116]	@ 0x74
 800349c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	415b      	adcs	r3, r3
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034b0:	4641      	mov	r1, r8
 80034b2:	1851      	adds	r1, r2, r1
 80034b4:	6039      	str	r1, [r7, #0]
 80034b6:	4649      	mov	r1, r9
 80034b8:	414b      	adcs	r3, r1
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034c8:	4659      	mov	r1, fp
 80034ca:	00cb      	lsls	r3, r1, #3
 80034cc:	4651      	mov	r1, sl
 80034ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d2:	4651      	mov	r1, sl
 80034d4:	00ca      	lsls	r2, r1, #3
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	4642      	mov	r2, r8
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034e2:	464b      	mov	r3, r9
 80034e4:	460a      	mov	r2, r1
 80034e6:	eb42 0303 	adc.w	r3, r2, r3
 80034ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80034f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003504:	4649      	mov	r1, r9
 8003506:	008b      	lsls	r3, r1, #2
 8003508:	4641      	mov	r1, r8
 800350a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800350e:	4641      	mov	r1, r8
 8003510:	008a      	lsls	r2, r1, #2
 8003512:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003516:	f7fc fecb 	bl	80002b0 <__aeabi_uldivmod>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <UART_SetConfig+0x4e4>)
 8003520:	fba3 1302 	umull	r1, r3, r3, r2
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	2164      	movs	r1, #100	@ 0x64
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	3332      	adds	r3, #50	@ 0x32
 8003532:	4a08      	ldr	r2, [pc, #32]	@ (8003554 <UART_SetConfig+0x4e4>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	f003 020f 	and.w	r2, r3, #15
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4422      	add	r2, r4
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800354e:	46bd      	mov	sp, r7
 8003550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003554:	51eb851f 	.word	0x51eb851f

08003558 <std>:
 8003558:	2300      	movs	r3, #0
 800355a:	b510      	push	{r4, lr}
 800355c:	4604      	mov	r4, r0
 800355e:	e9c0 3300 	strd	r3, r3, [r0]
 8003562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003566:	6083      	str	r3, [r0, #8]
 8003568:	8181      	strh	r1, [r0, #12]
 800356a:	6643      	str	r3, [r0, #100]	@ 0x64
 800356c:	81c2      	strh	r2, [r0, #14]
 800356e:	6183      	str	r3, [r0, #24]
 8003570:	4619      	mov	r1, r3
 8003572:	2208      	movs	r2, #8
 8003574:	305c      	adds	r0, #92	@ 0x5c
 8003576:	f000 f906 	bl	8003786 <memset>
 800357a:	4b0d      	ldr	r3, [pc, #52]	@ (80035b0 <std+0x58>)
 800357c:	6263      	str	r3, [r4, #36]	@ 0x24
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <std+0x5c>)
 8003580:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <std+0x60>)
 8003584:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <std+0x64>)
 8003588:	6323      	str	r3, [r4, #48]	@ 0x30
 800358a:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <std+0x68>)
 800358c:	6224      	str	r4, [r4, #32]
 800358e:	429c      	cmp	r4, r3
 8003590:	d006      	beq.n	80035a0 <std+0x48>
 8003592:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003596:	4294      	cmp	r4, r2
 8003598:	d002      	beq.n	80035a0 <std+0x48>
 800359a:	33d0      	adds	r3, #208	@ 0xd0
 800359c:	429c      	cmp	r4, r3
 800359e:	d105      	bne.n	80035ac <std+0x54>
 80035a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035a8:	f000 b966 	b.w	8003878 <__retarget_lock_init_recursive>
 80035ac:	bd10      	pop	{r4, pc}
 80035ae:	bf00      	nop
 80035b0:	08003701 	.word	0x08003701
 80035b4:	08003723 	.word	0x08003723
 80035b8:	0800375b 	.word	0x0800375b
 80035bc:	0800377f 	.word	0x0800377f
 80035c0:	2000012c 	.word	0x2000012c

080035c4 <stdio_exit_handler>:
 80035c4:	4a02      	ldr	r2, [pc, #8]	@ (80035d0 <stdio_exit_handler+0xc>)
 80035c6:	4903      	ldr	r1, [pc, #12]	@ (80035d4 <stdio_exit_handler+0x10>)
 80035c8:	4803      	ldr	r0, [pc, #12]	@ (80035d8 <stdio_exit_handler+0x14>)
 80035ca:	f000 b869 	b.w	80036a0 <_fwalk_sglue>
 80035ce:	bf00      	nop
 80035d0:	2000000c 	.word	0x2000000c
 80035d4:	08004115 	.word	0x08004115
 80035d8:	2000001c 	.word	0x2000001c

080035dc <cleanup_stdio>:
 80035dc:	6841      	ldr	r1, [r0, #4]
 80035de:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <cleanup_stdio+0x34>)
 80035e0:	4299      	cmp	r1, r3
 80035e2:	b510      	push	{r4, lr}
 80035e4:	4604      	mov	r4, r0
 80035e6:	d001      	beq.n	80035ec <cleanup_stdio+0x10>
 80035e8:	f000 fd94 	bl	8004114 <_fflush_r>
 80035ec:	68a1      	ldr	r1, [r4, #8]
 80035ee:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <cleanup_stdio+0x38>)
 80035f0:	4299      	cmp	r1, r3
 80035f2:	d002      	beq.n	80035fa <cleanup_stdio+0x1e>
 80035f4:	4620      	mov	r0, r4
 80035f6:	f000 fd8d 	bl	8004114 <_fflush_r>
 80035fa:	68e1      	ldr	r1, [r4, #12]
 80035fc:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <cleanup_stdio+0x3c>)
 80035fe:	4299      	cmp	r1, r3
 8003600:	d004      	beq.n	800360c <cleanup_stdio+0x30>
 8003602:	4620      	mov	r0, r4
 8003604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003608:	f000 bd84 	b.w	8004114 <_fflush_r>
 800360c:	bd10      	pop	{r4, pc}
 800360e:	bf00      	nop
 8003610:	2000012c 	.word	0x2000012c
 8003614:	20000194 	.word	0x20000194
 8003618:	200001fc 	.word	0x200001fc

0800361c <global_stdio_init.part.0>:
 800361c:	b510      	push	{r4, lr}
 800361e:	4b0b      	ldr	r3, [pc, #44]	@ (800364c <global_stdio_init.part.0+0x30>)
 8003620:	4c0b      	ldr	r4, [pc, #44]	@ (8003650 <global_stdio_init.part.0+0x34>)
 8003622:	4a0c      	ldr	r2, [pc, #48]	@ (8003654 <global_stdio_init.part.0+0x38>)
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	4620      	mov	r0, r4
 8003628:	2200      	movs	r2, #0
 800362a:	2104      	movs	r1, #4
 800362c:	f7ff ff94 	bl	8003558 <std>
 8003630:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003634:	2201      	movs	r2, #1
 8003636:	2109      	movs	r1, #9
 8003638:	f7ff ff8e 	bl	8003558 <std>
 800363c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003640:	2202      	movs	r2, #2
 8003642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003646:	2112      	movs	r1, #18
 8003648:	f7ff bf86 	b.w	8003558 <std>
 800364c:	20000264 	.word	0x20000264
 8003650:	2000012c 	.word	0x2000012c
 8003654:	080035c5 	.word	0x080035c5

08003658 <__sfp_lock_acquire>:
 8003658:	4801      	ldr	r0, [pc, #4]	@ (8003660 <__sfp_lock_acquire+0x8>)
 800365a:	f000 b90e 	b.w	800387a <__retarget_lock_acquire_recursive>
 800365e:	bf00      	nop
 8003660:	2000026d 	.word	0x2000026d

08003664 <__sfp_lock_release>:
 8003664:	4801      	ldr	r0, [pc, #4]	@ (800366c <__sfp_lock_release+0x8>)
 8003666:	f000 b909 	b.w	800387c <__retarget_lock_release_recursive>
 800366a:	bf00      	nop
 800366c:	2000026d 	.word	0x2000026d

08003670 <__sinit>:
 8003670:	b510      	push	{r4, lr}
 8003672:	4604      	mov	r4, r0
 8003674:	f7ff fff0 	bl	8003658 <__sfp_lock_acquire>
 8003678:	6a23      	ldr	r3, [r4, #32]
 800367a:	b11b      	cbz	r3, 8003684 <__sinit+0x14>
 800367c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003680:	f7ff bff0 	b.w	8003664 <__sfp_lock_release>
 8003684:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <__sinit+0x28>)
 8003686:	6223      	str	r3, [r4, #32]
 8003688:	4b04      	ldr	r3, [pc, #16]	@ (800369c <__sinit+0x2c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f5      	bne.n	800367c <__sinit+0xc>
 8003690:	f7ff ffc4 	bl	800361c <global_stdio_init.part.0>
 8003694:	e7f2      	b.n	800367c <__sinit+0xc>
 8003696:	bf00      	nop
 8003698:	080035dd 	.word	0x080035dd
 800369c:	20000264 	.word	0x20000264

080036a0 <_fwalk_sglue>:
 80036a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a4:	4607      	mov	r7, r0
 80036a6:	4688      	mov	r8, r1
 80036a8:	4614      	mov	r4, r2
 80036aa:	2600      	movs	r6, #0
 80036ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036b0:	f1b9 0901 	subs.w	r9, r9, #1
 80036b4:	d505      	bpl.n	80036c2 <_fwalk_sglue+0x22>
 80036b6:	6824      	ldr	r4, [r4, #0]
 80036b8:	2c00      	cmp	r4, #0
 80036ba:	d1f7      	bne.n	80036ac <_fwalk_sglue+0xc>
 80036bc:	4630      	mov	r0, r6
 80036be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036c2:	89ab      	ldrh	r3, [r5, #12]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d907      	bls.n	80036d8 <_fwalk_sglue+0x38>
 80036c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036cc:	3301      	adds	r3, #1
 80036ce:	d003      	beq.n	80036d8 <_fwalk_sglue+0x38>
 80036d0:	4629      	mov	r1, r5
 80036d2:	4638      	mov	r0, r7
 80036d4:	47c0      	blx	r8
 80036d6:	4306      	orrs	r6, r0
 80036d8:	3568      	adds	r5, #104	@ 0x68
 80036da:	e7e9      	b.n	80036b0 <_fwalk_sglue+0x10>

080036dc <iprintf>:
 80036dc:	b40f      	push	{r0, r1, r2, r3}
 80036de:	b507      	push	{r0, r1, r2, lr}
 80036e0:	4906      	ldr	r1, [pc, #24]	@ (80036fc <iprintf+0x20>)
 80036e2:	ab04      	add	r3, sp, #16
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80036ea:	6881      	ldr	r1, [r0, #8]
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	f000 f9e9 	bl	8003ac4 <_vfiprintf_r>
 80036f2:	b003      	add	sp, #12
 80036f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f8:	b004      	add	sp, #16
 80036fa:	4770      	bx	lr
 80036fc:	20000018 	.word	0x20000018

08003700 <__sread>:
 8003700:	b510      	push	{r4, lr}
 8003702:	460c      	mov	r4, r1
 8003704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003708:	f000 f868 	bl	80037dc <_read_r>
 800370c:	2800      	cmp	r0, #0
 800370e:	bfab      	itete	ge
 8003710:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003712:	89a3      	ldrhlt	r3, [r4, #12]
 8003714:	181b      	addge	r3, r3, r0
 8003716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800371a:	bfac      	ite	ge
 800371c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800371e:	81a3      	strhlt	r3, [r4, #12]
 8003720:	bd10      	pop	{r4, pc}

08003722 <__swrite>:
 8003722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003726:	461f      	mov	r7, r3
 8003728:	898b      	ldrh	r3, [r1, #12]
 800372a:	05db      	lsls	r3, r3, #23
 800372c:	4605      	mov	r5, r0
 800372e:	460c      	mov	r4, r1
 8003730:	4616      	mov	r6, r2
 8003732:	d505      	bpl.n	8003740 <__swrite+0x1e>
 8003734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003738:	2302      	movs	r3, #2
 800373a:	2200      	movs	r2, #0
 800373c:	f000 f83c 	bl	80037b8 <_lseek_r>
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003746:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800374a:	81a3      	strh	r3, [r4, #12]
 800374c:	4632      	mov	r2, r6
 800374e:	463b      	mov	r3, r7
 8003750:	4628      	mov	r0, r5
 8003752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003756:	f000 b853 	b.w	8003800 <_write_r>

0800375a <__sseek>:
 800375a:	b510      	push	{r4, lr}
 800375c:	460c      	mov	r4, r1
 800375e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003762:	f000 f829 	bl	80037b8 <_lseek_r>
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	bf15      	itete	ne
 800376c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800376e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003776:	81a3      	strheq	r3, [r4, #12]
 8003778:	bf18      	it	ne
 800377a:	81a3      	strhne	r3, [r4, #12]
 800377c:	bd10      	pop	{r4, pc}

0800377e <__sclose>:
 800377e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003782:	f000 b809 	b.w	8003798 <_close_r>

08003786 <memset>:
 8003786:	4402      	add	r2, r0
 8003788:	4603      	mov	r3, r0
 800378a:	4293      	cmp	r3, r2
 800378c:	d100      	bne.n	8003790 <memset+0xa>
 800378e:	4770      	bx	lr
 8003790:	f803 1b01 	strb.w	r1, [r3], #1
 8003794:	e7f9      	b.n	800378a <memset+0x4>
	...

08003798 <_close_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4d06      	ldr	r5, [pc, #24]	@ (80037b4 <_close_r+0x1c>)
 800379c:	2300      	movs	r3, #0
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f7fd fbc8 	bl	8000f38 <_close>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d102      	bne.n	80037b2 <_close_r+0x1a>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b103      	cbz	r3, 80037b2 <_close_r+0x1a>
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	20000268 	.word	0x20000268

080037b8 <_lseek_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d07      	ldr	r5, [pc, #28]	@ (80037d8 <_lseek_r+0x20>)
 80037bc:	4604      	mov	r4, r0
 80037be:	4608      	mov	r0, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	602a      	str	r2, [r5, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7fd fbdd 	bl	8000f86 <_lseek>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_lseek_r+0x1e>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_lseek_r+0x1e>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	20000268 	.word	0x20000268

080037dc <_read_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4d07      	ldr	r5, [pc, #28]	@ (80037fc <_read_r+0x20>)
 80037e0:	4604      	mov	r4, r0
 80037e2:	4608      	mov	r0, r1
 80037e4:	4611      	mov	r1, r2
 80037e6:	2200      	movs	r2, #0
 80037e8:	602a      	str	r2, [r5, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f7fd fb87 	bl	8000efe <_read>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_read_r+0x1e>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_read_r+0x1e>
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	20000268 	.word	0x20000268

08003800 <_write_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4d07      	ldr	r5, [pc, #28]	@ (8003820 <_write_r+0x20>)
 8003804:	4604      	mov	r4, r0
 8003806:	4608      	mov	r0, r1
 8003808:	4611      	mov	r1, r2
 800380a:	2200      	movs	r2, #0
 800380c:	602a      	str	r2, [r5, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	f7fd fa72 	bl	8000cf8 <_write>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d102      	bne.n	800381e <_write_r+0x1e>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	b103      	cbz	r3, 800381e <_write_r+0x1e>
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	20000268 	.word	0x20000268

08003824 <__errno>:
 8003824:	4b01      	ldr	r3, [pc, #4]	@ (800382c <__errno+0x8>)
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000018 	.word	0x20000018

08003830 <__libc_init_array>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	4d0d      	ldr	r5, [pc, #52]	@ (8003868 <__libc_init_array+0x38>)
 8003834:	4c0d      	ldr	r4, [pc, #52]	@ (800386c <__libc_init_array+0x3c>)
 8003836:	1b64      	subs	r4, r4, r5
 8003838:	10a4      	asrs	r4, r4, #2
 800383a:	2600      	movs	r6, #0
 800383c:	42a6      	cmp	r6, r4
 800383e:	d109      	bne.n	8003854 <__libc_init_array+0x24>
 8003840:	4d0b      	ldr	r5, [pc, #44]	@ (8003870 <__libc_init_array+0x40>)
 8003842:	4c0c      	ldr	r4, [pc, #48]	@ (8003874 <__libc_init_array+0x44>)
 8003844:	f000 fdb6 	bl	80043b4 <_init>
 8003848:	1b64      	subs	r4, r4, r5
 800384a:	10a4      	asrs	r4, r4, #2
 800384c:	2600      	movs	r6, #0
 800384e:	42a6      	cmp	r6, r4
 8003850:	d105      	bne.n	800385e <__libc_init_array+0x2e>
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	f855 3b04 	ldr.w	r3, [r5], #4
 8003858:	4798      	blx	r3
 800385a:	3601      	adds	r6, #1
 800385c:	e7ee      	b.n	800383c <__libc_init_array+0xc>
 800385e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003862:	4798      	blx	r3
 8003864:	3601      	adds	r6, #1
 8003866:	e7f2      	b.n	800384e <__libc_init_array+0x1e>
 8003868:	080044e0 	.word	0x080044e0
 800386c:	080044e0 	.word	0x080044e0
 8003870:	080044e0 	.word	0x080044e0
 8003874:	080044e4 	.word	0x080044e4

08003878 <__retarget_lock_init_recursive>:
 8003878:	4770      	bx	lr

0800387a <__retarget_lock_acquire_recursive>:
 800387a:	4770      	bx	lr

0800387c <__retarget_lock_release_recursive>:
 800387c:	4770      	bx	lr
	...

08003880 <_free_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4605      	mov	r5, r0
 8003884:	2900      	cmp	r1, #0
 8003886:	d041      	beq.n	800390c <_free_r+0x8c>
 8003888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800388c:	1f0c      	subs	r4, r1, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	bfb8      	it	lt
 8003892:	18e4      	addlt	r4, r4, r3
 8003894:	f000 f8e0 	bl	8003a58 <__malloc_lock>
 8003898:	4a1d      	ldr	r2, [pc, #116]	@ (8003910 <_free_r+0x90>)
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	b933      	cbnz	r3, 80038ac <_free_r+0x2c>
 800389e:	6063      	str	r3, [r4, #4]
 80038a0:	6014      	str	r4, [r2, #0]
 80038a2:	4628      	mov	r0, r5
 80038a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a8:	f000 b8dc 	b.w	8003a64 <__malloc_unlock>
 80038ac:	42a3      	cmp	r3, r4
 80038ae:	d908      	bls.n	80038c2 <_free_r+0x42>
 80038b0:	6820      	ldr	r0, [r4, #0]
 80038b2:	1821      	adds	r1, r4, r0
 80038b4:	428b      	cmp	r3, r1
 80038b6:	bf01      	itttt	eq
 80038b8:	6819      	ldreq	r1, [r3, #0]
 80038ba:	685b      	ldreq	r3, [r3, #4]
 80038bc:	1809      	addeq	r1, r1, r0
 80038be:	6021      	streq	r1, [r4, #0]
 80038c0:	e7ed      	b.n	800389e <_free_r+0x1e>
 80038c2:	461a      	mov	r2, r3
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	b10b      	cbz	r3, 80038cc <_free_r+0x4c>
 80038c8:	42a3      	cmp	r3, r4
 80038ca:	d9fa      	bls.n	80038c2 <_free_r+0x42>
 80038cc:	6811      	ldr	r1, [r2, #0]
 80038ce:	1850      	adds	r0, r2, r1
 80038d0:	42a0      	cmp	r0, r4
 80038d2:	d10b      	bne.n	80038ec <_free_r+0x6c>
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	4401      	add	r1, r0
 80038d8:	1850      	adds	r0, r2, r1
 80038da:	4283      	cmp	r3, r0
 80038dc:	6011      	str	r1, [r2, #0]
 80038de:	d1e0      	bne.n	80038a2 <_free_r+0x22>
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	6053      	str	r3, [r2, #4]
 80038e6:	4408      	add	r0, r1
 80038e8:	6010      	str	r0, [r2, #0]
 80038ea:	e7da      	b.n	80038a2 <_free_r+0x22>
 80038ec:	d902      	bls.n	80038f4 <_free_r+0x74>
 80038ee:	230c      	movs	r3, #12
 80038f0:	602b      	str	r3, [r5, #0]
 80038f2:	e7d6      	b.n	80038a2 <_free_r+0x22>
 80038f4:	6820      	ldr	r0, [r4, #0]
 80038f6:	1821      	adds	r1, r4, r0
 80038f8:	428b      	cmp	r3, r1
 80038fa:	bf04      	itt	eq
 80038fc:	6819      	ldreq	r1, [r3, #0]
 80038fe:	685b      	ldreq	r3, [r3, #4]
 8003900:	6063      	str	r3, [r4, #4]
 8003902:	bf04      	itt	eq
 8003904:	1809      	addeq	r1, r1, r0
 8003906:	6021      	streq	r1, [r4, #0]
 8003908:	6054      	str	r4, [r2, #4]
 800390a:	e7ca      	b.n	80038a2 <_free_r+0x22>
 800390c:	bd38      	pop	{r3, r4, r5, pc}
 800390e:	bf00      	nop
 8003910:	20000274 	.word	0x20000274

08003914 <sbrk_aligned>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4e0f      	ldr	r6, [pc, #60]	@ (8003954 <sbrk_aligned+0x40>)
 8003918:	460c      	mov	r4, r1
 800391a:	6831      	ldr	r1, [r6, #0]
 800391c:	4605      	mov	r5, r0
 800391e:	b911      	cbnz	r1, 8003926 <sbrk_aligned+0x12>
 8003920:	f000 fcb4 	bl	800428c <_sbrk_r>
 8003924:	6030      	str	r0, [r6, #0]
 8003926:	4621      	mov	r1, r4
 8003928:	4628      	mov	r0, r5
 800392a:	f000 fcaf 	bl	800428c <_sbrk_r>
 800392e:	1c43      	adds	r3, r0, #1
 8003930:	d103      	bne.n	800393a <sbrk_aligned+0x26>
 8003932:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003936:	4620      	mov	r0, r4
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	1cc4      	adds	r4, r0, #3
 800393c:	f024 0403 	bic.w	r4, r4, #3
 8003940:	42a0      	cmp	r0, r4
 8003942:	d0f8      	beq.n	8003936 <sbrk_aligned+0x22>
 8003944:	1a21      	subs	r1, r4, r0
 8003946:	4628      	mov	r0, r5
 8003948:	f000 fca0 	bl	800428c <_sbrk_r>
 800394c:	3001      	adds	r0, #1
 800394e:	d1f2      	bne.n	8003936 <sbrk_aligned+0x22>
 8003950:	e7ef      	b.n	8003932 <sbrk_aligned+0x1e>
 8003952:	bf00      	nop
 8003954:	20000270 	.word	0x20000270

08003958 <_malloc_r>:
 8003958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800395c:	1ccd      	adds	r5, r1, #3
 800395e:	f025 0503 	bic.w	r5, r5, #3
 8003962:	3508      	adds	r5, #8
 8003964:	2d0c      	cmp	r5, #12
 8003966:	bf38      	it	cc
 8003968:	250c      	movcc	r5, #12
 800396a:	2d00      	cmp	r5, #0
 800396c:	4606      	mov	r6, r0
 800396e:	db01      	blt.n	8003974 <_malloc_r+0x1c>
 8003970:	42a9      	cmp	r1, r5
 8003972:	d904      	bls.n	800397e <_malloc_r+0x26>
 8003974:	230c      	movs	r3, #12
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	2000      	movs	r0, #0
 800397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a54 <_malloc_r+0xfc>
 8003982:	f000 f869 	bl	8003a58 <__malloc_lock>
 8003986:	f8d8 3000 	ldr.w	r3, [r8]
 800398a:	461c      	mov	r4, r3
 800398c:	bb44      	cbnz	r4, 80039e0 <_malloc_r+0x88>
 800398e:	4629      	mov	r1, r5
 8003990:	4630      	mov	r0, r6
 8003992:	f7ff ffbf 	bl	8003914 <sbrk_aligned>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	4604      	mov	r4, r0
 800399a:	d158      	bne.n	8003a4e <_malloc_r+0xf6>
 800399c:	f8d8 4000 	ldr.w	r4, [r8]
 80039a0:	4627      	mov	r7, r4
 80039a2:	2f00      	cmp	r7, #0
 80039a4:	d143      	bne.n	8003a2e <_malloc_r+0xd6>
 80039a6:	2c00      	cmp	r4, #0
 80039a8:	d04b      	beq.n	8003a42 <_malloc_r+0xea>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	4639      	mov	r1, r7
 80039ae:	4630      	mov	r0, r6
 80039b0:	eb04 0903 	add.w	r9, r4, r3
 80039b4:	f000 fc6a 	bl	800428c <_sbrk_r>
 80039b8:	4581      	cmp	r9, r0
 80039ba:	d142      	bne.n	8003a42 <_malloc_r+0xea>
 80039bc:	6821      	ldr	r1, [r4, #0]
 80039be:	1a6d      	subs	r5, r5, r1
 80039c0:	4629      	mov	r1, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	f7ff ffa6 	bl	8003914 <sbrk_aligned>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d03a      	beq.n	8003a42 <_malloc_r+0xea>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	442b      	add	r3, r5
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	f8d8 3000 	ldr.w	r3, [r8]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	bb62      	cbnz	r2, 8003a34 <_malloc_r+0xdc>
 80039da:	f8c8 7000 	str.w	r7, [r8]
 80039de:	e00f      	b.n	8003a00 <_malloc_r+0xa8>
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	1b52      	subs	r2, r2, r5
 80039e4:	d420      	bmi.n	8003a28 <_malloc_r+0xd0>
 80039e6:	2a0b      	cmp	r2, #11
 80039e8:	d917      	bls.n	8003a1a <_malloc_r+0xc2>
 80039ea:	1961      	adds	r1, r4, r5
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	6025      	str	r5, [r4, #0]
 80039f0:	bf18      	it	ne
 80039f2:	6059      	strne	r1, [r3, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	bf08      	it	eq
 80039f8:	f8c8 1000 	streq.w	r1, [r8]
 80039fc:	5162      	str	r2, [r4, r5]
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 f82f 	bl	8003a64 <__malloc_unlock>
 8003a06:	f104 000b 	add.w	r0, r4, #11
 8003a0a:	1d23      	adds	r3, r4, #4
 8003a0c:	f020 0007 	bic.w	r0, r0, #7
 8003a10:	1ac2      	subs	r2, r0, r3
 8003a12:	bf1c      	itt	ne
 8003a14:	1a1b      	subne	r3, r3, r0
 8003a16:	50a3      	strne	r3, [r4, r2]
 8003a18:	e7af      	b.n	800397a <_malloc_r+0x22>
 8003a1a:	6862      	ldr	r2, [r4, #4]
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	bf0c      	ite	eq
 8003a20:	f8c8 2000 	streq.w	r2, [r8]
 8003a24:	605a      	strne	r2, [r3, #4]
 8003a26:	e7eb      	b.n	8003a00 <_malloc_r+0xa8>
 8003a28:	4623      	mov	r3, r4
 8003a2a:	6864      	ldr	r4, [r4, #4]
 8003a2c:	e7ae      	b.n	800398c <_malloc_r+0x34>
 8003a2e:	463c      	mov	r4, r7
 8003a30:	687f      	ldr	r7, [r7, #4]
 8003a32:	e7b6      	b.n	80039a2 <_malloc_r+0x4a>
 8003a34:	461a      	mov	r2, r3
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d1fb      	bne.n	8003a34 <_malloc_r+0xdc>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6053      	str	r3, [r2, #4]
 8003a40:	e7de      	b.n	8003a00 <_malloc_r+0xa8>
 8003a42:	230c      	movs	r3, #12
 8003a44:	6033      	str	r3, [r6, #0]
 8003a46:	4630      	mov	r0, r6
 8003a48:	f000 f80c 	bl	8003a64 <__malloc_unlock>
 8003a4c:	e794      	b.n	8003978 <_malloc_r+0x20>
 8003a4e:	6005      	str	r5, [r0, #0]
 8003a50:	e7d6      	b.n	8003a00 <_malloc_r+0xa8>
 8003a52:	bf00      	nop
 8003a54:	20000274 	.word	0x20000274

08003a58 <__malloc_lock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	@ (8003a60 <__malloc_lock+0x8>)
 8003a5a:	f7ff bf0e 	b.w	800387a <__retarget_lock_acquire_recursive>
 8003a5e:	bf00      	nop
 8003a60:	2000026c 	.word	0x2000026c

08003a64 <__malloc_unlock>:
 8003a64:	4801      	ldr	r0, [pc, #4]	@ (8003a6c <__malloc_unlock+0x8>)
 8003a66:	f7ff bf09 	b.w	800387c <__retarget_lock_release_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	2000026c 	.word	0x2000026c

08003a70 <__sfputc_r>:
 8003a70:	6893      	ldr	r3, [r2, #8]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	b410      	push	{r4}
 8003a78:	6093      	str	r3, [r2, #8]
 8003a7a:	da08      	bge.n	8003a8e <__sfputc_r+0x1e>
 8003a7c:	6994      	ldr	r4, [r2, #24]
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	db01      	blt.n	8003a86 <__sfputc_r+0x16>
 8003a82:	290a      	cmp	r1, #10
 8003a84:	d103      	bne.n	8003a8e <__sfputc_r+0x1e>
 8003a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a8a:	f000 bb6b 	b.w	8004164 <__swbuf_r>
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	1c58      	adds	r0, r3, #1
 8003a92:	6010      	str	r0, [r2, #0]
 8003a94:	7019      	strb	r1, [r3, #0]
 8003a96:	4608      	mov	r0, r1
 8003a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <__sfputs_r>:
 8003a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa0:	4606      	mov	r6, r0
 8003aa2:	460f      	mov	r7, r1
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	18d5      	adds	r5, r2, r3
 8003aa8:	42ac      	cmp	r4, r5
 8003aaa:	d101      	bne.n	8003ab0 <__sfputs_r+0x12>
 8003aac:	2000      	movs	r0, #0
 8003aae:	e007      	b.n	8003ac0 <__sfputs_r+0x22>
 8003ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab4:	463a      	mov	r2, r7
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f7ff ffda 	bl	8003a70 <__sfputc_r>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d1f3      	bne.n	8003aa8 <__sfputs_r+0xa>
 8003ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ac4 <_vfiprintf_r>:
 8003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac8:	460d      	mov	r5, r1
 8003aca:	b09d      	sub	sp, #116	@ 0x74
 8003acc:	4614      	mov	r4, r2
 8003ace:	4698      	mov	r8, r3
 8003ad0:	4606      	mov	r6, r0
 8003ad2:	b118      	cbz	r0, 8003adc <_vfiprintf_r+0x18>
 8003ad4:	6a03      	ldr	r3, [r0, #32]
 8003ad6:	b90b      	cbnz	r3, 8003adc <_vfiprintf_r+0x18>
 8003ad8:	f7ff fdca 	bl	8003670 <__sinit>
 8003adc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ade:	07d9      	lsls	r1, r3, #31
 8003ae0:	d405      	bmi.n	8003aee <_vfiprintf_r+0x2a>
 8003ae2:	89ab      	ldrh	r3, [r5, #12]
 8003ae4:	059a      	lsls	r2, r3, #22
 8003ae6:	d402      	bmi.n	8003aee <_vfiprintf_r+0x2a>
 8003ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003aea:	f7ff fec6 	bl	800387a <__retarget_lock_acquire_recursive>
 8003aee:	89ab      	ldrh	r3, [r5, #12]
 8003af0:	071b      	lsls	r3, r3, #28
 8003af2:	d501      	bpl.n	8003af8 <_vfiprintf_r+0x34>
 8003af4:	692b      	ldr	r3, [r5, #16]
 8003af6:	b99b      	cbnz	r3, 8003b20 <_vfiprintf_r+0x5c>
 8003af8:	4629      	mov	r1, r5
 8003afa:	4630      	mov	r0, r6
 8003afc:	f000 fb70 	bl	80041e0 <__swsetup_r>
 8003b00:	b170      	cbz	r0, 8003b20 <_vfiprintf_r+0x5c>
 8003b02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b04:	07dc      	lsls	r4, r3, #31
 8003b06:	d504      	bpl.n	8003b12 <_vfiprintf_r+0x4e>
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b0c:	b01d      	add	sp, #116	@ 0x74
 8003b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b12:	89ab      	ldrh	r3, [r5, #12]
 8003b14:	0598      	lsls	r0, r3, #22
 8003b16:	d4f7      	bmi.n	8003b08 <_vfiprintf_r+0x44>
 8003b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b1a:	f7ff feaf 	bl	800387c <__retarget_lock_release_recursive>
 8003b1e:	e7f3      	b.n	8003b08 <_vfiprintf_r+0x44>
 8003b20:	2300      	movs	r3, #0
 8003b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b24:	2320      	movs	r3, #32
 8003b26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b2e:	2330      	movs	r3, #48	@ 0x30
 8003b30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ce0 <_vfiprintf_r+0x21c>
 8003b34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b38:	f04f 0901 	mov.w	r9, #1
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	469a      	mov	sl, r3
 8003b40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b44:	b10a      	cbz	r2, 8003b4a <_vfiprintf_r+0x86>
 8003b46:	2a25      	cmp	r2, #37	@ 0x25
 8003b48:	d1f9      	bne.n	8003b3e <_vfiprintf_r+0x7a>
 8003b4a:	ebba 0b04 	subs.w	fp, sl, r4
 8003b4e:	d00b      	beq.n	8003b68 <_vfiprintf_r+0xa4>
 8003b50:	465b      	mov	r3, fp
 8003b52:	4622      	mov	r2, r4
 8003b54:	4629      	mov	r1, r5
 8003b56:	4630      	mov	r0, r6
 8003b58:	f7ff ffa1 	bl	8003a9e <__sfputs_r>
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	f000 80a7 	beq.w	8003cb0 <_vfiprintf_r+0x1ec>
 8003b62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b64:	445a      	add	r2, fp
 8003b66:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b68:	f89a 3000 	ldrb.w	r3, [sl]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 809f 	beq.w	8003cb0 <_vfiprintf_r+0x1ec>
 8003b72:	2300      	movs	r3, #0
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b7c:	f10a 0a01 	add.w	sl, sl, #1
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	9307      	str	r3, [sp, #28]
 8003b84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b88:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b8a:	4654      	mov	r4, sl
 8003b8c:	2205      	movs	r2, #5
 8003b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b92:	4853      	ldr	r0, [pc, #332]	@ (8003ce0 <_vfiprintf_r+0x21c>)
 8003b94:	f7fc fb3c 	bl	8000210 <memchr>
 8003b98:	9a04      	ldr	r2, [sp, #16]
 8003b9a:	b9d8      	cbnz	r0, 8003bd4 <_vfiprintf_r+0x110>
 8003b9c:	06d1      	lsls	r1, r2, #27
 8003b9e:	bf44      	itt	mi
 8003ba0:	2320      	movmi	r3, #32
 8003ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ba6:	0713      	lsls	r3, r2, #28
 8003ba8:	bf44      	itt	mi
 8003baa:	232b      	movmi	r3, #43	@ 0x2b
 8003bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bb6:	d015      	beq.n	8003be4 <_vfiprintf_r+0x120>
 8003bb8:	9a07      	ldr	r2, [sp, #28]
 8003bba:	4654      	mov	r4, sl
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f04f 0c0a 	mov.w	ip, #10
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bc8:	3b30      	subs	r3, #48	@ 0x30
 8003bca:	2b09      	cmp	r3, #9
 8003bcc:	d94b      	bls.n	8003c66 <_vfiprintf_r+0x1a2>
 8003bce:	b1b0      	cbz	r0, 8003bfe <_vfiprintf_r+0x13a>
 8003bd0:	9207      	str	r2, [sp, #28]
 8003bd2:	e014      	b.n	8003bfe <_vfiprintf_r+0x13a>
 8003bd4:	eba0 0308 	sub.w	r3, r0, r8
 8003bd8:	fa09 f303 	lsl.w	r3, r9, r3
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	9304      	str	r3, [sp, #16]
 8003be0:	46a2      	mov	sl, r4
 8003be2:	e7d2      	b.n	8003b8a <_vfiprintf_r+0xc6>
 8003be4:	9b03      	ldr	r3, [sp, #12]
 8003be6:	1d19      	adds	r1, r3, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	9103      	str	r1, [sp, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bfbb      	ittet	lt
 8003bf0:	425b      	neglt	r3, r3
 8003bf2:	f042 0202 	orrlt.w	r2, r2, #2
 8003bf6:	9307      	strge	r3, [sp, #28]
 8003bf8:	9307      	strlt	r3, [sp, #28]
 8003bfa:	bfb8      	it	lt
 8003bfc:	9204      	strlt	r2, [sp, #16]
 8003bfe:	7823      	ldrb	r3, [r4, #0]
 8003c00:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c02:	d10a      	bne.n	8003c1a <_vfiprintf_r+0x156>
 8003c04:	7863      	ldrb	r3, [r4, #1]
 8003c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c08:	d132      	bne.n	8003c70 <_vfiprintf_r+0x1ac>
 8003c0a:	9b03      	ldr	r3, [sp, #12]
 8003c0c:	1d1a      	adds	r2, r3, #4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	9203      	str	r2, [sp, #12]
 8003c12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c16:	3402      	adds	r4, #2
 8003c18:	9305      	str	r3, [sp, #20]
 8003c1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003cf0 <_vfiprintf_r+0x22c>
 8003c1e:	7821      	ldrb	r1, [r4, #0]
 8003c20:	2203      	movs	r2, #3
 8003c22:	4650      	mov	r0, sl
 8003c24:	f7fc faf4 	bl	8000210 <memchr>
 8003c28:	b138      	cbz	r0, 8003c3a <_vfiprintf_r+0x176>
 8003c2a:	9b04      	ldr	r3, [sp, #16]
 8003c2c:	eba0 000a 	sub.w	r0, r0, sl
 8003c30:	2240      	movs	r2, #64	@ 0x40
 8003c32:	4082      	lsls	r2, r0
 8003c34:	4313      	orrs	r3, r2
 8003c36:	3401      	adds	r4, #1
 8003c38:	9304      	str	r3, [sp, #16]
 8003c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c3e:	4829      	ldr	r0, [pc, #164]	@ (8003ce4 <_vfiprintf_r+0x220>)
 8003c40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c44:	2206      	movs	r2, #6
 8003c46:	f7fc fae3 	bl	8000210 <memchr>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d03f      	beq.n	8003cce <_vfiprintf_r+0x20a>
 8003c4e:	4b26      	ldr	r3, [pc, #152]	@ (8003ce8 <_vfiprintf_r+0x224>)
 8003c50:	bb1b      	cbnz	r3, 8003c9a <_vfiprintf_r+0x1d6>
 8003c52:	9b03      	ldr	r3, [sp, #12]
 8003c54:	3307      	adds	r3, #7
 8003c56:	f023 0307 	bic.w	r3, r3, #7
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	9303      	str	r3, [sp, #12]
 8003c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c60:	443b      	add	r3, r7
 8003c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c64:	e76a      	b.n	8003b3c <_vfiprintf_r+0x78>
 8003c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	e7a8      	b.n	8003bc2 <_vfiprintf_r+0xfe>
 8003c70:	2300      	movs	r3, #0
 8003c72:	3401      	adds	r4, #1
 8003c74:	9305      	str	r3, [sp, #20]
 8003c76:	4619      	mov	r1, r3
 8003c78:	f04f 0c0a 	mov.w	ip, #10
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c82:	3a30      	subs	r2, #48	@ 0x30
 8003c84:	2a09      	cmp	r2, #9
 8003c86:	d903      	bls.n	8003c90 <_vfiprintf_r+0x1cc>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0c6      	beq.n	8003c1a <_vfiprintf_r+0x156>
 8003c8c:	9105      	str	r1, [sp, #20]
 8003c8e:	e7c4      	b.n	8003c1a <_vfiprintf_r+0x156>
 8003c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c94:	4604      	mov	r4, r0
 8003c96:	2301      	movs	r3, #1
 8003c98:	e7f0      	b.n	8003c7c <_vfiprintf_r+0x1b8>
 8003c9a:	ab03      	add	r3, sp, #12
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	462a      	mov	r2, r5
 8003ca0:	4b12      	ldr	r3, [pc, #72]	@ (8003cec <_vfiprintf_r+0x228>)
 8003ca2:	a904      	add	r1, sp, #16
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	f3af 8000 	nop.w
 8003caa:	4607      	mov	r7, r0
 8003cac:	1c78      	adds	r0, r7, #1
 8003cae:	d1d6      	bne.n	8003c5e <_vfiprintf_r+0x19a>
 8003cb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cb2:	07d9      	lsls	r1, r3, #31
 8003cb4:	d405      	bmi.n	8003cc2 <_vfiprintf_r+0x1fe>
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	059a      	lsls	r2, r3, #22
 8003cba:	d402      	bmi.n	8003cc2 <_vfiprintf_r+0x1fe>
 8003cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cbe:	f7ff fddd 	bl	800387c <__retarget_lock_release_recursive>
 8003cc2:	89ab      	ldrh	r3, [r5, #12]
 8003cc4:	065b      	lsls	r3, r3, #25
 8003cc6:	f53f af1f 	bmi.w	8003b08 <_vfiprintf_r+0x44>
 8003cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ccc:	e71e      	b.n	8003b0c <_vfiprintf_r+0x48>
 8003cce:	ab03      	add	r3, sp, #12
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	462a      	mov	r2, r5
 8003cd4:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <_vfiprintf_r+0x228>)
 8003cd6:	a904      	add	r1, sp, #16
 8003cd8:	4630      	mov	r0, r6
 8003cda:	f000 f879 	bl	8003dd0 <_printf_i>
 8003cde:	e7e4      	b.n	8003caa <_vfiprintf_r+0x1e6>
 8003ce0:	080044a4 	.word	0x080044a4
 8003ce4:	080044ae 	.word	0x080044ae
 8003ce8:	00000000 	.word	0x00000000
 8003cec:	08003a9f 	.word	0x08003a9f
 8003cf0:	080044aa 	.word	0x080044aa

08003cf4 <_printf_common>:
 8003cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf8:	4616      	mov	r6, r2
 8003cfa:	4698      	mov	r8, r3
 8003cfc:	688a      	ldr	r2, [r1, #8]
 8003cfe:	690b      	ldr	r3, [r1, #16]
 8003d00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d04:	4293      	cmp	r3, r2
 8003d06:	bfb8      	it	lt
 8003d08:	4613      	movlt	r3, r2
 8003d0a:	6033      	str	r3, [r6, #0]
 8003d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d10:	4607      	mov	r7, r0
 8003d12:	460c      	mov	r4, r1
 8003d14:	b10a      	cbz	r2, 8003d1a <_printf_common+0x26>
 8003d16:	3301      	adds	r3, #1
 8003d18:	6033      	str	r3, [r6, #0]
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	0699      	lsls	r1, r3, #26
 8003d1e:	bf42      	ittt	mi
 8003d20:	6833      	ldrmi	r3, [r6, #0]
 8003d22:	3302      	addmi	r3, #2
 8003d24:	6033      	strmi	r3, [r6, #0]
 8003d26:	6825      	ldr	r5, [r4, #0]
 8003d28:	f015 0506 	ands.w	r5, r5, #6
 8003d2c:	d106      	bne.n	8003d3c <_printf_common+0x48>
 8003d2e:	f104 0a19 	add.w	sl, r4, #25
 8003d32:	68e3      	ldr	r3, [r4, #12]
 8003d34:	6832      	ldr	r2, [r6, #0]
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	42ab      	cmp	r3, r5
 8003d3a:	dc26      	bgt.n	8003d8a <_printf_common+0x96>
 8003d3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	3b00      	subs	r3, #0
 8003d44:	bf18      	it	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	0692      	lsls	r2, r2, #26
 8003d4a:	d42b      	bmi.n	8003da4 <_printf_common+0xb0>
 8003d4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d50:	4641      	mov	r1, r8
 8003d52:	4638      	mov	r0, r7
 8003d54:	47c8      	blx	r9
 8003d56:	3001      	adds	r0, #1
 8003d58:	d01e      	beq.n	8003d98 <_printf_common+0xa4>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	6922      	ldr	r2, [r4, #16]
 8003d5e:	f003 0306 	and.w	r3, r3, #6
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf02      	ittt	eq
 8003d66:	68e5      	ldreq	r5, [r4, #12]
 8003d68:	6833      	ldreq	r3, [r6, #0]
 8003d6a:	1aed      	subeq	r5, r5, r3
 8003d6c:	68a3      	ldr	r3, [r4, #8]
 8003d6e:	bf0c      	ite	eq
 8003d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d74:	2500      	movne	r5, #0
 8003d76:	4293      	cmp	r3, r2
 8003d78:	bfc4      	itt	gt
 8003d7a:	1a9b      	subgt	r3, r3, r2
 8003d7c:	18ed      	addgt	r5, r5, r3
 8003d7e:	2600      	movs	r6, #0
 8003d80:	341a      	adds	r4, #26
 8003d82:	42b5      	cmp	r5, r6
 8003d84:	d11a      	bne.n	8003dbc <_printf_common+0xc8>
 8003d86:	2000      	movs	r0, #0
 8003d88:	e008      	b.n	8003d9c <_printf_common+0xa8>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4652      	mov	r2, sl
 8003d8e:	4641      	mov	r1, r8
 8003d90:	4638      	mov	r0, r7
 8003d92:	47c8      	blx	r9
 8003d94:	3001      	adds	r0, #1
 8003d96:	d103      	bne.n	8003da0 <_printf_common+0xac>
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da0:	3501      	adds	r5, #1
 8003da2:	e7c6      	b.n	8003d32 <_printf_common+0x3e>
 8003da4:	18e1      	adds	r1, r4, r3
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	2030      	movs	r0, #48	@ 0x30
 8003daa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dae:	4422      	add	r2, r4
 8003db0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003db4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003db8:	3302      	adds	r3, #2
 8003dba:	e7c7      	b.n	8003d4c <_printf_common+0x58>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	47c8      	blx	r9
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d0e6      	beq.n	8003d98 <_printf_common+0xa4>
 8003dca:	3601      	adds	r6, #1
 8003dcc:	e7d9      	b.n	8003d82 <_printf_common+0x8e>
	...

08003dd0 <_printf_i>:
 8003dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	7e0f      	ldrb	r7, [r1, #24]
 8003dd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003dd8:	2f78      	cmp	r7, #120	@ 0x78
 8003dda:	4691      	mov	r9, r2
 8003ddc:	4680      	mov	r8, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	469a      	mov	sl, r3
 8003de2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003de6:	d807      	bhi.n	8003df8 <_printf_i+0x28>
 8003de8:	2f62      	cmp	r7, #98	@ 0x62
 8003dea:	d80a      	bhi.n	8003e02 <_printf_i+0x32>
 8003dec:	2f00      	cmp	r7, #0
 8003dee:	f000 80d1 	beq.w	8003f94 <_printf_i+0x1c4>
 8003df2:	2f58      	cmp	r7, #88	@ 0x58
 8003df4:	f000 80b8 	beq.w	8003f68 <_printf_i+0x198>
 8003df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e00:	e03a      	b.n	8003e78 <_printf_i+0xa8>
 8003e02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e06:	2b15      	cmp	r3, #21
 8003e08:	d8f6      	bhi.n	8003df8 <_printf_i+0x28>
 8003e0a:	a101      	add	r1, pc, #4	@ (adr r1, 8003e10 <_printf_i+0x40>)
 8003e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e10:	08003e69 	.word	0x08003e69
 8003e14:	08003e7d 	.word	0x08003e7d
 8003e18:	08003df9 	.word	0x08003df9
 8003e1c:	08003df9 	.word	0x08003df9
 8003e20:	08003df9 	.word	0x08003df9
 8003e24:	08003df9 	.word	0x08003df9
 8003e28:	08003e7d 	.word	0x08003e7d
 8003e2c:	08003df9 	.word	0x08003df9
 8003e30:	08003df9 	.word	0x08003df9
 8003e34:	08003df9 	.word	0x08003df9
 8003e38:	08003df9 	.word	0x08003df9
 8003e3c:	08003f7b 	.word	0x08003f7b
 8003e40:	08003ea7 	.word	0x08003ea7
 8003e44:	08003f35 	.word	0x08003f35
 8003e48:	08003df9 	.word	0x08003df9
 8003e4c:	08003df9 	.word	0x08003df9
 8003e50:	08003f9d 	.word	0x08003f9d
 8003e54:	08003df9 	.word	0x08003df9
 8003e58:	08003ea7 	.word	0x08003ea7
 8003e5c:	08003df9 	.word	0x08003df9
 8003e60:	08003df9 	.word	0x08003df9
 8003e64:	08003f3d 	.word	0x08003f3d
 8003e68:	6833      	ldr	r3, [r6, #0]
 8003e6a:	1d1a      	adds	r2, r3, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6032      	str	r2, [r6, #0]
 8003e70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e09c      	b.n	8003fb6 <_printf_i+0x1e6>
 8003e7c:	6833      	ldr	r3, [r6, #0]
 8003e7e:	6820      	ldr	r0, [r4, #0]
 8003e80:	1d19      	adds	r1, r3, #4
 8003e82:	6031      	str	r1, [r6, #0]
 8003e84:	0606      	lsls	r6, r0, #24
 8003e86:	d501      	bpl.n	8003e8c <_printf_i+0xbc>
 8003e88:	681d      	ldr	r5, [r3, #0]
 8003e8a:	e003      	b.n	8003e94 <_printf_i+0xc4>
 8003e8c:	0645      	lsls	r5, r0, #25
 8003e8e:	d5fb      	bpl.n	8003e88 <_printf_i+0xb8>
 8003e90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e94:	2d00      	cmp	r5, #0
 8003e96:	da03      	bge.n	8003ea0 <_printf_i+0xd0>
 8003e98:	232d      	movs	r3, #45	@ 0x2d
 8003e9a:	426d      	negs	r5, r5
 8003e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ea0:	4858      	ldr	r0, [pc, #352]	@ (8004004 <_printf_i+0x234>)
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	e011      	b.n	8003eca <_printf_i+0xfa>
 8003ea6:	6821      	ldr	r1, [r4, #0]
 8003ea8:	6833      	ldr	r3, [r6, #0]
 8003eaa:	0608      	lsls	r0, r1, #24
 8003eac:	f853 5b04 	ldr.w	r5, [r3], #4
 8003eb0:	d402      	bmi.n	8003eb8 <_printf_i+0xe8>
 8003eb2:	0649      	lsls	r1, r1, #25
 8003eb4:	bf48      	it	mi
 8003eb6:	b2ad      	uxthmi	r5, r5
 8003eb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003eba:	4852      	ldr	r0, [pc, #328]	@ (8004004 <_printf_i+0x234>)
 8003ebc:	6033      	str	r3, [r6, #0]
 8003ebe:	bf14      	ite	ne
 8003ec0:	230a      	movne	r3, #10
 8003ec2:	2308      	moveq	r3, #8
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eca:	6866      	ldr	r6, [r4, #4]
 8003ecc:	60a6      	str	r6, [r4, #8]
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	db05      	blt.n	8003ede <_printf_i+0x10e>
 8003ed2:	6821      	ldr	r1, [r4, #0]
 8003ed4:	432e      	orrs	r6, r5
 8003ed6:	f021 0104 	bic.w	r1, r1, #4
 8003eda:	6021      	str	r1, [r4, #0]
 8003edc:	d04b      	beq.n	8003f76 <_printf_i+0x1a6>
 8003ede:	4616      	mov	r6, r2
 8003ee0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ee4:	fb03 5711 	mls	r7, r3, r1, r5
 8003ee8:	5dc7      	ldrb	r7, [r0, r7]
 8003eea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eee:	462f      	mov	r7, r5
 8003ef0:	42bb      	cmp	r3, r7
 8003ef2:	460d      	mov	r5, r1
 8003ef4:	d9f4      	bls.n	8003ee0 <_printf_i+0x110>
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d10b      	bne.n	8003f12 <_printf_i+0x142>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	07df      	lsls	r7, r3, #31
 8003efe:	d508      	bpl.n	8003f12 <_printf_i+0x142>
 8003f00:	6923      	ldr	r3, [r4, #16]
 8003f02:	6861      	ldr	r1, [r4, #4]
 8003f04:	4299      	cmp	r1, r3
 8003f06:	bfde      	ittt	le
 8003f08:	2330      	movle	r3, #48	@ 0x30
 8003f0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f0e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003f12:	1b92      	subs	r2, r2, r6
 8003f14:	6122      	str	r2, [r4, #16]
 8003f16:	f8cd a000 	str.w	sl, [sp]
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	aa03      	add	r2, sp, #12
 8003f1e:	4621      	mov	r1, r4
 8003f20:	4640      	mov	r0, r8
 8003f22:	f7ff fee7 	bl	8003cf4 <_printf_common>
 8003f26:	3001      	adds	r0, #1
 8003f28:	d14a      	bne.n	8003fc0 <_printf_i+0x1f0>
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f2e:	b004      	add	sp, #16
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	f043 0320 	orr.w	r3, r3, #32
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	4832      	ldr	r0, [pc, #200]	@ (8004008 <_printf_i+0x238>)
 8003f3e:	2778      	movs	r7, #120	@ 0x78
 8003f40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	6831      	ldr	r1, [r6, #0]
 8003f48:	061f      	lsls	r7, r3, #24
 8003f4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f4e:	d402      	bmi.n	8003f56 <_printf_i+0x186>
 8003f50:	065f      	lsls	r7, r3, #25
 8003f52:	bf48      	it	mi
 8003f54:	b2ad      	uxthmi	r5, r5
 8003f56:	6031      	str	r1, [r6, #0]
 8003f58:	07d9      	lsls	r1, r3, #31
 8003f5a:	bf44      	itt	mi
 8003f5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f60:	6023      	strmi	r3, [r4, #0]
 8003f62:	b11d      	cbz	r5, 8003f6c <_printf_i+0x19c>
 8003f64:	2310      	movs	r3, #16
 8003f66:	e7ad      	b.n	8003ec4 <_printf_i+0xf4>
 8003f68:	4826      	ldr	r0, [pc, #152]	@ (8004004 <_printf_i+0x234>)
 8003f6a:	e7e9      	b.n	8003f40 <_printf_i+0x170>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f023 0320 	bic.w	r3, r3, #32
 8003f72:	6023      	str	r3, [r4, #0]
 8003f74:	e7f6      	b.n	8003f64 <_printf_i+0x194>
 8003f76:	4616      	mov	r6, r2
 8003f78:	e7bd      	b.n	8003ef6 <_printf_i+0x126>
 8003f7a:	6833      	ldr	r3, [r6, #0]
 8003f7c:	6825      	ldr	r5, [r4, #0]
 8003f7e:	6961      	ldr	r1, [r4, #20]
 8003f80:	1d18      	adds	r0, r3, #4
 8003f82:	6030      	str	r0, [r6, #0]
 8003f84:	062e      	lsls	r6, r5, #24
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	d501      	bpl.n	8003f8e <_printf_i+0x1be>
 8003f8a:	6019      	str	r1, [r3, #0]
 8003f8c:	e002      	b.n	8003f94 <_printf_i+0x1c4>
 8003f8e:	0668      	lsls	r0, r5, #25
 8003f90:	d5fb      	bpl.n	8003f8a <_printf_i+0x1ba>
 8003f92:	8019      	strh	r1, [r3, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	6123      	str	r3, [r4, #16]
 8003f98:	4616      	mov	r6, r2
 8003f9a:	e7bc      	b.n	8003f16 <_printf_i+0x146>
 8003f9c:	6833      	ldr	r3, [r6, #0]
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	6032      	str	r2, [r6, #0]
 8003fa2:	681e      	ldr	r6, [r3, #0]
 8003fa4:	6862      	ldr	r2, [r4, #4]
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f7fc f931 	bl	8000210 <memchr>
 8003fae:	b108      	cbz	r0, 8003fb4 <_printf_i+0x1e4>
 8003fb0:	1b80      	subs	r0, r0, r6
 8003fb2:	6060      	str	r0, [r4, #4]
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	6123      	str	r3, [r4, #16]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fbe:	e7aa      	b.n	8003f16 <_printf_i+0x146>
 8003fc0:	6923      	ldr	r3, [r4, #16]
 8003fc2:	4632      	mov	r2, r6
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	47d0      	blx	sl
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d0ad      	beq.n	8003f2a <_printf_i+0x15a>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	079b      	lsls	r3, r3, #30
 8003fd2:	d413      	bmi.n	8003ffc <_printf_i+0x22c>
 8003fd4:	68e0      	ldr	r0, [r4, #12]
 8003fd6:	9b03      	ldr	r3, [sp, #12]
 8003fd8:	4298      	cmp	r0, r3
 8003fda:	bfb8      	it	lt
 8003fdc:	4618      	movlt	r0, r3
 8003fde:	e7a6      	b.n	8003f2e <_printf_i+0x15e>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	47d0      	blx	sl
 8003fea:	3001      	adds	r0, #1
 8003fec:	d09d      	beq.n	8003f2a <_printf_i+0x15a>
 8003fee:	3501      	adds	r5, #1
 8003ff0:	68e3      	ldr	r3, [r4, #12]
 8003ff2:	9903      	ldr	r1, [sp, #12]
 8003ff4:	1a5b      	subs	r3, r3, r1
 8003ff6:	42ab      	cmp	r3, r5
 8003ff8:	dcf2      	bgt.n	8003fe0 <_printf_i+0x210>
 8003ffa:	e7eb      	b.n	8003fd4 <_printf_i+0x204>
 8003ffc:	2500      	movs	r5, #0
 8003ffe:	f104 0619 	add.w	r6, r4, #25
 8004002:	e7f5      	b.n	8003ff0 <_printf_i+0x220>
 8004004:	080044b5 	.word	0x080044b5
 8004008:	080044c6 	.word	0x080044c6

0800400c <__sflush_r>:
 800400c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004014:	0716      	lsls	r6, r2, #28
 8004016:	4605      	mov	r5, r0
 8004018:	460c      	mov	r4, r1
 800401a:	d454      	bmi.n	80040c6 <__sflush_r+0xba>
 800401c:	684b      	ldr	r3, [r1, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	dc02      	bgt.n	8004028 <__sflush_r+0x1c>
 8004022:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	dd48      	ble.n	80040ba <__sflush_r+0xae>
 8004028:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800402a:	2e00      	cmp	r6, #0
 800402c:	d045      	beq.n	80040ba <__sflush_r+0xae>
 800402e:	2300      	movs	r3, #0
 8004030:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004034:	682f      	ldr	r7, [r5, #0]
 8004036:	6a21      	ldr	r1, [r4, #32]
 8004038:	602b      	str	r3, [r5, #0]
 800403a:	d030      	beq.n	800409e <__sflush_r+0x92>
 800403c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	0759      	lsls	r1, r3, #29
 8004042:	d505      	bpl.n	8004050 <__sflush_r+0x44>
 8004044:	6863      	ldr	r3, [r4, #4]
 8004046:	1ad2      	subs	r2, r2, r3
 8004048:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800404a:	b10b      	cbz	r3, 8004050 <__sflush_r+0x44>
 800404c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800404e:	1ad2      	subs	r2, r2, r3
 8004050:	2300      	movs	r3, #0
 8004052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004054:	6a21      	ldr	r1, [r4, #32]
 8004056:	4628      	mov	r0, r5
 8004058:	47b0      	blx	r6
 800405a:	1c43      	adds	r3, r0, #1
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	d106      	bne.n	800406e <__sflush_r+0x62>
 8004060:	6829      	ldr	r1, [r5, #0]
 8004062:	291d      	cmp	r1, #29
 8004064:	d82b      	bhi.n	80040be <__sflush_r+0xb2>
 8004066:	4a2a      	ldr	r2, [pc, #168]	@ (8004110 <__sflush_r+0x104>)
 8004068:	40ca      	lsrs	r2, r1
 800406a:	07d6      	lsls	r6, r2, #31
 800406c:	d527      	bpl.n	80040be <__sflush_r+0xb2>
 800406e:	2200      	movs	r2, #0
 8004070:	6062      	str	r2, [r4, #4]
 8004072:	04d9      	lsls	r1, r3, #19
 8004074:	6922      	ldr	r2, [r4, #16]
 8004076:	6022      	str	r2, [r4, #0]
 8004078:	d504      	bpl.n	8004084 <__sflush_r+0x78>
 800407a:	1c42      	adds	r2, r0, #1
 800407c:	d101      	bne.n	8004082 <__sflush_r+0x76>
 800407e:	682b      	ldr	r3, [r5, #0]
 8004080:	b903      	cbnz	r3, 8004084 <__sflush_r+0x78>
 8004082:	6560      	str	r0, [r4, #84]	@ 0x54
 8004084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004086:	602f      	str	r7, [r5, #0]
 8004088:	b1b9      	cbz	r1, 80040ba <__sflush_r+0xae>
 800408a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800408e:	4299      	cmp	r1, r3
 8004090:	d002      	beq.n	8004098 <__sflush_r+0x8c>
 8004092:	4628      	mov	r0, r5
 8004094:	f7ff fbf4 	bl	8003880 <_free_r>
 8004098:	2300      	movs	r3, #0
 800409a:	6363      	str	r3, [r4, #52]	@ 0x34
 800409c:	e00d      	b.n	80040ba <__sflush_r+0xae>
 800409e:	2301      	movs	r3, #1
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b0      	blx	r6
 80040a4:	4602      	mov	r2, r0
 80040a6:	1c50      	adds	r0, r2, #1
 80040a8:	d1c9      	bne.n	800403e <__sflush_r+0x32>
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0c6      	beq.n	800403e <__sflush_r+0x32>
 80040b0:	2b1d      	cmp	r3, #29
 80040b2:	d001      	beq.n	80040b8 <__sflush_r+0xac>
 80040b4:	2b16      	cmp	r3, #22
 80040b6:	d11e      	bne.n	80040f6 <__sflush_r+0xea>
 80040b8:	602f      	str	r7, [r5, #0]
 80040ba:	2000      	movs	r0, #0
 80040bc:	e022      	b.n	8004104 <__sflush_r+0xf8>
 80040be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	e01b      	b.n	80040fe <__sflush_r+0xf2>
 80040c6:	690f      	ldr	r7, [r1, #16]
 80040c8:	2f00      	cmp	r7, #0
 80040ca:	d0f6      	beq.n	80040ba <__sflush_r+0xae>
 80040cc:	0793      	lsls	r3, r2, #30
 80040ce:	680e      	ldr	r6, [r1, #0]
 80040d0:	bf08      	it	eq
 80040d2:	694b      	ldreq	r3, [r1, #20]
 80040d4:	600f      	str	r7, [r1, #0]
 80040d6:	bf18      	it	ne
 80040d8:	2300      	movne	r3, #0
 80040da:	eba6 0807 	sub.w	r8, r6, r7
 80040de:	608b      	str	r3, [r1, #8]
 80040e0:	f1b8 0f00 	cmp.w	r8, #0
 80040e4:	dde9      	ble.n	80040ba <__sflush_r+0xae>
 80040e6:	6a21      	ldr	r1, [r4, #32]
 80040e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80040ea:	4643      	mov	r3, r8
 80040ec:	463a      	mov	r2, r7
 80040ee:	4628      	mov	r0, r5
 80040f0:	47b0      	blx	r6
 80040f2:	2800      	cmp	r0, #0
 80040f4:	dc08      	bgt.n	8004108 <__sflush_r+0xfc>
 80040f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004108:	4407      	add	r7, r0
 800410a:	eba8 0800 	sub.w	r8, r8, r0
 800410e:	e7e7      	b.n	80040e0 <__sflush_r+0xd4>
 8004110:	20400001 	.word	0x20400001

08004114 <_fflush_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	690b      	ldr	r3, [r1, #16]
 8004118:	4605      	mov	r5, r0
 800411a:	460c      	mov	r4, r1
 800411c:	b913      	cbnz	r3, 8004124 <_fflush_r+0x10>
 800411e:	2500      	movs	r5, #0
 8004120:	4628      	mov	r0, r5
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	b118      	cbz	r0, 800412e <_fflush_r+0x1a>
 8004126:	6a03      	ldr	r3, [r0, #32]
 8004128:	b90b      	cbnz	r3, 800412e <_fflush_r+0x1a>
 800412a:	f7ff faa1 	bl	8003670 <__sinit>
 800412e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f3      	beq.n	800411e <_fflush_r+0xa>
 8004136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004138:	07d0      	lsls	r0, r2, #31
 800413a:	d404      	bmi.n	8004146 <_fflush_r+0x32>
 800413c:	0599      	lsls	r1, r3, #22
 800413e:	d402      	bmi.n	8004146 <_fflush_r+0x32>
 8004140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004142:	f7ff fb9a 	bl	800387a <__retarget_lock_acquire_recursive>
 8004146:	4628      	mov	r0, r5
 8004148:	4621      	mov	r1, r4
 800414a:	f7ff ff5f 	bl	800400c <__sflush_r>
 800414e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004150:	07da      	lsls	r2, r3, #31
 8004152:	4605      	mov	r5, r0
 8004154:	d4e4      	bmi.n	8004120 <_fflush_r+0xc>
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	059b      	lsls	r3, r3, #22
 800415a:	d4e1      	bmi.n	8004120 <_fflush_r+0xc>
 800415c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800415e:	f7ff fb8d 	bl	800387c <__retarget_lock_release_recursive>
 8004162:	e7dd      	b.n	8004120 <_fflush_r+0xc>

08004164 <__swbuf_r>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	460e      	mov	r6, r1
 8004168:	4614      	mov	r4, r2
 800416a:	4605      	mov	r5, r0
 800416c:	b118      	cbz	r0, 8004176 <__swbuf_r+0x12>
 800416e:	6a03      	ldr	r3, [r0, #32]
 8004170:	b90b      	cbnz	r3, 8004176 <__swbuf_r+0x12>
 8004172:	f7ff fa7d 	bl	8003670 <__sinit>
 8004176:	69a3      	ldr	r3, [r4, #24]
 8004178:	60a3      	str	r3, [r4, #8]
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	071a      	lsls	r2, r3, #28
 800417e:	d501      	bpl.n	8004184 <__swbuf_r+0x20>
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	b943      	cbnz	r3, 8004196 <__swbuf_r+0x32>
 8004184:	4621      	mov	r1, r4
 8004186:	4628      	mov	r0, r5
 8004188:	f000 f82a 	bl	80041e0 <__swsetup_r>
 800418c:	b118      	cbz	r0, 8004196 <__swbuf_r+0x32>
 800418e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004192:	4638      	mov	r0, r7
 8004194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	6922      	ldr	r2, [r4, #16]
 800419a:	1a98      	subs	r0, r3, r2
 800419c:	6963      	ldr	r3, [r4, #20]
 800419e:	b2f6      	uxtb	r6, r6
 80041a0:	4283      	cmp	r3, r0
 80041a2:	4637      	mov	r7, r6
 80041a4:	dc05      	bgt.n	80041b2 <__swbuf_r+0x4e>
 80041a6:	4621      	mov	r1, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	f7ff ffb3 	bl	8004114 <_fflush_r>
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d1ed      	bne.n	800418e <__swbuf_r+0x2a>
 80041b2:	68a3      	ldr	r3, [r4, #8]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	60a3      	str	r3, [r4, #8]
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	6022      	str	r2, [r4, #0]
 80041be:	701e      	strb	r6, [r3, #0]
 80041c0:	6962      	ldr	r2, [r4, #20]
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d004      	beq.n	80041d2 <__swbuf_r+0x6e>
 80041c8:	89a3      	ldrh	r3, [r4, #12]
 80041ca:	07db      	lsls	r3, r3, #31
 80041cc:	d5e1      	bpl.n	8004192 <__swbuf_r+0x2e>
 80041ce:	2e0a      	cmp	r6, #10
 80041d0:	d1df      	bne.n	8004192 <__swbuf_r+0x2e>
 80041d2:	4621      	mov	r1, r4
 80041d4:	4628      	mov	r0, r5
 80041d6:	f7ff ff9d 	bl	8004114 <_fflush_r>
 80041da:	2800      	cmp	r0, #0
 80041dc:	d0d9      	beq.n	8004192 <__swbuf_r+0x2e>
 80041de:	e7d6      	b.n	800418e <__swbuf_r+0x2a>

080041e0 <__swsetup_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4b29      	ldr	r3, [pc, #164]	@ (8004288 <__swsetup_r+0xa8>)
 80041e4:	4605      	mov	r5, r0
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	460c      	mov	r4, r1
 80041ea:	b118      	cbz	r0, 80041f4 <__swsetup_r+0x14>
 80041ec:	6a03      	ldr	r3, [r0, #32]
 80041ee:	b90b      	cbnz	r3, 80041f4 <__swsetup_r+0x14>
 80041f0:	f7ff fa3e 	bl	8003670 <__sinit>
 80041f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041f8:	0719      	lsls	r1, r3, #28
 80041fa:	d422      	bmi.n	8004242 <__swsetup_r+0x62>
 80041fc:	06da      	lsls	r2, r3, #27
 80041fe:	d407      	bmi.n	8004210 <__swsetup_r+0x30>
 8004200:	2209      	movs	r2, #9
 8004202:	602a      	str	r2, [r5, #0]
 8004204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004208:	81a3      	strh	r3, [r4, #12]
 800420a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800420e:	e033      	b.n	8004278 <__swsetup_r+0x98>
 8004210:	0758      	lsls	r0, r3, #29
 8004212:	d512      	bpl.n	800423a <__swsetup_r+0x5a>
 8004214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004216:	b141      	cbz	r1, 800422a <__swsetup_r+0x4a>
 8004218:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800421c:	4299      	cmp	r1, r3
 800421e:	d002      	beq.n	8004226 <__swsetup_r+0x46>
 8004220:	4628      	mov	r0, r5
 8004222:	f7ff fb2d 	bl	8003880 <_free_r>
 8004226:	2300      	movs	r3, #0
 8004228:	6363      	str	r3, [r4, #52]	@ 0x34
 800422a:	89a3      	ldrh	r3, [r4, #12]
 800422c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004230:	81a3      	strh	r3, [r4, #12]
 8004232:	2300      	movs	r3, #0
 8004234:	6063      	str	r3, [r4, #4]
 8004236:	6923      	ldr	r3, [r4, #16]
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	f043 0308 	orr.w	r3, r3, #8
 8004240:	81a3      	strh	r3, [r4, #12]
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	b94b      	cbnz	r3, 800425a <__swsetup_r+0x7a>
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800424c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004250:	d003      	beq.n	800425a <__swsetup_r+0x7a>
 8004252:	4621      	mov	r1, r4
 8004254:	4628      	mov	r0, r5
 8004256:	f000 f84f 	bl	80042f8 <__smakebuf_r>
 800425a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800425e:	f013 0201 	ands.w	r2, r3, #1
 8004262:	d00a      	beq.n	800427a <__swsetup_r+0x9a>
 8004264:	2200      	movs	r2, #0
 8004266:	60a2      	str	r2, [r4, #8]
 8004268:	6962      	ldr	r2, [r4, #20]
 800426a:	4252      	negs	r2, r2
 800426c:	61a2      	str	r2, [r4, #24]
 800426e:	6922      	ldr	r2, [r4, #16]
 8004270:	b942      	cbnz	r2, 8004284 <__swsetup_r+0xa4>
 8004272:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004276:	d1c5      	bne.n	8004204 <__swsetup_r+0x24>
 8004278:	bd38      	pop	{r3, r4, r5, pc}
 800427a:	0799      	lsls	r1, r3, #30
 800427c:	bf58      	it	pl
 800427e:	6962      	ldrpl	r2, [r4, #20]
 8004280:	60a2      	str	r2, [r4, #8]
 8004282:	e7f4      	b.n	800426e <__swsetup_r+0x8e>
 8004284:	2000      	movs	r0, #0
 8004286:	e7f7      	b.n	8004278 <__swsetup_r+0x98>
 8004288:	20000018 	.word	0x20000018

0800428c <_sbrk_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d06      	ldr	r5, [pc, #24]	@ (80042a8 <_sbrk_r+0x1c>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fc fe82 	bl	8000fa0 <_sbrk>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_sbrk_r+0x1a>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_sbrk_r+0x1a>
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	20000268 	.word	0x20000268

080042ac <__swhatbuf_r>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	460c      	mov	r4, r1
 80042b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b4:	2900      	cmp	r1, #0
 80042b6:	b096      	sub	sp, #88	@ 0x58
 80042b8:	4615      	mov	r5, r2
 80042ba:	461e      	mov	r6, r3
 80042bc:	da0d      	bge.n	80042da <__swhatbuf_r+0x2e>
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	bf14      	ite	ne
 80042ca:	2340      	movne	r3, #64	@ 0x40
 80042cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80042d0:	2000      	movs	r0, #0
 80042d2:	6031      	str	r1, [r6, #0]
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	b016      	add	sp, #88	@ 0x58
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
 80042da:	466a      	mov	r2, sp
 80042dc:	f000 f848 	bl	8004370 <_fstat_r>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	dbec      	blt.n	80042be <__swhatbuf_r+0x12>
 80042e4:	9901      	ldr	r1, [sp, #4]
 80042e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80042ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80042ee:	4259      	negs	r1, r3
 80042f0:	4159      	adcs	r1, r3
 80042f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042f6:	e7eb      	b.n	80042d0 <__swhatbuf_r+0x24>

080042f8 <__smakebuf_r>:
 80042f8:	898b      	ldrh	r3, [r1, #12]
 80042fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042fc:	079d      	lsls	r5, r3, #30
 80042fe:	4606      	mov	r6, r0
 8004300:	460c      	mov	r4, r1
 8004302:	d507      	bpl.n	8004314 <__smakebuf_r+0x1c>
 8004304:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	6123      	str	r3, [r4, #16]
 800430c:	2301      	movs	r3, #1
 800430e:	6163      	str	r3, [r4, #20]
 8004310:	b003      	add	sp, #12
 8004312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004314:	ab01      	add	r3, sp, #4
 8004316:	466a      	mov	r2, sp
 8004318:	f7ff ffc8 	bl	80042ac <__swhatbuf_r>
 800431c:	9f00      	ldr	r7, [sp, #0]
 800431e:	4605      	mov	r5, r0
 8004320:	4639      	mov	r1, r7
 8004322:	4630      	mov	r0, r6
 8004324:	f7ff fb18 	bl	8003958 <_malloc_r>
 8004328:	b948      	cbnz	r0, 800433e <__smakebuf_r+0x46>
 800432a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800432e:	059a      	lsls	r2, r3, #22
 8004330:	d4ee      	bmi.n	8004310 <__smakebuf_r+0x18>
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	f043 0302 	orr.w	r3, r3, #2
 800433a:	81a3      	strh	r3, [r4, #12]
 800433c:	e7e2      	b.n	8004304 <__smakebuf_r+0xc>
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	6020      	str	r0, [r4, #0]
 8004342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	9b01      	ldr	r3, [sp, #4]
 800434a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800434e:	b15b      	cbz	r3, 8004368 <__smakebuf_r+0x70>
 8004350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004354:	4630      	mov	r0, r6
 8004356:	f000 f81d 	bl	8004394 <_isatty_r>
 800435a:	b128      	cbz	r0, 8004368 <__smakebuf_r+0x70>
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	81a3      	strh	r3, [r4, #12]
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	431d      	orrs	r5, r3
 800436c:	81a5      	strh	r5, [r4, #12]
 800436e:	e7cf      	b.n	8004310 <__smakebuf_r+0x18>

08004370 <_fstat_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4d07      	ldr	r5, [pc, #28]	@ (8004390 <_fstat_r+0x20>)
 8004374:	2300      	movs	r3, #0
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	f7fc fde7 	bl	8000f50 <_fstat>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	d102      	bne.n	800438c <_fstat_r+0x1c>
 8004386:	682b      	ldr	r3, [r5, #0]
 8004388:	b103      	cbz	r3, 800438c <_fstat_r+0x1c>
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	bd38      	pop	{r3, r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	20000268 	.word	0x20000268

08004394 <_isatty_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d06      	ldr	r5, [pc, #24]	@ (80043b0 <_isatty_r+0x1c>)
 8004398:	2300      	movs	r3, #0
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f7fc fde6 	bl	8000f70 <_isatty>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_isatty_r+0x1a>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_isatty_r+0x1a>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000268 	.word	0x20000268

080043b4 <_init>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr

080043c0 <_fini>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr
