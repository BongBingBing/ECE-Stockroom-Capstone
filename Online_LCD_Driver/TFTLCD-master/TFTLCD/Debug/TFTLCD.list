
TFTLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002524  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003b62c  080026bc  080026bc  000036bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803dce8  0803dce8  0003ece8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803dcf0  0803dcf0  0003ecf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803dcf4  0803dcf4  0003ecf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  20000000  0803dcf8  0003f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000d8  20000040  0803dd38  0003f040  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000118  0803dd38  0003f118  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003f040  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ac45  00000000  00000000  0003f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ad9  00000000  00000000  00049cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00002e6e  00000000  00000000  0004b78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000006e0  00000000  00000000  0004e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000005b0  00000000  00000000  0004ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016274  00000000  00000000  0004f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b241  00000000  00000000  00065504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000826a8  00000000  00000000  00070745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000f2ded  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000120c  00000000  00000000  000f2e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000009d  00000000  00000000  000f403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080026a4 	.word	0x080026a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	080026a4 	.word	0x080026a4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Display_Round_Icon_40x40>:
#include "ILI9341_Driver.h"
#include "icons_included.h"
#include "ironman.h"

void Display_Round_Icon_40x40(const unsigned int icon[], unsigned int x0, unsigned int y0, unsigned int r)
{
 80004c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004cc:	b083      	sub	sp, #12
 80004ce:	4680      	mov	r8, r0
 80004d0:	460f      	mov	r7, r1
 80004d2:	4691      	mov	r9, r2
 80004d4:	461a      	mov	r2, r3
	uint64_t k = 0;

    ILI9341_Draw_Circle(x0, y0, r, BLUE, 1);
 80004d6:	2301      	movs	r3, #1
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	231f      	movs	r3, #31
 80004dc:	4649      	mov	r1, r9
 80004de:	4638      	mov	r0, r7
 80004e0:	f001 fb1c 	bl	8001b1c <ILI9341_Draw_Circle>

	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 80004e4:	f1a9 0613 	sub.w	r6, r9, #19
	uint64_t k = 0;
 80004e8:	2400      	movs	r4, #0
	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 80004ea:	e00c      	b.n	8000506 <Display_Round_Icon_40x40+0x3e>
	{
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
		{
				ILI9341_Draw_Pixel(i, j, icon[k]);
 80004ec:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 80004f0:	4631      	mov	r1, r6
 80004f2:	4628      	mov	r0, r5
 80004f4:	f001 fa6a 	bl	80019cc <ILI9341_Draw_Pixel>
				k++;
 80004f8:	3401      	adds	r4, #1
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
 80004fa:	3501      	adds	r5, #1
 80004fc:	f107 0315 	add.w	r3, r7, #21
 8000500:	42ab      	cmp	r3, r5
 8000502:	d8f3      	bhi.n	80004ec <Display_Round_Icon_40x40+0x24>
	for(uint32_t j = y0 - 19; j < y0 + 21; j++)
 8000504:	3601      	adds	r6, #1
 8000506:	f109 0315 	add.w	r3, r9, #21
 800050a:	42b3      	cmp	r3, r6
 800050c:	d902      	bls.n	8000514 <Display_Round_Icon_40x40+0x4c>
		for(uint32_t i = x0 -19; i < x0 + 21; i++)
 800050e:	f1a7 0513 	sub.w	r5, r7, #19
 8000512:	e7f3      	b.n	80004fc <Display_Round_Icon_40x40+0x34>
		}
	}
}
 8000514:	b003      	add	sp, #12
 8000516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800051a <Display_Square_Icon_40x40>:

void Display_Square_Icon_40x40(const unsigned int icon[], unsigned int x0, unsigned int y0)
{
 800051a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800051e:	4680      	mov	r8, r0
 8000520:	460f      	mov	r7, r1
 8000522:	4691      	mov	r9, r2
	uint64_t k = 0;

	for(uint32_t j = y0; j < y0 + 40; j++)
 8000524:	4616      	mov	r6, r2
	uint64_t k = 0;
 8000526:	2400      	movs	r4, #0
	for(uint32_t j = y0; j < y0 + 40; j++)
 8000528:	e00c      	b.n	8000544 <Display_Square_Icon_40x40+0x2a>
	{
		for(uint32_t i = x0; i < x0 + 40; i++)
		{
				ILI9341_Draw_Pixel(i, j, icon[k]);
 800052a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800052e:	4631      	mov	r1, r6
 8000530:	4628      	mov	r0, r5
 8000532:	f001 fa4b 	bl	80019cc <ILI9341_Draw_Pixel>
				k++;
 8000536:	3401      	adds	r4, #1
		for(uint32_t i = x0; i < x0 + 40; i++)
 8000538:	3501      	adds	r5, #1
 800053a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800053e:	42ab      	cmp	r3, r5
 8000540:	d8f3      	bhi.n	800052a <Display_Square_Icon_40x40+0x10>
	for(uint32_t j = y0; j < y0 + 40; j++)
 8000542:	3601      	adds	r6, #1
 8000544:	f109 0328 	add.w	r3, r9, #40	@ 0x28
 8000548:	42b3      	cmp	r3, r6
 800054a:	d901      	bls.n	8000550 <Display_Square_Icon_40x40+0x36>
		for(uint32_t i = x0; i < x0 + 40; i++)
 800054c:	463d      	mov	r5, r7
 800054e:	e7f4      	b.n	800053a <Display_Square_Icon_40x40+0x20>
		}
	}
}
 8000550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000554 <Display_Menu>:

void Display_Menu()
{
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	b082      	sub	sp, #8

	ILI9341_Set_Rotation(3);
 8000558:	2003      	movs	r0, #3
 800055a:	f001 f929 	bl	80017b0 <ILI9341_Set_Rotation>

	/* Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 800055e:	2000      	movs	r0, #0
 8000560:	f001 fa1e 	bl	80019a0 <ILI9341_Fill_Screen>
	HAL_Delay(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000568:	f000 f930 	bl	80007cc <HAL_Delay>

	/* Counting through all the bytes of those icons */
	uint64_t k = 0;
	/* Draw border for the menu */
    ILI9341_Draw_Empty_Rectangle(YELLOW, 10, 30, 310, 230);
 800056c:	23e6      	movs	r3, #230	@ 0xe6
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8000574:	221e      	movs	r2, #30
 8000576:	210a      	movs	r1, #10
 8000578:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800057c:	f001 faa6 	bl	8001acc <ILI9341_Draw_Empty_Rectangle>

    /* Write something */
	ILI9341_Draw_String(10,10,WHITE,BLACK,"Welcome!",2);
 8000580:	2302      	movs	r3, #2
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	4b25      	ldr	r3, [pc, #148]	@ (800061c <Display_Menu+0xc8>)
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800058e:	210a      	movs	r1, #10
 8000590:	4608      	mov	r0, r1
 8000592:	f001 fc1f 	bl	8001dd4 <ILI9341_Draw_String>

	/* Battery Icon in the top right corner */
    for(uint32_t j = 10; j < 20; j++) {
 8000596:	260a      	movs	r6, #10
	uint64_t k = 0;
 8000598:	2400      	movs	r4, #0
    for(uint32_t j = 10; j < 20; j++) {
 800059a:	e00c      	b.n	80005b6 <Display_Menu+0x62>
    	for(uint32_t i = 280; i < 300; i++) {
				ILI9341_Draw_Pixel(i, j, battery_icon[k]);
 800059c:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <Display_Menu+0xcc>)
 800059e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80005a2:	4631      	mov	r1, r6
 80005a4:	4628      	mov	r0, r5
 80005a6:	f001 fa11 	bl	80019cc <ILI9341_Draw_Pixel>
				k++;
 80005aa:	3401      	adds	r4, #1
    	for(uint32_t i = 280; i < 300; i++) {
 80005ac:	3501      	adds	r5, #1
 80005ae:	f5b5 7f96 	cmp.w	r5, #300	@ 0x12c
 80005b2:	d3f3      	bcc.n	800059c <Display_Menu+0x48>
    for(uint32_t j = 10; j < 20; j++) {
 80005b4:	3601      	adds	r6, #1
 80005b6:	2e13      	cmp	r6, #19
 80005b8:	d802      	bhi.n	80005c0 <Display_Menu+0x6c>
    	for(uint32_t i = 280; i < 300; i++) {
 80005ba:	f44f 758c 	mov.w	r5, #280	@ 0x118
 80005be:	e7f6      	b.n	80005ae <Display_Menu+0x5a>
	}

    /* =================================List of Icons================================= */

    /* ===========================Icon No.1=========================== */
    Display_Round_Icon_40x40(home_icon_40x40, 59, 79, 40);
 80005c0:	2328      	movs	r3, #40	@ 0x28
 80005c2:	224f      	movs	r2, #79	@ 0x4f
 80005c4:	213b      	movs	r1, #59	@ 0x3b
 80005c6:	4817      	ldr	r0, [pc, #92]	@ (8000624 <Display_Menu+0xd0>)
 80005c8:	f7ff ff7e 	bl	80004c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.2=========================== */
    Display_Round_Icon_40x40(music_icon_40x40, 159, 79, 40);
 80005cc:	2328      	movs	r3, #40	@ 0x28
 80005ce:	224f      	movs	r2, #79	@ 0x4f
 80005d0:	219f      	movs	r1, #159	@ 0x9f
 80005d2:	4815      	ldr	r0, [pc, #84]	@ (8000628 <Display_Menu+0xd4>)
 80005d4:	f7ff ff78 	bl	80004c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.3=========================== */
    Display_Round_Icon_40x40(note_icon_40x40, 259, 79, 40);
 80005d8:	2328      	movs	r3, #40	@ 0x28
 80005da:	224f      	movs	r2, #79	@ 0x4f
 80005dc:	f240 1103 	movw	r1, #259	@ 0x103
 80005e0:	4812      	ldr	r0, [pc, #72]	@ (800062c <Display_Menu+0xd8>)
 80005e2:	f7ff ff71 	bl	80004c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.4=========================== */
    Display_Round_Icon_40x40(game_icon_40x40, 59, 179, 40);
 80005e6:	2328      	movs	r3, #40	@ 0x28
 80005e8:	22b3      	movs	r2, #179	@ 0xb3
 80005ea:	213b      	movs	r1, #59	@ 0x3b
 80005ec:	4810      	ldr	r0, [pc, #64]	@ (8000630 <Display_Menu+0xdc>)
 80005ee:	f7ff ff6b 	bl	80004c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.5=========================== */
    Display_Round_Icon_40x40(facebook_icon_40x40, 159, 179, 40);
 80005f2:	2328      	movs	r3, #40	@ 0x28
 80005f4:	22b3      	movs	r2, #179	@ 0xb3
 80005f6:	219f      	movs	r1, #159	@ 0x9f
 80005f8:	480e      	ldr	r0, [pc, #56]	@ (8000634 <Display_Menu+0xe0>)
 80005fa:	f7ff ff65 	bl	80004c8 <Display_Round_Icon_40x40>

    /* ===========================Icon No.6=========================== */
    Display_Round_Icon_40x40(image_icon_40x40, 259, 179, 40);
 80005fe:	2328      	movs	r3, #40	@ 0x28
 8000600:	22b3      	movs	r2, #179	@ 0xb3
 8000602:	f240 1103 	movw	r1, #259	@ 0x103
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <Display_Menu+0xe4>)
 8000608:	f7ff ff5e 	bl	80004c8 <Display_Round_Icon_40x40>

	CS_OFF;
 800060c:	2201      	movs	r2, #1
 800060e:	2104      	movs	r1, #4
 8000610:	480a      	ldr	r0, [pc, #40]	@ (800063c <Display_Menu+0xe8>)
 8000612:	f000 fa4c 	bl	8000aae <HAL_GPIO_WritePin>
}
 8000616:	b002      	add	sp, #8
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	bf00      	nop
 800061c:	0803dc3c 	.word	0x0803dc3c
 8000620:	080026bc 	.word	0x080026bc
 8000624:	0803821c 	.word	0x0803821c
 8000628:	080362dc 	.word	0x080362dc
 800062c:	080349dc 	.word	0x080349dc
 8000630:	080330dc 	.word	0x080330dc
 8000634:	080317dc 	.word	0x080317dc
 8000638:	0802fedc 	.word	0x0802fedc
 800063c:	40020000 	.word	0x40020000

08000640 <Display_Text>:
		}
	}
}

void Display_Text()
{
 8000640:	b510      	push	{r4, lr}
 8000642:	b082      	sub	sp, #8
	/* Refresh the screen to black background */
	ILI9341_Fill_Screen(BLACK);
 8000644:	2000      	movs	r0, #0
 8000646:	f001 f9ab 	bl	80019a0 <ILI9341_Fill_Screen>
	HAL_Delay(500);
 800064a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800064e:	f000 f8bd 	bl	80007cc <HAL_Delay>

	/* Draw border for the menu */
    ILI9341_Draw_Empty_Rectangle(YELLOW, 10, 30, 310, 230);
 8000652:	23e6      	movs	r3, #230	@ 0xe6
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800065a:	221e      	movs	r2, #30
 800065c:	210a      	movs	r1, #10
 800065e:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000662:	f001 fa33 	bl	8001acc <ILI9341_Draw_Empty_Rectangle>

    /* Write something */
	ILI9341_Draw_String(20, 40, WHITE, BLACK, "Hello User!", 2);
 8000666:	2402      	movs	r4, #2
 8000668:	9401      	str	r4, [sp, #4]
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <Display_Text+0x88>)
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000674:	2128      	movs	r1, #40	@ 0x28
 8000676:	2014      	movs	r0, #20
 8000678:	f001 fbac 	bl	8001dd4 <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 60, WHITE, BLACK, "This is the test for TFT LCD!", 2);
 800067c:	9401      	str	r4, [sp, #4]
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <Display_Text+0x8c>)
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000688:	213c      	movs	r1, #60	@ 0x3c
 800068a:	2014      	movs	r0, #20
 800068c:	f001 fba2 	bl	8001dd4 <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 80, WHITE, BLACK, "For more information, please visit:", 2);
 8000690:	9401      	str	r4, [sp, #4]
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <Display_Text+0x90>)
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800069c:	2150      	movs	r1, #80	@ 0x50
 800069e:	2014      	movs	r0, #20
 80006a0:	f001 fb98 	bl	8001dd4 <ILI9341_Draw_String>

	ILI9341_Draw_String(20, 100, WHITE, BLACK, "    aweirdolife.wordpress.com    ", 2);
 80006a4:	9401      	str	r4, [sp, #4]
 80006a6:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <Display_Text+0x94>)
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2300      	movs	r3, #0
 80006ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006b0:	2164      	movs	r1, #100	@ 0x64
 80006b2:	2014      	movs	r0, #20
 80006b4:	f001 fb8e 	bl	8001dd4 <ILI9341_Draw_String>

	Display_Square_Icon_40x40(back_icon_40x40, 0, 200);
 80006b8:	22c8      	movs	r2, #200	@ 0xc8
 80006ba:	2100      	movs	r1, #0
 80006bc:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <Display_Text+0x98>)
 80006be:	f7ff ff2c 	bl	800051a <Display_Square_Icon_40x40>
}
 80006c2:	b002      	add	sp, #8
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	bf00      	nop
 80006c8:	0803dc48 	.word	0x0803dc48
 80006cc:	0803dc54 	.word	0x0803dc54
 80006d0:	0803dc74 	.word	0x0803dc74
 80006d4:	0803dc98 	.word	0x0803dc98
 80006d8:	0802e5dc 	.word	0x0802e5dc

080006dc <Display_Color_Picture>:

void Display_Color_Picture()
{
 80006dc:	b538      	push	{r3, r4, r5, lr}
	for (uint16_t i = 0; i < 280; i++)
 80006de:	2500      	movs	r5, #0
 80006e0:	e014      	b.n	800070c <Display_Color_Picture+0x30>
	{
		for (uint16_t j = 0; j < 320; j++)
		{
			ILI9341_Draw_Double_Pixel(j, i, ironman[(640 * i) + j * 2], ironman[(640 * i) + j * 2 + 1]);
 80006e2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80006e6:	019a      	lsls	r2, r3, #6
 80006e8:	4422      	add	r2, r4
 80006ea:	0053      	lsls	r3, r2, #1
 80006ec:	490d      	ldr	r1, [pc, #52]	@ (8000724 <Display_Color_Picture+0x48>)
 80006ee:	3301      	adds	r3, #1
 80006f0:	5ccb      	ldrb	r3, [r1, r3]
 80006f2:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 80006f6:	4629      	mov	r1, r5
 80006f8:	4620      	mov	r0, r4
 80006fa:	f001 fbbb 	bl	8001e74 <ILI9341_Draw_Double_Pixel>
		for (uint16_t j = 0; j < 320; j++)
 80006fe:	3401      	adds	r4, #1
 8000700:	b2a4      	uxth	r4, r4
 8000702:	f5b4 7fa0 	cmp.w	r4, #320	@ 0x140
 8000706:	d3ec      	bcc.n	80006e2 <Display_Color_Picture+0x6>
	for (uint16_t i = 0; i < 280; i++)
 8000708:	3501      	adds	r5, #1
 800070a:	b2ad      	uxth	r5, r5
 800070c:	f5b5 7f8c 	cmp.w	r5, #280	@ 0x118
 8000710:	d201      	bcs.n	8000716 <Display_Color_Picture+0x3a>
		for (uint16_t j = 0; j < 320; j++)
 8000712:	2400      	movs	r4, #0
 8000714:	e7f5      	b.n	8000702 <Display_Color_Picture+0x26>
		}
	}

	Display_Square_Icon_40x40(back_icon_40x40, 0, 200);
 8000716:	22c8      	movs	r2, #200	@ 0xc8
 8000718:	2100      	movs	r1, #0
 800071a:	4803      	ldr	r0, [pc, #12]	@ (8000728 <Display_Color_Picture+0x4c>)
 800071c:	f7ff fefd 	bl	800051a <Display_Square_Icon_40x40>
}
 8000720:	bd38      	pop	{r3, r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	080029dc 	.word	0x080029dc
 8000728:	0802e5dc 	.word	0x0802e5dc

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b510      	push	{r4, lr}
 800072e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <HAL_InitTick+0x40>)
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000738:	fbb3 f3f2 	udiv	r3, r3, r2
 800073c:	4a0c      	ldr	r2, [pc, #48]	@ (8000770 <HAL_InitTick+0x44>)
 800073e:	6810      	ldr	r0, [r2, #0]
 8000740:	fbb0 f0f3 	udiv	r0, r0, r3
 8000744:	f000 f8ac 	bl	80008a0 <HAL_SYSTICK_Config>
 8000748:	b968      	cbnz	r0, 8000766 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	2c0f      	cmp	r4, #15
 800074c:	d901      	bls.n	8000752 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800074e:	2001      	movs	r0, #1
 8000750:	e00a      	b.n	8000768 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000752:	2200      	movs	r2, #0
 8000754:	4621      	mov	r1, r4
 8000756:	f04f 30ff 	mov.w	r0, #4294967295
 800075a:	f000 f891 	bl	8000880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075e:	4b03      	ldr	r3, [pc, #12]	@ (800076c <HAL_InitTick+0x40>)
 8000760:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2000      	movs	r0, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000766:	2001      	movs	r0, #1
}
 8000768:	bd10      	pop	{r4, pc}
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	20000010 	.word	0x20000010

08000774 <HAL_Init>:
{
 8000774:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <HAL_Init+0x30>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800077e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000786:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800078e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f863 	bl	800085c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff ffc8 	bl	800072c <HAL_InitTick>
  HAL_MspInit();
 800079c:	f001 fcd0 	bl	8002140 <HAL_MspInit>
}
 80007a0:	2000      	movs	r0, #0
 80007a2:	bd08      	pop	{r3, pc}
 80007a4:	40023c00 	.word	0x40023c00

080007a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007a8:	4a03      	ldr	r2, [pc, #12]	@ (80007b8 <HAL_IncTick+0x10>)
 80007aa:	6811      	ldr	r1, [r2, #0]
 80007ac:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <HAL_IncTick+0x14>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	440b      	add	r3, r1
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	2000005c 	.word	0x2000005c
 80007bc:	20000000 	.word	0x20000000

080007c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007c0:	4b01      	ldr	r3, [pc, #4]	@ (80007c8 <HAL_GetTick+0x8>)
 80007c2:	6818      	ldr	r0, [r3, #0]
}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	2000005c 	.word	0x2000005c

080007cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007cc:	b538      	push	{r3, r4, r5, lr}
 80007ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007d0:	f7ff fff6 	bl	80007c0 <HAL_GetTick>
 80007d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80007da:	d002      	beq.n	80007e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <HAL_Delay+0x24>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80007e2:	f7ff ffed 	bl	80007c0 <HAL_GetTick>
 80007e6:	1b40      	subs	r0, r0, r5
 80007e8:	42a0      	cmp	r0, r4
 80007ea:	d3fa      	bcc.n	80007e2 <HAL_Delay+0x16>
  {
  }
}
 80007ec:	bd38      	pop	{r3, r4, r5, pc}
 80007ee:	bf00      	nop
 80007f0:	20000000 	.word	0x20000000

080007f4 <NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80007f4:	2800      	cmp	r0, #0
 80007f6:	db08      	blt.n	800080a <NVIC_SetPriority+0x16>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	0109      	lsls	r1, r1, #4
 80007fa:	b2c9      	uxtb	r1, r1
 80007fc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000800:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000804:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  }
}
 8000808:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	f000 000f 	and.w	r0, r0, #15
 800080e:	0109      	lsls	r1, r1, #4
 8000810:	b2c9      	uxtb	r1, r1
 8000812:	4b01      	ldr	r3, [pc, #4]	@ (8000818 <NVIC_SetPriority+0x24>)
 8000814:	5419      	strb	r1, [r3, r0]
 8000816:	4770      	bx	lr
 8000818:	e000ed14 	.word	0xe000ed14

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800081e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000822:	f1c0 0c07 	rsb	ip, r0, #7
 8000826:	f1bc 0f04 	cmp.w	ip, #4
 800082a:	bf28      	it	cs
 800082c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000830:	1d03      	adds	r3, r0, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d90f      	bls.n	8000856 <NVIC_EncodePriority+0x3a>
 8000836:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	f04f 3eff 	mov.w	lr, #4294967295
 800083c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000840:	ea21 0100 	bic.w	r1, r1, r0
 8000844:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000846:	fa0e fe03 	lsl.w	lr, lr, r3
 800084a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800084e:	ea41 0002 	orr.w	r0, r1, r2
 8000852:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	2300      	movs	r3, #0
 8000858:	e7ee      	b.n	8000838 <NVIC_EncodePriority+0x1c>
	...

0800085c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4a07      	ldr	r2, [pc, #28]	@ (800087c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800085e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000860:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000864:	041b      	lsls	r3, r3, #16
 8000866:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000868:	0200      	lsls	r0, r0, #8
 800086a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000878:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000880:	b510      	push	{r4, lr}
 8000882:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <HAL_NVIC_SetPriority+0x1c>)
 8000886:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000888:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800088c:	f7ff ffc6 	bl	800081c <NVIC_EncodePriority>
 8000890:	4601      	mov	r1, r0
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff ffae 	bl	80007f4 <NVIC_SetPriority>
}
 8000898:	bd10      	pop	{r4, pc}
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	3801      	subs	r0, #1
 80008a2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80008a6:	d20b      	bcs.n	80008c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80008ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	4a05      	ldr	r2, [pc, #20]	@ (80008c4 <HAL_SYSTICK_Config+0x24>)
 80008b0:	21f0      	movs	r1, #240	@ 0xf0
 80008b2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b6:	2000      	movs	r0, #0
 80008b8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	2207      	movs	r2, #7
 80008bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008c8:	2804      	cmp	r0, #4
 80008ca:	d006      	beq.n	80008da <HAL_SYSTICK_CLKSourceConfig+0x12>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008cc:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80008d0:	6913      	ldr	r3, [r2, #16]
 80008d2:	f023 0304 	bic.w	r3, r3, #4
 80008d6:	6113      	str	r3, [r2, #16]
  }
}
 80008d8:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008da:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80008de:	6913      	ldr	r3, [r2, #16]
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6113      	str	r3, [r2, #16]
 80008e6:	4770      	bx	lr

080008e8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008e8:	4770      	bx	lr

080008ea <HAL_SYSTICK_IRQHandler>:
{
 80008ea:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008ec:	f7ff fffc 	bl	80008e8 <HAL_SYSTICK_Callback>
}
 80008f0:	bd08      	pop	{r3, pc}
	...

080008f4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	f200 80c8 	bhi.w	8000a8c <HAL_GPIO_Init+0x198>
{
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	e03a      	b.n	8000978 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000902:	2204      	movs	r2, #4
 8000904:	e000      	b.n	8000908 <HAL_GPIO_Init+0x14>
 8000906:	2200      	movs	r2, #0
 8000908:	40aa      	lsls	r2, r5
 800090a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800090c:	3402      	adds	r4, #2
 800090e:	4d60      	ldr	r5, [pc, #384]	@ (8000a90 <HAL_GPIO_Init+0x19c>)
 8000910:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000914:	4a5f      	ldr	r2, [pc, #380]	@ (8000a94 <HAL_GPIO_Init+0x1a0>)
 8000916:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000918:	ea6f 020c 	mvn.w	r2, ip
 800091c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000920:	684e      	ldr	r6, [r1, #4]
 8000922:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8000926:	d001      	beq.n	800092c <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000928:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 800092c:	4c59      	ldr	r4, [pc, #356]	@ (8000a94 <HAL_GPIO_Init+0x1a0>)
 800092e:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000930:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000932:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000936:	684e      	ldr	r6, [r1, #4]
 8000938:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800093c:	d001      	beq.n	8000942 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 800093e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000942:	4c54      	ldr	r4, [pc, #336]	@ (8000a94 <HAL_GPIO_Init+0x1a0>)
 8000944:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000946:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000948:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800094c:	684e      	ldr	r6, [r1, #4]
 800094e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000952:	d001      	beq.n	8000958 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000954:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000958:	4c4e      	ldr	r4, [pc, #312]	@ (8000a94 <HAL_GPIO_Init+0x1a0>)
 800095a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800095c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800095e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000960:	684d      	ldr	r5, [r1, #4]
 8000962:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 8000966:	d001      	beq.n	800096c <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000968:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 800096c:	4c49      	ldr	r4, [pc, #292]	@ (8000a94 <HAL_GPIO_Init+0x1a0>)
 800096e:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000970:	3301      	adds	r3, #1
 8000972:	2b0f      	cmp	r3, #15
 8000974:	f200 8088 	bhi.w	8000a88 <HAL_GPIO_Init+0x194>
    ioposition = 0x01U << position;
 8000978:	2201      	movs	r2, #1
 800097a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097c:	680c      	ldr	r4, [r1, #0]
 800097e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000982:	ea32 0404 	bics.w	r4, r2, r4
 8000986:	d1f3      	bne.n	8000970 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	684c      	ldr	r4, [r1, #4]
 800098a:	2c02      	cmp	r4, #2
 800098c:	d001      	beq.n	8000992 <HAL_GPIO_Init+0x9e>
 800098e:	2c12      	cmp	r4, #18
 8000990:	d112      	bne.n	80009b8 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->AFR[position >> 3U];
 8000992:	08dd      	lsrs	r5, r3, #3
 8000994:	3508      	adds	r5, #8
 8000996:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800099a:	f003 0607 	and.w	r6, r3, #7
 800099e:	00b6      	lsls	r6, r6, #2
 80009a0:	f04f 0e0f 	mov.w	lr, #15
 80009a4:	fa0e fe06 	lsl.w	lr, lr, r6
 80009a8:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009ac:	690c      	ldr	r4, [r1, #16]
 80009ae:	40b4      	lsls	r4, r6
 80009b0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80009b4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 80009b8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ba:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80009be:	2403      	movs	r4, #3
 80009c0:	fa04 f40e 	lsl.w	r4, r4, lr
 80009c4:	43e5      	mvns	r5, r4
 80009c6:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ca:	684c      	ldr	r4, [r1, #4]
 80009cc:	f004 0403 	and.w	r4, r4, #3
 80009d0:	fa04 f40e 	lsl.w	r4, r4, lr
 80009d4:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 80009d6:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d8:	684c      	ldr	r4, [r1, #4]
 80009da:	1e66      	subs	r6, r4, #1
 80009dc:	2e01      	cmp	r6, #1
 80009de:	d903      	bls.n	80009e8 <HAL_GPIO_Init+0xf4>
 80009e0:	2c11      	cmp	r4, #17
 80009e2:	d001      	beq.n	80009e8 <HAL_GPIO_Init+0xf4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	2c12      	cmp	r4, #18
 80009e6:	d10f      	bne.n	8000a08 <HAL_GPIO_Init+0x114>
        temp = GPIOx->OSPEEDR; 
 80009e8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009ea:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ec:	68cc      	ldr	r4, [r1, #12]
 80009ee:	fa04 f40e 	lsl.w	r4, r4, lr
 80009f2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80009f4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80009f6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009fc:	684a      	ldr	r2, [r1, #4]
 80009fe:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000a02:	409a      	lsls	r2, r3
 8000a04:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000a06:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a08:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a0a:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a0c:	688a      	ldr	r2, [r1, #8]
 8000a0e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000a12:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000a14:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a16:	684a      	ldr	r2, [r1, #4]
 8000a18:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8000a1c:	d0a8      	beq.n	8000970 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2200      	movs	r2, #0
 8000a20:	9201      	str	r2, [sp, #4]
 8000a22:	4a1d      	ldr	r2, [pc, #116]	@ (8000a98 <HAL_GPIO_Init+0x1a4>)
 8000a24:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000a26:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000a2a:	6454      	str	r4, [r2, #68]	@ 0x44
 8000a2c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000a2e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000a32:	9201      	str	r2, [sp, #4]
 8000a34:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a36:	089c      	lsrs	r4, r3, #2
 8000a38:	1ca5      	adds	r5, r4, #2
 8000a3a:	4a15      	ldr	r2, [pc, #84]	@ (8000a90 <HAL_GPIO_Init+0x19c>)
 8000a3c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a40:	f003 0503 	and.w	r5, r3, #3
 8000a44:	00ad      	lsls	r5, r5, #2
 8000a46:	220f      	movs	r2, #15
 8000a48:	40aa      	lsls	r2, r5
 8000a4a:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4e:	4a13      	ldr	r2, [pc, #76]	@ (8000a9c <HAL_GPIO_Init+0x1a8>)
 8000a50:	4290      	cmp	r0, r2
 8000a52:	f43f af58 	beq.w	8000906 <HAL_GPIO_Init+0x12>
 8000a56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d00e      	beq.n	8000a7c <HAL_GPIO_Init+0x188>
 8000a5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a62:	4290      	cmp	r0, r2
 8000a64:	d00c      	beq.n	8000a80 <HAL_GPIO_Init+0x18c>
 8000a66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a6a:	4290      	cmp	r0, r2
 8000a6c:	d00a      	beq.n	8000a84 <HAL_GPIO_Init+0x190>
 8000a6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000a72:	4290      	cmp	r0, r2
 8000a74:	f43f af45 	beq.w	8000902 <HAL_GPIO_Init+0xe>
 8000a78:	2207      	movs	r2, #7
 8000a7a:	e745      	b.n	8000908 <HAL_GPIO_Init+0x14>
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	e743      	b.n	8000908 <HAL_GPIO_Init+0x14>
 8000a80:	2202      	movs	r2, #2
 8000a82:	e741      	b.n	8000908 <HAL_GPIO_Init+0x14>
 8000a84:	2203      	movs	r2, #3
 8000a86:	e73f      	b.n	8000908 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40013c00 	.word	0x40013c00
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000aa0:	6903      	ldr	r3, [r0, #16]
 8000aa2:	4219      	tst	r1, r3
 8000aa4:	d001      	beq.n	8000aaa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000aaa:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000aac:	4770      	bx	lr

08000aae <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aae:	b10a      	cbz	r2, 8000ab4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ab0:	6181      	str	r1, [r0, #24]
 8000ab2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ab4:	0409      	lsls	r1, r1, #16
 8000ab6:	6181      	str	r1, [r0, #24]
  }
}
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000abc:	2800      	cmp	r0, #0
 8000abe:	f000 81ba 	beq.w	8000e36 <HAL_RCC_OscConfig+0x37a>
{
 8000ac2:	b570      	push	{r4, r5, r6, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ac8:	6803      	ldr	r3, [r0, #0]
 8000aca:	f013 0f01 	tst.w	r3, #1
 8000ace:	d03b      	beq.n	8000b48 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ad0:	4b9f      	ldr	r3, [pc, #636]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 030c 	and.w	r3, r3, #12
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d02c      	beq.n	8000b36 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000adc:	4b9c      	ldr	r3, [pc, #624]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ae4:	2b08      	cmp	r3, #8
 8000ae6:	d021      	beq.n	8000b2c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae8:	6863      	ldr	r3, [r4, #4]
 8000aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000aee:	d04f      	beq.n	8000b90 <HAL_RCC_OscConfig+0xd4>
 8000af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000af4:	d052      	beq.n	8000b9c <HAL_RCC_OscConfig+0xe0>
 8000af6:	4b96      	ldr	r3, [pc, #600]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000b06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b08:	6863      	ldr	r3, [r4, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d050      	beq.n	8000bb0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fe57 	bl	80007c0 <HAL_GetTick>
 8000b12:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b14:	4b8e      	ldr	r3, [pc, #568]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000b1c:	d114      	bne.n	8000b48 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fe4f 	bl	80007c0 <HAL_GetTick>
 8000b22:	1b40      	subs	r0, r0, r5
 8000b24:	2864      	cmp	r0, #100	@ 0x64
 8000b26:	d9f5      	bls.n	8000b14 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000b28:	2003      	movs	r0, #3
 8000b2a:	e18b      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b2c:	4b88      	ldr	r3, [pc, #544]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000b34:	d0d8      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b36:	4b86      	ldr	r3, [pc, #536]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000b3e:	d003      	beq.n	8000b48 <HAL_RCC_OscConfig+0x8c>
 8000b40:	6863      	ldr	r3, [r4, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 8179 	beq.w	8000e3a <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	f013 0f02 	tst.w	r3, #2
 8000b4e:	d054      	beq.n	8000bfa <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b50:	4b7f      	ldr	r3, [pc, #508]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f013 0f0c 	tst.w	r3, #12
 8000b58:	d03e      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b5a:	4b7d      	ldr	r3, [pc, #500]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d033      	beq.n	8000bce <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b66:	68e3      	ldr	r3, [r4, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d068      	beq.n	8000c3e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b6c:	4b79      	ldr	r3, [pc, #484]	@ (8000d54 <HAL_RCC_OscConfig+0x298>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b72:	f7ff fe25 	bl	80007c0 <HAL_GetTick>
 8000b76:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b78:	4b75      	ldr	r3, [pc, #468]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f013 0f02 	tst.w	r3, #2
 8000b80:	d154      	bne.n	8000c2c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b82:	f7ff fe1d 	bl	80007c0 <HAL_GetTick>
 8000b86:	1b40      	subs	r0, r0, r5
 8000b88:	2802      	cmp	r0, #2
 8000b8a:	d9f5      	bls.n	8000b78 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	e159      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b90:	4a6f      	ldr	r2, [pc, #444]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e7b5      	b.n	8000b08 <HAL_RCC_OscConfig+0x4c>
 8000b9c:	4b6c      	ldr	r3, [pc, #432]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e7ab      	b.n	8000b08 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fe06 	bl	80007c0 <HAL_GetTick>
 8000bb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb6:	4b66      	ldr	r3, [pc, #408]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000bbe:	d0c3      	beq.n	8000b48 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc0:	f7ff fdfe 	bl	80007c0 <HAL_GetTick>
 8000bc4:	1b40      	subs	r0, r0, r5
 8000bc6:	2864      	cmp	r0, #100	@ 0x64
 8000bc8:	d9f5      	bls.n	8000bb6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000bca:	2003      	movs	r0, #3
 8000bcc:	e13a      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bce:	4b60      	ldr	r3, [pc, #384]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000bd6:	d1c6      	bne.n	8000b66 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd8:	4b5d      	ldr	r3, [pc, #372]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f013 0f02 	tst.w	r3, #2
 8000be0:	d003      	beq.n	8000bea <HAL_RCC_OscConfig+0x12e>
 8000be2:	68e3      	ldr	r3, [r4, #12]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	f040 812a 	bne.w	8000e3e <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bea:	4a59      	ldr	r2, [pc, #356]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000bec:	6813      	ldr	r3, [r2, #0]
 8000bee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000bf2:	6921      	ldr	r1, [r4, #16]
 8000bf4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bf8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	f013 0f08 	tst.w	r3, #8
 8000c00:	d042      	beq.n	8000c88 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c02:	6963      	ldr	r3, [r4, #20]
 8000c04:	b36b      	cbz	r3, 8000c62 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c06:	4b53      	ldr	r3, [pc, #332]	@ (8000d54 <HAL_RCC_OscConfig+0x298>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c0e:	f7ff fdd7 	bl	80007c0 <HAL_GetTick>
 8000c12:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c14:	4b4e      	ldr	r3, [pc, #312]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c18:	f013 0f02 	tst.w	r3, #2
 8000c1c:	d134      	bne.n	8000c88 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c1e:	f7ff fdcf 	bl	80007c0 <HAL_GetTick>
 8000c22:	1b40      	subs	r0, r0, r5
 8000c24:	2802      	cmp	r0, #2
 8000c26:	d9f5      	bls.n	8000c14 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000c28:	2003      	movs	r0, #3
 8000c2a:	e10b      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c2c:	4a48      	ldr	r2, [pc, #288]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000c2e:	6813      	ldr	r3, [r2, #0]
 8000c30:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000c34:	6921      	ldr	r1, [r4, #16]
 8000c36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e7dd      	b.n	8000bfa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000c3e:	4b45      	ldr	r3, [pc, #276]	@ (8000d54 <HAL_RCC_OscConfig+0x298>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c44:	f7ff fdbc 	bl	80007c0 <HAL_GetTick>
 8000c48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4a:	4b41      	ldr	r3, [pc, #260]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f013 0f02 	tst.w	r3, #2
 8000c52:	d0d2      	beq.n	8000bfa <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c54:	f7ff fdb4 	bl	80007c0 <HAL_GetTick>
 8000c58:	1b40      	subs	r0, r0, r5
 8000c5a:	2802      	cmp	r0, #2
 8000c5c:	d9f5      	bls.n	8000c4a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000c5e:	2003      	movs	r0, #3
 8000c60:	e0f0      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c62:	4b3c      	ldr	r3, [pc, #240]	@ (8000d54 <HAL_RCC_OscConfig+0x298>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c6a:	f7ff fda9 	bl	80007c0 <HAL_GetTick>
 8000c6e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c70:	4b37      	ldr	r3, [pc, #220]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c74:	f013 0f02 	tst.w	r3, #2
 8000c78:	d006      	beq.n	8000c88 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fda1 	bl	80007c0 <HAL_GetTick>
 8000c7e:	1b40      	subs	r0, r0, r5
 8000c80:	2802      	cmp	r0, #2
 8000c82:	d9f5      	bls.n	8000c70 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000c84:	2003      	movs	r0, #3
 8000c86:	e0dd      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	f013 0f04 	tst.w	r3, #4
 8000c8e:	d077      	beq.n	8000d80 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c90:	4b2f      	ldr	r3, [pc, #188]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000c98:	d133      	bne.n	8000d02 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	9301      	str	r3, [sp, #4]
 8000c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000ca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ca6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cb2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb4:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <HAL_RCC_OscConfig+0x29c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000cbc:	d023      	beq.n	8000d06 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cbe:	68a3      	ldr	r3, [r4, #8]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d034      	beq.n	8000d2e <HAL_RCC_OscConfig+0x272>
 8000cc4:	2b05      	cmp	r3, #5
 8000cc6:	d038      	beq.n	8000d3a <HAL_RCC_OscConfig+0x27e>
 8000cc8:	4b21      	ldr	r3, [pc, #132]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000cca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000ccc:	f022 0201 	bic.w	r2, r2, #1
 8000cd0:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000cd4:	f022 0204 	bic.w	r2, r2, #4
 8000cd8:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000cda:	68a3      	ldr	r3, [r4, #8]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d03d      	beq.n	8000d5c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ce0:	f7ff fd6e 	bl	80007c0 <HAL_GetTick>
 8000ce4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cea:	f013 0f02 	tst.w	r3, #2
 8000cee:	d146      	bne.n	8000d7e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cf0:	f7ff fd66 	bl	80007c0 <HAL_GetTick>
 8000cf4:	1b80      	subs	r0, r0, r6
 8000cf6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d9f3      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000cfe:	2003      	movs	r0, #3
 8000d00:	e0a0      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
    FlagStatus       pwrclkchanged = RESET;
 8000d02:	2500      	movs	r5, #0
 8000d04:	e7d6      	b.n	8000cb4 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d06:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <HAL_RCC_OscConfig+0x29c>)
 8000d08:	6813      	ldr	r3, [r2, #0]
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000d10:	f7ff fd56 	bl	80007c0 <HAL_GetTick>
 8000d14:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <HAL_RCC_OscConfig+0x29c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000d1e:	d1ce      	bne.n	8000cbe <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d20:	f7ff fd4e 	bl	80007c0 <HAL_GetTick>
 8000d24:	1b80      	subs	r0, r0, r6
 8000d26:	2802      	cmp	r0, #2
 8000d28:	d9f5      	bls.n	8000d16 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	e08a      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000d30:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8000d38:	e7cf      	b.n	8000cda <HAL_RCC_OscConfig+0x21e>
 8000d3a:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_RCC_OscConfig+0x294>)
 8000d3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000d3e:	f042 0204 	orr.w	r2, r2, #4
 8000d42:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000d46:	f042 0201 	orr.w	r2, r2, #1
 8000d4a:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d4c:	e7c5      	b.n	8000cda <HAL_RCC_OscConfig+0x21e>
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	42470000 	.word	0x42470000
 8000d58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5c:	f7ff fd30 	bl	80007c0 <HAL_GetTick>
 8000d60:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d62:	4b3a      	ldr	r3, [pc, #232]	@ (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d66:	f013 0f02 	tst.w	r3, #2
 8000d6a:	d008      	beq.n	8000d7e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fd28 	bl	80007c0 <HAL_GetTick>
 8000d70:	1b80      	subs	r0, r0, r6
 8000d72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d76:	4298      	cmp	r0, r3
 8000d78:	d9f3      	bls.n	8000d62 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	e062      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d7e:	b9e5      	cbnz	r5, 8000dba <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d80:	69a3      	ldr	r3, [r4, #24]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d05d      	beq.n	8000e42 <HAL_RCC_OscConfig+0x386>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d86:	4a31      	ldr	r2, [pc, #196]	@ (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000d88:	6892      	ldr	r2, [r2, #8]
 8000d8a:	f002 020c 	and.w	r2, r2, #12
 8000d8e:	2a08      	cmp	r2, #8
 8000d90:	d05a      	beq.n	8000e48 <HAL_RCC_OscConfig+0x38c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d017      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d96:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <HAL_RCC_OscConfig+0x394>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fd10 	bl	80007c0 <HAL_GetTick>
 8000da0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000da2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000daa:	d042      	beq.n	8000e32 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dac:	f7ff fd08 	bl	80007c0 <HAL_GetTick>
 8000db0:	1b00      	subs	r0, r0, r4
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f5      	bls.n	8000da2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000db6:	2003      	movs	r0, #3
 8000db8:	e044      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dba:	4a24      	ldr	r2, [pc, #144]	@ (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000dbc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc4:	e7dc      	b.n	8000d80 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8000dc6:	4b22      	ldr	r3, [pc, #136]	@ (8000e50 <HAL_RCC_OscConfig+0x394>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fcf8 	bl	80007c0 <HAL_GetTick>
 8000dd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000dda:	d006      	beq.n	8000dea <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ddc:	f7ff fcf0 	bl	80007c0 <HAL_GetTick>
 8000de0:	1b40      	subs	r0, r0, r5
 8000de2:	2802      	cmp	r0, #2
 8000de4:	d9f5      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8000de6:	2003      	movs	r0, #3
 8000de8:	e02c      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000dea:	69e3      	ldr	r3, [r4, #28]
 8000dec:	6a22      	ldr	r2, [r4, #32]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000df2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000df6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000df8:	0852      	lsrs	r2, r2, #1
 8000dfa:	3a01      	subs	r2, #1
 8000dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e00:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000e02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e06:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000e08:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_RCC_OscConfig+0x394>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000e10:	f7ff fcd6 	bl	80007c0 <HAL_GetTick>
 8000e14:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <HAL_RCC_OscConfig+0x390>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000e1e:	d106      	bne.n	8000e2e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e20:	f7ff fcce 	bl	80007c0 <HAL_GetTick>
 8000e24:	1b00      	subs	r0, r0, r4
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9f5      	bls.n	8000e16 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	e00a      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000e2e:	2000      	movs	r0, #0
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
 8000e32:	2000      	movs	r0, #0
 8000e34:	e006      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
    return HAL_ERROR;
 8000e36:	2001      	movs	r0, #1
}
 8000e38:	4770      	bx	lr
        return HAL_ERROR;
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	e002      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
        return HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	e000      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 8000e42:	2000      	movs	r0, #0
}
 8000e44:	b002      	add	sp, #8
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000e48:	2001      	movs	r0, #1
 8000e4a:	e7fb      	b.n	8000e44 <HAL_RCC_OscConfig+0x388>
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	42470000 	.word	0x42470000

08000e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e54:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e56:	4b33      	ldr	r3, [pc, #204]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d05b      	beq.n	8000f1a <HAL_RCC_GetSysClockFreq+0xc6>
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d15b      	bne.n	8000f1e <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e66:	4b2f      	ldr	r3, [pc, #188]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000e74:	d02c      	beq.n	8000ed0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e76:	4b2b      	ldr	r3, [pc, #172]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000e78:	6858      	ldr	r0, [r3, #4]
 8000e7a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000e7e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000e82:	ebbc 0c00 	subs.w	ip, ip, r0
 8000e86:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000e8a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000e8e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000e92:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000e96:	ebb1 010c 	subs.w	r1, r1, ip
 8000e9a:	eb63 030e 	sbc.w	r3, r3, lr
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000ea4:	00c9      	lsls	r1, r1, #3
 8000ea6:	eb11 0c00 	adds.w	ip, r1, r0
 8000eaa:	f143 0300 	adc.w	r3, r3, #0
 8000eae:	0259      	lsls	r1, r3, #9
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8000eb6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8000eba:	f7ff f98d 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000eca:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000ece:	e027      	b.n	8000f20 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000ed2:	6858      	ldr	r0, [r3, #4]
 8000ed4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000ed8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000edc:	ebbc 0c00 	subs.w	ip, ip, r0
 8000ee0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000ee4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000ee8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000eec:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000ef0:	ebb1 010c 	subs.w	r1, r1, ip
 8000ef4:	eb63 030e 	sbc.w	r3, r3, lr
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000efe:	00c9      	lsls	r1, r1, #3
 8000f00:	eb11 0c00 	adds.w	ip, r1, r0
 8000f04:	f143 0300 	adc.w	r3, r3, #0
 8000f08:	0299      	lsls	r1, r3, #10
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000f10:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000f14:	f7ff f960 	bl	80001d8 <__aeabi_uldivmod>
 8000f18:	e7d1      	b.n	8000ebe <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8000f1a:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8000f1c:	e000      	b.n	8000f20 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f1e:	4803      	ldr	r0, [pc, #12]	@ (8000f2c <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f20:	bd08      	pop	{r3, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	007a1200 	.word	0x007a1200
 8000f2c:	00f42400 	.word	0x00f42400

08000f30 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000f30:	2800      	cmp	r0, #0
 8000f32:	f000 809a 	beq.w	800106a <HAL_RCC_ClockConfig+0x13a>
{
 8000f36:	b570      	push	{r4, r5, r6, lr}
 8000f38:	460d      	mov	r5, r1
 8000f3a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800107c <HAL_RCC_ClockConfig+0x14c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d208      	bcs.n	8000f5a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f48:	b2cb      	uxtb	r3, r1
 8000f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800107c <HAL_RCC_ClockConfig+0x14c>)
 8000f4c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f4e:	6813      	ldr	r3, [r2, #0]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	428b      	cmp	r3, r1
 8000f56:	f040 808a 	bne.w	800106e <HAL_RCC_ClockConfig+0x13e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	f013 0f02 	tst.w	r3, #2
 8000f60:	d017      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f62:	f013 0f04 	tst.w	r3, #4
 8000f66:	d004      	beq.n	8000f72 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f68:	4a45      	ldr	r2, [pc, #276]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8000f6a:	6893      	ldr	r3, [r2, #8]
 8000f6c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f70:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	f013 0f08 	tst.w	r3, #8
 8000f78:	d004      	beq.n	8000f84 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f7a:	4a41      	ldr	r2, [pc, #260]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8000f7c:	6893      	ldr	r3, [r2, #8]
 8000f7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000f82:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f84:	4a3e      	ldr	r2, [pc, #248]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8000f86:	6893      	ldr	r3, [r2, #8]
 8000f88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f8c:	68a1      	ldr	r1, [r4, #8]
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	f013 0f01 	tst.w	r3, #1
 8000f98:	d032      	beq.n	8001000 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f9a:	6863      	ldr	r3, [r4, #4]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d021      	beq.n	8000fe4 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fa0:	1e9a      	subs	r2, r3, #2
 8000fa2:	2a01      	cmp	r2, #1
 8000fa4:	d925      	bls.n	8000ff2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa6:	4a36      	ldr	r2, [pc, #216]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	f012 0f02 	tst.w	r2, #2
 8000fae:	d060      	beq.n	8001072 <HAL_RCC_ClockConfig+0x142>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fb0:	4933      	ldr	r1, [pc, #204]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8000fb2:	688a      	ldr	r2, [r1, #8]
 8000fb4:	f022 0203 	bic.w	r2, r2, #3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000fbc:	f7ff fc00 	bl	80007c0 <HAL_GetTick>
 8000fc0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	6862      	ldr	r2, [r4, #4]
 8000fcc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fd0:	d016      	beq.n	8001000 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd2:	f7ff fbf5 	bl	80007c0 <HAL_GetTick>
 8000fd6:	1b80      	subs	r0, r0, r6
 8000fd8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fdc:	4298      	cmp	r0, r3
 8000fde:	d9f0      	bls.n	8000fc2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	e041      	b.n	8001068 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe4:	4a26      	ldr	r2, [pc, #152]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000fec:	d1e0      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fee:	2001      	movs	r0, #1
 8000ff0:	e03a      	b.n	8001068 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff2:	4a23      	ldr	r2, [pc, #140]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8000ffa:	d1d9      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e033      	b.n	8001068 <HAL_RCC_ClockConfig+0x138>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001000:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <HAL_RCC_ClockConfig+0x14c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 030f 	and.w	r3, r3, #15
 8001008:	42ab      	cmp	r3, r5
 800100a:	d907      	bls.n	800101c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100c:	b2ea      	uxtb	r2, r5
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_RCC_ClockConfig+0x14c>)
 8001010:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	42ab      	cmp	r3, r5
 800101a:	d12c      	bne.n	8001076 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	f013 0f04 	tst.w	r3, #4
 8001022:	d006      	beq.n	8001032 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001024:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8001026:	6893      	ldr	r3, [r2, #8]
 8001028:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800102c:	68e1      	ldr	r1, [r4, #12]
 800102e:	430b      	orrs	r3, r1
 8001030:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	f013 0f08 	tst.w	r3, #8
 8001038:	d007      	beq.n	800104a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800103a:	4a11      	ldr	r2, [pc, #68]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 800103c:	6893      	ldr	r3, [r2, #8]
 800103e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001042:	6921      	ldr	r1, [r4, #16]
 8001044:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001048:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800104a:	f7ff ff03 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <HAL_RCC_ClockConfig+0x150>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001056:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <HAL_RCC_ClockConfig+0x154>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	40d8      	lsrs	r0, r3
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <HAL_RCC_ClockConfig+0x158>)
 800105e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fb63 	bl	800072c <HAL_InitTick>
  return HAL_OK;
 8001066:	2000      	movs	r0, #0
}
 8001068:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
}
 800106c:	4770      	bx	lr
      return HAL_ERROR;
 800106e:	2001      	movs	r0, #1
 8001070:	e7fa      	b.n	8001068 <HAL_RCC_ClockConfig+0x138>
        return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e7f8      	b.n	8001068 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001076:	2001      	movs	r0, #1
 8001078:	e7f6      	b.n	8001068 <HAL_RCC_ClockConfig+0x138>
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00
 8001080:	40023800 	.word	0x40023800
 8001084:	0803dc24 	.word	0x0803dc24
 8001088:	20000010 	.word	0x20000010

0800108c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800108c:	4b01      	ldr	r3, [pc, #4]	@ (8001094 <HAL_RCC_GetHCLKFreq+0x8>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000010 	.word	0x20000010

08001098 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800109c:	4606      	mov	r6, r0
 800109e:	4688      	mov	r8, r1
 80010a0:	4617      	mov	r7, r2
 80010a2:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80010a4:	e03b      	b.n	800111e <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80010a6:	b12d      	cbz	r5, 80010b4 <SPI_WaitFlagStateUntilTimeout+0x1c>
 80010a8:	f7ff fb8a 	bl	80007c0 <HAL_GetTick>
 80010ac:	9b06      	ldr	r3, [sp, #24]
 80010ae:	1ac0      	subs	r0, r0, r3
 80010b0:	42a8      	cmp	r0, r5
 80010b2:	d334      	bcc.n	800111e <SPI_WaitFlagStateUntilTimeout+0x86>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80010b4:	6832      	ldr	r2, [r6, #0]
 80010b6:	6853      	ldr	r3, [r2, #4]
 80010b8:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80010bc:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80010be:	6873      	ldr	r3, [r6, #4]
 80010c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80010c4:	d00b      	beq.n	80010de <SPI_WaitFlagStateUntilTimeout+0x46>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80010c6:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80010c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010cc:	d014      	beq.n	80010f8 <SPI_WaitFlagStateUntilTimeout+0x60>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 80010ce:	2301      	movs	r3, #1
 80010d0:	f886 3051 	strb.w	r3, [r6, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80010d4:	2300      	movs	r3, #0
 80010d6:	f886 3050 	strb.w	r3, [r6, #80]	@ 0x50

        return HAL_TIMEOUT;
 80010da:	2003      	movs	r0, #3
 80010dc:	e027      	b.n	800112e <SPI_WaitFlagStateUntilTimeout+0x96>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80010de:	68b3      	ldr	r3, [r6, #8]
 80010e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010e4:	d002      	beq.n	80010ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80010e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ea:	d1ec      	bne.n	80010c6 <SPI_WaitFlagStateUntilTimeout+0x2e>
          __HAL_SPI_DISABLE(hspi);
 80010ec:	6832      	ldr	r2, [r6, #0]
 80010ee:	6813      	ldr	r3, [r2, #0]
 80010f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e7e6      	b.n	80010c6 <SPI_WaitFlagStateUntilTimeout+0x2e>
          SPI_RESET_CRC(hspi);
 80010f8:	6832      	ldr	r2, [r6, #0]
 80010fa:	6813      	ldr	r3, [r2, #0]
 80010fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	0c1b      	lsrs	r3, r3, #16
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	6832      	ldr	r2, [r6, #0]
 8001108:	6813      	ldr	r3, [r2, #0]
 800110a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	e7dd      	b.n	80010ce <SPI_WaitFlagStateUntilTimeout+0x36>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001112:	2401      	movs	r4, #1
 8001114:	42bc      	cmp	r4, r7
 8001116:	d009      	beq.n	800112c <SPI_WaitFlagStateUntilTimeout+0x94>
    if(Timeout != HAL_MAX_DELAY)
 8001118:	f1b5 3fff 	cmp.w	r5, #4294967295
 800111c:	d1c3      	bne.n	80010a6 <SPI_WaitFlagStateUntilTimeout+0xe>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800111e:	6834      	ldr	r4, [r6, #0]
 8001120:	68a4      	ldr	r4, [r4, #8]
 8001122:	ea38 0404 	bics.w	r4, r8, r4
 8001126:	d0f4      	beq.n	8001112 <SPI_WaitFlagStateUntilTimeout+0x7a>
 8001128:	2400      	movs	r4, #0
 800112a:	e7f3      	b.n	8001114 <SPI_WaitFlagStateUntilTimeout+0x7c>
      }
    }
  }

  return HAL_OK;
 800112c:	2000      	movs	r0, #0
}
 800112e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001132 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001132:	b510      	push	{r4, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	4604      	mov	r4, r0
 8001138:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800113a:	9200      	str	r2, [sp, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	2180      	movs	r1, #128	@ 0x80
 8001140:	f7ff ffaa 	bl	8001098 <SPI_WaitFlagStateUntilTimeout>
 8001144:	b908      	cbnz	r0, 800114a <SPI_CheckFlag_BSY+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8001146:	b002      	add	sp, #8
 8001148:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800114a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001152:	2003      	movs	r0, #3
 8001154:	e7f7      	b.n	8001146 <SPI_CheckFlag_BSY+0x14>

08001156 <HAL_SPI_Init>:
  if(hspi == NULL)
 8001156:	2800      	cmp	r0, #0
 8001158:	d03b      	beq.n	80011d2 <HAL_SPI_Init+0x7c>
{
 800115a:	b510      	push	{r4, lr}
 800115c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	6283      	str	r3, [r0, #40]	@ 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001162:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 8001166:	2b00      	cmp	r3, #0
 8001168:	d02e      	beq.n	80011c8 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 800116a:	2302      	movs	r3, #2
 800116c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8001170:	6822      	ldr	r2, [r4, #0]
 8001172:	6813      	ldr	r3, [r2, #0]
 8001174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001178:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800117a:	6863      	ldr	r3, [r4, #4]
 800117c:	68a2      	ldr	r2, [r4, #8]
 800117e:	4313      	orrs	r3, r2
 8001180:	68e2      	ldr	r2, [r4, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	6922      	ldr	r2, [r4, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	6962      	ldr	r2, [r4, #20]
 800118a:	4313      	orrs	r3, r2
 800118c:	69a2      	ldr	r2, [r4, #24]
 800118e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001192:	4313      	orrs	r3, r2
 8001194:	69e2      	ldr	r2, [r4, #28]
 8001196:	4313      	orrs	r3, r2
 8001198:	6a22      	ldr	r2, [r4, #32]
 800119a:	4313      	orrs	r3, r2
 800119c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800119e:	6822      	ldr	r2, [r4, #0]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80011a4:	8b63      	ldrh	r3, [r4, #26]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	430b      	orrs	r3, r1
 80011b0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011b2:	6822      	ldr	r2, [r4, #0]
 80011b4:	69d3      	ldr	r3, [r2, #28]
 80011b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80011ba:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011bc:	2000      	movs	r0, #0
 80011be:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80011c6:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80011c8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80011cc:	f001 f802 	bl	80021d4 <HAL_SPI_MspInit>
 80011d0:	e7cb      	b.n	800116a <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 80011d2:	2001      	movs	r0, #1
}
 80011d4:	4770      	bx	lr

080011d6 <HAL_SPI_Transmit>:
{
 80011d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011da:	b085      	sub	sp, #20
 80011dc:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80011de:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	f000 80c9 	beq.w	800137a <HAL_SPI_Transmit+0x1a4>
 80011e8:	4604      	mov	r4, r0
 80011ea:	460e      	mov	r6, r1
 80011ec:	4691      	mov	r9, r2
 80011ee:	2301      	movs	r3, #1
 80011f0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80011f4:	f7ff fae4 	bl	80007c0 <HAL_GetTick>
 80011f8:	4680      	mov	r8, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 80011fa:	f894 7051 	ldrb.w	r7, [r4, #81]	@ 0x51
 80011fe:	b2ff      	uxtb	r7, r7
 8001200:	2f01      	cmp	r7, #1
 8001202:	f040 80af 	bne.w	8001364 <HAL_SPI_Transmit+0x18e>
  if((pData == NULL ) || (Size == 0))
 8001206:	2e00      	cmp	r6, #0
 8001208:	f000 80ad 	beq.w	8001366 <HAL_SPI_Transmit+0x190>
 800120c:	f1b9 0f00 	cmp.w	r9, #0
 8001210:	f000 80a9 	beq.w	8001366 <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001214:	2303      	movs	r3, #3
 8001216:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800121e:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001220:	f8a4 9034 	strh.w	r9, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001224:	f8a4 9036 	strh.w	r9, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001228:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800122a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800122c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800122e:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001230:	6423      	str	r3, [r4, #64]	@ 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001232:	68a3      	ldr	r3, [r4, #8]
 8001234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001238:	d01c      	beq.n	8001274 <HAL_SPI_Transmit+0x9e>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8001242:	d103      	bne.n	800124c <HAL_SPI_Transmit+0x76>
    __HAL_SPI_ENABLE(hspi);
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800124a:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800124c:	68e3      	ldr	r3, [r4, #12]
 800124e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001252:	d015      	beq.n	8001280 <HAL_SPI_Transmit+0xaa>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	b11b      	cbz	r3, 8001260 <HAL_SPI_Transmit+0x8a>
 8001258:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800125a:	b29b      	uxth	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d141      	bne.n	80012e4 <HAL_SPI_Transmit+0x10e>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001266:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001268:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800126a:	b29b      	uxth	r3, r3
 800126c:	3b01      	subs	r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8001272:	e037      	b.n	80012e4 <HAL_SPI_Transmit+0x10e>
    SPI_1LINE_TX(hspi);
 8001274:	6822      	ldr	r2, [r4, #0]
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e7dc      	b.n	800123a <HAL_SPI_Transmit+0x64>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001280:	6863      	ldr	r3, [r4, #4]
 8001282:	b11b      	cbz	r3, 800128c <HAL_SPI_Transmit+0xb6>
 8001284:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d10d      	bne.n	80012a8 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)pData);
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	f836 2b02 	ldrh.w	r2, [r6], #2
 8001292:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001294:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001296:	b29b      	uxth	r3, r3
 8001298:	3b01      	subs	r3, #1
 800129a:	b29b      	uxth	r3, r3
 800129c:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800129e:	e003      	b.n	80012a8 <HAL_SPI_Transmit+0xd2>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012a0:	b1d5      	cbz	r5, 80012d8 <HAL_SPI_Transmit+0x102>
 80012a2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80012a6:	d111      	bne.n	80012cc <HAL_SPI_Transmit+0xf6>
    while (hspi->TxXferCount > 0U)
 80012a8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d037      	beq.n	8001320 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	f012 0f02 	tst.w	r2, #2
 80012b8:	d0f2      	beq.n	80012a0 <HAL_SPI_Transmit+0xca>
          hspi->Instance->DR = *((uint16_t *)pData);
 80012ba:	f836 2b02 	ldrh.w	r2, [r6], #2
 80012be:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 80012c0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80012ca:	e7ed      	b.n	80012a8 <HAL_SPI_Transmit+0xd2>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012cc:	f7ff fa78 	bl	80007c0 <HAL_GetTick>
 80012d0:	eba0 0008 	sub.w	r0, r0, r8
 80012d4:	42a8      	cmp	r0, r5
 80012d6:	d3e7      	bcc.n	80012a8 <HAL_SPI_Transmit+0xd2>
          errorcode = HAL_TIMEOUT;
 80012d8:	2703      	movs	r7, #3
          goto error;
 80012da:	e044      	b.n	8001366 <HAL_SPI_Transmit+0x190>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80012dc:	b1f5      	cbz	r5, 800131c <HAL_SPI_Transmit+0x146>
 80012de:	f1b5 3fff 	cmp.w	r5, #4294967295
 80012e2:	d115      	bne.n	8001310 <HAL_SPI_Transmit+0x13a>
    while (hspi->TxXferCount > 0U)
 80012e4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80012e6:	b292      	uxth	r2, r2
 80012e8:	b1d2      	cbz	r2, 8001320 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	f012 0f02 	tst.w	r2, #2
 80012f2:	d0f3      	beq.n	80012dc <HAL_SPI_Transmit+0x106>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80012f4:	f816 2b01 	ldrb.w	r2, [r6], #1
 80012f8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80012fa:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 80012fe:	fa1f fc8c 	uxth.w	ip, ip
 8001302:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001306:	fa1f fc8c 	uxth.w	ip, ip
 800130a:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
 800130e:	e7e9      	b.n	80012e4 <HAL_SPI_Transmit+0x10e>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001310:	f7ff fa56 	bl	80007c0 <HAL_GetTick>
 8001314:	eba0 0008 	sub.w	r0, r0, r8
 8001318:	42a8      	cmp	r0, r5
 800131a:	d3e3      	bcc.n	80012e4 <HAL_SPI_Transmit+0x10e>
          errorcode = HAL_TIMEOUT;
 800131c:	2703      	movs	r7, #3
          goto error;
 800131e:	e022      	b.n	8001366 <HAL_SPI_Transmit+0x190>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001320:	f8cd 8000 	str.w	r8, [sp]
 8001324:	462b      	mov	r3, r5
 8001326:	2201      	movs	r2, #1
 8001328:	2102      	movs	r1, #2
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff feb4 	bl	8001098 <SPI_WaitFlagStateUntilTimeout>
 8001330:	b108      	cbz	r0, 8001336 <HAL_SPI_Transmit+0x160>
    errorcode = HAL_TIMEOUT;
 8001332:	2703      	movs	r7, #3
 8001334:	e017      	b.n	8001366 <HAL_SPI_Transmit+0x190>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001336:	4642      	mov	r2, r8
 8001338:	4629      	mov	r1, r5
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fef9 	bl	8001132 <SPI_CheckFlag_BSY>
 8001340:	4603      	mov	r3, r0
 8001342:	b960      	cbnz	r0, 800135e <HAL_SPI_Transmit+0x188>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001344:	68a2      	ldr	r2, [r4, #8]
 8001346:	b932      	cbnz	r2, 8001356 <HAL_SPI_Transmit+0x180>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001348:	9203      	str	r2, [sp, #12]
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	68d1      	ldr	r1, [r2, #12]
 800134e:	9103      	str	r1, [sp, #12]
 8001350:	6892      	ldr	r2, [r2, #8]
 8001352:	9203      	str	r2, [sp, #12]
 8001354:	9a03      	ldr	r2, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001356:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001358:	b92a      	cbnz	r2, 8001366 <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800135a:	461f      	mov	r7, r3
 800135c:	e003      	b.n	8001366 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800135e:	2320      	movs	r3, #32
 8001360:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 8001362:	e000      	b.n	8001366 <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 8001364:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001366:	2301      	movs	r3, #1
 8001368:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800136c:	2300      	movs	r3, #0
 800136e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8001372:	4638      	mov	r0, r7
 8001374:	b005      	add	sp, #20
 8001376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800137a:	2702      	movs	r7, #2
 800137c:	e7f9      	b.n	8001372 <HAL_SPI_Transmit+0x19c>
	...

08001380 <ILI9341_SPI_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init() {
 8001380:	b508      	push	{r3, lr}
	lcd_spi.Instance 				= SPI1;
 8001382:	480e      	ldr	r0, [pc, #56]	@ (80013bc <ILI9341_SPI_Init+0x3c>)
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <ILI9341_SPI_Init+0x40>)
 8001386:	6003      	str	r3, [r0, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 8001388:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800138c:	6043      	str	r3, [r0, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 800138e:	2300      	movs	r3, #0
 8001390:	6083      	str	r3, [r0, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001392:	60c3      	str	r3, [r0, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8001394:	6103      	str	r3, [r0, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8001396:	6143      	str	r3, [r0, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8001398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800139c:	6182      	str	r2, [r0, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 800139e:	61c3      	str	r3, [r0, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 80013a0:	6203      	str	r3, [r0, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 80013a2:	6243      	str	r3, [r0, #36]	@ 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 80013a4:	6283      	str	r3, [r0, #40]	@ 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 80013a6:	230a      	movs	r3, #10
 80013a8:	62c3      	str	r3, [r0, #44]	@ 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80013aa:	f7ff fed4 	bl	8001156 <HAL_SPI_Init>
 80013ae:	b900      	cbnz	r0, 80013b2 <ILI9341_SPI_Init+0x32>
		Error_Handler();
	}
}
 80013b0:	bd08      	pop	{r3, pc}
		Error_Handler();
 80013b2:	21a8      	movs	r1, #168	@ 0xa8
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <ILI9341_SPI_Init+0x44>)
 80013b6:	f000 fdd3 	bl	8001f60 <_Error_Handler>
}
 80013ba:	e7f9      	b.n	80013b0 <ILI9341_SPI_Init+0x30>
 80013bc:	20000060 	.word	0x20000060
 80013c0:	40013000 	.word	0x40013000
 80013c4:	0803dcbc 	.word	0x0803dcbc

080013c8 <Before_Sending_Command>:
static void Before_Sending_Data() {
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
}

static void Before_Sending_Command() {
 80013c8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80013ca:	4c06      	ldr	r4, [pc, #24]	@ (80013e4 <Before_Sending_Command+0x1c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	2102      	movs	r1, #2
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff fb6c 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2104      	movs	r1, #4
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff fb67 	bl	8000aae <HAL_GPIO_WritePin>
}
 80013e0:	bd10      	pop	{r4, pc}
 80013e2:	bf00      	nop
 80013e4:	40020000 	.word	0x40020000

080013e8 <Before_Sending_Data>:
static void Before_Sending_Data() {
 80013e8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80013ea:	4c06      	ldr	r4, [pc, #24]	@ (8001404 <Before_Sending_Data+0x1c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	2102      	movs	r1, #2
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff fb5c 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2104      	movs	r1, #4
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff fb57 	bl	8000aae <HAL_GPIO_WritePin>
}
 8001400:	bd10      	pop	{r4, pc}
 8001402:	bf00      	nop
 8001404:	40020000 	.word	0x40020000

08001408 <ILI9341_SPI_Send>:
{
 8001408:	b500      	push	{lr}
 800140a:	b083      	sub	sp, #12
 800140c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 8001410:	2301      	movs	r3, #1
 8001412:	461a      	mov	r2, r3
 8001414:	f10d 0107 	add.w	r1, sp, #7
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <ILI9341_SPI_Send+0x1c>)
 800141a:	f7ff fedc 	bl	80011d6 <HAL_SPI_Transmit>
}
 800141e:	b003      	add	sp, #12
 8001420:	f85d fb04 	ldr.w	pc, [sp], #4
 8001424:	20000060 	.word	0x20000060

08001428 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command) {
 8001428:	b510      	push	{r4, lr}
 800142a:	4604      	mov	r4, r0
	Before_Sending_Command();
 800142c:	f7ff ffcc 	bl	80013c8 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8001430:	4620      	mov	r0, r4
 8001432:	f7ff ffe9 	bl	8001408 <ILI9341_SPI_Send>
}
 8001436:	bd10      	pop	{r4, pc}

08001438 <ILI9341_Send_Data>:
static void ILI9341_Send_Data(unsigned char data) {
 8001438:	b510      	push	{r4, lr}
 800143a:	4604      	mov	r4, r0
	Before_Sending_Data();
 800143c:	f7ff ffd4 	bl	80013e8 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff ffe1 	bl	8001408 <ILI9341_SPI_Send>
}
 8001446:	bd10      	pop	{r4, pc}

08001448 <ILI9341_Send_Burst>:
static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8001448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800144c:	4688      	mov	r8, r1
	unsigned char i, high_bit = color >> 8, low_bit = color;
 800144e:	0a06      	lsrs	r6, r0, #8
 8001450:	b2c4      	uxtb	r4, r0
	CS_ON;
 8001452:	4d44      	ldr	r5, [pc, #272]	@ (8001564 <ILI9341_Send_Burst+0x11c>)
 8001454:	2200      	movs	r2, #0
 8001456:	2104      	movs	r1, #4
 8001458:	4628      	mov	r0, r5
 800145a:	f7ff fb28 	bl	8000aae <HAL_GPIO_WritePin>
	DC_COMMAND;
 800145e:	2200      	movs	r2, #0
 8001460:	2102      	movs	r1, #2
 8001462:	4628      	mov	r0, r5
 8001464:	f7ff fb23 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8001468:	202c      	movs	r0, #44	@ 0x2c
 800146a:	f7ff ffcd 	bl	8001408 <ILI9341_SPI_Send>
	DC_DATA;
 800146e:	2201      	movs	r2, #1
 8001470:	2102      	movs	r1, #2
 8001472:	4628      	mov	r0, r5
 8001474:	f7ff fb1b 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8001478:	4630      	mov	r0, r6
 800147a:	f7ff ffc5 	bl	8001408 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff ffc2 	bl	8001408 <ILI9341_SPI_Send>
	len--;
 8001484:	f108 38ff 	add.w	r8, r8, #4294967295
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8001488:	f3c8 178f 	ubfx	r7, r8, #6, #16
	if (high_bit == low_bit)
 800148c:	42a6      	cmp	r6, r4
 800148e:	d14e      	bne.n	800152e <ILI9341_Send_Burst+0xe6>
 8001490:	e01c      	b.n	80014cc <ILI9341_Send_Burst+0x84>
			i = 16;
 8001492:	2510      	movs	r5, #16
				ILI9341_SPI_Send(low_bit);
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff ffb7 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff ffb4 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff ffb1 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff ffae 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7ff ffab 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff ffa8 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014b8:	4620      	mov	r0, r4
 80014ba:	f7ff ffa5 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff ffa2 	bl	8001408 <ILI9341_SPI_Send>
			} while (--i);
 80014c4:	1e6b      	subs	r3, r5, #1
 80014c6:	f013 05ff 	ands.w	r5, r3, #255	@ 0xff
 80014ca:	d1e3      	bne.n	8001494 <ILI9341_Send_Burst+0x4c>
		while (blocks--) {
 80014cc:	463b      	mov	r3, r7
 80014ce:	3f01      	subs	r7, #1
 80014d0:	b2bf      	uxth	r7, r7
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1dd      	bne.n	8001492 <ILI9341_Send_Burst+0x4a>
		for (i = (unsigned char) len & 63; i--;) {
 80014d6:	f008 023f 	and.w	r2, r8, #63	@ 0x3f
 80014da:	e006      	b.n	80014ea <ILI9341_Send_Burst+0xa2>
			ILI9341_SPI_Send(low_bit);
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff ff93 	bl	8001408 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff ff90 	bl	8001408 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 80014e8:	462a      	mov	r2, r5
 80014ea:	1e53      	subs	r3, r2, #1
 80014ec:	b2dd      	uxtb	r5, r3
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d1f4      	bne.n	80014dc <ILI9341_Send_Burst+0x94>
 80014f2:	e02f      	b.n	8001554 <ILI9341_Send_Burst+0x10c>
			i = 16;
 80014f4:	2510      	movs	r5, #16
				ILI9341_SPI_Send(high_bit);
 80014f6:	4630      	mov	r0, r6
 80014f8:	f7ff ff86 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff ff83 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8001502:	4630      	mov	r0, r6
 8001504:	f7ff ff80 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff ff7d 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 800150e:	4630      	mov	r0, r6
 8001510:	f7ff ff7a 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff ff77 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 800151a:	4630      	mov	r0, r6
 800151c:	f7ff ff74 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff ff71 	bl	8001408 <ILI9341_SPI_Send>
			} while (--i);
 8001526:	1e6b      	subs	r3, r5, #1
 8001528:	f013 05ff 	ands.w	r5, r3, #255	@ 0xff
 800152c:	d1e3      	bne.n	80014f6 <ILI9341_Send_Burst+0xae>
		while (blocks--) {
 800152e:	463b      	mov	r3, r7
 8001530:	3f01      	subs	r7, #1
 8001532:	b2bf      	uxth	r7, r7
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1dd      	bne.n	80014f4 <ILI9341_Send_Burst+0xac>
		for (i = (unsigned char) len & 63; i--;) {
 8001538:	f008 023f 	and.w	r2, r8, #63	@ 0x3f
 800153c:	e006      	b.n	800154c <ILI9341_Send_Burst+0x104>
			ILI9341_SPI_Send(high_bit);
 800153e:	4630      	mov	r0, r6
 8001540:	f7ff ff62 	bl	8001408 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff ff5f 	bl	8001408 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 800154a:	462a      	mov	r2, r5
 800154c:	1e53      	subs	r3, r2, #1
 800154e:	b2dd      	uxtb	r5, r3
 8001550:	2a00      	cmp	r2, #0
 8001552:	d1f4      	bne.n	800153e <ILI9341_Send_Burst+0xf6>
	CS_OFF;
 8001554:	2201      	movs	r2, #1
 8001556:	2104      	movs	r1, #4
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <ILI9341_Send_Burst+0x11c>)
 800155a:	f7ff faa8 	bl	8000aae <HAL_GPIO_WritePin>
}
 800155e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001562:	bf00      	nop
 8001564:	40020000 	.word	0x40020000

08001568 <ILI9341_Reset>:
void ILI9341_Reset() {
 8001568:	b510      	push	{r4, lr}
	RESET_ON;
 800156a:	4c0f      	ldr	r4, [pc, #60]	@ (80015a8 <ILI9341_Reset+0x40>)
 800156c:	2200      	movs	r2, #0
 800156e:	2101      	movs	r1, #1
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff fa9c 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001576:	2032      	movs	r0, #50	@ 0x32
 8001578:	f7ff f928 	bl	80007cc <HAL_Delay>
	RESET_OFF;
 800157c:	2201      	movs	r2, #1
 800157e:	4611      	mov	r1, r2
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff fa94 	bl	8000aae <HAL_GPIO_WritePin>
	CS_ON;
 8001586:	2200      	movs	r2, #0
 8001588:	2104      	movs	r1, #4
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff fa8f 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001590:	2032      	movs	r0, #50	@ 0x32
 8001592:	f7ff f91b 	bl	80007cc <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff ff46 	bl	8001428 <ILI9341_Send_Command>
	CS_OFF;
 800159c:	2201      	movs	r2, #1
 800159e:	2104      	movs	r1, #4
 80015a0:	4620      	mov	r0, r4
 80015a2:	f7ff fa84 	bl	8000aae <HAL_GPIO_WritePin>
}
 80015a6:	bd10      	pop	{r4, pc}
 80015a8:	40020000 	.word	0x40020000

080015ac <ILI9341_Init>:
void ILI9341_Init() {
 80015ac:	b508      	push	{r3, lr}
	ILI9341_SPI_Init();
 80015ae:	f7ff fee7 	bl	8001380 <ILI9341_SPI_Init>
	ILI9341_Reset();
 80015b2:	f7ff ffd9 	bl	8001568 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f7ff ff36 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Command(0xCB);
 80015bc:	20cb      	movs	r0, #203	@ 0xcb
 80015be:	f7ff ff33 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80015c2:	2039      	movs	r0, #57	@ 0x39
 80015c4:	f7ff ff38 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80015c8:	202c      	movs	r0, #44	@ 0x2c
 80015ca:	f7ff ff35 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff ff32 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 80015d4:	2034      	movs	r0, #52	@ 0x34
 80015d6:	f7ff ff2f 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 80015da:	2002      	movs	r0, #2
 80015dc:	f7ff ff2c 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xCF);
 80015e0:	20cf      	movs	r0, #207	@ 0xcf
 80015e2:	f7ff ff21 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff ff26 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80015ec:	20c1      	movs	r0, #193	@ 0xc1
 80015ee:	f7ff ff23 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 80015f2:	2030      	movs	r0, #48	@ 0x30
 80015f4:	f7ff ff20 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xE8);
 80015f8:	20e8      	movs	r0, #232	@ 0xe8
 80015fa:	f7ff ff15 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80015fe:	2085      	movs	r0, #133	@ 0x85
 8001600:	f7ff ff1a 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff ff17 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 800160a:	2078      	movs	r0, #120	@ 0x78
 800160c:	f7ff ff14 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xEA);
 8001610:	20ea      	movs	r0, #234	@ 0xea
 8001612:	f7ff ff09 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff ff0e 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff ff0b 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xED);
 8001622:	20ed      	movs	r0, #237	@ 0xed
 8001624:	f7ff ff00 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8001628:	2064      	movs	r0, #100	@ 0x64
 800162a:	f7ff ff05 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800162e:	2003      	movs	r0, #3
 8001630:	f7ff ff02 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8001634:	2012      	movs	r0, #18
 8001636:	f7ff feff 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 800163a:	2081      	movs	r0, #129	@ 0x81
 800163c:	f7ff fefc 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xF7);
 8001640:	20f7      	movs	r0, #247	@ 0xf7
 8001642:	f7ff fef1 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8001646:	2020      	movs	r0, #32
 8001648:	f7ff fef6 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xC0);
 800164c:	20c0      	movs	r0, #192	@ 0xc0
 800164e:	f7ff feeb 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001652:	2010      	movs	r0, #16
 8001654:	f7ff fef0 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xC1);
 8001658:	20c1      	movs	r0, #193	@ 0xc1
 800165a:	f7ff fee5 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800165e:	2010      	movs	r0, #16
 8001660:	f7ff feea 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xC5);
 8001664:	20c5      	movs	r0, #197	@ 0xc5
 8001666:	f7ff fedf 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 800166a:	203e      	movs	r0, #62	@ 0x3e
 800166c:	f7ff fee4 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8001670:	2028      	movs	r0, #40	@ 0x28
 8001672:	f7ff fee1 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xC7);
 8001676:	20c7      	movs	r0, #199	@ 0xc7
 8001678:	f7ff fed6 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 800167c:	2086      	movs	r0, #134	@ 0x86
 800167e:	f7ff fedb 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0x36);
 8001682:	2036      	movs	r0, #54	@ 0x36
 8001684:	f7ff fed0 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8001688:	2048      	movs	r0, #72	@ 0x48
 800168a:	f7ff fed5 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0x3A);
 800168e:	203a      	movs	r0, #58	@ 0x3a
 8001690:	f7ff feca 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8001694:	2055      	movs	r0, #85	@ 0x55
 8001696:	f7ff fecf 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xB1);
 800169a:	20b1      	movs	r0, #177	@ 0xb1
 800169c:	f7ff fec4 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fec9 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80016a6:	2018      	movs	r0, #24
 80016a8:	f7ff fec6 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xB6);
 80016ac:	20b6      	movs	r0, #182	@ 0xb6
 80016ae:	f7ff febb 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80016b2:	2008      	movs	r0, #8
 80016b4:	f7ff fec0 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80016b8:	2082      	movs	r0, #130	@ 0x82
 80016ba:	f7ff febd 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80016be:	2027      	movs	r0, #39	@ 0x27
 80016c0:	f7ff feba 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xF2);
 80016c4:	20f2      	movs	r0, #242	@ 0xf2
 80016c6:	f7ff feaf 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff feb4 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0x26); //Gamma set
 80016d0:	2026      	movs	r0, #38	@ 0x26
 80016d2:	f7ff fea9 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff feae 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xE0);
 80016dc:	20e0      	movs	r0, #224	@ 0xe0
 80016de:	f7ff fea3 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 80016e2:	200f      	movs	r0, #15
 80016e4:	f7ff fea8 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80016e8:	2031      	movs	r0, #49	@ 0x31
 80016ea:	f7ff fea5 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 80016ee:	202b      	movs	r0, #43	@ 0x2b
 80016f0:	f7ff fea2 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80016f4:	200c      	movs	r0, #12
 80016f6:	f7ff fe9f 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80016fa:	200e      	movs	r0, #14
 80016fc:	f7ff fe9c 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001700:	2008      	movs	r0, #8
 8001702:	f7ff fe99 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8001706:	204e      	movs	r0, #78	@ 0x4e
 8001708:	f7ff fe96 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 800170c:	20f1      	movs	r0, #241	@ 0xf1
 800170e:	f7ff fe93 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8001712:	2037      	movs	r0, #55	@ 0x37
 8001714:	f7ff fe90 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8001718:	2007      	movs	r0, #7
 800171a:	f7ff fe8d 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 800171e:	2010      	movs	r0, #16
 8001720:	f7ff fe8a 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001724:	2003      	movs	r0, #3
 8001726:	f7ff fe87 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800172a:	200e      	movs	r0, #14
 800172c:	f7ff fe84 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8001730:	2009      	movs	r0, #9
 8001732:	f7ff fe81 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff fe7e 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0xE1);
 800173c:	20e1      	movs	r0, #225	@ 0xe1
 800173e:	f7ff fe73 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fe78 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8001748:	200e      	movs	r0, #14
 800174a:	f7ff fe75 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 800174e:	2014      	movs	r0, #20
 8001750:	f7ff fe72 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001754:	2003      	movs	r0, #3
 8001756:	f7ff fe6f 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 800175a:	2011      	movs	r0, #17
 800175c:	f7ff fe6c 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8001760:	2007      	movs	r0, #7
 8001762:	f7ff fe69 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001766:	2031      	movs	r0, #49	@ 0x31
 8001768:	f7ff fe66 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800176c:	20c1      	movs	r0, #193	@ 0xc1
 800176e:	f7ff fe63 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8001772:	2048      	movs	r0, #72	@ 0x48
 8001774:	f7ff fe60 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001778:	2008      	movs	r0, #8
 800177a:	f7ff fe5d 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800177e:	200f      	movs	r0, #15
 8001780:	f7ff fe5a 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8001784:	200c      	movs	r0, #12
 8001786:	f7ff fe57 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800178a:	2031      	movs	r0, #49	@ 0x31
 800178c:	f7ff fe54 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 8001790:	2036      	movs	r0, #54	@ 0x36
 8001792:	f7ff fe51 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001796:	200f      	movs	r0, #15
 8001798:	f7ff fe4e 	bl	8001438 <ILI9341_Send_Data>
	ILI9341_Send_Command(0x11);
 800179c:	2011      	movs	r0, #17
 800179e:	f7ff fe43 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Command(0x29);
 80017a2:	2029      	movs	r0, #41	@ 0x29
 80017a4:	f7ff fe40 	bl	8001428 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80017a8:	202c      	movs	r0, #44	@ 0x2c
 80017aa:	f7ff fe45 	bl	8001438 <ILI9341_Send_Data>
}
 80017ae:	bd08      	pop	{r3, pc}

080017b0 <ILI9341_Set_Rotation>:
void ILI9341_Set_Rotation(unsigned char rotation) {
 80017b0:	b510      	push	{r4, lr}
 80017b2:	4604      	mov	r4, r0
	ILI9341_Send_Command(0x36);
 80017b4:	2036      	movs	r0, #54	@ 0x36
 80017b6:	f7ff fe37 	bl	8001428 <ILI9341_Send_Command>
	switch (rotation) {
 80017ba:	2c03      	cmp	r4, #3
 80017bc:	d80c      	bhi.n	80017d8 <ILI9341_Set_Rotation+0x28>
 80017be:	e8df f004 	tbb	[pc, r4]
 80017c2:	0c02      	.short	0x0c02
 80017c4:	2016      	.short	0x2016
		ILI9341_Send_Data(0x48);
 80017c6:	2048      	movs	r0, #72	@ 0x48
 80017c8:	f7ff fe36 	bl	8001438 <ILI9341_Send_Data>
		X_SIZE = 240;
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <ILI9341_Set_Rotation+0x68>)
 80017ce:	22f0      	movs	r2, #240	@ 0xf0
 80017d0:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017d2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017d6:	605a      	str	r2, [r3, #4]
}
 80017d8:	bd10      	pop	{r4, pc}
		ILI9341_Send_Data(0x28);
 80017da:	2028      	movs	r0, #40	@ 0x28
 80017dc:	f7ff fe2c 	bl	8001438 <ILI9341_Send_Data>
		X_SIZE = 320;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <ILI9341_Set_Rotation+0x68>)
 80017e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017e6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017e8:	22f0      	movs	r2, #240	@ 0xf0
 80017ea:	605a      	str	r2, [r3, #4]
		break;
 80017ec:	e7f4      	b.n	80017d8 <ILI9341_Set_Rotation+0x28>
		ILI9341_Send_Data(0x88);
 80017ee:	2088      	movs	r0, #136	@ 0x88
 80017f0:	f7ff fe22 	bl	8001438 <ILI9341_Send_Data>
		X_SIZE = 240;
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <ILI9341_Set_Rotation+0x68>)
 80017f6:	22f0      	movs	r2, #240	@ 0xf0
 80017f8:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017fe:	605a      	str	r2, [r3, #4]
		break;
 8001800:	e7ea      	b.n	80017d8 <ILI9341_Set_Rotation+0x28>
		ILI9341_Send_Data(0xE8);
 8001802:	20e8      	movs	r0, #232	@ 0xe8
 8001804:	f7ff fe18 	bl	8001438 <ILI9341_Send_Data>
		X_SIZE = 320;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <ILI9341_Set_Rotation+0x68>)
 800180a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800180e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8001810:	22f0      	movs	r2, #240	@ 0xf0
 8001812:	605a      	str	r2, [r3, #4]
}
 8001814:	e7e0      	b.n	80017d8 <ILI9341_Set_Rotation+0x28>
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <ILI9341_SPI_Send_32>:
void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	4606      	mov	r6, r0
 8001820:	460c      	mov	r4, r1
	CS_ON;
 8001822:	4d11      	ldr	r5, [pc, #68]	@ (8001868 <ILI9341_SPI_Send_32+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	2104      	movs	r1, #4
 8001828:	4628      	mov	r0, r5
 800182a:	f7ff f940 	bl	8000aae <HAL_GPIO_WritePin>
	DC_COMMAND;
 800182e:	2200      	movs	r2, #0
 8001830:	2102      	movs	r1, #2
 8001832:	4628      	mov	r0, r5
 8001834:	f7ff f93b 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001838:	4630      	mov	r0, r6
 800183a:	f7ff fde5 	bl	8001408 <ILI9341_SPI_Send>
	DC_DATA;
 800183e:	2201      	movs	r2, #1
 8001840:	2102      	movs	r1, #2
 8001842:	4628      	mov	r0, r5
 8001844:	f7ff f933 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8001848:	0e20      	lsrs	r0, r4, #24
 800184a:	f7ff fddd 	bl	8001408 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 800184e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001852:	f7ff fdd9 	bl	8001408 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8001856:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800185a:	f7ff fdd5 	bl	8001408 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800185e:	b2e0      	uxtb	r0, r4
 8001860:	f7ff fdd2 	bl	8001408 <ILI9341_SPI_Send>
}
 8001864:	bd70      	pop	{r4, r5, r6, pc}
 8001866:	bf00      	nop
 8001868:	40020000 	.word	0x40020000

0800186c <ILI9341_Set_Address>:
void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 800186c:	b538      	push	{r3, r4, r5, lr}
 800186e:	460d      	mov	r5, r1
 8001870:	461c      	mov	r4, r3
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8001872:	ea42 4100 	orr.w	r1, r2, r0, lsl #16
 8001876:	202a      	movs	r0, #42	@ 0x2a
 8001878:	f7ff ffd0 	bl	800181c <ILI9341_SPI_Send_32>
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800187c:	ea44 4105 	orr.w	r1, r4, r5, lsl #16
 8001880:	202b      	movs	r0, #43	@ 0x2b
 8001882:	f7ff ffcb 	bl	800181c <ILI9341_SPI_Send_32>
}
 8001886:	bd38      	pop	{r3, r4, r5, pc}

08001888 <ILI9341_Draw_Char>:
{
 8001888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800188c:	4615      	mov	r5, r2
 800188e:	461e      	mov	r6, r3
 8001890:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8001894:	f89d 301c 	ldrb.w	r3, [sp, #28]
	switch(size)
 8001898:	2b01      	cmp	r3, #1
 800189a:	d003      	beq.n	80018a4 <ILI9341_Draw_Char+0x1c>
 800189c:	2b02      	cmp	r3, #2
 800189e:	d03d      	beq.n	800191c <ILI9341_Draw_Char+0x94>
}
 80018a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ILI9341_Set_Address(x, y, x+5, y+8);
 80018a4:	f101 0308 	add.w	r3, r1, #8
 80018a8:	1d42      	adds	r2, r0, #5
 80018aa:	f7ff ffdf 	bl	800186c <ILI9341_Set_Address>
			DC_COMMAND;
 80018ae:	4c3a      	ldr	r4, [pc, #232]	@ (8001998 <ILI9341_Draw_Char+0x110>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	2102      	movs	r1, #2
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff f8fa 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 80018ba:	202c      	movs	r0, #44	@ 0x2c
 80018bc:	f7ff fda4 	bl	8001408 <ILI9341_SPI_Send>
			DC_DATA;
 80018c0:	2201      	movs	r2, #1
 80018c2:	2102      	movs	r1, #2
 80018c4:	4620      	mov	r0, r4
 80018c6:	f7ff f8f2 	bl	8000aae <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 80018ca:	f04f 0800 	mov.w	r8, #0
 80018ce:	e020      	b.n	8001912 <ILI9341_Draw_Char+0x8a>
						ILI9341_SPI_Send(phone>>8);
 80018d0:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80018d4:	f7ff fd98 	bl	8001408 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 80018d8:	b2f0      	uxtb	r0, r6
 80018da:	f7ff fd95 	bl	8001408 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 80018de:	3401      	adds	r4, #1
 80018e0:	2c07      	cmp	r4, #7
 80018e2:	dc14      	bgt.n	800190e <ILI9341_Draw_Char+0x86>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 80018e4:	f1a7 0220 	sub.w	r2, r7, #32
 80018e8:	4b2c      	ldr	r3, [pc, #176]	@ (800199c <ILI9341_Draw_Char+0x114>)
 80018ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80018ee:	f813 3008 	ldrb.w	r3, [r3, r8]
 80018f2:	f1c4 0207 	rsb	r2, r4, #7
 80018f6:	4113      	asrs	r3, r2
 80018f8:	f013 0f01 	tst.w	r3, #1
 80018fc:	d0e8      	beq.n	80018d0 <ILI9341_Draw_Char+0x48>
						ILI9341_SPI_Send(color>>8);
 80018fe:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8001902:	f7ff fd81 	bl	8001408 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8001906:	b2e8      	uxtb	r0, r5
 8001908:	f7ff fd7e 	bl	8001408 <ILI9341_SPI_Send>
 800190c:	e7e7      	b.n	80018de <ILI9341_Draw_Char+0x56>
			for(h=0;h<8;h++)
 800190e:	f108 0801 	add.w	r8, r8, #1
 8001912:	f1b8 0f07 	cmp.w	r8, #7
 8001916:	dcc3      	bgt.n	80018a0 <ILI9341_Draw_Char+0x18>
				for(i=2;i<8;i++)
 8001918:	2402      	movs	r4, #2
 800191a:	e7e1      	b.n	80018e0 <ILI9341_Draw_Char+0x58>
			ILI9341_Set_Address(x, y, x+7, y+16);
 800191c:	f101 0310 	add.w	r3, r1, #16
 8001920:	1dc2      	adds	r2, r0, #7
 8001922:	f7ff ffa3 	bl	800186c <ILI9341_Set_Address>
			DC_COMMAND;
 8001926:	4c1c      	ldr	r4, [pc, #112]	@ (8001998 <ILI9341_Draw_Char+0x110>)
 8001928:	2200      	movs	r2, #0
 800192a:	2102      	movs	r1, #2
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff f8be 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001932:	202c      	movs	r0, #44	@ 0x2c
 8001934:	f7ff fd68 	bl	8001408 <ILI9341_SPI_Send>
			DC_DATA;
 8001938:	2201      	movs	r2, #1
 800193a:	2102      	movs	r1, #2
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff f8b6 	bl	8000aae <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8001942:	f04f 0800 	mov.w	r8, #0
 8001946:	e021      	b.n	800198c <ILI9341_Draw_Char+0x104>
						ILI9341_SPI_Send(phone>>8);
 8001948:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800194c:	f7ff fd5c 	bl	8001408 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8001950:	b2f0      	uxtb	r0, r6
 8001952:	f7ff fd59 	bl	8001408 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8001956:	3401      	adds	r4, #1
 8001958:	2c07      	cmp	r4, #7
 800195a:	dc15      	bgt.n	8001988 <ILI9341_Draw_Char+0x100>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 800195c:	f1a7 0320 	sub.w	r3, r7, #32
 8001960:	490e      	ldr	r1, [pc, #56]	@ (800199c <ILI9341_Draw_Char+0x114>)
 8001962:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8001966:	4441      	add	r1, r8
 8001968:	f891 32d8 	ldrb.w	r3, [r1, #728]	@ 0x2d8
 800196c:	f1c4 0207 	rsb	r2, r4, #7
 8001970:	4113      	asrs	r3, r2
 8001972:	f013 0f01 	tst.w	r3, #1
 8001976:	d0e7      	beq.n	8001948 <ILI9341_Draw_Char+0xc0>
						ILI9341_SPI_Send(color>>8);
 8001978:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800197c:	f7ff fd44 	bl	8001408 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8001980:	b2e8      	uxtb	r0, r5
 8001982:	f7ff fd41 	bl	8001408 <ILI9341_SPI_Send>
 8001986:	e7e6      	b.n	8001956 <ILI9341_Draw_Char+0xce>
			for(h=0;h<16;h++)
 8001988:	f108 0801 	add.w	r8, r8, #1
 800198c:	f1b8 0f0f 	cmp.w	r8, #15
 8001990:	dc86      	bgt.n	80018a0 <ILI9341_Draw_Char+0x18>
				for(i=0;i<8;i++)
 8001992:	2400      	movs	r4, #0
 8001994:	e7e0      	b.n	8001958 <ILI9341_Draw_Char+0xd0>
 8001996:	bf00      	nop
 8001998:	40020000 	.word	0x40020000
 800199c:	0803d35c 	.word	0x0803d35c

080019a0 <ILI9341_Fill_Screen>:
{
 80019a0:	b538      	push	{r3, r4, r5, lr}
 80019a2:	4605      	mov	r5, r0
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80019a4:	4c08      	ldr	r4, [pc, #32]	@ (80019c8 <ILI9341_Fill_Screen+0x28>)
 80019a6:	6863      	ldr	r3, [r4, #4]
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	3a01      	subs	r2, #1
 80019ae:	2100      	movs	r1, #0
 80019b0:	4608      	mov	r0, r1
 80019b2:	f7ff ff5b 	bl	800186c <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	6861      	ldr	r1, [r4, #4]
 80019ba:	fb03 f101 	mul.w	r1, r3, r1
 80019be:	b2a8      	uxth	r0, r5
 80019c0:	f7ff fd42 	bl	8001448 <ILI9341_Send_Burst>
}
 80019c4:	bd38      	pop	{r3, r4, r5, pc}
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008

080019cc <ILI9341_Draw_Pixel>:
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 80019cc:	2800      	cmp	r0, #0
 80019ce:	db25      	blt.n	8001a1c <ILI9341_Draw_Pixel+0x50>
{
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	4614      	mov	r4, r2
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 80019d4:	2900      	cmp	r1, #0
 80019d6:	db06      	blt.n	80019e6 <ILI9341_Draw_Pixel+0x1a>
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <ILI9341_Draw_Pixel+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4290      	cmp	r0, r2
 80019de:	d202      	bcs.n	80019e6 <ILI9341_Draw_Pixel+0x1a>
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4299      	cmp	r1, r3
 80019e4:	d300      	bcc.n	80019e8 <ILI9341_Draw_Pixel+0x1c>
}
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 80019e8:	3b01      	subs	r3, #1
 80019ea:	3a01      	subs	r2, #1
 80019ec:	f7ff ff3e 	bl	800186c <ILI9341_Set_Address>
	DC_COMMAND;
 80019f0:	4d0c      	ldr	r5, [pc, #48]	@ (8001a24 <ILI9341_Draw_Pixel+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	2102      	movs	r1, #2
 80019f6:	4628      	mov	r0, r5
 80019f8:	f7ff f859 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 80019fc:	202c      	movs	r0, #44	@ 0x2c
 80019fe:	f7ff fd03 	bl	8001408 <ILI9341_SPI_Send>
	DC_DATA;
 8001a02:	2201      	movs	r2, #1
 8001a04:	2102      	movs	r1, #2
 8001a06:	4628      	mov	r0, r5
 8001a08:	f7ff f851 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8001a0c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001a10:	f7ff fcfa 	bl	8001408 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8001a14:	b2e0      	uxtb	r0, r4
 8001a16:	f7ff fcf7 	bl	8001408 <ILI9341_SPI_Send>
 8001a1a:	e7e4      	b.n	80019e6 <ILI9341_Draw_Pixel+0x1a>
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008
 8001a24:	40020000 	.word	0x40020000

08001a28 <ILI9341_Draw_Line>:
{
 8001a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	4682      	mov	sl, r0
 8001a30:	460c      	mov	r4, r1
 8001a32:	4616      	mov	r6, r2
 8001a34:	4698      	mov	r8, r3
 8001a36:	990c      	ldr	r1, [sp, #48]	@ 0x30
	int steep = abs(y2-y1) > abs(x2-x1);
 8001a38:	eba1 0902 	sub.w	r9, r1, r2
 8001a3c:	f1b9 0f00 	cmp.w	r9, #0
 8001a40:	bfb8      	it	lt
 8001a42:	f1c9 0900 	rsblt	r9, r9, #0
 8001a46:	1b1b      	subs	r3, r3, r4
 8001a48:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 8001a4c:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
	if (steep)
 8001a50:	45d9      	cmp	r9, fp
 8001a52:	dd06      	ble.n	8001a62 <ILI9341_Draw_Line+0x3a>
		swap(x1,y1);
 8001a54:	b222      	sxth	r2, r4
		swap(x2,y2);
 8001a56:	fa0f f088 	sxth.w	r0, r8
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	4601      	mov	r1, r0
		swap(x1,y1);
 8001a5e:	4634      	mov	r4, r6
 8001a60:	4616      	mov	r6, r2
	if(x1>x2)
 8001a62:	4544      	cmp	r4, r8
 8001a64:	d905      	bls.n	8001a72 <ILI9341_Draw_Line+0x4a>
		swap(x1,x2);
 8001a66:	b222      	sxth	r2, r4
		swap(y1,y2);
 8001a68:	b230      	sxth	r0, r6
 8001a6a:	460e      	mov	r6, r1
 8001a6c:	4601      	mov	r1, r0
		swap(x1,x2);
 8001a6e:	4644      	mov	r4, r8
 8001a70:	4690      	mov	r8, r2
	dx = (x2 - x1);
 8001a72:	eba8 0204 	sub.w	r2, r8, r4
	dy = abs(y2 - y1);
 8001a76:	1b8f      	subs	r7, r1, r6
 8001a78:	2f00      	cmp	r7, #0
 8001a7a:	bfb8      	it	lt
 8001a7c:	427f      	neglt	r7, r7
	int err = dx / 2;
 8001a7e:	eb02 75d2 	add.w	r5, r2, r2, lsr #31
 8001a82:	106d      	asrs	r5, r5, #1
	if(y1 < y2)
 8001a84:	428e      	cmp	r6, r1
 8001a86:	d31a      	bcc.n	8001abe <ILI9341_Draw_Line+0x96>
		ystep = -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	9201      	str	r2, [sp, #4]
 8001a90:	e007      	b.n	8001aa2 <ILI9341_Draw_Line+0x7a>
			ILI9341_Draw_Pixel(x1, y1, color);
 8001a92:	4652      	mov	r2, sl
 8001a94:	4631      	mov	r1, r6
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7ff ff98 	bl	80019cc <ILI9341_Draw_Pixel>
		if (err < 0)
 8001a9c:	1bed      	subs	r5, r5, r7
 8001a9e:	d40a      	bmi.n	8001ab6 <ILI9341_Draw_Line+0x8e>
	for (; x1 <= x2; x1++)
 8001aa0:	3401      	adds	r4, #1
 8001aa2:	4544      	cmp	r4, r8
 8001aa4:	d80f      	bhi.n	8001ac6 <ILI9341_Draw_Line+0x9e>
		if (steep)
 8001aa6:	45d9      	cmp	r9, fp
 8001aa8:	ddf3      	ble.n	8001a92 <ILI9341_Draw_Line+0x6a>
			ILI9341_Draw_Pixel(y1, x1, color);
 8001aaa:	4652      	mov	r2, sl
 8001aac:	4621      	mov	r1, r4
 8001aae:	4630      	mov	r0, r6
 8001ab0:	f7ff ff8c 	bl	80019cc <ILI9341_Draw_Pixel>
 8001ab4:	e7f2      	b.n	8001a9c <ILI9341_Draw_Line+0x74>
			y1 += ystep;
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	441e      	add	r6, r3
			err = dx;
 8001aba:	9d01      	ldr	r5, [sp, #4]
 8001abc:	e7f0      	b.n	8001aa0 <ILI9341_Draw_Line+0x78>
		ystep = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	9201      	str	r2, [sp, #4]
 8001ac4:	e7ed      	b.n	8001aa2 <ILI9341_Draw_Line+0x7a>
}
 8001ac6:	b003      	add	sp, #12
 8001ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001acc <ILI9341_Draw_Empty_Rectangle>:
{
 8001acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	460d      	mov	r5, r1
 8001ad6:	4617      	mov	r7, r2
 8001ad8:	461e      	mov	r6, r3
 8001ada:	f8dd 8020 	ldr.w	r8, [sp, #32]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 8001ade:	9200      	str	r2, [sp, #0]
 8001ae0:	f7ff ffa2 	bl	8001a28 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 8001ae4:	f8cd 8000 	str.w	r8, [sp]
 8001ae8:	4633      	mov	r3, r6
 8001aea:	463a      	mov	r2, r7
 8001aec:	4631      	mov	r1, r6
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff ff9a 	bl	8001a28 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 8001af4:	f8cd 8000 	str.w	r8, [sp]
 8001af8:	462b      	mov	r3, r5
 8001afa:	463a      	mov	r2, r7
 8001afc:	4629      	mov	r1, r5
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff ff92 	bl	8001a28 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 8001b04:	f8cd 8000 	str.w	r8, [sp]
 8001b08:	4633      	mov	r3, r6
 8001b0a:	4642      	mov	r2, r8
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff ff8a 	bl	8001a28 <ILI9341_Draw_Line>
}
 8001b14:	b002      	add	sp, #8
 8001b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001b1c <ILI9341_Draw_Circle>:
void ILI9341_Draw_Circle(unsigned int x0, unsigned int y0, int r, unsigned int color, unsigned char flood) {
 8001b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b20:	b087      	sub	sp, #28
 8001b22:	4681      	mov	r9, r0
 8001b24:	9100      	str	r1, [sp, #0]
 8001b26:	4617      	mov	r7, r2
 8001b28:	461c      	mov	r4, r3
 8001b2a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
	int f = 1 - r;
 8001b2e:	f1c2 0601 	rsb	r6, r2, #1
 8001b32:	9601      	str	r6, [sp, #4]
	int ddF_y = -2 * r;
 8001b34:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 8001b38:	0052      	lsls	r2, r2, #1
 8001b3a:	9203      	str	r2, [sp, #12]
	if (flood == 0) {
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d167      	bne.n	8001c10 <ILI9341_Draw_Circle+0xf4>
 8001b40:	460d      	mov	r5, r1
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 8001b42:	4622      	mov	r2, r4
 8001b44:	1879      	adds	r1, r7, r1
 8001b46:	f7ff ff41 	bl	80019cc <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	1be9      	subs	r1, r5, r7
 8001b4e:	4648      	mov	r0, r9
 8001b50:	f7ff ff3c 	bl	80019cc <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 + r, y0, color);
 8001b54:	4622      	mov	r2, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	eb07 0009 	add.w	r0, r7, r9
 8001b5c:	f7ff ff36 	bl	80019cc <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 - r, y0, color);
 8001b60:	4622      	mov	r2, r4
 8001b62:	4629      	mov	r1, r5
 8001b64:	eba9 0007 	sub.w	r0, r9, r7
 8001b68:	f7ff ff30 	bl	80019cc <ILI9341_Draw_Pixel>
	int x = 0;
 8001b6c:	2500      	movs	r5, #0
	int ddF_x = 1;
 8001b6e:	f04f 0b01 	mov.w	fp, #1
 8001b72:	46b2      	mov	sl, r6
 8001b74:	f8cd b004 	str.w	fp, [sp, #4]
		while (x < y) {
 8001b78:	e03e      	b.n	8001bf8 <ILI9341_Draw_Circle+0xdc>
			x++;
 8001b7a:	3501      	adds	r5, #1
			ddF_x += 2;
 8001b7c:	9b01      	ldr	r3, [sp, #4]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	9301      	str	r3, [sp, #4]
			f += ddF_x;
 8001b82:	449a      	add	sl, r3
			ILI9341_Draw_Pixel(x0 + x, y0 + y, color);
 8001b84:	eb05 0b09 	add.w	fp, r5, r9
 8001b88:	9b00      	ldr	r3, [sp, #0]
 8001b8a:	18fe      	adds	r6, r7, r3
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	4631      	mov	r1, r6
 8001b90:	4658      	mov	r0, fp
 8001b92:	f7ff ff1b 	bl	80019cc <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 + y, color);
 8001b96:	eba9 0805 	sub.w	r8, r9, r5
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	4631      	mov	r1, r6
 8001b9e:	4640      	mov	r0, r8
 8001ba0:	f7ff ff14 	bl	80019cc <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + x, y0 - y, color);
 8001ba4:	9b00      	ldr	r3, [sp, #0]
 8001ba6:	1bde      	subs	r6, r3, r7
 8001ba8:	4622      	mov	r2, r4
 8001baa:	4631      	mov	r1, r6
 8001bac:	4658      	mov	r0, fp
 8001bae:	f7ff ff0d 	bl	80019cc <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 - y, color);
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	4631      	mov	r1, r6
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	f7ff ff08 	bl	80019cc <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 + x, color);
 8001bbc:	eb07 0809 	add.w	r8, r7, r9
 8001bc0:	9b00      	ldr	r3, [sp, #0]
 8001bc2:	eb05 0b03 	add.w	fp, r5, r3
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	4659      	mov	r1, fp
 8001bca:	4640      	mov	r0, r8
 8001bcc:	f7ff fefe 	bl	80019cc <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 + x, color);
 8001bd0:	eba9 0607 	sub.w	r6, r9, r7
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	4659      	mov	r1, fp
 8001bd8:	4630      	mov	r0, r6
 8001bda:	f7ff fef7 	bl	80019cc <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 - x, color);
 8001bde:	9b00      	ldr	r3, [sp, #0]
 8001be0:	eba3 0b05 	sub.w	fp, r3, r5
 8001be4:	4622      	mov	r2, r4
 8001be6:	4659      	mov	r1, fp
 8001be8:	4640      	mov	r0, r8
 8001bea:	f7ff feef 	bl	80019cc <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 - x, color);
 8001bee:	4622      	mov	r2, r4
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	f7ff feea 	bl	80019cc <ILI9341_Draw_Pixel>
		while (x < y) {
 8001bf8:	42bd      	cmp	r5, r7
 8001bfa:	f280 80e6 	bge.w	8001dca <ILI9341_Draw_Circle+0x2ae>
			if (f >= 0) {
 8001bfe:	f1ba 0f00 	cmp.w	sl, #0
 8001c02:	dbba      	blt.n	8001b7a <ILI9341_Draw_Circle+0x5e>
				y--;
 8001c04:	3f01      	subs	r7, #1
				ddF_y += 2;
 8001c06:	9b03      	ldr	r3, [sp, #12]
 8001c08:	3302      	adds	r3, #2
 8001c0a:	9303      	str	r3, [sp, #12]
				f += ddF_y;
 8001c0c:	449a      	add	sl, r3
 8001c0e:	e7b4      	b.n	8001b7a <ILI9341_Draw_Circle+0x5e>
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 8001c10:	4622      	mov	r2, r4
 8001c12:	9d00      	ldr	r5, [sp, #0]
 8001c14:	1979      	adds	r1, r7, r5
 8001c16:	f7ff fed9 	bl	80019cc <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	1be9      	subs	r1, r5, r7
 8001c1e:	4648      	mov	r0, r9
 8001c20:	f7ff fed4 	bl	80019cc <ILI9341_Draw_Pixel>
		ILI9341_Set_Address(x0 - r, y0, x0 + r, y0);
 8001c24:	462b      	mov	r3, r5
 8001c26:	eb07 0209 	add.w	r2, r7, r9
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	eba9 0007 	sub.w	r0, r9, r7
 8001c30:	f7ff fe1c 	bl	800186c <ILI9341_Set_Address>
		DC_COMMAND;
 8001c34:	4d66      	ldr	r5, [pc, #408]	@ (8001dd0 <ILI9341_Draw_Circle+0x2b4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	f7fe ff37 	bl	8000aae <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 8001c40:	202c      	movs	r0, #44	@ 0x2c
 8001c42:	f7ff fbe1 	bl	8001408 <ILI9341_SPI_Send>
		DC_DATA;
 8001c46:	2201      	movs	r2, #1
 8001c48:	2102      	movs	r1, #2
 8001c4a:	4628      	mov	r0, r5
 8001c4c:	f7fe ff2f 	bl	8000aae <HAL_GPIO_WritePin>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++) {
 8001c50:	2500      	movs	r5, #0
 8001c52:	9e03      	ldr	r6, [sp, #12]
 8001c54:	e007      	b.n	8001c66 <ILI9341_Draw_Circle+0x14a>
			ILI9341_SPI_Send(color >> 8);
 8001c56:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001c5a:	f7ff fbd5 	bl	8001408 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(color);
 8001c5e:	b2e0      	uxtb	r0, r4
 8001c60:	f7ff fbd2 	bl	8001408 <ILI9341_SPI_Send>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++) {
 8001c64:	3501      	adds	r5, #1
 8001c66:	f1c6 0301 	rsb	r3, r6, #1
 8001c6a:	42ab      	cmp	r3, r5
 8001c6c:	d8f3      	bhi.n	8001c56 <ILI9341_Draw_Circle+0x13a>
	int x = 0;
 8001c6e:	f04f 0b00 	mov.w	fp, #0
	int ddF_x = 1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	9304      	str	r3, [sp, #16]
 8001c76:	e077      	b.n	8001d68 <ILI9341_Draw_Circle+0x24c>
				ILI9341_SPI_Send(color >> 8);
 8001c78:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001c7c:	f7ff fbc4 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8001c80:	b2e0      	uxtb	r0, r4
 8001c82:	f7ff fbc1 	bl	8001408 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8001c86:	3601      	adds	r6, #1
 8001c88:	ea4f 054b 	mov.w	r5, fp, lsl #1
 8001c8c:	3501      	adds	r5, #1
 8001c8e:	42b5      	cmp	r5, r6
 8001c90:	d8f2      	bhi.n	8001c78 <ILI9341_Draw_Circle+0x15c>
			ILI9341_Set_Address(x0 - x, y0 - y, x0 + x, y0 - y);
 8001c92:	9b00      	ldr	r3, [sp, #0]
 8001c94:	eba3 010a 	sub.w	r1, r3, sl
 8001c98:	460b      	mov	r3, r1
 8001c9a:	9a05      	ldr	r2, [sp, #20]
 8001c9c:	4640      	mov	r0, r8
 8001c9e:	f7ff fde5 	bl	800186c <ILI9341_Set_Address>
			DC_COMMAND;
 8001ca2:	4e4b      	ldr	r6, [pc, #300]	@ (8001dd0 <ILI9341_Draw_Circle+0x2b4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4630      	mov	r0, r6
 8001caa:	f7fe ff00 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001cae:	202c      	movs	r0, #44	@ 0x2c
 8001cb0:	f7ff fbaa 	bl	8001408 <ILI9341_SPI_Send>
			DC_DATA;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f7fe fef8 	bl	8000aae <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8001cbe:	2600      	movs	r6, #0
 8001cc0:	e007      	b.n	8001cd2 <ILI9341_Draw_Circle+0x1b6>
				ILI9341_SPI_Send(color >> 8);
 8001cc2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001cc6:	f7ff fb9f 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8001cca:	b2e0      	uxtb	r0, r4
 8001ccc:	f7ff fb9c 	bl	8001408 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8001cd0:	3601      	adds	r6, #1
 8001cd2:	42b5      	cmp	r5, r6
 8001cd4:	d8f5      	bhi.n	8001cc2 <ILI9341_Draw_Circle+0x1a6>
			ILI9341_Set_Address(x0 - y, y0 + x, x0 + y, y0 + x);
 8001cd6:	eba9 080a 	sub.w	r8, r9, sl
 8001cda:	9b02      	ldr	r3, [sp, #8]
 8001cdc:	9a00      	ldr	r2, [sp, #0]
 8001cde:	1899      	adds	r1, r3, r2
 8001ce0:	44ca      	add	sl, r9
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4652      	mov	r2, sl
 8001ce6:	4640      	mov	r0, r8
 8001ce8:	f7ff fdc0 	bl	800186c <ILI9341_Set_Address>
			DC_COMMAND;
 8001cec:	4d38      	ldr	r5, [pc, #224]	@ (8001dd0 <ILI9341_Draw_Circle+0x2b4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	f7fe fedb 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001cf8:	202c      	movs	r0, #44	@ 0x2c
 8001cfa:	f7ff fb85 	bl	8001408 <ILI9341_SPI_Send>
			DC_DATA;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2102      	movs	r1, #2
 8001d02:	4628      	mov	r0, r5
 8001d04:	f7fe fed3 	bl	8000aae <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8001d08:	2600      	movs	r6, #0
 8001d0a:	e007      	b.n	8001d1c <ILI9341_Draw_Circle+0x200>
				ILI9341_SPI_Send(color >> 8);
 8001d0c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001d10:	f7ff fb7a 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8001d14:	b2e0      	uxtb	r0, r4
 8001d16:	f7ff fb77 	bl	8001408 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8001d1a:	3601      	adds	r6, #1
 8001d1c:	007d      	lsls	r5, r7, #1
 8001d1e:	3501      	adds	r5, #1
 8001d20:	42b5      	cmp	r5, r6
 8001d22:	d8f3      	bhi.n	8001d0c <ILI9341_Draw_Circle+0x1f0>
			ILI9341_Set_Address(x0 - y, y0 - x, x0 + y, y0 - x);
 8001d24:	9b00      	ldr	r3, [sp, #0]
 8001d26:	9a02      	ldr	r2, [sp, #8]
 8001d28:	1a99      	subs	r1, r3, r2
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4652      	mov	r2, sl
 8001d2e:	4640      	mov	r0, r8
 8001d30:	f7ff fd9c 	bl	800186c <ILI9341_Set_Address>
			DC_COMMAND;
 8001d34:	4e26      	ldr	r6, [pc, #152]	@ (8001dd0 <ILI9341_Draw_Circle+0x2b4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	2102      	movs	r1, #2
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7fe feb7 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001d40:	202c      	movs	r0, #44	@ 0x2c
 8001d42:	f7ff fb61 	bl	8001408 <ILI9341_SPI_Send>
			DC_DATA;
 8001d46:	2201      	movs	r2, #1
 8001d48:	2102      	movs	r1, #2
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	f7fe feaf 	bl	8000aae <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8001d50:	2600      	movs	r6, #0
 8001d52:	e007      	b.n	8001d64 <ILI9341_Draw_Circle+0x248>
				ILI9341_SPI_Send(color >> 8);
 8001d54:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001d58:	f7ff fb56 	bl	8001408 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8001d5c:	b2e0      	uxtb	r0, r4
 8001d5e:	f7ff fb53 	bl	8001408 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8001d62:	3601      	adds	r6, #1
 8001d64:	42b5      	cmp	r5, r6
 8001d66:	d8f5      	bhi.n	8001d54 <ILI9341_Draw_Circle+0x238>
		while (x < y) {
 8001d68:	45bb      	cmp	fp, r7
 8001d6a:	da2e      	bge.n	8001dca <ILI9341_Draw_Circle+0x2ae>
			if (f >= 0) {
 8001d6c:	9b01      	ldr	r3, [sp, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db05      	blt.n	8001d7e <ILI9341_Draw_Circle+0x262>
				y--;
 8001d72:	3f01      	subs	r7, #1
				ddF_y += 2;
 8001d74:	9a03      	ldr	r2, [sp, #12]
 8001d76:	3202      	adds	r2, #2
 8001d78:	9203      	str	r2, [sp, #12]
				f += ddF_y;
 8001d7a:	4413      	add	r3, r2
 8001d7c:	9301      	str	r3, [sp, #4]
			x++;
 8001d7e:	f10b 0b01 	add.w	fp, fp, #1
			ddF_x += 2;
 8001d82:	9b04      	ldr	r3, [sp, #16]
 8001d84:	3302      	adds	r3, #2
 8001d86:	9304      	str	r3, [sp, #16]
			f += ddF_x;
 8001d88:	9a01      	ldr	r2, [sp, #4]
 8001d8a:	441a      	add	r2, r3
 8001d8c:	9201      	str	r2, [sp, #4]
			ILI9341_Set_Address(x0 - x, y0 + y, x0 + x, y0 + y);
 8001d8e:	f8cd b008 	str.w	fp, [sp, #8]
 8001d92:	eba9 080b 	sub.w	r8, r9, fp
 8001d96:	46ba      	mov	sl, r7
 8001d98:	9b00      	ldr	r3, [sp, #0]
 8001d9a:	18f9      	adds	r1, r7, r3
 8001d9c:	eb0b 0209 	add.w	r2, fp, r9
 8001da0:	9205      	str	r2, [sp, #20]
 8001da2:	460b      	mov	r3, r1
 8001da4:	4640      	mov	r0, r8
 8001da6:	f7ff fd61 	bl	800186c <ILI9341_Set_Address>
			DC_COMMAND;
 8001daa:	4d09      	ldr	r5, [pc, #36]	@ (8001dd0 <ILI9341_Draw_Circle+0x2b4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	2102      	movs	r1, #2
 8001db0:	4628      	mov	r0, r5
 8001db2:	f7fe fe7c 	bl	8000aae <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8001db6:	202c      	movs	r0, #44	@ 0x2c
 8001db8:	f7ff fb26 	bl	8001408 <ILI9341_SPI_Send>
			DC_DATA;
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2102      	movs	r1, #2
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f7fe fe74 	bl	8000aae <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	e75e      	b.n	8001c88 <ILI9341_Draw_Circle+0x16c>
}
 8001dca:	b007      	add	sp, #28
 8001dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <ILI9341_Draw_String>:
{
 8001dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460f      	mov	r7, r1
 8001dde:	4691      	mov	r9, r2
 8001de0:	469a      	mov	sl, r3
 8001de2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8001de4:	f89d 502c 	ldrb.w	r5, [sp, #44]	@ 0x2c
	switch (size)
 8001de8:	2d01      	cmp	r5, #1
 8001dea:	d010      	beq.n	8001e0e <ILI9341_Draw_String+0x3a>
 8001dec:	2d02      	cmp	r5, #2
 8001dee:	d01c      	beq.n	8001e2a <ILI9341_Draw_String+0x56>
}
 8001df0:	b002      	add	sp, #8
 8001df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 8001df6:	9501      	str	r5, [sp, #4]
 8001df8:	9200      	str	r2, [sp, #0]
 8001dfa:	4653      	mov	r3, sl
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	4639      	mov	r1, r7
 8001e00:	4620      	mov	r0, r4
 8001e02:	f7ff fd41 	bl	8001888 <ILI9341_Draw_Char>
			x += size*8-2;
 8001e06:	44a0      	add	r8, r4
 8001e08:	f1a8 0402 	sub.w	r4, r8, #2
			*str++;
 8001e0c:	3601      	adds	r6, #1
		while (*str)
 8001e0e:	7832      	ldrb	r2, [r6, #0]
 8001e10:	2a00      	cmp	r2, #0
 8001e12:	d0ed      	beq.n	8001df0 <ILI9341_Draw_String+0x1c>
			if ((x+(size*8))>X_SIZE)
 8001e14:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8001e18:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8001e1c:	4913      	ldr	r1, [pc, #76]	@ (8001e6c <ILI9341_Draw_String+0x98>)
 8001e1e:	6809      	ldr	r1, [r1, #0]
 8001e20:	428b      	cmp	r3, r1
 8001e22:	d9e8      	bls.n	8001df6 <ILI9341_Draw_String+0x22>
				y = y + (size*8);
 8001e24:	4447      	add	r7, r8
				x = 1;
 8001e26:	2401      	movs	r4, #1
 8001e28:	e7e5      	b.n	8001df6 <ILI9341_Draw_String+0x22>
		hh=1;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <ILI9341_Draw_String+0x9c>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		while (*str)
 8001e32:	e00d      	b.n	8001e50 <ILI9341_Draw_String+0x7c>
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8001e34:	9501      	str	r5, [sp, #4]
 8001e36:	9200      	str	r2, [sp, #0]
 8001e38:	4653      	mov	r3, sl
 8001e3a:	464a      	mov	r2, r9
 8001e3c:	4639      	mov	r1, r7
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff fd22 	bl	8001888 <ILI9341_Draw_Char>
			x += hh*8;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <ILI9341_Draw_String+0x9c>)
 8001e46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001e4a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			*str++;
 8001e4e:	3601      	adds	r6, #1
		while (*str)
 8001e50:	7832      	ldrb	r2, [r6, #0]
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	d0cc      	beq.n	8001df0 <ILI9341_Draw_String+0x1c>
			if ((x+(size*8))>X_SIZE)
 8001e56:	00e8      	lsls	r0, r5, #3
 8001e58:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8001e5c:	4903      	ldr	r1, [pc, #12]	@ (8001e6c <ILI9341_Draw_String+0x98>)
 8001e5e:	6809      	ldr	r1, [r1, #0]
 8001e60:	428b      	cmp	r3, r1
 8001e62:	d9e7      	bls.n	8001e34 <ILI9341_Draw_String+0x60>
				y = y + (size*8);
 8001e64:	4407      	add	r7, r0
				x = 1;
 8001e66:	2401      	movs	r4, #1
 8001e68:	e7e4      	b.n	8001e34 <ILI9341_Draw_String+0x60>
 8001e6a:	bf00      	nop
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000060 	.word	0x20000060

08001e74 <ILI9341_Draw_Double_Pixel>:
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8001e74:	2800      	cmp	r0, #0
 8001e76:	db25      	blt.n	8001ec4 <ILI9341_Draw_Double_Pixel+0x50>
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	4615      	mov	r5, r2
 8001e7c:	461c      	mov	r4, r3
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8001e7e:	2900      	cmp	r1, #0
 8001e80:	db06      	blt.n	8001e90 <ILI9341_Draw_Double_Pixel+0x1c>
 8001e82:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <ILI9341_Draw_Double_Pixel+0x54>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4290      	cmp	r0, r2
 8001e88:	d202      	bcs.n	8001e90 <ILI9341_Draw_Double_Pixel+0x1c>
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4299      	cmp	r1, r3
 8001e8e:	d300      	bcc.n	8001e92 <ILI9341_Draw_Double_Pixel+0x1e>
}
 8001e90:	bd70      	pop	{r4, r5, r6, pc}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8001e92:	3b01      	subs	r3, #1
 8001e94:	3a01      	subs	r2, #1
 8001e96:	f7ff fce9 	bl	800186c <ILI9341_Set_Address>
	DC_COMMAND;
 8001e9a:	4e0c      	ldr	r6, [pc, #48]	@ (8001ecc <ILI9341_Draw_Double_Pixel+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	4630      	mov	r0, r6
 8001ea2:	f7fe fe04 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8001ea6:	202c      	movs	r0, #44	@ 0x2c
 8001ea8:	f7ff faae 	bl	8001408 <ILI9341_SPI_Send>
	DC_DATA;
 8001eac:	2201      	movs	r2, #1
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f7fe fdfc 	bl	8000aae <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color1);
 8001eb6:	b2e8      	uxtb	r0, r5
 8001eb8:	f7ff faa6 	bl	8001408 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color2);
 8001ebc:	b2e0      	uxtb	r0, r4
 8001ebe:	f7ff faa3 	bl	8001408 <ILI9341_SPI_Send>
 8001ec2:	e7e5      	b.n	8001e90 <ILI9341_Draw_Double_Pixel+0x1c>
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <MX_GPIO_Init>:
}

/** Pinout Configuration
*/
static void MX_GPIO_Init(void)
{
 8001ed0:	b500      	push	{lr}
 8001ed2:	b08b      	sub	sp, #44	@ 0x2c

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	9200      	str	r2, [sp, #0]
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <MX_GPIO_Init+0x88>)
 8001eda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001edc:	f041 0101 	orr.w	r1, r1, #1
 8001ee0:	6319      	str	r1, [r3, #48]	@ 0x30
 8001ee2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ee4:	f001 0101 	and.w	r1, r1, #1
 8001ee8:	9100      	str	r1, [sp, #0]
 8001eea:	9900      	ldr	r1, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	9201      	str	r2, [sp, #4]
 8001eee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ef0:	f041 0102 	orr.w	r1, r1, #2
 8001ef4:	6319      	str	r1, [r3, #48]	@ 0x30
 8001ef6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ef8:	f001 0102 	and.w	r1, r1, #2
 8001efc:	9101      	str	r1, [sp, #4]
 8001efe:	9901      	ldr	r1, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f00:	9202      	str	r2, [sp, #8]
 8001f02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f04:	f041 0104 	orr.w	r1, r1, #4
 8001f08:	6319      	str	r1, [r3, #48]	@ 0x30
 8001f0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f0c:	f001 0104 	and.w	r1, r1, #4
 8001f10:	9102      	str	r1, [sp, #8]
 8001f12:	9902      	ldr	r1, [sp, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f14:	9203      	str	r2, [sp, #12]
 8001f16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f18:	f041 0108 	orr.w	r1, r1, #8
 8001f1c:	6319      	str	r1, [r3, #48]	@ 0x30
 8001f1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f20:	f001 0108 	and.w	r1, r1, #8
 8001f24:	9103      	str	r1, [sp, #12]
 8001f26:	9903      	ldr	r1, [sp, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001f28:	9204      	str	r2, [sp, #16]
 8001f2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f2c:	f041 0110 	orr.w	r1, r1, #16
 8001f30:	6319      	str	r1, [r3, #48]	@ 0x30
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	9304      	str	r3, [sp, #16]
 8001f3a:	9b04      	ldr	r3, [sp, #16]

	GPIO_InitStruct.Pin 	= DC_Pin | CS_Pin | RESET_Pin;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001f44:	9207      	str	r2, [sp, #28]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 8001f46:	9208      	str	r2, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	a905      	add	r1, sp, #20
 8001f4a:	4804      	ldr	r0, [pc, #16]	@ (8001f5c <MX_GPIO_Init+0x8c>)
 8001f4c:	f7fe fcd2 	bl	80008f4 <HAL_GPIO_Init>

}
 8001f50:	b00b      	add	sp, #44	@ 0x2c
 8001f52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000

08001f60 <_Error_Handler>:
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001f60:	e7fe      	b.n	8001f60 <_Error_Handler>
	...

08001f64 <SystemClock_Config>:
{
 8001f64:	b500      	push	{lr}
 8001f66:	b095      	sub	sp, #84	@ 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002018 <SystemClock_Config+0xb4>)
 8001f6e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001f70:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001f74:	6411      	str	r1, [r2, #64]	@ 0x40
 8001f76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f78:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001f7c:	9201      	str	r2, [sp, #4]
 8001f7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f80:	9302      	str	r3, [sp, #8]
 8001f82:	4a26      	ldr	r2, [pc, #152]	@ (800201c <SystemClock_Config+0xb8>)
 8001f84:	6811      	ldr	r1, [r2, #0]
 8001f86:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001f8a:	6011      	str	r1, [r2, #0]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001f92:	9202      	str	r2, [sp, #8]
 8001f94:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f96:	2202      	movs	r2, #2
 8001f98:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f9e:	2110      	movs	r1, #16
 8001fa0:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa2:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fa4:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001faa:	22c0      	movs	r2, #192	@ 0xc0
 8001fac:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001fae:	2204      	movs	r2, #4
 8001fb0:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001fb2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb4:	a808      	add	r0, sp, #32
 8001fb6:	f7fe fd81 	bl	8000abc <HAL_RCC_OscConfig>
 8001fba:	bb20      	cbnz	r0, 8002006 <SystemClock_Config+0xa2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fc8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fcc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fd4:	2103      	movs	r1, #3
 8001fd6:	a803      	add	r0, sp, #12
 8001fd8:	f7fe ffaa 	bl	8000f30 <HAL_RCC_ClockConfig>
 8001fdc:	b9b8      	cbnz	r0, 800200e <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001fde:	f7ff f855 	bl	800108c <HAL_RCC_GetHCLKFreq>
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <SystemClock_Config+0xbc>)
 8001fe4:	fba3 3000 	umull	r3, r0, r3, r0
 8001fe8:	0980      	lsrs	r0, r0, #6
 8001fea:	f7fe fc59 	bl	80008a0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fee:	2004      	movs	r0, #4
 8001ff0:	f7fe fc6a 	bl	80008c8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f7fe fc40 	bl	8000880 <HAL_NVIC_SetPriority>
}
 8002000:	b015      	add	sp, #84	@ 0x54
 8002002:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002006:	219f      	movs	r1, #159	@ 0x9f
 8002008:	4806      	ldr	r0, [pc, #24]	@ (8002024 <SystemClock_Config+0xc0>)
 800200a:	f7ff ffa9 	bl	8001f60 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800200e:	21ad      	movs	r1, #173	@ 0xad
 8002010:	4804      	ldr	r0, [pc, #16]	@ (8002024 <SystemClock_Config+0xc0>)
 8002012:	f7ff ffa5 	bl	8001f60 <_Error_Handler>
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000
 8002020:	10624dd3 	.word	0x10624dd3
 8002024:	0803dcd8 	.word	0x0803dcd8

08002028 <main>:
{
 8002028:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 800202a:	f7fe fba3 	bl	8000774 <HAL_Init>
  SystemClock_Config();
 800202e:	f7ff ff99 	bl	8001f64 <SystemClock_Config>
  MX_GPIO_Init();
 8002032:	f7ff ff4d 	bl	8001ed0 <MX_GPIO_Init>
  ILI9341_Init();
 8002036:	f7ff fab9 	bl	80015ac <ILI9341_Init>
  ILI9341_Set_Rotation(0);
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff fbb8 	bl	80017b0 <ILI9341_Set_Rotation>
  HAL_Delay(500);
 8002040:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002044:	f7fe fbc2 	bl	80007cc <HAL_Delay>
  ILI9341_Fill_Screen(RED);
 8002048:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800204c:	f7ff fca8 	bl	80019a0 <ILI9341_Fill_Screen>
  HAL_Delay(500);
 8002050:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002054:	f7fe fbba 	bl	80007cc <HAL_Delay>
  ILI9341_Fill_Screen(GREEN);
 8002058:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800205c:	f7ff fca0 	bl	80019a0 <ILI9341_Fill_Screen>
  HAL_Delay(500);
 8002060:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002064:	f7fe fbb2 	bl	80007cc <HAL_Delay>
  ILI9341_Fill_Screen(BLUE);
 8002068:	201f      	movs	r0, #31
 800206a:	f7ff fc99 	bl	80019a0 <ILI9341_Fill_Screen>
  HAL_Delay(500);
 800206e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002072:	f7fe fbab 	bl	80007cc <HAL_Delay>
  ILI9341_Fill_Screen(BLACK);
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff fc92 	bl	80019a0 <ILI9341_Fill_Screen>
  HAL_Delay(500);
 800207c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002080:	f7fe fba4 	bl	80007cc <HAL_Delay>
  Display_Menu();
 8002084:	f7fe fa66 	bl	8000554 <Display_Menu>
  TP_Init();
 8002088:	f000 f900 	bl	800228c <TP_Init>
 800208c:	e016      	b.n	80020bc <main+0x94>
				  Display_Color_Picture();
 800208e:	f7fe fb25 	bl	80006dc <Display_Color_Picture>
				  state = 1;
 8002092:	4b29      	ldr	r3, [pc, #164]	@ (8002138 <main+0x110>)
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e033      	b.n	8002102 <main+0xda>
			  if(xtemp > 3400 && xtemp < 3900 && ytemp > 350 && ytemp < 750) {
 800209a:	f6a4 5449 	subw	r4, r4, #3401	@ 0xd49
 800209e:	b2a4      	uxth	r4, r4
 80020a0:	f5b4 7ff9 	cmp.w	r4, #498	@ 0x1f2
 80020a4:	d806      	bhi.n	80020b4 <main+0x8c>
 80020a6:	f5b0 7faf 	cmp.w	r0, #350	@ 0x15e
 80020aa:	d903      	bls.n	80020b4 <main+0x8c>
 80020ac:	f240 23ed 	movw	r3, #749	@ 0x2ed
 80020b0:	4298      	cmp	r0, r3
 80020b2:	d93b      	bls.n	800212c <main+0x104>
		  HAL_Delay(500);
 80020b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020b8:	f7fe fb88 	bl	80007cc <HAL_Delay>
	  tp_dev.scan(0);
 80020bc:	4c1f      	ldr	r4, [pc, #124]	@ (800213c <main+0x114>)
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	2000      	movs	r0, #0
 80020c2:	4798      	blx	r3
	  if(tp_dev.sta & TP_PRES_DOWN)
 80020c4:	f994 3010 	ldrsb.w	r3, [r4, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	daf7      	bge.n	80020bc <main+0x94>
		  xtemp = TP_Read_XOY(0xD0);
 80020cc:	20d0      	movs	r0, #208	@ 0xd0
 80020ce:	f000 f989 	bl	80023e4 <TP_Read_XOY>
 80020d2:	4604      	mov	r4, r0
		  ytemp = TP_Read_XOY(0x90);
 80020d4:	2090      	movs	r0, #144	@ 0x90
 80020d6:	f000 f985 	bl	80023e4 <TP_Read_XOY>
 80020da:	4605      	mov	r5, r0
		  if(0 == state)
 80020dc:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <main+0x110>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1da      	bne.n	800209a <main+0x72>
			  if(xtemp > 2700 && xtemp < 3400 && ytemp > 3000 && ytemp < 3500) {
 80020e4:	f6a4 238d 	subw	r3, r4, #2701	@ 0xa8d
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f240 22ba 	movw	r2, #698	@ 0x2ba
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d807      	bhi.n	8002102 <main+0xda>
 80020f2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80020f6:	4298      	cmp	r0, r3
 80020f8:	d903      	bls.n	8002102 <main+0xda>
 80020fa:	f640 53ab 	movw	r3, #3499	@ 0xdab
 80020fe:	4298      	cmp	r0, r3
 8002100:	d9c5      	bls.n	800208e <main+0x66>
			  if(xtemp > 1200 && xtemp < 1900 && ytemp > 3000 && ytemp < 3500) {
 8002102:	f2a4 44b1 	subw	r4, r4, #1201	@ 0x4b1
 8002106:	b2a4      	uxth	r4, r4
 8002108:	f240 23ba 	movw	r3, #698	@ 0x2ba
 800210c:	429c      	cmp	r4, r3
 800210e:	d8d1      	bhi.n	80020b4 <main+0x8c>
 8002110:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002114:	429d      	cmp	r5, r3
 8002116:	d9cd      	bls.n	80020b4 <main+0x8c>
 8002118:	f640 53ab 	movw	r3, #3499	@ 0xdab
 800211c:	429d      	cmp	r5, r3
 800211e:	d8c9      	bhi.n	80020b4 <main+0x8c>
				  Display_Text();
 8002120:	f7fe fa8e 	bl	8000640 <Display_Text>
				  state = 1;
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <main+0x110>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e7c3      	b.n	80020b4 <main+0x8c>
				  Display_Menu();
 800212c:	f7fe fa12 	bl	8000554 <Display_Menu>
				  state = 0;
 8002130:	4b01      	ldr	r3, [pc, #4]	@ (8002138 <main+0x110>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e7bd      	b.n	80020b4 <main+0x8c>
 8002138:	200000bc 	.word	0x200000bc
 800213c:	20000018 	.word	0x20000018

08002140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b510      	push	{r4, lr}
 8002142:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002144:	2400      	movs	r4, #0
 8002146:	9400      	str	r4, [sp, #0]
 8002148:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <HAL_MspInit+0x90>)
 800214a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800214c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44
 8002152:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002154:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002158:	9200      	str	r2, [sp, #0]
 800215a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	9401      	str	r4, [sp, #4]
 800215e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002160:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002170:	2007      	movs	r0, #7
 8002172:	f7fe fb73 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002176:	4622      	mov	r2, r4
 8002178:	4621      	mov	r1, r4
 800217a:	f06f 000b 	mvn.w	r0, #11
 800217e:	f7fe fb7f 	bl	8000880 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002182:	4622      	mov	r2, r4
 8002184:	4621      	mov	r1, r4
 8002186:	f06f 000a 	mvn.w	r0, #10
 800218a:	f7fe fb79 	bl	8000880 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800218e:	4622      	mov	r2, r4
 8002190:	4621      	mov	r1, r4
 8002192:	f06f 0009 	mvn.w	r0, #9
 8002196:	f7fe fb73 	bl	8000880 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800219a:	4622      	mov	r2, r4
 800219c:	4621      	mov	r1, r4
 800219e:	f06f 0004 	mvn.w	r0, #4
 80021a2:	f7fe fb6d 	bl	8000880 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80021a6:	4622      	mov	r2, r4
 80021a8:	4621      	mov	r1, r4
 80021aa:	f06f 0003 	mvn.w	r0, #3
 80021ae:	f7fe fb67 	bl	8000880 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80021b2:	4622      	mov	r2, r4
 80021b4:	4621      	mov	r1, r4
 80021b6:	f06f 0001 	mvn.w	r0, #1
 80021ba:	f7fe fb61 	bl	8000880 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021be:	4622      	mov	r2, r4
 80021c0:	4621      	mov	r1, r4
 80021c2:	f04f 30ff 	mov.w	r0, #4294967295
 80021c6:	f7fe fb5b 	bl	8000880 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ca:	b002      	add	sp, #8
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80021d4:	6802      	ldr	r2, [r0, #0]
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_SPI_MspInit+0x48>)
 80021d8:	429a      	cmp	r2, r3
 80021da:	d000      	beq.n	80021de <HAL_SPI_MspInit+0xa>
 80021dc:	4770      	bx	lr
{
 80021de:	b500      	push	{lr}
 80021e0:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021e2:	2100      	movs	r1, #0
 80021e4:	9100      	str	r1, [sp, #0]
 80021e6:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80021ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80021f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80021f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin 	= GPIO_PIN_5|GPIO_PIN_5|GPIO_PIN_7;
 80021fc:	23a0      	movs	r3, #160	@ 0xa0
 80021fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode 	= GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8002204:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220a:	2305      	movs	r3, #5
 800220c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	a901      	add	r1, sp, #4
 8002210:	4803      	ldr	r0, [pc, #12]	@ (8002220 <HAL_SPI_MspInit+0x4c>)
 8002212:	f7fe fb6f 	bl	80008f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002216:	b007      	add	sp, #28
 8002218:	f85d fb04 	ldr.w	pc, [sp], #4
 800221c:	40013000 	.word	0x40013000
 8002220:	40020000 	.word	0x40020000

08002224 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002224:	4770      	bx	lr

08002226 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler>

08002228 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler>

0800222a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler>

0800222c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <UsageFault_Handler>

0800222e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222e:	4770      	bx	lr

08002230 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002230:	4770      	bx	lr

08002232 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002232:	4770      	bx	lr

08002234 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002236:	f7fe fab7 	bl	80007a8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800223a:	f7fe fb56 	bl	80008ea <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223e:	bd08      	pop	{r3, pc}

08002240 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002240:	490f      	ldr	r1, [pc, #60]	@ (8002280 <SystemInit+0x40>)
 8002242:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8002246:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <SystemInit+0x44>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002258:	2000      	movs	r0, #0
 800225a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8002262:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002266:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002268:	4a07      	ldr	r2, [pc, #28]	@ (8002288 <SystemInit+0x48>)
 800226a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002272:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002274:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002276:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800227a:	608b      	str	r3, [r1, #8]
#endif
}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00
 8002284:	40023800 	.word	0x40023800
 8002288:	24003010 	.word	0x24003010

0800228c <TP_Init>:
 * @parameters :None
 * @retvalue   :0-no calibration
								1-Has been calibrated
******************************************************************************/
uint8_t TP_Init(void)
{
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin 	= T_IRQ_Pin | T_DO_Pin;
 8002290:	2306      	movs	r3, #6
 8002292:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8002294:	2400      	movs	r4, #0
 8002296:	9402      	str	r4, [sp, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8002298:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 800229a:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	4e0c      	ldr	r6, [pc, #48]	@ (80022d0 <TP_Init+0x44>)
 800229e:	a901      	add	r1, sp, #4
 80022a0:	4630      	mov	r0, r6
 80022a2:	f7fe fb27 	bl	80008f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= T_CLK_Pin;
 80022a6:	2501      	movs	r5, #1
 80022a8:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80022aa:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80022ac:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 80022ae:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b0:	a901      	add	r1, sp, #4
 80022b2:	4630      	mov	r0, r6
 80022b4:	f7fe fb1e 	bl	80008f4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= T_DIN_Pin | T_CS_Pin;
 80022b8:	2330      	movs	r3, #48	@ 0x30
 80022ba:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80022bc:	9502      	str	r5, [sp, #8]
	GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80022be:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed 	= GPIO_SPEED_FREQ_LOW;
 80022c0:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c2:	a901      	add	r1, sp, #4
 80022c4:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <TP_Init+0x48>)
 80022c6:	f7fe fb15 	bl	80008f4 <HAL_GPIO_Init>

	return 1;
}
 80022ca:	4628      	mov	r0, r5
 80022cc:	b006      	add	sp, #24
 80022ce:	bd70      	pop	{r4, r5, r6, pc}
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800

080022d8 <TP_Write_Byte>:
{
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	4604      	mov	r4, r0
	for(count = 0; count < 8; count++)
 80022dc:	2500      	movs	r5, #0
 80022de:	e016      	b.n	800230e <TP_Write_Byte+0x36>
			T_DIN_OFF;
 80022e0:	2200      	movs	r2, #0
 80022e2:	2110      	movs	r1, #16
 80022e4:	4810      	ldr	r0, [pc, #64]	@ (8002328 <TP_Write_Byte+0x50>)
 80022e6:	f7fe fbe2 	bl	8000aae <HAL_GPIO_WritePin>
		num <<= 1;
 80022ea:	0064      	lsls	r4, r4, #1
 80022ec:	b2e4      	uxtb	r4, r4
		T_CLK_OFF;
 80022ee:	4e0f      	ldr	r6, [pc, #60]	@ (800232c <TP_Write_Byte+0x54>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	2101      	movs	r1, #1
 80022f4:	4630      	mov	r0, r6
 80022f6:	f7fe fbda 	bl	8000aae <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7fe fa66 	bl	80007cc <HAL_Delay>
		T_CLK_ON;
 8002300:	2201      	movs	r2, #1
 8002302:	4611      	mov	r1, r2
 8002304:	4630      	mov	r0, r6
 8002306:	f7fe fbd2 	bl	8000aae <HAL_GPIO_WritePin>
	for(count = 0; count < 8; count++)
 800230a:	3501      	adds	r5, #1
 800230c:	b2ed      	uxtb	r5, r5
 800230e:	2d07      	cmp	r5, #7
 8002310:	d808      	bhi.n	8002324 <TP_Write_Byte+0x4c>
		if(num & 0x80)
 8002312:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8002316:	d0e3      	beq.n	80022e0 <TP_Write_Byte+0x8>
			T_DIN_ON;
 8002318:	2201      	movs	r2, #1
 800231a:	2110      	movs	r1, #16
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <TP_Write_Byte+0x50>)
 800231e:	f7fe fbc6 	bl	8000aae <HAL_GPIO_WritePin>
 8002322:	e7e2      	b.n	80022ea <TP_Write_Byte+0x12>
}
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	bf00      	nop
 8002328:	40020800 	.word	0x40020800
 800232c:	40020400 	.word	0x40020400

08002330 <TP_Read_AD>:
{
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	4605      	mov	r5, r0
	T_CLK_OFF;
 8002334:	4c29      	ldr	r4, [pc, #164]	@ (80023dc <TP_Read_AD+0xac>)
 8002336:	2200      	movs	r2, #0
 8002338:	2101      	movs	r1, #1
 800233a:	4620      	mov	r0, r4
 800233c:	f7fe fbb7 	bl	8000aae <HAL_GPIO_WritePin>
	T_DIN_OFF;
 8002340:	4e27      	ldr	r6, [pc, #156]	@ (80023e0 <TP_Read_AD+0xb0>)
 8002342:	2200      	movs	r2, #0
 8002344:	2110      	movs	r1, #16
 8002346:	4630      	mov	r0, r6
 8002348:	f7fe fbb1 	bl	8000aae <HAL_GPIO_WritePin>
	T_CS_OFF;
 800234c:	2200      	movs	r2, #0
 800234e:	2120      	movs	r1, #32
 8002350:	4630      	mov	r0, r6
 8002352:	f7fe fbac 	bl	8000aae <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8002356:	4628      	mov	r0, r5
 8002358:	f7ff ffbe 	bl	80022d8 <TP_Write_Byte>
	HAL_Delay(6);
 800235c:	2006      	movs	r0, #6
 800235e:	f7fe fa35 	bl	80007cc <HAL_Delay>
	T_CLK_OFF;
 8002362:	2200      	movs	r2, #0
 8002364:	2101      	movs	r1, #1
 8002366:	4620      	mov	r0, r4
 8002368:	f7fe fba1 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800236c:	2001      	movs	r0, #1
 800236e:	f7fe fa2d 	bl	80007cc <HAL_Delay>
	T_CLK_ON;
 8002372:	2201      	movs	r2, #1
 8002374:	4611      	mov	r1, r2
 8002376:	4620      	mov	r0, r4
 8002378:	f7fe fb99 	bl	8000aae <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800237c:	2001      	movs	r0, #1
 800237e:	f7fe fa25 	bl	80007cc <HAL_Delay>
	T_CLK_OFF;
 8002382:	2200      	movs	r2, #0
 8002384:	2101      	movs	r1, #1
 8002386:	4620      	mov	r0, r4
 8002388:	f7fe fb91 	bl	8000aae <HAL_GPIO_WritePin>
	uint16_t Num = 0;
 800238c:	2400      	movs	r4, #0
	for(count = 0; count < 16; count++)
 800238e:	4625      	mov	r5, r4
 8002390:	e001      	b.n	8002396 <TP_Read_AD+0x66>
 8002392:	3501      	adds	r5, #1
 8002394:	b2ed      	uxtb	r5, r5
 8002396:	2d0f      	cmp	r5, #15
 8002398:	d818      	bhi.n	80023cc <TP_Read_AD+0x9c>
		Num <<= 1;
 800239a:	0064      	lsls	r4, r4, #1
 800239c:	b2a4      	uxth	r4, r4
		T_CLK_OFF;
 800239e:	4e0f      	ldr	r6, [pc, #60]	@ (80023dc <TP_Read_AD+0xac>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	2101      	movs	r1, #1
 80023a4:	4630      	mov	r0, r6
 80023a6:	f7fe fb82 	bl	8000aae <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe fa0e 	bl	80007cc <HAL_Delay>
		T_CLK_ON;
 80023b0:	2201      	movs	r2, #1
 80023b2:	4611      	mov	r1, r2
 80023b4:	4630      	mov	r0, r6
 80023b6:	f7fe fb7a 	bl	8000aae <HAL_GPIO_WritePin>
		if(T_DO) Num++;
 80023ba:	2104      	movs	r1, #4
 80023bc:	4630      	mov	r0, r6
 80023be:	f7fe fb6f 	bl	8000aa0 <HAL_GPIO_ReadPin>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d0e5      	beq.n	8002392 <TP_Read_AD+0x62>
 80023c6:	3401      	adds	r4, #1
 80023c8:	b2a4      	uxth	r4, r4
 80023ca:	e7e2      	b.n	8002392 <TP_Read_AD+0x62>
	Num >>= 4;
 80023cc:	0924      	lsrs	r4, r4, #4
	T_CS_ON;
 80023ce:	2201      	movs	r2, #1
 80023d0:	2120      	movs	r1, #32
 80023d2:	4803      	ldr	r0, [pc, #12]	@ (80023e0 <TP_Read_AD+0xb0>)
 80023d4:	f7fe fb6b 	bl	8000aae <HAL_GPIO_WritePin>
}
 80023d8:	4620      	mov	r0, r4
 80023da:	bd70      	pop	{r4, r5, r6, pc}
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800

080023e4 <TP_Read_XOY>:
{
 80023e4:	b530      	push	{r4, r5, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	4605      	mov	r5, r0
	for(i=0;i<READ_TIMES;i++) buf[i] = TP_Read_AD(xy);
 80023ea:	2400      	movs	r4, #0
 80023ec:	e009      	b.n	8002402 <TP_Read_XOY+0x1e>
 80023ee:	4628      	mov	r0, r5
 80023f0:	f7ff ff9e 	bl	8002330 <TP_Read_AD>
 80023f4:	ab04      	add	r3, sp, #16
 80023f6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80023fa:	f823 0c0c 	strh.w	r0, [r3, #-12]
 80023fe:	3401      	adds	r4, #1
 8002400:	b2a4      	uxth	r4, r4
 8002402:	2c04      	cmp	r4, #4
 8002404:	d9f3      	bls.n	80023ee <TP_Read_XOY+0xa>
	for(i=0;i<READ_TIMES-1; i++)
 8002406:	2000      	movs	r0, #0
 8002408:	e01a      	b.n	8002440 <TP_Read_XOY+0x5c>
		for(j = i+1; j < READ_TIMES; j++)
 800240a:	3301      	adds	r3, #1
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b04      	cmp	r3, #4
 8002410:	d815      	bhi.n	800243e <TP_Read_XOY+0x5a>
			if(buf[i] > buf[j])
 8002412:	aa04      	add	r2, sp, #16
 8002414:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002418:	f832 2c0c 	ldrh.w	r2, [r2, #-12]
 800241c:	a904      	add	r1, sp, #16
 800241e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8002422:	f831 1c0c 	ldrh.w	r1, [r1, #-12]
 8002426:	428a      	cmp	r2, r1
 8002428:	d9ef      	bls.n	800240a <TP_Read_XOY+0x26>
				buf[i] = buf[j];
 800242a:	ad04      	add	r5, sp, #16
 800242c:	eb05 0c40 	add.w	ip, r5, r0, lsl #1
 8002430:	f82c 1c0c 	strh.w	r1, [ip, #-12]
				buf[j] = temp;
 8002434:	eb05 0143 	add.w	r1, r5, r3, lsl #1
 8002438:	f821 2c0c 	strh.w	r2, [r1, #-12]
 800243c:	e7e5      	b.n	800240a <TP_Read_XOY+0x26>
	for(i=0;i<READ_TIMES-1; i++)
 800243e:	4620      	mov	r0, r4
 8002440:	2803      	cmp	r0, #3
 8002442:	d803      	bhi.n	800244c <TP_Read_XOY+0x68>
		for(j = i+1; j < READ_TIMES; j++)
 8002444:	1c44      	adds	r4, r0, #1
 8002446:	b2a4      	uxth	r4, r4
 8002448:	4623      	mov	r3, r4
 800244a:	e7e0      	b.n	800240e <TP_Read_XOY+0x2a>
	sum = 0;
 800244c:	2000      	movs	r0, #0
	for(i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++) sum += buf[i];
 800244e:	2301      	movs	r3, #1
 8002450:	e008      	b.n	8002464 <TP_Read_XOY+0x80>
 8002452:	aa04      	add	r2, sp, #16
 8002454:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002458:	f832 2c0c 	ldrh.w	r2, [r2, #-12]
 800245c:	4410      	add	r0, r2
 800245e:	b280      	uxth	r0, r0
 8002460:	3301      	adds	r3, #1
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b03      	cmp	r3, #3
 8002466:	d9f4      	bls.n	8002452 <TP_Read_XOY+0x6e>
	temp = sum / (READ_TIMES - 2 * LOST_VAL);
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <TP_Read_XOY+0x94>)
 800246a:	fba3 3000 	umull	r3, r0, r3, r0
}
 800246e:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8002472:	b005      	add	sp, #20
 8002474:	bd30      	pop	{r4, r5, pc}
 8002476:	bf00      	nop
 8002478:	aaaaaaab 	.word	0xaaaaaaab

0800247c <TP_Read_XY>:
{
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	4605      	mov	r5, r0
 8002480:	460c      	mov	r4, r1
	xtemp = TP_Read_XOY(CMD_RDX);
 8002482:	4f06      	ldr	r7, [pc, #24]	@ (800249c <TP_Read_XY+0x20>)
 8002484:	7838      	ldrb	r0, [r7, #0]
 8002486:	f7ff ffad 	bl	80023e4 <TP_Read_XOY>
 800248a:	4606      	mov	r6, r0
	ytemp = TP_Read_XOY(CMD_RDY);
 800248c:	7878      	ldrb	r0, [r7, #1]
 800248e:	f7ff ffa9 	bl	80023e4 <TP_Read_XOY>
	*x = xtemp;
 8002492:	802e      	strh	r6, [r5, #0]
	*y = ytemp;
 8002494:	8020      	strh	r0, [r4, #0]
}
 8002496:	2001      	movs	r0, #1
 8002498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800249a:	bf00      	nop
 800249c:	20000014 	.word	0x20000014

080024a0 <TP_Read_XY2>:
{
 80024a0:	b530      	push	{r4, r5, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	4605      	mov	r5, r0
 80024a6:	460c      	mov	r4, r1
    flag = TP_Read_XY(&x1 ,&y1);
 80024a8:	a901      	add	r1, sp, #4
 80024aa:	f10d 0006 	add.w	r0, sp, #6
 80024ae:	f7ff ffe5 	bl	800247c <TP_Read_XY>
    if(flag == 0)
 80024b2:	b908      	cbnz	r0, 80024b8 <TP_Read_XY2+0x18>
}
 80024b4:	b003      	add	sp, #12
 80024b6:	bd30      	pop	{r4, r5, pc}
    flag = TP_Read_XY(&x2, &y2);
 80024b8:	4669      	mov	r1, sp
 80024ba:	f10d 0002 	add.w	r0, sp, #2
 80024be:	f7ff ffdd 	bl	800247c <TP_Read_XY>
    if(flag == 0)
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d0f6      	beq.n	80024b4 <TP_Read_XY2+0x14>
    if(((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE))
 80024c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80024ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d803      	bhi.n	80024da <TP_Read_XY2+0x3a>
 80024d2:	f103 0131 	add.w	r1, r3, #49	@ 0x31
 80024d6:	4291      	cmp	r1, r2
 80024d8:	da05      	bge.n	80024e6 <TP_Read_XY2+0x46>
 80024da:	4293      	cmp	r3, r2
 80024dc:	d31e      	bcc.n	800251c <TP_Read_XY2+0x7c>
 80024de:	f102 0131 	add.w	r1, r2, #49	@ 0x31
 80024e2:	4299      	cmp	r1, r3
 80024e4:	db1c      	blt.n	8002520 <TP_Read_XY2+0x80>
    && ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 80024e6:	f8bd 0000 	ldrh.w	r0, [sp]
 80024ea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80024ee:	4288      	cmp	r0, r1
 80024f0:	d803      	bhi.n	80024fa <TP_Read_XY2+0x5a>
 80024f2:	f100 0c31 	add.w	ip, r0, #49	@ 0x31
 80024f6:	458c      	cmp	ip, r1
 80024f8:	da04      	bge.n	8002504 <TP_Read_XY2+0x64>
 80024fa:	4288      	cmp	r0, r1
 80024fc:	d312      	bcc.n	8002524 <TP_Read_XY2+0x84>
 80024fe:	3131      	adds	r1, #49	@ 0x31
 8002500:	4281      	cmp	r1, r0
 8002502:	db11      	blt.n	8002528 <TP_Read_XY2+0x88>
        *x = (x1 + x2) / 2;
 8002504:	4413      	add	r3, r2
 8002506:	105b      	asrs	r3, r3, #1
 8002508:	802b      	strh	r3, [r5, #0]
        *y = (y1 + y2) / 2;
 800250a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800250e:	f8bd 2000 	ldrh.w	r2, [sp]
 8002512:	4413      	add	r3, r2
 8002514:	105b      	asrs	r3, r3, #1
 8002516:	8023      	strh	r3, [r4, #0]
        return 1;
 8002518:	2001      	movs	r0, #1
 800251a:	e7cb      	b.n	80024b4 <TP_Read_XY2+0x14>
    	return 0;
 800251c:	2000      	movs	r0, #0
 800251e:	e7c9      	b.n	80024b4 <TP_Read_XY2+0x14>
 8002520:	2000      	movs	r0, #0
 8002522:	e7c7      	b.n	80024b4 <TP_Read_XY2+0x14>
 8002524:	2000      	movs	r0, #0
 8002526:	e7c5      	b.n	80024b4 <TP_Read_XY2+0x14>
 8002528:	2000      	movs	r0, #0
 800252a:	e7c3      	b.n	80024b4 <TP_Read_XY2+0x14>

0800252c <TP_Scan>:
{
 800252c:	b510      	push	{r4, lr}
 800252e:	4604      	mov	r4, r0
	if(T_IRQ == 0)
 8002530:	2102      	movs	r1, #2
 8002532:	4833      	ldr	r0, [pc, #204]	@ (8002600 <TP_Scan+0xd4>)
 8002534:	f7fe fab4 	bl	8000aa0 <HAL_GPIO_ReadPin>
 8002538:	2800      	cmp	r0, #0
 800253a:	d14d      	bne.n	80025d8 <TP_Scan+0xac>
		if(tp)
 800253c:	b1b4      	cbz	r4, 800256c <TP_Scan+0x40>
			TP_Read_XY2(&tp_dev.x,&tp_dev.y);
 800253e:	4831      	ldr	r0, [pc, #196]	@ (8002604 <TP_Scan+0xd8>)
 8002540:	f100 0112 	add.w	r1, r0, #18
 8002544:	3010      	adds	r0, #16
 8002546:	f7ff ffab 	bl	80024a0 <TP_Read_XY2>
		if((tp_dev.sta & TP_PRES_DOWN) == 0)
 800254a:	4b2e      	ldr	r3, [pc, #184]	@ (8002604 <TP_Scan+0xd8>)
 800254c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	db06      	blt.n	8002562 <TP_Scan+0x36>
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES;
 8002554:	4b2b      	ldr	r3, [pc, #172]	@ (8002604 <TP_Scan+0xd8>)
 8002556:	22c0      	movs	r2, #192	@ 0xc0
 8002558:	751a      	strb	r2, [r3, #20]
			tp_dev.x0 = tp_dev.x;
 800255a:	8a1a      	ldrh	r2, [r3, #16]
 800255c:	819a      	strh	r2, [r3, #12]
			tp_dev.y0 = tp_dev.y;
 800255e:	8a5a      	ldrh	r2, [r3, #18]
 8002560:	81da      	strh	r2, [r3, #14]
	return tp_dev.sta & TP_PRES_DOWN;
 8002562:	4b28      	ldr	r3, [pc, #160]	@ (8002604 <TP_Scan+0xd8>)
 8002564:	7d18      	ldrb	r0, [r3, #20]
}
 8002566:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 800256a:	bd10      	pop	{r4, pc}
		else if(TP_Read_XY2(&tp_dev.x,&tp_dev.y))
 800256c:	4825      	ldr	r0, [pc, #148]	@ (8002604 <TP_Scan+0xd8>)
 800256e:	f100 0112 	add.w	r1, r0, #18
 8002572:	3010      	adds	r0, #16
 8002574:	f7ff ff94 	bl	80024a0 <TP_Read_XY2>
 8002578:	2800      	cmp	r0, #0
 800257a:	d0e6      	beq.n	800254a <TP_Scan+0x1e>
	 		tp_dev.x = tp_dev.xfac * tp_dev.x + tp_dev.xoff;
 800257c:	4b21      	ldr	r3, [pc, #132]	@ (8002604 <TP_Scan+0xd8>)
 800257e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002582:	8a1a      	ldrh	r2, [r3, #16]
 8002584:	ee07 2a10 	vmov	s14, r2
 8002588:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800258c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002590:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002594:	ee07 2a90 	vmov	s15, r2
 8002598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800259c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a4:	ee17 2a90 	vmov	r2, s15
 80025a8:	821a      	strh	r2, [r3, #16]
			tp_dev.y = tp_dev.yfac * tp_dev.y + tp_dev.yoff;
 80025aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80025ae:	8a5a      	ldrh	r2, [r3, #18]
 80025b0:	ee07 2a10 	vmov	s14, r2
 80025b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025bc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 80025c0:	ee07 2a90 	vmov	s15, r2
 80025c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d0:	ee17 2a90 	vmov	r2, s15
 80025d4:	825a      	strh	r2, [r3, #18]
 80025d6:	e7b8      	b.n	800254a <TP_Scan+0x1e>
		if(tp_dev.sta & TP_PRES_DOWN)
 80025d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <TP_Scan+0xd8>)
 80025da:	7d1a      	ldrb	r2, [r3, #20]
 80025dc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db08      	blt.n	80025f6 <TP_Scan+0xca>
			tp_dev.x0 	= 0;
 80025e4:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <TP_Scan+0xd8>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	819a      	strh	r2, [r3, #12]
			tp_dev.y0 	= 0;
 80025ea:	81da      	strh	r2, [r3, #14]
			tp_dev.x  	= 0xffff;
 80025ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025f0:	821a      	strh	r2, [r3, #16]
			tp_dev.y 	= 0xffff;
 80025f2:	825a      	strh	r2, [r3, #18]
 80025f4:	e7b5      	b.n	8002562 <TP_Scan+0x36>
			tp_dev.sta&=~(1<<7);
 80025f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025fa:	4b02      	ldr	r3, [pc, #8]	@ (8002604 <TP_Scan+0xd8>)
 80025fc:	751a      	strb	r2, [r3, #20]
 80025fe:	e7b0      	b.n	8002562 <TP_Scan+0x36>
 8002600:	40020400 	.word	0x40020400
 8002604:	20000014 	.word	0x20000014

08002608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002640 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800260c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800260e:	e003      	b.n	8002618 <LoopCopyDataInit>

08002610 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002612:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002614:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002616:	3104      	adds	r1, #4

08002618 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002618:	480b      	ldr	r0, [pc, #44]	@ (8002648 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800261c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800261e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002620:	d3f6      	bcc.n	8002610 <CopyDataInit>
  ldr  r2, =_sbss
 8002622:	4a0b      	ldr	r2, [pc, #44]	@ (8002650 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002624:	e002      	b.n	800262c <LoopFillZerobss>

08002626 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002626:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002628:	f842 3b04 	str.w	r3, [r2], #4

0800262c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800262e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002630:	d3f9      	bcc.n	8002626 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002632:	f7ff fe05 	bl	8002240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002636:	f000 f811 	bl	800265c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263a:	f7ff fcf5 	bl	8002028 <main>
  bx  lr    
 800263e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002640:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002644:	0803dcf8 	.word	0x0803dcf8
  ldr  r0, =_sdata
 8002648:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800264c:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 8002650:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 8002654:	20000118 	.word	0x20000118

08002658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC_IRQHandler>
	...

0800265c <__libc_init_array>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	4d0d      	ldr	r5, [pc, #52]	@ (8002694 <__libc_init_array+0x38>)
 8002660:	4c0d      	ldr	r4, [pc, #52]	@ (8002698 <__libc_init_array+0x3c>)
 8002662:	1b64      	subs	r4, r4, r5
 8002664:	10a4      	asrs	r4, r4, #2
 8002666:	2600      	movs	r6, #0
 8002668:	42a6      	cmp	r6, r4
 800266a:	d109      	bne.n	8002680 <__libc_init_array+0x24>
 800266c:	4d0b      	ldr	r5, [pc, #44]	@ (800269c <__libc_init_array+0x40>)
 800266e:	4c0c      	ldr	r4, [pc, #48]	@ (80026a0 <__libc_init_array+0x44>)
 8002670:	f000 f818 	bl	80026a4 <_init>
 8002674:	1b64      	subs	r4, r4, r5
 8002676:	10a4      	asrs	r4, r4, #2
 8002678:	2600      	movs	r6, #0
 800267a:	42a6      	cmp	r6, r4
 800267c:	d105      	bne.n	800268a <__libc_init_array+0x2e>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	f855 3b04 	ldr.w	r3, [r5], #4
 8002684:	4798      	blx	r3
 8002686:	3601      	adds	r6, #1
 8002688:	e7ee      	b.n	8002668 <__libc_init_array+0xc>
 800268a:	f855 3b04 	ldr.w	r3, [r5], #4
 800268e:	4798      	blx	r3
 8002690:	3601      	adds	r6, #1
 8002692:	e7f2      	b.n	800267a <__libc_init_array+0x1e>
 8002694:	0803dcf0 	.word	0x0803dcf0
 8002698:	0803dcf0 	.word	0x0803dcf0
 800269c:	0803dcf0 	.word	0x0803dcf0
 80026a0:	0803dcf4 	.word	0x0803dcf4

080026a4 <_init>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	bf00      	nop
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr

080026b0 <_fini>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	bf00      	nop
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr
